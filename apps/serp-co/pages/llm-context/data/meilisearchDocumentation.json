[
  {
    "owner": "meilisearch",
    "repo": "documentation",
    "content": "TITLE: Adding Documents with Vector Embeddings (JSON)\nDESCRIPTION: Example of adding documents with vector embeddings for AI-powered search. It shows how to include _vectors field with embeddings and regenerate options for different embedders.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/documents.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 452,\n    \"title\": \"Female Trouble\",\n    \"overview\": \"Delinquent high school student Dawn Davenport runs away from home and embarks upon a life of crime.\",\n    \"_vectors\": {\n      \"default\": {\n        \"embeddings\": [0.1, 0.2, 0.3],\n        \"regenerate\": false\n      },\n      \"ollama\": {\n        \"embeddings\": [0.4, 0.12, 0.6],\n        \"regenerate\": true\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Mistral Embedder Settings in Meilisearch JSON\nDESCRIPTION: This JSON snippet demonstrates the configuration for setting up Mistral embeddings in Meilisearch. It includes the API key, dimensions, document template, and request/response structures for the Mistral API.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/embedders/mistral.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mistral\": {\n    \"source\": \"rest\",\n    \"apiKey\": \"<Mistral API Key>\",\n    \"dimensions\": 1024,\n    \"documentTemplate\": \"<Custom template (Optional, but recommended)>\",\n    \"url\": \"https://api.mistral.ai/v1/embeddings\",\n    \"request\": {\n      \"model\": \"mistral-embed\",\n      \"input\": [\"{{text}}\", \"{{..}}\"]\n    },\n    \"response\": {\n      \"data\": [\n        {\n          \"embedding\": \"{{embedding}}\"\n        },\n        \"{{..}}\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Meilisearch using Homebrew and launching the server\nDESCRIPTION: This snippet shows how to install the latest stable release of Meilisearch using Homebrew package manager for MacOS and then launch the Meilisearch server.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/install_meilisearch_locally.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Update brew and install Meilisearch\nbrew update && brew install meilisearch\n\n# Launch Meilisearch\nmeilisearch\n```\n\n----------------------------------------\n\nTITLE: Example of JSON Documents with Primary Key in Meilisearch\nDESCRIPTION: This snippet shows a JSON array containing two document examples for a book index. Each document has an 'id' field which serves as the primary key, along with other attributes like title, author, genres, and price.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/getting_started/primary_key.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 1,\n    \"title\": \"Diary of a Wimpy Kid: Rodrick Rules\",\n    \"author\": \"Jeff Kinney\",\n    \"genres\": [\"comedy\",\"humor\"],\n    \"price\": 5.00\n  },\n  {\n    \"id\": 2,\n    \"title\": \"Black Leopard, Red Wolf\",\n    \"author\": \"Marlon James\",\n    \"genres\": [\"fantasy\",\"drama\"],\n    \"price\": 5.00\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Filter Expression Example\nDESCRIPTION: Filter expression demonstrating how to filter movies by release date and title criteria.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_search_results.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nfilter=\"release_date > 795484800 AND title = 'Avengers'\"\n```\n\n----------------------------------------\n\nTITLE: Creating a JSON Document in Meilisearch\nDESCRIPTION: This snippet demonstrates how to structure a document in JSON format for Meilisearch. It includes various field types such as strings, numbers, and arrays.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/getting_started/documents.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1564,\n  \"title\": \"Kung Fu Panda\",\n  \"genres\": \"Children's Animation\",\n  \"release-year\": 2008,\n  \"cast\": [\n    { \"Jack Black\": \"Po\" },\n    { \"Jackie Chan\": \"Monkey\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Embedder for Meilisearch\nDESCRIPTION: This snippet shows how to configure an OpenAI embedder for Meilisearch using the /settings/embedders API subroute. It sets up the embedder with specific parameters including the source, model, and API key.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/retrieve_related_search_results.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -X POST 'MEILISEARCH_URL/indexes/movies/settings/embedders' \\\n  -H \"Authorization: Bearer MEILISEARCH_API_KEY\" \\\n  -H 'Content-Type: application/json' \\\n  --data-binary '{\n    \"movies-text\": {\n      \"source\": \"openAi\",\n      \"model\": \"text-embedding-ada-002\",\n      \"apiKey\": \"OPENAI_API_KEY\",\n      \"documentTemplate\": \"{{title}} {{overview}}\"\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Search Response Structure in JSON\nDESCRIPTION: Example of a JSON response from the Meilisearch search API. It includes hits (search results), pagination info, processing time, and the original query.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/search.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hits\": [\n    {\n      \"id\": 2770,\n      \"title\": \"American Pie 2\",\n      \"poster\": \"https://image.tmdb.org/t/p/w1280/q4LNgUnRfltxzp3gf1MAGiK5LhV.jpg\",\n      \"overview\": \"The whole gang are back and as close as ever. They decide to get even closer by spending the summer together at a beach house. They decide to hold the biggest…\",\n      \"release_date\": 997405200\n    },\n    {\n      \"id\": 190859,\n      \"title\": \"American Sniper\",\n      \"poster\": \"https://image.tmdb.org/t/p/w1280/svPHnYE7N5NAGO49dBmRhq0vDQ3.jpg\",\n      \"overview\": \"U.S. Navy SEAL Chris Kyle takes his sole mission—protect his comrades—to heart and becomes one of the most lethal snipers in American history. His pinpoint accuracy not only saves countless lives but also makes him a prime…\",\n      \"release_date\": 1418256000\n    },\n    …\n  ],\n  \"offset\": 0,\n  \"limit\": 20,\n  \"estimatedTotalHits\": 976,\n  \"processingTimeMs\": 35,\n  \"query\": \"american \"\n}\n```\n\n----------------------------------------\n\nTITLE: Example of a Single Document with Primary Key in Meilisearch\nDESCRIPTION: This snippet shows a single JSON document example with 'id' as the primary key. The document represents a book with attributes like title, author, genres, and price.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/getting_started/primary_key.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"title\": \"Diary of a Wimpy Kid\",\n    \"author\": \"Jeff Kinney\",\n    \"genres\": [\"comedy\",\"humor\"],\n    \"price\": 5.00\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Cohere Embedder Settings in Meilisearch\nDESCRIPTION: This JSON snippet demonstrates how to configure the embedder settings for Cohere in Meilisearch. It includes the API key, dimensions, document template, and request/response structures for the Cohere API.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/embedders/cohere.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cohere\": {\n    \"source\": \"rest\",\n    \"apiKey\": \"<Cohere API Key>\",\n    \"dimensions\": 1024,\n    \"documentTemplate\": \"<Custom template (Optional, but recommended)>\",\n    \"url\": \"https://api.cohere.com/v1/embed\",\n    \"request\": {\n      \"model\": \"embed-english-v3.0\",\n      \"texts\": [\n        \"{{text}}\",\n        \"{{..}}\"\n      ],\n      \"input_type\": \"search_document\"\n    },\n    \"response\": {\n      \"embeddings\": [\n        \"{{embedding}}\",\n        \"{{..}}\"\n      ]\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Conjunctive and Disjunctive Facets in Meilisearch\nDESCRIPTION: This snippet demonstrates a complex query combining both conjunctive and disjunctive facets. It filters for books in either English or French, that are both Fiction and Literature.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/facet_types.mdx#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n\"(language = English OR language = French) AND (genres = Fiction AND genres = Literature)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring InstantSearch in Vue main.js\nDESCRIPTION: Code to integrate InstantSearch into the Vue application's main.js file. This imports the Vue InstantSearch library and registers it with the Vue application.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/vue_quick_start.mdx#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { createApp } from 'vue';\nimport App from './App.vue';\nimport InstantSearch from 'vue-instantsearch/vue3/es';\n\nconst app = createApp(App);\napp.use(InstantSearch);\napp.mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Configuring Complete REST Embedder with API Key\nDESCRIPTION: Creates a complete embedder configuration including the API key for authentication with the provider and a document template for generating embeddings.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/configure_rest_embedder.mdx#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EMBEDDER_NAME\": {\n    \"source\": \"rest\",\n    \"url\": \"PROVIDER_URL\",\n    \"request\": {\n      \"model\": \"MODEL_NAME\",\n      \"input\": [\"{{text}}\", \"{{..}}\"],\n      \"encoding_format\": \"float\"\n    },\n    \"response\": {\n      \"data\": [\n        {\n          \"embedding\": \"{{embedding}}\"\n        },\n        \"{{..}}\"\n      ]\n    },\n    \"apiKey\": \"PROVIDER_API_KEY\",\n    \"documentTemplate\": \"SHORT_AND_RELEVANT_DOCUMENT_TEMPLATE\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Complete Search UI with Meilisearch in React\nDESCRIPTION: Builds a complete search interface by adding SearchBox and InfiniteHits components inside the InstantSearch wrapper. Includes a custom Hit component to display each search result and imports styling from instantsearch.css.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/react_quick_start.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { InstantSearch, SearchBox, InfiniteHits } from 'react-instantsearch';\nimport { instantMeiliSearch } from '@meilisearch/instant-meilisearch';\nimport 'instantsearch.css/themes/satellite.css';\n\nconst { searchClient } = instantMeiliSearch(\n  'https://ms-adf78ae33284-106.lon.meilisearch.io',\n  'a63da4928426f12639e19d62886f621130f3fa9ff3c7534c5d179f0f51c4f303'\n);\n\nconst App = () => (\n  <InstantSearch\n    indexName=\"steam-videogames\"\n    searchClient={searchClient}\n  >\n    <SearchBox />\n    <InfiniteHits hitComponent={Hit} />\n  </InstantSearch>\n);\n\nconst Hit = ({ hit }) => (\n  <article key={hit.id}>\n    <img src={hit.image} alt={hit.name} />\n    <h1>{hit.name}</h1>\n    <p>${hit.description}</p>\n  </article>\n);\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Filtering Meilisearch Search Results\nDESCRIPTION: Examples of using filter expressions in Meilisearch queries, demonstrating string syntax and array syntax for complex filters.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/search.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"(genres = horror OR genres = mystery) AND director = 'Jordan Peele'\"\n```\n\nLANGUAGE: json\nCODE:\n```\n[[\"genres = horror\", \"genres = mystery\"], \"director = 'Jordan Peele'\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Meilisearch Dependencies for React\nDESCRIPTION: Installs the required libraries for integrating Meilisearch search functionality: react-instantsearch for UI components, instant-meilisearch for connecting to Meilisearch, and instantsearch.css for basic styling.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/react_quick_start.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-instantsearch @meilisearch/instant-meilisearch instantsearch.css\n```\n\n----------------------------------------\n\nTITLE: Creating an NDJSON Document in Meilisearch\nDESCRIPTION: This snippet shows how to represent a document in NDJSON format for Meilisearch. NDJSON is a more compact representation where each line is a valid JSON object.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/getting_started/documents.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"id\": 1564, \"title\": \"Kung Fu Panda\", \"genres\": \"Children's Animation\", \"release-year\": 2008, \"cast\": [{ \"Jack Black\": \"Po\" }, { \"Jackie Chan\": \"Monkey\" }] }\n```\n\n----------------------------------------\n\nTITLE: Creating a Tenant Token with Meilisearch JavaScript SDK\nDESCRIPTION: JavaScript code to generate a tenant token that filters search results based on the patient's name. It uses the Meilisearch JavaScript SDK to create a token with specific search rules for the appointments index.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/multitenancy_nodejs.mdx#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// search.js\n\nimport { Meilisearch } from 'meilisearch'\n\nconst apiKey = 'YOUR_SEARCH_API_KEY'\nconst apiKeyUid = 'YOUR_SEARCH_API_KEY_UID'\nconst indexName = 'appointments'\n\nconst client = new Meilisearch({\n\thost: 'https://edge.meilisearch.com', // Your Meilisearch host\n\tapiKey: apiKey\n})\n\nexport function createTenantToken(patientName) {\n  const searchRules = {\n    [indexName]: {\n      'filter': `patient = ${patientName}`\n    }\n  }\n\n  const tenantToken = client.generateTenantToken(\n    apiKeyUid,\n    searchRules,\n    {\n      expiresAt: new Date('2030-01-01'), // Choose an expiration date\n      apiKey: apiKey,\n    }\n  )\n  return tenantToken\n}\n```\n\n----------------------------------------\n\nTITLE: Facet Distribution Response Structure\nDESCRIPTION: Example JSON structure showing facet distribution in search results with document counts per facet value.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/search.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"facetDistribution\": {\n    \"FACET_A\": {\n      \"FACET_VALUE_X\": 6,\n      \"FACET_VALUE_Y\": 1\n    },\n    \"FACET_B\": {\n      \"FACET_VALUE_Z\": 3,\n      \"FACET_VALUE_W\": 9\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Index Object Structure in Meilisearch\nDESCRIPTION: Shows the structure of an index object containing basic metadata like uid, creation date, update date and primary key.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/indexes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uid\": \"movies\",\n  \"createdAt\": \"2022-02-10T07:45:15.628261Z\",\n  \"updatedAt\": \"2022-02-21T15:28:43.496574Z\",\n  \"primaryKey\": \"id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Embedder in Meilisearch\nDESCRIPTION: This curl command configures the embedder index setting with a source of 'userProvided' and specifies the dimensions of the vector space. It sets up a custom embedder named 'image2text' with 3 dimensions.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/search_with_user_provided_embeddings.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl \\\n  -X PATCH 'MEILISEARCH_URL/indexes/movies/settings' \\\n  -H 'Content-Type: application/json' \\\n  --data-binary '{\n    \"embedders\": {\n      \"image2text\": {\n        \"source\":  \"userProvided\",\n        \"dimensions\": 3\n      }\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Running Meilisearch using Docker\nDESCRIPTION: This snippet demonstrates how to pull the latest stable release of Meilisearch Docker image and run it in development mode with a master key.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/install_meilisearch_locally.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Fetch the latest version of Meilisearch image from DockerHub\ndocker pull getmeili/meilisearch:v1.14\n\n# Launch Meilisearch in development mode with a master key\ndocker run -it --rm \\\n    -p 7700:7700 \\\n    -e MEILI_ENV='development' \\\n    -v $(pwd)/meili_data:/meili_data \\\n    getmeili/meilisearch:v1.14\n# Use ${pwd} instead of $(pwd) in PowerShell\n```\n\n----------------------------------------\n\nTITLE: Performing Semantic Search with Meilisearch Embedder in JSON\nDESCRIPTION: This JSON query demonstrates how to perform a semantic search using the configured embedder. It sets the semanticRatio to 1 for pure semantic search and specifies the embedder to use.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/embedders/huggingface.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"q\": \"QUERY_TERMS\",\n  \"hybrid\": {\n    \"semanticRatio\": 1,\n    \"embedder\": \"hf-inference\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mixed Array and String Filter in Meilisearch\nDESCRIPTION: The same complex filter implemented by mixing array and string syntax for more readable construction.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_28\n\nLANGUAGE: plaintext\nCODE:\n```\n[[\"genres = comedy\", \"genres = horror\"], \"NOT director = 'Jordan Peele'\"]\n```\n\n----------------------------------------\n\nTITLE: Initial Setup and Environment Validation\nDESCRIPTION: Basic setup code that loads environment variables and validates their presence, including imports and initial configuration.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/langchain.mdx#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# setup.py\n\nimport os\nfrom dotenv import load_dotenv # remove if not using dotenv\nfrom langchain.vectorstores import Meilisearch\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.document_loaders import JSONLoader\n\nload_dotenv() # remove if not using dotenv\n\n# exit if missing env vars\nif \"MEILI_HTTP_ADDR\" not in os.environ:\n    raise Exception(\"Missing MEILI_HTTP_ADDR env var\")\nif \"MEILI_API_KEY\" not in os.environ:\n    raise Exception(\"Missing MEILI_API_KEY env var\")\nif \"OPENAI_API_KEY\" not in os.environ:\n    raise Exception(\"Missing OPENAI_API_KEY env var\")\n\n# Setup code will go here 👇\n```\n\n----------------------------------------\n\nTITLE: Generic Documentation Search Bar Integration\nDESCRIPTION: HTML implementation of Meilisearch search functionality for any documentation website, including required CSS and JavaScript setup.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/search_bar_for_docs.mdx#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/docs-searchbar.js@{version}/dist/cdn/docs-searchbar.min.css\" />\n  </head>\n\n  <body>\n    <input type=\"search\" id=\"search-bar-input\">\n    <script src=\"https://cdn.jsdelivr.net/npm/docs-searchbar.js@{version}/dist/cdn/docs-searchbar.min.js\"></script>\n    <script>\n      docsSearchBar({\n        hostUrl: '<your-meilisearch-host-url>',\n        apiKey: '<your-meilisearch-api-key>',\n        indexUid: 'docs',\n        inputSelector: '#search-bar-input',\n        debug: true // Set debug to true if you want to inspect the dropdown\n      });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Converting ISO 8601 Date Format to UNIX Timestamp in JavaScript\nDESCRIPTION: JavaScript code that converts an ISO 8601 formatted date string to a UNIX timestamp in seconds. The example shows how to use Date.parse() to get milliseconds, then convert to seconds for proper timestamp format.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/working_with_dates.mdx#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nlet game = {\n  \"id\": 0,\n  \"title\": \"Return of the Obra Dinn\",\n  \"genre\": \"adventure\",\n  \"release_date\": \"2018-10-18T00:00Z\"\n};\n\nconst timestampInMilliseconds = Date.parse(game.release_date); // Date.parse returns the timestamp in milliseconds\nconst timestamp = timestampInMilliseconds / 1000; // UNIX timestamps must be in seconds\n\ngame = {\n  \"id\": 0,\n  \"title\": \"Return of the Obra Dinn\",\n  \"genre\": \"adventure\",\n  \"release_date\": \"2018-10-18T00:00Z\",\n  \"release_timestamp\": timestamp\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Search UI with Custom Results Display\nDESCRIPTION: Complete implementation of a search interface with a search box and customized results display. Includes styling via instantsearch.css and templates for formatting search results with images and descriptions.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/vue_quick_start.mdx#2025-04-16_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n<template>\n  <ais-instant-search :search-client=\"searchClient\" index-name=\"steam-videogames\">\n  <ais-search-box />\n    <ais-hits>\n      <template v-slot:item=\"{ item }\">\n\t  <div>\n\t    <img :src=\"item.image\" align=\"left\" :alt=\"item.name\"/>\n          <h2>{{ item.name }}</h2>\n\t    <p> {{ item.description }}</p>\n\t  </div>\n      </template>\n    </ais-hits>\n  </ais-instant-search>\n</template>\n\n<script>\nimport { instantMeiliSearch } from \"@meilisearch/instant-meilisearch\";\nimport \"instantsearch.css/themes/satellite-min.css\";\n\n\nexport default {\ndata() {\n    return {\n    searchClient: instantMeiliSearch(\n        'https://ms-adf78ae33284-106.lon.meilisearch.io',\n        'a63da4928426f12639e19d62886f621130f3fa9ff3c7534c5d179f0f51c4f303',\n    ).searchClient,\n    };\n},\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Meilisearch Task Object Structure in JSON\nDESCRIPTION: Example of a complete task object showing the structure and possible values for a failed index deletion operation. The object includes task identification, status, timing, and error details.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/tasks.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uid\": 4,\n  \"batchUids\": 0,\n  \"indexUid\": \"movie\",\n  \"status\": \"failed\",\n  \"type\": \"indexDeletion\",\n  \"canceledBy\": null,\n  \"details\": {\n    \"deletedDocuments\": 0\n  },\n  \"error\": {\n    \"message\": \"Index `movie` not found.\",\n    \"code\": \"index_not_found\",\n    \"type\": \"invalid_request\",\n    \"link\": \"https://docs.meilisearch.com/errors#index_not_found\"\n  },\n  \"duration\": \"PT0.001192S\",\n  \"enqueuedAt\": \"2022-08-04T12:28:15.159167Z\",\n  \"startedAt\": \"2022-08-04T12:28:15.161996Z\",\n  \"finishedAt\": \"2022-08-04T12:28:15.163188Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Filter with Multiple Conditions\nDESCRIPTION: Advanced filter expression combining multiple conditions with AND/OR operators and parentheses for proper grouping.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_search_results.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nfilter=\"title = 'Batman' AND (director = 'Tim Burton' OR director = 'Christopher Nolan')\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Meilisearch Docker Image\nDESCRIPTION: Command to pull a specific version of the Meilisearch Docker image from Docker Hub. The example uses version v1.14, but users should select their preferred version from the available tags.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/docker.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker pull getmeili/meilisearch:v1.14\n```\n\n----------------------------------------\n\nTITLE: Similar Documents Response Format - Meilisearch API\nDESCRIPTION: Example JSON response format when retrieving similar documents from Meilisearch. Shows the structure including hits array with document details, processing metadata, and pagination information.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/similar.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hits\": [\n    {\n      \"id\": \"299537\",\n      \"title\": \"Captain Marvel\"\n    },\n    {\n      \"id\": \"166428\",\n      \"title\": \"How to Train Your Dragon: The Hidden World\"\n    }\n    {\n      \"id\": \"287947\",\n      \"title\": \"Shazam!\"\n    }\n  ],\n  \"id\": \"23\",\n  \"processingTimeMs\": 0,\n  \"limit\": 20,\n  \"offset\": 0,\n  \"estimatedTotalHits\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Filter with Parentheses in Meilisearch\nDESCRIPTION: A filter using parentheses to ensure correct operator precedence, returning comedy and horror movies released after March 1995.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\n(genres = horror OR genres = comedy) AND release_date > 795484800\n```\n\n----------------------------------------\n\nTITLE: Creating Meilisearch Component with Vue\nDESCRIPTION: This Vue component initializes a Meilisearch client using the provided host, API key, and index name. It wraps the InstantSearch component and allows for custom content via slots.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/laravel_multitenancy.mdx#2025-04-16_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { instantMeiliSearch } from \"@meilisearch/instant-meilisearch\"\n\nconst props = defineProps<{\n  host: string,\n  apiKey: string,\n  indexName: string,\n}>()\n\nconst { searchClient } = instantMeiliSearch(props.host, props.apiKey)\n</script>\n\n<template>\n  <ais-instant-search :search-client=\"searchClient\" :index-name=\"props.indexName\">\n    <!-- Slots allow you to render content inside this component, e.g. search results -->\n    <slot name=\"default\"></slot>\n  </ais-instant-search>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Key Object Structure in JSON for Meilisearch API\nDESCRIPTION: This JSON object represents the structure of a key in Meilisearch. It includes properties such as name, description, key, uid, actions, indexes, expiresAt, createdAt, and updatedAt. This structure is used when creating, retrieving, or managing API keys.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/keys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Default Search API Key\",\n  \"description\": \"Use it to search from the frontend code\",\n  \"key\": \"0a6e572506c52ab0bd6195921575d23092b7f0c284ab4ac86d12346c33057f99\",\n  \"uid\": \"74c9c733-3368-4738-bbe5-1d18a5fecb37\",\n  \"actions\": [\n    \"search\"\n  ],\n  \"indexes\": [\n    \"*\"\n  ],\n  \"expiresAt\": null,\n  \"createdAt\": \"2021-08-11T10:00:00Z\",\n  \"updatedAt\": \"2021-08-11T10:00:00Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Documents to Meilisearch Index (JSON)\nDESCRIPTION: Example of the JSON body for adding or replacing documents in a Meilisearch index. It demonstrates the structure of a document with fields like id, title, poster, overview, and release_date.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/documents.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 287947,\n    \"title\": \"Shazam\",\n    \"poster\": \"https://image.tmdb.org/t/p/w1280/xnopI5Xtky18MPhK40cZAGAOVeV.jpg\",\n    \"overview\": \"A boy is given the ability to become an adult superhero in times of need with a single magic word.\",\n    \"release_date\": \"2019-03-23\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Meilisearch Using the Command-Line Installer\nDESCRIPTION: Downloads and runs the Meilisearch installer script to get the latest version of Meilisearch.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/running_production.mdx#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Install Meilisearch latest version from the script\ncurl -L https://install.meilisearch.com | sh\n```\n\n----------------------------------------\n\nTITLE: Complex String Filter in Meilisearch\nDESCRIPTION: A complex filter using string syntax and parentheses to return comedy or horror movies not directed by Jordan Peele.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\n\"(genres = comedy OR genres = horror) AND director != 'Jordan Peele'\"\n```\n\n----------------------------------------\n\nTITLE: Updating Documents in Meilisearch (JSON)\nDESCRIPTION: Example of updating an existing document in Meilisearch. It shows how to partially update a document by providing only the fields that need to be changed or added.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/documents.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 287947,\n    \"title\": \"Shazam ⚡️\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Persistence with Docker Volumes\nDESCRIPTION: Command to run Meilisearch with a mounted volume for data persistence. This ensures data is retained between container restarts by storing it in the host machine's directory.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/docker.mdx#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it --rm \\\n  -p 7700:7700 \\\n  -v $(pwd)/meili_data:/meili_data \\\n  getmeili/meilisearch:v1.14\n```\n\n----------------------------------------\n\nTITLE: Default Meilisearch Settings Object in JSON\nDESCRIPTION: The default structure of the settings object for a Meilisearch index. This shows all available fields that can be modified.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"displayedAttributes\": [\n    \"*\"\n  ],\n  \"searchableAttributes\": [\n    \"*\"\n  ],\n  \"filterableAttributes\": [],\n  \"sortableAttributes\": [],\n  \"rankingRules\":\n  [\n    \"words\",\n    \"typo\",\n    \"proximity\",\n    \"attribute\",\n    \"sort\",\n    \"exactness\"\n  ],\n  \"stopWords\": [],\n  \"nonSeparatorTokens\": [],\n  \"separatorTokens\": [],\n  \"dictionary\": [],\n  \"synonyms\": {},\n  \"distinctAttribute\": null,\n  \"typoTolerance\": {\n    \"enabled\": true,\n    \"minWordSizeForTypos\": {\n      \"oneTypo\": 5,\n      \"twoTypos\": 9\n    },\n    \"disableOnWords\": [],\n    \"disableOnAttributes\": []\n  },\n  \"faceting\": {\n    \"maxValuesPerFacet\": 100\n  },\n  \"pagination\": {\n    \"maxTotalHits\": 1000\n  },\n  \"proximityPrecision\": \"byWord\",\n  \"facetSearch\": true,\n  \"prefixSearch\": \"indexingTime\",\n  \"searchCutoffMs\": null,\n  \"embedders\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the Meilisearch Client in React\nDESCRIPTION: Sets up the instantMeiliSearch client to connect to a Meilisearch instance containing Steam video game data. This initializes the search client with a URL and API key for authentication.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/react_quick_start.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { instantMeiliSearch } from '@meilisearch/instant-meilisearch';\n\nconst { searchClient } = instantMeiliSearch(\n  'https://ms-adf78ae33284-106.lon.meilisearch.io',\n  'a63da4928426f12639e19d62886f621130f3fa9ff3c7534c5d179f0f51c4f303'\n);\n```\n\n----------------------------------------\n\nTITLE: Preparing JSON Documents for Geosearch in Meilisearch\nDESCRIPTION: Example of how to structure JSON documents with _geo fields for geosearch functionality in Meilisearch. The _geo field must contain an object with lat and lng keys representing latitude and longitude.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/geosearch.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"name\": \"Nàpiz' Milano\",\n  \"address\": \"Viale Vittorio Veneto, 30, 20124, Milan, Italy\",\n  \"type\": \"pizza\",\n  \"rating\": 9,\n  \"_geo\": {\n    \"lat\": 45.4777599, \n    \"lng\": 9.1967508\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ranking Score Response Example in JSON\nDESCRIPTION: Example JSON response showing search results with ranking scores for a 'dragon' query, demonstrating how Meilisearch assigns relevance scores to search results.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/search.mdx#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hits\": [\n    {\n      \"id\": 31072,\n      \"title\": \"Dragon\",\n      \"overview\": \"In a desperate attempt to save her kingdom…\",\n      \"_rankingScore\": 0.92\n    },\n    {\n      \"id\": 70057,\n      \"title\": \"Dragon\",\n      \"overview\": \"A sinful martial arts expert wants…\",\n      \"_rankingScore\": 0.91\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: OR Operator Filter in Meilisearch\nDESCRIPTION: A filter combining two conditions with OR to return documents that are either horror or comedy.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\ngenres = horror OR genres = comedy\n```\n\n----------------------------------------\n\nTITLE: Querying Search Results with Limit and Offset in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Meilisearch JavaScript SDK to query search results with limit and offset parameters. It retrieves the first ten films in a movies database for the search term 'tarkovsky'.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/pagination.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = await index.search(\"tarkovsky\", { limit: 10, offset: 0 });\n```\n\n----------------------------------------\n\nTITLE: Complete Embedder Configuration - JSON\nDESCRIPTION: Final embedder configuration with document template for converting documents into text format using Liquid templating.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/getting_started_with_ai_search.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"products-openai\": {\n    \"source\": \"openAi\",\n    \"model\": \"text-embedding-3-small\",\n    \"apiKey\": \"OPEN_AI_API_KEY\",\n    \"documentTemplate\": \"An object used in a kitchen named '{{doc.name}}'\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response from Meilisearch API after Document Addition\nDESCRIPTION: This JSON response is returned after successfully adding documents to an index named 'books' with a specified primary key. It shows the task details including the taskUid, status, and enqueuedAt timestamp.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/getting_started/primary_key.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"books\",\n  \"status\": \"enqueued\",\n  \"type\": \"documentAdditionOrUpdate\",\n  \"enqueuedAt\": \"2022-09-20T12:08:55.463926Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing CSV Documents for Geosearch in Meilisearch\nDESCRIPTION: Example of how to structure CSV documents with _geo fields for geosearch functionality in Meilisearch. The _geo column must contain a comma-separated string of latitude and longitude.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/geosearch.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\n\"id:number\",\"name:string\",\"address:string\",\"type:string\",\"rating:number\",\"_geo:string\"\n\"1\",\"Nàpiz Milano\",\"Viale Vittorio Veneto, 30, 20124, Milan, Italy\",\"pizzeria\",9,\"45.4777599,9.1967508\"\n\"2\",\"Bouillon Pigalle\",\"22 Bd de Clichy, 75018 Paris, France\",\"french\",8,\"48.8826517,2.3352748\"\n\"3\",\"Artico Gelateria Tradizionale\",\"Via Dogana, 1, 20123 Milan, Italy\",\"ice cream\",10,\"48.8826517,2.3352748\"\n```\n\n----------------------------------------\n\nTITLE: Default Built-in Ranking Rules Order in Meilisearch\nDESCRIPTION: Shows the default order of Meilisearch's six built-in ranking rules that determine search result relevancy. This order can be modified using the update settings or update ranking rules endpoints.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/relevancy/ranking_rules.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"words\",\n  \"typo\",\n  \"proximity\",\n  \"attribute\",\n  \"sort\",\n  \"exactness\"\n]\n```\n\n----------------------------------------\n\nTITLE: Federated Multi-Search Response in JSON\nDESCRIPTION: Example JSON response for a federated multi-search request in Meilisearch. It combines results from multiple indexes into a single hits array, with each hit containing an additional _federation field to indicate its origin.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/multi_search.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hits\": [\n    {\n      \"id\": 42,\n      \"title\": \"Batman returns\",\n      \"overview\": …, \n      \"_federation\": {\n        \"indexUid\": \"movies\",\n        \"queriesPosition\": 0\n      }\n    },\n    {\n      \"comicsId\": \"batman-killing-joke\",\n      \"description\": …,\n      \"title\": \"Batman: the killing joke\",\n      \"_federation\": {\n        \"indexUid\": \"comics\",\n        \"queriesPosition\": 1\n      }\n    },\n    …\n  ],\n  \"processingTimeMs\": 0,\n  \"limit\": 20,\n  \"offset\": 0,\n  \"estimatedTotalHits\": 2,\n  \"semanticHitCount\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Disjunctive Facets in Meilisearch\nDESCRIPTION: This snippet shows a query for disjunctive facets, where at least one condition must be met. It filters for books that are either Fiction or Literature, or both.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/facet_types.mdx#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"genres = Fiction OR genres = Literature\"\n```\n\n----------------------------------------\n\nTITLE: Performing Hybrid Search with Meilisearch\nDESCRIPTION: This code snippet demonstrates how to perform a hybrid search using Meilisearch. It searches for movies with the term 'Batman' and uses both keyword and semantic search capabilities.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/retrieve_related_search_results.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -X POST 'MEILISEARCH_URL/indexes/movies/search' \\\n  -H \"Authorization: Bearer MEILISEARCH_API_KEY\" \\\n  -H 'Content-Type: application/json' \\\n  --data-binary '{\n    \"q\": \"Batman\",\n    \"hybrid\": {\n      \"semanticRatio\": 0.5,\n      \"embedder\": \"movies-text\"\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Verifying Meilisearch Production Configuration\nDESCRIPTION: Use curl to check if the Meilisearch instance is properly configured for production. This command sends a request to the /health endpoint over HTTPS and expects a 200 OK response with a specific body.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/deployment/digitalocean.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v https://<your-domain-name>/health\n```\n\n----------------------------------------\n\nTITLE: Perform AI-Powered Search - Shell\nDESCRIPTION: cURL command to execute an AI-powered search query using the configured embedder.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/getting_started_with_ai_search.mdx#2025-04-16_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncurl \\\n  -X POST 'MEILISEARCH_URL/indexes/kitchenware/search' \\\n  -H 'content-type: application/json' \\\n  --data-binary '{\n    \"q\": \"kitchen utensils made of wood\",\n    \"hybrid\": {\n      \"embedder\": \"products-openai\"\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Document Import and Embedding Generation\nDESCRIPTION: Code for loading JSON documents, generating OpenAI embeddings, and storing them in Meilisearch with vector search configuration.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/langchain.mdx#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# setup.py\n\n# previous code\n\n# Load documents\nloader = JSONLoader(\n    file_path=\"./movies-lite.json\",\n    jq_schema=\".[] | {id: .id, overview: .overview, title: .title}\",\n    text_content=False,\n)\ndocuments = loader.load()\nprint(\"Loaded {} documents\".format(len(documents)))\n\n# Store documents in Meilisearch\nembeddings = OpenAIEmbeddings()\nembedders = { \n        \"custom\": {\n            \"source\": \"userProvided\",\n            \"dimensions\": 1536\n        }\n    }\nembedder_name = \"custom\" \nvector_store = Meilisearch.from_documents(documents=documents, embedding=embeddings, embedders=embedders, embedder_name=embedder_name)\n\nprint(\"Started importing documents\")\n```\n\n----------------------------------------\n\nTITLE: Similarity Search Implementation\nDESCRIPTION: Implementation of semantic similarity search using the configured vector store and OpenAI embeddings to find similar documents.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/langchain.mdx#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# search.py\n\nimport os\nfrom dotenv import load_dotenv\nfrom langchain.vectorstores import Meilisearch\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nimport meilisearch\n\nload_dotenv()\n\n# You can use the same code as `setup.py` to check for missing env vars\n\n# Create the vector store\nclient = meilisearch.Client(\n    url=os.environ.get(\"MEILI_HTTP_ADDR\"),\n    api_key=os.environ.get(\"MEILI_API_KEY\"),\n)\nembeddings = OpenAIEmbeddings()\nvector_store = Meilisearch(client=client, embedding=embeddings)\n\n# Make similarity search\nembedder_name = \"custom\"\nquery = \"superhero fighting evil in a city at night\"\nresults = vector_store.similarity_search(\n    query=query,\n    embedder_name=embedder_name,\n    k=3,\n)\n\n# Display results\nfor result in results:\n    print(result.page_content)\n```\n\n----------------------------------------\n\nTITLE: Array Filter with OR Logic in Meilisearch\nDESCRIPTION: A filter using nested array syntax where inner elements are connected by OR, returning horror or comedy movies.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_25\n\nLANGUAGE: plaintext\nCODE:\n```\n[[\"genres = horror\", \"genres = comedy\"]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Meilisearch for Production Use\nDESCRIPTION: Updates the Meilisearch configuration file with production settings, including master key and data storage paths.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/running_production.mdx#2025-04-16_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nenv = \"production\"\nmaster_key = \"MASTER_KEY\"\ndb_path = \"/var/lib/meilisearch/data\"\ndump_dir = \"/var/lib/meilisearch/dumps\"\nsnapshot_dir = \"/var/lib/meilisearch/snapshots\"\n```\n\n----------------------------------------\n\nTITLE: Initialize Embedder Configuration - JSON\nDESCRIPTION: Basic embedder object configuration with a custom name for use with Meilisearch.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/getting_started_with_ai_search.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"products-openai\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Application with Vite\nDESCRIPTION: Creates a new React application using Vite as the build tool with the React template. This is the first step in setting up a project for Meilisearch integration.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/react_quick_start.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest my-app -- --template react\n```\n\n----------------------------------------\n\nTITLE: Configuring Searchable Attributes in Meilisearch\nDESCRIPTION: This example shows how to configure the searchable attributes for a movie database in Meilisearch. It sets the order of importance for searchable fields and excludes certain fields from being searched.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/relevancy/displayed_searchable_attributes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"searchableAttributes\": [\n    \"title\",\n    \"overview\",\n    \"genres\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Master Key Environment Variable (UNIX)\nDESCRIPTION: Commands to set the master key as an environment variable and launch Meilisearch in UNIX systems.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/basic_security.mdx#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport MEILI_MASTER_KEY=\"MASTER_KEY\"\n./meilisearch\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents with GET Request in Meilisearch\nDESCRIPTION: This snippet demonstrates the JSON response format when retrieving documents using a GET request to the /documents endpoint. It includes document data with fields like id, title, overview, and release date.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/documents.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"id\": 364,\n      \"title\": \"Batman Returns\",\n      \"overview\": \"While Batman deals with a deformed man calling himself the Penguin, an employee of a corrupt businessman transforms into the Catwoman.\",\n      \"genres\": [\n        \"Action\",\n        \"Fantasy\"\n      ],\n      \"poster\": \"https://image.tmdb.org/t/p/w500/jKBjeXM7iBBV9UkUcOXx3m7FSHY.jpg\",\n      \"release_date\": 708912000\n    },\n    {\n      \"id\": 13851,\n      \"title\": \" Batman: Gotham Knight\",\n      \"overview\": \"A collection of key events mark Bruce Wayne's life as he journeys from beginner to Dark Knight.\",\n      \"genres\": [\n        \"Animation\",\n        \"Action\",\n        \"Adventure\"\n      ],\n      \"poster\": \"https://image.tmdb.org/t/p/w500/f3xUrqo7yEiU0guk2Ua3Znqiw6S.jpg\",\n      \"release_date\": 1215475200\n    }\n  ],\n  \"offset\": 0,\n  \"limit\": 2,\n  \"total\": 5403\n}\n```\n\n----------------------------------------\n\nTITLE: Non-federated Multi-Search Response in JSON\nDESCRIPTION: Example JSON response for a non-federated multi-search request in Meilisearch. It includes results from multiple queries across different indexes, showing hits, processing time, and other metadata for each query.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/multi_search.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"indexUid\": \"movies\",\n      \"hits\": [\n        {\n          \"id\": 13682,\n          \"title\": \"Pooh's Heffalump Movie\",\n          …\n        },\n        …\n      ],\n      \"query\": \"pooh\",\n      \"processingTimeMs\": 26,\n      \"limit\": 5,\n      \"offset\": 0,\n      \"estimatedTotalHits\": 22\n    },\n    {\n      \"indexUid\": \"movies\",\n      \"hits\": [\n        {\n          \"id\": 12,\n          \"title\": \"Finding Nemo\",\n          …\n        },\n        …\n      ],\n      \"query\": \"nemo\",\n      \"processingTimeMs\": 5,\n      \"limit\": 5,\n      \"offset\": 0,\n      \"estimatedTotalHits\": 11\n    },\n    {\n      \"indexUid\": \"movie_ratings\",\n      \"hits\": [\n        {\n          \"id\": \"Us\",\n          \"director\": \"Jordan Peele\",\n          …\n        }\n      ],\n      \"query\": \"Us\",\n      \"processingTimeMs\": 0,\n      \"limit\": 20,\n      \"offset\": 0,\n      \"estimatedTotalHits\": 1\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Search Results by Author in Meilisearch (JavaScript)\nDESCRIPTION: This code snippet shows how to use the sort parameter to group search results by author in ascending order.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/sort_search_results.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclient.index('books').search('butler', {\n  sort: ['author:asc']\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Meilisearch using cURL and launching the server\nDESCRIPTION: This snippet demonstrates how to download the latest stable release of Meilisearch using cURL and then launch the Meilisearch server.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/install_meilisearch_locally.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Meilisearch\ncurl -L https://install.meilisearch.com | sh\n\n# Launch Meilisearch\n./meilisearch\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx as Reverse Proxy for Meilisearch\nDESCRIPTION: Creates a Nginx configuration file that redirects all HTTP requests to the Meilisearch instance running locally on port 7700.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/running_production.mdx#2025-04-16_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncat << EOF > /etc/nginx/sites-enabled/meilisearch\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n    server_name _;\n    location / {\n        proxy_pass  http://localhost:7700;\n    }\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Setting Displayed Attributes in Meilisearch\nDESCRIPTION: This code snippet demonstrates how to set the displayed attributes for a movie database in Meilisearch. It specifies which fields will be returned in search results.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/relevancy/displayed_searchable_attributes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"displayedAttributes\": [\n    \"title\",\n    \"overview\",\n    \"release_date\",\n    \"genres\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Ranking Score Details in Meilisearch Search Results\nDESCRIPTION: This example demonstrates the structure of a search response when the _rankingScoreDetail parameter is used, showing detailed ranking information for search results including word matching, typo scoring, and custom ranking rule application.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/search.mdx#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hits\": [\n    {\n      \"id\": 31072,\n      \"title\": \"Dragon\",\n      \"overview\": \"In a desperate attempt to save her kingdom…\",\n      …\n      \"_rankingScoreDetails\": {\n        \"words\": {\n          \"order\": 0,\n          \"matchingWords\": 4,\n          \"maxMatchingWords\": 4,\n          \"score\": 1.0\n        },\n        \"typo\": {\n          \"order\": 2,\n          \"typoCount\": 1,\n          \"maxTypoCount\": 4,\n          \"score\": 0.75\n        },\n        \"name:asc\": {\n          \"order\": 1,\n          \"value\": \"Dragon\"\n        }\n      }\n    },\n    …\n  ],\n  …\n}\n```\n\n----------------------------------------\n\nTITLE: Range Operator (TO) Filter in Meilisearch\nDESCRIPTION: A filter using the TO operator to return documents with user ratings between 80 and 89 inclusive.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nrating.users 80 TO 89\n```\n\n----------------------------------------\n\nTITLE: Updating Embedder Settings in Meilisearch\nDESCRIPTION: JSON body structure for updating embedder settings in Meilisearch. This shows all the available configuration options that can be set for an embedder, including source, URL, API key, model, and other advanced settings.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default\": {\n    \"source\": <String>,\n    \"url\": <String>,\n    \"apiKey\": <String>,\n    \"model\": <String>,\n    \"documentTemplate\": <String>,\n    \"documentTemplateMaxBytes\": <Integer>,\n    \"dimensions\": <Integer>,\n    \"revision\": <String>,\n    \"distribution\": {\n      \"mean\": <Float>,\n      \"sigma\": <Float>\n    },\n    \"request\": { … },\n    \"response\": { … },\n    \"headers\": { … },\n    \"binaryQuantized\": <Boolean>,\n    \"pooling\": <String>,\n    \"indexingEmbedder\": { … },\n    \"searchEmbedder\": { … }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting Large Documents for Meilisearch using JavaScript\nDESCRIPTION: Node.js script to split large documents into smaller chunks for better Meilisearch performance. It reads a JSON dataset, splits the 'text' field by paragraphs, and creates new documents for each paragraph.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/improve_relevancy_large_documents.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n#!/usr/bin/env node\n\nconst datasetPath = process.argv[2];\nconst datasetFile = fs.readFileSync(datasetPath);\nconst documents = JSON.parse(datasetFile);\n\nconst splitDocuments = [];\n\nfor (let documentNumber = documents.length, i = 0; i < documentNumber; i += 1) {\n  const document = documents[i];\n  const story = document.text;\n\n  const paragraphs = story.split(\"\\n\\n\");\n  \n  for (let paragraphNumber = paragraphs.length, o = 0; o < paragraphNumber; o += 1) {\n    splitDocuments.push({\n      \"id\": document.id,\n      \"title\": document.title,\n      \"author\": document.author,\n      \"text\": paragraphs[o]\n    });\n  }\n}\n\nfs.writeFileSync(\"stories-split.json\", JSON.stringify(splitDocuments));\n```\n\n----------------------------------------\n\nTITLE: Performing Semantic Search with Meilisearch API\nDESCRIPTION: This JSON snippet shows how to structure a semantic search request using the Meilisearch API. It includes the search query and hybrid search configuration with semantic ratio and embedder specification.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/embedders/cohere.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"q\": \"<Query made by the user>\",\n  \"hybrid\": {\n    \"semanticRatio\": 1,\n    \"embedder\": \"cohere\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Filter Expression for Equality in Meilisearch\nDESCRIPTION: A simple filter expression that returns movies with the genre 'horror'. This demonstrates the basic structure of conditions in filter expressions.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngenres = horror\n```\n\n----------------------------------------\n\nTITLE: Sample Book Document Structure in JSON\nDESCRIPTION: Example of a document structure in the books dataset, showing fields like id, title, genres, publisher, language, author, description, format, and rating that can be used for faceted search.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/search_with_facet_filters.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 5,\n  \"title\": \"Hard Times\",\n  \"genres\": [\"Classics\",\"Fiction\", \"Victorian\", \"Literature\"],\n  \"publisher\": \"Penguin Classics\",\n  \"language\": \"English\",\n  \"author\": \"Charles Dickens\",\n  \"description\": \"Hard Times is a novel of social […] \",\n  \"format\": \"Hardcover\",\n  \"rating\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Meilisearch Indexes via cURL\nDESCRIPTION: Creates three separate indexes (profiles, chats, and tickets) by sending POST requests with JSON data files to Meilisearch.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/multi_search/performing_federated_search.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl  -X POST 'MEILISEARCH_URL/indexes/profiles'  -H 'Content-Type: application/json'  --data-binary @crm-profiles.json &&\ncurl  -X POST 'MEILISEARCH_URL/indexes/chats'  -H 'Content-Type: application/json'  --data-binary @crm-chats.json &&\ncurl  -X POST 'MEILISEARCH_URL/indexes/tickets'  -H 'Content-Type: application/json'  --data-binary @crm-tickets.json\n```\n\n----------------------------------------\n\nTITLE: Retrieving Embedder Settings Response in Meilisearch\nDESCRIPTION: Example JSON response when retrieving embedder settings for a Meilisearch index. This shows a configured OpenAI embedder with its source, API key, model, document template, and dimensions settings.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default\": {\n    \"source\":  \"openAi\",\n    \"apiKey\": \"OPENAI_API_KEY\",\n    \"model\": \"text-embedding-3-small\",\n    \"documentTemplate\": \"A movie titled {{doc.title}} whose description starts with {{doc.overview|truncatewords: 20}}\",\n    \"dimensions\": 1536\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Vectorized Documents to Meilisearch\nDESCRIPTION: This curl command uploads documents with vector data to Meilisearch. Each document includes an 'id', a '_vectors' field containing the embedding vector for the 'image2text' embedder, and a 'text' field with the document content.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/search_with_user_provided_embeddings.mdx#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST -H 'content-type: application/json' \\\n'localhost:7700/indexes/products/documents' \\\n--data-binary '[\n    { \"id\": 0, \"_vectors\": {\"image2text\": [0, 0.8, -0.2]}, \"text\": \"frying pan\" },\n    { \"id\": 1, \"_vectors\": {\"image2text\": [1, -0.2, 0]}, \"text\": \"baking dish\" }\n]'\n```\n\n----------------------------------------\n\nTITLE: Enabling and Starting Meilisearch Service\nDESCRIPTION: Enables the Meilisearch service to start on system boot and immediately starts the service.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/running_production.mdx#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl enable meilisearch\nsystemctl start meilisearch\n```\n\n----------------------------------------\n\nTITLE: Example Search Response in Meilisearch API\nDESCRIPTION: Sample JSON response from a Meilisearch search query, showing hits, pagination info, and processing time.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/search.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hits\": [\n    {\n      \"id\": 2770,\n      \"title\": \"American Pie 2\",\n      \"poster\": \"https://image.tmdb.org/t/p/w1280/q4LNgUnRfltxzp3gf1MAGiK5LhV.jpg\",\n      \"overview\": \"The whole gang are back and as close as ever. They decide to get even closer by spending the summer together at a beach house. They decide to hold the biggest…\",\n      \"release_date\": 997405200\n    },\n    {\n      \"id\": 190859,\n      \"title\": \"American Sniper\",\n      \"poster\": \"https://image.tmdb.org/t/p/w1280/svPHnYE7N5NAGO49dBmRhq0vDQ3.jpg\",\n      \"overview\": \"U.S. Navy SEAL Chris Kyle takes his sole mission—protect his comrades—to heart and becomes one of the most lethal snipers in American history. His pinpoint accuracy not only saves countless lives but also makes him a prime…\",\n      \"release_date\": 1418256000\n    },\n    …\n  ],\n  \"offset\": 0,\n  \"limit\": 20,\n  \"estimatedTotalHits\": 976,\n  \"processingTimeMs\": 35,\n  \"query\": \"american \"\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Highlight Tags Example in JSON\nDESCRIPTION: Example showing how highlightPreTag and highlightPostTag can be used to customize the highlighting markup with span tags and CSS classes.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/search.mdx#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 50393,\n  \"title\": \"Kung Fu Panda Holiday\",\n  \"poster\": \"https://image.tmdb.org/t/p/w1280/gp18R42TbSUlw9VnXFqyecm52lq.jpg\",\n  \"overview\": \"The Winter Feast is Po's favorite holiday. Every year he and his father hang decorations, cook together, and serve noodle soup to the villagers. But this year Shifu informs Po that as Dragon Warrior, it is his duty to host the formal Winter Feast at the Jade Palace. Po is caught between his obligations as the Dragon Warrior and his family traditions: between Shifu and Mr. Ping.\",\n  \"release_date\": 1290729600,\n  \"_formatted\": {\n    \"id\": 50393,\n    \"title\": \"Kung Fu Panda Holiday\",\n    \"poster\": \"https://image.tmdb.org/t/p/w1280/gp18R42TbSUlw9VnXFqyecm52lq.jpg\",\n    \"overview\": \"The <span class=\\\"highlight\\\">Winter Feast</span> is Po's favorite holiday. Every year he and his father hang decorations, cook together, and serve noodle soup to the villagers. But this year Shifu informs Po that as Dragon Warrior, it is his duty to host the formal <span class=\\\"highlight\\\">Winter Feast</span> at the Jade Palace. Po is caught between his obligations as the Dragon Warrior and his family traditions: between Shifu and Mr. Ping.\",\n    \"release_date\": 1290729600\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Navigation Button States\nDESCRIPTION: Demonstrates how to manage the disabled state of Next and Previous buttons based on the current page number and total pages available.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/pagination.mdx#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nbuttonNext.disabled = results.page === results.totalPages;\nbuttonPrevious.disabled = results.page === 1;\n```\n\n----------------------------------------\n\nTITLE: Example Tenant Token Payload in JSON\nDESCRIPTION: This snippet demonstrates the structure of a typical tenant token payload in Meilisearch. It includes an expiration date, API key UID, and search rules for a specific index.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/tenant_token_reference.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exp\": 1646756934,\n  \"apiKeyUid\": \"at5cd97d-5a4b-4226-a868-2d0eb6d197ab\",\n  \"searchRules\": {\n    \"INDEX_NAME\": {\n      \"filter\": \"attribute = value\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching data from Algolia index\nDESCRIPTION: JavaScript code to fetch all documents from an Algolia index using the browseObjects method.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/algolia_migration.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet records = [];\nawait algoliaIndex.browseObjects({\n    batch: (hits) => {\n      records = records.concat(hits);\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Meilisearch Documentation Scraper\nDESCRIPTION: JSON configuration file for the docs-scraper tool that defines how to extract content from documentation pages, including index settings and content selectors.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/search_bar_for_docs.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"index_uid\": \"docs\",\n  \"start_urls\": [\n    \"https://www.example.com/doc/\"\n  ],\n  \"sitemap_urls\": [\n    \"https://www.example.com/sitemap.xml\"\n  ],\n  \"stop_urls\": [],\n  \"selectors\": {\n    \"lvl0\": {\n      \"selector\": \".docs-lvl0\",\n      \"global\": true,\n      \"default_value\": \"Documentation\"\n    },\n    \"lvl1\": {\n      \"selector\": \".docs-lvl1\",\n      \"global\": true,\n      \"default_value\": \"Chapter\"\n    },\n    \"lvl2\": \".docs-content .docs-lvl2\",\n    \"lvl3\": \".docs-content .docs-lvl3\",\n    \"lvl4\": \".docs-content .docs-lvl4\",\n    \"lvl5\": \".docs-content .docs-lvl5\",\n    \"lvl6\": \".docs-content .docs-lvl6\",\n    \"text\": \".docs-content p, .docs-content li\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Express.js Server for Tenant Tokens\nDESCRIPTION: JavaScript code that sets up an Express.js server with an endpoint to generate and serve tenant tokens. The endpoint accepts a patient ID as a query parameter and returns a token specific to that patient.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/multitenancy_nodejs.mdx#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// server.js\n\nimport express from 'express'\nimport { createTenantToken } from './search.js'\n\nconst server = express()\n\nserver.get('/token', async (request, response) => {\n  const { id: patientId } = request.query\n  const token = createTenantToken(patientId)\n  return response.json({ token });\n})\n\nserver.listen(3000, () => {\n  console.log('Server is running on port 3000')\n})\n```\n\n----------------------------------------\n\nTITLE: Nested Object Attribute Ranking in Meilisearch\nDESCRIPTION: Shows how to configure ranking order for nested object attributes using dot notation. This configuration gives different weights to nested fields, with 'review.critic' having higher priority than 'review.user'.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/relevancy/attribute_ranking_order.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"title\", \n  \"review.critic\", \n  \"overview\", \n  \"review.user\"\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Documents with Function in Meilisearch (Shell)\nDESCRIPTION: Example of using a RHAI function to update documents in Meilisearch. It demonstrates how to use the experimental feature to edit documents by applying a function to the title field.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/documents.mdx#2025-04-16_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncurl \\\n-X POST 'MEILISEARCH_URL/indexes/INDEX_NAME/documents/edit' \\\n-H 'Content-Type: application/json' \\\n--data-binary '{\n  \"function\": \"doc.title = `${doc.title.to_upper()}`\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Enhanced Organization Model with Meilisearch Tenant Token Generation in PHP\nDESCRIPTION: This code extends the Organization model to automatically generate and store Meilisearch tenant tokens. It uses Laravel's model events to generate tokens when organizations are retrieved from the database, ensuring data access is restricted by organization_id.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/laravel_multitenancy.mdx#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse DateTime;\nuse Laravel\\Scout\\EngineManager;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasMany;\nuse Illuminate\\Support\\Facades\\Log;\n\nclass Organization extends Model\n{\n\n    public function contacts(): HasMany\n    {\n        return $this->hasMany(Contact::class);\n    }\n\n    protected static function booted()\n    {\n        static::retrieved(function (Organization $organization) {\n            // You may want to add some logic to skip generating tokens in certain environments\n            if (env('SCOUT_DRIVER') === 'array' && env('APP_ENV') === 'testing') {\n                $organization->meilisearch_token = 'fake-tenant-token';\n                return;\n            }\n\n            // Early return if the organization already has a token\n            if ($organization->meilisearch_token) {\n                Log::debug('Organization ' . $organization->id . ': already has a token');\n                return;\n            }\n            Log::debug('Generating tenant token for organization ID: ' . $organization->id);\n\n            // The object belows is used to generate a tenant token that:\n            // • applies to all indexes\n            // • filters only documents where `organization_id` is equal to this org ID\n            $searchRules = (object) [\n                '*' => (object) [\n                    'filter' => 'organization_id = ' . $organization->id,\n                ]\n            ];\n\n            // Replace with your own Search API key and API key UID\n            $meiliApiKey = env('MEILISEARCH_SEARCH_KEY');\n            $meiliApiKeyUid = env('MEILISEARCH_SEARCH_KEY_UID');\n\n            // Generate the token\n            $token = self::generateMeiliTenantToken($meiliApiKeyUid, $searchRules, $meiliApiKey);\n\n            // Save the token in the database\n            $organization->meilisearch_token = $token;\n            $organization->save();\n        });\n    }\n\n    protected static function generateMeiliTenantToken($meiliApiKeyUid, $searchRules, $meiliApiKey)\n    {\n        $meilisearch = resolve(EngineManager::class)->engine();\n\n        return $meilisearch->generateTenantToken(\n            $meiliApiKeyUid,\n            $searchRules,\n            [\n                'apiKey' => $meiliApiKey,\n                'expiresAt' => new DateTime('2030-12-31'),\n            ]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparison Operator Filter in Meilisearch\nDESCRIPTION: A filter using the greater than operator to return documents with a user rating above 85.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nrating.users > 85\n```\n\n----------------------------------------\n\nTITLE: NOT Operator Filter in Meilisearch\nDESCRIPTION: A filter using the NOT operator to return documents whose 'genres' field doesn't contain 'horror' and documents with a missing 'genres' field.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\nNOT genres = horror\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Embedder with Hugging Face Inference Endpoints in JSON\nDESCRIPTION: This JSON configuration sets up a Meilisearch embedder that connects to a Hugging Face Inference Endpoint. It includes the API connection details, embedding dimensions, document template, and request/response structure for the model.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/embedders/huggingface.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hf-inference\": {\n    \"source\": \"rest\",\n    \"url\": \"ENDPOINT_URL\",\n    \"apiKey\": \"API_KEY\",\n    \"dimensions\": 384,\n    \"documentTemplate\": \"CUSTOM_LIQUID_TEMPLATE\",\n    \"request\": {\n      \"inputs\": [\"{{text}}\", \"{{..}}\"],\n      \"model\": \"baai/bge-small-en-v1.5\"\n    },\n    \"response\": [\"{{embedding}}\", \"{{..}}\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Tenant Token with Third-Party JWT Library\nDESCRIPTION: Example showing how to generate a Meilisearch tenant token using the node-jsonwebtoken library. Demonstrates setting up token payload with search rules, API key UID, and expiration time.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/tenant_tokens.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst jwt = require('jsonwebtoken');\n\nconst apiKey = 'my_api_key';\nconst apiKeyUid = 'ac5cd97d-5a4b-4226-a868-2d0eb6d197ab';\nconst currentUserID = 'a_user_id';\n\nconst tokenPayload = {\n  searchRules: {\n    'patient_medical_records': {\n      'filter': `user_id = ${currentUserID}`\n     }\n  },\n  apiKeyUid: apiKeyUid,\n  exp: parseInt(Date.now() / 1000) + 20 * 60 // 20 minutes\n};\n\nconst token = jwt.sign(tokenPayload, apiKey, {algorithm: 'HS256'});\n```\n\n----------------------------------------\n\nTITLE: Performing Hybrid Search with User-Provided Embeddings in Meilisearch\nDESCRIPTION: This curl command shows how to perform a hybrid search in Meilisearch, combining vector search with traditional text search. It includes both the vectorized query and a text query.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/image_search_with_user_provided_embeddings.mdx#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST -H 'content-type: application/json' \\\n  'localhost:7700/indexes/products/search' \\\n  --data-binary '{ \n    \"vector\": VECTORIZED_QUERY,\n    \"hybrid\": {\n      \"embedder\": \"EMBEDDER_NAME\",\n    }\n    \"q\": \"QUERY\",\n  }'\n```\n\n----------------------------------------\n\nTITLE: Add OpenAI API Key - JSON\nDESCRIPTION: Complete embedder configuration including OpenAI API key for authentication.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/getting_started_with_ai_search.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"products-openai\": {\n    \"source\": \"openAi\",\n    \"model\": \"text-embedding-3-small\",\n    \"apiKey\": \"OPEN_AI_API_KEY\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Faceted Search Response Structure\nDESCRIPTION: Example of a Meilisearch search response showing facetDistribution and facetStats fields. facetDistribution lists all facets in the results with document counts, while facetStats provides min/max values for numeric facets.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/search_with_facet_filters.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hits\": [\n    …\n  ],\n  …\n  \"facetDistribution\": {\n    \"genres\": {\n      \"Classics\": 6,\n      …\n    },\n    \"language\": {\n      \"English\": 6,\n      \"French\": 1,\n      \"Spanish\": 1\n    },\n    \"rating\": {\n      \"2.5\": 1,\n      …\n    }\n  },\n  \"facetStats\": {\n    \"rating\": {\n      \"min\": 2.5,\n      \"max\": 4.7\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Matches Position Response Example in JSON\nDESCRIPTION: Example JSON response showing matches position information for a search query 'winter feast', demonstrating how Meilisearch handles word matching and position tracking in search results.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/search.mdx#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 50393,\n  \"title\": \"Kung Fu Panda Holiday\",\n  \"poster\": \"https://image.tmdb.org/t/p/w500/rV77WxY35LuYLOuQvBeD1nyWMuI.jpg\",\n  \"overview\": \"The Winter Feast is Po's favorite holiday. Every year he and his father hang decorations, cook together, and serve noodle soup to the villagers. But this year Shifu informs Po that as Dragon Warrior, it is his duty to host the formal Winter Feast at the Jade Palace. Po is caught between his obligations as the Dragon Warrior and his family traditions: between Shifu and Mr. Ping.\",\n  \"release_date\": 1290729600,\n  \"_matchesPosition\": {\n    \"overview\": [\n      {\n        \"start\": 4,\n        \"length\": 6\n      },\n      {\n        \"start\": 11,\n        \"length\": 5\n      },\n      {\n        \"start\": 234,\n        \"length\": 6\n      },\n      {\n        \"start\": 241,\n        \"length\": 5\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Medical Indexes with Wildcard in JSON\nDESCRIPTION: Demonstrates using a wildcard at the end of an index name to apply rules to all indexes starting with 'medical', filtering results by user_id and published status.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/tenant_tokens.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"medical*\": {\n    \"filter\": \"user_id = 1 AND published = true\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Meilisearch client and initializing index\nDESCRIPTION: JavaScript code to create a Meilisearch client and initialize an index using the host URL and API key.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/algolia_migration.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { MeiliSearch } = require(\"meilisearch\");\n\nconst meiliClient = new MeiliSearch({\n  host: \"MEILI_HOST\",\n  apiKey: \"MEILI_API_KEY\",\n});\nconst meiliIndex = meiliClient.index(\"MEILI_INDEX_NAME\");\n```\n\n----------------------------------------\n\nTITLE: Negated IN Operator Filters in Meilisearch\nDESCRIPTION: Two equivalent ways to write a negated IN filter that returns documents where 'genres' doesn't include 'horror' or 'comedy'.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\ngenres NOT IN [horror, comedy]\nNOT genres IN [horror, comedy]\n```\n\n----------------------------------------\n\nTITLE: Updating Meilisearch Index Settings with REST Embedder\nDESCRIPTION: Updates a Meilisearch index with the configured REST embedder using the cURL command. This is the final step to apply the embedder to your index.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/configure_rest_embedder.mdx#2025-04-16_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncurl \\\n  -X PATCH 'MEILISEARCH_URL/indexes/INDEX_NAME/settings/embedders' \\\n  -H 'Content-Type: application/json' \\\n  --data-binary '{\n    \"EMBEDDER_NAME\": {\n      \"source\": \"rest\",\n      \"url\": \"PROVIDER_URL\",\n      \"request\": {\n        \"model\": \"MODEL_NAME\",\n        \"input\": [\"{{text}}\", \"{{..}}\"],\n      },\n      \"response\": {\n        \"data\": [\n          {\n            \"embedding\": \"{{embedding}}\"\n          },\n          \"{{..}}\"\n        ]\n      },\n      \"apiKey\": \"PROVIDER_API_KEY\",\n      \"documentTemplate\": \"SHORT_AND_RELEVANT_DOCUMENT_TEMPLATE\"\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Summarized Task Object in Meilisearch JSON\nDESCRIPTION: This snippet illustrates a summarized version of the task object returned by Meilisearch after an API request for an asynchronous operation. It includes essential fields like taskUid, indexUid, status, type, and enqueuedAt timestamp.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/async/asynchronous_operations.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 0,\n  \"indexUid\": \"movies\",\n  \"status\": \"enqueued\",\n  \"type\": \"indexCreation\",\n  \"enqueuedAt\": \"2021-08-11T09:25:53.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring facetsByIndex for Multi-search in Meilisearch API (JSON)\nDESCRIPTION: This snippet demonstrates how to structure the facetsByIndex object in a multi-search request. It specifies which attributes to use for faceting in each index.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/multi_search.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"facetsByIndex\": {\n  \"INDEX_A\": [\"ATTRIBUTE_X\", \"ATTRIBUTE_Y\"],\n  \"INDEX_B\": [\"ATTRIBUTE_Z\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Negative Filter Expression\nDESCRIPTION: Filter expression using NOT operator to exclude specific results while including other conditions.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_search_results.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nfilter=\"release_date > 1577884550 AND NOT director = 'Tim Burton'\"\n```\n\n----------------------------------------\n\nTITLE: IS NULL Operator Filter in Meilisearch\nDESCRIPTION: A filter that returns documents where the 'overview' field exists but contains a null value.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\noverview IS NULL\n```\n\n----------------------------------------\n\nTITLE: Updating Index Setting with Meilisearch API\nDESCRIPTION: This command updates the searchable attributes index setting using the PUT endpoint of the /settings/searchable-attributes subroute. It sets the searchable attributes to 'title' and 'overview'.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/configuration/configuring_index_settings_api.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -X PUT 'http://localhost:7700/indexes/INDEX_NAME/settings/searchable-attributes' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer YOUR_API_KEY' \\\n  --data-binary '[\"title\", \"overview\"]'\n```\n\n----------------------------------------\n\nTITLE: Performing Semantic Search with Meilisearch JSON\nDESCRIPTION: This JSON snippet shows how to perform a semantic search using Meilisearch. It includes the search query and hybrid search configuration with semantic ratio and embedder specification.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/embedders/mistral.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"q\": \"<Query made by the user>\",\n  \"hybrid\": {\n    \"semanticRatio\": 1,\n    \"embedder\": \"mistral\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Multi-Word Synonyms in Meilisearch JSON\nDESCRIPTION: This example illustrates how to configure multi-word synonyms in Meilisearch settings. It sets 'San Francisco' and 'SF' as mutual synonyms.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/relevancy/synonyms.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"san francisco\": [\n    \"sf\"\n  ],\n  \"sf\": [\n    \"san francisco\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vectors in Meilisearch Search Results\nDESCRIPTION: Example of a search response when retrieveVectors is set to true, showing document embedding data in the _vectors field with embeddings represented as arrays of numbers.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/search.mdx#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hits\": [\n    {\n      \"id\": 0,\n      \"title\": \"DOCUMENT NAME\",\n      \"_vectors\": {\n        \"default\": {\n          \"embeddings\": [0.1, 0.2, 0.3],\n          \"regenerate\": true\n        }\n      }\n      …\n    },\n    …\n  ],\n  …\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Semantic Search with Voyage AI Embeddings in Meilisearch\nDESCRIPTION: JSON request configuration for executing a semantic search query in Meilisearch using Voyage AI embeddings. It demonstrates how to set the semantic ratio and specify the embedder to use.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/embedders/voyage.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"q\": \"<Query made by the user>\",\n  \"hybrid\": {\n    \"semanticRatio\": 1,\n    \"embedder\": \"voyage\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Embedder Request Format in Meilisearch\nDESCRIPTION: Example JSON configuration showing how to define the request structure for a REST embedder. The '{{text}}' placeholder is used to indicate where Meilisearch should insert the text to be embedded.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": \"rest\",\n  \"request\": {\n    \"prompt\": \"{{text}}\"\n    …\n  },\n  …\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Vector Search with Filter and Sort Parameters\nDESCRIPTION: This curl command demonstrates an advanced vector search that combines vector search with filtering and sorting capabilities. It searches using a vector, filters results by price, and sorts the results by price in ascending order.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/search_with_user_provided_embeddings.mdx#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST -H 'content-type: application/json' \\\n  'localhost:7700/indexes/products/search' \\\n  --data-binary '{\n    \"vector\": [0, 1, 2],\n    \"filter\": \"price < 10\",\n    \"sort\": [\"price:asc\"]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Basic Attribute Ranking Configuration in Meilisearch\nDESCRIPTION: Demonstrates how to configure searchable attributes in order of importance, where attributes listed earlier have higher relevancy weight in search results. In this example, 'title' has the highest priority, followed by 'overview' and 'release_date'.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/relevancy/attribute_ranking_order.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"title\",\n  \"overview\",\n  \"release_date\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Filterable and Sortable Attributes in Scout Config\nDESCRIPTION: PHP configuration for specifying filterable and sortable attributes in the Scout configuration file. This determines which fields can be used for filtering and sorting in Meilisearch.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/laravel_scout.mdx#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Models\\Contact;\n\nreturn [\n\t  // Other Scout configuration...\n\n    'meilisearch' => [\n        'host' => env('MEILISEARCH_HOST', 'https://edge.meilisearch.com'),\n        'key' => env('MEILISEARCH_KEY'),\n        'index-settings' => [\n            Contact::class => [\n                'filterableAttributes' => ['organization_id'],\n                'sortableAttributes' => ['name', 'company_name']\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Facet Stats Response Structure\nDESCRIPTION: Example JSON structure showing minimum and maximum numerical values for facets in search results.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/search.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"facetStats\": {\n    \"rating\": {\n      \"min\": 2.5,\n      \"max\": 4.7\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Weighted Federated Search Request in Meilisearch\nDESCRIPTION: Performs a federated search with boosted weights for the profiles index to prioritize certain results.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/multi_search/performing_federated_search.mdx#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl \\\n  -X POST 'MEILISEARCH_URL/multi-search' \\\n  -H 'Content-Type: application/json' \\\n  --data-binary '{\n    \"federation\": {},\n    \"queries\": [\n      {\n        \"indexUid\": \"chats\",\n        \"q\": \"rotondo\"\n      },\n      {\n        \"indexUid\": \"profiles\",\n        \"q\": \"rotondo\",\n        \"federationOptions\": {\n          \"weight\": 1.2 \n        }\n      },\n      {\n        \"indexUid\": \"tickets\",\n        \"q\": \"rotondo\"\n      }\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Customizing Searchable Data with Relationships\nDESCRIPTION: Advanced example showing how to customize searchable data by implementing the toSearchableArray method. This example demonstrates including relationship data in the searchable document.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/laravel_scout.mdx#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse App\\Models\\Company;\nuse Laravel\\Scout\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\n\nclass Contact extends Model\n{\n    use Searchable;\n\n    public function company(): BelongsTo\n    {\n        return $this->belongsTo(Company::class);\n    }\n\n    public function toSearchableArray(): array\n    {\n\t      // All model attributes are made searchable\n        $array = $this->toArray();\n\n\t\t    // Then we add some additional fields\n        $array['organization_id'] = $this->company->organization->id;\n        $array['company_name'] = $this->company->name;\n        $array['company_url'] = $this->company->url;\n\n        return $array;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Distribution Parameters for Embedder in Meilisearch\nDESCRIPTION: Example of configuring an embedder with distribution parameters to correct ranking scores. Shows how to set mean and sigma values to improve semantic search relevancy using a HuggingFace model.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_62\n\nLANGUAGE: json\nCODE:\n```\ncurl \\\n  -X PATCH 'MEILISEARCH_URL/indexes/INDEX_NAME/settings' \\\n  -H 'Content-Type: application/json' \\\n  --data-binary '{\n    \"embedders\": {\n      \"default\": {\n        \"source\":  \"huggingFace\",\n        \"model\": \"MODEL_NAME\",\n        \"distribution\": {\n          \"mean\": 0.7,\n          \"sigma\": 0.3\n        }\n      }\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Single Filter Search Rule Example\nDESCRIPTION: This snippet demonstrates a search rule with a single filter for a specific index. It restricts access to documents based on a user_id attribute.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/tenant_token_reference.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"medical_records\": {\n    \"filter\": \"user_id = 1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mutual Synonym Association in Meilisearch JSON\nDESCRIPTION: This code shows how to create a mutual association between multiple synonyms in Meilisearch settings. It sets 'shoe', 'boot', 'slipper', and 'sneakers' as synonyms for each other.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/relevancy/synonyms.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"shoe\": [\n    \"boot\",\n    \"slipper\",\n    \"sneakers\"\n  ],\n  \"boot\": [\n    \"shoe\",\n    \"slipper\",\n    \"sneakers\"\n  ],\n  \"slipper\": [\n    \"shoe\",\n    \"boot\",\n    \"sneakers\"\n  ],\n  \"sneakers\": [\n    \"shoe\",\n    \"boot\",\n    \"slipper\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Similar Documents in Meilisearch\nDESCRIPTION: This snippet shows how to use Meilisearch's /similar route to find documents similar to a specific movie. It returns a list of the 20 most similar movies to the one with ID 192 (Batman).\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/retrieve_related_search_results.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -X POST 'MEILISEARCH_URL/indexes/movies/documents/192/similar' \\\n  -H \"Authorization: Bearer MEILISEARCH_API_KEY\" \\\n  -H 'Content-Type: application/json' \\\n  --data-binary '{\n    \"embedder\": \"movies-text\",\n    \"limit\": 20\n  }'\n```\n\n----------------------------------------\n\nTITLE: Performing Semantic Search with Meilisearch and Cloudflare Worker AI\nDESCRIPTION: This JSON request demonstrates how to perform a semantic search using Meilisearch with Cloudflare Worker AI embeddings. It includes the search query and hybrid search configuration with semantic ratio and embedder specification.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/embedders/cloudflare.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"q\": \"<Query made by the user>\",\n  \"hybrid\": {\n    \"semanticRatio\": 1,\n    \"embedder\": \"cloudflare\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AND Operator Filter in Meilisearch\nDESCRIPTION: A filter combining two conditions with AND to return horror movies directed by Jordan Peele.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\ngenres = horror AND director = 'Jordan Peele'\n```\n\n----------------------------------------\n\nTITLE: Performing Semantic Search Query in Meilisearch\nDESCRIPTION: JSON request structure for executing a semantic search query with hybrid configuration options and semantic ratio control.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/embedders/openai.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"q\": \"<Query made by the user>\",\n  \"hybrid\": {\n    \"semanticRatio\": 1,\n    \"embedder\": \"openai\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Conjunctive Facets in Meilisearch\nDESCRIPTION: This snippet demonstrates a query for conjunctive facets, where all conditions must be met. It filters for English books in both Fiction and Literature genres.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/facet_types.mdx#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"language = English AND genres = Fiction AND genres = Literature\"\n```\n\n----------------------------------------\n\nTITLE: CONTAINS Operator Filter in Meilisearch (Experimental)\nDESCRIPTION: An experimental filter using the CONTAINS operator to return dairy products whose names contain the string 'kef'.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\ndairy_products.name CONTAINS kef\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Search with User-Provided Embeddings in Meilisearch\nDESCRIPTION: This curl command demonstrates how to perform a vector search using user-provided embeddings in Meilisearch. It requires a vectorized query and the name of the configured embedder.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/image_search_with_user_provided_embeddings.mdx#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST -H 'content-type: application/json' \\\n  'localhost:7700/indexes/products/search' \\\n  --data-binary '{ \n    \"vector\": VECTORIZED_QUERY,\n    \"hybrid\": {\n      \"embedder\": \"EMBEDDER_NAME\",\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Filters for Meilisearch Tasks\nDESCRIPTION: This example demonstrates combining multiple filters to retrieve specific Meilisearch tasks. It filters tasks by index ('movies'), type ('documentAdditionOrUpdate' or 'documentDeletion'), and status ('processing').\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/async/filtering_tasks.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -X GET 'http://localhost:7700/tasks?indexUid=movies&types=documentAdditionOrUpdate,documentDeletion&statuses=processing'\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Embedder for Batch Processing in Meilisearch\nDESCRIPTION: Example JSON configuration for a REST embedder that handles multiple documents in a single request. Uses array notation with placeholders to indicate batch processing.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_59\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": \"rest\",\n  \"request\": {\n    \"prompt\": [\"{{text}}\", \"{{..}}\"]\n    …\n  },\n  …\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Meilisearch from source\nDESCRIPTION: This snippet demonstrates how to clone the Meilisearch repository, checkout the latest version, compile the project, and execute the binary.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/install_meilisearch_locally.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/meilisearch/meilisearch\ncd meilisearch\ngit checkout latest\n\n# Update the Rust toolchain to the latest version\nrustup update\n\n# Compile the project\ncargo build --release\n\n# Execute the binary\n./target/release/meilisearch\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Typo Tolerance\nDESCRIPTION: Shows how to enable or disable typo tolerance feature globally for an index. This setting affects whether Meilisearch will consider words with typos as matches.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/relevancy/typo_tolerance_settings.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"enabled\": false}\n```\n\n----------------------------------------\n\nTITLE: IS EMPTY Operator Filter in Meilisearch\nDESCRIPTION: A filter that returns documents where the 'overview' field exists but is empty (containing empty string, array, or object).\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\noverview IS EMPTY\n```\n\n----------------------------------------\n\nTITLE: Geosearch Result with Distance Calculation\nDESCRIPTION: Example JSON response showing a restaurant search result that includes the _geoDistance field, indicating the distance in meters from the search point.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/geosearch.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 1,\n    \"name\": \"Nàpiz' Milano\",\n    \"address\": \"Viale Vittorio Veneto, 30, 20124, Milan, Italy\",\n    \"type\": \"pizza\",\n    \"rating\": 9,\n    \"_geo\": {\n      \"lat\": 45.4777599, \n      \"lng\": 9.1967508\n    },\n    \"_geoDistance\": 1532\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Running Certbot to Configure HTTPS\nDESCRIPTION: Executes Certbot to obtain SSL certificates and configure Nginx to use HTTPS, enhancing security for the Meilisearch instance.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/running_production.mdx#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncertbot --nginx\n```\n\n----------------------------------------\n\nTITLE: Generating Tenant Token with Node.js\nDESCRIPTION: JavaScript code using jsonwebtoken library to create a signed tenant token with search rules, API key UID, and expiration time.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/generate_tenant_token_third_party.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst jwt = require('jsonwebtoken');\n\nconst apiKey = 'API_KEY';\nconst apiKeyUid = 'API_KEY_UID';\nconst currentUserID = 'USER_ID';\nconst expiryDate = parseInt(Date.now() / 1000) + 20 * 60; // 20 minutes\n\nconst tokenPayload = {\n  searchRules: {\n    'INDEX_NAME': {\n      'filter': `user_id = ${currentUserID}`\n     }\n  },\n  apiKeyUid: apiKeyUid,\n  exp: expiryDate\n};\n\nconst token = jwt.sign(tokenPayload, apiKey, {algorithm: 'HS256'});\n```\n\n----------------------------------------\n\nTITLE: Launching Meilisearch Server\nDESCRIPTION: Command to start the Meilisearch server with a master key for security\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/getting_started_with_self_hosted_meilisearch.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./meilisearch --master-key=\"aSampleMasterKey\"\n```\n\n----------------------------------------\n\nTITLE: Update Ranking Rules Body Format\nDESCRIPTION: The format for the request body when updating ranking rules, showing that it should be an array of strings representing the rules in order of importance.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n[<String>, <String>, …]\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Page Number Buttons with Meilisearch Search Results\nDESCRIPTION: Demonstrates how to create a numbered page list using Meilisearch's search response data. The code generates page buttons dynamically, highlights the current page, and uses the totalPages and page properties from the search results.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/pagination.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst pageNavigation = document.querySelector('#page-navigation');\nconst listContainer = pageNavigation.querySelector('#page-list');\nconst results = await index.search(\n  \"tarkovsky\",\n  {\n    hitsPerPage: 25,\n    page: 1\n  }\n);\n\nconst totalPages = results.totalPages;\nconst currentPage = results.page;\n\nfor (let i = 0; i < totalPages; i += 1) {\n  const listItem = document.createElement('li');\n  const pageButton = document.createElement('button');\n\n  pageButton.innerHTML = i;\n\n  if (currentPage === i) {\n    listItem.classList.add(\"current-page\");\n  }\n\n  listItem.append(pageButton);\n  listContainer.append(listItem);\n}\n```\n\n----------------------------------------\n\nTITLE: Negated EXISTS Operator Filters in Meilisearch\nDESCRIPTION: Two equivalent ways to write a negated EXISTS filter that returns documents where the 'release_date' field doesn't exist.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nrelease_date NOT EXISTS\nNOT release_date EXISTS\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Document Embedding Request\nDESCRIPTION: Sets up a request configuration for embedding individual documents. The {{text}} placeholder will be replaced with document content from the documentTemplate.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/configure_rest_embedder.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EMBEDDER_NAME\": {\n    \"source\": \"rest\",\n    \"url\": \"PROVIDER_URL\",\n    \"request\": {\n      \"model\": \"MODEL_NAME\",\n      \"input\": \"{{text}}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Getting Meilisearch Index Settings\nDESCRIPTION: Example JSON response when retrieving the settings of a Meilisearch index using the GET /indexes/{index_uid}/settings endpoint.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"displayedAttributes\": [\n    \"*\"\n  ],\n  \"searchableAttributes\": [\n    \"*\"\n  ],\n  \"filterableAttributes\": [],\n  \"sortableAttributes\": [],\n  \"rankingRules\":\n  [\n    \"words\",\n    \"typo\",\n    \"proximity\",\n    \"attribute\",\n    \"sort\",\n    \"exactness\"\n  ],\n  \"stopWords\": [],\n  \"nonSeparatorTokens\": [],\n  \"separatorTokens\": [],\n  \"dictionary\": [],\n  \"synonyms\": {},\n  \"distinctAttribute\": null,\n  \"typoTolerance\": {\n    \"enabled\": true,\n    \"minWordSizeForTypos\": {\n      \"oneTypo\": 5,\n      \"twoTypos\": 9\n    },\n    \"disableOnWords\": [],\n    \"disableOnAttributes\": []\n  },\n  \"faceting\": {\n    \"maxValuesPerFacet\": 100\n  },\n  \"pagination\": {\n    \"maxTotalHits\": 1000\n  },\n  \"proximityPrecision\": \"byWord\",\n  \"facetSearch\": true,\n  \"prefixSearch\": \"indexingTime\",\n  \"searchCutoffMs\": null,\n  \"embedders\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Response from Meilisearch API after Index Creation\nDESCRIPTION: This JSON response is returned after successfully creating an index named 'books' with a specific primary key. It shows the task details including the taskUid, status, and enqueuedAt timestamp.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/getting_started/primary_key.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"books\",\n  \"status\": \"enqueued\",\n  \"type\": \"indexCreation\",\n  \"enqueuedAt\": \"2022-09-20T12:06:24.364352Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Federated Search Request in Meilisearch\nDESCRIPTION: Performs a federated search across multiple indexes using the /multi-search endpoint to find documents containing 'natasha'.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/multi_search/performing_federated_search.mdx#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl \\\n  -X POST 'MEILISEARCH_URL/multi-search' \\\n  -H 'Content-Type: application/json' \\\n  --data-binary '{\n    \"federation\": {},\n    \"queries\": [\n      {\n        \"indexUid\": \"chats\",\n        \"q\": \"natasha\"\n      },\n      {\n        \"indexUid\": \"profiles\",\n        \"q\": \"natasha\"\n      },\n      {\n        \"indexUid\": \"tickets\",\n        \"q\": \"natasha\"\n      }\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Sorting by Nested Fields in Meilisearch (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to sort search results based on a nested field (user ratings) using dot notation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/sort_search_results.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclient.index('books').search('science fiction', {\n  sort: ['rating.users:desc']\n})\n```\n\n----------------------------------------\n\nTITLE: Examples of Good and Bad Document IDs in Meilisearch\nDESCRIPTION: This snippet shows examples of properly and improperly formatted document IDs. Valid IDs can only contain alphanumeric characters, hyphens, and underscores, while invalid IDs contain special characters.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/getting_started/primary_key.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"id\": \"_Aabc012_\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"id\": \"@BI+* ^5h2%\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Worker AI Embedder Settings in Meilisearch\nDESCRIPTION: This JSON configuration sets up the embedder settings for Cloudflare Worker AI in Meilisearch. It specifies the API key, dimensions, document template, URL, and request/response structures for generating embeddings.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/embedders/cloudflare.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cloudflare\": {\n    \"source\": \"rest\",\n    \"apiKey\": \"<API Key>\",\n    \"dimensions\": 384,\n    \"documentTemplate\": \"<Custom template (Optional, but recommended)>\",\n    \"url\": \"https://api.cloudflare.com/client/v4/accounts/<ACCOUNT_ID>/ai/run/@cf/<Model>\",\n    \"request\": {\n      \"text\": [\"{{text}}\", \"{{..}}\"]\n    },\n    \"response\": {\n      \"result\": {\n        \"data\": [\"{{embedding}}\", \"{{..}}\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Ranking Rules Order\nDESCRIPTION: The default order of ranking rules in Meilisearch, showing the six built-in rules in their standard sequence.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"words\",\n  \"typo\",\n  \"proximity\",\n  \"attribute\",\n  \"sort\",\n  \"exactness\"\n]\n```\n\n----------------------------------------\n\nTITLE: Running Meilisearch with CLI Arguments\nDESCRIPTION: Command to run Meilisearch in Docker with configuration via command-line arguments. This example sets a master key using the --master-key CLI argument.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/docker.mdx#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it --rm \\\n  -p 7700:7700 \\\n  -v $(pwd)/meili_data:/meili_data \\\n  getmeili/meilisearch:v1.14 \\\n  meilisearch --master-key=\"MASTER_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Optimized Document Template with Truncation\nDESCRIPTION: This improved Liquid template truncates the overview to 20 words, ensuring the prompt stays within the recommended 15-45 word range for optimal embedder performance.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/document_template_best_practices.mdx#2025-04-16_snippet_2\n\nLANGUAGE: liquid\nCODE:\n```\n\"A movie called {{doc.title}} about {{doc.overview | truncatewords: 20}}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Embedders in Meilisearch\nDESCRIPTION: JSON configuration for defining multiple embedders in Meilisearch. This example shows two embedder configurations: a default HuggingFace embedder and an OpenAI embedder, each with their own settings like model selection and document templates.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default\": {\n    \"source\": \"huggingFace\",\n    \"model\": \"BAAI/bge-base-en-v1.5\",\n    \"documentTemplate\": \"A movie titled '{{doc.title}}' whose description starts with {{doc.overview|truncatewords: 20}}\"\n  },\n  \"openai\": {\n    \"source\": \"openAi\",\n    \"apiKey\": \"OPENAI_API_KEY\",\n    \"model\": \"text-embedding-3-small\",\n    \"documentTemplate\": \"A movie titled {{doc.title}} whose description starts with {{doc.overview|truncatewords: 20}}\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating Search Pages with HitsPerPage and Page in JavaScript\nDESCRIPTION: This snippet demonstrates how to use both hitsPerPage and page parameters with the Meilisearch JavaScript SDK to navigate through pages of search results. It retrieves the second page of results, with 25 results per page.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/pagination.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = await index.search(\n  \"tarkovsky\",\n  {\n    hitsPerPage: 25,\n    page: 2\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Disabling Typo Tolerance for Specific Attributes\nDESCRIPTION: Configures which document attributes should not use typo tolerance. When an attribute is listed, exact matches will be required for that field.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/relevancy/typo_tolerance_settings.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"disableOnAttributes\": [\"title\"]}\n```\n\n----------------------------------------\n\nTITLE: Initializing Meilisearch Client in App.vue\nDESCRIPTION: Implementation of the search client initialization in App.vue. This connects to a Meilisearch instance using the instant-meilisearch adapter and configures the basic search component.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/vue_quick_start.mdx#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n<template>\n  <ais-instant-search :search-client=\"searchClient\" index-name=\"steam-videogames\">\n  </ais-instant-search>\n</template>\n\n<script>\nimport { instantMeiliSearch } from \"@meilisearch/instant-meilisearch\";\n\nexport default {\n  data() {\n    return {\n      searchClient: instantMeiliSearch(\n        'https://ms-adf78ae33284-106.lon.meilisearch.io',\n        'a63da4928426f12639e19d62886f621130f3fa9ff3c7534c5d179f0f51c4f303',\n      ).searchClient,\n    };\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Negated CONTAINS Operator Filters in Meilisearch (Experimental)\nDESCRIPTION: Two equivalent ways to write a negated CONTAINS filter that returns dairy products whose names don't contain 'kef'.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\ndairy_products.name NOT CONTAINS kef\nNOT dairy_product.name CONTAINS kef\n```\n\n----------------------------------------\n\nTITLE: Updating Ranking Rules in Meilisearch (JavaScript)\nDESCRIPTION: This code snippet shows how to update the ranking rules in Meilisearch to prioritize sorting over other relevancy factors.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/sort_search_results.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclient.index('books').updateRankingRules([\n  'sort',\n  'words',\n  'typo',\n  'proximity',\n  'attribute',\n  'exactness'\n])\n```\n\n----------------------------------------\n\nTITLE: Body Format for Updating Search Cutoff in Meilisearch\nDESCRIPTION: Shows the expected format for setting the search cutoff value in milliseconds. A single integer value is provided to set the maximum duration for search queries.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n150\n```\n\n----------------------------------------\n\nTITLE: Configuring Top-Level Array Response Format\nDESCRIPTION: Sets up the response mapping for providers that return embeddings in a top-level array rather than nested within an object.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/configure_rest_embedder.mdx#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EMBEDDER_NAME\": {\n    \"source\": \"rest\",\n    \"url\": \"PROVIDER_URL\",\n    \"request\": {\n      \"model\": \"MODEL_NAME\",\n      \"input\": [\n        \"{{text}}\",\n        \"{{..}}\"\n      ]\n    },\n    \"response\": [\n      \"{{embedding}}\",\n      \"{{..}}\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Meilisearch Dump Export via cURL\nDESCRIPTION: Command to trigger a dump export from a self-hosted Meilisearch instance. The dump contains all indexes, documents, and settings. Requires replacing MEILISEARCH_URL with the actual instance address.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/migrating_cloud.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST 'MEILISEARCH_URL:7700/dumps'\n```\n\n----------------------------------------\n\nTITLE: Formatting Error Response in JSON for Meilisearch API\nDESCRIPTION: This snippet demonstrates the standard format for error responses in Meilisearch API. It includes fields for the error message, code, type, and a link to relevant documentation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/errors/overview.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"Index `movies` not found.\",\n  \"code\": \"index_not_found\",\n  \"type\": \"invalid_request\",\n  \"link\": \"https://docs.meilisearch.com/errors#index_not_found\"\n}\n```\n\n----------------------------------------\n\nTITLE: Set OpenAI Model - JSON\nDESCRIPTION: Embedder configuration with OpenAI source and text-embedding-3-small model specification.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/getting_started_with_ai_search.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"products-openai\": {\n    \"source\": \"openAi\",\n    \"model\": \"text-embedding-3-small\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Searchable Attributes Response Example\nDESCRIPTION: Example JSON response from the GET searchable attributes endpoint, showing a custom list of fields that are searchable in the index.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"title\",\n  \"overview\",\n  \"genres\",\n  \"release_date.year\"\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Searchable Eloquent Model\nDESCRIPTION: Simple example of making an Eloquent model searchable by using the Searchable trait from Laravel Scout. This enables automatic synchronization of model data with Meilisearch.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/laravel_scout.mdx#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Laravel\\Scout\\Searchable;\n\nclass Contact extends Model\n{\n\tuse Searchable;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Embedding Response Format\nDESCRIPTION: Sets up the response mapping for a provider that returns a single embedding per document in an array, like Cloudflare's format.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/configure_rest_embedder.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EMBEDDER_NAME\": {\n    \"source\": \"rest\",\n    \"url\": \"PROVIDER_URL\",\n    \"request\": {\n      \"text\": \"{{text}}\"\n    },\n    \"response\": {\n      \"result\": {\n        \"data\": [\"{{embedding}}\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filter Expression in Search Rules\nDESCRIPTION: This example illustrates how to include a filter expression within the search rules object. The filter is applied to all searches made with the tenant token.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/tenant_token_reference.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"*\": {\n    \"filter\": \"attribute_A = value_X AND attribute_B = value_Y\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Array Embedding Response Format\nDESCRIPTION: Sets up the response mapping for providers that return a single embedding object rather than an array of embeddings.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/configure_rest_embedder.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EMBEDDER_NAME\": {\n    \"source\": \"rest\",\n    \"url\": \"PROVIDER_URL\",\n    \"request\": {\n      \"model\": \"MODEL_NAME\",\n      \"input\": \"{{text}}\"\n    },\n    \"response\": {\n      \"data\": {\n        \"text\": \"{{embedding}}\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Retrieving Sortable Attributes in Meilisearch\nDESCRIPTION: Shows the JSON response format when retrieving sortable attributes from a Meilisearch index. The response is an array of strings representing attribute names that can be used for sorting results, including support for nested attributes using dot notation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"price\",\n  \"author.surname\"\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stats for All Indexes in JSON\nDESCRIPTION: This snippet demonstrates the JSON response when retrieving stats for all indexes using the GET /stats endpoint. It includes overall database stats and detailed information for each index.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/stats.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"databaseSize\": 447819776,\n  \"usedDatabaseSize\": 196608,\n  \"lastUpdate\": \"2019-11-15T11:15:22.092896Z\",\n  \"indexes\": {\n    \"movies\": {\n      \"numberOfDocuments\": 19654,\n      \"numberOfEmbeddedDocuments\": 1,\n      \"numberOfEmbeddings\": 1,\n      \"isIndexing\": false,\n      \"fieldDistribution\": {\n        \"poster\": 19654,\n        \"overview\": 19654,\n        \"title\": 19654,\n        \"id\": 19654,\n        \"release_date\": 19654\n      }\n    },\n    \"books\": {\n      \"numberOfDocuments\": 5,\n      \"numberOfEmbeddedDocuments\": 5,\n      \"numberOfEmbeddings\": 10,\n      \"isIndexing\": false,\n      \"fieldDistribution\": {\n        \"id\": 5,\n        \"title\": 5,\n        \"author\": 5,\n        \"price\": 5, \n        \"genres\": 5\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Remotes in Meilisearch\nDESCRIPTION: cURL command to configure the remotes field in the network object, defining URLs and API keys for each remote instance.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/multi_search/implement_sharding.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -X PATCH 'MEILISEARCH_URL/network' \\\n  -H 'Content-Type: application/json' \\\n  --data-binary '{\n    \"remotes\": {\n      \"REMOTE_NAME_1\": {\n        \"url\": \"INSTANCE_URL_1\",\n        \"searchApiKey\": \"SEARCH_API_KEY_1\"\n      },\n      \"REMOTE_NAME_2\": {\n        \"url\": \"INSTANCE_URL_2\",\n        \"searchApiKey\": \"SEARCH_API_KEY_2\"\n      },\n      \"REMOTE_NAME_3\": {\n        \"url\": \"INSTANCE_URL_3\",\n        \"searchApiKey\": \"SEARCH_API_KEY_3\"\n      },\n      …\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Importing a Dump in Self-hosted Meilisearch\nDESCRIPTION: Command to launch Meilisearch with a dump file import. Uses the --import-dump configuration option to specify the path to the dump file that should be restored.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/data_backup/dumps.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./meilisearch --import-dump /dumps/20200813-042312213.dump\n```\n\n----------------------------------------\n\nTITLE: Batman Movies Faceted Search Response\nDESCRIPTION: Example response showing facet distribution and stats for Batman movies, including genre counts and rating ranges.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/search.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"estimatedTotalHits\": 22,\n  \"query\": \"Batman\",\n  \"facetDistribution\": {\n    \"genres\": {\n      \"Action\": 20,\n      \"Adventure\": 7,\n      \"Thriller\": 3\n    },\n    \"rating\": {\n      \"2\": 1,\n      \"9.8\": 1\n    }\n  },\n  \"facetStats\": {\n    \"rating\": {\n      \"min\": 2.0,\n      \"max\": 9.8\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response for Updating Embedders in Meilisearch\nDESCRIPTION: JSON response when successfully updating embedder settings. The response includes a task identifier, the index UID, task status, type, and timestamp.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"kitchenware\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2024-05-11T09:33:12.691402Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Document in Meilisearch\nDESCRIPTION: This snippet shows the JSON response format when retrieving a single document by its ID using the GET /documents/{document_id} endpoint. It includes fields like id, title, poster, and release date.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/documents.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 25684,\n  \"title\": \"American Ninja 5\",\n  \"poster\": \"https://image.tmdb.org/t/p/w1280/iuAQVI4mvjI83wnirpD8GVNRVuY.jpg\",\n  \"release_date\": \"1993-01-01\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating sortableAttributes in Meilisearch (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to update the sortableAttributes index setting in Meilisearch to allow sorting on author and price fields.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/sort_search_results.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclient.index('books').updateSortableAttributes([\n  'author',\n  'price'\n])\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Embedder with Alternative Field Names\nDESCRIPTION: Demonstrates how to configure the embedder when the provider uses different field names (e.g., 'text' instead of 'input') for the embedding prompt.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/configure_rest_embedder.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EMBEDDER_NAME\": {\n    \"source\": \"rest\",\n    \"url\": \"PROVIDER_URL\",\n    \"request\": {\n      \"model\": \"MODEL_NAME\",\n      \"text\": \"{{text}}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Network Feature in Meilisearch\nDESCRIPTION: This snippet demonstrates how to activate the experimental network feature using a cURL command to the experimental features endpoint.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/network.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl \\\n  -X PATCH 'MEILISEARCH_URL/experimental-features/' \\\n  -H 'Content-Type: application/json' \\\n  --data-binary '{\n    \"network\": true\n  }'\n```\n\n----------------------------------------\n\nTITLE: Combined Sorting Results with Rating and Geolocation\nDESCRIPTION: Example JSON response showing restaurant search results sorted by both geolocation and rating, demonstrating combined sorting functionality.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/geosearch.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 2,\n    \"name\": \"Bouillon Pigalle\",\n    \"address\": \"22 Bd de Clichy, 75018 Paris, France\",\n    \"type\": \"french\",\n    \"rating\": 8,\n    \"_geo\": {\n      \"lat\": 48.8826517, \n      \"lng\": 2.3352748\n    }\n  },\n  {\n    \"id\": 3,\n    \"name\": \"Artico Gelateria Tradizionale\",\n    \"address\": \"Via Dogana, 1, 20123 Milan, Italy\",\n    \"type\": \"ice cream\",\n    \"rating\": 10,\n    \"_geo\": {\n      \"lat\": 45.4632046,\n      \"lng\": 9.1719421\n    }\n  },\n  {\n    \"id\": 1,\n    \"name\": \"Nàpiz' Milano\",\n    \"address\": \"Viale Vittorio Veneto, 30, 20124, Milan, Italy\",\n    \"type\": \"pizza\",\n    \"rating\": 9,\n    \"_geo\": {\n      \"lat\": 45.4777599, \n      \"lng\": 9.1967508\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Word Size for Typos\nDESCRIPTION: Configures the minimum word length required for allowing one or two typos in search terms. The oneTypo value must be between 0 and twoTypos, while twoTypos must be between oneTypo and 255.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/relevancy/typo_tolerance_settings.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"minWordSizeForTypos\": {\"oneTypo\": 4, \"twoTypos\": 10}}\n```\n\n----------------------------------------\n\nTITLE: Installing the Meilisearch Plugin for Strapi\nDESCRIPTION: Command to install the Meilisearch plugin for Strapi, which enables integration between Strapi and Meilisearch for automatic indexing and searching of content.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/strapi_v4.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install strapi-plugin-meilisearch\n```\n\n----------------------------------------\n\nTITLE: Similar Documents GET Response - Meilisearch API\nDESCRIPTION: Example JSON response format for the GET /similar endpoint showing the same structure as POST response with hits array and metadata.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/similar.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hits\": [\n    {\n      \"id\": \"299537\",\n      \"title\": \"Captain Marvel\"\n    },\n    {\n      \"id\": \"166428\",\n      \"title\": \"How to Train Your Dragon: The Hidden World\"\n    }\n    {\n      \"id\": \"287947\",\n      \"title\": \"Shazam!\"\n    }\n  ],\n  \"id\": \"23\",\n  \"processingTimeMs\": 0,\n  \"limit\": 20,\n  \"offset\": 0,\n  \"estimatedTotalHits\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Proximity Precision Settings - JSON\nDESCRIPTION: Example response from a GET request to the proximity precision settings endpoint showing the current precision value which can be either 'byWord' or 'byAttribute'.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n\"byWord\"\n```\n\n----------------------------------------\n\nTITLE: Nested Filter Example with AND/OR in SQL\nDESCRIPTION: Demonstrates nested filtering by combining AND and OR operators to filter users, creating multiple nesting levels.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/resources/known_limitations.mdx#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nuser = 1 OR user = 2 AND user = 3\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stats for a Specific Index in JSON\nDESCRIPTION: This snippet shows the JSON response when retrieving stats for a specific index using the GET /indexes/{index_uid}/stats endpoint. It includes detailed information about the requested index.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/stats.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"numberOfDocuments\": 19654,\n  \"numberOfEmbeddedDocuments\": 1,\n  \"numberOfEmbeddings\": 1,\n  \"isIndexing\": false,\n  \"fieldDistribution\": {\n    \"poster\": 19654,\n    \"overview\": 19654,\n    \"title\": 19654,\n    \"id\": 19654,\n    \"release_date\": 19654\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Meilisearch with Command-Line Options in Bash\nDESCRIPTION: Demonstrates how to launch a Meilisearch instance with command-line options to set the database path and HTTP address.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/configure_meilisearch_at_launch.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./meilisearch --db-path ./meilifiles --http-addr 'localhost:7700'\n```\n\n----------------------------------------\n\nTITLE: Environment Variables and CLI Options for Meilisearch Configuration\nDESCRIPTION: Configuration options for Meilisearch including analytics control, dump management, logging levels, indexing parameters, and search queue settings. Each option specifies both environment variable and CLI flag format with their expected values and defaults.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/configure_meilisearch_at_launch.mdx#2025-04-16_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nMEILI_NO_ANALYTICS / --no-analytics\nMEILI_EXPERIMENTAL_DUMPLESS_UPGRADE / --experimental-dumpless-upgrade\nMEILI_DUMP_DIR / --dump-dir\nMEILI_IMPORT_DUMP / --import-dump\nMEILI_IGNORE_MISSING_DUMP / --ignore-missing-dump\nMEILI_IGNORE_DUMP_IF_DB_EXISTS / --ignore-dump-if-db-exists\nMEILI_LOG_LEVEL / --log-level\nMEILI_EXPERIMENTAL_LOGS_MODE / --experimental-logs-mode\nMEILI_MAX_INDEXING_MEMORY / --max-indexing-memory\nMEILI_EXPERIMENTAL_REDUCE_INDEXING_MEMORY_USAGE / --experimental-reduce-indexing-memory-usage\nMEILI_MAX_INDEXING_THREADS / --max-indexing-threads\nMEILI_HTTP_PAYLOAD_SIZE_LIMIT / --http-payload-size-limit\nMEILI_EXPERIMENTAL_SEARCH_QUEUE_SIZE / --experimental-search-queue-size\nMEILI_EXPERIMENTAL_EMBEDDING_CACHE_ENTRIES / --experimental-embedding-cache-entries\n```\n\n----------------------------------------\n\nTITLE: Installing Meilisearch Libraries for Vue\nDESCRIPTION: Command to install the required libraries for Meilisearch integration with Vue. Includes vue-instantsearch for UI components, instant-meilisearch for Meilisearch client, and instantsearch.css for styling.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/vue_quick_start.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vue-instantsearch @meilisearch/instant-meilisearch instantsearch.css\n```\n\n----------------------------------------\n\nTITLE: Failed Task Response Example - JSON\nDESCRIPTION: Example of a failed document addition task response showing error details when a document is missing a primary key attribute.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/resources/faq.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"uid\": 1,\n    \"indexUid\": \"movies\",\n    \"status\": \"failed\",\n    \"type\": \"documentAdditionOrUpdate\",\n    \"canceledBy\": null,\n    \"details\": { \n            \"receivedDocuments\": 67493,\n            \"indexedDocuments\": 0\n    },\n    \"error\": {\n        \"message\": \"Document does not have a `:primaryKey` attribute: `:documentRepresentation`.\",\n        \"code\": \"internal\",\n        \"type\": \"missing_document_id\",\n        \"link\": \"https://docs.meilisearch.com/errors#missing-document-id\"\n    },\n    \"duration\": \"PT1S\",\n    \"enqueuedAt\": \"2021-08-10T14:29:17.000000Z\",\n    \"startedAt\": \"2021-08-10T14:29:18.000000Z\",\n    \"finishedAt\": \"2021-08-10T14:29:19.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Global Filter to All Indexes in JSON\nDESCRIPTION: Shows how to use the wildcard '*' to apply a filter rule across all indexes, restricting results to documents with a specific user_id.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/tenant_tokens.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"*\": {\n    \"filter\": \"user_id = 1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding InstantSearch Provider for Meilisearch in React\nDESCRIPTION: Implements the InstantSearch root provider component that connects the React app to Meilisearch. It requires the searchClient and index name to establish the connection to the search engine.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/react_quick_start.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { InstantSearch } from 'react-instantsearch';\nimport { instantMeiliSearch } from '@meilisearch/instant-meilisearch';\n\nconst { searchClient } = instantMeiliSearch(\n  'https://ms-adf78ae33284-106.lon.meilisearch.io',\n  'a63da4928426f12639e19d62886f621130f3fa9ff3c7534c5d179f0f51c4f303'\n);\n\nconst App = () => (\n  <InstantSearch\n    indexName=\"steam-videogames\"\n    searchClient={searchClient}\n  >\n  </InstantSearch>\n);\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Basic Vector Search with User-Provided Embeddings\nDESCRIPTION: This curl command performs a basic vector search using a user-provided embedding. The search query includes a 'vector' parameter with the numerical values representing the query in the vector space.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/search_with_user_provided_embeddings.mdx#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST -H 'content-type: application/json' \\\n  'localhost:7700/indexes/products/search' \\\n  --data-binary '{ \"vector\": [0, 1, 2] }'\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Scout Package via Composer\nDESCRIPTION: Command to install Laravel Scout via Composer. Laravel Scout provides full-text search capabilities for Laravel applications.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/laravel_scout.mdx#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require laravel/scout\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic REST Embedder in Meilisearch\nDESCRIPTION: Creates a minimal REST embedder configuration with a name and source type. This is the first step in setting up a REST embedder for Meilisearch.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/configure_rest_embedder.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EMBEDDER_NAME\": {\n    \"source\": \"rest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Network Endpoint in Meilisearch\nDESCRIPTION: cURL command to enable the network experimental feature through the /experimental-features endpoint.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/multi_search/implement_sharding.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -X PATCH 'MEILISEARCH_URL/experimental-features/' \\\n  -H 'Content-Type: application/json'  \\\n  --data-binary '{\n    \"network\": true\n  }'\n```\n\n----------------------------------------\n\nTITLE: Get Ranking Rules Response Example\nDESCRIPTION: Example JSON response from the GET ranking rules endpoint, showing default built-in rules plus a custom rule for sorting by release date.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"words\",\n  \"typo\",\n  \"proximity\",\n  \"attribute\",\n  \"sort\",\n  \"exactness\",\n  \"release_date:desc\"\n]\n```\n\n----------------------------------------\n\nTITLE: Complete migration script from Algolia to Meilisearch\nDESCRIPTION: Full JavaScript script that exports data from an Algolia index and imports it into a Meilisearch index.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/algolia_migration.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst algoliaSearch = require(\"algoliasearch\");\nconst { MeiliSearch } = require(\"meilisearch\");\n\nconst BATCH_SIZE = 1000;\n\n(async () => {\n  const algoliaClient = algoliaSearch(\"APPLICATION_ID\", \"ADMIN_API_KEY\");\n  const algoliaIndex = algoliaClient.initIndex(\"INDEX_NAME\");\n\n  let records = [];\n  await algoliaIndex.browseObjects({\n    batch: (hits) => {\n      records = records.concat(hits);\n    }\n  });\n\n  const meiliClient = new MeiliSearch({\n    host: \"MEILI_HOST\",\n    apiKey: \"MEILI_API_KEY\",\n  });\n  const meiliIndex = meiliClient.index(\"MEILI_INDEX_NAME\");\n\n  await meiliIndex.addDocumentsInBatches(records, BATCH_SIZE);\n})();\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Meilisearch in Windows\nDESCRIPTION: Shows how to set environment variables to configure Meilisearch's database path and HTTP address before launching the instance on Windows systems.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/configure_meilisearch_at_launch.mdx#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nset MEILI_DB_PATH=./meilifiles\nset MEILI_HTTP_ADDR=127.0.0.1:7700\n./meilisearch\n```\n\n----------------------------------------\n\nTITLE: Update Ranking Rules Response Example\nDESCRIPTION: Example JSON response after updating ranking rules, showing the task details for tracking the status of the update operation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"movies\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2021-08-11T09:25:53.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Metrics Endpoint Response Format\nDESCRIPTION: Sample response from the /metrics endpoint showing various Meilisearch metrics including database size, HTTP response times, index counts, and task statistics in Prometheus format.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/metrics.mdx#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# HELP meilisearch_db_size_bytes Meilisearch DB Size In Bytes\n# TYPE meilisearch_db_size_bytes gauge\nmeilisearch_db_size_bytes 188416\n# HELP meilisearch_http_response_time_seconds Meilisearch HTTP response times\n# TYPE meilisearch_http_response_time_seconds histogram\nmeilisearch_http_response_time_seconds_bucket{method=\"GET\",path=\"/metrics\",le=\"0.005\"} 0\nmeilisearch_http_response_time_seconds_bucket{method=\"GET\",path=\"/metrics\",le=\"0.01\"} 0\nmeilisearch_http_response_time_seconds_bucket{method=\"GET\",path=\"/metrics\",le=\"0.025\"} 0\nmeilisearch_http_response_time_seconds_bucket{method=\"GET\",path=\"/metrics\",le=\"0.05\"} 0\nmeilisearch_http_response_time_seconds_bucket{method=\"GET\",path=\"/metrics\",le=\"0.075\"} 0\nmeilisearch_http_response_time_seconds_bucket{method=\"GET\",path=\"/metrics\",le=\"0.1\"} 0\nmeilisearch_http_response_time_seconds_bucket{method=\"GET\",path=\"/metrics\",le=\"0.25\"} 0\nmeilisearch_http_response_time_seconds_bucket{method=\"GET\",path=\"/metrics\",le=\"0.5\"} 0\nmeilisearch_http_response_time_seconds_bucket{method=\"GET\",path=\"/metrics\",le=\"0.75\"} 0\nmeilisearch_http_response_time_seconds_bucket{method=\"GET\",path=\"/metrics\",le=\"1\"} 0\nmeilisearch_http_response_time_seconds_bucket{method=\"GET\",path=\"/metrics\",le=\"2.5\"} 0\nmeilisearch_http_response_time_seconds_bucket{method=\"GET\",path=\"/metrics\",le=\"5\"} 0\nmeilisearch_http_response_time_seconds_bucket{method=\"GET\",path=\"/metrics\",le=\"7.5\"} 0\nmeilisearch_http_response_time_seconds_bucket{method=\"GET\",path=\"/metrics\",le=\"10\"} 0\nmeilisearch_http_response_time_seconds_bucket{method=\"GET\",path=\"/metrics\",le=\"+Inf\"} 0\nmeilisearch_http_response_time_seconds_sum{method=\"GET\",path=\"/metrics\"} 0\nmeilisearch_http_response_time_seconds_count{method=\"GET\",path=\"/metrics\"} 0\n# HELP meilisearch_index_count Meilisearch Index Count\n# TYPE meilisearch_index_count gauge\nmeilisearch_index_count 1\n# HELP meilisearch_index_docs_count Meilisearch Index Docs Count\n# TYPE meilisearch_index_docs_count gauge\nmeilisearch_index_docs_count{index=\"books\"} 6\n# HELP meilisearch_is_indexing Meilisearch Is Indexing\n# TYPE meilisearch_is_indexing gauge\nmeilisearch_is_indexing 0\n# HELP meilisearch_last_update Meilisearch Last Update\n# TYPE meilisearch_last_update gauge\nmeilisearch_last_update 1723126669\n# HELP meilisearch_nb_tasks Meilisearch Number of tasks\n# TYPE meilisearch_nb_tasks gauge\nmeilisearch_nb_tasks{kind=\"indexes\",value=\"books\"} 1\nmeilisearch_nb_tasks{kind=\"statuses\",value=\"canceled\"} 0\nmeilisearch_nb_tasks{kind=\"statuses\",value=\"enqueued\"} 0\nmeilisearch_nb_tasks{kind=\"statuses\",value=\"failed\"} 0\nmeilisearch_nb_tasks{kind=\"statuses\",value=\"processing\"} 0\nmeilisearch_nb_tasks{kind=\"statuses\",value=\"succeeded\"} 1\nmeilisearch_nb_tasks{kind=\"types\",value=\"documentAdditionOrUpdate\"} 1\nmeilisearch_nb_tasks{kind=\"types\",value=\"documentDeletion\"} 0\nmeilisearch_nb_tasks{kind=\"types\",value=\"documentEdition\"} 0\nmeilisearch_nb_tasks{kind=\"types\",value=\"dumpCreation\"} 0\nmeilisearch_nb_tasks{kind=\"types\",value=\"indexCreation\"} 0\nmeilisearch_nb_tasks{kind=\"types\",value=\"indexDeletion\"} 0\nmeilisearch_nb_tasks{kind=\"types\",value=\"indexSwap\"} 0\nmeilisearch_nb_tasks{kind=\"types\",value=\"indexUpdate\"} 0\nmeilisearch_nb_tasks{kind=\"types\",value=\"settingsUpdate\"} 0\nmeilisearch_nb_tasks{kind=\"types\",value=\"snapshotCreation\"} 0\nmeilisearch_nb_tasks{kind=\"types\",value=\"taskCancelation\"} 0\nmeilisearch_nb_tasks{kind=\"types\",value=\"taskDeletion\"} 0\n# HELP meilisearch_used_db_size_bytes Meilisearch Used DB Size In Bytes\n# TYPE meilisearch_used_db_size_bytes gauge\nmeilisearch_used_db_size_bytes 90112\n```\n\n----------------------------------------\n\nTITLE: Wildcard Index Targeting in Search Rules\nDESCRIPTION: This snippet illustrates how to use wildcards to target multiple indexes with a single search rule. It applies a filter to all indexes starting with 'medical'.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/tenant_token_reference.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"medical*\": {\n    \"filter\": \"user_id = 1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Experimental Feature at Launch in Meilisearch\nDESCRIPTION: This code snippet demonstrates how to activate an experimental feature in Meilisearch at launch using a command-line flag. The example enables the metrics feature.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/resources/experimental_features_overview.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./meilisearch --experimental-enable-metrics\n```\n\n----------------------------------------\n\nTITLE: Building a Search Interface with InstantSearch.js\nDESCRIPTION: HTML and JavaScript code that creates a search interface using InstantSearch.js and the Meilisearch InstantSearch connector. It fetches a tenant token from the server based on the patient ID and uses it to perform searches.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/multitenancy_nodejs.mdx#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@meilisearch/instant-meilisearch/templates/basic_search.css\" />\n  </head>\n  <body>\n    <div class=\"wrapper\">\n      <div id=\"searchbox\" focus></div>\n      <div id=\"hits\"></div>\n    </div>\n  </body>\n  <script src=\"https://cdn.jsdelivr.net/npm/@meilisearch/instant-meilisearch/dist/instant-meilisearch.umd.min.js\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/instantsearch.js@4\"></script>\n  <script>\n    document.addEventListener('DOMContentLoaded', async () => {\n      const patientId = 1 // Replace with the patient's ID\n      const response = await fetch(`http://localhost:3000/token?id=${patientId}`)\n      const { token } = await response.json()\n\n      const search = instantsearch({\n        indexName: 'appointments',\n        searchClient: instantMeiliSearch(\n          'https://edge.meilisearch.com',\n          token\n        ).searchClient\n      })\n\n      search.addWidgets([\n        instantsearch.widgets.searchBox({\n          container: \"#searchbox\"\n        }),\n        instantsearch.widgets.hits({\n          container: \"#hits\",\n          templates: {\n          item: `\n            <div>\n              <div class=\"hit-name\">\n                    {{#helpers.highlight}}{ \"attribute\": \"patient\" }{{/helpers.highlight}}\n              </div>\n              <div class=\"hit-description\">\n                {{#helpers.highlight}}{ \"attribute\": \"details\" }{{/helpers.highlight}}\n              </div>\n            </div>\n          `\n          }\n        })\n      ])\n\n      search.start()\n    })\n  </script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Embedder URL in Meilisearch\nDESCRIPTION: Adds the provider URL to a REST embedder configuration. The URL specifies where Meilisearch should send requests to generate embeddings.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/configure_rest_embedder.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EMBEDDER_NAME\": {\n    \"source\": \"rest\",\n    \"url\": \"PROVIDER_URL\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Swap Indexes Response\nDESCRIPTION: Task response returned when swapping two or more indexes.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/indexes.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 3,\n  \"indexUid\": null,\n  \"status\": \"enqueued\",\n  \"type\": \"indexSwap\",\n  \"enqueuedAt\": \"2021-08-12T10:00:00.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Meilisearch with Webhook URL\nDESCRIPTION: This command starts Meilisearch with a configured webhook URL to receive task completion notifications.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/async/task_webhook.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmeilisearch --task-webhook-url http://localhost:8000\n```\n\n----------------------------------------\n\nTITLE: Disabling Navigation Buttons for First and Last Pages in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to disable 'Previous' and 'Next' buttons when the user is on the first or last page of search results. It uses the Meilisearch SDK to perform searches and update button states.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/pagination.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updatePageNumber() {\n  const pageNumber = parseInt(document.querySelector('.pagination').dataset.pageNumber)\n\n  const offset = pageNumber * 20\n  const results = await index.search('x', { limit: 21, offset })\n\n  // If offset equals 0, we're on the first results page\n  if (offset === 0 ) {\n    document.querySelector('#previous_button').disabled = true;\n  }\n\n  // If offset is bigger than 0, we're not on the first results page\n  if (offset > 0 ) {\n    document.querySelector('#previous_button').disabled = false;\n  }\n\n  // If Meilisearch returns 20 items or fewer,\n  // we are on the last page\n  if (results.hits.length < 21 ) {\n    document.querySelector('#next_button').disabled = true;\n  }\n\n  // If Meilisearch returns exactly 21 results\n  // and our page can only show 20 items at a time,\n  // we have at least one more page with one result in it\n  if (results.hits.length === 21 ) {\n    document.querySelector('#next_button').disabled = false;\n  }\n}\n\ndocument.querySelector('#previous_button').onclick = function () { updatePageNumber(this) }\ndocument.querySelector('#next_button').onclick = function () { updatePageNumber(this) }\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Model with Laravel Scout for Meilisearch in PHP\nDESCRIPTION: This code defines a Contact model that uses Laravel Scout's Searchable trait for Meilisearch integration. It establishes a belongsTo relationship with the Organization model.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/laravel_multitenancy.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Laravel\\Scout\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\n\nclass Contact extends Model\n{\n    use Searchable;\n\n    public function organization(): BelongsTo\n    {\n        return $this->belongsTo(Organization::class, 'organization_id');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Document Embedding Request\nDESCRIPTION: Sets up a request configuration for embedding multiple documents in a single API call. The {{..}} placeholder enables batch processing of up to 10 documents.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/configure_rest_embedder.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EMBEDDER_NAME\": {\n    \"source\": \"rest\",\n    \"url\": \"PROVIDER_URL\",\n    \"request\": {\n      \"model\": \"MODEL_NAME\",\n      \"input\": [\n        \"{{text}}\", \n        \"{{..}}\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Filters Search Rule Example\nDESCRIPTION: This example shows how to apply multiple filters in a search rule for an index. It combines user_id and published status conditions.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/tenant_token_reference.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"medical_records\": {\n    \"filter\": \"user_id = 1 AND published = true\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Index Settings with Artisan Command\nDESCRIPTION: Artisan command to synchronize index settings between Laravel Scout and Meilisearch. Required after changing index configuration to apply the changes.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/laravel_scout.mdx#2025-04-16_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nphp artisan scout:sync-index-settings\n```\n\n----------------------------------------\n\nTITLE: Activating Composite Embedders in Meilisearch\nDESCRIPTION: Shell command for activating the experimental composite embedders feature in Meilisearch. This command uses the PATCH method to enable the compositeEmbedders feature via the experimental-features endpoint.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_57\n\nLANGUAGE: sh\nCODE:\n```\ncurl \\\n  -X PATCH 'MEILISEARCH_URL/experimental-features/' \\\n  -H 'Content-Type: application/json' \\\n  --data-binary '{\n    \"compositeEmbedders\": true\n  }'\n```\n\n----------------------------------------\n\nTITLE: Launching Meilisearch with Master Key (CLI)\nDESCRIPTION: Command to launch a self-hosted Meilisearch instance with a master key using the command-line interface.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/basic_security.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./meilisearch --master-key=\"MASTER_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Body Format for Updating Non-Separator Tokens in Meilisearch\nDESCRIPTION: Shows the expected format for configuring non-separator tokens. An array of strings is provided where each string represents a token to be removed from the default separator list.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n[\"@\", \"#\"]\n```\n\n----------------------------------------\n\nTITLE: API Actions Configuration Table - Markdown\nDESCRIPTION: Table defining all available API actions for Meilisearch API keys, including their access permissions and endpoint restrictions.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/keys.mdx#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                   | Description                                                                                                                                                                                                                                                                                                                  |\n| :--------------------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`search`**           | Provides access to both [`POST`](/reference/api/search#search-in-an-index-with-post) and [`GET`](/reference/api/search#search-in-an-index-with-get) search endpoints                                                                                                                                             |\n| **`documents.add`**    | Provides access to the [add documents](/reference/api/documents#add-or-replace-documents) and [update documents](/reference/api/documents#add-or-update-documents) endpoints                                                                                                                                                 |\n| **`documents.get`**    | Provides access to the [get one document](/reference/api/documents#get-one-document), [get documents with POST](/reference/api/documents#get-documents-with-post), and [get documents with GET](/reference/api/documents#get-documents-with-get) endpoints                                                        |\n| **`documents.delete`** | Provides access to the [delete one document](/reference/api/documents#delete-one-document), [delete all documents](/reference/api/documents#delete-all-documents), [batch delete](/reference/api/documents#delete-documents-by-batch), and [delete by filter](/reference/api/documents#delete-documents-by-filter) endpoints |\n```\n\n----------------------------------------\n\nTITLE: Configuring User-Provided Embedder in Meilisearch\nDESCRIPTION: This curl command configures the embedder index setting in Meilisearch, setting its source to 'userProvided'. It requires specifying an embedder name and the number of dimensions for the chosen model.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/image_search_with_user_provided_embeddings.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl \\\n  -X PATCH 'MEILISEARCH_URL/indexes/movies/settings' \\\n  -H 'Content-Type: application/json' \\\n  --data-binary '{\n    \"embedders\": {\n      \"EMBEDDER_NAME\": {\n        \"source\":  \"userProvided\",\n        \"dimensions\": MODEL_DIMENSIONS\n      }\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Defining Search Rules for Tenant Tokens in JSON\nDESCRIPTION: Demonstrates the structure of search rules for tenant tokens. Rules are defined as JSON objects with index names as keys and search parameters as values.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/tenant_tokens.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"[index_name]\": {\n    \"[search_parameter]\": \"[value]\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authorization Header Example in Meilisearch API\nDESCRIPTION: Demonstrates how to include the Authorization header with a valid API key to access protected routes in Meilisearch.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/overview.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n<CodeSamples id=\"authorization_header_1\" />\n```\n\n----------------------------------------\n\nTITLE: Update API Key Response Example\nDESCRIPTION: Example response after updating an API key's properties showing the modified key details.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/keys.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Products/Reviews API key\",\n  \"description\": \"Manage documents: Products/Reviews API key\",\n  \"key\": \"d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4\",\n  \"uid\": \"6062abda-a5aa-4414-ac91-ecd7944c0f8d\",\n  \"actions\": [\n    \"documents.add\",\n    \"documents.delete\"\n  ],\n  \"indexes\": [\n    \"products\",\n    \"reviews\"\n  ],\n  \"expiresAt\": \"2021-12-31T23:59:59Z\",\n  \"createdAt\": \"2021-10-12T00:00:00Z\",\n  \"updatedAt\": \"2021-10-13T15:00:00Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Selection for REST Embedder\nDESCRIPTION: Sets up the model parameter in the request configuration. This is required by many embedding providers to specify which embedding model to use.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/configure_rest_embedder.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EMBEDDER_NAME\": {\n    \"source\": \"rest\",\n    \"url\": \"PROVIDER_URL\",\n    \"request\": {\n      \"model\": \"MODEL_NAME\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a View Composer for Meilisearch Token Access in PHP\nDESCRIPTION: This code creates an AuthComposer class that injects the Meilisearch tenant token into all views. It retrieves the token from the authenticated user's organization, making it available for front-end search functionality.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/laravel_multitenancy.mdx#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\View\\Composers;\n\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Vite;\nuse Illuminate\\View\\View;\n\nclass AuthComposer\n{\n    /**\n     * Create a new profile composer.\n     */\n    public function __construct() {}\n\n    /**\n     * Bind data to the view.\n     */\n    public function compose(View $view): void\n    {\n        $user = Auth::user();\n        $view->with([\n            'meilisearchToken' => $user->organization->meilisearch_token,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Array Filter with AND Logic in Meilisearch\nDESCRIPTION: A filter using array syntax where outer elements are connected by AND, returning horror movies directed by Jordan Peele.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_24\n\nLANGUAGE: plaintext\nCODE:\n```\n[\"genres = horror\", \"director = 'Jordan Peele'\"]\n```\n\n----------------------------------------\n\nTITLE: Weighted Federated Search Response Example\nDESCRIPTION: Example response showing results with boosted profile documents appearing first in the combined results.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/multi_search/performing_federated_search.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hits\": [\n  {\n    \"id\": 1,\n    \"name\": \"Riccardo Rotondo\",\n    \"email\": \"riccardo.rotondo@example.com\",\n      \"_federation\": {\n        \"indexUid\": \"profiles\",\n        \"queriesPosition\": 1\n      }\n    }\n  ],\n  \"processingTimeMs\": 0,\n  \"limit\": 20,\n  \"offset\": 0,\n  \"estimatedTotalHits\": 3,\n  \"semanticHitCount\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Document Template Using Liquid Syntax\nDESCRIPTION: This Liquid template demonstrates a basic document template for the movie database, including only the title and overview fields, which are considered most relevant for search.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/document_template_best_practices.mdx#2025-04-16_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n\"A movie called {{doc.title}} about {{doc.overview}}\"\n```\n\n----------------------------------------\n\nTITLE: Sample Webhook Response for Multiple Tasks\nDESCRIPTION: This is an example of the ndjson response sent by Meilisearch to the webhook URL upon completion of multiple batched tasks.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/async/task_webhook.mdx#2025-04-16_snippet_4\n\nLANGUAGE: ndjson\nCODE:\n```\n{\"uid\":4,\"indexUid\":\"books\",\"status\":\"succeeded\",\"type\":\"documentAdditionOrUpdate\",\"canceledBy\":null,\"details.receivedDocuments\":1,\"details.indexedDocuments\":1,\"duration\":\"PT0.001192S\",\"enqueuedAt\":\"2022-08-04T12:28:15.159167Z\",\"startedAt\":\"2022-08-04T12:28:15.161996Z\",\"finishedAt\":\"2022-08-04T12:28:15.163188Z\"}\n{\"uid\":5,\"indexUid\":\"books\",\"status\":\"succeeded\",\"type\":\"documentAdditionOrUpdate\",\"canceledBy\":null,\"details.receivedDocuments\":1,\"details.indexedDocuments\":1,\"duration\":\"PT0.001192S\",\"enqueuedAt\":\"2022-08-04T12:28:15.159167Z\",\"startedAt\":\"2022-08-04T12:28:15.161996Z\",\"finishedAt\":\"2022-08-04T12:28:15.163188Z\"}\n{\"uid\":6,\"indexUid\":\"books\",\"status\":\"succeeded\",\"type\":\"documentAdditionOrUpdate\",\"canceledBy\":null,\"details.receivedDocuments\":1,\"details.indexedDocuments\":1,\"duration\":\"PT0.001192S\",\"enqueuedAt\":\"2022-08-04T12:28:15.159167Z\",\"startedAt\":\"2022-08-04T12:28:15.161996Z\",\"finishedAt\":\"2022-08-04T12:28:15.163188Z\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Embedder Settings in Meilisearch\nDESCRIPTION: JSON configuration for setting up OpenAI embedder in Meilisearch. Includes API key, dimensions, model selection, and optional document template settings.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/embedders/openai.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"openai\": {\n    \"source\": \"openAi\",\n    \"apiKey\": \"<OpenAI API Key>\",\n    \"dimensions\": 1536,\n    \"documentTemplate\": \"<Custom template (Optional, but recommended)>\",\n    \"model\": \"text-embedding-3-small\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a CSV Document in Meilisearch\nDESCRIPTION: This snippet illustrates how to structure a document in CSV format for Meilisearch. It includes headers with data types and a row of data. Note that nested structures like arrays are not supported in CSV.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/getting_started/documents.mdx#2025-04-16_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\n\"id:number\",\"title:string\",\"genres:string\",\"release-year:number\"\n\"1564\",\"Kung Fu Panda\",\"Children's Animation\",\"2008\"\n```\n\n----------------------------------------\n\nTITLE: Remote Federated Multi-Search Response in JSON\nDESCRIPTION: Example JSON response for a remote federated multi-search request in Meilisearch. It includes results from multiple remote instances, with each hit containing additional _federation information including the remote instance and weighted ranking score.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/multi_search.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hits\": [\n    {\n      \"id\": 42,\n      \"title\": \"Batman returns\",\n      \"overview\": …, \n      \"_federation\": {\n        \"indexUid\": \"movies\",\n        \"queriesPosition\": 0,\n        \"weightedRankingScore\": 1.0,\n        \"remote\": \"ms-01\"\n    }\n    },\n    {\n      \"id\": 87,\n      \"description\": …,\n      \"title\": \"Batman: the killing joke\",\n      \"_federation\": {\n        \"indexUid\": \"movies\",\n        \"queriesPosition\": 1,\n        \"weightedRankingScore\": 0.9848484848484849,\n        \"remote\": \"ms-00\"\n      }\n    },\n    …\n  ],\n  \"processingTimeMs\": 35,\n  \"limit\": 5,\n  \"offset\": 0,\n  \"estimatedTotalHits\": 111,\n  \"remoteErrors\": {\n    \"ms-02\": {\n      \"message\": \"error sending request\",\n      \"code\": \"proxy_could_not_send_request\",\n      \"type\": \"system\",\n      \"link\": \"https://docs.meilisearch.com/errors#proxy_could_not_make_request\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Article Model for Meilisearch Indexing\nDESCRIPTION: Ruby code to include Meilisearch in the Article model and configure indexing settings.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/ruby_on_rails_quick_start.mdx#2025-04-16_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Article < ApplicationRecord\n    include MeiliSearch::Rails\n    \n    meilisearch do\n    # index settings\n\t# all attributes will be sent to Meilisearch if block is left empty\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Complex Multi-Index Search Rules\nDESCRIPTION: This example demonstrates a more complex search rule configuration targeting multiple indexes with different filters. It includes a wildcard rule and a specific rule for one index.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/tenant_token_reference.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"*\": {\n    \"filter\": \"user_id = 1\"\n  },\n  \"medical_records\": {\n    \"filter\": \"user_id = 1 AND published = true\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Next/Previous Navigation Buttons\nDESCRIPTION: Shows how to add Next and Previous navigation buttons to the page list interface. Creates and appends navigation buttons to the page navigation component.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/pagination.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst pageNavigation = document.querySelector('#page-navigation');\n\nconst buttonNext = document.createElement('button');\nbuttonNext.innerHTML = 'Next';\n\nconst buttonPrevious = document.createElement('button');\nbuttonPrevious.innerHTML = 'Previous';\n\npageNavigation.prepend(buttonPrevious);\npageNavigation.append(buttonNext);\n```\n\n----------------------------------------\n\nTITLE: Get Filterable Attributes Response\nDESCRIPTION: Example response showing the list of filterable attributes for an index. Returns an array of strings representing the attribute names that can be used for filtering.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"genres\",\n  \"director\",\n  \"release_date.year\"\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Meilisearch using APT and launching the server\nDESCRIPTION: This snippet shows how to add the Meilisearch package to APT sources, install the latest stable release, and then launch the Meilisearch server.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/install_meilisearch_locally.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Add Meilisearch package\necho \"deb [trusted=yes] https://apt.fury.io/meilisearch/ /\" | sudo tee /etc/apt/sources.list.d/fury.list\n\n# Update APT and install Meilisearch\nsudo apt update && sudo apt install meilisearch\n\n# Launch Meilisearch\nmeilisearch\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Meilisearch Version (Cloud Platforms)\nDESCRIPTION: Command to install a specific version of Meilisearch on cloud platforms. This allows users to choose the exact version they want to migrate to.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/updating.mdx#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"https://github.com/meilisearch/meilisearch/releases/download/{meilisearch_version}/meilisearch-linux-amd64\" --output meilisearch --location --show-error\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents with POST Request in Meilisearch\nDESCRIPTION: This snippet shows the JSON response format when retrieving documents using a POST request to the /documents/fetch endpoint. It includes document data, offset, limit, and total count.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/documents.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"title\": \"The Travels of Ibn Battuta\",\n      \"genres\": [\n        \"Travel\",\n        \"Adventure\"\n      ],\n      \"language\": \"English\",\n      \"rating\": 4.5\n    },\n    {\n      \"title\": \"Pride and Prejudice\",\n      \"genres\": [\n        \"Classics\",\n        \"Fiction\",\n        \"Romance\",\n        \"Literature\"\n      ],\n      \"language\": \"English\",\n      \"rating\": 4\n    },\n    …\n  ],\n  \"offset\": 0,\n  \"limit\": 3,\n  \"total\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Network Object Structure in Meilisearch\nDESCRIPTION: This JSON object represents the structure of a network configuration in Meilisearch, including the 'self' identifier and 'remotes' object containing information about remote instances.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/network.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"self\": \"ms-00\",\n  \"remotes\": {\n    \"ms-00\": {\n      \"url\": \"http://ms-1235.example.meilisearch.io\",\n      \"searchApiKey\": \"Ecd1SDDi4pqdJD6qYLxD3y7VZAEb4d9j6LJgt4d6xas\"\n    },\n    \"ms-01\": {\n      \"url\": \"http://ms-4242.example.meilisearch.io\",\n      \"searchApiKey\": \"hrVu-OMcjPGElK7692K7bwriBoGyHXTMvB5NmZkMKqQ\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SSL Configuration Options\nDESCRIPTION: Comprehensive SSL configuration settings including certificate paths, authentication requirements, and session management options.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/configure_meilisearch_at_launch.mdx#2025-04-16_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nMEILI_SSL_CERT_PATH=\"path/to/cert\"\nMEILI_SSL_KEY_PATH=\"path/to/key\"\nMEILI_SSL_AUTH_PATH=\"path/to/auth\"\nMEILI_SSL_OCSP_PATH=\"path/to/ocsp\"\n```\n\n----------------------------------------\n\nTITLE: Sample Webhook Response for Single Task\nDESCRIPTION: This is an example of the ndjson response sent by Meilisearch to the webhook URL upon completion of a single task.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/async/task_webhook.mdx#2025-04-16_snippet_3\n\nLANGUAGE: ndjson\nCODE:\n```\n{\"uid\":4,\"indexUid\":\"books\",\"status\":\"succeeded\",\"type\":\"documentAdditionOrUpdate\",\"canceledBy\":null,\"details.receivedDocuments\":1,\"details.indexedDocuments\":1,\"duration\":\"PT0.001192S\",\"enqueuedAt\":\"2022-08-04T12:28:15.159167Z\",\"startedAt\":\"2022-08-04T12:28:15.161996Z\",\"finishedAt\":\"2022-08-04T12:28:15.163188Z\"}\n```\n\n----------------------------------------\n\nTITLE: Compressing Request Body with gzip in Meilisearch API\nDESCRIPTION: Demonstrates how to compress the request body using gzip and send it to Meilisearch API with the appropriate Content-Encoding header.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/overview.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncat ~/movies.json | gzip | curl -X POST 'MEILISEARCH_URL/indexes/movies/documents' --data-binary @- -H 'Content-Type: application/json' -H 'Content-Encoding: gzip'\n```\n\n----------------------------------------\n\nTITLE: Inequality Operator Filter in Meilisearch\nDESCRIPTION: A filter using the inequality operator to return all documents that don't have 'action' in their genres field.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ngenres != action\n```\n\n----------------------------------------\n\nTITLE: Sample E-commerce Dataset in JSON\nDESCRIPTION: An example JSON dataset representing different versions of a Lee jeans leather jacket, used to demonstrate the distinct attribute functionality.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/relevancy/distinct_attribute.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 1,\n    \"description\": \"Leather jacket\",\n    \"brand\": \"Lee jeans\",\n    \"color\": \"brown\",\n    \"product_id\": \"123456\"\n  },\n  {\n    \"id\": 2,\n    \"description\": \"Leather jacket\",\n    \"brand\": \"Lee jeans\",\n    \"color\": \"black\",\n    \"product_id\": \"123456\"\n  },\n  {\n    \"id\": 3,\n    \"description\": \"Leather jacket\",\n    \"brand\": \"Lee jeans\",\n    \"color\": \"blue\",\n    \"product_id\": \"123456\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Meilisearch\nDESCRIPTION: Environment variables configuration for connecting Laravel Scout to Meilisearch. Sets the Scout driver, Meilisearch host URL, and API key.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/laravel_scout.mdx#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nSCOUT_DRIVER=meilisearch\n# Use the host below if you're running Meilisearch via Laravel Sail\nMEILISEARCH_HOST=http://meilisearch:7700\nMEILISEARCH_KEY=masterKey\n```\n\n----------------------------------------\n\nTITLE: Get Prefix Search Settings Response Example\nDESCRIPTION: Example JSON response from the GET prefix search settings endpoint showing the default setting 'indexingTime'.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n\"indexingTime\"\n```\n\n----------------------------------------\n\nTITLE: Search Request Using Tenant Token - cURL Example\nDESCRIPTION: Example of how to use a generated tenant token to make a search request to Meilisearch's API using cURL.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/tenant_tokens.mdx#2025-04-16_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl \\\n  -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZWFyY2hSdWxlcyI6eyJwYXRpZW50X21lZGljYWxfcmVjb3JkcyI6eyJmaWx0ZXIiOiJ1c2VyX2lkID0gMSJ9fSwiYXBpS2V5VWlkIjoiYWM1Y2Q5N2QtNWE0Yi00MjI2LWE4NjgtMmQwZWI2ZDE5N2FiIn0.tgz_78fKXH2Jg6TrD7ZU1Hi4YHLu8wQZwMBn3I4OnfA' \\\n  -X GET 'http://localhost:7700/indexes/patient_medical_records/search'\n```\n\n----------------------------------------\n\nTITLE: Importing Meilisearch Dump (Cloud Platforms)\nDESCRIPTION: Command to launch Meilisearch and import a dump file on cloud platforms. This restores the database on cloud-hosted instances after migration.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/updating.mdx#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmeilisearch --db-path /var/lib/meilisearch/data.ms --import-dump \"/var/opt/meilisearch/dumps/{dump_uid.dump}\"\n```\n\n----------------------------------------\n\nTITLE: String Value Filters with Quotes in Meilisearch\nDESCRIPTION: Examples showing how to filter string values containing whitespace by enclosing them in single or double quotes.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ndirector = 'Jordan Peele'\ndirector = \"Tim Burton\"\n```\n\n----------------------------------------\n\nTITLE: Generating Unique IDs for Split Documents in Meilisearch\nDESCRIPTION: Updated Node.js script that generates unique IDs for split documents. It creates a 'story_id' field to maintain the original document's ID and generates a new unique ID for each split document.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/improve_relevancy_large_documents.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n#!/usr/bin/env node\n\nconst datasetPath = process.argv[2];\nconst datasetFile = fs.readFileSync(datasetPath);\nconst documents = JSON.parse(datasetFile);\n\nconst splitDocuments = [];\n\nfor (let documentNumber = documents.length, i = 0; i < documentNumber; i += 1) {\n  const document = documents[i];\n  const story = document.text;\n\n  const paragraphs = story.split(\"\\n\\n\");\n  \n  for (let paragraphNumber = paragraphs.length, o = 0; o < paragraphNumber; o += 1) {\n    splitDocuments.push({\n      \"story_id\": document.id,\n      \"id\": `${document.id}-${o}`,\n      \"title\": document.title,\n      \"author\": document.author,\n      \"text\": paragraphs[o]\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Meilisearch Credentials\nDESCRIPTION: Ruby code to configure Meilisearch URL and API key in the Rails application.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/ruby_on_rails_quick_start.mdx#2025-04-16_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nMeiliSearch::Rails.configuration = {\n  meilisearch_url: '<your Meilisearch URL>',\n  meilisearch_api_key: '<your Meilisearch API key>'\n}\n```\n\n----------------------------------------\n\nTITLE: Create API Key Response Example\nDESCRIPTION: Example response when creating a new API key showing the generated key and its configured properties.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/keys.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": null,\n  \"description\": \"Manage documents: Products/Reviews API key\",\n  \"key\": \"d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4\",\n  \"uid\": \"6062abda-a5aa-4414-ac91-ecd7944c0f8d\",\n  \"actions\": [\n    \"documents.add\"\n  ],\n  \"indexes\": [\n    \"products\"\n  ],\n  \"expiresAt\": \"2021-11-13T00:00:00Z\",\n  \"createdAt\": \"2021-11-12T10:00:00Z\",\n  \"updatedAt\": \"2021-11-12T10:00:00Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Metrics Endpoint in Meilisearch\nDESCRIPTION: cURL command to enable the experimental metrics feature by sending a PATCH request to the experimental-features endpoint.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/metrics.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl \\\n  -X PATCH 'MEILISEARCH_URL/experimental-features/' \\\n  -H 'Content-Type: application/json' \\\n  --data-binary '{\n    \"metrics\": true\n  }'\n```\n\n----------------------------------------\n\nTITLE: Cropped Search Results Example in JSON\nDESCRIPTION: Example showing how cropMarker affects the formatted search results when searching for 'shifu', demonstrating the cropping of overview text with custom markers.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/search.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 50393,\n  \"title\": \"Kung Fu Panda Holiday\",\n  \"poster\": \"https://image.tmdb.org/t/p/w1280/gp18R42TbSUlw9VnXFqyecm52lq.jpg\",\n  \"overview\": \"The Winter Feast is Po's favorite holiday. Every year he and his father hang decorations, cook together, and serve noodle soup to the villagers. But this year Shifu informs Po that as Dragon Warrior, it is his duty to host the formal Winter Feast at the Jade Palace. Po is caught between his obligations as the Dragon Warrior and his family traditions: between Shifu and Mr. Ping.\",\n  \"release_date\": 1290729600,\n  \"_formatted\": {\n    \"id\": 50393,\n    \"title\": \"Kung Fu Panda Holiday\",\n    \"poster\": \"https://image.tmdb.org/t/p/w1280/gp18R42TbSUlw9VnXFqyecm52lq.jpg\",\n    \"overview\": \"[…]But this year Shifu informs Po that as Dragon Warrior,[…]\",\n    \"release_date\": 1290729600\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Search Result with Distinct Attribute in JSON\nDESCRIPTION: The JSON response after setting 'product_id' as the distinct attribute and querying for 'lee leather jacket'. It demonstrates how only one document with the same 'product_id' is returned.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/relevancy/distinct_attribute.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hits\": [\n    {\n      \"id\": 1,\n      \"description\": \"Leather jacket\",\n      \"brand\": \"Lee jeans\",\n      \"color\": \"brown\",\n      \"product_id\": \"123456\"\n    }\n  ],\n  \"offset\": 0,\n  \"limit\": 20,\n  \"estimatedTotalHits\": 1,\n  \"processingTimeMs\": 0,\n  \"query\": \"lee leather jacket\"\n}\n```\n\n----------------------------------------\n\nTITLE: Expiry Date in Tenant Token Payload\nDESCRIPTION: This example demonstrates how to include an expiry date in the tenant token payload. The expiry date is represented as a UNIX timestamp and is optional but recommended for security reasons.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/tenant_token_reference.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exp\": 1646756934\n}\n```\n\n----------------------------------------\n\nTITLE: Update Prefix Search Settings Body Example\nDESCRIPTION: Example of valid values for the request body when updating prefix search settings, showing options for enabling at indexing time or disabling.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n\"indexingTime\" | \"disabled\"\n```\n\n----------------------------------------\n\nTITLE: Update Prefix Search Settings Response Example\nDESCRIPTION: Example JSON response after updating prefix search settings, showing the task details including task ID, index, status and timestamp.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"INDEX_UID\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2024-07-19T22:33:18.523881Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Object Flattening Example - Simple\nDESCRIPTION: Shows how Meilisearch flattens a nested object using dot notation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/engine/datatypes.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 0,\n  \"patient_name\": {\n    \"forename\": \"Imogen\",\n    \"surname\": \"Temult\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Geosearch Distance Response Example in JSON\nDESCRIPTION: Sample JSON response showing geolocation search results with distance calculations from a specified _geoPoint, including the geoDistance field in meters.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/search.mdx#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 1,\n    \"name\": \"Nàpiz' Milano\",\n    \"_geo\": {\n      \"lat\": 45.4777599,\n      \"lng\": 9.1967508\n    },\n    \"_geoDistance\": 1532\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Distinct Attribute via Meilisearch API\nDESCRIPTION: cURL command to configure story_id as the distinct attribute for a Meilisearch index. This prevents duplicate search results when documents share the same story_id.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/improve_relevancy_large_documents.mdx#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl \\\n  -X PUT 'MEILISEARCH_URL/indexes/INDEX_NAME/settings/distinct-attribute' \\\n  -H 'Content-Type: application/json' \\\n  --data-binary '\"story_id\"'\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Pagination Settings - JSON\nDESCRIPTION: Example response from a GET request to the pagination settings endpoint showing the maxTotalHits property which controls the maximum number of search results Meilisearch can return.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"maxTotalHits\": 1000\n}\n```\n\n----------------------------------------\n\nTITLE: Building Search Rules for Meilisearch Tenant Token Payload in JSON\nDESCRIPTION: Defines a set of search rules for a specific index, including a filter condition.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/generate_tenant_token_scratch.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"INDEX_NAME\": {\n    \"filter\": \"ATTRIBUTE = VALUE\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Medical Appointment Data Structure in JSON\nDESCRIPTION: A sample JSON array containing medical appointment data with patient information, appointment details, and status. This represents the document structure stored in the Meilisearch index.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/multitenancy_nodejs.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 1,\n    \"patient\": \"John\",\n    \"details\": \"I think I caught a cold. Can you help me?\",\n    \"status\": \"pending\"\n  },\n  {\n    \"id\": 2,\n    \"patient\": \"Zia\",\n    \"details\": \"I'm suffering from fever. I need an appointment ASAP.\",\n    \"status\": \"pending\"\n  },\n  {\n    \"id\": 3,\n    \"patient\": \"Kevin\",\n    \"details\": \"Some confidential information Kevin has shared.\",\n    \"status\": \"confirmed\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Get All Keys Response Example\nDESCRIPTION: Example response showing multiple API keys with their properties including name, description, permissions, and timestamps. Returns the 20 most recently created keys by default.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/keys.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"name\": null,\n      \"description\": \"Manage documents: Products/Reviews API key\",\n      \"key\": \"d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4\",\n      \"uid\": \"6062abda-a5aa-4414-ac91-ecd7944c0f8d\",\n      \"actions\": [\n        \"documents.add\",\n        \"documents.delete\"\n      ],\n      \"indexes\": [\n        \"prod*\",\n        \"reviews\"\n      ],\n      \"expiresAt\": \"2021-12-31T23:59:59Z\",\n      \"createdAt\": \"2021-10-12T00:00:00Z\",\n      \"updatedAt\": \"2021-10-13T15:00:00Z\"\n    }\n  ],\n  \"offset\": 0,\n  \"limit\": 3,\n  \"total\": 7\n}\n```\n\n----------------------------------------\n\nTITLE: Experimental Features Object Structure in JSON\nDESCRIPTION: Shows the structure of the experimental features configuration object containing boolean flags for various experimental features like metrics, logsRoute, containsFilter, editDocumentsByFunction, and network.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/experimental_features.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metrics\": false,\n  \"logsRoute\": true,\n  \"containsFilter\": false,\n  \"editDocumentsByFunction\": false,\n  \"network\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Body Format for Updating Separator Tokens in Meilisearch\nDESCRIPTION: Shows the expected format for setting custom separator tokens. An array of strings is provided where each string represents a word separator to be added.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n[\"|\", \"&hellip;\"]\n```\n\n----------------------------------------\n\nTITLE: Response: Delete All Documents\nDESCRIPTION: Example response when deleting all documents from an index. Returns a task object with details about the deletion operation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/documents.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"taskUid\": 1,\n    \"indexUid\": \"movies\",\n    \"status\": \"enqueued\",\n    \"type\": \"documentDeletion\",\n    \"enqueuedAt\": \"2021-08-11T09:25:53.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Restaurant Search Results with Geolocation Example\nDESCRIPTION: Example JSON response showing restaurant search results with geolocation data, including latitude and longitude coordinates for each restaurant.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/geosearch.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 2,\n    \"name\": \"Bouillon Pigalle\",\n    \"address\": \"22 Bd de Clichy, 75018 Paris, France\",\n    \"type\": \"french\",\n    \"rating\": 8,\n    \"_geo\": {\n      \"lat\": 48.8826517, \n      \"lng\": 2.3352748\n    }\n  },\n  {\n    \"id\": 3,\n    \"name\": \"Artico Gelateria Tradizionale\",\n    \"address\": \"Via Dogana, 1, 20123 Milan, Italy\",\n    \"type\": \"ice cream\",\n    \"rating\": 10,\n    \"_geo\": {\n      \"lat\": 45.4632046,\n      \"lng\": 9.1719421\n    }\n  },\n  {\n    \"id\": 1,\n    \"name\": \"Nàpiz' Milano\",\n    \"address\": \"Viale Vittorio Veneto, 30, 20124, Milan, Italy\",\n    \"type\": \"pizza\",\n    \"rating\": 9,\n    \"_geo\": {\n      \"lat\": 45.4777599, \n      \"lng\": 9.1967508\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Facet Search Settings - JSON\nDESCRIPTION: Example response from a GET request to the facet search settings endpoint showing the boolean value that indicates whether facet search is enabled or disabled.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_23\n\nLANGUAGE: json\nCODE:\n```\ntrue\n```\n\n----------------------------------------\n\nTITLE: Adding a Document to Meilisearch Index\nDESCRIPTION: This cURL command adds a test document to the 'books' index in Meilisearch, triggering a webhook notification upon completion.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/async/task_webhook.mdx#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl \\\n  -X POST 'MEILISEARCH_URL/indexes/books/documents' \\\n  -H 'Content-Type: application/json' \\\n  --data-binary '[\n    {\n      \"id\": 1,\n      \"title\": \"Nuestra parte de noche\",\n      \"author\": \"Mariana Enríquez\"\n    }\n  ]'\n```\n\n----------------------------------------\n\nTITLE: Querying Search Results with HitsPerPage in JavaScript\nDESCRIPTION: This example shows how to use the Meilisearch JavaScript SDK to query search results using the hitsPerPage parameter. It retrieves the first 25 search results for the query 'tarkovsky'.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/pagination.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = await index.search(\n  \"tarkovsky\",\n  {\n    hitsPerPage: 25,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stats Object Structure in JSON\nDESCRIPTION: This snippet shows the structure of the stats object returned by the Meilisearch API. It includes database size, last update time, and detailed information about each index.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/stats.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"databaseSize\": 447819776,\n  \"usedDatabaseSize\": 196608,\n  \"lastUpdate\": \"2019-11-15T11:15:22.092896Z\",\n  \"indexes\": {\n    \"movies\": {\n      \"numberOfDocuments\": 19654,\n      \"numberOfEmbeddedDocuments\": 1,\n      \"numberOfEmbeddings\": 1,\n      \"isIndexing\": false,\n      \"fieldDistribution\": {\n        \"poster\": 19654,\n        \"overview\": 19654,\n        \"title\": 19654,\n        \"id\": 19654,\n        \"release_date\": 19654\n      }\n    },\n    \"books\": {\n      \"numberOfDocuments\": 5,\n      \"numberOfEmbeddedDocuments\": 5,\n      \"numberOfEmbeddings\": 10,\n      \"isIndexing\": false,\n      \"fieldDistribution\": {\n        \"id\": 5,\n        \"title\": 5,\n        \"author\": 5,\n        \"price\": 5, \n        \"genres\": 5\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Token Header for Meilisearch Tenant Token in JSON\nDESCRIPTION: Creates a JSON object specifying the JWT type and encryption algorithm (HS256) for the token header.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/generate_tenant_token_scratch.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Search Methods in Algolia and Meilisearch\nDESCRIPTION: This snippet compares the search method syntax between Algolia and Meilisearch. Both methods accept a query string and search parameters, but the structure differs slightly.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/algolia_migration.mdx#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nindex.search(string query, { searchParameters, requestOptions }) // Algolia\nindex.search(string query, object searchParameters) // Meilisearch\n```\n\n----------------------------------------\n\nTITLE: API Response for Listing API Keys\nDESCRIPTION: JSON response from Meilisearch when querying the /keys endpoint to list all API keys in the instance.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/basic_security.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"name\": \"Default Search API Key\",\n      \"description\": \"Use it to search from the frontend\",\n      \"key\": \"0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33\",\n      \"uid\": \"123-345-456-987-abc\",\n      \"actions\": [\n        \"search\"\n      ],\n      \"indexes\": [\n        \"*\"\n      ],\n      \"expiresAt\": null,\n      \"createdAt\": \"2024-01-25T16:19:53.949636Z\",\n      \"updatedAt\": \"2024-01-25T16:19:53.949636Z\"\n    },\n    {\n      \"name\": \"Default Admin API Key\",\n      \"description\": \"Use it for anything that is not a search operation. Caution! Do not expose it on a public frontend\",\n      \"key\": \"62cdb7020ff920e5aa642c3d4066950dd1f01f4d\",\n      \"uid\": \"123-345-456-987-abc\",\n      \"actions\": [\n        \"*\"\n      ],\n      \"indexes\": [\n        \"*\"\n      ],\n      \"expiresAt\": null,\n      \"createdAt\": \"2024-01-25T16:19:53.94816Z\",\n      \"updatedAt\": \"2024-01-25T16:19:53.94816Z\"\n    }\n  ],\n  …\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Task Response in JSON\nDESCRIPTION: Example JSON response for the GET /tasks/{task_uid} endpoint, which retrieves details of a single task. The response includes all fields of the task object, such as status, type, and timing information.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/tasks.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uid\": 1,\n  \"indexUid\": \"movies\",\n  \"status\": \"succeeded\",\n  \"type\": \"settingsUpdate\",\n  \"canceledBy\": null,\n  \"details\": {\n    \"rankingRules\": [\n      \"typo\",\n      \"ranking:desc\",\n      \"words\",\n      \"proximity\",\n      \"attribute\",\n      \"exactness\"\n    ]\n  },\n  \"error\": null,\n  \"duration\": \"PT1S\",\n  \"enqueuedAt\": \"2021-08-10T14:29:17.000000Z\",\n  \"startedAt\": \"2021-08-10T14:29:18.000000Z\",\n  \"finishedAt\": \"2021-08-10T14:29:19.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Token Expiry Timestamp in JavaScript\nDESCRIPTION: Calculates a UNIX timestamp for token expiration, set to 20 minutes from the current time.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/generate_tenant_token_scratch.mdx#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nparseInt(Date.now() / 1000) + 20 * 60\n```\n\n----------------------------------------\n\nTITLE: Reset Prefix Search Settings Response Example\nDESCRIPTION: Example JSON response after resetting prefix search settings, showing the task details for tracking the status of the reset operation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"INDEX_UID\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2024-07-19T22:35:33.723983Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading data to Meilisearch index\nDESCRIPTION: JavaScript code to upload documents to a Meilisearch index in batches using the addDocumentsInBatches method.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/algolia_migration.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst BATCH_SIZE = 100000;\nawait meiliIndex.addDocumentsInBatches(records, BATCH_SIZE);\n```\n\n----------------------------------------\n\nTITLE: Configuring Meilisearch with Webhook URL and Authorization Header\nDESCRIPTION: This command starts Meilisearch with a configured webhook URL and an authorization header for secure notifications.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/async/task_webhook.mdx#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmeilisearch --task-webhook-url http://localhost:8000 --task-webhook-authorization-header Bearer aSampleMasterKey\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Task After Settings Update - JSON\nDESCRIPTION: Example response after updating pagination settings, showing the task information returned by Meilisearch. This includes the task ID, index, status, type, and timestamp.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"books\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2022-04-14T20:56:44.991039Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Schedule Snapshot Configuration Options\nDESCRIPTION: Configuration settings for enabling and scheduling automatic snapshots in Meilisearch. Allows setting custom intervals for snapshot creation with default 24-hour scheduling when enabled without a value.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/configure_meilisearch_at_launch.mdx#2025-04-16_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nMEILI_SCHEDULE_SNAPSHOT=86400\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Embedding Response Format\nDESCRIPTION: Sets up the response mapping for providers that return multiple embeddings in an array, supporting batch processing with the {{..}} placeholder.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/configure_rest_embedder.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EMBEDDER_NAME\": {\n    \"source\": \"rest\",\n    \"url\": \"PROVIDER_URL\",\n    \"request\": {\n      \"model\": \"MODEL_NAME\",\n      \"input\": [\n        \"{{text}}\", \n        \"{{..}}\"\n      ]\n    },\n    \"response\": {\n      \"data\": [\n        {\n          \"embedding\": \"{{embedding}}\"\n        },\n        \"{{..}}\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Embedder Response Format in Meilisearch\nDESCRIPTION: Example JSON configuration showing how to define the expected response structure from a REST embedder. The '{{embedding}}' placeholder indicates where Meilisearch should extract the embedding vector.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": \"rest\",\n  \"response\": {\n    \"data\": \"{{embedding}}\"\n    …\n  },\n  …\n}\n```\n\n----------------------------------------\n\nTITLE: List Indexes Response Example\nDESCRIPTION: Example response when listing multiple indexes, including pagination metadata.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/indexes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"uid\": \"books\",\n      \"createdAt\": \"2022-03-08T10:00:27.377346Z\",\n      \"updatedAt\": \"2022-03-08T10:00:27.391209Z\",\n      \"primaryKey\": \"id\"\n    },\n    {\n      \"uid\": \"meteorites\",\n      \"createdAt\": \"2022-03-08T10:00:44.518768Z\",\n      \"updatedAt\": \"2022-03-08T10:00:44.582083Z\",\n      \"primaryKey\": \"id\"\n    },\n    {\n      \"uid\": \"movies\",\n      \"createdAt\": \"2022-02-10T07:45:15.628261Z\",\n      \"updatedAt\": \"2022-02-21T15:28:43.496574Z\",\n      \"primaryKey\": \"id\"\n    }\n  ],\n  \"offset\": 0,\n  \"limit\": 3,\n  \"total\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Snapshot Response in Meilisearch API\nDESCRIPTION: Example response from the POST /snapshots endpoint showing the structure of a snapshot creation task. The response includes a taskUid for tracking the snapshot creation progress, the status of the task, and timing details.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/snapshots.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": null,\n  \"status\": \"enqueued\",\n  \"type\": \"snapshotCreation\",\n  \"enqueuedAt\": \"2023-06-21T11:09:36.417758Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Search Rules in JSON\nDESCRIPTION: JSON structure defining search rules for tenant token payload with index name and filter conditions.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/generate_tenant_token_third_party.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"INDEX_NAME\": {\n    \"filter\": \"ATTRIBUTE = VALUE\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reset Ranking Rules Response Example\nDESCRIPTION: Example JSON response after resetting ranking rules to their default values, providing task information for tracking the operation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"movies\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2021-08-11T09:25:53.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Meilisearch with Search Term\nDESCRIPTION: Example of a search query response for the term 'shifu', demonstrating the structure of search results including hit details.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/search.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hits\": [\n    {\n      \"id\": 50393,\n      \"title\": \"Kung Fu Panda Holiday\",\n      \"poster\": \"https://image.tmdb.org/t/p/w500/rV77WxY35LuYLOuQvBeD1nyWMuI.jpg\",\n      \"overview\": \"The Winter Feast is Po's favorite holiday. Every year he and his father hang decorations, cook together, and serve noodle soup to the villagers. But this year Shifu informs Po that as Dragon Warrior, it is his duty to host the formal Winter Feast at the Jade Palace.\",\n      \"release_date\": 1290729600,\n      \"genres\": [\n        \"Animation\",\n        \"Family\",\n        \"TV Movie\"\n      ]\n    }\n  ],\n  \"query\": \"shifu\"\n}\n```\n\n----------------------------------------\n\nTITLE: Snapshot Directory Configuration\nDESCRIPTION: Specifies the directory path where Meilisearch will store snapshots. Defaults to 'snapshots/' if not specified.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/configure_meilisearch_at_launch.mdx#2025-04-16_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nMEILI_SNAPSHOT_DIR=\"snapshots/\"\n```\n\n----------------------------------------\n\nTITLE: Faceting Settings Response\nDESCRIPTION: Example JSON response showing default faceting settings configuration.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"maxValuesPerFacet\": 100,\n  \"sortFacetValuesBy\": {\n    \"*\": \"alpha\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Remote Object Structure in Meilisearch Network\nDESCRIPTION: This JSON object shows the structure of a single remote object within the network configuration, including the URL and search API key for a remote instance.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/network.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"ms-00\": {\n  \"url\": \"http://ms-1235.example.meilisearch.io\",\n  \"searchApiKey\": \"Ecd1SDDi4pqdJD6qYLxD3y7VZAEb4d9j6LJgt4d6xas\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshots in Meilisearch with Docker\nDESCRIPTION: Command to run Meilisearch with snapshot scheduling enabled. It specifies the snapshot directory within the mounted volume where snapshots will be stored.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/docker.mdx#2025-04-16_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it --rm \\\n  -p 7700:7700 \\\n  -v $(pwd)/meili_data:/meili_data \\\n  getmeili/meilisearch:v1.14 \\\n  meilisearch --schedule-snapshot --snapshot-dir /meili_data/snapshots\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Meilisearch Version (Local)\nDESCRIPTION: Command to install the latest version of Meilisearch on a local machine. This is part of the migration process to update to the newest Meilisearch version.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/updating.mdx#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://install.meilisearch.com | sh\n```\n\n----------------------------------------\n\nTITLE: Specific Index Filtering in JSON\nDESCRIPTION: Shows how to apply a specific filter rule to the 'patient_medical_records' index, limiting results to a particular user_id and published status.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/tenant_tokens.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"patient_medical_records\": {\n    \"filter\": \"user_id = 1 AND published = true\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing project and creating script file\nDESCRIPTION: Commands to create a new directory, initialize a Node.js project, and create a script file for the migration process.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/algolia_migration.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir algolia-meilisearch-migration\ncd algolia-meilisearch-migration\nnpm init -y\ntouch script.js\n```\n\n----------------------------------------\n\nTITLE: Task Webhook Configuration\nDESCRIPTION: Configuration for setting up webhook notifications for task completion events. Includes URL and optional authorization header settings.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/configure_meilisearch_at_launch.mdx#2025-04-16_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nMEILI_TASK_WEBHOOK_URL=\"webhook_url\"\nMEILI_TASK_WEBHOOK_AUTHORIZATION_HEADER=\"auth_token\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Meilisearch Version Information via API\nDESCRIPTION: This snippet demonstrates the JSON response structure when querying the /version endpoint of a Meilisearch instance. It includes the commit SHA, commit date, and package version of the running Meilisearch instance.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/version.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"commitSha\": \"b46889b5f0f2f8b91438a08a358ba8f05fc09fc1\",\n  \"commitDate\": \"2019-11-15T09:51:54.278247+00:00\",\n  \"pkgVersion\": \"0.1.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reset Filterable Attributes Response\nDESCRIPTION: Response format when resetting filterable attributes showing the enqueued task details.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"movies\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2021-08-11T09:25:53.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Geographic Radius Filter Structure\nDESCRIPTION: JSON structure for filtering results within a circular geographic area using latitude, longitude and distance in meters.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/search.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n_geoRadius(lat, lng, distance_in_meters)\n```\n\n----------------------------------------\n\nTITLE: Creating Data Directories for Meilisearch\nDESCRIPTION: Creates the directories where Meilisearch will store its data, dumps, and snapshots, and sets appropriate permissions.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/running_production.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdir /var/lib/meilisearch/data /var/lib/meilisearch/dumps /var/lib/meilisearch/snapshots\nchown -R meilisearch:meilisearch /var/lib/meilisearch\nchmod 750 /var/lib/meilisearch\n```\n\n----------------------------------------\n\nTITLE: Restarting Meilisearch Service after Configuration Changes\nDESCRIPTION: Shows the command to restart the Meilisearch service after making configuration changes in a cloud-hosted instance.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/configure_meilisearch_at_launch.mdx#2025-04-16_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nsystemctl restart meilisearch\n```\n\n----------------------------------------\n\nTITLE: Configure OpenAI Source - JSON\nDESCRIPTION: Embedder configuration specifying OpenAI as the source for generating embeddings.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/getting_started_with_ai_search.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"products-openai\": {\n    \"source\": \"openAi\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Current Instance in Network Configuration\nDESCRIPTION: cURL command to specify which remote corresponds to the current instance using the self field.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/multi_search/implement_sharding.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -X PATCH 'MEILISEARCH_URL/network' \\\n  -H 'Content-Type: application/json' \\\n  --data-binary '{\n    \"self\": \"REMOTE_NAME_1\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Comparing Index Instantiation in Algolia and Meilisearch\nDESCRIPTION: This snippet demonstrates how to instantiate an index in both Algolia and Meilisearch. In Algolia, the method is called on the client instance, while in Meilisearch, it's called on the client instance as well.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/algolia_migration.mdx#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclient.initIndex() // Algolia\nclient.index() // Meilisearch\n```\n\n----------------------------------------\n\nTITLE: Downloading Meilisearch Default Configuration\nDESCRIPTION: Downloads the default configuration file for Meilisearch from the GitHub repository.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/running_production.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://raw.githubusercontent.com/meilisearch/meilisearch/latest/config.toml > /etc/meilisearch.toml\n```\n\n----------------------------------------\n\nTITLE: Facet Search Response\nDESCRIPTION: Response from the facet search endpoint showing matching facet values and their document counts when searching for genre values starting with 'c'. This allows for searching within facet values.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/search_with_facet_filters.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  …\n  \"facetHits\": [\n    {\n      \"value\": \"Children's Literature\",\n      \"count\": 1\n    },\n    {\n      \"value\": \"Classics\",\n      \"count\": 6\n    },\n    {\n      \"value\": \"Comedy\",\n      \"count\": 2\n    },\n    {\n      \"value\": \"Coming-of-Age\",\n      \"count\": 1\n    }\n  ],\n  \"facetQuery\": \"c\",\n  …\n}\n```\n\n----------------------------------------\n\nTITLE: Running older versions of Meilisearch using Docker\nDESCRIPTION: This snippet shows how to pull a specific version of Meilisearch Docker image and run it in development mode with a master key.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/install_meilisearch_locally.mdx#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Fetch specific version of Meilisearch image from DockerHub. Replace vX.Y.Z with the version you want to use\ndocker pull getmeili/meilisearch:vX.Y.Z\n\n# Launch Meilisearch in development mode with a master key\ndocker run -it --rm \\\n    -p 7700:7700 \\\n    -e MEILI_ENV='development' \\\n    -v $(pwd)/meili_data:/meili_data \\\n    getmeili/meilisearch:vX.Y.Z\n# Use ${pwd} instead of $(pwd) in PowerShell\n```\n\n----------------------------------------\n\nTITLE: Installing Meilisearch Rails Gem\nDESCRIPTION: Command to add the meilisearch-rails gem to the Rails application.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/ruby_on_rails_quick_start.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbundle add meilisearch-rails\n```\n\n----------------------------------------\n\nTITLE: Empty Array Response for Getting Separator Tokens in Meilisearch\nDESCRIPTION: Shows the empty array response when getting separator tokens that haven't been explicitly set, indicating no custom separator tokens are configured.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Task Status with Meilisearch API\nDESCRIPTION: This snippet shows how to use the Meilisearch API to retrieve information about a specific task using its taskUid. This allows you to monitor the progress and status of asynchronous operations.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/async/working_with_tasks.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 0,\n  \"indexUid\": \"movies\",\n  \"status\": \"enqueued\",\n  \"type\": \"documentAdditionOrUpdate\",\n  \"enqueuedAt\": \"2021-08-11T09:25:53.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Settings Update Task Response\nDESCRIPTION: JSON response structure returned when settings are updated, containing task ID and status information.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"movies\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2021-08-11T09:25:53.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Highlighted Search Results Example in JSON\nDESCRIPTION: Example demonstrating how attributesToHighlight affects search results by wrapping matched terms in highlight tags within the overview field.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/search.mdx#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 50393,\n  \"title\": \"Kung Fu Panda Holiday\",\n  \"poster\": \"https://image.tmdb.org/t/p/w1280/gp18R42TbSUlw9VnXFqyecm52lq.jpg\",\n  \"overview\": \"The Winter Feast is Po's favorite holiday. Every year he and his father hang decorations, cook together, and serve noodle soup to the villagers. But this year Shifu informs Po that as Dragon Warrior, it is his duty to host the formal Winter Feast at the Jade Palace. Po is caught between his obligations as the Dragon Warrior and his family traditions: between Shifu and Mr. Ping.\",\n  \"release_date\": 1290729600,\n  \"_formatted\": {\n    \"id\": 50393,\n    \"title\": \"Kung Fu Panda Holiday\",\n    \"poster\": \"https://image.tmdb.org/t/p/w1280/gp18R42TbSUlw9VnXFqyecm52lq.jpg\",\n    \"overview\": \"The <em>Winter Feast</em> is Po's favorite holiday. Every year he and his father hang decorations, cook together, and serve noodle soup to the villagers. But this year Shifu informs Po that as Dragon Warrior, it is his duty to host the formal <em>Winter Feast</em> at the Jade Palace. Po is caught between his obligations as the Dragon Warrior and his family traditions: between Shifu and Mr. Ping.\",\n    \"release_date\": 1290729600\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling and Restarting Nginx Service\nDESCRIPTION: Reloads systemd configuration, enables Nginx to start on system boot, and restarts the Nginx service to apply the new configuration.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/running_production.mdx#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl daemon-reload\nsystemctl enable nginx\nsystemctl restart nginx\n```\n\n----------------------------------------\n\nTITLE: Compiling older versions of Meilisearch from source\nDESCRIPTION: This snippet demonstrates how to clone the Meilisearch repository, checkout a specific version, compile the project, and execute the binary.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/install_meilisearch_locally.mdx#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/meilisearch/meilisearch\ncd meilisearch\n# Replace vX.Y.Z with the specific version you want to use\ngit checkout vX.Y.Z\n\n# Update the Rust toolchain to the latest version\nrustup update\n\n# Compile the project\ncargo build --release\n\n# Execute the binary\n./target/release/meilisearch\n```\n\n----------------------------------------\n\nTITLE: Retrieving Task List Response in JSON\nDESCRIPTION: Example JSON response for the GET /tasks endpoint, which retrieves a list of tasks. The response includes an array of task objects, pagination information, and metadata about the result set.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/tasks.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"uid\": 1,\n      \"indexUid\": \"movies_reviews\",\n      \"status\": \"failed\",\n      \"type\": \"documentAdditionOrUpdate\",\n      \"canceledBy\": null,\n      \"details\": {\n        \"receivedDocuments\": 100,\n        \"indexedDocuments\": 0\n      },\n      \"error\": null,\n      \"duration\": null,\n      \"enqueuedAt\": \"2021-08-12T10:00:00.000000Z\",\n      \"startedAt\": null,\n      \"finishedAt\": null\n    },\n    {\n      \"uid\": 0,\n      \"indexUid\": \"movies\",\n      \"status\": \"succeeded\",\n      \"type\": \"documentAdditionOrUpdate\",\n      \"canceledBy\": null,\n      \"details\": {\n        \"receivedDocuments\": 100,\n        \"indexedDocuments\": 100\n      },\n      \"error\": null,\n      \"duration\": \"PT16S\",\n      \"enqueuedAt\": \"2021-08-11T09:25:53.000000Z\",\n      \"startedAt\": \"2021-08-11T10:03:00.000000Z\",\n      \"finishedAt\": \"2021-08-11T10:03:16.000000Z\"\n    }\n  ],\n  \"total\": 50,\n  \"limit\": 20,\n  \"from\": 1,\n  \"next\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Sending API Request to Meilisearch Cloud Edge URL\nDESCRIPTION: Example of using curl to send a search request to the Meilisearch Cloud Edge URL. This URL must be used after enabling analytics to ensure search metrics are tracked properly.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/analytics/configure_analytics.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl \\\n  -X POST 'https://edge.meilisearch.com/indexes/products/search' \\\n  -H 'Content-Type: application/json' \\\n  --data-binary '{ \"q\": \"green socks\" }'\n```\n\n----------------------------------------\n\nTITLE: Importing Meilisearch Dump (Local Installation)\nDESCRIPTION: Command to launch Meilisearch and import a dump file on a local installation. This is the final step in restoring the database after migration.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/updating.mdx#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n./meilisearch --import-dump dumps/{dump_uid.dump} --master-key=\"MASTER_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Nested Field Filter Expression\nDESCRIPTION: Example showing how to filter using dot notation for nested fields in the document structure.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_search_results.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nfilter=\"genres = 'Thriller' AND rating.users > 85\"\n```\n\n----------------------------------------\n\nTITLE: Importing a Dump in Meilisearch with Docker\nDESCRIPTION: Command to run Meilisearch and import a dump file during startup. The dump file must be accessible from within the container through a mounted volume.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/docker.mdx#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it --rm \\\n  -p 7700:7700 \\\n  -v $(pwd)/meili_data:/meili_data \\\n  getmeili/meilisearch:v1.14 \\\n  meilisearch --import-dump /meili_data/dumps/20200813-042312213.dump\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Number Tracking for Pagination UI in JavaScript\nDESCRIPTION: This code snippet shows how to keep track of the current page number in a pagination interface. It updates an HTML element with the current page number when users click 'Previous' or 'Next' buttons.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/pagination.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updatePageNumber(elem) {\n  const directionBtn = elem.id\n  // Get the page number stored in the pagination element\n  let pageNumber = parseInt(document.querySelector('.pagination').dataset.pageNumber)\n\n  // Update page number\n  if (directionBtn === 'previous_button') {\n    pageNumber = pageNumber - 1\n  } else if (directionBtn === 'next_button') {\n    pageNumber = pageNumber + 1\n  }\n\n  // Store new page number in the pagination element\n  document.querySelector('.pagination').dataset.pageNumber = pageNumber\n}\n\n// Add data to our HTML element stating the user is on the first page\ndocument.querySelector('.pagination').dataset.pageNumber = 0\n// Each time a user clicks on the previous or next buttons, update the page number\ndocument.querySelector('#previous_button').onclick = function () { updatePageNumber(this) }\ndocument.querySelector('#next_button').onclick = function () { updatePageNumber(this) }\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Facet Search Update Task - JSON\nDESCRIPTION: Example response after updating facet search settings, showing the task information that can be used to track the status of the update operation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"INDEX_UID\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2024-07-19T22:33:18.523881Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Update Index Response\nDESCRIPTION: Task response returned when updating an existing index.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/indexes.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"movies\",\n  \"status\": \"enqueued\",\n  \"type\": \"indexUpdate\",\n  \"enqueuedAt\": \"2021-08-12T10:00:00.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Update Filterable Attributes Response\nDESCRIPTION: Response format when updating filterable attributes showing the enqueued task details including task ID, index, status and timestamp.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"movies\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2021-08-11T09:25:53.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Vue Application\nDESCRIPTION: Command to start the Vue development server. This launches the application for local development and testing of the Meilisearch integration.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/vue_quick_start.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Vue3 Application\nDESCRIPTION: Command to create a new Vue application using npm. This initializes a Vue project with the latest version and sets up the basic folder structure.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/vue_quick_start.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vue@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Create Index Request Body\nDESCRIPTION: Required payload structure for creating a new index, specifying the UID and optional primary key.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/indexes.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uid\": \"movies\",\n  \"primaryKey\": \"id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Search Query to Meilisearch API\nDESCRIPTION: Example of how to make a search request to the Meilisearch API using curl. After disabling analytics, you need to update your application to use the correct project URL for all API requests.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/analytics/deactivate_analytics_monitoring.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl \\\n  -X POST 'https://PROJECT_URL/indexes/products/search' \\\n  -H 'Content-Type: application/json' \\\n  --data-binary '{ \"q\": \"green socks\" }'\n```\n\n----------------------------------------\n\nTITLE: Removing Default Nginx Configuration\nDESCRIPTION: Deletes the default Nginx configuration file to avoid conflicts with the custom Meilisearch configuration.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/running_production.mdx#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrm -f /etc/nginx/sites-enabled/default\n```\n\n----------------------------------------\n\nTITLE: Reformatted JSON for Meilisearch Querying\nDESCRIPTION: Example of reformatted JSON data to work around Meilisearch's nested querying limitations by merging appointment data into a single field.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/engine/datatypes.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 0,\n    \"patient_name\": \"Imogen Temult\",\n    \"appointmentsMerged\": [\n      \"2022-01-01 Jester Lavorre\"\n    ]\n  },\n  {\n    \"id\": 1,\n    \"patient_name\": \"Caleb Widowgast\",\n    \"appointmentsMerged\": [\n      \"2023-01-01 Jester Lavorre\"\n      \"2022-01-01 Dorian Storm\"\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Equality Operator Filter in Meilisearch\nDESCRIPTION: A filter using the equality operator to return documents with a specific value for the 'genres' attribute.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ngenres = action\n```\n\n----------------------------------------\n\nTITLE: Getting Typo Tolerance Settings Response\nDESCRIPTION: JSON response showing the current typo tolerance configuration for a Meilisearch index including minimum word sizes and disabled options.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_51\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enabled\": true,\n  \"minWordSizeForTypos\": {\n    \"oneTypo\": 5,\n    \"twoTypos\": 9\n  },\n  \"disableOnWords\": [],\n  \"disableOnAttributes\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Request: Delete Documents by Batch\nDESCRIPTION: Example request body for deleting multiple documents by their IDs. Provides an array of document IDs to be deleted.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/documents.mdx#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n[23488, 153738, 437035, 363869]\n```\n\n----------------------------------------\n\nTITLE: Response: Delete Documents by Batch\nDESCRIPTION: Example response when deleting documents by batch. Returns a task object with details about the deletion operation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/documents.mdx#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"taskUid\": 1,\n    \"indexUid\": \"movies\",\n    \"status\": \"enqueued\",\n    \"type\": \"documentDeletion\",\n    \"enqueuedAt\": \"2021-08-11T09:25:53.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Localized Attributes Response\nDESCRIPTION: Example response showing the localized attributes settings with Japanese locale configuration for attributes matching pattern '*_ja'.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"localizedAttributes\": [\n    {\"locales\": [\"jpn\"], \"attributePatterns\": [\"*_ja\"]}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Update Meilisearch Index Settings - Shell\nDESCRIPTION: cURL command to update Meilisearch index settings with the configured embedder.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/getting_started_with_ai_search.mdx#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl \\\n  -X PATCH 'MEILISEARCH_URL/indexes/kitchenware/settings/embedders' \\\n  -H 'Content-Type: application/json' \\\n  --data-binary '{\n    \"products-openai\": {\n      \"source\": \"openAi\",\n      \"apiKey\": \"OPEN_AI_API_KEY\",\n      \"model\": \"text-embedding-3-small\",\n      \"documentTemplate\": \"An object used in a kitchen named \\'{{doc.name}}\\'\"\\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Example of Localized Search Results in Meilisearch\nDESCRIPTION: Sample search response when using the locales parameter, showing how Meilisearch returns documents with localized content based on the specified language preferences.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/search.mdx#2025-04-16_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hits\": [\n    {\n      \"id\": 0,\n      \"title\": \"DOCUMENT NAME\",\n      \"overview_jp\": \"OVERVIEW TEXT IN JAPANESE\"\n    }\n    …\n  ],\n  …\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nginx for Reverse Proxy\nDESCRIPTION: Installs Nginx which will serve as a reverse proxy for Meilisearch, handling external HTTP requests.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/running_production.mdx#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\napt-get install nginx -y\n```\n\n----------------------------------------\n\nTITLE: Defining Conversion Event Object in JSON for Meilisearch Analytics\nDESCRIPTION: The structure of a conversion event object to be sent to the /events endpoint. This object tracks user conversions and includes event type, name, index UID, object ID, and position in search results.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/analytics/events_endpoint.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"eventType\": \"conversion\",\n  \"eventName\": \"Product Added To Cart\",\n  \"indexUid\": \"products\",\n  \"objectID\": \"0\",\n  \"position\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: IN Operator Filter in Meilisearch\nDESCRIPTION: Two equivalent filters using the IN operator to return documents where 'genres' includes either 'horror', 'comedy', or both.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\ngenres IN [horror, comedy]\ngenres = horror OR genres = comedy\n```\n\n----------------------------------------\n\nTITLE: Negated IS NULL Operator Filters in Meilisearch\nDESCRIPTION: Two equivalent ways to write a negated IS NULL filter that returns documents where the 'overview' field is not null.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\noverview IS NOT NULL\nNOT overview IS NULL\n```\n\n----------------------------------------\n\nTITLE: Checking Dump Status in Meilisearch v0.27 and Below\nDESCRIPTION: API call to check the status of a dump creation in Meilisearch versions 0.27 and below. This is used to ensure the dump is complete before proceeding with the migration.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/updating.mdx#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -X GET 'http://<your-domain-name>/dumps/:dump_uid/status' \\\n  -H 'Authorization: Bearer API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Meilisearch Dump Creation Response\nDESCRIPTION: Example JSON response from the Meilisearch server after initiating a dump creation. This response includes a taskUid which can be used to track the status of the dump creation process.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/updating.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": null,\n  \"status\": \"enqueued\",\n  \"type\": \"dumpCreation\",\n  \"enqueuedAt\": \"2022-06-21T16:10:29.217688Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Typo Tolerance for Specific Words\nDESCRIPTION: Specifies a list of words for which typo tolerance should be disabled. This setting is case insensitive and prevents Meilisearch from applying typo tolerance to these specific terms.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/relevancy/typo_tolerance_settings.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"disableOnWords\": [\"Shrek\"]}\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Proximity Precision Reset Task - JSON\nDESCRIPTION: Example response after resetting proximity precision settings to the default value, returning task information for tracking the reset operation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"books\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2023-04-14T15:51:47.821044Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Voyage AI Embedder Settings in Meilisearch\nDESCRIPTION: JSON configuration for setting up the Voyage AI embedder in Meilisearch. It specifies the API endpoint, authentication, model parameters, and response structure needed to generate and process embeddings.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/embedders/voyage.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"voyage\": {\n    \"source\": \"rest\",\n    \"apiKey\": \"<Voyage AI API Key>\",\n    \"dimensions\": 1024,\n    \"documentTemplate\": \"<Custom template (Optional, but recommended)>\",\n    \"url\": \"https://api.voyageai.com/v1/embeddings\",\n    \"request\": {\n      \"model\": \"voyage-2\",\n      \"input\": [\"{{text}}\", \"{{..}}\"]\n    },\n    \"response\": {\n      \"data\": [\n        {\n          \"embedding\": \"{{embedding}}\"\n        },\n        \"{{..}}\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Rails Application\nDESCRIPTION: Command to create a new Ruby on Rails application named 'blog'.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/ruby_on_rails_quick_start.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrails new blog\n```\n\n----------------------------------------\n\nTITLE: Example Index JSON Structure in Meilisearch\nDESCRIPTION: This JSON snippet shows the basic structure of an index in Meilisearch, including its unique identifier (uid) and timestamps for creation and last update.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/getting_started/indexes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uid\": \"movies\",\n  \"createdAt\": \"2019-11-20T09:40:33.711324Z\",\n  \"updatedAt\": \"2019-11-20T10:16:42.761858Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Update Localized Attributes Response\nDESCRIPTION: Response format when updating localized attributes showing the enqueued task details.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"INDEX_NAME\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2022-04-14T20:56:44.991039Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response for Resetting Embedders in Meilisearch\nDESCRIPTION: JSON response when successfully resetting all embedder settings. The response includes a task identifier, the index UID, task status, type, and timestamp.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_64\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"books\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2022-04-14T20:53:32.863107Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Object Flattening Example - Complex\nDESCRIPTION: Demonstrates how Meilisearch handles flattening of objects containing arrays of objects.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/engine/datatypes.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 0,\n  \"patient_name\": \"Imogen Temult\",\n  \"appointments\": [\n    {\n      \"date\": \"2022-01-01\",\n      \"doctor\": \"Jester Lavorre\",\n      \"ward\": \"psychiatry\"\n    },\n    {\n      \"date\": \"2019-01-01\",\n      \"doctor\": \"Dorian Storm\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sorted Facet Distribution Response\nDESCRIPTION: Response showing facet distribution when facet values are sorted by count in descending order instead of the default alphanumeric order, making the most common values appear first.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/search_with_facet_filters.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  …\n  \"facetDistribution\": {\n    \"genres\": {\n      \"Fiction\": 8,\n      \"Literature\": 7,\n      \"Classics\": 6,\n      \"Novel\": 2,\n      \"Horror\": 2,\n      \"Fantasy\": 2,\n      \"Victorian\": 2,\n      \"Vampires\": 1,\n      \"Tragedy\": 1,\n      \"Satire\": 1,\n      \"Romance\": 1,\n      \"Historical Fiction\": 1,\n      \"Coming-of-Age\": 1,\n      \"Comedy\": 1\n    },\n   …\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Negated IS EMPTY Operator Filters in Meilisearch\nDESCRIPTION: Two equivalent ways to write a negated IS EMPTY filter that returns documents where the 'overview' field is not empty.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\noverview IS NOT EMPTY\nNOT overview IS EMPTY\n```\n\n----------------------------------------\n\nTITLE: Locating Meilisearch Directory in Windows PowerShell\nDESCRIPTION: Command to find the location of the Meilisearch directory using Windows PowerShell. This provides an alternative method for Windows users to locate their Meilisearch installation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/updating.mdx#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n(Get-Command meilisearch).Path\n```\n\n----------------------------------------\n\nTITLE: Example Response for GET Experimental Features\nDESCRIPTION: Shows the response format when retrieving the current state of experimental features via the GET /experimental-features endpoint.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/experimental_features.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metrics\": false,\n  \"logsRoute\": true,\n  \"containsFilter\": false,\n  \"editDocumentsByFunction\": false,\n  \"network\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Index Setting Value with Meilisearch API\nDESCRIPTION: This command retrieves the value of the searchable attributes index setting using the GET endpoint of the /settings/searchable-attributes subroute.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/configuration/configuring_index_settings_api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -X GET 'http://localhost:7700/indexes/INDEX_NAME/settings/searchable-attributes' \\\n  -H 'Authorization: Bearer YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Response for Updating Searchable Attributes in Meilisearch\nDESCRIPTION: Shows the response from the API when updating searchable attributes. Returns a task ID that can be used to track the status of the update operation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"movies\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2021-08-11T09:25:53.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Facet Search Reset Task - JSON\nDESCRIPTION: Example response after resetting facet search settings to the default value, returning task information for tracking the reset operation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"INDEX_UID\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2024-07-19T22:35:33.723983Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Task Object in Meilisearch JSON\nDESCRIPTION: This snippet shows the structure of a task object in Meilisearch, including fields like uid, indexUid, status, type, and various timestamps. It demonstrates how Meilisearch tracks the progress of asynchronous operations.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/async/asynchronous_operations.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"uid\": 1,\n    \"indexUid\": \"movies\",\n    \"status\": \"enqueued\",\n    \"type\": \"documentAdditionOrUpdate\",\n    \"canceledBy\": null,\n    \"details\": { \n        \"receivedDocuments\": 67493,\n        \"indexedDocuments\": null\n    },\n    \"error\": null,\n    \"duration\": null,\n    \"enqueuedAt\": \"2021-08-10T14:29:17.000000Z\",\n    \"startedAt\": null,\n    \"finishedAt\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Menu Structure in JSON\nDESCRIPTION: JSON schema for configuring navigation menus in the documentation site. Used to define sections, routes, and page metadata for sidebar menus.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/migration-guide.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"title\": \"Section\",\n    \"slug\": \"section_name\",\n    \"routes\": [\n    // Each route is an object corresponding to a page\n      {\n        \"source\": \"sidebar_name/section_name/file.mdx\",\n        \"label\": \"Page title\",\n        \"slug\": \"file\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing older versions of Meilisearch using cURL\nDESCRIPTION: This snippet demonstrates how to download a specific version of Meilisearch binary, rename it, give execute permissions, and launch the server.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/install_meilisearch_locally.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Replace {meilisearch_version} and {meilisearch_os} with the specific version and OS you want to download\n# For example, if you want to download v1.0 on macOS,\n# replace {meilisearch_version} and {meilisearch_os} with v1.0 and meilisearch-macos-amd64 respectively\ncurl -OL https://github.com/meilisearch/meilisearch/releases/download/{meilisearch_version}/{meilisearch_os}\n\n# Rename binary to meilisearch. Replace {meilisearch_os} with the name of the downloaded binary\nmv {meilisearch_os} meilisearch\n\n# Give the binary execute permission\nchmod +x meilisearch\n\n# Launch Meilisearch\n./meilisearch\n```\n\n----------------------------------------\n\nTITLE: Structured Response for facetsByIndex in Meilisearch Multi-search (JSON)\nDESCRIPTION: This snippet shows the structure of the facetsByIndex field in a multi-search response. It includes distribution and stats for specified attributes in each index.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/multi_search.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hits\" [ … ],\n  …\n  \"facetsByIndex\": {\n    \"INDEX_A\": {\n      \"distribution\": {\n        \"ATTRIBUTE_X\": {\n          \"KEY\": <Integer>,\n          \"KEY\": <Integer>,\n          …\n        },\n        \"ATTRIBUTE_Y\": {\n          \"KEY\": <Integer>,\n          …\n        }\n      },\n      \"stats\": {\n        \"KEY\": {\n          \"min\": <Integer>,\n          \"max\": <Integer>\n        }\n      }\n    },\n    \"INDEX_B\": {\n      …\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response: Delete One Document\nDESCRIPTION: Example response when deleting a single document from an index. Returns a task object with details about the deletion operation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/documents.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"taskUid\": 1,\n    \"indexUid\": \"movies\",\n    \"status\": \"enqueued\",\n    \"type\": \"documentDeletion\",\n    \"enqueuedAt\": \"2021-08-11T09:25:53.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Certbot for HTTPS Configuration\nDESCRIPTION: Installs Certbot and the Nginx plugin to enable HTTPS encryption for the Meilisearch server.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/running_production.mdx#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install certbot python3-certbot-nginx -y\n```\n\n----------------------------------------\n\nTITLE: Running Meilisearch with Environment Variables\nDESCRIPTION: Command to run Meilisearch in Docker with configuration via environment variables. This example sets a master key using the MEILI_MASTER_KEY environment variable.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/docker.mdx#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it --rm \\\n  -p 7700:7700 \\\n  -e MEILI_MASTER_KEY='MASTER_KEY'\\\n  -v $(pwd)/meili_data:/meili_data \\\n  getmeili/meilisearch:v1.14\n```\n\n----------------------------------------\n\nTITLE: Creating One-Way Synonym Association in Meilisearch JSON\nDESCRIPTION: This snippet demonstrates how to create a one-way synonym association in Meilisearch settings. It sets 'iphone' as a synonym for 'phone', but not vice versa.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/relevancy/synonyms.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"phone\": [\n    \"iphone\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Updating Separator Tokens in Meilisearch\nDESCRIPTION: Shows the response from the API when updating separator tokens. Returns a task ID that can be used to track the status of the update operation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"movies\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2021-08-11T09:25:53.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Resetting Search Cutoff in Meilisearch\nDESCRIPTION: Shows the response from the API when resetting the search cutoff to its default value. Returns a task ID for tracking the status of the operation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"movies\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2023-03-21T07:05:16.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: VuePress Meilisearch Plugin Configuration\nDESCRIPTION: JavaScript configuration for the VuePress Meilisearch plugin, setting up host URL, API key, and index UID.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/search_bar_for_docs.mdx#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    [\n      \"vuepress-plugin-meilisearch\",\n      {\n        \"hostUrl\": \"<your-meilisearch-host-url>\",\n        \"apiKey\": \"<your-meilisearch-api-key>\",\n        \"indexUid\": \"docs\"\n      }\n    ],\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Proximity Precision Update Task - JSON\nDESCRIPTION: Example response after updating proximity precision settings, showing the task information that can be used to track the status of the update operation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"books\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2023-04-14T15:50:29.821044Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Code Documentation in Markdown\nDESCRIPTION: Documentation covering error codes for invalid parameters, missing fields, system errors, and remote federated search issues in Meilisearch\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/errors/error_codes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## `invalid_similar_filter`\n\n[`filter`](/reference/api/search#filter) is invalid or contains a filter expression with a missing or invalid operator. Filter expressions must be a string, array of strings, or array of array of strings for the POST endpoint. It must be a string for the GET endpoint.\n\nMeilisearch also throws this error if the attribute used for filtering is not defined in the `filterableAttributes` list.\n```\n\n----------------------------------------\n\nTITLE: Locating Meilisearch Directory in UNIX\nDESCRIPTION: Command to find the location of the Meilisearch directory on UNIX systems. This helps users identify where their Meilisearch installation is located.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/updating.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwhich meilisearch\n```\n\n----------------------------------------\n\nTITLE: Successful Task Completion Example in Meilisearch JSON\nDESCRIPTION: This snippet shows a task object after successful completion. It includes updated fields such as status, details, duration, and timestamps for when the task started and finished processing.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/async/asynchronous_operations.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"uid\": 1,\n    \"indexUid\": \"movies\",\n    \"status\": \"succeeded\",\n    \"type\": \"documentAdditionOrUpdate\",\n    \"canceledBy\": null,\n    \"details\": { \n            \"receivedDocuments\": 67493,\n            \"indexedDocuments\": 67493\n    },\n    \"error\": null,\n    \"duration\": \"PT1S\",\n    \"enqueuedAt\": \"2021-08-10T14:29:17.000000Z\",\n    \"startedAt\": \"2021-08-10T14:29:18.000000Z\",\n    \"finishedAt\": \"2021-08-10T14:29:19.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Task Response in Meilisearch API\nDESCRIPTION: Illustrates the structure of an asynchronous task response returned by Meilisearch API for most write requests.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/overview.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"taskUid\": 1,\n    \"indexUid\": \"movies\",\n    \"status\": \"enqueued\",\n    \"type\": \"indexUpdate\",\n    \"enqueuedAt\": \"2021-08-11T09:25:53.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Failed Task Example in Meilisearch JSON\nDESCRIPTION: This snippet demonstrates a task object for a failed operation. It includes an error object with details about the failure, such as the error message, code, type, and a link to the documentation for troubleshooting.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/async/asynchronous_operations.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"uid\": 1,\n    \"indexUid\": \"movies\",\n    \"status\": \"failed\",\n    \"type\": \"documentAdditionOrUpdate\",\n    \"canceledBy\": null,\n    \"details\": { \n            \"receivedDocuments\": 67493,\n            \"indexedDocuments\": 0\n    },\n    \"error\": {\n        \"message\": \"Document does not have a `:primaryKey` attribute: `:documentRepresentation`.\",\n        \"code\": \"internal\",\n        \"type\": \"missing_document_id\",\n        \"link\": \"https://docs.meilisearch.com/errors#missing-document-id\"\n    },\n    \"duration\": \"PT1S\",\n    \"enqueuedAt\": \"2021-08-10T14:29:17.000000Z\",\n    \"startedAt\": \"2021-08-10T14:29:18.000000Z\",\n    \"finishedAt\": \"2021-08-10T14:29:19.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Meilisearch Configuration File Path with Environment Variable in UNIX\nDESCRIPTION: Demonstrates how to set the path to a Meilisearch configuration file using an environment variable on UNIX systems.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/configure_meilisearch_at_launch.mdx#2025-04-16_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nexport MEILI_CONFIG_FILE_PATH=\"./config.toml\"\n./meilisearch\n```\n\n----------------------------------------\n\nTITLE: Importing a Snapshot in Meilisearch with Docker\nDESCRIPTION: Command to run Meilisearch and import a snapshot during startup. This can be used for restoring data or migrating between instances of the same Meilisearch version.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/docker.mdx#2025-04-16_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it --rm \\\n  -p 7700:7700 \\\n  -v $(pwd)/meili_data:/meili_data \\\n  getmeili/meilisearch:v1.14 \\\n  meilisearch --import-snapshot /meili_data/snapshots/data.ms.snapshot\n```\n\n----------------------------------------\n\nTITLE: Filtering Meilisearch Tasks by Status (Single Value)\nDESCRIPTION: This example demonstrates how to filter Meilisearch tasks by a single status value ('canceled'). It uses the get tasks endpoint with query parameters to narrow down the results.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/async/filtering_tasks.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -X GET 'http://localhost:7700/tasks?statuses=canceled'\n```\n\n----------------------------------------\n\nTITLE: Response Format for Retrieving Stop Words in Meilisearch\nDESCRIPTION: Shows the JSON response format when retrieving stop words from a Meilisearch index. The response is an array of strings where each string represents a word that will be ignored in search queries.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"of\",\n  \"the\",\n  \"to\"\n]\n```\n\n----------------------------------------\n\nTITLE: Resetting Displayed Attributes\nDESCRIPTION: API request to reset the displayed attributes to default configuration using legacy authentication.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/updating.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -H \"X-Meili-API-Key: API_KEY\" \\\n  -X PUT 'http://<your-domain-name>/indexes/{indexUid}/settings/displayed-attributes' \\\n  --data '[\"*\"]'\n```\n\n----------------------------------------\n\nTITLE: Performing Backend Search with Meilisearch\nDESCRIPTION: Ruby code to perform a backend search using Meilisearch in a Rails application.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/ruby_on_rails_quick_start.mdx#2025-04-16_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\n# Meilisearch is typo-tolerant:\nhits = Article.search('deepre')\nhits.first\n```\n\n----------------------------------------\n\nTITLE: Distinct Attribute Example Response\nDESCRIPTION: Example JSON response when updating distinct attribute settings, showing task details.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"movies\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2021-08-11T09:25:53.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Fixed-Length Secure Random Key in Bash (Using head)\nDESCRIPTION: This command generates a secure random key of a specified length using OpenSSL and the head command. It outputs a 32-character long string, which can be used as a MEILI_MASTER_KEY.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/deployment/railway.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 48 | head -c32\n```\n\n----------------------------------------\n\nTITLE: Get Single Key Response Example\nDESCRIPTION: Example response showing the details of a single API key including its permissions and metadata.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/keys.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": null,\n  \"description\": \"Add documents: Products API key\",\n  \"key\": \"d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4\",\n  \"uid\": \"6062abda-a5aa-4414-ac91-ecd7944c0f8d\",\n  \"actions\": [\n    \"documents.add\"\n  ],\n  \"indexes\": [\n    \"products\"\n  ],\n  \"expiresAt\": \"2021-11-13T00:00:00Z\",\n  \"createdAt\": \"2021-11-12T10:00:00Z\",\n  \"updatedAt\": \"2021-11-12T10:00:00Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Document Splitting Script for Meilisearch\nDESCRIPTION: Command to execute the Node.js script for splitting large documents. It takes the path to the JSON dataset as an argument.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/improve_relevancy_large_documents.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode ./split_documents.js ./stories.json\n```\n\n----------------------------------------\n\nTITLE: Creating New Laravel Application with Composer\nDESCRIPTION: Command to create a new Laravel application using Composer. This is the starting point for setting up a Laravel project that will use Meilisearch.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/laravel_scout.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncomposer create-project laravel/laravel my-application\n```\n\n----------------------------------------\n\nTITLE: Creating a Dedicated User for Meilisearch\nDESCRIPTION: Creates a system user specifically for running Meilisearch to improve security by avoiding root privilege execution.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/running_production.mdx#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nuseradd -d /var/lib/meilisearch -s /bin/false -m -r meilisearch\n```\n\n----------------------------------------\n\nTITLE: Checking Meilisearch Version with New Auth Header\nDESCRIPTION: API request to verify the current Meilisearch database version using the newer Bearer token authentication format.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/updating.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -H \"Authorization: Bearer API_KEY\" \\\n  -X GET 'http://<your-domain-name>/version'\n```\n\n----------------------------------------\n\nTITLE: Configuring Task List Pagination Response in Meilisearch\nDESCRIPTION: This JSON response shows the structure returned when paginating tasks in Meilisearch. It includes the task results, total count, limit applied, the 'from' parameter value, and the 'next' value for subsequent pagination requests.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/async/paginating_tasks.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    …\n  ],\n  \"total\": 50,\n  \"limit\": 2,\n  \"from\": 10,\n  \"next\": 8\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Meilisearch Version with Legacy Auth Header\nDESCRIPTION: API request to verify the current Meilisearch database version using the older X-Meili-API-Key authentication format.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/updating.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -H \"X-Meili-API-Key: API_KEY\" \\\n  -X GET 'http://<your-domain-name>/version'\n```\n\n----------------------------------------\n\nTITLE: Sorting Search Results by Price in Meilisearch (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the sort parameter in a Meilisearch search query to sort results by price in ascending order.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/sort_search_results.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclient.index('books').search('science fiction', {\n  sort: ['price:asc']\n})\n```\n\n----------------------------------------\n\nTITLE: Running Meilisearch Docs Scraper with Docker\nDESCRIPTION: Docker command to run the docs-scraper tool with configuration options for host URL and API key.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/search_bar_for_docs.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -t --rm \\\n  --network=host \\\n  -e MEILISEARCH_HOST_URL='MEILISEARCH_URL' \\\n  -e MEILISEARCH_API_KEY='MASTER_KEY' \\\n  -v <absolute-path-to-your-config-file>:/docs-scraper/config.json \\\n  getmeili/docs-scraper:latest pipenv run ./docs_scraper config.json\n```\n\n----------------------------------------\n\nTITLE: Publishing Scout Configuration File\nDESCRIPTION: Artisan command to publish the Scout configuration file. This creates the necessary configuration file in the application directory.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/laravel_scout.mdx#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nphp artisan vendor:publish --provider=\"Laravel\\Scout\\ScoutServiceProvider\"\n```\n\n----------------------------------------\n\nTITLE: String Tokenization Example - Document Comparison\nDESCRIPTION: Shows how different separators affect the proximity ranking between words in two documents.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/engine/datatypes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"movie_id\": \"001\",\n    \"description\": \"Bruce.Willis\"\n  },\n  {\n    \"movie_id\": \"002\",\n    \"description\": \"Bruce super Willis\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Fixed-Length Secure Random Key in Bash (Using cut)\nDESCRIPTION: This command generates a secure random key of a specified length using OpenSSL and the cut command. It outputs a 32-character long string, which can be used as a MEILI_MASTER_KEY.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/deployment/railway.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 48 | cut -c1-32\n```\n\n----------------------------------------\n\nTITLE: Get Single Index Response\nDESCRIPTION: Example response when retrieving a single index by its UID.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/indexes.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uid\": \"movies\",\n  \"createdAt\": \"2022-02-10T07:45:15.628261Z\",\n  \"updatedAt\": \"2022-02-21T15:28:43.496574Z\",\n  \"primaryKey\": \"id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Dataset for Large Documents in Meilisearch\nDESCRIPTION: Example JSON dataset containing two documents, each with a large text field representing a short story. This dataset is used to demonstrate the need for document splitting in Meilisearch.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/improve_relevancy_large_documents.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 0,\n    \"title\": \"A Haunted House\",\n    \"author\": \"Virginia Woolf\",\n    \"text\": \"Whatever hour you woke there was a door shutting. From room to room they went, hand in hand, lifting here, opening there, making sure—a ghostly couple.\\n\\n \\\"Here we left it,\\\" she said. And he added, \\\"Oh, but here too!\\\" \\\"It's upstairs,\\\" she murmured. \\\"And in the garden,\\\" he whispered. \\\"Quietly,\\\" they said, \\\"or we shall wake them.\\\"\\n\\nBut it wasn't that you woke us. Oh, no. \\\"They're looking for it; they're drawing the curtain,\\\" one might say, and so read on a page or two. \\\"Now they've found it,\\\" one would be certain, stopping the pencil on the margin. And then, tired of reading, one might rise and see for oneself, the house all empty, the doors standing open, only the wood pigeons bubbling with content and the hum of the threshing machine sounding from the farm. \\\"What did I come in here for? What did I want to find?\\\" My hands were empty. \\\"Perhaps it's upstairs then?\\\" The apples were in the loft. And so down again, the garden still as ever, only the book had slipped into the grass.\\n\\nBut they had found it in the drawing room. Not that one could ever see them. The window panes reflected apples, reflected roses; all the leaves were green in the glass. If they moved in the drawing room, the apple only turned its yellow side. Yet, the moment after, if the door was opened, spread about the floor, hung upon the walls, pendant from the ceiling—what? My hands were empty. The shadow of a thrush crossed the carpet; from the deepest wells of silence the wood pigeon drew its bubble of sound. \\\"Safe, safe, safe,\\\" the pulse of the house beat softly. \\\"The treasure buried; the room ...\\\" the pulse stopped short. Oh, was that the buried treasure?\\n\\nA moment later the light had faded. Out in the garden then? But the trees spun darkness for a wandering beam of sun. So fine, so rare, coolly sunk beneath the surface the beam I sought always burnt behind the glass. Death was the glass; death was between us; coming to the woman first, hundreds of years ago, leaving the house, sealing all the windows; the rooms were darkened. He left it, left her, went North, went East, saw the stars turned in the Southern sky; sought the house, found it dropped beneath the Downs. \\\"Safe, safe, safe,\\\" the pulse of the house beat gladly. \\\"The Treasure yours.\\\"\\n\\nThe wind roars up the avenue. Trees stoop and bend this way and that. Moonbeams splash and spill wildly in the rain. But the beam of the lamp falls straight from the window. The candle burns stiff and still. Wandering through the house, opening the windows, whispering not to wake us, the ghostly couple seek their joy.\\n\\n\\\"Here we slept,\\\" she says. And he adds, \\\"Kisses without number.\\\" \\\"Waking in the morning—\\\" \\\"Silver between the trees—\\\" \\\"Upstairs—\\\" \\\"In the garden—\\\" \\\"When summer came—\\\" \\\"In winter snowtime—\\\" The doors go shutting far in the distance, gently knocking like the pulse of a heart.\\n\\nNearer they come; cease at the doorway. The wind falls, the rain slides silver down the glass. Our eyes darken; we hear no steps beside us; we see no lady spread her ghostly cloak. His hands shield the lantern. \\\"Look,\\\" he breathes. \\\"Sound asleep. Love upon their lips.\\\"\\n\\nStooping, holding their silver lamp above us, long they look and deeply. Long they pause. The wind drives straightly; the flame stoops slightly. Wild beams of moonlight cross both floor and wall, and, meeting, stain the faces bent; the faces pondering; the faces that search the sleepers and seek their hidden joy.\\n\\n\\\"Safe, safe, safe,\\\" the heart of the house beats proudly. \\\"Long years—\\\" he sighs. \\\"Again you found me.\\\" \\\"Here,\\\" she murmurs, \\\"sleeping; in the garden reading; laughing, rolling apples in the loft. Here we left our treasure—\\\" Stooping, their light lifts the lids upon my eyes. \\\"Safe! safe! safe!\\\" the pulse of the house beats wildly. Waking, I cry \\\"Oh, is this _your_ buried treasure? The light in the heart.\"\n  },\n  {\n    \"id\": 1,\n    \"title\": \"Monday or Tuesday\",\n    \"author\": \"Virginia Woolf\",\n    \"text\": \"Lazy and indifferent, shaking space easily from his wings, knowing his way, the heron passes over the church beneath the sky. White and distant, absorbed in itself, endlessly the sky covers and uncovers, moves and remains. A lake? Blot the shores of it out! A mountain? Oh, perfect—the sun gold on its slopes. Down that falls. Ferns then, or white feathers, for ever and ever——\\n\\nDesiring truth, awaiting it, laboriously distilling a few words, for ever desiring—(a cry starts to the left, another to the right. Wheels strike divergently. Omnibuses conglomerate in conflict)—for ever desiring—(the clock asseverates with twelve distinct strokes that it is midday; light sheds gold scales; children swarm)—for ever desiring truth. Red is the dome; coins hang on the trees; smoke trails from the chimneys; bark, shout, cry \\\"Iron for sale\\\"—and truth?\\n\\nRadiating to a point men's feet and women's feet, black or gold-encrusted—(This foggy weather—Sugar? No, thank you—The commonwealth of the future)—the firelight darting and making the room red, save for the black figures and their bright eyes, while outside a van discharges, Miss Thingummy drinks tea at her desk, and plate-glass preserves fur coats——\\n\\nFlaunted, leaf-light, drifting at corners, blown across the wheels, silver-splashed, home or not home, gathered, scattered, squandered in separate scales, swept up, down, torn, sunk, assembled—and truth?\\n\\nNow to recollect by the fireside on the white square of marble. From ivory depths words rising shed their blackness, blossom and penetrate. Fallen the book; in the flame, in the smoke, in the momentary sparks—or now voyaging, the marble square pendant, minarets beneath and the Indian seas, while space rushes blue and stars glint—truth? or now, content with closeness?\\n\\nLazy and indifferent the heron returns; the sky veils her stars; then bares them.\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Meilisearch Configuration File\nDESCRIPTION: Command to create a Meilisearch configuration file in the Rails application.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/ruby_on_rails_quick_start.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails meilisearch:install\n```\n\n----------------------------------------\n\nTITLE: Creating an Index in Meilisearch\nDESCRIPTION: This snippet shows how to explicitly create an index in Meilisearch. Unlike Algolia, which automatically creates an index on first use, Meilisearch allows for explicit index creation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/algolia_migration.mdx#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclient.createIndex(string indexName)\n```\n\n----------------------------------------\n\nTITLE: Create Snapshot for Backup\nDESCRIPTION: API request to create a snapshot backup before performing a dumpless upgrade.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/updating.mdx#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl \\\n  -X POST 'MEILISEARCH_URL/snapshots'\n```\n\n----------------------------------------\n\nTITLE: Meilisearch Document Structure\nDESCRIPTION: Example of the basic JSON structure for a Meilisearch document showing attribute-value pairs\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/getting_started_with_self_hosted_meilisearch.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attribute\": \"value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Meilisearch Logs Route\nDESCRIPTION: Enables the experimental logs route feature in Meilisearch by sending a PATCH request to the experimental-features endpoint.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/logs.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl \\\n  -X PATCH 'MEILISEARCH_URL/experimental-features/' \\\n  -H 'Content-Type: application/json'  \\\n  --data-binary '{\n    \"logsRoute\": true\n  }'\n```\n\n----------------------------------------\n\nTITLE: String Tokenization Example - Basic\nDESCRIPTION: Demonstrates how Meilisearch tokenizes a simple string containing names with a comma separator.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/engine/datatypes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"Bruce Willis,Vin Diesel\"\n```\n\n----------------------------------------\n\nTITLE: Empty Dictionary Response\nDESCRIPTION: Response showing an empty dictionary configuration.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: Response Format for Retrieving Synonyms in Meilisearch\nDESCRIPTION: Shows the JSON response format when retrieving synonyms from a Meilisearch index. The response is an object where each key is a word and its value is an array of strings representing its synonyms.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"wolverine\": [\n    \"xmen\",\n    \"logan\"\n  ],\n  \"logan\": [\n    \"wolverine\",\n    \"xmen\"\n  ],\n  \"wow\": [\n    \"world of warcraft\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Task Cancellation Response - Meilisearch API\nDESCRIPTION: Example JSON response from the task cancellation endpoint showing the created cancellation task details including its UID, status, type and timestamp.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/tasks.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 3,\n  \"indexUid\": null,\n  \"status\": \"enqueued\",\n  \"type\": \"taskCancelation\",\n  \"enqueuedAt\": \"2021-08-12T10:00:00.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Final Page Response Pattern in Meilisearch Task Pagination\nDESCRIPTION: This JSON response demonstrates the structure returned for subsequent pagination requests. When the 'next' value is null, it indicates that the user has reached the final set of results in the task list.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/async/paginating_tasks.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    …\n  ],\n  \"total\": 50,\n  \"limit\": 2,\n  \"from\": 8,\n  \"next\": 6\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Meilisearch Tasks by Multiple Status Values\nDESCRIPTION: This example shows how to filter Meilisearch tasks by multiple status values ('canceled' and 'failed'). It uses comma-separated values in the statuses parameter.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/async/filtering_tasks.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -X GET 'http://localhost:7700/tasks?statuses=canceled,failed'\n```\n\n----------------------------------------\n\nTITLE: Setting Master Key Environment Variable (Windows)\nDESCRIPTION: Commands to set the master key as an environment variable and launch Meilisearch in Windows systems.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/basic_security.mdx#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nset MEILI_MASTER_KEY=\"MASTER_KEY\"\n./meilisearch\n```\n\n----------------------------------------\n\nTITLE: Search Results Response\nDESCRIPTION: Example of a search response showing matched documents with pagination details and processing time\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/getting_started_with_self_hosted_meilisearch.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hits\": [\n    {\n      \"id\": 29751,\n      \"title\": \"Batman Unmasked: The Psychology of the Dark Knight\",\n      \"poster\": \"https://image.tmdb.org/t/p/w1280/jjHu128XLARc2k4cJrblAvZe0HE.jpg\",\n      \"overview\": \"Delve into the world of Batman and the vigilante justice tha\",\n      \"release_date\": \"2008-07-15\"\n    },\n    {\n      \"id\": 471474,\n      \"title\": \"Batman: Gotham by Gaslight\",\n      \"poster\": \"https://image.tmdb.org/t/p/w1280/7souLi5zqQCnpZVghaXv0Wowi0y.jpg\",\n      \"overview\": \"ve Victorian Age Gotham City, Batman begins his war on crime\",\n      \"release_date\": \"2018-01-12\"\n    }\n  ],\n  \"estimatedTotalHits\": 66,\n  \"query\": \"botman\",\n  \"limit\": 20,\n  \"offset\": 0,\n  \"processingTimeMs\": 12\n}\n```\n\n----------------------------------------\n\nTITLE: Package Installation Commands\nDESCRIPTION: Commands to install the VuePress Meilisearch plugin using yarn or npm package managers.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/search_bar_for_docs.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add vuepress-plugin-meilisearch\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vuepress-plugin-meilisearch\n```\n\n----------------------------------------\n\nTITLE: Starting the React App for Testing Meilisearch Integration\nDESCRIPTION: Starts the React development server to test the Meilisearch search functionality in the browser. This command initiates the development environment to interact with the search interface.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/front_end/react_quick_start.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Dump in Meilisearch using POST API endpoint\nDESCRIPTION: API call to create a dump backup in a self-hosted Meilisearch instance. Returns a summarized task object that can be used to check the dump creation status.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/data_backup/dumps.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": null,\n  \"status\": \"enqueued\",\n  \"type\": \"dumpCreation\",\n  \"enqueuedAt\": \"2022-06-21T16:10:29.217688Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for Algolia and Meilisearch\nDESCRIPTION: Command to install the required npm packages for interacting with Algolia and Meilisearch APIs.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/algolia_migration.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -s algoliasearch@4.13 meilisearch@0.25.1\n```\n\n----------------------------------------\n\nTITLE: Activating Experimental Features During Runtime in Meilisearch\nDESCRIPTION: This code snippet shows a placeholder for activating experimental features during runtime using the /experimental-features API route. The actual code would depend on the specific API client or HTTP method used.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/resources/experimental_features_overview.mdx#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<CodeSamples id=\"update_experimental_features_1\" />\n```\n\n----------------------------------------\n\nTITLE: Update Network Configuration Response in Meilisearch\nDESCRIPTION: This JSON response demonstrates the structure of the data returned after updating the network configuration using the PATCH /network endpoint.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/network.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"self\": \"ms-00\",\n  \"remotes\": {\n    \"ms-00\": {\n      \"url\": \"http://INSTANCE_URL\",\n      \"searchApiKey\": \"INSTANCE_API_KEY\"\n    },\n    \"ms-01\": {\n      \"url\": \"http://ANOTHER_INSTANCE_URL\",\n      \"searchApiKey\": \"ANOTHER_INSTANCE_API_KEY\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Full Task Object Response from Meilisearch API\nDESCRIPTION: This snippet shows the complete task object returned when querying a task's status using the Meilisearch API. It includes detailed information about the task's progress, timing, and outcome.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/async/working_with_tasks.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uid\": 4,\n  \"indexUid\" :\"movie\",\n  \"status\": \"succeeded\",\n  \"type\": \"documentAdditionOrUpdate\",\n  \"canceledBy\": null,\n  \"details\": {\n    …\n  },\n  \"error\": null,\n  \"duration\": \"PT0.001192S\",\n  \"enqueuedAt\": \"2022-08-04T12:28:15.159167Z\",\n  \"startedAt\": \"2022-08-04T12:28:15.161996Z\",\n  \"finishedAt\": \"2022-08-04T12:28:15.163188Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Settings Update Task in Meilisearch API\nDESCRIPTION: Shows the JSON response format when updating settings in Meilisearch. The response contains a taskUid for tracking the progress of the settings update operation, along with details about the index, status, operation type, and timestamp.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"movies\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2021-08-11T09:25:53.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Health Check Response\nDESCRIPTION: Expected successful response from Meilisearch health check endpoint showing HTTP 200 OK status.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/deployment/aws.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n...\n< HTTP/1.1 200 OK\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Meilisearch in UNIX\nDESCRIPTION: Demonstrates how to set environment variables to configure Meilisearch's database path and HTTP address before launching the instance on UNIX systems.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/configure_meilisearch_at_launch.mdx#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport MEILI_DB_PATH=./meilifiles\nexport MEILI_HTTP_ADDR=localhost:7700\n./meilisearch\n```\n\n----------------------------------------\n\nTITLE: Flattened JSON Structure in Meilisearch\nDESCRIPTION: Example of how Meilisearch flattens nested JSON structures, losing the relationship between appointment date and doctor.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/engine/datatypes.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"appointments.date\": [\n    \"2022-01-01\",\n    \"2019-01-01\"\n  ],\n  \"appointments.doctor\": [\n    \"Jester Lavorre\",\n    \"Dorian Storm\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Express.js with Package Managers\nDESCRIPTION: Shell commands to install Express.js using different package managers including NPM, Yarn, and pnpm. Express.js will be used to create a server that serves tenant tokens.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/multitenancy_nodejs.mdx#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# with NPM\nnpm i express\n# with Yarn\nyarn add express\n# with pnpm\npnpm add express\n```\n\n----------------------------------------\n\nTITLE: Creating Algolia client and initializing index\nDESCRIPTION: JavaScript code to create an Algolia client and initialize an index using the application ID and admin API key.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/algolia_migration.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst algoliaSearch = require(\"algoliasearch\");\n\nconst algoliaClient = algoliaSearch(\n  \"APPLICATION_ID\",\n  \"ADMIN_API_KEY\"\n);\nconst algoliaIndex = algoliaClient.initIndex(\"INDEX_NAME\");\n```\n\n----------------------------------------\n\nTITLE: Installing System Dependencies for Meilisearch on Debian\nDESCRIPTION: Updates the package list and installs curl, which is required for downloading the Meilisearch installer.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/running_production.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\napt update\napt install curl -y\n```\n\n----------------------------------------\n\nTITLE: Checking Task Status with Meilisearch API\nDESCRIPTION: This command checks the status of a task using the GET endpoint of the /tasks subroute. It's used to monitor the progress of an index setting update.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/configuration/configuring_index_settings_api.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -X GET 'http://localhost:7700/tasks/1' \\\n  -H 'Authorization: Bearer YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Connecting to Meilisearch via SSH with Domain Name\nDESCRIPTION: SSH connection command using the admin username and domain name with a PEM file for authentication.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/deployment/aws.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nssh -i <relative-path-to-your-pem-file> admin@<your-domain-name>\n```\n\n----------------------------------------\n\nTITLE: Creating Systemd Service File for Meilisearch\nDESCRIPTION: Creates a systemd service file to run Meilisearch as a background service that auto-restarts on failure and starts on system boot.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/running_production.mdx#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncat << EOF > /etc/systemd/system/meilisearch.service\n[Unit]\nDescription=Meilisearch\nAfter=systemd-user-sessions.service\n\n[Service]\nType=simple\nWorkingDirectory=/var/lib/meilisearch\nExecStart=/usr/local/bin/meilisearch --config-file-path /etc/meilisearch.toml\nUser=meilisearch\nGroup=meilisearch\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n----------------------------------------\n\nTITLE: Registering the View Composer in AppServiceProvider in PHP\nDESCRIPTION: This code registers the AuthComposer with Laravel's service container in the AppServiceProvider. It applies the composer to all views (*), ensuring the Meilisearch token is available throughout the application.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/laravel_multitenancy.mdx#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse App\\View\\Composers\\AuthComposer;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Register any application services.\n     */\n    public function register(): void\n    {\n        //\n    }\n\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        // Use this view composer in all views\n        View::composer('*', AuthComposer::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Meilisearch with SSL Configuration\nDESCRIPTION: Command to start Meilisearch with SSL certificates, enabling HTTP/2 support. It specifies the paths to the certificate and key files.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/http2_ssl.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./meilisearch --ssl-cert-path ./127.0.0.1.pem --ssl-key-path ./127.0.0.1-key.pem\n```\n\n----------------------------------------\n\nTITLE: Specifying Meilisearch Configuration File Path with CLI\nDESCRIPTION: Shows how to specify the path to a Meilisearch configuration file using a command-line option.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/configure_meilisearch_at_launch.mdx#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n./meilisearch --config-file-path=\"./config.toml\"\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Search Rules in JSON\nDESCRIPTION: Illustrates a complete tenant token configuration with multiple search rules, including a global filter and a specific index filter, along with API key and expiration information.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/tenant_tokens.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiKeyUid\": \"ac5cd97d-5a4b-4226-a868-2d0eb6d197ab\",\n  \"exp\": 1641835850,\n  \"searchRules\": {\n    \"*\": {\n      \"filter\": \"user_id = 1\"\n    },\n    \"medical_records\": {\n      \"filter\": \"user_id = 1 AND published = true\",\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Component Links in JSX\nDESCRIPTION: Example of creating links within JSX components that require manual /docs prefix.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/migration-guide.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Component link=\"/docs/reference/api/search\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Dump in Meilisearch API\nDESCRIPTION: This code snippet demonstrates the response received when triggering a dump creation task using a POST request to the /dumps endpoint. The response includes a taskUid, which can be used to check the status of the dump creation task.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/dump.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": null,\n  \"status\": \"enqueued\",\n  \"type\": \"dumpCreation\",\n  \"enqueuedAt\": \"2022-06-21T16:10:29.217688Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Meilisearch Health Status - JSON Response\nDESCRIPTION: This snippet shows the JSON response from a successful GET request to the /health endpoint. It indicates that the Meilisearch server is available.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/health.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"available\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Capsule Component for Callouts\nDESCRIPTION: Example of using the Capsule component to create styled callout boxes with custom content.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/migration-guide.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Capsule intent=\"tip\">\n  ## Heading\n\n  Paragraph content.\n</Capsule>\n```\n\n----------------------------------------\n\nTITLE: Reset Localized Attributes Response\nDESCRIPTION: Response format when resetting localized attributes showing the enqueued task details.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"INDEX_NAME\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2022-04-14T20:53:32.863107Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving API Key from Meilisearch using cURL\nDESCRIPTION: Shell command using cURL to retrieve an API key from Meilisearch, necessary for generating tenant tokens.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/generate_tenant_token_sdk.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n  -X GET 'MEILISEARCH_URL/keys/API_KEY' \\\n  -H 'Authorization: Bearer MASTER_KEY'\n```\n\n----------------------------------------\n\nTITLE: Checking Meilisearch Health Status\nDESCRIPTION: cURL command to verify Meilisearch instance health over HTTPS.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/deployment/aws.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v https://<your-domain-name>/health\n```\n\n----------------------------------------\n\nTITLE: Defining User Model with Organization Relationship in PHP\nDESCRIPTION: This code defines a User model that extends Laravel's Authenticatable class. It includes standard user attributes and establishes a belongsTo relationship with the Organization model.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/laravel_multitenancy.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Notifications\\Notifiable;\nuse Laravel\\Sanctum\\HasApiTokens;\n\nclass User extends Authenticatable\n{\n    use HasApiTokens, Notifiable;\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array<int, string>\n     */\n    protected $fillable = [\n        'name',\n        'email',\n        'password',\n    ];\n\n    /**\n     * The attributes that should be hidden for serialization.\n     *\n     * @var array<int, string>\n     */\n    protected $hidden = [\n        'password',\n        'remember_token',\n    ];\n\n    /**\n     * The attributes that should be cast.\n     *\n     * @var array<string, string>\n     */\n    protected $casts = [\n        'email_verified_at' => 'datetime',\n        'password' => 'hashed',\n    ];\n\n    public function organization()\n    {\n        return $this->belongsTo(Organization::class, 'organization_id');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dictionary Terms Configuration\nDESCRIPTION: Example of configuring dictionary terms along with synonyms for author names with initials.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dictionary\": [\"W. E. B.\", \"W.E.B.\"],\n  \"synonyms\": {\n    \"W. E. B.\": [\"W.E.B.\"],\n    \"W.E.B.\": [\"W. E. B.\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PATCH Request Body Format for Experimental Features\nDESCRIPTION: Demonstrates the expected format for the request body when updating experimental feature settings.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/experimental_features.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{<featureName>: <Boolean>}\n```\n\n----------------------------------------\n\nTITLE: Search Rules Object Structure in JSON\nDESCRIPTION: This snippet shows the structure of the searchRules object in a tenant token payload. It demonstrates how to define rules for multiple indexes, including wildcard patterns.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/tenant_token_reference.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"searchRules\": {\n    \"*\": {},\n    \"INDEX_*\": {},\n    \"INDEX_NAME_A\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Secure Random Key for Meilisearch Master Key in Bash\nDESCRIPTION: This command generates a secure random key using OpenSSL, which can be used as the MEILI_MASTER_KEY for securing a Meilisearch instance. It outputs a base64 encoded string of 48 bytes.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/deployment/railway.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 48\n```\n\n----------------------------------------\n\nTITLE: Create Index Response\nDESCRIPTION: Task response returned when creating a new index.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/indexes.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 0,\n  \"indexUid\": \"movies\",\n  \"status\": \"enqueued\",\n  \"type\": \"indexCreation\",\n  \"enqueuedAt\": \"2021-08-12T10:00:00.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Meilisearch API Key Endpoint using cURL\nDESCRIPTION: Sends a GET request to retrieve an API key from Meilisearch, requiring authorization with a master key.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/generate_tenant_token_scratch.mdx#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl \\\n  -X GET 'MEILISEARCH_URL/keys/API_KEY' \\\n  -H 'Authorization: Bearer MASTER_KEY'\n```\n\n----------------------------------------\n\nTITLE: Checking Dump Task Status in Meilisearch\nDESCRIPTION: Example response from checking the status of a dump creation task. Shows a completed task with details about the created dump including its unique identifier.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/data_backup/dumps.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uid\": 1,\n  \"indexUid\": null,\n  \"status\": \"succeeded\",\n  \"type\": \"dumpCreation\",\n  \"canceledBy\": null,\n  \"details\": {\n    \"dumpUid\": \"20220621-161029217\"\n  },\n  \"error\": null,\n  \"duration\": \"PT0.025872S\",\n  \"enqueuedAt\": \"2022-06-21T16:10:29.217688Z\",\n  \"startedAt\": \"2022-06-21T16:10:29.218297Z\",\n  \"finishedAt\": \"2022-06-21T16:10:29.244169Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Meilisearch Server\nDESCRIPTION: Command to start the Meilisearch server without SSL configuration.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/http2_ssl.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./meilisearch\n```\n\n----------------------------------------\n\nTITLE: Dictionary Update Request\nDESCRIPTION: Request body for updating the dictionary with author name initials.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\"J. R. R.\", \"W. E. B.\"]\n```\n\n----------------------------------------\n\nTITLE: Scheduling Snapshots with Custom Intervals in Meilisearch\nDESCRIPTION: This command configures Meilisearch to create snapshots at a custom time interval. The example sets the interval to 3600 seconds (1 hour), which is useful for databases that are updated frequently.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/data_backup/snapshots.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeilisearch --schedule-snapshot=3600\n```\n\n----------------------------------------\n\nTITLE: Assembling Complete Meilisearch Tenant Token Payload in JSON\nDESCRIPTION: Combines expiration timestamp, API key UID, and search rules into a single JSON object for the token payload.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/generate_tenant_token_scratch.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exp\": UNIX_TIMESTAMP,\n  \"apiKeyUid\": \"API_KEY_UID\",\n  \"searchRules\": {\n    \"INDEX_NAME\": {\n      \"filter\": \"ATTRIBUTE = VALUE\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Body Format for Searchable Attributes in Meilisearch\nDESCRIPTION: Shows the expected format for setting searchable attributes in Meilisearch. The array of strings should be provided in order of importance, from most to least important attribute.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n[<String>, <String>, …]\n```\n\n----------------------------------------\n\nTITLE: Starting Meilisearch from an Existing Snapshot\nDESCRIPTION: This command launches Meilisearch and imports data from an existing snapshot file. This approach is faster than adding documents manually or starting from a dump, as snapshots are exact copies of the database.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/data_backup/snapshots.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeilisearch --import-snapshot mySnapShots/data.ms.snapshot\n```\n\n----------------------------------------\n\nTITLE: Getting Displayed Attributes\nDESCRIPTION: API request to retrieve the current displayed attributes configuration using legacy authentication.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/updating.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -H \"X-Meili-API-Key: API_KEY\" \\\n  -X GET 'http://<your-domain-name>/indexes/{indexUid}/settings/displayed-attributes'\n```\n\n----------------------------------------\n\nTITLE: Verifying DNS Configuration for Meilisearch Instance\nDESCRIPTION: Use curl to check if the domain name is properly linked to the Meilisearch instance. This command sends a request to the /health endpoint and expects a 200 OK response with a specific body.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/deployment/digitalocean.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v http://<your-domain-name>/health\n```\n\n----------------------------------------\n\nTITLE: Running Meilisearch Setup Script\nDESCRIPTION: Command to run the Meilisearch configuration script for setting up instance parameters.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/deployment/aws.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmeilisearch-setup\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Pagination Reset Task - JSON\nDESCRIPTION: Example response after resetting pagination settings to their default values, returning task information for tracking the reset operation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"books\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2022-04-14T20:53:32.863107Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Meilisearch with CUDA Support\nDESCRIPTION: Cargo command to compile Meilisearch with CUDA features enabled.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/computing_hugging_face_embeddings_gpu.mdx#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo build --release --features cuda\n```\n\n----------------------------------------\n\nTITLE: Scheduling Snapshots in Meilisearch Using Command Line\nDESCRIPTION: This command launches Meilisearch with automatic snapshot creation enabled. By default, Meilisearch creates the first snapshot on launch and then creates a new one every 24 hours, overwriting the previous one.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/data_backup/snapshots.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeilisearch --schedule-snapshot\n```\n\n----------------------------------------\n\nTITLE: EXISTS Operator Filter in Meilisearch\nDESCRIPTION: A filter that checks for the existence of a field, returning all documents containing the 'release_date' field.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nrelease_date EXISTS\n```\n\n----------------------------------------\n\nTITLE: Updating Typo Tolerance Settings Response\nDESCRIPTION: JSON response showing the task details after updating typo tolerance settings for a Meilisearch index.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"books\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2022-04-14T20:56:44.991039Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displayed Attributes Response\nDESCRIPTION: Example response showing configured displayed attributes for search results.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"title\",\n  \"overview\",\n  \"genres\",\n  \"release_date.year\"\n]\n```\n\n----------------------------------------\n\nTITLE: Sending a Search Request to Meilisearch Cloud Monitoring URL\nDESCRIPTION: Example of how to make a search request using the monitoring-enabled edge URL after activating Meilisearch Cloud monitoring. The request searches for \"green socks\" in the products index.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/analytics/configure_monitoring.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl \\\n  -X POST 'http://edge.meilisearch.com/indexes/products/search' \\\n  -H 'Content-Type: application/json' \\\n  --data-binary '{ \"q\": \"green socks\" }'\n```\n\n----------------------------------------\n\nTITLE: Running Meilisearch Setup Script\nDESCRIPTION: Command to run the Meilisearch setup script, which guides the user through configuring settings for production use. This script can be run at any time to modify the configuration.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/deployment/digitalocean.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeilisearch-setup\n```\n\n----------------------------------------\n\nTITLE: Running Meilisearch Binary\nDESCRIPTION: Command to run the compiled Meilisearch binary.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/computing_hugging_face_embeddings_gpu.mdx#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n./meilisearch\n```\n\n----------------------------------------\n\nTITLE: Running Meilisearch with Docker\nDESCRIPTION: Basic command to run Meilisearch in a Docker container. It maps port 7700, mounts a volume for data persistence, and uses a specific Meilisearch version.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/docker.mdx#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it --rm \\\n  -p 7700:7700 \\\n  -v $(pwd)/meili_data:/meili_data \\\n  getmeili/meilisearch:v1.14\n```\n\n----------------------------------------\n\nTITLE: Example Document Structure with UNIX Timestamps in JSON\nDESCRIPTION: Sample JSON dataset of video games with release dates formatted as UNIX timestamps. Each document includes an id, title, genre, and release_timestamp field.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/working_with_dates.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 0,\n    \"title\": \"Return of the Obra Dinn\",\n    \"genre\": \"adventure\",\n    \"release_timestamp\": 1538949600\n  },\n  {\n    \"id\": 1,\n    \"title\": \"The Excavation of Hob's Barrow\",\n    \"genre\": \"adventure\",\n    \"release_timestamp\": 1664316000\n  },\n  {\n    \"id\": 2,\n    \"title\": \"Bayonetta 2\",\n    \"genre\": \"action\",\n    \"release_timestamp\": 1411164000\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Optional Parameters to REST Embedder Request\nDESCRIPTION: Demonstrates how to add optional configuration parameters to the embedder request, such as encoding_format for the Mistral provider.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/configure_rest_embedder.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EMBEDDER_NAME\": {\n    \"source\": \"rest\",\n    \"url\": \"PROVIDER_URL\",\n    \"request\": {\n      \"model\": \"MODEL_NAME\",\n      \"input\": [\"{{text}}\", \"{{..}}\"],\n      \"encoding_format\": \"float\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Import Dump Option in Meilisearch Configuration File\nDESCRIPTION: Demonstrates how to set the import_dump option in a Meilisearch TOML configuration file.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/configure_meilisearch_at_launch.mdx#2025-04-16_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\nimport_dump = \"./example.dump\"\n```\n\n----------------------------------------\n\nTITLE: Task Status Response\nDESCRIPTION: Example of a successful document addition task response showing status and processing details\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/getting_started_with_self_hosted_meilisearch.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"uid\": 0,\n   \"indexUid\": \"movies\",\n   \"status\": \"succeeded\",\n   \"type\": \"documentAdditionOrUpdate\",\n   \"canceledBy\": null,\n   \"details\": {\n      \"receivedDocuments\": 19547,\n      \"indexedDocuments\": 19547\n   },\n   \"error\": null,\n   \"duration\": \"PT0.030750S\",\n   \"enqueuedAt\": \"2021-12-20T12:39:18.349288Z\",\n   \"startedAt\": \"2021-12-20T12:39:18.352490Z\",\n   \"finishedAt\": \"2021-12-20T12:39:18.380038Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Movie Database Structure in JSON\nDESCRIPTION: Example of the movie_ratings collection structure showing nested fields and data types used for filtering.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_search_results.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 458723,\n    \"title\": \"Us\",\n    \"director\": \"Jordan Peele\",\n    \"release_date\": 1552521600,\n    \"genres\": [\n      \"Thriller\",\n      \"Horror\",\n      \"Mystery\"\n    ],\n    \"rating\": {\n      \"critics\": 86,\n      \"users\": 73\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Response for Updating Search Cutoff in Meilisearch\nDESCRIPTION: Shows the response from the API when updating the search cutoff value. Returns a task ID that can be used to track the status of the update operation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"movies\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2023-03-21T06:33:41.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Meilisearch Instance Health with cURL\nDESCRIPTION: A bash command to verify that a Meilisearch instance is running properly by checking its health endpoint. The server should respond with a 200 OK status code if everything is working correctly.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/deployment/aws.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v http://<your-domain-name>/health\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude Desktop MCP Settings\nDESCRIPTION: JSON configuration for adding the Meilisearch MCP server to Claude Desktop's configuration file (claude_desktop_config.json).\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/ai/mcp.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"meilisearch\": {\n      \"command\": \"uvx\",\n      \"args\": [\"-n\", \"meilisearch-mcp\"]\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Ranking Rules in Meilisearch\nDESCRIPTION: This JSON snippet shows how to configure custom ranking rules in Meilisearch. It includes all built-in ranking rules and adds custom rules for release date (ascending) and movie ranking (descending) at the end of the processing order.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/relevancy/custom_ranking_rules.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"words\",\n  \"typo\",\n  \"proximity\",\n  \"attribute\",\n  \"sort\",\n  \"exactness\",\n  \"release_date:asc\",\n  \"movie_ranking:desc\"\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Article Model and Database Migration\nDESCRIPTION: Commands to generate an Article model and run database migrations in Rails.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/ruby_on_rails_quick_start.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate model Article title:string body:text\n\nbin/rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Retrieving API Key with cURL\nDESCRIPTION: cURL command to fetch an API key from Meilisearch API endpoint using master key authentication.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/generate_tenant_token_third_party.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -X GET 'MEILISEARCH_URL/keys/API_KEY' \\\n  -H 'Authorization: Bearer MASTER_KEY'\n```\n\n----------------------------------------\n\nTITLE: Delete Index Response\nDESCRIPTION: Task response returned when deleting an index.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/indexes.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"movies\",\n  \"status\": \"enqueued\",\n  \"type\": \"indexDeletion\",\n  \"enqueuedAt\": \"2021-08-12T10:00:00.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Synonyms Reset Task Response\nDESCRIPTION: JSON response example showing the task details after resetting synonyms settings for a Meilisearch index.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"movies\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2021-08-11T09:25:53.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Repository Clone Command\nDESCRIPTION: Git command to clone the Meilisearch.com repository\nSOURCE: https://github.com/meilisearch/documentation/blob/main/running-locally.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:meilisearch/meilisearch.com.git\n```\n\n----------------------------------------\n\nTITLE: Moving Meilisearch Binary to System Path\nDESCRIPTION: Moves the Meilisearch binary file to /usr/local/bin to make it accessible from anywhere in the system.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/running_production.mdx#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmv ./meilisearch /usr/local/bin/\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Command to install necessary Python packages including langchain, openai, meilisearch, and python-dotenv.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/langchain.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install langchain openai meilisearch python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Sample Movie Document JSON Structure\nDESCRIPTION: This JSON snippet represents a sample document from a movie database, showcasing various fields like id, title, overview, genres, poster, and release date.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/document_template_best_practices.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 2,\n  \"title\": \"Ariel\",\n  \"overview\": \"Taisto Kasurinen is a Finnish coal miner whose father has just committed suicide and who is framed for a crime he did not commit. In jail, he starts to dream about leaving the country and starting a new life. He escapes from prison but things don't go as planned...\",\n  \"genres\": [\n    \"Drama\",\n    \"Crime\",\n    \"Comedy\"\n  ],\n  \"poster\": \"https://image.tmdb.org/t/p/w500/ojDg0PGvs6R9xYFodRct2kdI6wC.jpg\",\n  \"release_date\": 593395200\n}\n```\n\n----------------------------------------\n\nTITLE: Meilisearch Task Response (JSON)\nDESCRIPTION: Example of the JSON response returned by Meilisearch after adding or updating documents. It includes details about the enqueued task such as taskUid, indexUid, status, type, and enqueuedAt timestamp.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/documents.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"taskUid\": 1,\n    \"indexUid\": \"movies\",\n    \"status\": \"enqueued\",\n    \"type\": \"documentAdditionOrUpdate\",\n    \"enqueuedAt\": \"2021-08-11T09:25:53.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response: Invalid Document ID Format\nDESCRIPTION: This JSON error response is returned when a document ID contains invalid characters. Valid document IDs can only contain alphanumeric characters, hyphens, and underscores.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/getting_started/primary_key.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"uid\": 1,\n    \"indexUid\": \"books\",\n    \"status\": \"failed\",\n    \"type\": \"documentAdditionOrUpdate\",\n    \"canceledBy\": null,\n    \"details\": {\n        \"receivedDocuments\": 5,\n        \"indexedDocuments\": null\n        },\n    \"error\": {\n        \"message\": \"Document identifier `1@` is invalid. A document identifier can be of type integer or string, only composed of alphanumeric characters (a-z A-Z 0-9), hyphens (-) and underscores (_).\",\n        \"code\": \"invalid_document_id\",\n        \"type\": \"invalid_request\",\n        \"link\": \"https://docs.meilisearch.com/errors#invalid_document_id\"\n        },\n    \"duration\": \"PT0.009738S\",\n    \"enqueuedAt\": \"2021-12-30T11:28:59.075065Z\",\n    \"startedAt\": \"2021-12-30T11:28:59.076144Z\",\n    \"finishedAt\": \"2021-12-30T11:28:59.084803Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Task Deletion Response - Meilisearch API\nDESCRIPTION: Example JSON response from the task deletion endpoint showing the created deletion task details including its UID, status, type and timestamp.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/tasks.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 3,\n  \"indexUid\": null,\n  \"status\": \"enqueued\",\n  \"type\": \"taskDeletion\",\n  \"enqueuedAt\": \"2021-08-12T10:00:00.000000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Faceting Reset Task Response\nDESCRIPTION: Example JSON response when resetting faceting settings, showing task details.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"books\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2022-04-14T20:53:32.863107Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Typo Tolerance Settings Response\nDESCRIPTION: JSON response showing the task details after resetting typo tolerance settings to default values for a Meilisearch index.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_53\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"books\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2022-04-14T20:53:32.863107Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Featured Documentation Grid in JSX\nDESCRIPTION: JSX component code that renders a grid of featured documentation cards. Each card contains a heading, description, and link to important Meilisearch documentation sections including Cloud quickstart, self-hosted setup, API reference, SDKs, and blog.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/home.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Featured\n  items={[\n    {\n      content: (\n        <>\n          <Heading as=\"h2\" style={{ marginBottom: \"-10px\" }} noAnchor>\n            Getting started with Meilisearch Cloud\n          </Heading>{\" \"}\n          New here? Check out our quick start guide to learn how to set up\n          Meilisearch using our Cloud offering, import data, and make your first\n          search.\n        </>\n      ),\n      size: 4,\n      link: \"/docs/learn/getting_started/cloud_quick_start\",\n    },\n    {\n      content: (\n        <>\n          <Heading as=\"h2\" style={{ marginBottom: \"-10px\" }} noAnchor>\n            Quick start\n          </Heading>{\" \"}\n          Prefer self-hosting? Take a look at our quick start guide and learn\n          how to set up and use Meilisearch locally.\n        </>\n      ),\n      size: 4,\n      link: \"/docs/learn/self_hosted/getting_started_with_self_hosted_meilisearch\",\n    },\n    {\n      icon: \"custom\",\n      content: \"Consult the Meilisearch API reference.\",\n      size: 1,\n      link: \"/docs/reference/api/overview\",\n    },\n    {\n      content:\n        \"Looking for SDK documentation? Check out this list of official Meilisearch libraries.\",\n      icon: \"cube\",\n      size: 3,\n      link: \"/docs/learn/resources/sdks\",\n    },\n    {\n      content:\n        \"Announcing Meilisearch Cloud: the best way to add Meilisearch to your project\",\n      icon: \"cloud\",\n      size: 2,\n      link: \"https://www.meilisearch.com/cloud?utm_campaign=oss&utm_source=docs&utm_medium=home-page\",\n    },\n    {\n      content:\n        \"For more tips, tutorials, and information about our company, take a look at the Meilisearch blog.\",\n      icon: \"openSource\",\n      size: 2,\n      link: \"https://blog.meilisearch.com\",\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP/2 With SSL\nDESCRIPTION: Command to test an HTTP/2 request to Meilisearch with SSL, which should work as HTTP/2 requires SSL encryption.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/http2_ssl.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -kvs --http2 --request GET 'https://localhost:7700/indexes'\n```\n\n----------------------------------------\n\nTITLE: Rebuilding and Starting Strapi in Development Mode\nDESCRIPTION: Commands to rebuild the Strapi application after installing the Meilisearch plugin and then start it in development mode, which makes configuration easier.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/strapi_v4.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Defining Click Event Object in JSON for Meilisearch Analytics\nDESCRIPTION: The structure of a click event object to be sent to the /events endpoint. This object includes the event type, name, index UID, object ID, and position of the clicked document in search results.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/analytics/events_endpoint.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"eventType\": \"click\",\n  \"eventName\": \"Search Result Clicked\",\n  \"indexUid\": \"products\",\n  \"objectId\": \"0\",\n  \"position\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Certbot Auto-Renewal\nDESCRIPTION: Performs a dry run of the certificate renewal process to verify that automatic renewal is correctly configured.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/running_production.mdx#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsudo certbot renew --dry-run\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry Data Collection in Meilisearch via Command-line Option\nDESCRIPTION: This command demonstrates how to disable data collection in Meilisearch using a command-line option. It requires restarting the Meilisearch instance after setting the option.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/resources/telemetry.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeilisearch --no-analytics\n```\n\n----------------------------------------\n\nTITLE: STARTS WITH Operator Filter in Meilisearch (Experimental)\nDESCRIPTION: An experimental filter using the STARTS WITH operator to return dairy products whose names start with the string 'kef'.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\ndairy_products.name STARTS WITH kef\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry Data Collection in Meilisearch via Environment Variable\nDESCRIPTION: This snippet shows how to disable data collection in Meilisearch by setting an environment variable. It requires setting the variable and then restarting the Meilisearch instance.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/resources/telemetry.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport MEILI_NO_ANALYTICS=true\nmeilisearch\n```\n\n----------------------------------------\n\nTITLE: Adding Images to Markdown Documentation\nDESCRIPTION: Shows the correct format for adding image assets to Markdown documentation files using raw GitHub URLs instead of relative paths.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/resources/contributing_docs.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\\!\\[Image description\\]\\(https://raw.githubusercontent.com/meilisearch/documentation/[branch_name]/assets/images/[guide_name]/diagram.png\\)\n```\n\n----------------------------------------\n\nTITLE: Creating a Strapi App with Quick Start Option\nDESCRIPTION: Command to create a new Strapi application in a directory called 'back' using the quickstart option, which sets up a Strapi app with default configurations and opens the admin dashboard.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/strapi_v4.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-strapi-app@latest back --quickstart\n```\n\n----------------------------------------\n\nTITLE: Accessing Rails Console\nDESCRIPTION: Command to open the Rails console for interacting with the application.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/ruby_on_rails_quick_start.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails console\n```\n\n----------------------------------------\n\nTITLE: Integrating Meilisearch Component in Blade View\nDESCRIPTION: This Blade template demonstrates how to use the Meilisearch component in a Laravel view. It includes the necessary Vite directive to load the Vue app and passes the tenant token to the component.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/laravel_multitenancy.mdx#2025-04-16_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<!-- resources/views/contacts/index.blade.php -->\n\n<div id=\"vue-app\">\n    <meilisearch index-name=\"contacts\" api-key=\"{{ $meilisearchToken }}\" host=\"https://edge.meilisearch.com\">\n    </meilisearch>\n</div>\n\n@push('scripts')\n    @vite('resources/js/vue-app.js')\n@endpush\n```\n\n----------------------------------------\n\nTITLE: Response from Meilisearch API after Updating Primary Key\nDESCRIPTION: This JSON response is returned after successfully updating the primary key of an index named 'books'. It shows the task details including the taskUid, status, and enqueuedAt timestamp.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/getting_started/primary_key.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"books\",\n  \"status\": \"enqueued\",\n  \"type\": \"indexUpdate\",\n  \"enqueuedAt\": \"2022-09-20T12:10:06.444672Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying CUDA Installation\nDESCRIPTION: Command to verify CUDA installation by checking the nvidia compiler driver version.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/computing_hugging_face_embeddings_gpu.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnvcc --version | head -1\n```\n\n----------------------------------------\n\nTITLE: Federated Search Response Example\nDESCRIPTION: Example response from a federated search showing combined results from multiple indexes with federation metadata.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/multi_search/performing_federated_search.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hits\": [\n    {\n      \"id\": 0,\n      \"client_name\": \"Natasha Nguyen\",\n      \"message\": \"My email is natasha.nguyen@example.com\",\n      \"time\": 1727349362,\n      \"_federation\": {\n        \"indexUid\": \"chats\",\n        \"queriesPosition\": 0\n      }\n    }\n  ],\n  \"processingTimeMs\": 0,\n  \"limit\": 20,\n  \"offset\": 0,\n  \"estimatedTotalHits\": 3,\n  \"semanticHitCount\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Locating Meilisearch Directory in Windows CMD\nDESCRIPTION: Command to find the location of the Meilisearch directory using Windows Command Prompt. This helps Windows users identify where their Meilisearch installation is located.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/updating.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nwhere meilisearch\n```\n\n----------------------------------------\n\nTITLE: Activating Experimental CONTAINS Filter in Meilisearch\nDESCRIPTION: A curl command that enables the experimental CONTAINS filter feature by updating experimental features configuration.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -X PATCH 'MEILISEARCH_URL/experimental-features/' \\\n  -H 'Content-Type: application/json' \\\n  --data-binary '{\n    \"containsFilter\": true\n  }'\n```\n\n----------------------------------------\n\nTITLE: Securing SSH Key Pair for AWS Instance Access\nDESCRIPTION: A bash command to set the correct permissions on your AWS key pair file. This restricts the permissions to read-only for the owner, which is required for SSH to accept the private key file.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/deployment/aws.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchmod 400 <YourMeilisearchKeyPair>.pem\n```\n\n----------------------------------------\n\nTITLE: Installing Vue InstantSearch and Meilisearch Dependencies\nDESCRIPTION: This command installs the necessary npm packages for integrating Vue InstantSearch with Meilisearch.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/laravel_multitenancy.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vue-instantsearch @meilisearch/instant-meilisearch\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Environment variable configuration for Meilisearch host, API key, and OpenAI API key.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/langchain.mdx#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# .env\n\nMEILI_HTTP_ADDR=\"your Meilisearch host\"\nMEILI_API_KEY=\"your Meilisearch API key\"\nOPENAI_API_KEY=\"your OpenAI API key\"\n```\n\n----------------------------------------\n\nTITLE: CUDA Verification Output\nDESCRIPTION: Expected output from the CUDA verification command showing successful installation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/computing_hugging_face_embeddings_gpu.mdx#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nnvcc: NVIDIA (R) Cuda compiler driver\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Articles in Rails Console\nDESCRIPTION: Ruby code to create and save multiple Article records in the database using a loop.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/ruby_on_rails_quick_start.mdx#2025-04-16_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\n# Use a loop to create and save 5 unique articles with predefined titles and bodies\ntitles = [\"Welcome to Rails\", \"Exploring Rails\", \"Advanced Rails\", \"Rails Tips\", \"Rails in Production\"]\nbodies = [\n  \"This is your first step into Ruby on Rails.\",\n  \"Dive deeper into the Rails framework.\",\n  \"Explore advanced features of Rails.\",\n  \"Quick tips for Rails developers.\",\n  \"Managing Rails applications in production environments.\"\n]\n\ntitles.each_with_index do |title, index|\n  article = Article.new(title: title, body: bodies[index])\n  article.save # Saves the entry to the database\nend\n```\n\n----------------------------------------\n\nTITLE: Testing MCP Server Independently\nDESCRIPTION: Command to test the Meilisearch MCP server using the MCP Inspector tool via npx.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/ai/mcp.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @modelcontextprotocol/inspector uvx -n meilisearch-mcp\n```\n\n----------------------------------------\n\nTITLE: Generating a Strong Master Key for Meilisearch in Python\nDESCRIPTION: This Python command generates a strong random key encoded in base64 that can be used as a master key to secure a Meilisearch instance. The command uses the os.urandom function to generate 32 random bytes and encodes them as a URL-safe base64 string.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/deployment/koyeb.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -c 'import os,base64; print(base64.urlsafe_b64encode(os.urandom(32)).decode())'\n```\n\n----------------------------------------\n\nTITLE: Hugging Face Configuration Example in Meilisearch\nDESCRIPTION: JSON configuration example showing the source property for Hugging Face embedder, which is not supported in Meilisearch Cloud.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/choose_an_embedder.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"source\": \"huggingFace\"}\n```\n\n----------------------------------------\n\nTITLE: Generating SSL Certificates with mkcert\nDESCRIPTION: Command to generate SSL certificates using mkcert for local testing. This creates the certificate files needed for SSL configuration.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/http2_ssl.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkcert '127.0.0.1'\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP/2 Without SSL\nDESCRIPTION: Command to test an HTTP/2 request to Meilisearch without SSL, which will not work as HTTP/2 requires SSL.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/http2_ssl.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -kvs --http2 --request GET 'http://localhost:7700/indexes'\n```\n\n----------------------------------------\n\nTITLE: Error Response: No Primary Key Candidate Found\nDESCRIPTION: This JSON error response is returned when Meilisearch cannot find any field ending with 'id' to use as the primary key. This requires manually specifying the primary key or ensuring documents have an appropriate id field.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/getting_started/primary_key.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uid\": 1,\n  \"indexUid\": \"books\",\n  \"status\": \"failed\",\n  \"type\": \"documentAdditionOrUpdate\",\n  \"canceledBy\": null,\n  \"details\": {\n    \"receivedDocuments\": 5,\n    \"indexedDocuments\": null\n  },\n  \"error\": {\n    \"message\": \"The primary key inference failed as the engine did not find any field ending with `id` in its name. Please specify the primary key manually using the `primaryKey` query parameter.\",\n    \"code\": \"index_primary_key_no_candidate_found\",\n    \"type\": \"invalid_request\",\n    \"link\": \"https://docs.meilisearch.com/errors#index-primary-key-no-candidate-found\"\n  },\n  \"duration\": \"PT0.006579S\",\n  \"enqueuedAt\": \"2023-01-17T10:19:14.464858Z\",\n  \"startedAt\": \"2023-01-17T10:19:14.465369Z\",\n  \"finishedAt\": \"2023-01-17T10:19:14.471948Z\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Disabling Analytics with Command-Line Flag in Bash\nDESCRIPTION: Shows how to use a command-line flag to disable analytics when launching Meilisearch.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/configure_meilisearch_at_launch.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./meilisearch --no-analytics\n```\n\n----------------------------------------\n\nTITLE: Error Response for Missing Document ID in MeiliSearch\nDESCRIPTION: Example of an error response returned by MeiliSearch when a document is missing the required primary key (id) attribute. The response includes details about the failed operation, timing information, and error specifics including a link to the documentation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/getting_started/primary_key.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"uid\": 1,\n    \"indexUid\": \"books\",\n    \"status\": \"failed\",\n    \"type\": \"documentAdditionOrUpdate\",\n    \"canceledBy\": null,\n    \"details\": {\n        \"receivedDocuments\": 1,\n        \"indexedDocuments\": null\n        },\n    \"error\": {\n        \"message\": \"Document doesn't have a `id` attribute: `{\\\"title\\\":\\\"Solaris\\\",\\\"author\\\":\\\"Stanislaw Lem\\\",\\\"genres\\\":[\\\"science fiction\\\"],\\\"price\\\":5.0.\",\n        \"code\": \"missing_document_id\",\n        \"type\": \"invalid_request\",\n        \"link\": \"https://docs.meilisearch.com/errors#missing_document_id\"\n        },\n    \"duration\": \"PT0.007899S\",\n    \"enqueuedAt\": \"2021-12-30T11:23:52.304689Z\",\n    \"startedAt\": \"2021-12-30T11:23:52.307632Z\",\n    \"finishedAt\": \"2021-12-30T11:23:52.312588Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response: Multiple Primary Key Candidates Found\nDESCRIPTION: This JSON error response is returned when Meilisearch cannot automatically determine which field to use as the primary key because multiple fields end with 'id'. This requires manually specifying the primary key.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/getting_started/primary_key.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uid\": 4,\n  \"indexUid\": \"books\",\n  \"status\": \"failed\",\n  \"type\": \"documentAdditionOrUpdate\",\n  \"canceledBy\": null,\n  \"details\": {\n    \"receivedDocuments\": 5,\n    \"indexedDocuments\": 5\n  },\n  \"error\": {\n    \"message\": \"The primary key inference failed as the engine found 2 fields ending with `id` in their names: 'id' and 'author_id'. Please specify the primary key manually using the `primaryKey` query parameter.\",\n    \"code\": \"index_primary_key_multiple_candidates_found\",\n    \"type\": \"invalid_request\",\n    \"link\": \"https://docs.meilisearch.com/errors#index-primary-key-multiple-candidates-found\"\n  },\n  \"duration\": \"PT0.006002S\",\n  \"enqueuedAt\": \"2023-01-17T10:44:42.625574Z\",\n  \"startedAt\": \"2023-01-17T10:44:42.626041Z\",\n  \"finishedAt\": \"2023-01-17T10:44:42.632043Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Negated STARTS WITH Operator Filters in Meilisearch (Experimental)\nDESCRIPTION: Two equivalent ways to write a negated STARTS WITH filter that returns dairy products whose names don't start with 'kef'.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\ndairy_products.name NOT STARTS WITH kef\nNOT dairy_product.name STARTS WITH kef\n```\n\n----------------------------------------\n\nTITLE: Branch Configuration TypeScript Code\nDESCRIPTION: Location of branch configuration in TypeScript constants file\nSOURCE: https://github.com/meilisearch/documentation/blob/main/running-locally.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nBRANCH = 'main'\n```\n\n----------------------------------------\n\nTITLE: Cloning Meilisearch Repository\nDESCRIPTION: Git command to clone the Meilisearch repository from GitHub.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/computing_hugging_face_embeddings_gpu.mdx#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/meilisearch/meilisearch.git\n```\n\n----------------------------------------\n\nTITLE: Batch Object Structure in JSON\nDESCRIPTION: Defines the structure of a batch object returned by the Meilisearch API, including details about progress, stats, and timing information.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/batches.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uid\": 0,\n  \"details\": {\n    \"receivedDocuments\": 6,\n    \"indexedDocuments\": 6\n  },\n  \"stats\": {\n    \"totalNbTasks\": 1,\n    \"status\": {\n      \"succeeded\": 1\n    },\n    \"types\": {\n      \"documentAdditionOrUpdate\": 1\n    },\n    \"indexUids\": {\n      \"INDEX_NAME\": 1\n    }, \n    \"progressTrace\": { … },\n    \"writeChannelCongestion\": { … },\n    \"internalDatabaseSizes\": { … }\n  },\n  \"duration\": \"PT0.250518S\",\n  \"startedAt\": \"2024-12-10T15:20:30.18182Z\",\n  \"finishedAt\": \"2024-12-10T15:20:30.432338Z\",\n  \"progress\": {\n    \"steps\": [\n      { \n        \"currentStep\": \"extracting words\",\n        \"finished\": 2,\n        \"total\": 9,\n      },\n      {\n        \"currentStep\": \"document\",\n        \"finished\": 30546,\n        \"total\": 31944,\n      }\n    ],\n    \"percentage\": 32.8471\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Repository Header with HTML\nDESCRIPTION: HTML markup for the repository's header section, including logo images and navigation links to various Meilisearch resources like website, roadmap, blog, documentation, FAQ, and Discord.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n  <img src=\"assets/repo/meilisearch-logo-light.svg?sanitize=true#gh-light-mode-only\">\n  <img src=\"assets/repo/meilisearch-logo-dark.svg?sanitize=true#gh-dark-mode-only\">\n</p>\n\n<h1 align=\"center\">Meilisearch Documentation</h1>\n\n<h4 align=\"center\">\n  <a href=\"https://www.meilisearch.com\">Website</a> |\n  <a href=\"https://roadmap.meilisearch.com/tabs/1-under-consideration\">Roadmap</a> |\n  <a href=\"https://blog.meilisearch.com\">Blog</a> |\n  <a href=\"https://www.meilisearch.com/docs\">Documentation</a> |\n  <a href=\"https://www.meilisearch.com/docs/faq\">FAQ</a> |\n  <a href=\"https://discord.meilisearch.com\">Discord</a>\n</h4>\n```\n\n----------------------------------------\n\nTITLE: Installing Meilisearch Dependencies for Laravel Scout\nDESCRIPTION: Command to install the required dependencies for using Meilisearch with Laravel Scout, including the Meilisearch PHP client and HTTP factory implementation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/laravel_scout.mdx#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require meilisearch/meilisearch-php http-interop/http-factory-guzzle\n```\n\n----------------------------------------\n\nTITLE: Filtering with Simple AND Operations in SQL\nDESCRIPTION: Shows filter chaining using AND operators with no nesting depth, filtering for multiple genre conditions.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/resources/known_limitations.mdx#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ngenre = \"romance\" AND genre = \"horror\" AND genre = \"adventure\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Meilisearch Documentation Repository\nDESCRIPTION: Command to clone the Meilisearch documentation repository to your local machine using Git.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/previous_docs_version.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/meilisearch/documentation.git\n```\n\n----------------------------------------\n\nTITLE: Using Featured Component in JSX\nDESCRIPTION: Example of using the Featured component to display items in a grid layout.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/migration-guide.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Featured items=[{…}] />\n```\n\n----------------------------------------\n\nTITLE: Installing Meilisearch via Curl\nDESCRIPTION: Command to download and install the latest version of Meilisearch on a local machine\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/getting_started_with_self_hosted_meilisearch.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://install.meilisearch.com | sh\n```\n\n----------------------------------------\n\nTITLE: Retrieving Batch Information Response in Meilisearch (JSON)\nDESCRIPTION: This snippet shows the JSON response structure when retrieving batch information in Meilisearch. It includes details such as the batch UID, document processing statistics, progress, task statistics, duration, and timestamps.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/batches.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uid\": 1,\n  \"details\": {\n    \"receivedDocuments\": 1,\n    \"indexedDocuments\": 1\n  },\n  \"progress\": null,\n  \"stats\": {\n    \"totalNbTasks\": 1,\n    \"status\": {\n      \"succeeded\": 1\n    },\n    \"types\": {\n      \"documentAdditionOrUpdate\": 1\n    },\n    \"indexUids\": {\n      \"INDEX_NAME\": 1\n    }\n  },\n  \"duration\": \"PT0.364788S\",\n  \"startedAt\": \"2024-12-10T15:48:49.672141Z\",\n  \"finishedAt\": \"2024-12-10T15:48:50.036929Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Facet Search Response Example in Meilisearch\nDESCRIPTION: Example response from a successful facet search request showing the structure of facet hits, including matched values and their counts, along with processing time metadata.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/facet_search.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"facetHits\": [\n    {\n      \"value\": \"fiction\",\n      \"count\": 7\n    }\n  ],\n  \"facetQuery\": \"fiction\",\n  \"processingTimeMs\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Internal Links in Markdown\nDESCRIPTION: Example of creating internal links in Markdown format that reference the docs repository root.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/migration-guide.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nA paragraph with a link to the [search API reference](/reference/api/search).\n```\n\n----------------------------------------\n\nTITLE: Array Processing Example\nDESCRIPTION: Illustrates how Meilisearch flattens nested arrays into a single string.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/engine/datatypes.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  [\n    \"Bruce Willis\",\n    \"Vin Diesel\"\n  ],\n  \"Kung Fu Panda\"\n]\n```\n\n----------------------------------------\n\nTITLE: Filtering with Simple OR Operations in SQL\nDESCRIPTION: Demonstrates a basic filter using OR operators with no nesting depth, showing how to filter by different genre values.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/resources/known_limitations.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ngenre = \"romance\" OR genre = \"horror\" OR genre = \"adventure\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Meilisearch Configuration File with cURL\nDESCRIPTION: Demonstrates how to download a default Meilisearch configuration file using cURL.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/configure_meilisearch_at_launch.mdx#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl https://raw.githubusercontent.com/meilisearch/meilisearch/latest/config.toml > config.toml\n```\n\n----------------------------------------\n\nTITLE: Using MDX Components with Nested Content\nDESCRIPTION: Example of using MDX components with nested content including HTML, other components, and Markdown.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/migration-guide.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Component>\n  ## Heading\n\n  <code>const foo = bat</code>\n\n  <ReactButton />\n</Component>\n```\n\n----------------------------------------\n\nTITLE: Development Server Launch Command\nDESCRIPTION: Yarn command to start the local development server\nSOURCE: https://github.com/meilisearch/documentation/blob/main/running-locally.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Running Python Local Server\nDESCRIPTION: Command to start a Python HTTP server for accessing documentation versions v0.11-v0.16 locally.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/previous_docs_version.mdx#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npython3 -m http.server 8080\n```\n\n----------------------------------------\n\nTITLE: Repository Navigation Command\nDESCRIPTION: Command to change directory into the cloned repository\nSOURCE: https://github.com/meilisearch/documentation/blob/main/running-locally.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd meilisearch.com\n```\n\n----------------------------------------\n\nTITLE: Dependencies Installation Command\nDESCRIPTION: Yarn command to install project dependencies\nSOURCE: https://github.com/meilisearch/documentation/blob/main/running-locally.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Checking Out Specific Meilisearch Version\nDESCRIPTION: Git command to checkout documentation for a specific Meilisearch version (example shows v0.20).\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/previous_docs_version.mdx#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout v0.20\n```\n\n----------------------------------------\n\nTITLE: Specifying Meilisearch Configuration File Path with Environment Variable in Windows\nDESCRIPTION: Shows how to set the path to a Meilisearch configuration file using an environment variable on Windows systems.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/configure_meilisearch_at_launch.mdx#2025-04-16_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nset MEILI_CONFIG_FILE_PATH=\"./config.toml\"\n./meilisearch\n```\n\n----------------------------------------\n\nTITLE: Merged Facets Response in Meilisearch Multi-search (JSON)\nDESCRIPTION: This snippet illustrates the structure of merged facets in a multi-search response when both facetsByIndex and mergeFacets are specified. It shows facet distribution and stats across all queried indexes.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/multi_search.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hits\": [ … ],\n  …\n  \"facetDistribution\": {\n    \"ATTRIBUTE\": {\n      \"VALUE\": <Integer>,\n      \"VALUE\": <Integer>\n    }\n  },\n  \"facetStats\": {\n    \"ATTRIBUTE\": {\n      \"min\": <Integer>,\n      \"max\": <Integer>\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get All Batches Response in JSON\nDESCRIPTION: Example response when retrieving all batches from the Meilisearch API, showing pagination and batch details.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/batches.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"uid\": 2,\n      \"details\": {\n        \"stopWords\": [\n          \"of\",\n          \"the\"\n        ]\n      },\n      \"progress\": null,\n      \"stats\": {\n        \"totalNbTasks\": 1,\n        \"status\": {\n          \"succeeded\": 1\n        },\n        \"types\": {\n          \"settingsUpdate\": 1\n        },\n        \"indexUids\": {\n          \"INDEX_NAME\": 1\n        },\n        \"progressTrace\": { … },\n        \"writeChannelCongestion\": { … },\n        \"internalDatabaseSizes\": { … }\n      },\n      \"duration\": \"PT0.110083S\",\n      \"startedAt\": \"2024-12-10T15:49:04.995321Z\",\n      \"finishedAt\": \"2024-12-10T15:49:05.105404Z\"\n    }\n  ],\n  \"total\": 3,\n  \"limit\": 1,\n  \"from\": 2,\n  \"next\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Patient Appointment Dataset\nDESCRIPTION: JSON dataset representing two patients with their respective appointments, demonstrating the nested structure that Meilisearch cannot directly query.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/engine/datatypes.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 0,\n    \"patient_name\": \"Imogen Temult\",\n    \"appointments\": [\n      {\n        \"date\": \"2022-01-01\",\n        \"doctor\": \"Jester Lavorre\"\n      }\n    ]\n  },\n  {\n    \"id\": 1,\n    \"patient_name\": \"Caleb Widowgast\",\n    \"appointments\": [\n      {\n        \"date\": \"2022-01-01\",\n        \"doctor\": \"Dorian Storm\"\n      },\n      {\n        \"date\": \"2023-01-01\",\n        \"doctor\": \"Jester Lavorre\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Null Response for Getting Search Cutoff in Meilisearch\nDESCRIPTION: Shows the null response when getting a search cutoff value that hasn't been explicitly set, indicating the system is using default values.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_38\n\nLANGUAGE: json\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Error Code Documentation - Individual Entries\nDESCRIPTION: Collection of error codes with their detailed explanations, providing information about various API errors, their causes, and potential solutions.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/errors/error_codes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## `api_key_already_exists`\n\nA key with this [`uid`](/reference/api/keys#uid) already exists.\n\n## `api_key_not_found`\n\nThe requested API key could not be found.\n\n## `bad_request`\n\nThe request is invalid, check the error message for more information.\n\n[...additional error codes and descriptions...]\n```\n\n----------------------------------------\n\nTITLE: Geographic Bounding Box Filter Structure\nDESCRIPTION: JSON structure for filtering results within a rectangular geographic area using coordinates for top right and bottom left corners.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/search.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n_geoBoundingBox([{lat}, {lng}], [{lat}, {lng}])\n```\n\n----------------------------------------\n\nTITLE: Starting Local Vuepress Server\nDESCRIPTION: Command to start local development server for documentation versions v0.17-v1.1.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/previous_docs_version.mdx#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Adding Static Images in Markdown\nDESCRIPTION: Example of adding static images using absolute GitHub URLs since relative paths are not supported.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/migration-guide.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n\\!\\[Image description\\]\\(https://raw.githubusercontent.com/meilisearch/documentation/[branch_name]/assets/images/[guide_name]/diagram.png\\)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to REST Embedder Request\nDESCRIPTION: Configures custom HTTP headers for the embedder requests, which may be required by some providers for authentication or other purposes.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/ai_powered_search/configure_rest_embedder.mdx#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EMBEDDER_NAME\": {\n    \"source\": \"rest\",\n    \"url\": \"PROVIDER_URL\",\n    \"request\": {\n      \"text\": \"{{text}}\"\n    },\n    \"response\": {\n      \"result\": {\n        \"data\": [\"{{embedding}}\"]\n      }\n    },\n    \"headers\": {\n      \"FIELD_NAME\": \"FIELD_VALUE\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Faceting Update Task Response\nDESCRIPTION: Example JSON response when updating faceting settings, showing task details.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"books\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2022-04-14T20:56:44.991039Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response: Delete Documents by Filter\nDESCRIPTION: Example response when deleting documents based on a filter. Returns a task object with details about the deletion operation.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/documents.mdx#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"taskUid\": 1,\n    \"indexUid\": \"movies\",\n    \"status\": \"enqueued\",\n    \"type\": \"documentDeletion\",\n    \"enqueuedAt\": \"2023-05-15T08:38:48.024551Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Embedder for Batch Response Processing in Meilisearch\nDESCRIPTION: Example JSON configuration for handling multiple embeddings in a single response from a REST embedder. Uses array notation with placeholders to indicate the structure of batch responses.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/settings.mdx#2025-04-16_snippet_61\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": \"rest\",\n  \"response\": {\n    \"data\": [\n      {\n        \"embedding\": \"{{embedding}}\"\n      },\n      \"{{..}}\"\n    ]\n    …\n  },\n  …\n}\n```\n\n----------------------------------------\n\nTITLE: Task Response JSON\nDESCRIPTION: Example JSON response showing the task status after configuring the embedder.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/computing_hugging_face_embeddings_gpu.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"taskUid\": 1,\n  \"indexUid\": \"INDEX_NAME\",\n  \"status\": \"enqueued\",\n  \"type\": \"settingsUpdate\",\n  \"enqueuedAt\": \"2024-03-04T15:05:43.383955Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: PATCH Response Format for Experimental Features\nDESCRIPTION: Shows the response format after updating experimental feature settings via the PATCH endpoint.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/experimental_features.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metrics\": false,\n  \"logsRoute\": true,\n  \"containsFilter\": false,\n  \"editDocumentsByFunction\": false,\n  \"network\": false\n}\n```\n\n----------------------------------------\n\nTITLE: API Key UID in Tenant Token Payload\nDESCRIPTION: This snippet shows the structure for including an API key UID in the tenant token payload. The UID is used to validate requests and must correspond to an API key with appropriate permissions.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/tenant_token_reference.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiKeyUid\": \"at5cd97d-5a4b-4226-a868-2d0eb6d197ab\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue App with InstantSearch\nDESCRIPTION: This JavaScript code creates a Vue app, configures it to use Vue InstantSearch, and mounts it to the DOM. It also registers a custom Meilisearch component.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/laravel_multitenancy.mdx#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\nimport InstantSearch from 'vue-instantsearch/vue3/es'\nimport Meilisearch from './components/Meilisearch.vue'\n\nconst app = createApp({\n  components: {\n    Meilisearch\n  }\n})\n\napp.use(InstantSearch)\napp.mount('#vue-app')\n```\n\n----------------------------------------\n\nTITLE: Combined Array Filter with AND and OR Logic in Meilisearch\nDESCRIPTION: A filter combining inner and outer arrays to return horror and comedy movies directed by Jordan Peele.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\n[[\"genres = horror\", \"genres = comedy\"], \"director = 'Jordan Peele'\"]\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry Data Collection in Meilisearch on Cloud Services\nDESCRIPTION: This code snippet provides instructions for disabling data collection in Meilisearch when running on cloud services. It involves editing the Meilisearch service file, adding the no-analytics flag, and restarting the service.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/resources/telemetry.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# The following procedure should work for all cloud providers,\n# including DigitalOcean, Google Cloud Platform, and Amazon Web Services.\n# First, open /etc/systemd/system/meilisearch.service with a text editor:\n\nnano /etc/systemd/system/meilisearch.service\n\n# Then add --no-analytics at the end of the command in ExecStart\n# Don't forget to save and quit!\n# Finally, run the following two commands:\n\nsystemctl daemon-reload\nsystemctl restart meilisearch\n```\n\n----------------------------------------\n\nTITLE: Installing Meilisearch by direct download\nDESCRIPTION: This snippet shows how to rename the downloaded Meilisearch binary, give it execute permissions, and launch the server.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/install_meilisearch_locally.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Rename binary to meilisearch. Replace {meilisearch_os} with the name of the downloaded binary\nmv {meilisearch_os} meilisearch\n\n# Give the binary execute permission\nchmod +x meilisearch\n\n# Launch Meilisearch\n./meilisearch\n```\n\n----------------------------------------\n\nTITLE: Creating a Meilisearch Database Dump\nDESCRIPTION: API call to create a dump of the Meilisearch database. This is a crucial step in the migration process, allowing users to backup their data before updating.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/updating.mdx#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -X POST 'http://localhost:7700/dumps' \\\n  -H 'Authorization: Bearer YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Complex Nested Filters with Parentheses in SQL\nDESCRIPTION: Shows various levels of filter nesting using parentheses for clarity, demonstrating different nesting depths.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/resources/known_limitations.mdx#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nuser = 1 OR (user = 2 AND user = 3)\n\n# Depth 4\nuser = 1 OR (user = 2 AND (user = 3 OR (user = 4 AND user = 5)))\n\n# Though this filter is longer, its nesting depth is still 2\nuser = 1 OR (user = 2 AND user = 3) OR (user = 4 AND user = 5) OR user = 6\n```\n\n----------------------------------------\n\nTITLE: Requesting Compressed Response from Meilisearch API\nDESCRIPTION: Shows how to request a compressed response from Meilisearch API using the Accept-Encoding header with gzip algorithm.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/overview.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sH 'Accept-encoding: gzip' 'MEILISEARCH_URL/indexes/movies/search' | gzip -\n```\n\n----------------------------------------\n\nTITLE: Connecting to Meilisearch via SSH with IPv4\nDESCRIPTION: SSH connection command using the admin username and public IPv4 address with a key pair file for authentication.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/deployment/aws.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nssh -i <relative-path-to-your-key-pair> admin@<your-ipv4-address>\n```\n\n----------------------------------------\n\nTITLE: Defining Search Rules for Tenant Token in JSON\nDESCRIPTION: JSON structure defining search rules for a tenant token, specifying filters for specific indexes to control data access.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/security/generate_tenant_token_sdk.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"patient_medical_records\": {\n    \"filter\": \"user_id = 1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Old Authorization Header Example for Meilisearch v0.24 and Below\nDESCRIPTION: Shows the deprecated X-MEILI-API-KEY header used for authorization in Meilisearch versions 0.24 and earlier.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/overview.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n<CodeSamples id=\"updating_guide_check_version_old_authorization_header\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugging Face Embedder\nDESCRIPTION: cURL command to configure the Hugging Face embedder in Meilisearch index settings.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/computing_hugging_face_embeddings_gpu.mdx#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl \\\n  -X PATCH 'MEILISEARCH_URL/indexes/INDEX_NAME/settings/embedders' \\\n  -H 'Content-Type: application/json' \\\n  --data-binary '{ \"default\": { \"source\": \"huggingFace\" } }'\n```\n\n----------------------------------------\n\nTITLE: Installing Meilisearch MCP Server\nDESCRIPTION: Commands for installing the Meilisearch MCP server using either uv or pip package managers. Requires Python 3.9 or higher.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/ai/mcp.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Using uv (recommended)\nuv pip install meilisearch-mcp\n\n# Using pip\npip install meilisearch-mcp\n```\n\n----------------------------------------\n\nTITLE: Establishing SSH Connection to DigitalOcean Droplet\nDESCRIPTION: Command to initiate an SSH connection to the DigitalOcean Droplet using the IP address provided by DigitalOcean. This is required to access the Droplet and run the configuration script.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/deployment/digitalocean.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nssh root@DIGITAL_OCEAN_IP_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Command to install required dependencies for running documentation versions v0.17-v1.1 locally.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/update_and_migration/previous_docs_version.mdx#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Meilisearch Query for Nested Data\nDESCRIPTION: cURL command demonstrating a Meilisearch query attempting to filter on nested appointment data, which returns unexpected results due to the flattened structure.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/engine/datatypes.mdx#2025-04-16_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncurl \\\n  -X POST 'MEILISEARCH_URL/indexes/clinic_patients/search' \\\n  -H 'Content-Type: application/json' \\\n  --data-binary '{\n    \"q\": \"\",\n    \"filter\": \"(appointments.date = 2022-01-01 AND appointments.doctor = \\'Jester Lavorre\\')\"\\n  }'\n```\n\n----------------------------------------\n\nTITLE: Installing Vercel CLI Command\nDESCRIPTION: Command to globally install the Vercel CLI using Yarn package manager\nSOURCE: https://github.com/meilisearch/documentation/blob/main/running-locally.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn global add vercel\n```\n\n----------------------------------------\n\nTITLE: Checking Meilisearch Service Status\nDESCRIPTION: Verifies that the Meilisearch service is running correctly by checking its status.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/running_production.mdx#2025-04-16_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nsystemctl status meilisearch\n```\n\n----------------------------------------\n\nTITLE: Vercel Environment Setup Commands\nDESCRIPTION: Commands to link Vercel project and pull environment configuration\nSOURCE: https://github.com/meilisearch/documentation/blob/main/running-locally.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nvercel link\n```\n\nLANGUAGE: bash\nCODE:\n```\nvercel env pull\n```\n\n----------------------------------------\n\nTITLE: Setting Ownership of Meilisearch Binary\nDESCRIPTION: Assigns ownership of the Meilisearch binary to the newly created meilisearch user and group.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/running_production.mdx#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nchown meilisearch:meilisearch /usr/local/bin/meilisearch\n```\n\n----------------------------------------\n\nTITLE: Checking glibc Version on Linux\nDESCRIPTION: Command to verify the installed version of glibc on Linux systems. Required for determining Meilisearch compatibility, which needs glibc 2.35 or later.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/self_hosted/supported_os.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nldd --version\n```\n\n----------------------------------------\n\nTITLE: Get Network Configuration Response in Meilisearch\nDESCRIPTION: This JSON response shows the structure of the data returned when getting the current network configuration using the GET /network endpoint.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/reference/api/network.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"self\": \"ms-00\",\n  \"remotes\": {\n    \"ms-00\": {\n      \"url\": \"http://ms-1235.example.meilisearch.io\",\n      \"searchApiKey\": \"Ecd1SDDi4pqdJD6qYLxD3y7VZAEb4d9j6LJgt4d6xas\"\n    },\n    \"ms-01\": {\n      \"url\": \"http://ms-4242.example.meilisearch.io\",\n      \"searchApiKey\": \"hrVu-OMcjPGElK7692K7bwriBoGyHXTMvB5NmZkMKqQ\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Organization Model with Contacts Relationship in PHP\nDESCRIPTION: This code defines a basic Organization model with a hasMany relationship to Contact models, establishing the foundation for multitenancy.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/guides/laravel_multitenancy.mdx#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasMany;\n\nclass Organization extends Model\n{\n    public function contacts(): HasMany\n    {\n        return $this->hasMany(Contact::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Parsed Filter without Parentheses in Meilisearch\nDESCRIPTION: The same filter without parentheses, showing how it would be incorrectly parsed due to operator precedence.\nSOURCE: https://github.com/meilisearch/documentation/blob/main/learn/filtering_and_sorting/filter_expression_reference.mdx#2025-04-16_snippet_23\n\nLANGUAGE: plaintext\nCODE:\n```\ngenres = horror OR (genres = comedy AND release_date > 795484800)\n```"
  }
]