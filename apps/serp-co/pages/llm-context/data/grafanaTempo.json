[
  {
    "owner": "grafana",
    "repo": "tempo",
    "content": "TITLE: Basic TraceQL Query with Count Aggregation\nDESCRIPTION: A TraceQL query that selects traces with spans having HTTP status codes between 200-299 and where the count of matching spans is greater than 2.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_0\n\nLANGUAGE: traceql\nCODE:\n```\n{ span.http.status_code >= 200 && span.http.status_code < 300 } | count() > 2\n```\n\n----------------------------------------\n\nTITLE: Cloning Tempo Repository\nDESCRIPTION: Command to clone the Tempo git repository for accessing example configurations.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/getting-started/docker-example.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/grafana/tempo.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Tail-Based Sampling in Grafana Agent Flow\nDESCRIPTION: This River code snippet demonstrates how to set up tail-based sampling in Grafana Agent Flow. It includes an OTLP receiver, a tail sampling processor with error and latency policies, and an OTLP exporter to Tempo.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/grafana-agent/tail-based-sampling.md#2025-04-17_snippet_0\n\nLANGUAGE: river\nCODE:\n```\notelcol.receiver.otlp \"otlp_receiver\" {\n    grpc {\n        endpoint = \"0.0.0.0:4317\"\n    }\n\n    output {\n        traces = [\n            otelcol.processor.tail_sampling.policies.input,\n        ]\n    }\n}\n\notelcol.exporter.otlp \"tempo\" {\n    client {\n        endpoint = \"tempo:4317\"\n    }\n}\n\notelcol.processor.tail_sampling \"policies\" {\n    decision_wait = \"30s\"\n\n    policy {\n        name = \"sample-erroring-traces\"\n        type = \"status_code\"\n        status_code {\n            status_codes = [ \"ERROR\" ]\n        }\n    }\n\n    policy {\n        name = \"sample-long-traces\"\n        type = \"latency\"\n        latency {\n            threshold_ms = 200\n        }\n    }\n\n    output {\n        traces = [otelcol.exporter.otlp.tempo.input]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TraceQL Search Example with Curl\nDESCRIPTION: Demonstrates how to use curl to perform a TraceQL search query that returns traces with error status. Shows the request format and example JSON response with trace data and span sets.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/_index.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -G -s http://localhost:3200/api/search --data-urlencode 'q={ status=error }' | jq\n```\n\n----------------------------------------\n\nTITLE: Querying Readiness Status via HTTP\nDESCRIPTION: Endpoint to check if Tempo is ready to serve traffic. Returns status code 200 when ready.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/_index.md#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /ready\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS with Helm for Tempo Distributed\nDESCRIPTION: This extensive YAML snippet demonstrates how to configure TLS for a distributed Tempo deployment using Helm. It includes volume mounts for TLS secrets, and configurations for various Tempo components including distributor, ingester, querier, and others.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/network/tls.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncompactor:\n  extraVolumeMounts:\n    - mountPath: /tls\n      name: tempo-distributed-tls\n  extraVolumes:\n    - name: tempo-distributed-tls\n      secret:\n        secretName: tempo-distributed-tls\ndistributor:\n  extraVolumeMounts:\n    - mountPath: /tls\n      name: tempo-distributed-tls\n  extraVolumes:\n    - name: tempo-distributed-tls\n      secret:\n        secretName: tempo-distributed-tls\ningester:\n  extraVolumeMounts:\n    - mountPath: /tls\n      name: tempo-distributed-tls\n  extraVolumes:\n    - name: tempo-distributed-tls\n      secret:\n        secretName: tempo-distributed-tls\nmemcached:\n  extraArgs:\n    - -Z\n    - -o\n    - ssl_chain_cert=/tls/tls.crt,ssl_key=/tls/tls.key\n  extraVolumeMounts:\n    - mountPath: /tls\n      name: tempo-distributed-tls\n  extraVolumes:\n    - name: tempo-distributed-tls\n      secret:\n        secretName: tempo-distributed-tls\nmetricsGenerator:\n  extraVolumeMounts:\n    - mountPath: /tls\n      name: tempo-distributed-tls\n  extraVolumes:\n    - name: tempo-distributed-tls\n      secret:\n        secretName: tempo-distributed-tls\nquerier:\n  extraVolumeMounts:\n    - mountPath: /tls\n      name: tempo-distributed-tls\n  extraVolumes:\n    - name: tempo-distributed-tls\n      secret:\n        secretName: tempo-distributed-tls\nqueryFrontend:\n  extraVolumeMounts:\n    - mountPath: /tls\n      name: tempo-distributed-tls\n  extraVolumes:\n    - name: tempo-distributed-tls\n      secret:\n        secretName: tempo-distributed-tls\ntempo:\n  readinessProbe:\n    httpGet:\n      scheme: HTTPS\n  structuredConfig:\n    memberlist:\n      tls_ca_path: /tls/ca.crt\n      tls_cert_path: /tls/tls.crt\n      tls_enabled: true\n      tls_key_path: /tls/tls.key\n      tls_server_name: tempo-distributed.trace.svc.cluster.local\n    distributor:\n      receivers:\n        otlp:\n          protocols:\n            grpc:\n              tls:\n                ca_file: /tls/ca.crt\n                cert_file: /tls/tls.crt\n                key_file: /tls/tls.key\n    ingester_client:\n      grpc_client_config:\n        tls_ca_path: /tls/ca.crt\n        tls_cert_path: /tls/tls.crt\n        tls_enabled: true\n        tls_key_path: /tls/tls.key\n        tls_server_name: tempo-distributed.trace.svc.cluster.local\n    cache:\n      caches:\n        - memcached:\n            consistent_hash: true\n            host: tempo-distributed-memcached\n            service: memcached-client\n            timeout: 500ms\n            tls_ca_path: /tls/ca.crt\n            tls_cert_path: /tls/tls.crt\n            tls_enabled: true\n            tls_key_path: /tls/tls.key\n            tls_server_name: tempo-distributed.trace.svc.cluster.local\n          roles:\n            - parquet-footer\n            - bloom\n            - frontend-search\n    metrics_generator_client:\n      grpc_client_config:\n        tls_ca_path: /tls/ca.crt\n        tls_cert_path: /tls/tls.crt\n        tls_enabled: true\n        tls_key_path: /tls/tls.key\n        tls_server_name: tempo-distributed.trace.svc.cluster.local\n    querier:\n      frontend_worker:\n        grpc_client_config:\n          tls_ca_path: /tls/ca.crt\n          tls_cert_path: /tls/tls.crt\n          tls_enabled: true\n          tls_key_path: /tls/tls.key\n          tls_server_name: tempo-distributed.trace.svc.cluster.local\n    server:\n      grpc_tls_config:\n        cert_file: /tls/tls.crt\n        client_auth_type: VerifyClientCertIfGiven\n        client_ca_file: /tls/ca.crt\n        key_file: /tls/tls.key\n      http_tls_config:\n        cert_file: /tls/tls.crt\n        client_auth_type: VerifyClientCertIfGiven\n        client_ca_file: /tls/ca.crt\n        key_file: /tls/tls.key\ntraces:\n  otlp:\n    grpc:\n      enabled: true\n```\n\n----------------------------------------\n\nTITLE: Tempo Overrides Configuration\nDESCRIPTION: This YAML snippet defines the structure and available options for configuring overrides in Tempo. These overrides can be applied to control various aspects of Tempo's behavior, including ingestion, read operations, compaction, and metrics generation on a per-tenant basis.  The configuration uses nested blocks to define default settings and allows for customization via tenant-specific overrides.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n\"overrides:\\n\\n  # Global ingestion limits configurations\\n  defaults:\\n\\n    # Ingestion related overrides\\n    ingestion:\\n\\n      # Specifies whether the ingestion rate limits should be applied by each instance\\n      # of the distributor and ingester individually, or the limits are to be shared\\n      # across all instances. See the \\\"override strategies\\\" section for an example.\\n      [rate_strategy: <global|local> | default = local]\\n\\n      # Burst size (bytes) used in ingestion.\\n      # Results in errors like\\n      #   RATE_LIMITED: ingestion rate limit (20000000 bytes) exceeded while\\n      #   adding 10 bytes\\n      [burst_size_bytes: <int> | default = 20000000 (20MB) ]\\n\\n      # Per-user ingestion rate limit (bytes) used in ingestion.\\n      # Results in errors like\\n      #   RATE_LIMITED: ingestion rate limit (15000000 bytes) exceeded while\\n      #   adding 10 bytes\\n      [rate_limit_bytes: <int> | default = 15000000 (15MB) ]\\n\\n      # Maximum number of active traces per user, per ingester.\\n      # A value of 0 disables the check.\\n      # Results in errors like\\n      #    LIVE_TRACES_EXCEEDED: max live traces per tenant exceeded:\\n      #    per-user traces limit (local: 10000 global: 0 actual local: 1) exceeded\\n      # This override limit is used by the ingester.\\n      [max_traces_per_user: <int> | default = 10000]\\n\\n      # Maximum number of active traces per user, across the cluster.\\n      # A value of 0 disables the check.\\n      [max_global_traces_per_user: <int> | default = 0]\\n\\n      # Shuffle sharding shards used for this user. A value of 0 uses all ingesters in the ring.\\n      # Should not be lower than RF.\\n      [tenant_shard_size: <int> | default = 0]\\n\\n      # Maximum bytes any attribute can be for both keys and values.\\n      [max_attribute_bytes: <int> | default = 0]\\n      \\n      # Pad push requests with an artificial delay, if set push requests will be delayed to ensure\\n      # an average latency of at least artificial_delay.\\n      [artificial_delay: <duration> | default = 0ms]\\n\\n    # Read related overrides\\n    read:\\n      # Maximum size in bytes of a tag-values query. Tag-values query is used mainly\\n      # to populate the autocomplete dropdown. This limit protects the system from\\n      # tags with high cardinality or large values such as HTTP URLs or SQL queries.\\n      # This override limit is used by the ingester and the querier.\\n      # A value of 0 disables the limit.\\n      [max_bytes_per_tag_values_query: <int> | default = 1000000 (1MB) ]\\n\\n      # Maximum number of blocks to be inspected for a tag values query. Tag-values\\n      # query is used mainly to populate the autocomplete dropdown. This limit\\n      # protects the system from long block lists in the ingesters.\\n      # This override limit is used by the ingester and the querier.\\n      # A value of 0 disables the limit.\\n      [max_blocks_per_tag_values_query: <int> | default = 0 (disabled) ]\\n\\n      # Per-user max search duration. If this value is set to 0 (default), then max_duration\\n      #  in the front-end configuration is used.\\n      [max_search_duration: <duration> | default = 0s]\\n\\n      # Per-user max duration for metrics queries. If this value is set to 0 (default), then metrics max_duration\\n      #  in the front-end configuration is used.\\n      [max_metrics_duration: <duration> | default = 0s]\\n\\n    # Compaction related overrides\\n    compaction:\\n      # Per-user block retention. If this value is set to 0 (default),\\n      # then block_retention in the compactor configuration is used.\\n      [block_retention: <duration> | default = 0s]\\n      # Per-user compaction window. If this value is set to 0 (default),\\n      # then block_retention in the compactor configuration is used.\\n      [compaction_window: <duration> | default = 0s]\\n      # Allow compaction to be deactivated on a per-tenant basis. Default value\\n      # is false (compaction active). Useful to perform operations on the backend\\n      # that require compaction to be disabled for a period of time.\\n      [compaction_disabled: <bool> | default = false]\\n\\n    # Metrics-generator related overrides\\n    metrics_generator:\\n\\n      # Per-user configuration of the metrics-generator ring size. If set, the tenant will use a\\n      # ring with at most the given amount of instances. Shuffle sharding is used to spread out\\n      # smaller rings across all instances. If the value 0 or a value larger than the total amount\\n      # of instances is used, all instances will be included in the ring.\\n      #\\n      # Together with metrics_generator.max_active_series this can be used to control the total\\n      # amount of active series. The total max active series for a specific tenant will be:\\n      #   metrics_generator.ring_size * metrics_generator.max_active_series\\n      [ring_size: <int>]\\n\\n      # Per-user configuration of the metrics-generator processors. The following processors are\\n      # supported:\\n      #  - service-graphs\\n      #  - span-metrics\\n      #  - local-blocks\\n      [processors: <list of strings>]\\n\\n      # Maximum number of active series in the registry, per instance of the metrics-generator. A\\n      # value of 0 disables this check.\\n      # If the limit is reached, no new series will be added but existing series will still be\\n      # updated. The amount of limited series can be observed with the metric\\n      #   tempo_metrics_generator_registry_series_limited_total\\n      [max_active_series: <int>]\\n\\n      # Per-user configuration of the collection interval. A value of 0 means the global default is\\n      # used set in the metrics_generator config block.\\n      [collection_interval: <duration>]\\n\\n      # Per-user flag of the registry collection operation. If set, the registry will not be\\n      # collected and no samples will be exported from the metrics-generator. The metrics-generator\\n      # will still ingest spans and update its internal counters, including the amount of active\\n      # series. To disable metrics generation entirely, clear metrics_generator.processors for this\\n      # tenant.\\n      #\\n      # This setting is useful if you wish to test how many active series a tenant will generate, without\\n      # actually writing these metrics.\\n      [disable_collection: <bool> | default = false]\\n\\n      # Per-user configuration of the trace-id label name. This value will be used as name for the label to store the\\n      # trace ID of exemplars in generated metrics. If not set, the default value \\\"trace_id\\\" will be used.\\n      [trace_id_label_name: <string> | default = \\\"trace_id\\\"]\\n\\n      # This option only allows spans with end time that occur within the configured duration to be\\n      # considered in metrics generation.\\n      # This is to filter out spans that are outdated.\\n      [ingestion_time_range_slack: <duration>]\\n\\n      # Configures the histogram implementation to use for span metrics and\\n      # service graphs processors.  If native histograms are desired, the\\n      # receiver must be configured to ingest native histograms.\\n      [generate_native_histograms: <classic|native|both> | default = classic]\\n\\n      # Distributor -> metrics-generator forwarder related overrides\\n      forwarder:\\n        # Spans are stored in a queue in the distributor before being sent to the metrics-generators.\\n        # The length of the queue and the amount of workers pulling from the queue can be configured.\\n        [queue_size: <int> | default = 100]\\n        [workers: <int> | default = 2]\\n\\n      # Per processor configuration\\n      processor:\\n\\n        # Configuration for the service-graphs processor\\n        service_graphs:\\n          [histogram_buckets: <list of float>]\\n          [dimensions: <list of string>]\\n          [peer_attributes: <list of string>]\\n          [enable_client_server_prefix: <bool>]\\n          [enable_messaging_system_latency_histogram: <bool>]\\n\\n        # Configuration for the span-metrics processor\\n        span_metrics:\\n          [histogram_buckets: <list of float>]\\n          # Allowed keys for intrinsic dimensions are: service, span_name, span_kind, status_code, and status_message.\\n          [dimensions: <list of string>]\\n          [intrinsic_dimensions: <map string to bool>]\\n          [filter_policies: [\\n            [\\n              include/exclude:\\n                match_type: <string> # options: strict, regexp\\n                attributes:\\n                  - key: <string>\\n                    value: <any>\\n            ]\\n          ]\\n          [dimension_mappings: <list of map>]\\n          # Enable target_info metrics\\n          [enable_target_info: <bool>]\\n          # Drop specific resource labels from traces_target_info\\n          [target_info_excluded_dimensions: <list of string>]\\n\\n        # Configuration for the local-blocks processor\\n        local-blocks:\\n          [max_live_traces: <int>]\\n          [max_block_duration: <duration>]\\n          [max_block_bytes: <int>]\\n          [flush_check_period: <duration>]\\n          [trace_idle_period: <duration>]\\n          [complete_block_timeout: <duration>]\\n          [concurrent_blocks: <duration>]\\n          [filter_server_spans: <bool>]\\n\\n    # Generic forwarding configuration\\n\\n    # Per-user configuration of generic forwarder feature. Each forwarder in the list\\n    # must refer by name to a forwarder defined in the distributor.forwarders configuration.\\n    forwarders: <list of string>\\n\\n    # Global enforced overrides\\n    global:\\n      # Maximum size of a single trace in bytes. A value of 0 disables the size\\n      # check.\\n      # This limit is used in 3 places:\\n      #  - During search, traces will be skipped when they exceed this threshold.\\n      #  - During ingestion, traces that exceed this threshold will be refused.\\n      #  - During compaction, traces that exceed this threshold will be partially dropped.\\n      # During ingestion, exceeding the threshold results in errors like\\n      #    TRACE_TOO_LARGE: max size of trace (5000000) exceeded while adding 387 bytes\"\n```\n\n----------------------------------------\n\nTITLE: Defining an HTTP Collector in Go\nDESCRIPTION: This code defines a new HTTP collector in Golang that returns responses in a traditional HTTP format. It utilizes an asynchronous roundtripper and a type-aware combiner to amalgamate responses, making it straightforward to integrate with existing HTTP codebases.\nSOURCE: https://github.com/grafana/tempo/blob/main/modules/frontend/pipeline/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc NewHTTPCollector(next AsyncRoundTripper[*http.Response], combiner combiner.Combiner) http.RoundTripper\n```\n\nLANGUAGE: Go\nCODE:\n```\n\n\t\t// build and use roundtripper\n\t\tcombiner := combiner.NewTypedSearch(int(limit))\n\t\trt := pipeline.NewHTTPCollector(next, combiner)\n\n\t\treturn rt.RoundTrip(req)\n\n```\n\n----------------------------------------\n\nTITLE: Non-Null Attribute Check\nDESCRIPTION: Query to find traces where an attribute exists and is not null\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_33\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ .any_attribute != nil }\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection Multiplexing with cmux in Go\nDESCRIPTION: This example demonstrates how to use cmux to serve gRPC, HTTP, and Go RPC protocols on the same TCP port. It creates a main listener, configures protocol matching rules, creates protocol-specific servers, and starts them on their respective listeners.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/soheilhy/cmux/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Create the main listener.\nl, err := net.Listen(\"tcp\", \":23456\")\nif err != nil {\n\tlog.Fatal(err)\n}\n\n// Create a cmux.\nm := cmux.New(l)\n\n// Match connections in order:\n// First grpc, then HTTP, and otherwise Go RPC/TCP.\ngrpcL := m.Match(cmux.HTTP2HeaderField(\"content-type\", \"application/grpc\"))\nhttpL := m.Match(cmux.HTTP1Fast())\ntrpcL := m.Match(cmux.Any()) // Any means anything that is not yet matched.\n\n// Create your protocol servers.\ngrpcS := grpc.NewServer()\ngrpchello.RegisterGreeterServer(grpcS, &server{})\n\nhttpS := &http.Server{\n\tHandler: &helloHTTP1Handler{},\n}\n\ntrpcS := rpc.NewServer()\ntrpcS.Register(&ExampleRPCRcvr{})\n\n// Use the muxed listeners for your servers.\ngo grpcS.Serve(grpcL)\ngo httpS.Serve(httpL)\ngo trpcS.Accept(trpcL)\n\n// Start serving!\nm.Serve()\n```\n\n----------------------------------------\n\nTITLE: Querying Tempo API for Trace by ID\nDESCRIPTION: This snippet describes how to query the Tempo API to retrieve a trace by its ID, using specific endpoint and trace ID arguments. It also highlights optional parameters for specifying organization ID or API version.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/tempo_cli.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntempo-cli query api trace-id <api-endpoint> <trace-id>\n```\n\nLANGUAGE: bash\nCODE:\n```\ntempo-cli query api trace-id http://tempo:3200 f1cfe82a8eef933b\n```\n\n----------------------------------------\n\nTITLE: Calculating Maximum Duration by HTTP Target in TraceQL\nDESCRIPTION: This query computes the maximum duration for each http.target of all spans named 'GET /:endpoint' using the max_over_time() function in TraceQL.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/metrics-queries/functions.md#2025-04-17_snippet_6\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ name = \"GET /:endpoint\" } | max_over_time(duration) by (span.http.target)\n```\n\n----------------------------------------\n\nTITLE: Complex Filtering with Regex in Grafana Tempo (YAML)\nDESCRIPTION: This snippet illustrates a more complex filtering scenario using regex match type. It includes spans with 'resource.location' starting with 'eu-' and then excludes those with 'resource.tier' starting with 'dev-'.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/metrics-generator/span_metrics.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\nmetrics_generator:\n  processor:\n    span_metrics:\n      filter_policies:\n        - include:\n            match_type: regex\n            attributes:\n              - key: resource.location\n                value: eu-.*\n        - exclude:\n            match_type: regex\n            attributes:\n              - key: resource.tier\n                value: dev-.*\n```\n\n----------------------------------------\n\nTITLE: Complete YAML Configuration for Grafana Tempo\nDESCRIPTION: A comprehensive configuration file for Grafana Tempo that includes all available settings with default values. This covers server configurations, internal servers, distributors, ingester clients, metrics generators, queriers, and query frontends with their respective parameters for networking, security, and performance tuning.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/manifest.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntarget: all\nhttp_api_prefix: \"\"\nserver:\n    http_listen_network: tcp\n    http_listen_address: \"\"\n    http_listen_port: 3200\n    http_listen_conn_limit: 0\n    grpc_listen_network: tcp\n    grpc_listen_address: \"\"\n    grpc_listen_port: 9095\n    grpc_listen_conn_limit: 0\n    proxy_protocol_enabled: false\n    tls_cipher_suites: \"\"\n    tls_min_version: \"\"\n    http_tls_config:\n        cert: \"\"\n        key: null\n        client_ca: \"\"\n        cert_file: \"\"\n        key_file: \"\"\n        client_auth_type: \"\"\n        client_ca_file: \"\"\n    grpc_tls_config:\n        cert: \"\"\n        key: null\n        client_ca: \"\"\n        cert_file: \"\"\n        key_file: \"\"\n        client_auth_type: \"\"\n        client_ca_file: \"\"\n    register_instrumentation: true\n    report_grpc_codes_in_instrumentation_label_enabled: false\n    graceful_shutdown_timeout: 30s\n    http_server_read_timeout: 30s\n    http_server_read_header_timeout: 0s\n    http_server_write_timeout: 30s\n    http_server_idle_timeout: 2m0s\n    http_log_closed_connections_without_response_enabled: false\n    grpc_server_max_recv_msg_size: 16777216\n    grpc_server_max_send_msg_size: 16777216\n    grpc_server_max_concurrent_streams: 100\n    grpc_server_max_connection_idle: 2562047h47m16.854775807s\n    grpc_server_max_connection_age: 2562047h47m16.854775807s\n    grpc_server_max_connection_age_grace: 2562047h47m16.854775807s\n    grpc_server_keepalive_time: 2h0m0s\n    grpc_server_keepalive_timeout: 20s\n    grpc_server_min_time_between_pings: 10s\n    grpc_server_ping_without_stream_allowed: true\n    grpc_server_num_workers: 0\n    grpc_server_stats_tracking_enabled: true\n    grpc_server_recv_buffer_pools_enabled: false\n    log_format: logfmt\n    log_level: info\n    log_source_ips_enabled: false\n    log_source_ips_full: false\n    log_source_ips_header: \"\"\n    log_source_ips_regex: \"\"\n    log_request_headers: false\n    log_request_at_info_level_enabled: false\n    log_request_exclude_headers_list: \"\"\n    http_path_prefix: \"\"\n    cluster_validation:\n        label: \"\"\n        grpc:\n            enabled: false\n            soft_validation: false\ninternal_server:\n    http_listen_network: tcp\n    http_listen_address: \"\"\n    http_listen_port: 3101\n    http_listen_conn_limit: 0\n    grpc_listen_network: \"\"\n    grpc_listen_address: \"\"\n    grpc_listen_port: 0\n    grpc_listen_conn_limit: 0\n    proxy_protocol_enabled: false\n    tls_cipher_suites: \"\"\n    tls_min_version: \"\"\n    http_tls_config:\n        cert: \"\"\n        key: null\n        client_ca: \"\"\n        cert_file: \"\"\n        key_file: \"\"\n        client_auth_type: \"\"\n        client_ca_file: \"\"\n    grpc_tls_config:\n        cert: \"\"\n        key: null\n        client_ca: \"\"\n        cert_file: \"\"\n        key_file: \"\"\n        client_auth_type: \"\"\n        client_ca_file: \"\"\n    register_instrumentation: false\n    report_grpc_codes_in_instrumentation_label_enabled: false\n    graceful_shutdown_timeout: 30s\n    http_server_read_timeout: 30s\n    http_server_read_header_timeout: 0s\n    http_server_write_timeout: 30s\n    http_server_idle_timeout: 2m0s\n    http_log_closed_connections_without_response_enabled: false\n    grpc_server_max_recv_msg_size: 0\n    grpc_server_max_send_msg_size: 0\n    grpc_server_max_concurrent_streams: 0\n    grpc_server_max_connection_idle: 0s\n    grpc_server_max_connection_age: 0s\n    grpc_server_max_connection_age_grace: 0s\n    grpc_server_keepalive_time: 0s\n    grpc_server_keepalive_timeout: 0s\n    grpc_server_min_time_between_pings: 0s\n    grpc_server_ping_without_stream_allowed: false\n    grpc_server_num_workers: 0\n    grpc_server_stats_tracking_enabled: false\n    grpc_server_recv_buffer_pools_enabled: false\n    log_format: logfmt\n    log_level: info\n    log_source_ips_enabled: false\n    log_source_ips_full: false\n    log_source_ips_header: \"\"\n    log_source_ips_regex: \"\"\n    log_request_headers: false\n    log_request_at_info_level_enabled: false\n    log_request_exclude_headers_list: \"\"\n    http_path_prefix: \"\"\n    cluster_validation:\n        label: \"\"\n        grpc:\n            enabled: false\n            soft_validation: false\n    enable: false\ndistributor:\n    ring:\n        kvstore:\n            store: memberlist\n            prefix: collectors/\n            consul:\n                host: localhost:8500\n                acl_token: \"\"\n                http_client_timeout: 20s\n                consistent_reads: false\n                watch_rate_limit: 1\n                watch_burst_size: 1\n                cas_retry_delay: 1s\n            etcd:\n                endpoints: []\n                dial_timeout: 10s\n                max_retries: 10\n                tls_enabled: false\n                tls_cert_path: \"\"\n                tls_key_path: \"\"\n                tls_ca_path: \"\"\n                tls_server_name: \"\"\n                tls_insecure_skip_verify: false\n                tls_cipher_suites: \"\"\n                tls_min_version: \"\"\n                username: \"\"\n                password: \"\"\n            multi:\n                primary: \"\"\n                secondary: \"\"\n                mirror_enabled: false\n                mirror_timeout: 2s\n        heartbeat_period: 5s\n        heartbeat_timeout: 5m0s\n        instance_id: hostname\n        instance_interface_names:\n            - eth0\n            - en0\n        instance_port: 0\n        instance_addr: \"\"\n        enable_inet6: false\n    receivers: {}\n    override_ring_key: distributor\n    forwarders: []\n    usage:\n        cost_attribution:\n            max_cardinality: 10000\n            stale_duration: 15m0s\n    kafka_write_path_enabled: false\n    kafka_config:\n        address: \"\"\n        topic: \"\"\n        client_id: \"\"\n        dial_timeout: 0s\n        write_timeout: 0s\n        sasl_username: \"\"\n        sasl_password: \"\"\n        consumer_group: \"\"\n        consumer_group_offset_commit_interval: 0s\n        last_produced_offset_retry_timeout: 0s\n        auto_create_topic_enabled: false\n        auto_create_topic_default_partitions: 0\n        producer_max_record_size_bytes: 0\n        producer_max_buffered_bytes: 0\n        target_consumer_lag_at_startup: 0s\n        max_consumer_lag_at_startup: 0s\n    extend_writes: true\n    retry_after_on_resource_exhausted: 0s\n    max_attribute_bytes: 2048\ningester_client:\n    pool_config:\n        checkinterval: 15s\n        healthcheckenabled: true\n        healthchecktimeout: 1s\n        maxconcurrenthealthchecks: 0\n    remote_timeout: 5s\n    grpc_client_config:\n        max_recv_msg_size: 104857600\n        max_send_msg_size: 104857600\n        grpc_compression: snappy\n        rate_limit: 0\n        rate_limit_burst: 0\n        backoff_on_ratelimits: false\n        backoff_config:\n            min_period: 100ms\n            max_period: 10s\n            max_retries: 10\n        initial_stream_window_size: 63KiB1023B\n        initial_connection_window_size: 63KiB1023B\n        tls_enabled: false\n        tls_cert_path: \"\"\n        tls_key_path: \"\"\n        tls_ca_path: \"\"\n        tls_server_name: \"\"\n        tls_insecure_skip_verify: false\n        tls_cipher_suites: \"\"\n        tls_min_version: \"\"\n        connect_timeout: 5s\n        connect_backoff_base_delay: 1s\n        connect_backoff_max_delay: 5s\n        cluster_validation:\n            label: \"\"\nmetrics_generator_client:\n    pool_config:\n        checkinterval: 15s\n        healthcheckenabled: true\n        healthchecktimeout: 1s\n        maxconcurrenthealthchecks: 0\n    remote_timeout: 5s\n    grpc_client_config:\n        max_recv_msg_size: 104857600\n        max_send_msg_size: 104857600\n        grpc_compression: snappy\n        rate_limit: 0\n        rate_limit_burst: 0\n        backoff_on_ratelimits: false\n        backoff_config:\n            min_period: 100ms\n            max_period: 10s\n            max_retries: 10\n        initial_stream_window_size: 63KiB1023B\n        initial_connection_window_size: 63KiB1023B\n        tls_enabled: false\n        tls_cert_path: \"\"\n        tls_key_path: \"\"\n        tls_ca_path: \"\"\n        tls_server_name: \"\"\n        tls_insecure_skip_verify: false\n        tls_cipher_suites: \"\"\n        tls_min_version: \"\"\n        connect_timeout: 5s\n        connect_backoff_base_delay: 1s\n        connect_backoff_max_delay: 5s\n        cluster_validation:\n            label: \"\"\nquerier:\n    search:\n        query_timeout: 30s\n    trace_by_id:\n        query_timeout: 10s\n    metrics:\n        concurrent_blocks: 2\n        time_overlap_cutoff: 0.2\n    max_concurrent_queries: 20\n    frontend_worker:\n        frontend_address: \"\"\n        dns_lookup_duration: 10s\n        parallelism: 2\n        match_max_concurrent: true\n        id: \"\"\n        grpc_client_config:\n            max_recv_msg_size: 104857600\n            max_send_msg_size: 16777216\n            grpc_compression: snappy\n            rate_limit: 0\n            rate_limit_burst: 0\n            backoff_on_ratelimits: false\n            backoff_config:\n                min_period: 100ms\n                max_period: 1s\n                max_retries: 5\n            initial_stream_window_size: 0B\n            initial_connection_window_size: 0B\n            tls_enabled: false\n            tls_cert_path: \"\"\n            tls_key_path: \"\"\n            tls_ca_path: \"\"\n            tls_server_name: \"\"\n            tls_insecure_skip_verify: false\n            tls_cipher_suites: \"\"\n            tls_min_version: \"\"\n            connect_timeout: 0s\n            connect_backoff_base_delay: 0s\n            connect_backoff_max_delay: 0s\n            cluster_validation:\n                label: \"\"\n    shuffle_sharding_ingesters_enabled: false\n    shuffle_sharding_ingesters_lookback_period: 1h0m0s\n    query_relevant_ingesters: false\nquery_frontend:\n    max_outstanding_per_tenant: 2000\n    max_batch_size: 7\n    log_query_request_headers: \"\"\n    max_retries: 2\n    search:\n        concurrent_jobs: 1000\n        target_bytes_per_job: 104857600\n        default_result_limit: 20\n        max_result_limit: 0\n        max_duration: 168h0m0s\n        query_backend_after: 15m0s\n        query_ingesters_until: 30m0s\n```\n\n----------------------------------------\n\nTITLE: Slice Processing with Worker Pool\nDESCRIPTION: Demonstrates processing slice elements concurrently using a worker pool. Shows both the channel-based standard library approach and the iter.ForEach method from conc.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/sourcegraph/conc/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc process(values []int) {\n    feeder := make(chan int, 8)\n\n    var wg sync.WaitGroup\n    for i := 0; i < 10; i++ {\n        wg.Add(1)\n        go func() {\n            defer wg.Done()\n            for elem := range feeder {\n                handle(elem)\n            }\n        }()\n    }\n\n    for _, value := range values {\n        feeder <- value\n    }\n    close(feeder)\n    wg.Wait()\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc process(values []int) {\n    iter.ForEach(values, handle)\n}\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling Viper Configuration to Struct (Go)\nDESCRIPTION: This snippet demonstrates how to unmarshal Viper configuration into a Go struct. It shows the struct definition with mapstructure tags and the Unmarshal method usage.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_33\n\nLANGUAGE: go\nCODE:\n```\ntype config struct {\n\tPort int\n\tName string\n\tPathMap string `mapstructure:\"path_map\"`\n}\n\nvar C config\n\nerr := viper.Unmarshal(&C)\nif err != nil {\n\tt.Fatalf(\"unable to decode into struct, %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Building Search Pipelines with Go\nDESCRIPTION: This snippet demonstrates how to build search pipelines in Golang using asynchronous and synchronous components. It uses a building block architecture for constructing search request pipelines that integrate with HTTP and GRPC handlers. Dependencies include middleware and logging components accessible via Go packages.\nSOURCE: https://github.com/grafana/tempo/blob/main/modules/frontend/pipeline/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n\n\tsearchPipeline := pipeline.Build(\n\t\tasyncPipeline(cfg, newAsyncSearchSharder(reader, o, cfg.Search.Sharder, logger), logger),\n\t\t[]pipeline.Middleware{cacheWare, statusCodeWare, retryWare},\n\t\tnext)\n\n  http := newSearchHTTPHandler(cfg, searchPipeline, logger)\n  grpc := newSearchStreamingGRPCHandler(cfg, searchPipeline, apiPrefix, logger)\n\n```\n\n----------------------------------------\n\nTITLE: Querying HTTP method in TraceQL\nDESCRIPTION: This TraceQL query finds traces where the HTTP method is 'GET'. It demonstrates the use of scoped attributes (span.http.method) to query specific span attributes.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_20\n\nLANGUAGE: TraceQL\nCODE:\n```\n\"{ span.http.method = \\\"GET\\\" }\"\n```\n\n----------------------------------------\n\nTITLE: Using Exemplars in TraceQL Metrics Queries\nDESCRIPTION: Example query demonstrating how to enable exemplars in a TraceQL metrics query. This query uses the quantile_over_time function to calculate the 99th percentile of duration grouped by HTTP target, with exemplars enabled via the query hint.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/metrics-queries/_index.md#2025-04-17_snippet_0\n\nLANGUAGE: traceql\nCODE:\n```\n{ span:name = \"GET /:endpoint\" } | quantile_over_time(duration, .99) by (span.http.target) with (exemplars=true)\n```\n\n----------------------------------------\n\nTITLE: Configuring Tail Sampling in Grafana Alloy\nDESCRIPTION: This code snippet demonstrates how to configure tail sampling in Grafana Alloy using the otelcol.processor.tail_sampling component. It sets up OTLP receivers, defines sampling policies for error traces and long traces, and configures the OTLP exporter.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/grafana-alloy/tail-sampling/enable-tail-sampling.md#2025-04-17_snippet_0\n\nLANGUAGE: alloy\nCODE:\n```\notelcol.receiver.otlp \"default\" {\n  http {}\n  grpc {}\n\n  output {\n    traces  = [otelcol.processor.tail_sampling.policies.input]\n  }\n}\n\n// The Tail Sampling processor will use a set of policies to determine which received\n// traces to keep and send to Tempo.\notelcol.processor.tail_sampling \"policies\" {\n    // Total wait time from the start of a trace before making a sampling decision.\n    // Note that smaller time periods can potentially cause a decision to be made\n    // before the end of a trace has occurred.\n    decision_wait = \"30s\"\n\n    // The following policies follow a logical OR pattern, meaning that if any of the\n    // policies match, the trace will be kept. For logical AND, you can use the `and`\n    // policy. Every span of a trace is examined by each policy in turn. A match will\n    // cause a short-circuit.\n\n    // This policy defines that traces that contain errors should be kept.\n    policy {\n        // The name of the policy can be used for logging purposes.\n        name = \"sample-erroring-traces\"\n        // The type must match the type of policy to be used, in this case examining\n        // the status code of every span in the trace.\n        type = \"status_code\"\n        // This block determines the error codes that should match in order to keep\n        // the trace, in this case the OpenTelemetry 'ERROR' code.\n        status_code {\n            status_codes = [ \"ERROR\" ]\n        }\n    }\n\n    // This policy defines that only traces that are longer than 200ms in total\n    // should be kept.\n    policy {\n        // The name of the policy can be used for logging purposes.\n        name = \"sample-long-traces\"\n        // The type must match the policy to be used, in this case the total latency\n        // of the trace.\n        type = \"latency\"\n        // This block determines the total length of the trace in milliseconds.\n        latency {\n            threshold_ms = 200\n        }\n    }\n\n    // The output block forwards the kept traces onto the batch processor, which\n    // will marshall them for exporting to the Grafana OTLP gateway.\n    output {\n        traces = [otelcol.exporter.otlp.default.input]\n    }\n}\n\notelcol.exporter.otlp \"default\" {\n  client {\n    endpoint = env(\"OTLP_ENDPOINT\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Frontend in Tempo (YAML)\nDESCRIPTION: Example configuration for the Tempo query frontend, including setting the maximum query expression size to protect system stability.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nquery_frontend:\n  max_query_expression_size_bytes: 10000\n```\n\n----------------------------------------\n\nTITLE: Defining Tempo Response Protocol Buffers Schema\nDESCRIPTION: Protocol Buffer message definitions for Tempo's span metrics summary response structure. Includes definitions for SpanMetricsSummaryResponse, SpanMetricsSummary, and TraceQLStatic messages.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/metrics-summary.md#2025-04-17_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage SpanMetricsSummaryResponse {\n  repeated SpanMetricsSummary summaries = 1;\n}\n\nmessage SpanMetricsSummary {\n  uint64 spanCount = 1;\n  uint64 errorSpanCount = 2;\n  TraceQLStatic static = 3;\n  uint64 p99 = 4;\n  uint64 p95 = 5;\n  uint64 p90 = 6;\n  uint64 p50 = 7;\n}\n\nmessage TraceQLStatic {\n  int32 type = 1;\n  int64 n = 2;\n  double f = 3;\n  string s = 4;\n  bool b = 5;\n  uint64 d = 6;\n  int32 status = 7;\n  int32 kind = 8;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry/OpenTracing Bridge in Go\nDESCRIPTION: This snippet demonstrates how to set up the OpenTelemetry/OpenTracing bridge. It creates a bridge tracer and a wrapper tracer provider, then sets the wrapper as the global OpenTelemetry TracerProvider.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/bridge/opentracing/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"go.opentelemetry.io/otel\"\n\totelBridge \"go.opentelemetry.io/otel/bridge/opentracing\"\n)\n\nfunc main() {\n\t/* Create tracerProvider and configure OpenTelemetry ... */\n\t\n\totelTracer := tracerProvider.Tracer(\"tracer_name\")\n\t// Use the bridgeTracer as your OpenTracing tracer.\n\tbridgeTracer, wrapperTracerProvider := otelBridge.NewTracerPair(otelTracer)\n\t// Set the wrapperTracerProvider as the global OpenTelemetry\n\t// TracerProvider so instrumentation will use it by default.\n\totel.SetTracerProvider(wrapperTracerProvider)\n\n\t/* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Span Selection with Intrinsics\nDESCRIPTION: Examples of TraceQL queries using intrinsic fields to select spans, which are fundamental to spans and differentiated from custom attributes.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_17\n\nLANGUAGE: traceql\nCODE:\n```\n{ span:name = \"foo\" }\n{ event:name = \"foo\" }\n{ trace:id = \"1234\" }\n{ link:traceID = \"1234\" }\n```\n\n----------------------------------------\n\nTITLE: Executing Tempo CLI Commands\nDESCRIPTION: This snippet demonstrates the general syntax of executing commands using the Tempo CLI. The tool operates with a main command followed by various options and arguments, allowing users to perform specific operations related to Grafana Tempo's functionality.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/tempo_cli.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntempo-cli command [subcommand] [options] [arguments...]\n```\n\nLANGUAGE: bash\nCODE:\n```\ntempo-cli -h\ntempo-cli command [subcommand] -h\n```\n\n----------------------------------------\n\nTITLE: Status Code Tail Sampling Policy in Grafana Agent Static Mode\nDESCRIPTION: This YAML configuration snippet shows how to set up a status code-based tail sampling policy in Grafana Agent static mode. It samples traces where at least one span contains an OpenTelemetry Error status code.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/grafana-agent/tail-based-sampling.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntraces:\n  configs:\n    - name: default\n    ...\n    tail_sampling:\n      policies:\n        - type: status_code\n          status_code:\n            status_codes:\n              - ERROR\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Graphs in Grafana Alloy\nDESCRIPTION: This Alloy configuration enables service graphs, adds specific span attributes as Prometheus labels, and sets up the OTLP exporter. It configures the OTLP receiver, service graph connector, and OTLP exporter.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/grafana-alloy/service-graphs.md#2025-04-17_snippet_0\n\nLANGUAGE: alloy\nCODE:\n```\notelcol.receiver.otlp \"default\" {\n  grpc {}\n  http {}\n\n  output {\n    traces = [\n      otelcol.connector.servicegraph.default.input,\n      otelcol.exporter.otlp.default.input,\n    ]\n  }\n}\n\notelcol.connector.servicegraph \"default\" {\n  dimensions = [\"http.method\", \"http.target\"]\n  output {\n    metrics = [otelcol.exporter.otlp.default.input]\n  }\n}\n\notelcol.exporter.otlp \"default\" {\n  client {\n    endpoint = env(\"OTLP_ENDPOINT\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Automatic Logging with Loki Export in Alloy\nDESCRIPTION: This example configures logging for all trace roots, adding specific HTTP attributes to the log line, and then pushes logs to a local Loki instance. It uses otelcol.receiver.otlp, otelcol.connector.spanlogs, otelcol.exporter.loki, and loki.write components.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/grafana-alloy/automatic-logging.md#2025-04-17_snippet_1\n\nLANGUAGE: alloy\nCODE:\n```\notelcol.receiver.otlp \"default\" {\n  grpc {}\n  http {}\n\n  output {\n    traces = [otelcol.connector.spanlogs.default.input]\n  }\n}\n\notelcol.connector.spanlogs \"default\" {\n  roots           = true\n  span_attributes = [\"http.method\", \"http.target\"]\n\n  output {\n    logs = [otelcol.exporter.loki.default.input]\n  }\n}\n\notelcol.exporter.loki \"default\" {\n  forward_to = [loki.write.local.receiver]\n}\n\nloki.write \"local\" {\n  endpoint {\n    url = \"loki:3100\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Cross-Environment Traces\nDESCRIPTION: TraceQL query that finds traces that span across both production and staging environments, helpful for identifying misconfigurations and leaks between environments.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_6\n\nLANGUAGE: traceql\nCODE:\n```\n{ resource.deployment.environment = \"production\" } && { resource.deployment.environment = \"staging\" }\n```\n\n----------------------------------------\n\nTITLE: Finding Traces with Specific Environment and Service Details\nDESCRIPTION: A more detailed TraceQL query that filters traces based on service namespace, name, deployment environment, and operation name.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_2\n\nLANGUAGE: traceql\nCODE:\n```\n{\n  resource.service.namespace = \"ecommerce\" &&\n  resource.service.name = \"frontend\" &&\n  resource.deployment.environment = \"production\" &&\n  name = \"POST /api/orders\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP HTTP Exporter in OpenTelemetry Collector\nDESCRIPTION: Example configuration for an OTLP HTTP exporter with authentication, TLS, custom headers, gzip compression, and cookie handling enabled. This demonstrates common client-side HTTP configuration options.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/config/confighttp/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexporter:\n  otlphttp:\n    endpoint: otelcol2:55690\n    auth:\n      authenticator: some-authenticator-extension\n    tls:\n      ca_file: ca.pem\n      cert_file: cert.pem\n      key_file: key.pem\n    headers:\n      test1: \"value1\"\n      \"test 2\": \"value 2\"\n    compression: gzip\n    compression_params:\n      level: 1\n    cookies:\n      enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Trace Storage Backend in YAML\nDESCRIPTION: Defines the storage configuration for traces in Tempo, including options for GCS, S3, and Azure backends. It specifies various settings for each backend such as bucket names, authentication, and performance tuning.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# Storage configuration for traces\nstorage:\n\n    trace:\n\n        # The storage backend to use\n        # Should be one of \"gcs\", \"s3\", \"azure\" or \"local\" (only supported in the monolithic mode)\n        # CLI flag -storage.trace.backend\n        [backend: <string>]\n\n        # GCS configuration. Will be used only if value of backend is \"gcs\"\n        # Check the GCS doc within this folder for information on GCS specific permissions.\n        gcs:\n\n            # Bucket name in gcs\n            # Tempo requires a bucket to maintain a top-level object structure. You can use prefix option with this to nest all objects within a shared bucket.\n            # Example: \"bucket_name: tempo\"\n            [bucket_name: <string>]\n\n            # optional.\n            # Prefix name in gcs\n            # Tempo has this additional option to support a custom prefix to nest all the objects withing a shared bucket.\n            [prefix: <string>]\n\n            # Buffer size for reads. Default is 10MB\n            # Example: \"chunk_buffer_size: 5_000_000\"\n            [chunk_buffer_size: <int>]\n\n            # Optional\n            # Api endpoint override\n            # Example: \"endpoint: https://storage.googleapis.com/storage/v1/\"\n            [endpoint: <string>]\n\n            # Optional. Default is false.\n            # Example: \"insecure: true\"\n            # Set to true to disable authentication and certificate checks on gcs requests\n            [insecure: <bool>]\n\n            # The number of list calls to make in parallel to the backend per instance.\n            # Adjustments here will impact the polling time, as well as the number of Go routines.\n            # Default is 3\n            [list_blocks_concurrency: <int>]\n\n            # Optional. Default is 0 (disabled)\n            # Example: \"hedge_requests_at: 500ms\"\n            # If set to a non-zero value a second request will be issued at the provided duration. Recommended to\n            # be set to p99 of GCS requests to reduce long tail latency. This setting is most impactful when\n            # used with queriers and has minimal to no impact on other pieces.\n            [hedge_requests_at: <duration>]\n\n            # Optional. Default is 2\n            # Example: \"hedge_requests_up_to: 2\"\n            # The maximum number of requests to execute when hedging. Requires hedge_requests_at to be set.\n            [hedge_requests_up_to: <int>]\n\n            # Optional\n            # Example: \"object_cache_control: \"no-cache\"\"\n            # A string to specify the behavior with respect to caching of the objects stored in GCS.\n            # See the GCS documentation for more detail: https://cloud.google.com/storage/docs/metadata\n            [object_cache_control: <string>]\n\n            # Optional\n            # Example: \"object_metadata: {'key': 'value'}\"\n            # A map key value strings for user metadata to store on the GCS objects.\n            # See the GCS documentation for more detail: https://cloud.google.com/storage/docs/metadata\n            [object_metadata: <map[string]string>]\n\n\n        # S3 configuration. Will be used only if value of backend is \"s3\"\n        # Check the S3 doc within this folder for information on s3 specific permissions.\n        s3:\n\n            # Bucket name in s3\n            # Tempo requires a bucket to maintain a top-level object structure. You can use prefix option with this to nest all objects within a shared bucket.\n            [bucket: <string>]\n\n            # optional.\n            # Prefix name in s3\n            # Tempo has this additional option to support a custom prefix to nest all the objects withing a shared bucket.\n            [prefix: <string>]\n\n            # api endpoint to connect to. use AWS S3 or any S3 compatible object storage endpoint.\n            # Example: \"endpoint: s3.dualstack.us-east-2.amazonaws.com\"\n            [endpoint: <string>]\n\n            # The number of list calls to make in parallel to the backend per instance.\n            # Adjustments here will impact the polling time, as well as the number of Go routines.\n            # Default is 3\n            [list_blocks_concurrency: <int>]\n\n            # optional.\n            # By default the region is inferred from the endpoint,\n            # but is required for some S3-compatible storage engines.\n            # Example: \"region: us-east-2\"\n            [region: <string>]\n\n            # optional.\n            # access key when using static credentials.\n            [access_key: <string>]\n\n            # optional.\n            # secret key when using static credentials.\n            [secret_key: <string>]\n\n            # optional.\n            # session token when using static credentials.\n            [session_token: <string>]\n\n            # optional.\n            # enable if endpoint is http\n            [insecure: <bool>]\n\n            # optional.\n            # Path to the client certificate file.\n            [tls_cert_path: <string>]\n\n            # optional.\n            # Path to the private client key file.\n            [tls_key_path: <string>]\n\n            # optional.\n            # Path to the CA certificate file.\n            [tls_ca_path: <string>]\n\n            # optional.\n            # Path to the CA certificate file.\n            [tls_server_name: <string>]\n\n            # optional.\n            # Set to true to disable verification of a TLS endpoint. The default value is false.\n            [tls_insecure_skip_verify: <bool>]\n\n            # optional.\n            # Override the default cipher suite list, separated by commas.\n            [tls_cipher_suites: <string>]\n\n            # optional.\n            # Override the default minimum TLS version. The default value is VersionTLS12. Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13\n            [tls_min_version: <string>]\n\n            # optional.\n            # enable to use path-style requests.\n            [forcepathstyle: <bool>]\n\n            # Optional.\n            # Enable to use dualstack endpoint for DNS resolution.\n            # Check out the (S3 documentation on dualstack endpoints)[https://docs.aws.amazon.com/AmazonS3/latest/userguide/dual-stack-endpoints.html]\n            [enable_dual_stack: <bool>]\n\n            # Optional. Default is 0\n            # Example: \"bucket_lookup_type: 0\"\n            # options: 0: BucketLookupAuto, 1: BucketLookupDNS, 2: BucketLookupPath\n            # See the [S3 documentation on virtual-hosted–style and path-style](https://docs.aws.amazon.com/AmazonS3/latest/userguide/VirtualHosting.html#path-style-access) for more detail.\n            # See the [Minio-API documentation on opts.BucketLookup](https://github.com/minio/minio-go/blob/master/docs/API.md#newendpoint-string-opts-options-client-error)] for more detail.\n            # Notice: ignore this option if `forcepathstyle` is set true, this option allow expose minio's sdk configure.\n            [bucket_lookup_type: <int> | default = 0]\n\n            # Optional. Default is 0 (disabled)\n            # Example: \"hedge_requests_at: 500ms\"\n            # If set to a non-zero value a second request will be issued at the provided duration. Recommended to\n            # be set to p99 of S3 requests to reduce long tail latency. This setting is most impactful when\n            # used with queriers and has minimal to no impact on other pieces.\n            [hedge_requests_at: <duration>]\n\n            # Optional. Default is 2\n            # Example: \"hedge_requests_up_to: 2\"\n            # The maximum number of requests to execute when hedging. Requires hedge_requests_at to be set.\n            [hedge_requests_up_to: <int>]\n\n            # Optional\n            # Example: \"tags: {'key': 'value'}\"\n            # A map of key value strings for user tags to store on the S3 objects. This helps set up filters in S3 lifecycles.\n            # See the [S3 documentation on object tagging](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-tagging.html) for more detail.\n            [tags: <map[string]string>]\n\n\n            [sse: <map[string]string>]:\n              # Optional\n              # Example: type: SSE-S3\n              # Type of encryption to use with s3 bucket, either SSE-KMS or SSE-S3\n              [type: string]:\n\n              # Optional\n              # Example: kms_key_id: \"1234abcd-12ab-34cd-56ef-1234567890ab\"\n              # the kms key id is the identification of the key in an account or region\n              kms_key_id:\n              # Optional\n              # Example: kms_encryption_context: \"encryptionContext\": {\"department\": \"10103.0\"}\n              # KMS Encryption Context used for object encryption. It expects JSON formatted string\n              kms_encryption_context:\n\n        # azure configuration. Will be used only if value of backend is \"azure\"\n        # EXPERIMENTAL\n        azure:\n\n            # store traces in this container.\n            # Tempo requires bucket to  maintain a top-level object structure. You can use prefix option to nest all objects within a shared bucket\n            [container_name: <string>]\n\n            # optional.\n            # Prefix for azure.\n            # Tempo has this additional option to support a custom prefix to nest all the objects withing a shared bucket.\n            [prefix: <string>]\n\n            # optional.\n            # Azure endpoint to use, defaults to Azure global(core.windows.net) for other\n            # regions this needs to be changed e.g Azure China(blob.core.chinacloudapi.cn),\n            # Azure German(blob.core.cloudapi.de), Azure US Government(blob.core.usgovcloudapi.net).\n            [endpoint_suffix: <string>]\n\n            # Name of the azure storage account\n            [storage_account_name: <string>]\n\n            # optional.\n            # access key when using access key credentials.\n            [storage_account_key: <string>]\n\n            # optional.\n            # use Azure Managed Identity to access Azure storage.\n            [use_managed_identity: <bool>]\n\n            # optional.\n```\n\n----------------------------------------\n\nTITLE: Configuring Filter Policies in YAML\nDESCRIPTION: Filter policy configuration for including or excluding spans based on attribute matching\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nexclude:\n  match_type: \"regex\"\n  attributes:\n    - key: \"resource.service.name\"\n      value: \"unknown_service:myservice\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\ninclude:\n  match_type: \"strict\"\n  attributes:\n    - key: \"foo.bar\"\n      value: \"baz\"\n```\n\n----------------------------------------\n\nTITLE: Structural Operators - Finding Downstream Errors\nDESCRIPTION: TraceQL query using the descendant operator to find traces where the frontend service or any of its downstream services have an error status.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_9\n\nLANGUAGE: traceql\nCODE:\n```\n{ resource.service.name=\"frontend\" } >> { status = error }\n```\n\n----------------------------------------\n\nTITLE: Accessing Prometheus Metrics via HTTP\nDESCRIPTION: Endpoint to retrieve Tempo service metrics in Prometheus exposition format.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/_index.md#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /metrics\n```\n\n----------------------------------------\n\nTITLE: Sorting Row Groups with parquet.GenericBuffer in Go\nDESCRIPTION: This snippet demonstrates how to use parquet.GenericBuffer to sort rows before writing them to a Parquet file. It includes creating a buffer with sorting columns, writing rows, sorting the buffer, and writing the sorted rows to a file.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/parquet-go/parquet-go/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype RowType struct { FirstName, LastName string }\n\nbuffer := parquet.NewGenericBuffer[RowType](\n    parquet.SortingRowGroupConfig(\n        parquet.SortingColumns(\n            parquet.Ascending(\"LastName\"),\n            parquet.Ascending(\"FistName\"),\n        ),\n    ),\n)\n\nbuffer.Write([]RowType{\n    {FirstName: \"Luke\", LastName: \"Skywalker\"},\n    {FirstName: \"Han\", LastName: \"Solo\"},\n    {FirstName: \"Anakin\", LastName: \"Skywalker\"},\n})\n\nsort.Sort(buffer)\n\nwriter := parquet.NewGenericWriter[RowType](output)\n_, err := parquet.CopyRows(writer, buffer.Rows())\nif err != nil {\n    ...\n}\nif err := writer.Close(); err != nil {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Filter Processor with Multiple Conditions\nDESCRIPTION: Example showing how to configure the filter processor with various conditions for traces, metrics, and logs using OTTL expressions.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/processor/filterprocessor/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n  filter/ottl:\n    error_mode: ignore\n    traces:\n      span:\n        - 'attributes[\"container.name\"] == \"app_container_1\"'\n        - 'resource.attributes[\"host.name\"] == \"localhost\"'\n        - 'name == \"app_3\"'\n      spanevent:\n        - 'attributes[\"grpc\"] == true'\n        - 'IsMatch(name, \".*grpc.*\")'\n    metrics:\n      metric:\n          - 'name == \"my.metric\" and resource.attributes[\"my_label\"] == \"abc123\"'\n          - 'type == METRIC_DATA_TYPE_HISTOGRAM'\n      datapoint:\n          - 'metric.type == METRIC_DATA_TYPE_SUMMARY'\n          - 'resource.attributes[\"service.name\"] == \"my_service_name\"'\n    logs:\n      log_record:\n        - 'IsMatch(body, \".*password.*\")'\n        - 'severity_number < SEVERITY_NUMBER_WARN'\n```\n\n----------------------------------------\n\nTITLE: Final Error Span Query\nDESCRIPTION: Query to find last error in cascading error chain\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_40\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ status = error } !< { status = error }\n```\n\n----------------------------------------\n\nTITLE: Verifying Root Cause with TraceQL\nDESCRIPTION: Query to find error spans excluding known INSERT statement issues, used to verify if there are other types of database operations causing internal server errors.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/introduction/solutions-with-traces/traces-diagnose-errors.md#2025-04-17_snippet_2\n\nLANGUAGE: traceql\nCODE:\n```\n{ resource.service.name = \"mythical-requester\" && span.http.status_code = 500 } >> { status = error && span.db.statement !~ \"INSERT.*\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Trace Data Structure in Parquet Message Format\nDESCRIPTION: A comprehensive schema definition for storing trace data in Parquet format. The schema includes trace-level metadata, resource information, scope details, and span data with their respective attributes, events, and links.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/schema.md#2025-04-17_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Trace {\n  required binary TraceID;\n  required binary TraceIDText (STRING);\n  required int64 StartTimeUnixNano (INTEGER(64,false));\n  required int64 EndTimeUnixNano (INTEGER(64,false));\n  required int64 DurationNano (INTEGER(64,false));\n  required binary RootServiceName (STRING);\n  required binary RootSpanName (STRING);\n  required group rs (LIST) {\n    repeated group list {\n      required group element {\n        required group Resource {\n          required group Attrs (LIST) {\n            repeated group list {\n              required group element {\n                required binary Key (STRING);\n                optional binary Value (STRING);\n                optional int64 ValueInt (INTEGER(64,true));\n                optional double ValueDouble;\n                optional boolean ValueBool;\n                optional binary ValueKVList (STRING);\n                optional binary ValueArray (STRING);\n              }\n            }\n          }\n          required binary ServiceName (STRING);\n          optional binary Cluster (STRING);\n          optional binary Namespace (STRING);\n          optional binary Pod (STRING);\n          optional binary Container (STRING);\n          optional binary K8sClusterName (STRING);\n          optional binary K8sNamespaceName (STRING);\n          optional binary K8sPodName (STRING);\n          optional binary K8sContainerName (STRING);\n          required group DedicatedAttributes {\n            optional binary String01 (STRING);\n            optional binary String02 (STRING);\n            optional binary String03 (STRING);\n            optional binary String04 (STRING);\n            optional binary String05 (STRING);\n            optional binary String06 (STRING);\n            optional binary String07 (STRING);\n            optional binary String08 (STRING);\n            optional binary String09 (STRING);\n            optional binary String10 (STRING);\n          }\n        }\n        required group ss (LIST) {\n          repeated group list {\n            required group element {\n              required group Scope {\n                required binary Name (STRING);\n                required binary Version (STRING);\n              }\n              required group Spans (LIST) {\n                repeated group list {\n                  required group element {\n                    required binary SpanID;\n                    required binary ParentSpanID;\n                    required int32 ParentID (INTEGER(32,true));\n                    required int32 NestedSetLeft (INTEGER(32,true));\n                    required int32 NestedSetRight (INTEGER(32,true));\n                    required binary Name (STRING);\n                    required int64 Kind (INTEGER(64,true));\n                    required binary TraceState (STRING);\n                    required int64 StartTimeUnixNano (INTEGER(64,false));\n                    required int64 DurationNano (INTEGER(64,false));\n                    required int64 StatusCode (INTEGER(64,true));\n                    required binary StatusMessage (STRING);\n                    required group Attrs (LIST) {\n                      repeated group list {\n                        required group element {\n                          required binary Key (STRING);\n                          optional binary Value (STRING);\n                          optional int64 ValueInt (INTEGER(64,true));\n                          optional double ValueDouble;\n                          optional boolean ValueBool;\n                          optional binary ValueKVList (STRING);\n                          optional binary ValueArray (STRING);\n                        }\n                      }\n                    }\n                    required int32 DroppedAttributesCount (INTEGER(32,true));\n                    required group Events (LIST) {\n                      repeated group list {\n                        required group element {\n                          required int64 TimeUnixNano (INTEGER(64,false));\n                          required binary Name (STRING);\n                          required group Attrs (LIST) {\n                            repeated group list {\n                              required group element {\n                                required binary Key (STRING);\n                                required binary Value;\n                              }\n                            }\n                          }\n                          required int32 DroppedAttributesCount (INTEGER(32,true));\n                        }\n                      }\n                    }\n                    required int32 DroppedEventsCount (INTEGER(32,true));\n                    required binary Links;\n                    required int32 DroppedLinksCount (INTEGER(32,true));\n                    optional binary HttpMethod (STRING);\n                    optional binary HttpUrl (STRING);\n                    optional int64 HttpStatusCode (INTEGER(64,true));\n                    required group DedicatedAttributes {\n                      optional binary String01 (STRING);\n                      optional binary String02 (STRING);\n                      optional binary String03 (STRING);\n                      optional binary String04 (STRING);\n                      optional binary String05 (STRING);\n                      optional binary String06 (STRING);\n                      optional binary String07 (STRING);\n                      optional binary String08 (STRING);\n                      optional binary String09 (STRING);\n                      optional binary String10 (STRING);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Error Rate by Service and Span Name in TraceQL\nDESCRIPTION: This query demonstrates how to calculate the rate of errors by service and span name using the rate() function in TraceQL.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/metrics-queries/functions.md#2025-04-17_snippet_0\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ status = error } | rate() by (resource.service.name, name)\n```\n\n----------------------------------------\n\nTITLE: Setting Override Values in Viper\nDESCRIPTION: Examples of setting override values that take precedence over other configuration sources.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nviper.Set(\"Verbose\", true)\nviper.Set(\"LogFile\", LogFile)\nviper.Set(\"host.port\", 5899)   // set subset\n```\n\n----------------------------------------\n\nTITLE: Using Miniredis in Go Unit Tests\nDESCRIPTION: Complete example demonstrating how to use Miniredis in Go unit tests, including setting keys, checking values, and handling TTL operations.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alicebob/miniredis/v2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    ...\n    \"github.com/alicebob/miniredis/v2\"\n    ...\n)\n\nfunc TestSomething(t *testing.T) {\n\ts := miniredis.RunT(t)\n\n\t// Optionally set some keys your code expects:\n\ts.Set(\"foo\", \"bar\")\n\ts.HSet(\"some\", \"other\", \"key\")\n\n\t// Run your code and see if it behaves.\n\t// An example using the redigo library from \"github.com/gomodule/redigo/redis\":\n\tc, err := redis.Dial(\"tcp\", s.Addr())\n\t_, err = c.Do(\"SET\", \"foo\", \"bar\")\n\n\t// Optionally check values in redis...\n\tif got, err := s.Get(\"foo\"); err != nil || got != \"bar\" {\n\t\tt.Error(\"'foo' has the wrong value\")\n\t}\n\t// ... or use a helper for that:\n\ts.CheckGet(t, \"foo\", \"bar\")\n\n\t// TTL and expiration:\n\ts.Set(\"foo\", \"bar\")\n\ts.SetTTL(\"foo\", 10*time.Second)\n\ts.FastForward(11 * time.Second)\n\tif s.Exists(\"foo\") {\n\t\tt.Fatal(\"'foo' should not have existed anymore\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Request Rate with TraceQL in Grafana Tempo\nDESCRIPTION: This TraceQL metrics query calculates the rate of spans per second for each service in a specific Kubernetes namespace, focusing on server-side spans. It filters spans based on namespace and kind, then applies the rate function grouped by service name.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/metrics-queries/solve-problems-metrics-queries.md#2025-04-17_snippet_1\n\nLANGUAGE: traceql\nCODE:\n```\n{ resource.service.namespace=\"ditl-demo-prod\" && kind=server } | rate() by (resource.service.name)\n```\n\n----------------------------------------\n\nTITLE: Finding Traces with Regex Matching\nDESCRIPTION: TraceQL query demonstrating how to use regular expressions to match attributes and find traces with specific HTTP status codes.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_16\n\nLANGUAGE: traceql\nCODE:\n```\n{ resource.deployment.environment =~ \"prod-.*\" && span.http.status_code = 200 }\n```\n\n----------------------------------------\n\nTITLE: Configuring Compactor in Tempo (YAML)\nDESCRIPTION: Configuration options for the Tempo compactor, including retention settings, compaction windows, and buffer sizes.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncompactor:\n    [disabled: <bool>]\n    ring:\n        kvstore: <KVStore config>\n            [store: <string> | default = memberlist]\n            [prefix: <string> | default = \"collectors/\" ]\n    compaction:\n        [block_retention: <duration>]\n        [compacted_block_retention: <duration>]\n        [compaction_window: <duration>]\n        [max_block_bytes: <int>]\n        [retention_concurrency: <int>]\n        [max_time_per_tenant: <duration>]\n        [compaction_cycle: <duration>]\n        [v2_in_buffer_bytes: <int>]\n        [v2_out_buffer_bytes: <int>]\n        [v2_prefetch_traces_count: <int>]\n```\n\n----------------------------------------\n\nTITLE: Querying Search Tags V2 API Endpoint\nDESCRIPTION: Example of querying the search tags V2 endpoint to retrieve all discovered tag names across different scopes including resource, span, intrinsic, link and event tags.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/_index.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nGET /api/v2/search/tags?scope=<resource|span|intrinsic>\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -G -s http://localhost:3200/api/v2/search/tags  | jq\n```\n\n----------------------------------------\n\nTITLE: Purego Basic Usage Example - Calling C Library Functions from Go\nDESCRIPTION: Demonstrates how to use Purego to dynamically load and call C library functions on macOS and Linux. The example shows loading the system library and calling the 'puts' function without Cgo.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/ebitengine/purego/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"runtime\"\n\n\t\"github.com/ebitengine/purego\"\n)\n\nfunc getSystemLibrary() string {\n\tswitch runtime.GOOS {\n\tcase \"darwin\":\n\t\treturn \"/usr/lib/libSystem.B.dylib\"\n\tcase \"linux\":\n\t\treturn \"libc.so.6\"\n\tdefault:\n\t\tpanic(fmt.Errorf(\"GOOS=%s is not supported\", runtime.GOOS))\n\t}\n}\n\nfunc main() {\n\tlibc, err := purego.Dlopen(getSystemLibrary(), purego.RTLD_NOW|purego.RTLD_GLOBAL)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar puts func(string)\n\tpurego.RegisterLibFunc(&puts, libc, \"puts\")\n\tputs(\"Calling C from Go without Cgo!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Average Duration Query\nDESCRIPTION: Query to find traces with average span duration over 20ms\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_42\n\nLANGUAGE: TraceQL\nCODE:\n```\navg(duration) > 20ms\n```\n\n----------------------------------------\n\nTITLE: Querying Traces with TraceQL in Tempo\nDESCRIPTION: Example TraceQL query demonstrating how to filter traces by resource cluster attribute\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-0.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{ resource.cluster =\"foo\" }\n```\n\n----------------------------------------\n\nTITLE: Pushing OTLP Spans to Tempo using curl\nDESCRIPTION: This curl command sends a POST request to push OTLP spans to Tempo. It includes span details such as trace ID, span ID, start and end times, and custom attributes. The user needs to update the start and end times before using.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/pushing-spans-with-http.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H 'Content-Type: application/json' http://localhost:4318/v1/traces -d '\n{\n\t\"resourceSpans\": [{\n    \t\"resource\": {\n        \t\"attributes\": [{\n            \t\"key\": \"service.name\",\n            \t\"value\": {\n                \t\"stringValue\": \"my.service\"\n            \t}\n        \t}]\n    \t},\n    \t\"scopeSpans\": [{\n        \t\"scope\": {\n            \t\"name\": \"my.library\",\n            \t\"version\": \"1.0.0\",\n            \t\"attributes\": [{\n                \t\"key\": \"my.scope.attribute\",\n                \t\"value\": {\n                    \t\"stringValue\": \"some scope attribute\"\n                \t}\n            \t}]\n        \t},\n        \t\"spans\": [\n        \t{\n            \t\"traceId\": \"5B8EFFF798038103D269B633813FC700\",\n            \t\"spanId\": \"EEE19B7EC3C1B100\",\n            \t\"name\": \"I am a span!\",\n            \t\"startTimeUnixNano\": 1689969302000000000,\n            \t\"endTimeUnixNano\": 1689970000000000000,\n            \t\"kind\": 2,\n            \t\"attributes\": [\n            \t{\n                \t\"key\": \"my.span.attr\",\n                \t\"value\": {\n                    \t\"stringValue\": \"some value\"\n                \t}\n            \t}]\n        \t}]\n    \t}]\n\t}]\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Exporter with gRPC Settings in YAML\nDESCRIPTION: Example YAML configuration for an OTLP exporter with authentication, TLS, and custom headers. It demonstrates setting up secure connections with certificate files and adding custom headers to requests.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/config/configgrpc/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  otlp:\n    endpoint: otelcol2:55690\n    auth:\n      authenticator: some-authenticator-extension\n    tls:\n      ca_file: ca.pem\n      cert_file: cert.pem\n      key_file: key.pem\n    headers:\n      test1: \"value1\"\n      \"test 2\": \"value 2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Frontend Parameters in YAML\nDESCRIPTION: This YAML snippet outlines configurable parameters for the Query Frontend in Grafana Tempo. It includes settings for retries, response consumers, maximum outstanding requests per tenant, and other performance-related configurations. The syntax supports various data types such as integers, booleans, and durations.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# Query Frontend configuration block\nquery_frontend:\n\n    # number of times to retry a request sent to a querier\n    # (default: 2)\n    [max_retries: <int>]\n\n    # The number of goroutines dedicated to consuming, unmarshalling and recombining responses per request. This\n    # same parameter is used for all endpoints.\n    # (default: 10)\n    [response_consumers: <int>]\n\n    # Maximum number of outstanding requests per tenant per frontend; requests beyond this error with HTTP 429.\n    # (default: 2000)\n    [max_outstanding_per_tenant: <int>]\n\n    # The number of jobs to batch together in one http request to the querier. Set to 1 to\n    # disable.\n    # (default: 7)\n    [max_batch_size: <int>]\n\n    # Enable multi-tenant queries.\n    # If enabled, queries can be federated across multiple tenants.\n    # The tenant IDs involved need to be specified separated by a '|'\n    # character in the 'X-Scope-OrgID' header.\n    # note: this is no-op if cluster doesn't have `multitenancy_enabled: true`\n    # (default: true)\n    [multi_tenant_queries_enabled: <bool>]\n\n    # Comma-separated list of request header names to include in query logs. Applies\n    # to both query stats and slow queries logs.\n    [log_query_request_headers: <string> | default = \"\"]\n\n    # Set a maximum timeout for all api queries at which point the frontend will cancel queued jobs\n    # and return cleanly. HTTP will return a 503 and GRPC will return a context canceled error.\n    # This timeout impacts all http and grpc streaming queries as part of the Tempo api surface such as\n    # search, metrics summary, tags and tag values lookups, etc.\n    # Generally it is preferred to let the client cancel context. This is a failsafe to prevent a client\n    # from imposing more work on Tempo than desired.\n    # (default: 0)\n    [api_timeout: <duration>]\n\n    # A list of regular expressions for refusing matching requests, these will apply for every request regardless of the endpoint.\n    [url_deny_list: <list of strings> | default = <empty list>]]\n\n    # Max allowed TraceQL expression size, in bytes. queries bigger then this size will be rejected.\n    # (default: 128 KiB)\n    [max_query_expression_size_bytes: <int> | default = 131072]]\n\n```\n\n----------------------------------------\n\nTITLE: Complete Grafana Alloy Configuration for Tempo Metrics Scraping\nDESCRIPTION: This YAML configuration provides a complete setup for Grafana Alloy to scrape Tempo metrics, including Kubernetes service discovery, relabeling, and remote writing to a Mimir instance.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/monitor/set-up-monitoring.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nalloy:\n  configMap:\n  create: true\n  content: |-\n    // Scrape Prometheus metrics for Tempo.\n    prometheus.scrape \"tempo\" {\n      // Use Kubernetes discovery to find the relevant pods to scrape.\n      targets    = discovery.relabel.k8s_pods.output\n      // Forward to the Prometheus relabeling component.\n      forward_to = [prometheus.relabel.tempo.receiver]\n    }\n\n    // Determine how to select pods to scrape.\n    discovery.kubernetes \"k8s_pods\" {\n      // Only scrape pods.\n      role = \"pod\"\n      selectors {\n        // Only scrape pods with a particular selector.\n        role = \"pod\"\n        // The selector is any component that belongs to Tempo.\n        label = \"app.kubernetes.io/name=tempo\"\n      }\n    }\n\n    // Relabel data from Kubernetes discovery.\n    discovery.relabel \"k8s_pods\" {\n      // Relabel from targets scraped by the discovery selection.\n      targets = discovery.kubernetes.k8s_pods.targets\n\n      // Create new namespace label based on the discovered kubernetes namespace.\n      rule {\n        source_labels = [\"__meta_kubernetes_namespace\"]\n        action = \"replace\"\n        regex = \"(.*)\"\n        replacement = \"$1\"\n        target_label = \"namespace\"\n      }\n\n      // Create new component label based on the discovered kubernetes component.\n      rule {\n        source_labels = [\"__meta_kubernetes_pod_label_app_kubernetes_io_component\"]\n        action = \"replace\"\n        regex = \"(.*)\"\n        replacement = \"$1\"\n        target_label = \"k8s_component_name\"\n      }\n\n      // Create new cluster label based on the discovered kubernetes instance.\n      rule {\n        source_labels = [\"__meta_kubernetes_pod_label_app_kubernetes_io_instance\"]\n        action = \"replace\"\n        regex = \"(.*)\"\n        replacement = \"$1\"\n        target_label = \"cluster\"\n      }\n    }\n\n    // Relabel data from Prometheus scraping.\n    prometheus.relabel \"tempo\" {\n      // Replace the existing job label with one comprised of the namespace and component.\n      rule {\n        source_labels = [\"namespace\", \"k8s_component_name\"]\n        action = \"replace\"\n        regex = \"(.*?);(.*?)\"\n        replacement = \"$1/$2\"\n        target_label = \"job\"\n      }\n\n\n      // Send the metrics to the Prometheus remote write component.\n      forward_to = [prometheus.remote_write.tempo.receiver]\n    }\n\n    // Remote write the metrics to a Prometheus compatible endpoint (in this case Mimir).\n    prometheus.remote_write \"tempo\" {\n      endpoint {\n        url = \"https://mimir-cluster.distributor.mimir.svc.cluster.local:9001/api/v1/push\"\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Generating Traces with OpenTelemetry telemetrygen\nDESCRIPTION: These Bash commands use OpenTelemetry telemetrygen to generate tracing data and send it to Grafana Alloy or directly to Tempo.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/set-up-test-app.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntelemetrygen traces --otlp-insecure --rate 20 --duration 5s --otlp-endpoint grafana-alloy.grafana-alloy.svc.cluster.local:4317\n```\n\nLANGUAGE: bash\nCODE:\n```\ntelemetrygen traces --otlp-insecure --rate 20 --duration 5s --otlp-endpoint tempo-cluster-distributor.tempo.svc.cluster.local:4317\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward services/grafana-alloy 4317:4317 --namespace grafana-alloy\n```\n\n----------------------------------------\n\nTITLE: Rate calculation by instrumentation name in TraceQL\nDESCRIPTION: This TraceQL query calculates the rate of traces, grouped by the instrumentation name, for a service named 'foo'. It combines filtering by resource attributes with rate calculation for analysis.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_26\n\nLANGUAGE: TraceQL\nCODE:\n```\n\"{ resource.service.name = \\\"foo\\\" } | rate() by (instrumentation:name)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Options in YAML\nDESCRIPTION: Configuration options for storage including compression, encoding, and parquet-specific settings\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nv2_index_downsample_bytes: <uint64> | default = 1MiB\nv2_encoding: <string> | default = zstd\nsearch_encoding: <string> | default = snappy\nsearch_page_size_bytes: <int> | default = 1MiB\nparquet_row_group_size_bytes: <int> | default = 100MB\nparquet_dedicated_columns: <list of columns>\n    - name: <string>\n      type: <string>\n      scope: <string>\n```\n\n----------------------------------------\n\nTITLE: Querying Request Rate with PromQL in Grafana Mimir\nDESCRIPTION: This PromQL query calculates the per-second rate of calls for each service in a specific Kubernetes namespace, focusing on server-side spans. It uses the 'traces_spanmetrics_calls_total' metric generated by Tempo's metrics-generator.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/metrics-queries/solve-problems-metrics-queries.md#2025-04-17_snippet_0\n\nLANGUAGE: promql\nCODE:\n```\nsum by (service_name)(rate(traces_spanmetrics_calls_total{service_namespace=\"ditl-demo-prod\", span_kind=\"SPAN_KIND_SERVER\"}[2m]))\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Deployment with Jsonnet\nDESCRIPTION: This snippet demonstrates how to configure and deploy Grafana using Jsonnet. It imports the Grafana library and sets up necessary configurations, including a Prometheus datasource and a Grafana namespace. The expected input includes configuration parameters for Grafana and Prometheus, and the output is a structured Grafana deployment expressed in Jsonnet.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/grafana/jsonnet-libs/grafana/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Jsonnet\nCODE:\n```\nlocal grafana = import '../grafana.libsonnet';\nlocal k = import 'k.libsonnet';\n{\n  config+:: {\n    prometheus_url: 'http://prometheus',\n  },\n\n  namespace: k.core.v1.namespace.new('grafana'),\n\n  prometheus_datasource:: grafana.datasource.new('prometheus', $.config.prometheus_url, type='prometheus', default=true),\n\n  grafana: grafana\n           + grafana.withAnonymous()\n           + grafana.addFolder('Example')\n           + grafana.addDashboard('simple', (import 'dashboard-simple.libsonnet'), folder='Example')\n           + grafana.addDatasource('prometheus', $.prometheus_datasource),\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OTEL Collector Headers for Multi-tenancy\nDESCRIPTION: Configuration snippet for setting up the X-Scope-OrgID header in OTEL Collector for multi-tenant support.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/manage-advanced-systems/multitenancy.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  otlp:\n    headers:\n      x-scope-orgid: foo-bar-baz\n```\n\n----------------------------------------\n\nTITLE: Calculating Error Rate Using TraceQL Metrics Query\nDESCRIPTION: This TraceQL query demonstrates the new metrics capabilities by calculating the rate of error spans from a specific service named 'foo'. The query filters spans by service name and error status, then applies the rate() function to produce a spans-per-second metric.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-4.md#2025-04-17_snippet_0\n\nLANGUAGE: traceql\nCODE:\n```\n{ resource.service.name = \"foo\" && status = error } | rate()\n```\n\n----------------------------------------\n\nTITLE: Using Core Logger in Go with Zap\nDESCRIPTION: Shows usage of Zap's core Logger for maximum performance and type safety. This approach supports only structured logging with strongly typed Field values.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.uber.org/zap/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlogger, _ := zap.NewProduction()\ndefer logger.Sync()\nlogger.Info(\"failed to fetch URL\",\n  // Structured context as strongly typed Field values.\n  zap.String(\"url\", url),\n  zap.Int(\"attempt\", 3),\n  zap.Duration(\"backoff\", time.Second),\n)\n```\n\n----------------------------------------\n\nTITLE: Parsing XML from a String in Go\nDESCRIPTION: Example showing how to parse an XML document from a string using a string reader.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/antchfx/xmlquery/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ns := `<?xml version=\"1.0\" encoding=\"utf-8\"?><rss version=\"2.0\"></rss>`\ndoc, err := xmlquery.Parse(strings.NewReader(s))\n```\n\n----------------------------------------\n\nTITLE: Finding Traces with Unscoped Attributes\nDESCRIPTION: TraceQL query showing how to find traces with a specific unscoped attribute and span attribute value combination.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_13\n\nLANGUAGE: traceql\nCODE:\n```\n{ .deployment.environment = \"production\" && span.http.status_code = 200 }\n```\n\n----------------------------------------\n\nTITLE: Initializing Global Tracer (Singleton)\nDESCRIPTION: This code snippet demonstrates how to initialize the global OpenTracing tracer using `opentracing.SetGlobalTracer`. It imports the `opentracing` package and a specific tracing implementation, then sets the global tracer to a new instance of the tracing implementation. This is commonly done in the `main()` function.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n    import \"github.com/opentracing/opentracing-go\"\n    import \".../some_tracing_impl\"\n\n    func main() {\n        opentracing.SetGlobalTracer(\n            // tracing impl specific:\n            some_tracing_impl.New(...),\n        )\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Working with Multiple Viper Instances (Go)\nDESCRIPTION: This snippet shows how to create and use multiple Viper instances in an application. It demonstrates creating two separate Viper instances and setting default values for each.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_36\n\nLANGUAGE: go\nCODE:\n```\nx := viper.New()\ny := viper.New()\n\nx.SetDefault(\"ContentDir\", \"content\")\ny.SetDefault(\"ContentDir\", \"foobar\")\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Using topk Function in TraceQL\nDESCRIPTION: This example shows how to use the topk function to return the 5 highest results of a rate calculation grouped by service name in TraceQL.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/metrics-queries/functions.md#2025-04-17_snippet_14\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ } | rate() by(resource.service.name) | topk(5)\n```\n\n----------------------------------------\n\nTITLE: Calculating Error Rate by HTTP Route in TraceQL\nDESCRIPTION: This query calculates the rate of erroring spans in the service 'foo' broken down by HTTP route using the rate() function and by() operator in TraceQL.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/metrics-queries/functions.md#2025-04-17_snippet_2\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ resource.service.name = \"foo\" && status = error } | rate() by (span.http.route)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zone-Aware Ingesters in Grafana Tempo\nDESCRIPTION: YAML configuration for enabling zone-aware ingestion in Grafana Tempo. These settings are placed in the _config field of the JSonnet configuration to control zone-aware replication behavior and migration settings.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/manage-advanced-systems/zone-aware-ingesters.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# use the following fields in _config field of JSonnet config, to enable zone-aware ingesters.\n    multi_zone_ingester_enabled: false,\n    multi_zone_ingester_migration_enabled: false,\n    multi_zone_ingester_replicas: 0,\n    multi_zone_ingester_max_unavailable: 25,\n```\n\n----------------------------------------\n\nTITLE: Basic Expr Integration Example in Go\nDESCRIPTION: A simple example demonstrating how to integrate Expr into a Go application. It shows environment setup, expression compilation, and execution with string formatting.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/expr-lang/expr/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/expr-lang/expr\"\n)\n\nfunc main() {\n\tenv := map[string]interface{}{\n\t\t\"greet\":   \"Hello, %v!\",\n\t\t\"names\":   []string{\"world\", \"you\"},\n\t\t\"sprintf\": fmt.Sprintf,\n\t}\n\n\tcode := `sprintf(greet, names[0])`\n\n\tprogram, err := expr.Compile(code, expr.Env(env))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\toutput, err := expr.Run(program, env)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Println(output)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Memberlist for Tempo Cluster Coordination in YAML\nDESCRIPTION: This YAML block configures the Memberlist settings for Tempo cluster coordination. It includes options for node naming, gossip intervals, cluster joining, and network settings.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nmemberlist:\n    [node_name: <string> | default = \"\"]\n    [randomize_node_name: <boolean> | default = true]\n    [stream_timeout: <duration> | default = 10s]\n    [retransmit_factor: <int> | default = 2]\n    [pull_push_interval: <duration> | default = 30s]\n    [gossip_interval: <duration> | default = 1s]\n    [gossip_nodes: <int> | default = 2]\n    [gossip_to_dead_nodes_time: <duration> | default = 30s]\n    [dead_node_reclaim_time: <duration> | default = 0s]\n    [join_members: <list of string> | default = ]\n    [min_join_backoff: <duration> | default = 1s]\n    [max_join_backoff: <duration> | default = 1m]\n    [max_join_retries: <int> | default = 10]\n    [abort_if_cluster_join_fails: <boolean> | default = true]\n    [rejoin_interval: <duration> | default = 0s]\n    [left_ingesters_timeout: <duration> | default = 5m]\n    [leave_timeout: <duration> | default = 5s]\n    [bind_addr: <list of string> | default = [\"0.0.0.0\"] ]\n    [bind_port: <int> | default = 7946]\n    [packet_dial_timeout: <duration> | default = 5s]\n    [packet_write_timeout: <duration> | default = 5s]\n```\n\n----------------------------------------\n\nTITLE: Binding pflag FlagSet to Viper (Go)\nDESCRIPTION: Example demonstrating how to bind an entire set of command-line flags (pflag.FlagSet) to Viper. This allows accessing all flag values through Viper rather than directly from pflag.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npflag.Int(\"flagname\", 1234, \"help message for flagname\")\n\npflag.Parse()\nviper.BindPFlags(pflag.CommandLine)\n\ni := viper.GetInt(\"flagname\") // retrieve values from viper instead of pflag\n```\n\n----------------------------------------\n\nTITLE: Documentation Header in Markdown\nDESCRIPTION: YAML frontmatter and markdown header defining the document structure and metadata for the Tempo configuration manifest.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/manifest.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Manifest\ndescription: This manifest lists of all Tempo options and their defaults.\nweight: 110\n---\n[//]: # 'THIS FILE IS GENERATED AUTOMATICALLY BY go run pkg/docsgen/generate_manifest.go'\n[//]: # 'DO NOT EDIT THIS FILE DIRECTLY'\n\n# Manifest\n```\n\n----------------------------------------\n\nTITLE: Calculating Percentile of Duration by HTTP Target in TraceQL\nDESCRIPTION: This example computes the 99th percentile of duration grouped by http.target for spans named 'GET /:endpoint' using the quantile_over_time() function in TraceQL.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/metrics-queries/functions.md#2025-04-17_snippet_11\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ name = \"GET /:endpoint\" } | quantile_over_time(duration, .99) by (span.http.target)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Basic LRU Cache with golang-lru in Go\nDESCRIPTION: This snippet demonstrates the creation and usage of a basic LRU cache using the `golang-lru` library. It initializes a cache with a maximum size of 128 entries, adds 256 entries to it, and then checks if the cache length is as expected (128). The `lru.New[int, any](128)` creates the cache with int keys and any type of value.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/golang-lru/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/hashicorp/golang-lru/v2\"\n)\n\nfunc main() {\n\tl, _ := lru.New[int, any](128)\n\tfor i := 0; i < 256; i++ {\n\t\tl.Add(i, nil)\n\t}\n\tif l.Len() != 128 {\n\t\tpanic(fmt.Sprintf(\"bad len: %v\", l.Len()))\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Traces with Array Values\nDESCRIPTION: TraceQL query that demonstrates how to search for a value within an array attribute, which is supported in vParquet4 and later versions.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_7\n\nLANGUAGE: traceql\nCODE:\n```\n{ span.foo = \"bar\" }\n```\n\n----------------------------------------\n\nTITLE: Binding Environment Variables in Viper (Go)\nDESCRIPTION: Example of setting up environment variable handling in Viper. It demonstrates how to set an environment variable prefix, bind a key to an environment variable, and then access the value from the environment.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nSetEnvPrefix(\"spf\") // will be uppercased automatically\nBindEnv(\"id\")\n\nos.Setenv(\"SPF_ID\", \"13\") // typically done outside of the app\n\nid := Get(\"id\") // 13\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Server Settings in Tempo YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure TLS settings for the Tempo server, including cipher suites, minimum TLS version, and certificate settings for both gRPC and HTTP.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/network/tls.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  tls_cipher_suites: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n  tls_min_version: VersionTLS12\n\n  grpc_tls_config:\n    cert_file: /tls/tls.crt\n    key_file: /tls/tls.key\n    client_auth_type: VerifyClientCertIfGiven\n    client_ca_file: /tls/ca.crt\n  http_tls_config:\n    cert_file: /tls/tls.crt\n    key_file: /tls/tls.key\n    client_auth_type: VerifyClientCertIfGiven\n    client_ca_file: /tls/ca.crt\n```\n\n----------------------------------------\n\nTITLE: Configuring Tempo with YAML\nDESCRIPTION: YAML configuration for Tempo, including server settings, distributor options, compactor settings, metrics generator configuration, and storage backend configuration using Amazon S3. This configuration file needs to be customized with S3 credentials.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/linux.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  http_listen_port: 3200\n\ndistributor:\n  receivers:\n      otlp:\n        protocols:\n          http:\n          grpc:\n\ncompactor:\n  compaction:\n    block_retention: 48h                # configure total trace retention here\n\nmetrics_generator:\n  registry:\n    external_labels:\n      source: tempo\n      cluster: linux-microservices\n  storage:\n    path: /var/tempo/generator/wal\n    remote_write:\n    - url: http://localhost:9090/api/v1/write\n      send_exemplars: true\n\nstorage:\n  trace:\n    backend: s3\n    s3:\n      endpoint: s3.us-east-1.amazonaws.com\n      bucket: grafana-traces-data\n      forcepathstyle: true\n      enable_dual_stack: false\n      # set to false if endpoint is https\n      insecure: true\n      access_key: # TODO - Add S3 access key\n      secret_key: # TODO - Add S3 secret key\n    wal:\n      path: /var/tempo/wal         # where to store the wal locally\n    local:\n      path: /var/tempo/blocks\noverrides:\n  defaults:\n    metrics_generator:\n      processors: [service-graphs, span-metrics]\n```\n\n----------------------------------------\n\nTITLE: Finding Traces with Regular Expressions on Arrays\nDESCRIPTION: TraceQL query showing how to use regular expressions to match multiple values in arrays and how to get all values with a wildcard pattern.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_8\n\nLANGUAGE: traceql\nCODE:\n```\n{span.http.request.header.Accept=~\".*\"}\n```\n\n----------------------------------------\n\nTITLE: Displaying Tempo Block Storage Layout\nDESCRIPTION: Illustrates the file structure of how Tempo stores trace data blocks in the backend. It shows the hierarchy of bucket, tenant, block, and various data files.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/architecture.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<bucketname> / <tenantID> / <blockID> / <meta.json>\n                                      / <index>\n                                      / <data>\n                                      / <bloom_0>\n                                      / <bloom_1>\n                                        ...\n                                      / <bloom_n>\n```\n\n----------------------------------------\n\nTITLE: Deploying Trace Generation Job\nDESCRIPTION: This YAML defines a Kubernetes job that generates sample traces and sends them to the Tempo distributor using the OpenTelemetry protocol.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/quickstart.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl apply -f - <<EOF\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: tracegen\nspec:\n  template:\n    spec:\n      containers:\n        - name: tracegen\n          image: ghcr.io/open-telemetry/opentelemetry-collector-contrib/tracegen:latest\n          command:\n            - \"./tracegen\"\n          args:\n            - -otlp-endpoint=tempo-simplest-distributor:4317\n            - -otlp-insecure\n            - -duration=30s\n            - -workers=1\n      restartPolicy: Never\n  backoffLimit: 4\nEOF\n```\n\n----------------------------------------\n\nTITLE: Tracing Error Chain with TraceQL\nDESCRIPTION: Query to find error spans that are descendants of spans from the mythical-requester service with status code 500, helping identify downstream service issues.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/introduction/solutions-with-traces/traces-diagnose-errors.md#2025-04-17_snippet_1\n\nLANGUAGE: traceql\nCODE:\n```\n{ resource.service.name = \"mythical-requester\" && span.http.status_code = 500 } >> { status = error }\n```\n\n----------------------------------------\n\nTITLE: Deploying Intro to MLTP Application\nDESCRIPTION: These Bash commands clone the Intro to MLTP repository and deploy the application to generate test data for Tempo, Mimir, Loki, and Pyroscope.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/set-up-test-app.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git+ssh://github.com/grafana/intro-to-mltp\ncp intro-to-mltp/k8s/mythical/* ~/tmp/intro-to-mltp-k8s\ncd intro-to-mltp/k8s/mythical\nkubectl apply -f mythical-beasts-service.yaml,mythical-beasts-persistentvolumeclaim.yaml,mythical-beasts-deployment.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Generator for Grafana Tempo (YAML)\nDESCRIPTION: This YAML configuration block defines the structure and options for the metrics generator component in Grafana Tempo. It includes settings for ring management, service graph and span metric processing, local block handling, metrics registry, and storage options.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Metrics-generator configuration block\nmetrics_generator:\n\n    # Ring configuration\n    ring:\n      kvstore: <KVStore config>\n        [store: <string> | default = memberlist]\n        [prefix: <string> | default = \"collectors/\"]\n\n      # Period at which to heartbeat the instance\n      # 0 disables heartbeat altogether\n      [heartbeat_period: <duration> | default = 5s]\n\n      # The heartbeat timeout, after which, the instance is skipped.\n      # 0 disables timeout.\n      [heartbeat_timeout: <duration> | default = this.heartbeat_period * 3]\n\n      # Our Instance ID to register as in the ring.\n      [instance_id: <string> | default = os.Hostname()]\n\n      # Name of the network interface to read address from.\n      [instance_interface_names: <list of string> | default = [\"eth0\", \"en0\"] ]\n\n      # Our advertised IP address in the ring, (usefull if the local ip =/= the external ip)\n      # Will default to the configured `instance_id` ip address,\n      # if unset, will fallback to ip reported by `instance_interface_names`\n      # (Effected by `enable_inet6`)\n      [instance_addr: <string> | default = auto(instance_id, instance_interface_names)]\n\n      # Our advertised port in the ring\n      # Defaults to the configured GRPC listing port\n      [instance_port: <int> | default = auto(listen_port)]\n\n      # Enables the registering of ipv6 addresses in the ring.\n      [enable_inet6: <bool> | default = false]\n\n    # Processor-specific configuration\n    processor:\n\n        service_graphs:\n\n            # Wait is the value to wait for an edge to be completed.\n            [wait: <duration> | default = 10s]\n\n            # MaxItems is the amount of edges that will be stored in the store.\n            [max_items: <int> | default = 10000]\n\n            # Workers is the amount of workers that will be used to process the edges\n            [workers: <int> | default = 10]\n\n            # Buckets for the latency histogram in seconds.\n            [histogram_buckets: <list of float> | default = 0.1, 0.2, 0.4, 0.8, 1.6, 3.2, 6.4, 12.8]\n\n            # Additional dimensions to add to the metrics. Dimensions are searched for in the\n            # resource and span attributes and are added to the metrics if present.\n            [dimensions: <list of string>]\n\n            # Prefix additional dimensions with \"client_\" and \"_server\". Adds two labels\n            # per additional dimension instead of one.\n            [enable_client_server_prefix: <bool> | default = false]\n\n            # If enabled another histogram will be produced for interactions over messaging systems middlewares\n            # If this feature is relevant over long time ranges (high latencies) - consider increasing\n            # `wait` value for this processor.\n            [enable_messaging_system_latency_histogram: <bool> | default = false]\n\n            # Attributes that will be used to create a peer edge\n            # Attributes are searched in the order they are provided\n            # See: https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.18.0\n            # Example: [\"peer.service\", \"db.name\", \"db.system\", \"host.name\"]\n            [peer_attributes: <list of string> | default = [\"peer.service\", \"db.name\", \"db.system\"] ]\n\n            # Attribute Key to multiply span metrics\n            # Note that the attribute name is searched for in both\n            # resouce and span level attributes\n            [span_multiplier_key: <string> | default = \"\"]\n\n            # Enables additional labels for services and virtual nodes.\n            [enable_virtual_node_label: <bool> | default = false]\n\n        span_metrics:\n\n            # Buckets for the latency histogram in seconds.\n            [histogram_buckets: <list of float> | default = 0.002, 0.004, 0.008, 0.016, 0.032, 0.064, 0.128, 0.256, 0.512, 1.024, 2.048, 4.096, 8.192, 16.384]\n\n            # Configure intrinsic dimensions to add to the metrics. Intrinsic dimensions are taken\n            # directly from the respective resource and span properties.\n            intrinsic_dimensions:\n                # Whether to add the name of the service the span is associated with.\n                [service: <bool> | default = true]\n                # Whether to add the name of the span.\n                [span_name: <bool> | default = true]\n                # Whether to add the span kind describing the relationship between spans.\n                [span_kind: <bool> | default = true]\n                # Whether to add the span status code.\n                [status_code: <bool> | default = true]\n                # Whether to add a status message. Important note: The span status message may\n                # contain arbitrary strings and thus have a very high cardinality.\n                [status_message: <bool> | default = false]\n\n            # Additional dimensions to add to the metrics along with the intrinsic dimensions.\n            # Dimensions are searched for in the resource and span attributes and are added to\n            # the metrics if present.\n            [dimensions: <list of string>]\n\n            # Custom labeling mapping\n            dimension_mappings: <list of label mappings>\n                # The new label name\n              - [name: <string>]\n                # The actual attributes that will make the value of the new label\n                [source_labels: <list of strings>]\n                # The separator used to join multiple `source_labels`\n                [join: <string>]\n\n            # Enable traces_target_info metrics\n            [enable_target_info: <bool> | default = false]\n\n            # Attribute Key to multiply span metrics\n            # Note that the attribute name is searched for in both\n            # resouce and span level attributes\n            [span_multiplier_key: <string> | default = \"\"]\n\n            # List of policies that will be applied to spans for inclusion or exclusion.\n            [filter_policies: <list of filter policies config> | default = []]\n\n            # Drop specific labels from `traces_target_info` metrics\n            [target_info_excluded_dimensions: <list of string>]\n\n        local_blocks:\n\n            # Block configuration\n            block: <Block config>\n\n            # Search configuration\n            search: <Search config>\n\n            # How often to run the flush loop to cut idle traces and blocks\n            [flush_check_period: <duration> | default = 10s]\n\n            # A trace is considered complete after this period of inactivity (no new spans recieved)\n            [trace_idle_period: <duration> | default = 10s]\n\n            # Maximum duration which the head block can be appended to, before cutting it.\n            [max_block_duration: <duration> | default = 1m]\n\n            # Maximum size of the head block, before cutting it\n            [max_block_bytes: <uint64> | default = 500000000]\n\n            # Duration to keep blocks in the ingester after they have been flushed\n            [complete_block_timeout: <duration> | default = 1h]\n\n            # Maximum amount of live traces\n            # If this value is exceeded, traces will be dropped with reason: `live_traces_exceeded`\n            # A value of 0 disables this limit.\n            [max_live_traces: <uint64>]\n\n            # Whether server spans should be filtered in or not.\n            # If enabled, only parent spans or spans with the SpanKind of `server` will be retained\n            [filter_server_spans: <bool> | default = true]\n\n            # Whether server spans should be flushed to storage.\n            # Setting `flush_to_storage` to `true` ensures that metrics blocks are flushed to storage so TraceQL metrics queries against historical data.\n            [flush_to_storage: <bool> | default = false]\n\n            # Number of blocks that are allowed to be processed concurrently.\n            [concurrent_blocks: <uint> | default = 10]\n\n            # A tuning factor that controls whether the trace-level timestamp columns are used in a metrics query.\n            # If a block overlaps the time window by less than this ratio, then the columns are skipped.\n            # A value of 1.0 will always load the columns, and 0.0 will never load any.\n            [time_overlap_cutoff: <float64> | default = 0.2]\n\n    # Registry configuration\n    registry:\n\n        # Interval to collect metrics and remote write them.\n        [collection_interval: <duration> | default = 15s]\n\n        # Interval after which a series is considered stale and will be deleted from the registry.\n        # Once a metrics series is deleted, it won't be emitted anymore, keeping active series low.\n        [stale_duration: <duration> | default = 15m]\n\n        # A list of labels that will be added to all generated metrics.\n        [external_labels: <map>]\n\n        # If set, the tenant ID will added as label with the given label name to all generated metrics.\n        [inject_tenant_id_as: <string>]\n\n        # The maximum length of label names. Label names exceeding this limit will be truncated.\n        [max_label_name_length: <int> | default = 1024]\n\n        # The maximum length of label values. Label values exceeding this limit will be truncated.\n        [max_label_value_length: <int> | default = 2048]\n\n    # Configuration block for the Write Ahead Log (WAL)\n    traces_storage: <WAL config>\n\n      # Path to store the WAL files.\n      # Must be set.\n      # Example: \"/var/tempo/generator/traces\"\n      [path: <string> | default = \"\"]\n\n    # Storage and remote write configuration\n    storage:\n\n        # Path to store the WAL. Each tenant will be stored in its own subdirectory.\n        path: <string>\n\n        # Configuration for the Prometheus Agent WAL\n        # https://github.com/prometheus/prometheus/blob/v2.51.2/tsdb/agent/db.go#L62-L84\n        wal: <prometheus agent WAL config>\n\n        # How long to wait when flushing samples on shutdown\n        [remote_write_flush_deadline: <duration> | default = 1m]\n\n        # Whether to add X-Scope-OrgID header in remote write requests\n```\n\n----------------------------------------\n\nTITLE: Configuring Span Metrics Generation in Grafana Alloy\nDESCRIPTION: This snippet demonstrates how to configure the otelcol.connector.spanmetrics component to generate metrics from spans. It sets up an OTLP receiver, configures span metrics with custom dimensions and histogram buckets, and exports the generated metrics to an OTLP endpoint.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/grafana-alloy/span-metrics.md#2025-04-17_snippet_0\n\nLANGUAGE: alloy\nCODE:\n```\notelcol.receiver.otlp \"default\" {\n  http {}\n  grpc {}\n\n  output {\n    traces  = [\n        otelcol.connector.spanmetrics.default.input,\n        otelcol.exporter.otlp.default.input\n    ]\n  }\n}\n\notelcol.connector.spanmetrics \"default\" {\n  dimension {\n    name = \"http.method\"\n    default = \"GET\"\n  }\n\n  dimension {\n    name = \"http.target\"\n  }\n\n  aggregation_temporality = \"DELTA\"\n\n  histogram {\n    explicit {\n      buckets = [\"50ms\", \"100ms\", \"250ms\", \"1s\", \"5s\", \"10s\"]\n    }\n  }\n\n  metrics_flush_interval = \"15s\"\n\n  namespace = \"traces_spanmetrics\"\n\n  output {\n    metrics = [otelcol.exporter.otlp.default.input]\n  }\n}\n\notelcol.exporter.otlp \"default\" {\n  client {\n    endpoint = env(\"OTLP_ENDPOINT\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving XML Elements with XPath in Go\nDESCRIPTION: The GetXML function retrieves XML elements from a string using XPath expressions. It takes a target string and an XPath query as input, returning the selected XML elements as a string.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_28\n\nLANGUAGE: Go\nCODE:\n```\nGetXML(log.body, \"/a\")\n```\n\nLANGUAGE: Go\nCODE:\n```\nGetXML(log.body, \"//a\")\n```\n\nLANGUAGE: Go\nCODE:\n```\nGetXML(log.body, \"/a[1]\")\n```\n\nLANGUAGE: Go\nCODE:\n```\nGetXML(log.body, \"//a[@b='c']\")\n```\n\nLANGUAGE: Go\nCODE:\n```\nGetXML(log.body, \"/a/text()\")\n```\n\nLANGUAGE: Go\nCODE:\n```\nGetXML(log.body, \"/a/@foo\")\n```\n\n----------------------------------------\n\nTITLE: Using quoted and non-quoted attribute syntax in TraceQL\nDESCRIPTION: This TraceQL query demonstrates how to combine quoted and non-quoted attribute syntax when querying trace data.  It targets a specific span attribute within a broader scope.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_29\n\nLANGUAGE: TraceQL\nCODE:\n```\n\"{ span.attribute.\\\"attribute name with space\\\" = \\\"value\\\" }\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TraceQL metrics for cloud environments\nDESCRIPTION: This YAML configuration optimizes TraceQL metrics queries for cloud environments with higher concurrency and smaller job sizes.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/traceql-metrics.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nquery_frontend:\n    metrics:\n        concurrent_jobs: 1000\n        target_bytes_per_job: 2.25e+08 # ~225MB\n        interval: 30m0s\n```\n\n----------------------------------------\n\nTITLE: Managing Long-Lived Goroutines with conc.WaitGroup\nDESCRIPTION: Example showing how to manage goroutines that need to outlive the scope of their creation function by passing a WaitGroup to the spawning function.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/sourcegraph/conc/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    var wg conc.WaitGroup\n    defer wg.Wait()\n\n    startTheThing(&wg)\n}\n\nfunc startTheThing(wg *conc.WaitGroup) {\n    wg.Go(func() { ... })\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Functions in Go\nDESCRIPTION: Example of implementing custom validators for custom types using the CustomTypeTagMap. This shows how to create validators that can access both the field being validated and the context (parent struct).\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n\ntype CustomByteArray [6]byte // custom types are supported and can be validated\n\ntype StructWithCustomByteArray struct {\n  ID              CustomByteArray `valid:\"customByteArrayValidator,customMinLengthValidator\"` // multiple custom validators are possible as well and will be evaluated in sequence\n  Email           string          `valid:\"email\"`\n  CustomMinLength int             `valid:\"-\"`\n}\n\ngovalidator.CustomTypeTagMap.Set(\"customByteArrayValidator\", func(i interface{}, context interface{}) bool {\n  switch v := context.(type) { // you can type switch on the context interface being validated\n  case StructWithCustomByteArray:\n    // you can check and validate against some other field in the context,\n    // return early or not validate against the context at all – your choice\n  case SomeOtherType:\n    // ...\n  default:\n    // expecting some other type? Throw/panic here or continue\n  }\n\n  switch v := i.(type) { // type switch on the struct field being validated\n  case CustomByteArray:\n    for _, e := range v { // this validator checks that the byte array is not empty, i.e. not all zeroes\n      if e != 0 {\n        return true\n      }\n    }\n  }\n  return false\n})\ngovalidator.CustomTypeTagMap.Set(\"customMinLengthValidator\", func(i interface{}, context interface{}) bool {\n  switch v := context.(type) { // this validates a field against the value in another field, i.e. dependent validation\n  case StructWithCustomByteArray:\n    return len(v.ID) >= v.CustomMinLength\n  }\n  return false\n})\n```\n\n----------------------------------------\n\nTITLE: SCRAM Client Authentication Example in Go\nDESCRIPTION: Demonstrates how to implement SCRAM client-side authentication using the scram package. Shows initialization of a SHA1 client with credentials and conducting a complete authentication conversation through multiple steps.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/xdg-go/scram/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"github.com/xdg-go/scram\"\n\nfunc main() {\n    // Get Client with username, password and (optional) authorization ID.\n    clientSHA1, err := scram.SHA1.NewClient(\"mulder\", \"trustno1\", \"\")\n    if err != nil {\n        panic(err)\n    }\n\n    // Prepare the authentication conversation. Use the empty string as the\n    // initial server message argument to start the conversation.\n    conv := clientSHA1.NewConversation()\n    var serverMsg string\n\n    // Get the first message, send it and read the response.\n    firstMsg, err := conv.Step(serverMsg)\n    if err != nil {\n        panic(err)\n    }\n    serverMsg = sendClientMsg(firstMsg)\n\n    // Get the second message, send it, and read the response.\n    secondMsg, err := conv.Step(serverMsg)\n    if err != nil {\n        panic(err)\n    }\n    serverMsg = sendClientMsg(secondMsg)\n\n    // Validate the server's final message.  We have no further message to\n    // send so ignore that return value.\n    _, err = conv.Step(serverMsg)\n    if err != nil {\n        panic(err)\n    }\n\n    return\n}\n\nfunc sendClientMsg(s string) string {\n    // A real implementation would send this to a server and read a reply.\n    return \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using ToInt Function for Integer Conversion in Go\nDESCRIPTION: Examples of using the ToInt function to convert various data types to integers. The function handles integers, floats, strings, booleans, interfaces, and nil values.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/cast/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncast.ToInt(8)                  // 8\ncast.ToInt(8.31)               // 8\ncast.ToInt(\"8\")                // 8\ncast.ToInt(true)               // 1\ncast.ToInt(false)              // 0\n\nvar eight interface{} = 8\ncast.ToInt(eight)              // 8\ncast.ToInt(nil)                // 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Settings for Tempo in YAML\nDESCRIPTION: This YAML block defines the configuration options for Tempo blocks, including the block format version, bloom filter settings, and shard size.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n[version: <string> | default = vParquet4]\n[bloom_filter_false_positive: <float> | default = 0.01]\n[bloom_filter_shard_size_bytes: <int> | default = 100KiB]\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Attributes Pipeline in Grafana Alloy\nDESCRIPTION: Example configuration for setting up an OTLP receiver with Kubernetes attributes processing and OTLP export. Demonstrates how to attach Kubernetes metadata to traces including namespace, pod, and container information.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/grafana-alloy/_index.md#2025-04-17_snippet_0\n\nLANGUAGE: alloy\nCODE:\n```\notelcol.receiver.otlp \"default\" {\n  http {}\n  grpc {}\n\n  output {\n    traces  = [otelcol.processor.k8sattributes.default.input]\n  }\n}\n\notelcol.processor.k8sattributes \"default\" {\n  extract {\n    metadata = [\n      \"k8s.namespace.name\",\n      \"k8s.pod.name\",\n      \"k8s.container.name\"\n    ]\n  }\n\n  output {\n    traces = [otelcol.exporter.otlp.default.input]\n  }\n}\n\notelcol.exporter.otlp \"default\" {\n  client {\n    endpoint = env(\"OTLP_ENDPOINT\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Memberlist in Tempo YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure TLS settings specifically for the memberlist component in Tempo, including certificate paths and server name.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/network/tls.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmemberlist:\n    tls_enabled: true\n    tls_cert_path: /tls/tls.crt\n    tls_key_path: /tls/tls.key\n    tls_ca_path: /tls/ca.crt\n    tls_server_name: tempo.trace.svc.cluster.local\n    tls_insecure_skip_verify: false\n```\n\n----------------------------------------\n\nTITLE: Span Attribute Tail Sampling Policy in Grafana Agent Static Mode\nDESCRIPTION: This YAML configuration snippet demonstrates a span attribute-based tail sampling policy in Grafana Agent static mode. It samples traces where the 'http.target' attribute doesn't contain '/healthcheck' or start with '/metrics/'.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/grafana-agent/tail-based-sampling.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntraces:\n   configs:\n   - name: default\n    tail_sampling:\n      policies:\n        - type: string_attribute\n          string_attribute:\n            key: http.target\n            values:\n              - ^\\/(?:metrics\\/.*|healthcheck)$\n            enabled_regex_matching: true\n            invert_match: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service Discovery for Trace Collection\nDESCRIPTION: Example configuration showing how to use Prometheus Service Discovery with Kubernetes to attach metadata like namespace, pod and container information to traces collected by Grafana Agent.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/grafana-agent/_index.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntraces:\n  ...\n  scrape_configs:\n  - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n    job_name: kubernetes-pods\n    kubernetes_sd_configs:\n    - role: pod\n    relabel_configs:\n    - source_labels: [__meta_kubernetes_namespace]\n      target_label: namespace\n    - source_labels: [__meta_kubernetes_pod_name]\n      target_label: pod\n    - source_labels: [__meta_kubernetes_pod_container_name]\n      target_label: container\n    tls_config:\n      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n      insecure_skip_verify: false\n```\n\n----------------------------------------\n\nTITLE: Binding a Custom Flag to Viper (Go)\nDESCRIPTION: Example showing how to bind a custom flag that implements the FlagValue interface to Viper's configuration system.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nviper.BindFlagValue(\"my-flag-name\", myFlag{})\n```\n\n----------------------------------------\n\nTITLE: Querying Error Rate by Service in TraceQL\nDESCRIPTION: A basic TraceQL metrics query that plots the error rate by service over time. It first filters spans with error status and then applies a rate aggregation grouped by service name.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2023-11 TraceQL Metrics.md#2025-04-17_snippet_0\n\nLANGUAGE: traceql\nCODE:\n```\n{status = error } | rate() by (resource.service.name)\n```\n\n----------------------------------------\n\nTITLE: TraceQL Arithmetic Operation for Error Rate Calculation\nDESCRIPTION: A TraceQL metrics query showing how to use arithmetic division between two rate calculations to compute an error percentage for HTTP 5xx responses for a specific API path.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2023-11 TraceQL Metrics.md#2025-04-17_snippet_8\n\nLANGUAGE: traceql\nCODE:\n```\n({ span.http.path = \"/myapi\" && span.http.status_code >= 500 } | rate()) \n   /\n({ span.http.path = \"/myapi\" | rate()})\n```\n\n----------------------------------------\n\nTITLE: Configuring Receiver TLS in Tempo YAML\nDESCRIPTION: This YAML snippet shows how to configure TLS settings for Tempo receivers, which is used for securing incoming trace data. It specifies certificate files and minimum TLS version.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/network/tls.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntls:\n  ca_file: /tls/ca.crt\n  cert_file: /tls/tls.crt\n  key_file: /tls/tls.key\n  min_version: \"1.2\"\n```\n\n----------------------------------------\n\nTITLE: Replacing Regex Patterns in OTTL\nDESCRIPTION: The replace_all_patterns function replaces segments in string values or keys that match a regex pattern with a replacement string. It supports key or value mode and optional function application.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_9\n\nLANGUAGE: OTTL\nCODE:\n```\nreplace_all_patterns(resource.attributes, \"value\", \"/account/\\\\d{4}\", \"/account/{accountId}\")\n```\n\nLANGUAGE: OTTL\nCODE:\n```\nreplace_all_patterns(resource.attributes, \"key\", \"/account/\\\\d{4}\", \"/account/{accountId}\")\n```\n\nLANGUAGE: OTTL\nCODE:\n```\nreplace_all_patterns(resource.attributes, \"key\", \"^kube_([0-9A-Za-z]+_)\", \"k8s.$$1.\")\n```\n\nLANGUAGE: OTTL\nCODE:\n```\nreplace_all_patterns(resource.attributes, \"key\", \"^kube_([0-9A-Za-z]+_)\", \"$$1.\")\n```\n\nLANGUAGE: OTTL\nCODE:\n```\nreplace_all_patterns(resource.attributes, \"key\", \"^kube_([0-9A-Za-z]+_)\", \"$$1.\", SHA256, \"k8s.%s\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Keys with Viper (Go)\nDESCRIPTION: This snippet shows how to use Viper to access nested configuration values using a dot-delimited path. It demonstrates retrieving a deeply nested string value from the configuration.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_29\n\nLANGUAGE: go\nCODE:\n```\nGetString(\"datastore.metric.host\") // (returns \"127.0.0.1\")\n```\n\n----------------------------------------\n\nTITLE: Server Configuration in YAML\nDESCRIPTION: Defines server configuration options including HTTP/gRPC settings, timeouts, and message size limits. Includes multitenancy and API prefix settings.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Optional. Setting to true enables multitenancy and requires X-Scope-OrgID header on all requests.\n[multitenancy_enabled: <bool> | default = false]\n\n# Optional. String prefix for all http api endpoints. Must include beginning slash.\n[http_api_prefix: <string>]\n\nserver:\n    # HTTP server listen host\n    [http_listen_address: <string>]\n\n    # HTTP server listen port\n    [http_listen_port: <int> | default = 80]\n\n    # gRPC server listen host\n    [grpc_listen_address: <string>]\n\n    # gRPC server listen port\n    [grpc_listen_port: <int> | default = 9095]\n\n    # Register instrumentation handlers (/metrics, etc.)\n    [register_instrumentation: <boolean> | default = true]\n\n    # Timeout for graceful shutdowns\n    [graceful_shutdown_timeout: <duration> | default = 30s]\n\n    # Read timeout for HTTP server\n    [http_server_read_timeout: <duration> | default = 30s]\n\n    # Write timeout for HTTP server\n    [http_server_write_timeout: <duration> | default = 30s]\n\n    # Idle timeout for HTTP server\n    [http_server_idle_timeout: <duration> | default = 120s]\n\n    # Max gRPC message size that can be received\n    # This value may need to be increased if you have large traces\n    [grpc_server_max_recv_msg_size: <int> | default = 16777216]\n\n    # Max gRPC message size that can be sent\n    # This value may need to be increased if you have large traces\n    [grpc_server_max_send_msg_size: <int> | default = 16777216]\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Generator and Distributor in YAML\nDESCRIPTION: Example configuration for the distributor and metrics-generator components, including remote write settings, processor configurations, and collection intervals. Demonstrates how to set up service graphs and span metrics with specific dimensions and histogram buckets.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2022-01 Metrics-generator.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndistributor:\n  # Toggle to enable or disable the metrics-generator ring. If disabled, the distributor should\n  # not initialize the metrics-generator ring and does not send data to the metrics-generator.\n  enable_metrics_generator_ring: true\n\n# Similar to the ingester_client, configure the client used by the distributor\nmetrics_generator_client:\n  # Same settings as ingester_client\n\nmetrics_generator:\n  collection_interval: 15s\n  external_labels:\n    some_static_label: foo \n\n  # Global settings for the metrics processors\n  processor:\n    service_graphs:\n      histogram_buckets: [0.1, 0.2, 0.5, 1, 2, 5, 10]\n    span_metrics:\n      dimensions:\n        - http.method\n        - http.target\n\n  # Configure remote write target\n  remote_write:\n    enabled: true\n    client:\n      # prometheus.RemoteWriteConfig\n      # https://prometheus.io/docs/prometheus/latest/configuration/configuration/#remote_write\n      url: http://prometheus:9090/prometheus/api/v1/write\n```\n\n----------------------------------------\n\nTITLE: Querying for exceptions in span events using TraceQL\nDESCRIPTION: This TraceQL query searches for traces containing span events with an exception message that matches the regular expression '.*something went wrong.*'. It filters traces based on event attributes.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_23\n\nLANGUAGE: TraceQL\nCODE:\n```\n\"{ event.exception.message =~ \\\".*something went wrong.*\\\" }\"\n```\n\n----------------------------------------\n\nTITLE: Replacing encoding/json import\nDESCRIPTION: This code snippet shows how to replace the standard `encoding/json` import with the `github.com/goccy/go-json` import. This allows you to use go-json as a drop-in replacement for the standard library, leveraging its performance improvements.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\"-import \\\"encoding/json\\\"\\n+import \\\"github.com/goccy/go-json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Keys from Map Attributes in OTTL\nDESCRIPTION: Function to remove specific keys from a pcommon.Map, useful for removing sensitive or unnecessary attributes from logs and resources.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: OTTL\nCODE:\n```\ndelete_key(log.attributes, \"http.request.header.authorization\")\n```\n\nLANGUAGE: OTTL\nCODE:\n```\ndelete_key(resource.attributes, \"http.request.header.authorization\")\n```\n\n----------------------------------------\n\nTITLE: Creating TempoStack Custom Resource\nDESCRIPTION: This YAML defines a TempoStack custom resource, configuring Tempo with storage settings, resource limits, and enabling the Jaeger Query interface.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/quickstart.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl apply -f - <<EOF\napiVersion: tempo.grafana.com/v1alpha1\nkind: TempoStack\nmetadata:\n  name: simplest\nspec:\n  storage:\n    secret:\n      name: minio-test\n      type: s3\n  storageSize: 1Gi\n  resources:\n    total:\n      limits:\n        memory: 2Gi\n        cpu: 2000m\n  template:\n    queryFrontend:\n      jaegerQuery:\n        enabled: true\nEOF\n```\n\n----------------------------------------\n\nTITLE: Using BasicService Struct\nDESCRIPTION: This snippet demonstrates how to define a custom service by embedding the BasicService struct and implementing state functions. The service utilizes NewBasicService to set up the service lifecycle methods: collect handles the service's running logic and Send allows clients to send messages to the service.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/grafana/dskit/services/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype exampleService struct {\n\t*BasicService\n\n\tlog []string\n\tch  chan string\n}\n\nfunc newExampleServ() *exampleService {\n\ts := &exampleService{\n\t\tch: make(chan string),\n\t}\n    s.BasicService = NewBasicService(nil, s.collect, nil) // StartingFn, RunningFn, StoppingFn\n\treturn s\n}\n\n// used as Running function. When service is stopped, context is canceled, so we react on it.\nfunc (s *exampleService) collect(ctx context.Context) error {\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn nil\n\t\tcase msg := <-s.ch:\n\t\t\ts.log = append(s.log, msg)\n\t\t}\n\t}\n}\n\n// External method called by clients of the Service.\nfunc (s *exampleService) Send(msg string) bool {\n\tctx := s.ServiceContext() // provided by BasicService. Not part of Service interface.\n\tif ctx == nil {\n\t\t// Service is not yet started\n\t\treturn false\n\t}\n\tselect {\n\tcase s.ch <- msg:\n\t\treturn true\n\tcase <-ctx.Done():\n\t\t// Service is not running anymore.\n\t\treturn false\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Grafana Helm Repository\nDESCRIPTION: Commands to add the Grafana Helm repository and update local repository cache\nSOURCE: https://github.com/grafana/tempo/blob/main/example/helm/README.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nhelm repo add grafana https://grafana.github.io/helm-charts\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Command Line Flag Integration with Koanf in Go\nDESCRIPTION: Shows how to integrate command line flags with koanf using the spf13/pflag library. Includes flag definition, parsing, and merging with configuration from files.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/parsers/toml\"\n\n\t// TOML version 2 is available at:\n\t// \"github.com/knadh/koanf/parsers/toml/v2\"\n\n\t\"github.com/knadh/koanf/providers/file\"\n\t\"github.com/knadh/koanf/providers/posflag\"\n\tflag \"github.com/spf13/pflag\"\n)\n\n// Global koanf instance. Use \".\" as the key path delimiter. This can be \"/\" or any character.\nvar k = koanf.New(\".\")\n\nfunc main() {\n\t// Use the POSIX compliant pflag lib instead of Go's flag lib.\n\tf := flag.NewFlagSet(\"config\", flag.ContinueOnError)\n\tf.Usage = func() {\n\t\tfmt.Println(f.FlagUsages())\n\t\tos.Exit(0)\n\t}\n\t// Path to one or more config files to load into koanf along with some config params.\n\tf.StringSlice(\"conf\", []string{\"mock/mock.toml\"}, \"path to one or more .toml config files\")\n\tf.String(\"time\", \"2020-01-01\", \"a time string\")\n\tf.String(\"type\", \"xxx\", \"type of the app\")\n\tf.Parse(os.Args[1:])\n\n\t// Load the config files provided in the commandline.\n\tcFiles, _ := f.GetStringSlice(\"conf\")\n\tfor _, c := range cFiles {\n\t\tif err := k.Load(file.Provider(c), toml.Parser()); err != nil {\n\t\t\tlog.Fatalf(\"error loading file: %v\", err)\n\t\t}\n\t}\n\n\t// \"time\" and \"type\" may have been loaded from the config file, but\n\t// they can still be overridden with the values from the command line.\n\t// The bundled posflag.Provider takes a flagset from the spf13/pflag lib.\n\t// Passing the Koanf instance to posflag helps it deal with default command\n\t// line flag values that are not present in conf maps from previously loaded\n\t// providers.\n\tif err := k.Load(posflag.Provider(f, \".\", k), nil); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n\n\tfmt.Println(\"time is = \", k.String(\"time\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Using SugaredLogger in Go with Zap\nDESCRIPTION: Demonstrates how to use Zap's SugaredLogger for contexts where performance is important but not critical. Shows both structured logging with key-value pairs and printf-style logging.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.uber.org/zap/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogger, _ := zap.NewProduction()\ndefer logger.Sync() // flushes buffer, if any\nsugar := logger.Sugar()\nsugar.Infow(\"failed to fetch URL\",\n  // Structured context as loosely typed key-value pairs.\n  \"url\", url,\n  \"attempt\", 3,\n  \"backoff\", time.Second,\n)\nsugar.Infof(\"Failed to fetch URL: %s\", url)\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service for Metrics Generation in Protobuf\nDESCRIPTION: Proposes a gRPC service definition for the MetricsGenerator, including methods for pushing spans and associated request/response messages. It emphasizes optimizing data transfer by only sending relevant spans.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2022-01 Metrics-generator.md#2025-04-17_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nservice MetricsGenerator {\n  rpc PushSpans(PushSpansRequest) returns (PushResponse) {};\n}\n\nmessage PushSpansRequest {\n  repeated tempopb.trace.v1.ResourceSpans batches = 1;\n}\n\nmessage PushResponse {\n}\n```\n\n----------------------------------------\n\nTITLE: String Status Code Query\nDESCRIPTION: Query using string comparison for HTTP status codes\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_31\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ span.http.status_code >= \"400\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Trace Pool Queue Depth in YAML\nDESCRIPTION: This YAML configuration snippet specifies the queue_depth setting in the Tempo queriers, which controls the number of blocks that a querier process can handle at once. By default, this is set to 10000. Adjusting this setting can help manage trace lookup failures by increasing the workload a single querier can handle.\nSOURCE: https://github.com/grafana/tempo/blob/main/operations/tempo-mixin/runbook.md#2025-04-17_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nstorage:\n  trace:\n    pool:\n      queue_depth: xyz (default 10000)\n```\n\n----------------------------------------\n\nTITLE: Handling Metrics Route Variables with Gorilla Mux in Go\nDESCRIPTION: This snippet provides an example of handling route variables in the Gorilla Mux router and demonstrates testing those variables via a table-driven test approach.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n// endpoints.go\nfunc main() {\n    r := mux.NewRouter()\n    // A route with a route variable:\n    r.HandleFunc(\"/metrics/{type}\", MetricsHandler)\n\n    log.Fatal(http.ListenAndServe(\"localhost:8080\", r))\n}\n\n```\n\nLANGUAGE: go\nCODE:\n```\n// endpoints_test.go\nfunc TestMetricsHandler(t *testing.T) {\n    tt := []struct{\n        routeVariable string\n        shouldPass bool\n    }{\n        {\"goroutines\", true},\n        {\"heap\", true},\n        {\"counters\", true},\n        {\"queries\", true},\n        {\"adhadaeqm3k\", false},\n    }\n\n    for _, tc := range tt {\n        path := fmt.Sprintf(\"/metrics/%s\", tc.routeVariable)\n        req, err := http.NewRequest(\"GET\", path, nil)\n        if err != nil {\n            t.Fatal(err)\n        }\n\n        rr := httptest.NewRecorder()\n\t\n\t// To add the vars to the context,\n\t// we need to create a router through which we can pass the request.\n        router := mux.NewRouter()\n        router.HandleFunc(\"/metrics/{type}\", MetricsHandler)\n        router.ServeHTTP(rr, req)\n\n        // In this case, our MetricsHandler returns a non-200 response\n        // for a route variable it doesn't know about.\n        if rr.Code == http.StatusOK && !tc.shouldPass {\n            t.Errorf(\"handler should have failed on routeVariable %s: got %v want %v\",\n                tc.routeVariable, rr.Code, http.StatusOK)\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Global and Per-Tenant Overrides in Tempo YAML\nDESCRIPTION: YAML configuration example showing how to set global overrides and per-tenant specific settings for ingestion rates, burst sizes, and metrics generator processors in Tempo.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/helm-charts/tempo-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n    defaults:\n        ingestion:\n          rate_limit_bytes: 5 * 1000 * 1000\n          burst_size_bytes: 5 * 1000 * 1000\n          max_traces_per_user: 1000\n        global:\n          max_bytes_per_trace: 10 * 1000 * 1000\n\n        metrics_generator:\n          processors: ['service-graphs', 'span-metrics']\n\nper_tenant_overrides:\n    '1234':\n        ingestion:\n          rate_limit_bytes: 2 * 1000 * 1000\n          burst_size_bytes: 2 * 1000 * 1000\n          max_traces_per_user: 400\n        global:\n          max_bytes_per_trace: 5 * 1000 * 1000\n```\n\n----------------------------------------\n\nTITLE: Finding Traces with HTTP 5xx Errors\nDESCRIPTION: TraceQL query that finds traces for a specific operation that returned with an HTTP 5xx error code.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_4\n\nLANGUAGE: traceql\nCODE:\n```\n{\n  resource.service.name=\"frontend\" &&\n  name = \"POST /api/orders\" &&\n  span.http.status_code >= 500\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Compose Setup\nDESCRIPTION: Stops and removes all containers in the Docker Compose setup, including volumes. Requires Docker Compose to be running.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/multi-tenant/readme.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down -v\n\n```\n\n----------------------------------------\n\nTITLE: Getting Values from Viper (Go)\nDESCRIPTION: This snippet shows how to retrieve values from Viper using various getter methods. It includes examples of getting string and boolean values, and mentions the importance of the IsSet() method for checking key existence.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_27\n\nLANGUAGE: go\nCODE:\n```\nviper.GetString(\"logfile\") // case-insensitive Setting & Getting\nif viper.GetBool(\"verbose\") {\n\tfmt.Println(\"verbose enabled\")\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Tag Values V2 API Endpoint with TraceQL\nDESCRIPTION: Example of querying the tag values V2 endpoint which returns values and their data types for a given TraceQL identifier.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/_index.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -G -s http://localhost:3200/api/v2/search/tag/.service.name/values | jq\n```\n\nLANGUAGE: bash\nCODE:\n```\nGET /api/v2/search/tag/resource.service.name/values?q=\"{span.http.method='GET'}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector with Persistent Queue using File Storage\nDESCRIPTION: YAML configuration example showing how to set up an OpenTelemetry Collector with persistent queue using file storage. This configuration establishes OTLP receivers and exporters with a persistent queue for metrics, logs, and traces pipelines.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/exporter/exporterhelper/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\nexporters:\n  otlp:\n    endpoint: <ENDPOINT>\n    sending_queue:\n      storage: file_storage/otc\nextensions:\n  file_storage/otc:\n    directory: /var/lib/storage/otc\n    timeout: 10s\nservice:\n  extensions: [file_storage]\n  pipelines:\n    metrics:\n      receivers: [otlp]\n      exporters: [otlp]\n    logs:\n      receivers: [otlp]\n      exporters: [otlp]\n    traces:\n      receivers: [otlp]\n      exporters: [otlp]\n```\n\n----------------------------------------\n\nTITLE: Prometheus Metrics for Grafana Alloy\nDESCRIPTION: This snippet identifies key Prometheus metrics published by Alloy to help diagnose trace traffic. Metrics such as receiver accepted and refused spans ratios are critical for determining the performance and reliability of trace traffic.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/send-traces/alloy.md#2025-04-17_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n```\nreceiver_accepted_spans_ratio_total\nreceiver_refused_spans_ratio_total\n```\n```\n\n----------------------------------------\n\nTITLE: Tempo StreamingQuerier Service Definition\nDESCRIPTION: Protocol buffer definition of the StreamingQuerier service interface provided by the query frontend. This interface defines methods for search operations and metrics querying with streaming responses.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/_index.md#2025-04-17_snippet_23\n\nLANGUAGE: protobuf\nCODE:\n```\nservice StreamingQuerier {\n  rpc Search(SearchRequest) returns (stream SearchResponse);\n  rpc SearchTags(SearchTagsRequest) returns (stream SearchTagsResponse) {}\n  rpc SearchTagsV2(SearchTagsRequest) returns (stream SearchTagsV2Response) {}\n  rpc SearchTagValues(SearchTagValuesRequest) returns (stream SearchTagValuesResponse) {}\n  rpc SearchTagValuesV2(SearchTagValuesRequest) returns (stream SearchTagValuesV2Response) {}\n  rpc MetricsQueryRange(QueryRangeRequest) returns (stream QueryRangeResponse) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Merge Functions with Koanf in Go\nDESCRIPTION: Example demonstrating how to use a custom merge function with Koanf to control the merging behavior between configuration sources. This allows for specialized handling of how configuration values are combined.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_15\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"errors\"\n\t\"log\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/maps\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/parsers/yaml\"\n\t\"github.com/knadh/koanf/providers/file\"\n)\n\nvar conf = koanf.Conf{\n\tDelim:       \".\",\n\tStrictMerge: true,\n}\nvar k = koanf.NewWithConf(conf)\n\nfunc main() {\n\tyamlPath := \"mock/mock.yml\"\n\tif err := k.Load(file.Provider(yamlPath), yaml.Parser()); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n\n\tjsonPath := \"mock/mock.json\"\n\tif err := k.Load(file.Provider(jsonPath), json.Parser(), koanf.WithMergeFunc(func(src, dest map[string]interface{}) error {\n     // Your custom logic, copying values from src into dst\n     return nil\n    })); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running Tempo CLI from Source\nDESCRIPTION: These snippets guide on compiling Tempo CLI from source using a Go installation and executing it, either as a native binary or through Docker. It includes dependencies like Go for compilation or Docker for container execution.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/tempo_cli.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./tempo-cli [arguments...]\ngo run ./cmd/tempo-cli [arguments...]\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake docker-tempo-cli\ndocker run docker.io/grafana/tempo-cli [arguments...]\n```\n\n----------------------------------------\n\nTITLE: Integrating Log Rotation with Zap using Lumberjack in Go\nDESCRIPTION: This code snippet shows how to integrate the lumberjack log rotation package with Zap. It creates a custom zapcore.WriteSyncer that uses lumberjack for log file rotation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.uber.org/zap/FAQ.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nw := zapcore.AddSync(&lumberjack.Logger{\n  Filename:   \"/var/log/myapp/foo.log\",\n  MaxSize:    500, // megabytes\n  MaxBackups: 3,\n  MaxAge:     28, // days\n})\ncore := zapcore.NewCore(\n  zapcore.NewJSONEncoder(zap.NewProductionEncoderConfig()),\n  w,\n  zap.InfoLevel,\n)\nlogger := zap.New(core)\n```\n\n----------------------------------------\n\nTITLE: Deserializing Span Context from the Wire\nDESCRIPTION: This code snippet shows how to deserialize a span's trace context from HTTP headers on an inbound request. It uses `opentracing.GlobalTracer().Extract` to extract the span context from the HTTP request headers. If a valid context is extracted, a child span is created; otherwise, a root span is created.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n        var serverSpan opentracing.Span\n        appSpecificOperationName := ...\n        wireContext, err := opentracing.GlobalTracer().Extract(\n            opentracing.HTTPHeaders,\n            opentracing.HTTPHeadersCarrier(req.Header))\n        if err != nil {\n            // Optionally record something about err here\n        }\n\n        // Create the span referring to the RPC client if available.\n        // If wireContext == nil, a root span will be created.\n        serverSpan = opentracing.StartSpan(\n            appSpecificOperationName,\n            ext.RPCServerOption(wireContext))\n\n        defer serverSpan.Finish()\n\n        ctx := opentracing.ContextWithSpan(context.Background(), serverSpan)\n        ...\n    })\n```\n\n----------------------------------------\n\nTITLE: Supported Fields for User-Configurable Overrides (YAML)\nDESCRIPTION: YAML structure showing the supported fields for user-configurable overrides in Tempo. This includes settings for forwarders, metrics generator, and various processors.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/manage-advanced-systems/user-configurable-overrides.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n[forwarders: <list of strings>]\n\nmetrics_generator:\n\n  [processors: <list of strings>]\n  [collection_interval: <duration>]\n  [disable_collection: <bool> | default = false]\n\n  processor:\n\n    service_graphs:\n      [histogram_buckets: <list of float>]\n      [dimensions: <list of string>]\n      [peer_attributes: <list of string>]\n      [enable_client_server_prefix: <bool>]\n      [enable_messaging_system_latency_histogram: <bool>]\n\n    span_metrics:\n      [histogram_buckets: <list of float>]\n      [dimensions: <list of string>]\n      [intrinsic_dimensions: <map string to bool>]\n      [filter_policies: [\n        [\n          include/exclude:\n            match_type: <string> # options: strict, regexp\n            attributes:\n              - key: <string>\n                value: <any>\n        ]\n      ]\n      [enable_target_info: <bool>]\n      [target_info_excluded_dimensions: <list of string>]\n\n    host_info:\n      [metric_name: <string>]\n      [host_identifiers: <list of string>]\n```\n\n----------------------------------------\n\nTITLE: Creating and Joining a Memberlist Cluster in Go\nDESCRIPTION: Demonstrates initializing a memberlist configuration, creating a cluster instance, joining an existing cluster, and retrieving cluster members. Shows basic setup and usage of the memberlist library.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/memberlist/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlist, err := memberlist.Create(memberlist.DefaultLocalConfig())\nif err != nil {\n\tpanic(\"Failed to create memberlist: \" + err.Error())\n}\n\nn, err := list.Join([]string{\"1.2.3.4\"})\nif err != nil {\n\tpanic(\"Failed to join cluster: \" + err.Error())\n}\n\nfor _, member := range list.Members() {\n\tfmt.Printf(\"Member: %s %s\\n\", member.Name, member.Addr)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Attribute Size in Tempo Distributors\nDESCRIPTION: YAML configuration snippet for limiting the maximum size of individual attributes to prevent OOM errors. This setting truncates attributes that exceed the configured limit and tracks truncation via the tempo_distributor_attributes_truncated_total metric.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/out-of-memory-errors.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n   # Optional\n    # Configures the max size an attribute can be. Any key or value that exceeds this limit will be truncated before storing\n    # Setting this parameter to '0' would disable this check against attribute size\n    [max_attribute_bytes: <int> | default = '2048']\n```\n\n----------------------------------------\n\nTITLE: Configuring WAL in YAML\nDESCRIPTION: Write-Ahead Log (WAL) configuration including path, encoding, and version settings\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\npath: <string> | default = \"\"\nv2_encoding: <string> | default = \"zstd\"\nsearch_encoding: <string> | default = \"snappy\"\ningestion_time_range_slack: <duration> | default = unset\nversion: <string> | default = \"vParquet3\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Ratio-Based Sampler in Go for OpenTelemetry\nDESCRIPTION: This code snippet defines a custom RatioBasedSampler struct that implements the OpenTelemetry Sampler interface. It wraps an inner TraceIDRatioBased sampler and adds a custom attribute to sampled spans with the sampling ratio. This sampler is useful when using span metrics with ratio-based sampling to preserve metric information.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/metrics-generator/span_metrics.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage tracer\nimport (\n\t\"go.opentelemetry.io/otel/attribute\"\n\ttracesdk \"go.opentelemetry.io/otel/sdk/trace\"\n)\n\ntype RatioBasedSampler struct {\n\tinnerSampler        tracesdk.Sampler\n\tsampleRateAttribute attribute.KeyValue\n}\n\nfunc NewRatioBasedSampler(fraction float64) RatioBasedSampler {\n\tinnerSampler := tracesdk.TraceIDRatioBased(fraction)\n\treturn RatioBasedSampler{\n\t\tinnerSampler:        innerSampler,\n\t\tsampleRateAttribute: attribute.Float64(\"X-SampleRatio\", fraction),\n\t}\n}\n\nfunc (ds RatioBasedSampler) ShouldSample(parameters tracesdk.SamplingParameters) tracesdk.SamplingResult {\n\tsampler := ds.innerSampler\n\tresult := sampler.ShouldSample(parameters)\n\tif result.Decision == tracesdk.RecordAndSample {\n\t\tresult.Attributes = append(result.Attributes, ds.sampleRateAttribute)\n\t}\n\treturn result\n}\n\nfunc (ds RatioBasedSampler) Description() string {\n\treturn \"Ratio Based Sampler which gives information about sampling ratio\"\n}\n```\n\n----------------------------------------\n\nTITLE: Flattening Map Attributes in OTTL\nDESCRIPTION: Function to flatten nested maps by moving items to the root, with optional prefix, depth control, and conflict resolution.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_4\n\nLANGUAGE: OTTL\nCODE:\n```\nflatten(resource.attributes)\n```\n\nLANGUAGE: OTTL\nCODE:\n```\nflatten(metric.cache, \"k8s\", 4)\n```\n\nLANGUAGE: OTTL\nCODE:\n```\nflatten(log.body, depth=2)\n```\n\nLANGUAGE: OTTL\nCODE:\n```\nflatten(body, resolveConflicts=true)\n```\n\n----------------------------------------\n\nTITLE: Querying database connection strings in TraceQL\nDESCRIPTION: This TraceQL query finds traces with database connection strings that connect to a Postgres or MySQL database.  It uses regular expressions to match against the `span.db.system` attribute.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_22\n\nLANGUAGE: TraceQL\nCODE:\n```\n\"{ span.db.system =~ \\\"postgresql|mysql\\\" }\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage and Cost Attribution in Tempo YAML\nDESCRIPTION: This snippet shows how to configure storage options, including dedicated columns for parquet files, and cost attribution dimensions in Tempo.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  parquet_dedicated_columns:\n    [\n      name: <string>, # name of the attribute\n      type: <string>, # type of the attribute. options: string\n      scope: <string> # scope of the attribute. options: resource, span\n    ]\n\ncost_attribution:\n  dimensions: <map string to string>\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector Authentication Extensions with YAML\nDESCRIPTION: Example YAML configuration showing how to set up OIDC and OAuth2 client authentication extensions and connect them to receivers. Demonstrates TLS certificate configuration, timeouts, and authenticator linking.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/config/configauth/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nextensions:\n  oidc:\n    # see the blog post on securing the otelcol for information\n    # on how to setup an OIDC server and how to generate the TLS certs\n    # required for this example\n    # https://medium.com/opentelemetry/securing-your-opentelemetry-collector-1a4f9fa5bd6f\n    issuer_url: http://localhost:8080/auth/realms/opentelemetry\n    audience: account\n\n  oauth2client:\n    client_id: someclientid\n    client_secret: someclientsecret\n    token_url: https://example.com/oauth2/default/v1/token\n    scopes: [\"api.metrics\"]\n    # tls settings for the token client\n    tls:\n      insecure: true\n      ca_file: /var/lib/mycert.pem\n      cert_file: certfile\n      key_file: keyfile\n    # timeout for the token client\n    timeout: 2s\n\nreceivers:\n  otlp/with_auth:\n    protocols:\n      grpc:\n        endpoint: localhost:4318\n        tls:\n          cert_file: /tmp/certs/cert.pem\n          key_file: /tmp/certs/cert-key.pem\n        auth:\n          ## oidc is the extension name to use as the authenticator for this receiver\n          authenticator: oidc\n\n  otlphttp/withauth:\n    endpoint: http://localhost:9000\n    auth:\n      authenticator: oauth2client\n```\n\n----------------------------------------\n\nTITLE: Updating Configuration Defaults in Grafana Tempo\nDESCRIPTION: The provided YAML snippet demonstrates updated configuration defaults in Grafana Tempo. It modifies settings related to ingester, query frontend, storage, and compactor components, aiming to optimize performance and resource utilization based on operational knowledge. The updated values are specifically for the `trace_idle_period`, `flush_check_period`, `query_shards`, `encoding`, `bloom_filter_false_positive`, `bloom_filter_shard_size_bytes`, `chunk_size_bytes`, and `compaction_window`.\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_29\n\nLANGUAGE: YAML\nCODE:\n```\n\"ingester:\\n  trace_idle_period: 30s => 10s  # reduce ingester memory requirements with little impact on querying\\n  flush_check_period: 30s => 10s\\nquery_frontend:\\n  query_shards: 2 => 20          # will massively improve performance on large installs\\nstorage:\\n  trace:\\n    wal:\\n      encoding: none => snappy   # snappy has been tested thoroughly and ready for production use\\n    block:\\n      bloom_filter_false_positive: .05 => .01          # will increase total bloom filter size but improve query performance\\n      bloom_filter_shard_size_bytes: 256KiB => 100 KiB # will improve query performance\\ncompactor:\\n  compaction:\\n    chunk_size_bytes: 10 MiB => 5 MiB  # will reduce compactor memory needs\\n    compaction_window: 4h => 1h        # will allow more compactors to participate in compaction without substantially increasing blocks\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Duration by Status Code in TraceQL\nDESCRIPTION: This query computes the average duration for each http.status_code of all spans named 'GET /:endpoint' using the avg_over_time() function in TraceQL.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/metrics-queries/functions.md#2025-04-17_snippet_8\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ name = \"GET /:endpoint\" } | avg_over_time(duration) by (span.http.status_code)\n```\n\n----------------------------------------\n\nTITLE: Querying span link attributes in TraceQL\nDESCRIPTION: This TraceQL query searches for traces containing span links with the 'opentracing.ref_type' attribute set to 'child_of'. It demonstrates filtering traces using link attributes.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_24\n\nLANGUAGE: TraceQL\nCODE:\n```\n\"{ link.opentracing.ref_type = \\\"child_of\\\" }\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TraceQL Metrics for All Spans (YAML)\nDESCRIPTION: Configuration for enabling TraceQL metrics queries against all spans rather than just server spans. This expands the scope of metrics collection beyond the default server spans.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-6.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics_generator:\n  processor:\n    local_blocks:\n      filter_server_spans: false\n```\n\n----------------------------------------\n\nTITLE: Resource Context Path Definitions\nDESCRIPTION: Table of supported paths for Resource Context, including cache, attributes, and dropped attributes count. Shows the mapping between paths, accessed fields, and their corresponding data types.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/contexts/ottlresource/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| path                              | field accessed                                                                                                                                     | type                                                                    |\n|-----------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------|\n| resource.cache                    | the value of the current transform context's temporary cache. cache can be used as a temporary placeholder for data during complex transformations | pcommon.Map                                                             |\n| resource.cache[\"\"]              | the value of an item in cache. Supports multiple indexes to access nested fields.                                                                  | string, bool, int64, float64, pcommon.Map, pcommon.Slice, []byte or nil |\n| resource.attributes               | attributes of the resource being processed                                                                                                         | pcommon.Map                                                             |\n| resource.attributes[\"\"]         | the value of the attribute of the resource being processed. Supports multiple indexes to access nested fields.                                     | string, bool, int64, float64, pcommon.Map, pcommon.Slice, []byte or nil |\n| resource.dropped_attributes_count | number of dropped attributes of the resource being processed                                                                                       | int64                                                                   |\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration in YAML\nDESCRIPTION: Shows how to use environment variables in Tempo configuration files using ${VAR} syntax with optional default values.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n${VAR}\n${VAR:-default_value}\n```\n\n----------------------------------------\n\nTITLE: Total Cardinality Estimation Formula\nDESCRIPTION: Final formula for estimating total cardinality across all service graph metrics, combining hop-based and service-based calculations.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/metrics-generator/service_graphs/estimate-cardinality.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  Sum: [([2 * #hb] + 2) * #hops] + [2 * #services]\n```\n\n----------------------------------------\n\nTITLE: Calculating Minimum Duration by HTTP Target in TraceQL\nDESCRIPTION: This query computes the minimum duration for each http.target of all spans named 'GET /:endpoint' using the min_over_time() function in TraceQL.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/metrics-queries/functions.md#2025-04-17_snippet_4\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ name = \"GET /:endpoint\" } | min_over_time(duration) by (span.http.target)\n```\n\n----------------------------------------\n\nTITLE: Finding Traces with Multiple Span Conditions\nDESCRIPTION: TraceQL query demonstrating how to find traces where different conditions can be true on different spans within the trace.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_14\n\nLANGUAGE: traceql\nCODE:\n```\n{ resource.deployment.environment = \"production\" } && { span.http.status_code = 200 }\n```\n\n----------------------------------------\n\nTITLE: Chaining gRPC Interceptors in Go\nDESCRIPTION: This snippet demonstrates how to chain multiple gRPC interceptors using the `grpc_middleware` library. It showcases chaining both stream and unary server interceptors. The interceptors used cover functionalities like context tagging, tracing, Prometheus monitoring, Zap logging, authentication, and recovery.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-middleware/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/grpc-ecosystem/go-grpc-middleware\"\n\nmyServer := grpc.NewServer(\n    grpc.StreamInterceptor(grpc_middleware.ChainStreamServer(\n        grpc_ctxtags.StreamServerInterceptor(),\n        grpc_opentracing.StreamServerInterceptor(),\n        grpc_prometheus.StreamServerInterceptor,\n        grpc_zap.StreamServerInterceptor(zapLogger),\n        grpc_auth.StreamServerInterceptor(myAuthFunction),\n        grpc_recovery.StreamServerInterceptor(),\n    )),\n    grpc.UnaryInterceptor(grpc_middleware.ChainUnaryServer(\n        grpc_ctxtags.UnaryServerInterceptor(),\n        grpc_opentracing.UnaryServerInterceptor(),\n        grpc_prometheus.UnaryServerInterceptor,\n        grpc_zap.UnaryServerInterceptor(zapLogger),\n        grpc_auth.UnaryServerInterceptor(myAuthFunction),\n        grpc_recovery.UnaryServerInterceptor(),\n    )),\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced Kong Command Implementation in Go\nDESCRIPTION: Shows how to implement commands as separate structs with Run methods, demonstrating a more robust approach to command handling with proper type safety and reusability.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/kong/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Context struct {\n  Debug bool\n}\n\ntype RmCmd struct {\n  Force     bool `help:\"Force removal.\"`\n  Recursive bool `help:\"Recursively remove files.\"`\n\n  Paths []string `arg:\"\" name:\"path\" help:\"Paths to remove.\" type:\"path\"`\n}\n\nfunc (r *RmCmd) Run(ctx *Context) error {\n  fmt.Println(\"rm\", r.Paths)\n  return nil\n}\n\ntype LsCmd struct {\n  Paths []string `arg:\"\" optional:\"\" name:\"path\" help:\"Paths to list.\" type:\"path\"`\n}\n\nfunc (l *LsCmd) Run(ctx *Context) error {\n  fmt.Println(\"ls\", l.Paths)\n  return nil\n}\n\nvar cli struct {\n  Debug bool `help:\"Enable debug mode.\"`\n\n  Rm RmCmd `cmd:\"\" help:\"Remove files.\"`\n  Ls LsCmd `cmd:\"\" help:\"List paths.\"`\n}\n\nfunc main() {\n  ctx := kong.Parse(&cli)\n  err := ctx.Run(&Context{Debug: cli.Debug})\n  ctx.FatalIfErrorf(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Tag-based Search Example with Curl\nDESCRIPTION: Shows how to use curl for tag-based searching with duration filtering. This example finds traces with a specific service name and minimum duration, displaying the request format and response structure.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/_index.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -G -s http://localhost:3200/api/search --data-urlencode 'tags=service.name=cartservice' --data-urlencode minDuration=600ms | jq\n```\n\n----------------------------------------\n\nTITLE: New Cache Configuration Example (YAML)\nDESCRIPTION: This YAML snippet shows the new cache configuration in Grafana Tempo after the cache refactoring. It demonstrates how to define multiple role-based caches using `redis` or `memcached` clusters.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/upgrade.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"cache:\\n  caches:\\n  - memcached:\\n      host: <some memcached cluster>\\n    roles:\\n    - bloom\\n    - parquet-footer\\n  - memcached:\\n      host: <some memcached cluster>\\n    roles:\\n    - frontend-search\"\n```\n\n----------------------------------------\n\nTITLE: Optimizing Reads from Parquet Files in Go\nDESCRIPTION: This example shows how to optimize reading from Parquet files by accessing column values directly through pages. It demonstrates reading values into buffers of parquet.Value or as arrays of primitive Go types for more efficient processing.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/parquet-go/parquet-go/README.md#2025-04-17_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npages := column.Pages()\ndefer func() {\n    checkErr(pages.Close())\n}()\n\nfor {\n    p, err := pages.ReadPage()\n    if err != nil {\n        ... // io.EOF when there are no more pages\n    }\n\n    switch page := p.Values().(type) {\n    case parquet.Int32Reader:\n        values := make([]int32, page.NumValues())\n        _, err := page.ReadInt32s(values)\n        ...\n    case parquet.Int64Reader:\n        values := make([]int64, page.NumValues())\n        _, err := page.ReadInt64s(values)\n        ...\n    default:\n        values := make([]parquet.Value, page.NumValues())\n        _, err := page.ReadValues(values)\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Kafka Records with OpenTelemetry Tracing in Go\nDESCRIPTION: This snippet demonstrates how to process a Kafka record using kotel's WithProcessSpan method to create and manage a processing span for OpenTelemetry tracing.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/twmb/franz-go/plugin/kotel/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc processRecord(record *kgo.Record, tracer *kotel.Tracer) {\n\tctx, span := tracer.WithProcessSpan(record)\n\t// Process the record here.\n\t// End the span when function exits.\n\tdefer span.End()\n\t// optionally pass the context to the next processing step.\n\tfmt.Printf(\n\t\t\"processed offset '%s' with key '%s' and value '%s'\\n\",\n\t\tstrconv.FormatInt(record.Offset, 10),\n\t\tstring(record.Key),\n\t\tstring(record.Value),\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Stack\nDESCRIPTION: This snippet starts up the entire stack of containers using Docker Compose. Ensure Docker and Docker Compose are installed and running. When executed, this command will spin up the necessary containers for OpenTelemetry and related services. No parameters are needed, and the containers will utilize the specified configurations within the Docker Compose file.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/otel-collector/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Combining JSON Merge Patches in Go\nDESCRIPTION: Example demonstrating how to combine two JSON merge patch documents into a single patch using the MergeMergePatches function. The combined patch produces the same result as applying the patches individually.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/evanphx/json-patch/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tjsonpatch \"github.com/evanphx/json-patch\"\n)\n\nfunc main() {\n\toriginal := []byte(`{\"name\": \"John\", \"age\": 24, \"height\": 3.21}`)\n\n\tnameAndHeight := []byte(`{\"height\":null,\"name\":\"Jane\"}`)\n\tageAndEyes := []byte(`{\"age\":4.23,\"eyes\":\"blue\"}`)\n\n\t// Let's combine these merge patch documents...\n\tcombinedPatch, err := jsonpatch.MergeMergePatches(nameAndHeight, ageAndEyes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Apply each patch individual against the original document\n\twithoutCombinedPatch, err := jsonpatch.MergePatch(original, nameAndHeight)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\twithoutCombinedPatch, err = jsonpatch.MergePatch(withoutCombinedPatch, ageAndEyes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Apply the combined patch against the original document\n\n\twithCombinedPatch, err := jsonpatch.MergePatch(original, combinedPatch)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Do both result in the same thing? They should!\n\tif jsonpatch.Equal(withCombinedPatch, withoutCombinedPatch) {\n\t\tfmt.Println(\"Both JSON documents are structurally the same!\")\n\t}\n\n\tfmt.Printf(\"combined merge patch: %s\", combinedPatch)\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Viper to Firestore Remote Provider (Go)\nDESCRIPTION: Example showing how to configure Viper to read configuration from a Google Firestore remote provider. It specifies the provider type, project ID, and collection/document path.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_23\n\nLANGUAGE: go\nCODE:\n```\nviper.AddRemoteProvider(\"firestore\", \"google-cloud-project-id\", \"collection/document\")\nviper.SetConfigType(\"json\") // Config's format: \"json\", \"toml\", \"yaml\", \"yml\"\nerr := viper.ReadRemoteConfig()\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Exporter with TLS in YAML\nDESCRIPTION: Example configuration for the OTLP exporter with TLS settings. It demonstrates how to set up multiple exporter instances with different TLS configurations.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/exporter/otlpexporter/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  otlp:\n    endpoint: otelcol2:4317\n    tls:\n      cert_file: file.cert\n      key_file: file.key\n  otlp/2:\n    endpoint: otelcol2:4317\n    tls:\n      insecure: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Over HTTP in Tempo\nDESCRIPTION: YAML configuration to enable streaming service over the HTTP port for use with Grafana. This setting is necessary as the service is only offered over the gRPC port by default.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/_index.md#2025-04-17_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nstream_over_http_enabled: true\n```\n\n----------------------------------------\n\nTITLE: Finding Traces with Database Access\nDESCRIPTION: TraceQL query that finds traces for a specific API endpoint that accesses a PostgreSQL database, useful for identifying abnormal database access patterns.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_5\n\nLANGUAGE: traceql\nCODE:\n```\n{span.service.name=\"frontend\" && name = \"GET /api/products/{id}\"} && {.db.system=\"postgresql\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Strict Merge with Koanf in Go\nDESCRIPTION: Example showing how to implement strict merging in Koanf where type changes during merging will raise errors. This prevents accidental type overrides when loading multiple configuration files.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_14\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"errors\"\n\t\"log\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/maps\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/parsers/yaml\"\n\t\"github.com/knadh/koanf/providers/file\"\n)\n\nvar conf = koanf.Conf{\n\tDelim:       \".\",\n\tStrictMerge: true,\n}\nvar k = koanf.NewWithConf(conf)\n\nfunc main() {\n\tyamlPath := \"mock/mock.yml\"\n\tif err := k.Load(file.Provider(yamlPath), yaml.Parser()); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n\n\tjsonPath := \"mock/mock.json\"\n\tif err := k.Load(file.Provider(jsonPath), json.Parser()); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingester in Grafana Tempo (YAML)\nDESCRIPTION: YAML configuration block for the Ingester component in Grafana Tempo. It includes settings for lifecycler, trace idle period, flush check period, block sizes, and other options related to trace ingestion and storage.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ningester:\n    lifecycler:\n        ring:\n            replication_factor: 3\n            [port: <int>]\n    [trace_idle_period: <duration>]\n    [flush_check_period: <duration>]\n    [max_block_bytes: <int>]\n    [max_block_duration: <duration>]\n    [ complete_block_timeout: <duration>]\n    [flush_all_on_shutdown: <bool> | default = false]\n```\n\n----------------------------------------\n\nTITLE: Implementing Enabled Instrument Check in Go\nDESCRIPTION: Example of checking if an instrument implements the EnabledInstrument interface before performing expensive computations.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/sdk/metric/internal/x/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype enabledInstrument interface { Enabled(context.Context) bool }\n\nctr, err := m.Int64Counter(\"expensive-counter\")\nc, ok := ctr.(enabledInstrument)\nif !ok || c.Enabled(context.Background()) {\n    c.Add(expensiveComputation())\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing IDs in TraceQL\nDESCRIPTION: Illustrates how to compare span or trace IDs with hex strings, ignoring leading zeros.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2023-11 TraceQL Extensions.md#2025-04-17_snippet_7\n\nLANGUAGE: traceql\nCODE:\n```\n{ span.id = \"8bf5306cb6a28\" }\n{ trace.id = \"0007f2b8d1c69375e0d46a9cf8072bc4\" }\n{ trace.id = \"7f2b8d1c69375e0d46a9cf8072bc4\" }\n```\n\n----------------------------------------\n\nTITLE: Defining a GRPC Collector in Go\nDESCRIPTION: Defines a new GRPC collector in Golang that processes streaming diffs and returns them from a GRPC server. It requires an async roundtripper, a combiner for GRPC, and a send function to match the server's send signature. This setup facilitates the asynchronous handling of GRPC requests and responses.\nSOURCE: https://github.com/grafana/tempo/blob/main/modules/frontend/pipeline/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc NewGRPCCollector[T combiner.TResponse](next AsyncRoundTripper[*http.Response], combiner combiner.GRPCCombiner[T], send func(T) error) *GRPCCollector[T]\n```\n\nLANGUAGE: Go\nCODE:\n```\n\n  collector := pipeline.NewGRPCCollector[*tempopb.SearchResponse](next, c, srv.Send)\n  err := collector.RoundTrip(req)\n\n```\n\n----------------------------------------\n\nTITLE: Using Custom Error Types with errwrap in Go\nDESCRIPTION: This snippet shows how a custom error type that implements the `Wrapper` interface can be used with `errwrap.ContainsType`. This allows for checking if a wrapped error chain contains a specific error type, even when using custom error structures. It demonstrates how the `errwrap.ContainsType` function can be used with custom error types that implement the `WrappedErrors()` method.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/errwrap/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nerr := &AppError{Err: fmt.Errorf(\"an error\")}\nif errwrap.ContainsType(err, fmt.Errorf(\"\")) {\n\t// This will work!\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Configuration Files for Changes\nDESCRIPTION: Example of setting up a watch on configuration files to detect and react to changes during runtime.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nviper.OnConfigChange(func(e fsnotify.Event) {\n\tfmt.Println(\"Config file changed:\", e.Name)\n})\nviper.WatchConfig()\n```\n\n----------------------------------------\n\nTITLE: Usage Metrics Endpoint Example\nDESCRIPTION: Example of usage metrics output showing bytes received per service, accessed via the /usage_metrics endpoint. Demonstrates the format of tracked metrics for different services.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/usage-tracker.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3200/usage_metrics\n# HELP tempo_usage_tracker_bytes_received_total bytes total received with these attributes\n# TYPE tempo_usage_tracker_bytes_received_total counter\ntempo_usage_tracker_bytes_received_total{service_name=\"article-service\",tenant=\"single-tenant\",tracker=\"cost-attribution\"} 7327\ntempo_usage_tracker_bytes_received_total{service_name=\"auth-service\",tenant=\"single-tenant\",tracker=\"cost-attribution\"} 8938\ntempo_usage_tracker_bytes_received_total{service_name=\"billing-service\",tenant=\"single-tenant\",tracker=\"cost-attribution\"} 2401\ntempo_usage_tracker_bytes_received_total{service_name=\"cart-service\",tenant=\"single-tenant\",tracker=\"cost-attribution\"} 4116\ntempo_usage_tracker_bytes_received_total{service_name=\"postgres\",tenant=\"single-tenant\",tracker=\"cost-attribution\"} 3571\ntempo_usage_tracker_bytes_received_total{service_name=\"shop-backend\",tenant=\"single-tenant\",tracker=\"cost-attribution\"} 17619\n```\n\n----------------------------------------\n\nTITLE: Enabling Service Graphs in Grafana Agent Configuration (YAML)\nDESCRIPTION: This YAML configuration snippet enables service graphs in Grafana Agent. It sets the 'enabled' flag to true within the 'service_graphs' section of the traces configuration.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/grafana-agent/service-graphs.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntraces:\n  configs:\n    - name: default\n      ...\n      service_graphs:\n        enabled: true\n```\n\n----------------------------------------\n\nTITLE: Basic OTLP Receiver Configuration in YAML\nDESCRIPTION: Demonstrates the minimal configuration required to enable the OTLP receiver with both gRPC and HTTP protocols.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/receiver/otlpreceiver/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n```\n\n----------------------------------------\n\nTITLE: Enabling Discarded Span Logging in Tempo Distributor (YAML)\nDESCRIPTION: This configuration snippet demonstrates how to enable logging for discarded spans in the Grafana Tempo distributor.  Enabling `log_discarded_spans` provides valuable insights into why spans are being rejected, aiding in troubleshooting.  Setting `include_all_attributes` to true provides more verbose logs.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/send-traces/max-trace-limit-reached.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"distributor:\\n  log_discarded_spans:\\n    enabled: true\\n    include_all_attributes: false # set to true for more verbose logs\"\n```\n\n----------------------------------------\n\nTITLE: TempoStack Configuration with OpenTelemetry Sidecar Integration in YAML\nDESCRIPTION: YAML configuration for a TempoStack instance that sends trace data to an OpenTelemetry sidecar. This configures Tempo components to report trace data to the Jaeger agent endpoint on localhost.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/monitor.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: tempo.grafana.com/v1alpha1\nkind: TempoStack\nmetadata:\n  name: simple-stack\nspec:\n  template:\n    queryFrontend:\n      jaegerQuery:\n        enabled:\n  storage:\n    secret:\n      type: s3\n      name: minio-test\n  storageSize: 200M\n  observability:\n    tracing:\n      sampling_fraction: \"1.0\"\n      jaeger_agent_endpoint: localhost:6831\n```\n\n----------------------------------------\n\nTITLE: Error Cascading Query\nDESCRIPTION: Query to find failing endpoint and descendant error spans\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_38\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ span.http.url = \"/path/of/api\" && status = error } &>> { status = error }\n```\n\n----------------------------------------\n\nTITLE: Finding HTTP Errors with TraceQL\nDESCRIPTION: Query to find all traces from the mythical-requester service where HTTP response code is 400 or above, selecting the http.target attribute for each matched span.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/introduction/solutions-with-traces/traces-diagnose-errors.md#2025-04-17_snippet_0\n\nLANGUAGE: traceql\nCODE:\n```\n{ resource.service.name = \"mythical-requester\" && span.http.status_code >= 400 } | select(span.http.target)\n```\n\n----------------------------------------\n\nTITLE: Parsing Input with Participle in Go\nDESCRIPTION: Go code snippet showing how to use a Participle parser to parse input and produce an AST.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/participle/v2/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nast, err := parser.ParseString(\"\", \"size = 10\")\n// ast == &INI{\n//   Properties: []*Property{\n//     {Key: \"size\", Value: &Value{Int: &10}},\n//   },\n// }\n```\n\n----------------------------------------\n\nTITLE: Structural Operators - Finding Leaf Spans\nDESCRIPTION: TraceQL query using the no-child operator to find all leaf spans that end in a specific service.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_10\n\nLANGUAGE: traceql\nCODE:\n```\n{ } !< { resource.service.name = \"productcatalogservice\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Multi-tenant Tempo Instance\nDESCRIPTION: Kubernetes Custom Resource configuration for deploying a basic multi-tenant Tempo instance without authentication. This configuration specifies storage and resource requirements.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/multitenancy.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: tempo.grafana.com/v1alpha1\nkind: TempoStack\nmetadata:\n  name: simplest\nspec:\n  tenants: {}\n  storage:\n    secret:\n      name: minio-test\n      type: s3\n  storageSize: 1Gi\n  resources:\n    total:\n      limits:\n        memory: 2Gi\n        cpu: 2000m\n```\n\n----------------------------------------\n\nTITLE: ULID Generation Example in Go\nDESCRIPTION: Example demonstrating how to generate a ULID using a timestamp and entropy source. Shows the usage of Monotonic entropy generation with a random source.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/oklog/ulid/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc ExampleULID() {\n\tt := time.Unix(1000000, 0)\n\tentropy := ulid.Monotonic(rand.New(rand.NewSource(t.UnixNano())), 0)\n\tfmt.Println(ulid.MustNew(ulid.Timestamp(t), entropy))\n\t// Output: 0000XSNJG0MQJHBF4QX1EFD6Y3\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Values to Attributes in OTTL\nDESCRIPTION: Function to append single or multiple string values to a target field, converting scalar values to arrays if needed. Supports adding values to log or resource attributes.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: OTTL\nCODE:\n```\nappend(log.attributes[\"tags\"], \"prod\")\n```\n\nLANGUAGE: OTTL\nCODE:\n```\nappend(log.attributes[\"tags\"], values = [\"staging\", \"staging:east\"])\n```\n\nLANGUAGE: OTTL\nCODE:\n```\nappend(log.attributes[\"tags_copy\"], log.attributes[\"tags\"])\n```\n\n----------------------------------------\n\nTITLE: Calculating Multiple Percentiles of Duration in TraceQL\nDESCRIPTION: This query computes the 99th, 90th, and 50th percentile of the duration attribute on all spans with name 'GET /:endpoint' using the quantile_over_time() function in TraceQL.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/metrics-queries/functions.md#2025-04-17_snippet_10\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ name = \"GET /:endpoint\" } | quantile_over_time(duration, .99, .9, .5)\n```\n\n----------------------------------------\n\nTITLE: Tempo Distributor Receiver Configuration (Default)\nDESCRIPTION: This YAML snippet demonstrates the default receiver configuration in Tempo. It shows the `otlp` receiver enabled for both `grpc` and `http` protocols, which previously defaulted to binding on all interfaces (`0.0.0.0`).\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-7.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\ndistributor:\n  receivers:\n    otlp:\n      protocols:\n        grpc:\n        http:\n```\n```\n\n----------------------------------------\n\nTITLE: Example Cache Configuration in YAML\nDESCRIPTION: This YAML snippet provides an example setup for using memcached and redis as cache solutions in the Tempo application. It includes specific role assignments, host configurations for memcached, and endpoint setups for redis. This configuration example assists in understanding how to structure cache settings effectively within a YAML file.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\ncache:\n  background:\n    writeback_goroutines: 5\n  caches:\n  - roles:\n    - parquet-footer\n    memcached:\n      host: memcached-instance\n  - roles:\n    - bloom\n    redis:\n      endpoint: redis-instance\n\n```\n\n----------------------------------------\n\nTITLE: Basic Error Wrapping and Checking in Go\nDESCRIPTION: This snippet demonstrates basic usage of the errwrap package for wrapping errors and checking if an error contains a specific string or type. It includes a function that simulates an error-prone operation and wraps the error using `errwrap.Wrapf`.  It utilizes `errwrap.Contains` and `errwrap.ContainsType` to check for specific error conditions, and `errwrap.GetType` to extract a specific error.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/errwrap/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// A function that always returns an error, but wraps it, like a real\n// function might.\nfunc tryOpen() error {\n\t_, err := os.Open(\"/i/dont/exist\")\n\tif err != nil {\n\t\treturn errwrap.Wrapf(\"Doesn't exist: {{err}}\", err)\n\t}\n\n\treturn nil\n}\n\nfunc main() {\n\terr := tryOpen()\n\n\t// We can use the Contains helpers to check if an error contains\n\t// another error. It is safe to do this with a nil error, or with\n\t// an error that doesn't even use the errwrap package.\n\tif errwrap.Contains(err, \"does not exist\") {\n\t\t// Do something\n\t}\n\tif errwrap.ContainsType(err, new(os.PathError)) {\n\t\t// Do something\n\t}\n\n\t// Or we can use the associated `Get` functions to just extract\n\t// a specific error. This would return nil if that specific error doesn't\n\t// exist.\n\tperr := errwrap.GetType(err, new(os.PathError))\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Processing with Worker Pool\nDESCRIPTION: Shows how to process a stream of data using a fixed pool of goroutines. Compares the verbose standard library implementation with the simplified pool package from conc.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/sourcegraph/conc/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc process(stream chan int) {\n    var wg sync.WaitGroup\n    for i := 0; i < 10; i++ {\n        wg.Add(1)\n        go func() {\n            defer wg.Done()\n            for elem := range stream {\n                handle(elem)\n            }\n        }()\n    }\n    wg.Wait()\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc process(stream chan int) {\n    p := pool.New().WithMaxGoroutines(10)\n    for elem := range stream {\n        elem := elem\n        p.Go(func() {\n            handle(elem)\n        })\n    }\n    p.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tempo with OIDC Authentication\nDESCRIPTION: Configuration for Tempo instance with OIDC authentication and static RBAC authorization. Includes gateway configuration and tenant-specific OIDC settings.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/multitenancy.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: tempo.grafana.com/v1alpha1\nkind: TempoStack\nmetadata:\n  name: simplest\nspec:\n  template:\n    queryFrontend:\n      jaegerQuery:\n        enabled: true\n    gateway:\n      enabled: true\n  storage:\n    secret:\n      type: s3\n      name: minio-test\n  storageSize: 200M\n  tenants:\n    mode: static\n    authentication:\n      - tenantName: test-oidc\n        tenantId: test-oidc\n        oidc:\n          issuerURL: http://dex.default.svc.cluster.local:30556/dex\n          redirectURL: http://tempo-simplest-gateway.default.svc.cluster.local:8080/oidc/test-oidc/callback\n          usernameClaim: email\n          secret:\n            name: oidc-test\n    authorization:\n      roleBindings:\n      - name: \"test\"\n        roles:\n        - read-write\n        subjects:\n        - kind: user\n          name: \"admin@example.com\"\n      roles:\n      - name: read-write\n        permissions:\n        - read\n        - write\n        resources:\n        - traces\n        tenants:\n        - test-oidc\n```\n\n----------------------------------------\n\nTITLE: Advanced Expr Example with Custom Types in Go\nDESCRIPTION: An example showing how to use Expr with custom struct types in Go. It demonstrates how to perform operations on collections using the 'all' function with custom validation logic.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/expr-lang/expr/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/expr-lang/expr\"\n)\n\ntype Tweet struct {\n\tLen int\n}\n\ntype Env struct {\n\tTweets []Tweet\n}\n\nfunc main() {\n\tcode := `all(Tweets, {.Len <= 240})`\n\n\tprogram, err := expr.Compile(code, expr.Env(Env{}))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tenv := Env{\n\t\tTweets: []Tweet{{42}, {98}, {69}},\n\t}\n\toutput, err := expr.Run(program, env)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Println(output)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Extended Functionality of OpenTelemetry SpanContext in Go\nDESCRIPTION: This snippet demonstrates how to access extended functionality of the OpenTelemetry SpanContext beyond the OpenTracing API. It shows how to retrieve TraceID, SpanID, and TraceFlags from a SpanContext.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/bridge/opentracing/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype spanContextProvider interface {\n\tIsSampled() bool\n\tTraceID() trace.TraceID\n\tSpanID() trace.SpanID\n\tTraceFlags() trace.TraceFlags\n\t... // any other available method can be added here to access it\n}\n\nvar sc opentracing.SpanContext = ...\nif s, ok := sc.(spanContextProvider); ok {\n\t// Use TraceID by s.TraceID()\n\t// Use SpanID by s.SpanID()\n\t// Use TraceFlags by s.TraceFlags()\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Version Constraints in Go\nDESCRIPTION: This snippet shows how to create a version and a set of constraints, and then check if the version satisfies those constraints using the go-version library.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-version/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nv1, err := version.NewVersion(\"1.2\")\n\n// Constraints example.\nconstraints, err := version.NewConstraint(\">= 1.0, < 1.4\")\nif constraints.Check(v1) {\n\tfmt.Printf(\"%s satisfies constraints %s\", v1, constraints)\n}\n```\n\n----------------------------------------\n\nTITLE: Using seed.MustInit() and seed.Init() in Go\nDESCRIPTION: Examples showing how to use the seed library to initialize Go's random number generator. The example demonstrates both the MustInit() function which panics on error and the Init() function which returns an error when secure seeding fails.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/sean-/seed/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage mypackage\n\nimport (\n  \"github.com/sean-/seed\"\n)\n\n// MustInit will panic() if it is unable to set a high-entropy random seed:\nfunc init() {\n  seed.MustInit()\n}\n\n// Or if you want to not panic() and can actually handle this error:\nfunc init() {\n  if secure, err := !seed.Init(); !secure {\n    // Handle the error\n    //panic(fmt.Sprintf(\"Unable to securely seed Go's RNG: %v\", err))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Directory and Starting Docker Compose Stack\nDESCRIPTION: This snippet demonstrates how to create the required storage directory and start the Docker Compose stack for the Grafana Tempo and Vulture services. Docker Compose is a prerequisite for this setup.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/vulture/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir tempo-data/\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Listing Blobs in a Container\nDESCRIPTION: Example demonstrating how to enumerate blobs in a container using pagination.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\taccount       = \"https://MYSTORAGEACCOUNT.blob.core.windows.net/\"\n\tcontainerName = \"sample-container\"\n)\n\n// authenticate with Azure Active Directory\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n// TODO: handle error\n\n// create a client for the specified storage account\nclient, err := azblob.NewClient(account, cred, nil)\n// TODO: handle error\n\n// blob listings are returned across multiple pages\npager := client.NewListBlobsFlatPager(containerName, nil)\n\n// continue fetching pages until no more remain\nfor pager.More() {\n  // advance to the next page\n\tpage, err := pager.NextPage(context.TODO())\n\t// TODO: handle error\n\n\t// print the blob names for this page\n\tfor _, blob := range page.Segment.BlobItems {\n\t\tfmt.Println(*blob.Name)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic OTLP/HTTP Exporter in YAML\nDESCRIPTION: Demonstrates the minimal configuration required for the OTLP/HTTP exporter, specifying only the endpoint.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/exporter/otlphttpexporter/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  otlphttp:\n    endpoint: https://example.com:4318\n```\n\n----------------------------------------\n\nTITLE: Configuring Search in YAML\nDESCRIPTION: Search configuration including chunk size, prefetch settings, and buffer configurations\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nchunk_size_bytes: <uint32> | default = 1000000\nprefetch_trace_count: <int> | default = 1000\nread_buffer_count: <int> | default = 32\nread_buffer_size_bytes: <int> | default = 1048576\ncache_control:\n    footer: <bool> | default = false\n    column_index: <bool> | default = false\n    offset_index: <bool> | default = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Multitenancy Overrides in YAML for Tempo Metrics Generator\nDESCRIPTION: This YAML configuration demonstrates how to set up per-tenant overrides for the metrics-generator in Tempo. It includes custom processors and remote write headers for different teams, using environment variables for authentication tokens.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/metrics-generator/multitenancy.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  team-traces-a:\n    metrics_generator:\n      processors: [ 'span-metrics' ]\n      remote_write_headers:\n        Authorization: ${PROM_A_BASIC_AUTH}\n  team-traces-b:\n    metrics_generator:\n      processors: [ 'span-metrics', 'service-graphs' ]\n      remote_write_headers:\n        Authorization: ${PROM_B_BEARER_AUTH}\n```\n\n----------------------------------------\n\nTITLE: Calculating Minimum Status Code in TraceQL\nDESCRIPTION: This example computes the minimum status code value of all spans named 'GET /:endpoint' using the min_over_time() function in TraceQL.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/metrics-queries/functions.md#2025-04-17_snippet_5\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ name = \"GET /:endpoint\" } | min_over_time(span.http.status_code)\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC for Trace Data Access\nDESCRIPTION: RBAC configuration for enabling read access to trace data for authenticated users in dev and prod tenants.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/multitenancy.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: tempostack-traces-reader\nrules:\n  - apiGroups:\n      - 'tempo.grafana.com'\n    resources:\n      - dev\n      - prod\n    resourceNames:\n      - traces\n    verbs:\n      - 'get'\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: tempostack-traces-reader\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: tempostack-traces-reader\nsubjects:\n  - kind: Group\n    apiGroup: rbac.authorization.k8s.io\n    name: system:authenticated\n```\n\n----------------------------------------\n\nTITLE: Configuring Distributor Message Size Limits for Ingestion in Tempo\nDESCRIPTION: YAML configuration for increasing the message size limit in the distributor component for ingestion in Tempo. This particularly affects the OTLP receiver when receiving trace data via gRPC.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/querying/response-too-large.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndistributor:\n  receivers:\n    otlp:\n      grpc:\n        max_recv_msg_size_mib: <size>\n```\n\n----------------------------------------\n\nTITLE: Measuring Struct Size in Go\nDESCRIPTION: This function calculates the size of a struct in memory. It uses reflection to iterate through the struct fields and accumulate their sizes, including nested structs and pointers.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alicebob/miniredis/v2/size/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc Of(v interface{}) int {\n\treturn of(reflect.ValueOf(v), make(map[uintptr]bool))\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Spans by Resource Attribute in Grafana Tempo (YAML)\nDESCRIPTION: This example shows how to filter spans based on a resource attribute. It includes spans where the 'resource.location' attribute is 'earth', using a strict match type.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/metrics-generator/span_metrics.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nmetrics_generator:\n  processor:\n    span_metrics:\n      filter_policies:\n        - include:\n            match_type: strict\n            attributes:\n              - key: resource.location\n                value: earth\n```\n\n----------------------------------------\n\nTITLE: Updated Querier Configuration Structure\nDESCRIPTION: New YAML configuration structure for querier settings in Tempo 1.4, with reorganized search parameters under a dedicated search section.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v1-4.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nquerier:\n  search:\n      query_timeout: 30s\n      prefer_self: 2\n      external_endpoints: []\n```\n\n----------------------------------------\n\nTITLE: Converting Bytes to Signed Int64 Using Big Endian in Go\nDESCRIPTION: This Go code snippet demonstrates converting a byte array to an unsigned 64-bit integer and then to a signed int64 using Big Endian byte order. This conversion is essential for handling Jaeger trace and span IDs represented as sequences of bytes.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/translator/jaeger/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar (\n    id       []byte = []byte{0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}\n    unsigned uint64 = binary.BigEndian.Uint64(id)\n    signed   int64  = int64(unsigned)\n)\nfmt.Println(\"unsigned:\", unsigned)\nfmt.Println(\"  signed:\", signed)\n// Output:\n// unsigned: 18374686479671623680\n//   signed: -72057594037927936\n```\n\n----------------------------------------\n\nTITLE: gRPC Server Configuration\nDESCRIPTION: Detailed configuration settings for the gRPC server component including networking, TLS, and performance parameters\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/receiver/otlpreceiver/config.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                   | Type                                                                  | Default      | Docs                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n|------------------------|-----------------------------------------------------------------------|--------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| endpoint               | string                                                                | localhost:4317 | Endpoint configures the address for this network connection. For TCP and UDP networks, the address has the form \"host:port\". The host must be a literal IP address, or a host name that can be resolved to IP addresses. The port must be a literal port number or a service name. If the host is a literal IPv6 address it must be enclosed in square brackets, as in \"[2001:db8::1]:80\" or \"[fe80::1%zone]:80\". The zone specifies the scope of the literal IPv6 address as defined in RFC 4007. |\n| transport              | string                                                                | tcp          | Transport to use. Known protocols are \"tcp\", \"tcp4\" (IPv4-only), \"tcp6\" (IPv6-only), \"udp\", \"udp4\" (IPv4-only), \"udp6\" (IPv6-only), \"ip\", \"ip4\" (IPv4-only), \"ip6\" (IPv6-only), \"unix\", \"unixgram\" and \"unixpacket\".                                                                                                                                                                                                                                                                               |\n| tls                    | [configtls-TLSServerSetting](#configtls-tlsserversetting)             | <no value>   | Configures the protocol to use TLS. The default value is nil, which will cause the protocol to not use TLS.                                                                                                                                                                                                                                                                                                                                                                                        |\n| max_recv_msg_size_mib  | uint64                                                                | <no value>   | MaxRecvMsgSizeMiB sets the maximum size (in MiB) of messages accepted by the server.                                                                                                                                                                                                                                                                                                                                                                                                               |\n| max_concurrent_streams | uint32                                                                | <no value>   | MaxConcurrentStreams sets the limit on the number of concurrent streams to each ServerTransport. It has effect only for streaming RPCs.                                                                                                                                                                                                                                                                                                                                                            |\n| read_buffer_size       | int                                                                   | 524288       | ReadBufferSize for gRPC server. See grpc.ReadBufferSize (https://godoc.org/google.golang.org/grpc#ReadBufferSize).                                                                                                                                                                                                                                                                                                                                                                                 |\n| write_buffer_size      | int                                                                   | <no value>   | WriteBufferSize for gRPC server. See grpc.WriteBufferSize (https://godoc.org/google.golang.org/grpc#WriteBufferSize).                                                                                                                                                                                                                                                                                                                                                                              |\n| keepalive              | [configgrpc-KeepaliveServerConfig](#configgrpc-keepaliveserverconfig) | <no value>   | Keepalive anchor for all the settings related to keepalive.                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| auth                   | [configauth-Authentication](#configauth-authentication)               | <no value>   | Auth for this receiver                                                                                                                                                                                                                                                                                                                                                                                                                                                                             |\n```\n\n----------------------------------------\n\nTITLE: Filtering traces by environment in TraceQL\nDESCRIPTION: This TraceQL query finds traces that passed through the 'production' environment. It uses resource attributes to filter traces based on the deployment environment.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_21\n\nLANGUAGE: TraceQL\nCODE:\n```\n\"{ resource.deployment.environment = \\\"production\\\" }\"\n```\n\n----------------------------------------\n\nTITLE: Unmarshalling and Marshalling Configuration in Go\nDESCRIPTION: Demonstrates complex unmarshalling of nested configurations into structs, using field tags and supporting advanced configuration parsing and serialization.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/providers/file\"\n)\n\nvar (\n\tk      = koanf.New(\".\")\n\tparser = json.Parser()\n)\n\nfunc main() {\n\t// Load JSON config\n\tk.Load(file.Provider(\"mock/mock.json\"), parser)\n\n\ttype childStruct struct {\n\t\tName       string            `koanf:\"name\"`\n\t\tType       string            `koanf:\"type\"`\n\t\tEmpty      map[string]string `koanf:\"empty\"`\n\t\tGrandChild struct {\n\t\t\tIds []int `koanf:\"ids\"`\n\t\t\tOn  bool  `koanf:\"on\"`\n\t\t} `koanf:\"grandchild1\"`\n\t}\n\n\tvar out childStruct\n\n\t// Unmarshal with advanced config\n\tk.UnmarshalWithConf(\"parent1.child1\", &out, koanf.UnmarshalConf{Tag: \"koanf\"})\n\n\t// Marshal back to JSON\n\tb, _ := k.Marshal(parser)\n\tfmt.Println(string(b))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dedicated Columns in YAML\nDESCRIPTION: Configuration example showing how to set up dedicated attribute columns in both storage block and overrides sections. Includes options for tenant-specific and wildcard configurations.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/dedicated_columns.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Storage configuration for traces\nstorage:\n  trace:\n    block:\n      version: vParquet3\n      # Default dedicated columns for all blocks\n      parquet_dedicated_columns:\n        - name: <string>, # name of the attribute\n          type: <string>, # type of the attribute. options: string\n          scope: <string> # scope of the attribute. options: resource, span\n\noverrides:\n  # Global overrides for dedicated columns configuration\n  parquet_dedicated_columns:\n    - name: <string>, # name of the attribute\n      type: <string>, # type of the attribute. options: string\n      scope: <string> # scope of the attribute. options: resource, span\n\n  per_tenant_override_config: /conf/overrides.yaml\n---\n# /conf/overrides.yaml\n# Tenant-specific overrides configuration\noverrides:\n  \"<tenant id>\":\n    parquet_dedicated_columns:\n      - name: <string>, # name of the attribute\n        type: <string>, # type of the attribute. options: string\n        scope: <string> # scope of the attribute. options: resource, span\n\n  # A \"wildcard\" override can be used that will apply to all tenants if a match is not found.\n  \"*\":\n    parquet_dedicated_columns:\n      - name: <string>, # name of the attribute\n        type: <string>, # type of the attribute. options: string\n        scope: <string> # scope of the attribute. options: resource, span\n```\n\n----------------------------------------\n\nTITLE: Creating Allow and Deny Key Filters in Go OpenTelemetry SDK\nDESCRIPTION: Adds NewAllowKeysFilter and NewDenyKeysFilter functions to go.opentelemetry.io/otel/attribute package for convenient creation of allow-keys and deny-keys filters.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\n\"go.opentelemetry.io/otel/attribute\".NewAllowKeysFilter\n\"go.opentelemetry.io/otel/attribute\".NewDenyKeysFilter\n```\n\n----------------------------------------\n\nTITLE: Connecting Viper to etcd3 Remote Provider (Go)\nDESCRIPTION: Example showing how to configure Viper to read configuration from an etcd3 remote provider. It specifies the provider type, endpoint, and path, and then reads the remote configuration.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nviper.AddRemoteProvider(\"etcd3\", \"http://127.0.0.1:4001\",\"/config/hugo.json\")\nviper.SetConfigType(\"json\") // because there is no file extension in a stream of bytes, supported extensions are \"json\", \"toml\", \"yaml\", \"yml\", \"properties\", \"props\", \"prop\", \"env\", \"dotenv\"\nerr := viper.ReadRemoteConfig()\n```\n\n----------------------------------------\n\nTITLE: Configuring Trace Block Compression in Tempo\nDESCRIPTION: YAML configuration for setting the compression algorithm for trace blocks in Tempo storage. Uses zstd compression which reduces storage costs to approximately 15% of uncompressed size.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/compression.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  trace:\n    block:\n      v2_encoding: zstd\n```\n\n----------------------------------------\n\nTITLE: Using Select to Return Service Names\nDESCRIPTION: TraceQL query that finds traces with HTTP status 200 and returns the service name along with the traces using the select operator.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_12\n\nLANGUAGE: traceql\nCODE:\n```\n{ span.http.status_code = 200 } | select(resource.service.name)\n```\n\n----------------------------------------\n\nTITLE: Large Request Size Query\nDESCRIPTION: Query using arithmetic to find large HTTP requests\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_46\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ span.http.request_content_length > 10 * 1024 * 1024 }\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Tempo Metrics Generator Authentication\nDESCRIPTION: This bash script sets up environment variables for authentication tokens used in the Tempo metrics-generator configuration. It demonstrates how to create Basic and Bearer authentication tokens for different teams.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/metrics-generator/multitenancy.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport PROM_A_BASIC_AUTH=\"Basic $(echo \"team-a:$(cat /token-prometheus-a)\"|base64|tr -d '[:space:]')\"\nexport PROM_B_BEARER_AUTH=\"Bearer $(cat /token-prometheus-b)\"\n```\n\n----------------------------------------\n\nTITLE: HTTP Server Example using go-proxyproto\nDESCRIPTION: This Go code snippet shows how to integrate go-proxyproto with an HTTP server. It creates an HTTP server, wraps the listener with a proxyproto.Listener to handle PROXY protocol headers, and then serves the HTTP server using the proxy protocol listener.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pires/go-proxyproto/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n\"package main\n\nimport (\n\t\\\"net\\\"\n\t\\\"net/http\\\"\n\t\\\"time\\\"\n\n\t\\\"github.com/pires/go-proxyproto\\\"\n)\n\nfunc main() {\n\tserver := http.Server{\n\t\tAddr: \\\":8080\\\",\n\t}\n\n\tln, err := net.Listen(\\\"tcp\\\", server.Addr)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tproxyListener := &proxyproto.Listener{\n\t\tListener:          ln,\n\t\tReadHeaderTimeout: 10 * time.Second,\n\t}\n\tdefer proxyListener.Close()\n\n\tserver.Serve(proxyListener)\n}\n\"\n```\n\n----------------------------------------\n\nTITLE: Using HedgedHTTP Client Example\nDESCRIPTION: Example demonstrating how to create and use a hedged HTTP client. Shows configuration of timeout and maximum request attempts, making a GET request to Google.com with proper error handling and resource cleanup.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/cristalhq/hedgedhttp/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nctx := context.Background()\nreq, err := http.NewRequestWithContext(ctx, http.MethodGet, \"https://google.com\", http.NoBody)\nif err != nil {\n\tpanic(err)\n}\n\ntimeout := 10 * time.Millisecond\nupto := 7\nclient := &http.Client{Timeout: time.Second}\nhedged, err := hedgedhttp.NewClient(timeout, upto, client)\nif err != nil {\n\tpanic(err)\n}\n\n// will take `upto` requests, with a `timeout` delay between them\nresp, err := hedged.Do(req)\nif err != nil {\n\tpanic(err)\n}\ndefer resp.Body.Close()\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for Jaeger Query UI\nDESCRIPTION: This command sets up port forwarding to access the Jaeger Query UI locally on port 16686.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/quickstart.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl port-forward svc/tempo-simplest-query-frontend 16686:16686\n```\n\n----------------------------------------\n\nTITLE: Configuring Conntrack Dialer for HTTP DefaultClient in Go\nDESCRIPTION: This snippet demonstrates how to set up connection tracking for the default HTTP client in Go. It replaces the DialContext function of the default HTTP transport with a custom one that includes tracing and connection tracking.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/mwitkow/go-conntrack/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nhttp.DefaultTransport.(*http.Transport).DialContext = conntrack.NewDialContextFunc(\n    conntrack.DialWithTracing(),\n    conntrack.DialWithDialer(&net.Dialer{\n        Timeout:   30 * time.Second,\n        KeepAlive: 30 * time.Second,\n    }),\n)\n```\n\n----------------------------------------\n\nTITLE: Finding Traces for a Specific Operation\nDESCRIPTION: TraceQL query that filters traces based on a specific service name and operation name, useful for isolating transactions from a particular service.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_1\n\nLANGUAGE: traceql\nCODE:\n```\n{resource.service.name = \"frontend\" && name = \"POST /api/orders\"}\n```\n\n----------------------------------------\n\nTITLE: Writing a Parquet File with Explicit Schema\nDESCRIPTION: Demonstrates writing a Parquet file with an explicitly defined schema. This allows for more control over the schema used in the Parquet file, separate from the default derived from the data type.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/parquet-go/parquet-go/README.md#2025-04-17_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n\"schema := parquet.SchemaOf(new(RowType))\nwriter := parquet.NewGenericWriter[any](output, schema)\n...\"\n```\n\n----------------------------------------\n\nTITLE: Formatting TraceQL Search Results with jq\nDESCRIPTION: This command combines the TraceQL search curl command with jq to format the JSON response in a more human-readable output. It's useful for easier interpretation of the search results.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/pushing-spans-with-http.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -G -s http://localhost:3200/api/search --data-urlencode 'q={ .service.name = \"my.service\" }' | jq\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingester Lifecycler Port for Proxy Integration\nDESCRIPTION: YAML configuration to set the ingester's lifecycler port. This allows the ingester to listen on one port (default 9095) but advertise itself in the ring on a different port (12345) for working with sidecar proxies.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/network/sidecar-proxy.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ningester:\n   lifecycler:\n       port: 12345\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Agent for Self-Scraping and Remote Write (YAML)\nDESCRIPTION: This YAML configuration sets up Grafana Agent to self-scrape metrics and send them to a Prometheus-compatible backend using remote write. It defines a scrape job for the local agent and specifies the remote write URL.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/grafana-agent/service-graphs.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n  configs:\n    - name: default\n      scrape_configs:\n        - job_name: local_scrape\n          static_configs:\n            - targets: ['127.0.0.1:12345']\n      remote_write:\n        - url: <remote_write>\n```\n\n----------------------------------------\n\nTITLE: Using Tempo CLI for TraceQL Search Queries\nDESCRIPTION: This command allows the user to search traces using TraceQL within the specified time range. It requires a host-port combination and a TraceQL query, along with optional parameters for GRPC usage and result limits.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/tempo_cli.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntempo-cli query api search <host-port> <trace-ql> [<start> <end>]\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector Service Metrics Table Documentation\nDESCRIPTION: Markdown tables defining the characteristics of various internal telemetry metrics including CPU usage, memory utilization, heap allocation, and process uptime metrics. Each metric is documented with its specific measurement units, metric types, value types, and monotonic properties.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/service/documentation.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Unit | Metric Type | Value Type | Monotonic |\n| ---- | ----------- | ---------- | --------- |\n| s | Sum | Double | true |\n\n| Unit | Metric Type | Value Type |\n| ---- | ----------- | ---------- |\n| By | Gauge | Int |\n\n| Unit | Metric Type | Value Type |\n| ---- | ----------- | ---------- |\n| By | Gauge | Int |\n\n| Unit | Metric Type | Value Type | Monotonic |\n| ---- | ----------- | ---------- | --------- |\n| By | Sum | Int | true |\n\n| Unit | Metric Type | Value Type |\n| ---- | ----------- | ---------- |\n| By | Gauge | Int |\n\n| Unit | Metric Type | Value Type | Monotonic |\n| ---- | ----------- | ---------- | --------- |\n| s | Sum | Double | true |\n```\n\n----------------------------------------\n\nTITLE: Querying Client-Specific Calls - Instant Query\nDESCRIPTION: PromQL query to show total calls where a specific service acts as the client over a 7-day period. Filters results to show only connections from a particular client.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/metrics-generator/service_graphs/metrics-queries.md#2025-04-17_snippet_2\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(traces_service_graph_request_server_seconds_count{client=\"foo\"}[7d])) by (server) > 0\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud Storage Client in Go\nDESCRIPTION: Creates a new storage client for interacting with Google Cloud Storage. Requires a valid context and proper authentication. Used as the primary interface for performing storage operations.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/cloud.google.com/go/storage/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nclient, err := storage.NewClient(ctx)\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using an Objx Map (Complete Example)\nDESCRIPTION: A comprehensive example showing how to create an objx.Map from JSON and access various properties with type conversion.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/stretchr/objx/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Use MustFromJSON to make an objx.Map from some JSON\nm := objx.MustFromJSON(`{\"name\": \"Mat\", \"age\": 30}`)\n\n// Get the details\nname := m.Get(\"name\").Str()\nage := m.Get(\"age\").Int()\n\n// Get their nickname (or use their name if they don't have one)\nnickname := m.Get(\"nickname\").Str(name)\n```\n\n----------------------------------------\n\nTITLE: Using helper functions to get flag values\nDESCRIPTION: Shows how to use helper functions like GetInt() to retrieve flag values from a FlagSet when dealing with pointers becomes cumbersome.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ni, err := flagset.GetInt(\"flagname\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Span Processor with Environment Variables in Go\nDESCRIPTION: Added support to configure the batch span processor using environment variables in the OpenTelemetry Go SDK. The code sets up environment variables to control various batch processor settings.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_23\n\nLANGUAGE: Go\nCODE:\n```\nOTEL_BSP_SCHEDULE_DELAY=<value>\nOTEL_BSP_EXPORT_TIMEOUT=<value>\nOTEL_BSP_MAX_QUEUE_SIZE=<value>\nOTEL_BSP_MAX_EXPORT_BATCH_SIZE=<value>\n```\n\n----------------------------------------\n\nTITLE: Configuring local-blocks processor for a specific tenant\nDESCRIPTION: This YAML configuration shows how to enable the local-blocks processor for a specific tenant using the per-tenant overrides.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/traceql-metrics.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  overrides:\n    'tenantID':\n      metrics_generator_processors:\n        - local-blocks\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Data Source for Tempo Multi-tenancy\nDESCRIPTION: YAML configuration for setting up the Tempo data source in Grafana with tenant header information.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/manage-advanced-systems/multitenancy.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Tempo-Multitenant\n  jsonData:\n    httpHeaderName1: 'X-Scope-OrgID'\n  secureJsonData:\n    httpHeaderValue1: 'foo-bar-baz'\n```\n\n----------------------------------------\n\nTITLE: Example OTTL Statement for Setting Span Attributes\nDESCRIPTION: This snippet demonstrates a basic OTTL statement that sets a new span attribute named 'test' with a value of 'pass' when the attribute doesn't already exist.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/README.md#2025-04-17_snippet_0\n\nLANGUAGE: ottl\nCODE:\n```\nset(span.attributes[\"test\"], \"pass\") where span.attributes[\"test\"] == nil\n```\n\n----------------------------------------\n\nTITLE: Using Tempo-cli for Attribute Analysis\nDESCRIPTION: Command example showing how to use tempo-cli to analyze blocks and find suitable candidates for dedicated attribute columns.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/dedicated_columns.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntempo-cli analyse blocks --backend=local --bucket=./cmd/tempo-cli/test-data/ single-tenant\n```\n\n----------------------------------------\n\nTITLE: GCP Resource Detector with Environment Variables\nDESCRIPTION: Example showing how to configure the GCP resource detector with environment variable support using WithFromEnv option to unpack OTEL_RESOURCE_ATTRIBUTES.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/contrib/detectors/gcp/README.md#2025-04-17_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\n...\n// Detect your resources\nres, err := resource.New(ctx,\n    resource.WithDetectors(gcp.NewDetector()),\n    resource.WithTelemetrySDK(),\n    resource.WithFromEnv(), // unpacks OTEL_RESOURCE_ATTRIBUTES\n    // Add your own custom attributes to identify your application\n    resource.WithAttributes(\n        semconv.ServiceNameKey.String(\"my-application\"),\n        semconv.ServiceNamespaceKey.String(\"my-company-frontend-team\"),\n    ),\n)\n...\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Services\nDESCRIPTION: Initializes the entire tracing stack with a single command, spinning up containers for Alloy, Grafana, k6 tracing, Prometheus, and Tempo\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/alloy/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Application Logging with Logfmt in Go\nDESCRIPTION: Shows how to set up basic application logging using logfmt format with a synchronous writer.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-kit/log/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nw := log.NewSyncWriter(os.Stderr)\nlogger := log.NewLogfmtLogger(w)\nlogger.Log(\"question\", \"what is the meaning of life?\", \"answer\", 42)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Traces from Tempo using curl\nDESCRIPTION: This curl command retrieves a specific trace from Tempo using the trace ID. The response is in OTLP format. The user needs to replace the trace ID with the one generated from the push operation.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/pushing-spans-with-http.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3200/api/v2/traces/5b8efff798038103d269b633813fc700\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Frontend Trace-by-ID Hedging\nDESCRIPTION: This code snippet shows the configuration options for enabling request hedging in trace-by-ID lookups performed by the query frontend. It allows setting the hedging delay and maximum number of hedged requests.\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nquery_frontend:\n  trace_by_id:\n    hedge_requests_at: 5s\n    hedge_requests_up_to: 3\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Middleware in HttpRouter\nDESCRIPTION: Creates a custom BasicAuth middleware function for protecting routes with username and password authentication. Implements RFC 2617 authentication mechanism.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/julienschmidt/httprouter/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc BasicAuth(h httprouter.Handle, requiredUser, requiredPassword string) httprouter.Handle {\n\treturn func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {\n\t\tuser, password, hasAuth := r.BasicAuth()\n\n\t\tif hasAuth && user == requiredUser && password == requiredPassword {\n\t\t\th(w, r, ps)\n\t\t} else {\n\t\t\tw.Header().Set(\"WWW-Authenticate\", \"Basic realm=Restricted\")\n\t\t\thttp.Error(w, http.StatusText(http.StatusUnauthorized), http.StatusUnauthorized)\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Go from Lua in GopherLua\nDESCRIPTION: Demonstrates how to define a Go function that can be called from Lua, register it with the Lua state, and use it in Lua code.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc Double(L *lua.LState) int {\n    lv := L.ToInt(1)             /* get argument */\n    L.Push(lua.LNumber(lv * 2)) /* push result */\n    return 1                     /* number of results */\n}\n\nfunc main() {\n    L := lua.NewState()\n    defer L.Close()\n    L.SetGlobal(\"double\", L.NewFunction(Double)) /* Original lua_setglobal uses stack... */\n}\n```\n\nLANGUAGE: lua\nCODE:\n```\nprint(double(20)) -- > \"40\"\n```\n\n----------------------------------------\n\nTITLE: Success Status Code Range\nDESCRIPTION: Query to find traces with successful HTTP status codes (200-299)\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_34\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ span.http.status_code >= 200 && span.http.status_code < 300 }\n```\n\n----------------------------------------\n\nTITLE: Finding the Longest Prefix Match in an Immutable Radix Tree in Go\nDESCRIPTION: This code snippet demonstrates how to find the longest prefix match in an immutable radix tree using the `Root().LongestPrefix()` method. This method takes a byte slice as input and returns the longest prefix that matches a key in the tree, along with the value associated with the key and a boolean indicating whether a match was found.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-immutable-radix/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Find the longest prefix match\nm, _, _ := r.Root().LongestPrefix([]byte(\"foozip\"))\nif string(m) != \"foo\" {\n    panic(\"should be foo\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Usage Reporting in Tempo Helm Chart\nDESCRIPTION: This snippet demonstrates how to enable or disable usage reporting when using Tempo Helm charts.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\n# -- If true, Tempo will report anonymous usage data about the shape of a deployment to Grafana Labs\nreportingEnabled: true\n```\n\n----------------------------------------\n\nTITLE: Installing Tempo Operator in Kubernetes\nDESCRIPTION: This command applies the Tempo Operator YAML file to install the operator in an existing Kubernetes cluster. It requires cert-manager to be pre-installed.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/quickstart.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f https://github.com/grafana/tempo-operator/releases/latest/download/tempo-operator.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Tempo and Prometheus Data Sources for Service Graphs\nDESCRIPTION: YAML configuration for setting up Tempo and Prometheus data sources in Grafana to enable service graph functionality. This configuration links Tempo with a Prometheus backend where metrics are stored and establishes the necessary connection for service graph visualization.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/metrics-generator/service_graphs/enable-service-graphs.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\ndatasources:\n  # Prometheus backend where metrics are sent\n  - name: Prometheus\n    type: prometheus\n    uid: prometheus\n    url: <prometheus-url>\n    jsonData:\n        httpMethod: GET\n    version: 1\n  - name: Tempo\n    type: tempo\n    uid: tempo\n    url: <tempo-url>\n    jsonData:\n      httpMethod: GET\n      serviceMap:\n        datasourceUid: 'prometheus'\n    version: 1\n```\n\n----------------------------------------\n\nTITLE: Cross-Region Query\nDESCRIPTION: Query to find traces spanning multiple cloud regions\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_36\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ resource.cloud.region = \"us-east-1\" } && { resource.cloud.region = \"us-west-1\" }\n```\n\n----------------------------------------\n\nTITLE: Service Request Rate Queries - Range Query\nDESCRIPTION: PromQL queries to calculate the rate of requests over time for specific client or server services using a 5-minute window.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/metrics-generator/service_graphs/metrics-queries.md#2025-04-17_snippet_4\n\nLANGUAGE: promql\nCODE:\n```\nsum(rate(traces_service_graph_request_server_seconds_count{server=\"foo\"}[5m])) by (client) > 0\n\nsum(rate(traces_service_graph_request_server_seconds_count{client=\"foo\"}[5m])) by (server) > 0\n```\n\n----------------------------------------\n\nTITLE: Checking Status of Docker Compose Containers\nDESCRIPTION: This snippet shows how to use docker compose to check the status of the running containers. The command is used to ensure that containers are up and running after the setup.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/vulture/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose ps\n```\n\n----------------------------------------\n\nTITLE: Configuring Querier Worker Message Size Limits in Tempo\nDESCRIPTION: YAML configuration for increasing the message size limit specifically for querier workers in Tempo. This affects communication between the querier and query frontend components.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/querying/response-too-large.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nquerier:\n    frontend_worker:\n        grpc_client_config:\n            max_send_msg_size: <size>\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Trace Protocol Settings in YAML\nDESCRIPTION: Configures trace protocol acceptance settings and distributor logging for Tempo gateway. Includes OTLP HTTP/gRPC enablement and span logging configuration.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/helm-charts/tempo-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntraces:\n  otlp:\n    http:\n      enabled: true\n    grpc:\n      enabled: true\n\ndistributor:\n  config:\n    log_received_spans:\n      enabled: true\n\nlicense:\n  contents: |\n    LICENSEGOESHERE\n```\n\n----------------------------------------\n\nTITLE: Configuring Tempo Storage Parameters in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure storage parameters in Tempo, specifically focusing on `max_workers` and `queue_depth`. Adjusting these parameters can help manage the number of parallel requests and waiting times for query responses. Increasing `queue_depth` can handle more jobs but may increase query latency; adjust `max_workers` accordingly.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/querying/too-many-jobs-in-queue.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"storage:\\n  trace:\\n    pool:\\n      max_workers: 100   # worker pool determines the number of parallel requests to the object store backend\\n      queue_depth: 10000\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Requirements for Tempo Ingester in Jsonnet\nDESCRIPTION: This Jsonnet code snippet allows for the modification of resource limits and requests for the Tempo ingester component. This enables the adjustment of CPU and memory resources allocated to improve performance based on specific workload requirements.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/tanka.md#2025-04-17_snippet_9\n\nLANGUAGE: jsonnet\nCODE:\n```\ntempo_ingester_container+:: {\n    resources+: {\n        limits+: {\n            cpu: '3',\n            memory: '5Gi',\n        },\n        requests+: {\n            cpu: '200m',\n            memory: '2Gi',\n        },\n    },\n},\n```\n\n----------------------------------------\n\nTITLE: Calculating Error Rate for Specific Service in TraceQL\nDESCRIPTION: This example calculates the rate of erroring spans coming from the service 'foo' using the rate() function in TraceQL.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/metrics-queries/functions.md#2025-04-17_snippet_1\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ resource.service.name = \"foo\" && status = error } | rate()\n```\n\n----------------------------------------\n\nTITLE: Profiling Individual Spans using Span Profiler in Go\nDESCRIPTION: This code snippet showcases how to profile individual spans using `spanprofiler.StartSpanFromContext`. It starts a span, enables profiling for it, and ensures the span is finished when the operation is complete. This provides granular control over which spans are profiled, particularly useful in asynchronous execution scenarios.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/grafana/dskit/spanprofiler/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc YourOperationName(ctx context.Background()) {\n    // Start a span and enable profiling for it\n    span, ctx := spanprofiler.StartSpanFromContext(ctx, \"YourOperationName\", tracer)\n    defer span.Finish() // Finish the span when done\n\n    // Use the span in your application logic\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Commands and Sub-commands in Kong CLI\nDESCRIPTION: Shows how to create a command hierarchy using nested structs tagged with cmd. This creates a CLI structure with a command and sub-command.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/kong/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype CLI struct {\n  Command struct {\n    Flag string\n\n    SubCommand struct {\n    } `cmd`\n  } `cmd`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pipeline Services with Receivers\nDESCRIPTION: Example showing how to enable receivers by adding them to pipeline configurations. Demonstrates multiple trace pipeline setups with different receiver combinations.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/receiver/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  pipelines:\n    # Valid pipelines are: traces, metrics or logs\n    # Trace pipeline 1.\n    traces:\n      receivers: [examplereceiver, examplereceiver/settings]\n      processors: []\n      exporters: [exampleexporter]\n    # Trace pipeline 2.\n    traces/another:\n      receivers: [examplereceiver, examplereceiver/settings]\n      processors: []\n      exporters: [exampleexporter]\n```\n\n----------------------------------------\n\nTITLE: Configuring Zone-Aware Ingesters in Tempo\nDESCRIPTION: Configuration example for enabling zone-aware replication for ingesters to improve reliability across failure domains\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-0.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# use the following fields in _config field of jsonnet config, to enable zone aware ingesters.\n    multi_zone_ingester_enabled: false,\n    multi_zone_ingester_migration_enabled: false,\n    multi_zone_ingester_replicas: 0,\n    multi_zone_ingester_max_unavailable: 25,\n```\n\n----------------------------------------\n\nTITLE: Initializing Kotel Tracer and Kafka Client with OpenTelemetry in Go\nDESCRIPTION: This snippet demonstrates how to set up a kotel tracer, create a kotel service hook, and initialize a Kafka client with OpenTelemetry tracing enabled.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/twmb/franz-go/plugin/kotel/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Initialize tracer provider.\ntracerProvider, err := initTracerProvider()\n\n// Create a new kotel tracer.\ntracerOpts := []kotel.TracerOpt{\n\tkotel.TracerProvider(tracerProvider),\n\tkotel.TracerPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{})),\n}\ntracer := kotel.NewTracer(tracerOpts...)\n\n// Create a new kotel service.\nkotelOps := []kotel.Opt{\n\tkotel.WithTracer(tracer),\n}\nkotelService := kotel.NewKotel(kotelOps...)\n\n// Create a new Kafka client.\ncl, err := kgo.NewClient(\n\t// Pass in the kotel hook.\n\tkgo.WithHooks(kotelService.Hooks()...),\n\t// ...other opts.\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Tempo Single Binary and Grafana\nDESCRIPTION: Helm commands to deploy Tempo in monolithic mode with Grafana and synthetic load generator\nSOURCE: https://github.com/grafana/tempo/blob/main/example/helm/README.md#2025-04-17_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nhelm upgrade --install tempo grafana/tempo\nhelm upgrade -f single-binary-grafana-values.yaml --install grafana grafana/grafana\nkubectl create -f single-binary-extras.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying a JSON Patch in Go\nDESCRIPTION: Example showing how to create a JSON patch object from a JSON array of operations and apply it to modify a JSON document. It demonstrates the DecodePatch and Apply methods from the jsonpatch library.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/evanphx/json-patch/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tjsonpatch \"github.com/evanphx/json-patch\"\n)\n\nfunc main() {\n\toriginal := []byte(`{\"name\": \"John\", \"age\": 24, \"height\": 3.21}`)\n\tpatchJSON := []byte(`[\n\t\t{\"op\": \"replace\", \"path\": \"/name\", \"value\": \"Jane\"},\n\t\t{\"op\": \"remove\", \"path\": \"/height\"}\n\t]`)\n\n\tpatch, err := jsonpatch.DecodePatch(patchJSON)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tmodified, err := patch.Apply(original)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"Original document: %s\\n\", original)\n\tfmt.Printf(\"Modified document: %s\\n\", modified)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Authentication Middleware for Gorilla Mux\nDESCRIPTION: Demonstrates how to create a more complex authentication middleware that validates session tokens against a map of authorized users. The middleware checks for a token in the request header and either allows the request to proceed or returns a forbidden error.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// Define our struct\ntype authenticationMiddleware struct {\n\ttokenUsers map[string]string\n}\n\n// Initialize it somewhere\nfunc (amw *authenticationMiddleware) Populate() {\n\tamw.tokenUsers[\"00000000\"] = \"user0\"\n\tamw.tokenUsers[\"aaaaaaaa\"] = \"userA\"\n\tamw.tokenUsers[\"05f717e5\"] = \"randomUser\"\n\tamw.tokenUsers[\"deadbeef\"] = \"user0\"\n}\n\n// Middleware function, which will be called for each request\nfunc (amw *authenticationMiddleware) Middleware(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        token := r.Header.Get(\"X-Session-Token\")\n\n        if user, found := amw.tokenUsers[token]; found {\n        \t// We found the token in our map\n        \tlog.Printf(\"Authenticated user %s\\n\", user)\n        \t// Pass down the request to the next middleware (or final handler)\n        \tnext.ServeHTTP(w, r)\n        } else {\n        \t// Write an error and stop the handler chain\n        \thttp.Error(w, \"Forbidden\", http.StatusForbidden)\n        }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Data Using Dot and Array Notation\nDESCRIPTION: Demonstrates how to access deeply nested values within an objx.Map using dot notation for object properties and array notation for array indices.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/stretchr/objx/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nm.Get(\"places[0].latlng\")\n```\n\n----------------------------------------\n\nTITLE: Using Atomic Uint32 in Go\nDESCRIPTION: Demonstrates basic usage of the atomic.Uint32 type with operations like Store, Sub, and Compare-And-Swap (CAS). This example shows how the package provides a safer and more convenient API compared to the standard library's sync/atomic package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/uber-go/atomic/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar atom atomic.Uint32\natom.Store(42)\natom.Sub(2)\natom.CAS(40, 11)\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Configuration Files\nDESCRIPTION: Example of how to handle cases where the configuration file is not found or has parsing errors.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nif err := viper.ReadInConfig(); err != nil {\n\tif _, ok := err.(viper.ConfigFileNotFoundError); ok {\n\t\t// Config file not found; ignore error if desired\n\t} else {\n\t\t// Config file was found but another error was produced\n\t}\n}\n\n// Config file found and successfully parsed\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Automatic Logging with OTLP Export in Alloy\nDESCRIPTION: This snippet demonstrates a simple configuration for logging trace roots before exporting them to the Grafana OTLP gateway. It uses the otelcol.receiver.otlp, otelcol.connector.spanlogs, and otelcol.exporter.otlp components.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/grafana-alloy/automatic-logging.md#2025-04-17_snippet_0\n\nLANGUAGE: alloy\nCODE:\n```\notelcol.receiver.otlp \"default\" {\n  grpc {}\n  http {}\n\n  output {\n    traces = [otelcol.connector.spanlogs.default.input]\n  }\n}\n\notelcol.connector.spanlogs \"default\" {\n  roots = true\n\n  output {\n    logs = [otelcol.exporter.otlp.default.input]\n  }\n}\n\notelcol.exporter.otlp \"default\" {\n  client {\n    endpoint = env(\"OTLP_ENDPOINT\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connector Usage with Traditional Exporters\nDESCRIPTION: Shows how to combine connectors with traditional exporters in pipeline configuration.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/connector/README.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  foo:\nexporters:\n  bar/traces_backend:\n  bar/metrics_backend:\nconnectors:\n  count:\nservice:\n  pipelines:\n    traces:\n      receivers: [foo]\n      exporters: [bar/traces_backend, count]\n    metrics:\n      receivers: [count]\n      exporters: [bar/metrics_backend]\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector Receiver Endpoint in YAML\nDESCRIPTION: YAML configuration to specify the endpoint for the OpenTelemetry Collector receiver in Tempo. This is necessary when running Tempo in a Docker container to ensure proper binding.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/upgrade.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\n        http:\n          endpoint: \"tempo:4318\"\n```\n\n----------------------------------------\n\nTITLE: Using FormatTime Converter\nDESCRIPTION: Examples of using the FormatTime converter to format time.Time values into human-readable strings using various format patterns.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_27\n\nLANGUAGE: go\nCODE:\n```\nFormatTime(Time(\"02/04/2023\", \"%m/%d/%Y\"), \"%A %h %e %Y\")\nFormatTime(UnixNano(span.attributes[\"time_nanoseconds\"]), \"%b %d %Y %H:%M:%S\")\nFormatTime(TruncateTime(spanevent.time, Duration(\"10h 20m\"))), \"%Y-%m-%d %H:%M:%S\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Ingestion Time Range Slack in YAML\nDESCRIPTION: A YAML configuration snippet to adjust the slack time for metrics ingestion, which can help reduce span drops due to timing issues.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/metrics-generator.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics_generator:\n  metrics_ingestion_time_range_slack: 30s\n```\n\n----------------------------------------\n\nTITLE: Using go-isatty Terminal Detection in Go\nDESCRIPTION: Example code demonstrating how to use go-isatty to detect if stdout is connected to a terminal or specifically a Cygwin/MSYS2 terminal. The code uses the IsTerminal and IsCygwinTerminal functions from the library.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/mattn/go-isatty/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/mattn/go-isatty\"\n\t\"os\"\n)\n\nfunc main() {\n\tif isatty.IsTerminal(os.Stdout.Fd()) {\n\t\tfmt.Println(\"Is Terminal\")\n\t} else if isatty.IsCygwinTerminal(os.Stdout.Fd()) {\n\t\tfmt.Println(\"Is Cygwin/MSYS2 Terminal\")\n\t} else {\n\t\tfmt.Println(\"Is Not Terminal\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Logging and Compression Handlers with Go\nDESCRIPTION: This snippet demonstrates how to set up a simple HTTP server using Gorilla Handlers to log requests to an admin dashboard and gzip compress all responses. It showcases the integration of LoggingHandler and CompressHandler from the Gorilla Handlers package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/gorilla/handlers/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"net/http\"\n    \"github.com/gorilla/handlers\"\n)\n\nfunc main() {\n    r := http.NewServeMux()\n\n    // Only log requests to our admin dashboard to stdout\n    r.Handle(\"/admin\", handlers.LoggingHandler(os.Stdout, http.HandlerFunc(ShowAdminDashboard)))\n    r.HandleFunc(\"/\", ShowIndex)\n\n    // Wrap our server with our gzip handler to gzip compress all responses.\n    http.ListenAndServe\":8000\", handlers.CompressHandler(r))\n}\n```\n\n----------------------------------------\n\nTITLE: Using shorthand flag functions\nDESCRIPTION: Demonstrates the use of shorthand flag functions (with 'P' suffix) that allow for one-letter shorthands for flags on the command line.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nvar ip = flag.IntP(\"flagname\", \"f\", 1234, \"help message\")\nvar flagvar bool\nfunc init() {\n\tflag.BoolVarP(&flagvar, \"boolname\", \"b\", true, \"help message\")\n}\nflag.VarP(&flagVal, \"varname\", \"v\", \"help message\")\n```\n\n----------------------------------------\n\nTITLE: Query Frontend Configuration in YAML\nDESCRIPTION: Extended query frontend configuration including server timeouts, queue sizes, batch settings, and search parameters for scaling scenarios.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/backend_search.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  # At larger scales, searching starts to feel more like a batch job.\n  # Increase the server timeout intervals.\n  http_server_read_timeout: 2m\n  http_server_write_timeout: 2m\n\nquery_frontend:\n  # When increasing concurrent_jobs, also increase the queue size per tenant,\n  # or search requests will be cause 429 errors. This is the total number of jobs\n  # per tenant allowed in the queue.\n  max_outstanding_per_tenant: 2000\n\n  # The number of jobs the query-frontend will batch together when passing jobs to the queriers. This value\n  # This value * querier.max_concurrent_queries is your the max number of jobs a given querier will try at once.\n  max_batch_size: 3\n\n  search:\n    # At larger scales, increase the number of jobs attempted simultaneously,\n    # per search query.\n    concurrent_jobs: 2000\n\n    # The query-frontend will attempt to divide jobs up by an estimate of job size. The smallest possible\n    # job size is a single parquet row group. Increasing this value will create fewer, larger jobs. Decreasing\n    # it will create more, smaller jobs.\n    target_bytes_per_job: 50_000_000\n```\n\n----------------------------------------\n\nTITLE: Generate Bloom Filter Command\nDESCRIPTION: Command to generate bloom filter for a block with specified parameters including false positive rate and shard size.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/tempo_cli.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ntempo-cli gen bloom --backend=local --bucket=./cmd/tempo-cli/test-data/ single-tenant b18beca6-4d7f-4464-9f72-f343e688a4a0 0.05 100000\n```\n\n----------------------------------------\n\nTITLE: Client Example using go-proxyproto\nDESCRIPTION: This Go code snippet demonstrates how to use the go-proxyproto library to create a client that sends a PROXY protocol header before sending data. It establishes a TCP connection, constructs a PROXY protocol header, writes the header to the connection, and then sends a message.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pires/go-proxyproto/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\"package main\n\nimport (\n\t\\\"io\\\"\n\t\\\"log\\\"\n\t\\\"net\\\"\n\n\tproxyproto \\\"github.com/pires/go-proxyproto\\\"\n)\n\nfunc chkErr(err error) {\n\tif err != nil {\n\t\tlog.Fatalf(\\\"Error: %s\\\", err.Error())\n\t}\n}\n\nfunc main() {\n\t// Dial some proxy listener e.g. https://github.com/mailgun/proxyproto\n\ttarget, err := net.ResolveTCPAddr(\\\"tcp\\\", \\\"127.0.0.1:2319\\\")\n\tchkErr(err)\n\n\tconn, err := net.DialTCP(\\\"tcp\\\", nil, target)\n\tchkErr(err)\n\n\tdefer conn.Close()\n\n\t// Create a proxyprotocol header or use HeaderProxyFromAddrs() if you\n\t// have two conn's\n\theader := &proxyproto.Header{\n\t\tVersion:\t\t\t1,\n\t\tCommand:\t\t\tproxyproto.PROXY,\n\t\tTransportProtocol:\tproxyproto.TCPv4,\n\t\tSourceAddr: &net.TCPAddr{\n\t\t\tIP:\tnet.ParseIP(\\\"10.1.1.1\\\"),\n\t\t\tPort: 1000,\n\t\t},\n\t\tDestinationAddr: &net.TCPAddr{\n\t\t\tIP:\tnet.ParseIP(\\\"20.2.2.2\\\"),\n\t\t\tPort: 2000,\n\t\t},\n\t}\n\t// After the connection was created write the proxy headers first\n\t_, err = header.WriteTo(conn)\n\tchkErr(err)\n\t// Then your data... e.g.:\n\t_, err = io.WriteString(conn, \\\"HELO\\\")\n\tchkErr(err)\n}\n\"\n```\n\n----------------------------------------\n\nTITLE: Propagating Context from OpenTracing to OpenTelemetry in Go\nDESCRIPTION: This code snippet shows how to propagate context from an OpenTracing span to OpenTelemetry. It ensures that both OpenTracing and OpenTelemetry instrumentation are aware of the span.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/bridge/opentracing/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nctxWithOTSpan := opentracing.ContextWithSpan(ctx, otSpan)\nctxWithOTAndOTelSpan := bridgeTracer.ContextWithSpanHook(ctxWithOTSpan, otSpan)\n// Propagate the otSpan to both OpenTracing and OpenTelemetry\n// instrumentation by using the ctxWithOTAndOTelSpan context.\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using MD5-SIMD Hasher in Go\nDESCRIPTION: This snippet demonstrates how to create an MD5-SIMD server, instantiate a hash object, write data to it, and retrieve the digest. The server enables parallel hashing operations, and both server and hasher should be properly closed when no longer needed.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/minio/md5-simd/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n    // Create server\n    server := md5simd.NewServer()\n    defer server.Close()\n\n    // Create hashing object (conforming to hash.Hash)\n    md5Hash := server.NewHash()\n    defer md5Hash.Close()\n\n    // Write one (or more) blocks\n    md5Hash.Write(block)\n    \n    // Return digest\n    digest := md5Hash.Sum([]byte{})\n```\n\n----------------------------------------\n\nTITLE: TraceQL Rate Query by Cloud Region\nDESCRIPTION: TraceQL query to get the rate of requests grouped by resource.cloud.region.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/metrics-summary.md#2025-04-17_snippet_1\n\nLANGUAGE: traceql\nCODE:\n```\n{ } | rate() by (resource.cloud.region)\n```\n\n----------------------------------------\n\nTITLE: Extracting Specific Errors Using errors.As\nDESCRIPTION: Shows how to use the standard errors.As function to extract a specific error type from a multierror\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nerr := somefunc()\n\n// We want to know if \"err\" has a \"RichErrorType\" in it and extract it.\nvar errRich RichErrorType\nif errors.As(err, &errRich) {\n\t// It has it, and now errRich is populated.\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Default Configuration Values for Tempo 2.0\nDESCRIPTION: New default configuration values for query frontend, querier, ingester, and storage components\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nquery_frontend:\n  max_oustanding_per_tenant: 2000\n  search:\n      concurrent_jobs: 1000\n      target_bytes_per_job: 104857600\n      max_duration: 168h\n      query_ingesters_until: 30m\n  trace_by_id:\n      query_shards: 50\nquerier:\n    max_concurrent_queries: 20\n    search:\n        prefer_self: 10\ningester:\n    concurrent_flushes: 4\n    max_block_duration: 30m\n    max_block_bytes: 524288000\nstorage:\n    trace:\n        pool:\n            max_workers: 400\n            queue_depth: 20000\n        search:\n            read_buffer_count: 32\n            read_buffer_size_bytes: 1048576\n```\n\n----------------------------------------\n\nTITLE: Using JSON-Iterator as Replacement for Standard Library\nDESCRIPTION: Example of how to replace the standard encoding/json with json-iterator while maintaining compatibility. This shows how to marshal data to JSON using json-iterator.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport jsoniter \"github.com/json-iterator/go\"\n\nvar json = jsoniter.ConfigCompatibleWithStandardLibrary\njson.Marshal(&data)\n```\n\n----------------------------------------\n\nTITLE: Configuring Receiver TLS Options in OpenTelemetry\nDESCRIPTION: YAML configuration examples for OpenTelemetry receivers with different TLS settings. Demonstrates standard TLS, mutual TLS (mTLS), and non-TLS configurations for gRPC protocol.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/config/configtls/README.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: mysite.local:55690\n        tls:\n          cert_file: server.crt\n          key_file: server.key\n  otlp/mtls:\n    protocols:\n      grpc:\n        endpoint: mysite.local:55690\n        tls:\n          client_ca_file: client.pem\n          cert_file: server.crt\n          key_file: server.key\n  otlp/notls:\n    protocols:\n      grpc:\n        endpoint: mysite.local:55690\n```\n\n----------------------------------------\n\nTITLE: Setting Baggage Items Programmatically in Go\nDESCRIPTION: Code example showing how to programmatically set baggage items on a span using Go\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/uber/jaeger-client-go/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nif span := opentracing.SpanFromContext(ctx); span != nil {\n    span.SetBaggageItem(\"key\", \"value\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Trace Polling in Tempo\nDESCRIPTION: Configuration options for controlling blocklist polling behavior, including poll frequency, concurrency, fallback behavior, and tenant index management. These settings determine how often and how efficiently Tempo checks for new blocks in storage.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/polling.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n    trace:\n        # How often to repoll the backend for new blocks. Default is 5m\n        [blocklist_poll: <duration>]\n\n        # Number of blocks to process in parallel during polling. Default is 50.\n        [blocklist_poll_concurrency: <int>]\n\n        # By default components will pull the blocklist from the tenant index. If that fails the component can\n        # fallback to scanning the entire bucket. Set to false to disable this behavior. Default is true.\n        [blocklist_poll_fallback: <bool>]\n\n        # Maximum number of compactors that should build the tenant index. All other components will download\n        # the index. Default 2.\n        [blocklist_poll_tenant_index_builders: <int>]\n\n        # The oldest allowable tenant index. If an index is pulled that is older than this duration,\n        # polling will consider this an error. Note that `blocklist_poll_fallback` applies here.\n        # If fallback is true and a tenant index exceeds this duration, it will fall back to listing\n        # the bucket contents.\n        # Default 0 (disabled).\n        [blocklist_poll_stale_tenant_index: <duration>]\n```\n\n----------------------------------------\n\nTITLE: Uploading a Blob to Azure Storage\nDESCRIPTION: Example demonstrating how to upload a local file to Azure Blob Storage using the authenticated client.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\taccount       = \"https://MYSTORAGEACCOUNT.blob.core.windows.net/\"\n\tcontainerName = \"sample-container\"\n\tblobName      = \"sample-blob\"\n\tsampleFile    = \"path/to/sample/file\"\n)\n\n// authenticate with Azure Active Directory\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n// TODO: handle error\n\n// create a client for the specified storage account\nclient, err := azblob.NewClient(account, cred, nil)\n// TODO: handle error\n\n// open the file for reading\nfile, err := os.OpenFile(sampleFile, os.O_RDONLY, 0)\n// TODO: handle error\ndefer file.Close()\n\n// upload the file to the specified container with the specified blob name\n_, err = client.UploadFile(context.TODO(), containerName, blobName, file, nil)\n// TODO: handle error\n```\n\n----------------------------------------\n\nTITLE: TraceQL Latency Percentiles Query\nDESCRIPTION: TraceQL query to get the 50th, 90th, and 99th percentile latencies by resource.cloud.region.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/metrics-summary.md#2025-04-17_snippet_3\n\nLANGUAGE: traceql\nCODE:\n```\n{ } | quantile_over_time(duration, .99, .9, .5) by (resource.cloud.region)\n```\n\n----------------------------------------\n\nTITLE: Merging Row Groups in Parquet Files with Go\nDESCRIPTION: This code snippet shows how to merge multiple row groups into a single larger row group using the parquet.MergeRowGroups function. It creates a merged view of row groups and writes it to a new Parquet file.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/parquet-go/parquet-go/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nmerge, err := parquet.MergeRowGroups(rowGroups)\nif err != nil {\n    ...\n}\n\nwriter := parquet.NewGenericWriter[RowType](output)\n_, err := parquet.CopyRows(writer, merge.Rows())\nif err != nil {\n    ...\n}\nif err := writer.Close(); err != nil {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Decompression with zstd in Go\nDESCRIPTION: This code snippet demonstrates how to decompress a stream of data using the klauspost/compress/zstd library in Go. It creates a new zstd reader from an io.Reader, copies the decompressed content to an io.Writer, and closes the reader to stop running goroutines.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\nfunc Decompress(in io.Reader, out io.Writer) error {\n    d, err := zstd.NewReader(in)\n    if err != nil {\n        return err\n    }\n    defer d.Close()\n    \n    // Copy content...\n    _, err = io.Copy(out, d)\n    return err\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using the retry interceptor in Go\nDESCRIPTION: This code snippet demonstrates how to use the `retry` interceptor in a gRPC client in Go. It shows how to create a gRPC client with a unary interceptor that retries requests up to a maximum of 3 times, with a timeout of 2 seconds per retry. The code includes necessary imports and a basic client setup.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/retry/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\"import (\\n    \\\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/retry\\\"\\n    \\\"google.golang.org/grpc\\\"\\n)\\n\\nfunc main() {\\n    opts := []grpc.DialOption{\\n        grpc.WithUnaryInterceptor(retry.UnaryClientInterceptor(\\n            retry.WithMax(3), // Maximum number of retries\\n            retry.WithPerRetryTimeout(2*time.Second), // Timeout per retry\\n        )),\\n    }\\n\\n    conn, err := grpc.NewClient(\\\"your_grpc_server_address\\\", opts...)\\n    if err != nil {\\n        log.Fatalf(\\\"Failed to connect: %v\\\", err)\\n    }\\n    defer conn.Close()\\n\\n    // Your gRPC client code here\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Branching Positional Arguments in Kong CLI\nDESCRIPTION: Demonstrates how to implement branching positional arguments using nested structs with the arg tag. This creates a complex command structure with positional arguments that branch to different sub-commands.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/kong/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nvar CLI struct {\n  Rename struct {\n    Name struct {\n      Name string `arg` // <-- NOTE: identical name to enclosing struct field.\n      To struct {\n        Name struct {\n          Name string `arg`\n        } `arg`\n      } `cmd`\n    } `arg`\n  } `cmd`\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Memcached Configuration in Jsonnet\nDESCRIPTION: This Jsonnet snippet shows how to extend and customize the Memcached configuration, including overriding resource requests and limits for the container.\nSOURCE: https://github.com/grafana/tempo/blob/main/operations/jsonnet-compiled/util/vendor/github.com/grafana/jsonnet-libs/memcached/README.md#2025-04-17_snippet_4\n\nLANGUAGE: jsonnet\nCODE:\n```\nlocal memcached = import \"memcached/memcached.libsonnet\";\n\nmemcached + {\n  // Memcached instance used to cache chunks.\n  memcached_chunks: $.memcached {\n    name: 'memcached',\n    max_item_size: '2m',\n    memory_limit_mb: 4096,\n\n    memcached_container+::\n     $.util.resourcesRequests(\"1\", \"2Gi\") +\n     $.util.resourcesLimits(\"2\", \"4Gi\"),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zipkin Exporter Options in YAML\nDESCRIPTION: Example configuration showing different Zipkin exporter setups including non-TLS, TLS-enabled, and TLS with certificate verification disabled. Demonstrates setting endpoint URLs, data format, and default service names.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/exporter/zipkinexporter/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  zipkin/nontls:\n    endpoint: \"http://some.url:9411/api/v2/spans\"\n    format: proto\n    default_service_name: unknown-service\n\n  zipkin/withtls:\n    endpoint: \"https://some.url:9411/api/v2/spans\"\n\n  zipkin/tlsnoverify:\n    endpoint: \"https://some.url:9411/api/v2/spans\"\n    tls:\n      insecure_skip_verify: true\n```\n\n----------------------------------------\n\nTITLE: Searching Traces via Tempo CLI\nDESCRIPTION: Demonstrates querying traces using Tempo CLI with specific time range and gRPC configuration\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/local/readme.md#2025-04-17_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ntempo-cli: `$ tempo-cli query api search \\\"0.0.0.0:3200\\\" --use-grpc \\\"{}\\\" \\\"2023-12-05T08:11:18Z\\\" \\\"2023-12-05T08:12:18Z\\\" --org-id=\\\"test\\\"`\n```\n\n----------------------------------------\n\nTITLE: Checking Tempo Pod Status\nDESCRIPTION: Command to check the status of Tempo pods in Kubernetes namespace.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/helm-charts/tempo-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n tempo-test get pods\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Prometheus Scrape in JSON\nDESCRIPTION: This JSON snippet shows a relabel configuration for Prometheus scrape to dynamically configure TLS based on Kubernetes pod annotations. It replaces the scheme label with the value from the pod annotation.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/network/tls.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source_labels\": [\"__meta_kubernetes_pod_annotation_prometheus_io_scheme\"],\n  \"action\": \"replace\",\n  \"target_label\": \"__scheme__\",\n  \"regex\": \"(https?)\",\n  \"replacement\": \"$1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic HTTP Routing in Go with HttpRouter\nDESCRIPTION: Basic example demonstrating how to set up an HTTP router with HttpRouter, including route definition for index and parameterized paths. Shows handler implementation with both static and dynamic route parameters.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/julienschmidt/httprouter/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"log\"\n\n    \"github.com/julienschmidt/httprouter\"\n)\n\nfunc Index(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n    fmt.Fprint(w, \"Welcome!\\n\")\n}\n\nfunc Hello(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {\n    fmt.Fprintf(w, \"hello, %s!\\n\", ps.ByName(\"name\"))\n}\n\nfunc main() {\n    router := httprouter.New()\n    router.GET(\"/\", Index)\n    router.GET(\"/hello/:name\", Hello)\n\n    log.Fatal(http.ListenAndServe(\":8080\", router))\n}\n```\n\n----------------------------------------\n\nTITLE: Using atomic Package for Atomic Operations in Go\nDESCRIPTION: Example demonstrating the use of the atomic package to perform atomic operations on a Uint32 type. Shows storing a value, subtracting from it, and using Compare-And-Swap (CAS).\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.uber.org/atomic/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar atom atomic.Uint32\natom.Store(42)\natom.Sub(2)\natom.CAS(40, 11)\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding Elements to a Bloom Filter in Go\nDESCRIPTION: This snippet demonstrates how to create a new Bloom filter with specified parameters and add a string element to it. The filter is initialized with a size of 20*n and 5 hash functions.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/willf/bloom/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nn := uint(1000)\nfilter := bloom.New(20*n, 5) // load of 20, 5 keys\nfilter.Add([]byte(\"Love\"))\n```\n\n----------------------------------------\n\nTITLE: Creating New Config with Options in Go\nDESCRIPTION: Function to create a new config instance with default values and apply provided options. Includes validation handling.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// newConfig returns an appropriately configured config.\nfunc newConfig(options ...Option) config {\n\t// Set default values for config.\n\tconfig := config{/* […] */}\n\tfor _, option := range options {\n\t\tconfig = option.apply(config)\n\t}\n\t// Perform any validation here.\n\treturn config\n}\n```\n\n----------------------------------------\n\nTITLE: Importing gRPC in Go\nDESCRIPTION: This snippet shows how to import the gRPC package in a Go file. After adding this import, Go's build tools will automatically fetch the necessary dependencies.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"google.golang.org/grpc\"\n```\n\n----------------------------------------\n\nTITLE: Advanced OTLP Receiver Configuration with CORS in YAML\nDESCRIPTION: Shows how to configure the OTLP receiver with HTTP protocol, including CORS settings for allowed origins, headers, and max age.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/receiver/otlpreceiver/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      http:\n        endpoint: \"localhost:4318\"\n        cors:\n          allowed_origins:\n            - http://test.com\n            # Origins can have wildcards with *, use * by itself to match any origin.\n            - https://*.example.com\n          allowed_headers:\n            - Example-Header\n          max_age: 7200\n```\n\n----------------------------------------\n\nTITLE: Starting a Root Span\nDESCRIPTION: This code snippet demonstrates how to create a root span, which is a span without a parent. It uses `opentracing.StartSpan` to create a new span with the specified operation name and finishes the span when the function exits. The `defer sp.Finish()` ensures the span is properly closed.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n    func xyz() {\n        ...\n        sp := opentracing.StartSpan(\"operation_name\")\n        defer sp.Finish()\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Loading Mimir Rules with Mimirtool (Bash)\nDESCRIPTION: This command uses `mimirtool` to load rules into a Mimir instance.  It specifies the path to the rules file (`operations/tempo-mixin-compiles/rules.yml`) and the address of the Mimir distributor.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/monitor/set-up-monitoring.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"mimirtool rules load operations/tempo-mixin-compiles/rules.yml --address=https://mimir-cluster.distributor.mimir.svc.cluster.local:9001\"\n```\n\n----------------------------------------\n\nTITLE: Handling Panics with conc.WaitGroup\nDESCRIPTION: Example showing how to handle goroutine panics using the conc.WaitGroup, which automatically captures and propagates panics with stacktraces.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/sourcegraph/conc/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    var wg conc.WaitGroup\n    wg.Go(doSomethingThatMightPanic)\n    // panics with a nice stacktrace\n    wg.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Redis Client and Setting Key-Value Pairs in Go\nDESCRIPTION: This snippet demonstrates the initialization of a Redis client and the basic operations of setting and getting key-value pairs. It uses the go-redis library and requires a running Redis server. The context is set for handling requests in a thread-safe manner.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-redis/redis/v8/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/go-redis/redis/v8\"\n    \"fmt\"\n)\n\nvar ctx = context.Background()\n\nfunc ExampleClient() {\n    rdb := redis.NewClient(&redis.Options{\n        Addr:     \"localhost:6379\",\n        Password: \"\", // no password set\n        DB:       0,  // use default DB\n    })\n\n    err := rdb.Set(ctx, \"key\", \"value\", 0).Err()\n    if err != nil {\n        panic(err)\n    }\n\n    val, err := rdb.Get(ctx, \"key\").Result()\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(\"key\", val)\n\n    val2, err := rdb.Get(ctx, \"key2\").Result()\n    if err == redis.Nil {\n        fmt.Println(\"key2 does not exist\")\n    } else if err != nil {\n        panic(err)\n    } else {\n        fmt.Println(\"key2\", val2)\n    }\n    // Output: key value\n    // key2 does not exist\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GopherLua VM Registry Size\nDESCRIPTION: Example of configuring the registry size, maximum size, and growth step for a GopherLua VM instance.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nL := lua.NewState(lua.Options{\n    RegistrySize: 1024 * 20,         // this is the initial size of the registry\n    RegistryMaxSize: 1024 * 80,      // this is the maximum size that the registry can grow to. If set to `0` (the default) then the registry will not auto grow\n    RegistryGrowStep: 32,            // this is how much to step up the registry by each time it runs out of space. The default is `32`.\n})\ndefer L.Close()\n```\n\n----------------------------------------\n\nTITLE: Configuring Jaeger with Prometheus Metrics\nDESCRIPTION: Example of configuring the Jaeger tracer with Prometheus metrics integration. This demonstrates how to implement a metrics factory for monitoring.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/uber/jaeger-client-go/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/uber/jaeger-client-go/config\"\n    \"github.com/uber/jaeger-lib/metrics/prometheus\"\n)\n\n    metricsFactory := prometheus.New()\n    tracer, closer, err := config.Configuration{\n        ServiceName: \"your-service-name\",\n    }.NewTracer(\n        config.Metrics(metricsFactory),\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Generator Overrides in YAML\nDESCRIPTION: Example of override configurations for different tenant IDs, showing how to enable specific metrics generator processors like service-graphs and span-metrics per tenant.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2022-01 Metrics-generator.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  1:\n    metrics_generator_processors:\n      - service-graphs\n      - span-metrics\n  2:\n    metrics_generator_processors:\n      - service-graphs\n```\n\n----------------------------------------\n\nTITLE: Adding Context to Errors with errors.Wrap\nDESCRIPTION: Demonstrates wrapping an error with additional context using the errors.Wrap function, enhancing error information during error propagation\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n_, err := ioutil.ReadAll(r)\nif err != nil {\n        return errors.Wrap(err, \"read failed\")\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Metrics Usage with Statsite Sink in Go\nDESCRIPTION: Example demonstrating how to profile method execution time, configure a Statsite sink as the global metrics sink, and emit a key/value pair metric. Shows the basic pattern for integrating go-metrics into an application.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/armon/go-metrics/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc SlowMethod() {\n    // Profiling the runtime of a method\n    defer metrics.MeasureSince([]string{\"SlowMethod\"}, time.Now())\n}\n\n// Configure a statsite sink as the global metrics sink\nsink, _ := metrics.NewStatsiteSink(\"statsite:8125\")\nmetrics.NewGlobal(metrics.DefaultConfig(\"service-name\"), sink)\n\n// Emit a Key/Value pair\nmetrics.EmitKey([]string{\"questions\", \"meaning of life\"}, 42)\n```\n\n----------------------------------------\n\nTITLE: Validating Identification Numbers using Luhn Algorithm in Go\nDESCRIPTION: The IsValidLuhn function checks if a given value is a valid identification number according to the Luhn algorithm. It accepts string (digits only) or integer inputs and returns a boolean result.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_44\n\nLANGUAGE: Go\nCODE:\n```\nIsValidLuhn(span.attributes[\"credit_card_number\"])\n```\n\nLANGUAGE: Go\nCODE:\n```\nIsValidLuhn(\"17893729974\")\n```\n\n----------------------------------------\n\nTITLE: Handling CORS Requests with Gorilla Mux in Go\nDESCRIPTION: This code snippet demonstrates the implementation of CORSMethodMiddleware using Gorilla Mux and a custom OPTIONS handler. It specifically sets the Access-Control-Allow-Methods and Access-Control-Allow-Origin headers for the '/foo' endpoint.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_14\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n)\n\nfunc main() {\n    r := mux.NewRouter()\n\n    // IMPORTANT: you must specify an OPTIONS method matcher for the middleware to set CORS headers\n    r.HandleFunc(\"/foo\", fooHandler).Methods(http.MethodGet, http.MethodPut, http.MethodPatch, http.MethodOptions)\n    r.Use(mux.CORSMethodMiddleware(r))\n    \n    http.ListenAndServe(\":8080\", r)\n}\n\nfunc fooHandler(w http.ResponseWriter, r *http.Request) {\n    w.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n    if r.Method == http.MethodOptions {\n        return\n    }\n\n    w.Write([]byte(\"foo\"))\n}\n```\n\n----------------------------------------\n\nTITLE: TraceQL Grouped Quantile Query for Service Duration\nDESCRIPTION: A TraceQL metrics query that calculates the 95th percentile duration for requests to a service, grouped by HTTP path.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2023-11 TraceQL Metrics.md#2025-04-17_snippet_5\n\nLANGUAGE: traceql\nCODE:\n```\n{ resource.service.name = \"myservice\" } | quantile_over_time(duration, 0.95) by (span.http.path)\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS with Root Certificates in Go\nDESCRIPTION: This snippet demonstrates how to configure an HTTP client with TLS settings using root certificates. It loads the required certificates from environment variables and applies them to the HTTP client's transport. Key parameters include CAFile, CAPath, and Certificate.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-rootcerts/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc httpClient() (*http.Client, error) {\n\ttlsConfig := &tls.Config{}\n\terr := rootcerts.ConfigureTLS(tlsConfig, &rootcerts.Config{\n\t\tCAFile:      os.Getenv(\"MYAPP_CAFILE\"),\n\t\tCAPath:      os.Getenv(\"MYAPP_CAPATH\"),\n\t\tCertificate: os.Getenv(\"MYAPP_CERTIFICATE\"),\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tc := cleanhttp.DefaultClient()\n\tt := cleanhttp.DefaultTransport()\n\tt.TLSClientConfig = tlsConfig\n\tc.Transport = t\n\treturn c, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Forwarder in Tempo\nDESCRIPTION: Configuration example for setting up OTLP gRPC forwarder in the distributor with tenant overrides\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n# config.yaml\ndistributor:\n  forwarders:\n    - name: \"otel-forwarder\"\n      backend: \"otlpgrpc\"\n      otlpgrpc:\n        endpoints: ['otelcol:4317']\n        tls:\n          insecure: true\n\n# overrides.yaml\noverrides:\n  \"example-tenant-1\":\n    forwarders: ['otel-forwarder']\n  \"example-tenant-2\":\n    forwarders: ['otel-forwarder']\n```\n\n----------------------------------------\n\nTITLE: Using Aliases in Viper Configuration\nDESCRIPTION: Example of registering and using aliases to reference configuration values by multiple keys.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nviper.RegisterAlias(\"loud\", \"Verbose\")\n\nviper.Set(\"verbose\", true) // same result as next line\nviper.Set(\"loud\", true)   // same result as prior line\n\nviper.GetBool(\"loud\") // true\nviper.GetBool(\"verbose\") // true\n```\n\n----------------------------------------\n\nTITLE: Updating gRPC Trace Instrumentation in Go\nDESCRIPTION: Updates to the gRPC trace instrumentation to conform with OpenTelemetry semantic conventions, including span naming and attribute setting.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_45\n\nLANGUAGE: Go\nCODE:\n```\n// The `grpctrace` instrumentation uses a span name conforming to the OpenTelemetry semantic conventions (does not contain a leading slash (`/`)).\n// The `grpctrace` instrumentation includes an `rpc.method` attribute now set to the gRPC method name.\n// The `grpctrace` instrumentation `rpc.service` attribute now contains the package name if one exists.\n```\n\n----------------------------------------\n\nTITLE: Validating Struct Types with 'type' Tag in Go\nDESCRIPTION: Example showing how to use the 'type' validation tag with ValidateStruct to validate the types of struct fields, including interfaces.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype User\tstruct {\n  Name string      `valid:\"type(string)\"`\n  Age  int         `valid:\"type(int)\"`\n  Meta interface{} `valid:\"type(string)\"`\n}\nresult, err := govalidator.ValidateStruct(User{\"Bob\", 20, \"meta\"})\nif err != nil {\n\tprintln(\"error: \" + err.Error())\n}\nprintln(result)\n```\n\n----------------------------------------\n\nTITLE: Configuring Usage Tracker Overrides\nDESCRIPTION: YAML configuration for setting up overrides to specify how usage data should be grouped. This example shows grouping by service.name attribute.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/usage-tracker.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Overrides configuration block\noverrides:\n  # Global ingestion limits configurations\n  defaults:\n    # Cost attribution usage tracker configuration\n    cost_attribution:\n      dimensions: \n        - service.name\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Blob Storage Client\nDESCRIPTION: Code to create and authenticate an Azure Blob Storage client using Azure Active Directory credentials.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// create a credential for authenticating with Azure Active Directory\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n// TODO: handle err\n\n// create an azblob.Client for the specified storage account that uses the above credential\nclient, err := azblob.NewClient(\"https://MYSTORAGEACCOUNT.blob.core.windows.net/\", cred, nil)\n// TODO: handle err\n```\n\n----------------------------------------\n\nTITLE: Defining Named Routes in Gorilla Mux\nDESCRIPTION: Demonstrates how to create a named route in Gorilla Mux. This allows for building URLs using the defined route pattern, making it easier to generate consistent URLs throughout an application.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\nr.HandleFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler).\n  Name(\"article\")\n```\n\n----------------------------------------\n\nTITLE: Parsing and Comparing Versions in Go\nDESCRIPTION: This snippet demonstrates how to create version objects using go-version and compare them. It checks if one version is less than another and prints the result.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-version/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nv1, err := version.NewVersion(\"1.2\")\nv2, err := version.NewVersion(\"1.5+metadata\")\n\n// Comparison example. There is also GreaterThan, Equal, and just\n// a simple Compare that returns an int allowing easy >=, <=, etc.\nif v1.LessThan(v2) {\n    fmt.Printf(\"%s is less than %s\", v1, v2)\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Tenant Streaming Query with tempo-cli\nDESCRIPTION: Executes a multi-tenant streaming query using tempo-cli by passing multiple tenant IDs. Requires multi-tenancy to be enabled in Tempo configuration.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/multi-tenant/readme.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ./bin/linux/tempo-cli-amd64 query api search \"0.0.0.0:3200\" --use-grpc --limit 10000 \"{ true } >> { true }\" \"2024-01-15T11:00:00Z\" \"2024-01-19T12:30:00Z\" --org-id=\"test|test2\"\n\n```\n\n----------------------------------------\n\nTITLE: Basic JMESPath Search in Go\nDESCRIPTION: Demonstrates how to use jmespath.Search to extract a single element from a nested JSON structure. This example shows the basic workflow of unmarshaling JSON data and applying a JMESPath expression to query the data.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/jmespath/go-jmespath/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/jmespath/go-jmespath\"\n\nvar jsondata = []byte(`{\"foo\": {\"bar\": {\"baz\": [0, 1, 2, 3, 4]}}}}`) // your data\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.Search(\"foo.bar.baz[2]\", data)\nresult = 2\n```\n\n----------------------------------------\n\nTITLE: Reading a Parquet File with parquet.ReadFile\nDESCRIPTION: This code snippet shows how to read a Parquet file using the `parquet.ReadFile` function. It reads the entire file into a slice of Go structs, assuming the data fits in memory. It iterates through the rows.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/parquet-go/parquet-go/README.md#2025-04-17_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n\"type RowType struct { FirstName, LastName string }\n\nrows, err := parquet.ReadFile[RowType](\"file.parquet\")\nif err != nil {\n    ...\n}\n\nfor _, c := range rows {\n    fmt.Printf(\"%+v\\n\", c)\n}\"\n```\n\n----------------------------------------\n\nTITLE: Navigating to Tempo Mixin Compiled Directory\nDESCRIPTION: This bash command changes the current directory to the location of the compiled Tempo mixin files, including dashboards and alert rules.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/monitor/set-up-monitoring.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd operations/tempo-mixin-compiled\n```\n\n----------------------------------------\n\nTITLE: Starting and Managing Custom Service\nDESCRIPTION: This snippet shows how to instantiate and use the exampleService, including starting the service, sending messages, and stopping it. The service is monitored for state transitions to ensure proper operation during its lifecycle.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/grafana/dskit/services/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ns := newExampleServ()\ns.StartAsync(context.Background())\ns.AwaitRunning(context.Background())\n// now collect() is running\ns.Send(\"A\")\ns.Send(\"B\")\ns.Send(\"C\")\ns.StopAsync()\ns.AwaitTerminated(context.Background())\n// now service is finished, and we can access s.log\n```\n\n----------------------------------------\n\nTITLE: Basic Memcached Configuration with Jsonnet\nDESCRIPTION: This Jsonnet snippet imports the `memcached` library and defines a `memcached_chunks` instance.  It sets basic configurations such as the name, maximum item size, and memory limit for the Memcached instance. This example demonstrates a simple way to configure Memcached using the imported library.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/grafana/jsonnet-libs/memcached/README.md#2025-04-17_snippet_2\n\nLANGUAGE: jsonnet\nCODE:\n```\n```jsonnet\nlocal memcached = import \"memcached/memcached.libsonnet\";\n\nmemcached + {\n  // Memcached instance used to cache chunks.\n  memcached_chunks: $.memcached {\n    name: 'memcached',\n    max_item_size: '2m',\n    memory_limit_mb: 4096,\n  },\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Settings in YAML\nDESCRIPTION: Configures storage settings for traces and admin resources using MinIO as the backend.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/helm-charts/tempo-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  trace:\n    backend: s3\n    s3:\n      access_key: 'grafana-tempo'\n      secret_key: 'supersecret'\n      bucket: 'tempo-traces'\n      endpoint: 'tempo-minio:9000'\n      insecure: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  admin:\n    backend: s3\n    s3:\n      access_key_id: 'grafana-tempo'\n      secret_access_key: 'supersecret'\n      bucket_name: 'enterprise-traces-admin'\n      endpoint: 'tempo-minio:9000'\n      insecure: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Settings in YAML\nDESCRIPTION: This YAML code snippet provides a structure for configuring cache settings in the Tempo application. It includes configurations for background write-back concurrency, key buffering, and specific configurations for memcached and redis. The setup allows for defining roles that specify how caches are utilized within the application, along with network settings, TLS options, and circuit-breaker settings for reliability and security.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\ncache:\n    # Background cache configuration. Requires having a cache configured. These settings apply\n    # to all configured caches.\n    background:\n\n        # At what concurrency to write back to cache. Default is 10.\n        [writeback_goroutines: <int>]\n\n        # How many key batches to buffer for background write-back. Default is 10000.\n        [writeback_buffer: <int>]\n\n    caches:\n\n        # Roles determine how this cache is used in Tempo. Roles must be unique across all caches and\n        # every cache must have at least one role.\n        # Allowed values:\n        #   bloom              - Bloom filters for trace id lookup.\n        #   parquet-footer     - Parquet footer values. Useful for search and trace by id lookup.\n        #   parquet-page       - Parquet \"pages\". WARNING: This will attempt to cache most reads from parquet and, as a result, is very high volume.\n        #   frontend-search    - Frontend search job results.\n\n    -   roles:\n        - <role1>\n        - <role2>\n\n        # Memcached caching configuration block\n        memcached:\n\n            # Hostname for memcached service to use. If empty and if addresses is unset, no memcached will be used.\n            # Example: \"host: memcached\"\n            [host: <string>]\n\n            # Optional\n            # SRV service used to discover memcache servers. (default: memcached)\n            # Example: \"service: memcached-client\"\n            [service: <string>]\n\n            # Optional\n            # Comma separated addresses list in DNS Service Discovery format. Refer - https://cortexmetrics.io/docs/configuration/arguments/#dns-service-discovery.\n            # (default: \"\")\n            # Example: \"addresses: dns+memcached:11211\"\n            [addresses: <comma separated strings>]\n\n            # Optional\n            # Maximum time to wait before giving up on memcached requests.\n            # (default: 100ms)\n            [timeout: <duration>]\n\n            # Optional\n            # Maximum number of idle connections in pool.\n            # (default: 16)\n            [max_idle_conns: <int>]\n\n            # Optional\n            # Period with which to poll DNS for memcache servers.\n            # (default: 1m)\n            [update_interval: <duration>]\n\n            # Optional\n            # Use consistent hashing to distribute keys to memcache servers.\n            # (default: true)\n            [consistent_hash: <bool>]\n\n            # Optional\n            # Trip circuit-breaker after this number of consecutive dial failures.\n            # (default: 10)\n            [circuit_breaker_consecutive_failures: 10]\n\n            # Optional\n            # Duration circuit-breaker remains open after tripping.\n            # (default: 10s)\n            [circuit_breaker_timeout: 10s]\n\n            # Optional\n            # Reset circuit-breaker counts after this long.\n            # (default: 10s)\n            [circuit_breaker_interval: 10s]\n\n            # Enable connecting to Memcached with TLS.\n            # CLI flag: -<prefix>.memcached.tls-enabled\n            [tls_enabled: <boolean> | default = false]\n\n            # Path to the client certificate, which will be used for authenticating with\n            # the server. Also requires the key path to be configured.\n            # CLI flag: -<prefix>.memcached.tls-cert-path\n            [tls_cert_path: <string> | default = \"\"]\n\n            # Path to the key for the client certificate. Also requires the client\n            # certificate to be configured.\n            # CLI flag: -<prefix>.memcached.tls-key-path\n            [tls_key_path: <string> | default = \"\"]\n\n            # Path to the CA certificates to validate server certificate against. If not\n            # set, the host's root CA certificates are used.\n            # CLI flag: -<prefix>.memcached.tls-ca-path\n            [tls_ca_path: <string> | default = \"\"]\n\n            # Override the expected name on the server certificate.\n            # CLI flag: -<prefix>.memcached.tls-server-name\n            [tls_server_name: <string> | default = \"\"]\n\n            # Skip validating server certificate.\n            # CLI flag: -<prefix>.memcached.tls-insecure-skip-verify\n            [tls_insecure_skip_verify: <boolean> | default = false]\n\n            # Override the default cipher suite list (separated by commas). Allowed\n            # values:\n            #\n            # Secure Ciphers:\n            # - TLS_RSA_WITH_AES_128_CBC_SHA\n            # - TLS_RSA_WITH_AES_256_CBC_SHA\n            # - TLS_RSA_WITH_AES_128_GCM_SHA256\n            # - TLS_RSA_WITH_AES_256_GCM_SHA384\n            # - TLS_AES_128_GCM_SHA256\n            # - TLS_AES_256_GCM_SHA384\n            # - TLS_CHACHA20_POLY1305_SHA256\n            # - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n            # - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n            # - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n            # - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n            # - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n            # - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n            # - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n            # - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n            # - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n            # - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n            #\n            # Insecure Ciphers:\n            # - TLS_RSA_WITH_RC4_128_SHA\n            # - TLS_RSA_WITH_3DES_EDE_CBC_SHA\n            # - TLS_RSA_WITH_AES_128_CBC_SHA256\n            # - TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n            # - TLS_ECDHE_RSA_WITH_RC4_128_SHA\n            # - TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n            # - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n            # - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n            # CLI flag: -<prefix>.memcached.tls-cipher-suites\n            [tls_cipher_suites: <string> | default = \"\"]\n\n            # Override the default minimum TLS version. Allowed values: VersionTLS10,\n            # VersionTLS11, VersionTLS12, VersionTLS13\n            # CLI flag: -<prefix>.memcached.tls-min-version\n            [tls_min_version: <string> | default = \"\"]\n\n        # Redis configuration block\n        # EXPERIMENTAL\n        redis:\n\n            # Redis endpoint to use when caching.\n            [endpoint: <string>]\n\n            # optional.\n            # Maximum time to wait before giving up on redis requests. (default 100ms)\n            [timeout: 500ms]\n\n            # optional.\n            # Redis Sentinel master name. (default \"\")\n            # Example: \"master-name: redis-master\"\n            [master-name: <string>]\n\n            # optional.\n            # Database index. (default 0)\n            [db: <int>]\n\n            # optional.\n            # How long keys stay in the redis. (default 0)\n            [expiration: <duration>]\n\n            # optional.\n            # Enable connecting to redis with TLS. (default false)\n            [tls-enabled: <bool>]\n\n            # optional.\n            # Skip validating server certificate. (default false)\n            [tls-insecure-skip-verify: <bool>]\n\n            # optional.\n            # Maximum number of connections in the pool. (default 0)\n            [pool-size: <int>]\n\n            # optional.\n            # Password to use when connecting to redis. (default \"\")\n            [password: <string>]\n\n            # optional.\n            # Close connections after remaining idle for this duration. (default 0s)\n            [idle-timeout: <duration>]\n\n            # optional.\n            # Close connections older than this duration. (default 0s)\n            [max-connection-age: <duration>]\n\n            # optional.\n            # Password to use when connecting to redis sentinel. (default \"\")\n            [sentinel_password: <string>]\n\n```\n\n----------------------------------------\n\nTITLE: Parquet Convert Command\nDESCRIPTION: Utility command to convert parquet files between schema versions.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/tempo_cli.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ntempo-cli parquet convert <in file> <out file>\n```\n\n----------------------------------------\n\nTITLE: Creating a Subsystem Logger with go-hclog in Go\nDESCRIPTION: Demonstrates the creation of a logger specific to a subsystem, providing a mechanism to differentiate log sources in an organized manner.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-17_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nsubsystemLogger := appLogger.Named(\"transport\")\nsubsystemLogger.Info(\"we are transporting something\")\n```\n\n----------------------------------------\n\nTITLE: Using Consul API Client in Go\nDESCRIPTION: The Go code demonstrates creating a Consul client, setting a key-value pair, and retrieving it using the Consul API. It requires 'github.com/hashicorp/consul/api' as a dependency and assumes a running Consul agent. The code manages errors by panicking on failure and outputs the retrieved key-value pair.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/consul/api/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tcapi \"github.com/hashicorp/consul/api\"\n)\n\nfunc main() {\n\t// Get a new client\n\tclient, err := capi.NewClient(capi.DefaultConfig())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Get a handle to the KV API\n\tkv := client.KV()\n\n\t// PUT a new KV pair\n\tp := &capi.KVPair{Key: \"REDIS_MAXCLIENTS\", Value: []byte(\"1000\")}\n\t_, err = kv.Put(p, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Lookup the pair\n\tpair, _, err := kv.Get(\"REDIS_MAXCLIENTS\", nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"KV: %v %s\\n\", pair.Key, pair.Value)\n}\n```\n\n----------------------------------------\n\nTITLE: Producing Kafka Records with OpenTelemetry Tracing in Go\nDESCRIPTION: This example shows how to produce a Kafka record with OpenTelemetry tracing, including creating a span for an HTTP handler and linking it to the Kafka produce operation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/twmb/franz-go/plugin/kotel/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc httpHandler(w http.ResponseWriter, r *http.Request) {\n\t// Start a new span with options.\n\topts := []trace.SpanStartOption{\n\t\ttrace.WithSpanKind(trace.SpanKindServer),\n\t\ttrace.WithAttributes([]attribute.KeyValue{attribute.String(\"some-key\", \"foo\")}...),\n\t}\n\tctx, span := tracer.Start(r.Context(), \"request\", opts...)\n\t// End the span when function exits.\n\tdefer span.End()\n\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\trecord := &kgo.Record{Topic: \"topic\", Value: []byte(\"foo\")}\n\t// Pass in the context from the tracer.Start() call to ensure that the span\n\t// created is linked to the parent span.\n\tcl.Produce(ctx, record, func(_ *kgo.Record, err error) {\n\t\tdefer wg.Done()\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"record had a produce error: %v\\n\", err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t\tspan.RecordError(err)\n\t\t}\n\t})\n\twg.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Distributor in Grafana Tempo (YAML)\nDESCRIPTION: YAML configuration block for the Distributor component in Grafana Tempo. It includes settings for receivers, forwarders, logging, metrics, and various other options to control trace ingestion and processing.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndistributor:\n    receivers:\n        otlp:\n            protocols:\n                grpc:\n                http:\n        jaeger:\n            protocols:\n                thrift_http:\n                grpc:\n                thrift_binary:\n                thrift_compact:\n        zipkin:\n        opencensus:\n        kafka:\n    forwarders:\n      - name: <string>\n        backend: <string>\n        otlpgrpc:\n          endpoints: <list of string>\n          tls:\n            [insecure: <boolean> | default = false]\n            [cert_file: <string | default = \"\">]\n        filter:\n            traces:\n                span: <list of string>\n                spanevent: <list of string>\n    log_received_spans:\n        [enabled: <boolean> | default = false]\n        [include_all_attributes: <boolean> | default = false]\n        [filter_by_status_error: <boolean> | default = false]\n    log_discarded_spans:\n        [enabled: <boolean> | default = false]\n        [include_all_attributes: <boolean> | default = false]\n        [filter_by_status_error: <boolean> | default = false]\n    metric_received_spans:\n        [enabled: <boolean> | default = false]\n        [root_only: <boolean> | default = false]\n    [extend_writes: <bool>]\n    [retry_after_on_resource_exhausted: <duration> | default = '0' ]\n    [max_attribute_bytes: <int> | default = '2048']\n    usage:\n        cost_attribution:\n            [enabled: <boolean> | default = false]\n            [max_cardinality: <int> | default = 10000]\n            [stale_duration: <duration> | default = 15m0s]\n```\n\n----------------------------------------\n\nTITLE: Using go mod to replace gRPC import path\nDESCRIPTION: This shell script demonstrates how to use Go modules to create an alias for the gRPC package when the google.golang.org domain is inaccessible. It replaces the import path with a GitHub repository.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-go@latest\ngo mod tidy\ngo mod vendor\ngo build -mod=vendor\n```\n\n----------------------------------------\n\nTITLE: Counting Spans by Status Code in TraceQL\nDESCRIPTION: This example counts the number of spans with name 'GET /:endpoint' broken down by status code using the count_over_time() function in TraceQL.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/metrics-queries/functions.md#2025-04-17_snippet_3\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ name = \"GET /:endpoint\" } | count_over_time() by (span.http.status_code)\n```\n\n----------------------------------------\n\nTITLE: Serializing Span Context to the Wire\nDESCRIPTION: This code snippet demonstrates how to serialize a span's trace context as HTTP headers on an outbound request. It uses `opentracing.GlobalTracer().Inject` to inject the span's context into the HTTP request headers. This allows the trace to be propagated to downstream services.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n    func makeSomeRequest(ctx context.Context) ... {\n        if span := opentracing.SpanFromContext(ctx); span != nil {\n            httpClient := &http.Client{}\n            httpReq, _ := http.NewRequest(\"GET\", \"http://myservice/\", nil)\n\n            // Transmit the span's TraceContext as HTTP headers on our\n            // outbound request.\n            opentracing.GlobalTracer().Inject(\n                span.Context(),\n                opentracing.HTTPHeaders,\n                opentracing.HTTPHeadersCarrier(httpReq.Header))\n\n            resp, err := httpClient.Do(httpReq)\n            ...\n        }\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating and Using an Expirable LRU Cache with golang-lru in Go\nDESCRIPTION: This snippet demonstrates the creation and usage of an expirable LRU cache using the `golang-lru/v2/expirable` package. It creates a cache with a TTL of 10ms and a maximum size of 5 entries, adds a value, waits for expiration, retrieves the value again, and adds another value to trigger eviction. The `expirable.NewLRU[string, string](5, nil, time.Millisecond*10)` initializes the cache with string keys and string values and a TTL of 10ms.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/golang-lru/v2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/hashicorp/golang-lru/v2/expirable\"\n)\n\nfunc main() {\n\t// make cache with 10ms TTL and 5 max keys\n\tcache := expirable.NewLRU[string, string](5, nil, time.Millisecond*10)\n\n\n\t// set value under key1.\n\tcache.Add(\"key1\", \"val1\")\n\n\t// get value under key1\n\tr, ok := cache.Get(\"key1\")\n\n\t// check for OK value\n\tif ok {\n\t\tfmt.Printf(\"value before expiration is found: %v, value: %q\\n\", ok, r)\n\t}\n\n\t// wait for cache to expire\n\ttime.Sleep(time.Millisecond * 12)\n\n\t// get value under key1 after key expiration\n\tr, ok = cache.Get(\"key1\")\n\tfmt.Printf(\"value after expiration is found: %v, value: %q\\n\", ok, r)\n\n\t// set value under key2, would evict old entry because it is already expired.\n\tcache.Add(\"key2\", \"val2\")\n\n\tfmt.Printf(\"Cache len: %d\\n\", cache.Len())\n\t// Output:\n\t// value before expiration is found: true, value: \"val1\"\n\t// value after expiration is found: false, value: \"\"\n\t// Cache len: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Bytes Processed Sum Query\nDESCRIPTION: Query to find traces processing more than 1GB total bytes\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_44\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ } | sum(span.bytesProcessed) > 1000000000\n```\n\n----------------------------------------\n\nTITLE: Creating a Span from Context\nDESCRIPTION: This code snippet shows how to create a new span using `opentracing.StartSpanFromContext`, which leverages an existing `context.Context` for span propagation. The function creates a child span from the context, logs some fields, and finishes the span. The `defer span.Finish()` ensures that the span is finished when the function exits.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n    func xyz(ctx context.Context, ...) {\n        ...\n        span, ctx := opentracing.StartSpanFromContext(ctx, \"operation_name\")\n        defer span.Finish()\n        span.LogFields(\n            log.String(\"event\", \"soft error\"),\n            log.String(\"type\", \"cache timeout\"),\n            log.Int(\"waited.millis\", 1500))\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Service Latency Percentile Query - Range Query\nDESCRIPTION: PromQL query to calculate the 90th percentile latency between services over time using a 5-minute window. Can be adjusted for different percentiles.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/metrics-generator/service_graphs/metrics-queries.md#2025-04-17_snippet_5\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(.9, sum(rate(traces_service_graph_request_server_seconds_bucket{client=\"foo\"}[5m])) by (server, le))\n```\n\n----------------------------------------\n\nTITLE: Configuring Querier in Tempo (YAML)\nDESCRIPTION: Detailed configuration options for the Tempo querier, including settings for concurrent queries, shuffle sharding, and query timeouts.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nquerier:\n    [max_concurrent_queries: <int> | default = 20]\n    [shuffle_sharding_ingesters_enabled: <bool> | default = true]\n    [shuffle_sharding_ingesters_lookback_period: <duration> | default = 1hr]\n    [query_relevant_ingesters: <bool> | default = false]\n    trace_by_id:\n        [query_timeout: <duration> | default = 10s]\n    search:\n        [query_timeout: <duration> | default = 30s]\n    frontend_worker:\n        [frontend_address: <string>]\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage for Tempo Distributed Mode\nDESCRIPTION: Configuration for Azure blob storage in Tempo Distributed mode, including settings for distributor, compactor, ingester, querier, and queryFrontend services.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/hosted-storage/azure.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  trace:\n    backend: azure\n    azure:\n      container_name: tempo-traces\n      storage_account_name: stgappgeneraluks\n      storage_account_key: ${STORAGE_ACCOUNT_ACCESS_KEY}\n\n\ndistributor:\n  extraArgs:\n  - \"-config.expand-env=true\"\n  extraEnv:\n  - name: STORAGE_ACCOUNT_ACCESS_KEY\n    valueFrom:\n      secretKeyRef:\n        name: tempo-traces-stg-key\n        key: tempo-traces-key\n\ncompactor:\n  extraArgs:\n  - \"-config.expand-env=true\"\n  extraEnv:\n  - name: STORAGE_ACCOUNT_ACCESS_KEY\n    valueFrom:\n      secretKeyRef:\n        name: tempo-traces-stg-key\n        key: tempo-traces-key\n\ningester:\n  extraArgs:\n  - \"-config.expand-env=true\"\n  extraEnv:\n  - name: STORAGE_ACCOUNT_ACCESS_KEY\n    valueFrom:\n      secretKeyRef:\n        name: tempo-traces-stg-key\n        key: tempo-traces-key\n\nquerier:\n  extraArgs:\n  - \"-config.expand-env=true\"\n  extraEnv:\n  - name: STORAGE_ACCOUNT_ACCESS_KEY\n    valueFrom:\n      secretKeyRef:\n        name: tempo-traces-stg-key\n        key: tempo-traces-key\n\nqueryFrontend:\n  extraArgs:\n  - \"-config.expand-env=true\"\n  extraEnv:\n  - name: STORAGE_ACCOUNT_ACCESS_KEY\n    valueFrom:\n      secretKeyRef:\n        name: tempo-traces-stg-key\n        key: tempo-traces-key\n```\n\n----------------------------------------\n\nTITLE: Querier Configuration in YAML\nDESCRIPTION: Basic querier configuration that controls the amount of concurrent work each querier will attempt. The total jobs a querier attempts is this value multiplied by query_frontend.max_batch_size.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/backend_search.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nquerier:\n  # Control the amount of work each querier will attempt. The total number of\n  # jobs a querier will attempt this is this value * query_frontend.max_batch_size\n  max_concurrent_queries: 20\n```\n\n----------------------------------------\n\nTITLE: TraceQL Link Attribute Query\nDESCRIPTION: Example TraceQL query demonstrating how to search for attributes within span links. This query specifically looks for links with the 'child_of' reference type in OpenTracing.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-6.md#2025-04-17_snippet_0\n\nLANGUAGE: traceql\nCODE:\n```\n{ link.opentracing.ref_type = \"child_of\" }\n```\n\n----------------------------------------\n\nTITLE: Creating AWS S3 Object Storage Secret for Tempo Operator\nDESCRIPTION: This command creates a Kubernetes secret containing AWS S3 bucket information and credentials for Tempo Operator to use as object storage.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/object-storage.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nkubectl create secret generic tempostack-dev-s3 \\\n  --from-literal=bucket=\"<BUCKET_NAME>\" \\\n  --from-literal=endpoint=\"<AWS_BUCKET_ENDPOINT>\" \\\n  --from-literal=access_key_id=\"<AWS_ACCESS_KEY_ID>\" \\\n  --from-literal=access_key_secret=\"<AWS_ACCESS_KEY_SECRET>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP/JSON CORS in OpenCensus Receiver in YAML\nDESCRIPTION: This YAML configuration enables CORS for the OpenCensus receiver when using HTTP/JSON for trace export calls. Users can specify origins allowed for CORS using the `cors_allowed_origins` field with a list of origins, supporting wildcards.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/receiver/opencensusreceiver/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  opencensus:\n    cors_allowed_origins:\n    - http://test.com\n    - https://*.example.com\n```\n\n----------------------------------------\n\nTITLE: Deleting Matching Keys from Map Attributes in OTTL\nDESCRIPTION: Function to remove all keys from a pcommon.Map that match a specified regex pattern, providing flexible attribute filtering.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_2\n\nLANGUAGE: OTTL\nCODE:\n```\ndelete_matching_keys(log.attributes, \"(?i).*password.*\")\n```\n\nLANGUAGE: OTTL\nCODE:\n```\ndelete_matching_keys(resource.attributes, \"(?i).*password.*\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service Discovery for Tempo in Grafana Alloy\nDESCRIPTION: This YAML snippet configures Kubernetes service discovery in Grafana Alloy to scrape metrics from Tempo components based on specific label selectors.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/monitor/set-up-monitoring.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndiscovery.kubernetes \"k8s_pods\" {\n  role = \"pod\"\n  selectors {\n    // Only scrape pods with a particular selector.\n    role = \"pod\"\n    // The selector is any component that belongs to Tempo.\n    label = \"app.kubernetes.io/name=tempo\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector with Authentication\nDESCRIPTION: OpenTelemetry collector configuration with bearer token authentication for the dev tenant.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/multitenancy.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n    serviceAccount: otel-collector\n    config: |\n        extensions:\n          bearertokenauth:\n            filename: \"/var/run/secrets/kubernetes.io/serviceaccount/token\"\n        exporters:\n          # Export the dev tenant traces to a Tempo instance\n          otlp/dev:\n            endpoint: tempo-simplest-gateway.tempo.svc.cluster.local:8090\n            tls:\n              insecure: false\n              ca_file: \"/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt\"\n            auth:\n              authenticator: bearertokenauth\n            headers:\n              X-Scope-OrgID: \"dev\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics and Tracing for TempoStack in YAML\nDESCRIPTION: YAML configuration for enabling metrics monitoring and distributed tracing on TempoStack instances. This snippet shows how to enable ServiceMonitors, PrometheusRules, and configure sampling fraction for tracing.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/monitor.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: tempo.grafana.com/v1alpha1\nkind: TempoStack\nspec:\n  observability:\n    metrics:\n      createServiceMonitors: true\n      createPrometheusRules: true\n    tracing:\n      sampling_fraction: 1.0\n      jaeger_agent_endpoint: localhost:6831\n```\n\n----------------------------------------\n\nTITLE: Finding Traces with Error Status\nDESCRIPTION: TraceQL query that finds traces with a specific operation that have resulted in an error status.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_3\n\nLANGUAGE: traceql\nCODE:\n```\n{\n  resource.service.name=\"frontend\" &&\n  name = \"POST /api/orders\" &&\n  status = error\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Feature Gate in Go\nDESCRIPTION: Demonstrates how to register a new feature gate with the global registry, including setting its stage, description, and associated issues.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/featuregate/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar myFeatureGate = featuregate.GlobalRegistry().MustRegister(\n\t\"namespaced.uniqueIdentifier\",\n\tfeaturegate.Stable,\n    featuregate.WithRegisterFromVersion(\"v0.65.0\")\n\tfeaturegate.WithRegisterDescription(\"A brief description of what the gate controls\"),\n\tfeaturegate.WithRegisterReferenceURL(\"https://github.com/open-telemetry/opentelemetry-collector/issues/6167\"),\n\tfeaturegate.WithRegisterToVersion(\"v0.70.0\"))\n```\n\n----------------------------------------\n\nTITLE: Filtering Specific Metric Values\nDESCRIPTION: Example showing how to filter specific metrics based on name and value conditions.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/processor/filterprocessor/README.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n  filter:\n    error_mode: ignore\n    metrics:\n      datapoint:\n        - metric.name == \"k8s.pod.phase\" and value_int == 4\n```\n\n----------------------------------------\n\nTITLE: Custom Authentication with ChainedTokenCredential\nDESCRIPTION: Example demonstrating how to create a custom authentication flow using ChainedTokenCredential that tries managed identity first and falls back to Azure CLI authentication.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmanaged, err := azidentity.NewManagedIdentityCredential(nil)\nif err != nil {\n  // handle error\n}\nazCLI, err := azidentity.NewAzureCLICredential(nil)\nif err != nil {\n  // handle error\n}\nchain, err := azidentity.NewChainedTokenCredential([]azcore.TokenCredential{managed, azCLI}, nil)\nif err != nil {\n  // handle error\n}\n\nclient := armresources.NewResourceGroupsClient(\"subscription ID\", chain, nil)\n```\n\n----------------------------------------\n\nTITLE: Using httpsnoop to Capture HTTP Metrics in Go\nDESCRIPTION: This example demonstrates how to wrap an existing HTTP handler to log metrics for every request. The CaptureMetrics function records the status code, duration, and bytes written without breaking the underlying http.ResponseWriter interfaces.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/felixge/httpsnoop/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// myH is your app's http handler, perhaps a http.ServeMux or similar.\nvar myH http.Handler\n// wrappedH wraps myH in order to log every request.\nwrappedH := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\tm := httpsnoop.CaptureMetrics(myH, w, r)\n\tlog.Printf(\n\t\t\"%s %s (code=%d dt=%s written=%d)\",\n\t\tr.Method,\n\t\tr.URL,\n\t\tm.Code,\n\t\tm.Duration,\n\t\tm.Written,\n\t)\n})\nhttp.ListenAndServe(\":8080\", wrappedH)\n```\n\n----------------------------------------\n\nTITLE: Handling Incoming HTTP Requests with PROXY Protocol in Go\nDESCRIPTION: This snippet demonstrates how to handle HTTP requests in a server that has PROXY protocol enabled. By inspecting Request.RemoteAddr, it extracts the IP address from incoming requests after they've been processed by PROXY protocol. This maintains the original source address for additional request handling logic. Assumes a server object is already created and configured with PROXY protocol.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/grafana/dskit/server/PROXYPROTOCOL.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nserver.HTTP.HandleFunc(\"/your-endpoint\", func(w http.ResponseWriter, r *http.Request) {\\n    ip, _, err := net.SplitHostPort(r.RemoteAddr)\\n    // ...\\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing MinIO Client\nDESCRIPTION: Basic example showing how to initialize a MinIO client with endpoint and credentials configuration.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/minio/minio-go/v7/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\n\t\"github.com/minio/minio-go/v7\"\n\t\"github.com/minio/minio-go/v7/pkg/credentials\"\n)\n\nfunc main() {\n\tendpoint := \"play.min.io\"\n\taccessKeyID := \"Q3AM3UQ867SPQQA43P2F\"\n\tsecretAccessKey := \"zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG\"\n\tuseSSL := true\n\n\t// Initialize minio client object.\n\tminioClient, err := minio.New(endpoint, &minio.Options{\n\t\tCreds:  credentials.NewStaticV4(accessKeyID, secretAccessKey, \"\"),\n\t\tSecure: useSSL,\n\t})\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\n\tlog.Printf(\"%#v\\n\", minioClient) // minioClient is now set up\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Global Tracer with Span Profiler in Go\nDESCRIPTION: This code snippet demonstrates how to wrap the global OpenTracing tracer with the span profiler. It initializes an OpenTracing tracer, wraps it using `spanprofiler.NewTracer`, and sets the wrapped tracer as the global tracer. This setup profiles root spans for efficiency.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/grafana/dskit/spanprofiler/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/opentracing/opentracing-go\"\n    \"github.com/grafana/dskit/spanprofiler\"\n)\n\nfunc main() {\n    // Initialize your OpenTracing tracer\n    tracer := opentracing.GlobalTracer()\n    // Wrap it with the tracer-profiler \n    wrappedTracer := spanprofiler.NewTracer(tracer)\n    // Use the wrapped tracer in your application\n    opentracing.SetGlobalTracer(wrappedTracer)\n\n    // Or, as an oneliner:\n    // opentracing.SetGlobalTracer(spanprofiler.NewTracer(opentracing.GlobalTracer()))\n\n    // Your application logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Backoff Usage Example in Go\nDESCRIPTION: Demonstrates the basic usage of the backoff package showing how durations increase exponentially and can be reset.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/jpillora/backoff/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nb := &backoff.Backoff{\n\t//These are the defaults\n\tMin:    100 * time.Millisecond,\n\tMax:    10 * time.Second,\n\tFactor: 2,\n\tJitter: false,\n}\n\nfmt.Printf(\"%s\\n\", b.Duration())\nfmt.Printf(\"%s\\n\", b.Duration())\nfmt.Printf(\"%s\\n\", b.Duration())\n\nfmt.Printf(\"Reset!\\n\")\nb.Reset()\n\nfmt.Printf(\"%s\\n\", b.Duration())\n```\n\n----------------------------------------\n\nTITLE: Watching Configuration Files for Changes in Go\nDESCRIPTION: Demonstrates how to implement file watching functionality to detect and reload configuration changes at runtime. Includes error handling and reload logic.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/parsers/yaml\"\n\t\"github.com/knadh/koanf/providers/file\"\n)\n\n// Global koanf instance. Use \".\" as the key path delimiter. This can be \"/\" or any character.\nvar k = koanf.New(\".\")\n\nfunc main() {\n\t// Load JSON config.\n\tf := file.Provider(\"mock/mock.json\")\n\tif err := k.Load(f, json.Parser()); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n\n\t// Load YAML config and merge into the previously loaded config (because we can).\n\tk.Load(file.Provider(\"mock/mock.yml\"), yaml.Parser())\n\n\tfmt.Println(\"parent's name is = \", k.String(\"parent1.name\"))\n\tfmt.Println(\"parent's ID is = \", k.Int(\"parent1.id\"))\n\n\t// Watch the file and get a callback on change. The callback can do whatever,\n\t// like re-load the configuration.\n\t// File provider always returns a nil `event`.\n\tf.Watch(func(event interface{}, err error) {\n\t\tif err != nil {\n\t\t\tlog.Printf(\"watch error: %v\", err)\n\t\t\treturn\n\t\t}\n\n\t\t// Throw away the old config and load a fresh copy.\n\t\tlog.Println(\"config changed. Reloading ...\")\n\t\tk = koanf.New(\".\")\n\t\tk.Load(f, json.Parser())\n\t\tk.Print()\n\t})\n\n\t// To stop a file watcher, call:\n\t// f.Unwatch()\n\n\t// Block forever (and manually make a change to mock/mock.json) to\n\t// reload the config.\n\tlog.Println(\"waiting forever. Try making a change to mock/mock.json to live reload\")\n\t<-make(chan bool)\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Errors Using go-multierror\nDESCRIPTION: Demonstrates how to collect multiple errors using the multierror.Append function, which allows accumulating errors from different steps or operations\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar result error\n\nif err := step1(); err != nil {\n\tresult = multierror.Append(result, err)\n}\nif err := step2(); err != nil {\n\tresult = multierror.Append(result, err)\n}\n\nreturn result\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Compose Environment\nDESCRIPTION: Stops and removes all containers and volumes created by Docker Compose\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/local/readme.md#2025-04-17_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ndocker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Complete File Upload Example\nDESCRIPTION: Comprehensive example demonstrating how to connect to MinIO, create a bucket, and upload a file.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/minio/minio-go/v7/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"github.com/minio/minio-go/v7\"\n\t\"github.com/minio/minio-go/v7/pkg/credentials\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tendpoint := \"play.min.io\"\n\taccessKeyID := \"Q3AM3UQ867SPQQA43P2F\"\n\tsecretAccessKey := \"zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG\"\n\tuseSSL := true\n\n\t// Initialize minio client object.\n\tminioClient, err := minio.New(endpoint, &minio.Options{\n\t\tCreds:  credentials.NewStaticV4(accessKeyID, secretAccessKey, \"\"),\n\t\tSecure: useSSL,\n\t})\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\n\t// Make a new bucket called testbucket.\n\tbucketName := \"testbucket\"\n\tlocation := \"us-east-1\"\n\n\terr = minioClient.MakeBucket(ctx, bucketName, minio.MakeBucketOptions{Region: location})\n\tif err != nil {\n\t\t// Check to see if we already own this bucket (which happens if you run this twice)\n\t\texists, errBucketExists := minioClient.BucketExists(ctx, bucketName)\n\t\tif errBucketExists == nil && exists {\n\t\t\tlog.Printf(\"We already own %s\\n\", bucketName)\n\t\t} else {\n\t\t\tlog.Fatalln(err)\n\t\t}\n\t} else {\n\t\tlog.Printf(\"Successfully created %s\\n\", bucketName)\n\t}\n\n\t// Upload the test file\n\t// Change the value of filePath if the file is in another location\n\tobjectName := \"testdata\"\n\tfilePath := \"/tmp/testdata\"\n\tcontentType := \"application/octet-stream\"\n\n\t// Upload the test file with FPutObject\n\tinfo, err := minioClient.FPutObject(ctx, bucketName, objectName, filePath, minio.PutObjectOptions{ContentType: contentType})\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\n\tlog.Printf(\"Successfully uploaded %s of size %d\\n\", objectName, info.Size)\n}\n```\n\n----------------------------------------\n\nTITLE: Marshalling Viper Configuration to YAML String (Go)\nDESCRIPTION: This snippet demonstrates how to marshal all settings held in Viper into a YAML string. It uses the yaml.v2 package to marshal the configuration map returned by AllSettings().\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_35\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tyaml \"gopkg.in/yaml.v2\"\n\t// ...\n)\n\nfunc yamlStringSettings() string {\n\tc := viper.AllSettings()\n\tbs, err := yaml.Marshal(c)\n\tif err != nil {\n\t\tlog.Fatalf(\"unable to marshal config to YAML: %v\", err)\n\t}\n\treturn string(bs)\n}\n```\n\n----------------------------------------\n\nTITLE: List Index Command\nDESCRIPTION: Command to list basic index information for a specified block using tenant ID and block ID.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/tempo_cli.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ntempo-cli list index <tenant-id> <block-id>\n```\n\n----------------------------------------\n\nTITLE: Writing a Parquet File with parquet.GenericWriter\nDESCRIPTION: This code shows how to write a Parquet file using `parquet.NewGenericWriter`. It initializes a writer, writes data to it in batches, and then closes the writer to finalize the file. The writer needs to be closed to flush all buffers.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/parquet-go/parquet-go/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n\"type RowType struct { FirstName, LastName string }\n\nwriter := parquet.NewGenericWriter[RowType](output)\n\n_, err := writer.Write([]RowType{\n    ...\n})\nif err != nil {\n    ...\n}\n\n// Closing the writer is necessary to flush buffers and write the file footer.\nif err := writer.Close(); err != nil {\n    ...\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Alloy for Tempo in YAML\nDESCRIPTION: This YAML configuration sets up Grafana Alloy to receive and export traces in OTLP protobuf format to Tempo. It defines an OTLP gRPC receiver and exporter, specifying the Tempo distributor endpoint.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/set-up-test-app.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nalloy:\n  extraPorts:\n    - name: otlp-grpc\n      port: 4317\n      targetPort: 4317\n      protocol: TCP\n  configMap:\n    create: true\n    content: |-\n      otelcol.receiver.otlp \"otlp_receiver\" {\n        grpc {\n          endpoint = \"0.0.0.0:4317\"\n        }\n\n        output {\n          traces = [\n            otelcol.exporter.otlp.tempo.input,\n          ]\n        }\n      }\n\n      otelcol.exporter.otlp \"tempo\" {\n          client {\n              endpoint = \"http://tempo-cluster-distributor.tempo.svc.cluster.local:4317\"\n              tls {\n                  insecure = true\n                  insecure_skip_verify = true\n              }\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom CORS Options in Go\nDESCRIPTION: This snippet shows how to create a custom CORS configuration with specific allowed origins, credentials, and debugging enabled. It demonstrates the use of the cors.New() function with custom Options.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/rs/cors/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nc := cors.New(cors.Options{\n    AllowedOrigins: []string{\"http://foo.com\", \"http://foo.com:8080\"},\n    AllowCredentials: true,\n    // Enable Debugging for testing, consider disabling in production\n    Debug: true,\n})\n\n// Insert the middleware\nhandler = c.Handler(handler)\n```\n\n----------------------------------------\n\nTITLE: Using blas64 Vector in Go\nDESCRIPTION: This Go code snippet demonstrates how to use the blas64 package to create a vector and calculate its length using the Nrm2 function. It showcases basic usage of the BLAS API wrapper for float64 operations.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/gonum.org/v1/gonum/blas/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"gonum.org/v1/gonum/blas/blas64\"\n)\n\nfunc main() {\n\tv := blas64.Vector{Inc: 1, Data: []float64{1, 1, 1}}\n\tv.N = len(v.Data)\n\tfmt.Println(\"v has length:\", blas64.Nrm2(v))\n}\n```\n\n----------------------------------------\n\nTITLE: Parquet Convert 2 to 3 Command\nDESCRIPTION: Command to convert vParquet2 files to vParquet3 format with optional dedicated attribute columns.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/tempo_cli.md#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ntempo-cli parquet convert-2-to-3 <in file> <out path> <list of dedicated columns>\n```\n\n----------------------------------------\n\nTITLE: Accessing pprof Debug Endpoints via HTTP\nDESCRIPTION: Endpoints for runtime profiling data in pprof format. Includes profiling for heap, block, CPU profile, execution trace, goroutines, and mutexes.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/_index.md#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /debug/pprof/heap\nGET /debug/pprof/block\nGET /debug/pprof/profile\nGET /debug/pprof/trace\nGET /debug/pprof/goroutine\nGET /debug/pprof/mutex\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Parquet Block Version in Tempo\nDESCRIPTION: Configuration snippet showing how to set the block version option to vParquet4, which is the default and latest iteration of Parquet-based columnar block format in Tempo.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/parquet.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# block format version. options: v2, vParquet2, vParquet3, vParquet4\n[version: vParquet4]\n```\n\n----------------------------------------\n\nTITLE: HTTP Server with Custom Gzip Options\nDESCRIPTION: Advanced example showing how to create a reusable gzip wrapper with custom compression options. Demonstrates setting minimum size and compression level parameters.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/gzhttp/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\n\t\"github.com/klauspost/compress/gzhttp\"\n\t\"github.com/klauspost/compress/gzip\"\n)\n\nfunc main() {\n\thandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"text/plain\")\n\t\tio.WriteString(w, \"Hello, World\")\n\t})\n\t\n\t// Create a reusable wrapper with custom options.\n\twrapper, err := gzhttp.NewWrapper(gzhttp.MinSize(2000), gzhttp.CompressionLevel(gzip.BestSpeed))\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\t\n\thttp.Handle(\"/\", wrapper(handler))\n\thttp.ListenAndServe(\"0.0.0.0:8000\", nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring License Settings in YAML\nDESCRIPTION: Shows two methods for configuring enterprise license: direct content specification and external secret reference.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/helm-charts/tempo-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nlicense:\n  contents: |\n    LICENSEGOESHERE\n```\n\nLANGUAGE: yaml\nCODE:\n```\nlicense:\n  external: true\n  secretName: get-license\n```\n\n----------------------------------------\n\nTITLE: Custom Fprint Functions in Go\nDESCRIPTION: Creating and using custom fprint functions for flexible output\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nblue := color.New(color.FgBlue).FprintfFunc()\nblue(myWriter, \"important notice: %s\", stars)\n\n// Mix up with multiple attributes\nsuccess := color.New(color.Bold, color.FgGreen).FprintlnFunc()\nsuccess(myWriter, \"Don't forget this...\")\n```\n\n----------------------------------------\n\nTITLE: Contextual Logging Implementation in Go\nDESCRIPTION: Demonstrates how to create and use contextual loggers with added fields for different components.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-kit/log/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tvar logger log.Logger\n\tlogger = log.NewLogfmtLogger(log.NewSyncWriter(os.Stderr))\n\tlogger = log.With(logger, \"instance_id\", 123)\n\n\tlogger.Log(\"msg\", \"starting\")\n\tNewWorker(log.With(logger, \"component\", \"worker\")).Run()\n\tNewSlacker(log.With(logger, \"component\", \"slacker\")).Run()\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking with Is* Methods\nDESCRIPTION: Shows how to check the type of a value before using it, using the IsStr method to verify if a value is a string.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/stretchr/objx/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif m.Get(\"code\").IsStr() { // Your code... }\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Exporters in YAML\nDESCRIPTION: Example showing how to configure multiple exporter instances with different settings. Demonstrates naming conventions and basic configuration structure for exporters.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/exporter/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  # Exporter 1.\n  # <exporter type>:\n  exampleexporter:\n    # <setting one>: <value one>\n    endpoint: 1.2.3.4:8080\n    # ...\n  # Exporter 2.\n  # <exporter type>/<name>:\n  exampleexporter/settings:\n    # <setting two>: <value two>\n    endpoint: 0.0.0.0:9211\n```\n\n----------------------------------------\n\nTITLE: TraceQL Regular Expression Matcher Change\nDESCRIPTION: Breaking change in TraceQL regular expression matching behavior where expressions are now fully anchored\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspan.foo =~ \"^bar$\"\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration from S3 in Go\nDESCRIPTION: Demonstrates loading JSON configuration from an Amazon S3 bucket using environment variables for authentication and connection details.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nif err := k.Load(s3.Provider(s3.Config{\n\tAccessKey: os.Getenv(\"AWS_S3_ACCESS_KEY\"),\n\tSecretKey: os.Getenv(\"AWS_S3_SECRET_KEY\"),\n\tRegion:    os.Getenv(\"AWS_S3_REGION\"),\n\tBucket:    os.Getenv(\"AWS_S3_BUCKET\"),\n\tObjectKey: \"dir/config.json\",\n}), json.Parser()); err != nil {\n\tlog.Fatalf(\"error loading config: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice template for applying the Apache License 2.0 to software projects. Includes placeholders for copyright year and owner information.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/aws/aws-sdk-go-v2/feature/ec2/imds/LICENSE.txt#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Using go-sysconf to retrieve system configuration values in Go\nDESCRIPTION: A basic example showing how to use the go-sysconf library to get system configuration values. The example retrieves the clock ticks value (SC_CLK_TCK) which would be equivalent to calling C.sysconf(C._SC_CLK_TCK) in a cgo program.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/tklauser/go-sysconf/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/tklauser/go-sysconf\"\n)\n\nfunc main() {\n\t// get clock ticks, this will return the same as C.sysconf(C._SC_CLK_TCK)\n\tclktck, err := sysconf.Sysconf(sysconf.SC_CLK_TCK)\n\tif err == nil {\n\t\tfmt.Printf(\"SC_CLK_TCK: %v\\n\", clktck)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Jitter with Backoff in Go\nDESCRIPTION: Demonstrates using the Jitter option to add randomness to backoff durations, which can help prevent synchronized retries in distributed systems. Includes random seed setting for reproducible results.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/jpillora/backoff/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport \"math/rand\"\n\nb := &backoff.Backoff{\n\tJitter: true,\n}\n\nrand.Seed(42)\n\nfmt.Printf(\"%s\\n\", b.Duration())\nfmt.Printf(\"%s\\n\", b.Duration())\nfmt.Printf(\"%s\\n\", b.Duration())\n\nfmt.Printf(\"Reset!\\n\")\nb.Reset()\n\nfmt.Printf(\"%s\\n\", b.Duration())\nfmt.Printf(\"%s\\n\", b.Duration())\nfmt.Printf(\"%s\\n\", b.Duration())\n```\n\n----------------------------------------\n\nTITLE: Replacing Regex Patterns in Strings in OTTL\nDESCRIPTION: The replace_pattern function replaces all string sections matching a regex pattern with a new value. It supports capture groups and optional function application.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_11\n\nLANGUAGE: OTTL\nCODE:\n```\nreplace_pattern(resource.attributes[\"process.command_line\"], \"password\\\\=[^\\\\s]*(\\\\s?)\", \"password=***\")\n```\n\nLANGUAGE: OTTL\nCODE:\n```\nreplace_pattern(metric.name, \"^kube_([0-9A-Za-z]+_)\", \"k8s.$$1.\")\n```\n\nLANGUAGE: OTTL\nCODE:\n```\nreplace_pattern(metric.name, \"^kube_([0-9A-Za-z]+_)\", \"$$1.\", SHA256, \"k8s.%s\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Kubernetes clusters by service name and trace root name in TraceQL\nDESCRIPTION: This TraceQL query filters traces from Kubernetes clusters named 'service-name' and excludes traces where the root name contains 'perf'. It uses resource attributes for filtering Kubernetes clusters and trace-level intrinsics for filtering the root name.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_19\n\nLANGUAGE: TraceQL\nCODE:\n```\n\"{ resource.k8s.cluster.name=\\\"service-name\\\" && trace:rootName !~ \\\".*perf.*\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Workload Identity for Tempo\nDESCRIPTION: Example configuration for using Azure Workload Identity authentication with Tempo.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/hosted-storage/azure.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntempo:\n  storage:\n    trace:\n      backend: azure\n      azure:\n        container_name: container-name\n        storage_account_name: storage-account-name\n        use_federated_token: true\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bitset Operations in Go\nDESCRIPTION: This example demonstrates various operations of the bitset library, including setting and testing bits, chaining operations, and performing set intersections.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/willf/bitset/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\n\t\"github.com/willf/bitset\"\n)\n\nfunc main() {\n\tfmt.Printf(\"Hello from BitSet!\\n\")\n\tvar b bitset.BitSet\n\t// play some Go Fish\n\tfor i := 0; i < 100; i++ {\n\t\tcard1 := uint(rand.Intn(52))\n\t\tcard2 := uint(rand.Intn(52))\n\t\tb.Set(card1)\n\t\tif b.Test(card2) {\n\t\t\tfmt.Println(\"Go Fish!\")\n\t\t}\n\t\tb.Clear(card1)\n\t}\n\n\t// Chaining\n\tb.Set(10).Set(11)\n\n\tfor i, e := b.NextSet(0); e; i, e = b.NextSet(i + 1) {\n\t\tfmt.Println(\"The following bit is set:\", i)\n\t}\n\tif b.Intersection(bitset.New(100).Set(10)).Count() == 1 {\n\t\tfmt.Println(\"Intersection works.\")\n\t} else {\n\t\tfmt.Println(\"Intersection doesn't work???\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: TraceQL Multi-Stage Query with Max Aggregation\nDESCRIPTION: A TraceQL metrics query demonstrating multiple pipeline stages, first calculating error rates by cluster and pod, then finding the maximum rate per cluster.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2023-11 TraceQL Metrics.md#2025-04-17_snippet_7\n\nLANGUAGE: traceql\nCODE:\n```\n{ status = error } | rate() by (cluster, pod) | max() by (cluster)\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Metrics in Tempo Distributor\nDESCRIPTION: YAML configuration block for enabling debug metrics in the Tempo distributor component to track span creation metrics.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-3.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndistributor:\n  metric_received_spans:\n    enabled: false\n    root_only: false\n```\n\n----------------------------------------\n\nTITLE: OTTL Comparison Expression Examples\nDESCRIPTION: Examples of comparison expressions showing various ways to compare values using operators like ==, !=, <, >, <=, >= with different data types including strings and attributes.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/LANGUAGE.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nname == \"a name\"\n1 < 2\nattributes[\"custom-attr\"] != nil\nIsMatch(resource.attributes[\"host.name\"], \"pod-*\")\n```\n\n----------------------------------------\n\nTITLE: Basic Structured Logging Example in Go\nDESCRIPTION: Demonstrates the difference between unstructured and structured logging approaches using go-kit/log.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-kit/log/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Unstructured\nlog.Printf(\"HTTP server listening on %s\", addr)\n\n// Structured\nlogger.Log(\"transport\", \"HTTP\", \"addr\", addr, \"msg\", \"listening\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Tempo URL\nDESCRIPTION: Example URL configuration for connecting Tempo to Grafana, typically using port 3200 which is Tempo's default HTTP port.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/use-trace-data.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://<tempo hostname>:3200\n```\n\n----------------------------------------\n\nTITLE: Listing Trace Blocks Information with Tempo CLI\nDESCRIPTION: These commands provide detailed information about blocks associated with a tenant, with options to include compacted data or scan individual blocks for integrity checks and statistics.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/tempo_cli.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntempo-cli list blocks <tenant-id>\n```\n\nLANGUAGE: bash\nCODE:\n```\ntempo-cli list block <tenant-id> <block-id>\n```\n\n----------------------------------------\n\nTITLE: Thread-safe Metric Registration in Go\nDESCRIPTION: Shows how to use GetOrRegister for thread-safe metric registration and updating. This method is preferred over the non-thread-safe Register function.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/rcrowley/go-metrics/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nt := metrics.GetOrRegisterTimer(\"account.create.latency\", nil)\nt.Time(func() {})\nt.Update(47)\n```\n\n----------------------------------------\n\nTITLE: Installing Tempo Microservices and Grafana\nDESCRIPTION: Helm commands to deploy Tempo in distributed mode along with Grafana and additional resources\nSOURCE: https://github.com/grafana/tempo/blob/main/example/helm/README.md#2025-04-17_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nhelm upgrade -f microservices-tempo-values.yaml --install tempo grafana/tempo-distributed\nhelm upgrade -f microservices-grafana-values.yaml --install grafana grafana/grafana\nkubectl apply -f microservices-extras.yaml\n```\n\n----------------------------------------\n\nTITLE: Polly for Client Creation with Tracing - Go\nDESCRIPTION: This snippet discusses the inclusion of pipeline policies to ensure HTTP spans are included when creating clients. This is crucial for tracking the lifecycle of HTTP requests and responses within the tracing framework.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Policies to include HTTP spans\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Circuit Breaker Pattern in Go\nDESCRIPTION: Example showing how to create and use a circuit breaker with configurable error threshold, success threshold, and timeout parameters. The code demonstrates error handling and different response scenarios when communicating with external services.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/eapache/go-resiliency/breaker/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nb := breaker.New(3, 1, 5*time.Second)\n\nfor {\n\tresult := b.Run(func() error {\n\t\t// communicate with some external service and\n\t\t// return an error if the communication failed\n\t\treturn nil\n\t})\n\n\tswitch result {\n\tcase nil:\n\t\t// success!\n\tcase breaker.ErrBreakerOpen:\n\t\t// our function wasn't run because the breaker was open\n\tdefault:\n\t\t// some other error\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating S2 Writer with Snappy Compatibility and Index in Go\nDESCRIPTION: This snippet demonstrates how to create an S2 writer with Snappy compatibility and add an index to the stream. It also shows how to get the index for separate storage.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\n\t// Add Index to stream...\n\tenc := s2.NewWriter(w, s2.WriterAddIndex())\n\tio.Copy(enc, r)\n\tenc.Close()\n\n\t// Get index for separate storage... \n\tenc := s2.NewWriter(w)\n\tio.Copy(enc, r)\n\tindex, err := enc.CloseIndex()\n```\n\n----------------------------------------\n\nTITLE: Using Bind Option with Kong CLI for Command Access\nDESCRIPTION: Example showing how to use Kong's Bind option to provide access to parent command values and custom types in command handlers. This demonstrates dependency injection in Kong commands.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/kong/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype CLI struct {\n  Debug bool `help:\"Enable debug mode.\"`\n\n  Rm RmCmd `cmd:\"\" help:\"Remove files.\"`\n  Ls LsCmd `cmd:\"\" help:\"List paths.\"`\n}\n\ntype AuthorName string\n\n// ...\nfunc (l *LsCmd) Run(cli *CLI) error {\n// use cli.Debug here !!\n  return nil\n}\n\nfunc (r *RmCmD) Run(author AuthorName) error{\n// use binded author here\n  return nil\n}\n\nfunc main() {\n  var cli CLI\n  \n  ctx := kong.Parse(&cli, Bind(AuthorName(\"penguin\")))\n  err := ctx.Run()\n```\n\n----------------------------------------\n\nTITLE: Configuring WAL Compression in Tempo\nDESCRIPTION: YAML configuration for setting the Write-Ahead Log (WAL) compression in Tempo. Uses snappy compression by default to reduce disk I/O and add checksums with minimal performance impact.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/compression.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  trace:\n    wal:\n      v2_encoding: snappy\n```\n\n----------------------------------------\n\nTITLE: YAML Processing Example in Go\nDESCRIPTION: Demonstrates how to unmarshal YAML into both a struct and a map, and then marshal them back to YAML format. Shows struct tag usage for customizing field names and formatting.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/gopkg.in/yaml.v3/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v3\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--- t:\n{Easy! {2 [3 4]}}\n\n--- t dump:\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n\n\n--- m:\nmap[a:Easy! b:map[c:2 d:[3 4]]]\n\n--- m dump:\na: Easy!\nb:\n  c: 2\n  d:\n  - 3\n  - 4\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling and Marshaling YAML in Go\nDESCRIPTION: This example demonstrates how to use the yaml package to unmarshal YAML data into Go structs and maps, and then marshal them back into YAML format. It showcases struct tags for custom field naming and flow style arrays.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/gopkg.in/yaml.v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v2\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Viper to Encrypted etcd Remote Provider (Go)\nDESCRIPTION: Example showing how to configure Viper to read encrypted configuration from an etcd remote provider using GPG encryption. It specifies the secure provider, endpoint, path, and keyring location.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_25\n\nLANGUAGE: go\nCODE:\n```\nviper.AddSecureRemoteProvider(\"etcd\",\"http://127.0.0.1:4001\",\"/config/hugo.json\",\"/etc/secrets/mykeyring.gpg\")\nviper.SetConfigType(\"json\") // because there is no file extension in a stream of bytes,  supported extensions are \"json\", \"toml\", \"yaml\", \"yml\", \"properties\", \"props\", \"prop\", \"env\", \"dotenv\"\nerr := viper.ReadRemoteConfig()\n```\n\n----------------------------------------\n\nTITLE: Installing Tempo Binary on Linux\nDESCRIPTION: Commands to download, verify, and install the Tempo binary on a Linux system. This process includes downloading the Debian package, verifying its checksum, and installing it using dpkg.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/linux.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -Lo tempo_2.2.0_linux_amd64.deb https://github.com/grafana/tempo/releases/download/v2.2.0/tempo_2.2.0_linux_amd64.deb\necho e81cb4ae47e1d8069efaad400df15547e809b849cbb18932e23ac3082995535b \\\n  tempo_2.2.0_linux_amd64.deb | sha256sum -c\ndpkg -i tempo_2.2.0_linux_amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Reading Environment Variables with Koanf in Go\nDESCRIPTION: Demonstrates loading configuration from environment variables using Koanf, with support for prefix filtering, key transformation, and nested configuration merging.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"strings\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/providers/env\"\n\t\"github.com/knadh/koanf/providers/file\"\n)\n\nvar k = koanf.New(\".\")\n\nfunc main() {\n\t// Load JSON config\n\tk.Load(file.Provider(\"mock/mock.json\"), json.Parser())\n\n\t// Load environment variables with key transformation\n\tk.Load(env.Provider(\"MYVAR_\", \".\", func(s string) string {\n\t\treturn strings.Replace(strings.ToLower(\n\t\t\tstrings.TrimPrefix(s, \"MYVAR_\")), \"_\", \".\", -1)\n\t}), nil)\n\n\tfmt.Println(\"name is = \", k.String(\"parent1.child1.name\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Code Sample: Go OpenTelemetry WithStackTrace Option\nDESCRIPTION: Example of stack trace option for span error recording and panic handling\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_25\n\nLANGUAGE: Go\nCODE:\n```\n\"go.opentelemetry.io/otel/trace\".WithStackTrace\n```\n\n----------------------------------------\n\nTITLE: Optimized Parsing with Default Locale\nDESCRIPTION: Shows how to create a default locale instance for better performance in multiple parse operations by avoiding repeated locale data lookups.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/elastic/lunes/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlocale, err := lunes.NewDefaultLocale(lunes.LocaleEsES)\n\n// ParseWithLocale has a better performance for multiple parse operations, as it does not\n// need to look up the locale data in each iteration.\nfor _, val := range valuesToParse {\n    t, err := lunes.ParseWithLocale(\"Monday Jan _2 2006 15:04:05\", val, locale)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Memcached Request Duration in PromQL\nDESCRIPTION: This PromQL query calculates the rate of Memcached request durations grouped by status code. It's used to observe errors related to connection limits in Memcached.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/caching.md#2025-04-17_snippet_0\n\nLANGUAGE: promql\nCODE:\n```\nsum by (status_code) (\n  rate(tempo_memcache_request_duration_seconds_count{}[$__rate_interval])\n)\n```\n\n----------------------------------------\n\nTITLE: Example Output Series from the compare Function in Grafana Tempo\nDESCRIPTION: This snippet showcases example output series generated by the compare function, illustrating how it categorizes data into selection and baseline groups based on span attributes. The output reveals significant differences detected during the analysis.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/metrics-queries/functions.md#2025-04-17_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\n`{ __meta_type=\"baseline\", resource.cluster=\"prod\" } 123\n{ __meta_type=\"baseline\", resource.cluster=\"qa\" } 124\n{ __meta_type=\"selection\", resource.cluster=\"prod\" } 456   <--- significant difference detected\n{ __meta_type=\"selection\", resource.cluster=\"qa\" } 125\n{ __meta_type=\"selection\", resource.cluster=\"dev\"} 126  <--- cluster=dev was found in the highlighted spans but not in the baseline`\n```\n\n----------------------------------------\n\nTITLE: Migrate Tenant Command\nDESCRIPTION: Command to copy blocks between different tenants and backends with tenant ID rewriting.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/tempo_cli.md#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ntempo-cli migrate tenant <source tenant> <dest tenant>\n```\n\n----------------------------------------\n\nTITLE: Setting Max Trace Size with Per-Tenant Overrides\nDESCRIPTION: YAML configuration for limiting trace size at the tenant level. This example sets a 15MB limit for a specific tenant, which is appropriate for approximately 50K spans with an average span size of 300 bytes.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/out-of-memory-errors.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n    'tenant123':\n        max_bytes_per_trace: 1.5e+07\n```\n\n----------------------------------------\n\nTITLE: Stateless Gzip Compression with Buffered Output in Go\nDESCRIPTION: This snippet demonstrates how to use the klauspost/compress/gzip package to perform stateless gzip compression with a buffered writer.  Stateless compression is useful for scenarios with many concurrent compressors and little activity, and the bufio.Writer controls the write size, limiting memory usage.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\n\t// replace 'ioutil.Discard' with your output.\n\tgzw, err := gzip.NewWriterLevel(ioutil.Discard, gzip.StatelessCompression)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer gzw.Close()\n\n\tw := bufio.NewWriterSize(gzw, 4096)\n\tdefer w.Flush()\n\t\n\t// Write to 'w' \n```\n```\n\n----------------------------------------\n\nTITLE: Encoding Stream with S2 Compression in Go\nDESCRIPTION: This function demonstrates how to compress data from a source Reader to a destination Writer using S2 compression. It creates a new S2 Writer, copies data from the source to the encoder, and ensures proper closure of the encoder.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc EncodeStream(src io.Reader, dst io.Writer) error {\n    enc := s2.NewWriter(dst)\n    _, err := io.Copy(enc, src)\n    if err != nil {\n        enc.Close()\n        return err\n    }\n    // Blocks until compression is done.\n    return enc.Close() \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Zstd Stream Compression in Go\nDESCRIPTION: Basic implementation of a stream compressor using zstd. Creates a new writer with default options and compresses input to output. Demonstrates proper error handling and resource cleanup.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Compress input to output.\nfunc Compress(in io.Reader, out io.Writer) error {\n    enc, err := zstd.NewWriter(out)\n    if err != nil {\n        return err\n    }\n    _, err = io.Copy(enc, in)\n    if err != nil {\n        enc.Close()\n        return err\n    }\n    return enc.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Efficient Block-Based Zstd Compression in Go\nDESCRIPTION: Example of efficient block-based compression using a cached encoder instance. Shows how to reuse the encoder to minimize allocations and improve performance for compressing small blocks of data.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\n// Create a writer that caches compressors.\n// For this operation type we supply a nil Reader.\nvar encoder, _ = zstd.NewWriter(nil)\n\n// Compress a buffer. \n// If you have a destination buffer, the allocation in the call can also be eliminated.\nfunc Compress(src []byte) []byte {\n    return encoder.EncodeAll(src, make([]byte, 0, len(src)))\n}\n```\n\n----------------------------------------\n\nTITLE: Local Color Control in Go\nDESCRIPTION: Examples of controlling color output for specific color instances\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nc := color.New(color.FgCyan)\nc.Println(\"Prints cyan text\")\n\nc.DisableColor()\nc.Println(\"This is printed without any color\")\n\nc.EnableColor()\nc.Println(\"This prints again cyan...\")\n```\n\n----------------------------------------\n\nTITLE: Building Partial URLs (Host or Path) in Gorilla Mux\nDESCRIPTION: Demonstrates building only the host or path components of a URL rather than the complete URL. This is useful when you need just a portion of the URL for constructing links or redirects.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// \"http://news.example.com/\"\nhost, err := r.Get(\"article\").URLHost(\"subdomain\", \"news\")\n\n// \"/articles/technology/42\"\npath, err := r.Get(\"article\").URLPath(\"category\", \"technology\", \"id\", \"42\")\n```\n\n----------------------------------------\n\nTITLE: Managed Identity Authentication Implementation\nDESCRIPTION: Shows how to implement managed identity authentication using both libraries. Includes examples for both system-assigned and user-assigned managed identities.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-06-01/subscriptions\"\n    \"github.com/Azure/go-autorest/autorest\"\n    \"github.com/Azure/go-autorest/autorest/adal\"\n)\n\nspt, err := adal.NewServicePrincipalTokenFromManagedIdentity(\"https://management.azure.com/\", nil)\nhandle(err)\n\nclient := subscriptions.NewClient()\nclient.Authorizer = autorest.NewBearerAuthorizer(spt)\n```\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armsubscriptions\"\n)\n\ncred, err := azidentity.NewManagedIdentityCredential(nil)\nhandle(err)\n\nclient, err := armsubscriptions.NewClient(cred, nil)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pipeline Services with Exporters\nDESCRIPTION: Example showing how to configure service pipelines with multiple exporters. Demonstrates how to enable exporters by adding them to trace pipelines.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/exporter/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  pipelines:\n    # Valid pipelines are: traces, metrics or logs\n    # Trace pipeline 1.\n    traces:\n      receivers: [examplereceiver]\n      processors: []\n      exporters: [exampleexporter, exampleexporter/settings]\n    # Trace pipeline 2.\n    traces/another:\n      receivers: [examplereceiver]\n      processors: []\n      exporters: [exampleexporter, exampleexporter/settings]\n```\n\n----------------------------------------\n\nTITLE: Creating Job Labels for Tempo Metrics in Grafana Alloy\nDESCRIPTION: This Alloy configuration snippet shows how to create job labels for Tempo metrics using the namespace and component name, following the required nomenclature for Tempo dashboards.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/monitor/set-up-monitoring.md#2025-04-17_snippet_2\n\nLANGUAGE: alloy\nCODE:\n```\nrule {\n  source_labels = [\"namespace\", \"k8s_component_name\"]\n  action = \"replace\"\n  regex = \"(.*?);(.*?)\"\n  replacement = \"$1/$2\"\n  target_label = \"job\"\n}\n```\n\n----------------------------------------\n\nTITLE: Marshaling Go Struct to TOML\nDESCRIPTION: This code snippet demonstrates how to marshal a Go struct into a TOML document using the `toml.Marshal` function. It converts a `MyConfig` struct instance into a TOML formatted string.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n\"cfg := MyConfig{\\n\\tVersion: 2,\\n\\tName:    \\\"go-toml\\\",\\n\\tTags:    []string{\\\"go\\\", \\\"toml\\\"},\\n}\n\nb, err := toml.Marshal(cfg)\nif err != nil {\\n\\tpanic(err)\\n}\nfmt.Println(string(b))\n\n// Output:\\n// Version = 2\\n// Name = 'go-toml'\\n// Tags = ['go', 'toml']\"\n```\n\n----------------------------------------\n\nTITLE: Starting Distributed Tracing Span - Go\nDESCRIPTION: This snippet introduces the function `runtime.StartSpan()` which is designed to be used by SDKs to initiate a tracing span. The function is essential for distributed tracing, allowing developers to track the progress of requests across different services.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc StartSpan(ctx context.Context, name string) (context.Context, Span) {\n    // Implementation to start a tracing span\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration with External Provider Reference\nDESCRIPTION: Example YAML configuration demonstrating how to reference external configuration providers using the file provider syntax.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/service/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n\nexporters: ${file:otlp-exporter.yaml}\n\nservice:\n  extensions: [ ]\n  pipelines:\n    traces:\n      receivers:  [ otlp ]\n      processors: [  ]\n      exporters:  [ otlp ]\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling TOML to Go Struct\nDESCRIPTION: This code snippet demonstrates how to unmarshal a TOML document into a Go struct using the `toml.Unmarshal` function. It parses a TOML document represented as a string and populates the fields of a `MyConfig` struct.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n\"doc := `\\nversion = 2\\nname = \\\"go-toml\\\"\\ntags = [\\\"go\\\", \\\"toml\\\"]\\n`\n\nvar cfg MyConfig\nerr := toml.Unmarshal([]byte(doc), &cfg)\nif err != nil {\\n\\tpanic(err)\\n}\nfmt.Println(\\\"version:\\\", cfg.Version)\nfmt.Println(\\\"name:\\\", cfg.Name)\nfmt.Println(\\\"tags:\\\", cfg.Tags)\n\n// Output:\\n// version: 2\\n// name: go-toml\\n// tags: [go toml]\"\n```\n\n----------------------------------------\n\nTITLE: Error Cause Type Switching\nDESCRIPTION: Demonstrates type switching on the root cause of an error to handle specific error types\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nswitch err := errors.Cause(err).(type) {\ncase *MyError:\n        // handle specifically\ndefault:\n        // unknown error\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Cause Interface\nDESCRIPTION: Shows the causer interface definition used for retrieving the root cause of an error through recursive unwrapping\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype causer interface {\n        Cause() error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a CacheOnReadFs composite backend\nDESCRIPTION: Demonstrates creation of a caching filesystem where files are copied from a base layer to an overlay layer upon first read. Files remain in the cache for the specified duration, with 0 meaning they are cached forever.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nbase := afero.NewOsFs()\nlayer := afero.NewMemMapFs()\nufs := afero.NewCacheOnReadFs(base, layer, 100 * time.Second)\n```\n\n----------------------------------------\n\nTITLE: Using bottomk Function in TraceQL\nDESCRIPTION: This example demonstrates the use of the bottomk function to return the 5 lowest results of a rate calculation grouped by service name in TraceQL.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/metrics-queries/functions.md#2025-04-17_snippet_13\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ } | rate() by(resource.service.name) | bottomk(5)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Config Struct in Go\nDESCRIPTION: Basic configuration struct implementation pattern. The config struct should be unexported unless external customization is needed.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// config contains configuration options for a thing.\ntype config struct {\n\t// options ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zipkin Receiver in OpenTelemetry Collector YAML\nDESCRIPTION: This snippet shows the minimal configuration needed to enable the Zipkin receiver in the OpenTelemetry Collector. The receiver can be included in the collector's configuration file and will listen for span data sent from Zipkin.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/receiver/zipkinreceiver/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  zipkin:\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Middleware for Gorilla Mux\nDESCRIPTION: Demonstrates how to create a simple logging middleware that logs the URI of each request. The middleware is defined as a function that takes a handler and returns a new handler that logs information before passing the request to the next handler in the chain.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc loggingMiddleware(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        // Do stuff here\n        log.Println(r.RequestURI)\n        // Call the next handler, which can be another middleware in the chain, or the final handler.\n        next.ServeHTTP(w, r)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Trace by ID with Tempo Query V2 API\nDESCRIPTION: GET request format for retrieving a trace by its ID from the Tempo query frontend service. Parameters allow specifying a time range to limit the search scope.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/_index.md#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v2/traces/<traceid>?start=<start>&end=<end>\n```\n\n----------------------------------------\n\nTITLE: Testing Handlers in a Go Web Application with Gorilla Mux\nDESCRIPTION: This snippet illustrates how to implement a simple health check HTTP handler and how to test it using a ResponseRecorder. It demonstrates the process of creating a request, executing the handler, and verifying the response.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n// endpoints.go\npackage main\n\nfunc HealthCheckHandler(w http.ResponseWriter, r *http.Request) {\n    // A very simple health check.\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    w.WriteHeader(http.StatusOK)\n\n    // In the future we could report back on the status of our DB, or our cache\n    // (e.g. Redis) by performing a simple PING, and include them in the response.\n    io.WriteString(w, `{\"alive\": true}`)\n}\n\nfunc main() {\n    r := mux.NewRouter()\n    r.HandleFunc(\"/health\", HealthCheckHandler)\n\n    log.Fatal(http.ListenAndServe(\"localhost:8080\", r))\n}\n\n```\n\nLANGUAGE: go\nCODE:\n```\n// endpoints_test.go\npackage main\n\nimport (\n    \"net/http\"\n    \"net/http/httptest\"\n    \"testing\"\n)\n\nfunc TestHealthCheckHandler(t *testing.T) {\n    // Create a request to pass to our handler. We don't have any query parameters for now, so we'll\n    // pass 'nil' as the third parameter.\n    req, err := http.NewRequest(\"GET\", \"/health\", nil)\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // We create a ResponseRecorder (which satisfies http.ResponseWriter) to record the response.\n    rr := httptest.NewRecorder()\n    handler := http.HandlerFunc(HealthCheckHandler)\n\n    // Our handlers satisfy http.Handler, so we can call their ServeHTTP method\n    // directly and pass in our Request and ResponseRecorder.\n    handler.ServeHTTP(rr, req)\n\n    // Check the status code is what we expect.\n    if status := rr.Code; status != http.StatusOK {\n        t.Errorf(\"handler returned wrong status code: got %v want %v\",\n            status, http.StatusOK)\n    }\n\n    // Check the response body is what we expect.\n    expected := `{\"alive\": true}`\n    if rr.Body.String() != expected {\n        t.Errorf(\"handler returned unexpected body: got %v want %v\",\n            rr.Body.String(), expected)\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Table Rendering Example in Go\nDESCRIPTION: Demonstrates how to create and render a basic table with headers, rows, separators, and footers using the go-pretty/table package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"os\"\n\n    \"github.com/jedib0t/go-pretty/v6/table\"\n)\n\nfunc main() {\n    t := table.NewWriter()\n    t.SetOutputMirror(os.Stdout)\n    t.AppendHeader(table.Row{\"#\", \"First Name\", \"Last Name\", \"Salary\"})\n    t.AppendRows([]table.Row{\n        {1, \"Arya\", \"Stark\", 3000},\n        {20, \"Jon\", \"Snow\", 2000, \"You know nothing, Jon Snow!\"},\n    })\n    t.AppendSeparator()\n    t.AppendRow([]interface{}{300, \"Tyrion\", \"Lannister\", 5000})\n    t.AppendFooter(table.Row{\"\", \"\", \"Total\", 10000})\n    t.Render()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tempo with Helm Command\nDESCRIPTION: Command to install Tempo using Helm with a custom configuration file.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/helm-charts/tempo-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nhelm -n tempo-test install tempo grafana/tempo-distributed -f custom.yaml\n```\n\n----------------------------------------\n\nTITLE: Reading a Parquet File with Explicit Schema\nDESCRIPTION: Demonstrates reading a Parquet file with an explicitly defined schema. This enforces a specific schema on the data being read, and can apply conversion rules to ensure the data matches the schema, useful when the source is untrusted.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/parquet-go/parquet-go/README.md#2025-04-17_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\n\"schema := parquet.SchemaOf(new(RowType))\nreader := parquet.NewReader(file, schema)\n...\"\n```\n\n----------------------------------------\n\nTITLE: Configuring IPv6 Protocol for Tempo Components in YAML\nDESCRIPTION: This YAML configuration sets up IPv6 for various Tempo components including memberlist, compactor, metrics generator, ingester, and server. It configures the gRPC and HTTP servers to listen on IPv6 addresses.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/network/ipv6.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmemberlist:\n  bind_addr:\n    - '::'\n  bind_port: 7946\n\ncompactor:\n  ring:\n    kvstore:\n      store: memberlist\n    enable_inet6: true\n\nmetrics_generator:\n  ring:\n    enable_inet6: true\n\ningester:\n  lifecycler:\n    enable_inet6: true\n\nserver:\n  grpc_listen_address: '::0'\n  grpc_listen_port: 9095\n  http_listen_address: '::0'\n  http_listen_port: 3200\n```\n\n----------------------------------------\n\nTITLE: Auto-Merging Rows and Columns in Go Table\nDESCRIPTION: Demonstrates how to configure automatic cell merging horizontally and vertically using RowConfig and ColumnConfig. Shows merging of similar values across Node IP, Pods, Namespace, and Container columns.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-17_snippet_5\n\nLANGUAGE: golang\nCODE:\n```\nrowConfigAutoMerge := table.RowConfig{AutoMerge: true}\n\nt := table.NewWriter()\nt.AppendHeader(table.Row{\"Node IP\", \"Pods\", \"Namespace\", \"Container\", \"RCE\", \"RCE\"}, rowConfigAutoMerge)\nt.AppendHeader(table.Row{\"Node IP\", \"Pods\", \"Namespace\", \"Container\", \"EXE\", \"RUN\"})\nt.AppendRow(table.Row{\"1.1.1.1\", \"Pod 1A\", \"NS 1A\", \"C 1\", \"Y\", \"Y\"}, rowConfigAutoMerge)\n// ... additional rows\nt.SetColumnConfigs([]table.ColumnConfig{\n    {Number: 1, AutoMerge: true},\n    // ... column configurations\n})\nfmt.Println(t.Render())\n```\n\n----------------------------------------\n\nTITLE: Defining Parquet Schema for Tempo Trace Data\nDESCRIPTION: This schema defines the structure for storing trace data in Parquet format. It includes nested structures for traces, resource spans, and instrumentation library spans, with dedicated columns for common attributes and optimizations for search efficiency.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2022-04 Parquet.md#2025-04-17_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Trace {\n    # Trace-level attributes\n    required binary TraceID (STRING);\n    required binary RootServiceName (STRING);\n    required binary RootSpanName (STRING);\n    required int64 StartTimeUnixNano (INT(64,false));\n    required int64 DurationNanos (INT(64,false));\n\n    repeated group ResourceSpans {\n        required group Resource {\n            repeated group Attrs {\n                required binary Key (STRING);\n                optional binary Value (STRING);\n                optional binary ValueArray;\n                optional boolean ValueBool;\n                optional double ValueDouble;\n                optional int64 ValueInt (INT(64,true));\n                optional binary ValueKVList;\n            }\n\n            # Dedicated columns for common attributes\n            required binary ServiceName (STRING);\n            optional binary Cluster (STRING);\n            optional binary Container (STRING);\n            optional binary Namespace (STRING);\n            optional binary Pod (STRING);\n            optional binary K8sClusterName (STRING);\n            optional binary K8sContainerName (STRING);\n            optional binary K8sNamespaceName (STRING);\n            optional binary K8sPodName (STRING);\n        }\n        repeated group InstrumentationLibrarySpans {\n            repeated group Spans {\n                required binary ID;\n                required int32 DroppedAttributesCount (INT(32,true));\n                required int32 DroppedEventsCount (INT(32,true));\n\n                required int32 Kind (INT(8,true));\n                required binary Name (STRING);\n                required binary ParentSpanID (STRING);\n                required int64 StartUnixNanos (INT(64,false));\n                required int64 EndUnixNanos (INT(64,false));\n                required binary TraceState (STRING);\n                required int32 StatusCode (INT(8,true));\n                required binary StatusMessage (STRING);\n\n                repeated group Attrs {\n                    required binary Key (STRING);\n                    optional binary Value (STRING);\n                    optional binary ValueArray;\n                    optional boolean ValueBool;\n                    optional double ValueDouble;\n                    optional int64 ValueInt (INT(64,true));\n                    optional binary ValueKVList;\n                }\n\n                repeated group Events {\n                    repeated group Attrs {\n                        required binary Key (STRING);\n                        required binary Value (STRING);\n                    }\n                    required int32 DroppedAttributesCount (INT(32,true));\n                    required binary Name (STRING);\n                    required int64 TimeUnixNano (INT(64,false));\n                }\n\n                # Dedicated columns for common span attributes\n                optional binary HttpMethod (STRING);\n                optional binary HttpUrl (STRING);\n                optional int64 HttpStatusCode (INT(64,true));\n            }\n\n            required group InstrumentationLibrary {\n                required binary Name (STRING);\n                required binary Version (STRING);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LState Pool in Workers\nDESCRIPTION: Example of using the LState pool pattern in worker goroutines to safely manage Lua states.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-17_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nfunc MyWorker() {\n   L := luaPool.Get()\n   defer luaPool.Put(L)\n   /* your code here */\n}\n\nfunc main() {\n    defer luaPool.Shutdown()\n    go MyWorker()\n    go MyWorker()\n    /* etc... */\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Tempo Overrides Configuration\nDESCRIPTION: New configuration format for Tempo overrides module using the defaults block with nested settings for ingestion, read operations and metrics generation.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-3.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  defaults:\n    ingestion:\n      rate_strategy: local\n      rate_limit_bytes: 12345\n      burst_size_bytes: 67890\n    read:\n      max_search_duration: 17s\n    forwarders: ['foo']\n    metrics_generator:\n      processors: [service-graphs, span-metrics]\n```\n\n----------------------------------------\n\nTITLE: Testing Deep Equality with Go\nDESCRIPTION: This snippet demonstrates a test case using the deep.Equal function from the go-test/deep package to compare two struct instances. It checks for differences in their fields and prints out the differences in a human-readable format. Dependencies include the testing package and the go-test/deep package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-test/deep/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main_test\n\nimport (\n\t\"testing\"\n\t\"github.com/go-test/deep\"\n)\n\ntype T struct {\n\tName    string\n\tNumbers []float64\n}\n\nfunc TestDeepEqual(t *testing.T) {\n\t// Can you spot the difference?\n\tt1 := T{\n\t\tName:    \"Isabella\",\n\t\tNumbers: []float64{1.13459, 2.29343, 3.010100010},\n\t}\n\tt2 := T{\n\t\tName:    \"Isabella\",\n\t\tNumbers: []float64{1.13459, 2.29843, 3.010100010},\n\t}\n\n\tif diff := deep.Equal(t1, t2); diff != nil {\n\t\tt.Error(diff)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Buffer with S2 Compression in Go\nDESCRIPTION: This function shows how to compress a single block of data as a stream using S2 compression. It uses the EncodeBuffer method, which is more efficient for single blocks of data. The encoder takes ownership of the buffer until the stream is closed.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc EncodeStream(src []byte, dst io.Writer) error {\n    enc := s2.NewWriter(dst)\n    // The encoder owns the buffer until Flush or Close is called.\n    err := enc.EncodeBuffer(src)\n    if err != nil {\n        enc.Close()\n        return err\n    }\n    // Blocks until compression is done.\n    return enc.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Info with Logger Object\nDESCRIPTION: This code demonstrates how to use the `logr.Logger` object to log information. The example shows an `appObject` struct containing a logger, which is then used within the `Run` method to log information including a timestamp. This allows for structured logging of events within the application.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n    type appObject struct {\n        // ... other fields ...\n        logger logr.Logger\n        // ... other fields ...\n    }\n\n    func (app *appObject) Run() {\n        app.logger.Info(\"starting up\", \"timestamp\", time.Now())\n\n        // ... app code ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Accessing xid Component Information in Go\nDESCRIPTION: Shows how to extract the embedded metadata from an xid instance, including machine identifier, process ID, timestamp, and counter value.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/rs/xid/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nguid.Machine()\nguid.Pid()\nguid.Time()\nguid.Counter()\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingester Block Timeout in Tempo\nDESCRIPTION: Configuration for the ingester complete_block_timeout setting, which determines how long completed blocks are held in the ingester after being flushed to the backend. This allows queriers to access traces while their blocklists are being updated.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/polling.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ningester:\n  # How long to hold a complete block in the ingester after it has been flushed to the backend. Default is 15m\n  [complete_block_timeout: <duration>]\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Values with unsafe.Pointer in Go using reflect2\nDESCRIPTION: Demonstrates how to use reflect2 with unsafe.Pointer to get and set values without type checking. This approach provides direct memory access for better performance.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/modern-go/reflect2/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvalType := reflect2.TypeOf(1)\ni := 1\nj := 10\nvalType.UnsafeSet(unsafe.Pointer(&i), unsafe.Pointer(&j))\n// i will be 10\n```\n\n----------------------------------------\n\nTITLE: Getting the Port of Delve Debugger inside the Container\nDESCRIPTION: This command retrieves the port mapping for the Delve debugger inside the container. It uses `docker ps` with the `--format` option to extract the port information. The output shows the mapping between the host port and the container port (e.g., `0.0.0.0:53467->2345`).\nSOURCE: https://github.com/grafana/tempo/blob/main/integration/e2e/README.md#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n\"docker ps --format '{{.Ports}}'  \"\n```\n\n----------------------------------------\n\nTITLE: Relabeling Kubernetes Metadata for Tempo Metrics in Grafana Alloy\nDESCRIPTION: This YAML snippet demonstrates how to relabel Kubernetes metadata for Tempo components in Grafana Alloy, specifically renaming the component label for better usability.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/monitor/set-up-monitoring.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrule {\n  source_labels = [\"__meta_kubernetes_pod_label_app_kubernetes_io_component\"]\n  action = \"replace\"\n  regex = \"(.*)\"\n  replacement = \"$1\"\n  target_label = \"k8s_component_name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Efficient Column Writing for Primitive Types in Go using parquet.GenericBuffer\nDESCRIPTION: This example shows how to efficiently write columns of primitive types (int64 and float32) to a parquet.GenericBuffer. It uses type assertions to access specialized write methods for each column type, avoiding the need for intermediary parquet.Value arrays.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/parquet-go/parquet-go/README.md#2025-04-17_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ntype RowType struct { ID int64; Value float32 }\n\nfunc writeColumns(buffer *parquet.GenericBuffer[RowType], ids []int64, values []float32) error {\n    if len(ids) != len(values) {\n        return fmt.Errorf(\"number of ids and values mismatch: ids=%d values=%d\", len(ids), len(values))\n    }\n    columns := buffer.ColumnBuffers()\n    if err := columns[0].(parquet.Int64Writer).WriteInt64s(ids); err != nil {\n        return err\n    }\n    if err := columns[1].(parquet.FloatWriter).WriteFloats(values); err != nil {\n        return err\n    }\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with DefaultAzureCredential\nDESCRIPTION: Example showing how to authenticate a client from the armresources module using DefaultAzureCredential.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\nif err != nil {\n  // handle error\n}\n\nclient := armresources.NewResourceGroupsClient(\"subscription ID\", cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Row Length Restriction in Go Table\nDESCRIPTION: Shows how to restrict the maximum text width for rows using SetAllowedRowLength() method, which truncates content that exceeds the specified length.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-17_snippet_8\n\nLANGUAGE: golang\nCODE:\n```\nt.SetAllowedRowLength(50)\nt.Render()\n```\n\n----------------------------------------\n\nTITLE: Applying Manifests to Kubernetes with Tanka and kubectl\nDESCRIPTION: The snippets show how to apply Kubernetes manifests using Tanka and kubectl. Tanka provides a diff command before applying, while kubectl can be used directly on the ./manifests directory. Both require a configured Kubernetes cluster to apply the changes.\nSOURCE: https://github.com/grafana/tempo/blob/main/operations/jsonnet/microservices/README.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Show the difference between your Jsonnet definition and your Kubernetes cluster:\ntk diff environments/default\n\n# Apply changes to your Kubernetes cluster:\ntk apply environments/default\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Review the changes that will apply to your Kubernetes cluster:\nkubectl apply --dry-run=client -k manifests/\n\n# Apply the changes to your Kubernetes cluster:\nkubectl apply -k manifests/\n```\n\n----------------------------------------\n\nTITLE: Client Secret Authentication Implementation\nDESCRIPTION: Demonstrates client secret authentication implementation using both autorest/adal and azidentity. Shows how to create authenticated clients for Azure services.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-06-01/subscriptions\"\n    \"github.com/Azure/go-autorest/autorest\"\n    \"github.com/Azure/go-autorest/autorest/adal\"\n)\n\noauthCfg, err := adal.NewOAuthConfig(\"https://login.microsoftonline.com\", tenantID)\nhandle(err)\nspt, err := adal.NewServicePrincipalTokenWithSecret(\n    *oauthCfg, clientID, \"https://management.azure.com/\", &adal.ServicePrincipalTokenSecret{ClientSecret: secret},\n)\nhandle(err)\n\nclient := subscriptions.NewClient()\nclient.Authorizer = autorest.NewBearerAuthorizer(spt)\n```\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armsubscriptions\"\n)\n\ncred, err := azidentity.NewClientSecretCredential(tenantID, clientID, secret, nil)\nhandle(err)\n\nclient, err := armsubscriptions.NewClient(cred, nil)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: OTTL Path Expression Examples\nDESCRIPTION: Examples demonstrating valid path expressions in OTTL for accessing telemetry fields, nested attributes, and map values.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/LANGUAGE.md#2025-04-17_snippet_0\n\nLANGUAGE: OTTL\nCODE:\n```\nmetric.name\nspan.value_double\nresource.name\nresource.attributes[\"key\"]\nlog.attributes[\"nested\"][\"values\"]\ndatapoint.cache[\"slice\"][1]\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Graph Maximum Items in YAML\nDESCRIPTION: A YAML configuration snippet to adjust the maximum number of edges that the service graph processor can track at once.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/metrics-generator.md#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics_generator:\n  processor:\n    service_graphs:\n      max_items: 10000\n```\n\n----------------------------------------\n\nTITLE: Creating Tempo Monolithic Deployment with In-Memory Storage\nDESCRIPTION: This YAML snippet demonstrates how to create a basic Tempo monolithic deployment using the TempoMonolithic Custom Resource. It configures trace ingestion over OTLP/gRPC and OTLP/HTTP, with traces stored in a 2 GiB tmpfs volume for in-memory storage.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/monolithic.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: tempo.grafana.com/v1alpha1\nkind: TempoMonolithic\nmetadata:\n  name: sample\nspec:\n  storage:\n    traces:\n      backend: memory\n      size: 2Gi\n```\n\n----------------------------------------\n\nTITLE: Basic Time Parsing with Locale Support\nDESCRIPTION: Demonstrates basic time parsing functionality with locale support using Parse and ParseInLocation functions. Accepts a time layout, value string, and locale identifier.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/elastic/lunes/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nt, err := lunes.Parse(\"Monday Jan _2 2006 15:04:05\", \"lunes oct 27 1988 11:53:29\", lunes.LocaleEsES)\n\n// parse in specific time zones.\nt, err := lunes.ParseInLocation(\"Monday Jan _2 2006 15:04:05\", \"lunes oct 27 1988 11:53:29\", time.UTC, lunes.LocaleEsES)\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Graph Wait Time in YAML\nDESCRIPTION: A YAML configuration snippet to adjust how long the service graph processor waits to find matching edges before giving up.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/metrics-generator.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics_generator:\n  processor:\n    service_graphs:\n      wait: 10s\n```\n\n----------------------------------------\n\nTITLE: Configuring TempoStack Instance with S3 Storage\nDESCRIPTION: This YAML snippet shows how to reference the S3 secret in a TempoStack instance configuration, specifying the secret name and type.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/object-storage.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  storage:\n    secret:\n      name: tempostack-dev-s3\n      type: s3\n```\n\n----------------------------------------\n\nTITLE: Creating AWS IAM Role for Tempo S3 Access\nDESCRIPTION: This AWS CLI command creates an IAM role for Tempo to access S3, using the trust relationship defined in a JSON file.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/object-storage.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\naws iam create-role \\\n  --role-name \"tempo-s3-access\" \\\n  --assume-role-policy-document \"file:///tmp/trust.json\" \\\n  --query Role.Arn \\\n  --output text\n```\n\n----------------------------------------\n\nTITLE: Using Complex Authentication Middleware with Gorilla Mux\nDESCRIPTION: Shows how to initialize and apply the complex authentication middleware to a Gorilla Mux router. This creates and populates the token-to-user map before adding the middleware to the router.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\nr.HandleFunc(\"/\", handler)\n\namw := authenticationMiddleware{tokenUsers: make(map[string]string)}\namw.Populate()\n\nr.Use(amw.Middleware)\n```\n\n----------------------------------------\n\nTITLE: Setting up HttpFs in Afero\nDESCRIPTION: Shows how to create an HTTP-compatible file system wrapper that can be used with Go's standard http.FileServer. This allows any Afero filesystem to be served over HTTP.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nhttpFs := afero.NewHttpFs(<ExistingFS>)\nfileserver := http.FileServer(httpFs.Dir(<PATH>))\nhttp.Handle(\"/\", fileserver)\n```\n\n----------------------------------------\n\nTITLE: Configuring LogRecord Limits in Go OpenTelemetry SDK\nDESCRIPTION: Function signatures for configuring LogRecord attribute limits including count and value length limits. These options can also be set via environment variables.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/sdk/log/DESIGN.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc WithAttributeCountLimit(limit int) LoggerProviderOption\nfunc WithAttributeValueLengthLimit(limit int) LoggerProviderOption\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Storage in Tempo\nDESCRIPTION: Basic configuration structure for setting up Azure blob storage in Tempo\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  azure:\n    storage_account_name:\n    storage_account_key:\n    container_name:\n```\n\n----------------------------------------\n\nTITLE: Getting Variable Names for a Route in Gorilla Mux\nDESCRIPTION: Demonstrates how to retrieve all required variable names for a given route using GetVarNames(). This is useful for determining what parameters are needed when building URLs for a route.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\nr.Host(\"{domain}\").\n    Path(\"/{group}/{item_id}\").\n    Queries(\"some_data1\", \"{some_data1}\").\n    Queries(\"some_data2\", \"{some_data2}\").\n    Name(\"article\")\n\n// Will print [domain group item_id some_data1 some_data2] <nil>\nfmt.Println(r.Get(\"article\").GetVarNames())\n```\n\n----------------------------------------\n\nTITLE: Building URLs with Host and Query Parameters in Gorilla Mux\nDESCRIPTION: Demonstrates creating a complex route with subdomain, path, and query parameters, then building a complete URL from it. This shows how to handle complex URL patterns with variables at different levels.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\nr.Host(\"{subdomain}.example.com\").\n  Path(\"/articles/{category}/{id:[0-9]+}\").\n  Queries(\"filter\", \"{filter}\").\n  HandlerFunc(ArticleHandler).\n  Name(\"article\")\n\n// url.String() will be \"http://news.example.com/articles/technology/42?filter=gorilla\"\nurl, err := r.Get(\"article\").URL(\"subdomain\", \"news\",\n                                 \"category\", \"technology\",\n                                 \"id\", \"42\",\n                                 \"filter\", \"gorilla\")\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Client Settings in Tempo YAML\nDESCRIPTION: This YAML snippet shows how to configure TLS settings for Tempo clients, including certificate paths, server name, and cipher suites. It's used for components like ingester, metrics generator, and querier when communicating with other Tempo components.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/network/tls.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngrpc_client_config:\n  tls_enabled: true\n  tls_cert_path: /tls/tls.crt\n  tls_key_path: /tls/tls.key\n  tls_ca_path: /tls/ca.crt\n  tls_server_name: tempo.trace.svc.cluster.local\n  tls_insecure_skip_verify: false\n  tls_cipher_suites: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n  tls_min_version: VersionTLS12\n```\n\n----------------------------------------\n\nTITLE: Accessing Span Event Paths in OpenTelemetry\nDESCRIPTION: Detailed mapping of supported paths for accessing span event attributes, resources, instrumentation scope, and other metadata in the OpenTelemetry Collector\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/contexts/ottlspanevent/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| path                                   | field accessed                                                                                                                                                                | type                                                                    |\n|----------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------|\n| spanevent.cache                        | the value of the current transform context's temporary cache. cache can be used as a temporary placeholder for data during complex transformations                            | pcommon.Map                                                             |\n| spanevent.cache\\[\"\"\\]                  | the value of an item in cache. Supports multiple indexes to access nested fields.                                                                                             | string, bool, int64, float64, pcommon.Map, pcommon.Slice, []byte or nil |\n```\n\n----------------------------------------\n\nTITLE: Kuberesolver URI Format Examples for gRPC Service Resolution\nDESCRIPTION: Examples of valid URI formats for connecting to Kubernetes services using kuberesolver. These follow the gRPC naming convention and support various ways to specify service name, namespace, and port.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/sercand/kuberesolver/v5/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nkubernetes:///service-name:8080\nkubernetes:///service-name:portname\nkubernetes:///service-name.namespace:8080\nkubernetes:///service-name.namespace.svc.cluster_name\nkubernetes:///service-name.namespace.svc.cluster_name:8080\n\nkubernetes://namespace/service-name:8080\nkubernetes://service-name:8080/\nkubernetes://service-name.namespace:8080/\nkubernetes://service-name.namespace.svc.cluster_name\nkubernetes://service-name.namespace.svc.cluster_name:8080\n```\n\n----------------------------------------\n\nTITLE: Encoding/Decoding data using Codec in Go\nDESCRIPTION: This code demonstrates how to use the codec library to encode and decode data. It shows how to create encoders and decoders using io.Reader, io.Writer, and byte slices, and how to perform encoding and decoding operations with a specified handle.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-msgpack/codec/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n\"// create and use decoder/encoder\nvar (\n  r io.Reader\n  w io.Writer\n  b []byte\n  h = &bh // or mh to use msgpack\n)\n\ndec = codec.NewDecoder(r, h)\ndec = codec.NewDecoderBytes(b, h)\nerr = dec.Decode(&v) \n\nenc = codec.NewEncoder(w, h)\nenc = codec.NewEncoderBytes(&b, h)\nerr = enc.Encode(v)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Core xxhash Functions in Go\nDESCRIPTION: This snippet shows the core functions provided by the xxhash package. It includes Sum64 functions for both byte slices and strings, as well as a New function to create a Digest instance.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Sum64(b []byte) uint64\nfunc Sum64String(s string) uint64\ntype Digest struct{ ... }\n    func New() *Digest\n```\n\n----------------------------------------\n\nTITLE: Search Trace Attributes using Tempo CLI\nDESCRIPTION: This command helps in searching trace attribute names or values by interacting with the Tempo API. Users need to specify a host-port and optional time range, and can include parameters for GRPC streaming.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/tempo_cli.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntempo-cli query api search-tags <host-port> [<start> <end>]\n```\n\n----------------------------------------\n\nTITLE: Creating Unix Timestamp from Seconds in Go\nDESCRIPTION: The Unix function converts epoch seconds (and optional nanoseconds) to a time.Time object. It requires an int64 seconds parameter and an optional int64 nanoseconds parameter.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_66\n\nLANGUAGE: go\nCODE:\n```\nUnix(1672527600)\n```\n\n----------------------------------------\n\nTITLE: Defining Clock Interface in Go\nDESCRIPTION: This snippet defines the Clock interface with methods for getting the current time, sleeping, and creating tickers. It provides a standardized way to handle time-based operations.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/k8s.io/utils/clock/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype Clock interface {\n\tNow() time.Time\n\tSleep(d time.Duration)\n\tNewTicker(d time.Duration) *time.Ticker\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic File System Watcher in Go\nDESCRIPTION: This code snippet demonstrates how to create a basic file system watcher using the fsnotify library in Go. It sets up a watcher, listens for events in a goroutine, and adds a path to be watched.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/fsnotify/fsnotify/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"log\"\n\n    \"github.com/fsnotify/fsnotify\"\n)\n\nfunc main() {\n    // Create new watcher.\n    watcher, err := fsnotify.NewWatcher()\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer watcher.Close()\n\n    // Start listening for events.\n    go func() {\n        for {\n            select {\n            case event, ok := <-watcher.Events:\n                if !ok {\n                    return\n                }\n                log.Println(\"event:\", event)\n                if event.Has(fsnotify.Write) {\n                    log.Println(\"modified file:\", event.Name)\n                }\n            case err, ok := <-watcher.Errors:\n                if !ok {\n                    return\n                }\n                log.Println(\"error:\", err)\n            }\n        }\n    }()\n\n    // Add a path.\n    err = watcher.Add(\"/tmp\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Block main goroutine forever.\n    <-make(chan struct{})\n}\n```\n\n----------------------------------------\n\nTITLE: LState Pool Pattern Implementation\nDESCRIPTION: Implementation of a thread-safe LState pool using sync.Pool pattern for managing GopherLua states across multiple goroutines.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-17_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ntype lStatePool struct {\n    m     sync.Mutex\n    saved []*lua.LState\n}\n\nfunc (pl *lStatePool) Get() *lua.LState {\n    pl.m.Lock()\n    defer pl.m.Unlock()\n    n := len(pl.saved)\n    if n == 0 {\n        return pl.New()\n    }\n    x := pl.saved[n-1]\n    pl.saved = pl.saved[0 : n-1]\n    return x\n}\n\nfunc (pl *lStatePool) New() *lua.LState {\n    L := lua.NewState()\n    // setting the L up here.\n    // load scripts, set global variables, share channels, etc...\n    return L\n}\n\nfunc (pl *lStatePool) Put(L *lua.LState) {\n    pl.m.Lock()\n    defer pl.m.Unlock()\n    pl.saved = append(pl.saved, L)\n}\n\nfunc (pl *lStatePool) Shutdown() {\n    for _, L := range pl.saved {\n        L.Close()\n    }\n}\n\n// Global LState pool\nvar luaPool = &lStatePool{\n    saved: make([]*lua.LState, 0, 4),\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Metrics to Graphite in Go\nDESCRIPTION: Shows how to periodically emit every metric to Graphite using the Graphite client from the go-metrics-graphite package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/rcrowley/go-metrics/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/cyberdelia/go-metrics-graphite\"\n\naddr, _ := net.ResolveTCPAddr(\"tcp\", \"127.0.0.1:2003\")\ngo graphite.Graphite(metrics.DefaultRegistry, 10e9, \"metrics\", addr)\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Formatting in go-multierror\nDESCRIPTION: Shows how to customize the error formatting by specifying a custom ErrorFormat function for more control over error representation\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar result *multierror.Error\n\n// ... accumulate errors here, maybe using Append\n\nif result != nil {\n\tresult.ErrorFormat = func([]error) string {\n\t\treturn \"errors!\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Percentiles of Status Code in TraceQL\nDESCRIPTION: This query computes the 99th, 90th, and 50th percentile of the status_code attribute for all spans named 'GET /:endpoint' using the quantile_over_time() function in TraceQL.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/metrics-queries/functions.md#2025-04-17_snippet_12\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ name = \"GET /:endpoint\" } | quantile_over_time(span.http.status_code, .99, .9, .5)\n```\n\n----------------------------------------\n\nTITLE: Retrieving CPU count information using numcpus Go package\nDESCRIPTION: This example demonstrates how to use the numcpus package to retrieve information about online and possible CPUs in a system. It imports the package, calls GetOnline() and GetPossible() functions with error handling, and displays the results.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/tklauser/numcpus/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/tklauser/numcpus\"\n)\n\nfunc main() {\n\tonline, err := numcpus.GetOnline()\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"GetOnline: %v\\n\", err)\n\t}\n\tfmt.Printf(\"online CPUs: %v\\n\", online)\n\n\tpossible, err := numcpus.GetPossible()\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"GetPossible: %v\\n\", err)\n\t}\n\tfmt.Printf(\"possible CPUs: %v\\n\", possible)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using SASLprep in Go\nDESCRIPTION: Demonstrates how to import the stringprep package and use the SASLprep profile to prepare a string. The SASLprep profile implements RFC-4013 specifications for string preparation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/xdg-go/stringprep/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/xdg-go/stringprep\"\n\nprepped := stringprep.SASLprep.Prepare(\"TrustNô1\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Multizone Ingesters for Grafana Tempo\nDESCRIPTION: Provides configuration fields for enabling multizone ingesters in Grafana Tempo. This configuration is necessary for setting up Grafana Tempo in a multizone environment. Fields include enabling options and setting the number of replicas and max unavailable settings.\nSOURCE: https://github.com/grafana/tempo/blob/main/operations/jsonnet/microservices/README.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n_config+: {\n    multi_zone_ingester_enabled: false,\n    multi_zone_ingester_migration_enabled: false,\n    multi_zone_ingester_replicas: 0,\n    multi_zone_ingester_max_unavailable: 25,\n}\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Server with Gzip Compression\nDESCRIPTION: Simple example of implementing gzip compression on an HTTP server using the default options. Demonstrates wrapping a basic handler that returns 'Hello, World'.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/gzhttp/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"github.com/klauspost/compress/gzhttp\"\n)\n\nfunc main() {\n\thandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"text/plain\")\n\t\tio.WriteString(w, \"Hello, World\")\n\t})\n    \n\thttp.Handle(\"/\", gzhttp.GzipHandler(handler))\n\thttp.ListenAndServe(\"0.0.0.0:8000\", nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Through an Objx Map with Range\nDESCRIPTION: Demonstrates how to iterate through all key-value pairs in an objx.Map using the standard Go range syntax.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/stretchr/objx/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nm := objx.MustFromJSON(json)\nfor key, value := range m {\n  // Your code...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a CronJob for Periodic Trace Generation\nDESCRIPTION: This YAML configuration creates a Kubernetes CronJob that periodically sends sample traces to Grafana Alloy using telemetrygen.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/set-up-test-app.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: sample-traces\nspec:\n  concurrencyPolicy: Forbid\n  successfulJobsHistoryLimit: 1\n  failedJobsHistoryLimit: 2\n  schedule: \"0 * * * *\"\n  jobTemplate:\n    spec:\n      backoffLimit: 0\n      ttlSecondsAfterFinished: 3600\n      template:\n        spec:\n          containers:\n          - name: traces\n            image: ghcr.io/open-telemetry/opentelemetry-collector-contrib/telemetrygen:v0.96.0\n            args:\n              - traces\n              - --otlp-insecure\n              - --rate\n              - \"20\"\n              - --duration\n              - 5s\n              - --otlp-endpoint\n              - grafana-alloy.grafana-alloy.svc.cluster.local:4317\n          restartPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Stdlib Logger Integration with JSON Output\nDESCRIPTION: Shows how to redirect the standard library logger to use go-kit logger with JSON formatting.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-kit/log/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"os\"\n\tstdlog \"log\"\n\tkitlog \"github.com/go-kit/log\"\n)\n\nfunc main() {\n\tlogger := kitlog.NewJSONLogger(kitlog.NewSyncWriter(os.Stdout))\n\tstdlog.SetOutput(kitlog.NewStdlibAdapter(logger))\n\tstdlog.Print(\"I sure like pie\")\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Cloud Storage Object in Go\nDESCRIPTION: Demonstrates how to read an object from a specific bucket using the Google Cloud Storage client. Opens a reader for the object, reads its contents, and ensures proper resource cleanup with deferred close.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/cloud.google.com/go/storage/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Read the object1 from bucket.\nrc, err := client.Bucket(\"bucket\").Object(\"object1\").NewReader(ctx)\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer rc.Close()\nbody, err := io.ReadAll(rc)\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Local Stack with Docker Compose\nDESCRIPTION: This command starts all the defined services in the docker-compose.yml file in detached mode. It brings up the necessary containers, including Grafana, k6-tracing, MinIO, Prometheus, and Tempo instances.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/scalable-single-binary/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Handling Corner Cases in Redis Operations Using Go\nDESCRIPTION: This snippet showcases various Redis commands and their corner cases, demonstrating how to use options such as expiration times and sorting. It utilizes the go-redis library and includes error handling for different scenarios, ensuring robust interactions with the Redis server.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-redis/redis/v8/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Some corner cases:\n\n// SET key value EX 10 NX\nset, err := rdb.SetNX(ctx, \"key\", \"value\", 10*time.Second).Result()\n\n// SET key value keepttl NX\nset, err := rdb.SetNX(ctx, \"key\", \"value\", redis.KeepTTL).Result()\n\n// SORT list LIMIT 0 2 ASC\nvals, err := rdb.Sort(ctx, \"list\", &redis.Sort{Offset: 0, Count: 2, Order: \"ASC\"}).Result()\n\n// ZRANGEBYSCORE zset -inf +inf WITHSCORES LIMIT 0 2\nvals, err := rdb.ZRangeByScoreWithScores(ctx, \"zset\", &redis.ZRangeBy{\n    Min: \"-inf\",\n    Max: \"+inf\",\n    Offset: 0,\n    Count: 2,\n}).Result()\n\n// ZINTERSTORE out 2 zset1 zset2 WEIGHTS 2 3 AGGREGATE SUM\nvals, err := rdb.ZInterStore(ctx, \"out\", &redis.ZStore{\n    Keys: []string{\"zset1\", \"zset2\"},\n    Weights: []int64{2, 3}\n}).Result()\n\n// EVAL \"return {KEYS[1],ARGV[1]}\" 1 \"key\" \"hello\"\nvals, err := rdb.Eval(ctx, \"return {KEYS[1],ARGV[1]}\", []string{\"key\"}, \"hello\").Result()\n\n// custom command\nres, err := rdb.Do(ctx, \"set\", \"key\", \"value\").Result()\n```\n\n----------------------------------------\n\nTITLE: Comparing JSON Documents for Structural Equality in Go\nDESCRIPTION: Example illustrating how to compare JSON documents for structural equality using the Equal function from the jsonpatch library. This ignores whitespace differences and key-value ordering.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/evanphx/json-patch/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tjsonpatch \"github.com/evanphx/json-patch\"\n)\n\nfunc main() {\n\toriginal := []byte(`{\"name\": \"John\", \"age\": 24, \"height\": 3.21}`)\n\tsimilar := []byte(`\n\t\t{\n\t\t\t\"age\": 24,\n\t\t\t\"height\": 3.21,\n\t\t\t\"name\": \"John\"\n\t\t}\n\t`)\n\tdifferent := []byte(`{\"name\": \"Jane\", \"age\": 20, \"height\": 3.37}`)\n\n\tif jsonpatch.Equal(original, similar) {\n\t\tfmt.Println(`\"original\" is structurally equal to \"similar\"`)\n\t}\n\n\tif !jsonpatch.Equal(original, different) {\n\t\tfmt.Println(`\"original\" is _not_ structurally equal to \"different\"`)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS with GlobalOPTIONS Handler\nDESCRIPTION: Demonstrates how to set up automatic OPTIONS request handling with CORS support using the GlobalOPTIONS handler. Allows setting custom headers and managing preflight requests.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/julienschmidt/httprouter/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nrouter.GlobalOPTIONS = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    if r.Header.Get(\"Access-Control-Request-Method\") != \"\" {\n        // Set CORS headers\n        header := w.Header()\n        header.Set(\"Access-Control-Allow-Methods\", r.Header.Get(\"Allow\"))\n        header.Set(\"Access-Control-Allow-Origin\", \"*\")\n    }\n\n    // Adjust status code to 204\n    w.WriteHeader(http.StatusNoContent)\n})\n```\n\n----------------------------------------\n\nTITLE: Tempo Query gRPC Server Configuration\nDESCRIPTION: Default configuration for tempo-query standalone server with gRPC API endpoint\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n0.0.0.0:7777\n```\n\n----------------------------------------\n\nTITLE: Logger with Fixed Key/Value Pairs in go-hclog in Go\nDESCRIPTION: Describes how to use the With function to attach a fixed set of key/value pairs to a logger, ensuring they appear in all subsequent log messages.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-17_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nrequestID := \"5fb446b6-6eba-821d-df1b-cd7501b6a363\"\nrequestLogger := subsystemLogger.With(\"request\", requestID)\nrequestLogger.Info(\"we are transporting a request\")\n```\n\n----------------------------------------\n\nTITLE: Stream Parsing XML in Go (Basic)\nDESCRIPTION: Example showing how to parse a large XML file in a streaming fashion to save memory. This basic example parses book elements.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/antchfx/xmlquery/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nf, _ := os.Open(\"../books.xml\")\np, err := xmlquery.CreateStreamParser(f, \"/bookstore/book\")\nfor {\n\tn, err := p.Read()\n\tif err == io.EOF {\n\t\tbreak\n\t}\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(n)\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting XML Elements in Go\nDESCRIPTION: The InsertXML function modifies an XML string by inserting child elements at specified locations using XPath expressions. It takes a target XML string, an XPath query, and a value to insert.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_32\n\nLANGUAGE: Go\nCODE:\n```\nInsertXML(log.body, \"/\", \"<foo/>\")\n```\n\nLANGUAGE: Go\nCODE:\n```\nInsertXML(log.body, \"//foo\", \"<bar/>\")\n```\n\nLANGUAGE: Go\nCODE:\n```\nInsertXML(log.body, \"/subdoc\", log.attributes[\"subdoc\"])\n```\n\n----------------------------------------\n\nTITLE: Messaging System Latency Query - Range Query\nDESCRIPTION: PromQL query to calculate the 90th percentile latency for messaging system communications between services over time.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/metrics-generator/service_graphs/metrics-queries.md#2025-04-17_snippet_6\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(.9, sum(rate(traces_service_graph_request_messaging_system_seconds_bucket{}[5m])) by (client, server, le))\n```\n\n----------------------------------------\n\nTITLE: Identifying Error Message for Bad Blocks in Tempo\nDESCRIPTION: Sample error message that indicates a bad or corrupted block exists in the Tempo backend storage. This error appears when querying fails due to block corruption, often resulting from an ingester crash during the block flushing process.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/querying/bad-blocks.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nerror querying store in Querier.FindTraceByID: error using pageFinder (1, 5927cbfb-aabe-48b2-9df5-f4c3302d915f): ...\n```\n\n----------------------------------------\n\nTITLE: Basic Jaeger Receiver Protocol Configuration\nDESCRIPTION: Example configuration showing how to set up a Jaeger receiver with default gRPC protocol and custom endpoint configuration.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/receiver/jaegerreceiver/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  jaeger:\n    protocols:\n      grpc:\n  jaeger/withendpoint:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:14260\n```\n\n----------------------------------------\n\nTITLE: Instantiation Pattern with Options in Go\nDESCRIPTION: Standard pattern for creating new instances with variadic options.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-17_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc NewT(options ...Option) T {…}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jaeger Client with Environment Variables in Go\nDESCRIPTION: Use FromEnv() to configure Jaeger client using environment variables. This allows easy configuration in containerized environments.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/uber/jaeger-client-go/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncfg, err := config.FromEnv()\n```\n\n----------------------------------------\n\nTITLE: Deprecating a flag\nDESCRIPTION: Demonstrates how to mark a flag as deprecated, which hides it from help text and prints a usage message when the deprecated flag is used.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// deprecate a flag by specifying its name and a usage message\nflags.MarkDeprecated(\"badflag\", \"please use --good-flag instead\")\n```\n\n----------------------------------------\n\nTITLE: Creating gRPC Status with Details\nDESCRIPTION: This snippet showcases how to create a gRPC status with details, including field violations, which can be sent to the client.  It uses `status.New` to create a new status, then `st.WithDetails` to add details and finally `detSt.Err()` to convert this extended status to a standard error return.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/gogo/status/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\nst := status.New(codes.FailedPrecondition, \"wrong user role\")\ndetSt, err := st.WithDetails(&rpc.BadRequest{\n    FieldViolations: []*rpc.BadRequest_FieldViolation{\n        {\n            Field:       \"role\",\n            Description: \"The first user created must have the role of an ADMIN\",\n        },\n    },\n})\nif err == nil {\n    return detSt.Err()\n}\nreturn st.Err()\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Graceful Shutdown with Gorilla Mux\nDESCRIPTION: Shows how to implement graceful shutdown with Gorilla Mux using Go 1.8's shutdown functionality. This ensures that the server waits for existing connections to finish before shutting down, avoiding abrupt termination of client connections.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"flag\"\n    \"log\"\n    \"net/http\"\n    \"os\"\n    \"os/signal\"\n    \"time\"\n\n    \"github.com/gorilla/mux\"\n)\n\nfunc main() {\n    var wait time.Duration\n    flag.DurationVar(&wait, \"graceful-timeout\", time.Second * 15, \"the duration for which the server gracefully wait for existing connections to finish - e.g. 15s or 1m\")\n    flag.Parse()\n\n    r := mux.NewRouter()\n    // Add your routes as needed\n\n    srv := &http.Server{\n        Addr:         \"0.0.0.0:8080\",\n        // Good practice to set timeouts to avoid Slowloris attacks.\n        WriteTimeout: time.Second * 15,\n        ReadTimeout:  time.Second * 15,\n        IdleTimeout:  time.Second * 60,\n        Handler: r, // Pass our instance of gorilla/mux in.\n    }\n\n    // Run our server in a goroutine so that it doesn't block.\n    go func() {\n        if err := srv.ListenAndServe(); err != nil {\n            log.Println(err)\n        }\n    }()\n\n    c := make(chan os.Signal, 1)\n    // We'll accept graceful shutdowns when quit via SIGINT (Ctrl+C)\n    // SIGKILL, SIGQUIT or SIGTERM (Ctrl+/) will not be caught.\n    signal.Notify(c, os.Interrupt)\n\n    // Block until we receive our signal.\n    <-c\n\n    // Create a deadline to wait for.\n    ctx, cancel := context.WithTimeout(context.Background(), wait)\n    defer cancel()\n    // Doesn't block if no connections, but will otherwise wait\n    // until the timeout deadline.\n    srv.Shutdown(ctx)\n    // Optionally, you could run srv.Shutdown in a goroutine and block on\n    // <-ctx.Done() if your application should wait for other services\n    // to finalize based on context cancellation.\n    log.Println(\"shutting down\")\n    os.Exit(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Eliminating reflection using typeptr in Go\nDESCRIPTION: This code demonstrates how to eliminate reflection by using the `typeptr` (address of type information) to call pre-built optimized processes. This avoids the overhead of reflection, resulting in faster encoding.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n \"type emptyInterface struct {\\n    typ unsafe.Pointer\\n    ptr unsafe.Pointer\\n}\\n\\nvar typeToEncoder = map[uintptr]func(unsafe.Pointer)([]byte, error){}\\n\\nfunc Marshal(v interface{}) ([]byte, error) {\\n    iface := (*emptyInterface)(unsafe.Pointer(&v)\\n    typeptr := uintptr(iface.typ)\\n    if enc, exists := typeToEncoder[typeptr]; exists {\\n        return enc(iface.ptr)\\n    }\\n    ...\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring local-blocks to run metrics queries on all spans\nDESCRIPTION: This YAML configuration disables the filter_server_spans option to allow TraceQL metrics queries to run against all spans, not just server spans.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/traceql-metrics.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics_generator:\n  processor:\n    local_blocks:\n      filter_server_spans: false\n```\n\n----------------------------------------\n\nTITLE: Replacing Matching Strings in OTTL\nDESCRIPTION: The replace_all_matches function replaces string values matching a pattern with a replacement string. It can optionally apply a function to the replacement.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_8\n\nLANGUAGE: OTTL\nCODE:\n```\nreplace_all_matches(resource.attributes, \"/user/*/list/*\", \"/user/{userId}/list/{listId}\")\n```\n\nLANGUAGE: OTTL\nCODE:\n```\nreplace_all_matches(resource.attributes, \"/user/*/list/*\", \"/user/{userId}/list/{listId}\", SHA256, \"/user/%s\")\n```\n\n----------------------------------------\n\nTITLE: Span Selection with Custom Attributes\nDESCRIPTION: Examples of TraceQL queries using custom attributes across different scopes (span, resource, link, event) to select spans.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_18\n\nLANGUAGE: traceql\nCODE:\n```\n{ span.foo = \"bar\" }\n{ resource.foo = \"bar\" }\n{ link.foo = \"bar\" }\n{ event.foo = \"bar\" }\n```\n\n----------------------------------------\n\nTITLE: Installing golex\nDESCRIPTION: This command installs the golex tool, which is required to generate Go code from lexer definition files. The -u flag ensures that the tool and its dependencies are updated to the latest versions.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/prometheus/prometheus/model/textparse/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n`go get -u modernc.org/golex`\n```\n\n----------------------------------------\n\nTITLE: Defining Variable Type Attributes in YAML\nDESCRIPTION: Schema definition for OTLP attributes with variable data types mapped to Parquet's concrete typing system. Different value types (string, boolean, numeric, array, and key-value) are represented as optional fields where only one is set for each attribute.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/schema.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrepeated group Attrs {\n    required binary  Key (STRING);\n\n    # Only one of these will be set\n    optional binary  Value (STRING);\n    optional boolean ValueBool;\n    optional double  ValueDouble;\n    optional int64   ValueInt (INT(64,true));\n    optional binary  ValueArray (STRING);\n    optional binary  ValueKVList (STRING);\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Time to Unix Seconds in Go\nDESCRIPTION: The UnixSeconds function converts a time.Time value to Unix seconds (elapsed since January 1, 1970 UTC). It returns an int64 value representing the seconds.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_70\n\nLANGUAGE: go\nCODE:\n```\nUnixSeconds(Time(\"02/04/2023\", \"%m/%d/%Y\"))\n```\n\n----------------------------------------\n\nTITLE: Basic XML Parsing and Querying in Go with xmlquery\nDESCRIPTION: A complete example showing how to parse an XML string and query elements using xmlquery. The example parses an RSS feed, extracts the channel title and link, and iterates through item titles.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/antchfx/xmlquery/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/antchfx/xmlquery\"\n)\n\nfunc main(){\n\ts := `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n<channel>\n  <title>W3Schools Home Page</title>\n  <link>https://www.w3schools.com</link>\n  <description>Free web building tutorials</description>\n  <item>\n    <title>RSS Tutorial</title>\n    <link>https://www.w3schools.com/xml/xml_rss.asp</link>\n    <description>New RSS tutorial on W3Schools</description>\n  </item>\n  <item>\n    <title>XML Tutorial</title>\n    <link>https://www.w3schools.com/xml</link>\n    <description>New XML tutorial on W3Schools</description>\n  </item>\n</channel>\n</rss>`\n\n\tdoc, err := xmlquery.Parse(strings.NewReader(s))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tchannel := xmlquery.FindOne(doc, \"//channel\")\n\tif n := channel.SelectElement(\"title\"); n != nil {\n\t\tfmt.Printf(\"title: %s\\n\", n.InnerText())\n\t}\n\tif n := channel.SelectElement(\"link\"); n != nil {\n\t\tfmt.Printf(\"link: %s\\n\", n.InnerText())\n\t}\n\tfor i, n := range xmlquery.Find(doc, \"//item/title\") {\n\t\tfmt.Printf(\"#%d %s\\n\", i, n.InnerText())\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying XML Documents with Error Handling in Go\nDESCRIPTION: Example showing how to query XML documents using QueryAll which returns an error rather than panicking like Find.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/antchfx/xmlquery/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nlist, err := xmlquery.QueryAll(doc, \"a\")\nif err != nil {\n\tpanic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing procfs filesystem in Go\nDESCRIPTION: This snippet initializes the proc filesystem mount point and retrieves statistics. The 'procfs' package must be included in the Go project to use this functionality. The expected input is the path to the /proc filesystem, and it outputs statistics about the system.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/prometheus/procfs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfs, err := procfs.NewFS(\"/proc\")\nstats, err := fs.Stat()\n```\n\n----------------------------------------\n\nTITLE: Inspecting Parquet Files with parquet.File\nDESCRIPTION: This code snippet demonstrates how to inspect the contents of a Parquet file using the `parquet.File` type. It opens the file and iterates over row groups and column chunks, providing access to the underlying data structure.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/parquet-go/parquet-go/README.md#2025-04-17_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\n\"f, err := parquet.OpenFile(file, size)\nif err != nil {\n    ...\n}\n\nfor _, rowGroup := range f.RowGroups() {\n    for _, columnChunk := range rowGroup.ColumnChunks() {\n        ...\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Debug ID via HTTP Headers\nDESCRIPTION: Example of setting a debug ID through HTTP headers for trace correlation\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/uber/jaeger-client-go/README.md#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H \"jaeger-debug-id: some-correlation-id\" http://myhost.com\n```\n\n----------------------------------------\n\nTITLE: Initializing klog Flags in Go\nDESCRIPTION: Demonstrates how to initialize klog flags explicitly, replacing the previous init() method used in glog.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/k8s.io/klog/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nklog.InitFlags(nil)\n```\n\n----------------------------------------\n\nTITLE: Enabling gRPC Compression in Tempo\nDESCRIPTION: This YAML snippet configures gRPC compression with `snappy` for different Tempo components: `ingester_client`, `metrics_generator_client`, and `querier`. This can help balance CPU/Memory usage and bandwidth.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-7.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n  ingester_client:\n      grpc_client_config:\n          grpc_compression: \"snappy\"\n  metrics_generator_client:\n      grpc_client_config:\n          grpc_compression: \"snappy\"\n  querier:\n      frontend_worker:\n          grpc_client_config:\n              grpc_compression: \"snappy\"\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Span Discard Rates by Reason in PromQL\nDESCRIPTION: A PromQL query to determine the rate at which spans are being discarded from the metrics-generator, broken down by reason.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/metrics-generator.md#2025-04-17_snippet_2\n\nLANGUAGE: promql\nCODE:\n```\nsum(rate(tempo_metrics_generator_spans_discarded_total{}[1m])) by (reason)\n```\n\n----------------------------------------\n\nTITLE: Deploying Tempo Microservices with Tanka\nDESCRIPTION: Deploys Tempo in a microservices architecture using Tanka, ensuring high volume and fault tolerance. It requires applying to a configured local K3D.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# double check you're applying to your local k3d before running this!\ntk apply tempo-microservices\n```\n\n----------------------------------------\n\nTITLE: Component Build Info Output\nDESCRIPTION: Sample output showing the available components including receivers, processors, exporters, and extensions in YAML format.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/service/README.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbuildinfo:\n   command: otelcorecol\n   description: Local OpenTelemetry Collector binary, testing only.\n   version: 0.62.1-dev\nreceivers:\n   - otlp\nprocessors:\n   - memory_limiter\n   - batch\nexporters:\n   - otlp\n   - otlphttp\n   - debug\nextensions:\n   - zpages\n```\n\n----------------------------------------\n\nTITLE: Decoding Stream with S2 Compression in Go\nDESCRIPTION: This function demonstrates how to decompress data from a source Reader to a destination Writer using S2 compression. It creates a new S2 Reader and copies data from the decoder to the destination.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc DecodeStream(src io.Reader, dst io.Writer) error {\n    dec := s2.NewReader(src)\n    _, err := io.Copy(dst, dec)\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration from Structs in Go\nDESCRIPTION: Demonstrates using Koanf's `structs` provider to load configuration directly from Go structs with nested structures and custom field tags.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/providers/structs\"\n)\n\nvar k = koanf.New(\".\")\n\ntype sampleStruct struct {\n\tType    string            `koanf:\"type\"`\n\tEmpty   map[string]string `koanf:\"empty\"`\n\tParent1 parentStruct      `koanf:\"parent1\"`\n}\n\nfunc main() {\n\t// Load default values from struct\n\tk.Load(structs.Provider(sampleStruct{\n\t\tType:  \"json\",\n\t\tEmpty: make(map[string]string),\n\t\tParent1: parentStruct{\n\t\t\tName: \"parent1\",\n\t\t\tID:   1234,\n\t\t},\n\t}, \"koanf\"), nil)\n\n\tfmt.Printf(\"name is = `%s`\\n\", k.String(\"parent1.child1.name\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Index Loading\nDESCRIPTION: Shows how to manually load an S2 compression index from bytes.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n\tvar index s2.Index\n\t_, err = index.Load(idxBytes)\n```\n\n----------------------------------------\n\nTITLE: Writing a Parquet File with parquet.WriteFile\nDESCRIPTION: This code snippet demonstrates how to write a Parquet file using the `parquet.WriteFile` function.  It takes a filename and a slice of Go structs as input, creating a Parquet file containing the data from the slice.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/parquet-go/parquet-go/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n \"type RowType struct { FirstName, LastName string }\n\nif err := parquet.WriteFile(\"file.parquet\", []RowType{\n    {FirstName: \"Bob\"},\n    {FirstName: \"Alice\"},\n}); err != nil {\n    ...\n}\"\n```\n\n----------------------------------------\n\nTITLE: Importing GoValidator Package in Go\nDESCRIPTION: Examples of how to import the GoValidator package in a Go file. It shows the standard import and an alternative using an alias for shorter naming.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n```\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  valid \"github.com/asaskevich/govalidator\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS in a Go HTTP Server\nDESCRIPTION: This snippet demonstrates how to set up a basic HTTP server with CORS support using the 'cors' package. It creates a simple JSON endpoint and applies the default CORS middleware to the server.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/rs/cors/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"net/http\"\n\n    \"github.com/rs/cors\"\n)\n\nfunc main() {\n    mux := http.NewServeMux()\n    mux.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        w.Header().Set(\"Content-Type\", \"application/json\")\n        w.Write([]byte(\"{\\\"hello\\\": \\\"world\\\"}\"))\n    })\n\n    // cors.Default() setup the middleware with default options being\n    // all origins accepted with simple methods (GET, POST). See\n    // documentation below for more options.\n    handler := cors.Default().Handler(mux)\n    http.ListenAndServe(\":8080\", handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Docker Compose Stack\nDESCRIPTION: This command starts the Docker Compose stack defined in the docker-compose.yml file. It runs the containers in detached mode, allowing them to run in the background.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/otel-collector-multitenant/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Initializing a Tanka Application with Bash\nDESCRIPTION: The snippet initializes a Tanka application. It sets up a directory for the application and initializes it using Tanka. This requires Tanka to be installed.\nSOURCE: https://github.com/grafana/tempo/blob/main/operations/jsonnet-compiled/util/vendor/github.com/grafana/jsonnet-libs/memcached/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napp=your_app_name\nmkdir -p $app && cd $app\ntk init\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from Multiple Files in Go\nDESCRIPTION: Shows how to load environment variables from multiple files using gotenv.Load(). Variables are loaded in order, with the first value set for a variable taking precedence.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/subosito/gotenv/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngotenv.Load(\".env.production\", \"credentials\")\n```\n\n----------------------------------------\n\nTITLE: Installing Tanka and Jsonnet-Bundler using Go\nDESCRIPTION: This snippet installs Tanka and jsonnet-bundler using Go. It requires Go to be installed and executed outside a GOPATH or go.mod project. It adds the Tanka and jsonnet-bundler command-line tools for generating Kubernetes manifests.\nSOURCE: https://github.com/grafana/tempo/blob/main/operations/jsonnet/microservices/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# make sure to be outside of GOPATH or a go.mod project\ngo install github.com/grafana/tanka/cmd/tk@latest\ngo install github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb@latest\n```\n\n----------------------------------------\n\nTITLE: Initializing blockdevice filesystem in Go\nDESCRIPTION: This code snippet initializes the filesystem for both the /proc and /sys filesystems and retrieves disk statistics. It is necessary to use the 'blockdevice' sub-package from the procfs library for accessing this information. The input here includes the paths to both filesystems, with the expected output being the disk statistics.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/prometheus/procfs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfs, err := blockdevice.NewFS(\"/proc\", \"/sys\")\nstats, err := fs.ProcDiskstats()\n```\n\n----------------------------------------\n\nTITLE: Registering and Using Kuberesolver with gRPC in Go\nDESCRIPTION: This snippet demonstrates how to import and register the kuberesolver module with gRPC before establishing a connection. It shows the basic setup pattern and equivalent registration methods.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/sercand/kuberesolver/v5/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Import the module\nimport \"github.com/sercand/kuberesolver/v5\"\n\t\n// Register kuberesolver to grpc before calling grpc.Dial\nkuberesolver.RegisterInCluster()\n\n// it is same as\nresolver.Register(kuberesolver.NewBuilder(nil /*custom kubernetes client*/ , \"kubernetes\"))\n\n// if schema is 'kubernetes' then grpc will use kuberesolver to resolve addresses\ncc, err := grpc.Dial(\"kubernetes:///service.namespace:portname\", opts...)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Wrapping in Go\nDESCRIPTION: This code demonstrates how to implement the `Wrapper` interface to integrate custom error types with `errwrap`. By implementing the `WrappedErrors()` method, custom error types can leverage the functionality of `errwrap.Contains` and related functions. The AppError struct includes an error code and an underlying error and demonstrates how to integrate with the errwrap library.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/errwrap/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype AppError {\n  Code ErrorCode\n  Err  error\n}\n\nfunc (e *AppError) WrappedErrors() []error {\n  return []error{e.Err}\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Lua from Go in GopherLua\nDESCRIPTION: Demonstrates how to execute Lua code from Go, including calling Lua functions and handling return values.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nL := lua.NewState()\ndefer L.Close()\nif err := L.DoFile(\"double.lua\"); err != nil {\n    panic(err)\n}\nif err := L.CallByParam(lua.P{\n    Fn: L.GetGlobal(\"double\"),\n    NRet: 1,\n    Protect: true,\n    }, lua.LNumber(10)); err != nil {\n    panic(err)\n}\nret := L.Get(-1) // returned value\nL.Pop(1)  // remove received value\n```\n\n----------------------------------------\n\nTITLE: Retrieving Admin Token Command\nDESCRIPTION: Command to retrieve the initial admin token from the tokengen job logs.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/helm-charts/tempo-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods | awk '/.*-tokengen-job-.*/ {print $1}' | xargs -I {} kubectl logs {} | awk '/Token:\\s+/ {print $2}'\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Module Dependencies for Grafana Tempo\nDESCRIPTION: This snippet lists the Go module dependencies for the Grafana Tempo project, including specific versions and import paths for various packages and libraries.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/modules.txt#2025-04-17_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\n## explicit; go 1.22.0\ngoogle.golang.org/grpc\ngoogle.golang.org/grpc/attributes\ngoogle.golang.org/grpc/authz/audit\ngoogle.golang.org/grpc/authz/audit/stdout\ngoogle.golang.org/grpc/backoff\ngoogle.golang.org/grpc/balancer\n# ... (truncated for brevity)\n\n# google.golang.org/protobuf v1.36.6\n## explicit; go 1.22\ngoogle.golang.org/protobuf/encoding/protodelim\ngoogle.golang.org/protobuf/encoding/protojson\ngoogle.golang.org/protobuf/encoding/prototext\n# ... (truncated for brevity)\n\n# gopkg.in/yaml.v2 v2.4.0\n## explicit; go 1.15\ngopkg.in/yaml.v2\n\n# gopkg.in/yaml.v3 v3.0.1\n## explicit\ngopkg.in/yaml.v3\n\n# k8s.io/apimachinery v0.31.3\n## explicit; go 1.22.0\nk8s.io/apimachinery/pkg/util/runtime\n\n# k8s.io/client-go v0.31.3 => k8s.io/client-go v0.25.0\n## explicit; go 1.19\nk8s.io/client-go/tools/metrics\nk8s.io/client-go/util/workqueue\n\n# k8s.io/klog/v2 v2.130.1\n## explicit; go 1.18\nk8s.io/klog/v2\nk8s.io/klog/v2/internal/buffer\n# ... (truncated for brevity)\n\n# k8s.io/utils v0.0.0-20240711033017-18e509b52bc8\n## explicit; go 1.18\nk8s.io/utils/clock\n\n# github.com/bradfitz/gomemcache => github.com/themihai/gomemcache v0.0.0-20180902122335-24332e2d58ab\n# k8s.io/api => k8s.io/api v0.25.0\n# k8s.io/client-go => k8s.io/client-go v0.25.0\n# github.com/hashicorp/memberlist => github.com/grafana/memberlist v0.3.1-0.20220708130638-bd88e10a3d91\n```\n\n----------------------------------------\n\nTITLE: Converting Time to Unix Nanoseconds in Go\nDESCRIPTION: The UnixNano function converts a time.Time value to Unix nanoseconds (elapsed since January 1, 1970 UTC). It returns an int64 value representing the nanoseconds.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_69\n\nLANGUAGE: go\nCODE:\n```\nUnixNano(Time(\"02/04/2023\", \"%m/%d/%Y\"))\n```\n\n----------------------------------------\n\nTITLE: Building URLs with Subrouters in Gorilla Mux\nDESCRIPTION: Shows how to build URLs when using subrouters with host and path components defined separately. This demonstrates the hierarchical routing capabilities of Gorilla Mux.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\ns := r.Host(\"{subdomain}.example.com\").Subrouter()\ns.Path(\"/articles/{category}/{id:[0-9]+}\").\n  HandlerFunc(ArticleHandler).\n  Name(\"article\")\n\n// \"http://news.example.com/articles/technology/42\"\nurl, err := r.Get(\"article\").URL(\"subdomain\", \"news\",\n                                 \"category\", \"technology\",\n                                 \"id\", \"42\")\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Gorilla Mux Router\nDESCRIPTION: Shows how to add middleware to a Gorilla Mux router using the Use() method. Middleware are executed in the order they are added when a route matches.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\nr.HandleFunc(\"/\", handler)\nr.Use(loggingMiddleware)\n```\n\n----------------------------------------\n\nTITLE: Starting Containers with Docker Compose\nDESCRIPTION: Starts up a local Grafana Tempo stack using Docker Compose. Requires Docker to be installed and configured.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/multi-tenant/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up -d\nStarting multi-tenant_grafana_1    ... done\nStarting multi-tenant_tempo_1      ... done\nStarting multi-tenant_k6-tracing-2_1 ... done\nStarting multi-tenant_k6-tracing_1   ... done\n\n```\n\n----------------------------------------\n\nTITLE: Using Format String Converter\nDESCRIPTION: Examples of using the Format converter to format strings using fmt.Sprintf style formatting with various arguments and format specifiers.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_26\n\nLANGUAGE: go\nCODE:\n```\nFormat(\"%02d\", [log.attributes[\"priority\"]])\nFormat(\"%04d-%02d-%02d\", [Year(Now()), Month(Now()), Day(Now())])\nFormat(\"%s/%s/%04d-%02d-%02d.log\", [resource.attributes[\"hostname\"], log.body[\"program\"], Year(Now()), Month(Now()), Day(Now())])\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Azure Blob Storage Operations\nDESCRIPTION: Example showing how to handle common errors when working with Azure Blob Storage, particularly for container deletion scenarios.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\tconnectionString = \"<connection_string>\"\n\tcontainerName    = \"sample-container\"\n)\n\n// create a client with the provided connection string\nclient, err := azblob.NewClientFromConnectionString(connectionString, nil)\n// TODO: handle error\n\n// try to delete the container, avoiding any potential race conditions with an in-progress or completed deletion\n_, err = client.DeleteContainer(context.TODO(), containerName, nil)\n\nif bloberror.HasCode(err, bloberror.ContainerBeingDeleted, bloberror.ContainerNotFound) {\n\t// ignore any errors if the container is being deleted or already has been deleted\n} else if err != nil {\n\t// TODO: some other error\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Storage Credentials in YAML\nDESCRIPTION: YAML configuration allowing the use of environment variables for Azure storage credentials, enhancing security and flexibility in credential management.\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nazure:\n  storage_account_name: ${AZURE_STORAGE_ACCOUNT_NAME}\n  storage_account_key: ${AZURE_STORAGE_ACCOUNT_KEY}\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Hexadecimal in Go\nDESCRIPTION: The Hex function converts various input types (float64, string, bool, int64, []byte) to their hexadecimal string representation. It returns nil for unsupported types or failed parsing.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_29\n\nLANGUAGE: Go\nCODE:\n```\nHex(span.attributes[\"http.status_code\"])\n```\n\nLANGUAGE: Go\nCODE:\n```\nHex(2.0)\n```\n\n----------------------------------------\n\nTITLE: Tempo Configuration Values\nDESCRIPTION: YAML configuration for basic Tempo installation with MinIO storage and trace protocol settings\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/helm-charts/tempo-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nstorage:\n  trace:\n    backend: s3\n    s3:\n      access_key: 'grafana-tempo'\n      secret_key: 'supersecret'\n      bucket: 'tempo-traces'\n      endpoint: 'tempo-minio:9000'\n      insecure: true\nminio:\n  enabled: true\n  mode: standalone\n  rootUser: grafana-tempo\n  rootPassword: supersecret\n  buckets:\n    - name: tempo-traces\n      policy: none\n      purge: false\ntraces:\n  otlp:\n    grpc:\n      enabled: true\n    http:\n      enabled: true\n  zipkin:\n    enabled: false\n  jaeger:\n    thriftHttp:\n      enabled: false\n  opencensus:\n    enabled: false\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values in Viper\nDESCRIPTION: Examples of setting default configuration values in Viper for various types including strings and maps.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nviper.SetDefault(\"ContentDir\", \"content\")\nviper.SetDefault(\"LayoutDir\", \"layouts\")\nviper.SetDefault(\"Taxonomies\", map[string]string{\"tag\": \"tags\", \"category\": \"categories\"})\n```\n\n----------------------------------------\n\nTITLE: Implementing the FlagValue Interface for Viper (Go)\nDESCRIPTION: Example showing how to implement Viper's FlagValue interface to bind custom flag systems. This interface represents a single flag and requires implementing four methods.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype myFlag struct {}\nfunc (f myFlag) HasChanged() bool { return false }\nfunc (f myFlag) Name() string { return \"my-flag-name\" }\nfunc (f myFlag) ValueString() string { return \"my-flag-value\" }\nfunc (f myFlag) ValueType() string { return \"string\" }\n```\n\n----------------------------------------\n\nTITLE: Testing Element Membership in a Bloom Filter in Go\nDESCRIPTION: This snippet shows how to test if an element exists in the Bloom filter. The method returns true if the element might be in the set (may have false positives) and false if it definitely isn't in the set.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/willf/bloom/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif filter.Test([]byte(\"Love\"))\n```\n\n----------------------------------------\n\nTITLE: Rending a Table with Colorful Cells in Go\nDESCRIPTION: This snippet illustrates how to create a table with color-coded cells using the Tablewriter library. It sets up data, headers, footers, and custom colors for the header and columns. The colors for individual cells can also be specified, overriding the column colors.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ndata := [][]string{\n\t[]string{\"Test1Merge\", \"HelloCol2 - 1\", \"HelloCol3 - 1\", \"HelloCol4 - 1\"},\n\t[]string{\"Test1Merge\", \"HelloCol2 - 2\", \"HelloCol3 - 2\", \"HelloCol4 - 2\"},\n\t[]string{\"Test1Merge\", \"HelloCol2 - 3\", \"HelloCol3 - 3\", \"HelloCol4 - 3\"},\n\t[]string{\"Test2Merge\", \"HelloCol2 - 4\", \"HelloCol3 - 4\", \"HelloCol4 - 4\"},\n\t[]string{\"Test2Merge\", \"HelloCol2 - 5\", \"HelloCol3 - 5\", \"HelloCol4 - 5\"},\n\t[]string{\"Test2Merge\", \"HelloCol2 - 6\", \"HelloCol3 - 6\", \"HelloCol4 - 6\"},\n\t[]string{\"Test2Merge\", \"HelloCol2 - 7\", \"HelloCol3 - 7\", \"HelloCol4 - 7\"},\n\t[]string{\"Test3Merge\", \"HelloCol2 - 8\", \"HelloCol3 - 8\", \"HelloCol4 - 8\"},\n\t[]string{\"Test3Merge\", \"HelloCol2 - 9\", \"HelloCol3 - 9\", \"HelloCol4 - 9\"},\n\t[]string{\"Test3Merge\", \"HelloCol2 - 10\", \"HelloCol3 -10\", \"HelloCol4 - 10\"},\n}\n\ntable := tablewriter.NewWriter(os.Stdout)\ntable.SetHeader([]string{\"Col1\", \"Col2\", \"Col3\", \"Col4\"})\ntable.SetFooter([]string{\"\", \"\", \"Footer3\", \"Footer4\"})\ntable.SetBorder(false)\n\ntable.SetHeaderColor(tablewriter.Colors{tablewriter.Bold, tablewriter.BgGreenColor},\n\ttablewriter.Colors{tablewriter.FgHiRedColor, tablewriter.Bold, tablewriter.BgBlackColor},\n\ttablewriter.Colors{tablewriter.BgRedColor, tablewriter.FgWhiteColor},\n\ttablewriter.Colors{tablewriter.BgCyanColor, tablewriter.FgWhiteColor})\n\ntable.SetColumnColor(tablewriter.Colors{tablewriter.Bold, tablewriter.FgHiBlackColor},\n\ttablewriter.Colors{tablewriter.Bold, tablewriter.FgHiRedColor},\n\ttablewriter.Colors{tablewriter.Bold, tablewriter.FgHiBlackColor},\n\ttablewriter.Colors{tablewriter.Bold, tablewriter.FgBlackColor})\n\ntable.SetFooterColor(tablewriter.Colors{}, tablewriter.Colors{},\n\ttablewriter.Colors{tablewriter.Bold},\n\ttablewriter.Colors{tablewriter.FgHiRedColor})\n\ncolorData1 := []string{\"TestCOLOR1Merge\", \"HelloCol2 - COLOR1\", \"HelloCol3 - COLOR1\", \"HelloCol4 - COLOR1\"}\ncolorData2 := []string{\"TestCOLOR2Merge\", \"HelloCol2 - COLOR2\", \"HelloCol3 - COLOR2\", \"HelloCol4 - COLOR2\"}\n\nfor i, row := range data {\n\tif i == 4 {\n\t\ttable.Rich(colorData1, []tablewriter.Colors{tablewriter.Colors{}, tablewriter.Colors{tablewriter.Normal, tablewriter.FgCyanColor}, tablewriter.Colors{tablewriter.Bold, tablewriter.FgWhiteColor}, tablewriter.Colors{}})\n\t\ttable.Rich(colorData2, []tablewriter.Colors{tablewriter.Colors{tablewriter.Normal, tablewriter.FgMagentaColor}, tablewriter.Colors{}, tablewriter.Colors{tablewriter.Bold, tablewriter.BgRedColor}, tablewriter.Colors{tablewriter.FgHiGreenColor, tablewriter.Italic, tablewriter.BgHiCyanColor}})\n\t}\n\ttable.Append(row)\n}\n\ntable.SetAutoMergeCells(true)\ntable.Render()\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Logfmt Encoder Time Format in Go\nDESCRIPTION: This example shows how to customize the time format of the logfmt encoder to use RFC3339. It modifies the encoder config to use a custom time encoding function that formats the timestamp in UTC using RFC3339.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/jsternberg/zap-logfmt/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/jsternberg/zap-logfmt\"\n\t\"go.uber.org/zap\"\n\t\"go.uber.org/zap/zapcore\"\n)\n\nfunc main() {\n\tconfig := zap.NewProductionEncoderConfig()\n\tconfig.EncodeTime = func(ts time.Time, encoder zapcore.PrimitiveArrayEncoder) {\n\t\tencoder.AppendString(ts.UTC().Format(time.RFC3339))\n\t}\n\tlogger := zap.New(zapcore.NewCore(\n\t\tzaplogfmt.NewEncoder(config),\n\t\tos.Stdout,\n\t\tzapcore.DebugLevel,\n\t))\n\tlogger.Info(\"Hello World\")\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Slice Elements with Map Function in Go\nDESCRIPTION: Example showing how to use the Map function to transform each element in a slice using a custom function.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ndata := []interface{}{1, 2, 3, 4, 5}\nvar fn govalidator.ResultIterator = func(value interface{}, index int) interface{} {\n\treturn value.(int) * 3\n}\n_ = govalidator.Map(data, fn) // result = []interface{}{1, 6, 9, 12, 15}\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Compression in Grafana Tempo (YAML)\nDESCRIPTION: YAML configuration for setting up gRPC compression in Grafana Tempo. It shows how to configure compression for ingester, metrics generator, and querier clients using 'snappy' compression.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ningester_client:\n    grpc_client_config:\n        grpc_compression: \"snappy\"\nmetrics_generator_client:\n    grpc_client_config:\n        grpc_compression: \"snappy\"\nquerier:\n    frontend_worker:\n        grpc_client_config:\n            grpc_compression: \"snappy\"\n```\n\n----------------------------------------\n\nTITLE: Enabling TraceQL Local-Blocks Processor For All Tenants (YAML)\nDESCRIPTION: Configuration snippet for enabling the local-blocks processor for TraceQL metrics by default for all tenants. This configuration is necessary to run metrics queries with TraceQL.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-6.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  defaults:\n    metrics_generator:\n      processors: [local-blocks]\n```\n\n----------------------------------------\n\nTITLE: Decompressing Huff0 Data in Go\nDESCRIPTION: This snippet shows how to decompress Huff0 compressed data. It includes initializing the decoding table with ReadTable and using Decompress1X or Decompress4X functions for decompression.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/huff0/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nReadTable(input []byte) ([]byte, error)\nDecompress1X(input []byte) ([]byte, error)\nDecompress4X(input []byte) ([]byte, error)\n```\n\n----------------------------------------\n\nTITLE: Accessing flag values\nDESCRIPTION: Demonstrates how to access the values of flags after parsing, either directly through pointers or through variables.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(\"ip has value \", *ip)\nfmt.Println(\"flagvar has value \", flagvar)\n```\n\n----------------------------------------\n\nTITLE: Creating TempoStack with Grafana Datasource in YAML\nDESCRIPTION: This YAML snippet shows how to create a TempoStack custom resource that instructs the Tempo Operator to create a Grafana datasource. It requires the 'featureGates.grafanaOperator' to be enabled in the Tempo Operator configuration.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/grafana_datasource.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: tempo.grafana.com/v1alpha1\nkind: TempoStack\nspec:\n  observability:\n    grafana:\n      createDatasource: true\n```\n\n----------------------------------------\n\nTITLE: Compressing Data with Huff0 in Go\nDESCRIPTION: This snippet demonstrates how to compress data using the Huff0 package. It shows the two main compression functions, Compress1X and Compress4X, and explains the possible error values that can be returned.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/huff0/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nCompress1X(input []byte) ([]byte, error)\nCompress4X(input []byte) ([]byte, error)\n\n// Possible error values:\n// nil: Everything ok, output is returned\n// ErrIncompressible: Input is judged to be too hard to compress\n// ErrUseRLE: Input is a single byte value repeated\n// ErrTooBig: Input block exceeds the maximum allowed size (128 Kib)\n// (error): An internal error occurred\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Gorilla Mux Server in Go\nDESCRIPTION: This code snippet illustrates the creation of a simple web server using Gorilla Mux, which serves a static response when the root route is accessed.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_17\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"net/http\"\n    \"log\"\n    \"github.com/gorilla/mux\"\n)\n\nfunc YourHandler(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte(\"Gorilla!\\n\"))\n}\n\nfunc main() {\n    r := mux.NewRouter()\n    // Routes consist of a path and a handler function.\n    r.HandleFunc(\"/\", YourHandler)\n\n    // Bind to a port and pass our router in\n    log.Fatal(http.ListenAndServe(\":8000\", r))\n}\n\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Grapheme Clusters Using Graphemes Class\nDESCRIPTION: Example of using the Graphemes class to iterate over grapheme clusters in a string. This approach provides a convenient way to process each user-perceived character in a string.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngr := uniseg.NewGraphemes(\"👍🏼!\")\nfor gr.Next() {\n\tfmt.Printf(\"%x \", gr.Runes())\n}\n// [1f44d 1f3fc] [21]\n```\n\n----------------------------------------\n\nTITLE: Path Access Documentation for OpenTelemetry Span Context\nDESCRIPTION: Markdown table documenting supported paths for accessing span context data, including field names, descriptions, and their corresponding data types. Covers resource attributes, instrumentation scope, and span-specific fields.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/contexts/ottlspan/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| path                                           | field accessed                                                                                                                                                                                                                                                                                                                                                            | type                                                                    |\n|------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------|\n| span.cache                                     | the value of the current transform context's temporary cache. cache can be used as a temporary placeholder for data during complex transformations                                                                                                                                                                                                                        | pcommon.Map                                                             |\n| span.cache[\\\"\\\"]                               | the value of an item in cache. Supports multiple indexes to access nested fields.                                                                                                                                                                                                                                                                                         | string, bool, int64, float64, pcommon.Map, pcommon.Slice, []byte or nil |\n| resource                                       | resource of the span being processed                                                                                                                                                                                                                                                                                                                                      | pcommon.Resource                                                        |\n```\n\n----------------------------------------\n\nTITLE: Using RegexpFs in Afero\nDESCRIPTION: Creates a filtered view of files where only files matching the specified regular expression pattern are visible and can be created. Directories are not filtered by this constraint.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfs := afero.NewRegexpFs(afero.NewMemMapFs(), regexp.MustCompile(`\\.txt$`))\n_, err := fs.Create(\"/file.html\")\n// err = syscall.ENOENT\n```\n\n----------------------------------------\n\nTITLE: Handling Panics Gracefully with Go Standard Library\nDESCRIPTION: Example showing how to properly handle panics in goroutines using the standard library, including creating a custom error type for capturing panic information.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/sourcegraph/conc/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype caughtPanicError struct {\n    val   any\n    stack []byte\n}\n\nfunc (e *caughtPanicError) Error() string {\n    return fmt.Sprintf(\n        \"panic: %q\\n%s\",\n        e.val,\n        string(e.stack)\n    )\n}\n\nfunc main() {\n    done := make(chan error)\n    go func() {\n        defer func() {\n            if v := recover(); v != nil {\n                done <- &caughtPanicError{\n                    val: v,\n                    stack: debug.Stack()\n                }\n            } else {\n                done <- nil\n            }\n        }()\n        doSomethingThatMightPanic()\n    }()\n    err := <-done\n    if err != nil {\n        panic(err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding IMDSv1 Fallback Disabling Feature in v1.13.0\nDESCRIPTION: This feature adds a flag to disable IMDSv1 fallback, allowing users to enforce the use of IMDSv2 exclusively.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/aws/aws-sdk-go-v2/feature/ec2/imds/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.13.0 (2023-03-14)\n\n* **Feature**: Add flag to disable IMDSv1 fallback\n```\n\n----------------------------------------\n\nTITLE: Concat Converter Usage in OTTL\nDESCRIPTION: The Concat converter takes a sequence of values and a delimiter to concatenate their string representations. It supports paths, primitive values, and byte slices as inputs.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_16\n\nLANGUAGE: ottl\nCODE:\n```\nConcat([span.attributes[\"http.method\"], span.attributes[\"http.path\"]], \": \")\n```\n\nLANGUAGE: ottl\nCODE:\n```\nConcat([metric.name, 1], \" \")\n```\n\nLANGUAGE: ottl\nCODE:\n```\nConcat([\"HTTP method is: \", span.attributes[\"http.method\"]], \"\")\n```\n\n----------------------------------------\n\nTITLE: Overriding Tempo Configuration with Jsonnet\nDESCRIPTION: Shows how to override Tempo configuration using Jsonnet. It customizes parameters like PVC size and storage class, extending the deployment capabilities.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/readme.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\ndataOverride: {\n    _config+:: {\n        ingester+: {\n            pvc_size: '15Gi',\n            pvc_storage_class: 'my-storage-class',\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Google Cloud Storage Secret for Tempo Operator\nDESCRIPTION: This command creates a Kubernetes secret containing GCS bucket information and service account key for Tempo Operator to use as object storage.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/object-storage.md#2025-04-17_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nkubectl create secret generic tempostack-dev-gcs \\\n  --from-literal=bucketname=\"<BUCKET_NAME>\" \\\n  --from-file=key.json=\"<PATH/TO/KEY.JSON>\"\n```\n\n----------------------------------------\n\nTITLE: Basic Kong CLI Structure Example in Go\nDESCRIPTION: Demonstrates how to define a basic command-line interface with two commands (rm and ls) using Kong's struct-based configuration.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/kong/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"github.com/alecthomas/kong\"\n\nvar CLI struct {\n  Rm struct {\n    Force     bool `help:\"Force removal.\"`\n    Recursive bool `help:\"Recursively remove files.\"`\n\n    Paths []string `arg:\"\" name:\"path\" help:\"Paths to remove.\" type:\"path\"`\n  } `cmd:\"\" help:\"Remove files.\"`\n\n  Ls struct {\n    Paths []string `arg:\"\" optional:\"\" name:\"path\" help:\"Paths to list.\" type:\"path\"`\n  } `cmd:\"\" help:\"List paths.\"`\n}\n\nfunc main() {\n  ctx := kong.Parse(&CLI)\n  switch ctx.Command() {\n  case \"rm <path>\":\n  case \"ls\":\n  default:\n    panic(ctx.Command())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of CircuitBreaker in an HTTP Request Function\nDESCRIPTION: A complete example showing how to use CircuitBreaker to wrap an HTTP GET request, handling the response and potential errors through the circuit breaker pattern.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/sony/gobreaker/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar cb *breaker.CircuitBreaker\n\nfunc Get(url string) ([]byte, error) {\n\tbody, err := cb.Execute(func() (interface{}, error) {\n\t\tresp, err := http.Get(url)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tdefer resp.Body.Close()\n\t\tbody, err := ioutil.ReadAll(resp.Body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\treturn body, nil\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn body.([]byte), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Domain Routing with HostSwitch\nDESCRIPTION: Implements a custom HostSwitch handler to route requests across multiple domains or subdomains. Uses a map of host names to HTTP handlers for flexible routing.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/julienschmidt/httprouter/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype HostSwitch map[string]http.Handler\n\nfunc (hs HostSwitch) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tif handler := hs[r.Host]; handler != nil {\n\t\thandler.ServeHTTP(w, r)\n\t} else {\n\t\thttp.Error(w, \"Forbidden\", 403)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTTP Headers for Zipkin Exporter in Go\nDESCRIPTION: Adds a WithHeaders option to the Zipkin exporter to allow configuring custom HTTP headers when exporting spans.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n// Added to go.opentelemetry.io/otel/exporters/zipkin\nfunc WithHeaders(headers map[string]string) Option {\n  // Implementation not shown\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Historical Data for TraceQL Metrics (YAML)\nDESCRIPTION: Configuration for the local-blocks processor to flush RF1 blocks to object storage, enabling metrics queries on historical data. This allows querying older data with TraceQL metrics.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-6.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics_generator:\n  processor:\n    local_blocks:\n      flush_to_storage: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Zipkin Exporter Endpoint with Environment Variable in Go\nDESCRIPTION: Added support to specify the Zipkin collector endpoint using an environment variable in the OpenTelemetry Go SDK.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_24\n\nLANGUAGE: Go\nCODE:\n```\nOTEL_EXPORTER_ZIPKIN_ENDPOINT=<endpoint>\n```\n\n----------------------------------------\n\nTITLE: Go Module Dependencies for Grafana Tempo\nDESCRIPTION: Explicit go module dependencies with version constraints for the Grafana Tempo project. Includes direct dependencies on packages like grafana/dskit, jaegertracing/jaeger, and various other monitoring and tracing related libraries.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/modules.txt#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n## explicit; go 1.21\ngithub.com/googleapis/gax-go/v2\ngithub.com/googleapis/gax-go/v2/apierror\ngithub.com/googleapis/gax-go/v2/apierror/internal/proto\ngithub.com/googleapis/gax-go/v2/callctx\ngithub.com/googleapis/gax-go/v2/internal\ngithub.com/googleapis/gax-go/v2/internallog\ngithub.com/googleapis/gax-go/v2/internallog/grpclog\ngithub.com/googleapis/gax-go/v2/internallog/internal\ngithub.com/googleapis/gax-go/v2/iterator\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to CamelCase in Go\nDESCRIPTION: The ToCamelCase function converts a string to camel case format. It takes a target string as input and returns the camel case version.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_59\n\nLANGUAGE: go\nCODE:\n```\nToCamelCase(target)\n```\n\n----------------------------------------\n\nTITLE: Defining the Token Structure in Go\nDESCRIPTION: This snippet defines the structure of a JWT Token, including fields for raw token data, signing method, header, claims, and the signature. It also specifies the validity status of the token.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Token struct {\n\tRaw       string                 // Raw contains the raw token\n\tMethod    SigningMethod          // Method is the signing method used or to be used\n\tHeader    map[string]interface{} // Header is the first segment of the token in decoded form\n\tClaims    Claims                 // Claims is the second segment of the token in decoded form\n\tSignature []byte                 // Signature is the third segment of the token in decoded form\n\tValid     bool                   // Valid specifies if the token is valid\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring On-Disk Page Buffers for Parquet Writing in Go\nDESCRIPTION: This snippet shows how to configure a parquet.GenericWriter to use on-disk page buffers for memory optimization when generating large Parquet files. It uses the NewFileBufferPool function to create a buffer pool that stores pages in temporary files.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/parquet-go/parquet-go/README.md#2025-04-17_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntype RowType struct { ... }\n\nwriter := parquet.NewGenericWriter[RowType](output,\n    parquet.ColumnPageBuffers(\n        parquet.NewFileBufferPool(\"\", \"buffers.*\"),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring PROXY Protocol Support in Go\nDESCRIPTION: This snippet sets up the configuration needed to enable PROXY protocol support in a Go application's server. It uses the go-proxyproto package, and by setting Config.ProxyProtocolEnabled to true, it updates connection information based on PROXY headers. Requires go-proxyproto as a dependency and a properly initialized server object. Designed to enhance server interaction by preserving original client IP data.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/grafana/dskit/server/PROXYPROTOCOL.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncfg := &Config{\\n    ProxyProtocolEnabled: true,\\n    // ...\\n}\\n\\nserver := NewServer(cfg)\\n// ...\n```\n\n----------------------------------------\n\nTITLE: Writing Configuration Files with Viper\nDESCRIPTION: Examples of different methods to write configuration to files, including safe write operations that won't overwrite existing files.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nviper.WriteConfig() // writes current config to predefined path set by 'viper.AddConfigPath()' and 'viper.SetConfigName'\nviper.SafeWriteConfig()\nviper.WriteConfigAs(\"/path/to/my/.config\")\nviper.SafeWriteConfigAs(\"/path/to/my/.config\") // will error since it has already been written\nviper.SafeWriteConfigAs(\"/path/to/my/.other_config\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Format in Tempo\nDESCRIPTION: Example configuration to use the new vParquet2 block format in Tempo 2.1. This setting enables performance improvements for TraceQL queries containing duration.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-1.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nblock_format: vParquet2\n```\n\n----------------------------------------\n\nTITLE: Installing Tempo and Memcached Jsonnet Libraries\nDESCRIPTION: Commands to install the Tempo microservices Jsonnet library and the Memcached Jsonnet library with their dependencies.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/tanka.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njb install github.com/grafana/tempo/operations/jsonnet/microservices@main\n```\n\nLANGUAGE: bash\nCODE:\n```\njb install github.com/grafana/jsonnet-libs/memcached@master\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings in Go\nDESCRIPTION: The Split function separates a string by a specified delimiter and returns an array of substrings. It takes a target string and a delimiter string as parameters.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_54\n\nLANGUAGE: go\nCODE:\n```\nSplit(target, delimiter)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Grok Parser in Go\nDESCRIPTION: Demonstrates how to initialize a Grok parser, add custom patterns, compile patterns, and parse strings with named captures. This example shows parsing an IP address and port.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/elastic/go-grok/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ng := grok.New()\n\n// use custom patterns\npatternDefinitions := map[string]string{\n    // patterns can be nested\n    \"NGINX_HOST\":         `(?:%{IP:destination.ip}|%{NGINX_NOTSEPARATOR:destination.domain})(:%{NUMBER:destination.port})?`,\n    // NGINX_NOTSEPARATOR is used in NGINX_HOST. IP and NUMBER are part of default pattern set\n    \"NGINX_NOTSEPARATOR\": `\"[^\\t ,:]\"`,\n}\ng.AddPatterns(patternDefinitions)\n\n// compile grok before use, this will generate regex.Regex based on pattern and \n// subpatterns provided.\n// this needs to be performed just once.\nerr := g.Compile(\"%{NGINX_HOST}\", true)\n\nres, err := g.ParseString(\"127.0.0.1:1234\")\n```\n\n----------------------------------------\n\nTITLE: Creating custom flag name normalization function\nDESCRIPTION: Demonstrates how to create a custom normalization function that treats certain separators (-,_,.) as equivalent in flag names.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc wordSepNormalizeFunc(f *pflag.FlagSet, name string) pflag.NormalizedName {\n\tfrom := []string{\"-\", \"_\"}\n\tto := \".\"\n\tfor _, sep := range from {\n\t\tname = strings.Replace(name, sep, to, -1)\n\t}\n\treturn pflag.NormalizedName(name)\n}\n\nmyFlagSet.SetNormalizeFunc(wordSepNormalizeFunc)\n```\n\n----------------------------------------\n\nTITLE: Storing Tenant Overrides in Object Store (YAML)\nDESCRIPTION: Example of how tenant-specific overrides are stored in the object store bucket managed by Tempo. Each tenant's overrides are stored in a separate JSON file.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/manage-advanced-systems/user-configurable-overrides.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noverrides/\n├── 1/\n│   └── overrides.json\n└── 2/\n    └── overrides.json\n```\n\n----------------------------------------\n\nTITLE: Mixing and Reusing Colors in Go\nDESCRIPTION: Examples of creating custom color objects and combining multiple color attributes\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Create a new color object\nc := color.New(color.FgCyan).Add(color.Underline)\nc.Println(\"Prints cyan text with an underline.\")\n\n// Or just add them to New()\nd := color.New(color.FgCyan, color.Bold)\nd.Printf(\"This prints bold cyan %s\\n\", \"too!.\")\n\n// Mix up foreground and background colors, create new mixes!\nred := color.New(color.FgRed)\n\nboldRed := red.Add(color.Bold)\nboldRed.Println(\"This will print text in bold red.\")\n\nwhiteBackground := red.Add(color.BgWhite)\nwhiteBackground.Println(\"Red text with white background.\")\n```\n\n----------------------------------------\n\nTITLE: Trace Search Request Example with Tag Filtering\nDESCRIPTION: Example GET request for searching traces filtered by service name and URL. The API supports finding traces based on span and process attributes using logfmt encoding.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/_index.md#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET /api/search?tags=service.name%3Dmyservice%20http.url%3Dapi%2Fmyapi\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Variable Expansion Syntax in Go\nDESCRIPTION: This code snippet demonstrates the syntax for variable expansion using the envsubst package. It shows the ${var} format used for expanding variables in strings.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/drone/envsubst/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`${var}`\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Compression Settings in Tempo\nDESCRIPTION: YAML configuration for enabling Snappy compression in Tempo's ingester client, metrics generator client, and querier frontend worker. This configuration can be used to re-enable compression which is disabled by default for performance reasons.\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ningester_client:\n    grpc_client_config:\n        grpc_compression: \"snappy\"\nmetrics_generator_client:\n    grpc_client_config:\n        grpc_compression: \"snappy\"\nquerier:\n    frontend_worker:\n        grpc_client_config:\n            grpc_compression: \"snappy\"\n```\n\n----------------------------------------\n\nTITLE: Disabling sorting of flags in help text\nDESCRIPTION: Shows how to disable the automatic sorting of flags in help and usage messages, preserving the order in which flags were defined.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nflags.BoolP(\"verbose\", \"v\", false, \"verbose output\")\nflags.String(\"coolflag\", \"yeaah\", \"it's really cool flag\")\nflags.Int(\"usefulflag\", 777, \"sometimes it's very useful\")\nflags.SortFlags = false\nflags.PrintDefaults()\n```\n\n----------------------------------------\n\nTITLE: Initializing Tanka and Installing Jsonnet Libraries\nDESCRIPTION: This script initializes a Tanka project, installs the necessary Jsonnet libraries for Grafana Tempo, and generates Kubernetes YAML manifests. Requires bash, Tanka, jsonnet-bundler, and access to the mentioned repositories.\nSOURCE: https://github.com/grafana/tempo/blob/main/operations/jsonnet/microservices/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n#!/usr/bin/env bash\n# SPDX-License-Identifier: AGPL-3.0-only\n\nset -e\n\n# Initialise the Tanka.\nmkdir jsonnet-example \\u0026\\u0026 cd jsonnet-example\ntk init --k8s=1.26\n\n# Install Tempo jsonnet.\njb install github.com/grafana/tempo/operations/jsonnet/microservices@main\njb install github.com/grafana/jsonnet-libs/memcached\n\n# Use the provided example. In tempo repository in operations/jsonnet-compiled\ncp operations/jsonnet-compliled/util/example/main.jsonnet environments/default/main.jsonnet\n\n# Generate the YAML manifests.\nexport PAGER=cat\ntk show environments/default\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Namespace\nDESCRIPTION: Command to create a dedicated Kubernetes namespace for Tempo installation\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/helm-charts/tempo-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace tempo-test\n```\n\n----------------------------------------\n\nTITLE: Calculating Length of Strings, Slices, and Maps in Go\nDESCRIPTION: The Len function returns the int64 length of a target string, slice, or map. It supports various types including pcommon.Slice, pcommon.Map, and pcommon.Value with specific value types.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_42\n\nLANGUAGE: Go\nCODE:\n```\nLen(log.body)\n```\n\n----------------------------------------\n\nTITLE: Configuring Random Jitter with gzhttp\nDESCRIPTION: This example demonstrates how to configure random jitter using the `gzhttp.RandomJitter` option. It covers both content-based jitter (with a positive buffer size) and random jitter (with a negative buffer size). The buffer size determines how much of the data is used to calculate the jitter amount, or if a random amount is used each time.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/gzhttp/README.md#2025-04-17_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n`gzhttp.RandomJitter(32, 50000)`\n```\n\nLANGUAGE: Go\nCODE:\n```\n`gzhttp.RandomJitter(32, -1)`\n```\n\n----------------------------------------\n\nTITLE: Spawning Multiple Goroutines - Standard Library vs Conc\nDESCRIPTION: Demonstrates spawning multiple goroutines and waiting for their completion. Shows both the standard library approach using sync.WaitGroup and the simplified conc.WaitGroup approach.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/sourcegraph/conc/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    var wg sync.WaitGroup\n    for i := 0; i < 10; i++ {\n        wg.Add(1)\n        go func() {\n            defer wg.Done()\n            // crashes on panic!\n            doSomething()\n        }()\n    }\n    wg.Wait()\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    var wg conc.WaitGroup\n    for i := 0; i < 10; i++ {\n        wg.Go(doSomething)\n    }\n    wg.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Logger in Application Object\nDESCRIPTION: This code demonstrates how to pass a `logr.Logger` object to other libraries or store it in structs. This allows logging to be performed by those libraries or objects without them needing to know about the underlying implementation. The example shows an `appObject` struct containing a logger, which is then used within the `Run` method to log information.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n    app := createTheAppObject(logger)\n    app.Run()\n```\n\n----------------------------------------\n\nTITLE: Using ToString Function for String Conversion in Go\nDESCRIPTION: Examples of using the ToString function to convert various data types to strings. The function handles strings, integers, floats, byte slices, interfaces, and nil values.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/cast/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncast.ToString(\"mayonegg\")         // \"mayonegg\"\ncast.ToString(8)                  // \"8\"\ncast.ToString(8.31)               // \"8.31\"\ncast.ToString([]byte(\"one time\")) // \"one time\"\ncast.ToString(nil)                // \"\"\n\nvar foo interface{} = \"one more time\"\ncast.ToString(foo)                // \"one more time\"\n```\n\n----------------------------------------\n\nTITLE: Example of Sending Target Groups from Service Discovery\nDESCRIPTION: This example illustrates how a service discovery mechanism might send target groups to Prometheus. It showcases the format of target groups and emphasizes the requirement for unique source identifiers across different groups for accurate tracking and updates.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/prometheus/prometheus/discovery/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n[]targetgroup.Group{\n\t{\n\t\tTargets: []model.LabelSet{\n\t\t\t{\n\t\t\t\t\"__instance__\": \"10.11.150.1:7870\",\n\t\t\t\t\"hostname\": \"demo-target-1\",\n\t\t\t\t\"test\": \"simple-test\",\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"__instance__\": \"10.11.150.4:7870\",\n\t\t\t\t\"hostname\": \"demo-target-2\",\n\t\t\t\t\"test\": \"simple-test\",\n\t\t\t},\n\t\t},\n\t\tLabels: model.LabelSet{\n\t\t\t\"job\": \"mysql\",\n\t\t},\n\t\t\"Source\": \"file1\",\n\t\t},\n\t{\n\t\tTargets: []model.LabelSet{\n\t\t\t{\n\t\t\t\t\"__instance__\": \"10.11.122.11:6001\",\n\t\t\t\t\"hostname\": \"demo-postgres-1\",\n\t\t\t\t\"test\": \"simple-test\",\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"__instance__\": \"10.11.122.15:6001\",\n\t\t\t\t\"hostname\": \"demo-postgres-2\",\n\t\t\t\t\"test\": \"simple-test\",\n\t\t\t},\n\t\t},\n\t\tLabels: model.LabelSet{\n\t\t\t\"job\": \"postgres\",\n\t\t},\n\t\t\"Source\": \"file2\",\n\t\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tanka Util Library\nDESCRIPTION: Initial import of the tanka-util library from GitHub, providing Helm and Kustomize tooling for Jsonnet configuration management.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/grafana/jsonnet-libs/tanka-util/README.md#2025-04-17_snippet_0\n\nLANGUAGE: jsonnet\nCODE:\n```\nlocal tanka_util = import \"github.com/grafana/jsonnet-libs/tanka-util/main.libsonnet\"\n```\n\n----------------------------------------\n\nTITLE: New Poller Options for Tracing - Go\nDESCRIPTION: This snippet includes fields `Tracer` in `runtime.NewPollerOptions` and `runtime.NewPollerFromResumeTokenOptions` types which allow users to define a tracer that is utilized within polling operations, enabling traces for long-running operations.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype NewPollerOptions struct {\n    Tracer Tracer\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Sampling Priority in Go\nDESCRIPTION: Example of programmatically setting sampling priority using OpenTracing API\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/uber/jaeger-client-go/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/opentracing/opentracing-go\"\n    \"github.com/opentracing/opentracing-go/ext\"\n)\n\nspan := opentracing.SpanFromContext(ctx)\next.SamplingPriority.Set(span, 1)\n```\n\n----------------------------------------\n\nTITLE: Tempo Operator Monitoring Configuration in YAML\nDESCRIPTION: YAML configuration for the Tempo Operator ConfigMap to enable metrics and alerting for the operator itself. This enables the creation of ServiceMonitor and PrometheusRule objects for monitoring the operator.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/monitor.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\ndata:\n  controller_manager_config.yaml: |\n    featureGates:\n      observability:\n        metrics:\n          createServiceMonitors: true\n          createPrometheusRules: true\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Strings in Go\nDESCRIPTION: The String function converts various data types to string format. It handles different input types including string, []byte, map, slice, and pcommon.Value.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_56\n\nLANGUAGE: go\nCODE:\n```\nString(value)\n```\n\n----------------------------------------\n\nTITLE: Defining CircuitBreaker Settings Structure in Go\nDESCRIPTION: The Settings structure for configuring a CircuitBreaker instance, including fields for customizing behavior like timeout duration, state change callbacks, and trip conditions.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/sony/gobreaker/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Settings struct {\n\tName          string\n\tMaxRequests   uint32\n\tInterval      time.Duration\n\tTimeout       time.Duration\n\tReadyToTrip   func(counts Counts) bool\n\tOnStateChange func(name string, from State, to State)\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Substrings in Go\nDESCRIPTION: The Substring function returns a portion of a string from a given start index to a specified length. It takes a target string, start index, and length as parameters.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_57\n\nLANGUAGE: go\nCODE:\n```\nSubstring(target, start, length)\n```\n\n----------------------------------------\n\nTITLE: Converting to Strong Types\nDESCRIPTION: Demonstrates extracting typed values from objx.Map using direct type conversion methods.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/stretchr/objx/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nm.Get(\"code\").Int()\n```\n\n----------------------------------------\n\nTITLE: Adding Remote Write Configuration for Metrics in Jsonnet\nDESCRIPTION: This Jsonnet configuration block is designed to enable remote writing of metrics data to a Prometheus-compatible instance. It requires defining the URL for the metrics store and can include basic authentication if needed.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/tanka.md#2025-04-17_snippet_8\n\nLANGUAGE: jsonnet\nCODE:\n```\nstorage+: {\n    remote_write: [\n        {\n            url: 'https://<urlForPrometheusCompatibleStore>/api/v1/write',\n            send_exemplars: true,\n            basic_auth: {\n                username: '<username>',\n                password: '<password>',\n            },\n        }\n    ],\n},\n```\n\n----------------------------------------\n\nTITLE: Verifying IPv6 Listener Setup in Kubernetes Pod\nDESCRIPTION: This shell script demonstrates how to check the listening services within a Kubernetes pod. It installs the iproute2 package and uses the ss command to list IPv6 listeners.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/network/ipv6.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n❯ k exec -it compactor-55c778b8d9-2kch2 -- sh\n/ # apk add iproute2\nOK: 12 MiB in 27 packages\n/ # ss -ltn -f inet\nState   Recv-Q   Send-Q     Local Address:Port     Peer Address:Port  Process\n/ # ss -ltn -f inet6\nState    Recv-Q   Send-Q     Local Address:Port     Peer Address:Port  Process\nLISTEN   0        4096                   *:7946                *:*\nLISTEN   0        4096                   *:9095                *:*\nLISTEN   0        4096                   *:3200                *:*\n```\n\n----------------------------------------\n\nTITLE: Converting Maps to Key-Value Strings in Go\nDESCRIPTION: The ToKeyValueString function converts a pcommon.Map to a string of key-value pairs. It supports optional delimiters and sorting of the output.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_60\n\nLANGUAGE: go\nCODE:\n```\nToKeyValueString(target, Optional[delimiter], Optional[pair_delimiter], Optional[sort_output])\n```\n\n----------------------------------------\n\nTITLE: Creating a New Validator Instance with Leeway Option in Go\nDESCRIPTION: This code snippet demonstrates how to create a new Validator instance with a specific leeway for validation, enabling more flexible token expiration handling.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar v = jwt.NewValidator(jwt.WithLeeway(5*time.Second))\nv.Validate(myClaims)\n```\n\n----------------------------------------\n\nTITLE: Building Tempo Mixins\nDESCRIPTION: This command runs `make all`, which regenerates the dashboards, rules, and alerts for Tempo.  It uses Jsonnet to compile the configurations and saves the output to the `tempo-mixin-compiled` folder.\nSOURCE: https://github.com/grafana/tempo/blob/main/operations/tempo-mixin/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake all\n```\n\n----------------------------------------\n\nTITLE: Performing a Range Scan on Keys in an Immutable Radix Tree in Go\nDESCRIPTION: This code snippet demonstrates how to perform a range scan of the keys in an immutable radix tree using the `Iterator` returned by the `Root().Iterator()` method. It initializes an iterator, sets the lower bound using `SeekLowerBound`, and iterates through the keys until it reaches the upper bound. The keys are printed to the console.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-immutable-radix/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Create a tree\nr := iradix.New()\nr, _, _ = r.Insert([]byte(\"001\"), 1)\nr, _, _ = r.Insert([]byte(\"002\"), 2)\nr, _, _ = r.Insert([]byte(\"005\"), 5)\nr, _, _ = r.Insert([]byte(\"010\"), 10)\nr, _, _ = r.Insert([]byte(\"100\"), 10)\n\n// Range scan over the keys that sort lexicographically between [003, 050)\nit := r.Root().Iterator()\nit.SeekLowerBound([]byte(\"003\"))\nfor key, _, ok := it.Next(); ok; key, _, ok = it.Next() {\n  if key >= \"050\" {\n      break\n  }\n  fmt.Println(key)\n}\n// Output:\n//  005\n//  010\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Server with Conntrack Listener in Go\nDESCRIPTION: This code shows how to set up a TLS server with a connection-tracked listener. It includes configuration for TLS certificates, HTTP/2 support, and uses the connhelpers package for TLS setup.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/mwitkow/go-conntrack/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nlistener, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\nlistener = conntrack.NewListener(listener, \n    conntrack.TrackWithName(\"https\"), \n    conntrack.TrackWithTracing(),\n    conntrack.TrackWithTcpKeepAlive(5 * time.Minutes))\ntlsConfig, err := connhelpers.TlsConfigForServerCerts(*tlsCertFilePath, *tlsKeyFilePath)\ntlsConfig, err = connhelpers.TlsConfigWithHttp2Enabled(tlsConfig)\ntlsListener := tls.NewListener(listener, tlsConfig)\nhttpServer.Serve(listener)\n```\n\n----------------------------------------\n\nTITLE: Configuring Codec Handles in Go\nDESCRIPTION: This code snippet shows how to create and configure handles for Binc and Msgpack codecs. It includes setting the MapType for the Msgpack handle and a commented-out example of how to configure extensions for custom types, such as enabling Time support with specific encode/decode functions.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-msgpack/codec/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\"// create and configure Handle\nvar (\n  bh codec.BincHandle\n  mh codec.MsgpackHandle\n)\n\nmh.MapType = reflect.TypeOf(map[string]interface{}(nil))\n\n// configure extensions\n// e.g. for msgpack, define functions and enable Time support for tag 1\n// mh.AddExt(reflect.TypeOf(time.Time{}), 1, myMsgpackTimeEncodeExtFn, myMsgpackTimeDecodeExtFn)\"\n```\n\n----------------------------------------\n\nTITLE: Secondary YAML Configuration Example\nDESCRIPTION: Secondary YAML configuration file showing the same key with a string value that will override the previous array value when merged.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nkey: 'string'\n```\n\n----------------------------------------\n\nTITLE: Dumping Data for Given Trace ID Using Tempo CLI\nDESCRIPTION: The command queries backend blocks to download all data associated with a given trace ID. It involves intense processing as it downloads bloom filters and trace data.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/tempo_cli.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntempo-cli query blocks <trace-id> <tenant-id>\n```\n\n----------------------------------------\n\nTITLE: Configuring log output with logrus and go-colorable in Go\nDESCRIPTION: This Go snippet configures logrus to force colored output in logs, utilizing the go-colorable library to make it compatible with Windows. Dependencies include the logrus library for logging and go-colorable for handling color escape sequences. The code sets a formatter to force color and streams output to a colorable stdout. Log messages at different levels are demonstrated, with string inputs and logs sent to standard output.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/mattn/go-colorable/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nlogrus.SetFormatter(&logrus.TextFormatter{ForceColors: true})\nlogrus.SetOutput(colorable.NewColorableStdout())\n\nlogrus.Info(\"succeeded\")\nlogrus.Warn(\"not correct\")\nlogrus.Error(\"something error\")\nlogrus.Fatal(\"panic\")\n```\n\n----------------------------------------\n\nTITLE: Counts Structure for CircuitBreaker Stats in Go\nDESCRIPTION: The Counts structure that holds statistics about request success and failure rates for the CircuitBreaker.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/sony/gobreaker/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Counts struct {\n\tRequests             uint32\n\tTotalSuccesses       uint32\n\tTotalFailures        uint32\n\tConsecutiveSuccesses uint32\n\tConsecutiveFailures  uint32\n}\n```\n\n----------------------------------------\n\nTITLE: Struct Definition Examples with Validation Tags in Go\nDESCRIPTION: Examples of struct definitions with different validation tag configurations. It shows how to mark fields as exempt from validation or optional, and how these affect the validation process.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// this struct definition will fail govalidator.ValidateStruct() (and the field values do not matter):\ntype exampleStruct struct {\n  Name  string ``\n  Email string `valid:\"email\"`\n}\n\n// this, however, will only fail when Email is empty or an invalid email address:\ntype exampleStruct2 struct {\n  Name  string `valid:\"-\"`\n  Email string `valid:\"email\"`\n}\n\n// lastly, this will only fail when Email is an invalid email address but not when it's empty:\ntype exampleStruct2 struct {\n  Name  string `valid:\"-\"`\n  Email string `valid:\"email,optional\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Using DPanic for Development-Time Panic Logging in Go\nDESCRIPTION: This snippet demonstrates the use of DPanic for logging errors that shouldn't occur in production but are theoretically possible. It's an alternative to using panic() for debugging.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.uber.org/zap/FAQ.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif err != nil {\n  panic(fmt.Sprintf(\"shouldn't ever get here: %v\", err))\n}\n```\n\n----------------------------------------\n\nTITLE: Using Afero OsFs in Go\nDESCRIPTION: This snippet shows how to use Afero's OsFs, which is a wrapper around native OS calls.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nappfs := afero.NewOsFs()\nappfs.MkdirAll(\"src/a\", 0755)\n```\n\n----------------------------------------\n\nTITLE: Deploying Tempo as a Single Binary with Tanka\nDESCRIPTION: Deploys Tempo in a monolithic mode using Tanka, with default local disk storage for traces. The configuration can be modified for cloud storage.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# double check you're applying to your local k3d before running this!\ntk apply tempo-single-binary\n```\n\n----------------------------------------\n\nTITLE: RPC Communication with Codec in Go\nDESCRIPTION: This code snippet demonstrates how to establish RPC communication from the client-side using the codec library. It shows how to dial a connection, create an RPC client codec using either the GoRpc or MsgpackSpecRpc, and then create a new RPC client with the codec.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-msgpack/codec/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n\"//RPC Communication (client side)\nconn, err = net.Dial(\"tcp\", \"localhost:5555\")\nrpcCodec := codec.GoRpc.ClientCodec(conn, h)\n//OR rpcCodec := codec.MsgpackSpecRpc.ClientCodec(conn, h)\nclient := rpc.NewClientWithCodec(rpcCodec)\"\n```\n\n----------------------------------------\n\nTITLE: Finding Elements with XPath Expressions in Go\nDESCRIPTION: Various examples showing how to use Find and FindOne with XPath expressions to query XML documents.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/antchfx/xmlquery/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nlist := xmlquery.Find(doc, \"//book//author\")\n// or\nlist := xmlquery.Find(doc, \"//author\")\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Prealloc Settings\nDESCRIPTION: Configuration environment variables added for tuning prealloc behavior in the ingester, including bucket size, number of buckets, and minimum bucket settings\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nPREALLOC_BKT_SIZE\nPREALLOC_NUM_BUCKETS\nPREALLOC_MIN_BUCKET\n```\n\n----------------------------------------\n\nTITLE: Querying Tag Values API Endpoint\nDESCRIPTION: Example of querying the tag values endpoint to retrieve all discovered values for a specific tag name like service.name.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/_index.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nGET /api/search/tag/service.name/values\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -G -s http://localhost:3200/api/search/tag/service.name/values  | jq\n```\n\n----------------------------------------\n\nTITLE: Querying Span Events in TraceQL\nDESCRIPTION: Illustrates how to query span events for specific attribute values or event names.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2023-11 TraceQL Extensions.md#2025-04-17_snippet_4\n\nLANGUAGE: traceql\nCODE:\n```\n{ event.exception.message =~ \".*Division by zero.*\" }\n{ event:name = \"exception\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Tempo with MinIO Object Storage in Jsonnet\nDESCRIPTION: This Jsonnet script defines the configuration for the Tempo cluster using MinIO as the object storage backend. It sets various parameters including images, storage settings, and component replicas to optimize the deployment according to the user's specifications.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/tanka.md#2025-04-17_snippet_7\n\nLANGUAGE: jsonnet\nCODE:\n```\ncat <<EOF > environments/tempo/main.jsonnet\n// The jsonnet file used to generate the Kubernetes manifests.\nlocal tempo = import 'microservices/tempo.libsonnet';\nlocal k = import 'ksonnet-util/kausal.libsonnet';\nlocal container = k.core.v1.container;\nlocal containerPort = k.core.v1.containerPort;\n\ntempo {\n    _images+:: {\n        tempo: 'grafana/tempo:latest',\n        tempo_query: 'grafana/tempo-query:latest',\n    },\n\n    tempo_distributor_container+:: container.withPorts([\n            containerPort.new('jaeger-grpc', 14250),\n            containerPort.new('otlp-grpc', 4317),\n        ]),\n\n    _config+:: {\n        namespace: 'tempo',\n\n        compactor+: {\n            replicas: 1,\n        },\n        query_frontend+: {\n            replicas: 2,\n        },\n        querier+: {\n            replicas: 3,\n        },\n        ingester+: {\n            replicas: 3,\n            pvc_size: '10Gi',\n            pvc_storage_class: 'standard',\n        },\n        distributor+: {\n            replicas: 3,\n            receivers: {\n                jaeger: {\n                    protocols: {\n                        grpc: {\n                            endpoint: '0.0.0.0:14250',\n                        },\n                    },\n                },\n                otlp: {\n                    protocols: {\n                        grpc: {\n                            endpoint: '0.0.0.0:4317',\n                        },\n                    },\n                },\n            },\n        },\n\n        metrics_generator+: {\n            replicas: 1,\n            ephemeral_storage_request_size: '10Gi',\n            ephemeral_storage_limit_size: '11Gi',\n            pvc_size: '10Gi',\n            pvc_storage_class: 'standard',\n        },\n        memcached+: {\n            replicas: 3,\n        },\n\n        bucket: 'tempo-data',\n        backend: 's3',\n    },\n\n    tempo_config+:: {\n        storage+: {\n            trace+: {\n                s3: {\n                    bucket: $._config.bucket,\n                    access_key: 'minio',\n                    secret_key: 'minio123',\n                    endpoint: 'minio:9000',\n                    insecure: true,\n                },\n            },\n        },\n        metrics_generator+: {\n            processor: {\n                span_metrics: {},\n                service_graphs: {},\n            },\n\n            registry+: {\n                external_labels: {\n                    source: 'tempo',\n                },\n            },\n        },\n        overrides+: {\n            metrics_generator_processors: ['service-graphs', 'span-metrics'],\n        },\n    },\n\n    tempo_ingester_container+:: {\n      securityContext+: {\n        runAsUser: 0,\n      },\n    },\n\n    local statefulSet = $.apps.v1.statefulSet,\n    tempo_ingester_statefulset+: {\n        statefulSet.mixin.spec.withPodManagementPolicy('Parallel'),\n    },\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Cipher Suites in OpenTelemetry\nDESCRIPTION: Example YAML configuration showing how to specify cipher suites for TLS connections. This defines a list of preferred encryption algorithms to use during TLS handshakes.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/config/configtls/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  cipher_suites:\n    - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n    - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n    - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n```\n\n----------------------------------------\n\nTITLE: Function Implementation Guidelines - OTTL Files\nDESCRIPTION: Naming and structural requirements for implementing new OTTL functions. Specifies file naming patterns and test organization requirements.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nAll new functions must be added via a new file.  Function files must start with `func_`.  Functions must be placed in `ottlfuncs`.\n\nUnit tests must be added for all new functions.  Unit test files must start with `func_` and end in `_test`.  Unit tests must be placed in the same directory as the function.  Functions that are not specific to a pipeline should be tested independently of any specific pipeline. Functions that are specific to a pipeline should be tests against that pipeline. End-to-end tests must be added in the `e2e` directory.\n```\n\n----------------------------------------\n\nTITLE: Basic CPU Information Example in Go\nDESCRIPTION: Complete example showing how to retrieve and display basic CPU information including brand name, cores, cache sizes, and supported features using the CPUID library.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/cpuid/v2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\n\t. \"github.com/klauspost/cpuid/v2\"\n)\n\nfunc main() {\n\t// Print basic CPU information:\n\tfmt.Println(\"Name:\", CPU.BrandName)\n\tfmt.Println(\"PhysicalCores:\", CPU.PhysicalCores)\n\tfmt.Println(\"ThreadsPerCore:\", CPU.ThreadsPerCore)\n\tfmt.Println(\"LogicalCores:\", CPU.LogicalCores)\n\tfmt.Println(\"Family\", CPU.Family, \"Model:\", CPU.Model, \"Vendor ID:\", CPU.VendorID)\n\tfmt.Println(\"Features:\", strings.Join(CPU.FeatureSet(), \",\"))\n\tfmt.Println(\"Cacheline bytes:\", CPU.CacheLine)\n\tfmt.Println(\"L1 Data Cache:\", CPU.Cache.L1D, \"bytes\")\n\tfmt.Println(\"L1 Instruction Cache:\", CPU.Cache.L1I, \"bytes\")\n\tfmt.Println(\"L2 Cache:\", CPU.Cache.L2, \"bytes\")\n\tfmt.Println(\"L3 Cache:\", CPU.Cache.L3, \"bytes\")\n\tfmt.Println(\"Frequency\", CPU.Hz, \"hz\")\n\n\t// Test if we have these specific features:\n\tif CPU.Supports(SSE, SSE2) {\n\t\tfmt.Println(\"We have Streaming SIMD 2 Extensions\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Existing Environment Variables in Go\nDESCRIPTION: Illustrates the difference between gotenv.Apply() and gotenv.OverApply() when dealing with existing environment variables. OverApply() will override existing values, while Apply() will not.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/subosito/gotenv/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nos.Setenv(\"HELLO\", \"world\")\n\n// NOTE: using Apply existing value will be reserved\ngotenv.Apply(strings.NewReader(\"HELLO=universe\"))\nfmt.Println(os.Getenv(\"HELLO\"))\n// Output: \"world\"\n\n// NOTE: using OverApply existing value will be overridden\ngotenv.OverApply(strings.NewReader(\"HELLO=universe\"))\nfmt.Println(os.Getenv(\"HELLO\"))\n// Output: \"universe\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Query SLO Percentage using TraceQL\nDESCRIPTION: This TraceQL query calculates the percentage of requests that are within the SLO by dividing the rate of requests within SLO by the total rate of requests, grouped by operation.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-3.md#2025-04-17_snippet_3\n\nLANGUAGE: traceql\nCODE:\n```\nsum(rate(tempo_query_frontend_queries_within_slo_total{}[1m])) by (op)\n/\nsum(rate(tempo_query_frontend_queries_total{}[1m])) by (op)\n```\n\n----------------------------------------\n\nTITLE: Defining Option Interface in Go\nDESCRIPTION: Interface definition for configuration options with unexported apply method to prevent external implementation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype Option interface {\n\tapply(config) config\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing gRPC Port in Tempo Server Configuration\nDESCRIPTION: YAML configuration to change the default gRPC listening port (9095) for Tempo components. This allows customizing the port each Tempo pod listens on for gRPC traffic.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/network/sidecar-proxy.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  grpc_listen_port: 12345\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Authentication with autorest/adal and azidentity\nDESCRIPTION: Shows how to configure OAuth settings and create service principal tokens using both autorest/adal and azidentity packages. Demonstrates configuration for sovereign clouds like Azure China.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/go-autorest/autorest/adal\"\n\noauthCfg, err := adal.NewOAuthConfig(\"https://login.chinacloudapi.cn\", tenantID)\nhandle(err)\n\nspt, err := adal.NewServicePrincipalTokenWithSecret(\n    *oauthCfg, clientID, \"https://management.chinacloudapi.cn/\", &adal.ServicePrincipalTokenSecret{ClientSecret: secret},\n)\n```\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n)\n\nclientOpts := azcore.ClientOptions{Cloud: cloud.AzureChina}\n\ncred, err := azidentity.NewClientSecretCredential(\n    tenantID, clientID, secret, &azidentity.ClientSecretCredentialOptions{ClientOptions: clientOpts},\n)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Defining Object in Jsonnet\nDESCRIPTION: The 'obj' function acts as a shorthand for defining a new object in Jsonnet, utilizing 'object.new' with specified help and fields.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/jsonnet-libs/docsonnet/doc-util/README.md#2025-04-17_snippet_2\n\nLANGUAGE: jsonnet\nCODE:\n```\nobj(help, fields)\n```\n\n----------------------------------------\n\nTITLE: Supporting Go flags when using pflag\nDESCRIPTION: Demonstrates how to add flags defined with Go's native flag package to a pflag FlagSet, useful for supporting third-party dependencies.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tgoflag \"flag\"\n\tflag \"github.com/spf13/pflag\"\n)\n\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n\nfunc main() {\n\tflag.CommandLine.AddGoFlagSet(goflag.CommandLine)\n\tflag.Parse()\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from NewChainedTokenCredential to the new signature in Go Azure SDK\nDESCRIPTION: The NewChainedTokenCredential function has a new signature that accepts a slice of token credentials and an options struct. This demonstrates how to migrate from the old to the new implementation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// before\ncred, err := NewChainedTokenCredential(credA, credB)\n\n// after\ncred, err := NewChainedTokenCredential([]azcore.TokenCredential{credA, credB}, nil)\n```\n\n----------------------------------------\n\nTITLE: Status Code Range Query\nDESCRIPTION: Query to find traces with HTTP status codes between 400 and 500\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_30\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ span.http.status_code >= 400 && span.http.status_code < 500 }\n```\n\n----------------------------------------\n\nTITLE: Pre-compiling JMESPath Expressions in Go\nDESCRIPTION: Demonstrates how to use the Compile function to pre-compile a JMESPath expression for more efficient repeated use. This is useful when applying the same query to multiple data sources.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/jmespath/go-jmespath/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar jsondata = []byte(`{\"foo\": \"bar\"}`)\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nprecompiled, err := Compile(\"foo\")\nif err != nil{\n  // ... handle the error\n}\nresult, err := precompiled.Search(data)\nresult = \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Logging Info Messages with Key/Value Pairs in go-hclog in Go\nDESCRIPTION: Illustrates logging an info level message with context-specific key/value pairs, helping to structure logs for easier parsing and debugging.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ninput := \"5.5\"\n_, err := strconv.ParseInt(input, 10, 32)\nif err != nil {\n\tappLogger.Info(\"Invalid input for ParseInt\", \"input\", input, \"error\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Aggregations for OpenCensus Views\nDESCRIPTION: Examples of creating different types of aggregations for OpenCensus views. Shows how to create distribution, count, and sum aggregations which define how measurements are aggregated.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opencensus.io/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ndistAgg := view.Distribution(1<<32, 2<<32, 3<<32)\ncountAgg := view.Count()\nsumAgg := view.Sum()\n```\n\n----------------------------------------\n\nTITLE: Deprecating a flag shorthand\nDESCRIPTION: Shows how to deprecate just the shorthand of a flag while keeping the long form available.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// deprecate a flag shorthand by specifying its flag name and a usage message\nflags.MarkShorthandDeprecated(\"noshorthandflag\", \"please use --noshorthandflag only\")\n```\n\n----------------------------------------\n\nTITLE: Documenting HTTP Server Settings\nDESCRIPTION: Configuration structure for HTTP server settings including endpoint, TLS, CORS, and request body size limits.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/receiver/otlpreceiver/config.md#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n### confighttp-HTTPServerSettings\n\n| Name                  | Type                                                      | Default      | Docs                                                                                                                                    |\n|-----------------------|-----------------------------------------------------------|--------------|-----------------------------------------------------------------------------------------------------------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: List Cache Summary Command\nDESCRIPTION: Command to print information about bloom filter shards per day per compaction level. Used for cache storage estimation and tuning.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/tempo_cli.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntempo-cli list cache-summary <tenant-id>\n```\n\n----------------------------------------\n\nTITLE: Basic Expr Syntax Examples in JavaScript-like Notation\nDESCRIPTION: Examples of Expr syntax demonstrating user authorization checks, time-based permissions, and data validation. These snippets showcase the simplicity and expressiveness of the language.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/expr-lang/expr/README.md#2025-04-17_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Allow only admins and moderators to moderate comments.\nuser.Group in [\"admin\", \"moderator\"] || user.Id == comment.UserId\n```\n\nLANGUAGE: js\nCODE:\n```\n// Determine whether the request is in the permitted time window.\nrequest.Time - resource.Age < duration(\"24h\")\n```\n\nLANGUAGE: js\nCODE:\n```\n// Ensure all tweets are less than 240 characters.\nall(tweets, len(.Content) <= 240)\n```\n\n----------------------------------------\n\nTITLE: Defining the Claims Interface in Go\nDESCRIPTION: This snippet defines the Claims interface which includes methods to retrieve claim values like expiration time, issued time, and audience. The interface helps in the validation process of JWT claims.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Claims interface {\n\tGetExpirationTime() (*NumericDate, error)\n\tGetIssuedAt() (*NumericDate, error)\n\tGetNotBefore() (*NumericDate, error)\n\tGetIssuer() (string, error)\n\tGetSubject() (string, error)\n\tGetAudience() (ClaimStrings, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Participle Parser in Go\nDESCRIPTION: Go code snippet demonstrating how to construct a Participle parser from a grammar definition.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/participle/v2/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nparser, err := participle.Build[INI]()\n```\n\n----------------------------------------\n\nTITLE: Helm and Kustomize Chart Rendering Example\nDESCRIPTION: Demonstrates rendering a Grafana Helm chart with custom values and a Prometheus Kustomize configuration using the tanka-util library.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/grafana/jsonnet-libs/tanka-util/README.md#2025-04-17_snippet_1\n\nLANGUAGE: jsonnet\nCODE:\n```\nlocal tanka = import 'github.com/grafana/jsonnet-libs/tanka-util/main.libsonnet';\nlocal helm = tanka.helm.new(std.thisFile);\nlocal kustomize = tanka.kustomize.new(std.thisFile);\n\n{\n  grafana: helm.template('grafana', './charts/grafana', {\n    values: {\n      persistence: { enabled: true },\n      plugins: ['grafana-clock-panel'],\n    },\n    namespace: 'test',\n  }),\n\n  prometheus: kustomize.build('./base/prometheus'),\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Zstandard Dictionary to S2 Dictionary in Go\nDESCRIPTION: This code snippet shows how to convert a Zstandard dictionary to an S2 dictionary, including searching for a common starting sequence. It also demonstrates encoding and decoding using the created dictionary.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\n    // Decode the Zstandard dictionary.\n    insp, err := zstd.InspectDictionary(zdict)\n    if err != nil {\n        panic(err)\n    }\n\t\n    // We are only interested in the contents.\n    // Assume that files start with \"// Copyright (c) 2023\".\n    // Search for the longest match for that.\n    // This may save a few bytes.\n    dict := s2.MakeDict(insp.Content(), []byte(\"// Copyright (c) 2023\"))\n\n    // b := dict.Bytes() will provide a dictionary that can be saved\n    // and reloaded with s2.NewDict(b).\n\n    // We can now encode using this dictionary\n    encodedWithDict := dict.Encode(nil, payload)\n\n    // To decode content:\n    decoded, err := dict.Decode(nil, encodedWithDict)\n```\n\n----------------------------------------\n\nTITLE: Server Example using go-proxyproto\nDESCRIPTION: This Go code snippet demonstrates how to create a server using the go-proxyproto library. It creates a TCP listener, wraps it with a proxyproto.Listener to handle PROXY protocol headers, accepts a connection, and then prints the local and remote addresses.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pires/go-proxyproto/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n\"package main\n\nimport (\n\t\\\"log\\\"\n\t\\\"net\\\"\n\n\tproxyproto \\\"github.com/pires/go-proxyproto\\\"\n)\n\nfunc main() {\n\t// Create a listener\n\taddr := \\\"localhost:9876\\\"\n\tlist, err := net.Listen(\\\"tcp\\\", addr)\n\tif err != nil {\n\t\tlog.Fatalf(\\\"couldn't listen to %q: %q\\\\n\\\", addr, err.Error())\n\t}\n\n\t// Wrap listener in a proxyproto listener\n\tproxyListener := &proxyproto.Listener{Listener: list}\n\tdefer proxyListener.Close()\n\n\t// Wait for a connection and accept it\n\tconn, err := proxyListener.Accept()\n\tdefer conn.Close()\n\n\t// Print connection details\n\tif conn.LocalAddr() == nil {\n\t\tlog.Fatal(\\\"couldn't retrieve local address\\\")\n\t}\n\tlog.Printf(\\\"local address: %q\\\", conn.LocalAddr().String())\n\n\tif conn.RemoteAddr() == nil {\n\t\tlog.Fatal(\\\"couldn't retrieve remote address\\\")\n\t}\n\tlog.Printf(\\\"remote address: %q\\\", conn.RemoteAddr().String())\n}\n\"\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding to Access MinIO Console in Bash\nDESCRIPTION: This command establishes a port-forwarding session to access the MinIO web console running on port 9001. This allows users to interact with the MinIO service via their local machine's browser.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/tanka.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward --namespace tempo service/minio 9001:9001\n```\n\n----------------------------------------\n\nTITLE: Using Standard Library Logger with go-hclog in Go\nDESCRIPTION: Explains how to integrate go-hclog with the Go standard library logger interface, enabling the use of familiar logging functions such as Printf and Println.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-17_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nstdLogger := appLogger.StandardLogger(&hclog.StandardLoggerOptions{\n\tInferLevels: true,\n})\n// Printf() is provided by stdlib log.Logger interface, not hclog.Logger\nstdLogger.Printf(\"[DEBUG] %+v\", stdLogger)\n```\n\nLANGUAGE: Go\nCODE:\n```\n// log the standard logger from 'import \"log\"'\nlog.SetOutput(appLogger.StandardWriter(&hclog.StandardLoggerOptions{InferLevels: true}))\nlog.SetPrefix(\"\")\nlog.SetFlags(0)\n\nlog.Printf(\"[DEBUG] %d\", 42)\n```\n\n----------------------------------------\n\nTITLE: Using ISO8601 Parser in Go\nDESCRIPTION: Example of how to use the ISO8601 parser in a Go program. It demonstrates importing the library, defining a struct with an ISO8601 timestamp, and parsing an ISO8601 date string.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/relvacode/iso8601/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"github.com/relvacode/iso8601\"\n\n// iso8601.Time can be used as a drop-in replacement for time.Time with JSON responses\ntype ExternalAPIResponse struct {\n\tTimestamp *iso8601.Time\n}\n\n\nfunc main() {\n\t// iso8601.ParseString can also be called directly\n\tt, err := iso8601.ParseString(\"2020-01-02T16:20:00\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Globally Unique ID in Go\nDESCRIPTION: Demonstrates how to create a new globally unique ID using the xid package and convert it to a string representation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/rs/xid/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nguid := xid.New()\n\nprintln(guid.String())\n// Output: 9m4e2mr0ui3e8a215n4g\n```\n\n----------------------------------------\n\nTITLE: Querier Configuration for Connection to Query Frontend\nDESCRIPTION: This configuration snippet sets up the querier in Grafana Tempo to connect to the query-frontend service. It requires specifying the correct address of the query-frontend to ensure successful connection and data querying.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/querying/unable-to-see-trace.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nquerier:\n  frontend_worker:\n    frontend_address: query-frontend-discovery.default.svc.cluster.local:9095\n```\n\n----------------------------------------\n\nTITLE: Azure Blob Authentication with AAD\nDESCRIPTION: Demonstrates authentication using Azure Active Directory (AAD) credentials. The credential object is passed directly to the client constructor instead of creating a separate pipeline.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/migrationguide.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient, err := azblob.NewClient(\"<my storage account URL>\", cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Using Afero FileSystem in Go\nDESCRIPTION: This snippet shows how to use Afero's filesystem methods, replacing standard OS package calls.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nAppFs.Open(\"/tmp/foo\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-tenant Query Frontend in YAML\nDESCRIPTION: YAML configuration snippet for enabling multi-tenant queries in Tempo query frontend. This setting controls whether cross-tenant queries are allowed in the system.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/manage-advanced-systems/cross_tenant_query.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nquery_frontend:\n   multi_tenant_queries_enabled: true\n```\n\n----------------------------------------\n\nTITLE: Creating New Object in Jsonnet\nDESCRIPTION: The 'object.new' function creates a new object definition, utilizing optional descriptions and field specifications.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/jsonnet-libs/docsonnet/doc-util/README.md#2025-04-17_snippet_11\n\nLANGUAGE: jsonnet\nCODE:\n```\nobject.new(help, fields)\n```\n\n----------------------------------------\n\nTITLE: Filtering Based on Resource Attributes\nDESCRIPTION: Configuration example for dropping traces based on Kubernetes pod name pattern matching.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/processor/filterprocessor/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n  filter:\n    error_mode: ignore\n    traces:\n      span:\n        - IsMatch(resource.attributes[\"k8s.pod.name\"], \"my-pod-name.*\")\n```\n\n----------------------------------------\n\nTITLE: Listing Prometheus Dependencies for Grafana Tempo in Go\nDESCRIPTION: This snippet lists the Prometheus-related packages and their versions used as dependencies in the Grafana Tempo project. It includes modules for core Prometheus functionality, discovery, models, storage, and various utilities.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/modules.txt#2025-04-17_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\n## explicit; go 1.22.7\ngithub.com/prometheus/prometheus/config\ngithub.com/prometheus/prometheus/discovery\ngithub.com/prometheus/prometheus/discovery/targetgroup\ngithub.com/prometheus/prometheus/model/exemplar\ngithub.com/prometheus/prometheus/model/histogram\ngithub.com/prometheus/prometheus/model/labels\ngithub.com/prometheus/prometheus/model/metadata\ngithub.com/prometheus/prometheus/model/relabel\ngithub.com/prometheus/prometheus/model/rulefmt\ngithub.com/prometheus/prometheus/model/textparse\ngithub.com/prometheus/prometheus/model/timestamp\ngithub.com/prometheus/prometheus/model/value\ngithub.com/prometheus/prometheus/notifier\ngithub.com/prometheus/prometheus/prompb\ngithub.com/prometheus/prometheus/prompb/io/prometheus/client\ngithub.com/prometheus/prometheus/prompb/io/prometheus/write/v2\ngithub.com/prometheus/prometheus/promql\ngithub.com/prometheus/prometheus/promql/parser\ngithub.com/prometheus/prometheus/promql/parser/posrange\ngithub.com/prometheus/prometheus/rules\ngithub.com/prometheus/prometheus/scrape\ngithub.com/prometheus/prometheus/storage\ngithub.com/prometheus/prometheus/storage/remote\ngithub.com/prometheus/prometheus/storage/remote/azuread\ngithub.com/prometheus/prometheus/storage/remote/googleiam\ngithub.com/prometheus/prometheus/storage/remote/otlptranslator/prometheus\ngithub.com/prometheus/prometheus/storage/remote/otlptranslator/prometheusremotewrite\ngithub.com/prometheus/prometheus/template\ngithub.com/prometheus/prometheus/tsdb\ngithub.com/prometheus/prometheus/tsdb/agent\ngithub.com/prometheus/prometheus/tsdb/chunkenc\ngithub.com/prometheus/prometheus/tsdb/chunks\ngithub.com/prometheus/prometheus/tsdb/encoding\ngithub.com/prometheus/prometheus/tsdb/errors\ngithub.com/prometheus/prometheus/tsdb/fileutil\ngithub.com/prometheus/prometheus/tsdb/goversion\ngithub.com/prometheus/prometheus/tsdb/index\ngithub.com/prometheus/prometheus/tsdb/record\ngithub.com/prometheus/prometheus/tsdb/tombstones\ngithub.com/prometheus/prometheus/tsdb/tsdbutil\ngithub.com/prometheus/prometheus/tsdb/wlog\ngithub.com/prometheus/prometheus/util/almost\ngithub.com/prometheus/prometheus/util/annotations\ngithub.com/prometheus/prometheus/util/convertnhcb\ngithub.com/prometheus/prometheus/util/gate\ngithub.com/prometheus/prometheus/util/httputil\ngithub.com/prometheus/prometheus/util/jsonutil\ngithub.com/prometheus/prometheus/util/logging\ngithub.com/prometheus/prometheus/util/notifications\ngithub.com/prometheus/prometheus/util/osutil\ngithub.com/prometheus/prometheus/util/pool\ngithub.com/prometheus/prometheus/util/stats\ngithub.com/prometheus/prometheus/util/strutil\ngithub.com/prometheus/prometheus/util/testutil\ngithub.com/prometheus/prometheus/util/zeropool\ngithub.com/prometheus/prometheus/web/api/v1\n```\n\n----------------------------------------\n\nTITLE: Environment Variable API Change Example\nDESCRIPTION: Code example showing the new environment variable usage pattern for OTLP exporter configuration including endpoints, TLS certificates, headers, compression and timeout settings.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nOTEL_EXPORTER_OTLP_ENDPOINT\nOTEL_EXPORTER_OTLP_TRACES_ENDPOINT\nOTEL_EXPORTER_OTLP_METRICS_ENDPOINT\nOTEL_EXPORTER_OTLP_HEADERS\nOTEL_EXPORTER_OTLP_TRACES_HEADERS\nOTEL_EXPORTER_OTLP_METRICS_HEADERS\nOTEL_EXPORTER_OTLP_COMPRESSION\nOTEL_EXPORTER_OTLP_TRACES_COMPRESSION\nOTEL_EXPORTER_OTLP_METRICS_COMPRESSION\nOTEL_EXPORTER_OTLP_TIMEOUT\nOTEL_EXPORTER_OTLP_TRACES_TIMEOUT\nOTEL_EXPORTER_OTLP_METRICS_TIMEOUT\nOTEL_EXPORTER_OTLP_CERTIFICATE\nOTEL_EXPORTER_OTLP_TRACES_CERTIFICATE\nOTEL_EXPORTER_OTLP_METRICS_CERTIFICATE\n```\n\n----------------------------------------\n\nTITLE: Formatting File Size in Go using Humanize\nDESCRIPTION: Demonstrates how to use the humanize.Bytes() function to convert a large number of bytes into a human-readable file size string.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"That file is %s.\", humanize.Bytes(82854982)) // That file is 83 MB.\n```\n\n----------------------------------------\n\nTITLE: Sorting Versions in Go\nDESCRIPTION: This snippet illustrates how to sort a collection of version strings using go-version. It converts raw version strings to version objects and sorts them properly.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-version/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nversionsRaw := []string{\"1.1\", \"0.7.1\", \"1.4-beta\", \"1.4\", \"2\"}\nversions := make([]*version.Version, len(versionsRaw))\nfor i, raw := range versionsRaw {\n    v, _ := version.NewVersion(raw)\n    versions[i] = v\n}\n\n// After this, the versions are properly sorted\nsort.Sort(version.Collection(versions))\n```\n\n----------------------------------------\n\nTITLE: Adding Synchronous Gauge Instrument in Go OpenTelemetry Metric API\nDESCRIPTION: Adds support for creating int64 or float64 synchronous gauge instruments from a Meter in the metric API.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\n// Added to go.opentelemetry.io/otel/metric\nfunc (m Meter) Int64SyncGauge(name string, options ...Option) (Int64SyncGauge, error) {\n  // Implementation not shown\n}\n\nfunc (m Meter) Float64SyncGauge(name string, options ...Option) (Float64SyncGauge, error) {\n  // Implementation not shown\n}\n```\n\n----------------------------------------\n\nTITLE: Querying TraceQL Instant Metrics\nDESCRIPTION: Example HTTP GET request for instant metrics query to count error spans grouped by service name.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/_index.md#2025-04-17_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nGET /api/metrics/query?q={status=error}|count_over_time()by(resource.service.name)\n```\n\n----------------------------------------\n\nTITLE: Defining Attribute Structure in Parquet for Tempo (Prototext)\nDESCRIPTION: This snippet defines the structure for storing attributes in Parquet format for Tempo. It uses optional fields for different data types to handle OTLP's variable data types, allowing for efficient storage and search capabilities.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2022-04 Parquet.md#2025-04-17_snippet_1\n\nLANGUAGE: prototext\nCODE:\n```\nrepeated group Attrs {\n    required binary  Key (STRING);\n\n    # Only one of these will be set\n    optional binary  Value (STRING);\n    optional boolean ValueBool;\n    optional double  ValueDouble;\n    optional int64   ValueInt (INT(64,true));\n    optional binary  ValueArray (STRING);\n    optional binary  ValueKVList (STRING);\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Strings with Regular Expressions in Go\nDESCRIPTION: The IsMatch function checks if a target string matches a given regular expression pattern, returning true for a successful match and false otherwise. It handles various input types by converting them to strings.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_39\n\nLANGUAGE: Go\nCODE:\n```\nIsMatch(span.attributes[\"http.path\"], \"foo\")\n```\n\nLANGUAGE: Go\nCODE:\n```\nIsMatch(\"string\", \".*ring\")\n```\n\n----------------------------------------\n\nTITLE: Running Tempo Nomad Job\nDESCRIPTION: Command to run the Tempo Nomad job with default or specified version\nSOURCE: https://github.com/grafana/tempo/blob/main/example/nomad/tempo-distributed/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnomad job run tempo.hcl\n```\n\nLANGUAGE: shell\nCODE:\n```\nnomad job run -var=\"version=2.7.1\" tempo.hcl\n```\n\n----------------------------------------\n\nTITLE: Creating Decoder Without Stream Identifier\nDESCRIPTION: Shows how to create an S2 decoder that ignores the stream identifier when reading from an offset.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n\tdec := s2.NewReader(r, s2.ReaderIgnoreStreamIdentifier())\n```\n\n----------------------------------------\n\nTITLE: Finding Elements with Specific Attribute Value in Go\nDESCRIPTION: Example showing how to find elements with a specific attribute value using XPath predicates.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/antchfx/xmlquery/README.md#2025-04-17_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nlist := xmlquery.Find(doc, \"//book[@id='bk104']\")\n```\n\n----------------------------------------\n\nTITLE: Converting Duration to Hours in Go\nDESCRIPTION: The Hours function converts a time.Duration to a floating-point number of hours, returning the result as a float64.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_31\n\nLANGUAGE: Go\nCODE:\n```\nHours(Duration(\"1h\"))\n```\n\n----------------------------------------\n\nTITLE: Converting Parquet Schemas\nDESCRIPTION: This code snippet shows how to convert between different Parquet schemas using the `parquet.Convert` function. It defines two row types with different schemas, creates a conversion rule, and applies it to a row group.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/parquet-go/parquet-go/README.md#2025-04-17_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\n\"type RowTypeV1 struct { ID int64; FirstName string }\ntype RowTypeV2 struct { ID int64; FirstName, LastName string }\n\nsource := parquet.SchemaOf(RowTypeV1{})\ntarget := parquet.SchemaOf(RowTypeV2{})\n\nconversion, err := parquet.Convert(target, source)\nif err != nil {\n    ...\n}\n\ntargetRowGroup := parquet.ConvertRowGroup(sourceRowGroup, conversion)\n...\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Receivers in YAML\nDESCRIPTION: Example configuration showing how to define multiple receivers with different settings. Demonstrates both default and named receiver configurations with endpoint specifications.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/receiver/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  # Receiver 1.\n  # <receiver type>:\n  examplereceiver:\n    # <setting one>: <value one>\n    endpoint: 1.2.3.4:8080\n    # ...\n  # Receiver 2.\n  # <receiver type>/<name>:\n  examplereceiver/settings:\n    # <setting two>: <value two>\n    endpoint: 0.0.0.0:9211\n```\n\n----------------------------------------\n\nTITLE: Defining AWS IAM Role Trust Relationship for Tempo\nDESCRIPTION: This JSON defines the trust relationship for an AWS IAM role, allowing Tempo's Kubernetes ServiceAccount to assume the role using AWS Security Token Service.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/object-storage.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Federated\": \"arn:aws:iam::${AWS_ACCOUNT_ID}:oidc-provider/${OIDC_PROVIDER}\"\n      },\n      \"Action\": \"sts:AssumeRoleWithWebIdentity\",\n      \"Condition\": {\n        \"StringEquals\": {\n          \"${OIDC_PROVIDER}:sub\": [\n            \"system:serviceaccount:${TEMPOSTACK_NS}:tempo-${TEMPOSTACK_NAME}\",\n            \"system:serviceaccount:${TEMPOSTACK_NS}:tempo-${TEMPOSTACK_NAME}-query-frontend\"\n         ]\n       }\n     }\n   }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using ReadOnlyFs in Afero\nDESCRIPTION: Demonstrates how to create a read-only filesystem wrapper around a standard OS filesystem. Any write operations will return a permission error (EPERM).\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfs := afero.NewReadOnlyFs(afero.NewOsFs())\n_, err := fs.Create(\"/file.txt\")\n// err = syscall.EPERM\n```\n\n----------------------------------------\n\nTITLE: Setting NoOptDefVal for flags\nDESCRIPTION: Shows how to set a NoOptDefVal for a flag, which changes the flag's behavior when it's specified on the command line without an explicit value.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvar ip = flag.IntP(\"flagname\", \"f\", 1234, \"help message\")\nflag.Lookup(\"flagname\").NoOptDefVal = \"4321\"\n```\n\n----------------------------------------\n\nTITLE: Building Docker Images for Grafana Tempo using Makefile\nDESCRIPTION: This snippet illustrates the command to build the Docker image for Grafana Tempo. Running this command will produce the `grafana/tempo:latest` image, which can be utilized in various Docker Compose examples. This step is optional but useful for local development and testing.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmake docker-images\n```\n\n----------------------------------------\n\nTITLE: Go Static Membership Implementation\nDESCRIPTION: Implementation of KIP-345 for static membership support, added in version 1.34.0\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/IBM/sarama/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nKIP-345: support static membership\n```\n\n----------------------------------------\n\nTITLE: Configuring Overrides in Tempo (New Format)\nDESCRIPTION: Example of the new overrides configuration format introduced in Tempo v2.3.0, organized with a 'defaults' block and hierarchical organization of settings with dedicated sections for ingestion, read operations, forwarders, and metrics generator.\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\ndefaults:\n  ingestion:\n    rate_strategy: local\n    rate_limit_bytes: 12345\n    burst_size_bytes: 67890\n  read:\n    max_search_duration: 17s\n  forwarders: ['foo']\n  metrics_generator:\n    processors: [service-graphs, span-metrics]\n```\n\n----------------------------------------\n\nTITLE: Implementing the discovery.Config Interface in Go\nDESCRIPTION: This snippet defines the Config interface that must be implemented for a new service discovery mechanism in Prometheus. It includes the Name method to identify the discovery mechanism and the NewDiscoverer method that creates a Discoverer with the provided options.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/prometheus/prometheus/discovery/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype Config interface {\n\t// Name returns the name of the discovery mechanism.\n\tName() string\n\n\t// NewDiscoverer returns a Discoverer for the Config\n\t// with the given DiscovererOptions.\n\tNewDiscoverer(DiscovererOptions) (Discoverer, error)\n}\n\ntype DiscovererOptions struct {\n\tLogger *slog.Logger\n\n\t// A registerer for the Discoverer's metrics.\n\tRegisterer prometheus.Registerer\n\t\n\tHTTPClientOptions []config.HTTPClientOption\n}\n```\n\n----------------------------------------\n\nTITLE: Tailing Docker Container Logs\nDESCRIPTION: Continuously monitors the logs of a specified Docker container. Useful for debugging and monitoring purposes.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/multi-tenant/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker logs multi-tenant_tempo_1 -f\n\n```\n\n----------------------------------------\n\nTITLE: Returning Errors Only When Present\nDESCRIPTION: Shows how to use ErrorOrNil to return an error only if errors have been accumulated, preventing unnecessary nil error handling\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar result *multierror.Error\n\n// ... accumulate errors here\n\n// Return the `error` only if errors were added to the multierror, otherwise\n// return nil since there are no errors.\nreturn result.ErrorOrNil()\n```\n\n----------------------------------------\n\nTITLE: Table Rendering in Different Formats\nDESCRIPTION: Demonstrates rendering tables in multiple formats including CSV, HTML, and Markdown using specialized rendering methods.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-17_snippet_10\n\nLANGUAGE: golang\nCODE:\n```\nt.RenderCSV()\n```\n\nLANGUAGE: golang\nCODE:\n```\nt.Style().HTML = table.HTMLOptions{\n    CSSClass:    \"game-of-thrones\",\n    EmptyColumn: \"&nbsp;\",\n    EscapeText:  true,\n    Newline:     \"<br/>\",\n}\nt.RenderHTML()\n```\n\nLANGUAGE: golang\nCODE:\n```\nt.RenderMarkdown()\n```\n\n----------------------------------------\n\nTITLE: Configuring Usage Tracker in Tempo Distributor\nDESCRIPTION: YAML configuration block for enabling and configuring the cost attribution usage tracker in the distributor. Includes settings for enabling the feature, setting maximum cardinality, and configuring stale duration for series cleanup.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/usage-tracker.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n usage:\n        cost_attribution:\n            # Enables the \"cost-attribution\" usage tracker. Per-tenant attributes are configured in overrides.\n            [enabled: <boolean> | default = false]\n            # Maximum number of series per tenant.\n            [max_cardinality: <int> | default = 10000]\n            # Interval after which a series is considered stale and will be deleted from the registry.\n            # Once a metrics series is deleted, it won't be emitted anymore, keeping active series low.\n            [stale_duration: <duration> | default = 15m0s]\n```\n\n----------------------------------------\n\nTITLE: Building with `retrynotrace` flag in Go\nDESCRIPTION: This command demonstrates how to build a Go application with the `retrynotrace` flag to disable tracing for retry attempts, potentially reducing binary size. The `retrynotrace` flag avoids importing `golang.org/x/net/trace`, allowing for more aggressive deadcode elimination.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/retry/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"go build -tags retrynotrace -o your_application\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Conntrack Listener for HTTP Server in Go\nDESCRIPTION: This snippet demonstrates how to create a connection-tracked listener for an HTTP server. It wraps a standard TCP listener with connection tracking, tracing, and TCP keep-alive functionality.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/mwitkow/go-conntrack/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nlistener, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\nlistener = conntrack.NewListener(listener, \n    conntrack.TrackWithName(\"http\"), \n    conntrack.TrackWithTracing(),\n    conntrack.TrackWithTcpKeepAlive(5 * time.Minutes))\nhttpServer.Serve(listener)\n```\n\n----------------------------------------\n\nTITLE: Using Afero BasePathFs in Go\nDESCRIPTION: This snippet shows how to use Afero's BasePathFs, which restricts all operations to a given path within a filesystem.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nbp := afero.NewBasePathFs(afero.NewOsFs(), \"/base/path\")\n```\n\n----------------------------------------\n\nTITLE: Defining Batch Operation Interface in Go\nDESCRIPTION: Specifies the Batch method for executing multiple operations in a single transaction. Takes variable number of Operation arguments for bulk processing.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/extension/xextension/storage/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nBatch(context.Context, ...Operation) error\n```\n\n----------------------------------------\n\nTITLE: Testing with Goleak Verification in Go\nDESCRIPTION: Example showing how to verify no goroutine leaks exist at the end of a test using goleak.VerifyNone()\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.uber.org/goleak/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc TestA(t *testing.T) {\n\tdefer goleak.VerifyNone(t)\n\n\t// test logic here.\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Tempo Data Blocks\nDESCRIPTION: Explores the write-ahead log (WAL) and data blocks being created by the Tempo service during tracing\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/alloy/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nls tempo-data/\n```\n\n----------------------------------------\n\nTITLE: Custom Ring Client Consistent Hashing Configuration\nDESCRIPTION: Configuration for customizing consistent hashing algorithm in Redis ring client, allowing backward compatibility with older hashing schemes\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-redis/redis/v8/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/golang/groupcache/consistenthash\"\n\nring := redis.NewRing(&redis.RingOptions{\n    NewConsistentHash: func() {\n        return consistenthash.New(100, crc32.ChecksumIEEE)\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Kafka Authentication Configuration\nDESCRIPTION: Example showing how to configure Kafka receiver with SASL authentication and TLS security.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/receiver/kafkareceiver/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  kafka:\n    auth:\n      sasl:\n        username: \"user\"\n        password: \"secret\"\n        mechanism: \"SCRAM-SHA-512\"\n      tls:\n        insecure: false\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Stack\nDESCRIPTION: This snippet demonstrates how to start the Docker Compose stack in detached mode. It is essential for initializing the distributed Tempo environment and starts all necessary containers for operation.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/distributed/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: OTLP Configuration Structure\nDESCRIPTION: Core configuration structure for OTLP receiver defining supported protocols (gRPC and HTTP)\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/receiver/otlpreceiver/config.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name      | Type                                              | Default    | Docs                                                                                                  |\n|-----------|---------------------------------------------------|------------|-------------------------------------------------------------------------------------------------------|\n| protocols | [otlpreceiver-Protocols](#otlpreceiver-protocols) | <no value> | Protocols is the configuration for the supported protocols, currently gRPC and HTTP (Proto and JSON). |\n```\n\n----------------------------------------\n\nTITLE: API Method Signature Updates\nDESCRIPTION: Changes to method signatures for Span interface methods AddEvent and RecordError to remove unused context parameter and add options.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_38\n\nLANGUAGE: go\nCODE:\n```\n// Old\nAddEvent(ctx context.Context, ...)\n// New\nAddEvent(name string, opts ...EventOption)\n\n// Old \nRecordError(ctx context.Context, ...)\n// New\nRecordError(err error, opts ...EventOption)\n```\n\n----------------------------------------\n\nTITLE: Span Event Enum Values in OpenTelemetry\nDESCRIPTION: Comprehensive list of enum values for span kinds and status codes used in OpenTelemetry trace data processing\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/contexts/ottlspanevent/README.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Enum Symbol           | Value |\n|-----------------------|-------|\n| SPAN_KIND_UNSPECIFIED | 0     |\n| SPAN_KIND_INTERNAL    | 1     |\n| SPAN_KIND_SERVER      | 2     |\n| SPAN_KIND_CLIENT     | 3     |\n| SPAN_KIND_PRODUCER   | 4     |\n| SPAN_KIND_CONSUMER   | 5     |\n| STATUS_CODE_UNSET    | 0     |\n| STATUS_CODE_OK       | 1     |\n| STATUS_CODE_ERROR    | 2     |\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Codecs with Viper in Go\nDESCRIPTION: Example of creating a codec registry and registering a custom format codec with Viper. This demonstrates how to extend Viper's encoding capabilities with user-defined formats.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/UPDATES.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ncodecRegistry := viper.NewCodecRegistry()\n\ncodecRegistry.RegisterCodec(\"myformat\", &MyCodec{})\n\nv := viper.NewWithOptions(\n    viper.WithCodecRegistry(codecRegistry),\n)\n```\n\n----------------------------------------\n\nTITLE: Example of Discarded Span Log Message (Text)\nDESCRIPTION: These log entries exemplify the output when discarded span logging is enabled in the Tempo distributor. They provide the timestamp, log level, and information about the discarded span, including its ID and the trace ID it belongs to. This information is essential for diagnosing the reasons behind span rejection.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/send-traces/max-trace-limit-reached.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"level=info ts=2024-08-19T16:06:25.880684385Z caller=distributor.go:767 msg=discarded spanid=c2ebe710d2e2ce7a traceid=bd63605778e3dbe935b05e6afd291006\\nlevel=info ts=2024-08-19T16:06:25.881169385Z caller=distributor.go:767 msg=discarded spanid=5352b0cb176679c8 traceid=ba41cae5089c9284e18bca08fbf10ca2\"\n```\n\n----------------------------------------\n\nTITLE: Configure Custom Acronyms in Strcase Package for Go\nDESCRIPTION: This Go code snippet details how to configure custom acronyms with the strcase package. Setting custom acronyms allows for specific abbreviation handling during camel case transformations. This example shows modifications for 'API' and 'PostgreSQL'.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/iancoleman/strcase/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n    \"github.com/iancoleman/strcase\"\n)\n\nfunc init() {\n    // results in \"Api\" using ToCamel(\"API\")\n    // results in \"api\" using ToLowerCamel(\"API\")\n    strcase.ConfigureAcronym(\"API\", \"api\")\n    \n    // results in \"PostgreSQL\" using ToCamel(\"PostgreSQL\")\n    // results in \"postgreSQL\" using ToLowerCamel(\"PostgreSQL\")\n    strcase.ConfigureAcronym(\"PostgreSQL\", \"PostgreSQL\")\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating Metrics in Go\nDESCRIPTION: Demonstrates how to create different types of metrics (Counter, Gauge, Histogram, Meter, Timer) and update their values. Also shows how to register metrics and use functional gauges.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/rcrowley/go-metrics/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nc := metrics.NewCounter()\nmetrics.Register(\"foo\", c)\nc.Inc(47)\n\ng := metrics.NewGauge()\nmetrics.Register(\"bar\", g)\ng.Update(47)\n\nr := NewRegistry()\ng := metrics.NewRegisteredFunctionalGauge(\"cache-evictions\", r, func() int64 { return cache.getEvictionsCount() })\n\ns := metrics.NewExpDecaySample(1028, 0.015) // or metrics.NewUniformSample(1028)\nh := metrics.NewHistogram(s)\nmetrics.Register(\"baz\", h)\nh.Update(47)\n\nm := metrics.NewMeter()\nmetrics.Register(\"quux\", m)\nm.Mark(47)\n\nt := metrics.NewTimer()\nmetrics.Register(\"bang\", t)\nt.Time(func() {})\nt.Update(47)\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Trace API in Markdown\nDESCRIPTION: This code snippet shows how to embed a PkgGoDev badge in a Markdown file. The badge links to the documentation for the OpenTelemetry Trace API package in Go.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/trace/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/trace)](https://pkg.go.dev/go.opentelemetry.io/otel/trace)\n```\n\n----------------------------------------\n\nTITLE: Querying TraceQL Metrics Range with Parameters\nDESCRIPTION: Example HTTP GET request to query TraceQL metrics over a time range with service filtering and exemplars enabled.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/_index.md#2025-04-17_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nGET /api/metrics/query_range?q={resource.service.name=\"myservice\"} | min_over_time() with(exemplars=true) &since=3h&step=1m&exemplars=100\n```\n\n----------------------------------------\n\nTITLE: Setting Pipeline Options in Go\nDESCRIPTION: Examples demonstrating configuration changes in arm/runtime pipeline construction using the updated PipelineOptions struct pattern instead of direct policy parameters.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\narm/runtime.NewPipeline(runtime.PipelineOptions{\n  Policies: []policy.Policy{...}\n})\n```\n\n----------------------------------------\n\nTITLE: Extracting a Sub-tree from Viper Configuration (Go)\nDESCRIPTION: This snippet shows how to extract a subset of the Viper configuration and pass it to a module. It demonstrates creating a new Viper instance for a specific configuration sub-tree, which is useful for modular and reusable code.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_32\n\nLANGUAGE: go\nCODE:\n```\ncache1Config := viper.Sub(\"cache.cache1\")\nif cache1Config == nil { // Sub returns nil if the key cannot be found\n\tpanic(\"cache configuration not found\")\n}\n\ncache1 := NewCache(cache1Config)\n```\n\n----------------------------------------\n\nTITLE: Scaling Load Generator with Docker Compose\nDESCRIPTION: This command scales the synthetic-load-generator service within the Docker Compose setup. It increases the number of instances of the load generator, thereby increasing the overall load on the Tempo system. The `--scale` flag is used to specify the desired number of instances.\nSOURCE: https://github.com/grafana/tempo/blob/main/integration/microservices/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"docker-compose up -d --scale synthetic-load-generator=4\"\n```\n\n----------------------------------------\n\nTITLE: Using Standard JSON Unmarshal in Go\nDESCRIPTION: Example of how to use the standard encoding/json package in Go for unmarshaling JSON into a Go data structure.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport \"encoding/json\"\njson.Unmarshal(input, &data)\n```\n\n----------------------------------------\n\nTITLE: Cloning Tempo Repository for Dashboard Installation\nDESCRIPTION: This bash command clones the Tempo repository from GitHub, which is necessary for accessing the mixin dashboards for installation in Grafana.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/monitor/set-up-monitoring.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git+ssh://github.com/grafana/tempo\n```\n\n----------------------------------------\n\nTITLE: Using JSON-Iterator for Unmarshaling JSON\nDESCRIPTION: Example of how to use json-iterator for unmarshaling JSON data into Go structures while maintaining compatibility with the standard library.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport jsoniter \"github.com/json-iterator/go\"\n\nvar json = jsoniter.ConfigCompatibleWithStandardLibrary\njson.Unmarshal(input, &data)\n```\n\n----------------------------------------\n\nTITLE: Azure Storage Account Management Policy\nDESCRIPTION: JSON configuration for Azure Storage Account management policy to clean up files after a specified retention period.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/hosted-storage/azure.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"/subscriptions/00000000-0000-0000000000000000000000/resourceGroups/resourceGroupName/providers/Microsoft.Storage/storageAccounts/accountName/managementPolicies/default\",\n  \"lastModifiedTime\": \"2021-11-30T19:19:54.855455+00:00\",\n  \"name\": \"DefaultManagementPolicy\",\n  \"policy\": {\n    \"rules\": [\n      {\n        \"definition\": {\n          \"actions\": {\n            \"baseBlob\": {\n              \"delete\": {\n                \"daysAfterLastAccessTimeGreaterThan\": null,\n                \"daysAfterModificationGreaterThan\": 60.0\n              },\n              \"enableAutoTierToHotFromCool\": null,\n              \"tierToArchive\": null,\n              \"tierToCool\": null\n            },\n            \"snapshot\": null,\n            \"version\": null\n          },\n          \"filters\": {\n            \"blobIndexMatch\": null,\n            \"blobTypes\": [\n              \"blockBlob\"\n            ],\n            \"prefixMatch\": [\n              \"tempo-data\"\n            ]\n          }\n        },\n        \"enabled\": true,\n        \"name\": \"TempoBlobRetention\",\n        \"type\": \"Lifecycle\"\n      },\n      {\n        \"definition\": {\n          \"actions\": {\n            \"baseBlob\": null,\n            \"snapshot\": null,\n            \"version\": {\n              \"delete\": {\n                \"daysAfterCreationGreaterThan\": 7.0\n              },\n              \"tierToArchive\": null,\n              \"tierToCool\": null\n            }\n          },\n          \"filters\": {\n            \"blobIndexMatch\": null,\n            \"blobTypes\": [\n              \"blockBlob\"\n            ],\n            \"prefixMatch\": []\n          }\n        },\n        \"enabled\": true,\n        \"name\": \"VersionRetention\",\n        \"type\": \"Lifecycle\"\n      }\n    ]\n  },\n  \"resourceGroup\": \"resource-group-name\",\n  \"type\": \"Microsoft.Storage/storageAccounts/managementPolicies\"\n}\n```\n\n----------------------------------------\n\nTITLE: Buffer Decompression with zstd in Go\nDESCRIPTION: This code snippet shows how to decompress a buffer of data using the klauspost/compress/zstd library in Go. It creates a reusable zstd reader with decoder concurrency set to 0 (synchronous decompression), and then uses the DecodeAll method to decompress the input buffer and allocate a new buffer for the decompressed output.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-17_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\n// Create a reader that caches decompressors.\n// For this operation type we supply a nil Reader.\nvar decoder, _ = zstd.NewReader(nil, zstd.WithDecoderConcurrency(0))\n\n// Decompress a buffer. We don't supply a destination buffer,\n// so it will be allocated by the decoder.\nfunc Decompress(src []byte) ([]byte, error) {\n    return decoder.DecodeAll(src, nil)\n} \n```\n\n----------------------------------------\n\nTITLE: API Database Interaction\nDESCRIPTION: Query to find traces where specific API interacts with specific database\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_37\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ span.http.url = \"/path/of/api\" } >> { span.db.name = \"db-shard-001\" }\n```\n\n----------------------------------------\n\nTITLE: Search Blocks Command\nDESCRIPTION: Command to search blocks within a specific time range for key/value pairs.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/tempo_cli.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ntempo-cli search blocks <name> <value> <start> <end> <tenant-id>\n```\n\n----------------------------------------\n\nTITLE: Delete Method Status Check\nDESCRIPTION: Query to find traces with DELETE method and non-OK status\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_35\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ span.http.method = \"DELETE\" && status != ok }\n```\n\n----------------------------------------\n\nTITLE: Installing conc Package in Go\nDESCRIPTION: Command to install the conc package using Go's package manager.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/sourcegraph/conc/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/sourcegraph/conc\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Spans Per Span Set in YAML\nDESCRIPTION: YAML configuration to set the maximum number of spans per span set in Tempo's query frontend. Setting this to 0 restores the old behavior of unlimited spans.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/upgrade.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nquery_frontend:\n  search:\n      max_spans_per_span_set: 0\n```\n\n----------------------------------------\n\nTITLE: JSON Marshal Example\nDESCRIPTION: This example demonstrates how to marshal a struct to JSON using `json.Marshal`. It defines a struct with an int and a string field and then marshals an instance of this struct.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\njson.Marshal(struct{\n    X int `json:\"x\"`\n    Y string `json:\"y\"`\n}{X: 1, Y: \"hello\"})\n```\n\n----------------------------------------\n\nTITLE: Defining Discoverer Interface for Service Discovery in Go\nDESCRIPTION: The Discoverer interface defines the contract for service discovery mechanisms in Prometheus. Implementations must provide the Run method, which sends target groups to a specified channel. This allows Prometheus to receive updates about discovered targets dynamically.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/prometheus/prometheus/discovery/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Discoverer interface {\n\tRun(ctx context.Context, up chan<- []*targetgroup.Group)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Storage with Snake Case in Tempo 2.0\nDESCRIPTION: Example configuration for Azure Storage using snake case naming convention instead of dashes. Shows the structure for configuring storage account name, key, and container name.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/upgrade.md#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# config.yaml\nstorage:\n  trace:\n    azure:\n      storage_account_name:\n      storage_account_key:\n      container_name:\n```\n\n----------------------------------------\n\nTITLE: Creating and Inserting into an Immutable Radix Tree in Go\nDESCRIPTION: This code snippet demonstrates how to create an immutable radix tree using the `iradix.New()` function, and how to insert data into the tree using the `Insert()` method. The `Insert` method returns a new tree, a boolean indicating if the insertion was successful and an error.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-immutable-radix/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Create a tree\nr := iradix.New()\nr, _, _ = r.Insert([]byte(\"foo\"), 1)\nr, _, _ = r.Insert([]byte(\"bar\"), 2)\nr, _, _ = r.Insert([]byte(\"foobar\"), 2)\n```\n\n----------------------------------------\n\nTITLE: Accessing Named Parameters with http.Handler in HttpRouter\nDESCRIPTION: Example showing how to access named route parameters when using the standard http.Handler interface with HttpRouter. Demonstrates parameter retrieval from request context.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/julienschmidt/httprouter/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc Hello(w http.ResponseWriter, r *http.Request) {\n    params := httprouter.ParamsFromContext(r.Context())\n\n    fmt.Fprintf(w, \"hello, %s!\\n\", params.ByName(\"name\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring local-blocks processor for all tenants in main configuration\nDESCRIPTION: This YAML configuration enables the local-blocks processor for all tenants by default in the main configuration section.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/traceql-metrics.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  defaults:\n    metrics_generator:\n      processors: [local-blocks]\n```\n\n----------------------------------------\n\nTITLE: View Index Command\nDESCRIPTION: Command to view the complete index contents of a specified block using tenant ID and block ID.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/tempo_cli.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ntempo-cli view index <tenant-id> <block-id>\n```\n\n----------------------------------------\n\nTITLE: Random Seeking with Custom Index\nDESCRIPTION: Implements random seeking using a custom index. Requires the input reader to support io.Seeker interface.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n\tdec := s2.NewReader(r)\n\trs, err := dec.ReadSeeker(true, index)\n\trs.Seek(wantOffset, io.SeekStart)\n```\n\n----------------------------------------\n\nTITLE: Using Sampler Interface in Go\nDESCRIPTION: Example of using the Sampler interface provided by the OpenTelemetry Go SDK for trace sampling.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_39\n\nLANGUAGE: Go\nCODE:\n```\nimport \"go.opentelemetry.io/otel/sdk/trace/sampling\"\n\n// Use the Sampler interface\nsampler := sampling.AlwaysOn()\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Compose Services\nDESCRIPTION: Cleanly shuts down all containers and removes associated volumes, resetting the tracing environment\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/alloy/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndocker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Updated Azure Storage Configuration with Snake Case in Tempo 2.0\nDESCRIPTION: Example of the Azure Storage configuration using snake case with underscores instead of dashes. This change was introduced in PR 1879 and is required for users using Azure Storage.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-0.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config.yaml\nstorage:\n  trace:\n    azure:\n      storage_account_name:\n      storage_account_key:\n      container_name:\n```\n\n----------------------------------------\n\nTITLE: PATCH Request for Modifying Overrides (Shell)\nDESCRIPTION: Example cURL command to patch existing overrides for a specific tenant using the PATCH /api/overrides endpoint. It demonstrates how to include the X-Scope-OrgID header, If-Match header, and the payload for patching.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/manage-advanced-systems/user-configurable-overrides.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT -v -H \"X-Scope-OrgID: 3\" -H \"If-Match: 1697726795401423\" http://localhost:3100/api/overrides --data \"{\\\"forwarders\\\":null}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Summary in Tempo YAML\nDESCRIPTION: YAML configuration to enable the metrics summary API by activating the local blocks processor in the metrics generator.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/metrics-summary.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  defaults:\n    metrics_generator:\n      processors: [..., 'local-blocks']\n```\n\n----------------------------------------\n\nTITLE: Implementing Map Arguments in Kong CLI\nDESCRIPTION: Demonstrates how to use map types for key-value pair arguments. Maps use the sep tag (defaulting to =) to split key and value, with multiple pairs separated by the mapsep tag.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/kong/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvar CLI struct {\n  Config struct {\n    Set struct {\n      Config map[string]float64 `arg:\"\" type:\"file:\"`\n    } `cmd`\n  } `cmd`\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Compression for OTLP/HTTP Exporter in YAML\nDESCRIPTION: Shows how to disable the default gzip compression for the OTLP/HTTP exporter.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/exporter/otlphttpexporter/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  otlphttp:\n    ...\n    compression: none\n```\n\n----------------------------------------\n\nTITLE: Querier Search Configuration YAML\nDESCRIPTION: Updated configuration structure for querier search settings including timeout, external endpoints and self-preference parameters.\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nquerier:\n  search:\n    query_timeout: 30s\n    prefer_self: 2\n    external_endpoints: []\n```\n\n----------------------------------------\n\nTITLE: Converting Objects to Strings with ToString Function in Go\nDESCRIPTION: Example demonstrating how to use the ToString function to convert a struct to a string representation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tFirstName string\n\tLastName string\n}\n\nstr := govalidator.ToString(&User{\"John\", \"Juan\"})\nprintln(str)\n```\n\n----------------------------------------\n\nTITLE: Ordered Stream Processing\nDESCRIPTION: Demonstrates processing a stream while maintaining order using worker pools. Compares complex channel coordination in standard library with the stream package from conc.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/sourcegraph/conc/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc mapStream(\n    in chan int,\n    out chan int,\n    f func(int) int,\n) {\n    tasks := make(chan func())\n    taskResults := make(chan chan int)\n\n    var workerWg sync.WaitGroup\n    for i := 0; i < 10; i++ {\n        workerWg.Add(1)\n        go func() {\n            defer workerWg.Done()\n            for task := range tasks {\n                task()\n            }\n        }()\n    }\n\n    var readerWg sync.WaitGroup\n    readerWg.Add(1)\n    go func() {\n        defer readerWg.Done()\n        for result := range taskResults {\n            item := <-result\n            out <- item\n        }\n    }()\n\n    for elem := range in {\n        resultCh := make(chan int, 1)\n        taskResults <- resultCh\n        tasks <- func() {\n            resultCh <- f(elem)\n        }\n    }\n\n    close(tasks)\n    workerWg.Wait()\n    close(taskResults)\n    readerWg.Wait()\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc mapStream(\n    in chan int,\n    out chan int,\n    f func(int) int,\n) {\n    s := stream.New().WithMaxGoroutines(10)\n    for elem := range in {\n        elem := elem\n        s.Go(func() stream.Callback {\n            res := f(elem)\n            return func() { out <- res }\n        })\n    }\n    s.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration Defaults with Kong\nDESCRIPTION: This Go code snippet illustrates how to configure the Kong parser to load default values from configuration files using the `kong.Configuration` option. It specifies how to pass different paths for configuration files and the loader to use (e.g., JSON). This method supports YAML, HCL, TOML, and JSON.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/kong/README.md#2025-04-17_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\nkong.Parse(&cli, kong.Configuration(kong.JSON, \"/etc/myapp.json\", \"~/.myapp.json\"))\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTracing to gRPC Server in Go\nDESCRIPTION: This Go code snippet integrates OpenTracing with a gRPC server, using a tracer and assigning unary and stream interceptors to the server initialization process. It requires an OpenTracing Tracer instance, and all subsequent RPC activities on the server will be traced. The interceptors are specified as options in the grpc.NewServer method.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/opentracing-contrib/go-grpc/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// You must have some sort of OpenTracing Tracer instance on hand.\nvar tracer opentracing.Tracer = ...\n...\n\n// Initialize the gRPC server.\ns := grpc.NewServer(\n    ... // other options\n    grpc.UnaryInterceptor(\n        otgrpc.OpenTracingServerInterceptor(tracer)),\n    grpc.StreamInterceptor(\n        otgrpc.OpenTracingStreamServerInterceptor(tracer)))\n\n// All future RPC activity involving `s` will be automatically traced.\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry SDK Metric Data in Markdown\nDESCRIPTION: This snippet shows how to embed a PkgGoDev badge in Markdown, linking to the documentation for the OpenTelemetry SDK Metric Data package. The badge provides a visual indicator and a clickable link to the package's documentation on pkg.go.dev.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/sdk/metric/metricdata/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/metric/metricdata)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/metric/metricdata)\n```\n\n----------------------------------------\n\nTITLE: Optimized Bitmap Field Lookup Implementation in Go\nDESCRIPTION: Optimized implementation using bitmap operations for fast field lookup during JSON decoding.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nvar curBit int8 = math.MaxInt8 // 11111111\n\nc := char(buf, cursor)\nbit := bitmap[keyIdx][c]\ncurBit &= bit\nif curBit == 0 {\n    // not found field\n}\n```\n\n----------------------------------------\n\nTITLE: Running tests and linters for Zap\nDESCRIPTION: Commands to run the test suite and linters for the Zap project, ensuring code quality and functionality.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake test\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Optimizing Span Start in Go OpenTelemetry SDK\nDESCRIPTION: Uses non-generic functions in the Start method of the Tracer to reduce memory allocation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\n// Changed in go.opentelemetry.io/otel/sdk/trace\nfunc (t Tracer) Start(ctx context.Context, name string, opts ...trace.SpanStartOption) (context.Context, trace.Span) {\n  // Implementation changed to use non-generic functions\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Jsonnet Files in Bash\nDESCRIPTION: Command to compile jsonnet files. Requires jsonnet, jsonnet-bundler, and tanka binaries in $PATH.\nSOURCE: https://github.com/grafana/tempo/blob/main/CONTRIBUTING.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake jsonnet\n```\n\n----------------------------------------\n\nTITLE: go-toml v1 Interface Decoding Example\nDESCRIPTION: This code snippet demonstrates how go-toml v1 handled decoding into non-nil interfaces. It uses the type of the element in the interface to decode the object.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n\"type inner struct {\\n\\tB interface{}\\n}\ntype doc struct {\\n\\tA interface{}\\n}\n\nd := doc{\\n\\tA: inner{\\n\\t\\tB: \\\"Before\\\",\\n\\t},\\n}\n\ndata := `\\n[A]\\nB = \\\"After\\\"\\n`\n\ntoml.Unmarshal([]byte(data), &d)\nfmt.Printf(\\\"toml v1: %#v\\\\n\\\", d)\n\n// toml v1: main.doc{A:main.inner{B:\\\"After\\\"}}\"\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of kprom with Kafka Client\nDESCRIPTION: Example showing how to initialize the kprom metrics and attach them to a Kafka client via the hooks interface.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/twmb/franz-go/plugin/kprom/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmetrics := kprom.NewMetrics(\"namespace\")\ncl, err := kgo.NewClient(\n\tkgo.WithHooks(metrics),\n\t// ...other opts\n)\n```\n\n----------------------------------------\n\nTITLE: Using Scratch Object for Huff0 Operations in Go\nDESCRIPTION: This snippet explains the usage of the Scratch object to reduce allocations in successive Huff0 compression or decompression calls. It also mentions how to set the ReusePolicy for table reuse.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/huff0/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Scratch struct {\n    Out []byte\n    // ... other fields\n}\n\n// Set ReusePolicy\nscratch.ReusePolicy = SomeReusePolicy\n\n// Use Scratch for compression/decompression\nCompress1X(input []byte, scratch *Scratch) ([]byte, error)\nDecompress1X(input []byte, scratch *Scratch) ([]byte, error)\n```\n\n----------------------------------------\n\nTITLE: Creating a basic ASCII table in Go with tablewriter\nDESCRIPTION: Example showing how to create a simple ASCII table with headers and data rows, demonstrating the basic usage of the tablewriter package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ndata := [][]string{\n    []string{\"A\", \"The Good\", \"500\"},\n    []string{\"B\", \"The Very very Bad Man\", \"288\"},\n    []string{\"C\", \"The Ugly\", \"120\"},\n    []string{\"D\", \"The Gopher\", \"800\"},\n}\n\ntable := tablewriter.NewWriter(os.Stdout)\ntable.SetHeader([]string{\"Name\", \"Sign\", \"Rating\"})\n\nfor _, v := range data {\n    table.Append(v)\n}\ntable.Render() // Send output\n```\n\n----------------------------------------\n\nTITLE: Generating and Exporting Kubernetes YAML Manifests\nDESCRIPTION: Demonstrates generating and exporting Kubernetes YAML manifests using Tanka. The Tanka tool uses the environments/default setup to export the manifests into the ./manifests directory. Requires Tanka to be installed.\nSOURCE: https://github.com/grafana/tempo/blob/main/operations/jsonnet/microservices/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Generate the YAML manifests:\nexport PAGER=cat\ntk show environments/default\ntk export manifests environments/default\n```\n\n----------------------------------------\n\nTITLE: Service Leaf Span Query\nDESCRIPTION: Query to find traces with leaf spans in specific service\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_39\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ } !< { resource.service.name = \"foo\" }\n```\n\n----------------------------------------\n\nTITLE: Code Sample: Go OpenTelemetry Slice Attribute Types\nDESCRIPTION: New typed slice attribute types for boolean, integer, float and string values\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_27\n\nLANGUAGE: Go\nCODE:\n```\nBoolSlice\nIntSlice\nInt64Slice\nFloat64Slice\nStringSlice\n```\n\n----------------------------------------\n\nTITLE: Span Count Aggregation\nDESCRIPTION: Query to find traces with more than 10 spans\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_41\n\nLANGUAGE: TraceQL\nCODE:\n```\ncount() > 10\n```\n\n----------------------------------------\n\nTITLE: Avoiding Object Creation in OpenTracing Bridge\nDESCRIPTION: Optimization to avoid creating new objects on all calls to WithDeferredSetup and SkipContextSetup in the OpenTracing bridge.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\nWithDeferredSetup()\nSkipContextSetup()\n```\n\n----------------------------------------\n\nTITLE: Basic Connector Usage in Pipeline Configuration\nDESCRIPTION: Demonstrates how to use a connector (count) in separate pipelines as both an exporter and receiver.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/connector/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  foo:\nexporters:\n  bar:\nconnectors:\n  count:\nservice:\n  pipelines:\n    traces:\n      receivers: [foo]\n      exporters: [count]\n    metrics:\n      receivers: [count]\n      exporters: [bar]\n```\n\n----------------------------------------\n\nTITLE: Encoding Function Using Opcode Sequence\nDESCRIPTION: This function demonstrates the process of encoding data using the opcode sequence. It iterates through the opcode linked list and performs actions based on the opcode, such as appending values to the byte slice. It avoids function calls for better performance.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc encode(code *opcode, b []byte, p unsafe.Pointer) ([]byte, error) {\n    for {\n        switch code.op {\n        case opStructFieldHead:\n            b = append(b, '{')\n            code = code.next\n        case opStructFieldInt:\n            b = append(b, code.key...)\n            b = appendInt((*int)(unsafe.Pointer(uintptr(p)+code.offset)))\n            code = code.next\n        case opStructFieldString:\n            b = append(b, code.key...)\n            b = appendString((*string)(unsafe.Pointer(uintptr(p)+code.offset)))\n            code = code.next\n        case opStructEnd:\n            b = append(b, '}')\n            code = code.next\n        case opEnd:\n            goto END\n        }\n    }\nEND:\n    return b, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Installing go-json with go get\nDESCRIPTION: This snippet demonstrates how to install the go-json library using the go get command. This command downloads and installs the library and its dependencies into your Go workspace.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n\"go get github.com/goccy/go-json\"\n```\n\n----------------------------------------\n\nTITLE: Using the compare Function with Span Filters in Grafana Tempo\nDESCRIPTION: This snippet demonstrates the usage of the compare function with a specific filter to differentiate between error statuses in spans. The function is employed within a traces query to visualize discrepancies based on the provided criteria.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/metrics-queries/functions.md#2025-04-17_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\n`{ resource.service.name=\"a\" && span.http.path=\"/myapi\" } | compare({status=error})`\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Table Style in Go\nDESCRIPTION: Shows how to create a completely custom table style with specialized box characters, colors, and formatting options.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n    t.SetStyle(table.Style{\n        Name: \"myNewStyle\",\n        Box: table.BoxStyle{\n            BottomLeft:       \"\\\\\",\n            BottomRight:      \"/\",\n            BottomSeparator:  \"v\",\n            Left:             \"[\",\n            LeftSeparator:    \"{\",\n            MiddleHorizontal: \"-\",\n            MiddleSeparator:  \"+\",\n            MiddleVertical:   \"|\",\n            PaddingLeft:      \"<\",\n            PaddingRight:     \">\",\n            Right:            \"]\",\n            RightSeparator:   \"}\",\n            TopLeft:          \"(\",\n            TopRight:         \")\",\n            TopSeparator:     \"^\",\n            UnfinishedRow:    \" ~~~\",\n        },\n        Color: table.ColorOptions{\n            IndexColumn:     text.Colors{text.BgCyan, text.FgBlack},\n            Footer:          text.Colors{text.BgCyan, text.FgBlack},\n            Header:          text.Colors{text.BgHiCyan, text.FgBlack},\n            Row:             text.Colors{text.BgHiWhite, text.FgBlack},\n            RowAlternate:    text.Colors{text.BgWhite, text.FgBlack},\n        },\n        Format: table.FormatOptions{\n            Footer: text.FormatUpper,\n            Header: text.FormatUpper,\n            Row:    text.FormatDefault,\n        },\n        Options: table.Options{\n            DrawBorder:      true,\n            SeparateColumns: true,\n            SeparateFooter:  true,\n            SeparateHeader:  true,\n            SeparateRows:    false,\n        },\n    })\n```\n\n----------------------------------------\n\nTITLE: Creating Tags in OpenCensus Go\nDESCRIPTION: Example of creating and inserting tags in the current context. Tags are key-value pairs that can be propagated through the application and used for metrics and tracing.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opencensus.io/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nctx, err := tag.New(ctx,\n\ttag.Insert(osKey, \"macOS-10.12.5\"),\n\ttag.Upsert(userIDKey, \"cde36753ed\"),\n)\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Generator Processors in YAML\nDESCRIPTION: YAML configuration to enable the local-blocks processor for TraceQL metrics in Tempo. This can be done per-tenant or for all tenants.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/upgrade.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  'tenantID':\n    metrics_generator_processors:\n      - local-blocks\n```\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  defaults:\n    metrics_generator:\n      processors: [local-blocks]\n```\n\n----------------------------------------\n\nTITLE: Filtering traces by instrumentation language in TraceQL\nDESCRIPTION: This TraceQL query filters traces based on the instrumentation language, specifically 'java'. It leverages the `instrumentation.language` attribute to narrow down traces based on how they were instrumented.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_25\n\nLANGUAGE: TraceQL\nCODE:\n```\n\"{ instrumentation.language = \\\"java\\\" }\"\n```\n\n----------------------------------------\n\nTITLE: Run Go Consul API Example\nDESCRIPTION: Run the Go program using this shell command, which will execute the code within the main.go file in the 'consul-demo' module. This assumes all dependencies have been installed with 'go mod tidy'.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/consul/api/README.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Checking for Empty Instrument in Go OpenTelemetry SDK\nDESCRIPTION: Adds an IsEmpty method to the Instrument type in the metric SDK to check if an Instrument instance is a zero-value.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n// Added to go.opentelemetry.io/otel/sdk/metric\nfunc (i Instrument) IsEmpty() bool {\n  // Implementation not shown\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a View in OpenCensus\nDESCRIPTION: Example of registering a view in OpenCensus. The view defines how measurements are aggregated and exported, in this case creating a distribution of video sizes.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opencensus.io/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nif err := view.Register(&view.View{\n\tName:        \"example.com/video_size_distribution\",\n\tDescription: \"distribution of processed video size over time\",\n\tMeasure:     videoSize,\n\tAggregation: view.Distribution(1<<32, 2<<32, 3<<32),\n}); err != nil {\n\tlog.Fatalf(\"Failed to register view: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for Traces using TraceQL\nDESCRIPTION: This curl command demonstrates how to use TraceQL to search for traces in Tempo. It searches for traces with a specific service name attribute. The response includes trace details and metrics about the search operation.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/pushing-spans-with-http.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -G -s http://localhost:3200/api/search --data-urlencode 'q={ .service.name = \"my.service\" }'\n```\n\n----------------------------------------\n\nTITLE: Configuring GopherLua VM Callstack Size\nDESCRIPTION: Example of setting the callstack size and enabling auto-sizing for a GopherLua VM instance.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nL := lua.NewState(lua.Options{\n    CallStackSize: 120,                 // this is the maximum callstack size of this LState\n    MinimizeStackMemory: true,          // Defaults to `false` if not specified. If set, the callstack will auto grow and shrink as needed up to a max of `CallStackSize`. If not set, the callstack will be fixed at `CallStackSize`.\n})\ndefer L.Close()\n```\n\n----------------------------------------\n\nTITLE: Configuring KVStore in YAML\nDESCRIPTION: KVStore configuration options for different backends like Consul and etcd with their specific settings\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nstore: <string> | default = \"consul\"\nprefix: <string> | default = \"ring.\"\nconsul:\n  host: <string> | default = \"localhost:8500\"\n  acl_token: <secret string> | default = \"\"\n  http_client_timeout: <duration> | default = 20s\n  consistent_reads: <bool> | default = false\n  watch_rate_limit: <float64> | default = 1.0\n  watch_burst_size: <int> | default = 1\n  cas_retry_delay: <duration> | default 1s\n```\n\n----------------------------------------\n\nTITLE: Initializing Logger in main function\nDESCRIPTION: This snippet demonstrates how to initialize a logger within the main function of an application. It creates a root logger using a specific implementation (logimpl) and its parameters. The resulting logger is then used for subsequent logging operations within the application.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n    func main() {\n        // ... other setup code ...\n\n        // Create the \"root\" logger.  We have chosen the \"logimpl\" implementation,\n        // which takes some initial parameters and returns a logr.Logger.\n        logger := logimpl.New(param1, param2)\n\n        // ... other setup code ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Performance Metrics Table in Markdown\nDESCRIPTION: Comparison table showing memory and CPU usage metrics for different export configurations including Prometheus direct export, Bridge + OTLP export, and collector configurations.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/contrib/bridges/prometheus/BENCHMARKS.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Experiment | Memory Usage (MB) | CPU Usage (millicores) |\n|---|---|---|\n| App w/ Prometheus Export | 94 | 220 |\n| App w/ Bridge + OTLP Export | 140 | 330 |\n| Collector w/ Prometheus Receiver | 320 | 600  |\n| Collector w/ OTLP Receiver | 92  | 30 |\n```\n\n----------------------------------------\n\nTITLE: Channel Select Operations in Lua\nDESCRIPTION: Examples of using channel.select in Lua for handling multiple channel operations with different patterns including receiving, sending, and default cases.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-17_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal idx, recv, ok = channel.select(\n  {\"|<-\", ch1},\n  {\"|<-\", ch2}\n)\nif not ok then\n    print(\"closed\")\nelseif idx == 1 then -- received from ch1\n    print(recv)\nelseif idx == 2 then -- received from ch2\n    print(recv)\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nchannel.select(\n  {\"|<-\", ch1, function(ok, data)\n    print(ok, data)\n  end},\n  {\"<-|\", ch2, \"value\", function(data)\n    print(data)\n  end},\n  {\"default\", function()\n    print(\"default action\")\n  end}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Enums for Metrics in Go\nDESCRIPTION: This snippet defines enums related to DataPoint metrics, including flags, metric types, and aggregation temporalities used in Grafana Tempo for representing metrics data efficiently.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/contexts/ottldatapoint/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n| Enum Symbol                            | Value |\n|----------------------------------------|-------|\n| FLAG_NONE                              | 0     |\n| FLAG_NO_RECORDED_VALUE                 | 1     |\n| AGGREGATION_TEMPORALITY_UNSPECIFIED    | 0     |\n| AGGREGATION_TEMPORALITY_DELTA          | 1     |\n| AGGREGATION_TEMPORALITY_CUMULATIVE     | 2     |\n| METRIC_DATA_TYPE_NONE                  | 0     |\n| METRIC_DATA_TYPE_GAUGE                 | 1     |\n| METRIC_DATA_TYPE_SUM                   | 2     |\n| METRIC_DATA_TYPE_HISTOGRAM             | 3     |\n| METRIC_DATA_TYPE_EXPONENTIAL_HISTOGRAM | 4     |\n| METRIC_DATA_TYPE_SUMMARY               | 5     |\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum with XPath in Go\nDESCRIPTION: Example showing how to calculate the sum of values using the sum() function in XPath.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/antchfx/xmlquery/README.md#2025-04-17_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nexpr, err := xpath.Compile(\"sum(//book/price)\")\nprice := expr.Evaluate(xmlquery.CreateXPathNavigator(doc)).(float64)\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Load Balancing with Kuberesolver in Go\nDESCRIPTION: Shows how to enable client-side load balancing when using kuberesolver by specifying the round_robin balancer. This creates subconnections for each available service endpoint.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/sercand/kuberesolver/v5/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngrpc.DialContext(ctx,  \"kubernetes:///service:grpc\", grpc.WithBalancerName(\"round_robin\"), grpc.WithInsecure())\n```\n\n----------------------------------------\n\nTITLE: Creating a Markdown-formatted table in Go\nDESCRIPTION: Example showing how to create a table formatted for Markdown with custom borders and separators.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ndata := [][]string{\n\t[]string{\"1/1/2014\", \"Domain name\", \"2233\", \"$10.98\"},\n\t[]string{\"1/1/2014\", \"January Hosting\", \"2233\", \"$54.95\"},\n\t[]string{\"1/4/2014\", \"February Hosting\", \"2233\", \"$51.00\"},\n\t[]string{\"1/4/2014\", \"February Extra Bandwidth\", \"2233\", \"$30.00\"},\n}\n\ntable := tablewriter.NewWriter(os.Stdout)\ntable.SetHeader([]string{\"Date\", \"Description\", \"CV2\", \"Amount\"})\ntable.SetBorders(tablewriter.Border{Left: true, Top: false, Right: true, Bottom: false})\ntable.SetCenterSeparator(\"|\")\ntable.AppendBulk(data) // Add Bulk Data\ntable.Render()\n```\n\n----------------------------------------\n\nTITLE: Reading Raw Bytes Configuration in Go\nDESCRIPTION: Shows how to load configuration directly from raw byte arrays using the Koanf rawbytes provider, supporting JSON parsing.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/providers/rawbytes\"\n)\n\nvar k = koanf.New(\".\")\n\nfunc main() {\n\tb := []byte(`{\"type\": \"rawbytes\", \"parent1\": {\"child1\": {\"type\": \"rawbytes\"}}}`)\n\tk.Load(rawbytes.Provider(b), json.Parser())\n\tfmt.Println(\"type is = \", k.String(\"parent1.child1.type\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Reading from Nested Maps in Go\nDESCRIPTION: Shows how to load configuration from nested maps using Koanf's `confmap` provider, supporting default values and multiple configuration source merging.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/providers/confmap\"\n\t\"github.com/knadh/koanf/providers/file\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/parsers/yaml\"\n)\n\nvar k = koanf.New(\".\")\n\nfunc main() {\n\t// Load default values\n\tk.Load(confmap.Provider(map[string]interface{}{\n\t\t\"parent1.name\": \"Default Name\",\n\t\t\"parent3.name\": \"New name here\",\n\t}, \".\"), nil)\n\n\t// Load JSON config\n\tk.Load(file.Provider(\"mock/mock.json\"), json.Parser())\n\n\t// Load YAML config\n\tk.Load(file.Provider(\"mock/mock.yml\"), yaml.Parser())\n\n\tfmt.Println(\"parent's name is = \", k.String(\"parent1.name\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Bridge Package\nDESCRIPTION: This code snippet displays a badge linking to the package documentation for the OpenTelemetry bridge package on pkg.go.dev. It provides a visual indicator and quick access to the package documentation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/bridge/opentracing/migration/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/bridge/opentracing/migration)](https://pkg.go.dev/go.opentelemetry.io/otel/bridge/opentracing/migration)\n```\n\n----------------------------------------\n\nTITLE: Using concurrent.Executor for Manageable Goroutines in Go\nDESCRIPTION: Illustrates the usage of concurrent.Executor, which provides explicit ownership and cancellation for goroutines. It shows how to create an executor, run a goroutine, and gracefully stop the executor.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/modern-go/concurrent/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nexecutor := concurrent.NewUnboundedExecutor()\nexecutor.Go(func(ctx context.Context) {\n    everyMillisecond := time.NewTicker(time.Millisecond)\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Println(\"goroutine exited\")\n            return\n        case <-everyMillisecond.C:\n            // do something\n        }\n    }\n})\ntime.Sleep(time.Second)\nexecutor.StopAndWaitForever()\nfmt.Println(\"executor stopped\")\n```\n\n----------------------------------------\n\nTITLE: Compound 'And' Tail Sampling Policy in Grafana Agent Static Mode\nDESCRIPTION: This YAML configuration snippet shows an 'and' compound tail sampling policy in Grafana Agent static mode. It combines the previous two policies, sampling traces that meet both conditions.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/grafana-agent/tail-based-sampling.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntraces:\n   configs:\n   - name: default\n    tail_sampling:\n      policies:\n       - type: and\n            and_sub_policy:\n            - name: and_tag_policy\n              type: string_attribute\n              string_attribute:\n                key: http.target\n                values:\n                    - ^\\/(?:metrics\\/.*|healthcheck)$\n                enabled_regex_matching: true\n                invert_match: true\n            - name: and_error_policy\n              type: status_code\n              status_code:\n                status_codes:\n                  - ERROR\n```\n\n----------------------------------------\n\nTITLE: Optimizing Metric Instrument Creation in Go OpenTelemetry SDK\nDESCRIPTION: Memory allocation optimizations when creating new metric instruments in the go.opentelemetry.io/otel/sdk/metric package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\n// Example of creating a new metric instrument\nmeter.NewInt64Counter(\"counter_name\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Tempo Metrics Generator Storage\nDESCRIPTION: Modified Tempo configuration to set up remote write to the Prometheus instance running in Docker Compose for metrics generation.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/linux.md#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n storage:\n     path: /var/tempo/generator/wal\n     remote_write:\n        - url: http://localhost:9090/api/v1/write\n        send_exemplars: true\n\n```\n\n----------------------------------------\n\nTITLE: Metric Enum Values Documentation in Markdown\nDESCRIPTION: Markdown table showing the mapping between enum symbols and their corresponding numeric values for metric aggregation temporality and data types.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/contexts/ottlmetric/README.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Enum Symbol                            | Value |\n|----------------------------------------|-------|\n| AGGREGATION_TEMPORALITY_UNSPECIFIED    | 0     |\n| AGGREGATION_TEMPORALITY_DELTA          | 1     |\n| AGGREGATION_TEMPORALITY_CUMULATIVE     | 2     |\n| METRIC_DATA_TYPE_NONE                  | 0     |\n| METRIC_DATA_TYPE_GAUGE                 | 1     |\n| METRIC_DATA_TYPE_SUM                   | 2     |\n| METRIC_DATA_TYPE_HISTOGRAM             | 3     |\n| METRIC_DATA_TYPE_EXPONENTIAL_HISTOGRAM | 4     |\n| METRIC_DATA_TYPE_SUMMARY               | 5     |\n```\n\n----------------------------------------\n\nTITLE: Multiple Pipeline Receiver Configuration\nDESCRIPTION: Shows how to use a connector as a receiver in multiple pipelines.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/connector/README.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  foo/traces:\n  foo/metrics:\nexporters:\n  bar/traces_backend:\n  bar/metrics_backend:\n  bar/metrics_backend/2:\nconnectors:\n  count:\nservice:\n  pipelines:\n    traces:\n      receivers: [foo/traces]\n      exporters: [bar/traces_backend, count]\n    metrics:\n      receivers: [count]\n      exporters: [bar/metrics_backend]\n    metrics/2:\n      receivers: [count]\n      exporters: [bar/metrics_backend/2]\n```\n\n----------------------------------------\n\nTITLE: Initializing Logfmt Encoder with Zap in Go\nDESCRIPTION: This snippet demonstrates how to set up a Zap logger with a logfmt encoder. It creates a new production encoder config and initializes a logger with debug level output to stdout.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/jsternberg/zap-logfmt/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/jsternberg/zap-logfmt\"\n\t\"go.uber.org/zap\"\n\t\"go.uber.org/zap/zapcore\"\n)\n\nfunc main() {\n\tconfig := zap.NewProductionEncoderConfig()\n\tlogger := zap.New(zapcore.NewCore(\n\t\tzaplogfmt.NewEncoder(config),\n\t\tos.Stdout,\n\t\tzapcore.DebugLevel,\n\t))\n\tlogger.Info(\"Hello World\")\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Tempo's Block Metadata JSON for Dedicated Column Assignments\nDESCRIPTION: This JSON structure extends Tempo's block metadata to include information about dedicated column assignments. It specifies the scope, name, and type of attributes assigned to dedicated columns.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2023-05 vParquet3.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{\n    ...\n    \"dedicatedColumns\": [\n        {\"scope\": \"span\", \"name\": \"attrA\", \"type\": \"string\"},\n        {\"scope\": \"span\", \"name\": \"attrB\", \"type\": \"string\"},\n        {\"scope\": \"span\", \"name\": \"attrC\", \"type\": \"string\"},\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Multi-tenancy in Tempo Backend - Command Line\nDESCRIPTION: Command line configuration option for enabling multi-tenancy in Tempo backend.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/manage-advanced-systems/multitenancy.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n--multitenancy.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Uppercase in Go\nDESCRIPTION: The ToUpperCase function converts a string to uppercase. It takes a target string as input and returns the uppercase version.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_63\n\nLANGUAGE: go\nCODE:\n```\nToUpperCase(target)\n```\n\n----------------------------------------\n\nTITLE: Counting Grapheme Clusters in a String\nDESCRIPTION: Example demonstrating how to count user-perceived characters (grapheme clusters) in a string containing emoji flag sequences and other complex Unicode characters.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nn := uniseg.GraphemeClusterCount(\"🇩🇪🏳️‍🌈\")\nfmt.Println(n)\n// 2\n```\n\n----------------------------------------\n\nTITLE: TraceQL Span Filtering Query\nDESCRIPTION: Example TraceQL query showing how to filter traces based on span attributes\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-0.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{ span.foo =\"bar\" }\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies with Go Modules in Bash\nDESCRIPTION: Commands for adding or updating dependencies using Go modules. It demonstrates how to pick the latest tagged release or a specific version of a module.\nSOURCE: https://github.com/grafana/tempo/blob/main/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Pick the latest tagged release.\ngo get example.com/some/module/pkg\n\n# Pick a specific version.\ngo get example.com/some/module/pkg@vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Sample INI File Content\nDESCRIPTION: Provides an example of the INI file format that the parser is designed to handle.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/participle/v2/TUTORIAL.md#2025-04-17_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nage = 21\nname = \"Bob Smith\"\n\n[address]\ncity = \"Beverly Hills\"\npostal_code = 90210\n```\n\n----------------------------------------\n\nTITLE: Conditionally Logging Fields\nDESCRIPTION: This code snippet demonstrates how to conditionally log a field based on the environment. It checks the value of the `ENVIRONMENT` environment variable and logs a customer ID only in the development environment. If the environment is not development, it returns `log.Noop()`, which is a no-op logger.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n    func Customer(order *Order) log.Field {\n        if os.Getenv(\"ENVIRONMENT\") == \"dev\" {\n            return log.String(\"customer\", order.Customer.ID)\n        }\n        return log.Noop()\n    }\n```\n\n----------------------------------------\n\nTITLE: Opcode Structure Definition\nDESCRIPTION: This code defines the structure used to manage opcodes in the `go-json` library. It includes an `opType` enum and an `opcode` struct containing the operation type, key, and a pointer to the next opcode.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype opType int\nconst (\n    opStructFieldHead opType = iota\n    opStructFieldInt\n    opStructFieldStirng\n    opStructEnd\n    opEnd\n)\ntype opcode struct {\n    op opType\n    key []byte\n    next *opcode\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Time to Unix Microseconds in Go\nDESCRIPTION: The UnixMicro function converts a time.Time value to Unix microseconds (elapsed since January 1, 1970 UTC). It returns an int64 value representing the microseconds.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_67\n\nLANGUAGE: go\nCODE:\n```\nUnixMicro(Time(\"02/04/2023\", \"%m/%d/%Y\"))\n```\n\n----------------------------------------\n\nTITLE: Accessing Errors in a Multierror\nDESCRIPTION: Demonstrates type switching to access the list of errors when a multierror is returned, allowing programmatic inspection of individual errors\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif err := something(); err != nil {\n\tif merr, ok := err.(*multierror.Error); ok {\n\t\t// Use merr.Errors\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using FNV Hash Converter\nDESCRIPTION: Examples of using the FNV converter to generate hash values from strings. Can process both direct string values and path expressions to string telemetry fields.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_25\n\nLANGUAGE: go\nCODE:\n```\nFNV(resource.attributes[\"device.name\"])\n\nFNV(\"name\")\n```\n\n----------------------------------------\n\nTITLE: Reading Configuration from Files in Go\nDESCRIPTION: Example showing how to load and merge configuration from JSON and YAML files using koanf. Demonstrates basic file loading and value access using string paths.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/parsers/yaml\"\n\t\"github.com/knadh/koanf/providers/file\"\n)\n\n// Global koanf instance. Use \".\" as the key path delimiter. This can be \"/\" or any character.\nvar k = koanf.New(\".\")\n\nfunc main() {\n\t// Load JSON config.\n\tif err := k.Load(file.Provider(\"mock/mock.json\"), json.Parser()); err != nil {\n\t\tlog.Fatalf(\"error loading config: %v\", err)\n\t}\n\n\t// Load YAML config and merge into the previously loaded config (because we can).\n\tk.Load(file.Provider(\"mock/mock.yml\"), yaml.Parser())\n\n\tfmt.Println(\"parent's name is = \", k.String(\"parent1.name\"))\n\tfmt.Println(\"parent's ID is = \", k.Int(\"parent1.id\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Release History Documentation\nDESCRIPTION: Markdown formatted changelog documenting version history with structured sections for Features Added, Breaking Changes, Bugs Fixed and Other Changes\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 1.9.0 (2025-04-08)\n\n### Features Added\n* `GetToken()` sets `AccessToken.RefreshOn` when the token provider specifies a value\n\n### Other Changes\n* `NewManagedIdentityCredential` logs the configured user-assigned identity, if any\n* Deprecated `UsernamePasswordCredential` because it can't support multifactor\n  authentication (MFA), which Microsoft Entra ID requires for most tenants. See\n  https://aka.ms/azsdk/identity/mfa for migration guidance.\n* Updated dependencies\n```\n\n----------------------------------------\n\nTITLE: Decode Converter Usage in OTTL\nDESCRIPTION: The Decode converter takes a string or byte array encoded with a specified encoding and returns the decoded string. It supports various encodings including base64 variants and IANA encoding standards.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_15\n\nLANGUAGE: ottl\nCODE:\n```\nDecode(\"aGVsbG8gd29ybGQ=\", \"base64\")\n```\n\nLANGUAGE: ottl\nCODE:\n```\nDecode(resource.attributes[\"encoded field\"], \"us-ascii\")\n```\n\n----------------------------------------\n\nTITLE: Creating a K3D Cluster for Tempo\nDESCRIPTION: This snippet creates a new K3D cluster named 'tempo' with specified API and load balancer ports. It is a prerequisite for deploying Tempo using Jsonnet/Tanka.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nk3d cluster create tempo --api-port 6443 --port \"3000:80@loadbalancer\"\n```\n\n----------------------------------------\n\nTITLE: Running Make Commands for the Bloom Filter Project\nDESCRIPTION: These commands demonstrate how to use the provided Makefile to view available commands, install dependencies, and run quality assurance tests for the project.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/willf/bloom/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake help\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake deps\nmake qa\n```\n\n----------------------------------------\n\nTITLE: Basic Kafka Receiver Configuration\nDESCRIPTION: Simple configuration example for setting up Kafka receiver with protocol version specification.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/receiver/kafkareceiver/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  kafka:\n    protocol_version: 2.0.0\n```\n\n----------------------------------------\n\nTITLE: Rendering Table into a String in Go\nDESCRIPTION: This snippet illustrates how to render a table into a string instead of printing it to standard output using the Tablewriter library. It utilizes the strings.Builder type introduced in Go 1.10 to capture the table output as a string.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-17_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"strings\"\n    \"fmt\"\n\n    \"github.com/olekukonko/tablewriter\"\n)\n\nfunc main() {\n    tableString := &strings.Builder{}\n    table := tablewriter.NewWriter(tableString)\n\n    /*\n     * Code to fill the table\n     */\n\n    table.Render()\n\n    fmt.Println(tableString.String())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Object Storage Secret for Tempo Operator\nDESCRIPTION: This command creates a Kubernetes secret containing Azure storage account information for Tempo Operator to use as object storage.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/object-storage.md#2025-04-17_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nkubectl create secret generic tempostack-dev-azure \\\n  --from-literal=container=\"<AZURE_CONTAINER_NAME>\" \\\n  --from-literal=account_name=\"<AZURE_ACCOUNT_NAME>\" \\\n  --from-literal=account_key=\"<AZURE_ACCOUNT_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Dedicated Column Configuration in Go for Tempo\nDESCRIPTION: This Go code defines the structure for configuring dedicated columns in Tempo. It allows specifying an array of dedicated column definitions in the Limits struct, which can be set in Tempo's YAML configuration.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2023-05 vParquet3.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Limits struct {\n    ...\n    DedicatedColumns []sharedconfig.DedicatedColumn `yaml:\"dedicated_columns\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default Values with Type Conversion\nDESCRIPTION: Shows how to provide a default value when converting a value that might not exist or might be of the wrong type.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/stretchr/objx/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nGet(\"code\").Int(-1)\n```\n\n----------------------------------------\n\nTITLE: InmemSink Setup with Signal Handler in Go\nDESCRIPTION: Example showing how to configure an in-memory metrics sink with a signal handler for debugging. Demonstrates setting various metric types including gauges, counters, and samples that will be dumped to stderr when a signal is received.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/armon/go-metrics/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Setup the inmem sink and signal handler\ninm := metrics.NewInmemSink(10*time.Second, time.Minute)\nsig := metrics.DefaultInmemSignal(inm)\nmetrics.NewGlobal(metrics.DefaultConfig(\"service-name\"), inm)\n\n// Run some code\ninm.SetGauge([]string{\"foo\"}, 42)\ninm.EmitKey([]string{\"bar\"}, 30)\n\ninm.IncrCounter([]string{\"baz\"}, 42)\ninm.IncrCounter([]string{\"baz\"}, 1)\ninm.IncrCounter([]string{\"baz\"}, 80)\n\ninm.AddSample([]string{\"method\", \"wow\"}, 42)\ninm.AddSample([]string{\"method\", \"wow\"}, 100)\ninm.AddSample([]string{\"method\", \"wow\"}, 22)\n```\n\n----------------------------------------\n\nTITLE: Recursive Struct Size Calculation in Go\nDESCRIPTION: This internal function recursively calculates the size of a struct, handling nested structs, pointers, and various data types. It uses a map to track visited pointers to avoid infinite recursion.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alicebob/miniredis/v2/size/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc of(v reflect.Value, visited map[uintptr]bool) int {\n\tswitch v.Kind() {\n\tcase reflect.Array:\n\t\tsum := 0\n\t\tfor i := 0; i < v.Len(); i++ {\n\t\t\tsum += of(v.Index(i), visited)\n\t\t}\n\t\treturn sum\n\tcase reflect.Slice:\n\t\treturn int(v.Type().Size())\n\tcase reflect.Struct:\n\t\tsum := 0\n\t\tfor i := 0; i < v.NumField(); i++ {\n\t\t\tsum += of(v.Field(i), visited)\n\t\t}\n\t\treturn sum\n\tcase reflect.Ptr:\n\t\tif v.IsNil() {\n\t\t\treturn int(v.Type().Size())\n\t\t}\n\t\tvar deref reflect.Value\n\t\tptr := v.Pointer()\n\t\tif visited[ptr] {\n\t\t\treturn 0\n\t\t}\n\t\tvisited[ptr] = true\n\t\tderef = v.Elem()\n\t\treturn int(v.Type().Size()) + of(deref, visited)\n\tdefault:\n\t\treturn int(v.Type().Size())\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Channel Communication in GopherLua\nDESCRIPTION: Demonstrates channel communication between goroutines using GopherLua, including a receiver and sender implementation with channel select operations.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-17_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc receiver(ch, quit chan lua.LValue) {\n    L := lua.NewState()\n    defer L.Close()\n    L.SetGlobal(\"ch\", lua.LChannel(ch))\n    L.SetGlobal(\"quit\", lua.LChannel(quit))\n    if err := L.DoString(`\n    local exit = false\n    while not exit do\n      channel.select(\n        {\"|<-\", ch, function(ok, v)\n          if not ok then\n            print(\"channel closed\")\n            exit = true\n          else\n            print(\"received:\", v)\n          end\n        end},\n        {\"|<-\", quit, function(ok, v)\n            print(\"quit\")\n            exit = true\n        end}\n      )\n    end\n  `); err != nil {\n        panic(err)\n    }\n}\n\nfunc sender(ch, quit chan lua.LValue) {\n    L := lua.NewState()\n    defer L.Close()\n    L.SetGlobal(\"ch\", lua.LChannel(ch))\n    L.SetGlobal(\"quit\", lua.LChannel(quit))\n    if err := L.DoString(`\n    ch:send(\"1\")\n    ch:send(\"2\")\n  `); err != nil {\n        panic(err)\n    }\n    ch <- lua.LString(\"3\")\n    quit <- lua.LTrue\n}\n\nfunc main() {\n    ch := make(chan lua.LValue)\n    quit := make(chan lua.LValue)\n    go receiver(ch, quit)\n    go sender(ch, quit)\n    time.Sleep(3 * time.Second)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a table with identical cells merging in Go\nDESCRIPTION: Example demonstrating automatic merging of identical cells in a table, useful for displaying grouped data.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ndata := [][]string{\n  []string{\"1/1/2014\", \"Domain name\", \"1234\", \"$10.98\"},\n  []string{\"1/1/2014\", \"January Hosting\", \"2345\", \"$54.95\"},\n  []string{\"1/4/2014\", \"February Hosting\", \"3456\", \"$51.00\"},\n  []string{\"1/4/2014\", \"February Extra Bandwidth\", \"4567\", \"$30.00\"},\n}\n\ntable := tablewriter.NewWriter(os.Stdout)\ntable.SetHeader([]string{\"Date\", \"Description\", \"CV2\", \"Amount\"})\ntable.SetFooter([]string{\"\", \"\", \"Total\", \"$146.93\"})\ntable.SetAutoMergeCells(true)\ntable.SetRowLine(true)\ntable.AppendBulk(data)\ntable.Render()\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying a JSON Merge Patch in Go\nDESCRIPTION: Example demonstrating how to create a merge patch from two JSON documents and apply it to a third document. It showcases the CreateMergePatch and MergePatch functions from the jsonpatch library.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/evanphx/json-patch/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tjsonpatch \"github.com/evanphx/json-patch\"\n)\n\nfunc main() {\n\t// Let's create a merge patch from these two documents...\n\toriginal := []byte(`{\"name\": \"John\", \"age\": 24, \"height\": 3.21}`)\n\ttarget := []byte(`{\"name\": \"Jane\", \"age\": 24}`)\n\n\tpatch, err := jsonpatch.CreateMergePatch(original, target)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Now lets apply the patch against a different JSON document...\n\n\talternative := []byte(`{\"name\": \"Tina\", \"age\": 28, \"height\": 3.75}`)\n\tmodifiedAlternative, err := jsonpatch.MergePatch(alternative, patch)\n\n\tfmt.Printf(\"patch document:   %s\\n\", patch)\n\tfmt.Printf(\"updated alternative doc: %s\\n\", modifiedAlternative)\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Go SDK in Markdown\nDESCRIPTION: This snippet shows how to embed a PkgGoDev badge in a Markdown file, linking to the documentation for the OpenTelemetry Go SDK package on pkg.go.dev.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/sdk/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk)\n```\n\n----------------------------------------\n\nTITLE: Service Error Group Query\nDESCRIPTION: Query to find services with multiple errors using grouping\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_45\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ status = error } | by(resource.service.name) | count() > 1\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Indices in JSON Configuration (JSON)\nDESCRIPTION: This JSON snippet illustrates a configuration structure that includes an array. It's used to demonstrate how Viper can access specific array elements using numeric indices in the key path.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"host\": {\n        \"address\": \"localhost\",\n        \"ports\": [\n            5799,\n            6029\n        ]\n    },\n    \"datastore\": {\n        \"metric\": {\n            \"host\": \"127.0.0.1\",\n            \"port\": 3099\n        },\n        \"warehouse\": {\n            \"host\": \"198.0.0.1\",\n            \"port\": 2112\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading a Blob from Azure Storage\nDESCRIPTION: Example showing how to download a blob from Azure Storage to a local file using anonymous access.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// this example accesses a public blob via anonymous access, so no credentials are required\nclient, err := azblob.NewClientWithNoCredential(\"https://azurestoragesamples.blob.core.windows.net/\", nil)\n// TODO: handle error\n\n// create or open a local file where we can download the blob\nfile, err := os.Create(\"cloud.jpg\")\n// TODO: handle error\ndefer file.Close()\n\n// download the blob\n_, err = client.DownloadFile(context.TODO(), \"samples\", \"cloud.jpg\", file, nil)\n// TODO: handle error\n```\n\n----------------------------------------\n\nTITLE: Advanced UDP Protocol Configuration\nDESCRIPTION: Example showing advanced UDP protocol configuration for Jaeger receiver with custom queue size, packet size, workers, and socket buffer settings.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/receiver/jaegerreceiver/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprotocols:\n  thrift_binary:\n    endpoint: 0.0.0.0:6832\n    queue_size: 5_000\n    max_packet_size: 131_072\n    workers: 50\n    socket_buffer_size: 8_388_608\n```\n\n----------------------------------------\n\nTITLE: Tempo Discarded Spans Metric\nDESCRIPTION: This metric tracks the total number of spans discarded by Tempo. The `reason` label provides specific details regarding why the spans were discarded, offering insights into issues like trace limits or unhealthy ingesters. This metric is invaluable for monitoring and troubleshooting span rejection problems in Tempo.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/send-traces/max-trace-limit-reached.md#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n\"tempo_discarded_spans_total\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Resource Semantic Conventions in OpenTelemetry Go\nDESCRIPTION: Command to enable experimental resource semantic conventions by setting the OTEL_GO_X_RESOURCE environment variable to 'true'.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/sdk/internal/x/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_GO_X_RESOURCE=true\n```\n\n----------------------------------------\n\nTITLE: Result of Unnamed Grok Matching in Go\nDESCRIPTION: Shows the resulting map from parsing with unnamed matches, which includes all pattern names along with their matched values in the output map.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/elastic/go-grok/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmap[string]string {\n    \"NGINX_HOST\": \"127.0.0.1:1234\", \n    \"destination.ip\": \"127.0.0.1\", \n    \"IPV4\": \"127.0.0.1\", \n    \"destination.port\": \"1234\", \n    \"BASE10NUM\": \"1234\", \n}\n```\n\n----------------------------------------\n\nTITLE: OTTL List Value Examples\nDESCRIPTION: Examples showing the syntax for creating lists in OTTL, including empty lists, numeric lists, string lists, and mixed value lists.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/LANGUAGE.md#2025-04-17_snippet_1\n\nLANGUAGE: OTTL\nCODE:\n```\n[]\n[1]\n[\"1\", \"2\", \"3\"]\n[\"a\", attributes[\"key\"], Concat([\"a\", \"b\"], \"-\")]\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector Sidecar Configuration in YAML\nDESCRIPTION: YAML configuration for deploying an OpenTelemetry collector as a sidecar to receive Jaeger Thrift format traces and export them via OTLP. This collector is used to capture traces from Tempo components.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/monitor.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: opentelemetry.io/v1alpha1\nkind: OpenTelemetryCollector\nmetadata:\n  name: sidecar-for-tempo\nspec:\n  mode: sidecar\n  config: |\n    receivers:\n      jaeger:\n        protocols:\n          thrift_compact:\n\n    exporters:\n      otlp:\n        endpoint: <otlp-endpoint>:4317\n        tls:\n          insecure: true\n\n    service:\n      pipelines:\n        traces:\n          receivers: [jaeger]\n          exporters: [otlp]\n```\n\n----------------------------------------\n\nTITLE: Creating a table with custom separators in Go\nDESCRIPTION: Example demonstrating how to customize table separators and enable row lines for a CSV-based table.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntable, _ := tablewriter.NewCSV(os.Stdout, \"testdata/test.csv\", true)\ntable.SetRowLine(true)         // Enable row line\n\n// Change table lines\ntable.SetCenterSeparator(\"*\")\ntable.SetColumnSeparator(\"╪\")\ntable.SetRowSeparator(\"-\")\n\ntable.SetAlignment(tablewriter.ALIGN_LEFT)\ntable.Render()\n```\n\n----------------------------------------\n\nTITLE: Calculating Monospace String Width\nDESCRIPTION: Example showing how to calculate the display width of a string when rendered in a monospace font, accounting for characters that may take multiple character cells.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nwidth := uniseg.StringWidth(\"🇩🇪🏳️‍🌈!\")\nfmt.Println(width)\n// 5\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Values in etcd Using crypt CLI (Bash)\nDESCRIPTION: Command-line example showing how to set configuration values in etcd using the crypt tool. It demonstrates setting a plaintext JSON configuration value.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/sagikazarmark/crypt/bin/crypt\n$ crypt set -plaintext /config/hugo.json /Users/hugo/settings/config.json\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Elements in TraceQL\nDESCRIPTION: Shows how to access specific elements or test all elements of an array attribute.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2023-11 TraceQL Extensions.md#2025-04-17_snippet_6\n\nLANGUAGE: traceql\nCODE:\n```\n{ span.http.response.header.content-type[0] = \"application/json\" }\n{ span.http.response.header.content-type[] = \"application/json\" }\n```\n\n----------------------------------------\n\nTITLE: XPath Node Selection Patterns\nDESCRIPTION: Basic XPath patterns for selecting nodes, attributes, and navigating document hierarchies. These patterns cover the fundamental operations for traversing and selecting document elements.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/antchfx/xpath/README.md#2025-04-17_snippet_0\n\nLANGUAGE: xpath\nCODE:\n```\nnode\n*\n@attr\n@*\nnode()\ntext()\ncomment()\n.\n..\n/\na[expr]\na[n]\na/b\na//b\n//b\na|b\n(a, b, c)\n(a/b)\n```\n\n----------------------------------------\n\nTITLE: Using Colorize Option for JSON Encoding in Go\nDESCRIPTION: This snippet demonstrates how to use the Colorize option for encoding JSON, which enhances the visibility of the output by applying color schemes. The snippet shows an example of marshaling a variable 'v' into a colored JSON byte slice, handling potential errors appropriately before printing the colored JSON string.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/goccy/go-json/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nb, err := json.MarshalWithOption(v, json.Colorize(json.DefaultColorScheme))\nif err != nil {\n  ...\n}\nfmt.Println(string(b)) // print colored json\n```\n\n----------------------------------------\n\nTITLE: Defining Marshaler and Unmarshaler Interfaces with Context Support in Go\nDESCRIPTION: This snippet defines two interfaces, MarshalerContext and UnmarshalerContext, which facilitate JSON marshaling and unmarshaling with context support in the go-json library. The interfaces require the implementation of methods for marshaling and unmarshaling JSON data, enabling the use of context for better management of side effects such as timeouts or cancellations in JSON encoding and decoding operations.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/goccy/go-json/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype MarshalerContext interface {\n  MarshalJSON(context.Context) ([]byte, error)\n}\n\ntype UnmarshalerContext interface {\n  UnmarshalJSON(context.Context, []byte) error\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Glob Pattern Matching with Delimiters and Wildcards\nDESCRIPTION: Demonstrates creating glob patterns with specific delimiters, super wildcards, and complex matching scenarios including single character and character list matching\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/gobwas/glob/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    // create new glob with set of delimiters and super wildcard\n    g := glob.MustCompile(\"api.**.com\", '.')\n    g.Match(\"api.github.com\") // true\n    g.Match(\"api.gi.hub.com\") // true\n    \n    // character list and range matching\n    g = glob.MustCompile(\"[abc]at\")\n    g.Match(\"cat\") // true\n    g.Match(\"bat\") // true\n    g.Match(\"fat\") // false\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from file-based to in-memory certificate handling in ClientCertificateCredential\nDESCRIPTION: The NewClientCertificateCredential now requires certificate data as in-memory objects instead of a file path. This shows how to read and parse certificate files for use with the new implementation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// before\ncred, err := NewClientCertificateCredential(\"tenant\", \"client-id\", \"/cert.pem\", nil)\n\n// after\ncertData, err := os.ReadFile(\"/cert.pem\")\ncerts, key, err := ParseCertificates(certData, password)\ncred, err := NewClientCertificateCredential(tenantID, clientID, certs, key, nil)\n```\n\n----------------------------------------\n\nTITLE: Parsing Basic URL in Go\nDESCRIPTION: Example of using the URL function to parse a simple URL. The function extracts and returns structured information about the URL components.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_74\n\nLANGUAGE: go\nCODE:\n```\nURL(\"http://www.example.com\")\n```\n\n----------------------------------------\n\nTITLE: Advanced JMESPath Queries in Go\nDESCRIPTION: Shows multiple examples of more complex JMESPath expressions, including extracting nested objects, projecting arrays, and filtering collections based on conditions.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/jmespath/go-jmespath/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar jsondata = []byte(`{\"foo\": {\"bar\": {\"baz\": [0, 1, 2, 3, 4]}}}}`) // your data\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.search(\"foo.bar\", data)\nresult = { \"baz\": [ 0, 1, 2, 3, 4 ] }\n\n\nvar jsondata  = []byte(`{\"foo\": [{\"first\": \"a\", \"last\": \"b\"},\n                           {\"first\": \"c\", \"last\": \"d\"}]}`) // your data\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.search({\"foo[*].first\", data)\nresult [ 'a', 'c' ]\n\n\nvar jsondata = []byte(`{\"foo\": [{\"age\": 20}, {\"age\": 25},\n                           {\"age\": 30}, {\"age\": 35},\n                           {\"age\": 40}]}`) // your data\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.search(\"foo[?age > `30`]\")\nresult = [ { age: 35 }, { age: 40 } ]\n```\n\n----------------------------------------\n\nTITLE: Installing Parquet-Go using go get\nDESCRIPTION: This command is used to install the parquet-go library as a Go module.  It fetches the library from its GitHub repository and adds it as a dependency to your project.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/parquet-go/parquet-go/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n\"go get github.com/parquet-go/parquet-go\"\n```\n\n----------------------------------------\n\nTITLE: Merging Maps with Custom Strategy in OTTL\nDESCRIPTION: The merge_maps function combines two pcommon.Map objects using a specified strategy (insert, update, or upsert) to handle conflicts.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_7\n\nLANGUAGE: OTTL\nCODE:\n```\nmerge_maps(log.attributes, ParseJSON(log.body), \"upsert\")\n```\n\nLANGUAGE: OTTL\nCODE:\n```\nmerge_maps(log.attributes, ParseJSON(log.attributes[\"kubernetes\"]), \"update\")\n```\n\nLANGUAGE: OTTL\nCODE:\n```\nmerge_maps(log.attributes, resource.attributes, \"insert\")\n```\n\n----------------------------------------\n\nTITLE: Concurrent Slice Mapping\nDESCRIPTION: Shows how to perform concurrent mapping of slice elements. Compares atomic counter-based standard library implementation with the simplified iter.Map method from conc.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/sourcegraph/conc/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc concMap(\n    input []int,\n    f func(int) int,\n) []int {\n    res := make([]int, len(input))\n    var idx atomic.Int64\n\n    var wg sync.WaitGroup\n    for i := 0; i < 10; i++ {\n        wg.Add(1)\n        go func() {\n            defer wg.Done()\n\n            for {\n                i := int(idx.Add(1) - 1)\n                if i >= len(input) {\n                    return\n                }\n\n                res[i] = f(input[i])\n            }\n        }()\n    }\n    wg.Wait()\n    return res\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc concMap(\n    input []int,\n    f func(*int) int,\n) []int {\n    return iter.Map(input, f)\n}\n```\n\n----------------------------------------\n\nTITLE: Structural Operators - Finding Sibling Services\nDESCRIPTION: TraceQL query using the sibling operator to determine if two specific services are siblings in a trace.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_11\n\nLANGUAGE: traceql\nCODE:\n```\n{ resource.service.name = \"productcatalogservice\" } ~ { resource.service.name=\"frontend\" }\n```\n\n----------------------------------------\n\nTITLE: Implementing Declared Type Options in Go\nDESCRIPTION: Pattern for implementing configuration options with custom declared types.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype myTypeOption struct {\n\tMyType MyType\n}\n\nfunc (o myTypeOption) apply(c config) config {\n\tc.MyType = o.MyType\n    return c\n}\n\n// WithMyType sets T to have include MyType.\nfunc WithMyType(t MyType) Option {\n\treturn myTypeOption{t}\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Metrics to Syslog in Go\nDESCRIPTION: Demonstrates how to periodically log every metric in a slightly more parseable form to syslog using the Syslog function.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/rcrowley/go-metrics/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nw, _ := syslog.Dial(\"unixgram\", \"/dev/log\", syslog.LOG_INFO, \"metrics\")\ngo metrics.Syslog(metrics.DefaultRegistry, 60e9, w)\n```\n\n----------------------------------------\n\nTITLE: Importing jwt-go package in Go\nDESCRIPTION: This code snippet demonstrates how to import the jwt-go package into a Go program. Importing the package makes its functions and types available for use in the program. This import statement is essential for utilizing the JWT functionality provided by the library.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/golang-jwt/jwt/v5/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\"import \\\"github.com/golang-jwt/jwt/v5\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage with Access Key in Tempo Monolithic Mode\nDESCRIPTION: YAML configuration for setting up Azure blob storage using Helm charts with access key authentication stored in Kubernetes secrets.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/hosted-storage/azure.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntempo:\n  storage:\n    trace:\n      backend: azure\n      azure:\n        container_name: container-name\n        storage_account_name: storage-account-name\n        storage_account_key: ${STORAGE_ACCOUNT_ACCESS_KEY}\n\n  extraArgs:\n    config.expand-env: true\n  extraEnv:\n    - name: STORAGE_ACCOUNT_ACCESS_KEY\n      valueFrom:\n        secretKeyRef:\n          name: secret-name\n          key: STORAGE_ACCOUNT_ACCESS_KEY\n```\n\n----------------------------------------\n\nTITLE: Renaming Observer Options in Go OpenTelemetry Metric Instrument\nDESCRIPTION: Rename of Int64ObserverOption to Int64ObservableOption and Float64ObserverOption to Float64ObservableOption in go.opentelemetry.io/otel/metric/instrument.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_17\n\nLANGUAGE: Go\nCODE:\n```\n// Old\nInt64ObserverOption\nFloat64ObserverOption\n// New\nInt64ObservableOption\nFloat64ObservableOption\n```\n\n----------------------------------------\n\nTITLE: Renaming Asynchronous to Observable in Go OpenTelemetry Metric Instrument\nDESCRIPTION: Rename of Asynchronous to Observable in go.opentelemetry.io/otel/metric/instrument.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\n// Old\nAsynchronous\n// New\nObservable\n```\n\n----------------------------------------\n\nTITLE: Configuring Server gRPC Message Size Limits in Tempo\nDESCRIPTION: YAML configuration for increasing the gRPC message size limits in the Tempo server block. This affects how Tempo components communicate with each other via gRPC and may need to be applied to multiple components.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/querying/response-too-large.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  grpc_server_max_recv_msg_size: <size>\n  grpc_server_max_send_msg_size: <size>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Tests for Jaeger Client Go\nDESCRIPTION: Commands to install project dependencies and run the test suite to verify the setup.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/uber/jaeger-client-go/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake install\nmake test\n```\n\n----------------------------------------\n\nTITLE: Struct Validation Example in Go\nDESCRIPTION: Example of validating a struct using the govalidator library. The example shows how to define validation tags for struct fields, add custom validators, and validate the struct.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_18\n\nLANGUAGE: go\nCODE:\n```\ntype Post struct {\n\tTitle    string `valid:\"alphanum,required\"`\n\tMessage  string `valid:\"duck,ascii\"`\n\tMessage2 string `valid:\"animal(dog)\"`\n\tAuthorIP string `valid:\"ipv4\"`\n\tDate     string `valid:\"-\"`\n}\npost := &Post{\n\tTitle:   \"My Example Post\",\n\tMessage: \"duck\",\n\tMessage2: \"dog\",\n\tAuthorIP: \"123.234.54.3\",\n}\n\n// Add your own struct validation tags\ngovalidator.TagMap[\"duck\"] = govalidator.Validator(func(str string) bool {\n\treturn str == \"duck\"\n})\n\n// Add your own struct validation tags with parameter\ngovalidator.ParamTagMap[\"animal\"] = govalidator.ParamValidator(func(str string, params ...string) bool {\n    species := params[0]\n    return str == species\n})\ngovalidator.ParamTagRegexMap[\"animal\"] = regexp.MustCompile(\"^animal\\\\((\\\\w+)\\\\)$\")\n\nresult, err := govalidator.ValidateStruct(post)\nif err != nil {\n\tprintln(\"error: \" + err.Error())\n}\nprintln(result)\n```\n\n----------------------------------------\n\nTITLE: Setting Colored Table Style in Go\nDESCRIPTION: Demonstrates how to use a colored style for table rendering with StyleColoredBright from the go-pretty/table package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n    t.SetStyle(table.StyleColoredBright)\n    t.Render()\n```\n\n----------------------------------------\n\nTITLE: Custom Index Forward Seeking\nDESCRIPTION: Shows how to use a custom index for forward-only seeking. Does not require the input reader to support io.Seeker interface.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n\tdec := s2.NewReader(r)\n\trs, err := dec.ReadSeeker(false, index)\n\trs.Seek(wantOffset, io.SeekStart)\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for trace/embedded Package in Markdown\nDESCRIPTION: This snippet shows how to include a PkgGoDev badge in a Markdown file, linking to the documentation for the trace/embedded package in the OpenTelemetry Go SDK.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/trace/embedded/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/trace/embedded)](https://pkg.go.dev/go.opentelemetry.io/otel/trace/embedded)\n```\n\n----------------------------------------\n\nTITLE: Walking Routes in Gorilla Mux\nDESCRIPTION: Demonstrates how to use the Walk function to visit all registered routes on a router. This example prints out the path template, path regex, queries templates, queries regexps, and methods for each route.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n\n\t\"github.com/gorilla/mux\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\treturn\n}\n\nfunc main() {\n\tr := mux.NewRouter()\n\tr.HandleFunc(\"/\", handler)\n\tr.HandleFunc(\"/products\", handler).Methods(\"POST\")\n\tr.HandleFunc(\"/articles\", handler).Methods(\"GET\")\n\tr.HandleFunc(\"/articles/{id}\", handler).Methods(\"GET\", \"PUT\")\n\tr.HandleFunc(\"/authors\", handler).Queries(\"surname\", \"{surname}\")\n\terr := r.Walk(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {\n\t\tpathTemplate, err := route.GetPathTemplate()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"ROUTE:\", pathTemplate)\n\t\t}\n\t\tpathRegexp, err := route.GetPathRegexp()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Path regexp:\", pathRegexp)\n\t\t}\n\t\tqueriesTemplates, err := route.GetQueriesTemplates()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Queries templates:\", strings.Join(queriesTemplates, \",\"))\n\t\t}\n\t\tqueriesRegexps, err := route.GetQueriesRegexp()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Queries regexps:\", strings.Join(queriesRegexps, \",\"))\n\t\t}\n\t\tmethods, err := route.GetMethods()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Methods:\", strings.Join(methods, \",\"))\n\t\t}\n\t\tfmt.Println()\n\t\treturn nil\n\t})\n\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\thttp.Handle(\"/\", r)\n}\n```\n\n----------------------------------------\n\nTITLE: Drop Traces Command\nDESCRIPTION: Command to rewrite blocks and remove specific trace IDs from a tenant.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/tempo_cli.md#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ntempo-cli rewrite-blocks drop-trace --backend=local --bucket=./cmd/tempo-cli/test-data/ single-tenant 04d5f549746c96e4f3daed6202571db2\n```\n\n----------------------------------------\n\nTITLE: Afero MemMapFs Testing in Go\nDESCRIPTION: This snippet demonstrates how to use Afero's MemMapFs for testing, creating a blank slate memory backend for each test.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc TestExist(t *testing.T) {\n\tappFS := afero.NewMemMapFs()\n\t// create test files and directories\n\tappFS.MkdirAll(\"src/a\", 0755)\n\tafero.WriteFile(appFS, \"src/a/b\", []byte(\"file b\"), 0644)\n\tafero.WriteFile(appFS, \"src/c\", []byte(\"file c\"), 0644)\n\tname := \"src/c\"\n\t_, err := appFS.Stat(name)\n\tif os.IsNotExist(err) {\n\t\tt.Errorf(\"file \\\"%s\\\" does not exist.\\n\", name)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a table without borders and with footer in Go\nDESCRIPTION: Example demonstrating how to create a table without borders, with a footer, and using bulk append for data insertion.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ndata := [][]string{\n    []string{\"1/1/2014\", \"Domain name\", \"2233\", \"$10.98\"},\n    []string{\"1/1/2014\", \"January Hosting\", \"2233\", \"$54.95\"},\n    []string{\"1/4/2014\", \"February Hosting\", \"2233\", \"$51.00\"},\n    []string{\"1/4/2014\", \"February Extra Bandwidth\", \"2233\", \"$30.00\"},\n}\n\ntable := tablewriter.NewWriter(os.Stdout)\ntable.SetHeader([]string{\"Date\", \"Description\", \"CV2\", \"Amount\"})\ntable.SetFooter([]string{\"\", \"\", \"Total\", \"$146.93\"}) // Add Footer\ntable.SetBorder(false)                                // Set Border to false\ntable.AppendBulk(data)                                // Add Bulk Data\ntable.Render()\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Keys in JSON Configuration (JSON)\nDESCRIPTION: This snippet demonstrates the structure of a JSON configuration file with nested keys. It's used to explain how Viper can access deeply nested configuration values using dot-delimited paths.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"host\": {\n        \"address\": \"localhost\",\n        \"port\": 5799\n    },\n    \"datastore\": {\n        \"metric\": {\n            \"host\": \"127.0.0.1\",\n            \"port\": 3099\n        },\n        \"warehouse\": {\n            \"host\": \"198.0.0.1\",\n            \"port\": 2112\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Pod Spec Configuration for OpenTelemetry\nDESCRIPTION: YAML configuration for setting up Kubernetes pod specification with OpenTelemetry resource attributes. Defines environment variables for pod name, namespace, and container name.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/contrib/detectors/gcp/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n- name: POD_NAME\n  valueFrom:\n    fieldRef:\n      fieldPath: metadata.name\n- name: NAMESPACE_NAME\n  valueFrom:\n    fieldRef:\n      fieldPath: metadata.namespace\n- name: CONTAINER_NAME\n  value: my-container-name\n- name: OTEL_RESOURCE_ATTRIBUTES\n  value: k8s.pod.name=$(POD_NAME),k8s.namespace.name=$(NAMESPACE_NAME),k8s.container.name=$(CONTAINER_NAME)\n```\n\n----------------------------------------\n\nTITLE: Converting Milliseconds to Nanoseconds in Bash\nDESCRIPTION: This bash command converts milliseconds to nanoseconds by multiplying the epochTimeMilliseconds value by 1,000,000. It's used to update the startTimeUnixNano and endTimeUnixNano fields in the OTLP span data.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/pushing-spans-with-http.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho $((<epochTimeMilliseconds> * 1000000))\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenCensus Receiver Definitions in YAML\nDESCRIPTION: This YAML snippet shows how to enable the OpenCensus receiver by adding it to receiver definitions. The receiver listens for data on a specified endpoint, defaulting to localhost:55678. Users can configure the endpoint using host:port syntax as detailed in gRPC documentation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/receiver/opencensusreceiver/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  opencensus:\n```\n\n----------------------------------------\n\nTITLE: Implementing CallErr for HTTP Call Errors in Go\nDESCRIPTION: This snippet defines a CallErr struct to represent HTTP call errors. It includes the HTTP request, response, and error details. The struct implements the error interface and provides a Verbose() method for detailed error information.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// CallErr represents an HTTP call error. Has a Verbose() method that allows getting the\n// http.Request and Response objects. Implements error.\ntype CallErr struct {\n    Req  *http.Request\n    Resp *http.Response\n    Err  error\n}\n\n// Errors implements error.Error().\nfunc (e CallErr) Error() string {\n    return e.Err.Error()\n}\n\n// Verbose prints a versbose error message with the request or response.\nfunc (e CallErr) Verbose() string {\n    e.Resp.Request = nil // This brings in a bunch of TLS stuff we don't need\n    e.Resp.TLS = nil     // Same\n    return fmt.Sprintf(\"%s:\\nRequest:\\n%s\\nResponse:\\n%s\", e.Err, prettyConf.Sprint(e.Req), prettyConf.Sprint(e.Resp))\n}\n```\n\n----------------------------------------\n\nTITLE: XXHash Digest Methods in Go\nDESCRIPTION: Key methods implemented by the Digest type which implements the hash.Hash64 interface. Includes methods for writing input data and computing the final hash.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (*Digest) Write([]byte) (int, error)\nfunc (*Digest) WriteString(string) (int, error)\nfunc (*Digest) Sum64() uint64\n```\n\n----------------------------------------\n\nTITLE: Enabling TraceQL Local-Blocks Processor Per Tenant (YAML)\nDESCRIPTION: Configuration snippet for enabling the local-blocks processor for TraceQL metrics on a per-tenant basis using tenant overrides. This is required to query recent TraceQL metrics.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-6.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  'tenantID':\n    metrics_generator_processors:\n      - local-blocks\n```\n\n----------------------------------------\n\nTITLE: Terminating Running LState in GopherLua\nDESCRIPTION: Demonstrates how to use Go's context package to terminate a running Lua state, including handling timeouts and cancellation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nL := lua.NewState()\ndefer L.Close()\nctx, cancel := context.WithTimeout(context.Background(), 1*time.Second)\ndefer cancel()\n// set the context to our LState\nL.SetContext(ctx)\nerr := L.DoString(`\n  local clock = os.clock\n  function sleep(n)  -- seconds\n    local t0 = clock()\n    while clock() - t0 <= n do end\n  end\n  sleep(3)\n`)\n// err.Error() contains \"context deadline exceeded\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Exemplar Export Settings\nDESCRIPTION: Examples of enabling/disabling exemplar exports and configuring exemplar filters through environment variables.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/sdk/metric/internal/x/README.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_GO_X_EXEMPLAR=true\n```\n\nLANGUAGE: console\nCODE:\n```\nunset OTEL_GO_X_EXEMPLAR\n```\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_METRICS_EXEMPLAR_FILTER=always_on\n```\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_METRICS_EXEMPLAR_FILTER=always_off\n```\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_METRICS_EXEMPLAR_FILTER=trace_based\n```\n\nLANGUAGE: console\nCODE:\n```\nunset OTEL_METRICS_EXEMPLAR_FILTER\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure for Mapstructure Use Case\nDESCRIPTION: Sample JSON that demonstrates a case where mapstructure would be useful - when the structure depends on a field value ('type' in this case).\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/mitchellh/mapstructure/README.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"person\",\n  \"name\": \"Mitchell\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Table Caption in Go with Tablewriter\nDESCRIPTION: This code snippet shows how to create a simple table with a caption using the Tablewriter library. It initializes data, sets column headers, and displays the table with a caption that describes the content.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ndata := [][]string{\n    []string{\"A\", \"The Good\", \"500\"},\n    []string{\"B\", \"The Very very Bad Man\", \"288\"},\n    []string{\"C\", \"The Ugly\", \"120\"},\n    []string{\"D\", \"The Gopher\", \"800\"},\n}\n\ntable := tablewriter.NewWriter(os.Stdout)\ntable.SetHeader([]string{\"Name\", \"Sign\", \"Rating\"})\ntable.SetCaption(true, \"Movie ratings.\")\n\nfor _, v := range data {\n    table.Append(v)\n}\ntable.Render() // Send output\n\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTracing gRPC Go Package\nDESCRIPTION: This shell command installs the opentracing-contrib/go-grpc package, which is necessary for adding OpenTracing support to gRPC systems in Go. Ensure Go is installed and configured correctly before running the command. The package is added to your Go environment using go get.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/opentracing-contrib/go-grpc/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/opentracing-contrib/go-grpc\n```\n\n----------------------------------------\n\nTITLE: ConvertTextToElementsXML Converter Usage in OTTL\nDESCRIPTION: The ConvertTextToElementsXML converter ensures all text content in XML belongs to dedicated elements. It accepts optional XPath and elementName parameters to customize the conversion.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_19\n\nLANGUAGE: ottl\nCODE:\n```\nConvertTextToElementsXML(log.body)\n```\n\nLANGUAGE: ottl\nCODE:\n```\nConvertTextToElementsXML(log.body, elementName = \"custom\")\n```\n\nLANGUAGE: ottl\nCODE:\n```\nConvertTextToElementsXML(log.body, \"/some/part/\", \"value\")\n```\n\n----------------------------------------\n\nTITLE: Afero Custom Type Usage in Go\nDESCRIPTION: This snippet shows how to use Afero's utility functions as methods bound to a given filesystem using the Afero custom type.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfs := afero.NewMemMapFs()\nafs := &afero.Afero{Fs: fs}\nf, err := afs.TempFile(\"\", \"ioutil-test\")\n```\n\n----------------------------------------\n\nTITLE: Core XXHash API Functions in Go\nDESCRIPTION: The main API functions provided by the xxhash package for computing 64-bit hashes from byte slices and strings. Includes the basic Sum64 functions and Digest struct declaration.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Sum64(b []byte) uint64\nfunc Sum64String(s string) uint64\ntype Digest struct{ ... }\n    func New() *Digest\n```\n\n----------------------------------------\n\nTITLE: Querying Profiles without Traces using Pprof Labels in Go\nDESCRIPTION: This code snippet shows a query that displays profiles for code not covered with traces using pprof labels. The query filters for services where the `span_name` label is empty, indicating no associated span.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/grafana/dskit/spanprofiler/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n{service_name=\"my-service\",span_name=\"\"}\n```\n\n----------------------------------------\n\nTITLE: Formatted Logging with hclog.Fmt in go-hclog in Go\nDESCRIPTION: Demonstrates using hclog.Fmt to format values within log messages, providing flexibility in how information is presented in the logs.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-17_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\ntotalBandwidth := 200\nappLogger.Info(\"total bandwidth exceeded\", \"bandwidth\", hclog.Fmt(\"%d GB/s\", totalBandwidth))\n```\n\n----------------------------------------\n\nTITLE: Stream Parsing XML with Filtering in Go\nDESCRIPTION: Advanced example of XML stream parsing with element filtering based on XPath expressions. Filters books with a price greater than or equal to 10.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/antchfx/xmlquery/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nf, _ := os.Open(\"../books.xml\")\np, err := xmlquery.CreateStreamParser(f, \"/bookstore/book\", \"/bookstore/book[price>=10]\")\nfor {\n\tn, err := p.Read()\n\tif err == io.EOF {\n\t\tbreak\n\t}\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(n)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding WithProducer Option in Go OpenTelemetry SDK\nDESCRIPTION: Adds a WithProducer option for NewManualReader and NewPeriodicReader in the go.opentelemetry.op/otel/sdk/metric package. This allows registering producers on the metric reader.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\n\"go.opentelemetry.op/otel/sdk/metric.WithProducer\"\n```\n\n----------------------------------------\n\nTITLE: Echo Endpoint Request\nDESCRIPTION: Simple health check endpoint that returns 'echo' when service is ready.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/_index.md#2025-04-17_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nGET /api/echo\n```\n\n----------------------------------------\n\nTITLE: Typed Arguments in Grok Parsing with Go\nDESCRIPTION: Demonstrates how to use type conversion in Grok patterns by adding type annotations to field names (e.g., ':int'). Uses ParseTypedString to return typed values in the result map.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/elastic/go-grok/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ng := grok.New()\n\n// use custom patterns\npatternDefinitions := map[string]string{\n    \"NGINX_HOST\":         `(?:%{IP:destination.ip}|%{NGINX_NOTSEPARATOR:destination.domain})(:%{NUMBER:destination.port:int})?`,\n    \"NGINX_NOTSEPARATOR\": `\"[^\\t ,:]\"`,\n}\ng.AddPatterns(patternDefinitions)\n\n// compile grok before use, this will generate regex.Regex based on pattern and \n// subpatterns provided\nerr := g.Compile(\"%{NGINX_HOST}\", true)\n\nres, err := g.ParseTypedString(\"127.0.0.1:1234\")\n```\n\n----------------------------------------\n\nTITLE: Querying Trace Duration in TraceQL\nDESCRIPTION: Demonstrates how to query trace-level intrinsic fields using the new trace scope.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2023-11 TraceQL Extensions.md#2025-04-17_snippet_2\n\nLANGUAGE: traceql\nCODE:\n```\n{ trace:duration > 100ms }\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Default in Go\nDESCRIPTION: Added resource.Default() function for use with meter and tracer providers.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_33\n\nLANGUAGE: Go\nCODE:\n```\nresource.Default()\n```\n\n----------------------------------------\n\nTITLE: Configuring Smithy Build for Go Code Generation\nDESCRIPTION: Example configuration for the go-codegen build plugin in smithy-build.json. It demonstrates how to set up the plugin for generating Go client code based on a Smithy model.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/aws/smithy-go/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"1.0\",\n  \"sources\": [\n    \"models\"\n  ],\n  \"maven\": {\n    \"dependencies\": [\n      \"software.amazon.smithy.go:smithy-go-codegen:0.1.0\"\n    ]\n  },\n  \"plugins\": {\n    \"go-codegen\": {\n      \"service\": \"example.weather#Weather\",\n      \"module\": \"github.com/example/weather\",\n      \"generateGoMod\": true,\n      \"goDirective\": \"1.20\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Azure Blobs\nDESCRIPTION: Demonstrates the new pagination approach using runtime.Pager[T] instead of explicit Marker type. Shows how to iterate through blob listings using the pager pattern.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/migrationguide.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npager := client.NewListBlobsFlatPager(\"my-container\", nil)\nfor pager.More() {\n\tpage, err := pager.NextPage(context.TODO())\n\t// process results\n}\n```\n\n----------------------------------------\n\nTITLE: Result of Basic Grok Parsing in Go\nDESCRIPTION: Shows the resulting map from parsing an IP address and port with named captures, demonstrating how the parsed values are organized in the result map.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/elastic/go-grok/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmap[string]string {\n    \"destination.ip\": \"127.0.0.1\", \n    \"destination.port\": \"1234\", \n}\n```\n\n----------------------------------------\n\nTITLE: Documenting TLS Server Settings\nDESCRIPTION: Configuration structure for TLS server settings including certificate paths and client verification options.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/receiver/otlpreceiver/config.md#2025-04-17_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n### configtls-TLSServerSetting\n\n| Name           | Type   | Default    | Docs                                                                                                                                                                                                                                                             |\n|----------------|--------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: Defining Event Attribute Structure in Parquet for Tempo (Prototext)\nDESCRIPTION: This snippet shows the structure for storing event attributes in Parquet format for Tempo. It uses a simplified key-value pair structure with JSON-encoded strings for values, optimizing for space efficiency at the cost of reduced searchability.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2022-04 Parquet.md#2025-04-17_snippet_2\n\nLANGUAGE: prototext\nCODE:\n```\nrepeated group Attrs {\n    required binary Key (STRING);\n    required binary Value (STRING);\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Package Documentation Header\nDESCRIPTION: Package header with title and badge linking to Go package documentation\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/log/embedded/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Log Embedded\n\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/log/embedded)](https://pkg.go.dev/go.opentelemetry.io/otel/log/embedded)\n```\n\n----------------------------------------\n\nTITLE: Header Regex Matching in Gorilla Mux\nDESCRIPTION: Shows how to use regular expressions to match request headers. This allows for flexible content-type matching or other header-based routing decisions.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nr.HeadersRegexp(\"Content-Type\", \"application/(text|json)\")\n```\n\n----------------------------------------\n\nTITLE: Activating local-blocks processor for all users in Tempo configuration\nDESCRIPTION: This YAML configuration adds the local-blocks processor to the overrides block to enable TraceQL metrics queries for all users.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/traceql-metrics.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Global overrides configuration.\noverrides:\n  metrics_generator_processors: ['local-blocks']\n```\n\n----------------------------------------\n\nTITLE: Defining Union Types in Participle Grammar\nDESCRIPTION: Go code snippet showing how to define union types using interfaces in a Participle grammar.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/participle/v2/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype Value interface { value() }\n\ntype Float struct { Value float64 `@Float` }\nfunc (f Float) value() {}\n\ntype Int struct { Value int `@Int` }\nfunc (f Int) value() {}\n\ntype String struct { Value string `@String` }\nfunc (f String) value() {}\n\ntype Bool struct { Value Boolean `@(\"true\" | \"false\")` }\nfunc (f Bool) value() {}\n```\n\n----------------------------------------\n\nTITLE: Intel Security and Branch Control Features\nDESCRIPTION: Feature flags related to processor security mechanisms, branch prediction, and mitigation of potential side-channel vulnerabilities\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/cpuid/v2/README.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| BHI_CTRL | Branch History Injection and Intra-mode Branch Target Injection |\n| CETIBT | Intel CET Indirect Branch Tracking |\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Zone Ingesters in Jsonnet\nDESCRIPTION: This snippet shows the configuration fields to enable zone-aware ingesters in the Jsonnet config. It allows setting up multi-zone ingester replicas with specified availability parameters.\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nmulti_zone_ingester_enabled: false,\nmulti_zone_ingester_migration_enabled: false,\nmulti_zone_ingester_replicas: 0,\nmulti_zone_ingester_max_unavailable: 25,\n```\n\n----------------------------------------\n\nTITLE: Configuring Viper with a Custom Finder Implementation in Go\nDESCRIPTION: Example of initializing Viper with a custom Finder implementation using the WithFinder option. This allows users to define their own logic for locating configuration files.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/UPDATES.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nv := viper.NewWithOptions(\n    viper.WithFinder(&MyFinder{}),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sampling Endpoint in Jaeger Go Client\nDESCRIPTION: Use the JAEGER_SAMPLING_ENDPOINT environment variable to configure the sampling endpoint.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/uber/jaeger-client-go/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nJAEGER_SAMPLING_ENDPOINT=http://jaeger-agent:5778/sampling\n```\n\n----------------------------------------\n\nTITLE: TraceQL Error Rate Query\nDESCRIPTION: TraceQL query to get the error rate grouped by resource.cloud.region.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/metrics-summary.md#2025-04-17_snippet_2\n\nLANGUAGE: traceql\nCODE:\n```\n{ status=error } | rate() by (resource.cloud.region)\n```\n\n----------------------------------------\n\nTITLE: CircuitBreaker Execute Method Signature in Go\nDESCRIPTION: The Execute method signature that wraps a request function with circuit breaker functionality, returning the result and any errors encountered.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/sony/gobreaker/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (cb *CircuitBreaker) Execute(req func() (interface{}, error)) (interface{}, error)\n```\n\n----------------------------------------\n\nTITLE: Enabling Multi-tenancy in Tempo Backend - YAML Config\nDESCRIPTION: YAML configuration for enabling multi-tenancy in Tempo backend components.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/manage-advanced-systems/multitenancy.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmultitenancy_enabled: true\n```\n\n----------------------------------------\n\nTITLE: Documenting gRPC Keepalive Configuration\nDESCRIPTION: Configuration structure for gRPC server keepalive settings including server parameters and enforcement policy. References Golang gRPC keepalive documentation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/receiver/otlpreceiver/config.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### configgrpc-KeepaliveServerConfig\n\n| Name               | Type                                                                            | Default    | Docs                                                                                                                                                                                                                                                                          |\n|--------------------|---------------------------------------------------------------------------------|------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress in YAML\nDESCRIPTION: Sets up Nginx ingress configuration with host and path settings for external access.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/helm-charts/tempo-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nnginx:\n  ingress:\n    enabled: true\n    ingressClassName: nginx\n    hosts:\n      - host: <ingress-host>\n        paths:\n          - path: /\n            pathType: Prefix\n    tls: {}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Brokers with Seed Brokers in Go\nDESCRIPTION: Implements functionality to refresh brokers given a list of seed brokers in the Kafka client.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/IBM/sarama/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nRefresh brokers given list of seed brokers\n```\n\n----------------------------------------\n\nTITLE: Connecting Viper to etcd Remote Provider (Go)\nDESCRIPTION: Example showing how to configure Viper to read configuration from an etcd remote provider. It specifies the provider type, endpoint, and path, and then reads the remote configuration.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nviper.AddRemoteProvider(\"etcd\", \"http://127.0.0.1:4001\",\"/config/hugo.json\")\nviper.SetConfigType(\"json\") // because there is no file extension in a stream of bytes, supported extensions are \"json\", \"toml\", \"yaml\", \"yml\", \"properties\", \"props\", \"prop\", \"env\", \"dotenv\"\nerr := viper.ReadRemoteConfig()\n```\n\n----------------------------------------\n\nTITLE: Reading /sys File in Go\nDESCRIPTION: This code snippet reads a small file from the `/sys` filesystem using `util.SysReadFile`. This function is optimized for reading small files by skipping the `stat` system call.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-17_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n\"    data, err := util.SysReadFile(\"/sys/class/power_supply/BAT0/capacity\")\"\n```\n\n----------------------------------------\n\nTITLE: Installing tablewriter package in Go\nDESCRIPTION: Command for installing the tablewriter package using go get.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/olekukonko/tablewriter\n```\n\n----------------------------------------\n\nTITLE: Formatting Code in Bash\nDESCRIPTION: Command to automatically fix linting errors in the codebase. Requires gofmt and goimports binaries to be accessible via $PATH.\nSOURCE: https://github.com/grafana/tempo/blob/main/CONTRIBUTING.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake fmt\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Response Size in TraceQL\nDESCRIPTION: This example computes the average HTTP response size for spans named 'GET /:endpoint' using the avg_over_time() function in TraceQL.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/metrics-queries/functions.md#2025-04-17_snippet_9\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ name = \"GET /:endpoint\" } | avg_over_time(span.http.response.size)\n```\n\n----------------------------------------\n\nTITLE: Creating a New CircuitBreaker Instance in Go\nDESCRIPTION: Function signature for creating a new CircuitBreaker instance with custom settings.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/sony/gobreaker/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc NewCircuitBreaker(st Settings) *CircuitBreaker\n```\n\n----------------------------------------\n\nTITLE: HTTP Client with Gzip Transport\nDESCRIPTION: Example of wrapping an HTTP client transport with gzip compression functionality. Shows how to create a client that handles compressed responses more efficiently than the standard library.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/gzhttp/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc ExampleTransport() {\n\t// Get an HTTP client.\n\tclient := http.Client{\n\t\t// Wrap the transport:\n\t\tTransport: gzhttp.Transport(http.DefaultTransport),\n\t}\n\n\tresp, err := client.Get(\"https://google.com\")\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\t\n\tbody, _ := ioutil.ReadAll(resp.Body)\n\tfmt.Println(\"body:\", string(body))\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Directories with Original Upstream Licenses for Grafana Tempo\nDESCRIPTION: This code block is intended to list directories and their subdirectories that maintain their original upstream licenses. However, the list is empty in the provided content.\nSOURCE: https://github.com/grafana/tempo/blob/main/LICENSING.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Filtering traces by unscoped attribute in TraceQL\nDESCRIPTION: This TraceQL query finds traces where the attribute 'sla' is set to 'critical', using an unscoped attribute. Unscoped attributes are used when the attribute's scope (span or resource) is unknown.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_27\n\nLANGUAGE: TraceQL\nCODE:\n```\n\"{ .sla = \\\"critical\\\" }\"\n```\n\n----------------------------------------\n\nTITLE: Check for Existing Debug Image\nDESCRIPTION: This command checks whether the 'grafana/tempo-debug' image is present in the Docker images. It filters the image list using grep.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/debug/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndocker images | grep grafana/tempo-debug\n```\n\n----------------------------------------\n\nTITLE: Importing pflag as a replacement for Go's flag package\nDESCRIPTION: Shows how to import pflag as a drop-in replacement for Go's native flag package. When imported under the name \"flag\", existing code should continue to function without changes.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport flag \"github.com/spf13/pflag\"\n```\n\n----------------------------------------\n\nTITLE: Creating XML Documents Programmatically in Go\nDESCRIPTION: Example showing how to create XML documents programmatically by constructing a tree of Node objects instead of using xml.Marshal.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/antchfx/xmlquery/README.md#2025-04-17_snippet_19\n\nLANGUAGE: go\nCODE:\n```\ndoc := &xmlquery.Node{\n\tType: xmlquery.DeclarationNode,\n\tData: \"xml\",\n\tAttr: []xml.Attr{\n\t\txml.Attr{Name: xml.Name{Local: \"version\"}, Value: \"1.0\"},\n\t},\n}\nroot := &xmlquery.Node{\n\tData: \"rss\",\n\tType: xmlquery.ElementNode,\n}\ndoc.FirstChild = root\nchannel := &xmlquery.Node{\n\tData: \"channel\",\n\tType: xmlquery.ElementNode,\n}\nroot.FirstChild = channel\ntitle := &xmlquery.Node{\n\tData: \"title\",\n\tType: xmlquery.ElementNode,\n}\ntitle_text := &xmlquery.Node{\n\tData: \"W3Schools Home Page\",\n\tType: xmlquery.TextNode,\n}\ntitle.FirstChild = title_text\nchannel.FirstChild = title\n\nfmt.Println(doc.OutputXML(true))\nfmt.Println(doc.OutputXMLWithOptions(WithOutputSelf()))\n```\n\n----------------------------------------\n\nTITLE: Package Import Updates\nDESCRIPTION: List of package imports referenced in the changes, showing key OpenTelemetry Go packages that were modified.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n\"go.opentelemetry.io/otel/baggage\"\n\"go.opentelemetry.io/otel/sdk/metric\"\n\"go.opentelemetry.io/otel/bridge/opentracing\"\n\"go.opentelemetry.io/otel/exporters/otlp/otlpmetric\"\n\"go.opentelemetry.io/otel/trace/embedded\"\n\"go.opentelemetry.io/otel/trace/noop\"\n```\n\n----------------------------------------\n\nTITLE: Capturing Tokens in AST Structure\nDESCRIPTION: Demonstrates how to capture lexer tokens directly into AST structure fields. This new feature allows for efficient token handling and improved parsing capabilities.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/participle/v2/CHANGES.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype ast struct {\n    Head lexer.Token   `@Ident`\n    Tail []lexer.Token `@(Ident*)`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC for Trace Data Writing\nDESCRIPTION: RBAC configuration for enabling write access to trace data for a service account in the dev tenant.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/multitenancy.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: otel-collector\n  namespace: otel\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: tempostack-traces-write\nrules:\n  - apiGroups:\n      - 'tempo.grafana.com'\n    resources:\n      - dev\n    resourceNames:\n      - traces\n    verbs:\n      - 'create'\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: tempostack-traces\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: tempostack-traces-write\nsubjects:\n  - kind: ServiceAccount\n    name: otel-collector\n    namespace: otel\n```\n\n----------------------------------------\n\nTITLE: Updating B3 Propagator in Go\nDESCRIPTION: Updates to the B3 propagator to correctly handle header names, sampling values, and debug flags according to the B3 specification.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_43\n\nLANGUAGE: Go\nCODE:\n```\n// The B3 Single Header name is now correctly `b3` instead of the previous `X-B3`.\n// The B3 propagator now correctly supports sampling only values (`b3: 0`, `b3: 1`, or `b3: d`) for a Single B3 Header.\n// The B3 propagator now propagates the debug flag and omits the `X-B3-Sampling` header when debug flag is set.\n// The B3 propagator now tracks \"unset\" sampling state and does not set the `X-B3-Sampling` header when injecting.\n```\n\n----------------------------------------\n\nTITLE: Setting Cardinality Limit Environment Variables\nDESCRIPTION: Examples of setting cardinality limits through environment variables to control metric stream collection limits.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/sdk/metric/internal/x/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_GO_X_CARDINALITY_LIMIT=2000\n```\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_GO_X_CARDINALITY_LIMIT=-1\n```\n\nLANGUAGE: console\nCODE:\n```\nunset OTEL_GO_X_CARDINALITY_LIMIT\n```\n\n----------------------------------------\n\nTITLE: Defining Event Attributes Structure in YAML\nDESCRIPTION: Schema definition for event attributes in Parquet format, using protocol-buffer encoding. The structure includes a key-value pair structure where both fields are required binary values with the key stored as a string.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/schema.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrepeated group Attrs {\n    required binary Key (STRING);\n    required binary Value (STRING);\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Map Attributes in OTTL\nDESCRIPTION: Function to reduce the number of elements in a pcommon.Map to a specified limit, with optional priority keys to preserve.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_6\n\nLANGUAGE: OTTL\nCODE:\n```\nlimit(log.attributes, 100, [])\n```\n\nLANGUAGE: OTTL\nCODE:\n```\nlimit(resource.attributes, 50, [\"http.host\", \"http.method\"])\n```\n\n----------------------------------------\n\nTITLE: Importing Cobra in Go Application\nDESCRIPTION: Code snippet showing how to import the Cobra library in a Go application.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/cobra/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/spf13/cobra\"\n```\n\n----------------------------------------\n\nTITLE: Timestamp and Caller Logging Setup\nDESCRIPTION: Shows how to add automatic timestamp and caller information to log entries.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-kit/log/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar logger log.Logger\nlogger = log.NewLogfmtLogger(log.NewSyncWriter(os.Stderr))\nlogger = log.With(logger, \"ts\", log.DefaultTimestampUTC, \"caller\", log.DefaultCaller)\n\nlogger.Log(\"msg\", \"hello\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Tenant-Specific Overrides in Tempo YAML\nDESCRIPTION: This snippet demonstrates how to set up tenant-specific overrides, including file path and polling period configuration.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n[per_tenant_override_config: <string> | default = \"\"]\n\n[per_tenant_override_period: <duration> | default = 10s]\n\nuser_configurable_overrides:\n  [enabled: <bool> | default = false]\n  [poll_interval: <duration> | default = 60s]\n\n  client:\n    [backend: <string>]\n    local:\n    gcs:\n    s3:\n    azure:\n    [confirm_versioning: <bool> | default = true]\n\n  api:\n    [check_for_conflicting_runtime_overrides: <bool> | default = false]\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SDK Logging in Go\nDESCRIPTION: Demonstrates how to set up logging for Azure SDK modules using azcore logging. Shows setting a log listener to output to stdout and configuring specific event logging for azidentity credentials.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n\n// print log output to stdout\nazlog.SetListener(func(event azlog.Event, s string) {\n    fmt.Println(s)\n})\n\n// include only azidentity credential logs\nazlog.SetEvents(azidentity.EventAuthentication)\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Spans in OpenCensus\nDESCRIPTION: Example of starting and ending a span in OpenCensus tracing. Spans represent a unit of work in a distributed trace and track latency and metadata about the operation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opencensus.io/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nctx, span := trace.StartSpan(ctx, \"cache.Get\")\ndefer span.End()\n\n// Do work to get from cache.\n```\n\n----------------------------------------\n\nTITLE: Capturing Boolean Values in Participle Grammar\nDESCRIPTION: Go code snippet demonstrating how to capture literal boolean values in a Participle grammar using a custom type.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/participle/v2/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype Boolean bool\n\nfunc (b *Boolean) Capture(values []string) error {\n\t*b = values[0] == \"true\"\n\treturn nil\n}\n\ntype Value struct {\n\tFloat  *float64 `  @Float`\n\tInt    *int     `| @Int`\n\tString *string  `| @String`\n\tBool   *Boolean `| @(\"true\" | \"false\")`\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying RehydratePriority Enum\nDESCRIPTION: YAML directive to modify the RehydratePriority enum in the swagger document.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    delete $.RehydratePriority[\"x-ms-enum\"];\n    $.RehydratePriority[\"x-ms-enum\"] = {\n        \"name\": \"RehydratePriority\",\n        \"modelAsString\": false\n    };\n```\n\n----------------------------------------\n\nTITLE: Comparing Struct Field Ordering in go-toml v1 vs v2\nDESCRIPTION: Demonstration of the difference in struct field ordering when marshaling. V1 emits fields alphabetically by default, while v2 preserves the order in which fields are defined in the struct.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype S struct {\n\tB string\n\tA string\n}\n\ndata := S{\n\tB: \"B\",\n\tA: \"A\",\n}\n\nb, _ := tomlv1.Marshal(data)\nfmt.Println(\"v1:\\n\" + string(b))\n\nb, _ = tomlv2.Marshal(data)\nfmt.Println(\"v2:\\n\" + string(b))\n\n// Output:\n// v1:\n// A = \"A\"\n// B = \"B\"\n\n// v2:\n// B = 'B'\n// A = 'A'\n```\n\n----------------------------------------\n\nTITLE: Removing Container and Blob Parameters from Path\nDESCRIPTION: YAML directive to remove containerName and blob parameters from the path in the swagger document, as direct URIs are used instead.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"]\n  transform: >\n    for (const property in $)\n    {\n        if (property.includes('/{containerName}/{blob}'))\n        {\n            $[property][\"parameters\"] = $[property][\"parameters\"].filter(function(param) { return (typeof param['$ref'] === \"undefined\") || (false == param['$ref'].endsWith(\"#/parameters/ContainerName\") && false == param['$ref'].endsWith(\"#/parameters/Blob\"))});\n        } \n        else if (property.includes('/{containerName}'))\n        {\n            $[property][\"parameters\"] = $[property][\"parameters\"].filter(function(param) { return (typeof param['$ref'] === \"undefined\") || (false == param['$ref'].endsWith(\"#/parameters/ContainerName\"))});\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Debug Logging Configuration\nDESCRIPTION: Configuration example for enabling debug logging to troubleshoot OTTL conditions.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/processor/filterprocessor/README.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  filelog:\n    start_at: beginning\n    include: [ /Users/tylerhelmuth/projects/opentelemetry-collector-contrib/local/test.log ]\n\nprocessors:\n  filter:\n    error_mode: ignore\n    logs:\n      log_record:\n        - body == \"test\"\n\nexporters:\n  debug:\n\nservice:\n  telemetry:\n    logs:\n      level: debug\n  pipelines:\n    logs:\n      receivers:\n        - filelog\n      processors:\n        - filter\n      exporters:\n        - debug\n```\n\n----------------------------------------\n\nTITLE: Print Initial Config Command\nDESCRIPTION: Command to examine the final configuration after merging multiple sources.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/service/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n   ./otelcorecol print-initial-config --config=file:file.yaml --config=http:http://remote:8080/config --config=file:file2.yaml\n```\n\n----------------------------------------\n\nTITLE: Parsing INI File with Participle in Go\nDESCRIPTION: Demonstrates how to build a parser using the defined grammar and parse an INI file string.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/participle/v2/TUTORIAL.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nparser, err := participle.Build[INI](\n  participle.Unquote(\"String\"),\n  participle.Union[Value](String{}, Number{}),\n)\n\nini, err := parser.ParseString(\"\", `\nage = 21\nname = \"Bob Smith\"\n\n[address]\ncity = \"Beverly Hills\"\npostal_code = 90210\n`)\n```\n\n----------------------------------------\n\nTITLE: Querying attribute names with spaces in TraceQL\nDESCRIPTION: This TraceQL query finds spans with the attribute name 'attribute name with space' and the value 'value', using quoted attribute syntax. Quoted attributes are used to handle attribute names containing special characters.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_28\n\nLANGUAGE: TraceQL\nCODE:\n```\n\"{ .\\\"attribute name with space\\\" = \\\"value\\\" }\"\n```\n\n----------------------------------------\n\nTITLE: ConvertCase Converter Usage in OTTL\nDESCRIPTION: The ConvertCase converter transforms a string to a specified case format (lower, upper, snake, or camel). It returns an error if the target is not a string or if an invalid case format is specified.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_17\n\nLANGUAGE: ottl\nCODE:\n```\nConvertCase(metric.name, \"snake\")\n```\n\n----------------------------------------\n\nTITLE: Writing Columns of Typed Arrays in Go using parquet.GenericBuffer\nDESCRIPTION: This snippet demonstrates how to write columns of string values to a parquet.GenericBuffer. It uses the WriteValues method to write an array of parquet.Value objects created from the input string slice.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/parquet-go/parquet-go/README.md#2025-04-17_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype RowType struct { FirstName, LastName string }\n\nfunc writeColumns(buffer *parquet.GenericBuffer[RowType], firstNames []string) error {\n    values := make([]parquet.Value, len(firstNames))\n    for i := range firstNames {\n        values[i] = parquet.ValueOf(firstNames[i])\n    }\n    _, err := buffer.ColumnBuffers()[0].WriteValues(values)\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Viper Finder Interface in Go\nDESCRIPTION: Definition of the Finder interface that allows customization of how Viper searches for configuration files. The interface works with afero.Fs filesystem and returns paths to config files.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/UPDATES.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Finder looks for files and directories in an [afero.Fs] filesystem.\ntype Finder interface {\n\tFind(fsys afero.Fs) ([]string, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MinIO Object Storage Secret for Tempo Operator\nDESCRIPTION: This command creates a Kubernetes secret containing MinIO bucket information and credentials for Tempo Operator to use as object storage.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/object-storage.md#2025-04-17_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nkubectl create secret generic tempostack-dev-minio \\\n  --from-literal=bucket=\"<BUCKET_NAME>\" \\\n  --from-literal=endpoint=\"<MINIO_BUCKET_ENDPOINT>\" \\\n  --from-literal=access_key_id=\"<MINIO_ACCESS_KEY_ID>\" \\\n  --from-literal=access_key_secret=\"<MINIO_ACCESS_KEY_SECRET>\"\n```\n\n----------------------------------------\n\nTITLE: Recording Measurements in OpenCensus Stats\nDESCRIPTION: Example of recording a measurement with OpenCensus stats. The measurement is associated with a predefined measure and is implicitly tagged with tags from the provided context.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opencensus.io/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nstats.Record(ctx, videoSize.M(102478))\n```\n\n----------------------------------------\n\nTITLE: Configuring Compactor Block Retention in Tempo\nDESCRIPTION: Configuration for the compactor's compacted block retention period, which determines how long compacted blocks are kept in the backend. This ensures queriers with stale blocklists can still access necessary data during their polling cycles.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/polling.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncompactor:\n  compaction:\n    # How long to leave a block in the backend after it has been compacted successfully. Default is 1h\n    [compacted_block_retention: <duration>]\n```\n\n----------------------------------------\n\nTITLE: Formatting Relative Time in Go using Humanize\nDESCRIPTION: Shows how to use the humanize.Time() function to convert a time.Time instance into a human-readable relative time string.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"This was touched %s.\", humanize.Time(someTimeInstance)) // This was touched 7 hours ago.\n```\n\n----------------------------------------\n\nTITLE: Installing mapstructure in Go\nDESCRIPTION: This shell command installs the mapstructure library version 2 for Go, which is used for decoding map values to structured data. The command requires Go to be set up in the environment.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-viper/mapstructure/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/go-viper/mapstructure/v2\n```\n\n----------------------------------------\n\nTITLE: OTTL Function Naming Conventions\nDESCRIPTION: Standardized naming conventions for OTTL functions, including rules for plurality, word separation, and parameter ordering.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Function names MUST start with a verb unless it is a Factory that creates a new type.\n- Converters MUST be UpperCamelCase.\n- Function names that contain multiple words MUST separate those words with `_`.\n- Functions that interact with multiple items MUST have plurality in the name. Ex: `truncate_all`, `keep_keys`, `replace_all_matches`.\n- Functions that interact with a single item MUST NOT have plurality in the name. If a function would interact with multiple items due to a condition, like `where`, it is still considered singular. Ex: `set`, `delete`, `replace_match`.\n- Functions that change a specific target MUST set the target as the first parameter.\n```\n\n----------------------------------------\n\nTITLE: Exposing Metrics with Expvar in Go\nDESCRIPTION: Demonstrates how to maintain all metrics along with expvars at /debug/metrics using the Exp function from the exp package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/rcrowley/go-metrics/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/rcrowley/go-metrics/exp\"\n\nexp.Exp(metrics.DefaultRegistry)\n```\n\n----------------------------------------\n\nTITLE: Advanced Environment Variable Processing in Go\nDESCRIPTION: Shows how to use `env.ProviderWithValue` to transform both environment variable keys and values, supporting complex type conversions like string slices.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nk.Load(env.ProviderWithValue(\"MYVAR_\", \".\", func(s string, v string) (string, interface{}) {\n\tkey := strings.Replace(strings.ToLower(strings.TrimPrefix(s, \"MYVAR_\")), \"_\", \".\", -1)\n\n\tif strings.Contains(v, \" \") {\n\t\treturn key, strings.Split(v, \" \")\n\t}\n\n\treturn key, v\n}), nil)\n```\n\n----------------------------------------\n\nTITLE: Checking for Specific Error Values\nDESCRIPTION: Demonstrates using errors.Is to check for specific error values within a multierror\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nerr := somefunc()\nif errors.Is(err, os.ErrNotExist) {\n\t// err contains os.ErrNotExist\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Interpolation in Kong Help Strings\nDESCRIPTION: This snippet demonstrates how to use variable interpolation in the Kong parser for Go applications. It sets default values using the `kong.Vars` method and defines how variables can be embedded in help strings and default values. The variables `${default}` and `${enum}` are special values used in help strings.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/kong/README.md#2025-04-17_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\ntype cli struct {\n  Config string `type:\"path\" default:\"${config_file}\"`\n}\n\nfunc main() {\n  kong.Parse(&cli,\n    kong.Vars{\n      \"config_file\": \"~/.app.conf\",\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Total Service Graph Edges in PromQL\nDESCRIPTION: A PromQL query to determine the total rate of service graph edges being processed.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/metrics-generator.md#2025-04-17_snippet_8\n\nLANGUAGE: promql\nCODE:\n```\nsum(rate(tempo_metrics_generator_processor_service_graphs_edges{}[1m]))\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenTelemetry Specification v0.5.0 in Go\nDESCRIPTION: Implementation of the OpenTelemetry specification v0.5.0, including changes to metric SDK, exporters, and instrumentation versioning.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_46\n\nLANGUAGE: Go\nCODE:\n```\n// This release implements the v0.5.0 version of the OpenTelemetry specification.\n\n// New `Accumulation` type to metric SDK to transport telemetry from `Accumulator`s to `Processor`s.\n// `Meter` and `Tracer` implementations accept instrumentation version as an optional argument.\n// New `aggregation.Kind` in the export metric API.\n// The OTLP exporter includes the instrumentation version in telemetry it exports.\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling Viper Configuration with Custom Delimiter (Go)\nDESCRIPTION: This snippet shows how to unmarshal Viper configuration when the keys contain dots. It demonstrates changing the key delimiter and unmarshaling into a struct with nested fields.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_34\n\nLANGUAGE: go\nCODE:\n```\nv := viper.NewWithOptions(viper.KeyDelimiter(\"::\"))\n\nv.SetDefault(\"chart::values\", map[string]any{\n\t\"ingress\": map[string]any{\n\t\t\"annotations\": map[string]any{\n\t\t\t\"traefik.frontend.rule.type\":                 \"PathPrefix\",\n\t\t\t\"traefik.ingress.kubernetes.io/ssl-redirect\": \"true\",\n\t\t},\n\t},\n})\n\ntype config struct {\n\tChart struct{\n\t\tValues map[string]any\n\t}\n}\n\nvar C config\n\nv.Unmarshal(&C)\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Blocks Processor to Flush RF1 Blocks in YAML\nDESCRIPTION: YAML configuration to enable flushing of RF1 blocks to object storage for historical data queries in Tempo's metrics generator.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/upgrade.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics_generator:\n  processor:\n    local_blocks:\n      flush_to_storage: true\n```\n\n----------------------------------------\n\nTITLE: OTTL Map Value Examples\nDESCRIPTION: Examples demonstrating the syntax for creating maps in OTTL, including empty maps, simple key-value pairs, and nested maps.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/LANGUAGE.md#2025-04-17_snippet_2\n\nLANGUAGE: OTTL\nCODE:\n```\n{}\n{\"foo\": \"bar\"}\n{\"foo\": {\"a\": 2}}\n{\"foo\": {\"a\": attributes[\"key\"]}}\n```\n\n----------------------------------------\n\nTITLE: TraceQL Quantile Query with Time Interval\nDESCRIPTION: A TraceQL metrics query demonstrating how to calculate a 95th percentile quantile over a 5-minute interval for span durations.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2023-11 TraceQL Metrics.md#2025-04-17_snippet_3\n\nLANGUAGE: traceql\nCODE:\n```\nquantile_over_time(duration, 0.95, 5m)\n```\n\n----------------------------------------\n\nTITLE: Modifying Container Client Methods in Go\nDESCRIPTION: YAML directive to remove pager methods and export various generated methods in the container client Go file.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: zz_container_client.go\n    where: $\n    transform: >\n      return $.\n        replace(/func \\(client \\*ContainerClient\\) NewListBlobFlatSegmentPager\\(.+\\/\\/ listBlobFlatSegmentCreateRequest creates the ListBlobFlatSegment request/s, `//\\n// listBlobFlatSegmentCreateRequest creates the ListBlobFlatSegment request`).\n        replace(/\\(client \\*ContainerClient\\) listBlobFlatSegmentCreateRequest\\(/, `(client *ContainerClient) ListBlobFlatSegmentCreateRequest(`).\n        replace(/\\(client \\*ContainerClient\\) listBlobFlatSegmentHandleResponse\\(/, `(client *ContainerClient) ListBlobFlatSegmentHandleResponse(`);\n```\n\n----------------------------------------\n\nTITLE: Viewing WAL/Blocks in Tempo Data\nDESCRIPTION: This command displays the contents of the tempo-data directory, which is utilized for storage in the Tempo component of the setup. It requires access to the directory where Tempo writes its WAL/blocks. The output shows the files being generated by the Tempo instance in real-time.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/otel-collector/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nls tempo-data/\n```\n\n----------------------------------------\n\nTITLE: HTTP Method Pattern Match\nDESCRIPTION: Query to find traces with specific HTTP methods using regex\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_32\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ span.http.method =~ \"DELETE|GET\" }\n```\n\n----------------------------------------\n\nTITLE: Loading XML from URL in Go\nDESCRIPTION: Example showing how to load and parse an XML document directly from a URL.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/antchfx/xmlquery/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ndoc, err := xmlquery.LoadURL(\"http://www.example.com/sitemap.xml\")\n```\n\n----------------------------------------\n\nTITLE: Old Cache Configuration Example (YAML)\nDESCRIPTION: This YAML snippet shows the old cache configuration block in Grafana Tempo before the cache refactoring. It demonstrates the nested structure of the cache settings within the storage configuration.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/upgrade.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"storage:\\n  trace:\\n    cache:\\n    search:\\n      cache_control:\\n    background_cache:\\n    memcached:\\n    redis:\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Azure Identity Logging in Go\nDESCRIPTION: This snippet demonstrates how to enable and configure logging for the azidentity module to help debug authentication issues. It sets up a listener to print log output to stdout and configures logging to include only azidentity credential logs.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n\n// print log output to stdout\nazlog.SetListener(func(event azlog.Event, s string) {\n    fmt.Println(s)\n})\n\n// include only azidentity credential logs\nazlog.SetEvents(azidentity.EventAuthentication)\n```\n\n----------------------------------------\n\nTITLE: Intel Advanced Vector Extensions (AVX) Features\nDESCRIPTION: Documenting Intel AVX instruction set extensions for x86 processors, including various vector processing capabilities and computational optimizations\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/cpuid/v2/README.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| AVX | AVX functions |\n| AVX2 | AVX2 functions |\n```\n\n----------------------------------------\n\nTITLE: Configuring TraceQL metrics for on-premises environments\nDESCRIPTION: This YAML configuration optimizes TraceQL metrics queries for on-premises environments with lower concurrency but larger job sizes.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/traceql-metrics.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nquery_frontend:\n    metrics:\n        concurrent_jobs: 8\n        target_bytes_per_job: 1.25e+09 # ~1.25GB\n```\n\n----------------------------------------\n\nTITLE: Installing Cobra with Go Get\nDESCRIPTION: Command to install the latest version of the Cobra library using Go's package manager.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/cobra/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/spf13/cobra@latest\n```\n\n----------------------------------------\n\nTITLE: Stdlib Logger Redirection to Logfmt\nDESCRIPTION: Demonstrates how to redirect go-kit logger output through the standard library logger.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-kit/log/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nlogger := kitlog.NewLogfmtLogger(kitlog.StdlibWriter{})\nlogger.Log(\"legacy\", true, \"msg\", \"at least it's something\")\n```\n\n----------------------------------------\n\nTITLE: Installing JSON-Patch Library with Go\nDESCRIPTION: Commands for installing the latest version of the JSON-patch library or specific versions using Go modules.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/evanphx/json-patch/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/evanphx/json-patch/v5\n```\n\n----------------------------------------\n\nTITLE: Documenting CORS Configuration\nDESCRIPTION: Configuration structure for Cross-Origin Resource Sharing (CORS) settings including allowed origins, headers, and cache duration.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/receiver/otlpreceiver/config.md#2025-04-17_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n### confighttp-CORSConfig\n\n| Name            | Type     | Default    | Docs                                                                                                                                                                                                                                                                       |\n|-----------------|----------|------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: Java gRPC Client Support with cmux in Go\nDESCRIPTION: Special configuration for handling Java gRPC clients with cmux, which require the server to send a SETTINGS frame. This snippet shows how to properly match Java gRPC clients using MatchWithWriters.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/soheilhy/cmux/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngrpcl := m.MatchWithWriters(cmux.HTTP2MatchHeaderFieldSendSettings(\"content-type\", \"application/grpc\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring No White Space and Table Padding in Go\nDESCRIPTION: This code demonstrates how to configure a table with specific alignment options, no white spaces, and padding using the Tablewriter library. The snippet shows how to set multiple formatting options and add bulk data to the table.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ndata := [][]string{\n    {\"node1.example.com\", \"Ready\", \"compute\", \"1.11\"},\n    {\"node2.example.com\", \"Ready\", \"compute\", \"1.11\"},\n    {\"node3.example.com\", \"Ready\", \"compute\", \"1.11\"},\n    {\"node4.example.com\", \"NotReady\", \"compute\", \"1.11\"},\n}\n\ntable := tablewriter.NewWriter(os.Stdout)\ntable.SetHeader([]string{\"Name\", \"Status\", \"Role\", \"Version\"})\ntable.SetAutoWrapText(false)\ntable.SetAutoFormatHeaders(true)\ntable.SetHeaderAlignment(ALIGN_LEFT)\ntable.SetAlignment(ALIGN_LEFT)\ntable.SetCenterSeparator(\"\")\ntable.SetColumnSeparator(\"\")\ntable.SetRowSeparator(\"\")\ntable.SetHeaderLine(false)\ntable.SetBorder(false)\ntable.SetTablePadding(\"\t\") // pad with tabs\ntable.SetNoWhiteSpace(true)\ntable.AppendBulk(data) // Add Bulk Data\ntable.Render()\n\n```\n\n----------------------------------------\n\nTITLE: Logging Metrics to Standard Error in Go\nDESCRIPTION: Shows how to periodically log every metric in human-readable form to standard error using the Log function.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/rcrowley/go-metrics/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngo metrics.Log(metrics.DefaultRegistry, 5 * time.Second, log.New(os.Stderr, \"metrics: \", log.Lmicroseconds))\n```\n\n----------------------------------------\n\nTITLE: OTTL Math Expression Examples\nDESCRIPTION: Examples of valid math expressions showing basic arithmetic, time calculations, and function usage. Supports int64, float64, time.Time and time.Duration types with operators +, -, *, / and parentheses for grouping.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/LANGUAGE.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n1 + 1\nend_time_unix_nano - end_time_unix_nano\nsum([1, 2, 3, 4]) + (10 / 1) - 1\n```\n\n----------------------------------------\n\nTITLE: Multiple Pipeline Exporter Configuration\nDESCRIPTION: Demonstrates using a connector as an exporter in multiple pipelines simultaneously.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/connector/README.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  foo/traces:\n  foo/metrics:\n  foo/logs:\nexporters:\n  bar/traces_backend:\n  bar/metrics_backend:\n  bar/logs_backend:\nconnectors:\n  count:\nservice:\n  pipelines:\n    traces:\n      receivers: [foo/traces]\n      exporters: [bar/traces_backend, count]\n    metrics:\n      receivers: [foo/metrics]\n      exporters: [bar/metrics_backend, count]\n    logs:\n      receivers: [foo/logs]\n      exporters: [bar/logs_backend, count]\n    metrics/counts:\n      receivers: [count]\n      exporters: [bar/metrics_backend]\n```\n\n----------------------------------------\n\nTITLE: Deploying MinIO Storage Backend\nDESCRIPTION: This command applies a YAML file to deploy MinIO as a storage backend for Tempo in the Kubernetes cluster.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/quickstart.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/grafana/tempo-operator/main/minio.yaml\n```\n\n----------------------------------------\n\nTITLE: Closing Jaeger Tracer with Defer\nDESCRIPTION: Best practice for properly closing the Jaeger tracer to ensure all buffered spans are flushed before program exit.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/uber/jaeger-client-go/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntracer, closer, err := cfg.NewTracer(...)\ndefer closer.Close()\n```\n\n----------------------------------------\n\nTITLE: Querying Service Graph Dropped Spans in PromQL\nDESCRIPTION: A PromQL query to check if service graph spans are being dropped due to reaching the maximum items limit.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/metrics-generator.md#2025-04-17_snippet_10\n\nLANGUAGE: promql\nCODE:\n```\nsum(rate(tempo_metrics_generator_processor_service_graphs_dropped_spans{}[1m]))\n```\n\n----------------------------------------\n\nTITLE: Using Custom Writer with Color in Go\nDESCRIPTION: Examples of using custom io.Writer with color output\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Use your own io.Writer output\ncolor.New(color.FgBlue).Fprintln(myWriter, \"blue color!\")\n\nblue := color.New(color.FgBlue)\nblue.Fprint(writer, \"This will print text in blue.\")\n```\n\n----------------------------------------\n\nTITLE: Opening Reader Content in Browser\nDESCRIPTION: Function to consume contents from an io.Reader and display them in a new browser window, useful for dynamically generated content\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pkg/browser/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc OpenReader(r io.Reader) error\n```\n\n----------------------------------------\n\nTITLE: TOML Commented Configuration Example\nDESCRIPTION: This TOML snippet demonstrates a configuration file with comments and commented-out values. It shows how go-toml can generate documents annotated with comments, useful for configuration files.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n\"\n# Host IP to connect to.\nhost = '127.0.0.1'\n# Port of the remote server.\nport = 4242\n\n# Encryption parameters (optional)\n# [TLS]\n# cipher = 'AEAD-AES128-GCM-SHA256'\n# version = 'TLS 1.3'\n\"\n```\n\n----------------------------------------\n\nTITLE: Emitting Metrics to Librato in Go\nDESCRIPTION: Demonstrates how to periodically upload every metric to Librato using the Librato client from the go-metrics-librato package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/rcrowley/go-metrics/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/mihasya/go-metrics-librato\"\n\ngo librato.Librato(metrics.DefaultRegistry,\n    10e9,                  // interval\n    \"example@example.com\", // account owner email address\n    \"token\",               // Librato API token\n    \"hostname\",            // source\n    []float64{0.95},       // percentiles to send\n    time.Millisecond,      // time unit\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up RPC Server with Codec in Go\nDESCRIPTION: This code snippet shows how to set up an RPC server using the codec library. It demonstrates how to accept connections, create RPC server codecs using either the GoRpc or MsgpackSpecRpc, and then serve the codec using rpc.ServeCodec.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-msgpack/codec/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n\"//RPC Server\ngo func() {\n    for {\n        conn, err := listener.Accept()\n        rpcCodec := codec.GoRpc.ServerCodec(conn, h)\n        //OR rpcCodec := codec.MsgpackSpecRpc.ServerCodec(conn, h)\n        rpc.ServeCodec(rpcCodec)\n    }\n}()\"\n```\n\n----------------------------------------\n\nTITLE: Setting Dialer Name for Specific HTTP Requests in Go\nDESCRIPTION: This code shows how to set a custom dialer name for a specific HTTP request using context. It uses the ctxhttp package to make an HTTP GET request with a named dialer context.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/mwitkow/go-conntrack/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncallCtx := conntrack.DialNameToContext(parentCtx, \"google\")\nctxhttp.Get(callCtx, http.DefaultClient, \"https://www.google.com\")\n```\n\n----------------------------------------\n\nTITLE: Querying Total Service Calls - Instant Query\nDESCRIPTION: PromQL query to show total calls between all client/server pairs over a 7-day period. Returns a single value showing the connectivity strength between services.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/metrics-generator/service_graphs/metrics-queries.md#2025-04-17_snippet_0\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(traces_service_graph_request_server_seconds_count{}[7d])) by (server, client) > 0\n```\n\n----------------------------------------\n\nTITLE: Map Validation Example in Go\nDESCRIPTION: Example of validating a map using the ValidateMap function in the govalidator library. The example shows how to define a template map with validation rules and validate an input map against it.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nvar mapTemplate = map[string]interface{}{\n\t\"name\":\"required,alpha\",\n\t\"family\":\"required,alpha\",\n\t\"email\":\"required,email\",\n\t\"cell-phone\":\"numeric\",\n\t\"address\":map[string]interface{}{\n\t\t\"line1\":\"required,alphanum\",\n\t\t\"line2\":\"alphanum\",\n\t\t\"postal-code\":\"numeric\",\n\t},\n}\n\nvar inputMap = map[string]interface{}{\n\t\"name\":\"Bob\",\n\t\"family\":\"Smith\",\n\t\"email\":\"foo@bar.baz\",\n\t\"address\":map[string]interface{}{\n\t\t\"line1\":\"\",\n\t\t\"line2\":\"\",\n\t\t\"postal-code\":\"\",\n\t},\n}\n\nresult, err := govalidator.ValidateMap(inputMap, mapTemplate)\nif err != nil {\n\tprintln(\"error: \" + err.Error())\n}\nprintln(result)\n```\n\n----------------------------------------\n\nTITLE: Running a Single Integration Test with Timeout\nDESCRIPTION: This command runs a specific integration test with a defined timeout. The `-timeout 3m` flag sets a timeout of 3 minutes for the test.  `-count=1` disables caching, `-v` enables verbose output, and `-run ^TestMultiTenantSearch$` specifies the test to run.\nSOURCE: https://github.com/grafana/tempo/blob/main/integration/e2e/README.md#2025-04-17_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n\"go test -timeout 3m -count=1 -v ./integration/e2e/... -run ^TestMultiTenantSearch$\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Timeout in Go Examples\nDESCRIPTION: Changed all examples to use WithBatchTimeout with a time.Duration value instead of an integer.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_36\n\nLANGUAGE: Go\nCODE:\n```\nWithBatchTimeout(5 * time.Second)\n```\n\n----------------------------------------\n\nTITLE: Finding Traces with Complex Conditions\nDESCRIPTION: TraceQL query that finds traces with specific HTTP methods and status combinations across different spans in the trace.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_15\n\nLANGUAGE: traceql\nCODE:\n```\n{ span.http.method = \"GET\" && status = ok } && { span.http.method = \"DELETE\" && status != ok }\n```\n\n----------------------------------------\n\nTITLE: PromQL Query for Service Graph Edge Visualization\nDESCRIPTION: A PromQL query that generates edge data for the Node Graph panel by combining service request metrics. The query uses label_join operations to format data according to Node Graph panel requirements and filters based on selected services.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/metrics-generator/service_graphs/custom-service-graphs.md#2025-04-17_snippet_0\n\nLANGUAGE: promql\nCODE:\n```\nlabel_join(\n  label_join(\n    label_join(\n      sum(increase(traces_service_graph_request_total{server=~\"$service\"}[5m])) by (server, client) > 0\n      or\n      sum(increase(traces_service_graph_request_total{client=~\"$service\"}[5m])) by (server, client) > 0,\n    \"source\", \"\", \"client\"),\n  \"target\", \"\", \"server\"),\n\"id\", \"-\", \"server\", \"client\")\n```\n\n----------------------------------------\n\nTITLE: Structuring Go Imports in Tempo\nDESCRIPTION: Example of the preferred import structure in Go files for Tempo. Imports are grouped into standard libraries, external libraries, and local packages.\nSOURCE: https://github.com/grafana/tempo/blob/main/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/gogo/protobuf/proto\"\n\t\"github.com/opentracing/opentracing-go\"\n\n\t\"github.com/grafana/tempo/modules/overrides\"\n\t\"github.com/grafana/tempo/pkg/validation\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Namespace Prefixes in XPath Queries in Go\nDESCRIPTION: Example showing how to query XML with custom namespace prefixes by providing a namespace map to the XPath compiler.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/antchfx/xmlquery/README.md#2025-04-17_snippet_18\n\nLANGUAGE: go\nCODE:\n```\ns := `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<pd:ProcessDefinition xmlns:pd=\"http://xmlns.xyz.com/process/2003\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n<pd:activity name=\"Invoke Request-Response Service\">\n<pd:type>RequestReplyActivity</pd:type>\n<pd:resourceType>OpClientReqActivity</pd:resourceType>\n<pd:x>300</pd:x>\n<pd:y>80</pd:y>\n</pd:activity>\n</pd:ProcessDefinition>`\nnsMap := map[string]string{\n\t\"q\": \"http://xmlns.xyz.com/process/2003\",\n\t\"r\": \"http://www.w3.org/1999/XSL/Transform\",\n\t\"s\": \"http://www.w3.org/2001/XMLSchema\",\n}\nexpr, _ := xpath.CompileWithNS(\"//q:activity\", nsMap)\nnode := xmlquery.QuerySelector(doc, expr)\n```\n\n----------------------------------------\n\nTITLE: Updating OTLP Span Tracing Time in Go\nDESCRIPTION: Fix for the tracing time conversion for OTLP spans to use UnixNano.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_44\n\nLANGUAGE: Go\nCODE:\n```\n// The tracing time conversion for OTLP spans is now correctly set to `UnixNano`.\n```\n\n----------------------------------------\n\nTITLE: Finding Compressed Offset\nDESCRIPTION: Demonstrates how to find the compressed and uncompressed offsets for a desired position in the stream.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n\tcompressedOffset, uncompressedOffset, err := index.Find(wantOffset)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service for IPv6 in YAML\nDESCRIPTION: This YAML configuration sets up a Kubernetes service for the Tempo compactor component with IPv6 support. It specifies the IPv6 cluster IP, sets the IP family to IPv6, and configures the service ports.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/network/ipv6.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    name: compactor\n  name: compactor\n  namespace: trace\nspec:\n  clusterIP: fccb::31a7\n  clusterIPs:\n    - fccb::31a7\n  internalTrafficPolicy: Cluster\n  ipFamilies:\n    - IPv6\n  ipFamilyPolicy: SingleStack\n  ports:\n    - name: compactor-http-metrics\n      port: 3200\n      protocol: TCP\n      targetPort: 3200\n  selector:\n    app: compactor\n    name: compactor\n  sessionAffinity: None\n  type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Finding Element Attributes in Go\nDESCRIPTION: Example showing how to retrieve attribute values from XML elements using XPath.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/antchfx/xmlquery/README.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nlist := xmlquery.Find(doc,\"//book/@id\")\nfmt.Println(list[0].InnerText) // outout @id value\n```\n\n----------------------------------------\n\nTITLE: Discovering Warning Reasons in Tempo using PromQL\nDESCRIPTION: This query helps identify the different reasons for warnings in Tempo by grouping the warning metrics by reason. It's useful for troubleshooting and understanding the distribution of different types of warnings.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/querying/long-running-traces.md#2025-04-17_snippet_1\n\nLANGUAGE: promql\nCODE:\n```\nsum(rate(tempo_warnings_total{}[5m])) by (reason)\n```\n\n----------------------------------------\n\nTITLE: Feature Detection with Flags Example in Go\nDESCRIPTION: Example showing how to use command-line flags for CPU feature detection, demonstrating proper initialization order with flag parsing.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/cpuid/v2/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"strings\"\n\n\t\"github.com/klauspost/cpuid/v2\"\n)\n\nfunc main() {\n\tcpuid.Flags()\n\tflag.Parse()\n\tcpuid.Detect()\n\n\t// Test if we have these specific features:\n\tif cpuid.CPU.Supports(cpuid.SSE, cpuid.SSE2) {\n\t\tfmt.Println(\"We have Streaming SIMD 2 Extensions\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bearer Token Authentication in Go\nDESCRIPTION: Shows how to configure bearer token authentication using the simplified policy.BearerTokenOptions structure replacing the previous AuthenticationOptions.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nruntime.NewBearerTokenPolicy(policy.BearerTokenOptions{\n  Credential: cred\n})\n```\n\n----------------------------------------\n\nTITLE: Supported Path Structure Documentation in Markdown\nDESCRIPTION: Markdown table documenting the supported paths for accessing metric data fields, including their accessed fields and corresponding data types.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/contexts/ottlmetric/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| path                                   | field accessed                                                                                                                                     | type                                                                                                                                        |\n|----------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------|\n| metric.cache                           | the value of the current transform context's temporary cache. cache can be used as a temporary placeholder for data during complex transformations | pcommon.Map                                                                                                                                 |\n| metric.cache[\"\"]                     | the value of an item in cache. Supports multiple indexes to access nested fields.                                                                  | string, bool, int64, float64, pcommon.Map, pcommon.Slice, []byte or nil                                                                     |\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Zap Badge Reference\nDESCRIPTION: Markdown badge showing Go package reference documentation link for the OpenTelemetry Zap bridge\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/contrib/bridges/otelzap/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Go Reference](https://pkg.go.dev/badge/go.opentelemetry.io/contrib/bridges/otelzap.svg)](https://pkg.go.dev/go.opentelemetry.io/contrib/bridges/otelzap)\n```\n\n----------------------------------------\n\nTITLE: Double Converter Usage in OTTL\nDESCRIPTION: The Double converter transforms various input types to float64 values. It handles float64, string, bool, and int64 inputs differently and returns nil for unsupported types or failed parsing.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_21\n\nLANGUAGE: ottl\nCODE:\n```\nDouble(log.attributes[\"http.status_code\"])\n```\n\nLANGUAGE: ottl\nCODE:\n```\nDouble(\"2.0\")\n```\n\n----------------------------------------\n\nTITLE: Go Tag Syntax Example\nDESCRIPTION: Example showing the standard Go tag syntax format used in struct field definitions.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/kong/README.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nkong:\"required,name='foo'\"\n```\n\n----------------------------------------\n\nTITLE: Generic Histogram Definition in Go OpenTelemetry SDK\nDESCRIPTION: Redefinition of Histogram and HistogramDataPoint with a generic argument of [N int64 | float64] in go.opentelemetry.io/otel/sdk/metric/metricdata.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\ntype Histogram[N int64 | float64] struct {\n  // ...\n}\n\ntype HistogramDataPoint[N int64 | float64] struct {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers with Commas in Go using Humanize\nDESCRIPTION: Demonstrates how to use humanize.Comma() function to insert commas into large numbers for better readability.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"You owe $%s.\\n\", humanize.Comma(6582491)) // You owe $6,582,491.\n```\n\n----------------------------------------\n\nTITLE: Initialize Go Module for Consul\nDESCRIPTION: This shell command initializes a new Go module named 'consul-demo' where the Consul API client example will be implemented. This step is essential for managing dependencies and building the Go project.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/consul/api/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init consul-demo\n```\n\n----------------------------------------\n\nTITLE: Querying Distributor Push Failures in PromQL\nDESCRIPTION: A PromQL query to check if the distributor is failing to push spans to the metrics-generator.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/metrics-generator.md#2025-04-17_snippet_1\n\nLANGUAGE: promql\nCODE:\n```\nsum(rate(tempo_distributor_metrics_generator_pushes_failures_total{}[1m]))\n```\n\n----------------------------------------\n\nTITLE: Recording Parent Span in Jaeger using SpanReference in Python\nDESCRIPTION: This Python snippet illustrates how to capture a parent span as a SpanReference using the opentracing library. This method is necessary for Jaeger Proto format, which lacks a specific parent ID field.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/translator/jaeger/README.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSpanReference(\n    ref_type=opentracing.CHILD_OF,\n    trace_id=span.context.trace_id,\n    span_id=parent_id,\n)\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Docker Compose Setup\nDESCRIPTION: This snippet shows how to stop and remove the Docker Compose setup using the docker compose down command. The -v flag ensures that named volumes are also removed.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/vulture/readme.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Status Codes for Retry Policy\nDESCRIPTION: Table defining gRPC status codes that are considered transient errors for the otlp/gRPC exporter retry policy configuration.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n| gRPC Status Code | Description |\n| ---------------- | ----------- |\n| 1  | Cancelled |\n| 4  | Deadline Exceeded |\n| 8  | Resource Exhausted |\n| 10 | Aborted |\n| 10 | Out of Range |\n| 14 | Unavailable |\n| 15 | Data Loss |\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Extension Interface in Go\nDESCRIPTION: Specifies the GetClient method signature for the storage.Extension interface which extends component.Extension. The method allows components to request a storage client for state management.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/extension/xextension/storage/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nGetClient(context.Context, component.Kind, component.ID, string) (Client, error)\n```\n\n----------------------------------------\n\nTITLE: Formatting Jsonnet Files in Bash\nDESCRIPTION: Command to format jsonnet or libsonnet files. Requires jsonnetfmt binary in $PATH.\nSOURCE: https://github.com/grafana/tempo/blob/main/CONTRIBUTING.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake jsonnetfmt\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Services\nDESCRIPTION: This command starts up the Docker Compose stack in detached mode, initializing all services defined in the docker-compose.yaml file. It expects the docker-compose.yaml file to be present in the directory.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/debug/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Opening File in Browser\nDESCRIPTION: Function to open a file path in a new browser window, allowing direct file viewing through the default browser\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pkg/browser/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc OpenFile(path string) error\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Glob Pattern Matching in Go\nDESCRIPTION: Demonstrates creating and using basic glob patterns for string matching with the gobwas/glob library, including simple wildcard and domain matching scenarios\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/gobwas/glob/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"github.com/gobwas/glob\"\n\nfunc main() {\n    var g glob.Glob\n    \n    // create simple glob\n    g = glob.MustCompile(\"*.github.com\")\n    g.Match(\"api.github.com\") // true\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Root Span in Go\nDESCRIPTION: The IsRootSpan function returns true if the span in the corresponding context is a root span (parent_span_id is zero), and false otherwise. It is only supported in OTTL span context.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_37\n\nLANGUAGE: Go\nCODE:\n```\nIsRootSpan()\n```\n\nLANGUAGE: Go\nCODE:\n```\nset(span.attributes[\"isRoot\"], \"true\") where IsRootSpan()\n```\n\n----------------------------------------\n\nTITLE: Creating a table with column-specific cell merging in Go\nDESCRIPTION: Example showing how to merge identical cells only in specific columns, providing more control over the table appearance.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ndata := [][]string{\n  []string{\"1/1/2014\", \"Domain name\", \"1234\", \"$10.98\"},\n  []string{\"1/1/2014\", \"January Hosting\", \"1234\", \"$10.98\"},\n  []string{\"1/4/2014\", \"February Hosting\", \"3456\", \"$51.00\"},\n  []string{\"1/4/2014\", \"February Extra Bandwidth\", \"4567\", \"$30.00\"},\n}\n\ntable := tablewriter.NewWriter(os.Stdout)\ntable.SetHeader([]string{\"Date\", \"Description\", \"CV2\", \"Amount\"})\ntable.SetFooter([]string{\"\", \"\", \"Total\", \"$146.93\"})\ntable.SetAutoMergeCellsByColumnIndex([]int{2, 3})\ntable.SetRowLine(true)\ntable.AppendBulk(data)\ntable.Render()\n```\n\n----------------------------------------\n\nTITLE: Configuring Kong with Plugins\nDESCRIPTION: This Go code snippet demonstrates how to configure the Kong command-line parser by embedding the `kong.Plugin` type and using it to populate pointers to Kong annotated structs for plugins. It shows how multiple plugins can be included in the CLI configuration. Requires the `kong` package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/kong/README.md#2025-04-17_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\nvar pluginOne struct {\n  PluginOneFlag string\n}\nvar pluginTwo struct {\n  PluginTwoFlag string\n}\nvar cli struct {\n  BaseFlag string\n  kong.Plugins\n}\ncli.Plugins = kong.Plugins{&pluginOne, &pluginTwo}\n```\n\n----------------------------------------\n\nTITLE: Calculating Logarithm in Go\nDESCRIPTION: The Log function calculates the natural logarithm of a given value, returning the result as a float64. It handles various input types by converting them to float64 and returns an error for invalid inputs.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_43\n\nLANGUAGE: Go\nCODE:\n```\nLog(span.attributes[\"duration_ms\"])\n```\n\nLANGUAGE: Go\nCODE:\n```\nInt(Log(span.attributes[\"duration_ms\"]))\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition Implementation\nDESCRIPTION: Demonstrates how to acquire authentication tokens directly using both libraries. Shows the difference between resource-based and scope-based token requests.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/go-autorest/autorest/adal\"\n\noauthCfg, err := adal.NewOAuthConfig(\"https://login.microsoftonline.com\", tenantID)\nhandle(err)\n\nspt, err := adal.NewServicePrincipalTokenWithSecret(\n    *oauthCfg, clientID, \"https://vault.azure.net\", &adal.ServicePrincipalTokenSecret{ClientSecret: secret},\n)\n\nerr = spt.Refresh()\nif err == nil {\n    token := spt.Token\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n)\n\ncred, err := azidentity.NewClientSecretCredential(tenantID, clientID, secret, nil)\nhandle(err)\n\ntk, err := cred.GetToken(\n    context.TODO(), policy.TokenRequestOptions{Scopes: []string{\"https://vault.azure.net/.default\"}},\n)\nif err == nil {\n    token := tk.Token\n}\n```\n\n----------------------------------------\n\nTITLE: Removed Metric Configuration in Tempo 2.1\nDESCRIPTION: The following snippet highlights the metric configuration removed in the Tempo 2.1 release, specifically detailing the removal of `tempo_ingester_trace_search_bytes_discarded_total` metric.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/upgrade.md#2025-04-17_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\ntempo_ingester_trace_search_bytes_discarded_total\n```\n\n----------------------------------------\n\nTITLE: Attaching S3 Access Policy to AWS IAM Role\nDESCRIPTION: This AWS CLI command attaches the AmazonS3FullAccess policy to the IAM role created for Tempo, granting full S3 access.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/object-storage.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\naws iam attach-role-policy \\\n  --role-name \"tempo-s3-access\" \\\n  --policy-arn \"arn:aws:iam::aws:policy/AmazonS3FullAccess\"\n```\n\n----------------------------------------\n\nTITLE: Setting Metrics-Generator Instance Port for Proxy Integration\nDESCRIPTION: YAML configuration to customize the instance port for the metrics-generator component when working with sidecar proxies. This configuration ensures proper service discovery in the ring.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/network/sidecar-proxy.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics_generator:\n  ring:\n    instance_port: 12345\n```\n\n----------------------------------------\n\nTITLE: Configuring Complete Pipeline in YAML for Grafana Tempo\nDESCRIPTION: This configuration example (A) sets up a complete pipeline with receivers, processors, exporters, and extensions using 'nop' components.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/confmap/README.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n    nop:\n\nprocessors:\n    nop:\n\nexporters:\n    nop:\n\nextensions:\n    nop:\n\nservice:\n    extensions: [nop]\n    pipelines:\n        traces:\n            receivers: [nop]\n            processors: [nop]\n            exporters: [nop]\n```\n\n----------------------------------------\n\nTITLE: Summarizing Block Compaction Levels with Tempo CLI\nDESCRIPTION: This command summarizes block information for a given tenant, highlighting compaction levels. Useful for analyzing or troubleshooting the compactor's behavior in Tempo.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/tempo_cli.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntempo-cli list compaction-summary <tenant-id>\n```\n\n----------------------------------------\n\nTITLE: Bash Script for Detecting Leak Sources\nDESCRIPTION: Shell script to identify which specific tests are causing goroutine leaks by running each test individually and reporting failures\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.uber.org/goleak/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Create a test binary which will be used to run each test individually\n$ go test -c -o tests\n\n# Run each test individually, printing \".\" for successful tests, or the test name\n# for failing tests.\n$ for test in $(go test -list . | grep -E \"^(Test|Example)\"); do ./tests -test.run \"^$test\\$\" &>/dev/null && echo -n \".\" || echo -e \"\\n$test failed\"; done\n```\n\n----------------------------------------\n\nTITLE: Forward Stream to Desired Offset\nDESCRIPTION: Demonstrates how to skip forward to the desired uncompressed offset after creating the decoder.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n\terr = dec.Skip(wantOffset - uncompressedOffset)\n```\n\n----------------------------------------\n\nTITLE: Complete Function List of GoValidator Library in Go\nDESCRIPTION: A comprehensive list of all functions available in the GoValidator library, including validators, string manipulators, math functions, and utility functions.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc Abs(value float64) float64\nfunc BlackList(str, chars string) string\nfunc ByteLength(str string, params ...string) bool\nfunc CamelCaseToUnderscore(str string) string\nfunc Contains(str, substring string) bool\nfunc Count(array []interface{}, iterator ConditionIterator) int\nfunc Each(array []interface{}, iterator Iterator)\nfunc ErrorByField(e error, field string) string\nfunc ErrorsByField(e error) map[string]string\nfunc Filter(array []interface{}, iterator ConditionIterator) []interface{}\nfunc Find(array []interface{}, iterator ConditionIterator) interface{}\nfunc GetLine(s string, index int) (string, error)\nfunc GetLines(s string) []string\nfunc HasLowerCase(str string) bool\nfunc HasUpperCase(str string) bool\nfunc HasWhitespace(str string) bool\nfunc HasWhitespaceOnly(str string) bool\nfunc InRange(value interface{}, left interface{}, right interface{}) bool\nfunc InRangeFloat32(value, left, right float32) bool\nfunc InRangeFloat64(value, left, right float64) bool\nfunc InRangeInt(value, left, right interface{}) bool\nfunc IsASCII(str string) bool\nfunc IsAlpha(str string) bool\nfunc IsAlphanumeric(str string) bool\nfunc IsBase64(str string) bool\nfunc IsByteLength(str string, min, max int) bool\nfunc IsCIDR(str string) bool\nfunc IsCRC32(str string) bool\nfunc IsCRC32b(str string) bool\nfunc IsCreditCard(str string) bool\nfunc IsDNSName(str string) bool\nfunc IsDataURI(str string) bool\nfunc IsDialString(str string) bool\nfunc IsDivisibleBy(str, num string) bool\nfunc IsEmail(str string) bool\nfunc IsExistingEmail(email string) bool\nfunc IsFilePath(str string) (bool, int)\nfunc IsFloat(str string) bool\nfunc IsFullWidth(str string) bool\nfunc IsHalfWidth(str string) bool\nfunc IsHash(str string, algorithm string) bool\nfunc IsHexadecimal(str string) bool\nfunc IsHexcolor(str string) bool\nfunc IsHost(str string) bool\nfunc IsIP(str string) bool\nfunc IsIPv4(str string) bool\nfunc IsIPv6(str string) bool\nfunc IsISBN(str string, version int) bool\nfunc IsISBN10(str string) bool\nfunc IsISBN13(str string) bool\nfunc IsISO3166Alpha2(str string) bool\nfunc IsISO3166Alpha3(str string) bool\nfunc IsISO4217(str string) bool\nfunc IsISO693Alpha2(str string) bool\nfunc IsISO693Alpha3b(str string) bool\nfunc IsIn(str string, params ...string) bool\nfunc IsInRaw(str string, params ...string) bool\nfunc IsInt(str string) bool\nfunc IsJSON(str string) bool\nfunc IsLatitude(str string) bool\nfunc IsLongitude(str string) bool\nfunc IsLowerCase(str string) bool\nfunc IsMAC(str string) bool\nfunc IsMD4(str string) bool\nfunc IsMD5(str string) bool\nfunc IsMagnetURI(str string) bool\nfunc IsMongoID(str string) bool\nfunc IsMultibyte(str string) bool\nfunc IsNatural(value float64) bool\nfunc IsNegative(value float64) bool\nfunc IsNonNegative(value float64) bool\nfunc IsNonPositive(value float64) bool\nfunc IsNotNull(str string) bool\nfunc IsNull(str string) bool\nfunc IsNumeric(str string) bool\nfunc IsPort(str string) bool\nfunc IsPositive(value float64) bool\nfunc IsPrintableASCII(str string) bool\nfunc IsRFC3339(str string) bool\nfunc IsRFC3339WithoutZone(str string) bool\nfunc IsRGBcolor(str string) bool\nfunc IsRegex(str string) bool\nfunc IsRequestURI(rawurl string) bool\nfunc IsRequestURL(rawurl string) bool\nfunc IsRipeMD128(str string) bool\nfunc IsRipeMD160(str string) bool\nfunc IsRsaPub(str string, params ...string) bool\nfunc IsRsaPublicKey(str string, keylen int) bool\nfunc IsSHA1(str string) bool\nfunc IsSHA256(str string) bool\nfunc IsSHA384(str string) bool\nfunc IsSHA512(str string) bool\nfunc IsSSN(str string) bool\nfunc IsSemver(str string) bool\nfunc IsTiger128(str string) bool\nfunc IsTiger160(str string) bool\nfunc IsTiger192(str string) bool\nfunc IsTime(str string, format string) bool\nfunc IsType(v interface{}, params ...string) bool\nfunc IsURL(str string) bool\nfunc IsUTFDigit(str string) bool\nfunc IsUTFLetter(str string) bool\nfunc IsUTFLetterNumeric(str string) bool\nfunc IsUTFNumeric(str string) bool\nfunc IsUUID(str string) bool\nfunc IsUUIDv3(str string) bool\nfunc IsUUIDv4(str string) bool\nfunc IsUUIDv5(str string) bool\nfunc IsULID(str string) bool\nfunc IsUnixTime(str string) bool\nfunc IsUpperCase(str string) bool\nfunc IsVariableWidth(str string) bool\nfunc IsWhole(value float64) bool\nfunc LeftTrim(str, chars string) string\nfunc Map(array []interface{}, iterator ResultIterator) []interface{}\nfunc Matches(str, pattern string) bool\nfunc MaxStringLength(str string, params ...string) bool\nfunc MinStringLength(str string, params ...string) bool\nfunc NormalizeEmail(str string) (string, error)\nfunc PadBoth(str string, padStr string, padLen int) string\nfunc PadLeft(str string, padStr string, padLen int) string\nfunc PadRight(str string, padStr string, padLen int) string\nfunc PrependPathToErrors(err error, path string) error\nfunc Range(str string, params ...string) bool\nfunc RemoveTags(s string) string\nfunc ReplacePattern(str, pattern, replace string) string\nfunc Reverse(s string) string\nfunc RightTrim(str, chars string) string\nfunc RuneLength(str string, params ...string) bool\nfunc SafeFileName(str string) string\nfunc SetFieldsRequiredByDefault(value bool)\nfunc SetNilPtrAllowedByRequired(value bool)\nfunc Sign(value float64) float64\nfunc StringLength(str string, params ...string) bool\nfunc StringMatches(s string, params ...string) bool\nfunc StripLow(str string, keepNewLines bool) string\nfunc ToBoolean(str string) (bool, error)\nfunc ToFloat(str string) (float64, error)\nfunc ToInt(value interface{}) (res int64, err error)\nfunc ToJSON(obj interface{}) (string, error)\nfunc ToString(obj interface{}) string\nfunc Trim(str, chars string) string\nfunc Truncate(str string, length int, ending string) string\nfunc TruncatingErrorf(str string, args ...interface{}) error\nfunc UnderscoreToCamelCase(s string) string\nfunc ValidateMap(inputMap map[string]interface{}, validationMap map[string]interface{}) (bool, error)\nfunc ValidateStruct(s interface{}) (bool, error)\nfunc WhiteList(str, chars string) string\ntype ConditionIterator\ntype CustomTypeValidator\ntype Error\nfunc (e Error) Error() string\ntype Errors\nfunc (es Errors) Error() string\nfunc (es Errors) Errors() []error\ntype ISO3166Entry\ntype ISO693Entry\ntype InterfaceParamValidator\ntype Iterator\ntype ParamValidator\ntype ResultIterator\ntype UnsupportedTypeError\nfunc (e *UnsupportedTypeError) Error() string\ntype Validator\n```\n\n----------------------------------------\n\nTITLE: Applying Environment Variables from io.Reader in Go\nDESCRIPTION: Demonstrates how to use gotenv.Apply() to load environment variables from an io.Reader source, such as a string.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/subosito/gotenv/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngotenv.Apply(strings.NewReader(\"APP_ID=1234567\"))\n\nlog.Println(os.Getenv(\"APP_ID\"))\n// Output: \"1234567\"\n```\n\n----------------------------------------\n\nTITLE: Using topk Function with Service Filter in TraceQL\nDESCRIPTION: This query demonstrates how to use the topk function to return the top 10 most active endpoints for the 'foo' service in TraceQL.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/metrics-queries/functions.md#2025-04-17_snippet_15\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ resource.service.name = \"foo\" } | rate() by (span.http.url)  | topk(10)\n```\n\n----------------------------------------\n\nTITLE: Stopping the Docker Compose Stack\nDESCRIPTION: This command stops and removes the containers, networks, volumes, and images created by `docker compose up`.  The `-v` flag removes the named volumes declared in the `volumes` section of the Compose file and anonymous volumes attached to containers.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/otel-collector-multitenant/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndocker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingester Storage Class\nDESCRIPTION: Configuration snippet to modify the storage class for Tempo ingester's Write Ahead Logs from fast to standard class. This should be added to the config section if ingesters fail to start.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/tanka.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ningester+: {\n  pvc_storage_class: 'standard',\n},\n```\n\n----------------------------------------\n\nTITLE: Parsing Complex URL in Go\nDESCRIPTION: Example of using the URL function to parse a complex URL with authentication, port, path, query parameters, and fragment. The function extracts all components into a structured format.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_76\n\nLANGUAGE: go\nCODE:\n```\nURL(\"http://myusername:mypassword@www.example.com:80/foo.gif?key1=val1&key2=val2#fragment\")\n```\n\n----------------------------------------\n\nTITLE: Retry Options Context Addition\nDESCRIPTION: Usage of WithRetryOptions() to add custom RetryOptions to the context for specific API calls.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-17_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nWithRetryOptions()\n```\n\n----------------------------------------\n\nTITLE: Implementing User-Defined Types in GopherLua\nDESCRIPTION: Shows how to extend GopherLua with new types written in Go, including type registration, constructor, and method implementation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype Person struct {\n    Name string\n}\n\nconst luaPersonTypeName = \"person\"\n\n// Registers my person type to given L.\nfunc registerPersonType(L *lua.LState) {\n    mt := L.NewTypeMetatable(luaPersonTypeName)\n    L.SetGlobal(\"person\", mt)\n    // static attributes\n    L.SetField(mt, \"new\", L.NewFunction(newPerson))\n    // methods\n    L.SetField(mt, \"__index\", L.SetFuncs(L.NewTable(), personMethods))\n}\n\n// Constructor\nfunc newPerson(L *lua.LState) int {\n    person := &Person{L.CheckString(1)}\n    ud := L.NewUserData()\n    ud.Value = person\n    L.SetMetatable(ud, L.GetTypeMetatable(luaPersonTypeName))\n    L.Push(ud)\n    return 1\n}\n\n// Checks whether the first lua argument is a *LUserData with *Person and returns this *Person.\nfunc checkPerson(L *lua.LState) *Person {\n    ud := L.CheckUserData(1)\n    if v, ok := ud.Value.(*Person); ok {\n        return v\n    }\n    L.ArgError(1, \"person expected\")\n    return nil\n}\n\nvar personMethods = map[string]lua.LGFunction{\n    \"name\": personGetSetName,\n}\n\n// Getter and setter for the Person#Name\nfunc personGetSetName(L *lua.LState) int {\n    p := checkPerson(L)\n    if L.GetTop() == 2 {\n        p.Name = L.CheckString(2)\n        return 0\n    }\n    L.Push(lua.LString(p.Name))\n    return 1\n}\n\nfunc main() {\n    L := lua.NewState()\n    defer L.Close()\n    registerPersonType(L)\n    if err := L.DoString(`\n        p = person.new(\"Steeve\")\n        print(p:name()) -- \"Steeve\"\n        p:name(\"Alice\")\n        print(p:name()) -- \"Alice\"\n    `); err != nil {\n        panic(err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Local Storage Contents\nDESCRIPTION: Checks the contents of the local Tempo data storage directory\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/local/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nls tempo-data/\n```\n\n----------------------------------------\n\nTITLE: Installing OpenCensus Go Library\nDESCRIPTION: Command to install the OpenCensus Go library using Go's package manager. This will fetch the latest version of the library from the repository.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opencensus.io/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get -u go.opencensus.io\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Compose Processes\nDESCRIPTION: This command lists all currently running containers in the Docker Compose setup. It verifies that all components necessary for Tempo are up and running, with ports exposed for external access.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/distributed/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndocker compose ps\n```\n\n----------------------------------------\n\nTITLE: Defining DataPoint Fields in Go\nDESCRIPTION: This snippet defines the fields of the DataPoint struct, specifying attributes such as count, sum, bucket counts, and explicit bounds necessary for metric processing within Grafana Tempo.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/contexts/ottldatapoint/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n| datapoint.flags                                | the flags of the data point being processed                                                                                                                                         | int64                                                                   |\n| datapoint.count                                | the count of the data point being processed                                                                                                                                         | int64                                                                   |\n| datapoint.sum                                  | the sum of the data point being processed                                                                                                                                           | float64                                                                 |\n| datapoint.bucket_counts                        | the bucket counts of the data point being processed                                                                                                                                 | []uint64                                                                |\n| datapoint.explicit_bounds                      | the explicit bounds of the data point being processed                                                                                                                               | []float64                                                               |\n| datapoint.scale                                | the scale of the data point being processed                                                                                                                                         | int64                                                                   |\n| datapoint.zero_count                           | the zero_count of the data point being processed                                                                                                                                    | int64                                                                   |\n| datapoint.quantile_values                      | the quantile_values of the data point being processed                                                                                                                               | pmetric.SummaryDataPointValueAtQuantileSlice                            \n```\n\n----------------------------------------\n\nTITLE: Reversing a String While Preserving Grapheme Clusters\nDESCRIPTION: Example demonstrating how to reverse a string while maintaining the integrity of grapheme clusters, which is important for correctly handling complex Unicode sequences like emojis and combined characters.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(uniseg.ReverseString(\"🇩🇪🏳️‍🌈\"))\n// 🏳️‍🌈🇩🇪\n```\n\n----------------------------------------\n\nTITLE: Status Endpoints\nDESCRIPTION: Collection of endpoints for retrieving system status information.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/_index.md#2025-04-17_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nGET /status\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /status/version\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /status/services\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /status/endpoints\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /status/config\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /status/runtime_config\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /status/overrides\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /status/overrides/{tenant}\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /status/usage-stats\n```\n\n----------------------------------------\n\nTITLE: Listing Files in Local Directory\nDESCRIPTION: This snippet uses the ls command to list the contents of the tempo-data directory, allowing the user to view WAL/Blocks as they are created. The directory should already exist as part of the setup.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/vulture/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nls tempo-data/\n```\n\n----------------------------------------\n\nTITLE: Preventing Implementation of Specific Interfaces in Go\nDESCRIPTION: Changed code to prevent end-users from implementing certain interfaces by making them unexported or adding dummy methods.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_35\n\nLANGUAGE: Go\nCODE:\n```\n\"otel/exporters/otlp/otlphttp\".Option\n\"otel/exporters/stdout\".Option\n\"otel/oteltest\".Option\n\"otel/trace\".TracerOption\n\"otel/trace\".SpanOption\n\"otel/trace\".EventOption\n\"otel/trace\".LifeCycleOption\n\"otel/trace\".InstrumentationOption\n\"otel/sdk/resource\".Option\n\"otel/sdk/trace\".ParentBasedSamplerOption\n\"otel/sdk/trace\".ReadOnlySpan\n\"otel/sdk/trace\".ReadWriteSpan\n```\n\n----------------------------------------\n\nTITLE: Checking Running Docker Compose Services\nDESCRIPTION: Verifies the status and details of containers launched in the tracing pipeline, showing ports and current state\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/alloy/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndocker compose ps\n```\n\n----------------------------------------\n\nTITLE: Hiding flags from help text\nDESCRIPTION: Demonstrates how to mark a flag as hidden so it doesn't appear in usage/help text but still functions normally.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// hide a flag by specifying its name\nflags.MarkHidden(\"secretFlag\")\n```\n\n----------------------------------------\n\nTITLE: Prometheus Exporter Metrics for Grafana Alloy\nDESCRIPTION: This snippet highlights the Prometheus exporter metrics that Alloy makes available. These metrics are vital for monitoring the success of spans being sent from Alloy. It specifically flags metrics related to exporter performance.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/send-traces/alloy.md#2025-04-17_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\n```\nexporter_sent_spans_ratio_total\nexporter_send_failed_spans_ratio_total\n```\n```\n\n----------------------------------------\n\nTITLE: Returning gRPC Status Error\nDESCRIPTION: This snippet demonstrates how to return a gRPC status error using the `status` package. It takes a `codes.Code` and a message string as input and returns an error.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/gogo/status/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nreturn status.Error(codes.NotFound, \"no such user\")\n```\n```\n\n----------------------------------------\n\nTITLE: Enhancing Retry Options - Go\nDESCRIPTION: The introduction of `ShouldRetry` in `policy.RetryOptions` provides finer granularity for controlling when to attempt retries on failed requests, thereby improving the resilience of the request-handling mechanism.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype RetryOptions struct {\n    ShouldRetry func(err error) bool\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Distributor Queue Failures in PromQL\nDESCRIPTION: A PromQL query to check if spans are being dropped before reaching the metrics-generator due to a full distributor queue.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/metrics-generator.md#2025-04-17_snippet_0\n\nLANGUAGE: promql\nCODE:\n```\nsum(rate(tempo_distributor_queue_pushes_failures_total{}[1m]))\n```\n\n----------------------------------------\n\nTITLE: Checking for Integer Type in Go\nDESCRIPTION: The IsInt function returns true if the given value is an integer (int64 or pcommon.ValueTypeInt), and false otherwise.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_36\n\nLANGUAGE: Go\nCODE:\n```\nIsInt(log.body)\n```\n\nLANGUAGE: Go\nCODE:\n```\nIsInt(log.attributes[\"maybe a int\"])\n```\n\n----------------------------------------\n\nTITLE: Configuring Hedge Requests in Tempo Querier\nDESCRIPTION: YAML configuration for setting up hedge requests to improve backend search throughput. Defines timing and request limits for external hedging.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v1-4.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nquerier:\n    search:\n      external_hedge_requests_at: 5s\n      external_hedge_requests_up_to: 3\n```\n\n----------------------------------------\n\nTITLE: Recursive Type Definition\nDESCRIPTION: This code defines two mutually recursive types, `T` and `U`. This example is used to illustrate the need for special handling of recursive types during JSON encoding.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype T struct {\n    X int\n    U *U\n}\n\ntype U struct {\n    T *T\n}\n\nb, err := json.Marshal(&T{\n    X: 1,\n    U: &U{\n        T: &T{\n            X: 2,\n        },\n    },\n})\nfmt.Println(string(b)) // {\"X\":1,\"U\":{\"T\":{\"X\":2,\"U\":null}}}\n```\n\n----------------------------------------\n\nTITLE: Basic Logging with glog in Go\nDESCRIPTION: Demonstrates basic logging functionality using glog, including Info and Fatal log levels with formatting.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/k8s.io/klog/v2/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nglog.Info(\"Prepare to repel boarders\")\n\nglog.Fatalf(\"Initialization failed: %s\", err)\n```\n\n----------------------------------------\n\nTITLE: Implementing the FlagValueSet Interface for Viper (Go)\nDESCRIPTION: Example showing how to implement Viper's FlagValueSet interface to bind custom flag sets. This interface represents a group of flags and requires implementing the VisitAll method.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntype myFlagSet struct {\n\tflags []myFlag\n}\n\nfunc (f myFlagSet) VisitAll(fn func(FlagValue)) {\n\tfor _, flag := range flags {\n\t\tfn(flag)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validator to TagMap in Go\nDESCRIPTION: Example of adding a custom validator named 'duck' to the TagMap. The validator checks if a string equals 'duck'.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ngovalidator.TagMap[\"duck\"] = govalidator.Validator(func(str string) bool {\n\treturn str == \"duck\"\n})\n```\n\n----------------------------------------\n\nTITLE: Removed Metrics Configuration in Tempo 2.1\nDESCRIPTION: Metrics configuration that was removed in Tempo 2.1 due to the removal of support for searching v2 blocks. This metric is no longer available.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-1.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntempo_ingester_trace_search_bytes_discarded_total\n```\n\n----------------------------------------\n\nTITLE: Generating UUID in Go\nDESCRIPTION: The UUID function generates a version 4 UUID string. It takes no parameters and returns a random UUID.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_78\n\nLANGUAGE: go\nCODE:\n```\nUUID()\n```\n\n----------------------------------------\n\nTITLE: Table Paging in Go\nDESCRIPTION: Shows how to limit the number of lines rendered in a single page, including handling rows with multiple lines. Uses SetPageSize() method to control pagination.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-17_snippet_6\n\nLANGUAGE: golang\nCODE:\n```\nt.SetPageSize(1)\nt.Render()\n```\n\n----------------------------------------\n\nTITLE: Recent Results Queries\nDESCRIPTION: Queries using the most_recent hint to get latest results\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_48\n\nLANGUAGE: TraceQL\nCODE:\n```\n{} with (most_recent=true)\n{ span.foo = \"bar\" } >> { status = error } with (most_recent=true)\n```\n\n----------------------------------------\n\nTITLE: Using JSON-Patch CLI Tool\nDESCRIPTION: Example demonstrating how to install and use the json-patch CLI tool to apply multiple JSON patch documents to a JSON document from standard input.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/evanphx/json-patch/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/evanphx/json-patch/cmd/json-patch\ncat document.json | json-patch -p patch.1.json -p patch.2.json\n```\n\n----------------------------------------\n\nTITLE: GET Request for Retrieving Overrides (Shell)\nDESCRIPTION: Example cURL command to retrieve current overrides for a specific tenant using the GET /api/overrides endpoint. It demonstrates how to include the X-Scope-OrgID header for tenant identification.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/manage-advanced-systems/user-configurable-overrides.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET -v -H \"X-Scope-OrgID: 3\" http://localhost:3100/tempo/api/overrides\\?scope=merged\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results Before Performance Improvement\nDESCRIPTION: These are the benchmark results for various name mangling functions before the performance improvements were implemented. The results show relatively high operation times and memory allocations.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-openapi/swag/BENCHMARK.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/swag\ncpu: Intel(R) Core(TM) i5-6200U CPU @ 2.30GHz\nBenchmarkToXXXName/ToGoName-4         \t  862623\t     44101 ns/op\t   10450 B/op\t     732 allocs/op\nBenchmarkToXXXName/ToVarName-4        \t  853656\t     40728 ns/op\t   10468 B/op\t     734 allocs/op\nBenchmarkToXXXName/ToFileName-4       \t 1268312\t     27813 ns/op\t    9785 B/op\t     617 allocs/op\nBenchmarkToXXXName/ToCommandName-4    \t 1276322\t     27903 ns/op\t    9785 B/op\t     617 allocs/op\nBenchmarkToXXXName/ToHumanNameLower-4 \t  895334\t     40354 ns/op\t   10472 B/op\t     731 allocs/op\nBenchmarkToXXXName/ToHumanNameTitle-4 \t  882441\t     40678 ns/op\t   10566 B/op\t     749 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Binding Individual Flags with Viper and Cobra (Go)\nDESCRIPTION: Example showing how to bind an individual command-line flag from the Cobra library to Viper. This allows the flag value to be accessed through Viper's configuration system.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nserverCmd.Flags().Int(\"port\", 1138, \"Port to run Application server on\")\nviper.BindPFlag(\"port\", serverCmd.Flags().Lookup(\"port\"))\n```\n\n----------------------------------------\n\nTITLE: Installing MinIO Go Client\nDESCRIPTION: Command to download and install the MinIO Go client SDK from GitHub using go get.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/minio/minio-go/v7/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/minio/minio-go/v7\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Project ID for Metrics Export in Go\nDESCRIPTION: Code example showing how to configure the Google Cloud Project ID for metrics export using environment variables and exporter options. This is typically needed when running code locally with custom authentication credentials.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/metric/README.md#2025-04-17_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\nprojectID := os.Getenv(\"GOOGLE_CLOUD_PROJECT\")\nopts := []mexporter.Option{\n    mexporter.WithProjectID(projectID),\n}\n```\n\n----------------------------------------\n\nTITLE: Removed Search Configurations in Tempo 2.1\nDESCRIPTION: This snippet lists the search configurations removed in the Tempo 2.1 upgrade, reflecting the removal of support for v2 block searches. Users should adjust their configurations in the overrides section to accommodate these changes.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/upgrade.md#2025-04-17_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\noverrides:\n  max_search_bytes_per_trace:\n  search_tags_allow_list:\n  search_tags_deny_list:\n```\n\n----------------------------------------\n\nTITLE: Complex XML Parsing Example\nDESCRIPTION: Demonstrates parsing of a complex XML document with attributes and nested elements\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_52\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<Log>\n  <User>\n    <ID>00001</ID>\n    <Name type=\"first\">Joe</Name>\n    <Email>joe.smith@example.com</Email>\n  </User>\n  <Text>User fired alert A</Text>\n</Log>\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tag\": \"Log\",\n  \"children\": [\n    {\n      \"tag\": \"User\",\n      \"children\": [\n        {\n          \"tag\": \"ID\",\n          \"content\": \"00001\"\n        },\n        {\n          \"tag\": \"Name\",\n          \"content\": \"Joe\",\n          \"attributes\": {\n            \"type\": \"first\"\n          }\n        },\n        {\n          \"tag\": \"Email\",\n          \"content\": \"joe.smith@example.com\"\n        }\n      ]\n    },\n    {\n      \"tag\": \"Text\",\n      \"content\": \"User fired alert A\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dedicated Column Structure in Go for Tempo Configuration\nDESCRIPTION: This Go code defines the structure of a dedicated column configuration in Tempo. It specifies the scope, attribute name, and type of the dedicated column, which can be set in Tempo's YAML configuration.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2023-05 vParquet3.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype DedicatedColumn struct {\n    Scope     string   `yaml:\"scope\"` // can be 'span' or 'resource'\n    Attribute string   `yaml:\"attribute\"`\n    Type      string   `yaml:\"type\"`  // for now only 'string' is supported\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from .env File in Go\nDESCRIPTION: Demonstrates how to load environment variables from a .env file and access them using os.Getenv(). This example includes an init() function to ensure variables are loaded early in the application lifecycle.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/subosito/gotenv/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/subosito/gotenv\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc init() {\n\tgotenv.Load()\n}\n\nfunc main() {\n\tlog.Println(os.Getenv(\"APP_ID\"))     // \"1234567\"\n\tlog.Println(os.Getenv(\"APP_SECRET\")) // \"abcdef\"\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmarking UvarintSize Function in Go\nDESCRIPTION: This code snippet shows benchmark results for the UvarintSize function, which is similar to sov* in gogo/protobuf. It demonstrates significant performance improvements compared to the old implementation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/dennwc/varint/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nbenchmark                    old ns/op     new ns/op     delta\nBenchmarkUvarintSize/1-8     1.71          0.43          -74.85%\nBenchmarkUvarintSize/2-8     2.56          0.57          -77.73%\nBenchmarkUvarintSize/3-8     3.22          0.72          -77.64%\nBenchmarkUvarintSize/4-8     3.74          0.72          -80.75%\nBenchmarkUvarintSize/5-8     4.29          0.57          -86.71%\nBenchmarkUvarintSize/6-8     4.85          0.58          -88.04%\nBenchmarkUvarintSize/7-8     5.43          0.71          -86.92%\nBenchmarkUvarintSize/8-8     6.01          0.86          -85.69%\nBenchmarkUvarintSize/9-8     6.64          1.00          -84.94%\n```\n\n----------------------------------------\n\nTITLE: Listing Supported String Replacement Functions in Go\nDESCRIPTION: This code block lists the supported bash string replacement functions in the envsubst package. These functions can be used for various string manipulations when expanding variables.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/drone/envsubst/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* `${var^}`\n* `${var^^}`\n* `${var,}`\n* `${var,,}`\n* `${var:position}`\n* `${var:position:length}`\n* `${var#substring}`\n* `${var##substring}`\n* `${var%substring}`\n* `${var%%substring}`\n* `${var/substring/replacement}`\n* `${var//substring/replacement}`\n* `${var/#substring/replacement}`\n* `${var/%substring/replacement}`\n* `${#var}`\n* `${var=default}`\n* `${var:=default}`\n* `${var:-default}`\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Target Groups in Service Discovery\nDESCRIPTION: This code snippet explains how to handle scenarios where all targets in a service discovery group go away. It shows the recommended approach of sending an empty Targets array along with the associated Source to indicate that the group is no longer active.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/prometheus/prometheus/discovery/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n&targetgroup.Group{\n\tTargets:  nil,\n\t\"Source\": \"file2\",\n}\n```\n\n----------------------------------------\n\nTITLE: Installing sockaddr CLI Utility with go get\nDESCRIPTION: The snippet provides the command to install the sockaddr CLI utility using go get. The CLI tool exposes functionality of the go-sockaddr library, serving as both an administrative and testing utility.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-sockaddr/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get -u github.com/hashicorp/go-sockaddr/cmd/sockaddr\n```\n\n----------------------------------------\n\nTITLE: Advanced Column Configuration in Go Table\nDESCRIPTION: Illustrates detailed column customization including alignment, colors, transformers, visibility, and width constraints using SetColumnConfigs().\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-17_snippet_9\n\nLANGUAGE: golang\nCODE:\n```\nnameTransformer := text.Transformer(func(val interface{}) string {\n    return text.Bold.Sprint(val)\n})\n\nt.SetColumnConfigs([]ColumnConfig{\n    {\n        Name:              \"First Name\",\n        Align:             text.AlignLeft,\n        Colors:            text.Colors{text.BgBlack, text.FgRed},\n        Transformer:       nameTransformer,\n        WidthMin:          6,\n        WidthMax:          64,\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Second JSON Patch Document Example\nDESCRIPTION: Example of a JSON patch document (patch.2.json) that adds an address field and replaces an age field in a JSON document.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/evanphx/json-patch/README.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\"op\": \"add\", \"path\": \"/address\", \"value\": \"123 Main St\"},\n    {\"op\": \"replace\", \"path\": \"/age\", \"value\": \"21\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Building Tempo Debug Image with Make\nDESCRIPTION: This command builds the Tempo debug image using make. It compiles Tempo without optimizations and creates a Docker image tagged with 'grafana/tempo-debug'. There are no prerequisites other than having make installed and configured.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/debug/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmake docker-tempo-debug\n```\n\n----------------------------------------\n\nTITLE: Tempo HTTP Endpoint Configuration (Docker Workaround)\nDESCRIPTION: This YAML snippet shows how to explicitly define the HTTP endpoint to bind to a specific hostname (e.g., `tempo`) within a Docker container.  This is a workaround for the change where Tempo now defaults to binding on `localhost` rather than `0.0.0.0`.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-7.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n# ...\n        http:\n          endpoint: \"tempo:4318\"\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Service Status\nDESCRIPTION: Commands to verify the status of running Docker services and their example output.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/getting-started/docker-example.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose ps\n```\n\nLANGUAGE: console\nCODE:\n```\nNAME                 COMMAND                  SERVICE             STATUS              PORTS\nlocal-grafana-1      \"/run.sh\"                grafana             running             0.0.0.0:3000->3000/tcp\nlocal-k6-tracing-1   \"/k6-tracing run /ex…\"   k6-tracing          running\nlocal-prometheus-1   \"/bin/prometheus --c…\"   prometheus          running             0.0.0.0:9090->9090/tcp\nlocal-tempo-1        \"/tempo -config.file…\"   tempo               running             0.0.0.0:3200->3200/tcp, 0.0.0.0:4317-4318->4317-4318/tcp, 0.0.0.0:9411->9411/tcp, 0.0.0.0:14268->14268/tcp\n```\n\n----------------------------------------\n\nTITLE: Binding a Custom Flag Set to Viper (Go)\nDESCRIPTION: Example showing how to bind a custom flag set that implements the FlagValueSet interface to Viper's configuration system.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nfSet := myFlagSet{\n\tflags: []myFlag{myFlag{}, myFlag{}},\n}\nviper.BindFlagValues(\"my-flags\", fSet)\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Values with Type Checking in Go using reflect2\nDESCRIPTION: Shows how to use reflect2 to get and set values using interface{} with type checking. The example demonstrates setting the value of an integer variable through reflection.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/modern-go/reflect2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvalType := reflect2.TypeOf(1)\ni := 1\nj := 10\nvalType.Set(&i, &j)\n// i will be 10\n```\n\n----------------------------------------\n\nTITLE: Installing jwt-go with go get\nDESCRIPTION: This command installs the jwt-go package using go get. The -u flag ensures that the package and its dependencies are updated to the latest versions. This command is the first step in using the jwt-go library in a Go project.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/golang-jwt/jwt/v5/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"go get -u github.com/golang-jwt/jwt/v5\"\n```\n\n----------------------------------------\n\nTITLE: Flush Operations\nDESCRIPTION: Endpoints to trigger flushing of in-memory traces to WAL, with optional tenant specification.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/_index.md#2025-04-17_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nGET,POST /flush\n```\n\nLANGUAGE: http\nCODE:\n```\nGET,POST /flush?tenant=dev\n```\n\n----------------------------------------\n\nTITLE: Traditional Go Error Handling\nDESCRIPTION: Basic Go error handling pattern showing typical error checking and propagation\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif err != nil {\n        return err\n}\n```\n\n----------------------------------------\n\nTITLE: Using TypeByName to Retrieve Types in Go with reflect2\nDESCRIPTION: Demonstrates how to use reflect2.TypeByName to retrieve a type by its package path and name. Note that types that aren't used may be eliminated by the compiler and won't be available at runtime.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/modern-go/reflect2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// given package is github.com/your/awesome-package\ntype MyStruct struct {\n\t// ...\n}\n\n// will return the type\nreflect2.TypeByName(\"awesome-package.MyStruct\")\n// however, if the type has not been used\n// it will be eliminated by compiler, so we can not get it in runtime\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Blob Client\nDESCRIPTION: Creates a new Azure Blob Storage client with the storage account URL and credentials. The new API simplifies client initialization by accepting a string URL instead of url.URL type.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/migrationguide.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nclient, err := azblob.NewClient(\"<my storage account URL>\", cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Using concurrent.Map in Go\nDESCRIPTION: Demonstrates how to use concurrent.Map, which is a backport of sync.Map for Go versions below 1.9. It shows storing and loading values from the map.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/modern-go/concurrent/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nm := concurrent.NewMap()\nm.Store(\"hello\", \"world\")\nelem, found := m.Load(\"hello\")\n// elem will be \"world\"\n// found will be true\n```\n\n----------------------------------------\n\nTITLE: Error Output from Conflicting Grafana Tempo Configurations\nDESCRIPTION: This error message is displayed when combining configurations A and B, where B nullifies the processors defined in A, causing a reference to a non-existent processor.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/confmap/README.md#2025-04-17_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nError: invalid configuration: service::pipelines::traces: references processor \"nop\" which is not configured\n2024/06/10 14:37:14 collector server run finished with error: invalid configuration: service::pipelines::traces: references processor \"nop\" which is not configured\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy v2 Block Format in Tempo\nDESCRIPTION: Configuration snippet for disabling Parquet by setting the block version to v2, which removes search capabilities but reduces resource consumption.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/parquet.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# block format version. options: v2, vParquet2, vParquet3, vParquet4\n[version: v2]\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Lowercase in Go\nDESCRIPTION: The ToLowerCase function converts a string to lowercase. It takes a target string as input and returns the lowercase version.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_61\n\nLANGUAGE: go\nCODE:\n```\nToLowerCase(target)\n```\n\n----------------------------------------\n\nTITLE: Creating OpenShift Data Foundation Storage Secret for Tempo Operator\nDESCRIPTION: This command creates a Kubernetes secret containing ODF bucket information and credentials for Tempo Operator to use as object storage.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/object-storage.md#2025-04-17_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nkubectl create secret generic tempostack-dev-odf \\\n  --from-literal=bucket=\"<BUCKET_NAME>\" \\\n  --from-literal=endpoint=\"https://s3.openshift-storage.svc\" \\\n  --from-literal=access_key_id=\"<ACCESS_KEY_ID>\" \\\n  --from-literal=access_key_secret=\"<ACCESS_KEY_SECRET>\"\n```\n\n----------------------------------------\n\nTITLE: Error Wrapping in Go OpenTelemetry Resource Package\nDESCRIPTION: The New and Detect functions from go.opentelemetry.io/otel/sdk/resource now return errors that wrap underlying errors instead of just containing the underlying error strings.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\nresource.New()\nresource.Detect()\n```\n\n----------------------------------------\n\nTITLE: Querying Remote Write Failures in PromQL\nDESCRIPTION: A set of PromQL queries to check if the metrics-generator is failing to write samples or exemplars to the remote write target.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/metrics-generator.md#2025-04-17_snippet_6\n\nLANGUAGE: promql\nCODE:\n```\nsum(rate(prometheus_remote_storage_samples_failed_total{}[1m]))\nsum(rate(prometheus_remote_storage_samples_dropped_total{}[1m]))\nsum(rate(prometheus_remote_storage_exemplars_failed_total{}[1m]))\nsum(rate(prometheus_remote_storage_exemplars_dropped_total{}[1m]))\n```\n\n----------------------------------------\n\nTITLE: Generating Metrics from Traces with Tempo CLI\nDESCRIPTION: This snippet explains how to use the Tempo CLI to call the Tempo API for generating metrics from traces using a specified TraceQL metrics query and time range. Additional options are available for organization ID and GRPC streaming.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/tempo_cli.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntempo-cli query api metrics <host-port> <trace-ql metrics query> [<start> <end>]\n```\n\n----------------------------------------\n\nTITLE: Filtering Invalid Metric Types\nDESCRIPTION: Configuration for dropping metrics with invalid or NONE type.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/processor/filterprocessor/README.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n  filter:\n    error_mode: ignore\n    metrics:\n      metric:\n        - type == METRIC_DATA_TYPE_NONE\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results After Performance Improvement (AMD CPU)\nDESCRIPTION: These are additional benchmark results for the improved name mangling functions, run on an AMD Ryzen processor. The results show further improvements in execution time compared to the Intel CPU benchmarks, demonstrating the impact of different hardware on performance.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-openapi/swag/BENCHMARK.md#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/swag\ncpu: AMD Ryzen 7 5800X 8-Core Processor             \nBenchmarkToXXXName/ToGoName-16         \t18527378\t      1972 ns/op\t      42 B/op\t       5 allocs/op\nBenchmarkToXXXName/ToVarName-16        \t15552692\t      2093 ns/op\t      62 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToFileName-16       \t32161176\t      1117 ns/op\t     147 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToCommandName-16    \t32256634\t      1137 ns/op\t     147 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToHumanNameLower-16 \t18599661\t      1946 ns/op\t      92 B/op\t       6 allocs/op\nBenchmarkToXXXName/ToHumanNameTitle-16 \t17581353\t      2054 ns/op\t     105 B/op\t       6 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Creating K3d Cluster for Tempo Deployment\nDESCRIPTION: Command to create a local Kubernetes cluster using k3d with specific port mappings and agent configuration\nSOURCE: https://github.com/grafana/tempo/blob/main/example/helm/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nk3d cluster create tempo --api-port 6443 --port \"3000:80@loadbalancer\" --agents 2\n```\n\n----------------------------------------\n\nTITLE: Network Connection Retry Using Backoff in Go\nDESCRIPTION: Shows how to use the backoff package to implement connection retry logic with the net package. This automatically increases wait time between connection attempts.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/jpillora/backoff/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nb := &backoff.Backoff{\n    Max:    5 * time.Minute,\n}\n\nfor {\n\tconn, err := net.Dial(\"tcp\", \"example.com:5309\")\n\tif err != nil {\n\t\td := b.Duration()\n\t\tfmt.Printf(\"%s, reconnecting in %s\", err, d)\n\t\ttime.Sleep(d)\n\t\tcontinue\n\t}\n\t//connected\n\tb.Reset()\n\tconn.Write([]byte(\"hello world!\"))\n\t// ... Read ... Write ... etc\n\tconn.Close()\n\t//disconnected\n}\n```\n\n----------------------------------------\n\nTITLE: Result of Typed Grok Parsing in Go\nDESCRIPTION: Shows the resulting map from parsing with type conversion, demonstrating how the port value is now an integer rather than a string in the output map.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/elastic/go-grok/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmap[string]interface {} {\n    \"destination.ip\": \"127.0.0.1\", \n    \"destination.port\": 1234, \n}\n```\n\n----------------------------------------\n\nTITLE: TraceQL Rate Query with Time Interval\nDESCRIPTION: A TraceQL metrics query showing how to specify a time interval for rate calculation, where 5m represents a 5-minute interval.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2023-11 TraceQL Metrics.md#2025-04-17_snippet_2\n\nLANGUAGE: traceql\nCODE:\n```\nrate(5m)\n```\n\n----------------------------------------\n\nTITLE: Installing Mapstructure with Go Get\nDESCRIPTION: Command to install the mapstructure library using Go's standard package manager.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/mitchellh/mapstructure/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/mitchellh/mapstructure\n```\n\n----------------------------------------\n\nTITLE: Basic Connector Declaration in YAML\nDESCRIPTION: Shows how to declare basic connectors (count and router) in the collector configuration file.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/connector/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  foo:\nexporters:\n  bar:\nconnectors:\n  count:\n  router:\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Processors in YAML Configuration for Grafana Tempo\nDESCRIPTION: This snippet shows how an empty 'processors' entry in YAML is treated as null, which can lead to configuration issues.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/confmap/README.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A template for the boilerplate notice that should be included when applying the Apache License 2.0 to software projects. This notice includes placeholders for copyright year and owner information, along with standard license text and a link to the full license.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/aws/aws-sdk-go/LICENSE.txt#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Querying Service Graph Expired Edges in PromQL\nDESCRIPTION: A PromQL query to determine the rate at which service graph edges are expiring without finding a match.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/metrics-generator.md#2025-04-17_snippet_7\n\nLANGUAGE: promql\nCODE:\n```\nsum(rate(tempo_metrics_generator_processor_service_graphs_expired_edges{}[1m]))\n```\n\n----------------------------------------\n\nTITLE: UserAgent Parsing Result Example in YAML\nDESCRIPTION: Example of the structure returned by the UserAgent function when parsing a curl user-agent string. It includes the agent name, version, and original string.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_72\n\nLANGUAGE: yaml\nCODE:\n```\n\"user_agent.name\": \"curl\"\n\"user_agent.version\": \"7.81.0\"\n\"user_agent.original\": \"curl/7.81.0\"\n```\n\n----------------------------------------\n\nTITLE: Updating Test Fixtures for procfs\nDESCRIPTION: This Bash script cleans up existing test fixture data and runs the test suite. It relies on the make command to automate the process of preparing test fixtures and ensures the correct files are in place for testing the procfs library. The output will be the result of the test execution.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/prometheus/procfs/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf testdata/fixtures\nmake test\n```\n\n----------------------------------------\n\nTITLE: Finding Elements with Value Conditions in Go\nDESCRIPTION: Example showing how to find elements that satisfy a condition on their value using XPath predicates.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/antchfx/xmlquery/README.md#2025-04-17_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nlist := xmlquery.Find(doc, \"//book[price<5]\")\n```\n\n----------------------------------------\n\nTITLE: Getting Year from Time in Go\nDESCRIPTION: The Year function extracts the year component from a time.Time value. It returns an int64 representing the year.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_80\n\nLANGUAGE: go\nCODE:\n```\nYear(Now())\n```\n\n----------------------------------------\n\nTITLE: Installing Koanf Core and Providers\nDESCRIPTION: Shell commands for installing the koanf core library along with various providers and parsers. Shows how to install specific providers like file, env, posflag and parsers like toml, json, yaml.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Install the core.\ngo get -u github.com/knadh/koanf/v2\n\n# Install the necessary Provider(s).\n# Available: file, env, posflag, basicflag, confmap, rawbytes,\n#            structs, fs, s3, appconfig/v2, consul/v2, etcd/v2, vault/v2, parameterstore/v2\n# eg: go get -u github.com/knadh/koanf/providers/s3\n# eg: go get -u github.com/knadh/koanf/providers/consul/v2\n\ngo get -u github.com/knadh/koanf/providers/file\n\n# Install the necessary Parser(s).\n# Available: toml, toml/v2, json, yaml, dotenv, hcl, hjson, nestedtext\n# go get -u github.com/knadh/koanf/parsers/$parser\n\ngo get -u github.com/knadh/koanf/parsers/toml\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus to Scrape Local Tempo\nDESCRIPTION: Modified Prometheus job configuration to scrape metrics from the Tempo instance running on the host machine instead of a Docker container.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/linux.md#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n  - job_name: 'tempo'\n\tstatic_configs:\n  \t- targets: [ '10.128.0.104:3200' ]\n```\n\n----------------------------------------\n\nTITLE: Compatibility Testing Matrix in CI\nDESCRIPTION: Added a compatibility testing suite in the CI system for multiple OS/Go version/architecture combinations.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_34\n\nLANGUAGE: Markdown\nCODE:\n```\n| OS      | Go Version | Architecture |\n| ------- | ---------- | ------------ |\n| Ubuntu  | 1.15       | amd64        |\n| Ubuntu  | 1.14       | amd64        |\n| Ubuntu  | 1.15       | 386          |\n| Ubuntu  | 1.14       | 386          |\n| MacOS   | 1.15       | amd64        |\n| MacOS   | 1.14       | amd64        |\n| Windows | 1.15       | amd64        |\n| Windows | 1.14       | amd64        |\n| Windows | 1.15       | 386          |\n| Windows | 1.14       | 386          |\n```\n\n----------------------------------------\n\nTITLE: Integrating Standard Library Flags with pflag and Viper (Go)\nDESCRIPTION: Complete example showing how to use the standard library flag package with pflag and Viper. It demonstrates importing standard flags into pflag and binding them to Viper for unified configuration access.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"flag\"\n\t\"github.com/spf13/pflag\"\n)\n\nfunc main() {\n\n\t// using standard library \"flag\" package\n\tflag.Int(\"flagname\", 1234, \"help message for flagname\")\n\n\tpflag.CommandLine.AddGoFlagSet(flag.CommandLine)\n\tpflag.Parse()\n\tviper.BindPFlags(pflag.CommandLine)\n\n\ti := viper.GetInt(\"flagname\") // retrieve value from viper\n\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Go modules replace feature for mapstructure\nDESCRIPTION: This Go modules replace directive allows the temporary use of a specific version of the new mapstructure package while maintaining compatibility with the legacy package. It is useful when gradual migration is required.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-viper/mapstructure/v2/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nreplace github.com/mitchellh/mapstructure => github.com/go-viper/mapstructure v1.6.0\n```\n\n----------------------------------------\n\nTITLE: Installing IAM API Go Client Library\nDESCRIPTION: This snippet shows how to install the IAM API client library for the Go programming language using the 'go get' command. Ensure that you have Go installed on your system before executing this command. The command fetches the necessary package from 'cloud.google.com/go/iam'.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/cloud.google.com/go/iam/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/iam\n```\n\n----------------------------------------\n\nTITLE: Validating Command-Line Arguments in Kong\nDESCRIPTION: This code snippet provides an implementation for validating command-line arguments within the Kong framework using a custom `Validatable` interface. It demonstrates how nodes in the command-line structure can implement validation logic either for general validation or with access to the Kong context.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/kong/README.md#2025-04-17_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\ntype Validatable interface {\n    Validate() error\n }\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype Validatable interface {\n    Validate(kctx *kong.Context) error\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Grafana Helm Repository\nDESCRIPTION: Commands to add and update the Grafana Helm repository\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/helm-charts/tempo-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add grafana https://grafana.github.io/helm-charts\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Declaring Afero Backend in Go\nDESCRIPTION: This snippet demonstrates how to declare a package variable and set it to a pointer to a filesystem using Afero.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar AppFs = afero.NewMemMapFs()\n\nor\n\nvar AppFs = afero.NewOsFs()\n```\n\n----------------------------------------\n\nTITLE: Defining INI Parser Grammar in Go\nDESCRIPTION: Go struct definitions for an INI file parser grammar using Participle's struct tag syntax.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/participle/v2/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype INI struct {\n  Properties []*Property `@@*`\n  Sections   []*Section  `@@*`\n}\n\ntype Section struct {\n  Identifier string      `\"[\" @Ident \"]\"`\n  Properties []*Property `@@*`\n}\n\ntype Property struct {\n  Key   string `@Ident \"=\"`\n  Value *Value `@@`\n}\n\ntype Value struct {\n  String *string  `  @String`\n  Float *float64  `| @Float`\n  Int    *int     `| @Int`\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing hash.Hash64 Interface Methods in Go\nDESCRIPTION: This snippet demonstrates the key methods of the Digest type, which implements the hash.Hash64 interface. It includes Write methods for both byte slices and strings, as well as a Sum64 method to compute the hash value.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (*Digest) Write([]byte) (int, error)\nfunc (*Digest) WriteString(string) (int, error)\nfunc (*Digest) Sum64() uint64\n```\n\n----------------------------------------\n\nTITLE: Sequential Connector Configuration\nDESCRIPTION: Demonstrates how to configure multiple connectors in sequence within pipelines.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/connector/README.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  foo:\nexporters:\n  bar:\nconnectors:\n  count:\n  count/the_counts:\nservice:\n  pipelines:\n    traces:\n      receivers: [foo]\n      exporters: [count]\n    metrics:\n      receivers: [count]\n      exporters: [bar/metrics_backend, count/the_counts]\n    metrics/count_the_counts:\n      receivers: [count/the_counts]\n      exporters: [bar]\n```\n\n----------------------------------------\n\nTITLE: Converting Strfmt Types to Strings in Go\nDESCRIPTION: Demonstrates how to convert strfmt types to strings using the String() method or direct type conversion. Also shows conversion of Date, DateTime, and Duration types to their time package equivalents.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-openapi/strfmt/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nstring(Email{})\ntime.Time(Time{})\ntime.Duration(Duration{})\n```\n\n----------------------------------------\n\nTITLE: Verbose Logging with glog in Go\nDESCRIPTION: Illustrates V-style logging in glog, allowing for fine-grained control over log verbosity levels.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/k8s.io/klog/v2/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nif glog.V(2) {\n\tglog.Info(\"Starting transaction...\")\n}\n\nglog.V(2).Infoln(\"Processed\", nItems, \"elements\")\n```\n\n----------------------------------------\n\nTITLE: Available Metrics in kprom Plugin for Kafka\nDESCRIPTION: List of metrics tracked by the kprom package. All metrics are counter vectors with various labels including node_id and topic.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/twmb/franz-go/plugin/kprom/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n#{ns}_connects_total{node_id=\"#{node}\"}\n#{ns}_connect_errors_total{node_id=\"#{node}\"}\n#{ns}_write_errors_total{node_id=\"#{node}\"}\n#{ns}_write_bytes_total{node_id=\"#{node}\"}\n#{ns}_read_errors_total{node_id=\"#{node}\"}\n#{ns}_read_bytes_total{node_id=\"#{node}\"}\n#{ns}_produce_bytes_total{node_id=\"#{node}\",topic=\"#{topic}\"}\n#{ns}_fetch_bytes_total{node_id=\"#{node}\",topic=\"#{topic}\"}\n#{ns}_buffered_produce_records_total\n#{ns}_buffered_fetch_records_total\n```\n\n----------------------------------------\n\nTITLE: Checking for List Type in Go\nDESCRIPTION: The IsList function returns true if the given value is a list (list, pcommon.ValueTypeSlice, pcommon.Slice, or any other list type), and false otherwise.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_40\n\nLANGUAGE: Go\nCODE:\n```\nIsList(log.body)\n```\n\nLANGUAGE: Go\nCODE:\n```\nIsList(resource.attributes[\"maybe a slice\"])\n```\n\n----------------------------------------\n\nTITLE: Ring Status Endpoints\nDESCRIPTION: Collection of endpoints for viewing hash ring status of different components.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/_index.md#2025-04-17_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nGET /distributor/ring\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /ingester/ring\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /metrics-generator/ring\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /compactor/ring\n```\n\n----------------------------------------\n\nTITLE: Configuring Conflicting Runtime Overrides Check (YAML)\nDESCRIPTION: YAML configuration to enable the check for conflicting runtime overrides. This setting helps warn users about preexisting runtime overrides that may conflict with user-configurable overrides.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/manage-advanced-systems/user-configurable-overrides.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  user_configurable_overrides:\n    api:\n      check_for_conflicting_runtime_overrides: true\n```\n\n----------------------------------------\n\nTITLE: Defining Viper's Encoding API Interfaces in Go\nDESCRIPTION: Definition of the new encoding API interfaces in Viper including Encoder, Decoder, and Codec. These interfaces allow customization of how Viper encodes and decodes configuration data between different formats.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/UPDATES.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Encoder encodes Viper's internal data structures into a byte representation.\n// It's primarily used for encoding a map[string]any into a file format.\ntype Encoder interface {\n\tEncode(v map[string]any) ([]byte, error)\n}\n\n// Decoder decodes the contents of a byte slice into Viper's internal data structures.\n// It's primarily used for decoding contents of a file into a map[string]any.\ntype Decoder interface {\n\tDecode(b []byte, v map[string]any) error\n}\n\n// Codec combines [Encoder] and [Decoder] interfaces.\ntype Codec interface {\n\tEncoder\n\tDecoder\n}\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Header Context in Go\nDESCRIPTION: Example of using azcore.WithHTTPHeader to add custom HTTP headers to a context for API requests.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nazcore.WithHTTPHeader\n```\n\n----------------------------------------\n\nTITLE: Building and Running a Specific Integration Test\nDESCRIPTION: This command combines building the Docker image with running a specific test.  `make docker-tempo` rebuilds the Tempo image, and the `go test` command runs the specified test (`TestMicroservicesWithKVStores$`) with caching disabled (`-count=1`) and verbose output (`-v`).\nSOURCE: https://github.com/grafana/tempo/blob/main/integration/e2e/README.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n\"make docker-tempo && go test -count=1 -v ./integration/e2e/... -run TestMicroservicesWithKVStores$\"\n```\n\n----------------------------------------\n\nTITLE: Unnamed Grok Pattern Matching in Go\nDESCRIPTION: Demonstrates how to use unnamed pattern matching by setting the second parameter of Compile to false, which includes all intermediary matches in the result.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/elastic/go-grok/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ng := grok.New()\n\n// use custom patterns\npatternDefinitions := map[string]string{\n    // patterns can be nested\n    \"NGINX_HOST\":         `(?:%{IP:destination.ip}|%{NGINX_NOTSEPARATOR:destination.domain})(:%{NUMBER:destination.port})?`,\n    // NGINX_NOTSEPARATOR is used in NGINX_HOST. IP and NUMBER are part of default pattern set\n    \"NGINX_NOTSEPARATOR\": `\"[^\\t ,:]\"`,\n}\ng.AddPatterns(patternDefinitions)\n\n// compile grok before use, this will generate regex.Regex based on pattern and \n// subpatterns provided\nerr := g.Compile(\"%{NGINX_HOST}\", false)\n\nres, err := g.ParseString(\"127.0.0.1:1234\")\n```\n\n----------------------------------------\n\nTITLE: Adding Replace Directive to Go Module\nDESCRIPTION: Command to modify go.mod file with a replace directive for handling legacy import paths. This downgrades the legacy import path to version 1.4.0.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.uber.org/atomic/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ go mod edit -replace github.com/uber-go/atomic=github.com/uber-go/atomic@v1.4.0\n```\n\n----------------------------------------\n\nTITLE: Installing go-colorable with Go command-line tool\nDESCRIPTION: This shell command installs the go-colorable library using Go's package manager. It requires an active internet connection and a correctly set up Go environment to execute successfully. The command fetches the go-colorable package from the remote repository to include it in the project.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/mattn/go-colorable/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ go get github.com/mattn/go-colorable\n```\n\n----------------------------------------\n\nTITLE: Helm Installation Output Example\nDESCRIPTION: Example output of a successful Tempo installation using Helm, showing deployment status and component information.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/helm-charts/tempo-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n>  helm -n tempo-test install tempo grafana/tempo-distributed -f custom.yaml\n\nW0210 15:02:09.901064    8613 warnings.go:70] spec.template.spec.topologySpreadConstraints[0].topologyKey: failure-domain.beta.kubernetes.io/zone is deprecated since v1.17; use \"topology.kubernetes.io/zone\" instead\nW0210 15:02:09.904082    8613 warnings.go:70] spec.template.spec.topologySpreadConstraints[0].topologyKey: failure-domain.beta.kubernetes.io/zone is deprecated since v1.17; use \"topology.kubernetes.io/zone\" instead\nW0210 15:02:09.906932    8613 warnings.go:70] spec.template.spec.topologySpreadConstraints[0].topologyKey: failure-domain.beta.kubernetes.io/zone is deprecated since v1.17; use \"topology.kubernetes.io/zone\" instead\nW0210 15:02:09.929946    8613 warnings.go:70] spec.template.spec.topologySpreadConstraints[0].topologyKey: failure-domain.beta.kubernetes.io/zone is deprecated since v1.17; use \"topology.kubernetes.io/zone\" instead\nW0210 15:02:09.930379    8613 warnings.go:70] spec.template.spec.topologySpreadConstraints[0].topologyKey: failure-domain.beta.kubernetes.io/zone is deprecated since v1.17; use \"topology.kubernetes.io/zone\" instead\nNAME: tempo\nLAST DEPLOYED: Fri May 31 15:02:08 2024\nNAMESPACE: tempo-test\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\nNOTES:\n***********************************************************************\n Welcome to Grafana Tempo\n Chart version: 1.10.1\n Tempo version: 2.6.1\n***********************************************************************\n\nInstalled components:\n* ingester\n* distributor\n* querier\n* query-frontend\n* compactor\n* memcached\n```\n\n----------------------------------------\n\nTITLE: Filtering Server Spans in Grafana Tempo (YAML)\nDESCRIPTION: This snippet demonstrates how to configure a filter policy to include only server spans for metrics export. It uses the intrinsic 'kind' attribute with a strict match type.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/metrics-generator/span_metrics.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nmetrics_generator:\n  processor:\n    span_metrics:\n      filter_policies:\n        - include:\n            match_type: strict\n            attributes:\n              - key: kind\n                value: SPAN_KIND_SERVER\n```\n\n----------------------------------------\n\nTITLE: Custom Print Functions in Go\nDESCRIPTION: Creating and using custom print functions for convenience\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Create a custom print function for convenience\nred := color.New(color.FgRed).PrintfFunc()\nred(\"Warning\")\nred(\"Error: %s\", err)\n\n// Mix up multiple attributes\nnotice := color.New(color.Bold, color.FgGreen).PrintlnFunc()\nnotice(\"Don't forget this...\")\n```\n\n----------------------------------------\n\nTITLE: Reading Configuration Values from etcd Using crypt CLI (Bash)\nDESCRIPTION: Command-line example showing how to read configuration values from etcd using the crypt tool.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ crypt get -plaintext /config/hugo.json\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Secrets Manager Provider in Koanf\nDESCRIPTION: This snippet demonstrates how to initialize the AWS Secrets Manager provider in Koanf. It uses the secretsmanager.Config{} and a function to transform string values.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nvault.SecretsMananger(secretsmanager.Config{}, f func(s string) string)\n```\n\n----------------------------------------\n\nTITLE: Loading Additional Pattern Sets in Grok\nDESCRIPTION: Shows how to load predefined pattern sets or individual patterns from the patterns directory, enabling the use of domain-specific pattern collections.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/elastic/go-grok/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ng := grok.New()\ng.AddPatterns(patterns.Rails) // to include whole set\ng.AddPattern(patterns.Ruby[\"RUBY_LOGLEVEL\"]) // to include specific one\n```\n\n----------------------------------------\n\nTITLE: Binding flag to variable using Var functions\nDESCRIPTION: Shows how to bind a flag to a variable using the IntVar() function, which associates the flag with a variable instead of returning a pointer.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar flagvar int\nfunc init() {\n    flag.IntVar(&flagvar, \"flagname\", 1234, \"help message for flagname\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using gotenv.Must for Error Handling in Go\nDESCRIPTION: Shows how to use gotenv.Must() to handle errors by causing a panic when an error occurs during environment variable loading.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/subosito/gotenv/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nerr := gotenv.Load(\".env-is-not-exist\")\nfmt.Println(\"error\", err)\n// error: open .env-is-not-exist: no such file or directory\n\ngotenv.Must(gotenv.Load, \".env-is-not-exist\")\n// it will throw a panic\n// panic: open .env-is-not-exist: no such file or directory\n```\n\n----------------------------------------\n\nTITLE: Setting Hedge Requests Configuration in YAML\nDESCRIPTION: YAML configuration for setting the 'upto' parameter on hedged requests for each backend using the 'hedge_requests_up_to' option.\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nhedge_requests_up_to: <value>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tempo for OpenShift\nDESCRIPTION: OpenShift-specific Tempo configuration using OpenShift OAuth for authentication and SubjectAccessReview for authorization.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/multitenancy.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: tempo.grafana.com/v1alpha1\nkind:  TempoStack\nmetadata:\n  name: simplest\nspec:\n  storage:\n    secret:\n      name: object-storage\n      type: s3\n  storageSize: 1Gi\n  tenants:\n    mode: openshift\n    authentication:\n      - tenantName: dev\n        tenantId: \"1610b0c3-c509-4592-a256-a1871353dbfa\"\n      - tenantName: prod\n        tenantId: \"1610b0c3-c509-4592-a256-a1871353dbfb\"\n  template:\n    gateway:\n      enabled: true\n    queryFrontend:\n      jaegerQuery:\n        enabled: true\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeApply Hook for Debug Logging in Kong CLI\nDESCRIPTION: Example of implementing a BeforeApply hook that sets a debug logger's output to stdout when triggered. This demonstrates how to use Kong hooks to modify behavior before command-line arguments are applied.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/kong/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// A flag with a hook that, if triggered, will set the debug loggers output to stdout.\ntype debugFlag bool\n\nfunc (d debugFlag) BeforeApply(logger *log.Logger) error {\n  logger.SetOutput(os.Stdout)\n  return nil\n}\n\nvar cli struct {\n  Debug debugFlag `help:\"Enable debug logging.\"`\n}\n\nfunc main() {\n  // Debug logger going to discard.\n  logger := log.New(io.Discard, \"\", log.LstdFlags)\n\n  ctx := kong.Parse(&cli, kong.Bind(logger))\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Go Module for GopherLua\nDESCRIPTION: Illustrates how to create a Lua module implemented in Go, including registering functions and values.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage mymodule\n\nimport (\n    \"github.com/yuin/gopher-lua\"\n)\n\nfunc Loader(L *lua.LState) int {\n    // register functions to the table\n    mod := L.SetFuncs(L.NewTable(), exports)\n    // register other stuff\n    L.SetField(mod, \"name\", lua.LString(\"value\"))\n\n    // returns the module\n    L.Push(mod)\n    return 1\n}\n\nvar exports = map[string]lua.LGFunction{\n    \"myfunc\": myfunc,\n}\n\nfunc myfunc(L *lua.LState) int {\n    return 0\n}\n```\n\n----------------------------------------\n\nTITLE: Baseline Memory Usage Program in Go\nDESCRIPTION: This Go program is used to establish a baseline for memory usage. It simply sleeps for 600 seconds without performing any metric-related operations.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/rcrowley/go-metrics/memory.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"time\"\n\nfunc main() {\n\ttime.Sleep(600e9)\n}\n```\n\n----------------------------------------\n\nTITLE: Hedging Configuration YAML\nDESCRIPTION: New configuration options for query hedging to external endpoints with default values.\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nquerier:\n  search:\n    external_hedge_requests_at: 5s\n    external_hedge_requests_up_to: 3\n```\n\n----------------------------------------\n\nTITLE: Basic URL Parsing Result in YAML\nDESCRIPTION: Example of the structure returned by the URL function when parsing a simple URL. It includes the original URL, scheme, domain, and path.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_75\n\nLANGUAGE: yaml\nCODE:\n```\n\"url.original\": \"http://www.example.com\",\n\"url.scheme\":   \"http\",\n\"url.domain\":   \"www.example.com\",\n\"url.path\":     \"\",\n```\n\n----------------------------------------\n\nTITLE: Installing Google Auth Library\nDESCRIPTION: This snippet demonstrates how to install the Google Auth Library for Go using the Go package manager. Ensure you have Go installed and properly configured in your environment before executing this command.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/cloud.google.com/go/auth/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/auth@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Service Graphs Documentation\nDESCRIPTION: YAML frontmatter configuration for the service graphs documentation page. It sets up aliases, title, description, and weight for the page in the Grafana Tempo documentation.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/metrics-generator/service_graphs/_index.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\naliases:\n  - ../server_side_metrics/service_graphs/ # /docs/tempo/<TEMPO_VERSION>/server_side_metrics/service_graphs/\ntitle: Service graphs\ndescription: Service graphs help you understand the structure of a distributed system and the connections and dependencies between its components.\nweight: 300\n---\n```\n\n----------------------------------------\n\nTITLE: Verifying Azure CLI Token Access\nDESCRIPTION: An Azure CLI command to verify the CLI can obtain access tokens for the logged-in account. This command attempts to get a token for the Azure Resource Manager API, which helps confirm the CLI's authentication is working properly.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-17_snippet_4\n\nLANGUAGE: azurecli\nCODE:\n```\naz account get-access-token --output json --resource https://management.core.windows.net\n```\n\n----------------------------------------\n\nTITLE: Documentation Note Block in Markdown\nDESCRIPTION: A note block highlighting version compatibility information for the Log Context documentation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/contexts/ottllog/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\\n> This documentation applies only to version `0.120.0` and later. For information on earlier versions, please refer to the previous [documentation](https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/release/0.119.x/pkg/ottl/contexts/ottllog/README.md)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using S2 Dictionary from Sample File in Go\nDESCRIPTION: This snippet demonstrates how to create an S2 dictionary from a sample file, encode data using the dictionary, and decode the encoded data. It also shows how to save and reload the dictionary.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\n    // Read a sample\n    sample, err := os.ReadFile(\"sample.json\")\n\n    // Create a dictionary.\n    dict := s2.MakeDict(sample, nil)\n\t\n    // b := dict.Bytes() will provide a dictionary that can be saved\n    // and reloaded with s2.NewDict(b).\n\t\n    // To encode:\n    encoded := dict.Encode(nil, file)\n\n    // To decode:\n    decoded, err := dict.Decode(nil, file)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Array Bounds Handling Differences in go-toml v1 vs v2\nDESCRIPTION: Comparison of how go-toml v1 and v2 handle arrays when the TOML document contains more elements than the destination array's capacity. V1 returns an error while v2 ignores extra values to match encoding/json behavior.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype doc struct {\n\tA [2]string\n}\nd := doc{}\nerr := toml.Unmarshal([]byte(`A = [\"one\", \"two\", \"many\"]`), &d)\nfmt.Println(err)\n\n// (1, 1): unmarshal: TOML array length (3) exceeds destination array length (2)\n```\n\nLANGUAGE: go\nCODE:\n```\nerr := toml.Unmarshal([]byte(`A = [\"one\", \"two\", \"many\"]`), &d)\nfmt.Println(\"err:\", err, \"d:\", d)\n// err: <nil> d: {[one two]}\n```\n\n----------------------------------------\n\nTITLE: Using WhiteList Function in Go\nDESCRIPTION: Example of using the WhiteList function to remove all characters from a string except those in the specified range. In this case, it only keeps characters between 'a' and 'z'.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_20\n\nLANGUAGE: go\nCODE:\n```\n// Remove all characters from string ignoring characters between \"a\" and \"z\"\nprintln(govalidator.WhiteList(\"a3a43a5a4a3a2a23a4a5a4a3a4\", \"a-z\") == \"aaaaaaaaaaaa\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached in Jsonnet\nDESCRIPTION: This Jsonnet snippet imports the Memcached library and configures a Memcached instance to cache chunks. It specifies parameters like name, max item size, and memory limit.\nSOURCE: https://github.com/grafana/tempo/blob/main/operations/jsonnet-compiled/util/vendor/github.com/grafana/jsonnet-libs/memcached/README.md#2025-04-17_snippet_2\n\nLANGUAGE: jsonnet\nCODE:\n```\nlocal memcached = import \"memcached/memcached.libsonnet\";\n\nmemcached + {\n  // Memcached instance used to cache chunks.\n  memcached_chunks: $.memcached {\n    name: 'memcached',\n    max_item_size: '2m',\n    memory_limit_mb: 4096,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Subset of Builtin Modules in GopherLua\nDESCRIPTION: Shows how to selectively open a subset of built-in Lua modules in GopherLua, useful for restricting access to certain functionalities.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    L := lua.NewState(lua.Options{SkipOpenLibs: true})\n    defer L.Close()\n    for _, pair := range []struct {\n        n string\n        f lua.LGFunction\n    }{\n        {lua.LoadLibName, lua.OpenPackage}, // Must be first\n        {lua.BaseLibName, lua.OpenBase},\n        {lua.TabLibName, lua.OpenTable},\n    } {\n        if err := L.CallByParam(lua.P{\n            Fn:      L.NewFunction(pair.f),\n            NRet:    0,\n            Protect: true,\n        }, lua.LString(pair.n)); err != nil {\n            panic(err)\n        }\n    }\n    if err := L.DoFile(\"main.lua\"); err != nil {\n        panic(err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Keeping Specific Keys in Map Attributes in OTTL\nDESCRIPTION: Function to remove all keys from a pcommon.Map except those specified, allowing precise attribute filtering.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_5\n\nLANGUAGE: OTTL\nCODE:\n```\nkeep_keys(log.attributes, [\"http.method\"])\n```\n\nLANGUAGE: OTTL\nCODE:\n```\nkeep_keys(resource.attributes, [\"http.method\", \"http.route\", \"http.url\"])\n```\n\n----------------------------------------\n\nTITLE: DELETE Request for Removing Overrides (Shell)\nDESCRIPTION: Example cURL command to delete existing overrides for a specific tenant using the DELETE /api/overrides endpoint. It shows how to include the X-Scope-OrgID header and the If-Match header for versioning.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/manage-advanced-systems/user-configurable-overrides.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE -H \"X-Scope-OrgID: 3\" -H \"If-Match: 1697726795401423\" http://localhost:3100/api/overrides\n```\n\n----------------------------------------\n\nTITLE: Setting up the Jaeger Client Go Development Environment\nDESCRIPTION: Commands to properly clone the Jaeger Client Go repository into the correct GOPATH location and initialize the project with its dependencies.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/uber/jaeger-client-go/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $GOPATH/src/github.com/uber\ncd $GOPATH/src/github.com/uber\ngit clone git@github.com:jaegertracing/jaeger-client-go.git jaeger-client-go\ncd jaeger-client-go\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Restoring Removed Format Support in Viper with External Packages in Go\nDESCRIPTION: Example of importing and registering previously built-in formats (HCL, Java properties, INI) that were removed from Viper core. This demonstrates how to maintain backward compatibility by using the go-viper/encoding packages.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/UPDATES.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/go-viper/encoding/hcl\"\n    \"github.com/go-viper/encoding/javaproperties\"\n    \"github.com/go-viper/encoding/ini\"\n)\n\ncodecRegistry := viper.NewCodecRegistry()\n\n{\n    codec := hcl.Codec{}\n\n    codecRegistry.RegisterCodec(\"hcl\", codec)\n    codecRegistry.RegisterCodec(\"tfvars\", codec)\n\n}\n\n{\n    codec := &javaproperties.Codec{}\n\n    codecRegistry.RegisterCodec(\"properties\", codec)\n    codecRegistry.RegisterCodec(\"props\", codec)\n    codecRegistry.RegisterCodec(\"prop\", codec)\n}\n\ncodecRegistry.RegisterCodec(\"ini\", ini.Codec{})\n\nv := viper.NewWithOptions(\n    viper.WithCodecRegistry(codecRegistry),\n)\n```\n\n----------------------------------------\n\nTITLE: System Call Assembly Interface Definitions\nDESCRIPTION: Core assembly function prototypes for system call dispatch with three entry points: Syscall, Syscall6, and RawSyscall. These functions handle system call arguments and scheduling.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/golang.org/x/sys/unix/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\nfunc Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)\nfunc RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Active Series in YAML\nDESCRIPTION: A YAML configuration snippet to adjust the maximum number of active series the metrics-generator can produce.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/metrics-generator.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  defaults:\n    metrics_generator:\n      max_active_series: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Span Limits with Environment Variables in Go\nDESCRIPTION: Added support to configure span limits using environment variables in the OpenTelemetry Go SDK. The code sets up environment variables to control various span limits.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_22\n\nLANGUAGE: Go\nCODE:\n```\nOTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT=<value>\nOTEL_SPAN_ATTRIBUTE_COUNT_LIMIT=<value>\nOTEL_SPAN_EVENT_COUNT_LIMIT=<value>\nOTEL_EVENT_ATTRIBUTE_COUNT_LIMIT=<value>\nOTEL_SPAN_LINK_COUNT_LIMIT=<value>\nOTEL_LINK_ATTRIBUTE_COUNT_LIMIT=<value>\n```\n\n----------------------------------------\n\nTITLE: Build Info Command Example\nDESCRIPTION: Command to display available components in an OpenTelemetry Collector distribution.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/service/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n   ./otelcorecol components\n```\n\n----------------------------------------\n\nTITLE: Moving Tempo Configuration File\nDESCRIPTION: Command to copy the Tempo configuration file to the appropriate system directory.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/linux.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp tempo.yaml /etc/tempo/config.yml\n```\n\n----------------------------------------\n\nTITLE: Parsing User Agent Strings in Go\nDESCRIPTION: The UserAgent function parses a user-agent string and returns structured information about the browser or client. It returns a map with name, version, and original string values.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_71\n\nLANGUAGE: go\nCODE:\n```\nUserAgent(\"curl/7.81.0\")\n```\n\n----------------------------------------\n\nTITLE: Metrics Summary API Curl Example\nDESCRIPTION: Example curl command to query the metrics summary API with service name filtering and grouping by name.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/metrics-summary.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"$URL/api/metrics/summary\" --data-urlencode 'q={resource.service.name=\"checkout-service\"}' --data-urlencode 'groupBy=name'\n```\n\n----------------------------------------\n\nTITLE: Inserting Colors into Regular Strings in Go\nDESCRIPTION: Using Sprint functions to mix colored and non-colored strings\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Create SprintXxx functions to mix strings with other non-colorized strings:\nyellow := color.New(color.FgYellow).SprintFunc()\nred := color.New(color.FgRed).SprintFunc()\nfmt.Printf(\"This is a %s and this is %s.\\n\", yellow(\"warning\"), red(\"error\"))\n\ninfo := color.New(color.FgWhite, color.BgGreen).SprintFunc()\nfmt.Printf(\"This %s rocks!\\n\", info(\"package\"))\n\n// Use helper functions\nfmt.Println(\"This\", color.RedString(\"warning\"), \"should be not neglected.\")\nfmt.Printf(\"%v %v\\n\", color.GreenString(\"Info:\"), \"an important message.\")\n\n// Windows supported too! Just don't forget to change the output to color.Output\nfmt.Fprintf(color.Output, \"Windows support: %s\", color.GreenString(\"PASS\"))\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for trace/noop Package in Markdown\nDESCRIPTION: This code snippet shows how to display a PkgGoDev badge for the trace/noop package using Markdown syntax. The badge links to the package documentation on pkg.go.dev.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/trace/noop/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/trace/noop)](https://pkg.go.dev/go.opentelemetry.io/otel/trace/noop)\n```\n\n----------------------------------------\n\nTITLE: Invalid Connector Pipeline Configuration\nDESCRIPTION: Shows an example of invalid connector configuration where unsupported pipeline types are connected.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/connector/README.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  foo:\nexporters:\n  bar:\nconnectors:\n  count:\nservice:\n  pipelines:\n    traces:\n      receivers: [foo]\n      exporters: [count]\n    logs:\n      receivers: [count] # Invalid. The count connector does not support traces -> logs.\n      exporters: [bar]\n```\n\n----------------------------------------\n\nTITLE: Formatting Word Series in Go using Humanize English Package\nDESCRIPTION: Illustrates the use of english.WordSeries() and english.OxfordWordSeries() functions from the humanize/english subpackage to format comma-separated word lists with conjunctions.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nenglish.WordSeries([]string{\"foo\"}, \"and\") // foo\nenglish.WordSeries([]string{\"foo\", \"bar\"}, \"and\") // foo and bar\nenglish.WordSeries([]string{\"foo\", \"bar\", \"baz\"}, \"and\") // foo, bar and baz\n\nenglish.OxfordWordSeries([]string{\"foo\", \"bar\", \"baz\"}, \"and\") // foo, bar, and baz\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Configuration Resolving Process in Markdown\nDESCRIPTION: This code snippet illustrates the step-by-step process of configuration resolving using ASCII art in a Markdown code block. It shows the interaction between the Resolver, Provider, and Converter components.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/confmap/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```terminal\n              Resolver                   Provider\n   Resolve       │                          │\n────────────────►│                          │\n                 │                          │\n              ┌─ │        Retrieve          │\n              │  ├─────────────────────────►│\n              │  │          Conf            │\n              │  │◄─────────────────────────┤\n  foreach     │  │                          │\n  configURI   │  ├───┐                      │\n              │  │   │Merge                 │\n              │  │◄──┘                      │\n              └─ │                          │\n              ┌─ │        Retrieve          │\n              │  ├─────────────────────────►│\n              │  │    Partial Conf Value    │\n              │  │◄─────────────────────────┤\n  foreach     │  │                          │\n  embedded    │  │                          │\n  configURI   │  ├───┐                      │\n              │  │   │Replace               │\n              │  │◄──┘                      │\n              └─ │                          │\n                 │            Converter     │\n              ┌─ │     Convert    │         │\n              │  ├───────────────►│         │\n    foreach   │  │                │         │\n   Converter  │  │◄───────────────┤         │\n              └─ │                          │\n                 │                          │\n◄────────────────┤                          │\n```\n```\n\n----------------------------------------\n\nTITLE: go-toml v2 Interface Decoding Example\nDESCRIPTION: This code snippet demonstrates how go-toml v2 handles decoding into non-nil interfaces.  It disregards the existing value in the interface and replaces it with a `map[string]interface{}`.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n\"toml.Unmarshal([]byte(data), &d)\\nfmt.Printf(\\\"toml v2: %#v\\\\n\\\", d)\n\n// toml v2: main.doc{A:map[string]interface {}{\\\"B\\\":\\\"After\\\"}}\"\n```\n\n----------------------------------------\n\nTITLE: Example Trace Limit Error Logs (Text)\nDESCRIPTION: These log messages indicate that trace ingestion is failing because trace limits have been exceeded. The messages specify the type of limit that was exceeded, such as the maximum trace size, the maximum number of live traces per tenant, or the ingestion rate limit. To resolve this, increase the relevant limits in the Tempo configuration.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/send-traces/max-trace-limit-reached.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\"msg=\\\"pusher failed to consume trace data\\\" err=\\\"rpc error: code = FailedPrecondition desc = TRACE_TOO_LARGE: max size of trace (52428800) exceeded while adding 15632 bytes to trace a0fbd6f9ac5e2077d90a19551dd67b6f for tenant single-tenant\\\"\\nmsg=\\\"pusher failed to consume trace data\\\" err=\\\"rpc error: code = FailedPrecondition desc = LIVE_TRACES_EXCEEDED: max live traces per tenant exceeded: per-user traces limit (local: 60000 global: 0 actual local: 60000) exceeded\\\"\\nmsg=\\\"pusher failed to consume trace data\\\" err=\\\"rpc error: code = ResourceExhausted desc = RATE_LIMITED: ingestion rate limit (15000000 bytes) exceeded while adding 10 bytes\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Benchmarking MD5 Implementation Performance Comparison\nDESCRIPTION: Performance benchmark results comparing standard crypto/md5 package with AVX2 (8 lanes) and AVX512 (16 lanes) implementations. Shows throughput in MB/s and memory allocation metrics.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/minio/md5-simd/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nBenchmarkCryptoMd5-4                     687.66 MB/s           0 B/op          0 allocs/op\nBenchmarkBlock8-4                       4144.80 MB/s           0 B/op          0 allocs/op\nBenchmarkBlock16-4                      8228.88 MB/s           0 B/op          0 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Sorting Table Rows in Go\nDESCRIPTION: Demonstrates multi-column sorting capabilities, allowing rows to be sorted first by one column and then by another in case of duplicate values.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-17_snippet_7\n\nLANGUAGE: golang\nCODE:\n```\nt.SortBy([]table.SortBy{\n    {Name: \"First Name\", Mode: table.Asc},\n    {Name: \"Last Name\", Mode: table.Asc},\n})\n```\n\n----------------------------------------\n\nTITLE: Building Latest Debug Image\nDESCRIPTION: This command builds the latest Docker debug image for Tempo. `make docker-tempo-debug` creates a Tempo image with debugging tools included.\nSOURCE: https://github.com/grafana/tempo/blob/main/integration/e2e/README.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n\"make docker-tempo-debug\"\n```\n\n----------------------------------------\n\nTITLE: Basic Tempo Deployment with Tanka\nDESCRIPTION: Basic command to deploy Tempo using Tanka configuration from the specified environment file.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/tanka.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ntk apply environments/tempo/main.jsonnet\n```\n\n----------------------------------------\n\nTITLE: Escaping Quotes in Attribute Names in TraceQL\nDESCRIPTION: Shows how to escape quotes within an attribute name using backslashes.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2023-11 TraceQL Extensions.md#2025-04-17_snippet_1\n\nLANGUAGE: traceql\nCODE:\n```\n{ span.\"this is \\\"bad\\\"\" = \"foo\"}\n```\n\n----------------------------------------\n\nTITLE: Connecting Viper to NATS Remote Provider (Go)\nDESCRIPTION: Example showing how to configure Viper to read configuration from a NATS remote provider. It specifies the provider type, NATS server URL, and configuration subject.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_24\n\nLANGUAGE: go\nCODE:\n```\nviper.AddRemoteProvider(\"nats\", \"nats://127.0.0.1:4222\", \"myapp.config\")\nviper.SetConfigType(\"json\")\nerr := viper.ReadRemoteConfig()\n```\n\n----------------------------------------\n\nTITLE: Complex URL Parsing Result in YAML\nDESCRIPTION: Example of the structure returned by the URL function when parsing a complex URL. It includes all components like path, fragment, extension, authentication details, port, domain, and query parameters.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_77\n\nLANGUAGE: yaml\nCODE:\n```\n\"url.path\":      \"/foo.gif\",\n\"url.fragment\":  \"fragment\",\n\"url.extension\": \"gif\",\n\"url.password\":  \"mypassword\",\n\"url.original\":  \"http://myusername:mypassword@www.example.com:80/foo.gif?key1=val1&key2=val2#fragment\",\n\"url.scheme\":    \"http\",\n\"url.port\":      80,\n\"url.user_info\": \"myusername:mypassword\",\n\"url.domain\":    \"www.example.com\",\n\"url.query\":     \"key1=val1&key2=val2\",\n\"url.username\":  \"myusername\",\n```\n\n----------------------------------------\n\nTITLE: Updating Service Version in Go Client Files\nDESCRIPTION: YAML directive to replace hardcoded service version with a variable in multiple Go client files.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: \n  - zz_appendblob_client.go\n  - zz_blob_client.go\n  - zz_blockblob_client.go\n  - zz_container_client.go\n  - zz_pageblob_client.go\n  - zz_service_client.go\n  where: $\n  transform: >-\n    return $.\n      replaceAll(`[]string{\"2021-12-02\"}`, `[]string{ServiceVersion}`);\n```\n\n----------------------------------------\n\nTITLE: Building URLs from Named Routes in Gorilla Mux\nDESCRIPTION: Shows how to generate a URL from a named route by passing key/value pairs for route variables. This ensures that all generated URLs will match the defined routes in your application.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nurl, err := r.Get(\"article\").URL(\"category\", \"technology\", \"id\", \"42\")\n```\n\n----------------------------------------\n\nTITLE: POST Request for Updating Overrides (Shell)\nDESCRIPTION: Example cURL command to update overrides for a specific tenant using the POST /api/overrides endpoint. It shows how to include the X-Scope-OrgID header and the If-Match header for versioning.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/manage-advanced-systems/user-configurable-overrides.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -v -H \"X-Scope-OrgID: 3\" -H \"If-Match: 1697726795401423\" http://localhost:3100/api/overrides --data \"{}\"\n```\n\n----------------------------------------\n\nTITLE: Adding Replace Directive Example for Go.mod\nDESCRIPTION: Example of a replace directive to add to go.mod for handling legacy import paths. This directive maps the old import path to version 1.4.0.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.uber.org/atomic/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nreplace github.com/uber-go/atomic => github.com/uber-go/atomic v1.4.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Tempo Data Source\nDESCRIPTION: Modified Grafana data source configuration to point to the local Tempo instance running on the host machine instead of a Docker container.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/linux.md#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Tempo\n  type: tempo\n  access: proxy\n  orgId: 1\n  url: http://10.128.0.104:3200\n```\n\n----------------------------------------\n\nTITLE: Updating Overrides Configuration in Tempo\nDESCRIPTION: This snippet demonstrates how to transition from the old to the new overrides configuration in Tempo after upgrading. The new configuration introduces a `defaults` block for globally or per-tenant configuring ingestion rates, burst sizes, and forwarder settings. Users should ensure compatibility with existing configurations during the upgrade.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/upgrade.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  ingestion_rate_strategy: local\n  ingestion_rate_limit_bytes: 12345\n  ingestion_burst_size_bytes: 67890\n  max_search_duration: 17s\n  forwarders: ['foo']\n  metrics_generator_processors: [service-graphs, span-metrics]\n```\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  defaults:\n    ingestion:\n      rate_strategy: local\n      rate_limit_bytes: 12345\n      burst_size_bytes: 67890\n    read:\n      max_search_duration: 17s\n    forwarders: ['foo']\n    metrics_generator:\n      processors: [service-graphs, span-metrics]\n```\n\n----------------------------------------\n\nTITLE: Running Tempo Nomad Job\nDESCRIPTION: Executes the Nomad job to deploy Grafana Tempo using the provided tempo.hcl configuration file. Prerequisites include S3 compatible storage. It specifies a command to run in a shell that leverages the `nomad job run` command to deploy Tempo. Users can specify a custom version by changing the default version variable or using a command-line parameter.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/nomad/tempo-monolith/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnomad job run tempo.hcl\n```\n\nLANGUAGE: shell\nCODE:\n```\nnomad job run -var=\\\"version=2.7.1\\\" tempo.hcl\n```\n\n----------------------------------------\n\nTITLE: Using natsort to Sort Strings Naturally in Go\nDESCRIPTION: Example demonstrating how to use the natsort package to sort strings containing alphanumeric values in a natural order. This example sorts a list of product names with embedded numbers, producing output that follows human-expected ordering rather than lexicographical ordering.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/facette/natsort/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\n\n    \"facette.io/natsort\"\n)\n\nfunc main() {\n    list := []string{\n        \"1000X Radonius Maximus\",\n        \"10X Radonius\",\n        \"200X Radonius\",\n        \"20X Radonius\",\n        \"20X Radonius Prime\",\n        \"30X Radonius\",\n        \"40X Radonius\",\n        \"Allegia 50 Clasteron\",\n        \"Allegia 500 Clasteron\",\n        \"Allegia 50B Clasteron\",\n        \"Allegia 51 Clasteron\",\n        \"Allegia 6R Clasteron\",\n        \"Alpha 100\",\n        \"Alpha 2\",\n        \"Alpha 200\",\n        \"Alpha 2A\",\n        \"Alpha 2A-8000\",\n        \"Alpha 2A-900\",\n        \"Callisto Morphamax\",\n        \"Callisto Morphamax 500\",\n        \"Callisto Morphamax 5000\",\n        \"Callisto Morphamax 600\",\n        \"Callisto Morphamax 6000 SE\",\n        \"Callisto Morphamax 6000 SE2\",\n        \"Callisto Morphamax 700\",\n        \"Callisto Morphamax 7000\",\n        \"Xiph Xlater 10000\",\n        \"Xiph Xlater 2000\",\n        \"Xiph Xlater 300\",\n        \"Xiph Xlater 40\",\n        \"Xiph Xlater 5\",\n        \"Xiph Xlater 50\",\n        \"Xiph Xlater 500\",\n        \"Xiph Xlater 5000\",\n        \"Xiph Xlater 58\",\n    }\n\n    natsort.Sort(list)\n\n    fmt.Println(strings.Join(list, \"\\n\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Using Standard Colors in Go\nDESCRIPTION: Examples of using basic color helper functions for printing colored text\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Print with default helper functions\ncolor.Cyan(\"Prints text in cyan.\")\n\n// A newline will be appended automatically\ncolor.Blue(\"Prints %s in blue.\", \"text\")\n\n// These are using the default foreground colors\ncolor.Red(\"We have red\")\ncolor.Magenta(\"And many others ..\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Tracing in Client Creation - Go\nDESCRIPTION: Methods `Enabled()`, `SetAttributes()`, and `SpanFromContext()` are introduced in the `tracing.Tracer`. These provide enhanced functionality for managing tracing features like checking if tracing is active, setting attributes for spans, and obtaining spans from context.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (t *Tracer) Enabled() bool {\n    // Check if tracer is enabled\n}\n\nfunc (t *Tracer) SetAttributes(attrs map[string]interface{}) {\n    // Set attributes for tracer\n}\n\nfunc (t *Tracer) SpanFromContext(ctx context.Context) Span {\n    // Get span from context\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying the 'Response larger than the max' Error in Tempo\nDESCRIPTION: Example of the error message displayed when a response exceeds the maximum size limit in Grafana Tempo. This error typically appears when responses between components (especially between querier and query frontend) exceed configured limits.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/querying/response-too-large.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n500 Internal Server Error Body: response larger than the max (<size> vs <limit>)\n```\n\n----------------------------------------\n\nTITLE: Replacing Matching Entire Strings in OTTL\nDESCRIPTION: The replace_match function replaces entire strings if they match a glob pattern with a replacement string. It supports optional function application.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_10\n\nLANGUAGE: OTTL\nCODE:\n```\nreplace_match(span.attributes[\"http.target\"], \"/user/*/list/*\", \"/user/{userId}/list/{listId}\")\n```\n\nLANGUAGE: OTTL\nCODE:\n```\nreplace_match(span.attributes[\"http.target\"], \"/user/*/list/*\", \"/user/{userId}/list/{listId}\", SHA256, \"/user/%s\")\n```\n\n----------------------------------------\n\nTITLE: Increase Tenant Index Builders in Tempo\nDESCRIPTION: This YAML configuration snippet increases the number of tenant index builders in the Tempo system, which can help manage old tenant indexes and improve index building performance. It sets the blocklist_poll_tenant_index_builders value, which determines how many builders are used.\nSOURCE: https://github.com/grafana/tempo/blob/main/operations/tempo-mixin/runbook.md#2025-04-17_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nstorage:\n  trace:\n    blocklist_poll_tenant_index_builders: 2  # <- increase this value\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Validator in Go\nDESCRIPTION: Demonstrates the new method for adding a custom validator to prevent data races when accessing custom validators.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n\n// before\ngovalidator.CustomTypeTagMap[\"customByteArrayValidator\"] = func(i interface{}, o interface{}) bool {\n  // ...\n}\n\n// after\ngovalidator.CustomTypeTagMap.Set(\"customByteArrayValidator\", func(i interface{}, o interface{}) bool {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Consul JSON Configuration Format Example (JSON)\nDESCRIPTION: Example JSON format for storing configuration in Consul key/value storage. It shows a simple configuration with port and hostname values.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"port\": 8080,\n    \"hostname\": \"myhostname.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with NotFound Handler\nDESCRIPTION: Demonstrates how to serve static files using the NotFound handler by configuring an HTTP file server for a specific directory.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/julienschmidt/httprouter/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Serve static files from the ./public directory\nrouter.NotFound = http.FileServer(http.Dir(\"public\"))\n```\n\n----------------------------------------\n\nTITLE: Building Latest Docker Images\nDESCRIPTION: These commands build the latest Docker images for Tempo and Tempo Query.  `make docker-tempo` builds the main Tempo image and `make docker-tempo-query` builds the Tempo Query image. These are necessary for running integration tests against the most up-to-date code.\nSOURCE: https://github.com/grafana/tempo/blob/main/integration/e2e/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"make docker-tempo\nmake docker-tempo-query\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock Clock in Go\nDESCRIPTION: This snippet defines the MockClock struct for testing purposes. It allows controlling time progression manually, enabling precise time-based testing scenarios.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/k8s.io/utils/clock/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ntype MockClock struct {\n\tcurTime time.Time\n}\n\nfunc (m *MockClock) Now() time.Time { return m.curTime }\nfunc (m *MockClock) Sleep(d time.Duration) {\n\tm.curTime = m.curTime.Add(d)\n}\nfunc (m *MockClock) NewTicker(d time.Duration) *time.Ticker {\n\treturn time.NewTicker(d)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Active Docker Containers\nDESCRIPTION: Displays the status and port mappings of running Docker containers. Requires Docker containers to be started with Docker Compose.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/multi-tenant/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose ps\n           Name                          Command               State                                                                     Ports\n------------------------------------------------------------------------------------------------------------------------------------------------------------\nmulti-tenant_grafana_1        /run.sh                          Up      0.0.0.0:3000->3000/tcp,:::3000->3000/tcp\nmulti-tenant_k6-tracing-2_1   /k6-tracing run /example-s ...   Up\nmulti-tenant_k6-tracing_1     /k6-tracing run /example-s ...   Up\nmulti-tenant_tempo_1          /tempo -config.file=/etc/t ...   Up      0.0.0.0:14268->14268/tcp,:::14268->14268/tcp, 0.0.0.0:3200->3200/tcp,:::3200->3200/tcp, 0.0.0.0:4317->4317/tcp,:::4317->4317/tcp,\n                                                                       0.0.0.0:4318->4318/tcp,:::4318->4318/tcp, 0.0.0.0:9095->9095/tcp,:::9095->9095/tcp, 0.0.0.0:9411->9411/tcp,:::9411->9411/tcp\n\n\n```\n\n----------------------------------------\n\nTITLE: Performance Comparison Table: S2 vs Snappy Compression\nDESCRIPTION: Detailed performance comparison table between S2 and Snappy compression, showing speed improvements, throughput, and compression ratios across various test files. The table includes both multi-threaded and single-threaded performance metrics.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| File                                                                                                    | S2 Speed | S2 Throughput | S2 % smaller | S2 \"better\" | \"better\" throughput | \"better\" % smaller |\n|---------------------------------------------------------------------------------------------------------|----------|---------------|--------------|-------------|---------------------|--------------------||\n| [rawstudio-mint14.tar](https://files.klauspost.com/compress/rawstudio-mint14.7z)                        | 16.33x   | 10556 MB/s    | 8.0%         | 6.04x       | 5252 MB/s           | 14.7%              |\n| (1 CPU)                                                                                                 | 1.08x    | 940 MB/s      | -            | 0.46x       | 400 MB/s            | -                  |\n| [github-june-2days-2019.json](https://files.klauspost.com/compress/github-june-2days-2019.json.zst)     | 16.51x   | 15224 MB/s    | 31.70%       | 9.47x       | 8734 MB/s           | 37.71%             |\n| (1 CPU)                                                                                                 | 1.26x    | 1157 MB/s     | -            | 0.60x       | 556 MB/s            | -                  |\n| [github-ranks-backup.bin](https://files.klauspost.com/compress/github-ranks-backup.bin.zst)             | 15.14x   | 12598 MB/s    | -5.76%       | 6.23x       | 5675 MB/s           | 3.62%              |\n| (1 CPU)                                                                                                 | 1.02x    | 932 MB/s      | -            | 0.47x       | 432 MB/s            | -                  |\n| [consensus.db.10gb](https://files.klauspost.com/compress/consensus.db.10gb.zst)                         | 11.21x   | 12116 MB/s    | 15.95%       | 3.24x       | 3500 MB/s           | 18.00%             |\n| (1 CPU)                                                                                                 | 1.05x    | 1135 MB/s     | -            | 0.27x       | 292 MB/s            | -                  |\n| [apache.log](https://files.klauspost.com/compress/apache.log.zst)                                       | 8.55x    | 16673 MB/s    | 20.54%       | 5.85x       | 11420 MB/s          | 24.97%             |\n| (1 CPU)                                                                                                 | 1.91x    | 1771 MB/s     | -            | 0.53x       | 1041 MB/s           | -                  |\n| [gob-stream](https://files.klauspost.com/compress/gob-stream.7z)                                        | 15.76x   | 14357 MB/s    | 24.01%       | 8.67x       | 7891 MB/s           | 33.68%             |\n| (1 CPU)                                                                                                 | 1.17x    | 1064 MB/s     | -            | 0.65x       | 595 MB/s            | -                  |\n| [10gb.tar](http://mattmahoney.net/dc/10gb.html)                                                         | 13.33x   | 9835 MB/s     | 2.34%        | 6.85x       | 4863 MB/s           | 9.96%              |\n| (1 CPU)                                                                                                 | 0.97x    | 689 MB/s      | -            | 0.55x       | 387 MB/s            | -                  |\n| sharnd.out.2gb                                                                                          | 9.11x    | 13213 MB/s    | 0.01%        | 1.49x       | 9184 MB/s           | 0.01%              |\n| (1 CPU)                                                                                                 | 0.88x    | 5418 MB/s     | -            | 0.77x       | 5417 MB/s           | -                  |\n| [sofia-air-quality-dataset csv](https://files.klauspost.com/compress/sofia-air-quality-dataset.tar.zst) | 22.00x   | 11477 MB/s    | 18.73%       | 11.15x      | 5817 MB/s           | 27.88%             |\n| (1 CPU)                                                                                                 | 1.23x    | 642 MB/s      | -            | 0.71x       | 642 MB/s            | -                  |\n| [silesia.tar](http://sun.aei.polsl.pl/~sdeor/corpus/silesia.zip)                                        | 11.23x   | 6520 MB/s     | 5.9%         | 5.35x       | 3109 MB/s           | 15.88%             |\n| (1 CPU)                                                                                                 | 1.05x    | 607 MB/s      | -            | 0.52x       | 304 MB/s            | -                  |\n| [enwik9](https://files.klauspost.com/compress/enwik9.zst)                                               | 19.28x   | 8440 MB/s     | 4.04%        | 9.31x       | 4076 MB/s           | 18.04%             |\n| (1 CPU)                                                                                                 | 1.12x    | 488 MB/s      | -            | 0.57x       | 250 MB/s            | -                  |\n```\n\n----------------------------------------\n\nTITLE: Operation Creation Methods in Go\nDESCRIPTION: Defines factory methods for creating different types of storage operations including Set, Get, and Delete operations. Each operation contains Key, Value and Type properties.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/extension/xextension/storage/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nSetOperation(string, []byte) Operation\nGetOperation(string) Operation\nDeleteOperation(string) Operation\n```\n\n----------------------------------------\n\nTITLE: Defining OpenTelemetry Proto Common Interface Paths\nDESCRIPTION: Proto definition paths for accessing instrumentation scope data fields in OpenTelemetry Collector. Includes paths for accessing cache, resource attributes, scope name, version, and attributes with their corresponding types.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/contexts/ottlscope/README.md#2025-04-17_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nscope.cache                       // pcommon.Map\nscope.cache[\"\"]                 // string, bool, int64, float64, pcommon.Map, pcommon.Slice, []byte or nil\nresource                          // pcommon.Resource\nresource.attributes               // pcommon.Map\nresource.attributes[\"\"]         // string, bool, int64, float64, pcommon.Map, pcommon.Slice, []byte or nil\nresource.dropped_attributes_count // int64\nscope.name                        // string\nscope.version                     // string\nscope.dropped_attributes_count    // int64\nscope.attributes                  // pcommon.Map\nscope.attributes[\"\"]            // string, bool, int64, float64, pcommon.Map, pcommon.Slice, []byte or nil\n```\n\n----------------------------------------\n\nTITLE: Calculating Maximum Response Size in TraceQL\nDESCRIPTION: This example computes the maximum HTTP response size for spans named 'GET /:endpoint' using the max_over_time() function in TraceQL.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/metrics-queries/functions.md#2025-04-17_snippet_7\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ name = \"GET /:endpoint\" } | max_over_time(span.http.response.size)\n```\n\n----------------------------------------\n\nTITLE: Connector Usage with Traditional Receivers\nDESCRIPTION: Illustrates how to use connectors alongside traditional receivers in pipeline configuration.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/connector/README.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  foo/traces:\n  foo/metrics:\nexporters:\n  bar:\nconnectors:\n  count:\nservice:\n  pipelines:\n    traces:\n      receivers: [foo/traces]\n      exporters: [count]\n    metrics:\n      receivers: [foo/metrics, count]\n      exporters: [bar]\n```\n\n----------------------------------------\n\nTITLE: Listing Running Docker Containers\nDESCRIPTION: Displays the status and details of containers launched by Docker Compose\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/local/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndocker compose ps\n```\n\n----------------------------------------\n\nTITLE: Creating New Package in Jsonnet\nDESCRIPTION: The 'package.new' function enables the creation of a new package with specified parameters for name, URL, help, filename, and version.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/jsonnet-libs/docsonnet/doc-util/README.md#2025-04-17_snippet_14\n\nLANGUAGE: jsonnet\nCODE:\n```\npackage.new(name, url, help, filename=\"\", version=\"master\")\n```\n\n----------------------------------------\n\nTITLE: Parsing XML to JSON - Simple Elements\nDESCRIPTION: Shows conversion of XML with unique child elements to JSON format\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_49\n\nLANGUAGE: xml\nCODE:\n```\n<x>\n  <y>1</y>\n  <z>2</z>\n</x>\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"x\": {\n    \"y\": \"1\",\n    \"z\": \"2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List Running Docker Compose Containers\nDESCRIPTION: This command lists all the running Docker Compose containers, displaying their state and exposed ports. It aids in verifying that the correct services are running.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/debug/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndocker compose ps\n```\n\n----------------------------------------\n\nTITLE: Extracting Hour from Time in Go\nDESCRIPTION: The Hour function extracts the hour from a time.Time value, returning it as an int64. It uses the time.Hour function internally.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_30\n\nLANGUAGE: Go\nCODE:\n```\nHour(Now())\n```\n\n----------------------------------------\n\nTITLE: Kafka Header Extraction Configuration\nDESCRIPTION: Configuration example demonstrating header extraction setup for Kafka receiver.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/receiver/kafkareceiver/README.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  kafka:\n    topic: test\n    header_extraction: \n      extract_headers: true\n      headers: [\"header1\", \"header2\"]\n```\n\n----------------------------------------\n\nTITLE: Enabling gRPC-Go logging\nDESCRIPTION: These shell commands show how to turn on verbose logging for gRPC-Go by setting environment variables. This is useful for debugging and understanding the internal workings of gRPC.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport GRPC_GO_LOG_VERBOSITY_LEVEL=99\nexport GRPC_GO_LOG_SEVERITY_LEVEL=info\n```\n\n----------------------------------------\n\nTITLE: Bare Tag Syntax Example\nDESCRIPTION: Example showing the alternative bare tag syntax format used in struct field definitions.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/kong/README.md#2025-04-17_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nrequired:\"\" name:\"foo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Storage in Tempo 2.6 (YAML)\nDESCRIPTION: Configuration structure for Azure storage following removal of the 'use_v2_sdk' parameter, as Azure v2 is now the only supported Azure backend in Tempo 2.6.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-6.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  azure:\n```\n\n----------------------------------------\n\nTITLE: Getting Weekday from Time in Go\nDESCRIPTION: The Weekday function extracts the day of the week from a time.Time value. It returns an int64 in the range 0-6 representing Sunday through Saturday.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_79\n\nLANGUAGE: go\nCODE:\n```\nWeekday(Now())\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob HTTP Pipeline\nDESCRIPTION: Shows how to configure the HTTP pipeline using ClientOptions during client construction, replacing the previous explicit pipeline creation approach.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/migrationguide.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nclient, err := azblob.NewClient(account, cred, &azblob.ClientOptions{\n\tClientOptions: azcore.ClientOptions{\n\t\t// configure HTTP pipeline options here\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Buffer reuse with sync.Pool in Go\nDESCRIPTION: This code demonstrates how to reuse buffers using `sync.Pool` to reduce the number of allocations during JSON encoding. The buffer is retrieved from the pool, used for encoding, and then returned to the pool for later use.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n \"type buffer struct {\\n    data []byte\\n}\\n\\nvar bufPool = sync.Pool{\\n    New: func() interface{} {\\n        return &buffer{data: make([]byte, 0, 1024)}\\n    },\\n}\\n\\nbuf := bufPool.Get().(*buffer)\\ndata := encode(buf.data) // reuse buf.data\\n\\nnewBuf := make([]byte, len(data))\\ncopy(newBuf, buf)\\n\\nbuf.data = data\\nbufPool.Put(buf)\"\n```\n\n----------------------------------------\n\nTITLE: Basic Forward Seeking with S2 Reader\nDESCRIPTION: Demonstrates how to create a forward-only seeker using S2 Reader without providing an index. Requires the input reader to support io.Seeker interface.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n\tdec := s2.NewReader(r)\n\trs, err := dec.ReadSeeker(false, nil)\n\trs.Seek(wantOffset, io.SeekStart)\n```\n\n----------------------------------------\n\nTITLE: Running Linters for Viper in Shell\nDESCRIPTION: Command to run linters for the Viper project using Make, with an option to run them in parallel.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_38\n\nLANGUAGE: shell\nCODE:\n```\nmake lint # pass -j option to run them in parallel\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Validation Errors in Go\nDESCRIPTION: Example showing how to iterate over each individual error when validation fails, instead of using the default .Error() method which returns all errors in a single string.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_22\n\nLANGUAGE: go\nCODE:\n```\n  if err != nil {\n    errs := err.(govalidator.Errors).Errors()\n    for _, e := range errs {\n      fmt.Println(e.Error())\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Parquet Block Format in Tempo YAML\nDESCRIPTION: Sets the block format option to 'vParquet' in the Tempo configuration file to enable the new Parquet-based trace storage format. This is an experimental feature in Tempo 1.5.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v1-5.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# block format version. options: v2, vParquet\n[version: <string> | default = v2]\n```\n\n----------------------------------------\n\nTITLE: Initializing GCP Resource Detector in Go\nDESCRIPTION: Example showing how to initialize and configure the GCP resource detector with OpenTelemetry. Demonstrates creating a new resource with custom attributes and using it with a tracer provider.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/contrib/detectors/gcp/README.md#2025-04-17_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\nctx := context.Background()\n// Detect your resources\nres, err := resource.New(ctx,\n    // Use the GCP resource detector!\n    resource.WithDetectors(gcp.NewDetector()),\n    // Keep the default detectors\n    resource.WithTelemetrySDK(),\n    // Add your own custom attributes to identify your application\n    resource.WithAttributes(\n        semconv.ServiceNameKey.String(\"my-application\"),\n        semconv.ServiceNamespaceKey.String(\"my-company-frontend-team\"),\n    ),\n)\nif err != nil {\n    // Handle err\n}\n// Use the resource in your tracerprovider (or meterprovider)\ntp := trace.NewTracerProvider(\n    // ... other options\n    trace.WithResource(res),\n)\n```\n\n----------------------------------------\n\nTITLE: Span from Context in Tracing Options - Go\nDESCRIPTION: The addition of the `SpanFromContext` field within `tracing.TracerOptions` enables users to retrieve the current span from the context, providing an easy way to access span information throughout the tracing process.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype TracerOptions struct {\n    SpanFromContext func(ctx context.Context) Span\n}\n```\n\n----------------------------------------\n\nTITLE: Search Tags API Endpoint for Retrieving Available Tag Names\nDESCRIPTION: GET request format for retrieving all discovered tag names that can be used in search. Supports filtering by scope (resource, span, or intrinsic).\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/_index.md#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nGET /api/search/tags?scope=<resource|span|intrinsic>\n```\n\n----------------------------------------\n\nTITLE: Trimming Strings in Go\nDESCRIPTION: The Trim function removes leading and trailing characters from a string. It takes a target string and an optional replacement string (default is space) as parameters.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_55\n\nLANGUAGE: go\nCODE:\n```\nTrim(target, Optional[replacement])\n```\n\n----------------------------------------\n\nTITLE: Documenting Keepalive Enforcement Policy\nDESCRIPTION: Configuration structure for gRPC keepalive enforcement policy settings including minimum time and stream permission flags.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/receiver/otlpreceiver/config.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### configgrpc-KeepaliveEnforcementPolicy\n\n| Name                  | Type                            | Default    | Docs |\n|-----------------------|---------------------------------|------------|------|\n```\n\n----------------------------------------\n\nTITLE: Installing GoValidator Package in Go\nDESCRIPTION: Commands to install the GoValidator package using Go's package manager. It includes options for getting the latest version or a specific release using gopkg.in.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/asaskevich/govalidator\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo get gopkg.in/asaskevich/govalidator.v10\n```\n\n----------------------------------------\n\nTITLE: Loading Mimir Alertmanager Configuration with Mimirtool (Bash)\nDESCRIPTION: This command uses `mimirtool` to load Alertmanager configuration into a Mimir instance. It specifies the path to the alerts file (`operations/tempo-mixin-compiles/alerts.yml`) and the address of the Mimir distributor.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/monitor/set-up-monitoring.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"mimirtool alertmanager load operations/tempo-mixin-compiles/alerts.yml --address=https://mimir-cluster.distributor.mimir.svc.cluster.local:9001\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Tanka Application\nDESCRIPTION: This snippet shows how to initialize a Tanka application, creating a new directory and using `tk init` to set up the application environment. It copies credentials from the current Kubernetes context.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/grafana/jsonnet-libs/memcached/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\napp=your_app_name\nmkdir -p $app && cd $app\ntk init\n```\n```\n\n----------------------------------------\n\nTITLE: Installing atomic Package with Go Get\nDESCRIPTION: Command to install the atomic package using go get. It specifies using version 1 of the package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.uber.org/atomic/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get -u go.uber.org/atomic@v1\n```\n\n----------------------------------------\n\nTITLE: Adding Release Tags for OpenTelemetry Go\nDESCRIPTION: This make command adds tags for a specific module set and commit hash during the release process. It's crucial for marking the release point in the repository.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmake add-tags MODSET=<module set> COMMIT=<commit hash>\n```\n\n----------------------------------------\n\nTITLE: Running Go Benchmarks with Custom Parameters\nDESCRIPTION: This command runs Go benchmarks with specific flags for extended duration and filtering.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-openapi/swag/BENCHMARK.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -bench XXX -run XXX -benchtime 30s\n```\n\n----------------------------------------\n\nTITLE: Comparing Best Compression Mode Performance Between S2 Variants\nDESCRIPTION: A code block showing benchmark results for S2's best compression mode compared to default and better modes. The benchmark tests several large files and reports compression ratios, processing times, and speeds.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n* enwik10\nDefault... 10000000000 -> 4759950115 [47.60%]; 1.03s, 9263.0MB/s\nBetter...  10000000000 -> 4084706676 [40.85%]; 2.16s, 4415.4MB/s\nBest...    10000000000 -> 3615520079 [36.16%]; 42.259s, 225.7MB/s\n\n* github-june-2days-2019.json\nDefault... 6273951764 -> 1041700255 [16.60%]; 431ms, 13882.3MB/s\nBetter...  6273951764 -> 945841238 [15.08%]; 547ms, 10938.4MB/s\nBest...    6273951764 -> 826392576 [13.17%]; 9.455s, 632.8MB/s\n\n* nyc-taxi-data-10M.csv\nDefault... 3325605752 -> 1093516949 [32.88%]; 324ms, 9788.7MB/s\nBetter...  3325605752 -> 885394158 [26.62%]; 491ms, 6459.4MB/s\nBest...    3325605752 -> 773681257 [23.26%]; 8.29s, 412.0MB/s\n\n* 10gb.tar\nDefault... 10065157632 -> 5915541066 [58.77%]; 1.028s, 9337.4MB/s\nBetter...  10065157632 -> 5453844650 [54.19%]; 1.597s, 4862.7MB/s\nBest...    10065157632 -> 5192495021 [51.59%]; 32.78s, 308.2MB/\n\n* consensus.db.10gb\nDefault... 10737418240 -> 4549762344 [42.37%]; 882ms, 12118.4MB/s\nBetter...  10737418240 -> 4438535064 [41.34%]; 1.533s, 3500.9MB/s\nBest...    10737418240 -> 4210602774 [39.21%]; 42.96s, 254.4MB/s\n```\n\n----------------------------------------\n\nTITLE: Implementing Storage Client Interface in Go\nDESCRIPTION: Defines the core storage.Client interface with methods for basic CRUD operations. Includes Get for retrieval, Set for storage, Delete for removal, and Close for cleanup.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/extension/xextension/storage/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nGet(context.Context, string) ([]byte, error)\nSet(context.Context, string, []byte) error\nDelete(context.Context, string) error\nClose(context.Context) error\n```\n\n----------------------------------------\n\nTITLE: Local Metrics Scraping Endpoint for Grafana Alloy\nDESCRIPTION: This snippet provides the URL for the local Prometheus scrape endpoint that allows users to directly access metrics exposed by the Alloy HTTP server. It serves as a quick reference to check the status of the Alloy components.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/send-traces/alloy.md#2025-04-17_snippet_2\n\nLANGUAGE: markup\nCODE:\n```\nhttp://localhost:12345/metrics\n```\n\n----------------------------------------\n\nTITLE: Time String Translation\nDESCRIPTION: Demonstrates how to translate a localized time string to English without parsing it to time.Time, useful for integration with standard time package functions.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/elastic/lunes/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nstr, err := lunes.Translate(\"Monday Jan _2 15:04:05\", \"viernes ene 27 11:53:29\", lunes.LocaleEsES)\n\n// the translated value is meant to be used with the time package functions\nt, err := time.Parse(\"Monday Jan _2 15:04:05\", str)\n```\n\n----------------------------------------\n\nTITLE: Stopping the Docker Compose Setup\nDESCRIPTION: This command stops and removes the containers, networks, and volumes defined in the docker-compose.yml file. The `-v` flag also removes any volumes associated with the services, ensuring a clean shutdown.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/scalable-single-binary/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndocker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Example Ingester Failure Log (Text)\nDESCRIPTION: This log message indicates a failure to consume trace data due to an insufficient number of live ingester replicas. This typically occurs when ingesters are unhealthy or scaling down. Addressing this issue involves stabilizing the ingesters or temporarily \"Forgetting\" unhealthy ingesters from the ring.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/send-traces/max-trace-limit-reached.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"msg=\\\"pusher failed to consume trace data\\\" err=\\\"at least 2 live replicas required, could only find 1\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing Table Style in Go\nDESCRIPTION: Demonstrates how to use a predefined style as a base and make specific modifications to its properties.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n    t.SetStyle(table.StyleLight)\n    t.Style().Color.Header = text.Colors{text.BgHiCyan, text.FgBlack}\n    t.Style().Color.IndexColumn = text.Colors{text.BgHiCyan, text.FgBlack}\n    t.Style().Format.Footer = text.FormatLower\n    t.Style().Options.DrawBorder = false\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results Comparison\nDESCRIPTION: Compares performance metrics and profile sizes across different profiling approaches, highlighting the efficiency of godeltaprof in reducing profile sizes and computational overhead\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/grafana/pyroscope-go/godeltaprof/README.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nBenchmarkOG\n      63         181862189 ns/op\nprofile sizes: [209117 209107 209077 209089 209095 209076 209088 209082 209090 209092]\n\nBenchmarkFastDelta\n      43         273936764 ns/op\nprofile sizes: [169300 10815 8969 9511 9752 9376 9545 8959 10357 9536]\n\nBenchmarkGodeltaprof\n     366          31148264 ns/op\nprofile sizes: [208898 11485 9347 9967 10291 9848 10085 9285 11033 9986]\n```\n\n----------------------------------------\n\nTITLE: Locating Bad Blocks in Tempo Storage\nDESCRIPTION: Path format for locating a specific block in the Tempo backend storage. This pattern shows how blocks are organized by tenant ID and block ID, which is useful when you need to remove a corrupted block.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/querying/bad-blocks.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<tenant ID>/<block ID>\n```\n\n----------------------------------------\n\nTITLE: Concurrent Shards Configuration for Trace Retrieval by ID in Tempo\nDESCRIPTION: This snippet introduces the new `concurrent_shards` option under `trace_by_id` within the query frontend configuration. This enhancement allows the retrieval of data across multiple shards concurrently, facilitating performance improvements when executing trace queries.\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nquery_frontend:\n  trace_by_id:\n    concurrent_shards: 3\n```\n\n----------------------------------------\n\nTITLE: Protobuf Compilation using Make\nDESCRIPTION: This snippet demonstrates how to recompile protobuf definitions using the `make proto` command. This command needs to be run from the parent directory of the protobuf definitions.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/prometheus/prometheus/prompb/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\n`make proto`\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Headers for Baggage Injection in Jaeger\nDESCRIPTION: Example of injecting baggage key-value pairs via HTTP headers in a curl request\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/uber/jaeger-client-go/README.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H \"jaeger-baggage: key1=value1, key2=value2\" http://myhost.com\n```\n\n----------------------------------------\n\nTITLE: Installing the Bloom Filter Package with Go Get\nDESCRIPTION: This command installs the latest version of the Bloom filter package using Go's package management tool.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/willf/bloom/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/willf/bloom\n```\n\n----------------------------------------\n\nTITLE: Connecting Viper to Consul Remote Provider (Go)\nDESCRIPTION: Example showing how to configure Viper to read JSON configuration from a Consul remote provider and access the values. It specifies the provider type, endpoint, and key.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nviper.AddRemoteProvider(\"consul\", \"localhost:8500\", \"MY_CONSUL_KEY\")\nviper.SetConfigType(\"json\") // Need to explicitly set this to json\nerr := viper.ReadRemoteConfig()\n\nfmt.Println(viper.Get(\"port\")) // 8080\nfmt.Println(viper.Get(\"hostname\")) // myhostname.com\n```\n\n----------------------------------------\n\nTITLE: Defining Go Version Requirements\nDESCRIPTION: Specifies minimum Go version requirements for the SDK, with incremental updates from 1.19 to 1.22 across different releases.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/aws/aws-sdk-go-v2/internal/endpoints/v2/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo 1.22\n```\n\n----------------------------------------\n\nTITLE: Creating CallErr in HTTP Request Handling for Go\nDESCRIPTION: This snippet shows how a CallErr is typically created and returned in the comm package, which handles all HTTP requests. It includes the request, response, and a formatted error message.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nreturn nil, errors.CallErr{\n    Req:  req,\n    Resp: reply,\n    Err:  fmt.Errorf(\"http call(%s)(%s) error: reply status code was %d:\\n%s\", req.URL.String(), req.Method, reply.StatusCode, ErrorResponse), //ErrorResponse is the json body extracted from the http response\n    }\n```\n\n----------------------------------------\n\nTITLE: Truncating String Values in OTTL\nDESCRIPTION: The truncate_all function truncates all string values in a pcommon.Map to ensure they don't exceed a specified character limit. Non-string values are ignored.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_13\n\nLANGUAGE: OTTL\nCODE:\n```\ntruncate_all(log.attributes, 100)\n```\n\nLANGUAGE: OTTL\nCODE:\n```\ntruncate_all(resource.attributes, 50)\n```\n\n----------------------------------------\n\nTITLE: Installing azcore Module via Go Get\nDESCRIPTION: This snippet provides the command to install the Azure core client module, azcore, using Go modules. It ensures the latest version is added to the project's go.mod file.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/azcore\n```\n\n----------------------------------------\n\nTITLE: Setting Telemetry Field Values in OTTL\nDESCRIPTION: The set function allows setting a telemetry field using a specified value. It can set various types of fields including attributes, metric names, and trace state.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_12\n\nLANGUAGE: OTTL\nCODE:\n```\nset(resource.attributes[\"http.path\"], \"/foo\")\n```\n\nLANGUAGE: OTTL\nCODE:\n```\nset(metric.name, resource.attributes[\"http.route\"])\n```\n\nLANGUAGE: OTTL\nCODE:\n```\nset(span.trace_state[\"svc\"], \"example\")\n```\n\nLANGUAGE: OTTL\nCODE:\n```\nset(span.attributes[\"source\"], span.trace_state[\"source\"])\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pipeline Options - Go\nDESCRIPTION: The addition of `TracingNamespace` field to `runtime.PipelineOptions` allows users to specify the tracing namespace for individual pipeline options, facilitating better organization and filtering of tracing data.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype PipelineOptions struct {\n    TracingNamespace string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Override Strategies in Tempo YAML\nDESCRIPTION: This snippet demonstrates how to configure override strategies in Tempo, including local and global rate limiting approaches.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n# /conf/tempo.yaml\noverrides:\n  defaults:\n    ingestion:\n      [rate_strategy: <global|local> | default = local]\n\n# Local strategy example\noverrides:\n  defaults:\n    ingestion:\n      strategy: local\n      limit_bytes: 15000000\n\n# Global strategy example\noverrides:\n  defaults:\n    ingestion:\n      strategy: global\n      limit_bytes: 15000000\n```\n\n----------------------------------------\n\nTITLE: Filtering and Counting Slice Elements in Go\nDESCRIPTION: Example demonstrating how to use the Filter and Count functions to filter elements from a slice based on a condition and count elements that match a condition.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ndata := []interface{}{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nvar fn govalidator.ConditionIterator = func(value interface{}, index int) bool {\n\treturn value.(int)%2 == 0\n}\n_ = govalidator.Filter(data, fn) // result = []interface{}{2, 4, 6, 8, 10}\n_ = govalidator.Count(data, fn) // result = 5\n```\n\n----------------------------------------\n\nTITLE: Creating Zipkin Exporter Pipeline in Go\nDESCRIPTION: Demonstrates how to create a new Zipkin exporter pipeline with default SDK options and register it globally.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_40\n\nLANGUAGE: Go\nCODE:\n```\nimport \"go.opentelemetry.io/otel/exporters/zipkin\"\n\n// Create and install new Zipkin export pipeline\nzipkin.InstallNewPipeline()\n```\n\n----------------------------------------\n\nTITLE: Reverting BlobName Type Change in Go Models\nDESCRIPTION: YAML directive to change BlobName type back to string in the generated Go models file.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: zz_models.go\n  where: $\n  transform: >\n    return $.\n      replace(/Name\\s+\\*BlobName/g, `Name *string`);\n```\n\n----------------------------------------\n\nTITLE: Modifying BlobDeleteType Enum\nDESCRIPTION: YAML directive to modify the BlobDeleteType enum in the swagger document.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters\n  transform: >\n    delete $.BlobDeleteType.enum;\n    $.BlobDeleteType.enum = [\n        \"None\",\n        \"Permanent\"\n    ];\n```\n\n----------------------------------------\n\nTITLE: Truncating Time in Go\nDESCRIPTION: The TruncateTime function rounds down a given time to a multiple of a specified duration. It uses Go's time.Truncate function internally.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_65\n\nLANGUAGE: go\nCODE:\n```\nTruncateTime(time, duration)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Watching for Updates Process in Markdown\nDESCRIPTION: This code snippet demonstrates the process of watching for configuration updates using ASCII art in a Markdown code block. It shows the interaction between the Resolver and Provider components during the watch process.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/confmap/README.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```terminal\n         Resolver              Provider\n            │                     │\n   Watch    │                     │\n───────────►│                     │\n            │                     │\n            .                     .\n            .                     .\n            .                     .\n            │      onChange       │\n            │◄────────────────────┤\n◄───────────┤                     │\n\n```\n```\n\n----------------------------------------\n\nTITLE: Cloning OpenTelemetry Go Repository\nDESCRIPTION: Command to clone the OpenTelemetry Go SDK repository for local development.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-go.git\n```\n\n----------------------------------------\n\nTITLE: Merging Pre-release Changes in OpenTelemetry Go\nDESCRIPTION: This command merges the changes from the pre-release branch into the current branch, finalizing the version updates for the release.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit merge prerelease_<module set>_<new tag>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Query Frontend Logs in Kubernetes\nDESCRIPTION: This command is used to stream logs from a specified query-frontend pod in a Kubernetes cluster, focusing on logs from the query-frontend container. This helps in diagnosing potential issues related to querying trace data in Tempo.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/querying/unable-to-see-trace.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs -f pod/query-frontend-xxxxx -c query-frontend\n```\n\n----------------------------------------\n\nTITLE: Using Afero MemMapFs in Go\nDESCRIPTION: This snippet demonstrates how to use Afero's MemMapFs, a fully atomic memory-backed filesystem.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nmm := afero.NewMemMapFs()\nmm.MkdirAll(\"src/a\", 0755)\n```\n\n----------------------------------------\n\nTITLE: TraceQL Grouped Rate Query for HTTP Path\nDESCRIPTION: A TraceQL metrics query that plots the request rate for a specific API path, grouped by user ID and HTTP status code.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2023-11 TraceQL Metrics.md#2025-04-17_snippet_4\n\nLANGUAGE: traceql\nCODE:\n```\n{ span.http.path = \"/myapi\" } | rate() by (span.user_id, span.http.status_code)\n```\n\n----------------------------------------\n\nTITLE: Checking for Map Type in Go\nDESCRIPTION: The IsMap function returns true if the given value is a map (map[string]any or pcommon.ValueTypeMap), and false otherwise.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_38\n\nLANGUAGE: Go\nCODE:\n```\nIsMap(log.body)\n```\n\nLANGUAGE: Go\nCODE:\n```\nIsMap(log.attributes[\"maybe a map\"])\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Generated Protobuf Code Using protoc\nDESCRIPTION: This shell command shows how to regenerate the protobuf code for gRPC services. It uses the 'protoc' command with appropriate flags to output the generated code in a Go-compatible format. The prerequisites include having 'protoc' installed and configured as per the linked instructions.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/grafana/dskit/httpgrpc/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nprotoc -I ./ --go_out=plugins=grpc:./ ./httpgrpc.proto\n```\n\n----------------------------------------\n\nTITLE: Importing Afero in Go\nDESCRIPTION: This snippet shows how to import the Afero library in a Go application.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/spf13/afero\"\n```\n\n----------------------------------------\n\nTITLE: Adding/Updating Go Dependencies\nDESCRIPTION: These commands demonstrate how to add or update dependencies in a Go project using Go modules. The first command picks the latest tagged release, while the second picks a specific version of a module.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n\"# Pick the latest tagged release.\ngo get example.com/some/module/pkg\n\n# Pick a specific version.\ngo get example.com/some/module/pkg@vX.Y.Z\"\n```\n\n----------------------------------------\n\nTITLE: Basic Service Graph Metrics Cardinality Formula\nDESCRIPTION: Lists the core metrics generated for service graphs and their cardinality based on the number of hops between services. Includes request totals, failure counts, and latency histograms.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/metrics-generator/service_graphs/estimate-cardinality.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n  traces_service_graph_request_total: #hops\n  traces_service_graph_request_failed_total: #hops\n  traces_service_graph_request_server_seconds: #hb * #hops\n  traces_service_graph_request_client_seconds: #hb * #hops\n  traces_service_graph_unpaired_spans_total: #services (absolute worst case)\n  traces_service_graph_dropped_spans_total: #services (absolute worst case)\n```\n\n----------------------------------------\n\nTITLE: Connect to Delve Debugging Server\nDESCRIPTION: This command connects to the Delve debugging server running on local port 2345. It requires that the Delve server is running and accessible on localhost.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/debug/readme.md#2025-04-17_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ndlv connect localhost:2345\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This snippet shows the boilerplate notice to be included when applying the Apache License 2.0 to a project. It includes placeholders for the copyright year and owner name.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/sso/LICENSE.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Usage Metrics Example\nDESCRIPTION: Example of metrics endpoint response showing per-tenant usage data.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/_index.md#2025-04-17_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3200/usage_metrics\n# HELP tempo_usage_tracker_bytes_received_total bytes total received with these attributes\n# TYPE tempo_usage_tracker_bytes_received_total counter\ntempo_usage_tracker_bytes_received_total{service=\"auth-service\",tenant=\"single-tenant\",tracker=\"cost-attribution\"} 96563\ntempo_usage_tracker_bytes_received_total{service=\"cache\",tenant=\"single-tenant\",tracker=\"cost-attribution\"} 81904\ntempo_usage_tracker_bytes_received_total{service=\"gateway\",tenant=\"single-tenant\",tracker=\"cost-attribution\"} 164751\ntempo_usage_tracker_bytes_received_total{service=\"identity-service\",tenant=\"single-tenant\",tracker=\"cost-attribution\"} 85974\ntempo_usage_tracker_bytes_received_total{service=\"service-A\",tenant=\"single-tenant\",tracker=\"cost-attribution\"} 92799\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Tempo Polling Documentation\nDESCRIPTION: This YAML snippet defines the frontmatter for the documentation page, including title, menu title, description, weight, and aliases for the page about using polling to monitor backend status in Tempo.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/monitor/polling.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Use polling to monitor the backend status\nmenuTitle: Use polling to monitor backend status\ndescription: Monitor backend status for Tempo using polling.\nweight: 30\naliases:\n- /docs/tempo/operations/polling\n- ../polling\n---\n```\n\n----------------------------------------\n\nTITLE: Applying Tanka Configuration with Shell\nDESCRIPTION: This shell command applies the Tanka configuration to the default environment. Ensure that the Tanka application is correctly configured before applying.\nSOURCE: https://github.com/grafana/tempo/blob/main/operations/jsonnet-compiled/util/vendor/github.com/grafana/jsonnet-libs/memcached/README.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntk apply default\n```\n\n----------------------------------------\n\nTITLE: Day Converter Usage in OTTL\nDESCRIPTION: The Day converter extracts the day component from a time.Time value using Go's time.Day function. It returns the day as an int64 value and errors if input is not a valid time.Time.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_20\n\nLANGUAGE: ottl\nCODE:\n```\nDay(Now())\n```\n\n----------------------------------------\n\nTITLE: Enable Cross Cluster Querying in Tempo\nDESCRIPTION: This configuration snippet demonstrates the addition of `secondary_ingester_ring` and `override_ring_key` options for enabling cross-cluster querying in Grafana Tempo. These options must be configured to facilitate querying across different Tempo clusters, thus enhancing the querying capabilities.\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nquerier:\n  secondary_ingester_ring: <string>\nmetrics_generator:\n  override_ring_key: <string>\n```\n\n----------------------------------------\n\nTITLE: Go Fix for DescribeLogDirs\nDESCRIPTION: Fix to prevent DescribeLogDirs from hanging in admin client, demonstrated in pull request #2269\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/IBM/sarama/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncheck session.Context().Done()\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Dual Stack Endpoints for Storage (YAML)\nDESCRIPTION: Configuration for enabling dual stack mode in S3 storage configuration, which allows IPv4 and IPv6 requests to S3 buckets. This is a new option added in Tempo 2.6.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-6.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nStorage:\n  s3:\n    [enable_dual_stack: <bool>]\n```\n\n----------------------------------------\n\nTITLE: Installing INI Package with Go Get\nDESCRIPTION: Command to install the INI package using Go's package management tool. The minimum Go version required is 1.13.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-ini/ini/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ go get gopkg.in/ini.v1\n```\n\n----------------------------------------\n\nTITLE: Reading Configuration Files with Viper\nDESCRIPTION: Example showing how to configure Viper to search for and read configuration files from multiple paths.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nviper.SetConfigName(\"config\") // name of config file (without extension)\nviper.SetConfigType(\"yaml\") // REQUIRED if the config file does not have the extension in the name\nviper.AddConfigPath(\"/etc/appname/\")   // path to look for the config file in\nviper.AddConfigPath(\"$HOME/.appname\")  // call multiple times to add many search paths\nviper.AddConfigPath(\".\")               // optionally look for config in the working directory\nerr := viper.ReadInConfig() // Find and read the config file\nif err != nil { // Handle errors reading the config file\n\tpanic(fmt.Errorf(\"fatal error config file: %w\", err))\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Attribute with Spaces in TraceQL\nDESCRIPTION: Demonstrates how to query an attribute name containing spaces by wrapping it in double quotes.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2023-11 TraceQL Extensions.md#2025-04-17_snippet_0\n\nLANGUAGE: traceql\nCODE:\n```\n{ span.\"attribute with spaces\" = \"foo\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Client Telemetry in Go\nDESCRIPTION: Demonstrates configuration of telemetry data with module and version parameters for SDK tracking purposes.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-17_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\npolicy.NewTelemetryPolicy(\n  \"mymodule\",\n  \"1.0.0\"\n)\n```\n\n----------------------------------------\n\nTITLE: Migrating import paths for mapstructure\nDESCRIPTION: This shell command script uses sed to update import paths in Go files, facilitating migration from the old mapstructure package to the new maintained version. The script is used on files with a .go extension.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-viper/mapstructure/v2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsed -i 's/github.com\\/mitchellh\\/mapstructure/github.com\\/go-viper\\/mapstructure\\/v2/g' $(find . -type f -name '*.go')\n```\n\n----------------------------------------\n\nTITLE: Integration with Existing Code in Go\nDESCRIPTION: Examples of using color in existing code with Set/Unset functionality\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Use handy standard colors\ncolor.Set(color.FgYellow)\n\nfmt.Println(\"Existing text will now be in yellow\")\nfmt.Printf(\"This one %s\\n\", \"too\")\n\ncolor.Unset() // Don't forget to unset\n\n// You can mix up parameters\ncolor.Set(color.FgMagenta, color.Bold)\ndefer color.Unset() // Use it in your function\n\nfmt.Println(\"All text will now be bold magenta.\")\n```\n\n----------------------------------------\n\nTITLE: Package Declaration and Import for HTTP Content Negotiation\nDESCRIPTION: Declares the goautoneg package and imports the required dependency from bitbucket.org for content type negotiation functionality.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/munnerz/goautoneg/README.txt#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage goautoneg\nimport \"bitbucket.org/ww/goautoneg\"\n```\n\n----------------------------------------\n\nTITLE: Querying Server-Specific Calls - Instant Query\nDESCRIPTION: PromQL query to show total calls where a specific service acts as the server over a 7-day period. Filters results to show only connections to a particular server.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/metrics-generator/service_graphs/metrics-queries.md#2025-04-17_snippet_1\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(traces_service_graph_request_server_seconds_count{server=\"foo\"}[7d])) by (client) > 0\n```\n\n----------------------------------------\n\nTITLE: Reading /proc/cpuinfo in Go\nDESCRIPTION: This code snippet demonstrates how to read the `/proc/cpuinfo` file in Go, handling potential errors.  It uses `util.ReadFileNoStat` to read the file content and then utilizes `bufio.NewScanner` to process the data line by line.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n\"    data, err := util.ReadFileNoStat(\"/proc/cpuinfo\")\n    if err != nil {\n        return err\n    }\n    reader := bytes.NewReader(data)\n    scanner := bufio.NewScanner(reader)\"\n```\n\n----------------------------------------\n\nTITLE: Go Module Dependencies Declaration\nDESCRIPTION: A list of Go module dependencies with explicit version requirements and import paths. Each entry specifies the module, version constraints, and sub-packages that are imported.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/modules.txt#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n## explicit; go 1.22\ngithub.com/klauspost/compress\ngithub.com/klauspost/compress/flate\ngithub.com/klauspost/compress/fse\ngithub.com/klauspost/compress/gzhttp\ngithub.com/klauspost/compress/gzhttp/writer\ngithub.com/klauspost/compress/gzhttp/writer/gzkp\ngithub.com/klauspost/compress/gzip\ngithub.com/klauspost/compress/huff0\ngithub.com/klauspost/compress/internal/cpuinfo\ngithub.com/klauspost/compress/internal/le\ngithub.com/klauspost/compress/internal/race\ngithub.com/klauspost/compress/internal/snapref\ngithub.com/klauspost/compress/s2\ngithub.com/klauspost/compress/snappy\ngithub.com/klauspost/compress/zlib\ngithub.com/klauspost/compress/zstd\ngithub.com/klauspost/compress/zstd/internal/xxhash\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Identity Module\nDESCRIPTION: Command to install the Azure Identity module using Go modules package manager.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: Fixing CRC Response Header in PutBlob Response\nDESCRIPTION: YAML directive to add ContentCRC64 header to the PutBlob response in the swagger document.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"][\"/{containerName}/{blob}?BlockBlob\"].put.responses[\"201\"].headers\n  transform: >\n      $[\"x-ms-content-crc64\"] = {\n        \"x-ms-client-name\": \"ContentCRC64\",\n        \"type\": \"string\",\n        \"format\": \"byte\",\n        \"description\": \"Returned for a block blob so that the client can check the integrity of message content.\"\n      };\n```\n\n----------------------------------------\n\nTITLE: Shutdown Operation\nDESCRIPTION: Endpoint to initiate graceful shutdown of ingester service.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/_index.md#2025-04-17_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nGET,POST /shutdown\n```\n\n----------------------------------------\n\nTITLE: Error Indicator for Exceeding Top N Values in compare Function Output\nDESCRIPTION: This snippet provides an example of an error indicator that highlights when an attribute exceeds the top N limit in the output of the compare function. It signifies cases where the attribute contains too many values.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/metrics-queries/functions.md#2025-04-17_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\n`{ __meta_error=\"__too_many_values__\", resource.cluster=<nil> }`\n```\n\n----------------------------------------\n\nTITLE: Adding Git Remote for Fork\nDESCRIPTION: Commands to add a remote for your fork and prepare for contribution.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit remote add <YOUR_FORK> git@github.com:<YOUR_GITHUB_USERNAME>/opentelemetry-go\n```\n\n----------------------------------------\n\nTITLE: Importing gotenv Package in Go\nDESCRIPTION: Shows how to import the gotenv package in a Go application.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/subosito/gotenv/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/subosito/gotenv\"\n```\n\n----------------------------------------\n\nTITLE: Parsing and Using Base-2 Byte Units in Go\nDESCRIPTION: This snippet demonstrates how to parse a string representation of a base-2 byte unit and use predefined unit constants. It shows parsing '1KB' into bytes and using the Mebibyte constant for calculations.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/units/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nn, err := ParseBase2Bytes(\"1KB\")\n// n == 1024\nn = units.Mebibyte * 512\n```\n\n----------------------------------------\n\nTITLE: Verifying App Service Managed Identity Endpoint Availability\nDESCRIPTION: A curl command to verify that the managed identity endpoint is available in an Azure App Service environment. This command uses environment variables set by the App Service host to authenticate to the managed identity endpoint.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"$IDENTITY_ENDPOINT?resource=https://management.core.windows.net&api-version=2019-08-01\" -H \"X-IDENTITY-HEADER: $IDENTITY_HEADER\"\n```\n\n----------------------------------------\n\nTITLE: Adding Jaeger Client Library to Go Modules\nDESCRIPTION: The recommended way to add the Jaeger client library as a dependency using Go modules.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/uber/jaeger-client-go/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/uber/jaeger-client-go\"\n```\n\n----------------------------------------\n\nTITLE: Importing go-toml v2 in Go\nDESCRIPTION: This code snippet shows how to import the go-toml v2 library in a Go program. This import statement makes the library's functions and types available for use in the Go code.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n\"import \\\"github.com/pelletier/go-toml/v2\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating TraceID from Byte Slice in Go\nDESCRIPTION: The TraceID function creates a pdata.TraceID struct from a 16-byte slice. It takes a byte slice as input and returns a TraceID object.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_64\n\nLANGUAGE: go\nCODE:\n```\nTraceID(bytes)\n```\n\n----------------------------------------\n\nTITLE: Generating Changelog for Release Notes\nDESCRIPTION: Git command to generate a changelog listing all commits between release tags. The output is formatted for inclusion in GitHub release notes.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/minio/minio-go/v7/MAINTAINERS.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ git log --no-color --pretty=format:'-%d %s (%cr) <%an>' <last_release_tag>..<latest_release_tag>\n```\n\n----------------------------------------\n\nTITLE: Querying Percentage of Connected Traces using Prometheus PromQL\nDESCRIPTION: This PromQL query calculates the percentage of traces that are properly connected when flushed to the write-ahead log (WAL). It identifies the ratio of disconnected traces to total traces created.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/querying/long-running-traces.md#2025-04-17_snippet_0\n\nLANGUAGE: promql\nCODE:\n```\n1 - sum(rate(tempo_warnings_total{reason=\"disconnected_trace_flushed_to_wal\"}[5m])) / sum(rate(tempo_ingester_traces_created_total{}[5m]))\n```\n\n----------------------------------------\n\nTITLE: Disabling Compression for OTLP Exporter in YAML\nDESCRIPTION: Example configuration to disable the default gzip compression for the OTLP exporter. By default, gzip compression is enabled for better performance.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/exporter/otlpexporter/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  otlp:\n    ...\n    compression: none\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Compose Containers\nDESCRIPTION: This command lists all running containers managed by Docker Compose. It provides the names, commands, states, and ports of each container, which is useful for verification purposes after starting the stack. The output gives insights into the operational status of each component in the setup.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/otel-collector/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndocker compose ps\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Compose Setup\nDESCRIPTION: This command stops and removes all containers, networks, and volumes created by Docker Compose for this setup. It's used after you finish using the OpenTelemetry Collector setup to clean up resources. It takes no parameters and affects all components in the current Compose file.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/otel-collector/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndocker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Installing Memcached Jsonnet Library with Jsonnet Bundler\nDESCRIPTION: This snippet demonstrates how to install the `memcached` Jsonnet library from GitHub using Jsonnet Bundler (`jb`). This command fetches the library and makes it available for importing in Jsonnet configurations.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/grafana/jsonnet-libs/memcached/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\njb install github.com/grafana/jsonnet-libs/memcached\n```\n```\n\n----------------------------------------\n\nTITLE: Calculating String Width in Go using Runewidth\nDESCRIPTION: Demonstrates how to use the runewidth package to calculate the display width of a string containing both Japanese characters and special symbols. The function returns the total width units of the string.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/mattn/go-runewidth/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nrunewidth.StringWidth(\"つのだ☆HIRO\") == 12\n```\n\n----------------------------------------\n\nTITLE: Defining State Machine Function Type in Go\nDESCRIPTION: Defines the type for state machine functions used in the custom JSON package. This type is the foundation for implementing state machines for parsing and generating JSON.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/internal/json/design.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype stateFn func() (stateFn, error)\n```\n\n----------------------------------------\n\nTITLE: Using Bloom Filters for Point Lookups in Parquet Files with Go\nDESCRIPTION: This snippet shows how to use bloom filters when performing point lookups in Parquet files. It demonstrates checking the bloom filter of each column chunk to quickly eliminate chunks that don't contain the searched value.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/parquet-go/parquet-go/README.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nvar candidateChunks []parquet.ColumnChunk\n\nfor _, rowGroup := range file.RowGroups() {\n    columnChunk := rowGroup.ColumnChunks()[columnIndex]\n    bloomFilter := columnChunk.BloomFilter()\n\n    if bloomFilter != nil {\n        if ok, err := bloomFilter.Check(value); err != nil {\n            ...\n        } else if !ok {\n            // Bloom filters may return false positives, but never return false\n            // negatives, we know this column chunk does not contain the value.\n            continue\n        }\n    }\n\n    candidateChunks = append(candidateChunks, columnChunk)\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Snake Case in Go\nDESCRIPTION: The ToSnakeCase function converts a string to snake case format. It takes a target string as input and returns the snake case version.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_62\n\nLANGUAGE: go\nCODE:\n```\nToSnakeCase(target)\n```\n\n----------------------------------------\n\nTITLE: Go Package Import Example\nDESCRIPTION: Example import statements showing OpenTelemetry packages referenced in the changelog, including exporters and bridges.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_20\n\nLANGUAGE: go\nCODE:\n```\n\"go.opentelemetry.io/otel/exporters/otlptrace/otlptracegrpc\"\n\"go.opentelemetry.io/otel/exporters/otlptrace/otlptracehttp\"\n\"go.opentelemetry.io/otel/bridge/opentracing\"\n\"go.opentelemetry.io/otel/sdk/metric\"\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Contributing to Cobra\nDESCRIPTION: Series of git commands showing the workflow for contributing to the Cobra project, from forking to creating a pull request.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/cobra/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your_username/cobra && cd cobra\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my-new-feature\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m 'Add some feature'\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Adding Fields to BlobPropertiesInternal in ListBlob Response\nDESCRIPTION: YAML directive to add Owner, Group, Permissions, Acl, and ResourceType fields to the BlobPropertiesInternal definition in the swagger document.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:  \n- from: swagger-document    \n  where: $.definitions\n  transform: >\n    $.BlobPropertiesInternal.properties[\"Owner\"] = {\n      \"type\" : \"string\",\n    };\n    $.BlobPropertiesInternal.properties[\"Group\"] = {\n      \"type\" : \"string\",\n    };\n    $.BlobPropertiesInternal.properties[\"Permissions\"] = {\n      \"type\" : \"string\",\n    };\n    $.BlobPropertiesInternal.properties[\"Acl\"] = {\n      \"type\" : \"string\",\n    };\n    $.BlobPropertiesInternal.properties[\"ResourceType\"] = {\n      \"type\" : \"string\",\n    };\n```\n\n----------------------------------------\n\nTITLE: Code Sample: Go OpenTelemetry ErrorHandlerFunc\nDESCRIPTION: Implementation of error handler function type\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_26\n\nLANGUAGE: Go\nCODE:\n```\n\"go.opentelemetry.io/otel\".ErrorHandlerFunc\n```\n\n----------------------------------------\n\nTITLE: Decoder Buffer Iteration with NUL Termination\nDESCRIPTION: This code shows an optimized approach to iterating through a buffer using a NUL character for termination. This avoids the need to constantly check the buffer length, improving performance.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfor {\n    switch buf[cursor] {\n    case ' ', '\\n', '\\r', '\\t':\n    case '\\000':\n        return nil\n    }\n    cursor++\n}\n```\n\n----------------------------------------\n\nTITLE: Using ExtractGrokPatterns with Named Captures\nDESCRIPTION: Examples of using ExtractGrokPatterns to parse strings using Grok patterns with named captures. Shows various pattern matching scenarios including git SHA extraction and log parsing.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_24\n\nLANGUAGE: go\nCODE:\n```\nExtractGrokPatterns(resource.attributes[\"k8s.change_cause\"], \"GIT_SHA=(?P<git.sha>\\w+)\")\n\nExtractGrokPatterns(log.body, \"^(?P<timestamp>\\w+ \\w+ [0-9]+:[0-9]+:[0-9]+) (?P<hostname>([A-Za-z0-9-_]+)) (?P<process>\\w+)(\\[(?P<pid>\\d+)\\])?: (?P<message>.*)$\")\n\nExtractGrokPatterns(log.body, \"%{URI}\", true)\n\nExtractGrokPatterns(log.body, \"%{DATESTAMP:timestamp} %{TZ:event.timezone} %{DATA:user.name} %{GREEDYDATA:postgresql.log.connection_id} %{POSINT:process.pid:int}\", true)\n\nExtractGrokPatterns(log.body, \"%{LOGLINE}\", true, [\"LOGLINE=%{DATESTAMP:timestamp} %{TZ:event.timezone} %{DATA:user.name} %{GREEDYDATA:postgresql.log.connection_id} %{POSINT:process.pid:int}\"])\n```\n\n----------------------------------------\n\nTITLE: Bitmap Field Type Definition in Go\nDESCRIPTION: Type definition for the bitmap-based field lookup optimization implementation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n[maxFieldKeyLength][256]int8\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Storage Account using Azure CLI\nDESCRIPTION: Command to create a new Azure storage account using the Azure CLI with specified parameters.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz storage account create --name MyStorageAccount --resource-group MyResourceGroup --location westus --sku Standard_LRS\n```\n\n----------------------------------------\n\nTITLE: Installing the uniseg Package with Go Get\nDESCRIPTION: Command to install the uniseg package using Go's package manager. This will download and install the package from GitHub.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/rivo/uniseg\n```\n\n----------------------------------------\n\nTITLE: Using Pointers for Optional Values in Kong CLI\nDESCRIPTION: Shows how to use pointer types to distinguish between zero values and unspecified values in command-line arguments. A nil pointer indicates no value was supplied.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/kong/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nvar CLI struct {\n\tFoo *int\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Producer Interceptor in Go\nDESCRIPTION: Adds a Producer Interceptor example to the Kafka client library.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/IBM/sarama/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nAdds a Producer Interceptor example\n```\n\n----------------------------------------\n\nTITLE: Unregistering Metrics in Go\nDESCRIPTION: Demonstrates how to unregister short-lived meters and timers to prevent memory leaks. This is important for metrics that are no longer needed.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/rcrowley/go-metrics/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Will call Stop() on the Meter to allow for garbage collection\nmetrics.Unregister(\"quux\")\n// Or similarly for a Timer that embeds a Meter\nmetrics.Unregister(\"bang\")\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Slice with Each Function in Go\nDESCRIPTION: Example showing how to use the Each function to iterate over a slice and apply a custom function to each element.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ndata := []interface{}{1, 2, 3, 4, 5}\nvar fn govalidator.Iterator = func(value interface{}, index int) {\n\tprintln(value.(int))\n}\ngovalidator.Each(data, fn)\n```\n\n----------------------------------------\n\nTITLE: Creating Persistent Volume Claim and MinIO Deployment in YAML\nDESCRIPTION: This YAML configuration sets up a Persistent Volume Claim and the MinIO deployment in a Kubernetes environment. It specifies the volume claim, access modes, storage configuration, including the init container for bucket creation, and the main MinIO container settings such as images, ports, and environment variables.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/tanka.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  # This name uniquely identifies the PVC. Will be used in deployment below.\n  name: minio-pv-claim\n  labels:\n    app: minio-storage-claim\nspec:\n  # Read more about access modes here: http://kubernetes.io/docs/user-guide/persistent-volumes/#access-modes\n  accessModes:\n    - ReadWriteOnce\n  storageClassName: local-path\n  resources:\n    # This is the request for storage. Should be available in the cluster.\n    requests:\n      storage: 50Gi\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: minio\nspec:\n  selector:\n    matchLabels:\n      app: minio\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      labels:\n        # Label is used as selector in the service.\n        app: minio\n    spec:\n      # Refer to the PVC created earlier\n      volumes:\n        - name: storage\n          persistentVolumeClaim:\n            # Name of the PVC created earlier\n            claimName: minio-pv-claim\n      initContainers:\n        - name: create-buckets\n          image: busybox:1.28\n          command:\n            - \"sh\"\n            - \"-c\"\n            - \"mkdir -p /storage/tempo-data\"\n          volumeMounts:\n            - name: storage # must match the volume name, above\n              mountPath: \"/storage\"\n      containers:\n        - name: minio\n          # Pulls the default Minio image from Docker Hub\n          image: minio/minio:latest\n          args:\n            - server\n            - /storage\n            - --console-address\n            - \":9001\"\n          env:\n            # Minio access key and secret key\n            - name: MINIO_ACCESS_KEY\n              value: \"minio\"\n            - name: MINIO_SECRET_KEY\n              value: \"minio123\"\n          ports:\n            - containerPort: 9000\n            - containerPort: 9001\n          volumeMounts:\n            - name: storage # must match the volume name, above\n              mountPath: \"/storage\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: minio\nspec:\n  type: ClusterIP\n  ports:\n    - port: 9000\n      targetPort: 9000\n      protocol: TCP\n      name: api\n    - port: 9001\n      targetPort: 9001\n      protocol: TCP\n      name: console\n  selector:\n    app: minio\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Compute Metadata Library\nDESCRIPTION: Command to install the Google Cloud Compute metadata package using Go module system. Enables developers to interact with Google Cloud metadata service.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/cloud.google.com/go/compute/metadata/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/compute/metadata\n```\n\n----------------------------------------\n\nTITLE: Adding Properties Field to BlobPrefix Definition\nDESCRIPTION: YAML directive to add a Properties field of type BlobPropertiesInternal to the BlobPrefix definition in the swagger document.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    $.BlobPrefix.properties[\"Properties\"] = {\n      \"type\": \"object\",\n      \"$ref\": \"#/definitions/BlobPropertiesInternal\"\n    };\n```\n\n----------------------------------------\n\nTITLE: Start Local Consul Server\nDESCRIPTION: This shell command starts a local Consul server in development mode, necessary for interacting with the Consul API. It runs the server as a background process with a default node value.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/consul/api/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nconsul agent -dev -node machine\n```\n\n----------------------------------------\n\nTITLE: Deprecating Tolerate Failed Blocks in Tempo Configuration\nDESCRIPTION: This snippet illustrates the removal of the `tolerate_failed_blocks` configuration option in the Tempo query frontend. It indicates a breaking change in the configuration options, requiring administrators to remove this option from their configs to ensure compatibility with version 2.2.0.\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nquery_frontend:\n  tolerate_failed_blocks: <int>\n```\n\n----------------------------------------\n\nTITLE: Installing Kubernetes Libsonnet for Tanka\nDESCRIPTION: Commands to install the Kubernetes libsonnet library for the specific Kubernetes version and create a reference to it.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/tanka.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p lib\nexport K8S_VERSION=1.25\njb install github.com/jsonnet-libs/k8s-libsonnet/${K8S_VERSION}@main\ncat <<EOF > lib/k.libsonnet\nimport 'github.com/jsonnet-libs/k8s-libsonnet/${K8S_VERSION}/main.libsonnet'\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating a new branch for Zap feature development\nDESCRIPTION: Steps to create a new branch for developing a feature in Zap, including updating the local master branch with upstream changes.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/go.uber.org/zap\ngit checkout master\ngit fetch upstream\ngit rebase upstream/master\ngit checkout -b cool_new_feature\n```\n\n----------------------------------------\n\nTITLE: Flat Path Unmarshalling in Go\nDESCRIPTION: Illustrates how to unmarshal complex nested configurations into flat structures using Koanf's `FlatPaths` feature, supporting advanced configuration extraction.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"github.com/knadh/koanf/v2\"\n\t\"github.com/knadh/koanf/parsers/json\"\n\t\"github.com/knadh/koanf/providers/file\"\n)\n\nvar k = koanf.New(\".\")\n\nfunc main() {\n\t// Load JSON config\n\tk.Load(file.Provider(\"mock/mock.json\"), json.Parser())\n\n\ttype rootFlat struct {\n\t\tType                        string            `koanf:\"type\"`\n\t\tEmpty                       map[string]string `koanf:\"empty\"`\n\t\tParent1Name                 string            `koanf:\"parent1.name\"`\n\t\tParent1ID                   int               `koanf:\"parent1.id\"`\n\t\tParent1Child1Name           string            `koanf:\"parent1.child1.name\"`\n\t\t// ... other fields ...\n\t}\n\n\tvar o1 rootFlat\n\tk.UnmarshalWithConf(\"\", &o1, koanf.UnmarshalConf{Tag: \"koanf\", FlatPaths: true})\n\tfmt.Println(o1)\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Experimental Resource Semantic Conventions in OpenTelemetry Go\nDESCRIPTION: Command to disable experimental resource semantic conventions by unsetting the OTEL_GO_X_RESOURCE environment variable.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/sdk/internal/x/README.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nunset OTEL_GO_X_RESOURCE\n```\n\n----------------------------------------\n\nTITLE: Estimating False Positive Rate in a Bloom Filter in Go\nDESCRIPTION: This snippet shows how to estimate the false positive rate of a Bloom filter for a given set size. Note that calling this method will clear the Bloom filter.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/willf/bloom/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nif filter.EstimateFalsePositiveRate(1000) > 0.001\n```\n\n----------------------------------------\n\nTITLE: Fixing Field Name Casing\nDESCRIPTION: Updates casing for SignedOID and SignedTID fields in models.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: zz_models.go\n  where: $\n  transform: >\n    return $.\n      replace(/SignedOid\\s+\\*string/g, `SignedOID *string`).\n      replace(/SignedTid\\s+\\*string/g, `SignedTID *string`);\n```\n\n----------------------------------------\n\nTITLE: Anonymous Azure Blob Access\nDESCRIPTION: Shows how to create a client for anonymous or SAS token-based access. Uses NewClientWithNoCredential instead of the previous NewAnonymousCredential approach.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/migrationguide.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nclient, err := azblob.NewClientWithNoCredential(\"<public blob or blob with SAS URL>\", nil)\n```\n\n----------------------------------------\n\nTITLE: Listing Apache-2.0 Licensed Directories for Grafana Tempo\nDESCRIPTION: This code block specifies the folders and their subfolders that are licensed under Apache-2.0 within the Grafana Tempo project.\nSOURCE: https://github.com/grafana/tempo/blob/main/LICENSING.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd/tempo-query/\noperations/\npkg/tempopb\n```\n\n----------------------------------------\n\nTITLE: Retrieving Baggage Items in Go\nDESCRIPTION: Example of retrieving baggage items from a span in Go\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/uber/jaeger-client-go/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nif span := opentracing.SpanFromContext(ctx); span != nil {\n    val := span.BaggageItem(\"key\")\n    println(val)\n}\n```\n\n----------------------------------------\n\nTITLE: Base64Decode Converter Usage in OTTL\nDESCRIPTION: The Base64Decode converter takes a base64 encoded string and returns the decoded string. This converter has been deprecated in favor of the Decode converter.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_14\n\nLANGUAGE: ottl\nCODE:\n```\nBase64Decode(\"aGVsbG8gd29ybGQ=\")\n```\n\nLANGUAGE: ottl\nCODE:\n```\nBase64Decode(resource.attributes[\"encoded field\"])\n```\n\n----------------------------------------\n\nTITLE: Formatting Float64 Numbers in Go using Humanize\nDESCRIPTION: Shows how to use humanize.Ftoa() function to format float64 numbers by removing trailing zeros.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"%f\", 2.24)                // 2.240000\nfmt.Printf(\"%s\", humanize.Ftoa(2.24)) // 2.24\nfmt.Printf(\"%f\", 2.0)                 // 2.000000\nfmt.Printf(\"%s\", humanize.Ftoa(2.0))  // 2\n```\n\n----------------------------------------\n\nTITLE: Importing Jaeger Client with Dep Dependency Manager\nDESCRIPTION: Example of importing the Jaeger client library using the dep dependency manager with semantic versioning.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/uber/jaeger-client-go/README.md#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[[constraint]]\n  name = \"github.com/uber/jaeger-client-go\"\n  version = \"2.17\"\n```\n\n----------------------------------------\n\nTITLE: JSON Patch Document Example\nDESCRIPTION: Example of a JSON patch document (patch.1.json) that replaces a name field and removes a height field from a JSON document.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/evanphx/json-patch/README.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\"op\": \"replace\", \"path\": \"/name\", \"value\": \"Jane\"},\n    {\"op\": \"remove\", \"path\": \"/height\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Example Client Reset Connection Error Log (Text)\nDESCRIPTION: This log message indicates that the client terminated the connection before the distributor could process the trace data. Resolving this typically requires investigation and correction on the client side. Logging discarded spans with all attributes can assist in pinpointing the problematic clients.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/send-traces/max-trace-limit-reached.md#2025-04-17_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n\"msg=\\\"pusher failed to consume trace data\\\" err=\\\"context canceled\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Modifying GeoReplication Status Enum\nDESCRIPTION: YAML directive to modify the GeoReplication Status enum in the swagger document.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    delete $.GeoReplication.properties.Status[\"x-ms-enum\"];\n    $.GeoReplication.properties.Status[\"x-ms-enum\"] = {\n        \"name\": \"BlobGeoReplicationStatus\",\n        \"modelAsString\": false\n    };\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry SDK Trace Package\nDESCRIPTION: This markdown snippet displays a badge that links to the package documentation on pkg.go.dev for the OpenTelemetry SDK Trace package in Go.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/sdk/trace/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/trace)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/trace)\n```\n\n----------------------------------------\n\nTITLE: Importing GopherLua Package in Go\nDESCRIPTION: Example of importing the GopherLua package in a Go program.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/yuin/gopher-lua\"\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for Log Global Package in Markdown\nDESCRIPTION: This snippet shows how to embed a PkgGoDev badge in a Markdown file. The badge links to the GoDoc page for the Log Global package, providing quick access to the package's API documentation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/log/global/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/log/global)](https://pkg.go.dev/go.opentelemetry.io/otel/log/global)\n```\n\n----------------------------------------\n\nTITLE: Basic Struct Definition for JSON Decoding in Go\nDESCRIPTION: Example struct definition showing JSON field mapping used to demonstrate the optimization problem.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype T struct {\n    A int `json:\"a\"`\n    B int `json:\"b\"`\n    C int `json:\"c\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Unsupported String Replacement Functions in Go\nDESCRIPTION: This code block lists the bash string replacement functions that are not supported by the envsubst package. These functions cannot be used for variable expansion or string manipulation in this context.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/drone/envsubst/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* `${var-default}`\n* `${var+default}`\n* `${var:?default}`\n* `${var:+default}`\n```\n\n----------------------------------------\n\nTITLE: Creating New Value in Jsonnet\nDESCRIPTION: The 'value.new' function provides a means to create a new value object of specified type and description, with an optional default.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/jsonnet-libs/docsonnet/doc-util/README.md#2025-04-17_snippet_13\n\nLANGUAGE: jsonnet\nCODE:\n```\nvalue.new(type, help, default)\n```\n\n----------------------------------------\n\nTITLE: Defining a Struct for TOML Unmarshaling/Marshaling in Go\nDESCRIPTION: This Go struct definition is used as an example for demonstrating how to read and write TOML data using the go-toml library. It defines a simple configuration structure with a version, name, and a list of tags.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n\"type MyConfig struct {\\n\\tVersion int\\n\\tName    string\\n\\tTags    []string\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Installing the Backoff Package in Go\nDESCRIPTION: Command to install the backoff package using Go's package manager.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/jpillora/backoff/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get -v github.com/jpillora/backoff\n```\n\n----------------------------------------\n\nTITLE: Parsing Time Strings in Go\nDESCRIPTION: The Time function converts a string representation of time to a Go time.Time object. It supports various format specifiers and optional timezone and locale parameters.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_58\n\nLANGUAGE: go\nCODE:\n```\nTime(target, format, Optional[location], Optional[locale])\n```\n\n----------------------------------------\n\nTITLE: Verifying Azure CLI Account Information\nDESCRIPTION: An Azure CLI command to verify which account is currently logged in. This helps troubleshoot AzureCLICredential authentication issues by confirming the CLI is authenticated with the correct account.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-17_snippet_3\n\nLANGUAGE: azurecli\nCODE:\n```\naz account show\n```\n\n----------------------------------------\n\nTITLE: Configuration Validation Command\nDESCRIPTION: Command to validate a configuration file without running the collector.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/service/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n   ./otelcorecol validate --config=file:examples/local/otel-config.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing xmlquery Package in Go\nDESCRIPTION: Command to install the xmlquery package using Go's package manager.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/antchfx/xmlquery/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n $ go get github.com/antchfx/xmlquery\n```\n\n----------------------------------------\n\nTITLE: Installing go-proxyproto\nDESCRIPTION: This command retrieves and installs the go-proxyproto library using the go get command. The -u flag ensures that the package and its dependencies are updated to the latest version.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pires/go-proxyproto/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"$ go get -u github.com/pires/go-proxyproto\"\n```\n\n----------------------------------------\n\nTITLE: Installing the Codec Library in Go\nDESCRIPTION: This command demonstrates how to install the ugorji/go/codec library using the `go get` command. This library provides encoding and decoding functionalities for various serialization formats like msgpack and binc.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-msgpack/codec/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n\"go get github.com/ugorji/go/codec\"\n```\n\n----------------------------------------\n\nTITLE: Git Repository Clone Alternative\nDESCRIPTION: Alternative command to directly clone the GitHub repository instead of using Go modules.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-go\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Services\nDESCRIPTION: Command to start the defined services in the Docker Compose file in detached mode.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/linux.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Feature Entry Format\nDESCRIPTION: Markdown formatting for new feature entries with issue references and commit hashes\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* **auth:** Add downscope.Options.UniverseDomain ([#9634](https://github.com/googleapis/google-cloud-go/issues/9634)) ([52cf7d7](https://github.com/googleapis/google-cloud-go/commit/52cf7d780853594291c4e34302d618299d1f5a1d))\n```\n\n----------------------------------------\n\nTITLE: Using Custom Locales\nDESCRIPTION: Shows how to use custom locale implementations with Parse, ParseInLocation, and Translate functions for specialized locale handling.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/elastic/lunes/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nlocale := &CustomLocale{}\n\n// It's like Parse, but instead of receiving a BCP 47 language tag argument, it receives a lunes.Locale\nt, err := lunes.ParseWithLocale(\"Monday Jan _2 2006 15:04:05\", \"lunes oct 27 1988 11:53:29\", locale)\n\n// It's like ParseInLocation, but instead of receiving a BCP 47 language tag argument, it receives a lunes.Locale\nt, err := lunes.ParseInLocationWithLocale(\"Monday Jan _2 2006 15:04:05\", \"lunes oct 27 1988 11:53:29\", time.UTC, locale)\n\n// It's like Translate, but instead of receiving a BCP 47 language tag argument, it receives a lunes.Locale\nt, err := lunes.TranslateWithLocale(\"Monday Jan _2 2006 15:04:05\", \"lunes oct 27 1988 11:53:29\", locale)\n```\n\n----------------------------------------\n\nTITLE: License Header for New Files in Jaeger Client Go\nDESCRIPTION: The required Apache 2.0 license header that must be included at the top of all new files added to the project. This can be automatically added using 'make fmt'.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/uber/jaeger-client-go/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Copyright (c) 2017 The Jaeger Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Creating Data Directory\nDESCRIPTION: Command to create a directory for storing Tempo data locally.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/getting-started/docker-example.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir tempo-data\n```\n\n----------------------------------------\n\nTITLE: Bypassing Conflicting Overrides Check (Shell)\nDESCRIPTION: Example cURL command demonstrating how to bypass the conflicting runtime overrides check by including the skip-conflicting-overrides-check query parameter.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/manage-advanced-systems/user-configurable-overrides.md#2025-04-17_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"If-Match: 1697726795401423\" http://localhost:3100/api/overrides?skip-conflicting-overrides-check=true --data \"...\"\n```\n\n----------------------------------------\n\nTITLE: Parsing XML to JSON - Repeated Elements\nDESCRIPTION: Demonstrates handling of multiple XML elements with the same tag name converting to JSON array\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_50\n\nLANGUAGE: xml\nCODE:\n```\n<a>\n  <b>1</b>\n  <b>2</b>\n</a>\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"a\": {\n    \"b\": [\"1\", \"2\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating License Secret in Kubernetes\nDESCRIPTION: Bash command to create a Kubernetes secret containing the license file.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/helm-charts/tempo-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n tempo-test create secret generic tempo-license --from-file=license.jwt\n```\n\n----------------------------------------\n\nTITLE: Testing Redis Client Functionality in Go\nDESCRIPTION: This snippet outlines the testing approach for the go-redis client by configuring a local Redis server. It provides instructions for setting up the necessary server and configuration files to run the tests effectively.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-redis/redis/v8/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar (\n\tredisServerBin, _  = filepath.Abs(filepath.Join(\"testdata\", \"redis\", \"src\", \"redis-server\"))\n\tredisServerConf, _ = filepath.Abs(filepath.Join(\"testdata\", \"redis\", \"redis.conf\"))\n)\n\n// For local testing, you can change the variables to refer to your local files, or create a soft link\nto the corresponding folder for redis-server and copy the config file to `testdata/redis/`:\n\n// ln -s /usr/bin/redis-server ./go-redis/testdata/redis/src\n// cp ./go-redis/testdata/redis.conf ./go-redis/testdata/redis/\n\n// Lastly, run:\n// go test\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tag Names Example with Curl\nDESCRIPTION: Example curl request to fetch all span-scoped tag names from Tempo. Shows the request format and example JSON response structure with the list of available tag names.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/_index.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -G -s http://localhost:3200/api/search/tags?scope=span  | jq\n```\n\n----------------------------------------\n\nTITLE: XPath Comparison and Arithmetic Expressions\nDESCRIPTION: Logical comparison operators and arithmetic expressions for XPath operations. Includes equality, relational operators, and basic mathematical operations.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/antchfx/xpath/README.md#2025-04-17_snippet_2\n\nLANGUAGE: xpath\nCODE:\n```\na = b\na != b\na < b\na <= b\na > b\na >= b\n- a\na + b\na - b\na * b\na div b\na mod b\na or b\na and b\n(expr)\n```\n\n----------------------------------------\n\nTITLE: Creating Local Storage Directory and Starting Docker Compose\nDESCRIPTION: Initializes local storage directory and starts the Docker Compose stack for Tempo deployment\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/local/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmkdir tempo-data/\\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Tailing Tempo Container Logs\nDESCRIPTION: Streams live logs from the Tempo container for monitoring and troubleshooting\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/local/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs local_tempo_1 -f\n```\n\n----------------------------------------\n\nTITLE: Benchmark Commands for XXHash Performance Testing\nDESCRIPTION: Shell commands for running performance benchmarks comparing pure Go and assembly implementations using the benchstat tool.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbenchstat <(go test -tags purego -benchtime 500ms -count 15 -bench 'Sum64$')\nbenchstat <(go test -benchtime 500ms -count 15 -bench 'Sum64$')\n```\n\n----------------------------------------\n\nTITLE: Creating an Objx Map from JSON Data\nDESCRIPTION: Shows how to create an objx.Map object from a JSON string, which may return an error that should be handled.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/stretchr/objx/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nm, err := objx.FromJSON(json)\n```\n\n----------------------------------------\n\nTITLE: Customizing Memcached Resources with Jsonnet\nDESCRIPTION: This Jsonnet snippet shows how to override resource requests and limits for the Memcached container.  It imports the `memcached` library and uses `$.util.resourcesRequests` and `$.util.resourcesLimits` to define the CPU and memory requirements for the container, effectively customizing the default settings.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/grafana/jsonnet-libs/memcached/README.md#2025-04-17_snippet_4\n\nLANGUAGE: jsonnet\nCODE:\n```\n```jsonnet\nlocal memcached = import \"memcached/memcached.libsonnet\";\n\nmemcached + {\n  // Memcached instance used to cache chunks.\n  memcached_chunks: $.memcached {\n    name: 'memcached',\n    max_item_size: '2m',\n    memory_limit_mb: 4096,\n\n    memcached_container+::\n     $.util.resourcesRequests(\"1\", \"2Gi\") +\n     $.util.resourcesLimits(\"2\", \"4Gi\"),\n  },\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating MinIO Secret for Tempo\nDESCRIPTION: This YAML defines a Kubernetes secret containing MinIO configuration details for Tempo, including endpoint, bucket, and access credentials.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/quickstart.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl apply -f - <<EOF\napiVersion: v1\nkind: Secret\nmetadata:\n  name: minio-test\nstringData:\n  endpoint: http://minio.minio.svc:9000\n  bucket: tempo\n  access_key_id: tempo\n  access_key_secret: supersecret\ntype: Opaque\nEOF\n```\n\n----------------------------------------\n\nTITLE: Running Local Go Documentation Server\nDESCRIPTION: Commands to install and run a local Go documentation server for development.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngo install golang.org/x/pkgsite/cmd/pkgsite@latest\npkgsite\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Go OLE Example\nDESCRIPTION: Instructions for installing the Go OLE package, running tests, and executing an example Excel program. This snippet demonstrates the basic setup and usage of the library.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-ole/go-ole/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngo get github.com/go-ole/go-ole\ncd /path/to/go-ole/\ngo test\n\ncd /path/to/go-ole/example/excel\ngo run excel.go\n```\n\n----------------------------------------\n\nTITLE: Parsing command line flags\nDESCRIPTION: Shows how to call the Parse() function to process command line arguments and set flag values accordingly.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nflag.Parse()\n```\n\n----------------------------------------\n\nTITLE: Traditional Field Lookup Implementation in Go\nDESCRIPTION: Original slow implementation using map lookups for field name resolution during JSON decoding.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfieldName := decodeKey(buf, cursor) // \"a\" or \"b\" or \"c\"\ndecoder, exists := fieldToDecoderMap[fieldName] // so slow\nif exists {\n    decoder(buf, cursor)\n} else {\n    skipValue(buf, cursor)\n}\n```\n\n----------------------------------------\n\nTITLE: Running JSON-Patch Tests for Contributors\nDESCRIPTION: Command for running tests with coverage reporting for the JSON-patch library, useful for contributors to ensure code quality before submitting pull requests.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/evanphx/json-patch/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngo test -cover ./...\n```\n\n----------------------------------------\n\nTITLE: Field Selection Query\nDESCRIPTION: Query to select specific fields from error spans\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_47\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ status=error } | select(span.http.status_code, span.http.url)\n```\n\n----------------------------------------\n\nTITLE: Initialize String for Conversion Using Strcase in Go\nDESCRIPTION: This Go code snippet demonstrates how to initialize strings for conversion using the strcase package. It prepares a string for subsequent case transformations.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/iancoleman/strcase/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ns := \"AnyKind of_string\"\n```\n\n----------------------------------------\n\nTITLE: Installing gobreaker Package in Go\nDESCRIPTION: Command to install the gobreaker package using Go's package manager.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/sony/gobreaker/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/sony/gobreaker\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers with SI Notation in Go using Humanize\nDESCRIPTION: Demonstrates the use of humanize.SI() function to format numbers using SI notation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nhumanize.SI(0.00000000223, \"M\") // 2.23 nM\n```\n\n----------------------------------------\n\nTITLE: Checking for CallErr Type in Go Error Handling\nDESCRIPTION: This snippet shows how to check if an error is of type CallErr using the errors.As() function from the Go error package. This allows for specific handling of HTTP call errors.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar callErr CallErr\nif errors.As(err, &callErr) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining New Function Argument in Jsonnet\nDESCRIPTION: The 'argument.new' function creates a new argument object, requiring the name, type, and optionally a default value and an array of enums.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/jsonnet-libs/docsonnet/doc-util/README.md#2025-04-17_snippet_7\n\nLANGUAGE: jsonnet\nCODE:\n```\nargument.new(name, type, default, enums)\n```\n\n----------------------------------------\n\nTITLE: Implementing Real Clock in Go\nDESCRIPTION: This snippet implements the RealClock struct, which satisfies the Clock interface using actual time functions from the time package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/k8s.io/utils/clock/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ntype RealClock struct{}\n\nfunc (RealClock) Now() time.Time                        { return time.Now() }\nfunc (RealClock) Sleep(d time.Duration)                { time.Sleep(d) }\nfunc (RealClock) NewTicker(d time.Duration) *time.Ticker { return time.NewTicker(d) }\n```\n\n----------------------------------------\n\nTITLE: Creating custom flags with Value interface\nDESCRIPTION: Demonstrates how to create custom flags that implement the Value interface and couple them to flag parsing using the Var() function.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nflag.Var(&flagVal, \"name\", \"help message for flagname\")\n```\n\n----------------------------------------\n\nTITLE: XPath Node Axes Expressions\nDESCRIPTION: Node axis selectors for traversing document relationships like child, descendant, sibling, and ancestor nodes. These expressions provide precise control over node selection based on hierarchical relationships.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/antchfx/xpath/README.md#2025-04-17_snippet_1\n\nLANGUAGE: xpath\nCODE:\n```\nchild::*\nchild::node()\nchild::text()\ndescendant::*\ndescendant-or-self::*\nattribute::*\nfollowing-sibling::*\npreceding-sibling::*\nfollowing::*\npreceding::*\nparent::*\nancestor::*\nancestor-or-self::*\nself::*\n```\n\n----------------------------------------\n\nTITLE: Declaring Standard Error and Output Writers\nDESCRIPTION: Sets up default io.Writer variables for standard error and standard output streams used in browser-related operations\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pkg/browser/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar Stderr io.Writer = os.Stderr\n```\n\nLANGUAGE: go\nCODE:\n```\nvar Stdout io.Writer = os.Stdout\n```\n\n----------------------------------------\n\nTITLE: Installing JSON-Iterator with Go Get\nDESCRIPTION: Command to install the json-iterator/go package using the Go package manager.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/json-iterator/go\n```\n\n----------------------------------------\n\nTITLE: Configuring Usage Reporting in Tempo YAML\nDESCRIPTION: This snippet shows how to disable anonymous usage reporting in Tempo configuration.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nusage_report:\n  reporting_enabled: false\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Settings in YAML\nDESCRIPTION: Configures MinIO storage settings including root user credentials and standalone mode.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/helm-charts/tempo-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nminio:\n  enabled: true\n  mode: standalone\n  rootUser: minio\n  rootPassword: minio123\n```\n\n----------------------------------------\n\nTITLE: Adding Permissions to ListBlobsInclude Parameter\nDESCRIPTION: YAML directive to add 'permissions' to the enum of ListBlobsInclude parameter in the swagger document.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:  \n- from: swagger-document    \n  where: $.parameters.ListBlobsInclude    \n  transform: >        \n    $.items.enum.push(\"permissions\");\n```\n\n----------------------------------------\n\nTITLE: Replacing Snappy Import in Go\nDESCRIPTION: Instructions for replacing the official Snappy package import with the improved version. This simple change allows developers to use the enhanced Snappy implementation without modifying their existing code.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/snappy/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nReplace imports `github.com/golang/snappy` with `github.com/klauspost/compress/snappy`.\n```\n\n----------------------------------------\n\nTITLE: Parsing UTF-16 XML with Character Set Handling in Go\nDESCRIPTION: Advanced example showing how to parse UTF-16 XML files by converting to UTF-8 and using custom charset readers.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/antchfx/xmlquery/README.md#2025-04-17_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nf, _ := os.Open(`UTF-16.XML`)\n// Convert UTF-16 XML to UTF-8\nutf16ToUtf8Transformer := unicode.UTF16(unicode.LittleEndian, unicode.IgnoreBOM).NewDecoder()\nutf8Reader := transform.NewReader(f, utf16ToUtf8Transformer)\n// Sets `CharsetReader`\noptions := xmlquery.ParserOptions{\n\tDecoder: &xmlquery.DecoderOptions{\n\t\tCharsetReader: func(charset string, input io.Reader) (io.Reader, error) {\n\t\t\treturn input, nil\n\t\t},\n\t},\n}\ndoc, err := xmlquery.ParseWithOptions(utf8Reader, options)\n```\n\n----------------------------------------\n\nTITLE: Processing Grapheme Clusters Using StepString Function\nDESCRIPTION: Example demonstrating how to iterate over grapheme clusters using the StepString function, which provides a lower-level alternative to the Graphemes class and avoids allocating additional objects.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nstr := \"🇩🇪🏳️‍🌈\"\nstate := -1\nvar c string\nfor len(str) > 0 {\n\tc, str, _, state = uniseg.StepString(str, state)\n\tfmt.Printf(\"%x \", []rune(c))\n}\n// [1f1e9 1f1ea] [1f3f3 fe0f 200d 1f308]\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS ServerName in Go\nDESCRIPTION: Sets the TLS ServerName only for the current broker to fix an issue where either ServerName or InsecureSkipVerify must be specified in the tls.Config.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/IBM/sarama/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nSet tls ServerName to fix issue: either ServerName or InsecureSkipVerify must be specified in the tls.Config\n```\n\n----------------------------------------\n\nTITLE: Creating new test fixture package for procfs\nDESCRIPTION: This Bash command updates the test fixtures by creating a new tar file from the modified fixture directory. It requires that the fixtures directory be updated before running this command. The expected input is the modified fixtures in the directory, and it outputs a new fixtures.ttar file.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/prometheus/procfs/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake update_fixtures\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation in Jsonnet\nDESCRIPTION: The 'render' function takes an object and converts the associated docstrings into Markdown format for documentation outputs.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/jsonnet-libs/docsonnet/doc-util/README.md#2025-04-17_snippet_4\n\nLANGUAGE: jsonnet\nCODE:\n```\nrender(obj)\n```\n\n----------------------------------------\n\nTITLE: Querying Span Links in TraceQL\nDESCRIPTION: Demonstrates querying span links for specific attribute values or link properties.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2023-11 TraceQL Extensions.md#2025-04-17_snippet_5\n\nLANGUAGE: traceql\nCODE:\n```\n{ link.foo = \"bar\" }\n{ link:traceID = \"<hex string>\" }\n```\n\n----------------------------------------\n\nTITLE: Running Pre-release Process for OpenTelemetry Go\nDESCRIPTION: This snippet shows how to run the pre-release process for a specific module set in OpenTelemetry Go. It creates a new branch with version changes and updates the changelog.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake prerelease MODSET=<module set>\n```\n\n----------------------------------------\n\nTITLE: Word Segmentation Using FirstWordInString\nDESCRIPTION: Example showing how to perform word segmentation on a string, breaking it into individual words and other segments like spaces and punctuation marks.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nstr := \"Hello, world!\"\nstate := -1\nvar c string\nfor len(str) > 0 {\n\tc, str, state = uniseg.FirstWordInString(str, state)\n\tfmt.Printf(\"(%s)\\n\", c)\n}\n// (Hello)\n// (,)\n// ( )\n// (world)\n// (!)\n```\n\n----------------------------------------\n\nTITLE: Defining Flags in Kong CLI\nDESCRIPTION: Example of defining a simple flag in Kong CLI. Any mapped field not tagged with cmd or arg becomes a flag that can be specified with the --flag syntax.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/kong/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype CLI struct {\n  Flag string\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OTLP Trace HTTP Exporter in Markdown\nDESCRIPTION: This snippet shows how to include a PkgGoDev badge in a Markdown file. The badge links to the package documentation for the OTLP Trace HTTP Exporter on pkg.go.dev.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp)](https://pkg.go.dev/go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp)\n```\n\n----------------------------------------\n\nTITLE: Parsing XML to JSON - Event Example\nDESCRIPTION: Demonstrates converting an XML event document with nested elements into equivalent JSON structure\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_48\n\nLANGUAGE: xml\nCODE:\n```\n<event>\n    <id>1</id>\n    <user>jane</user>\n    <details>\n      <time>2021-10-01T12:00:00Z</time>\n      <description>Something happened</description>\n      <cause>unknown</cause>\n    </details>\n</event>\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": {\n    \"id\": 1,\n    \"user\": \"jane\",\n    \"details\": {\n      \"time\": \"2021-10-01T12:00:00Z\",\n      \"description\": \"Something happened\",\n      \"cause\": \"unknown\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for String Type in Go\nDESCRIPTION: The IsString function returns true if the given value is a string (string or pcommon.ValueTypeStr), and false otherwise.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_41\n\nLANGUAGE: Go\nCODE:\n```\nIsString(log.body)\n```\n\nLANGUAGE: Go\nCODE:\n```\nIsString(resource.attributes[\"maybe a string\"])\n```\n\n----------------------------------------\n\nTITLE: Installing Viper Package in Go\nDESCRIPTION: Command to install the Viper package using Go modules.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/spf13/viper\n```\n\n----------------------------------------\n\nTITLE: Configuration Changes: Removed Search Options\nDESCRIPTION: This snippet highlights the removal of specific configuration options related to search in v2 blocks.  The removed options impact the ability to configure maximum search bytes per trace and tag allow/deny lists. The removal is associated with the removal of support for search on v2 blocks.\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n\"overrides:\\n  max_search_bytes_per_trace:\\n  search_tags_allow_list:\\n  search_tags_deny_list:\"\n```\n\n----------------------------------------\n\nTITLE: Installing GopherLua Interpreter\nDESCRIPTION: Command to install the standalone GopherLua interpreter (glua) using go get.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/yuin/gopher-lua/cmd/glua\n```\n\n----------------------------------------\n\nTITLE: Configuration Examples in Go\nDESCRIPTION: Various configuration examples for working with the Sarama Kafka client, including SASL authentication, TLS configuration, consumer groups, and producer settings.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/IBM/sarama/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n### Key Features:\n- Support for Kafka 2.1.0 through 2.3.0\n- SASL authentication (SCRAM-SHA-512, SCRAM-SHA-256, OAUTHBEARER, Kerberos)\n- Consumer group implementation\n- ACL management\n- Idempotent Producer support\n- Compression support (zstd, lz4)\n- Proxy support\n- TLS configuration\n- Various admin operations (DescribeConfigs, ListConsumerGroups, etc.)\n```\n\n----------------------------------------\n\nTITLE: Scanning Redis Hash into Struct\nDESCRIPTION: Method for scanning Redis hash data directly into a Go struct, demonstrating simplified data retrieval for hash and multi-key operations\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-redis/redis/v8/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nerr := rdb.HGetAll(ctx, \"hash\").Scan(&data)\n\nerr := rdb.MGet(ctx, \"key1\", \"key2\").Scan(&data)\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Integer in Go\nDESCRIPTION: The Int function converts various input types (float64, string, bool, int64) to int64. It handles type-specific conversions and returns nil for unsupported types or failed parsing.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_33\n\nLANGUAGE: Go\nCODE:\n```\nInt(log.attributes[\"http.status_code\"])\n```\n\nLANGUAGE: Go\nCODE:\n```\nInt(\"2.0\")\n```\n\n----------------------------------------\n\nTITLE: Using Default Logger with go-hclog in Go\nDESCRIPTION: Demonstrates how to use the default global logger to log an info message. This snippet is part of the basic usage of go-hclog, a logging package in Go that emphasizes structured logging with different levels of detail.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nhclog.Default().Info(\"hello world\")\n```\n\n----------------------------------------\n\nTITLE: Committing Version Updates\nDESCRIPTION: Git command for committing version changes after a release. The commit is authored by the MinIO Trusted account.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/minio/minio-go/v7/MAINTAINERS.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ git commit -a -m \"Update version for next release\" --author \"MinIO Trusted <trusted@min.io>\"\n```\n\n----------------------------------------\n\nTITLE: Working with Slice Arguments in Kong CLI\nDESCRIPTION: Example showing how to handle multiple positional arguments as a slice. When a positional argument is a slice, all remaining command line arguments are appended to it.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/kong/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nvar CLI struct {\n  Ls struct {\n    Files []string `arg:\"\" type:\"existingfile\"`\n  } `cmd`\n}\n```\n\n----------------------------------------\n\nTITLE: Tempo HTTP Endpoint Configuration (Binding to All Interfaces)\nDESCRIPTION: This YAML snippet shows how to explicitly bind the HTTP endpoint to all interfaces (`0.0.0.0`).  This configuration reverts to the previous behavior, but it's noted that it carries potential security risks.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-7.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n# ...\n        http:\n          endpoint: \"0.0.0.0:4318\"\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Instrumentation Scope in TraceQL\nDESCRIPTION: Shows how to query attributes and intrinsics in the new instrumentation scope.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2023-11 TraceQL Extensions.md#2025-04-17_snippet_3\n\nLANGUAGE: traceql\nCODE:\n```\n{ scope.foo = \"bar\" }\n{ scope:name ~= \".*Java.*\" }\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite for Viper in Shell\nDESCRIPTION: Command to execute the test suite for the Viper project using Make.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_37\n\nLANGUAGE: shell\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Extended Cardinality Formula with Messaging System Metrics\nDESCRIPTION: Modified cardinality estimation formula when messaging system latency histogram is enabled, including additional histogram metrics.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/metrics-generator/service_graphs/estimate-cardinality.md#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n  traces_service_graph_request_messaging_system_seconds: #hb * #hops\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Compose Stack\nDESCRIPTION: This snippet shows how to tear down the Docker Compose stack and remove volumes. It is important for stopping all running containers and cleaning up resources after testing or usage.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/distributed/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndocker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Documenting Time Duration Format\nDESCRIPTION: Documentation of the time duration format specification used across various configuration settings.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/receiver/otlpreceiver/config.md#2025-04-17_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n### time-Duration \nAn optionally signed sequence of decimal numbers, each with a unit suffix, such as `300ms`, `-1.5h`, or `2h45m`. Valid time units are `ns`, `us`, `ms`, `s`, `m`, `h`.\n```\n\n----------------------------------------\n\nTITLE: Markdown Badge for Go Package Documentation\nDESCRIPTION: Markdown syntax for displaying a PkgGoDev badge that links to the OpenTelemetry metric/noop package documentation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/metric/noop/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/metric/noop)](https://pkg.go.dev/go.opentelemetry.io/otel/metric/noop)\n```\n\n----------------------------------------\n\nTITLE: Loading YAML Configuration Files in Go\nDESCRIPTION: Simple YAML configuration file example showing key with array value that will be used in a merge demonstration.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nkey: [1,2,3]\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up the K3D Cluster\nDESCRIPTION: Deletes the previously created K3D cluster named 'tempo' to clean up resources post-deployment.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/readme.md#2025-04-17_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nk3d cluster delete tempo\n```\n\n----------------------------------------\n\nTITLE: Setting up Tanka Environment for Tempo\nDESCRIPTION: Commands to check the Kubernetes context and initialize a Tanka environment for the Tempo deployment.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/tanka.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl config current-context\n```\n\nLANGUAGE: bash\nCODE:\n```\ntk init --k8s=false\ntk env add environments/tempo\ntk env set environments/tempo \\\n --namespace=tempo \\\n --server-from-context=$(kubectl config current-context)\n```\n\n----------------------------------------\n\nTITLE: Configuring TempoStack Instance with Azure Storage\nDESCRIPTION: This YAML snippet shows how to reference the Azure secret in a TempoStack instance configuration, specifying the secret name and type.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/object-storage.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  storage:\n    secret:\n      name: tempostack-dev-azure\n      type: azure\n```\n\n----------------------------------------\n\nTITLE: Previewing Documentation Locally in Bash\nDESCRIPTION: Command to preview the documentation locally using the grafana/docs image with Hugo. The site becomes available on localhost:3002/docs/.\nSOURCE: https://github.com/grafana/tempo/blob/main/CONTRIBUTING.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake docs\n```\n\n----------------------------------------\n\nTITLE: Defining Argument in Jsonnet\nDESCRIPTION: The 'arg' function is a shorthand for creating new function arguments using the 'argument.new' method, taking in the name, type, default value, and possible enums as parameters.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/jsonnet-libs/docsonnet/doc-util/README.md#2025-04-17_snippet_0\n\nLANGUAGE: jsonnet\nCODE:\n```\narg(name, type, default, enums)\n```\n\n----------------------------------------\n\nTITLE: JSON Type Mapping Example\nDESCRIPTION: Shows the mapping between JSON types and their corresponding pdata.Value types when using ParseJSON function.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_45\n\nLANGUAGE: text\nCODE:\n```\nJSON boolean -> bool\nJSON number  -> float64\nJSON string  -> string\nJSON null    -> nil\nJSON arrays  -> pdata.SliceValue\nJSON objects -> map[string]any\n```\n\n----------------------------------------\n\nTITLE: Using KV Package for Attribute Values in Go\nDESCRIPTION: Shows how to use the merged kv package for creating attribute values of different types.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_41\n\nLANGUAGE: Go\nCODE:\n```\nimport \"go.opentelemetry.io/otel/api/kv\"\n\n// Create attribute values\nboolVal := kv.BoolValue(true)\nintVal := kv.Int64Value(42)\nstrVal := kv.StringValue(\"hello\")\n```\n\n----------------------------------------\n\nTITLE: Handling Shared Configuration in Go\nDESCRIPTION: Example of managing overlapping configuration between different types using shared config and specific options.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-17_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// config holds options for all animals.\ntype config struct {\n\tWeight      float64\n\tColor       string\n\tMaxAltitude float64\n}\n\n// DogOption apply Dog specific options.\ntype DogOption interface {\n\tapplyDog(config) config\n}\n\n// BirdOption apply Bird specific options.\ntype BirdOption interface {\n\tapplyBird(config) config\n}\n\n// Option apply options for all animals.\ntype Option interface {\n\tBirdOption\n\tDogOption\n}\n\ntype weightOption float64\n\nfunc (o weightOption) applyDog(c config) config {\n\tc.Weight = float64(o)\n\treturn c\n}\n\nfunc (o weightOption) applyBird(c config) config {\n\tc.Weight = float64(o)\n\treturn c\n}\n\nfunc WithWeight(w float64) Option { return weightOption(w) }\n\ntype furColorOption string\n\nfunc (o furColorOption) applyDog(c config) config {\n\tc.Color = string(o)\n\treturn c\n}\n\nfunc WithFurColor(c string) DogOption { return furColorOption(c) }\n\ntype maxAltitudeOption float64\n\nfunc (o maxAltitudeOption) applyBird(c config) config {\n\tc.MaxAltitude = float64(o)\n\treturn c\n}\n\nfunc WithMaxAltitude(a float64) BirdOption { return maxAltitudeOption(a) }\n\nfunc NewDog(name string, o ...DogOption) Dog    {…}\nfunc NewBird(name string, o ...BirdOption) Bird {…}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Messages in Go Validation\nDESCRIPTION: Example of defining custom error messages for validation failures using the tilde (~) separator in the validation tag string.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_23\n\nLANGUAGE: go\nCODE:\n```\ntype Ticket struct {\n  Id        int64     `json:\"id\"`\n  FirstName string    `json:\"firstname\" valid:\"required~First name is blank\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmarking ISO8601 Parser in Go\nDESCRIPTION: Benchmark results for the ISO8601 parser, showing its performance metrics on a specific system configuration.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/relvacode/iso8601/README.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/relvacode/iso8601\ncpu: AMD Ryzen 7 7840U w/ Radeon 780M Graphics      \nBenchmarkParse-16               35880919                30.89 ns/op            0 B/op          0 allocs/op\n```\n\n----------------------------------------\n\nTITLE: CPUID JSON Output Example\nDESCRIPTION: Sample JSON output from the CPUID command-line tool showing detailed CPU information including features, cache sizes, and architecture details.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/cpuid/v2/README.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"BrandName\": \"AMD Ryzen 9 3950X 16-Core Processor\",\n  \"VendorID\": 2,\n  \"VendorString\": \"AuthenticAMD\",\n  \"PhysicalCores\": 16,\n  \"ThreadsPerCore\": 2,\n  \"LogicalCores\": 32,\n  \"Family\": 23,\n  \"Model\": 113,\n  \"CacheLine\": 64,\n  \"Hz\": 0,\n  \"BoostFreq\": 0,\n  \"Cache\": {\n    \"L1I\": 32768,\n    \"L1D\": 32768,\n    \"L2\": 524288,\n    \"L3\": 16777216\n  },\n  \"SGX\": {\n    \"Available\": false,\n    \"LaunchControl\": false,\n    \"SGX1Supported\": false,\n    \"SGX2Supported\": false,\n    \"MaxEnclaveSizeNot64\": 0,\n    \"MaxEnclaveSize64\": 0,\n    \"EPCSections\": null\n  },\n  \"Features\": [\n    \"ADX\",\n    \"AESNI\",\n    \"AVX\",\n    \"AVX2\",\n    \"BMI1\",\n    \"BMI2\",\n    \"CLMUL\",\n    \"CLZERO\",\n    \"CMOV\",\n    \"CMPXCHG8\",\n    \"CPBOOST\",\n    \"CX16\",\n    \"F16C\",\n    \"FMA3\",\n    \"FXSR\",\n    \"FXSROPT\",\n    \"HTT\",\n    \"HYPERVISOR\",\n    \"LAHF\",\n    \"LZCNT\",\n    \"MCAOVERFLOW\",\n    \"MMX\",\n    \"MMXEXT\",\n    \"MOVBE\",\n    \"NX\",\n    \"OSXSAVE\",\n    \"POPCNT\",\n    \"RDRAND\",\n    \"RDSEED\",\n    \"RDTSCP\",\n    \"SCE\",\n    \"SHA\",\n    \"SSE\",\n    \"SSE2\",\n    \"SSE3\",\n    \"SSE4\",\n    \"SSE42\",\n    \"SSE4A\",\n    \"SSSE3\",\n    \"SUCCOR\",\n    \"X87\",\n    \"XSAVE\"\n  ],\n  \"X64Level\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing azcore.ETag Type Conversion\nDESCRIPTION: Transforms the SDK code to use azcore.ETag type instead of string for ETag-related fields and adds necessary imports.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from:\n  - zz_models.go\n  - zz_options.go\n  where: $\n  transform: >\n    return $.\n      replace(/import \"time\"/, `import (\\n\\t\"time\"\\n\\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore\"\\n)`).\n      replace(/Etag\\s+\\*string/g, `ETag *azcore.ETag`).\n      replace(/IfMatch\\s+\\*string/g, `IfMatch *azcore.ETag`).\n      replace(/IfNoneMatch\\s+\\*string/g, `IfNoneMatch *azcore.ETag`).\n      replace(/SourceIfMatch\\s+\\*string/g, `SourceIfMatch *azcore.ETag`).\n      replace(/SourceIfNoneMatch\\s+\\*string/g, `SourceIfNoneMatch *azcore.ETag`);\n\n- from: zz_responses.go\n  where: $\n  transform: >\n    return $.\n      replace(/\"time\"/, `\"time\"\\n\\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore\"`).\n      replace(/ETag\\s+\\*string/g, `ETag *azcore.ETag`);\n\n- from:\n  - zz_appendblob_client.go\n  - zz_blob_client.go\n  - zz_blockblob_client.go\n  - zz_container_client.go\n  - zz_pageblob_client.go\n  where: $\n  transform: >\n    return $.\n      replace(/\"github\\.com\\/Azure\\/azure\\-sdk\\-for\\-go\\/sdk\\/azcore\\/policy\"/, `\"github.com/Azure/azure-sdk-for-go/sdk/azcore\"\\n\\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy\"`).\n      replace(/result\\.ETag\\s+=\\s+&val/g, `result.ETag = (*azcore.ETag)(&val)`).\n      replace(/\\*modifiedAccessConditions.IfMatch/g, `string(*modifiedAccessConditions.IfMatch)`).\n      replace(/\\*modifiedAccessConditions.IfNoneMatch/g, `string(*modifiedAccessConditions.IfNoneMatch)`).\n      replace(/\\*sourceModifiedAccessConditions.SourceIfMatch/g, `string(*sourceModifiedAccessConditions.SourceIfMatch)`).\n      replace(/\\*sourceModifiedAccessConditions.SourceIfNoneMatch/g, `string(*sourceModifiedAccessConditions.SourceIfNoneMatch)`);\n```\n\n----------------------------------------\n\nTITLE: Documenting Keepalive Server Parameters\nDESCRIPTION: Configuration structure for gRPC server keepalive parameters including connection idle time, age, and timeout settings.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/receiver/otlpreceiver/config.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### configgrpc-KeepaliveServerParameters\n\n| Name                     | Type                            | Default    | Docs |\n|--------------------------|---------------------------------|------------|------|\n```\n\n----------------------------------------\n\nTITLE: Verifying Dependencies and Proto Definitions in Bash\nDESCRIPTION: Command to run before submitting changes to ensure all dependencies and proto definitions are consistent.\nSOURCE: https://github.com/grafana/tempo/blob/main/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake vendor-check\n```\n\n----------------------------------------\n\nTITLE: Adding DisableDefaultTimeout Config Feature in v1.16.0\nDESCRIPTION: This feature adds a configuration switch called 'DisableDefaultTimeout' that allows users to disable the default operation timeout (5 seconds) for IMDS calls.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/aws/aws-sdk-go-v2/feature/ec2/imds/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.16.0 (2024-03-21)\n\n* **Feature**: Add config switch `DisableDefaultTimeout` that allows you to disable the default operation timeout (5 seconds) for IMDS calls.\n```\n\n----------------------------------------\n\nTITLE: Verifying Tempo Service Status\nDESCRIPTION: Command to check if the Tempo service is active and running.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/linux.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl is-active tempo\n```\n\n----------------------------------------\n\nTITLE: Documenting Changelog Entries in Markdown\nDESCRIPTION: This snippet shows the structure of changelog entries using Markdown formatting. It includes version numbers, dates, and categorized changes (Added, Fixed, Changed, Removed).\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/subosito/gotenv/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.5.0] - 2023-08-15\n\n### Fixed\n\n- Use io.Reader instead of custom Reader\n\n## [1.5.0] - 2023-08-15\n\n### Added\n\n- Support for reading UTF16 files\n\n### Fixed\n\n- Scanner error handling\n- Reader error handling\n\n## [1.4.2] - 2023-01-11\n\n### Fixed\n\n- Env var initialization\n\n### Changed\n\n- More consitent line splitting\n\n## [1.4.1] - 2022-08-23\n\n### Fixed\n\n- Missing file close\n\n### Changed\n\n- Updated dependencies\n```\n\n----------------------------------------\n\nTITLE: Installing Miniredis Package in Go\nDESCRIPTION: Example showing how to import the Miniredis v2 package in a Go project.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alicebob/miniredis/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/alicebob/miniredis/v2\"\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Test Example\nDESCRIPTION: Shows how to write platform-specific test cases with different expected outputs for different operating systems\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/fsnotify/fsnotify/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwatch /\ntouch /file\n\nOutput:\n    # Tested if nothing else matches\n    create    /file\n\n    # Windows-specific test.\n    windows:\n        write  /file\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This snippet provides the boilerplate notice that should be attached to your work when applying the Apache License 2.0.  Replace the bracketed fields with your own identifying information and enclose the text in the appropriate comment syntax for the file format.  Include a file or class name and description of purpose on the same \"printed page\" as the copyright notice.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/google/s2a-go/LICENSE.md#2025-04-17_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Creating a New Logger with go-hclog in Go\nDESCRIPTION: Shows how to create a new logger with a specified name and log level. This is useful for managing logs at different levels of your application, potentially reducing noisy outputs.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nappLogger := hclog.New(&hclog.LoggerOptions{\n\tName:  \"my-app\",\n\tLevel: hclog.LevelFromString(\"DEBUG\"),\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Table Indentation in go-toml v2\nDESCRIPTION: Example showing how indentation behavior differs between v1 and v2, with v1 automatically indenting tables and v2 requiring explicit configuration through the Encoder.SetIndentTables method.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ndata := map[string]interface{}{\n\t\"table\": map[string]string{\n\t\t\"key\": \"value\",\n\t},\n}\n\nb, _ := tomlv1.Marshal(data)\nfmt.Println(\"v1:\\n\" + string(b))\n\nb, _ = tomlv2.Marshal(data)\nfmt.Println(\"v2:\\n\" + string(b))\n\nbuf := bytes.Buffer{}\nenc := tomlv2.NewEncoder(&buf)\nenc.SetIndentTables(true)\nenc.Encode(data)\nfmt.Println(\"v2 Encoder:\\n\" + string(buf.Bytes()))\n\n// Output:\n// v1:\n//\n// [table]\n//   key = \"value\"\n//\n// v2:\n// [table]\n// key = 'value'\n//\n//\n// v2 Encoder:\n// [table]\n//   key = 'value'\n```\n\n----------------------------------------\n\nTITLE: Navigating to Examples Directory\nDESCRIPTION: Command to change directory to the local Docker Compose example folder.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/getting-started/docker-example.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd tempo/example/docker-compose/local\n```\n\n----------------------------------------\n\nTITLE: Installing Gonum BLAS Packages in Go\nDESCRIPTION: This command installs all Gonum BLAS packages using the Go package manager.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/gonum.org/v1/gonum/blas/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get gonum.org/v1/gonum/blas/...\n```\n\n----------------------------------------\n\nTITLE: Custom Validator Function Signature in Go\nDESCRIPTION: Shows the old and new function signatures for custom validator functions. The new signature includes a context parameter for dependent validation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n\n// old signature\nfunc(i interface{}) bool\n\n// new signature\nfunc(i interface{}, o interface{}) bool\n```\n\n----------------------------------------\n\nTITLE: Evaluating Boolean Conditions and Constructing Objects in C\nDESCRIPTION: This code snippet demonstrates how to evaluate boolean conditions and create objects using the Common Expression Language in C. It illustrates how to compare account balances and transaction withdrawals along with object construction syntax for geo-point data structure. The parameters include 'account' and 'transaction' representing financial records, and the output would be a boolean result for conditions and instantiated objects.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/cel.dev/expr/README.md#2025-04-17_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n// Condition\naccount.balance >= transaction.withdrawal\n    || (account.overdraftProtection\n    && account.overdraftLimit >= transaction.withdrawal  - account.balance)\n\n// Object construction\ncommon.GeoPoint{ latitude: 10.0, longitude: -5.5 }\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Services\nDESCRIPTION: Command to stop and remove Docker services including volumes.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/getting-started/docker-example.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Supporting Go 1.13 Error Unwrapping\nDESCRIPTION: Adds support for Go 1.13's error unwrapping functionality in the Kafka client library.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/IBM/sarama/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nSupport Go 1.13 error unwrapping\n```\n\n----------------------------------------\n\nTITLE: Importing Queue Package in Go\nDESCRIPTION: Instructions for importing the queue package using gopkg.in for version stability. This ensures API stability when using the package in Go projects.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/eapache/queue/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"gopkg.in/eapache/queue.v1\"\n```\n\n----------------------------------------\n\nTITLE: Version Release Header Format\nDESCRIPTION: Markdown formatting for version release headers with comparison links\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.2.2](https://github.com/googleapis/google-cloud-go/compare/auth/v0.2.1...auth/v0.2.2) (2024-04-19)\n```\n\n----------------------------------------\n\nTITLE: Generating Service Graph Metrics in Prometheus Format\nDESCRIPTION: Example of a Prometheus-formatted metric generated by the metrics-generator for service graphs. It shows the request count between a client and server service.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/metrics-generator/service-graph-view.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntraces_service_graph_request_total{client=\"app\", server=\"db\"} 20\n```\n\n----------------------------------------\n\nTITLE: Zstd Benchmark Results\nDESCRIPTION: This snippet shows benchmark results for the Zstd decoder on an AMD Ryzen 9 3950X 16-Core Processor using AMD64 assembly. The results include streaming decodes and smaller inputs. It includes metrics like ns/op, MB/s, B/op and allocs/op. These are indications of May 2022 performance, but might be outdated.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n\"BenchmarkDecoderSilesia-32    \\t                   5\\t 206878840 ns/op\\t1024.50 MB/s\\t   49808 B/op\\t      43 allocs/op\nBenchmarkDecoderEnwik9-32                          1\\t1271809000 ns/op\\t 786.28 MB/s\\t   72048 B/op\\t      52 allocs/op\n\nConcurrent blocks, performance:\n\nBenchmarkDecoder_DecodeAllParallel/kppkn.gtb.zst-32         \\t   67356\\t     17857 ns/op\\t10321.96 MB/s\\t        22.48 pct\\t     102 B/op\\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/geo.protodata.zst-32     \\t  266656\\t      4421 ns/op\\t26823.21 MB/s\\t        11.89 pct\\t      19 B/op\\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/plrabn12.txt.zst-32      \\t   20992\\t     56842 ns/op\\t8477.17 MB/s\\t        39.90 pct\\t     754 B/op\\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/lcet10.txt.zst-32        \\t   27456\\t     43932 ns/op\\t9714.01 MB/s\\t        33.27 pct\\t     524 B/op\\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/asyoulik.txt.zst-32      \\t   78432\\t     15047 ns/op\\t8319.15 MB/s\\t        40.34 pct\\t      66 B/op\\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/alice29.txt.zst-32       \\t   65800\\t     18436 ns/op\\t8249.63 MB/s\\t        37.75 pct\\t      88 B/op\\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/html_x_4.zst-32          \\t  102993\\t     11523 ns/op\\t35546.09 MB/s\\t         3.637 pct\\t     143 B/op\\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/paper-100k.pdf.zst-32    \\t 1000000\\t      1070 ns/op\\t95720.98 MB/s\\t        80.53 pct\\t       3 B/op\\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/fireworks.jpeg.zst-32    \\t  749802\\t      1752 ns/op\\t70272.35 MB/s\\t       100.0 pct\\t       5 B/op\\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/urls.10K.zst-32          \\t   22640\\t     52934 ns/op\\t13263.37 MB/s\\t        26.25 pct\\t    1014 B/op\\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/html.zst-32              \\t  226412\\t      5232 ns/op\\t19572.27 MB/s\\t        14.49 pct\\t      20 B/op\\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/comp-data.bin.zst-32     \\t  923041\\t      1276 ns/op\\t3194.71 MB/s\\t        31.26 pct\\t       0 B/op\\t       0 allocs/op\"\n```\n\n----------------------------------------\n\nTITLE: Validating URLs with IsURL Function in Go\nDESCRIPTION: Example showing how to use the IsURL function from the GoValidator library to validate if a string is a properly formatted URL.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nprintln(govalidator.IsURL(`http://user@pass:domain.com/path/page`))\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Automatic Sign-off in Commits\nDESCRIPTION: Git commands to set up aliases for automatically adding the Developer Certificate of Origin sign-off to commit messages.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/uber/jaeger-client-go/CONTRIBUTING.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit config --add alias.amend \"commit -s --amend\"\ngit config --add alias.c \"commit -s\"\n```\n\n----------------------------------------\n\nTITLE: Deprecating Configuration Fields in Tempo 2.4.0\nDESCRIPTION: This code snippet shows the deprecated configuration fields in Tempo 2.4.0. These fields have been migrated to a top-level 'cache:' field.\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  trace:\n    cache:\n    search:\n      cache_control:\n    background_cache:\n    memcached:\n    redis:\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests and Build for minio-go\nDESCRIPTION: This snippet shows the commands for running Go tests with race detection and building the project. It includes a note about setting environment variables for functional tests that require an AWS S3 account.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/minio/minio-go/v7/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test -race ./...\ngo build\n```\n\n----------------------------------------\n\nTITLE: Defining Function in Jsonnet\nDESCRIPTION: The 'fn' function is a shorthand for creating a new Jsonnet function with help documentation and argument definitions utilizing 'func.new'.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/jsonnet-libs/docsonnet/doc-util/README.md#2025-04-17_snippet_1\n\nLANGUAGE: jsonnet\nCODE:\n```\nfn(help, args)\n```\n\n----------------------------------------\n\nTITLE: Regenerating Protobuf Go Code for Error Schema\nDESCRIPTION: Command to generate Go protobuf code using protoc compiler with specific configuration for error.proto file. Requires GOOGLEAPIS environment variable and various tools.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/googleapis/gax-go/v2/apierror/internal/proto/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nprotoc -I $GOOGLEAPIS -I. --go_out=. --go_opt=module=github.com/googleapis/gax-go/v2/apierror/internal/proto error.proto\ngoimports -w .\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results for 32-bit MurmurHash3\nDESCRIPTION: Performance comparison benchmarks between this implementation and spaolacci/murmur3 for 32-bit hash calculations across different input sizes.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/twmb/murmur3/README.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n32Sizes/32-12     3.00GB/s ± 1%  2.12GB/s ±11%  -29.24%  (p=0.000 n=9+10)\n32Sizes/64-12     3.61GB/s ± 3%  2.79GB/s ± 8%  -22.62%  (p=0.000 n=10+10)\n32Sizes/128-12    3.47GB/s ± 8%  2.79GB/s ± 4%  -19.47%  (p=0.000 n=10+10)\n32Sizes/256-12    3.66GB/s ± 4%  3.25GB/s ± 6%  -11.09%  (p=0.000 n=10+10)\n32Sizes/512-12    3.78GB/s ± 3%  3.54GB/s ± 4%   -6.30%  (p=0.000 n=9+9)\n32Sizes/1024-12   3.86GB/s ± 3%  3.69GB/s ± 5%   -4.46%  (p=0.000 n=10+10)\n32Sizes/2048-12   3.85GB/s ± 3%  3.81GB/s ± 3%     ~     (p=0.079 n=10+9)\n32Sizes/4096-12   3.90GB/s ± 3%  3.82GB/s ± 2%   -2.14%  (p=0.029 n=10+10)\n32Sizes/8192-12   3.82GB/s ± 3%  3.78GB/s ± 7%     ~     (p=0.529 n=10+10)\n```\n\n----------------------------------------\n\nTITLE: Metric Export Interface Change in Go OpenTelemetry SDK\nDESCRIPTION: The metric Export interface from go.opentelemetry.io/otel/sdk/metric now accepts a *ResourceMetrics instead of ResourceMetrics.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\ntype Exporter interface {\n  Export(ctx context.Context, rm *ResourceMetrics) error\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Duration Converter Usage in OTTL\nDESCRIPTION: The Duration converter parses a string representation of a duration into a Go time.duration. It supports various time units (ns, us, ms, s, m, h) and returns an error for invalid formats.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_22\n\nLANGUAGE: ottl\nCODE:\n```\nDuration(\"3s\")\n```\n\nLANGUAGE: ottl\nCODE:\n```\nDuration(\"333ms\")\n```\n\nLANGUAGE: ottl\nCODE:\n```\nDuration(\"1000000h\")\n```\n\n----------------------------------------\n\nTITLE: Dependency Declaration Block for OpenTelemetry Components\nDESCRIPTION: Lists explicit dependencies for OpenTelemetry collector components including zipkin translators, processors and receivers. Each dependency specifies its required Go version.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/modules.txt#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n## explicit; go 1.23.0\ngithub.com/open-telemetry/opentelemetry-collector-contrib/pkg/translator/zipkin/internal/zipkin\ngithub.com/open-telemetry/opentelemetry-collector-contrib/pkg/translator/zipkin/zipkinthriftconverter\ngithub.com/open-telemetry/opentelemetry-collector-contrib/pkg/translator/zipkin/zipkinv1\ngithub.com/open-telemetry/opentelemetry-collector-contrib/pkg/translator/zipkin/zipkinv2\n```\n\n----------------------------------------\n\nTITLE: Following Logs of the E2E Test Container\nDESCRIPTION: This command streams the logs from the Tempo E2E test container. It uses `docker container ls` to find the container ID based on its name (`tempo_e2e-tempo`) and then uses `docker logs` to follow the logs of that container. The `-f` flag ensures that the logs are streamed in real-time.\nSOURCE: https://github.com/grafana/tempo/blob/main/integration/e2e/README.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n\"docker logs $(docker container ls -f name=tempo_e2e-tempo -q) -f\"\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Cloud Configuration for Credentials in Go\nDESCRIPTION: Example showing how to configure credentials for sovereign or private clouds using the azcore/cloud API, demonstrating the transition from using AuthorityHost to the new cloud configuration pattern.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// before\nopts := azidentity.ClientSecretCredentialOptions{AuthorityHost: azidentity.AzureGovernment}\ncred, err := azidentity.NewClientSecretCredential(tenantID, clientID, secret, &opts)\n\n// after\nimport \"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud\"\n\nopts := azidentity.ClientSecretCredentialOptions{}\nopts.Cloud = cloud.AzureGovernment\ncred, err := azidentity.NewClientSecretCredential(tenantID, clientID, secret, &opts)\n```\n\n----------------------------------------\n\nTITLE: Detecting Explorer Invocation in Go\nDESCRIPTION: The `StartedByExplorer` function determines if the current process was started by double-clicking the executable in Windows Explorer. It returns a boolean value indicating whether the process was invoked in this manner.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/inconshreveable/mousetrap/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc StartedByExplorer() (bool)\n```\n\n----------------------------------------\n\nTITLE: Go Package Movement Changes\nDESCRIPTION: Package relocations and renames for better organization and specification compliance, including trace, metric and test packages.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_37\n\nLANGUAGE: go\nCODE:\n```\ngo.opentelemetry.io/otel/api/trace -> go.opentelemetry.io/otel/trace\ngo.opentelemetry.io/otel/api/trace/tracetest -> go.opentelemetry.io/otel/oteltest\ngo.opentelemetry.io/otel/api/metric -> go.opentelemetry.io/otel/metric\ngo.opentelemetry.io/otel/api/global -> go.opentelemetry.io/otel\n```\n\n----------------------------------------\n\nTITLE: Pluralizing Words in Go using Humanize English Package\nDESCRIPTION: Shows how to use english.PluralWord() and english.Plural() functions from the humanize/english subpackage for simple English pluralization.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nenglish.PluralWord(1, \"object\", \"\") // object\nenglish.PluralWord(42, \"object\", \"\") // objects\nenglish.PluralWord(2, \"bus\", \"\") // buses\nenglish.PluralWord(99, \"locus\", \"loci\") // loci\n\nenglish.Plural(1, \"object\", \"\") // 1 object\nenglish.Plural(42, \"object\", \"\") // 42 objects\nenglish.Plural(2, \"bus\", \"\") // 2 buses\nenglish.Plural(99, \"locus\", \"loci\") // 99 loci\n```\n\n----------------------------------------\n\nTITLE: Installing multierr Go Package\nDESCRIPTION: Command to install the latest version of the multierr package using Go's package management system. This should be run in a terminal or command prompt.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.uber.org/multierr/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u go.uber.org/multierr@latest\n```\n\n----------------------------------------\n\nTITLE: Installing UUID Package in Go\nDESCRIPTION: The snippet provides the shell command to install the UUID package from github.com/google/uuid. This command fetches the UUID package, which is used for generating UUIDs conforming to RFC 4122 and DCE 1.1 standards.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/google/uuid/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo get github.com/google/uuid\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Copyright Notice\nDESCRIPTION: Boilerplate license notice to be included at the top of project files. It identifies the copyright owner, states the license terms, and provides a link to the full license text.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/internal/presigned-url/LICENSE.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Disabling/Enabling Colors in Go\nDESCRIPTION: Examples of programmatically controlling color output globally and locally\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvar flagNoColor = flag.Bool(\"no-color\", false, \"Disable color output\")\n\nif *flagNoColor {\n\tcolor.NoColor = true // disables colorized output\n}\n```\n\n----------------------------------------\n\nTITLE: Go SASL Authentication Update\nDESCRIPTION: Implementation of KIP-368 to allow SASL connections to periodically re-authenticate\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/IBM/sarama/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nuse receiver goroutine to process all sasl v1 responses\n```\n\n----------------------------------------\n\nTITLE: Converting Time to Unix Milliseconds in Go\nDESCRIPTION: The UnixMilli function converts a time.Time value to Unix milliseconds (elapsed since January 1, 1970 UTC). It returns an int64 value representing the milliseconds.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_68\n\nLANGUAGE: go\nCODE:\n```\nUnixMilli(Time(\"02/04/2023\", \"%m/%d/%Y\"))\n```\n\n----------------------------------------\n\nTITLE: Listing Local Storage Content\nDESCRIPTION: Lists the contents of the local storage directory storing Tempo data. Requires local storage to be set up.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/multi-tenant/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ls tempo-data/\n\n```\n\n----------------------------------------\n\nTITLE: Badge Integration for OpenTelemetry Semantic Conventions Package\nDESCRIPTION: Markdown code that displays a pkg.go.dev documentation badge linking to the OpenTelemetry semantic conventions package version 1.20.0.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/semconv/v1.20.0/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.20.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.20.0)\n```\n\n----------------------------------------\n\nTITLE: Including Shared Content in Documentation with Hugo Shortcode\nDESCRIPTION: A Hugo shortcode that imports shared content about trace structure from a separate file, making the documentation more maintainable across the Tempo project.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/introduction/trace-structure.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{< docs/shared source=\"tempo\" lookup=\"trace-structure.md\" version=\"<TEMPO_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Test Script Command with Quoted Arguments\nDESCRIPTION: Example of using quoted arguments in test commands for handling paths with spaces\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/fsnotify/fsnotify/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntouch \"/file with spaces\"\n```\n\n----------------------------------------\n\nTITLE: Installing Gzip Middleware Package\nDESCRIPTION: Command to install the compress package using go get\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/gzhttp/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/klauspost/compress\n```\n\n----------------------------------------\n\nTITLE: Correcting Typo in Internal Presigning Middleware API\nDESCRIPTION: A bug fix that corrects a typo in the internal AddAsIsPresigningMiddleware API.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/internal/presigned-url/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* **Bug Fix**: Correct a typo in internal AddAsIsPresigningMiddleware API.\n```\n\n----------------------------------------\n\nTITLE: Installing Gonum LAPACK Packages\nDESCRIPTION: Command to install the Gonum LAPACK packages and their dependencies using Go's package management system.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/gonum.org/v1/gonum/lapack/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get gonum.org/v1/gonum/lapack/...\n```\n\n----------------------------------------\n\nTITLE: Activating Default Field Validation in Go\nDESCRIPTION: Code snippet demonstrating how to activate the behavior to require all fields have a validation tag by default. This is typically done in a package init function or the main() function.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n\nfunc init() {\n  govalidator.SetFieldsRequiredByDefault(true)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining INI File Structure in Go\nDESCRIPTION: Defines the root structure for an INI file parser, including properties and sections.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/participle/v2/TUTORIAL.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype INI struct {\n  Properties []*Property `@@*`\n  Sections   []*Section  `@@*`\n}\n\ntype Section struct {\n  Identifier string      `\"[\" @Ident \"]\"`\n  Properties []*Property `@@*`\n}\n\ntype Property struct {\n  Key   string `@Ident \"=\"`\n  Value Value `@@`\n}\n\ntype Value interface{ value() }\n\ntype String struct {\n\tString string `@String`\n}\n\nfunc (String) value() {}\n\ntype Number struct {\n\tNumber float64 `@Float | @Int`\n}\n\nfunc (Number) value() {}\n```\n\n----------------------------------------\n\nTITLE: Afero Utility Function Usage in Go\nDESCRIPTION: This snippet demonstrates how to use Afero's utility functions directly with a filesystem parameter.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfs := new(afero.MemMapFs)\nf, err := afero.TempFile(fs,\"\", \"ioutil-test\")\n```\n\n----------------------------------------\n\nTITLE: Installing the Compress Package with Go Get\nDESCRIPTION: Command to add the compression package to a Go project using go get. The package supports the current Go version and 2 versions back.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/klauspost/compress@latest\n```\n\n----------------------------------------\n\nTITLE: Defining Package in Jsonnet\nDESCRIPTION: The 'pkg' function is a shorthand for creating a new package definition using 'package.new', allowing specification of name, url, help text, filename, and version.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/jsonnet-libs/docsonnet/doc-util/README.md#2025-04-17_snippet_3\n\nLANGUAGE: jsonnet\nCODE:\n```\npkg(name, url, help, filename=\"\", version=\"master\")\n```\n\n----------------------------------------\n\nTITLE: BSD-3-Clause License Text for golang.org/x/crypto\nDESCRIPTION: This snippet presents the BSD-3-Clause license text associated with the golang.org/x/crypto dependency.  It details conditions for redistribution and use, emphasizing the retention of copyright notices and disclaimers. The license also prevents the use of Google Inc.'s name or its contributors' names for endorsement without permission.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/elastic/go-grok/NOTICE.txt#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n\"Copyright (c) 2009 The Go Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n   * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\"\n```\n\n----------------------------------------\n\nTITLE: Running File Uploader Example\nDESCRIPTION: Commands to initialize and run the FileUploader example program.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/minio/minio-go/v7/README.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngo mod init example/FileUploader\ngo get github.com/minio/minio-go/v7\ngo get github.com/minio/minio-go/v7/pkg/credentials\ngo run FileUploader.go\n```\n\n----------------------------------------\n\nTITLE: Counting Elements with XPath in Go\nDESCRIPTION: Example showing how to count elements using the count() function in XPath.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/antchfx/xmlquery/README.md#2025-04-17_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nexpr, err := xpath.Compile(\"count(//book)\")\ncount := expr.Evaluate(xmlquery.CreateXPathNavigator(doc)).(float64)\n```\n\n----------------------------------------\n\nTITLE: Legacy Tempo Overrides Configuration\nDESCRIPTION: Example of the old configuration format for Tempo overrides module showing settings for ingestion rates, search duration and processors.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-3.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  ingestion_rate_strategy: local\n  ingestion_rate_limit_bytes: 12345\n  ingestion_burst_size_bytes: 67890\n  max_search_duration: 17s\n  forwarders: ['foo']\n  metrics_generator_processors: [service-graphs, span-metrics]\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Claims Structure in Go\nDESCRIPTION: This snippet outlines a custom claims structure that includes additional application-specific validation. It illustrates how to embed registered claims and implement validation logic within the custom claims.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// MyCustomClaims includes all registered claims, plus Foo.\ntype MyCustomClaims struct {\n\tFoo string `json:\"foo\"`\n\tjwt.RegisteredClaims\n}\n\n// Validate can be used to execute additional application-specific claims\n// validation.\nfunc (m MyCustomClaims) Validate() error {\n\tif m.Foo != \"bar\" {\n\t\treturn errors.New(\"must be foobar\")\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: New Spanmetrics Metric Names\nDESCRIPTION: Updated metric naming convention to match OpenTelemetry standards, including renaming of span_status label to status_code.\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_20\n\nLANGUAGE: text\nCODE:\n```\ntraces_spanmetrics_latency_{sum,count,bucket}\n```\n\n----------------------------------------\n\nTITLE: JSON Type Conversion Matrix in Markdown\nDESCRIPTION: A comprehensive markdown table showing conversion rules between JSON types and destination types. Includes detailed examples and edge cases for numeric, string, boolean, object, and array conversions.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/json-iterator/go/fuzzy_mode_convert_table.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| json type \\ dest type | bool | int | uint | float |string|\n| --- | --- | --- | --- |--|--|\n| number | positive => true <br/> negative => true <br/> zero => false| 23.2 => 23 <br/> -32.1 => -32| 12.1 => 12 <br/> -12.1 => 0|as normal|same as origin|\n| string | empty string => false <br/> string \"0\" => false <br/> other strings => true | \"123.32\" => 123 <br/> \"-123.4\" => -123 <br/> \"123.23xxxw\" => 123 <br/>  \"abcde12\" => 0 <br/> \"-32.1\" => -32| 13.2 => 13 <br/> -1.1 => 0 |12.1 => 12.1 <br/> -12.3 => -12.3<br/> 12.4xxa => 12.4 <br/> +1.1e2 =>110 |same as origin|\n| bool | true => true <br/> false => false| true => 1 <br/> false => 0 | true => 1 <br/> false => 0 |true => 1 <br/>false => 0|true => \"true\" <br/> false => \"false\"|\n| object | true | 0 | 0 |0|originnal json|\n| array | empty array => false <br/> nonempty array => true| [] => 0 <br/> [1,2] => 1 | [] => 0 <br/> [1,2] => 1 |[] => 0<br/>[1,2] => 1|original json|\n```\n\n----------------------------------------\n\nTITLE: Filter Processor Telemetry Metrics Table - Datapoints\nDESCRIPTION: Metric specification table for otelcol_processor_filter_datapoints.filtered showing unit, metric type, value type and monotonic properties\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/processor/filterprocessor/documentation.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Unit | Metric Type | Value Type | Monotonic |\n| ---- | ----------- | ---------- | --------- |\n| 1 | Sum | Int | true |\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Elements with Viper (Go)\nDESCRIPTION: This Go snippet demonstrates how to use Viper to access a specific element in an array within the configuration. It shows retrieving the second element of the 'ports' array.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_31\n\nLANGUAGE: go\nCODE:\n```\nGetInt(\"host.ports.1\") // returns 6029\n```\n\n----------------------------------------\n\nTITLE: Metrics Generator WAL Storage Configuration\nDESCRIPTION: Configuration for specifying storage requests and limits for the metrics generator WAL in jsonnet.\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n_config+:: {\n  metrics_generator+: {\n  ephemeral_storage_request_size: '10Gi',\n  ephemeral_storage_limit_size: '11Gi',\n  },\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Headless Index\nDESCRIPTION: YAML front matter configuration that sets up a headless index page without requiring a description. This is commonly used in static site generators for creating shared indexes.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/shared/index.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndescription: No description necessary for a shared file index. \nheadless: true\n---\n```\n\n----------------------------------------\n\nTITLE: Git Tagging and Release Commands\nDESCRIPTION: Commands used by OWNERS to create and push a signed version tag for a new release.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/k8s.io/klog/v2/RELEASE.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -s $VERSION\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push $VERSION\n```\n\n----------------------------------------\n\nTITLE: Markdown Badge Integration for OpenTelemetry Log Package\nDESCRIPTION: Markdown code that displays a PkgGoDev badge linking to the OpenTelemetry logging package documentation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/log/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/log)](https://pkg.go.dev/go.opentelemetry.io/otel/log)\n```\n\n----------------------------------------\n\nTITLE: Installing GopherLua in Go\nDESCRIPTION: Instructions for installing GopherLua using Go's package management system.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/yuin/gopher-lua\n```\n\n----------------------------------------\n\nTITLE: Installing ULID Package with Go\nDESCRIPTION: Command to install the ULID package using Go's package manager.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/oklog/ulid/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/oklog/ulid\n```\n\n----------------------------------------\n\nTITLE: Updating Versions and Creating Branch in Grafana Tempo - Shell\nDESCRIPTION: This shell command initializes the release process by updating version numbers in the go.mod files and creating a new branch in GitHub. It requires the specified TAG environment variable to denote the version being released.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-redis/redis/v8/RELEASING.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nTAG=v1.0.0 ./scripts/release.sh\n```\n\n----------------------------------------\n\nTITLE: Result URL Path from Building Named Routes\nDESCRIPTION: Shows the resulting URL path generated from the previous URL building example. This path matches the pattern defined in the named route with the provided variable values.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n\"/articles/technology/42\"\n```\n\n----------------------------------------\n\nTITLE: Setting Predefined Table Style in Go\nDESCRIPTION: Shows how to use predefined styles for table rendering using StyleLight from the go-pretty/table package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n    t.SetStyle(table.StyleLight)\n    t.Render()\n```\n\n----------------------------------------\n\nTITLE: TraceQL Multi-spanset Query Example\nDESCRIPTION: Example of a TraceQL query that compares multiple spansets, which may have limitations when used in cross-tenant scenarios. This query pattern may not correctly return all traces if the conditions are satisfied in separate tenants.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/manage-advanced-systems/cross_tenant_query.md#2025-04-17_snippet_1\n\nLANGUAGE: traceql\nCODE:\n```\n{ span.attr1 = \"bar\" } && { span.attr2 = \"foo\" }\n```\n\n----------------------------------------\n\nTITLE: Importing a Docker Image to K3D Cluster\nDESCRIPTION: Imports the latest Grafana Tempo Docker image into a specified K3D cluster. This step is required if using a local Docker image for deployment.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nk3d image import grafana/tempo:latest --cluster tempo\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Baggage Package in Markdown\nDESCRIPTION: This snippet shows how to embed a PkgGoDev badge in a markdown file, linking to the documentation for the OpenTelemetry baggage package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/baggage/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/baggage)](https://pkg.go.dev/go.opentelemetry.io/otel/baggage)\n```\n\n----------------------------------------\n\nTITLE: Validators with Parameters in Go\nDESCRIPTION: Listing of validators that accept parameters in the govalidator library, showing the mapping between validator tags and their corresponding validation functions.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n\"range(min|max)\": Range,\n\"length(min|max)\": ByteLength,\n\"runelength(min|max)\": RuneLength,\n\"stringlength(min|max)\": StringLength,\n\"matches(pattern)\": StringMatches,\n\"in(string1|string2|...|stringN)\": IsIn,\n\"rsapub(keylength)\" : IsRsaPub,\n\"minstringlength(int): MinStringLength,\n\"maxstringlength(int): MaxStringLength,\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Order in OpenTelemetry Collector YAML\nDESCRIPTION: This YAML snippet demonstrates how to specify the order of extensions in the OpenTelemetry Collector configuration. The order is important as it determines the startup and shutdown sequence of the extensions.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/extension/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  # Extensions specified below are going to be loaded by the service in the\n  # order given below, and shutdown on reverse order.\n  extensions: [extension1, extension2]\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Trace Structure Documentation\nDESCRIPTION: YAML frontmatter that defines metadata for the trace structure documentation page, including description, keywords, title and weight for page ordering.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/introduction/trace-structure.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndescription: Learn about the structure and parts of a span.\nkeywords:\n  - structure\n  - spans\n  - tracing\ntitle: Trace structure\nweight: 200\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Overrides in Tempo YAML\nDESCRIPTION: This snippet shows how to set up runtime overrides for Tempo, including per-tenant and wildcard configurations.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n# /conf/tempo.yaml\noverrides:\n   per_tenant_override_config: /conf/overrides.yaml\n\n---\n# /conf/overrides.yaml\noverrides:\n\n  \"<tenant-id>\":\n      ingestion:\n        [burst_size_bytes: <int>]\n        [rate_limit_bytes: <int>]\n        [max_traces_per_user: <int>]\n      global:\n        [max_bytes_per_trace: <int>]\n\n  \"*\":\n    ingestion:\n      [burst_size_bytes: <int>]\n      [rate_limit_bytes: <int>]\n      [max_traces_per_user: <int>]\n    global:\n      [max_bytes_per_trace: <int>]\n```\n\n----------------------------------------\n\nTITLE: Install Strcase Package via Go Command Line\nDESCRIPTION: To install the strcase package, use the provided Go command. This command fetches the latest version of strcase from GitHub, making its functions available for use in Go projects.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/iancoleman/strcase/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ngo get -u github.com/iancoleman/strcase\n```\n\n----------------------------------------\n\nTITLE: Go Version Compatibility Statement\nDESCRIPTION: Code comment showing Go version compatibility requirements mentioned in the changelog.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n// Minimum supported Go version: go1.18\n// Removes support for go1.17\n```\n\n----------------------------------------\n\nTITLE: Displaying Go Package Documentation Badge\nDESCRIPTION: Markdown code that displays a PkgGoDev badge linking to the OpenTelemetry Metric SDK package documentation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/sdk/metric/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/metric)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/metric)\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Services\nDESCRIPTION: Command to start the Docker Compose services in detached mode.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/getting-started/docker-example.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Verifying Azure Developer CLI Token Access\nDESCRIPTION: A command to verify the Azure Developer CLI can obtain access tokens for the logged-in account. This checks if AzureDeveloperCLICredential can successfully authenticate with the current configuration.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nazd auth token --output json --scope https://management.core.windows.net/.default\n```\n\n----------------------------------------\n\nTITLE: Adding Numeric Data to a Bloom Filter in Go\nDESCRIPTION: This snippet demonstrates how to add numeric data (a uint32) to a Bloom filter by first converting it to a byte array using the binary.BigEndian package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/willf/bloom/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ni := uint32(100)\nn1 := make([]byte, 4)\nbinary.BigEndian.PutUint32(n1, i)\nfilter.Add(n1)\n```\n\n----------------------------------------\n\nTITLE: Go Instrumentation Scope Path\nDESCRIPTION: Example of OpenTelemetry Go instrumentation scope package path.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo.opentelemetry.io/otel/sdk/instrumentation\n```\n\n----------------------------------------\n\nTITLE: Listing Running Docker Containers\nDESCRIPTION: This command lists the running Docker containers, providing information such as their names, commands, states, and ports. It allows you to verify that all the required containers for the Tempo deployment are up and running.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/scalable-single-binary/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndocker compose ps\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Kubernetes API Validation (v0.22.6)\nDESCRIPTION: This code snippet shows the benchmark results for validating the Kubernetes Swagger API using the go-openapi/validate package at version v0.22.6. The metrics include time per operation, bytes per operation, and allocations per operation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-openapi/validate/BENCHMARK.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/validate\ncpu: AMD Ryzen 7 5800X 8-Core Processor\nBenchmark_KubernetesSpec/validating_kubernetes_API-16         \t       1\t8549863982 ns/op\t7067424936 B/op\t59583275 allocs/op\n```\n```\n\n----------------------------------------\n\nTITLE: Go Package Path Example\nDESCRIPTION: Example of OpenTelemetry Go package path structure for trace exporters.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\n```\n\n----------------------------------------\n\nTITLE: Decoder Buffer Iteration (Slow)\nDESCRIPTION: This code snippet demonstrates a naive approach to iterating through a buffer during decoding. The constant comparison of `cursor` and `buflen` at each iteration is slow.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nbuflen := len(buf)\nfor ; cursor < buflen; cursor++ { // compare cursor and buflen at all times, it is so slow.\n    switch buf[cursor] {\n    case ' ', '\\n', '\\r', '\\t':\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Jaeger Client from Source\nDESCRIPTION: Commands to install the Jaeger client library from source using Git and make.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/uber/jaeger-client-go/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/uber/jaeger-client-go/\ncd $GOPATH/src/github.com/uber/jaeger-client-go/\ngit submodule update --init --recursive\nmake install\n```\n\n----------------------------------------\n\nTITLE: Verifying Azure Developer CLI Configuration\nDESCRIPTION: A command to list the current configuration of the Azure Developer CLI, including which account is logged in. This helps troubleshoot AzureDeveloperCLICredential authentication issues.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nazd config list\n```\n\n----------------------------------------\n\nTITLE: Pattern Alternatives and Complex Glob Matching\nDESCRIPTION: Demonstrates creating glob patterns with complex alternatives and multiple matching conditions using character ranges and pattern lists\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/gobwas/glob/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    // create glob with pattern-alternatives list\n    g := glob.MustCompile(\"{cat,bat,[fr]at}\")\n    g.Match(\"cat\")  // true\n    g.Match(\"bat\")  // true\n    g.Match(\"fat\")  // true\n    g.Match(\"rat\")  // true\n    g.Match(\"at\")   // false\n    g.Match(\"zat\") // false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Overrides in Tempo (Old Format)\nDESCRIPTION: Example of the deprecated overrides configuration format in Grafana Tempo that was used before v2.3.0, showing top-level configuration of ingestion rate settings, search duration, forwarders and metrics generator processors.\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  ingestion_rate_strategy: local\n  ingestion_rate_limit_bytes: 12345\n  ingestion_burst_size_bytes: 67890\n  max_search_duration: 17s\n  forwarders: ['foo']\n  metrics_generator_processors: [service-graphs, span-metrics]\n```\n\n----------------------------------------\n\nTITLE: Updated Environment Variable References\nDESCRIPTION: Shows the migration from legacy Jaeger environment variables to new OpenTelemetry-compliant environment variables.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_31\n\nLANGUAGE: plaintext\nCODE:\n```\nJAEGER_ENDPOINT -> OTEL_EXPORTER_JAEGER_ENDPOINT\nJAEGER_USER -> OTEL_EXPORTER_JAEGER_USER\nJAEGER_PASSWORD -> OTEL_EXPORTER_JAEGER_PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Configuring k6-tracing Environment for Local Tempo\nDESCRIPTION: Modified environment configuration for the k6-tracing service to point to a local Tempo instance using the machine's IP address.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/linux.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  - ENDPOINT=10.128.0.104:4317\n```\n\n----------------------------------------\n\nTITLE: Custom Locale Interface Implementation\nDESCRIPTION: Defines the interface requirements for implementing custom locales with translations for day names, month names, and day periods.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/elastic/lunes/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Language represents a BCP 47 tag, specifying this locale language.\nLanguage() string\n\n// LongDayNames returns the long day names translations for the week days.\n// It must be sorted, starting from Sunday to Saturday, and contains all 7 elements,\n// even if one or more days are empty. If this locale does not support this format,\n// it should return an empty slice.\nLongDayNames() []string\n\n// ShortDayNames returns the short day names translations for the week days.\n// It must be sorted, starting from Sunday to Saturday, and contains all 7 elements,\n// even if one or more days are empty. If this locale does not support this format,\n// it should return an empty slice.\nShortDayNames() []string\n\n// LongMonthNames returns the long day names translations for the months names.\n// It must be sorted, starting from January to December, and contains all 12 elements,\n// even if one or more months are empty. If this locale does not support this format,\n// it should return an empty slice.\nLongMonthNames() []string\n\n// ShortMonthNames returns the short day names translations for the months names.\n// It must be sorted, starting from January to December, and contains all 12 elements,\n// even if one or more months are empty. If this locale does not support this format,\n// it should return an empty slice.\nShortMonthNames() []string\n\n// DayPeriods returns the periods of day translations for the AM and PM abbreviations.\n// It must be sorted, starting from AM to PM, and contains both elements, even if one\n// of them is empty. If this locale does not support this format, it should return an\n// empty slice.\nDayPeriods() []string\n```\n\n----------------------------------------\n\nTITLE: Deprecated Storage Cache Configuration in Tempo\nDESCRIPTION: Old configuration block for storage trace cache that has been removed in favor of a new cache configuration approach\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-4.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  trace:\n    cache:\n    search:\n      cache_control:\n    background_cache:\n    memcached:\n    redis:\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Go Codes Package in Markdown\nDESCRIPTION: This snippet shows how to include a PkgGoDev badge in a Markdown file, linking to the documentation for the OpenTelemetry Go codes package. The badge provides a visual indicator of the package's documentation status and a clickable link to view the full documentation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/codes/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/codes)](https://pkg.go.dev/go.opentelemetry.io/otel/codes)\n```\n\n----------------------------------------\n\nTITLE: Tailing Logs of a Docker Container\nDESCRIPTION: This snippet demonstrates how to view live logs from the Grafana Tempo container using the docker logs command. It's useful for monitoring the service in real-time or debugging.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/vulture/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs vulture_tempo_1 -f\n```\n\n----------------------------------------\n\nTITLE: Installing copystructure Library with Go Get\nDESCRIPTION: Command to install the copystructure library using Go's package manager. This allows developers to add the deep copy functionality to their Go projects.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/mitchellh/copystructure/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/mitchellh/copystructure\n```\n\n----------------------------------------\n\nTITLE: Running Go Benchmarks\nDESCRIPTION: Command to execute Go benchmarks multiple times for consistent performance measurement\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pelletier/go-toml/v2/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo test \\.\\.\\ -bench=\\. -count=10\n```\n\n----------------------------------------\n\nTITLE: Exporting CreateRequest and HandleResponse Methods\nDESCRIPTION: YAML directive to export various createRequest and HandleResponse methods in container and pageblob client Go files.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: zz_container_client.go\n  where: $\n  transform: >\n    return $.\n      replace(/listBlobHierarchySegmentCreateRequest/g, function(_, s) { return `ListBlobHierarchySegmentCreateRequest` }).\n      replace(/listBlobHierarchySegmentHandleResponse/g, function(_, s) { return `ListBlobHierarchySegmentHandleResponse` });\n\n- from: zz_pageblob_client.go\n  where: $\n  transform: >\n    return $.\n      replace(/getPageRanges(Diff)?CreateRequest/g, function(_, s) { if (s === undefined) { s = '' }; return `GetPageRanges${s}CreateRequest` }).\n      replace(/getPageRanges(Diff)?HandleResponse/g, function(_, s) { if (s === undefined) { s = '' }; return `GetPageRanges${s}HandleResponse` });\n```\n\n----------------------------------------\n\nTITLE: Firefox UserAgent Parsing Example in YAML\nDESCRIPTION: Example of the structure returned by the UserAgent function when parsing a Firefox user-agent string. It includes the browser name, version, and original string.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_73\n\nLANGUAGE: yaml\nCODE:\n```\n\"user_agent.name\": \"Firefox\"\n\"user_agent.version\": \"126.0\"\n\"user_agent.original\": \"Mozilla/5.0 (X11; Linux x86_64; rv:126.0) Gecko/20100101 Firefox/126.0\"\n```\n\n----------------------------------------\n\nTITLE: Restarting Tempo Service\nDESCRIPTION: Command to restart the Tempo service using systemctl after configuration changes.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/linux.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl start tempo.service\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Go Environment Support Matrix\nDESCRIPTION: Table showing supported environments for OpenTelemetry Go implementation across different operating systems, Go versions, and architectures.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| OS       | Go Version | Architecture |\n|----------|------------|------------|\n| Ubuntu   | 1.24       | amd64        |\n| Ubuntu   | 1.23       | amd64        |\n| Ubuntu   | 1.22       | amd64        |\n| Ubuntu   | 1.24       | 386          |\n| Ubuntu   | 1.23       | 386          |\n| Ubuntu   | 1.22       | 386          |\n| Ubuntu   | 1.24       | arm64        |\n| Ubuntu   | 1.23       | arm64        |\n| Ubuntu   | 1.22       | arm64        |\n| macOS 13 | 1.24       | amd64        |\n| macOS 13 | 1.23       | amd64        |\n| macOS 13 | 1.22       | amd64        |\n| macOS    | 1.24       | arm64        |\n| macOS    | 1.23       | arm64        |\n| macOS    | 1.22       | arm64        |\n| Windows  | 1.24       | amd64        |\n| Windows  | 1.23       | amd64        |\n| Windows  | 1.22       | amd64        |\n| Windows  | 1.24       | 386          |\n| Windows  | 1.23       | 386          |\n| Windows  | 1.22       | 386          |\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Semantic Conventions in Markdown\nDESCRIPTION: This code snippet shows how to include a PkgGoDev badge in a Markdown file. The badge links to the documentation for the OpenTelemetry Semantic Conventions package version 1.25.0 on pkg.go.dev.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/semconv/v1.25.0/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.25.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.25.0)\n```\n\n----------------------------------------\n\nTITLE: Installing kube-state-metrics library with jsonnet-bundler\nDESCRIPTION: This snippet shows how to install the kube-state-metrics library using jsonnet-bundler (jb). It pulls the library from the specified GitHub repository. This is a prerequisite before using the library in a Jsonnet project.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/grafana/jsonnet-libs/kube-state-metrics/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n\"jb install github.com/grafana/jsonnet-libs/kube-state-metrics\"\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Tempo Documentation\nDESCRIPTION: YAML configuration block defining documentation metadata, including title, menu settings, description, weight, and URL pattern aliases for different documentation sections.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/getting-started/_index.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Get started\nmenuTitle: Get started\ndescription: Learn about Tempo architecture, concepts, and first steps.\nweight: 200\naliases:\n- /docs/tempo/getting-started\nrefs:\n  examples:\n    - pattern: /docs/tempo/\n      destination: https://grafana.com/docs/tempo/<TEMPO_VERSION>/getting-started/example-demo-app/\n    - pattern: /docs/enterprise-traces/\n      destination: https://grafana.com/docs/enterprise-traces/<ENTERPRISE_TRACES_VERSION>/setup/\n  setup:\n    - pattern: /docs/tempo/\n      destination: https://grafana.com/docs/tempo/<TEMPO_VERSION>/setup/\n    - pattern: /docs/enterprise-traces/\n      destination: https://grafana.com/docs/enterprise-traces/<ENTERPRISE_TRACES_VERSION>/setup/\n  deploy:\n    - pattern: /docs/tempo/\n      destination: https://grafana.com/docs/tempo/<TEMPO_VERSION>/setup/deployment/\n    - pattern: /docs/enterprise-traces/\n      destination: https://grafana.com/docs/enterprise-traces/<ENTERPRISE_TRACES_VERSION>/setup/hardware-requirements/\n  configure-alloy:\n    - pattern: /docs/tempo/\n      destination: https://grafana.com/docs/tempo/<TEMPO_VERSION>/configuration/grafana-alloy/\n    - pattern: /docs/enterprise-traces/\n      destination: https://grafana.com/docs/enterprise-traces/<ENTERPRISE_TRACES_VERSION>/setup/set-up-get-tenants/\n```\n\n----------------------------------------\n\nTITLE: Specifying Go Version Requirement for OpenTelemetry Collector\nDESCRIPTION: Declares the required Go version (1.23.0) for the OpenTelemetry Collector project and its components.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/modules.txt#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n## explicit; go 1.23.0\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Log Noop Package in Markdown\nDESCRIPTION: This snippet shows how to embed a PkgGoDev badge in a Markdown file, linking to the documentation for the OpenTelemetry log/noop package. The badge provides a visual indicator of the package's documentation status and a quick link to its Go documentation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/log/noop/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/log/noop)](https://pkg.go.dev/go.opentelemetry.io/otel/log/noop)\n```\n\n----------------------------------------\n\nTITLE: Installing Cobra-CLI Generator\nDESCRIPTION: Command to install the Cobra-CLI tool, which generates scaffolding for Cobra-based applications.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/cobra/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/spf13/cobra-cli@latest\n```\n\n----------------------------------------\n\nTITLE: Creating a colored ASCII table in Go\nDESCRIPTION: Example demonstrating how to add colors to different parts of a table (headers, columns, and footer) using the color functionality of tablewriter.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ndata := [][]string{\n\t[]string{\"1/1/2014\", \"Domain name\", \"2233\", \"$10.98\"},\n\t[]string{\"1/1/2014\", \"January Hosting\", \"2233\", \"$54.95\"},\n\t[]string{\"1/4/2014\", \"February Hosting\", \"2233\", \"$51.00\"},\n\t[]string{\"1/4/2014\", \"February Extra Bandwidth\", \"2233\", \"$30.00\"},\n}\n\ntable := tablewriter.NewWriter(os.Stdout)\ntable.SetHeader([]string{\"Date\", \"Description\", \"CV2\", \"Amount\"})\ntable.SetFooter([]string{\"\", \"\", \"Total\", \"$146.93\"}) // Add Footer\ntable.SetBorder(false)                                // Set Border to false\n\ntable.SetHeaderColor(tablewriter.Colors{tablewriter.Bold, tablewriter.BgGreenColor},\n\ttablewriter.Colors{tablewriter.FgHiRedColor, tablewriter.Bold, tablewriter.BgBlackColor},\n\ttablewriter.Colors{tablewriter.BgRedColor, tablewriter.FgWhiteColor},\n\ttablewriter.Colors{tablewriter.BgCyanColor, tablewriter.FgWhiteColor})\n\ntable.SetColumnColor(tablewriter.Colors{tablewriter.Bold, tablewriter.FgHiBlackColor},\n\ttablewriter.Colors{tablewriter.Bold, tablewriter.FgHiRedColor},\n\ttablewriter.Colors{tablewriter.Bold, tablewriter.FgHiBlackColor},\n\ttablewriter.Colors{tablewriter.Bold, tablewriter.FgBlackColor})\n\ntable.SetFooterColor(tablewriter.Colors{}, tablewriter.Colors{},\n\ttablewriter.Colors{tablewriter.Bold},\n\ttablewriter.Colors{tablewriter.FgHiRedColor})\n\ntable.AppendBulk(data)\ntable.Render()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Tempo Architecture with Metrics-generator\nDESCRIPTION: ASCII diagram showing the ingress path for Tempo with the new metrics-generator component. It illustrates how data flows from the distributor to both the ingester and metrics-generator, and how metrics are sent to Prometheus via remote write.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2022-01 Metrics-generator.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n                                                                      │\n                                                                      │\n                                                                   Ingress\n                                                                      │\n                                                                      ▼\n                                                          ┌──────────────────────┐\n                                                          │                      │\n                                                          │     Distributor      │\n                                                          │                      │\n                                                          └──────────────────────┘\n                                                                    2│ │1\n                                                                     │ │\n                                                  ┌──────────────────┘ └────────┐\n                                                  │                             │\n                                                  ▼                             ▼\n┌ ─ ─ ─ ─ ─ ─ ─ ─                     ┏━━━━━━━━━━━━━━━━━━━━━━┓      ┌──────────────────────┐\n                 │                    ┃                      ┃      │                      │\n│   Prometheus    ◀────Prometheus ────┃  Metrics-generator   ┃      │       Ingester       │◀───Queries────\n                 │    Remote Write    ┃                      ┃      │                      │\n└ ─ ─ ─ ─ ─ ─ ─ ─                     ┗━━━━━━━━━━━━━━━━━━━━━━┛      └──────────────────────┘\n                                                                                │\n                                                                                │\n                                                                                │\n                                                                                ▼\n                                                                       ┌─────────────────┐\n                                                                       │                 │\n                                                                       │     Backend     │\n                                                                       │                 │\n                                                                       └─────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Jaeger Environment Variables\nDESCRIPTION: New environment variables added for configuring Jaeger agent hostname and port settings\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\nOTEL_EXPORTER_JAEGER_AGENT_HOST\nOTEL_EXPORTER_JAEGER_AGENT_PORT\n```\n\n----------------------------------------\n\nTITLE: BSD-3-Clause License Text for golang.org/x/mod\nDESCRIPTION: This snippet showcases the BSD-3-Clause license text applicable to the golang.org/x/mod dependency.  It requires the retention of copyright notices and disclaimers in both source and binary redistributions. The license also restricts the use of Google Inc.'s name or its contributors' names for endorsing products without explicit prior authorization.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/elastic/go-grok/NOTICE.txt#2025-04-17_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n\"Copyright (c) 2009 The Go Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n   * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\"\n```\n\n----------------------------------------\n\nTITLE: Tagging and Signing Release Commits in Git\nDESCRIPTION: Instructions for tagging and signing a release commit. This requires access to MinIO's trusted private key and setting up the GNUPGHOME environment variable.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/minio/minio-go/v7/MAINTAINERS.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ export GNUPGHOME=/media/${USER}/minio/trusted\n$ git tag -s 4.0.0\n$ git push\n$ git push --tags\n```\n\n----------------------------------------\n\nTITLE: Pushing Release Tags to OpenTelemetry Go Repository\nDESCRIPTION: These commands push the newly created tags to the upstream repository for both the main module and submodules, finalizing the release process.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngit push upstream <new tag>\ngit push upstream <submodules-path/new tag>\n...\n```\n\n----------------------------------------\n\nTITLE: JSON Example for mapstructure Utilization\nDESCRIPTION: This JSON example demonstrates a configuration that requires dynamic decoding based on a 'type' field. It serves to illustrate the point of using mapstructure when dealing with variable structures.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-viper/mapstructure/v2/README.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"person\",\n  \"name\": \"Mitchell\"\n}\n```\n\n----------------------------------------\n\nTITLE: TraceQL Rate Query with Value Filtering\nDESCRIPTION: A TraceQL metrics query that shows how to filter out time series with values below a threshold, finding only services with more than 1000 requests per second.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2023-11 TraceQL Metrics.md#2025-04-17_snippet_6\n\nLANGUAGE: traceql\nCODE:\n```\n{ } | rate() by (resource.service.name) > 1000\n```\n\n----------------------------------------\n\nTITLE: Randomizing Seed Broker Selection in Go\nDESCRIPTION: Adds a method to randomize the selection of seed brokers in the Kafka client.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/IBM/sarama/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nAdd randomize seed broker method\n```\n\n----------------------------------------\n\nTITLE: BSD-3-Clause License Text for golang.org/x/net\nDESCRIPTION: This snippet illustrates the BSD-3-Clause license text for the golang.org/x/net dependency. It outlines the terms for redistributing and using the software, including the necessity of maintaining copyright notices and disclaimers. The license also prohibits using the names of Google Inc. or its contributors for promotional purposes without prior consent.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/elastic/go-grok/NOTICE.txt#2025-04-17_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n\"Copyright (c) 2009 The Go Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n   * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\"\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Semantic Conventions v1.18.0\nDESCRIPTION: This code snippet displays a badge linking to the Go package documentation for OpenTelemetry Semantic Conventions version 1.18.0. It uses Markdown syntax to create a clickable image that directs users to the package documentation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/semconv/v1.18.0/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.18.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.18.0)\n```\n\n----------------------------------------\n\nTITLE: Build Information Endpoint\nDESCRIPTION: Endpoint for retrieving build-related information in JSON format.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/_index.md#2025-04-17_snippet_21\n\nLANGUAGE: http\nCODE:\n```\nGET /api/status/buildinfo\n```\n\n----------------------------------------\n\nTITLE: Go Package Import Changes\nDESCRIPTION: Demonstrates the migration from gogo/protobuf to google.golang.org/protobuf and adoption of official OpenTelemetry proto package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_32\n\nLANGUAGE: go\nCODE:\n```\ngithub.com/gogo/protobuf -> google.golang.org/protobuf\ngo.opentelemetry.io/proto/otlp\n```\n\n----------------------------------------\n\nTITLE: BSD-3-Clause License Text for golang.org/x/sync\nDESCRIPTION: This snippet presents the BSD-3-Clause license text associated with the golang.org/x/sync dependency. This license requires that any redistribution, whether in source or binary form, includes the copyright notice, the list of conditions, and the disclaimer. Furthermore, it prohibits the use of Google's name or the names of its contributors to endorse or promote products derived from this software without explicit prior written permission.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/elastic/go-grok/NOTICE.txt#2025-04-17_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\n\"Copyright (c) 2009 The Go Authors. All rights reserved.\"\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Processors in YAML Configuration B for Grafana Tempo\nDESCRIPTION: This configuration example (B) shows an empty 'processors' entry, which will be interpreted as null and override previous processor configurations.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/confmap/README.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n```\n\n----------------------------------------\n\nTITLE: Adding Your Fork as Remote Origin\nDESCRIPTION: Commands to navigate to the OpenCensus Go directory in your GOPATH and add your GitHub fork as a remote repository. This allows you to push changes to your fork.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd $(go env GOPATH)/src/go.opencensus.io\ngit remote add fork git@github.com:YOUR_GITHUB_USERNAME/opencensus-go.git\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry SDK Instrumentation in Markdown\nDESCRIPTION: This snippet shows how to include a PkgGoDev badge in a Markdown file, linking to the documentation for the OpenTelemetry Go SDK instrumentation package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/sdk/instrumentation/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/instrumentation)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/instrumentation)\n```\n\n----------------------------------------\n\nTITLE: Removing Query Frontend Configuration in YAML\nDESCRIPTION: This snippet shows the removal of the 'tolerate_failed_blocks' parameter from the query_frontend configuration in Tempo.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-2.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  query_frontend:\n    tolerate_failed_blocks: <int>\n```\n\n----------------------------------------\n\nTITLE: Formatting Ordinal Numbers in Go using Humanize\nDESCRIPTION: Illustrates the use of humanize.Ordinal() function to convert a number into its ordinal form.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"You're my %s best friend.\", humanize.Ordinal(193)) // You are my 193rd best friend.\n```\n\n----------------------------------------\n\nTITLE: macOS Build Error Example with CGO Disabled\nDESCRIPTION: Example build error that occurs when trying to build an Azure SDK application on macOS without CGO enabled, showing undefined accessor symbols.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ GOOS=darwin go build\n# github.com/Azure/azure-sdk-for-go/sdk/azidentity/cache\n../../go/pkg/mod/github.com/!azure/azure-sdk-for-go/sdk/azidentity/cache@v0.3.0/darwin.go:18:19: undefined: accessor.New\n../../go/pkg/mod/github.com/!azure/azure-sdk-for-go/sdk/azidentity/cache@v0.3.0/darwin.go:18:38: undefined: accessor.WithAccount\n```\n\n----------------------------------------\n\nTITLE: Accept Header Structure Definition\nDESCRIPTION: Defines the Accept struct type that represents a clause in an HTTP Accept header with fields for type, subtype, quality factor, and parameters.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/munnerz/goautoneg/README.txt#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Accept struct {\n    Type, SubType string\n    Q             float32\n    Params        map[string]string\n}\n```\n\n----------------------------------------\n\nTITLE: Intel Advanced Vector Extensions 512 (AVX-512) Feature Flags\nDESCRIPTION: Comprehensive list of AVX-512 instruction set extensions covering various computational domains including vector processing, neural network instructions, and specialized algorithmic operations\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/cpuid/v2/README.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| AVX512F | AVX-512 Foundation |\n| AVX512VNNI | AVX-512 Vector Neural Network Instructions |\n```\n\n----------------------------------------\n\nTITLE: Setting Enterprise Image Version in YAML\nDESCRIPTION: Configures the enterprise version settings for Grafana Enterprise Traces, specifying image tag version.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/helm-charts/tempo-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nenterprise:\n  enabled: true\n  image:\n    tag: v2.6.0\n```\n\n----------------------------------------\n\nTITLE: New Cache Configuration in Tempo\nDESCRIPTION: Updated cache configuration allowing multiple role-based caches to be configured with memcached or redis clusters\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-4.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncache:\n  caches:\n  - memcached:\n      host: <some memcached cluster>\n    roles:\n    - bloom\n    - parquet-footer\n  - memcached:\n      host: <some memcached cluster>\n    roles:\n    - frontend-search\n```\n\n----------------------------------------\n\nTITLE: Type Validators with Parameters in Go\nDESCRIPTION: Validator that checks the type of a value using the 'type' parameter in the govalidator library.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n\"type(type)\": IsType,\n```\n\n----------------------------------------\n\nTITLE: Event Has() Method Example\nDESCRIPTION: Example showing usage of the new Event.Has() method for checking event types, demonstrating the simplified syntax compared to bitwise operations.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/fsnotify/fsnotify/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif event.Has(Write) && !event.Has(Remove) {\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Badge for OpenTelemetry Semantic Conventions Package\nDESCRIPTION: Markdown code displaying a PkgGoDev badge that links to the GoDoc documentation for the OpenTelemetry semantic conventions package v1.24.0.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/semconv/v1.24.0/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.24.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.24.0)\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Varint Implementation in Go\nDESCRIPTION: This code snippet shows benchmark results comparing the new varint implementation to binary.Uvarint. It demonstrates significant performance improvements across various input sizes.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/dennwc/varint/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nbenchmark                      old ns/op     new ns/op     delta\nBenchmarkUvarint/1-8           4.13          2.85          -30.99%\nBenchmarkUvarint/1_large-8     4.01          2.28          -43.14%\nBenchmarkUvarint/2-8           6.23          2.87          -53.93%\nBenchmarkUvarint/2_large-8     5.60          2.86          -48.93%\nBenchmarkUvarint/3-8           6.55          3.44          -47.48%\nBenchmarkUvarint/3_large-8     6.54          2.86          -56.27%\nBenchmarkUvarint/4-8           7.30          3.71          -49.18%\nBenchmarkUvarint/4_large-8     7.46          3.10          -58.45%\nBenchmarkUvarint/5-8           8.31          4.12          -50.42%\nBenchmarkUvarint/5_large-8     8.56          3.48          -59.35%\nBenchmarkUvarint/6-8           9.42          4.66          -50.53%\nBenchmarkUvarint/6_large-8     9.91          4.07          -58.93%\nBenchmarkUvarint/7-8           10.6          5.28          -50.19%\nBenchmarkUvarint/7_large-8     11.0          4.70          -57.27%\nBenchmarkUvarint/8-8           11.7          6.02          -48.55%\nBenchmarkUvarint/8_large-8     12.1          5.19          -57.11%\nBenchmarkUvarint/9-8           12.9          6.83          -47.05%\nBenchmarkUvarint/9_large-8     13.1          5.71          -56.41%\n```\n\n----------------------------------------\n\nTITLE: Configuring Ephemeral Storage for Metrics Generator in Jsonnet\nDESCRIPTION: Specifies ephemeral storage requests and limits for the metrics generator in Jsonnet configuration. This change is required for Jsonnet users upgrading to Tempo 1.5.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v1-5.md#2025-04-17_snippet_1\n\nLANGUAGE: jsonnet\nCODE:\n```\n_config+:: {\n  metrics_generator+: {\n    ephemeral_storage_request_size: '10Gi',\n    ephemeral_storage_limit_size: '11Gi',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Package Title and Documentation Badge in Markdown\nDESCRIPTION: Markdown header and badge link to the Go package documentation on pkg.go.dev for the OpenTelemetry semantic conventions v1.26.0 package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/semconv/v1.26.0/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Semconv v1.26.0\n\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.26.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.26.0)\n```\n\n----------------------------------------\n\nTITLE: OTLP Protocol Settings\nDESCRIPTION: Protocol-specific configuration options for gRPC and HTTP servers\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/receiver/otlpreceiver/config.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type                                                            | Default    | Docs                                                                        |\n|------|-----------------------------------------------------------------|------------|-----------------------------------------------------------------------------|\n| grpc | [configgrpc-GRPCServerSettings](#configgrpc-grpcserversettings) | <no value> | GRPCServerSettings defines common settings for a gRPC server configuration. |\n| http | [confighttp-HTTPServerSettings](#confighttp-httpserversettings) | <no value> | HTTPServerSettings defines settings for creating an HTTP server.            |\n```\n\n----------------------------------------\n\nTITLE: OTTL Boolean Expression Examples\nDESCRIPTION: Examples of boolean expressions showing literal values, comparisons, and logical operations. Demonstrates the use of comparison operators, logical operators (and, or, not), and grouping with parentheses.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/LANGUAGE.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nnot true\nnot name == \"foo\"\nnot (IsMatch(name, \"http_.*\") and kind > 0)\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Image with Logo in Markdown\nDESCRIPTION: HTML snippet embedded in Markdown to display the Tempo logo with center alignment\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\"> <img src=\"sources/tempo/logo_and_name.png\" alt=\"Tempo Logo\"> <br>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTTP Headers for Span Reporting in Jaeger Go Client\nDESCRIPTION: Add support for custom HTTP headers when reporting spans over HTTP to the Jaeger backend.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/uber/jaeger-client-go/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Code for adding custom HTTP headers not provided in changelog\n```\n\n----------------------------------------\n\nTITLE: BSD-3-Clause License Text for golang.org/x/lint\nDESCRIPTION: This snippet contains the BSD-3-Clause license text for the golang.org/x/lint dependency. It mandates the inclusion of copyright notices and disclaimers in redistributed source and binary forms. The license also prohibits the use of Google Inc.'s name or contributor names for product endorsement without specific permission.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/elastic/go-grok/NOTICE.txt#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n\"Copyright (c) 2013 The Go Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n   * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\"\n```\n\n----------------------------------------\n\nTITLE: Installing go-isatty Package\nDESCRIPTION: Command to install the go-isatty package using Go's package management system.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/mattn/go-isatty/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/mattn/go-isatty\n```\n\n----------------------------------------\n\nTITLE: Installing Participle V0 in Go\nDESCRIPTION: Shell command to install the latest version of Participle V0 using Go modules.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/participle/v2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/alecthomas/participle@latest\n```\n\n----------------------------------------\n\nTITLE: Creating Tags for Packages in Grafana Tempo - Shell\nDESCRIPTION: This shell command is executed after merging a pull request. It tags the packages in the GitHub repository with the specified version, facilitating version control and package management. The TAG variable denotes the version to be tagged.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-redis/redis/v8/RELEASING.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nTAG=v1.0.0 ./scripts/tag.sh\n```\n\n----------------------------------------\n\nTITLE: Advanced Trace Querying with Tempo Querier Service\nDESCRIPTION: Debug-purpose GET request for the querier service with additional parameters to control searching in blocks, ingesters, or both. Allows specifying block ID boundaries and time ranges.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/_index.md#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /querier/api/v2/traces/<traceid>?mode=xxxx&blockStart=0000&blockEnd=FFFF&start=<start>&end=<end>\n```\n\n----------------------------------------\n\nTITLE: Logger Interface Definition\nDESCRIPTION: The core Logger interface definition that forms the basis of the go-kit logging package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-kit/log/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype Logger interface {\n\tLog(keyvals ...interface{}) error\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting K3d Cluster\nDESCRIPTION: Command to delete the previously created Tempo k3d Kubernetes cluster\nSOURCE: https://github.com/grafana/tempo/blob/main/example/helm/README.md#2025-04-17_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nk3d cluster delete tempo\n```\n\n----------------------------------------\n\nTITLE: Using s2sx Command Line Tool for Self-Extracting Archives\nDESCRIPTION: Command line usage instructions for s2sx, showing available options for creating self-extracting archives across different platforms. Options include specifying target OS and architecture, compression settings, and extraction behaviors.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nUsage: s2sx [options] file1 file2\n\nCompresses all files supplied as input separately.\nIf files have '.s2' extension they are assumed to be compressed already.\nOutput files are written as 'filename.s2sx' and with '.exe' for windows targets.\nIf output is big, an additional file with \".more\" is written. This must be included as well.\nBy default output files will be overwritten.\n\nWildcards are accepted: testdir/*.txt will compress all files in testdir ending with .txt\nDirectories can be wildcards as well. testdir/*/*.txt will match testdir/subdir/b.txt\n\nOptions:\n  -arch string\n        Destination architecture (default \"amd64\")\n  -c    Write all output to stdout. Multiple input files will be concatenated\n  -cpu int\n        Compress using this amount of threads (default 32)\n  -help\n        Display help\n  -max string\n        Maximum executable size. Rest will be written to another file. (default \"1G\")\n  -os string\n        Destination operating system (default \"windows\")\n  -q    Don't write any output to terminal, except errors\n  -rm\n        Delete source file(s) after successful compression\n  -safe\n        Do not overwrite output files\n  -untar\n        Untar on destination\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository\nDESCRIPTION: This command clones the `go-grpc-middleware` repository from GitHub to your local machine. Replace `your-username` with your actual GitHub username.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-middleware/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:your-username/go-grpc-middleware.git\n```\n\n----------------------------------------\n\nTITLE: Importing and using kube-state-metrics in Jsonnet\nDESCRIPTION: This snippet demonstrates how to import the kube-state-metrics library in Jsonnet and how to use its components to configure Prometheus scraping. It initializes the ksm library with a namespace and configures a Prometheus scrape config for that namespace. The '+' operator in Jsonnet merges objects, allowing you to extend the configuration.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/grafana/jsonnet-libs/kube-state-metrics/README.md#2025-04-17_snippet_1\n\nLANGUAGE: jsonnet\nCODE:\n```\n// environments/default/main.jsonnet\nlocal ksm = import 'github.com/grafana/jsonnet-libs/kube-state-metrics/main.libsonnet';\n\n{\n  local namespace = 'default',\n  ksm: ksm.new(namespace),\n\n  prometheus_config+: {\n    scrape_configs+: [\n      ksm.scrape_config(namespace),\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Default Configuration for Parquet Block Format in Tempo 2.0\nDESCRIPTION: New default configuration values that work better with the Parquet block format introduced in Tempo 2.0. Users sticking with the v2 format may prefer the previous values.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-0.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nquery_frontend:\n    max_oustanding_per_tenant: 2000\n    search:\n        concurrent_jobs: 1000\n        target_bytes_per_job: 104857600\n        max_duration: 168h\n        query_ingesters_until: 30m\n    trace_by_id:\n        query_shards: 50\nquerier:\n    max_concurrent_queries: 20\n    search:\n        prefer_self: 10\ningester:\n    concurrent_flushes: 4\n    max_block_duration: 30m\n    max_block_bytes: 524288000\nstorage:\n    trace:\n        pool:\n            max_workers: 400\n            queue_depth: 20000\n        search:\n            read_buffer_count: 32\n            read_buffer_size_bytes: 1048576\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Semantic Conventions in Markdown\nDESCRIPTION: This code snippet shows how to include a PkgGoDev badge in a Markdown file. The badge links to the documentation for the OpenTelemetry Semantic Conventions package version 1.21.0 on pkg.go.dev.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/semconv/v1.21.0/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.21.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.21.0)\n```\n\n----------------------------------------\n\nTITLE: Renaming S3 Storage Configuration Parameter in YAML\nDESCRIPTION: This snippet demonstrates the renaming of 'insecure_skip_verify' to 'tls_insecure_skip_verify' in the S3 storage configuration for Tempo.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-2.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  trace:\n    s3:\n      insecure_skip_verify: true   // renamed to tls_insecure_skip_verify\n```\n\n----------------------------------------\n\nTITLE: Applying Tanka Configuration\nDESCRIPTION: This snippet shows the command used to apply the Tanka configuration to the `default` environment. This command deploys the defined Memcached configurations to the Kubernetes cluster.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/grafana/jsonnet-libs/memcached/README.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n```shell\ntk apply default\n```\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Entry Format\nDESCRIPTION: Markdown formatting for bug fix entries with issue references and commit hashes\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/cloud.google.com/go/auth/CHANGES.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* **auth:** Add internal opt to skip validation on transports ([#9999](https://github.com/googleapis/google-cloud-go/issues/9999)) ([9e20ef8](https://github.com/googleapis/google-cloud-go/commit/9e20ef89f6287d6bd03b8697d5898dc43b4a77cf)), refs [#9823](https://github.com/googleapis/google-cloud-go/issues/9823)\n```\n\n----------------------------------------\n\nTITLE: Restarting the Tempo Service\nDESCRIPTION: Command to restart the Tempo systemd service after configuration changes to apply the new settings.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/linux.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart tempo\n```\n\n----------------------------------------\n\nTITLE: Listing Running Docker Containers\nDESCRIPTION: This command lists the containers currently running in the Docker Compose stack. It displays the container names, commands, states, and port mappings.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/otel-collector-multitenant/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndocker compose ps\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics-generator in YAML for Grafana Tempo\nDESCRIPTION: This YAML configuration snippet is a placeholder for metrics-generator settings in Grafana Tempo. It indicates where specific configuration options would be placed, such as processor settings, time range limits, and other related parameters.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/_index.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Semconv\nDESCRIPTION: Markdown code for displaying the PkgGoDev badge that links to the OpenTelemetry semantic conventions package documentation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/semconv/v1.17.0/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.17.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.17.0)\n```\n\n----------------------------------------\n\nTITLE: Cloning the Tempo Repository with Git\nDESCRIPTION: Command to clone the Grafana Tempo repository from GitHub to the local machine.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/linux.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/grafana/tempo.git\n```\n\n----------------------------------------\n\nTITLE: Profiling Command Example for Memory Profiling\nDESCRIPTION: Demonstrates how to use pprof to generate a memory profile over a 30-second interval, showing the basic syntax for capturing performance data\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/grafana/pyroscope-go/godeltaprof/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo tool pprof http://localhost:6060/debug/pprof/heap?seconds=30\n```\n\n----------------------------------------\n\nTITLE: Azure Storage Configuration Example\nDESCRIPTION: This example illustrates the breaking change in v2.0.0 related to the Azure Storage configuration. The change involves using snake case for configuration parameters.\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_13\n\nLANGUAGE: N/A\nCODE:\n```\n````\n\n```\n\n----------------------------------------\n\nTITLE: Installing Jsonnet and Jsonnet-Bundler on macOS\nDESCRIPTION: These commands install Jsonnet and Jsonnet-Bundler on macOS, which are required for building the Tempo mixins.  Jsonnet is used to generate the dashboards, rules and alerts. Jsonnet-bundler is used to manage jsonnet dependencies.\nSOURCE: https://github.com/grafana/tempo/blob/main/operations/tempo-mixin/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install jsonnet\nbrew install jsonnet-bundler \ngo install github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb@v0.4.0\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Secret for TempoStack Gateway in YAML\nDESCRIPTION: This YAML snippet demonstrates how to create a Kubernetes secret containing OIDC client credentials. These credentials are used for authenticating the TempoStack gateway with the same OAuth provider used by Grafana.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/grafana_datasource.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n name: oidc-test\nstringData:\n clientID: <clientID used for grafana authentication>\n clientSecret: <clientSecret used for grafana authentication>\ntype: Opaque\n```\n\n----------------------------------------\n\nTITLE: Markdown Package Badge for OpenTelemetry Trace Testing\nDESCRIPTION: Markdown code that displays a Go package documentation badge linking to the OpenTelemetry trace testing package documentation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/sdk/trace/tracetest/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/trace/tracetest)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/trace/tracetest)\n```\n\n----------------------------------------\n\nTITLE: Example Go Version Import Path\nDESCRIPTION: Package import path example showing semantic version pattern for OpenTelemetry Go packages.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo.opentelemetry.io/otel/semconv/v1.28.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging for OTTL in YAML\nDESCRIPTION: This YAML configuration enables debug logging in the OpenTelemetry Collector to help troubleshoot OTTL statements by providing detailed information about statement execution and data context.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  telemetry:\n    logs:\n      level: debug\n```\n\n----------------------------------------\n\nTITLE: Proper Import Grouping Pattern in Go Files\nDESCRIPTION: Example of the required import grouping pattern in Go files, organizing imports from standard library, external projects, and internal project packages.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/uber/jaeger-client-go/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"fmt\"\n\n\t\"github.com/uber/jaeger-lib/metrics\"\n\t\"go.uber.org/zap\"\n\n\t\"github.com/uber/jaeger-client-go/config\"\n)\n```\n\n----------------------------------------\n\nTITLE: Parsing XML to JSON - CDATA Element\nDESCRIPTION: Shows how XML CDATA sections are handled when converting to JSON\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_51\n\nLANGUAGE: xml\nCODE:\n```\n<a>\n  <b>1</b>\n  <b><![CDATA[2]]></b>\n</a>\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"a\": {\n    \"b\": [\"1\", \"2\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding the Second Book Element in Go\nDESCRIPTION: Example showing how to use FindOne with an index to get a specific element.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/antchfx/xmlquery/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nbook := xmlquery.FindOne(doc, \"//book[2]\")\n```\n\n----------------------------------------\n\nTITLE: XML Content Example\nDESCRIPTION: Example demonstrating XML structure with extraneous text content.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_46\n\nLANGUAGE: xml\nCODE:\n```\n<foo>\n    bar <!-- extraneous text content -->\n    <hello>world</hello> <!-- element content -->\n</foo>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bloom Filters for Parquet Files in Go\nDESCRIPTION: This example demonstrates how to configure bloom filters for specific columns when writing Parquet files. It uses the parquet.BloomFilters option to set up split-block bloom filters for the 'first_name' and 'last_name' columns.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/parquet-go/parquet-go/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype RowType struct {\n    FirstName string `parquet:\"first_name\"`\n    LastName  string `parquet:\"last_name\"`\n}\n\nconst filterBitsPerValue = 10\nwriter := parquet.NewGenericWriter[RowType](output,\n    parquet.BloomFilters(\n        // Configures the write to generate split-block bloom filters for the\n        // \"first_name\" and \"last_name\" columns of the parquet schema of rows\n        // witten by the application.\n        parquet.SplitBlockFilter(filterBitsPerValue, \"first_name\"),\n        parquet.SplitBlockFilter(filterBitsPerValue, \"last_name\"),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Finding the Last Book Element in Go\nDESCRIPTION: Example showing how to use the last() function in XPath to get the last element.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/antchfx/xmlquery/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nbook := xmlquery.FindOne(doc, \"//book[last()]\")\n```\n\n----------------------------------------\n\nTITLE: Viewing Git Commit History for OpenTelemetry Go Release\nDESCRIPTION: This command displays the commit history between the last tag and the current HEAD, useful for updating the changelog with relevant changes.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit --no-pager log --pretty=oneline \"<last tag>..HEAD\"\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Race Detection\nDESCRIPTION: Command to run comprehensive tests for go-toml with race condition detection across all packages\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pelletier/go-toml/v2/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -race \\.\\.\\.\n```\n\n----------------------------------------\n\nTITLE: Installing HedgedHTTP Package with Go Get\nDESCRIPTION: Command to install the hedgedhttp package using Go modules. Requires Go version 1.16 or higher.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/cristalhq/hedgedhttp/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/cristalhq/hedgedhttp\n```\n\n----------------------------------------\n\nTITLE: Using Git Command to Automatically Add Signed-off-by Line\nDESCRIPTION: Demonstrates how to use the Git -s flag to automatically append the Signed-off-by line to a commit message. This is a convenient way to ensure compliance with the project's contribution requirements.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/IBM/sarama/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit -s -m 'This is my commit message'\n```\n\n----------------------------------------\n\nTITLE: Running Locafero Test Suite\nDESCRIPTION: This command runs the test suite for the Locafero project. It uses the 'just' command runner to execute the predefined 'test' task, which likely runs Go tests for the project.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/sagikazarmark/locafero/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njust test\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Go Package Installation Error\nDESCRIPTION: This snippet shows a common error message when trying to install Viper using GOPATH mode instead of Go Modules. It illustrates the package lookup failure in both GOROOT and GOPATH directories.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/TROUBLESHOOTING.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncannot find package \"github.com/hashicorp/hcl/tree/hcl1\" in any of:\n/usr/local/Cellar/go/1.15.7_1/libexec/src/github.com/hashicorp/hcl/tree/hcl1 (from $GOROOT)\n/Users/user/go/src/github.com/hashicorp/hcl/tree/hcl1 (from $GOPATH)\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Updating Minimum Go Version to 1.19\nDESCRIPTION: A breaking change that updates the minimum supported Go version to 1.19 according to the revised Go version support policy.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/internal/presigned-url/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n* **Feature**: **BREAKING CHANGE**: Bump minimum go version to 1.19 per the revised [go version support policy](https://aws.amazon.com/blogs/developer/aws-sdk-for-go-aligns-with-go-release-policy-on-supported-runtimes/).\n```\n\n----------------------------------------\n\nTITLE: Deprecated Configuration Options Example in YAML\nDESCRIPTION: Example of configuration options that have been removed from Tempo. These options related to serverless functionality that has been deprecated in a breaking change.\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nquerier:\n    search:\n        prefer_self: <int>\n        external_hedge_requests_at: <duration>\n        external_hedge_requests_up_to:  <duration>\n        external_backend: <string>\n        google_cloud_run: <string>\n        external_endpoints: <array>\n```\n\n----------------------------------------\n\nTITLE: Updated Hedged Request Configuration\nDESCRIPTION: Modified default settings for external endpoint hedged requests with relaxed timing parameters.\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nquerier:\n    search:\n      external_hedge_requests_at: 4s    -> 8s\n      external_hedge_requests_up_to: 3  -> 2\n```\n\n----------------------------------------\n\nTITLE: Modifying Function Arguments in Jsonnet\nDESCRIPTION: The 'func.withArgs' function allows the overriding of arguments for an existing function definition.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/jsonnet-libs/docsonnet/doc-util/README.md#2025-04-17_snippet_9\n\nLANGUAGE: jsonnet\nCODE:\n```\nfunc.withArgs(args)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Blob Storage Packages\nDESCRIPTION: Commands to install the Azure Blob Storage client module and Azure Identity package using go get.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/storage/azblob\ngo get github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: Implementing Functional Options in Go\nDESCRIPTION: Function-based option pattern implementation using closures.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype optionFunc func(config) config\n\nfunc (fn optionFunc) apply(c config) config {\n\treturn fn(c)\n}\n\n// WithMyType sets t as MyType.\nfunc WithMyType(t MyType) Option {\n\treturn optionFunc(func(c config) config {\n\t\tc.MyType = t\n        return c\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking with IsType Function in Go\nDESCRIPTION: Examples demonstrating how to use the IsType function to verify variable types, including checking primitive types and pointer types.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nprintln(govalidator.IsType(\"Bob\", \"string\"))\nprintln(govalidator.IsType(1, \"int\"))\ni := 1\nprintln(govalidator.IsType(&i, \"*int\"))\n```\n\n----------------------------------------\n\nTITLE: Running Lua Scripts in GopherLua VM\nDESCRIPTION: Examples of executing Lua code strings and files using GopherLua's VM in Go.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nL := lua.NewState()\ndefer L.Close()\nif err := L.DoString(`print(\"hello\")`); err != nil {\n    panic(err)\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nL := lua.NewState()\ndefer L.Close()\nif err := L.DoFile(\"hello.lua\"); err != nil {\n    panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Metrics Package\nDESCRIPTION: Markdown code that renders a badge linking to the OpenTelemetry metrics embedded package documentation on pkg.go.dev.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/metric/embedded/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/metric/embedded)](https://pkg.go.dev/go.opentelemetry.io/otel/metric/embedded)\n```\n\n----------------------------------------\n\nTITLE: Filter Processor Telemetry Metrics Table - Spans\nDESCRIPTION: Metric specification table for otelcol_processor_filter_spans.filtered showing unit, metric type, value type and monotonic properties\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/processor/filterprocessor/documentation.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Unit | Metric Type | Value Type | Monotonic |\n| ---- | ----------- | ---------- | --------- |\n| 1 | Sum | Int | true |\n```\n\n----------------------------------------\n\nTITLE: Computing Test Coverage in Go\nDESCRIPTION: Commands to generate and view test coverage profile for go-toml project\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pelletier/go-toml/v2/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test -covermode=atomic -coverprofile=coverage\\.out\\ngo tool cover -func=coverage\\.out\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks for xxhash in Go\nDESCRIPTION: This snippet shows the commands used to run benchmarks for the xxhash package. It demonstrates how to compare the performance of the pure Go implementation with the assembly-optimized version using the benchstat tool.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbenchstat <(go test -tags purego -benchtime 500ms -count 15 -bench 'Sum64$')\nbenchstat <(go test -benchtime 500ms -count 15 -bench 'Sum64$')\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Propagation Module in Markdown\nDESCRIPTION: This code snippet displays a badge that links to the package documentation for the OpenTelemetry propagation module on pkg.go.dev. It uses Markdown syntax to create an image link.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/propagation/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/propagation)](https://pkg.go.dev/go.opentelemetry.io/otel/propagation)\n```\n\n----------------------------------------\n\nTITLE: Sharing Lua Bytecode Between LStates in GopherLua\nDESCRIPTION: Illustrates how to compile Lua code to bytecode and share it between multiple Lua states to improve performance and reduce memory usage.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// CompileLua reads the passed lua file from disk and compiles it.\nfunc CompileLua(filePath string) (*lua.FunctionProto, error) {\n    file, err := os.Open(filePath)\n    defer file.Close()\n    if err != nil {\n        return nil, err\n    }\n    reader := bufio.NewReader(file)\n    chunk, err := parse.Parse(reader, filePath)\n    if err != nil {\n        return nil, err\n    }\n    proto, err := lua.Compile(chunk, filePath)\n    if err != nil {\n        return nil, err\n    }\n    return proto, nil\n}\n\n// DoCompiledFile takes a FunctionProto, as returned by CompileLua, and runs it in the LState. It is equivalent\n// to calling DoFile on the LState with the original source file.\nfunc DoCompiledFile(L *lua.LState, proto *lua.FunctionProto) error {\n    lfunc := L.NewFunctionFromProto(proto)\n    L.Push(lfunc)\n    return L.PCall(0, lua.MultRet, nil)\n}\n\n// Example shows how to share the compiled byte code from a lua script between multiple VMs.\nfunc Example() {\n    codeToShare := CompileLua(\"mylua.lua\")\n    a := lua.NewState()\n    b := lua.NewState()\n    c := lua.NewState()\n    DoCompiledFile(a, codeToShare)\n    DoCompiledFile(b, codeToShare)\n    DoCompiledFile(c, codeToShare)\n}\n```\n\n----------------------------------------\n\nTITLE: Removing DataLakeStorageError Definition\nDESCRIPTION: YAML directive to remove the DataLakeStorageError definition from the swagger document.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    delete $.DataLakeStorageError;\n```\n\n----------------------------------------\n\nTITLE: Evaluating XPath Expressions for Sum in Go\nDESCRIPTION: Example showing how to calculate the sum of price elements using XPath expressions.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/antchfx/xmlquery/README.md#2025-04-17_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nexpr, err := xpath.Compile(\"sum(//book/price)\")\nprice := expr.Evaluate(xmlquery.CreateXPathNavigator(doc)).(float64)\nfmt.Printf(\"total price: %f\\n\", price)\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Kubernetes API Validation (After Reduce GC Pressure PR)\nDESCRIPTION: This code snippet shows the benchmark results for validating the Kubernetes Swagger API after a pull request aimed at reducing garbage collection (GC) pressure.  The metrics include time per operation, bytes per operation, and allocations per operation, showing significant improvements in allocation count.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-openapi/validate/BENCHMARK.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/validate\ncpu: AMD Ryzen 7 5800X 8-Core Processor             \nBenchmark_KubernetesSpec/validating_kubernetes_API-16         \t       1\t3758414145 ns/op\t2593881496 B/op\t17111373 allocs/op\n```\n```\n\n----------------------------------------\n\nTITLE: SDK Configuration Updates\nDESCRIPTION: Enables configuration of FIPS and DualStack endpoints through environment variables, shared configuration, or programmatic setup.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/aws/aws-sdk-go-v2/internal/endpoints/v2/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Configuration options for FIPS and DualStack endpoints\nconfig := smithy.Config{\n  FIPS: true,\n  DualStack: true\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Git Diff for Pre-release Changes in OpenTelemetry Go\nDESCRIPTION: This command is used to verify the changes made during the pre-release process by comparing the current branch with the newly created pre-release branch.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit diff ...prerelease_<module set>_<new tag>\n```\n\n----------------------------------------\n\nTITLE: Pull Request Workflow Commands\nDESCRIPTION: Series of Git commands for creating and pushing changes for a pull request.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b <YOUR_BRANCH_NAME>\n# edit files\n# update changelog\nmake precommit\ngit add -p\ngit commit\ngit push <YOUR_FORK> <YOUR_BRANCH_NAME>\n```\n\n----------------------------------------\n\nTITLE: Listing Tempo Data Directory Contents\nDESCRIPTION: This command lists the contents of the 'tempo-data' directory, which contains the Tempo write-ahead log (WAL) and blocks. This allows users to observe the creation of these files as data is ingested.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/otel-collector-multitenant/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nls tempo-data/\n```\n\n----------------------------------------\n\nTITLE: Generating Changelog Entries using Git Log Command in Bash\nDESCRIPTION: This command generates a formatted list of git commit messages to be used as the basis for changelog entries. It includes the commit message and author name.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/uber/jaeger-client-go/RELEASE.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log --pretty=format:'- %s -- %an'\n```\n\n----------------------------------------\n\nTITLE: Configuring Exporter TLS Options in OpenTelemetry\nDESCRIPTION: YAML configuration examples for OpenTelemetry exporters with different TLS security settings. Shows secure, insecure, and secure-but-not-verified configurations.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/config/configtls/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  otlp:\n    endpoint: myserver.local:55690\n    tls:\n      insecure: false\n      ca_file: server.crt\n      cert_file: client.crt\n      key_file: client.key\n      min_version: \"1.1\"\n      max_version: \"1.2\"\n  otlp/insecure:\n    endpoint: myserver.local:55690\n    tls:\n      insecure: true\n  otlp/secure_no_verify:\n    endpoint: myserver.local:55690\n    tls:\n      insecure: false\n      insecure_skip_verify: true\n```\n\n----------------------------------------\n\nTITLE: Using SelfRef for Span Creation in Go\nDESCRIPTION: Example of creating a span using SelfRef to continue an existing trace\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/uber/jaeger-client-go/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nspan := tracer.StartSpan(\n    \"continued_span\",\n    jaeger.SelfRef(yourSpanContext),\n)\n...\ndefer span.Finish()\n```\n\n----------------------------------------\n\nTITLE: Viewing Tokengen Pod Logs\nDESCRIPTION: Command to view logs from the tokengen Pod.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/helm-charts/tempo-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs tempo-tokengen-job-58jhs\n```\n\n----------------------------------------\n\nTITLE: Fixing URL Encoding\nDESCRIPTION: Updates URL encoding to replace '+' with '%20' for service compatibility.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: \n  - zz_service_client.go\n  - zz_container_client.go\n  where: $\n  transform: >\n    return $.\n      replace(/req.Raw\\(\\).URL.RawQuery \\= reqQP.Encode\\(\\)/g, `req.Raw().URL.RawQuery = strings.Replace(reqQP.Encode(), \"+\", \"%20\", -1)`);\n```\n\n----------------------------------------\n\nTITLE: Modifying EncryptionAlgorithm Enum\nDESCRIPTION: YAML directive to modify the EncryptionAlgorithm enum in the swagger document.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters\n  transform: >\n    delete $.EncryptionAlgorithm.enum;\n    $.EncryptionAlgorithm.enum = [\n      \"None\",\n      \"AES256\"\n    ];\n```\n\n----------------------------------------\n\nTITLE: Installing Memcached Library with Jsonnet Bundler\nDESCRIPTION: This snippet installs the Memcached library using Jsonnet Bundler. It requires a valid Tanka application setup and the Jsonnet Bundler dependency.\nSOURCE: https://github.com/grafana/tempo/blob/main/operations/jsonnet-compiled/util/vendor/github.com/grafana/jsonnet-libs/memcached/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njb install github.com/grafana/jsonnet-libs/memcached\n```\n\n----------------------------------------\n\nTITLE: Setting up Zap development environment using Git\nDESCRIPTION: This snippet shows how to fork, clone, and set up the Zap repository for development. It includes steps to add the upstream remote and fetch the latest changes.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $GOPATH/src/go.uber.org\ncd $GOPATH/src/go.uber.org\ngit clone git@github.com:your_github_username/zap.git\ncd zap\ngit remote add upstream https://github.com/uber-go/zap.git\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice to be included in files when applying the Apache License 2.0 to a project. The template includes placeholders for copyright year and owner information, along with the required license text and link to the full license.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/ssooidc/LICENSE.txt#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Removed Search Configuration Options in Tempo 2.1\nDESCRIPTION: Configuration options that were removed in Tempo 2.1 due to the removal of support for searching v2 blocks. These options are no longer valid in the overrides section.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v2-1.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  max_search_bytes_per_trace:\n  search_tags_allow_list:\n  search_tags_deny_list:\n```\n\n----------------------------------------\n\nTITLE: Renaming ObjectReplicationMetadata to OrMetadata\nDESCRIPTION: YAML directive to rename the ObjectReplicationMetadata property to OrMetadata in the BlobItemInternal definition.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    $.BlobItemInternal.properties[\"OrMetadata\"] = $.BlobItemInternal.properties[\"ObjectReplicationMetadata\"];\n    delete $.BlobItemInternal.properties[\"ObjectReplicationMetadata\"];\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results for 64/128-bit MurmurHash3 (non-amd64)\nDESCRIPTION: Performance comparison benchmarks between implementations for 64/128-bit hash calculations on non-amd64 architectures.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/twmb/murmur3/README.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n64Sizes/32-12     2.34GB/s ± 5%  2.64GB/s ± 9%  +12.87%  (p=0.000 n=10+10)\n64Sizes/64-12     3.62GB/s ± 5%  3.96GB/s ± 4%   +9.41%  (p=0.000 n=10+10)\n64Sizes/128-12    5.12GB/s ± 3%  5.44GB/s ± 4%   +6.09%  (p=0.000 n=10+9)\n64Sizes/256-12    6.35GB/s ± 2%  6.27GB/s ± 9%     ~     (p=0.796 n=10+10)\n64Sizes/512-12    6.58GB/s ± 7%  6.79GB/s ± 3%     ~     (p=0.075 n=10+10)\n64Sizes/1024-12   7.49GB/s ± 3%  7.55GB/s ± 9%     ~     (p=0.393 n=10+10)\n64Sizes/2048-12   8.06GB/s ± 2%  7.90GB/s ± 6%     ~     (p=0.156 n=9+10)\n64Sizes/4096-12   8.27GB/s ± 6%  8.22GB/s ± 5%     ~     (p=0.631 n=10+10)\n64Sizes/8192-12   8.35GB/s ± 4%  8.38GB/s ± 6%     ~     (p=0.631 n=10+10)\n```\n\n----------------------------------------\n\nTITLE: Generating Semantic Conventions for OpenTelemetry Go\nDESCRIPTION: This snippet demonstrates how to generate new versions of the semconv package based on OpenTelemetry Semantic Conventions. It uses the make command with a specified TAG environment variable.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport TAG=\"v1.30.0\" # Change to the release version you are generating.\nmake semconv-generate # Uses the exported TAG.\n```\n\n----------------------------------------\n\nTITLE: Basic Test Script Structure Example\nDESCRIPTION: Demonstrates the basic structure of a test script that creates and watches a file\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/fsnotify/fsnotify/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Create a new empty file with some data.\nwatch /\necho data >/file\n\nOutput:\n    create  /file\n    write   /file\n```\n\n----------------------------------------\n\nTITLE: Character Fetch Function with Boundary Check Elimination\nDESCRIPTION: This code snippet demonstrates a function that fetches a character from a byte slice using pointer operations to eliminate boundary checks. This is used to further optimize the decoding process.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/goccy/go-json/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc char(ptr unsafe.Pointer, offset int64) byte {\n\treturn *(*byte)(unsafe.Pointer(uintptr(ptr) + uintptr(offset)))\n}\n\np := (*sliceHeader)(&unsafe.Pointer(buf)).data\nfor {\n    switch char(p, cursor) {\n    case ' ', '\\n', '\\r', '\\t':\n    case '\\000':\n        return nil\n    }\n    cursor++\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenCensus Go to GOPATH\nDESCRIPTION: Command to get the OpenCensus Go repository and install it to your GOPATH directory. This is the first step in setting up a development environment for contributing to the project.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get -d go.opencensus.io\n```\n\n----------------------------------------\n\nTITLE: Installing Locafero Package in Go\nDESCRIPTION: This command installs the Locafero package using Go's package management system. It fetches the latest version of the package from the specified GitHub repository.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/sagikazarmark/locafero/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/sagikazarmark/locafero\n```\n\n----------------------------------------\n\nTITLE: Fixing StorageErrorCode Typo\nDESCRIPTION: Corrects typo in StorageErrorCode constant name from 'Eralier' to 'Earlier'.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: zz_constants.go\n  where: $\n  transform: >\n    return $.\n      replace(/IncrementalCopyOfEralierVersionSnapshotNotAllowed/g, \"IncrementalCopyOfEarlierVersionSnapshotNotAllowed\");\n```\n\n----------------------------------------\n\nTITLE: Generating Go code from lexer definitions using golex\nDESCRIPTION: This command uses golex to generate Go code from the promlex.l lexer definition file. The -o flag specifies the output file name.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/prometheus/prometheus/model/textparse/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n`golex -o=promlex.l.go promlex.l`\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Format\nDESCRIPTION: A structured changelog following Keep a Changelog format, documenting version history from 0.1.0 to 0.6.0. Includes sections for Added, Changed, and Fixed modifications across releases.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-logfmt/logfmt/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [0.6.0] - 2023-01-30\n\n[0.6.0]: https://github.com/go-logfmt/logfmt/compare/v0.5.1...v0.6.0\n\n### Added\n\n- NewDecoderSize by [@alexanderjophus]\n\n## [0.5.1] - 2021-08-18\n\n[0.5.1]: https://github.com/go-logfmt/logfmt/compare/v0.5.0...v0.5.1\n\n### Changed\n\n- Update the `go.mod` file for Go 1.17 as described in the [Go 1.17 release\n  notes](https://golang.org/doc/go1.17#go-command)\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Data Structures with Embedding in Kong CLI\nDESCRIPTION: Example of embedding nested structures in the command-line interface using the embed and prefix tags. This allows for organizing related options into logical groups with a common prefix.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/kong/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nvar CLI struct {\n  Logging struct {\n    Level string `enum:\"debug,info,warn,error\" default:\"info\"`\n    Type string `enum:\"json,console\" default:\"console\"`\n  } `embed:\"\" prefix:\"logging.\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing changes to a forked Zap repository\nDESCRIPTION: Command to push local changes to a forked Zap repository on GitHub, preparing for a pull request.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin cool_new_feature\n```\n\n----------------------------------------\n\nTITLE: Creating a table from CSV file in Go\nDESCRIPTION: Example showing how to create a table directly from a CSV file and set alignment for the columns.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntable, _ := tablewriter.NewCSV(os.Stdout, \"testdata/test_info.csv\", true)\ntable.SetAlignment(tablewriter.ALIGN_LEFT)   // Set Alignment\ntable.Render()\n```\n\n----------------------------------------\n\nTITLE: Checking for Boolean Type in Go\nDESCRIPTION: The IsBool function evaluates whether a given value is a boolean, returning true for Go's native bool type or pcommon.ValueTypeBool, and false otherwise.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_34\n\nLANGUAGE: Go\nCODE:\n```\nIsBool(false)\n```\n\nLANGUAGE: Go\nCODE:\n```\nIsBool(pcommon.NewValueBool(false))\n```\n\nLANGUAGE: Go\nCODE:\n```\nIsBool(42)\n```\n\nLANGUAGE: Go\nCODE:\n```\nIsBool(resource.attributes[\"any key\"])\n```\n\n----------------------------------------\n\nTITLE: Package Documentation Badge in Markdown\nDESCRIPTION: Markdown code that displays a PkgGoDev badge linking to the OpenTelemetry Metric SDK Exemplars package documentation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/sdk/metric/exemplar/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/metric/exemplar)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/metric/exemplar)\n```\n\n----------------------------------------\n\nTITLE: Watching Changes in etcd - Unencrypted (Go)\nDESCRIPTION: This snippet demonstrates how to set up Viper to watch for configuration changes in etcd. It includes creating a Viper instance, adding a remote provider, reading the initial configuration, and setting up a goroutine to continuously watch for changes.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_26\n\nLANGUAGE: go\nCODE:\n```\n// alternatively, you can create a new viper instance.\nvar runtime_viper = viper.New()\n\nruntime_viper.AddRemoteProvider(\"etcd\", \"http://127.0.0.1:4001\", \"/config/hugo.yml\")\nruntime_viper.SetConfigType(\"yaml\") // because there is no file extension in a stream of bytes, supported extensions are \"json\", \"toml\", \"yaml\", \"yml\", \"properties\", \"props\", \"prop\", \"env\", \"dotenv\"\n\n// read from remote config the first time.\nerr := runtime_viper.ReadRemoteConfig()\n\n// unmarshal config\nruntime_viper.Unmarshal(&runtime_conf)\n\n// open a goroutine to watch remote changes forever\ngo func(){\n\tfor {\n\t\ttime.Sleep(time.Second * 5) // delay after each request\n\n\t\t// currently, only tested with etcd support\n\t\terr := runtime_viper.WatchRemoteConfig()\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"unable to read remote config: %v\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\t// unmarshal new config into our runtime config struct. you can also use channel\n\t\t// to implement a signal to notify the system of the changes\n\t\truntime_viper.Unmarshal(&runtime_conf)\n\t}\n}()\n```\n\n----------------------------------------\n\nTITLE: Enabling historical data queries with local-blocks processor\nDESCRIPTION: This YAML configuration enables the flush_to_storage option to ensure metrics blocks are flushed to storage for TraceQL metrics queries against historical data.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/operations/traceql-metrics.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics_generator:\n  processor:\n    local_blocks:\n      flush_to_storage: true\n```\n\n----------------------------------------\n\nTITLE: Contrib Repository Module Path Example\nDESCRIPTION: Example demonstrating the module path format for the contrib repository when using versions v2 and higher.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule go.opentelemetry.io/contrib/instrumentation/host/v2\nrequire go.opentelemetry.io/contrib/instrumentation/host/v2 v2.0.1\nimport \"go.opentelemetry.io/contrib/instrumentation/host/v2\"\n```\n\n----------------------------------------\n\nTITLE: Creating Changelog JSON Entry for Pull Requests\nDESCRIPTION: Template for creating a changelog JSON file when submitting pull requests. The file must be placed in the .changelog directory and includes fields for ID, type, collapse status, description, and affected modules.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/aws/smithy-go/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"12345678-1234-1234-1234-123456789012\"\n    \"type\": \"bugfix\"\n    \"collapse\": true\n    \"description\": \"Fix improper use of printf-style functions.\",\n    \"modules\": [\n        \".\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Service Client Methods in Go\nDESCRIPTION: YAML directive to remove pager methods and export various generated methods in the service client Go file.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: zz_service_client.go\n    where: $\n    transform: >\n      return $.\n        replace(/func \\(client \\*ServiceClient\\) NewListContainersSegmentPager\\(.+\\/\\/ listContainersSegmentCreateRequest creates the ListContainersSegment request/s, `//\\n// listContainersSegmentCreateRequest creates the ListContainersSegment request`).\n        replace(/\\(client \\*ServiceClient\\) listContainersSegmentCreateRequest\\(/, `(client *ServiceClient) ListContainersSegmentCreateRequest(`).\n        replace(/\\(client \\*ServiceClient\\) listContainersSegmentHandleResponse\\(/, `(client *ServiceClient) ListContainersSegmentHandleResponse(`);\n```\n\n----------------------------------------\n\nTITLE: Go Module Path Example for v2+ Versions\nDESCRIPTION: Example showing the proper module path format for versions v2 and higher, including both module declaration and import statements.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule go.opentelemetry.io/otel/v2\nrequire go.opentelemetry.io/otel/v2 v2.0.1\nimport \"go.opentelemetry.io/otel/v2/trace\"\n```\n\n----------------------------------------\n\nTITLE: Installing Participle V2 in Go\nDESCRIPTION: Shell command to install the latest version of Participle V2 using Go modules.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/participle/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/alecthomas/participle/v2@latest\n```\n\n----------------------------------------\n\nTITLE: WAL Configuration YAML\nDESCRIPTION: Configuration for WAL ingestion time range slack setting to restrict block start/end time updates.\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  trace:\n    wal:\n      ingestion_time_range_slack: 2m0s\n```\n\n----------------------------------------\n\nTITLE: Emitting Metrics to StatHat in Go\nDESCRIPTION: Shows how to periodically emit every metric to StatHat using the Stathat function from the stathat package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/rcrowley/go-metrics/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/rcrowley/go-metrics/stathat\"\n\ngo stathat.Stathat(metrics.DefaultRegistry, 10e9, \"example@example.com\")\n```\n\n----------------------------------------\n\nTITLE: Creating Test Data File\nDESCRIPTION: Commands to create test data files on Linux/macOS and Windows systems.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/minio/minio-go/v7/README.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndd if=/dev/urandom of=/tmp/testdata bs=2048 count=10\n```\n\nLANGUAGE: sh\nCODE:\n```\nfsutil file createnew \"C:\\Users\\<username>\\Desktop\\sample.txt\" 20480\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Document for Patching\nDESCRIPTION: Example of a JSON document (document.json) that can be used as input for JSON patch operations, containing name, age, and height fields.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/evanphx/json-patch/README.md#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"John\",\n    \"age\": 24,\n    \"height\": 3.21\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Tempo Dependency from k6-tracing Service\nDESCRIPTION: Docker Compose configuration lines to be removed, which previously defined a dependency between k6-tracing and the tempo service.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/linux.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndepends_on:\ntempo\n```\n\n----------------------------------------\n\nTITLE: Running Shorter Go Tests for minio-go\nDESCRIPTION: This command demonstrates how to run a shorter version of the Go tests with race detection for the minio-go project.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/minio/minio-go/v7/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo test -short -race ./...\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Metric Package in Markdown\nDESCRIPTION: This snippet shows how to embed a PkgGoDev badge in Markdown, linking to the OpenTelemetry metric package documentation. It uses an image link with alt text and a URL.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/metric/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/metric)](https://pkg.go.dev/go.opentelemetry.io/otel/metric)\n```\n\n----------------------------------------\n\nTITLE: Including Shared Content for Trace Best Practices in Markdown\nDESCRIPTION: This snippet demonstrates how to include shared content for trace best practices using a custom shortcode in Hugo-based documentation. It references a shared markdown file containing best practices for traces.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/getting-started/best-practices.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{< docs/shared source=\"tempo\" lookup=\"best-practices-traces.md\" version=\"latest\" >}}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Constant Type Names\nDESCRIPTION: YAML directives to modify various enum and constant names to remove stuttering and improve clarity.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters['BlobDeleteType']\n  transform: >\n    $[\"x-ms-enum\"].name = \"DeleteType\";\n    $[\"x-ms-client-name\"] = \"DeleteType\";\n\n- from: swagger-document\n  where: $.parameters['BlobExpiryOptions']\n  transform: >\n    $[\"x-ms-enum\"].name = \"ExpiryOptions\";\n    $[\"x-ms-client-name\"].name = \"ExpiryOptions\";\n\n- from: swagger-document\n  where: $[\"x-ms-paths\"][*].*.responses[*].headers[\"x-ms-immutability-policy-mode\"]\n  transform: >\n    $[\"x-ms-client-name\"].name = \"ImmutabilityPolicyMode\";\n    $.enum = [ \"Mutable\", \"Unlocked\", \"Locked\"];\n    $[\"x-ms-enum\"] = { \"name\": \"ImmutabilityPolicyMode\", \"modelAsString\": false };\n\n- from: swagger-document\n  where: $.parameters['ImmutabilityPolicyMode']\n  transform: >\n    $[\"x-ms-enum\"].name = \"ImmutabilityPolicySetting\";\n    $[\"x-ms-client-name\"].name = \"ImmutabilityPolicySetting\";\n\n- from: swagger-document\n  where: $.definitions['BlobPropertiesInternal']\n  transform: >\n    $.properties.ImmutabilityPolicyMode[\"x-ms-enum\"].name = \"ImmutabilityPolicyMode\";\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a Feature Branch\nDESCRIPTION: Git commands to create a new feature branch, make and commit changes, and push the branch to your fork. This workflow prepares your changes for a pull request.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b feature\n# edit files\n$ git commit\n$ git push fork feature\n```\n\n----------------------------------------\n\nTITLE: XML Element Removal Example\nDESCRIPTION: Shows how to remove specific elements from an XML document using XPath expressions\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_53\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<Log>\n  <Record>\n    <ID>00001</ID>\n    <Name type=\"archive\"></Name>\n    <Data>Some data</Data>\n  </Record>\n  <Record>\n    <ID>00002</ID>\n    <Name type=\"user\"></Name>\n    <Data>Some data</Data>\n  </Record>\n</Log>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<Log>\n  <Record>\n    <ID>00002</ID>\n    <Name type=\"user\"></Name>\n    <Data>Some data</Data>\n  </Record>\n</Log>\n```\n\n----------------------------------------\n\nTITLE: Legacy Querier Configuration Example\nDESCRIPTION: Previous YAML configuration structure for querier settings before the 1.4 update, showing search timeout and endpoint configurations.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/release-notes/v1-4.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nquerier:\n  search_query_timeout: 30s\n  search_external_endpoints: []\n  search_prefer_self: 2\n```\n\n----------------------------------------\n\nTITLE: Running Linting Checks in Bash\nDESCRIPTION: Command to run linting checks on the codebase before submitting a PR to catch any linting errors.\nSOURCE: https://github.com/grafana/tempo/blob/main/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Installing CPUID via Homebrew\nDESCRIPTION: Shell command to install the CPUID utility using Homebrew package manager on macOS/Linux systems.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/cpuid/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ brew install cpuid\n```\n\n----------------------------------------\n\nTITLE: Available Validators for Struct Fields in Go\nDESCRIPTION: A comprehensive list of validators available for struct fields in the govalidator library, showing the mapping between validator tags and their corresponding validation functions.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-17_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n\"email\":              IsEmail,\n\"url\":                IsURL,\n\"dialstring\":         IsDialString,\n\"requrl\":             IsRequestURL,\n\"requri\":             IsRequestURI,\n\"alpha\":              IsAlpha,\n\"utfletter\":          IsUTFLetter,\n\"alphanum\":           IsAlphanumeric,\n\"utfletternum\":       IsUTFLetterNumeric,\n\"numeric\":            IsNumeric,\n\"utfnumeric\":         IsUTFNumeric,\n\"utfdigit\":           IsUTFDigit,\n\"hexadecimal\":        IsHexadecimal,\n\"hexcolor\":           IsHexcolor,\n\"rgbcolor\":           IsRGBcolor,\n\"lowercase\":          IsLowerCase,\n\"uppercase\":          IsUpperCase,\n\"int\":                IsInt,\n\"float\":              IsFloat,\n\"null\":               IsNull,\n\"uuid\":               IsUUID,\n\"uuidv3\":             IsUUIDv3,\n\"uuidv4\":             IsUUIDv4,\n\"uuidv5\":             IsUUIDv5,\n\"creditcard\":         IsCreditCard,\n\"isbn10\":             IsISBN10,\n\"isbn13\":             IsISBN13,\n\"json\":               IsJSON,\n\"multibyte\":          IsMultibyte,\n\"ascii\":              IsASCII,\n\"printableascii\":     IsPrintableASCII,\n\"fullwidth\":          IsFullWidth,\n\"halfwidth\":          IsHalfWidth,\n\"variablewidth\":      IsVariableWidth,\n\"base64\":             IsBase64,\n\"datauri\":            IsDataURI,\n\"ip\":                 IsIP,\n\"port\":               IsPort,\n\"ipv4\":               IsIPv4,\n\"ipv6\":               IsIPv6,\n\"dns\":                IsDNSName,\n\"host\":               IsHost,\n\"mac\":                IsMAC,\n\"latitude\":           IsLatitude,\n\"longitude\":          IsLongitude,\n\"ssn\":                IsSSN,\n\"semver\":             IsSemver,\n\"rfc3339\":            IsRFC3339,\n\"rfc3339WithoutZone\": IsRFC3339WithoutZone,\n\"ISO3166Alpha2\":      IsISO3166Alpha2,\n\"ISO3166Alpha3\":      IsISO3166Alpha3,\n\"ulid\":               IsULID,\n```\n\n----------------------------------------\n\nTITLE: Status Code Count Query\nDESCRIPTION: Query to find traces with more than 3 spans having status code 200\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/traceql/_index.md#2025-04-17_snippet_43\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ span.http.status_code = 200 } | count() > 3\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch with Git\nDESCRIPTION: This snippet demonstrates the Git commands for creating a feature branch, committing changes, and pushing to the remote repository. It's part of the workflow for contributing to the minio-go project.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/minio/minio-go/v7/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my-new-feature\ngit commit -am 'Add some feature'\ngit push origin my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Log SDK in Markdown\nDESCRIPTION: This snippet shows how to include a PkgGoDev badge in a Markdown file, linking to the documentation for the OpenTelemetry Log SDK package in Go.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/sdk/log/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/log)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/log)\n```\n\n----------------------------------------\n\nTITLE: Scaling Tempo Components with Nomad CLI\nDESCRIPTION: Command to scale Tempo distributor component using Nomad CLI, allowing dynamic resource allocation\nSOURCE: https://github.com/grafana/tempo/blob/main/example/nomad/tempo-distributed/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnomad job scale tempo distributor <count>\n```\n\n----------------------------------------\n\nTITLE: Metric Memory Usage Program in Go\nDESCRIPTION: This Go program is used to measure memory usage with metrics. It initializes a new metrics registry and sleeps for 600 seconds, allowing for memory usage analysis.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/rcrowley/go-metrics/memory.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"metrics\"\n\t\"time\"\n)\n\nfunc main() {\n\tfmt.Sprintf(\"foo\")\n\tmetrics.NewRegistry()\n\ttime.Sleep(600e9)\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Event Check Example\nDESCRIPTION: Shows the previous way of checking event types using bitwise operations, which was more verbose and harder to read.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/fsnotify/fsnotify/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif event.Op&Write == Write && !(event.Op&Remove == Remove) {\n}\n```\n\n----------------------------------------\n\nTITLE: Using Verbose() Function for Detailed Error Information in Go\nDESCRIPTION: This snippet demonstrates how to use the Verbose() function to retrieve the most detailed error message from any error provided by the MSAL library.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(errors.Verbose(err))\n```\n\n----------------------------------------\n\nTITLE: Installing ISO8601 Parser Library in Go\nDESCRIPTION: Command to install the ISO8601 parser library using Go's package manager.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/relvacode/iso8601/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/relvacode/iso8601\n```\n\n----------------------------------------\n\nTITLE: Opening URL in Browser\nDESCRIPTION: Function to open a specified URL in a new browser window, providing a simple way to launch web pages\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pkg/browser/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc OpenURL(url string) error\n```\n\n----------------------------------------\n\nTITLE: Installing Color Package with Go\nDESCRIPTION: Command to install the color package using go get\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/fatih/color/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/fatih/color\n```\n\n----------------------------------------\n\nTITLE: Gathering Static Memory Usage with Shell Command\nDESCRIPTION: This shell command is used to retrieve memory usage statistics for a specific process running the metrics benchmark.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/rcrowley/go-metrics/memory.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngrep ^Vm \"/proc/$(ps fax | grep [m]etrics-bench | awk '{print $1}')/status\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Request Context in Go\nDESCRIPTION: The method `WithContext()` for `runtime.Request` enables shallow cloning of requests with a new context. This is important for maintaining request integrity when needing to modify the context, such as for cancellation or timeout purposes.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (r *Request) WithContext(ctx context.Context) *Request {\n    // Implementation to clone the request with new context\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Properties from BlobMetadata Definition\nDESCRIPTION: YAML directive to remove the properties field from the BlobMetadata definition in the swagger document.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    delete $.BlobMetadata[\"properties\"];\n```\n\n----------------------------------------\n\nTITLE: Building a Participle Parser with Union Types\nDESCRIPTION: Go code snippet demonstrating how to construct a Participle parser with union types using the Union option.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alecthomas/participle/v2/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nparser := participle.MustBuild[AST](participle.Union[Value](Float{}, Int{}, String{}, Bool{}))\n```\n\n----------------------------------------\n\nTITLE: Redirecting klog Output in Go\nDESCRIPTION: Shows how to redirect klog output to a custom io.Writer using SetOutput() method.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/k8s.io/klog/v2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nklog.SetOutput()\n```\n\n----------------------------------------\n\nTITLE: Defining Security Policy in Markdown\nDESCRIPTION: This Markdown document outlines the security policy for the Grafana Tempo project. It covers supported versions, defines what constitutes a vulnerability, and provides instructions for reporting security issues.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/SECURITY.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Security Policy\n\n## Supported Versions\n\nSecurity updates are applied only to the latest release.\n\n## Vulnerability Definition\n\nA security vulnerability is a bug that with certain input triggers a crash or an infinite loop. Most calls will have varying execution time and only in rare cases will slow operation be considered a security vulnerability.\n\nCorrupted output generally is not considered a security vulnerability, unless independent operations are able to affect each other. Note that not all functionality is re-entrant and safe to use concurrently.\n\nOut-of-memory crashes only applies if the en/decoder uses an abnormal amount of memory, with appropriate options applied, to limit maximum window size, concurrency, etc. However, if you are in doubt you are welcome to file a security issue.\n\nIt is assumed that all callers are trusted, meaning internal data exposed through reflection or inspection of returned data structures is not considered a vulnerability.\n\nVulnerabilities resulting from compiler/assembler errors should be reported upstream. Depending on the severity this package may or may not implement a workaround.\n\n## Reporting a Vulnerability\n\nIf you have discovered a security vulnerability in this project, please report it privately. **Do not disclose it as a public issue.** This gives us time to work with you to fix the issue before public exposure, reducing the chance that the exploit will be used before a patch is released.\n\nPlease disclose it at [security advisory](https://github.com/klauspost/compress/security/advisories/new). If possible please provide a minimal reproducer. If the issue only applies to a single platform, it would be helpful to provide access to that.\n\nThis project is maintained by a team of volunteers on a reasonable-effort basis. As such, vulnerabilities will be disclosed in a best effort base.\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Go Package Documentation\nDESCRIPTION: A markdown badge and link to the Go package documentation for the OpenTelemetry SDK resource package\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/sdk/resource/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/resource)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/resource)\n```\n\n----------------------------------------\n\nTITLE: Golang Version Directive Update\nDESCRIPTION: Update to set minimum required Go version to 1.18 in go.mod for dependency compatibility.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/IBM/sarama/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Internal Logging Verbosity Changes in Go OpenTelemetry SDK\nDESCRIPTION: Changes to internal logging verbosity levels: info to V(4) and debug to V(8).\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_18\n\nLANGUAGE: Go\nCODE:\n```\n// Info level\nV(4)\n// Debug level\nV(8)\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: Markdown formatted changelog detailing the version history from v1.0.0 to v1.2.1, including breaking changes, improvements, bug fixes, and API additions for the vsock package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/mdlayher/vsock/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CHANGELOG\n\n# v1.2.1\n\n- [Improvement]: updated dependencies, test with Go 1.20.\n\n# v1.2.0\n\n**This is the first release of package vsock that only supports Go 1.18+. Users\non older versions of Go must use v1.1.1.**\n\n- [Improvement]: drop support for older versions of Go so we can begin using\n  modern versions of `x/sys` and other dependencies.\n\n## v1.1.1\n\n**This is the last release of package vsock that supports Go 1.17 and below.**\n\n- [Bug Fix] [commit](https://github.com/mdlayher/vsock/commit/ead86435c244d5d6baad549a6df0557ada3f4401):\n  fix build on non-UNIX platforms such as Windows. This is a no-op change on\n  Linux but provides a friendlier experience for non-Linux users.\n\n## v1.1.0\n\n- [New API] [commit](https://github.com/mdlayher/vsock/commit/44cd82dc5f7de644436f22236b111ab97fa9a14f):\n  `vsock.FileListener` can be used to create a `vsock.Listener` from an existing\n  `os.File`, which may be provided by systemd socket activation or another\n  external mechanism.\n\n## v1.0.1\n\n- [Bug Fix] [commit](https://github.com/mdlayher/vsock/commit/99a6dccdebad21d1fa5f757d228d677ccb1412dc):\n  upgrade `github.com/mdlayher/socket` to handle non-blocking `connect(2)`\n  errors (called in `vsock.Dial`) properly by checking the `SO_ERROR` socket\n  option. Lock in this behavior with a new test.\n- [Improvement] [commit](https://github.com/mdlayher/vsock/commit/375f3bbcc363500daf367ec511638a4655471719):\n  downgrade the version of `golang.org/x/net` in use to support Go 1.12. We\n  don't need the latest version for this package.\n\n## v1.0.0\n\n**This is the first release of package vsock that only supports Go 1.12+.\nUsers on older versions of Go must use an unstable release.**\n\n- Initial stable commit!\n- [API change]: the `vsock.Dial` and `vsock.Listen` constructors now accept an\n  optional `*vsock.Config` parameter to enable future expansion in v1.x.x\n  without prompting further breaking API changes. Because `vsock.Config` has no\n  options as of this release, `nil` may be passed in all call sites to fix\n  existing code upon upgrading to v1.0.0.\n- [New API]: the `vsock.ListenContextID` function can be used to create a\n  `*vsock.Listener` which is bound to an explicit context ID address, rather\n  than inferring one automatically as `vsock.Listen` does.\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Deployment in Jsonnet\nDESCRIPTION: This Jsonnet snippet demonstrates the configuration of Grafana deployment, with integration of Prometheus as a datasource. Required dependencies include imports from the Grafana library as well as Kubernetes utilities. Key parameters include the Prometheus URL and Grafana configuration options such as adding dashboards and datasources. It outputs a configuration object for deployment in a Kubernetes namespace. It assumes a stateless deployment by default.\nSOURCE: https://github.com/grafana/tempo/blob/main/operations/tempo-mixin/vendor/github.com/grafana/jsonnet-libs/grafana/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Jsonnet\nCODE:\n```\nlocal grafana = import '../grafana.libsonnet';\nlocal k = import 'k.libsonnet';\n{\n  config+:: {\n    prometheus_url: 'http://prometheus',\n  },\n\n  namespace: k.core.v1.namespace.new('grafana'),\n\n  prometheus_datasource:: grafana.datasource.new('prometheus', $.config.prometheus_url, type='prometheus', default=true),\n\n  grafana: grafana\n           + grafana.withAnonymous()\n           + grafana.addFolder('Example')\n           + grafana.addDashboard('simple', (import 'dashboard-simple.libsonnet'), folder='Example')\n           + grafana.addDatasource('prometheus', $.prometheus_datasource),\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRest for Azure Blob SDK Generation in Go\nDESCRIPTION: YAML configuration for AutoRest to generate Azure Blob Storage SDK for Golang. It specifies the API version, output folder, and various generation options.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngo: true\nclear-output-folder: false\nversion: \"^3.0.0\"\nlicense-header: MICROSOFT_MIT_NO_VERSION\ninput-file: \"https://raw.githubusercontent.com/Azure/azure-rest-api-specs/ae95eb6a4701d844bada7d1c4f5ecf4a7444e5b8/specification/storage/data-plane/Microsoft.BlobStorage/stable/2025-01-05/blob.json\"\ncredential-scope: \"https://storage.azure.com/.default\"\noutput-folder: ../generated\nfile-prefix: \"zz_\"\nopenapi-type: \"data-plane\"\nverbose: true\nsecurity: AzureKey\nmodelerfour:\n  group-parameters: false\n  seal-single-value-enum-by-default: true\n  lenient-model-deduplication: true\nexport-clients: true\nuse: \"@autorest/go@4.0.0-preview.65\"\n```\n\n----------------------------------------\n\nTITLE: Adding Signed-off-by Line to Commit Message\nDESCRIPTION: Example of how to add a Signed-off-by line to a commit message, which is required for contributing to the project. This demonstrates the format of the line and includes the author's email.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/IBM/sarama/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nfeat: this is my commit message\n\nSigned-off-by: Random J Developer <random@developer.example.org>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Release Tag\nDESCRIPTION: Git commands for creating and pushing a new release tag for the v2 branch\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pelletier/go-toml/v2/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout v2\\ngit pull\\ngit tag v2\\.2\\.0\\ngit push --tags\n```\n\n----------------------------------------\n\nTITLE: Including OpenTelemetry Attribute Badge in Markdown\nDESCRIPTION: Markdown snippet showing how to embed a pkg.go.dev badge for the OpenTelemetry attribute package with a hyperlink to its documentation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/attribute/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/attribute)](https://pkg.go.dev/go.opentelemetry.io/otel/attribute)\n```\n\n----------------------------------------\n\nTITLE: Finding the Current Library Version in API.go\nDESCRIPTION: Command to check the current library version in the api.go file using grep. This helps maintainers verify the version before updating it.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/minio/minio-go/v7/MAINTAINERS.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ grep libraryVersion api.go\n      libraryVersion = \"4.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Implementing CopyOnWriteFs in Afero\nDESCRIPTION: Shows how to create a copy-on-write filesystem with a read-only base and a writable overlay. Files are only copied to the overlay when modified, keeping the base untouched while allowing file modifications in the overlay.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-17_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nbase := afero.NewOsFs()\nroBase := afero.NewReadOnlyFs(base)\nufs := afero.NewCopyOnWriteFs(roBase, afero.NewMemMapFs())\n\nfh, _ = ufs.Create(\"/home/test/file2.txt\")\nfh.WriteString(\"This is a test\")\nfh.Close()\n```\n\n----------------------------------------\n\nTITLE: Changing Encoding for OTLP/HTTP Exporter in YAML\nDESCRIPTION: Illustrates how to change the default proto encoding to JSON for the OTLP/HTTP exporter.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/exporter/otlphttpexporter/README.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  otlphttp:\n    ...\n    encoding: json\n```\n\n----------------------------------------\n\nTITLE: Renaming Internal Models\nDESCRIPTION: Renames internal blob models to their public counterparts.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- rename-model:\n    from: BlobItemInternal\n    to: BlobItem\n- rename-model:\n    from: BlobPropertiesInternal\n    to: BlobProperties\n```\n\n----------------------------------------\n\nTITLE: Adding 304 Response for Blob Get Operation\nDESCRIPTION: YAML directive to add a 304 (Not Modified) response for the blob GET operation in the swagger document.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"][\"/{containerName}/{blob}\"]\n  transform: >\n    $.get.responses[\"304\"] = {\n      \"description\": \"The condition specified using HTTP conditional header(s) is not met.\",\n      \"x-az-response-name\": \"ConditionNotMetError\",\n      \"headers\": { \"x-ms-error-code\": { \"x-ms-client-name\": \"ErrorCode\", \"type\": \"string\" } }\n    };\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results After Performance Improvement (Intel CPU)\nDESCRIPTION: These are the benchmark results for the same name mangling functions after the performance improvements implemented in PR #79. The results show significant improvements in both operation time and memory allocations, with approximately 10x faster execution and 100x fewer allocations.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-openapi/swag/BENCHMARK.md#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/swag\ncpu: Intel(R) Core(TM) i5-6200U CPU @ 2.30GHz\nBenchmarkToXXXName/ToGoName-4         \t 9595830\t      3991 ns/op\t      42 B/op\t       5 allocs/op\nBenchmarkToXXXName/ToVarName-4        \t 9194276\t      3984 ns/op\t      62 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToFileName-4       \t17002711\t      2123 ns/op\t     147 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToCommandName-4    \t16772926\t      2111 ns/op\t     147 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToHumanNameLower-4 \t 9788331\t      3749 ns/op\t      92 B/op\t       6 allocs/op\nBenchmarkToXXXName/ToHumanNameTitle-4 \t 9188260\t      3941 ns/op\t     104 B/op\t       6 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Filter Processor Dependencies\nDESCRIPTION: Specifies the filter processor module dependencies for OpenTelemetry collector with metadata components.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/modules.txt#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n# github.com/open-telemetry/opentelemetry-collector-contrib/processor/filterprocessor v0.123.0\n## explicit; go 1.23.0\ngithub.com/open-telemetry/opentelemetry-collector-contrib/processor/filterprocessor\ngithub.com/open-telemetry/opentelemetry-collector-contrib/processor/filterprocessor/internal/metadata\n```\n\n----------------------------------------\n\nTITLE: Removing UnmarshalXML for BlobItems\nDESCRIPTION: YAML directive to omit serde methods for BlobItemInternal in the swagger document, allowing for custom UnmarshalXML implementation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    $.BlobItemInternal[\"x-ms-go-omit-serde-methods\"] = true;\n```\n\n----------------------------------------\n\nTITLE: Correcting Typo in Internal API for Presigning Middleware\nDESCRIPTION: A bug fix to restore a typo'd API 'AddAsIsInternalPresigingMiddleware' as an alias for backwards compatibility.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/internal/presigned-url/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* **Bug Fix**: Restore typo'd API `AddAsIsInternalPresigingMiddleware` as an alias for backwards compatibility.\n```\n\n----------------------------------------\n\nTITLE: Response Body Reader Implementation\nDESCRIPTION: Wrapper implementation that ensures proper cancellation of per-try timeout when response body is closed.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-17_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nresponseBodyReader\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTracing to gRPC Client in Go\nDESCRIPTION: This Go code demonstrates how to integrate OpenTracing with a gRPC client by setting up a tracer and using it with unary and stream interceptors. It requires an OpenTracing Tracer instance and establishes a connection to the server peer, ensuring that all future RPC activities are traced. The interceptors must be added as options during the grpc.Dial call.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/opentracing-contrib/go-grpc/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// You must have some sort of OpenTracing Tracer instance on hand.\nvar tracer opentracing.Tracer = ...\n...\n\n// Set up a connection to the server peer.\nconn, err := grpc.Dial(\n    address,\n    ... // other options\n    grpc.WithUnaryInterceptor(\n        otgrpc.OpenTracingClientInterceptor(tracer)),\n    grpc.WithStreamInterceptor(\n        otgrpc.OpenTracingStreamClientInterceptor(tracer)))\n\n// All future RPC activity involving `conn` will be automatically traced.\n```\n\n----------------------------------------\n\nTITLE: Parsing XML from a File in Go\nDESCRIPTION: Example showing how to parse an XML document from a file using an io.Reader.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/antchfx/xmlquery/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nf, err := os.Open(\"../books.xml\")\ndoc, err := xmlquery.Parse(f)\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Integration Test\nDESCRIPTION: This command executes a specific integration test by name, using the `-run` flag. `TestMicroservices$` runs only the test named `TestMicroservices`. The `-count=1` flag disables caching and `-v` provides verbose output.\nSOURCE: https://github.com/grafana/tempo/blob/main/integration/e2e/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n\"go test -count=1 -v ./integration/e2e/... -run TestMicroservices$\"\n```\n\n----------------------------------------\n\nTITLE: Updating Content-CRC64 Header Client Name\nDESCRIPTION: Sets client name for x-ms-content-crc64 header response.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.x-ms-paths.*.*.responses.*.headers.x-ms-content-crc64\n  transform: >\n    $[\"x-ms-client-name\"] = \"ContentCRC64\"\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Front Matter for Grafana Tempo Design Proposal\nDESCRIPTION: This snippet demonstrates the required front matter for a new design proposal document. It includes fields for the author's name and GitHub handle, creation date, last updated date, and the title of the proposal.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nAuthor: <name> (@<github handle>)\nCreated: <date this document was created>\nLast updated: <date this document was last updated>\n---\n\n# <title>\n\n...\n```\n\n----------------------------------------\n\nTITLE: Defining integer flag with pflag\nDESCRIPTION: Demonstrates how to define an integer flag using the Int() function, which creates a flag named \"flagname\" with a default value of 1234 and a help message.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n```\n\n----------------------------------------\n\nTITLE: Removing Dependency on go-cmp\nDESCRIPTION: A bug fix that removes the dependency on go-cmp from the project.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/internal/presigned-url/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* **Bug Fix**: Remove dependency on go-cmp.\n```\n\n----------------------------------------\n\nTITLE: Creating Tempo Directory and Namespace in Kubernetes\nDESCRIPTION: Commands to create a new directory for the Tempo installation and set up a Kubernetes namespace for the deployment.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/tanka.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir tempo\ncd tempo\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace tempo\n```\n\n----------------------------------------\n\nTITLE: Parsing Environment Variables from io.Reader in Go\nDESCRIPTION: Demonstrates how to use gotenv.Parse() and gotenv.StrictParse() to parse environment variables from an io.Reader source, returning an Env object or an error respectively.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/subosito/gotenv/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npairs := gotenv.Parse(strings.NewReader(\"FOO=test\\nBAR=$FOO\"))\n// gotenv.Env{\"FOO\": \"test\", \"BAR\": \"test\"}\n\npairs, err := gotenv.StrictParse(strings.NewReader(`FOO=\"bar\"`))\n// gotenv.Env{\"FOO\": \"bar\"}\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OTLP Metric HTTP Exporter in Markdown\nDESCRIPTION: This code snippet shows how to embed a PkgGoDev badge in a Markdown file. The badge links to the package documentation for the OTLP Metric HTTP Exporter on pkg.go.dev.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp)](https://pkg.go.dev/go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp)\n```\n\n----------------------------------------\n\nTITLE: Initializing Kotel Meter and Kafka Client with OpenTelemetry Metrics in Go\nDESCRIPTION: This example shows how to set up a kotel meter, create a kotel service hook with metrics enabled, and initialize a Kafka client with OpenTelemetry metrics tracking.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/twmb/franz-go/plugin/kotel/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Initialize meter provider.\nmeterProvider, err := initMeterProvider()\n\n// Create a new kotel meter.\nmeterOpts := []kotel.MeterOpt{kotel.MeterProvider(meterProvider)}\nmeter := kotel.NewMeter(meterOpts...)\n\n// Pass the meter to NewKotel hook.\nkotelOps := []kotel.Opt{\n\tkotel.WithMeter(meter),\n}\n\n// Create a new kotel service.\nkotelService := kotel.NewKotel(kotelOps...)\n\n// Create a new Kafka client.\ncl, err := kgo.NewClient(\n\t// Pass in the kotel hook.\n\tkgo.WithHooks(kotelService.Hooks()...),\n\t// ...other opts.\n)\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response Structure\nDESCRIPTION: Example of how the protobuf message is serialized to JSON, demonstrating the structure with span metrics, series data, and percentile latencies. Note that uint64 fields are serialized as strings.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/api_docs/metrics-summary.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"summaries\": [\n       {\n           \"spanCount\": \"20\",\n           \"series\" : [\n               {\n                   \"key\": \".attr1\",\n                   \"value\": {\n                       \"type\": 5,\n                       \"s\": \"foo\"\n                   },\n               },\n               ...\n           ],\n           \"p99\": \"68719476736\",\n           \"p95\": \"1073741824\",\n           \"p90\": \"1017990479\",\n           \"p50\": \"664499239\"\n       },\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal IAM Policy for Tempo S3 Access in JSON\nDESCRIPTION: This JSON snippet defines the minimal IAM policy required for Tempo to interact with an Amazon S3 bucket. It grants permissions for putting, getting, listing, deleting objects, and managing object tagging.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/hosted-storage/s3.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"TempoPermissions\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:PutObject\",\n                \"s3:GetObject\",\n                \"s3:ListBucket\",\n                \"s3:DeleteObject\",\n                \"s3:GetObjectTagging\",\n                \"s3:PutObjectTagging\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::<bucketname>/*\",\n                \"arn:aws:s3:::<bucketname>\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enterprise Traces Configuration Values\nDESCRIPTION: YAML configuration for Grafana Enterprise Traces installation with multitenancy and additional storage settings\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/helm-charts/tempo-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\nglobal:\n  clusterDomain: 'cluster.local'\nenterprise:\n  enabled: true\nmultitenancyEnabled: true\nminio:\n  enabled: true\n  mode: standalone\n  rootUser: grafana-tempo\n  rootPassword: supersecret\n  buckets:\n    - name: enterprise-traces\n      policy: none\n      purge: false\n    - name: enterprise-traces-admin\n      policy: none\n      purge: false\n  configPathmc: '/tmp/minio/mc/'\nstorage:\n  trace:\n    backend: s3\n    s3:\n      access_key: 'grafana-tempo'\n      secret_key: 'supersecret'\n      bucket: 'enterprise-traces'\n      endpoint: 'tempo-minio:9000'\n      insecure: true\n  admin:\n    backend: s3\n    s3:\n      access_key_id: 'grafana-tempo'\n      secret_access_key: 'supersecret'\n      bucket_name: 'enterprise-traces-admin'\n      endpoint: 'tempo-minio:9000'\n      insecure: true\n```\n\n----------------------------------------\n\nTITLE: Migrating from the old to new ManagedIdentityCredential implementation\nDESCRIPTION: The ManagedIdentityCredential constructor no longer accepts an ID parameter directly. Instead, it uses the ManagedIdentityCredentialOptions.ID field to specify user-assigned identities through ClientID or ResourceID.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// before\ncred, err := NewManagedIdentityCredential(\"client-id\", nil)\n// or, for a resource ID\nopts := &ManagedIdentityCredentialOptions{ID: ResourceID}\ncred, err := NewManagedIdentityCredential(\"/subscriptions/...\", opts)\n\n// after\nclientID := ClientID(\"7cf7db0d-...\")\nopts := &ManagedIdentityCredentialOptions{ID: clientID}\n// or, for a resource ID\nresID: ResourceID(\"/subscriptions/...\")\nopts := &ManagedIdentityCredentialOptions{ID: resID}\ncred, err := NewManagedIdentityCredential(opts)\n```\n\n----------------------------------------\n\nTITLE: Creating flag aliasing function\nDESCRIPTION: Shows how to create a normalization function that aliases old flag names to new flag names for backward compatibility.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc aliasNormalizeFunc(f *pflag.FlagSet, name string) pflag.NormalizedName {\n\tswitch name {\n\tcase \"old-flag-name\":\n\t\tname = \"new-flag-name\"\n\t\tbreak\n\t}\n\treturn pflag.NormalizedName(name)\n}\n\nmyFlagSet.SetNormalizeFunc(aliasNormalizeFunc)\n```\n\n----------------------------------------\n\nTITLE: Optimizing Set Creation in Go OpenTelemetry Attribute Package\nDESCRIPTION: Memory allocation optimizations when creating new Sets using NewSet or NewSetWithFiltered in the go.opentelemetry.io/otel/attribute package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\nNewSet()\nNewSetWithFiltered()\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP HTTP Receiver with CORS and Authentication\nDESCRIPTION: Example configuration for an OTLP HTTP receiver with CORS support, authentication, custom compression settings, and attribute processing to extract HTTP headers into span attributes.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/config/confighttp/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      http:\n        include_metadata: true\n        auth:\n          request_params:\n          - token\n          authenticator: some-authenticator-extension\n        cors:\n          allowed_origins:\n            - https://foo.bar.com\n            - https://*.test.com\n          allowed_headers:\n            - Example-Header\n          max_age: 7200\n        endpoint: 0.0.0.0:55690\n        compression_algorithms: [\"\", \"gzip\"]\nprocessors:\n  attributes:\n    actions:\n      - key: http.client_ip\n        from_context: metadata.x-forwarded-for\n        action: upsert\n```\n\n----------------------------------------\n\nTITLE: Creating a Child Span from Existing Span\nDESCRIPTION: This code snippet illustrates how to create a child span from an existing parent span using `opentracing.ChildOf`. It takes a parent span as input and creates a new span that is a child of the parent span. The `defer sp.Finish()` statement ensures that the span is finished when the function exits.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n    func xyz(parentSpan opentracing.Span, ...) {\n        ...\n        sp := opentracing.StartSpan(\n            \"operation_name\",\n            opentracing.ChildOf(parentSpan.Context()))\n        defer sp.Finish()\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Markdown Badge Link for OpenTelemetry OpenCensus Bridge Package\nDESCRIPTION: Markdown code for displaying a pkg.go.dev badge that links to the OpenTelemetry OpenCensus bridge package documentation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/bridge/opencensus/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/bridge/opencensus)](https://pkg.go.dev/go.opentelemetry.io/otel/bridge/opencensus)\n```\n\n----------------------------------------\n\nTITLE: Updating Target Groups in Service Discovery\nDESCRIPTION: This snippet demonstrates how to update the target groups sent to Prometheus if a target changes. If a specific target is removed, the full updated target group must be sent down the channel to ensure accurate monitoring and metrics collection.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/prometheus/prometheus/discovery/README.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n&targetgroup.Group{\n\tTargets: []model.LabelSet{\n\t\t{\n\t\t\t\"__instance__\": \"10.11.122.11:6001\",\n\t\t\t\"hostname\": \"demo-postgres-1\",\n\t\t\t\"test\": \"simple-test\",\n\t\t},\n\t},\n\tLabels: model.LabelSet{\n\t\t\"job\": \"postgres\",\n\t},\n\t\"Source\": \"file2\",\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dedicated Attribute Columns in Go for Tempo's vParquet3 Format\nDESCRIPTION: This code snippet defines the structure for dedicated attribute columns in Tempo's vParquet3 format. It includes 10 spare string columns that can be dynamically assigned to span attributes.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2023-05 vParquet3.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype DedicatedAttrs struct {\n    String01 *string `parquet:\",snappy,optional,dict\"`\n    String02 *string `parquet:\",snappy,optional,dict\"`\n    ...\n    String10 *string `parquet:\",snappy,optional,dict\"`\n}\n\ntype Span struct {\n    ...\n    DedicatedAttrs DedicatedAttrs `parquet:\"\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Options in Go\nDESCRIPTION: Implementation patterns for boolean configuration options with both default true and false cases.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype defaultFalseOption bool\n\nfunc (o defaultFalseOption) apply(c config) config {\n\tc.Bool = bool(o)\n    return c\n}\n\n// WithOption sets a T to have an option included.\nfunc WithOption() Option {\n\treturn defaultFalseOption(true)\n}\n```\n\nLANGUAGE: go\nCODE:\n```\ntype defaultTrueOption bool\n\nfunc (o defaultTrueOption) apply(c config) config {\n\tc.Bool = bool(o)\n    return c\n}\n\n// WithoutOption sets a T to have Bool option excluded.\nfunc WithoutOption() Option {\n\treturn defaultTrueOption(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Tidying Go Modules and Vendor\nDESCRIPTION: These commands tidy up the `go.mod` and `go.sum` files and copy the new/updated dependency to the `vendor/` directory.  The `GO111MODULE=on` variable ensures that Go modules are enabled, especially when the code isn't located in GOPATH.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n\"# The GO111MODULE variable can be omitted when the code isn't located in GOPATH.\nGO111MODULE=on go mod tidy\n\nGO111MODULE=on go mod vendor\"\n```\n\n----------------------------------------\n\nTITLE: Verifying IMDS Availability on Azure VMs Using curl\nDESCRIPTION: A curl command to verify that the Azure Instance Metadata Service (IMDS) endpoint is available on a Virtual Machine. This helps troubleshoot ManagedIdentityCredential authentication issues by checking if the VM can access the managed identity endpoint.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl 'http://169.254.169.254/metadata/identity/oauth2/token?resource=https://management.core.windows.net&api-version=2018-02-01' -H \"Metadata: true\"\n```\n\n----------------------------------------\n\nTITLE: Performance Benchmarks\nDESCRIPTION: Benchmark results comparing various operations against the github.com/goodsign/monday package, showing operation times and memory allocations.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/elastic/lunes/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nBenchmarkTranslate-10                    \t 3850832\t       303.2 ns/op\t     220 B/op\t       5 allocs/op\nBenchmarkTranslateWithLocale-10          \t 5149981\t       235.1 ns/op\t      76 B/op\t       4 allocs/op\nBenchmarkParse-10                        \t 2811612\t       428.1 ns/op\t     220 B/op\t       5 allocs/op\nBenchmarkParseInLocation-10              \t 2792997\t       439.2 ns/op\t     220 B/op\t       5 allocs/op\nBenchmarkParseWithLocale-10              \t 3268903\t       362.7 ns/op\t      76 B/op\t       4 allocs/op\nBenchmarkParseInLocationWithLocale-10    \t 2974732\t       390.2 ns/op\t      76 B/op\t       4 allocs/op\nBenchmarkParseMonday-10                  \t  213014\t      5584 ns/op\t    3754 B/op\t     117 allocs/op\nBenchmarkParseInLocationMonday-10        \t  211826\t      5593 ns/op\t    3754 B/op\t     117 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Blocks Processor for All Spans in YAML\nDESCRIPTION: YAML configuration to run TraceQL metrics queries against all spans, not just server spans, in Tempo's metrics generator.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/upgrade.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics_generator:\n  processor:\n    local_blocks:\n      filter_server_spans: false\n```\n\n----------------------------------------\n\nTITLE: Handling Compress Function Errors in Go\nDESCRIPTION: This snippet shows the possible error values returned by the Compress function and their meanings. It's important to handle these errors appropriately in your code.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/klauspost/compress/fse/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n| Error               | Description                                                                 |\n|---------------------|-----------------------------------------------------------------------------|\n| `<nil>`             | Everything ok, output is returned                                             |\n| `ErrIncompressible` | Returned when input is judged to be too hard to compress                    |\n| `ErrUseRLE`         | Returned from the compressor when the input is a single byte value repeated |\n| `(error)`           | An internal error occurred.                                                 |\n```\n\n----------------------------------------\n\nTITLE: Updated Struct Tag Format in go-toml v2\nDESCRIPTION: Comparison of struct tag syntax between v1 and v2, where v2 consolidates multiple separate tags (toml, multiline, commented, omitempty) into a single comma-separated format to be more like the standard library.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype doc struct {\n\t// v1\n\tF string `toml:\"field\" multiline:\"true\" omitempty:\"true\" commented:\"true\"`\n\t// v2\n\tF string `toml:\"field,multiline,omitempty,commented\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Go Package Dependencies for Grafana Tempo\nDESCRIPTION: This snippet shows the structure of how Go package dependencies are listed in the file. It includes the package import path, version information, and any explicit Go version requirements.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/modules.txt#2025-04-17_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\n# go.opentelemetry.io/auto/sdk v1.1.0\n## explicit; go 1.22.0\ngo.opentelemetry.io/auto/sdk\ngo.opentelemetry.io/auto/sdk/internal/telemetry\n# go.opentelemetry.io/collector v0.123.0\n## explicit; go 1.23.0\ngo.opentelemetry.io/collector/internal/statusutil\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate text template for applying the Apache 2.0 license to a project. Includes copyright notice, license declaration, and standard permissions and limitations text.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/aws/aws-sdk-go-v2/credentials/LICENSE.txt#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: ExtractPatterns Converter Usage in OTTL\nDESCRIPTION: The ExtractPatterns converter uses regex pattern matching with named capture groups to extract data from a string into a pcommon.Map. It requires at least one named capture group and returns an empty map if no matches are found.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_23\n\nLANGUAGE: ottl\nCODE:\n```\nExtractPatterns(resource.attributes[\"k8s.change_cause\"], \"GIT_SHA=(?P<git.sha>\\w+)\")\n```\n\nLANGUAGE: ottl\nCODE:\n```\nExtractPatterns(log.body, \"^(?P<timestamp>\\\\w+ \\\\w+ [0-9]+:[0-9]+:[0-9]+) (?P<hostname>([A-Za-z0-9-_]+)) (?P<process>\\\\w+)(\\\\[(?P<pid>\\\\d+)\\\\])?: (?P<message>.*)$\")\n```\n\n----------------------------------------\n\nTITLE: Metric Creation Method Changes in OpenTelemetry SDK\nDESCRIPTION: Examples of new metric creation methods replacing deprecated InstrumentProvider methods in the OpenTelemetry SDK metric package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n// Old method\nCounter() // from InstrumentProvider\n\n// New methods\nMeter.Int64ObservableCounter()\nMeter.Float64ObservableCounter()\nMeter.Int64Counter()\nMeter.Float64Counter()\n\n// Old method\nUpDownCounter() // from InstrumentProvider\n\n// New methods \nMeter.Int64ObservableUpDownCounter()\nMeter.Float64ObservableUpDownCounter()\nMeter.Int64UpDownCounter()\nMeter.Float64UpDownCounter()\n\n// Old method\nGauge() // from InstrumentProvider \n\n// New methods\nMeter.Int64ObservableGauge()\nMeter.Float64ObservableGauge()\n\n// Old method \nHistogram() // from InstrumentProvider\n\n// New methods\nMeter.Int64Histogram()\nMeter.Float64Histogram()\n```\n\n----------------------------------------\n\nTITLE: Running All Integration Tests\nDESCRIPTION: This command executes all integration tests located under the `integration/e2e` directory.  The `-count=1` flag disables caching during test runs, ensuring each test runs in a clean state. The `-v` flag enables verbose output, providing more detailed information about each test's execution.\nSOURCE: https://github.com/grafana/tempo/blob/main/integration/e2e/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n\"go test -count=1 -v ./integration/e2e/...\"\n```\n\n----------------------------------------\n\nTITLE: Rename of S3 TLS Configuration Option in Tempo Storage\nDESCRIPTION: This configuration snippet shows the renaming of `insecure_skip_verify` to `tls_insecure_skip_verify` in the `s3` section of the Tempo storage configuration. The change requires users to update their existing configurations to avoid deployment issues.\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  trace:\n    s3:\n      insecure_skip_verify: true   // renamed to tls_insecure_skip_verify\n```\n\n----------------------------------------\n\nTITLE: Specifying codespell Dependency Version for Grafana Tempo\nDESCRIPTION: This line defines a dependency on the codespell package, version 2.4.1. Codespell is typically used for identifying and correcting common misspellings in text files, suggesting its use in quality assurance for the Grafana Tempo project.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncodespell==2.4.1\n```\n\n----------------------------------------\n\nTITLE: Using OpenCensus Tags with Go Profiler\nDESCRIPTION: Example of using OpenCensus tags as profiler labels in Go 1.9+. This allows profiling data to be associated with application-specific metadata like OS version and user ID.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opencensus.io/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nctx, err = tag.New(ctx,\n\ttag.Insert(osKey, \"macOS-10.12.5\"),\n\ttag.Insert(userIDKey, \"fff0989878\"),\n)\nif err != nil {\n\tlog.Fatal(err)\n}\ntag.Do(ctx, func(ctx context.Context) {\n\t// Do work.\n\t// When profiling is on, samples will be\n\t// recorded with the key/values from the tag map.\n})\n```\n\n----------------------------------------\n\nTITLE: Reading Configuration from io.Reader\nDESCRIPTION: Example of reading configuration directly from a byte buffer containing YAML data.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nviper.SetConfigType(\"yaml\") // or viper.SetConfigType(\"YAML\")\n\n// any approach to require this configuration into your program.\nvar yamlExample = []byte(`\nHacker: true\nname: steve\nhobbies:\n- skateboarding\n- snowboarding\n- go\nclothing:\n  jacket: leather\n  trousers: denim\nage: 35\neyes : brown\nbeard: true\n`)\n\nviper.ReadConfig(bytes.NewBuffer(yamlExample))\n\nviper.Get(\"name\") // this would be \"steve\"\n```\n\n----------------------------------------\n\nTITLE: Receivers Dependencies Block\nDESCRIPTION: Declares dependencies for various OpenTelemetry receivers including Jaeger, Kafka, OpenCensus and Zipkin with their internal components.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/modules.txt#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n# github.com/open-telemetry/opentelemetry-collector-contrib/receiver/jaegerreceiver v0.123.0\n## explicit; go 1.23.7\ngithub.com/open-telemetry/opentelemetry-collector-contrib/receiver/jaegerreceiver\ngithub.com/open-telemetry/opentelemetry-collector-contrib/receiver/jaegerreceiver/internal/metadata\ngithub.com/open-telemetry/opentelemetry-collector-contrib/receiver/jaegerreceiver/internal/udpserver\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Exporter Support Matrix\nDESCRIPTION: Table showing supported features (Logs, Metrics, Traces) for different OpenTelemetry exporters.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/README.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Exporter                              | Logs | Metrics | Traces |\n|---------------------------------------|:----:|:-------:|:------:|\n| [OTLP](./exporters/otlp/)             |  ✓   |    ✓    |   ✓    |\n| [Prometheus](./exporters/prometheus/) |      |    ✓    |        |\n| [stdout](./exporters/stdout/)         |  ✓   |    ✓    |   ✓    |\n| [Zipkin](./exporters/zipkin/)         |      |         |   ✓    |\n```\n\n----------------------------------------\n\nTITLE: Basic TraceQL Query Structure\nDESCRIPTION: Demonstrates the simplest form of a TraceQL query. This query selects all spans without any filtering conditions, returning all matching spans and their associated traces within the specified time interval and result limits.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/shared/traceql-query-structure.md#2025-04-17_snippet_0\n\nLANGUAGE: traceql\nCODE:\n```\n{ }\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Make\nDESCRIPTION: This command is used to execute the tests for the Grafana Tempo project. It ensures that all tests pass before committing and pushing changes, maintaining code quality and stability.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\n\"make test         # Make sure all the tests pass before you commit and push :)\"\n```\n\n----------------------------------------\n\nTITLE: gRPC Streaming Query with tempo-cli\nDESCRIPTION: Performs a gRPC streaming query using tempo-cli to search Tempo data. Requires tempo-cli and Tempo to be configured for gRPC.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/multi-tenant/readme.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ tempo-cli query api search \"0.0.0.0:3200\" --use-grpc --limit 10000 \"{}\" \"2023-12-05T08:11:18Z\" \"2023-12-05T08:12:18Z\" --org-id=\"test\"\n\n```\n\n----------------------------------------\n\nTITLE: Querying Daily Service Calls - Instant Query\nDESCRIPTION: PromQL query to show total calls between all client/server pairs over a 1-day period. Shows more recent connectivity patterns between services.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/metrics-generator/service_graphs/metrics-queries.md#2025-04-17_snippet_3\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(traces_service_graph_request_server_seconds_count{}[1d])) by (server, client) > 0\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Formatting Code\nDESCRIPTION: This command executes various checks, including `vet`, `fmt`, documentation regeneration, and running all tests. It ensures code quality and consistency before submitting a pull request.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-middleware/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake all\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Kubernetes API Validation (After Refactor PR)\nDESCRIPTION: This code snippet presents the benchmark results for validating the Kubernetes Swagger API after a refactoring pull request. The metrics include time per operation, bytes per operation, and allocations per operation, showing minor improvements compared to the previous version.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/go-openapi/validate/BENCHMARK.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n```\ngo test -bench Spec\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/validate\ncpu: AMD Ryzen 7 5800X 8-Core Processor\nBenchmark_KubernetesSpec/validating_kubernetes_API-16         \t       1\t4064535557 ns/op\t3379715592 B/op\t25320330 allocs/op\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Go Dependencies for Grafana Tempo\nDESCRIPTION: List of Go module imports with explicit version requirements. The dependencies include packages from various providers like Envoy, Google, Redis, and utility libraries. The project requires Go version 1.22.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/modules.txt#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n## explicit; go 1.22\ngithub.com/envoyproxy/go-control-plane/envoy/admin/v3\ngithub.com/envoyproxy/go-control-plane/envoy/annotations\ngithub.com/envoyproxy/go-control-plane/envoy/config/accesslog/v3\ngithub.com/envoyproxy/go-control-plane/envoy/config/bootstrap/v3\ngithub.com/envoyproxy/go-control-plane/envoy/config/cluster/v3\ngithub.com/envoyproxy/go-control-plane/envoy/config/common/matcher/v3\ngithub.com/envoyproxy/go-control-plane/envoy/config/core/v3\ngithub.com/envoyproxy/go-control-plane/envoy/config/endpoint/v3\ngithub.com/envoyproxy/go-control-plane/envoy/config/listener/v3\n# github.com/envoyproxy/protoc-gen-validate v1.2.1\n## explicit; go 1.21.1\n# github.com/go-redis/redis/v8 v8.11.5\n## explicit; go 1.17\n# github.com/golang/protobuf v1.5.4\n## explicit; go 1.17\n```\n\n----------------------------------------\n\nTITLE: Generating Service Graph Request Metrics in Prometheus\nDESCRIPTION: Example of a Prometheus metric generated by the service graph processor in Grafana Tempo. This metric counts the total number of requests between two nodes in the service graph.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/metrics-generator/service_graphs/_index.md#2025-04-17_snippet_0\n\nLANGUAGE: promql\nCODE:\n```\ntraces_service_graph_request_total{client=\"app\", server=\"db\", connection_type=\"database\"} 20\n```\n\n----------------------------------------\n\nTITLE: Defining Value in Jsonnet\nDESCRIPTION: The 'val' function serves as shorthand for creating a documentation element of type value using 'value.new', with specifications for type, help text, and a default value.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/jsonnet-libs/docsonnet/doc-util/README.md#2025-04-17_snippet_5\n\nLANGUAGE: jsonnet\nCODE:\n```\nval(type, help, default)\n```\n\n----------------------------------------\n\nTITLE: Checking Feature Gate Status in Go\nDESCRIPTION: Shows how to check if a feature gate is enabled using the global feature gate registry. It's recommended to cache the result for repeated checks to avoid performance issues.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/featuregate/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif myFeatureGate.IsEnabled() {\n\tsetupNewFeature()\n}\n```\n\n----------------------------------------\n\nTITLE: Version History in Markdown Format\nDESCRIPTION: Chronological version history documenting changes, bug fixes, and dependency updates for the Grafana Tempo project.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/sts/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.33.17 (2025-03-04.2)\n\n* **Bug Fix**: Add assurance test for operation order.\n\n# v1.33.16 (2025-02-27)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Parameter Store Provider in Koanf\nDESCRIPTION: This snippet shows how to initialize the AWS Parameter Store provider in Koanf. It uses parameterstore.Config{} and an optional function to transform environment variables.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/knadh/koanf/v2/README.md#2025-04-17_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nvault.ParameterStore(parameterstore.Config{}, f func(s string) string)\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Result Limits in YAML\nDESCRIPTION: YAML configuration for setting maximum and default search result limits in the query frontend. This change moves the configuration from the querier to the query frontend.\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nquery_frontend:\n  search:\n    max_result_limit: <value>\n    default_result_limit: <value>\n```\n\n----------------------------------------\n\nTITLE: Go Module Dependencies List\nDESCRIPTION: Detailed listing of Go module dependencies including their versions and sub-packages. Each entry specifies the required Go version and includes all internal packages that are part of the module.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/modules.txt#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n## explicit; go 1.22.0\ngo.opentelemetry.io/otel/sdk/metric\ngo.opentelemetry.io/otel/sdk/metric/exemplar\ngo.opentelemetry.io/otel/sdk/metric/internal\ngo.opentelemetry.io/otel/sdk/metric/internal/aggregate\ngo.opentelemetry.io/otel/sdk/metric/internal/x\ngo.opentelemetry.io/otel/sdk/metric/metricdata\n# go.opentelemetry.io/otel/trace v1.35.0\n## explicit; go 1.22.0\ngo.opentelemetry.io/otel/trace\ngo.opentelemetry.io/otel/trace/embedded\ngo.opentelemetry.io/otel/trace/internal/telemetry\ngo.opentelemetry.io/otel/trace/noop\n```\n\n----------------------------------------\n\nTITLE: Configuring TempoStack Instance with GCS Storage\nDESCRIPTION: This YAML snippet shows how to reference the GCS secret in a TempoStack instance configuration, specifying the secret name and type.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/object-storage.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  storage:\n    secret:\n      name: tempostack-dev-gcs\n      type: gcs\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for Prometheus Exporter in Markdown\nDESCRIPTION: This snippet shows how to embed a PkgGoDev badge in a markdown file, linking to the documentation for the OpenTelemetry Prometheus exporter package.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/exporters/prometheus/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/exporters/prometheus)](https://pkg.go.dev/go.opentelemetry.io/otel/exporters/prometheus)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Type in Go\nDESCRIPTION: This snippet demonstrates how to create a custom error type in Go by implementing the error interface. It shows a simple struct with a custom Error() method.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype MyCustomErr struct {\n  Msg string\n}\nfunc (m MyCustomErr) Error() string { // This implements \"error\"\n  return m.Msg\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Grafana Alloy with Helm\nDESCRIPTION: This Bash command deploys Grafana Alloy using Helm, applying the configuration from the values.yaml file.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/set-up-test-app.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f values.yaml grafana-alloy grafana/alloy\n```\n\n----------------------------------------\n\nTITLE: Creating New Subpackage in Jsonnet\nDESCRIPTION: The 'package.newSub' function is used to create a new subpackage with a specified name and help text, without preconfigured templates.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/jsonnet-libs/docsonnet/doc-util/README.md#2025-04-17_snippet_15\n\nLANGUAGE: jsonnet\nCODE:\n```\npackage.newSub(name, help)\n```\n\n----------------------------------------\n\nTITLE: Removing DataLake Related Paths\nDESCRIPTION: YAML directive to remove paths containing 'filesystem' from the swagger document.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"]\n  transform: >\n    for (const property in $)\n    {\n        if (property.includes('filesystem'))\n        {\n            delete $[property];\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Compose Setup\nDESCRIPTION: This command halts all running Docker Compose services and removes volumes. It is used to stop and clean up the setup once debugging is complete.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/docker-compose/debug/readme.md#2025-04-17_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ndocker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Querying Series Limitation Rate in PromQL\nDESCRIPTION: A PromQL query to check if metrics series are being limited due to reaching the maximum allowed active series count.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/troubleshooting/metrics-generator.md#2025-04-17_snippet_4\n\nLANGUAGE: promql\nCODE:\n```\nsum(rate(tempo_metrics_generator_registry_series_limited_total{}[1m]))\n```\n\n----------------------------------------\n\nTITLE: Filter Processor Telemetry Metrics Table - Logs\nDESCRIPTION: Metric specification table for otelcol_processor_filter_logs.filtered showing unit, metric type, value type and monotonic properties\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/processor/filterprocessor/documentation.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Unit | Metric Type | Value Type | Monotonic |\n| ---- | ----------- | ---------- | --------- |\n| 1 | Sum | Int | true |\n```\n\n----------------------------------------\n\nTITLE: Modified Docker Compose YAML Header\nDESCRIPTION: The beginning of the docker-compose.yaml file after removing the tempo service, showing only the version and the first service definition.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/linux.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n\nk6-tracing:\n```\n\n----------------------------------------\n\nTITLE: ConvertAttributesToElementsXML Converter Usage in OTTL\nDESCRIPTION: The ConvertAttributesToElementsXML converter transforms XML attributes into child elements. It accepts an optional XPath parameter to target specific elements for conversion.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_18\n\nLANGUAGE: ottl\nCODE:\n```\nConvertAttributesToElementsXML(log.body)\n```\n\nLANGUAGE: ottl\nCODE:\n```\nConvertAttributesToElementsXML(log.body, \"/Log/Record\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Loki Backend Automatic Logging in Grafana Tempo\nDESCRIPTION: Configuration example demonstrating how to set up automatic logging to push logs directly to a Loki instance that is configured in the same Grafana Agent.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/grafana-agent/automatic-logging.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntraces:\n  configs:\n  - name: default\n    ...\n    automatic_logging:\n      backend: logs_instance\n      logs_instance_name: default\n      roots: true\n```\n\n----------------------------------------\n\nTITLE: Modifying Function Help Text in Jsonnet\nDESCRIPTION: The 'func.withHelp' function allows the help text of a given function to be overridden for better clarity.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/jsonnet-libs/docsonnet/doc-util/README.md#2025-04-17_snippet_10\n\nLANGUAGE: jsonnet\nCODE:\n```\nfunc.withHelp(help)\n```\n\n----------------------------------------\n\nTITLE: Setting B3 Propagator Encoding in Go\nDESCRIPTION: Demonstrates how to set the injection encoding for the B3 propagator using the new B3Encoding type.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-17_snippet_42\n\nLANGUAGE: Go\nCODE:\n```\nimport \"go.opentelemetry.io/otel/propagators\"\n\n// Set B3 encoding to use single header\nprop := propagators.B3{\n  InjectEncoding: propagators.B3SingleHeader,\n}\n```\n\n----------------------------------------\n\nTITLE: Keeping Matching Keys in Map Attributes in OTTL\nDESCRIPTION: Function to retain only keys that match a specified regex pattern, allowing selective attribute preservation.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_3\n\nLANGUAGE: OTTL\nCODE:\n```\nkeep_matching_keys(log.attributes, \"(?i).*version.*\")\n```\n\nLANGUAGE: OTTL\nCODE:\n```\nkeep_matching_keys(resource.attributes, \"(?i).*version.*\")\n```\n\n----------------------------------------\n\nTITLE: Checking for Double Type in Go\nDESCRIPTION: The IsDouble function returns true if the given value is a double (float64 or pcommon.ValueTypeDouble), and false otherwise.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_35\n\nLANGUAGE: Go\nCODE:\n```\nIsDouble(log.body)\n```\n\nLANGUAGE: Go\nCODE:\n```\nIsDouble(log.attributes[\"maybe a double\"])\n```\n\n----------------------------------------\n\nTITLE: Applying MinIO Configuration Using Kubectl Command in Bash\nDESCRIPTION: This bash command is used to apply the MinIO configuration defined in the minio.yaml file. It requires the kubectl command-line tool and applies the configuration to the specified namespace within Kubernetes.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/tanka.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply --namespace tempo -f minio.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Function Argument from Schema in Jsonnet\nDESCRIPTION: The 'argument.fromSchema' function creates a new function argument from a given JSON schema, allowing for precise type information.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/jsonnet-libs/docsonnet/doc-util/README.md#2025-04-17_snippet_6\n\nLANGUAGE: jsonnet\nCODE:\n```\nargument.fromSchema(name, schema)\n```\n\n----------------------------------------\n\nTITLE: Updating Minimum Go Version to 1.20\nDESCRIPTION: A feature update that bumps the minimum Go version to 1.20 per the language support policy.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/internal/presigned-url/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* **Feature**: Bump minimum Go version to 1.20 per our language support policy.\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Trace Receivers in YAML\nDESCRIPTION: Enables OTLP trace receivers for both gRPC and HTTP protocols.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/helm-charts/tempo-distributed/get-started-helm-charts/_index.md#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ntraces:\n  otlp:\n    grpc:\n      enabled: true\n    http:\n      enabled: true\n```\n\n----------------------------------------\n\nTITLE: Disabling UDP Address Re-resolution in Jaeger Go Client\nDESCRIPTION: Set DisableAttemptReconnecting to true or use an environment variable to disable periodic re-resolving of UDP server address.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/uber/jaeger-client-go/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nDisableAttemptReconnecting=true\n```\n\nLANGUAGE: shell\nCODE:\n```\nJAEGER_REPORTER_ATTEMPT_RECONNECTING_DISABLED=true\n```\n\n----------------------------------------\n\nTITLE: Modifying Object Fields in Jsonnet\nDESCRIPTION: The 'object.withFields' method allows for the modification of the fields property within an existing object definition.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/jsonnet-libs/docsonnet/doc-util/README.md#2025-04-17_snippet_12\n\nLANGUAGE: jsonnet\nCODE:\n```\nobject.withFields(fields)\n```\n\n----------------------------------------\n\nTITLE: Creating New Function in Jsonnet\nDESCRIPTION: The 'func.new' function initializes a new function with optional documentation and argument specifications.\nSOURCE: https://github.com/grafana/tempo/blob/main/example/tk/vendor/github.com/jsonnet-libs/docsonnet/doc-util/README.md#2025-04-17_snippet_8\n\nLANGUAGE: jsonnet\nCODE:\n```\nfunc.new(help, args)\n```\n\n----------------------------------------\n\nTITLE: Automatically Fixing Linter Violations for Viper in Shell\nDESCRIPTION: Command to automatically fix some linter violations in the Viper project using Make.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-17_snippet_39\n\nLANGUAGE: shell\nCODE:\n```\nmake fmt\n```\n\n----------------------------------------\n\nTITLE: Kafka Log Record Example\nDESCRIPTION: Example of a processed log record showing extracted headers as resource attributes.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/receiver/kafkareceiver/README.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  ...\n  body: Hello,\n  resource: {\n    kafka.header.header1: value1,\n    kafka.header.header2: value2,\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: KeyValue Parsing Example\nDESCRIPTION: Example showing the result of parsing a key-value string into a map structure.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/ottlfuncs/README.md#2025-04-17_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{ \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": \"v3\" }\n```\n\n----------------------------------------\n\nTITLE: Adding Support for HTTP Client Metrics\nDESCRIPTION: A feature update that adds support for HTTP client metrics in Grafana Tempo.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/internal/presigned-url/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* **Feature**: Add support for HTTP client metrics.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Configuration Re-resolving Process in Markdown\nDESCRIPTION: This code snippet illustrates the process of re-resolving configuration after an update using ASCII art in a Markdown code block. It shows the interaction between the Resolver and Provider components during the re-resolving process.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/confmap/README.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```terminal\n         Resolver              Provider\n            │                     │\n   Watch    │                     │\n───────────►│                     │\n            │                     │\n            .                     .\n            .                     .\n            .                     .\n            │      onChange       │\n            │◄────────────────────┤\n◄───────────┤                     │\n            |                     |\n  Resolve   │                     │\n───────────►│                     │\n            │                     │\n            │      Retrieve       │\n            ├────────────────────►│\n            │        Conf         │\n            │◄────────────────────┤\n◄───────────┤                     │\n```\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results for 64/128-bit MurmurHash3 (amd64)\nDESCRIPTION: Performance comparison benchmarks between implementations for 64/128-bit hash calculations on amd64 architecture with assembly optimizations.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/twmb/murmur3/README.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n64Sizes/32-12     2.34GB/s ± 5%  4.36GB/s ± 3%  +85.86%  (p=0.000 n=10+10)\n64Sizes/64-12     3.62GB/s ± 5%  6.27GB/s ± 3%  +73.37%  (p=0.000 n=10+9)\n64Sizes/128-12    5.12GB/s ± 3%  7.70GB/s ± 6%  +50.27%  (p=0.000 n=10+10)\n64Sizes/256-12    6.35GB/s ± 2%  8.61GB/s ± 3%  +35.50%  (p=0.000 n=10+10)\n64Sizes/512-12    6.58GB/s ± 7%  8.59GB/s ± 4%  +30.48%  (p=0.000 n=10+9)\n64Sizes/1024-12   7.49GB/s ± 3%  8.81GB/s ± 2%  +17.66%  (p=0.000 n=10+10)\n64Sizes/2048-12   8.06GB/s ± 2%  8.90GB/s ± 4%  +10.49%  (p=0.000 n=9+10)\n64Sizes/4096-12   8.27GB/s ± 6%  8.90GB/s ± 4%   +7.54%  (p=0.000 n=10+10)\n64Sizes/8192-12   8.35GB/s ± 4%  9.00GB/s ± 3%   +7.80%  (p=0.000 n=10+9)\n```\n\n----------------------------------------\n\nTITLE: Using Standard JSON Library in Go\nDESCRIPTION: Example of how to use the standard encoding/json package in Go for marshaling data to JSON.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"encoding/json\"\njson.Marshal(&data)\n```\n\n----------------------------------------\n\nTITLE: Kafka Message Example\nDESCRIPTION: Example of a Kafka message structure with headers that can be extracted.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/open-telemetry/opentelemetry-collector-contrib/receiver/kafkareceiver/README.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  event: Hello,\n  headers: {\n    header1: value1,\n    header2: value2,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Docker Compose Example Directory\nDESCRIPTION: Command to change directory to the local Docker Compose example in the Tempo repository.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/linux.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd tempo/example/docker-compose/local\n```\n\n----------------------------------------\n\nTITLE: Zap Logger Changelog Entry Format\nDESCRIPTION: Standard format used for documenting version changes in the Zap logger, including version number, date, bugfixes, enhancements, and contributor acknowledgments.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.uber.org/zap/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.16.0 (1 Sep 2020)\n\nBugfixes:\n* [#828][]: Fix missing newline in IncreaseLevel error messages.\n* [#835][]: Fix panic in JSON encoder when encoding times or durations\n  without specifying a time or duration encoder.\n* [#843][]: Honor CallerSkip when taking stack traces.\n* [#862][]: Fix the default file permissions to use `0666` and rely on the umask instead.\n* [#854][]: Encode `<nil>` for nil `Stringer` instead of a panic error log.\n\nEnhancements:\n* [#629][]: Added `zapcore.TimeEncoderOfLayout` to easily create time encoders\n  for custom layouts.\n* [#697][]: Added support for a configurable delimiter in the console encoder.\n* [#852][]: Optimize console encoder by pooling the underlying JSON encoder.\n* [#844][]: Add ability to include the calling function as part of logs.\n* [#843][]: Add `StackSkip` for including truncated stacks as a field.\n* [#861][]: Add options to customize Fatal behaviour for better testability.\n```\n\n----------------------------------------\n\nTITLE: Markdown Badge Implementation for PkgGoDev\nDESCRIPTION: Markdown code that implements a badge linking to the package documentation on pkg.go.dev for the STDOUT Log Exporter.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/exporters/stdout/stdoutlog/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/exporters/stdout/stdoutlog)](https://pkg.go.dev/go.opentelemetry.io/otel/exporters/stdout/stdoutlog)\n```\n\n----------------------------------------\n\nTITLE: Getting OpenTelemetry Go Package\nDESCRIPTION: Command to fetch the OpenTelemetry Go package using Go modules.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo get -d go.opentelemetry.io/otel\n```\n\n----------------------------------------\n\nTITLE: Running ULID Tests\nDESCRIPTION: Command to run all tests in the ULID package and its subpackages.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/oklog/ulid/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Deploying TempoStack with Gateway Enabled in YAML\nDESCRIPTION: This YAML configuration shows how to deploy a TempoStack instance with the gateway enabled. It includes OIDC authentication setup for a specific tenant, using the previously created secret for client credentials.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/setup/operator/grafana_datasource.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n template:\n  gateway:\n   enabled: true\n tenants:\n  mode: static\n  authentication:\n    - tenantName: test-oidc\n      tenantId: test-oidc\n      oidc:\n      issuerURL: http://dex:30556/dex\n      redirectURL: http://tempo-foo-gateway:8080/oidc/test-oidc/callback\n      usernameClaim: email\n      secret:\n       name: oidc-test\n```\n\n----------------------------------------\n\nTITLE: Package Badge Markdown\nDESCRIPTION: Markdown code showing the package documentation badge that links to the Go package documentation on pkg.go.dev\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/otel/exporters/otlp/otlplog/otlploggrpc/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/exporters/otlp/otlplog/otlploggrpc)](https://pkg.go.dev/go.opentelemetry.io/otel/exporters/otlp/otlplog/otlploggrpc)\n```\n\n----------------------------------------\n\nTITLE: Documenting Authentication Configuration\nDESCRIPTION: Configuration structure for authentication settings, specifying the authenticator extension name.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/receiver/otlpreceiver/config.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n### configauth-Authentication\n\n| Name          | Type   | Default    | Docs                                                                                                           |\n|---------------|--------|------------|----------------------------------------------------------------------------------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: Running Cobra Tests\nDESCRIPTION: Commands for running tests and formatting code in the Cobra project using Go test and make commands.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/spf13/cobra/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./...\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake all\n```\n\n----------------------------------------\n\nTITLE: Querying Service-to-Service Call Rates in TraceQL\nDESCRIPTION: A TraceQL metrics query that finds call rates between two specific services using span relationship operators and rate aggregation.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/design-proposals/2023-11 TraceQL Metrics.md#2025-04-17_snippet_1\n\nLANGUAGE: traceql\nCODE:\n```\n{resource.service.name=\"A\"} >> {resouce.service.name=\"B\"} | rate()\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Installing Tools\nDESCRIPTION: Commands for installing required development tools and running the test suite. The make install-tools command only needs to be run once for initial setup.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ make install-tools  # Only first time.\n$ make\n```\n\n----------------------------------------\n\nTITLE: Old Spanmetrics Metric Names\nDESCRIPTION: Previous metric naming convention for span metrics before the breaking change to match OTel conventions.\nSOURCE: https://github.com/grafana/tempo/blob/main/CHANGELOG.md#2025-04-17_snippet_19\n\nLANGUAGE: text\nCODE:\n```\ntraces_spanmetrics_duration_seconds_{sum,count,bucket}\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This snippet provides a template for the boilerplate notice to be included when applying the Apache License 2.0 to a project. It includes placeholders for the copyright year and owner, as well as the full text of the license notice.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/aws/aws-sdk-go-v2/internal/endpoints/v2/LICENSE.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging for Span Interactions in Jaeger Go Client\nDESCRIPTION: Set a new debug log level to log all span interactions for detailed tracing information.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/uber/jaeger-client-go/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Code to set debug log level not provided in changelog\n```\n\n----------------------------------------\n\nTITLE: MIT License Text for goldmark\nDESCRIPTION: This snippet shows the MIT license text found for the goldmark dependency. It grants broad permissions for use, modification, and distribution of the software, subject to including the copyright notice and permission notice in all copies or substantial portions of the software.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/elastic/go-grok/NOTICE.txt#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n\"MIT License\n\nCopyright (c) 2019 Yusuke Inuzuka\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \\\"Software\\\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Struct Sizes in Go\nDESCRIPTION: This function compares the sizes of two structs and returns the difference. It uses the 'Of' function to calculate the size of each struct and then subtracts them.\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/github.com/alicebob/miniredis/v2/size/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc Diff(v1, v2 interface{}) int {\n\treturn Of(v1) - Of(v2)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Stdout Automatic Logging in Grafana Tempo\nDESCRIPTION: Basic configuration example showing how to set up automatic logging to stdout for trace roots. This is recommended for getting started with automatic logging.\nSOURCE: https://github.com/grafana/tempo/blob/main/docs/sources/tempo/configuration/grafana-agent/automatic-logging.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntraces:\n  configs:\n  - name: default\n    ...\n    automatic_logging:\n      backend: stdout\n      roots: true\n```\n\n----------------------------------------\n\nTITLE: TLS Server Configuration\nDESCRIPTION: TLS configuration options for secure server communication including certificate and key file paths\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.opentelemetry.io/collector/receiver/otlpreceiver/config.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Name           | Type   | Default    | Docs                                                                                                                                                                                                                                                             |\n|----------------|--------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| ca_file        | string | <no value> | Path to the CA cert. For a client this verifies the server certificate. For a server this verifies client certificates. If empty uses system root CA. (optional)                                                                                                 |\n| cert_file      | string | <no value> | Path to the TLS cert to use for TLS required connections. (optional)                                                                                                                                                                                             |\n| key_file       | string | <no value> | Path to the TLS key to use for TLS required connections. (optional)                                                                                                                                                                                              |\n| client_ca_file | string | <no value> | Path to the TLS cert to use by the server to verify a client certificate. (optional) This sets the ClientCAs and ClientAuth to RequireAndVerifyClientCert in the TLSConfig. Please refer to https://godoc.org/crypto/tls#Config for more information. (optional) |\n```\n\n----------------------------------------\n\nTITLE: TestMain Setup with Goleak Verification in Go\nDESCRIPTION: Implementation of TestMain that uses goleak.VerifyTestMain() to check for goroutine leaks after all package tests complete\nSOURCE: https://github.com/grafana/tempo/blob/main/vendor/go.uber.org/goleak/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc TestMain(m *testing.M) {\n\tgoleak.VerifyTestMain(m)\n}\n```"
  }
]