[
  {
    "owner": "vonagam",
    "repo": "ash_jason",
    "content": "TITLE: Adding AshJason Extension to Ash Resource\nDESCRIPTION: Shows how to include AshJason.Resource in the extensions list when defining an Ash resource. This enables automatic implementation of the Jason.Encoder protocol for the resource.\nSOURCE: https://github.com/vonagam/ash_jason/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Example.Resource do\n  use Ash.Resource,\n    extensions: [AshJason.Resource]\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Pick Options for JSON Serialization\nDESCRIPTION: Demonstrates various ways to use the pick configuration option to control which fields from an Ash resource are included in the JSON output. Includes examples for explicit selection, handling private/sensitive fields, and inclusion/exclusion patterns.\nSOURCE: https://github.com/vonagam/ash_jason/blob/master/README.md#2025-04-19_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\njason do\n  # Pick only those listed keys\n  pick [:only_some_field]\n\n  # Pick non-sensitive fields\n  pick %{private?: true}\n\n  # Pick non-private fields\n  pick %{sensitive?: true}\n\n  # Pick all fields\n  pick %{private?: true, sensitive?: true}\n\n  # Pick usual but include and exclude some specific keys\n  pick %{include: [:ok_private_field], exclude: [:irrelevant_public_field]}\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Output with Functions\nDESCRIPTION: Demonstrates how to use the customize option with a function to make arbitrary modifications to the JSON output. The function receives the current result and resource record, allowing for complex transformations.\nSOURCE: https://github.com/vonagam/ash_jason/blob/master/README.md#2025-04-19_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\njason do\n  customize fn result, _record ->\n    result |> List.keystore(:custom_key, 0, {:custom_key, \"custom_value\"})\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring AshJason with DSL\nDESCRIPTION: Example of using the jason DSL section to configure JSON serialization options for an Ash resource. This shows the basic structure for adding configuration options.\nSOURCE: https://github.com/vonagam/ash_jason/blob/master/README.md#2025-04-19_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Example.Resource do\n  use Ash.Resource,\n    extensions: [AshJason.Resource]\n\n  jason do\n    # options\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Renaming Keys in JSON Output\nDESCRIPTION: Demonstrates various ways to rename keys in the JSON output using the rename option. Includes examples with maps, keyword lists, and functions for dynamic key renaming.\nSOURCE: https://github.com/vonagam/ash_jason/blob/master/README.md#2025-04-19_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\njason do\n  # Rename with map\n  rename %{from_key: \"to_key\"}\n\n  # Rename with list\n  rename from_key: \"to_key\"\n\n  # Rename with a function\n  rename fn name -> String.capitalize(to_string(name)) end\nend\n```\n\n----------------------------------------\n\nTITLE: Merging Values into JSON Output\nDESCRIPTION: Shows how to use the merge option to add additional key-value pairs to the JSON output. Demonstrates both map and keyword list formats for specifying values to merge.\nSOURCE: https://github.com/vonagam/ash_jason/blob/master/README.md#2025-04-19_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\njason do\n  # Merge with map\n  merge %{key: \"value\"}\n\n  # Merge with list\n  merge key: \"value\"\nend\n```\n\n----------------------------------------\n\nTITLE: Ordering Keys in JSON Output\nDESCRIPTION: Shows how to control the order of keys in the resulting JSON using the order option. Includes examples for default sorting, custom sorting functions, and explicit ordering with selective inclusion.\nSOURCE: https://github.com/vonagam/ash_jason/blob/master/README.md#2025-04-19_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\njason do\n  # Order with standard `Enum.sort`\n  order true\n\n  # Order with a custom sort function\n  order fn keys -> Enum.sort(keys, :desc) end\n\n  # Order in accordance with a list\n  order [:only, :these, :keys, :in, :that, \"order\"]\nend\n```\n\n----------------------------------------\n\nTITLE: Adding AshJason Dependency in Mix Project\nDESCRIPTION: Instructions for adding AshJason to your project's dependencies. This snippet shows how to include the AshJason package in your mix.exs file with the appropriate version constraint.\nSOURCE: https://github.com/vonagam/ash_jason/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndef deps do\n  [\n    {:ash_jason, \"~> 2.0.0\"},\n  ]\nend\n```"
  }
]