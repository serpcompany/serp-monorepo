[
  {
    "owner": "shapely",
    "repo": "shapely",
    "content": "TITLE: Computing Geometric Intersection in Shapely\nDESCRIPTION: Demonstrates the intersection method which returns the portion of geometry that overlaps between two objects. Example shows intersection of two circular buffers.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_54\n\nLANGUAGE: python\nCODE:\n```\n>>> a = Point(1, 1).buffer(1.5)\n>>> b = Point(2, 1).buffer(1.5)\n>>> a.intersection(b)\n<POLYGON ((2.493 0.853, 2.471 0.707, 2.435 0.565, 2.386 0.426, 2.323 0.293, ...>\n```\n\n----------------------------------------\n\nTITLE: Calculating distance between Shapely Point objects in Python\nDESCRIPTION: This snippet demonstrates how to calculate the minimum distance between two Shapely Point objects using the distance method. It returns a float value.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> Point(0,0).distance(Point(1,1))\n```\n\n----------------------------------------\n\nTITLE: Serializing and Deserializing Geometries with WKT in Shapely\nDESCRIPTION: This snippet demonstrates how to serialize and deserialize geometric objects using the Well-Known Text (WKT) format with Shapely's dumps and loads functions from the shapely.wkt module.\nSOURCE: https://github.com/shapely/shapely/blob/main/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely.wkt import dumps, loads\n>>> dumps(loads('POINT (0 0)'))\n'POINT (0.0000000000000000 0.0000000000000000)'\n```\n\n----------------------------------------\n\nTITLE: Using Shapely's STRtree for Spatial Indexing and Querying\nDESCRIPTION: Shows how to create and query a spatial index using STRtree with point geometries, demonstrating both basic extent queries and predicate-based filtering.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_94\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import STRtree\n>>> points = [Point(i, i) for i in range(10)]\n>>> tree = STRtree(points)\n>>> query_geom = Point(2,2).buffer(0.99)\n>>> [points[idx].wkt for idx in tree.query(query_geom)]\n['POINT (2 2)']\n>>> query_geom = Point(2, 2).buffer(1.0)\n>>> [points[idx].wkt for idx in tree.query(query_geom)]\n['POINT (1 1)', 'POINT (2 2)', 'POINT (3 3)']\n>>> [points[idx].wkt for idx in tree.query(query_geom, predicate=\"intersects\")]\n['POINT (2 2)']\n```\n\n----------------------------------------\n\nTITLE: Converting GeoJSON-like Dictionaries to Geometries in Shapely\nDESCRIPTION: Shows how to convert GeoJSON-like dictionaries to Shapely geometries using the shape function, which facilitates interoperability with other libraries.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_101\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely.geometry import shape\n>>> data = {\"type\": \"Point\", \"coordinates\": (0.0, 0.0)}\n>>> geom = shape(data)\n>>> geom.geom_type\n'Point'\n>>> list(geom.coords)\n[(0.0, 0.0)]\n```\n\n----------------------------------------\n\nTITLE: Making Invalid Geometries Valid with Shapely (MultiPolygon Case)\nDESCRIPTION: Shows how to convert an invalid polygon with a bow-tie structure into a valid MultiPolygon using the make_valid function.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_90\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely.validation import make_valid\n>>> coords = [(0, 0), (0, 2), (1, 1), (2, 2), (2, 0), (1, 1), (0, 0)]\n>>> p = Polygon(coords)\n>>> make_valid(p)\n<MULTIPOLYGON (((1 1, 0 0, 0 2, 1 1)), ((2 0, 1 1, 2 2, 2 0)))>\n```\n\n----------------------------------------\n\nTITLE: Integrating Shapely with GeoJSON using mapping and shape Functions\nDESCRIPTION: This example shows how to convert between Shapely geometry objects and GeoJSON-like Python dictionaries using the mapping and shape functions, enabling integration with other GIS packages and JSON serialization.\nSOURCE: https://github.com/shapely/shapely/blob/main/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import json\n>>> from shapely.geometry import mapping, shape\n>>> s = shape(json.loads('{\"type\": \"Point\", \"coordinates\": [0.0, 0.0]}'))\n>>> s\n<POINT (0 0)>\n>>> print(json.dumps(mapping(s)))\n{\"type\": \"Point\", \"coordinates\": [0.0, 0.0]}\n```\n\n----------------------------------------\n\nTITLE: Creating a Point object in Python using Shapely\nDESCRIPTION: This snippet demonstrates how to create a Point object using Shapely's Point class. It shows that numeric values are converted to float type internally.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPoint(0, 0)\n```\n\nLANGUAGE: python\nCODE:\n```\nPoint(0.0, 0.0)\n```\n\n----------------------------------------\n\nTITLE: Creating Polygons from LineString/LinearRing in Shapely\nDESCRIPTION: Examples showing how to create Polygons using LineString and LinearRing objects, including creating a Polygon with holes.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n>>> coords = [(0, 0), (1, 1), (1, 0)]\n>>> r = LinearRing(coords)\n>>> s = Polygon(r)\n>>> s.area\n0.5\n>>> t = Polygon(s.buffer(1.0).exterior, [r])\n>>> t.area\n6.5507620529190325\n```\n\n----------------------------------------\n\nTITLE: Splitting geometries with other geometries in Python\nDESCRIPTION: Shows how to split a geometry by another geometry using the split function from shapely.ops. Returns a collection of the resulting geometries from the split operation.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_85\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely.ops import split\n>>> pt = Point((1, 1))\n>>> line = LineString([(0,0), (2,2)])\n>>> result = split(line, pt)\n>>> result\n<GEOMETRYCOLLECTION (LINESTRING (0 0, 1 1), LINESTRING (1 1, 2 2))>\n```\n\n----------------------------------------\n\nTITLE: Using the Cut Function on LineString in Python\nDESCRIPTION: Demonstrates the usage of the cut function to split a LineString at specified distances.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n>>> line = LineString([(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)])\n>>> print([list(x.coords) for x in cut(line, 1.0)])  # doctest: +SKIP\n[[(0.0, 0.0), (1.0, 0.0)],\n [(1.0, 0.0), (2.0, 0.0), (3.0, 0.0), (4.0, 0.0), (5.0, 0.0)]]\n>>> print([list(x.coords) for x in cut(line, 2.5)])  # doctest: +SKIP\n[[(0.0, 0.0), (1.0, 0.0), (2.0, 0.0), (2.5, 0.0)],\n [(2.5, 0.0), (3.0, 0.0), (4.0, 0.0), (5.0, 0.0)]]\n```\n\n----------------------------------------\n\nTITLE: Using unary_union to merge overlapping polygons in Python\nDESCRIPTION: Demonstrates how to merge multiple overlapping polygon geometries using the unary_union function. This example creates a series of buffer polygons around points and then merges them together.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_78\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import unary_union\n>>> polygons = [Point(i, 0).buffer(0.7) for i in range(5)]\n>>> unary_union(polygons)\n<POLYGON ((0.444 -0.541, 0.389 -0.582, 0.33 -0.617, 0.268 -0.647, 0.203 -0.6...>\n```\n\n----------------------------------------\n\nTITLE: Accessing Polygon Components in Shapely\nDESCRIPTION: Examples showing how to access Polygon components including the exterior ring and interior rings (holes).\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n>>> list(polygon.exterior.coords)\n[(0.0, 0.0), (1.0, 1.0), (1.0, 0.0), (0.0, 0.0)]\n>>> list(polygon.interiors)\n[]\n```\n\n----------------------------------------\n\nTITLE: Finding the Pole of Inaccessibility with Shapely's Polylabel\nDESCRIPTION: Demonstrates using the polylabel function to find the approximate pole of inaccessibility (farthest point from the boundary) for a polygon.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_93\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely.ops import polylabel\n>>> polygon = LineString([(0, 0), (50, 200), (100, 100), (20, 50),\n... (-100, -20), (-150, -200)]).buffer(100)\n>>> label = polylabel(polygon, tolerance=0.001)\n>>> label\n<POINT (59.733 111.33)>\n```\n\n----------------------------------------\n\nTITLE: Constructing Geometries in Python using Shapely\nDESCRIPTION: Demonstrates how to create Point and LineString geometries using Shapely's geometry classes. This snippet shows direct construction of geometry objects.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/geometry.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import Point, LineString\n>>> Point(5.2, 52.1)\n<POINT (5.2 52.1)>\n>>> LineString([(0, 0), (1, 2)])\n<LINESTRING (0 0, 1 2)>\n```\n\n----------------------------------------\n\nTITLE: Creating Buffer Geometries in Shapely\nDESCRIPTION: Shows how to use the buffer method to create dilated and eroded versions of geometries. Demonstrates dilating a line and eroding a polygon with specified buffer distances.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_59\n\nLANGUAGE: python\nCODE:\n```\n>>> line = LineString([(0, 0), (1, 1), (0, 2), (2, 2), (3, 1), (1, 0)])\n>>> dilated = line.buffer(0.5)\n>>> eroded = dilated.buffer(-0.3)\n```\n\n----------------------------------------\n\nTITLE: Accessing Point Coordinates in Shapely\nDESCRIPTION: Examples showing how to access Point coordinates in different ways including coords property, x/y attributes, and slicing.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> list(point.coords)\n[(0.0, 0.0)]\n>>> point.x\n0.0\n>>> point.y\n0.0\n```\n\n----------------------------------------\n\nTITLE: Hashing and Comparing Shapely Geometries in Python\nDESCRIPTION: Illustrates how Shapely geometries can be used in sets and as dictionary keys through hashing. It also shows how to directly compare geometry objects for equality.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/geometry.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import Point\n>>> point_1 = Point(5.2, 52.1)\n>>> point_2 = Point(1, 1)\n>>> point_3 = Point(5.2, 52.1)\n>>> {point_1, point_2, point_3}\n{<POINT (1 1)>, <POINT (5.2 52.1)>}\n>>> point_1 == point_2\nFalse\n>>> point_1 == point_3\nTrue\n>>> point_1 != point_2\nTrue\n```\n\n----------------------------------------\n\nTITLE: Creating Rectangular Polygons using box Function in Shapely\nDESCRIPTION: Example demonstrating how to create rectangular Polygons conveniently using the shapely.geometry.box() function which was added in Shapely 1.2.9.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import box\n>>> b = box(0.0, 0.0, 1.0, 1.0)\n>>> b\n<POLYGON ((1 0, 1 1, 0 1, 0 0, 1 0))>\n>>> list(b.exterior.coords)\n[(1.0, 0.0), (1.0, 1.0), (0.0, 1.0), (0.0, 0.0), (1.0, 0.0)]\n```\n\n----------------------------------------\n\nTITLE: Validating and Explaining Geometry Validity in Shapely\nDESCRIPTION: Demonstrates the use of explain_validity function to identify why a polygon is invalid, showing a case with a self-intersecting ring.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_89\n\nLANGUAGE: python\nCODE:\n```\n>>> coords = [(0, 0), (0, 2), (1, 1), (2, 2), (2, 0), (1, 1), (0, 0)]\n>>> p = Polygon(coords)\n>>> from shapely.validation import explain_validity\n>>> explain_validity(p)\n'Ring Self-intersection[1 1]'\n```\n\n----------------------------------------\n\nTITLE: Converting Between WKT and Geometries in Shapely\nDESCRIPTION: Shows how to use the wkt module to serialize and deserialize geometries to and from Well-Known Text format, highlighting differences in defaults for precision.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_98\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import wkt, Point\n>>> pt = Point(0, 0)\n>>> wkt.dumps(pt)\n'POINT (0.0000000000000000 0.0000000000000000)'\n>>> pt.wkt\n'POINT (0 0)'\n>>> wkt.loads(pt.wkt).wkt\n'POINT (0 0)'\n```\n\n----------------------------------------\n\nTITLE: Finding the shortest line between geometries in Python\nDESCRIPTION: Demonstrates how to calculate the shortest line between two geometries using the shortest_line function. Returns a LineString connecting the nearest points.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_82\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import shortest_line\n>>> triangle = Polygon([(0, 0), (1, 0), (0.5, 1), (0, 0)])\n>>> square = Polygon([(0, 2), (1, 2), (1, 3), (0, 3), (0, 2)])\n>>> shortest_line(triangle, square)\n<LINESTRING (0.5 1, 0.5 2)>\n```\n\n----------------------------------------\n\nTITLE: Configuring Buffer Precision in Shapely\nDESCRIPTION: Demonstrates how the quad_segs parameter affects the precision of buffer operations. With the default value of 16, a point buffer creates a near-circular polygon, while a value of 1 creates a square.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_60\n\nLANGUAGE: python\nCODE:\n```\n>>> p = Point(0, 0).buffer(10.0)\n>>> len(p.exterior.coords)\n65\n>>> p.area\n313.6548490545941\n\n>>> q = Point(0, 0).buffer(10.0, 1)\n>>> len(q.exterior.coords)\n5\n>>> q.area\n200.0\n```\n\n----------------------------------------\n\nTITLE: Geometric Containment Checks\nDESCRIPTION: Demonstrates how to check if one geometric object contains another.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\n>>> coords = [(0, 0), (1, 1)]\n>>> LineString(coords).contains(Point(0.5, 0.5))\nTrue\n>>> Point(0.5, 0.5).within(LineString(coords))\nTrue\n```\n\n----------------------------------------\n\nTITLE: Creating Geometries from WKT and WKB in Python with Shapely\nDESCRIPTION: Shows how to construct geometries from Well-Known Text (WKT) and Well-Known Binary (WKB) representations using Shapely's from_wkt and from_wkb functions.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/geometry.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import from_wkb, from_wkt\n>>> from_wkt(\"POINT (5.2 52.1)\")\n<POINT (5.2 52.1)>\n>>> from_wkb(b\"\\x01\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xf0?\\x00\\x00\\x00\\x00\\x00\\x00\\xf0?\")\n<POINT (1 1)>\n```\n\n----------------------------------------\n\nTITLE: Accessing Geometric Boundary in Shapely\nDESCRIPTION: Demonstrates the boundary attribute that returns a lower-dimensional object representing the set-theoretic boundary. For a MultiLineString, this returns the endpoints as a MultiPoint.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_51\n\nLANGUAGE: python\nCODE:\n```\n>>> coords = [((0, 0), (1, 1)), ((-1, 0), (1, 0))]\n>>> lines = MultiLineString(coords)\n>>> lines.boundary\n<MULTIPOINT ((-1 0), (0 0), (1 0), (1 1))>\n>>> list(lines.boundary.geoms)\n[<POINT (-1 0)>, <POINT (0 0)>, <POINT (1 0)>, <POINT (1 1)>]\n>>> lines.boundary.boundary\n<GEOMETRYCOLLECTION EMPTY>\n```\n\n----------------------------------------\n\nTITLE: Generating Voronoi diagrams from point collections in Python\nDESCRIPTION: Shows how to construct a Voronoi diagram from a collection of points using the voronoi_polygons function. Returns a collection of polygons representing the Voronoi regions.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_81\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import voronoi_polygons\n>>> points = MultiPoint([(0, 0), (1, 1), (0, 2), (2, 2), (3, 1), (1, 0)])\n>>> regions = voronoi_polygons(points)\n>>> list(regions.geoms)\n[<POLYGON ((2 1, 2 0.5, 0.5 0.5, 0 1, 1 2, 2 1))>,\n <POLYGON ((6 -3, 3.75 -3, 2 0.5, 2 1, 6 5, 6 -3))>,\n <POLYGON ((-3 -3, -3 1, 0 1, 0.5 0.5, 0.5 -3, -3 -3))>,\n <POLYGON ((0.5 -3, 0.5 0.5, 2 0.5, 3.75 -3, 0.5 -3))>,\n <POLYGON ((-3 5, 1 5, 1 2, 0 1, -3 1, -3 5))>,\n <POLYGON ((6 5, 2 1, 1 2, 1 5, 6 5))>]\n```\n\n----------------------------------------\n\nTITLE: Creating Point Objects in Shapely\nDESCRIPTION: Examples of creating Point objects in Shapely using coordinate values or point tuples. Points have zero area and zero length.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import Point\n>>> point = Point(0.0, 0.0)\n>>> q = Point((0.0, 0.0))\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Polygon Objects in Shapely\nDESCRIPTION: Example demonstrating how to create a Polygon object and access its properties like area, length, and bounds.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import Polygon\n>>> polygon = Polygon([(0, 0), (1, 1), (1, 0)])\n>>> polygon.area\n0.5\n>>> polygon.length\n3.414213562373095\n```\n\n----------------------------------------\n\nTITLE: Minimum Rotated Rectangle in Shapely\nDESCRIPTION: Shows how to create minimum rotated rectangles for different geometric objects, which provides the smallest bounding rectangle regardless of axis alignment.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_66\n\nLANGUAGE: python\nCODE:\n```\n>>> Point(0, 0).minimum_rotated_rectangle\n<POINT (0 0)>\n>>> MultiPoint([(0,0),(1,1),(2,0.5)]).minimum_rotated_rectangle.normalize()\n<POLYGON ((-0.176 0.706, 1.824 1.206, 2 0.5, 0 0, -0.176 0.706))>\n```\n\n----------------------------------------\n\nTITLE: Cutting Lines at a Specified Distance in Python\nDESCRIPTION: Defines a function to cut a LineString at a specified distance from its starting point.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\ndef cut(line, distance):\n    # Cuts a line in two at a distance from its starting point\n    if distance <= 0.0 or distance >= line.length:\n        return [LineString(line)]\n    coords = list(line.coords)\n    for i, p in enumerate(coords):\n        pd = line.project(Point(p))\n        if pd == distance:\n            return [\n                LineString(coords[:i+1]),\n                LineString(coords[i:])]\n        if pd > distance:\n            cp = line.interpolate(distance)\n            return [\n                LineString(coords[:i] + [(cp.x, cp.y)]),\n                LineString([(cp.x, cp.y)] + coords[i:])]\n```\n\n----------------------------------------\n\nTITLE: Computing Geometric Union in Shapely\nDESCRIPTION: Demonstrates the union method that returns all points from both geometries. The result type depends on whether the input geometries intersect.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_56\n\nLANGUAGE: python\nCODE:\n```\n>>> a = Point(1, 1).buffer(1.5)\n>>> b = Point(2, 1).buffer(1.5)\n>>> a.union(b)\n<POLYGON ((1.435 -0.435, 1.293 -0.471, 1.147 -0.493, 1 -0.5, 0.853 -0.493, 0...>\n```\n\n----------------------------------------\n\nTITLE: Using prepared geometries for efficient operations in Python\nDESCRIPTION: Demonstrates how to use prepared geometries for more efficient spatial operations when testing the same geometry against many others. Prepared geometries provide optimized containment and intersection tests.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_88\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely.prepared import prep\n>>> points = [...] # large list of points\n>>> polygon = Point(0.0, 0.0).buffer(1.0)\n>>> prepared_polygon = prep(polygon)\n>>> prepared_polygon\n<shapely.prepared.PreparedGeometry object at 0x...>\n>>> hits = filter(prepared_polygon.contains, points)\n```\n\n----------------------------------------\n\nTITLE: Testing DE-9IM Pattern Matching with relate_pattern in Python\nDESCRIPTION: Demonstrates using relate_pattern to check if a specific DE-9IM relationship exists between geometries. This example tests if a point is within a square polygon.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_49\n\nLANGUAGE: python\nCODE:\n```\n>>> point = Point(0.5, 0.5)\n>>> square = Polygon([(0, 0), (0, 1), (1, 1), (1, 0)])\n>>> square.relate_pattern(point, 'T*****FF*')\nTrue\n>>> point.within(square)\nTrue\n```\n\n----------------------------------------\n\nTITLE: Comparing Union Operations in Shapely\nDESCRIPTION: Shows the difference between the boundary of a union of polygons versus the union of their boundaries. This demonstrates how set-theoretic operations vary with the type of geometric objects.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_57\n\nLANGUAGE: python\nCODE:\n```\n>>> a.union(b).boundary\n<LINESTRING (1.435 -0.435, 1.293 -0.471, 1.147 -0.493, 1 -0.5, 0.853 -0.493,...>\n>>> a.boundary.union(b.boundary)\n<MULTILINESTRING ((2.5 1, 2.493 0.853, 2.471 0.707, 2.435 0.565, 2.386 0.426...>\n```\n\n----------------------------------------\n\nTITLE: Calculating Difference Between Geometries in Shapely\nDESCRIPTION: Shows how to use the difference method to find the points in one geometry that don't exist in another. Example uses circular buffers around points.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_53\n\nLANGUAGE: python\nCODE:\n```\n>>> a = Point(1, 1).buffer(1.5)\n>>> b = Point(2, 1).buffer(1.5)\n>>> a.difference(b)\n<POLYGON ((1.435 -0.435, 1.293 -0.471, 1.147 -0.493, 1 -0.5, 0.853 -0.493, 0...>\n```\n\n----------------------------------------\n\nTITLE: Polygon Cleaning with Buffer Operation\nDESCRIPTION: Shows how to clean self-touching or self-crossing polygons using the buffer operation with distance 0, converting an invalid bowtie polygon into valid multipolygon.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_63\n\nLANGUAGE: python\nCODE:\n```\n>>> coords = [(0, 0), (0, 2), (1, 1), (2, 2), (2, 0), (1, 1), (0, 0)]\n>>> bowtie = Polygon(coords)\n>>> bowtie.is_valid\nFalse\n>>> clean = bowtie.buffer(0)\n>>> clean.is_valid\nTrue\n>>> clean\n<MULTIPOLYGON (((0 0, 0 2, 1 1, 0 0)), ((1 1, 2 2, 2 0, 1 1)))>\n>>> len(clean.geoms)\n2\n>>> list(clean.geoms[0].exterior.coords)\n[(0.0, 0.0), (0.0, 2.0), (1.0, 1.0), (0.0, 0.0)]\n>>> list(clean.geoms[1].exterior.coords)\n[(1.0, 1.0), (2.0, 2.0), (2.0, 0.0), (1.0, 1.0)]\n```\n\n----------------------------------------\n\nTITLE: Geometry Simplification in Shapely\nDESCRIPTION: Demonstrates simplifying geometric objects while maintaining distance tolerance, with optional topology preservation.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_67\n\nLANGUAGE: python\nCODE:\n```\n>>> p = Point(0.0, 0.0)\n>>> x = p.buffer(1.0)\n>>> x.area\n3.1365484905459398\n>>> len(x.exterior.coords)\n65\n>>> s = x.simplify(0.05, preserve_topology=False)\n>>> s.area\n3.061467458920719\n>>> len(s.exterior.coords)\n17\n```\n\n----------------------------------------\n\nTITLE: Creating and Using LinearRing Objects in Shapely\nDESCRIPTION: Example demonstrating how to create a LinearRing object and access its properties like area, length, and bounds.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import LinearRing\n>>> ring = LinearRing([(0, 0), (1, 1), (1, 0)])\n>>> ring.area\n0.0\n>>> ring.length\n3.414213562373095\n```\n\n----------------------------------------\n\nTITLE: Using unary_union to fix invalid MultiPolygons in Python\nDESCRIPTION: Shows how unary_union can be used to fix invalid MultiPolygon geometries. The example demonstrates the difference in area and validity status before and after applying the union operation.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_79\n\nLANGUAGE: python\nCODE:\n```\n>>> m = MultiPolygon(polygons)\n>>> m.area\n7.684543801837549\n>>> m.is_valid\nFalse\n>>> unary_union(m).area\n6.610301355116799\n>>> unary_union(m).is_valid\nTrue\n```\n\n----------------------------------------\n\nTITLE: Creating and Analyzing MultiPoint in Python\nDESCRIPTION: Shows how to create a MultiPoint object, calculate its area and length, and access its bounding box and members.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import MultiPoint\n>>> points = MultiPoint([(0.0, 0.0), (1.0, 1.0)])\n>>> points.area\n0.0\n>>> points.length\n0.0\n>>> points.bounds\n(0.0, 0.0, 1.0, 1.0)\n>>> list(points.geoms)\n[<POINT (0 0)>, <POINT (1 1)>]\n```\n\n----------------------------------------\n\nTITLE: Creating MultiPolygon in Python\nDESCRIPTION: Shows how to create a MultiPolygon object from existing Polygon instances and access its members.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import MultiPolygon\n>>> polygons = MultiPolygon([polygon, s, t])\n>>> len(polygons.geoms)\n3\n>>> polygons.bounds\n(-1.0, -1.0, 2.0, 2.0)\n>>> len(polygons.geoms)\n3\n```\n\n----------------------------------------\n\nTITLE: Converting Geometries to NumPy Arrays in Shapely\nDESCRIPTION: Shows how to convert coordinate sequences from geometric objects like Point and LineString to NumPy arrays using the array interface.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_99\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy as np\n>>> np.asarray(Point(0, 0).coords)\narray([[0., 0.]])\n>>> np.asarray(LineString([(0, 0), (1, 1)]).coords)\narray([[0., 0.],\n       [1., 1.]])\n```\n\n----------------------------------------\n\nTITLE: Single-sided Buffer Operations in Shapely\nDESCRIPTION: Demonstrates creating single-sided buffers for LineString objects with different distances to generate left-hand and right-hand side buffers.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_62\n\nLANGUAGE: python\nCODE:\n```\n>>> line = LineString([(0, 0), (1, 1), (0, 2), (2, 2), (3, 1), (1, 0)])\n>>> left_hand_side = line.buffer(0.5, single_sided=True)\n>>> right_hand_side = line.buffer(-0.3, single_sided=True)\n```\n\n----------------------------------------\n\nTITLE: Creating and Analyzing MultiLineString in Python\nDESCRIPTION: Demonstrates the creation of a MultiLineString object, calculation of its area and length, and accessing its bounding box and members.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import MultiLineString\n>>> coords = [((0, 0), (1, 1)), ((-1, 0), (1, 0))]\n>>> lines = MultiLineString(coords)\n>>> lines.area\n0.0\n>>> lines.length\n3.414213562373095\n>>> lines.bounds\n(-1.0, 0.0, 1.0, 1.0)\n>>> len(lines.geoms)\n2\n>>> print(list(lines.geoms))\n[<LINESTRING (0 0, 1 1)>, <LINESTRING (-1 0, 1 0)>]\n```\n\n----------------------------------------\n\nTITLE: Accessing Well-Known Text (WKT) and Well-Known Binary (WKB) in Shapely\nDESCRIPTION: Shows how to access WKT and WKB representations of geometries through attributes, which enables interoperability with GIS programs.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_96\n\nLANGUAGE: python\nCODE:\n```\n>>> Point(0, 0).wkt\n'POINT (0 0)'\n>>> Point(0, 0).wkb\nb'\\x01\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n>>> Point(0, 0).wkb_hex\n'010100000000000000000000000000000000000000'\n```\n\n----------------------------------------\n\nTITLE: Computing Symmetric Difference in Shapely\nDESCRIPTION: Shows how to calculate the symmetric difference, which returns points in either geometry but not in their intersection. This is equivalent to the union minus the intersection.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_55\n\nLANGUAGE: python\nCODE:\n```\n>>> a = Point(1, 1).buffer(1.5)\n>>> b = Point(2, 1).buffer(1.5)\n>>> a.symmetric_difference(b)\n<MULTIPOLYGON (((1.574 -0.386, 1.707 -0.323, 1.833 -0.247, 1.952 -0.16, 2.06...>\n```\n\n----------------------------------------\n\nTITLE: Using BufferCapStyle and BufferJoinStyle Enumerations in Shapely\nDESCRIPTION: Shows how to use the enumeration constants from Shapely for specifying buffer cap styles (round, flat, square) and join styles (round, mitre, bevel).\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_61\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import BufferCapStyle, BufferJoinStyle\n>>> BufferCapStyle.flat.value\n2\n>>> BufferJoinStyle.bevel.value\n3\n```\n\n----------------------------------------\n\nTITLE: Formatting Shapely Geometries to WKB, WKT, and GeoJSON in Python\nDESCRIPTION: Shows various methods to format Shapely geometry objects into different string representations, including WKB (hex), WKT, and GeoJSON. It demonstrates both property access and function calls.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/geometry.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import Point, to_wkb, to_wkt, to_geojson\n>>> pt = Point(-169.910918, -18.997564)\n>>> pt.wkb_hex\n0101000000CF6A813D263D65C0BDAAB35A60FF32C0\n>>> pt.wkt\nPOINT (-169.910918 -18.997564)\n>>> to_wkb(pt, hex=True, byte_order=0)\n0000000001C0653D263D816ACFC032FF605AB3AABD\n>>> to_wkt(pt, rounding_precision=3)\nPOINT (-169.911 -18.998)\n>>> print(to_geojson(pt, indent=2))\n{\n  \"type\": \"Point\",\n  \"coordinates\": [\n    -169.910918,\n    -18.997564\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Polygon Creation with polygonize_full Function\nDESCRIPTION: Shows how to use the polygonize_full function to create polygons from lines while also identifying cut edges, dangles, and invalid ring lines. Returns a tuple with four geometry collections.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_75\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import polygonize_full\n>>> lines = [\n...     LineString([(0, 0), (1, 1)]),\n...     LineString([(0, 0), (0, 1)]),\n...     LineString([(0, 1), (1, 1)]),\n...     LineString([(1, 1), (1, 0)]),\n...     LineString([(1, 0), (0, 0)]),\n...     LineString([(5, 5), (6, 6)]),\n...     LineString([(1, 1), (100, 100)]),\n...     ]\n>>> result, cuts, dangles, invalids = polygonize_full(lines)\n>>> len(result.geoms)\n2\n>>> list(result.geoms)\n[<POLYGON ((0 0, 1 1, 1 0, 0 0))>, <POLYGON ((1 1, 0 0, 0 1, 1 1))>]\n>>> list(dangles.geoms)\n[<LINESTRING (1 1, 100 100)>, <LINESTRING (5 5, 6 6)>]\n```\n\n----------------------------------------\n\nTITLE: Converting Objects with geo_interface to Geometries in Shapely\nDESCRIPTION: Demonstrates how to convert objects implementing the Python geo interface to Shapely geometries using the shape function.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_102\n\nLANGUAGE: python\nCODE:\n```\n>>> class GeoThing:\n...     def __init__(self, d):\n...         self.__geo_interface__ = d\n>>> thing = GeoThing({\"type\": \"Point\", \"coordinates\": (0.0, 0.0)})\n>>> geom = shape(thing)\n>>> geom.geom_type\n'Point'\n>>> list(geom.coords)\n[(0.0, 0.0)]\n```\n\n----------------------------------------\n\nTITLE: Computing Geometric Centroid in Shapely\nDESCRIPTION: Shows how to use the centroid attribute to compute the geometric center of a LineString. The centroid represents the center of mass of the geometry.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_52\n\nLANGUAGE: python\nCODE:\n```\n>>> LineString([(0, 0), (1, 1)]).centroid\n<POINT (0.5 0.5)>\n```\n\n----------------------------------------\n\nTITLE: Accessing Coordinates as Python Arrays in Shapely\nDESCRIPTION: Demonstrates accessing the coordinates of geometries as standard Python arrays of x and y values using the xy attribute.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_100\n\nLANGUAGE: python\nCODE:\n```\n>>> Point(0, 0).xy\n(array('d', [0.0]), array('d', [0.0]))\n>>> LineString([(0, 0), (1, 1)]).xy\n(array('d', [0.0, 1.0]), array('d', [0.0, 1.0]))\n```\n\n----------------------------------------\n\nTITLE: Creating Delaunay triangulation from a point collection in Python\nDESCRIPTION: Demonstrates the delaunay_triangles function that calculates Delaunay triangulation from a collection of points. Returns a collection of triangular polygons.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_80\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import delaunay_triangles\n>>> points = MultiPoint([(0, 0), (1, 1), (0, 2), (2, 2), (3, 1), (1, 0)])\n>>> list(delaunay_triangles(points).geoms)\n[<POLYGON ((0 2, 0 0, 1 1, 0 2))>,\n <POLYGON ((0 2, 1 1, 2 2, 0 2))>,\n <POLYGON ((2 2, 1 1, 3 1, 2 2))>,\n <POLYGON ((3 1, 1 1, 1 0, 3 1))>,\n <POLYGON ((1 0, 1 1, 0 0, 1 0))>]\n```\n\n----------------------------------------\n\nTITLE: Linear Referencing Methods in Python\nDESCRIPTION: Demonstrates the use of interpolate and project methods for linear referencing on LineString objects.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n>>> ip = LineString([(0, 0), (0, 1), (1, 1)]).interpolate(1.5)\n>>> ip\n<POINT (0.5 1)>\n>>> LineString([(0, 0), (0, 1), (1, 1)]).interpolate(0.75, normalized=True)\n<POINT (0.5 1)>\n>>> LineString([(0, 0), (0, 1), (1, 1)]).project(ip)\n1.5\n>>> LineString([(0, 0), (0, 1), (1, 1)]).project(ip, normalized=True)\n0.75\n```\n\n----------------------------------------\n\nTITLE: Creating Polygons from Lines with Shapely's polygonize Function\nDESCRIPTION: Demonstrates how to create polygons from a sequence of LineString objects using the polygonize function, which returns an iterator over the constructed polygons.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_74\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import polygonize\n>>> lines = [\n...     LineString([(0, 0), (1, 1)]),\n...     LineString([(0, 0), (0, 1)]),\n...     LineString([(0, 1), (1, 1)]),\n...     LineString([(1, 1), (1, 0)]),\n...     LineString([(1, 0), (0, 0)]),\n...     ]\n>>> list(polygonize(lines).geoms)\n[<POLYGON ((0 0, 1 1, 1 0, 0 0))>, <POLYGON ((1 1, 0 0, 0 1, 1 1))>]\n```\n\n----------------------------------------\n\nTITLE: Scaling Geometries with Shapely's affinity Module\nDESCRIPTION: Demonstrates scaling a triangle polygon with different scale factors and origin points. Shows how to scale along specific axes and how negative scale factors cause reflection across axes.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_69\n\nLANGUAGE: python\nCODE:\n```\n>>> triangle = Polygon([(1, 1), (2, 3), (3, 1)])\n>>> triangle_a = affinity.scale(triangle, xfact=1.5, yfact=-1)\n>>> triangle_a.exterior.coords[:]\n[(0.5, 3.0), (2.0, 1.0), (3.5, 3.0), (0.5, 3.0)]\n>>> triangle_b = affinity.scale(triangle, xfact=2, origin=(1,1))\n>>> triangle_b.exterior.coords[:]\n[(1.0, 1.0), (3.0, 3.0), (5.0, 1.0), (1.0, 1.0)]\n```\n\n----------------------------------------\n\nTITLE: Merging Linestrings with line_merge Function\nDESCRIPTION: Demonstrates how to merge contiguous LineString objects from a MultiLineString into longer LineStrings. The function returns a LineString or MultiLineString representing the merged geometries.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_76\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import line_merge\n>>> line_merge(MultiLineString(lines))\n<MULTILINESTRING ((1 1, 1 0, 0 0), (0 0, 1 1), (0 0, 0 1, 1 1), (1 1, 100 10...>\n>>> list(line_merge(MultiLineString(lines)).geoms)\n[<LINESTRING (1 1, 1 0, 0 0)>,\n <LINESTRING (0 0, 1 1)>,\n <LINESTRING (0 0, 0 1, 1 1)>,\n <LINESTRING (1 1, 100 100)>,\n <LINESTRING (5 5, 6 6)>]\n```\n\n----------------------------------------\n\nTITLE: Converting Geometries to GeoJSON-like Mappings in Shapely\nDESCRIPTION: Shows how to convert Shapely geometries or objects implementing the geo_interface to GeoJSON-like mappings using the mapping function.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_103\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely.geometry import mapping\n>>> thing = GeoThing({\"type\": \"Point\", \"coordinates\": (0.0, 0.0)})\n>>> m = mapping(thing)\n>>> m['type']\n'Point'\n>>> m['coordinates']\n(0.0, 0.0)\n```\n\n----------------------------------------\n\nTITLE: Accessing LineString Coordinates in Shapely\nDESCRIPTION: Examples showing how to access LineString coordinates using the coords property including getting the length and listing all coordinates.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> len(line.coords)\n2\n>>> list(line.coords)\n[(0.0, 0.0), (1.0, 1.0)]\n```\n\n----------------------------------------\n\nTITLE: Creating NumPy Arrays of Geometry Objects (Python)\nDESCRIPTION: Shows how to create NumPy arrays containing Shapely geometry objects, and how to handle deprecation warnings in Shapely 1.8.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/migration.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely.geometry import Point\n>>> arr = np.array([Point(0, 0), Point(1, 1), Point(2, 2)])\n>>> arr\narray([<shapely.geometry.point.Point object at 0x7fb798407cd0>,\n       <shapely.geometry.point.Point object at 0x7fb7982831c0>,\n       <shapely.geometry.point.Point object at 0x7fb798283b80>],\n      dtype=object)\n\n# Recommended way to create arrays of geometries\ngeoms = [Point(0, 0), Point(1, 1), Point(2, 2)]\narr = np.empty(len(geoms), dtype=\"object\")\narr[:] = geoms\n\n# Handling deprecation warnings in Shapely 1.8\nimport warnings\nfrom shapely.errors import ShapelyDeprecationWarning\n\ngeoms = [Point(0, 0), Point(1, 1), Point(2, 2)]\narr = np.empty(len(geoms), dtype=\"object\")\n\nwith warnings.catch_warnings():\n    warnings.filterwarnings(\"ignore\", category=ShapelyDeprecationWarning)\n    arr[:] = geoms\n```\n\n----------------------------------------\n\nTITLE: Converting Between WKB and Geometries in Shapely\nDESCRIPTION: Demonstrates using the wkb module to serialize and deserialize geometries to and from Well-Known Binary format.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_97\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import wkb, Point\n>>> pt = Point(0, 0)\n>>> wkb.dumps(pt)\nb'\\x01\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n>>> pt.wkb\nb'\\x01\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n>>> wkb.loads(pt.wkb).wkt\n'POINT (0 0)'\n```\n\n----------------------------------------\n\nTITLE: Projecting Geometries with PyProj 2.1+ in Shapely\nDESCRIPTION: Shows the preferred method to project geometries using PyProj version 2.1 or greater. Creates a transformer from WGS84 to UTM with the always_xy parameter to ensure coordinate order compatibility.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_71\n\nLANGUAGE: python\nCODE:\n```\nimport pyproj\n\nfrom shapely import Point\nfrom shapely.ops import transform\n\nwgs84_pt = Point(-72.2495, 43.886)\n\nwgs84 = pyproj.CRS('EPSG:4326')\nutm = pyproj.CRS('EPSG:32618')\n\nproject = pyproj.Transformer.from_crs(wgs84, utm, always_xy=True).transform\nutm_point = transform(project, wgs84_pt)\n```\n\n----------------------------------------\n\nTITLE: Convex Hull Operations in Shapely\nDESCRIPTION: Examples of creating convex hulls for different geometric objects, showing how the result type changes based on the number of points.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_64\n\nLANGUAGE: python\nCODE:\n```\n>>> Point(0, 0).convex_hull\n<POINT (0 0)>\n>>> MultiPoint([(0, 0), (1, 1)]).convex_hull\n<LINESTRING (0 0, 1 1)>\n>>> MultiPoint([(0, 0), (1, 1), (1, -1)]).convex_hull\n<POLYGON ((1 -1, 0 0, 1 1, 1 -1))>\n```\n\n----------------------------------------\n\nTITLE: Working with GeometryCollection in Shapely\nDESCRIPTION: Example of how GeometryCollection objects are created from operations like intersection between LineStrings, and how to access the individual geometry components.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n>>> a = LineString([(0, 0), (1, 1), (1,2), (2,2)])\n>>> b = LineString([(0, 0), (1, 1), (2,1), (2,2)])\n>>> x = a.intersection(b)\n>>> x\n<GEOMETRYCOLLECTION (LINESTRING (0 0, 1 1), POINT (2 2))>\n>>> list(x.geoms)\n[<LINESTRING (0 0, 1 1)>, <POINT (2 2)>]\n```\n\n----------------------------------------\n\nTITLE: Accessing Point Properties in Shapely\nDESCRIPTION: Examples demonstrating how to access Point properties like area, length, bounds, and coordinates in Shapely.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> point.area\n0.0\n>>> point.length\n0.0\n```\n\n----------------------------------------\n\nTITLE: Clipping Geometries with Rectangular Bounds\nDESCRIPTION: Shows how to clip a polygon with a hole to a rectangular boundary using the clip_by_rect function. This is an efficient but potentially 'dirty' way to clip geometries.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_77\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import clip_by_rect\n>>> polygon = Polygon(\n...     shell=[(0, 0), (0, 30), (30, 30), (30, 0), (0, 0)],\n...     holes=[[(10, 10), (20, 10), (20, 20), (10, 20), (10, 10)]],\n... )\n>>> clipped_polygon = clip_by_rect(polygon, 5, 5, 15, 15)\n>>> clipped_polygon\n<POLYGON ((5 5, 5 15, 10 15, 10 10, 15 10, 15 5, 5 5))>\n```\n\n----------------------------------------\n\nTITLE: Accessing GeometryCollection Members in Python\nDESCRIPTION: Demonstrates how to access members of a GeometryCollection using the geoms property.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n>>> list(x.geoms)\n[<LINESTRING (0 0, 1 1)>, <POINT (2 2)>]\n```\n\n----------------------------------------\n\nTITLE: Making Invalid Geometries Valid with Shapely (GeometryCollection Case)\nDESCRIPTION: Demonstrates converting an invalid polygon into a GeometryCollection containing a Polygon and a LineString using the make_valid function.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_91\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely.validation import make_valid\n>>> coords = [(0, 2), (0, 1), (2, 0), (0, 0), (0, 2)]\n>>> p = Polygon(coords)\n>>> make_valid(p)\n<GEOMETRYCOLLECTION (POLYGON ((2 0, 0 0, 0 1, 2 0)), LINESTRING (0 2, 0 1))>\n```\n\n----------------------------------------\n\nTITLE: Finding the Nearest Geometry with Shapely's STRtree\nDESCRIPTION: Demonstrates using the nearest method of STRtree to find the closest point in a spatial index to a query point.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_95\n\nLANGUAGE: python\nCODE:\n```\n>>> points = [Point(i, i) for i in range(10)]\n>>> tree = STRtree(points)\n>>> idx = tree.nearest(Point(2.2, 2.2))\n>>> points[idx]\n<POINT (2 2)>\n```\n\n----------------------------------------\n\nTITLE: Unary Predicates for Shapely Objects in Python\nDESCRIPTION: Demonstrates the usage of various unary predicates like has_z, has_m, is_ccw, and is_empty on Shapely geometry objects.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n>>> Point(0, 0).has_z\nFalse\n>>> Point(0, 0, 0).has_z\nTrue\n\n>>> Point(0, 0, 0).has_m\nFalse\n>>> from shapely import from_wkt\n>>> from_wkt(\"POINT M (0 0 0)\").has_m\nTrue\n\n>>> LinearRing([(1,0), (1,1), (0,0)]).is_ccw\nTrue\n\n>>> ring = LinearRing([(0,0), (1,1), (1,0)])\n>>> ring.is_ccw\nFalse\n>>> ring2 = LinearRing(list(ring.coords)[::-1])\n>>> ring2.is_ccw\nTrue\n\n>>> Point().is_empty\nTrue\n>>> Point(0, 0).is_empty\nFalse\n```\n\n----------------------------------------\n\nTITLE: Geometric Equality Comparison\nDESCRIPTION: Demonstrates different ways of comparing geometric objects for equality.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\n>>> a = LineString([(0, 0), (1, 1)])\n>>> b = LineString([(0, 0), (0.5, 0.5), (1, 1)])\n>>> c = LineString([(0, 0), (0, 0), (1, 1)])\n>>> a.equals(b)\nTrue\n>>> a == b\nFalse\n>>> b.equals(c)\nTrue\n>>> b == c\nFalse\n```\n\n----------------------------------------\n\nTITLE: Accessing Coordinate Sequences in Python\nDESCRIPTION: Shows how to access and manipulate coordinate sequences of LineString and Polygon objects.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n>>> line = LineString([(0, 1), (2, 3), (4, 5)])\n>>> line.coords\n<shapely.coords.CoordinateSequence object at ...>\n>>> line.coords[0]\n(0.0, 1.0)\n>>> line.coords[1:]\n[(2.0, 3.0), (4.0, 5.0)]\n>>> for x, y in line.coords:\n...     print(\"x={}, y={}\".format(x, y))\n...\nx=0.0, y=1.0\nx=2.0, y=3.0\nx=4.0, y=5.0\n\n>>> poly = Polygon([(0, 0), (0, 1), (1, 1), (0, 0)])\n>>> poly.exterior.coords\n<shapely.coords.CoordinateSequence object at ...>\n\n>>> p = MultiPoint([(0, 0), (1, 1), (2, 2)])\n>>> p.geoms[2].coords\n<shapely.coords.CoordinateSequence object at ...>\n```\n\n----------------------------------------\n\nTITLE: Rotating Geometries with Shapely's affinity Module\nDESCRIPTION: Demonstrates rotating a LineString object by 90 degrees counter-clockwise, both with default origin and with the 'centroid' as the origin point.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_68\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import affinity\n>>> line = LineString([(1, 3), (1, 1), (4, 1)])\n>>> rotated_a = affinity.rotate(line, 90)\n>>> rotated_b = affinity.rotate(line, 90, origin='centroid')\n```\n\n----------------------------------------\n\nTITLE: Envelope Operations in Shapely\nDESCRIPTION: Demonstrates creating envelopes (bounding boxes) for different geometric objects.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_65\n\nLANGUAGE: python\nCODE:\n```\n>>> Point(0, 0).envelope\n<POINT (0 0)>\n>>> MultiPoint([(0, 0), (1, 1)]).envelope\n<POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))>\n```\n\n----------------------------------------\n\nTITLE: Accessing LinearRing Coordinates in Shapely\nDESCRIPTION: Examples showing how to access LinearRing coordinates using the coords property including getting the length and listing all coordinates.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> len(ring.coords)\n4\n>>> list(ring.coords)\n[(0.0, 0.0), (1.0, 1.0), (1.0, 0.0), (0.0, 0.0)]\n```\n\n----------------------------------------\n\nTITLE: Creating LineString with Mixed Point Objects and Tuples in Shapely\nDESCRIPTION: Example demonstrating that a LineString can be created using a sequence of mixed Point instances and coordinate tuples. The individual coordinates are copied into the new object.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> LineString([Point(0.0, 1.0), (2.0, 3.0), Point(4.0, 5.0)])\n<LINESTRING (0 1, 2 3, 4 5)>\n```\n\n----------------------------------------\n\nTITLE: Creating and Using LineString Objects in Shapely\nDESCRIPTION: Example demonstrating how to create a LineString object and access its properties like area, length, and bounds.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import LineString\n>>> line = LineString([(0, 0), (1, 1)])\n>>> line.area\n0.0\n>>> line.length\n1.4142135623730951\n```\n\n----------------------------------------\n\nTITLE: Using representative_point Method in Shapely\nDESCRIPTION: Example showing how to get a point that is guaranteed to be within a geometric object using representative_point(). This point is different from the centroid and is less computationally expensive.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> diamond = Point(0, 0).buffer(2.0, 1).difference(Point(0, 0).buffer(1.0, 1))\n>>> diamond.centroid\n<POINT (0 0)>\n>>> diamond.representative_point()\n<POINT (-1 0.5)>\n```\n\n----------------------------------------\n\nTITLE: Accessing LineString Bounds in Shapely\nDESCRIPTION: Example showing how to access the bounding box of a LineString as a (minx, miny, maxx, maxy) tuple.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> line.bounds\n(0.0, 0.0, 1.0, 1.0)\n```\n\n----------------------------------------\n\nTITLE: Accessing the geometry type of a Shapely object in Python\nDESCRIPTION: This snippet shows how to get the geometry type of a Shapely object using the geom_type attribute. It returns a string specifying the Geometry Type in accordance with the OGC specification.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import Point, LineString\n>>> Point(0, 0).geom_type\n'Point'\n```\n\n----------------------------------------\n\nTITLE: Using Vectorized Geometry Operations in Shapely 2.0\nDESCRIPTION: Example showing the comparison between old style for-loop operation and new vectorized operations in Shapely 2.0, demonstrating how to check if multiple points are contained within a polygon.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/release/2.x.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import shapely\n>>> from shapely import Point, box\n>>> import numpy as np\n>>> geoms = np.array([Point(0, 0), Point(1, 1), Point(2, 2)])\n>>> polygon = box(0, 0, 2, 2)\n\n# Before Shapely 2.0, a `for` loop was required\n>>> [polygon.contains(point) for point in geoms]\n[False,  True, False]\n\n# In Shapely 2.0, vectorized operation\n>>> shapely.contains(polygon, geoms)\narray([False,  True, False])\n```\n\n----------------------------------------\n\nTITLE: Accessing LinearRing Bounds in Shapely\nDESCRIPTION: Example showing how to access the bounding box of a LinearRing as a (minx, miny, maxx, maxy) tuple.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> ring.bounds\n(0.0, 0.0, 1.0, 1.0)\n```\n\n----------------------------------------\n\nTITLE: Creating line substrings with specified distances in Python\nDESCRIPTION: Demonstrates the substring function which creates a line segment between specified distances along a LineString. Can use absolute distances or normalized distances as a fraction of the line's length.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_86\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely.ops import substring\n>>> ls = LineString((i, 0) for i in range(6))\n>>> ls\n<LINESTRING (0 0, 1 0, 2 0, 3 0, 4 0, 5 0)>\n>>> substring(ls, start_dist=1, end_dist=3)\n<LINESTRING (1 0, 2 0, 3 0)>\n>>> substring(ls, start_dist=3, end_dist=1)\n<LINESTRING (3 0, 2 0, 1 0)>\n>>> substring(ls, start_dist=1, end_dist=-3)\n<LINESTRING (1 0, 2 0)>\n>>> substring(ls, start_dist=0.2, end_dist=-0.6, normalized=True)\n<LINESTRING (1 0, 2 0)>\n```\n\n----------------------------------------\n\nTITLE: Vectorized Spatial Operations with Shapely using NumPy Arrays\nDESCRIPTION: This example shows how to use Shapely's vectorized ufunc interface to perform spatial operations on arrays of geometries. It tests whether multiple points are contained within a rectangular polygon without using manual loops.\nSOURCE: https://github.com/shapely/shapely/blob/main/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import shapely\n>>> import numpy as np\n>>> geoms = np.array([Point(0, 0), Point(1, 1), Point(2, 2)])\n>>> polygon = shapely.box(0, 0, 2, 2)\n\n>>> shapely.contains(polygon, geoms)\narray([False,  True, False])\n```\n\n----------------------------------------\n\nTITLE: Projecting Geometries with PyProj < 2.1 in Shapely\nDESCRIPTION: Shows how to project geometries using older versions of PyProj (before 2.1). Uses functools.partial to create a transformation function from WGS84 to UTM.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_72\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import partial\nimport pyproj\n\nfrom shapely.ops import transform\n\nwgs84 = pyproj.Proj(init='epsg:4326')\nutm = pyproj.Proj(init='epsg:32618')\n\nproject = partial(\n    pyproj.transform,\n    wgs84,\n    utm)\n\nutm_point = transform(project, wgs84_pt)\n```\n\n----------------------------------------\n\nTITLE: Exact Geometric Equality\nDESCRIPTION: Shows how to compare points for exact equality within a specified tolerance.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_43\n\nLANGUAGE: python\nCODE:\n```\n>>> p1 = Point(1.0, 1.0)\n>>> p2 = Point(2.0, 2.0)\n>>> p3 = Point(1.0, 1.0 + 1e-7)\n>>> p1.equals_exact(p2)\nFalse\n>>> p1.equals_exact(p3)\nFalse\n>>> p1.equals_exact(p3, tolerance=1e-6)\nTrue\n```\n\n----------------------------------------\n\nTITLE: Creating a point from a substring with matching start and end distances\nDESCRIPTION: Shows how the substring function returns a Point when the start and end distances specify the same location on a LineString.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_87\n\nLANGUAGE: python\nCODE:\n```\n>>> substring(ls, start_dist=2.5, end_dist=-2.5)\n<POINT (2.5 0)>\n```\n\n----------------------------------------\n\nTITLE: Filtering with Binary Predicates\nDESCRIPTION: Shows how to use binary predicates as filter functions.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_45\n\nLANGUAGE: python\nCODE:\n```\n>>> line = LineString(coords)\n>>> contained = list(filter(line.contains, [Point(), Point(0.5, 0.5)]))\n>>> len(contained)\n1\n>>> contained\n[<POINT (0.5 0.5)>]\n```\n\n----------------------------------------\n\nTITLE: Converting Geometry Coordinates to NumPy Array in Shapely 2.0 (Python)\nDESCRIPTION: Demonstrates the recommended way to convert geometry coordinates to a NumPy array in Shapely 2.0 using the .coords attribute.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/migration.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> line.coords\n<shapely.coords.CoordinateSequence at 0x7f2e09e88d60>\n>>> np.array(line.coords)\narray([[0., 0.],\n       [1., 1.],\n       [2., 2.]])\n```\n\n----------------------------------------\n\nTITLE: Snapping vertices between geometries in Python\nDESCRIPTION: Shows how to snap vertices in one geometry to vertices in another geometry using the snap function. Takes a tolerance parameter to control the snapping distance.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_83\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import snap\n>>> square = Polygon([(1,1), (2, 1), (2, 2), (1, 2), (1, 1)])\n>>> line = LineString([(0,0), (0.8, 0.8), (1.8, 0.95), (2.6, 0.5)])\n>>> result = snap(line, square, 0.5)\n>>> result\n<LINESTRING (0 0, 1 1, 2 1, 2.6 0.5)>\n```\n\n----------------------------------------\n\nTITLE: Slicing LineString Coordinates in Shapely\nDESCRIPTION: Examples of slicing LineString coordinates which was a feature added in Shapely 1.2.14.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> line.coords[:]\n[(0.0, 0.0), (1.0, 1.0)]\n>>> line.coords[1:]\n[(1.0, 1.0)]\n```\n\n----------------------------------------\n\nTITLE: Using Lambda Expression for Simple Transformation\nDESCRIPTION: Demonstrates using a lambda expression for a simple coordinate transformation, adding 1.0 to both x and y coordinates of a geometry.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_73\n\nLANGUAGE: python\nCODE:\n```\ng2 = transform(lambda x, y, z=None: (x+1.0, y+1.0), g1)\n```\n\n----------------------------------------\n\nTITLE: Finding shared paths between linear geometries in Python\nDESCRIPTION: Demonstrates the shared_paths function which identifies common segments between two linear geometries. Returns a collection with paths in the same direction and paths in opposite directions.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_84\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import shared_paths\n>>> g1 = LineString([(0, 0), (10, 0), (10, 5), (20, 5)])\n>>> g2 = LineString([(5, 0), (30, 0), (30, 5), (0, 5)])\n>>> forward, backward = shared_paths(g1, g2).geoms\n>>> forward\n<MULTILINESTRING ((5 0, 10 0))>\n>>> backward\n<MULTILINESTRING ((10 5, 20 5))>\n```\n\n----------------------------------------\n\nTITLE: Checking Geometric Simplicity\nDESCRIPTION: Demonstrates how to check if a LineString is simple (does not self-intersect).\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n>>> LineString([(0, 0), (1, 1), (1, -1), (0, 1)]).is_simple\nFalse\n```\n\n----------------------------------------\n\nTITLE: Calculating minimum clearance of a Shapely Polygon in Python\nDESCRIPTION: This snippet shows how to calculate the minimum clearance of a Shapely Polygon object. The minimum clearance is the smallest distance by which a node could be moved to produce an invalid geometry.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import Polygon\n>>> Polygon([[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]]).minimum_clearance\n1.0\n```\n\n----------------------------------------\n\nTITLE: Testing DE-9IM Relationships Between Point and Line in Python\nDESCRIPTION: Shows the relate method for determining the relationship between a point and a line that contains it. The matrix has more 'true' (non-F) elements than the point-point relationship.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_48\n\nLANGUAGE: python\nCODE:\n```\n>>> Point(0, 0).relate(LineString([(0, 0), (1, 1)]))\n'F0FFFF102'\n```\n\n----------------------------------------\n\nTITLE: Checking Geometric Validity\nDESCRIPTION: Shows how to check if a MultiPolygon is valid by ensuring its components don't overlap.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n>>> MultiPolygon([Point(0, 0).buffer(2.0), Point(1, 1).buffer(2.0)]).is_valid\nFalse\n```\n\n----------------------------------------\n\nTITLE: Checking Ring Properties in LineStrings\nDESCRIPTION: Shows how to check if a LineString or LinearRing is closed using the is_ring property.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n>>> LineString([(0, 0), (1, 1), (1, -1)]).is_ring\nFalse\n>>> LinearRing([(0, 0), (1, 1), (1, -1)]).is_ring\nTrue\n```\n\n----------------------------------------\n\nTITLE: Using Set-Theoretic Operators in Shapely\nDESCRIPTION: Demonstrates how to use Python's operator overloading for set-theoretic operations (&, |, -, ^) on geometries, which correspond to intersection, union, difference, and symmetric difference respectively.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_58\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import wkt\n>>> p1 = wkt.loads('POLYGON((0 0, 1 0, 1 1, 0 1, 0 0))')\n>>> p2 = wkt.loads('POLYGON((0.5 0, 1.5 0, 1.5 1, 0.5 1, 0.5 0))')\n>>> p1 & p2\n<POLYGON ((0.5 0, 0.5 1, 1 1, 1 0, 0.5 0))>\n>>> p1 | p2\n<POLYGON ((0 0, 0 1, 0.5 1, 1 1, 1.5 1, 1.5 0, 1 0, 0.5 0, 0 0))>\n>>> p1 - p2\n<POLYGON ((0 0, 0 1, 0.5 1, 0.5 0, 0 0))>\n>>> (p1 ^ p2).wkt\n'MULTIPOLYGON (((0 0, 0 1, 0.5 1, 0.5 0, 0 0)), ((1 1, 1.5 1, 1.5 0, 1 0, 1 1)))'\n```\n\n----------------------------------------\n\nTITLE: Accessing Polygon Bounds in Shapely\nDESCRIPTION: Example showing how to access the bounding box of a Polygon as a (minx, miny, maxx, maxy) tuple.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> polygon.bounds\n(0.0, 0.0, 1.0, 1.0)\n```\n\n----------------------------------------\n\nTITLE: Slicing Point Coordinates in Shapely\nDESCRIPTION: Example of slicing Point coordinates which was a feature added in Shapely 1.2.14.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> point.coords[:]\n[(0.0, 0.0)]\n```\n\n----------------------------------------\n\nTITLE: Testing DE-9IM Relationships Between Points in Python\nDESCRIPTION: Demonstrates the relate method for determining DE-9IM matrix relationships between points. The matrix shows primarily 'F' (false) values, with the exterior intersection being 2-dimensional.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_47\n\nLANGUAGE: python\nCODE:\n```\n>>> Point(0, 0).relate(Point(1, 1))\n'FF0FFF0F2'\n```\n\n----------------------------------------\n\nTITLE: Comparing DE-9IM Matrix Order in Python\nDESCRIPTION: Shows how the order of geometries in the relate method affects the output matrix. The relationship between a point and square is different from the relationship between a square and a point.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_50\n\nLANGUAGE: python\nCODE:\n```\n>>> point.relate(square)\n'0FFFFF212'\n>>> square.relate(point)\n'0F2FF1FF2'\n```\n\n----------------------------------------\n\nTITLE: Serializing Shapely Geometries with Python's pickle Module\nDESCRIPTION: Demonstrates how to serialize and deserialize Shapely geometry objects using Python's pickle module. This allows for saving and loading geometry objects.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/geometry.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import pickle\n>>> from shapely import Point\n>>> pickled = pickle.dumps(Point(1, 1))\n>>> pickle.loads(pickled)\n<POINT (1 1)>\n```\n\n----------------------------------------\n\nTITLE: Calculating Hausdorff Distance in Python with Shapely\nDESCRIPTION: Example demonstrating how to calculate the Hausdorff distance between geometries, which is the furthest distance that a point on either geometry can be from the nearest point on the other geometry.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> point = Point(1, 1)\n>>> line = LineString([(2, 0), (2, 4), (3, 4)])\n>>> point.hausdorff_distance(line)\n3.605551275463989\n>>> point.distance(Point(3, 4))\n3.605551275463989\n```\n\n----------------------------------------\n\nTITLE: Creating Point Geometry with M Values in Python using Shapely\nDESCRIPTION: Demonstrates creation and access of a Point geometry with M (measure) values using Shapely's WKT parser. Shows how to check for M value presence and access the M coordinate value.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/release/2.x.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import shapely\n>>> point_m = shapely.from_wkt(\"POINT M (5.2 52.1 15.3)\")\n>>> point_m\n<POINT M (5.2 52.1 15.3)>\n>>> point_m.has_m\nTrue\n>>> point_m.m\n15.3\n```\n\n----------------------------------------\n\nTITLE: Accessing Shapely and GEOS Version Information\nDESCRIPTION: Shows how to access Shapely version, GEOS library version, and GEOS C API version information through attributes.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_92\n\nLANGUAGE: python\nCODE:\n```\n>>> import shapely\n>>> shapely.__version__  # doctest: +SKIP\n'2.0.0'\n>>> shapely.geos_version  # doctest: +SKIP\n(3, 10, 2)\n>>> shapely.geos_capi_version_string  # doctest: +SKIP\n'3.10.2-CAPI-1.16.0'\n```\n\n----------------------------------------\n\nTITLE: Top-level Geometry Class Imports in Shapely 2.0\nDESCRIPTION: Example showing how geometry classes can now be imported directly from the top-level shapely namespace instead of from shapely.geometry, making imports more concise while maintaining backward compatibility.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/release/2.x.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom shapely.geometry import Point\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom shapely import Point\n```\n\nLANGUAGE: python\nCODE:\n```\nimport shapely\nshapely.Point(...)\n```\n\n----------------------------------------\n\nTITLE: Spatial Sorting Implementation\nDESCRIPTION: Demonstrates how to implement spatial sorting using the within predicate.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_46\n\nLANGUAGE: python\nCODE:\n```\n>>> class Within:\n...     def __init__(self, o):\n...         self.o = o\n...     def __lt__(self, other):\n...         return self.o.within(other.o)\n```\n\n----------------------------------------\n\nTITLE: Improved Geometry Representation in Python\nDESCRIPTION: Demonstration of how Point objects are now represented in a more readable format using WKT in Shapely 2.0, showing the transition from class and id representation to descriptive Well-Known-Text formatting.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/release/2.x.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> Point(0, 0)\n<shapely.geometry.point.Point at 0x7f0b711f1310>\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> Point(0, 0)\n<POINT (0 0)>\n```\n\n----------------------------------------\n\nTITLE: Creating Identity Transform Function for Projection\nDESCRIPTION: Defines an identity function that can handle both scalar and array inputs for coordinate transformation. This function returns a tuple of the input coordinates filtered for None values.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_70\n\nLANGUAGE: python\nCODE:\n```\ndef id_func(x, y, z=None):\n    return tuple(filter(None, [x, y, z]))\n\ng2 = transform(id_func, g1)\n```\n\n----------------------------------------\n\nTITLE: Accessing Multi-part Geometry Parts Using .geoms in Shapely 2.0 (Python)\nDESCRIPTION: Demonstrates the recommended way to access parts of multi-part geometries in Shapely 2.0 using the .geoms attribute.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/migration.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> for part in mp.geoms:\n...     print(part)\nPOINT (1 1)\nPOINT (2 2)\nPOINT (3 3)\n>>> print(mp.geoms[1])\nPOINT (2 2)\n>>> len(mp.geoms)\n3\n>>> list(mp.geoms)\n[<shapely.geometry.point.Point at 0x7f2e0912bf10>,\n <shapely.geometry.point.Point at 0x7f2e09fed820>,\n <shapely.geometry.point.Point at 0x7f2e09fed4c0>]\n```\n\n----------------------------------------\n\nTITLE: Geometric Validation Decorator\nDESCRIPTION: Implementation of a decorator that validates geometric objects before returning them.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import wraps\ndef validate(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        ob = func(*args, **kwargs)\n        if not ob.is_valid:\n            raise TopologicalError(\n                \"Given arguments do not determine a valid geometric object\")\n        return ob\n    return wrapper\n```\n\n----------------------------------------\n\nTITLE: Shapely 1.8 Deprecation Warning for Mutable Geometry (Python)\nDESCRIPTION: Demonstrates the deprecation warning that will be shown in Shapely 1.8 when attempting to modify geometry coordinates in-place.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/migration.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> line.coords = [(0, 0), (10, 0), (10, 10)]\nShapelyDeprecationWarning: Setting the 'coords' to mutate a Geometry\nin place is deprecated, and will not be possible any more in Shapely 2.0\n```\n\n----------------------------------------\n\nTITLE: Converting PyGEOS Code to Shapely 2.0\nDESCRIPTION: A simple example showing how to migrate PyGEOS code to Shapely 2.0 by replacing the import statement and module references while preserving the same functionality.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/migration_pygeos.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pygeos\npolygon = pygeos.box(0, 0, 2, 2)\npoints = pygeos.points(...)\npygeos.contains(polygon, points)\n```\n\nLANGUAGE: python\nCODE:\n```\nimport shapely\npolygon = shapely.box(0, 0, 2, 2)\npoints = shapely.points(...)\nshapely.contains(polygon, points)\n```\n\n----------------------------------------\n\nTITLE: Filtering Empty Points in Python\nDESCRIPTION: Demonstrates how to filter empty geometric points using the attrgetter function to check the is_empty attribute.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n>>> from operator import attrgetter\n>>> empties = filter(attrgetter('is_empty'), [Point(), Point(0, 0)])\n>>> len(list(empties))\n1\n```\n\n----------------------------------------\n\nTITLE: Generating Function Documentation with Autosummary in reStructuredText\nDESCRIPTION: This snippet uses Sphinx's autosummary directive with a templating system to automatically generate documentation for all functions in Shapely's measurement module. It employs a loop to iterate through functions obtained from a custom 'get_module_functions' function.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/measurement.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: shapely\n\n.. autosummary::\n   :toctree: reference/\n\n{% for function in get_module_functions(\"measurement\") %}\n   {{ function }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Passing Point Instance to Point Constructor in Shapely\nDESCRIPTION: Example showing that when a Point instance is passed to the Point constructor, it returns a reference to the passed instance rather than making a copy, as geometry objects are immutable.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> Point(point)\n<POINT (0 0)>\n```\n\n----------------------------------------\n\nTITLE: Working with Empty Features in Python\nDESCRIPTION: Demonstrates the creation and properties of an empty LineString feature.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n>>> line = LineString()\n>>> line.is_empty\nTrue\n>>> line.length\n0.0\n>>> line.bounds\n(nan, nan, nan, nan)\n>>> list(line.coords)\n[]\n```\n\n----------------------------------------\n\nTITLE: Converting Geometry to NumPy Array in Shapely 1.x (Python)\nDESCRIPTION: Shows how geometry coordinates can be directly converted to a NumPy array in Shapely 1.x, which will be deprecated in 1.8.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/migration.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> line = LineString([(0, 0), (1, 1), (2, 2)])\n>>> import numpy as np\n>>> np.asarray(line)\narray([[0., 0.],\n       [1., 1.],\n       [2., 2.]])\n```\n\n----------------------------------------\n\nTITLE: Installing Shapely via pip\nDESCRIPTION: Basic installation of Shapely using pip package manager to get the binary wheel distribution.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/installation.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install shapely\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autosummary for Shapely geometry properties in reStructuredText\nDESCRIPTION: A reStructuredText template that sets up automatic documentation generation for geometry-related functions from Shapely's '_geometry' module. It uses Sphinx's autosummary directive with a Jinja loop to dynamically list and document all functions from that module.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/properties.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. currentmodule:: shapely\n\n.. autosummary::\n   :toctree: reference/\n\n{% for function in get_module_functions(\"_geometry\") %}\n   {{ function }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Using Python Format Specifications with Shapely Geometries\nDESCRIPTION: Demonstrates how to use Python's format specification with Shapely geometry objects to control output format and precision in string representations.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/geometry.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> print(f\"Cave near {pt:.3f}\")\nCave near POINT (-169.911 -18.998)\n>>> print(f\"or hex-encoded as {pt:x}\")\nor hex-encoded as 0101000000cf6a813d263d65c0bdaab35a60ff32c0\n```\n\n----------------------------------------\n\nTITLE: Setting up Sphinx class documentation template using Jinja2\nDESCRIPTION: This template configures the structure for documenting a Python class in Sphinx. It includes the class name as a heading, sets the current module context, and creates an autoclass directive that documents all members including inherited ones.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/_templates/autosummary/class.rst#2025-04-21_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline}}\n\n.. currentmodule:: {{ module }}\n\n.. autoclass:: {{ objname }}\n   :members:\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Passing LineString Instance to LineString Constructor in Shapely\nDESCRIPTION: Example showing that when a LineString instance is passed to the LineString constructor, a reference to the instance is returned rather than making a copy.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> LineString(line)\n<LINESTRING (0 0, 1 1)>\n```\n\n----------------------------------------\n\nTITLE: Defining API Reference Table of Contents in reStructuredText\nDESCRIPTION: Creates a hidden table of contents for the API Reference section, listing various API documentation pages.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :caption: API Reference\n   :hidden:\n\n   geometry\n   properties\n   creation\n   io\n   measurement\n   predicates\n   set_operations\n   constructive\n   linear\n   coverage\n   coordinates\n   strtree\n   testing\n   plotting\n```\n\n----------------------------------------\n\nTITLE: Passing LinearRing Instance to LinearRing Constructor in Shapely\nDESCRIPTION: Example showing that when a LinearRing instance is passed to the LinearRing constructor, a reference to the instance is returned rather than making a copy.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/manual.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> LinearRing(ring)\n<LINEARRING (0 0, 1 1, 1 0, 0 0)>\n```\n\n----------------------------------------\n\nTITLE: Creating a Context Manager for Suppressing Shapely 2.0 Warnings\nDESCRIPTION: Defines a context manager to temporarily ignore Shapely 2.0 deprecation warnings. This is particularly useful when working with NumPy arrays of geometry objects.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/migration.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@contextlib.contextmanager\ndef ignore_shapely2_warnings():\n    warnings.filterwarnings(\"ignore\", category=shapely_warning)\n    yield\n```\n\n----------------------------------------\n\nTITLE: Including External Files in reStructuredText\nDESCRIPTION: Includes external README, CREDITS, and FAQ files into the documentation.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../README.rst\n\n.. include:: ../CREDITS.txt\n\n.. include:: ../FAQ.rst\n```\n\n----------------------------------------\n\nTITLE: Development Environment Setup with venv\nDESCRIPTION: Setting up a development environment using Python's venv module.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/installation.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ python3 -m venv .\n$ source bin/activate\n(env) $ pip install -e .[test]\n```\n\n----------------------------------------\n\nTITLE: STRtree Implementation Changes\nDESCRIPTION: Description of changes to STRtree class implementation, including new methods and initialization parameters. No actual code snippets provided.\nSOURCE: https://github.com/shapely/shapely/blob/main/CHANGES.txt#2025-04-21_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Source Installation on Linux with Custom GEOS\nDESCRIPTION: Installing Shapely from source on Linux with system GEOS library.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/installation.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt install libgeos-dev\n$ pip install shapely --no-binary shapely\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Inconsistent Empty Geometry Creation in Shapely 1.x\nDESCRIPTION: Python console example showing how Shapely 1.x inconsistently creates empty geometries. Empty constructor creates a GeometryCollection while WKT parsing creates the correct empty polygon type.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/migration.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Using an empty constructor results in a GeometryCollection\n>>> from shapely.geometry import Polygon\n>>> g1 = Polygon()\n>>> type(g1)\n<class 'shapely.geometry.polygon.Polygon'>\n>>> g1.wkt\nGEOMETRYCOLLECTION EMPTY\n\n# Converting from WKT gives a correct empty polygon\n>>> from shapely import wkt\n>>> g2 = wkt.loads(\"POLYGON EMPTY\")\n>>> type(g2)\n<class 'shapely.geometry.polygon.Polygon'>\n>>> g2.wkt\nPOLYGON EMPTY\n```\n\n----------------------------------------\n\nTITLE: Generating Geometry Creation Function Documentation\nDESCRIPTION: A template that uses Sphinx restructuredtext directives to auto-generate documentation for geometry creation functions from the Shapely module. Uses autosummary to generate individual reference pages for each function.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/creation.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _ref-creation:\n\nGeometry creation\n=================\n\n.. currentmodule:: shapely\n\n.. autosummary::\n   :toctree: reference/\n\n{% for function in get_module_functions(\"creation\") %}\n   {{ function }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Context Manager for Handling Shapely Deprecation Warnings (Python)\nDESCRIPTION: Provides a context manager to handle Shapely deprecation warnings across different versions of Shapely.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/migration.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport contextlib\nimport shapely\nimport warnings\nfrom packaging import version  # https://packaging.pypa.io/\n\nSHAPELY_GE_20 = version.parse(shapely.__version__) >= version.parse(\"2.0a1\")\n\ntry:\n    from shapely.errors import ShapelyDeprecationWarning as shapely_warning\nexcept ImportError:\n    shapely_warning = None\n\nif shapely_warning is not None and not SHAPELY_GE_20:\n    @contextlib.contextmanager\n    def ignore_shapely2_warnings():\n        with warnings.catch_warnings():\n```\n\n----------------------------------------\n\nTITLE: GEOS Library Integration\nDESCRIPTION: References to GEOS library loading and integration, particularly on Windows and Linux systems. No actual code snippets shown, but discusses technical implementation details.\nSOURCE: https://github.com/shapely/shapely/blob/main/CHANGES.txt#2025-04-21_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Demonstrating Mutable Geometry in Shapely 1.x (Python)\nDESCRIPTION: Shows how LineString coordinates can be modified in-place in Shapely 1.x, which will be deprecated in 1.8 and removed in 2.0.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/migration.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely.geometry import LineString\n>>> line = LineString([(0,0), (2, 2)])\n>>> print(line)\nLINESTRING (0 0, 2 2)\n\n>>> line.coords = [(0, 0), (10, 0), (10, 10)]\n>>> print(line)\nLINESTRING (0 0, 10 0, 10 10)\n```\n\n----------------------------------------\n\nTITLE: Using Python super() Function Example\nDESCRIPTION: Reference to Python's builtin super() function usage according to PEP 3135 specification. Mentioned in bug fixes but no actual code shown.\nSOURCE: https://github.com/shapely/shapely/blob/main/CHANGES.txt#2025-04-21_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Iterating Through Multi-part Geometries in Shapely 1.x (Python)\nDESCRIPTION: Demonstrates how multi-part geometries can be iterated, indexed, and measured in Shapely 1.x, which will be deprecated in 1.8 and removed in 2.0.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/migration.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely.geometry import Point, MultiPoint\n>>> mp = MultiPoint([(1, 1), (2, 2), (3, 3)])\n>>> print(mp)\nMULTIPOINT (1 1, 2 2, 3 3)\n>>> for part in mp:\n...     print(part)\nPOINT (1 1)\nPOINT (2 2)\nPOINT (3 3)\n>>> print(mp[1])\nPOINT (2 2)\n>>> len(mp)\n3\n>>> list(mp)\n[<shapely.geometry.point.Point at 0x7f2e0912bf10>,\n <shapely.geometry.point.Point at 0x7f2e09fed820>,\n <shapely.geometry.point.Point at 0x7f2e09fed4c0>]\n```\n\n----------------------------------------\n\nTITLE: Installing Shapely via conda\nDESCRIPTION: Installation using conda package manager from the conda-forge channel.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/installation.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ conda install shapely --channel conda-forge\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Attributes on Geometry Objects (Python)\nDESCRIPTION: Shows how custom attributes can be set on geometry objects in Shapely 1.x, which will be deprecated in 1.8 and raise an AttributeError in 2.0.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/migration.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> line.name = \"my_geometry\"\n>>> line.name\n'my_geometry'\n```\n\n----------------------------------------\n\nTITLE: Importing Shapely Testing Functions in Python\nDESCRIPTION: Demonstrates how to properly import testing functions from the shapely.testing submodule rather than from the root shapely module.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/testing.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom shapely.testing import assert_geometries_equal\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for STRtree Class using Sphinx in RST\nDESCRIPTION: A reStructuredText (RST) directive that instructs Sphinx to automatically generate documentation for the STRtree class in the Shapely library, including all its members. This is part of Shapely's API documentation.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/strtree.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: shapely.STRtree\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Shapely 1.8 Deprecation Warning for Multi-part Geometry Iteration (Python)\nDESCRIPTION: Shows the deprecation warning that will be raised in Shapely 1.8 when iterating through multi-part geometries.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/migration.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> for part in mp:\n...     print(part)\nShapelyDeprecationWarning: Iteration over multi-part geometries is deprecated\nand will be removed in Shapely 2.0. Use the `geoms` property to access the\nconstituent parts of a multi-part geometry.\nPOINT (1 1)\nPOINT (2 2)\nPOINT (3 3)\n```\n\n----------------------------------------\n\nTITLE: Development Environment Setup with conda\nDESCRIPTION: Setting up a development environment using conda with required dependencies.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/installation.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ conda create -n env python=3 geos numpy cython pytest\n$ conda activate env\n(env) $ pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Generating Linear Operations Documentation Template in RST\nDESCRIPTION: A reStructuredText template that uses autosummary directive to automatically generate documentation for all functions in Shapely's linear module. The template uses Jinja2 templating to iterate through and list all linear operation functions.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/linear.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. currentmodule:: shapely\n\n.. autosummary::\n   :toctree: reference/\n\n{% for function in get_module_functions(\"linear\") %}\n   {{ function }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Using the Warning Suppression Context Manager with NumPy Arrays\nDESCRIPTION: Demonstrates how to use the ignore_shapely2_warnings context manager when assigning Shapely geometries to a NumPy array to prevent deprecation warnings.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/migration.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ngeoms = [...]\narr = np.empty(len(geoms), dtype=\"object\")\nwith ignore_shapely2_warnings():\n    arr[:] = geoms\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Shapely Constructive Operations\nDESCRIPTION: This snippet uses a restructuredtext directive to create an autosummary of functions from the 'constructive' module in Shapely. It dynamically generates the list using a Jinja2-like template syntax.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/constructive.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. currentmodule:: shapely\n\n.. autosummary::\n   :toctree: reference/\n\n{% for function in get_module_functions(\"constructive\") %}\n   {{ function }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Setting up Autosummary for Shapely Set Operations Documentation\nDESCRIPTION: This snippet uses reStructuredText and Jinja2 templating to set up automatic documentation for all functions in the set_operations module of Shapely. The template iterates through functions provided by the get_module_functions() helper and includes them in the documentation.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/set_operations.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. currentmodule:: shapely\n\n.. autosummary::\n   :toctree: reference/\n\n{% for function in get_module_functions(\"set_operations\") %}\n   {{ function }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: RST Template for Shapely Predicates Documentation\nDESCRIPTION: A reStructuredText template that sets up automatic documentation generation for Shapely's predicate functions using autosummary directives. The template includes a Jinja loop to dynamically list all functions from the predicates module.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/predicates.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nPredicates\n==========\n\n.. currentmodule:: shapely\n\n.. autosummary::\n   :toctree: reference/\n\n{% for function in get_module_functions(\"predicates\") %}\n   {{ function }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Template for Shapely Coverage Operations\nDESCRIPTION: A reStructuredText template for generating documentation for Shapely's coverage operations. It uses the 'autosummary' directive to automatically generate documentation for functions in the _coverage module, plus explicitly lists the coverage_union and coverage_union_all functions.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/coverage.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. currentmodule:: shapely\n\n.. autosummary::\n   :toctree: reference/\n\n{% for function in get_module_functions(\"_coverage\") %}\n   {{ function }}\n{% endfor %}\n   coverage_union\n   coverage_union_all\n```\n\n----------------------------------------\n\nTITLE: Shapely 1.8 Deprecation Warning for Direct NumPy Conversion (Python)\nDESCRIPTION: Shows the deprecation warning that will be raised in Shapely 1.8 when converting a geometry object directly to a NumPy array.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/migration.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> np.asarray(line)\nShapelyDeprecationWarning: The array interface is deprecated and will no longer\nwork in Shapely 2.0. Convert the '.coords' to a NumPy array instead.\narray([[0., 0.],\n       [1., 1.],\n       [2., 2.]])\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Table of Contents for Release Notes in reStructuredText\nDESCRIPTION: A reStructuredText directive that configures a table of contents (toctree) for Shapely's release notes. The directive sets a maximum depth of 2 and includes references to version-specific release note files.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/release.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   release/2.x\n   release/1.x\n```\n\n----------------------------------------\n\nTITLE: Accessing Geometry Coordinates Using array_interface() and ctypes (Python)\nDESCRIPTION: Demonstrates the use of array_interface() method and ctypes attribute to access geometry coordinates as array data, which will be removed in Shapely 2.0.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/migration.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> line.ctypes\n<shapely.geometry.linestring.c_double_Array_6 at 0x7f75261eb740>\n>>> line.array_interface()\n{'version': 3,\n 'typestr': '<f8',\n 'data': <shapely.geometry.linestring.c_double_Array_6 at 0x7f752664ae40>,\n 'shape': (3, 2)}\n```\n\n----------------------------------------\n\nTITLE: Source Installation on macOS with Custom GEOS\nDESCRIPTION: Installing Shapely from source on macOS with Homebrew GEOS library.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/installation.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install geos\n$ pip install shapely --no-binary shapely\n```\n\n----------------------------------------\n\nTITLE: Creating a Circular Polygon by Buffering a Point using Shapely\nDESCRIPTION: This example demonstrates how to create an approximately circular polygon by buffering a point using Shapely's scalar Geometry interface. The code creates a point at the origin and buffers it with a radius of 10 units.\nSOURCE: https://github.com/shapely/shapely/blob/main/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from shapely import Point\n>>> patch = Point(0.0, 0.0).buffer(10.0)\n>>> patch\n<POLYGON ((10 0, 9.952 -0.98, 9.808 -1.951, 9.569 -2.903, 9.239 -3.827, 8.81...>)\n>>> patch.area\n313.6548490545941\n```\n\n----------------------------------------\n\nTITLE: Installing Shapely Development Version\nDESCRIPTION: Installation of the latest development version using nightly wheels from Scientific Python index.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/installation.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install --pre --upgrade --extra-index-url https://pypi.anaconda.org/scientific-python-nightly-wheels/simple shapely\n```\n\n----------------------------------------\n\nTITLE: Running Shapely Tests\nDESCRIPTION: Instructions for running Shapely test suite using pytest.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/installation.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install pytest\n$ pytest --pyargs shapely.tests\n```\n\n----------------------------------------\n\nTITLE: Defining User Guide Table of Contents in reStructuredText\nDESCRIPTION: Creates a hidden table of contents for the User Guide section, listing various documentation pages.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :caption: User Guide\n   :hidden:\n\n   installation\n   User Manual <manual>\n   migration\n   migration_pygeos\n   release\n```\n\n----------------------------------------\n\nTITLE: Generating Shapely I/O Function Documentation with RST Template\nDESCRIPTION: RST template that uses autosummary directive to automatically generate documentation for all I/O related functions in the Shapely module. Uses a template loop to iterate through functions from the 'io' module.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/io.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: shapely\n\n.. autosummary::\n   :toctree: reference/\n\n{% for function in get_module_functions(\"io\") %}\n   {{ function }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Template for Shapely Coordinates\nDESCRIPTION: Sphinx documentation template that automatically generates API reference documentation for coordinate-related functions in the Shapely library. Uses autosummary directive and Jinja templating to dynamically list all coordinate operation functions.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/coordinates.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nCoordinate operations\n=====================\n\n.. currentmodule:: shapely\n\n.. autosummary::\n   :toctree: reference/\n\n{% for function in get_module_functions(\"coordinates\") %}\n   {{ function }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Defining Indices and Tables Section in reStructuredText\nDESCRIPTION: Adds a section for indices and tables, including links to the general index, module index, and search page.\nSOURCE: https://github.com/shapely/shapely/blob/main/docs/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: reStructuredText\nCODE:\n```\nIndices and tables\n==================\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n```"
  }
]