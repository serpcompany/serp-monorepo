[
  {
    "owner": "eclipse-theia",
    "repo": "theia",
    "content": "TITLE: Accessing Theia Services in Tests\nDESCRIPTION: Demonstrates how to access Theia application services and modules using the container and require function. Shows proper TypeScript checking setup and service initialization.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/api-testing.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\ndescribe('Editors', function () {\n\n    const { assert } = chai;\n\n    const { EditorManager } = require('@theia/editor/lib/browser/editor-manager');\n    const Uri = require('@theia/core/lib/common/uri');\n    const { WorkspaceService } = require('@theia/workspace/lib/browser/workspace-service');\n\n    /** @type {import('inversify').Container} */\n    const container = window['theia'].container;\n    const editorManager = container.get(EditorManager);\n    const workspaceService = container.get(WorkspaceService);\n\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Command - TypeScript\nDESCRIPTION: This example illustrates how to register a new command in Theia, which can be invoked using a unique identifier. The callback function logs 'Hello World!' when the command is executed.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntheia.commands.registerCommand({id:'say.hello.command'}, () => {\n    console.log(\"Hello World!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Editor Test Suite Example\nDESCRIPTION: Complete example showing a test suite that checks editor functionality. Demonstrates proper test setup, cleanup, and assertions following Theia's testing principles.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/api-testing.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\ndescribe('Editors', function () {\n\n    const { assert } = chai;\n\n    const { EditorManager } = require('@theia/editor/lib/browser/editor-manager');\n    const Uri = require('@theia/core/lib/common/uri');\n    const { WorkspaceService } = require('@theia/workspace/lib/browser/workspace-service');\n\n    /** @type {import('inversify').Container} */\n    const container = window['theia'].container;\n    const editorManager = container.get(EditorManager);\n    const workspaceService = container.get(WorkspaceService);\n\n    before(() => editorManager.closeAll({ save: false });\n\n    it('open', async () => {\n        const root = (await workspaceService.roots)[0];\n        assert.equal(editorManager.all.length, 0);\n        await editorManager.open(new Uri.default(root.uri).resolve('package.json'), {\n            mode: 'reveal'\n        });\n        assert.equal(editorManager.all.length, 1);\n    });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Plugin API - JavaScript\nDESCRIPTION: This code snippet demonstrates how a plugin can export its API surface, allowing other plugins to access its functionalities. The 'start' function returns an object containing the 'sum' and 'mul' methods.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport function start() {\n    let api = {\n        sum(a, b) {\n            return a + b;\n        },\n        mul(a, b) {\n            return a * b;\n        }\n    };\n    // 'export' public api-surface\n    return api;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin API Provider in Typescript\nDESCRIPTION: This code snippet demonstrates the implementation of a Theia plugin API provider that initializes different APIs for frontend and backend plugin hosts. The provider is responsible for setting up initialization paths and functions for plugin APIs, shared among different host types. Dependencies include @theia/plugin-ext and optionally @theia/plugin-ext-headless for headless plugins.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin-ext/doc/how-to-add-new-custom-plugin-api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@injectable()\nexport class FooExtPluginApiProvider implements ExtPluginApiProvider {\n    provideApi(): ExtPluginApi {\n        return {\n            frontendExtApi: {\n                initPath: '/path/to/foo/api/implementation.js',\n                initFunction: 'fooInitializationFunction',\n                initVariable: 'foo_global_variable'\n            },\n            backendInitPath: path.join(__dirname, 'foo-init'),\n            // Provide the same API to headless plugins, too (or a different/subset API)\n            headlessInitPath: path.join(__dirname, 'foo-init')\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Tasks in tasks.json for Eclipse Theia\nDESCRIPTION: A comprehensive example of tasks.json file with multiple task configurations for Eclipse Theia, including short-running, long-running, and platform-specific tasks.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/task/README.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tasks\": [\n        {\n            \"label\": \"[Task] short running test task (~3s)\",\n            \"type\": \"shell\",\n            \"command\": \"./task\",\n            \"args\": [\n                \"default 1\",\n                \"default 2\",\n                \"default 3\"\n            ],\n            \"options\": {\n                \"cwd\": \"${workspaceFolder}/packages/task/src/node/test-resources/\"\n            },\n            \"windows\": {\n                \"command\": \"cmd.exe\",\n                \"args\": [\n                    \"/c\",\n                    \"task.bat\",\n                    \"windows abc\"\n                ]\n            },\n            \"linux\": {\n                \"args\": [\n                    \"linux 1\",\n                    \"linux 2\",\n                    \"linux 3\"\n                ]\n            }\n        },\n        {\n            \"label\": \"[Task] long running test task (~300s)\",\n            \"type\": \"shell\",\n            \"command\": \"./task-long-running\",\n            \"args\": [],\n            \"options\": {\n                \"cwd\": \"${workspaceFolder}/packages/task/src/node/test-resources/\"\n            },\n            \"windows\": {\n                \"command\": \"cmd.exe\",\n                \"args\": [\n                    \"/c\",\n                    \"task-long-running.bat\"\n                ]\n            }\n        },\n        {\n            \"label\": \"[Task] recursively list files from workspace root\",\n            \"type\": \"shell\",\n            \"command\": \"ls\",\n            \"args\": [\n                \"-alR\"\n            ],\n            \"options\": {\n                \"cwd\": \"${workspaceFolder}\"\n            },\n            \"windows\": {\n                \"command\": \"cmd.exe\",\n                \"args\": [\n                    \"/c\",\n                    \"dir\",\n                    \"/s\"\n                ]\n            }\n        },\n        {\n            \"label\": \"[Task] Echo a string\",\n            \"type\": \"shell\",\n            \"command\": \"bash\",\n            \"args\": [\n                \"-c\",\n                \"echo 1 2 3\"\n            ],\n            \"options\": {\n                \"cwd\": \"${workspaceFolder}\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Quick Pick for User Selection - TypeScript\nDESCRIPTION: This snippet illustrates how to prompt the user to select a value from a list using the Quick Pick API in Theia. It configures options and handles user selection.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n//configure quick pick options\nconst option: theia.QuickPickOptions = {\n        machOnDescription: true,\n        machOnDetail: true,\n        canPickMany: false,\n        placeHolder: \"Select string:\",\n        onDidSelectItem: (item) => console.log(`Item ${item} is selected`)\n    };\n// call Theia api to show quick pick\ntheia.window.showQuickPick([\"foo\", \"bar\", \"foobar\"], option).then((val: string[] | undefined) => {\n        console.log(`Quick Pick Selected: ${val}`);\n    });\n```\n\n----------------------------------------\n\nTITLE: Registering Signature Help Provider - TypeScript\nDESCRIPTION: This snippet demonstrates how to register a signature help provider in Theia. It includes document selector, handler, and trigger characters for invoking the provider.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst documentsSelector: theia.DocumentSelector = { scheme: 'file', language: 'typescript' };\nconst handler = { provideSignatureHelp: signatureHelpHandler };\nconst triggerChars = '(,';\n\nconst disposable = theia.languages.registerSignatureHelpProvider(documentsSelector, handler, ...triggerChars);\n```\n\n----------------------------------------\n\nTITLE: Configuring User Preferences in Eclipse Theia (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure user preferences in Eclipse Theia using a settings.json file. It shows examples of setting editor line numbers, tab size, and file watcher exclusions.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/preferences/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    // Enable/Disable the line numbers in the monaco editor\n \"editor.lineNumbers\": \"off\",\n    // Tab width in the editor\n \"editor.tabSize\": 4,\n \"files.watcherExclude\": \"path/to/file\"\n}\n```\n\n----------------------------------------\n\nTITLE: Internationalization Usage Example in TypeScript\nDESCRIPTION: Shows proper usage of the localization function for internationalizing user-facing text with parameter substitution.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/coding-guidelines.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// bad\nnls.localize('hello', `Hello there ${name}.`);\n\n// good\nnls.localize('hello', 'Hello there {0}.', name);\n```\n\n----------------------------------------\n\nTITLE: Binding Custom Preview Handler\nDESCRIPTION: This code snippet demonstrates how to implement a custom preview handler by creating a class that implements the PreviewHandler interface, and then binding it within the dependency injection container.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/preview/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@injectable\nclass MyPreviewHandler implements PreviewHandler {\n  ...\n}\n// in container\nbind(MyPreviewHandler).toSelf().inSingletonScope();\nbind(PreviewHandler).toService(MyPreviewHandler);\n```\n\n----------------------------------------\n\nTITLE: Registering Code Symbol Provider in Theia Plugin\nDESCRIPTION: This snippet demonstrates how to register a code symbol provider in a Theia plugin. It includes the setup of a document selector, provider object, metadata, and registration with the Theia languages API.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nconst documentsSelector: theia.DocumentSelector = { scheme: 'file', language: 'typescript' };\nconst provider = { provideDocumentSymbols: provideSymbols };\nconst metadata = { label: 'providerLabel' }\n\nconst disposable = theia.languages.registerDocumentSymbolProvider(documentsSelector, provider, metadata);\n\n...\n\nfunction provideSymbols(document: theia.TextDocument): theia.ProviderResult<theia.SymbolInformation[] | theia.DocumentSymbol[]> {\n    // code here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Keybindings in JSON\nDESCRIPTION: This code snippet shows how to define custom keybindings in a keymaps.json file for Eclipse Theia. Users can specify a unique command id and a corresponding keybinding. The example includes a basic binding for a 'quickCommand'. Requires a JSON environment to parse and use the keymaps file.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/keymaps/README.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"command\": \"quickCommand\",\n        \"keybinding\": \"ctrl+shift+f4\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Registering Document Link Provider in Theia Plugin\nDESCRIPTION: This snippet demonstrates how to register a document link provider in a Theia plugin. It includes the setup of a document selector, provider object, and registration with the Theia languages API.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nconst documentsSelector: theia.DocumentSelector = { scheme: 'file', language: 'typescript' };\nconst provider = { provideDocumentLinks: provideLinks };\n\nconst disposable = theia.languages.registerDocumentLinkProvider(documentsSelector, provider);\n\n...\n\nfunction provideLinks(document: theia.TextDocument): theia.ProviderResult<theia.DocumentLink[]> {\n    // code here\n}\n```\n\n----------------------------------------\n\nTITLE: Contributing Variables in Eclipse Theia\nDESCRIPTION: This code snippet demonstrates how to contribute custom variables in Eclipse Theia. It defines an EditorVariableContribution class that registers two variables: ${file} for the current file name and ${lineNumber} for the current line number.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/variable-resolver/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@injectable()\nexport class EditorVariableContribution implements VariableContribution {\n\n    constructor(\n        @inject(EditorManager) protected readonly editorManager: EditorManager\n    ) { }\n\n    registerVariables(variables: VariableRegistry): void {\n        variables.registerVariable({\n            name: 'file',\n            description: 'The name of the file opened in the current editor',\n            resolve: () => {\n                const currentEditor = this.getCurrentEditor();\n                if (currentEditor) {\n                    return currentEditor.uri.displayName;\n                }\n                return undefined;\n            }\n        });\n        variables.registerVariable({\n            name: 'lineNumber',\n            description: 'The current line number in the current file',\n            resolve: () => {\n                const currentEditor = this.getCurrentEditor();\n                if (currentEditor) {\n                    return `${currentEditor.cursor.line + 1}`;\n                }\n                return undefined;\n            }\n        });\n    }\n\n    protected getCurrentEditor(): TextEditor | undefined {\n        const currentEditor = this.editorManager.currentEditor;\n        if (currentEditor) {\n            return currentEditor.editor;\n        }\n        return undefined;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reference Provider in Theia Plugin\nDESCRIPTION: This code snippet shows how to implement a reference provider in a Theia plugin. It includes the setup of a document selector, handler function, and registration with the Theia languages API.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nconst documentsSelector: theia.DocumentSelector = { scheme: 'file', language: 'typescript' };\nconst handler: theia.ReferenceProvider = { provideReferences: provideReferencesHandler };\n\nconst disposable = theia.languages.registerReferenceProvider(documentsSelector, handler);\n\n...\n\nfunction provideReferencesHandler(document: theia.TextDocument, position: theia.Position, context: theia.ReferenceContext): theia.ProviderResult<theia.Location[]> {\n    // code here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Servers in Theia Settings\nDESCRIPTION: A JSON configuration example showing how to set up various MCP servers including memory, brave-search, filesystem, and git servers. Each server configuration specifies the command, arguments, environment variables, and autostart options.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/ai-mcp/README.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ai-features.mcp.mcpServers\": {\n        \"memory\": {\n            \"command\": \"npx\",\n            \"args\": [\n              \"-y\",\n              \"@modelcontextprotocol/server-memory\"\n            ],\n            \"autostart\": false\n          },\n          \"brave-search\": {\n            \"command\": \"npx\",\n            \"args\": [\n              \"-y\",\n              \"@modelcontextprotocol/server-brave-search\"\n            ],\n            \"env\": {\n              \"BRAVE_API_KEY\": \"YOUR_API_KEY\"\n            }\n          },\n          \"filesystem\": {\n            \"command\": \"npx\",\n            \"args\": [\n              \"-y\",\n              \"@modelcontextprotocol/server-filesystem\",\n              \"ABSOLUTE_PATH_TO_ALLOWED_DIRECTORY\",\n            ]\n          },\n          \"git\": {\n            \"command\": \"uv\",\n            \"args\": [\n              \"--directory\",\n              \"/path/to/repo\",\n              \"run\",\n              \"mcp-server-git\"\n            ]\n          },\n          \"git2\": {\n            \"command\": \"uvx\",\n            \"args\": [\n              \"mcp-server-git\",\n              \"--repository\",\n              \"/path/to/otherrepo\"\n            ]\n          }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Changes in Diagnostics - TypeScript\nDESCRIPTION: This snippet demonstrates how to listen for changes in diagnostics using the `onDidChangeDiagnostics` event. The event handler receives a `DiagnosticChangeEvent` which contains a list of URIs that have changed diagnostics.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ndisposables.push(\n    theia.languages.onDidChangeDiagnostics((event: theia.DiagnosticChangeEvent) => {\n        // handler code here\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Executing a Command - TypeScript\nDESCRIPTION: This snippet demonstrates how to invoke a registered command in Theia using its ID. It executes the command identified by 'core.about'.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntheia.commands.executeCommand('core.about');\n```\n\n----------------------------------------\n\nTITLE: Providing Document Highlights - TypeScript\nDESCRIPTION: This snippet implements the document highlight handler that is responsible for returning highlights for a given document and position. It should return an array of highlights corresponding to the symbol.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nfunction provideDocumentHighlightsHandler(document: theia.TextDocument, position: theia.Position): theia.ProviderResult<theia.DocumentHighlight[]> {\n    // code here\n}\n```\n\n----------------------------------------\n\nTITLE: Using Input Box for User Input - TypeScript\nDESCRIPTION: This example shows how to prompt a user for input using Theia's input box. It configures options for the input box and logs the result after the user submits their input.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst option: theia.InputBoxOptions = {\n    prompt:\"Hello from Plugin\",\n    placeHolder:\"Type text there\",\n    ignoreFocusOut: false,\n    password: false,\n    value:\"Default value\"\n};\ntheia.window.showInputBox(option).then((s: string | undefined) => {\n    console.log(typeof s !== 'undefined'? s : \"Input was canceled\");\n});\n```\n\n----------------------------------------\n\nTITLE: Activating a Plugin in TypeScript\nDESCRIPTION: Demonstrates how to activate a plugin using the PluginManager API. This is typically used in application-specific scenarios for headless plugins.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Plugin-API.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nPluginManager::activatePlugin(pluginId)\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Lens Provider in Theia Plugin\nDESCRIPTION: This code snippet shows how to implement a code lens provider in a Theia plugin. It includes the setup of a document selector, provider object, and registration with the Theia languages API.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nconst documentsSelector: theia.DocumentSelector = { scheme: 'file', language: 'typescript' };\nconst provider = { provideCodeLenses: provideLenses };\n\nconst disposable = theia.languages.registerCodeLensProvider(documentsSelector, provider);\n\n...\n\nfunction provideLenses(document: theia.TextDocument): theia.ProviderResult<theia.CodeLens[]> {\n    // code here\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin API Factory in TypeScript\nDESCRIPTION: Demonstrates how to create an API factory that initializes and exposes plugin API functionality. The factory creates shared implementations and returns an API object containing namespaces and types for each plugin instance.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Plugin-API.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function createAPIFactory(\n    rpc: RPCProtocol,\n    pluginManager: PluginManager,\n    envExt: EnvExtImpl,\n    debugExt: DebugExtImpl,\n    preferenceRegistryExt: PreferenceRegistryExtImpl,\n    editorsAndDocumentsExt: EditorsAndDocumentsExtImpl,\n    workspaceExt: WorkspaceExtImpl,\n    messageRegistryExt: MessageRegistryExt,\n    clipboard: ClipboardExt,\n    webviewExt: WebviewsExtImpl\n): PluginAPIFactory {\n\n    const authenticationExt = rpc.set(MAIN_RPC_CONTEXT.AUTHENTICATION_EXT, new AuthenticationExtImpl(rpc));\n    const commandRegistry = rpc.set(MAIN_RPC_CONTEXT.COMMAND_REGISTRY_EXT, new CommandRegistryImpl(rpc));\n\n    return function (plugin: InternalPlugin): typeof theia {\n        const authentication: typeof theia.authentication = {\n        };\n\n        return <typeof theia>{\n            version: require('../../package.json').version,\n            authentication,\n            StatusBarAlignment: StatusBarAlignment,\n            Disposable: Disposable,\n            EventEmitter: Emitter,\n            CancellationTokenSource: CancellationTokenSource,\n        };\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Information Message with Buttons - TypeScript\nDESCRIPTION: This example shows how to display an information message with clickable buttons using Theia's notification API, handling the user's button click.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntheia.window.showInformationMessage('Information message', 'Btn1', 'Btn2').then(result => {\n    console.log(\"Click button\", result);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Diagnostics for a URI - TypeScript\nDESCRIPTION: This snippet shows how to set diagnostics for a specific URI in a diagnostics collection. The `set` method is used to replace existing diagnostics or clear them if `undefined` is passed.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ndiagnosticsCollection.set(uri, newDiagnostics)\n```\n\n----------------------------------------\n\nTITLE: Getting All Diagnostics - TypeScript\nDESCRIPTION: This snippet shows how to fetch all existing diagnostics using the Theia API. It illustrates that calling `theia.languages.getDiagnostics()` without parameters retrieves diagnostics for all files.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst diagnostics =  theia.languages.getDiagnostics()\n```\n\n----------------------------------------\n\nTITLE: Registering Plugin API Provider in Typescript\nDESCRIPTION: This code snippet shows how to register a Theia plugin API provider within a backend module. The provider is bound to a singleton scope and linked to the ExtPluginApiProvider interface. This registration allows Theia to utilize the provider's API initialization logic within the plugin host environment.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin-ext/doc/how-to-add-new-custom-plugin-api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbind(FooExtPluginApiProvider).toSelf().inSingletonScope();\nbind(Symbol.for(ExtPluginApiProvider)).toService(FooExtPluginApiProvider);\n```\n\n----------------------------------------\n\nTITLE: Implementing Workspace Symbol Provider in Theia Plugin\nDESCRIPTION: This code snippet shows how to implement a workspace symbol provider in a Theia plugin. It demonstrates two scenarios: one where resolveWorkspaceSymbol is not needed, and another where it is required for resolving symbol locations.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\ntheia.languages.registerWorkspaceSymbolProvider({\n    provideWorkspaceSymbols(query: string): theia.SymbolInformation[] {\n        return [new theia.SymbolInformation('my symbol', 4, new theia.Range(new theia.Position(0, 0), new theia.Position(0, 0)), theia.Uri.parse(\"some_uri_to_file\"))];\n    }\n} as theia.WorkspaceSymbolProvider);\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntheia.languages.registerWorkspaceSymbolProvider({\n    provideWorkspaceSymbols(query: string): theia.SymbolInformation[] {\n        return [new theia.SymbolInformation('my symbol', 4, 'my container name', new theia.Location(theia.Uri.parse(\"some_uri_to_file\"), undefined))];\n    },\n    resolveWorkspaceSymbol(symbolInformation: theia.SymbolInformation): theia.SymbolInformation {\n        symbolInformation.location.range = new theia.Range(new theia.Position(0, 0), new theia.Position(0, 0));\n        return symbolInformation;\n    }\n} as theia.WorkspaceSymbolProvider);\n```\n\n----------------------------------------\n\nTITLE: Creating a Terminal - TypeScript\nDESCRIPTION: This snippet shows how to create a new terminal in Theia with a specified shell and arguments. The terminal is initialized with 'Bash' as the shell.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst terminal = theia.window.createTerminal(\"Bash terminal\", \"/bin/bash\", [\"-l\"]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Diagnostics Collection - TypeScript\nDESCRIPTION: This snippet illustrates how to create a diagnostics collection in Theia. A collection allows users to manage and operate on multiple diagnostics across different URIs.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst diagnosticsCollection = theia.languages.createDiagnosticCollection(collectionName);\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Diagnostics - TypeScript\nDESCRIPTION: This snippet demonstrates how to set multiple diagnostics at once in a diagnostics collection by passing an array of tuples with URIs and their associated diagnostics.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst changes: [Uri, Diagnostic[] | undefined][] = [];\n\nchanges.push([uri1, diagnostics1]);\nchanges.push([uri2, diagnostics2]);\nchanges.push([uri3, undefined]);\nchanges.push([uri1, diagnostics4]); // uri1 again\n\ndiagnosticsCollection.set(changes);\n```\n\n----------------------------------------\n\nTITLE: Configuring Theia Extension in package.json\nDESCRIPTION: Example configuration showing how to declare Theia extensions in package.json. Demonstrates frontend, backend, and electron-specific module configurations.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/core/README_TEMPLATE.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"theiaExtensions\": [{\n      \"frontend\": \"lib/myExtension/browser/myextension-frontend-module\",\n      \"backend\": \"lib/myExtension/node/myextension-backend-module\",\n    }, {\n      \"frontend\": \"lib/myExtension2/browser/myextension2-browser-module\",\n      \"frontendElectron\": \"lib/myExtension2/electron-browser/myextension2-electron-browser-module\",\n      \"backend\": \"lib/myExtension2/node/myextension2-node-module\",\n      \"backendElectron\": \"lib/myExtension2/electron-main/myextension2-electron-main-module\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Stability Annotations in TypeScript\nDESCRIPTION: Demonstrates how to properly annotate experimental and stable APIs using TypeScript interfaces. Shows usage of @experimental, @stable, @since, and @deprecated tags for API documentation.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/api-management.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * One does not need any annotations while working on experimental APIs.\n */\nexport interface ExperimentalInterface {\n}\n\n/**\n * @since 0.1.0\n * @stable since 1.0.0\n */\nexport interface StableInterface {\n\n    /**\n     * The same as `StableInterface`.\n     */\n    stableMethod(): void;\n\n    /**\n     * Adding new API to stable API should be explicit.\n     *\n     * @since 1.1.0\n     * @experimental\n     */\n    experimentalMethod(): void;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Variable Resolver Service in Eclipse Theia\nDESCRIPTION: This code snippet shows how to use the Variable Resolver Service in a custom service. It demonstrates resolving a string containing variable placeholders using the VariableResolverService.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/variable-resolver/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@injectable()\nexport class MyService {\n\n    constructor(\n        @inject(VariableResolverService) protected readonly variableResolver: VariableResolverService\n    ) { }\n\n    async resolve(): Promise<void> {\n        const text = 'cursor is in file ${file} on line ${lineNumber}';\n        const resolved = await this.variableResolver.resolve(text);\n        console.log(resolved);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Definitions - TypeScript\nDESCRIPTION: This snippet implements the definition provider's handler that returns a definition or definition link in response to a `Go To Definition` command.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nfunction provideDefinitionHandler(document: theia.TextDocument, position: theia.Position): theia.ProviderResult<theia.Definition | theia.DefinitionLink[]> {\n    // code here\n}\n```\n\n----------------------------------------\n\nTITLE: Definition Provider Registration - TypeScript\nDESCRIPTION: This snippet shows how to register a definition provider in Theia. It includes the document selector and the handler responsible for processing definition requests.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst documentsSelector: theia.DocumentSelector = { scheme: 'file', language: 'typescript' };\nconst handler: theia.DefinitionProvider = { provideDefinition: provideDefinitionHandler };\n\nconst disposable = theia.languages.registerDefinitionProvider(documentsSelector, handler);\n```\n\n----------------------------------------\n\nTITLE: Implementing FooExt in Plugin Host\nDESCRIPTION: This snippet shows how to register and retrieve the main application proxy on the plugin host side using the Theia inversify dependency injection framework. It demonstrates the injection of the RPCProtocol to establish communication with the main application.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin-ext/doc/how-to-add-new-custom-plugin-api.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inject, injectable } from '@theia/core/shared/inversify';\nimport { RPCProtocol } from '@theia/plugin-ext/lib/common/rpc-protocol';\nimport { FooExt, FooMain, FOO_PLUGIN_RPC_CONTEXT } from '../common/foo-api-rpc';\n\n@injectable()\nexport class FooExtImpl implements FooExt {\n    // Main application RCP counterpart\n    private proxy: FooMain;\n\n    constructor(@inject(RPCProtocol) rpc: RPCProtocol) {\n        // Retrieve a proxy for the main side\n        this.proxy = rpc.getProxy(FOO_PLUGIN_RPC_CONTEXT.FOO_MAIN);\n    }\n\n    getFooImpl(): Promise<Foo> {\n        return this.proxy.$getFooImpl();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Imported API from Another Plugin - JavaScript\nDESCRIPTION: This snippet shows how to import and utilize the API from another plugin to execute its methods. It accesses the exported API from the 'genius.math' plugin and logs the result of the 'mul' method.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet mathExt = theia.plugins.getPlugin('genius.math');\nlet importedApi = mathExt.exports;\nconsole.log(importedApi.mul(42, 1));\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Theia Application with Toolbar\nDESCRIPTION: Shows how to extend the TheiaApp class to add custom capabilities like a toolbar, including implementation of custom page objects.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/examples/playwright/docs/EXTENSIBILITY.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyTheiaApp extends TheiaApp {\n  readonly toolbar = new MyToolbar(this);\n}\n\nexport class MyToolbar extends TheiaPageObject {\n  selector = 'div#myToolbar';\n  async clickItem1(): Promise<void> {\n    await this.page.click(`${this.selector} .item1`);\n  }\n}\n\nconst ws = new TheiaWorkspace(['src/tests/resources/sample-files1']);\nconst app = await TheiaAppLoader.load({ playwright, browser }, ws, MyTheiaApp);\nawait app.toolbar.clickItem1();\n```\n\n----------------------------------------\n\nTITLE: Hover Message Registration - TypeScript\nDESCRIPTION: This snippet illustrates how to register a hover provider in Theia which shows a hover message for all TypeScript files. The provider returns a hover message when triggered.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ntheia.languages.registerHoverProvider('typescript', {\n    provideHover(doc: theia.TextDocument, position: theia.Position, token: theia.CancellationToken) {\n        return new theia.Hover('Hover for all **typescript** files.');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Diagnostics for Specific URI - TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve diagnostics for a specific resource URI using the Theia API. It calls `theia.languages.getDiagnostics` with a provided URI. If the diagnostics are not found, an empty array is returned.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst diagnostics = theia.languages.getDiagnostics(uriToResource)\n```\n\n----------------------------------------\n\nTITLE: Creating a Terminal with Options - TypeScript\nDESCRIPTION: This example illustrates how to create a terminal with specific options defined in theia.TerminalOptions. It allows for configuration of various terminal parameters.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst options: theia.TerminalOptions = {\n    name: \"Bash terminal\",\n    shellPath: \"/bin/bash\",\n    shellArgs: [\"-l\"],\n    cwd: \"/projects\",\n    env: { \"TERM\": \"screen\" }\n};\nconst terminal = theia.window.createTerminal(options);\n```\n\n----------------------------------------\n\nTITLE: Running Theia Browser Example with SSL\nDESCRIPTION: Commands to clone, build, and run the Theia browser example with SSL support, specifying certificate and key files.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/eclipse-theia/theia \\\n    && cd theia \\\n    && npm install \\\n    && npm run download:plugins \\\n    && npm run build:browser \\\n    && npm run start:browser --ssl --cert /path/to/cert.crt --certkey /path/to/certkey.key\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Theia Browser Example\nDESCRIPTION: Commands to clone the Theia repository, install dependencies, build the browser example, download plugins, and start the browser application.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/eclipse-theia/theia \\\n    && cd theia \\\n    && npm install \\\n    && npm run build:browser \\\n    && npm run download:plugins \\\n    && npm run start:browser\n```\n\n----------------------------------------\n\nTITLE: Getting Diagnostics for Current File - TypeScript\nDESCRIPTION: This snippet retrieves the diagnostics for the currently active file in the Theia editor. It makes use of `theia.window.activeTextEditor.document.uri` to get the diagnostics for the file currently open in the editor.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst diagnosticsForCurrentFile = theia.languages.getDiagnostics(theia.window.activeTextEditor.document.uri)\n```\n\n----------------------------------------\n\nTITLE: Defining API in TypeScript\nDESCRIPTION: This TypeScript code snippet defines an API module with a class and a namespace. The API is designed to be implemented as a separate npm package, facilitating easy import and usage with no additional dependencies. The module exports a class and a namespace with an asynchronous function that returns a promise.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin-ext/doc/how-to-add-new-custom-plugin-api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@bar/foo' {\n    export class Foo { }\n\n    export namespace fooBar {\n        export function getFoo(): Promise<Foo>;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Component with Property Injection in TypeScript\nDESCRIPTION: Demonstrates how to use property injection and @postConstruct for initializing a component in Theia. This approach is preferred over constructor injection to avoid breaking changes when adding new dependencies.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/coding-guidelines.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@injectable()\nexport class MyComponent {\n\n    @inject(ApplicationShell)\n    protected readonly shell: ApplicationShell;\n\n    @postConstruct()\n    protected init(): void {\n        this.shell.activeChanged.connect(() => this.doSomething());\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin API Provider in Node.js\nDESCRIPTION: This Node.js code snippet implements the backend logic for creating API objects using InversifyJS in a Theia plugin host. The container module binds API implementations to specific import names within the plugin host environment, allowing dynamic module loading and API initialization via InversifyJS's dependency injection mechanism.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin-ext/doc/how-to-add-new-custom-plugin-api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inject, injectable } from '@theia/core/shared/inversify';\nimport { RPCProtocol } from '@theia/plugin-ext/lib/common/rpc-protocol';\nimport { Plugin } from '@theia/plugin-ext/lib/common/plugin-api-rpc';\nimport { PluginContainerModule } from '@theia/plugin-ext/lib/plugin/node/plugin-container-module';\nimport { FooExt } from '../common/foo-api-rpc';\nimport { FooExtImpl } from './foo-ext-impl';\n\nimport * as fooBarAPI from '@bar/foo';\n\ntype FooBarApi = typeof fooBarAPI;\ntype Foo = FooBarApi['Foo'];\n\nconst FooBarApiFactory = Symbol('FooBarApiFactory');\n\n// Retrieved by Theia to configure the Inversify DI container when the plugin is initialized.\n// This is called when the plugin-host process is forked.\nexport const containerModule = PluginContainerModule.create(({ bind, bindApiFactory }) => {\n    // Bind the implementations of our Ext API interfaces (here just one)\n    bind(FooExt).to(FooExtImpl).inSingletonScope();\n\n    // Bind our API factory to the module name by which plugins will import it\n    bindApiFactory('@bar/foo', FooBarApiFactory, FooBarApiFactoryImpl);\n});\n```\n\n----------------------------------------\n\nTITLE: Sample Playwright Test for Theia Text Editor\nDESCRIPTION: Example test that demonstrates testing text editor functionality including editing content, undo/redo operations, verifying editor state, and saving files. It uses page objects to interact with the Theia application and text editor.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/examples/playwright/docs/GETTING_STARTED.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntest('should undo and redo text changes and correctly update the dirty state', async ({ playwright, browser }) => {\n    // 1. set up workspace contents and open Theia app\n    const ws = new TheiaWorkspace(['src/tests/resources/sample-files1']);\n    app = await TheiaAppLoader.load( { playwright, browser }, ws);\n\n    // 2. open Theia text editor\n    const sampleTextEditor = await app.openEditor(\n        'sample.txt',\n        TheiaTextEditor\n    );\n\n    // 3. make a change and verify contents and dirty\n    await sampleTextEditor.replaceLineWithLineNumber('change', 1);\n    expect(await sampleTextEditor.textContentOfLineByLineNumber(1)).toBe(\n        'change'\n    );\n    expect(await sampleTextEditor.isDirty()).toBe(true);\n\n    // 4. undo and verify contents and dirty state\n    await sampleTextEditor.undo(2);\n    expect(await sampleTextEditor.textContentOfLineByLineNumber(1)).toBe(\n        'this is just a sample file'\n    );\n    expect(await sampleTextEditor.isDirty()).toBe(false);\n\n    // 5. undo and verify contents and dirty state\n    await sampleTextEditor.redo(2);\n    expect(await sampleTextEditor.textContentOfLineByLineNumber(1)).toBe(\n        'change'\n    );\n    expect(await sampleTextEditor.isDirty()).toBe(true);\n\n    // 6. save verify dirty state\n    await sampleTextEditor.save();\n    expect(await sampleTextEditor.isDirty()).toBe(false);\n    await sampleTextEditor.close();\n\n    // 7. reopen editor and verify dirty state\n    const reopenedEditor = await app.openEditor('sample.txt', TheiaTextEditor);\n    expect(await reopenedEditor.textContentOfLineByLineNumber(1)).toBe(\n        'change'\n    );\n\n    await reopenedEditor.close();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Re-Exported Dependencies in Theia Extensions\nDESCRIPTION: Example showing how to use re-exported dependencies from @theia/core, specifically demonstrating the use of inversify decorators.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/core/README_TEMPLATE.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { injectable } from '@theia/core/shared/inversify';\n\n@injectable()\nexport class SomeClass {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Headless Playwright Tests for Theia via CLI in Bash\nDESCRIPTION: This command runs the Playwright tests for Theia in headless mode using npm. It can be modified to run specific test files by providing a file path or using the -g flag with a partial test file name.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/examples/playwright/docs/DEVELOPING.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run ui-tests\n```\n\n----------------------------------------\n\nTITLE: Using MCP Brave Search in a Prompt Template\nDESCRIPTION: Example markdown syntax for incorporating the Brave search MCP tool function in a prompt template. This demonstrates how to access MCP capabilities through template syntax.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/ai-mcp/README.md#2025-04-20_snippet_1\n\nLANGUAGE: md\nCODE:\n```\n~{mcp_brave-search_brave_web_search}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom OpenAI Models in Theia\nDESCRIPTION: This snippet shows the TypeScript interface for configuring custom OpenAI models in Theia. It includes options for specifying the model, URL, API key, and other settings.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/ai-openai/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    model: string,\n    url: string,\n    id?: string,\n    apiKey?: string | true,\n    apiVersion?: string | true,\n    developerMessageSettings?: 'user' | 'system' | 'developer' | 'mergeWithFollowingUserMessage' | 'skip',\n    enableStreaming?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Declarations - TypeScript\nDESCRIPTION: This snippet provides the implementation of the declaration provider's handler that is invoked when a user executes a `Go To Declaration` command.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nfunction provideDeclarationHandler(document: theia.TextDocument, position: theia.Position): theia.ProviderResult<theia.Definition | theia.DefinitionLink[]> {\n    // code here\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Information Message - TypeScript\nDESCRIPTION: This snippet demonstrates how to show an information message to the user using the notification API in Theia. It simply logs an information message.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntheia.window.showInformationMessage('Information message');\n```\n\n----------------------------------------\n\nTITLE: Implementing FooMain in Main Application\nDESCRIPTION: Illustrates the implementation of the FooMain interface on the main application side, including initializing RPC communication and providing functionality to receive calls from the plugin-host to execute specific tasks.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin-ext/doc/how-to-add-new-custom-plugin-api.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@injectable()\nexport class FooMainImpl implements FooMain {\n    @inject(MessageService) protected messageService: MessageService;\n    protected proxy: FooExt;\n\n    constructor(@inject(RPCProtocol) rpc: RPCProtocol) {\n        // We would use this if we had a need to call back into the plugin-host/plugin\n        this.proxy = rpc.getProxy(FOO_MAIN_RPC_CONTEXT.FOO_EXT);\n    }\n\n    async $getFooImpl(): Promise<Foo> {\n        this.messageService.info('We were called from the plugin-host at the behest of the plugin.');\n        return new Foo();\n    }\n}\n\n@injectable()\nexport class FooMainPluginApiProvider implements MainPluginApiProvider {\n    @inject(MessageService) protected messageService: MessageService;\n    @inject(FooMain) protected fooMain: FooMain;\n\n    initialize(rpc: RPCProtocol): void {\n        this.messageService.info('Initialize RPC communication for FooMain!');\n        rpc.set(FOO_PLUGIN_RPC_CONTEXT.FOO_MAIN, this.fooMain);\n    }\n}\n\nexport default new ContainerModule(bind => {\n    bind(MainPluginApiProvider).to(FooMainPluginApiProvider).inSingletonScope();\n    bind(FooMain).to(FooMainImpl).inSingletonScope();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI Model in Theia\nDESCRIPTION: This JSON snippet demonstrates how to configure an Azure-hosted OpenAI model in Theia. It includes settings for enabling AI, custom OpenAI models, and agent settings for different purposes.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/ai-openai/README.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ai-features.AiEnable.enableAI\": true,\n  \"ai-features.openAiCustom.customOpenAiModels\": [\n    {\n      \"model\": \"gpt4o\",\n      \"url\": \"<AZURE_OPENAI_API_BASE_URL>\",\n      \"id\": \"azure-deployment\",\n      \"apiKey\": \"<AZURE_OPENAI_API_KEY>\",\n      \"apiVersion\": \"<AZURE_OPENAI_API_VERSION>\",\n      \"developerMessageSettings\": \"system\"\n    }\n  ],\n  \"ai-features.agentSettings\": {\n    \"Universal\": {\n      \"languageModelRequirements\": [\n        {\n          \"purpose\": \"chat\",\n          \"identifier\": \"azure-deployment\"\n        }\n      ]\n    },\n    \"Orchestrator\": {\n      \"languageModelRequirements\": [\n        {\n          \"purpose\": \"agent-selection\",\n          \"identifier\": \"azure-deployment\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Window State - TypeScript\nDESCRIPTION: This snippet demonstrates how to track the state of the IDE window. It subscribes to changes in the window state and logs whether the window is focused.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst disposable = theia.window.onDidChangeWindowState((windowState: theia.WindowState) => {\n    console.log('Window focus changed: ', windowState.focused);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Entry Points in package.json\nDESCRIPTION: This snippet demonstrates how to configure different entry points for headless and backend plugin contexts in the package.json manifest. It uses Theia-specific 'theiaPlugin' object for headless plugins and standard VS Code 'main' property for backend plugins.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/sample-plugins/sample-namespace/plugin-gotd/README.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"theiaPlugin\": {\n    \"backend\": \"headless.js\"\n  },\n  \"main\": \"backend.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating API Object for Plugins in TypeScript\nDESCRIPTION: This code snippet provides an implementation of an API factory that constructs a local API object matching the defined API contract. When a plugin imports '@bar/foo', the displayed createApi method generates a local API object that interacts with other plugin components using RPCProtocol. The API instance fulfills RPC-based functionality and facilitates communication with the main application.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin-ext/doc/how-to-add-new-custom-plugin-api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Creates the @foo/bar API object\n@injectable()\nclass FooBarApiFactoryImpl {\n    @inject(RPCProtocol) protected readonly rpc: RPCProtocol;\n    @inject(FooExt) protected readonly fooExt: FooExt;\n\n    @postConstruct()\n    initialize(): void {\n        this.rpc.set(FOO_MAIN_RPC_CONTEXT.FOO_EXT, this.fooExt);\n    }\n\n    // The plugin host expects our API factory to export a `createApi()` method\n    createApi(plugin: Plugin): FooBarApi {\n        const self = this;\n        return {\n            fooBar: {\n                getFoo(): Promise<Foo> {\n                    return self.fooExt.getFooImpl();\n                }\n            }\n        };\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Llamafile Integration in Theia Preferences\nDESCRIPTION: Example configuration for the AI Llamafile integration in Theia. This configuration defines an array of Llamafile objects, each with a name, URI path to the llamafile, and a port number for the server.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/ai-llamafile/README.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ai-features.llamafile.llamafiles\": [\n        {\n            \"name\": \"MyLlamaFile\",\n            \"uri\": \"file:///path/to/my.llamafile\",\n            \"port\": 30000\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Deprecation in TypeScript\nDESCRIPTION: Shows how to properly deprecate a stable interface using TypeScript. Demonstrates the correct usage of @deprecated tag along with version information and migration guidance.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/api-management.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @since 0.1.0\n * @stable since 1.0.0\n * @deprecated since 1.1.0 - because that and that, use that instead\n */\nexport interface DeprecatedStableInterface {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Word Under Cursor Hover Message - TypeScript\nDESCRIPTION: This snippet provides an implementation of a hover provider that puts the word under the cursor into the hover message. It retrieves the range of the word and generates a hover based on it.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ntheia.languages.registerHoverProvider({scheme: 'file'}, {\n    provideHover(doc: theia.TextDocument, position: theia.Position, token: theia.CancellationToken) {\n        const range = doc.getWordRangeAtPosition(position);\n        const text = doc.getText(range);\n        return new theia.Hover(text);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up RPC Proxies for Theia Plugins\nDESCRIPTION: Defines symbolic identifiers and TypeScript interfaces for communication over RPC with the main application and plugin host. The snippet illustrates the creation of proxy identifiers needed for interaction between different parts of the application.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin-ext/doc/how-to-add-new-custom-plugin-api.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const FooMain = Symbol('FooMain');\nexport interface FooMain {\n    $getFooImpl(): Promise<Foo>;\n}\n\nexport const FooExt = Symbol('FooExt');\nexport interface FooExt {\n    // placeholder for callbacks for the main application to the extension\n}\n\n// Plugin host will obtain a proxy using these IDs, main application will register an implementation for it.\nexport const FOO_PLUGIN_RPC_CONTEXT = {\n    FOO_MAIN: createProxyIdentifier<FooMain>('FooMain')\n};\n\n// Main application will obtain a proxy using these IDs, plugin host will register an implementation for it.\nexport const FOO_MAIN_RPC_CONTEXT = {\n    FOO_EXT: createProxyIdentifier<FooExt>('FooExt')\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Language with Monaco in TypeScript\nDESCRIPTION: This code snippet demonstrates how languages are registered directly with Monaco in a VSCode extension. Errors occurring in this registration process will be detected and reported by the plugin-metrics extension.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin-metrics/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nhttps://github.com/microsoft/vscode-extension-samples/blob/master/completions-sample/src/extension.ts#L11\n```\n\n----------------------------------------\n\nTITLE: Registering Folding Range Provider in Theia Plugin\nDESCRIPTION: This snippet demonstrates how to register a folding range provider in a Theia plugin. It includes the setup of a document selector, provider object, and registration with the Theia languages API.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nconst documentsSelector: theia.DocumentSelector = { scheme: 'file', language: 'typescript' };\nconst provider = { provideFoldingRanges: provideRanges };\n\nconst disposable = theia.languages.registerFoldingRangeProvider(documentsSelector, provider);\n\n...\n\nfunction provideRanges(document: theia.TextDocument): theia.ProviderResult<theia.FoldingRange[]> {\n    // code here\n}\n```\n\n----------------------------------------\n\nTITLE: Document Highlight Provider Registration - TypeScript\nDESCRIPTION: This snippet shows how to register a document highlight provider in Theia. The provider is responsible for returning highlights for the symbol at the specified position within a document.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst documentsSelector: theia.DocumentSelector = { scheme: 'file', language: 'typescript' };\nconst handler: theia.DocumentHighlightProvider = { provideDocumentHighlights: provideDocumentHighlightsHandler };\n\nconst disposable = theia.languages.registerDocumentHighlightProvider(documentsSelector, handler);\n```\n\n----------------------------------------\n\nTITLE: Exporting Convenient Functions in TypeScript\nDESCRIPTION: Shows how to export convenient functions based on stable API in a namespace. This allows for customization through API implementation while providing easy-to-use functions.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/coding-guidelines.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport namespace MonacoEditor {\n    // convenient function to get a Monaco editor based on the editor manager API\n    export function getCurrent(manager: EditorManager): MonacoEditor | undefined {\n        return get(manager.currentEditor);\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Monaco Editor Theme\nDESCRIPTION: This snippet demonstrates how to register a new custom theme with the Monaco Editor in Theia, either at startup or later from a file. The code uses the `MonacoThemingService` to register themes and requires a valid JSON theme configuration. These themes are applied before the frontend module or later via URI.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/changelogs/CHANGELOG-2020.md#2025-04-20_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nMonacoThemingService.register({\n    id: 'myDarkTheme',\n    label: 'My Dark Theme',\n    uiTheme: 'vs-dark',\n    json: require('./relative/path/to/my_theme.json'),\n    includes: {\n        './included_theme.json': require('./relative/path/to/included_theme.json')\n    }\n});\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n@inject(MonacoThemingService)\nprotected readonly monacoThemeService: MonacoThemingService;\n\nthis.monacoThemeService.register({\n    id: 'myDarkTheme',\n    label: 'My Dark Theme',\n    uiTheme: 'vs-dark',\n    uri: 'file:///absolute/path/to/my_theme.json'\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ExternalUriService in TypeScript\nDESCRIPTION: Interface for implementing custom URI resolution for webviews, particularly useful for remote URI handling.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/changelogs/CHANGELOG-2019.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ExternalUriService {\n    resolve(uri: URI): Promise<URI>;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaration Provider Registration - TypeScript\nDESCRIPTION: This snippet demonstrates how to register a declaration provider in Theia. Similar to the definition provider, it includes the document selector and a provider handler.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nconst documentsSelector: theia.DocumentSelector = { scheme: 'file', language: 'typescript' };\nconst handler: theia.DeclarationProvider = { provideDeclaration: provideDeclarationHandler };\n\nconst disposable = theia.languages.registerDeclarationProvider(documentsSelector, handler);\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Diagnostics Collection - TypeScript\nDESCRIPTION: This snippet illustrates how to iterate over all diagnostics in a diagnostics collection using the `forEach` method.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ndiagnosticsCollection.forEach((uri, diagnostics) => {\n    // code here\n}\n```\n\n----------------------------------------\n\nTITLE: Handling JSON Types with Namespaces in TypeScript\nDESCRIPTION: Demonstrates the correct way to work with JSON types, using namespaces for functions and avoiding direct implementation. This approach maintains proper serialization and extensibility.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/coding-guidelines.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CompositeTreeNode extends TreeNode {\n    children: ReadonlyArray<TreeNode>;\n\n    // bad - JSON types should not have functions\n    getFirstChild(): TreeNode | undefined;\n}\n\n// good - JSON types can have corresponding namespaces with functions\nexport namespace CompositeTreeNode {\n    export function getFirstChild(parent: CompositeTreeNode): TreeNode | undefined {\n        return parent.children[0];\n    }\n    ...\n}\n\n// bad - JSON types should not be implemented\nexport class MyCompositeTreeNode implements CompositeTreeNode {\n    ...\n}\n\n// good - JSON types can be extended\nexport interface MyCompositeTreeNode extends CompositeTreeNode {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Approach in Theia (TypeScript)\nDESCRIPTION: Shows the recommended logging method using console instead of ILogger for root-level logging, which is automatically intercepted and forwarded\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/coding-guidelines.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// bad\n@inject(ILogger)\nprotected readonly logger: ILogger;\n\nthis.logger.info(``);\n\n// good\nconsole.info(``)\n```\n\n----------------------------------------\n\nTITLE: Providing Implementations - TypeScript\nDESCRIPTION: This snippet implements the handler for the implementation provider which is triggered when a user seeks an implementation for a symbol.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nfunction provideImplementationHandler(document: theia.TextDocument, position: theia.Position): theia.ProviderResult<theia.Definition | theia.DefinitionLink[]> {\n    // code here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementation Provider Registration - TypeScript\nDESCRIPTION: This snippet shows how to register an implementation provider in Theia. This is similar to the previous provider registrations and includes a handler for implementing sources.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nconst documentsSelector: theia.DocumentSelector = { scheme: 'file', language: 'typescript' };\nconst handler: theia.ImplementationProvider = { provideImplementation: provideImplementationHandler };\n\nconst disposable = theia.languages.registerImplementationProvider(documentsSelector, handler);\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin package.json Content - JavaScript\nDESCRIPTION: This snippet retrieves the package.json content of a specified plugin using the plugins namespace, allowing access to additional metadata associated with the plugin.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fooPlugin = plugins.getPlugin('publisher.plugin_name');\nconst fooPluginPackageJson = fooPlugin.packageJSON;\nconsole.log(fooPluginPackageJson.someField);\n```\n\n----------------------------------------\n\nTITLE: Context Key Naming Convention in TypeScript\nDESCRIPTION: Illustrates proper naming for keybinding contexts and keys to avoid runtime collisions using specific names.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/coding-guidelines.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// bad\nexport namespace TerminalSearchKeybindingContext {\n    export const disableSearch = 'hideSearch';\n}\n\n// good\nexport namespace TerminalSearchKeybindingContext {\n    export const disableSearch = 'terminalHideSearch';\n}\n\n// bad\nconst terminalFocusKey = this.contextKeyService.createKey<boolean>('focus', false);\n\n// good\nconst terminalFocusKey = this.contextKeyService.createKey<boolean>('terminalFocus', false);\n```\n\n----------------------------------------\n\nTITLE: Registering Type Definition Provider in Theia Plugin\nDESCRIPTION: This snippet demonstrates how to register a type definition provider in a Theia plugin. It includes the setup of a document selector, handler function, and registration with the Theia languages API.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst documentsSelector: theia.DocumentSelector = { scheme: 'file', language: 'typescript' };\nconst handler: theia.TypeDefinitionProvider = { provideTypeDefinition: provideTypeDefinitionHandler };\n\nconst disposable = theia.languages.registerTypeDefinitionProvider(documentsSelector, handler);\n\n...\n\nfunction provideTypeDefinitionHandler(document: theia.TextDocument, position: theia.Position): theia.ProviderResult<theia.Definition | theia.DefinitionLink[]> {\n    // code here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaskRunnerContribution Interface in TypeScript for Eclipse Theia\nDESCRIPTION: TypeScript interface definition for TaskRunnerContribution in Eclipse Theia. It allows extensions to provide custom ways of running and killing Tasks.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/task/README.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TaskRunnerContribution {\n    registerRunner(runners: TaskRunnerRegistry): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WebviewResourceLoaderImpl in TypeScript\nDESCRIPTION: Interface for customizing content loading in webviews, allowing control over resource access and loading behavior.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/changelogs/CHANGELOG-2019.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WebviewResourceLoaderImpl {\n    // Implementation details not provided in the release notes\n}\n```\n\n----------------------------------------\n\nTITLE: Unique Type Naming Convention in TypeScript\nDESCRIPTION: Shows how to create unique and specific type names to avoid duplicate records in file and type search.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/coding-guidelines.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// bad\nexport interface TitleButton {}\n\n// good\nexport interface QuickInputTitleButton {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom View Page Object\nDESCRIPTION: Demonstrates how to create a custom view page object by extending TheiaView with specific selectors and custom interaction methods.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/examples/playwright/docs/EXTENSIBILITY.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyView extends TheiaView {\n  constructor(public app: TheiaApp) {\n    super(\n      {\n        tabSelector: '#shell-tab-my-view', // the id of the tab\n        viewSelector: '#my-view-container', // the id of the view container\n        viewName: 'My View', // the user visible view name\n      },\n      app\n    );\n  }\n\n  async clickMyButton(): Promise<void> {\n    await this.activate();\n    const viewElement = await this.viewElement();\n    const button = await viewElement?.waitForSelector('#idOfMyButton');\n    await button?.click();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaskContribution Interface in TypeScript for Eclipse Theia\nDESCRIPTION: TypeScript interface definition for TaskContribution in Eclipse Theia. It allows extensions to provide custom Task formats and programmatically provide Tasks to the system.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/task/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TaskContribution {\n    registerResolvers?(resolvers: TaskResolverRegistry): void;\n    registerProviders?(providers: TaskProviderRegistry): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Text to Terminal - TypeScript\nDESCRIPTION: This snippet demonstrates how to send text to the terminal created in Theia. It allows for conditional new line inclusion with the sent text.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nterminal.sendText(\"Hello, Theia!\", false);\n```\n\n----------------------------------------\n\nTITLE: Disposing of a Diagnostics Collection - TypeScript\nDESCRIPTION: This snippet shows how to dispose of a diagnostics collection when it is no longer needed. After disposal, any further operations will throw an error.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ndiagnosticsCollection.dispose();\n```\n\n----------------------------------------\n\nTITLE: Customizing Tasks in JSON Configuration\nDESCRIPTION: Enhanced support for customizing tasks in tasks.json. Users can now override any task properties except those used in the task definition. This provides greater flexibility in configuring tasks for different projects.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/changelogs/CHANGELOG-2019.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tasks\": [\n    {\n      \"type\": \"npm\",\n      \"script\": \"build\",\n      \"problemMatcher\": [\"$tsc\"],\n      \"group\": \"build\",\n      \"presentation\": {\n        \"echo\": true,\n        \"reveal\": \"always\",\n        \"focus\": false,\n        \"panel\": \"shared\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with Custom Menu Items in Theia\nDESCRIPTION: Demonstrates how to interact with custom menu items and commands using their labels through the MenuBar page object.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/examples/playwright/docs/EXTENSIBILITY.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await TheiaAppLoader.load({ playwright, browser });\nconst menuBar = app.menuBar;\n\nconst yourMenu = await menuBar.openMenu('Your Menu');\nconst yourItem = await mainMenu.menuItemByName('Your Item');\n\nexpect(await yourItem?.hasSubmenu()).toBe(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Themes in Theia Application package.json\nDESCRIPTION: Demonstrates how to declaratively set default color and icon themes in the Theia application package.json file. This new method replaces programmatically setting defaults via ThemeService and IconThemeService.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/changelogs/CHANGELOG-2020.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"theia\": {\n  \"frontend\": {\n    \"config\": {\n      \"defaultTheme\": \"light\",\n      \"defaultIconTheme\": \"vs-seti\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using API in a Plugin\nDESCRIPTION: Demonstrates how to utilize the established API within a plugin by importing the necessary module and invoking API calls. Assumes the API is properly exposed.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin-ext/doc/how-to-add-new-custom-plugin-api.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as foo from '@bar/foo';\n\nfoo.fooBar.getFoo();\n```\n\n----------------------------------------\n\nTITLE: External Terminal Extension Preferences Configuration\nDESCRIPTION: Lists the configurable preferences for specifying terminal executables across different operating systems.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/external-terminal/README.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `terminal.external.windowsExec`: the application executable for Windows.\\n- `terminal.external.linuxExec`: the application executable for Linux.\\n- `terminal.external.osxExec`: the application executable for OSX.\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspace Preferences in Eclipse Theia (TypeScript)\nDESCRIPTION: This snippet shows how to configure workspace preferences in Eclipse Theia using a workspace file. It includes examples of setting up multiple folders and configuring editor settings like line numbers and tab size.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/preferences/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n   \"folders\": [\n      {\n         \"path\": \"file:///home/username/helloworld\"\n   },\n   {\n         \"path\": \"file:///home/username/dev/byeworld\"\n      }\n   ],\n   \"settings\": {\n      // Enable/Disable the line numbers in the monaco editor\n   \"editor.lineNumbers\": \"off\",\n      // Tab width in the editor\n   \"editor.tabSize\": 4,\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Async Dependencies for Inversify 6.0\nDESCRIPTION: Code diff showing how to refactor injected promises in Inversify 6.0. The example shows wrapping a promise in a function to address the stricter sync/async dependency contexts.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Migration.md#2025-04-20_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nconst PromiseSymbol = Symbol();\nconst promise = startLongRunningOperation();\n\n-bind(PromiseSymbol).toConstantValue(promise);\n+bind(PromiseSymbol).toConstantValue(() => promise);\n```\n\n----------------------------------------\n\nTITLE: Exporting Auxiliary Functions in TypeScript\nDESCRIPTION: Shows how to export auxiliary functions in a namespace for use in customizable contexts. This approach allows for overriding methods while providing access to helper functions.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/coding-guidelines.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@injectable()\nexport class DirtyDiffModel {\n    // This method can be overridden. Subclasses have access to `DirtyDiffModel.documentContentLines`.\n    protected handleDocumentChanged(document: TextEditorDocument): void {\n        this.currentContent = DirtyDiffModel.documentContentLines(document);\n        this.update();\n    }\n}\nexport namespace DirtyDiffModel {\n    // the auxiliary function\n    export function documentContentLines(document: TextEditorDocument): ContentLines {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Class Implementation Pattern in TypeScript\nDESCRIPTION: Demonstrates the preferred approach of using classes directly instead of interface-symbol combinations to reduce boilerplate code.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/coding-guidelines.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// bad\nexport const TaskDefinitionRegistry = Symbol('TaskDefinitionRegistry');\nexport interface TaskDefinitionRegistry {\n    register(definition: TaskDefinition): void;\n}\nexport class TaskDefinitionRegistryImpl implements TaskDefinitionRegistry {\n    register(definition: TaskDefinition): void {\n    }\n}\nbind(TaskDefinitionRegistryImpl).toSelf().inSingletonScope();\nbind(TaskDefinitionRegistry).toService(TaskDefinitionRegistryImpl);\n\n// good\nexport class TaskDefinitionRegistry {\n    register(definition: TaskDefinition): void {\n    }\n}\nbind(TaskDefinitionRegistry).toSelf().inSingletonScope();\n```\n\n----------------------------------------\n\nTITLE: Converting Functions to Class Methods in TypeScript\nDESCRIPTION: Illustrates how to convert exported functions into class methods to allow for overriding and customization. This approach is preferred for better extensibility and maintainability.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/coding-guidelines.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// bad\nexport function createWebSocket(url: string): WebSocket {\n   ...\n}\n\n// good\n@injectable()\nexport class WebSocketProvider {\n   protected createWebSocket(url: string): WebSocket {\n       ...\n   }\n}\n\n@injectable()\nexport class MyWebSocketProvider extends WebSocketProvider {\n   protected createWebSocket(url: string): WebSocket {\n      // create a web socket with custom options\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Backend Bundling Configuration\nDESCRIPTION: Describes the changes required to configure backend bundling in Theia. It highlights the new location of webpack output and the electron-main.js file, along with the necessary build steps when using a bundled backend.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/changelogs/CHANGELOG-2023.md#2025-04-20_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n\t- `webpack` compiles frontend files now into the `lib/frontend` directory (previously `lib`)\n\t- the `electron-main.js` has been moved from `src-gen/frontend` to `src-gen/backend`\n\t- `theia rebuild` needs to run **before** `theia build` for the respective target when using a bundled backend\n```\n\n----------------------------------------\n\nTITLE: Correct Event Handler Binding in React Components\nDESCRIPTION: Demonstrates the proper way to bind event handlers in React components to avoid performance issues and ensure correct 'this' context. This approach uses class properties for event handlers.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/coding-guidelines.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// good\nclass MyWidget extends ReactWidget {\n  render(): React.ReactNode {\n    return <div onClick={this.onClickDiv} />\n  }\n\n  protected onClickDiv = () => {\n    // do stuff, can access `this`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Signature Help Handler Implementation - TypeScript\nDESCRIPTION: This snippet provides an example implementation of a signature help handler that can be registered with Theia. The handler processes the document and position to provide signature help information.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nfunction signatureHelpHandler(document: theia.TextDocument, position: theia.Position): theia.ProviderResult<theia.SignatureHelp> {\n    // code here\n}\n```\n\n----------------------------------------\n\nTITLE: Outlining Code Organization for Eclipse Theia in TypeScript\nDESCRIPTION: This snippet provides a detailed breakdown of the code organization in Eclipse Theia. It describes the different platform-specific folders and their dependencies, including common, browser, node, electron-node, electron-browser, and electron-main.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/code-organization.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Code Organization\n\nThe code is fully implemented in [TypeScript](https://github.com/microsoft/typescript). Within the top level folders, which organize code by functional package, we separate between the following platforms:\n\n- `common/*`: Source code that only requires basic JavaScript APIs and runs in all target environments.\n- `browser/*`: Source code that requires the `browser` APIs like access to the DOM.\n  - May use code from: `common`.\n- `node/*`: Source code that requires [`nodejs`](https://nodejs.org) APIs.\n  - May use code from: `common`.\n- `electron-node/*`: Electron specific source code that requires [`nodejs`](https://nodejs.org) APIs.\n  - May use code from: `common`, `node`.\n- `electron-browser/*`: Source code that requires the [Electron renderer process](https://github.com/atom/electron/tree/master/docs#modules-for-the-renderer-process-web-page) APIs.\n  - May use code from: `common`, `browser`.\n- `electron-main/*`: Source code that requires the [Electron main process](https://github.com/atom/electron/tree/master/docs#modules-for-the-main-process) APIs.\n  - May use code from: `electron-node`, `common`, `node`.\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Webpack Configuration Export Update\nDESCRIPTION: The gen-webpack.config.js now exports an array of two webpack configurations instead of a single one. The first config generates the main code bundle while the second generates a CSS file for secondaryWindow.html inclusion.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/changelogs/CHANGELOG-2022.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// gen-webpack.config.js\nmodule.exports = [\n  // Main bundle config\n  {\n    // ... main bundle configuration\n  },\n  // Secondary window CSS config\n  {\n    // ... CSS bundle configuration\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Webview Origin Pattern in TypeScript\nDESCRIPTION: Sets the external endpoint pattern for webviews using an environment variable. The default pattern uses placeholders for UUID and hostname to ensure unique origins for each webview.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/changelogs/CHANGELOG-2019.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTHEIA_WEBVIEW_EXTERNAL_ENDPOINT = \"{{uuid}}.webview.{{hostname}}\"\n```\n\n----------------------------------------\n\nTITLE: Adding Keytar Resolution in package.json\nDESCRIPTION: Yarn resolution configuration to fix keytar version for older distributions. This may be necessary for the secrets API to function correctly.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Migration.md#2025-04-20_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n\"resolutions\": {\n  \"**/keytar\": \"7.6.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Theia Logging Levels\nDESCRIPTION: JSON configuration example for setting up custom logging levels in Theia applications, showing how to configure default and specific logger levels.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/core/README_TEMPLATE.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"defaultLevel\": \"info\",\n  \"levels\": {\n    \"terminal\": \"debug\",\n    \"task\": \"error\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Preview in JSON\nDESCRIPTION: JSON configuration to enable or disable the preview editor functionality in Theia. The 'editor.enablePreview' preference controls whether the preview feature is active, while 'list.openMode' must be set to 'singleClick' to enable opening files in preview mode.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/editor-preview/README.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"editor.enablePreview\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"list.openMode\"\n```\n\n----------------------------------------\n\nTITLE: Task Configuration Support for Platform-Specific Commands\nDESCRIPTION: Added support for Linux and OSX specific command properties in task configurations, allowing platform-targeted task definitions.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/changelogs/CHANGELOG-2019.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"command\": \"build\",\n  \"linux\": \"./build.sh\",\n  \"osx\": \"./build-mac.sh\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Save in Theia IDE - JSON\nDESCRIPTION: This snippet allows developers to configure the auto-save settings for the Theia IDE by modifying the application package.json file. It demonstrates how to set the autoSave preference to 'on', ensuring that the editor automatically saves changes at defined intervals.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/changelogs/CHANGELOG-2019.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"private\": true,\n    \"name\": \"myapp\",\n    \"theia\": {\n      \"frontend\": {\n        \"config\": {\n          \"preferences\": {\n            \"editor.autoSave\": \"on\"\n          }\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Binding a Singleton Instance in TypeScript\nDESCRIPTION: Shows the correct way to bind a singleton instance using inSingletonScope. This ensures that only one instance is created for all injection requests.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/coding-guidelines.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// bad\nbind(CommandContribution).to(LoggerFrontendContribution);\n\n// good\nbind(CommandContribution).to(LoggerFrontendContribution).inSingletonScope();\n```\n\n----------------------------------------\n\nTITLE: Defining Theia Extensions in package.json\nDESCRIPTION: Example configuration for declaring Theia extensions in package.json. This snippet shows how to define multiple extension points with various module types including frontend, backend, and their Electron-specific variants.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/core/README.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"theiaExtensions\": [{\n      \"frontend\": \"lib/myExtension/browser/myextension-frontend-module\",\n      \"backend\": \"lib/myExtension/node/myextension-backend-module\",\n    }, {\n      \"frontend\": \"lib/myExtension2/browser/myextension2-browser-module\",\n      \"frontendElectron\": \"lib/myExtension2/electron-browser/myextension2-electron-browser-module\",\n      \"backend\": \"lib/myExtension2/node/myextension2-node-module\",\n      \"backendElectron\": \"lib/myExtension2/electron-main/myextension2-electron-main-module\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Task in JSON for Eclipse Theia\nDESCRIPTION: Example of a task configuration in JSON format for Eclipse Theia. It defines a task to list workspace files recursively, with platform-specific commands for Windows.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/task/README.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"label\": \"Test task - list workspace files recursively\",\n    \"type\": \"shell\",\n    \"command\": \"ls\",\n    \"args\": [\n        \"-alR\"\n    ],\n    \"options\": {\n        \"cwd\": \"${workspaceFolder}\"\n    },\n    \"windows\": {\n        \"command\": \"cmd.exe\",\n        \"args\": [\n            \"/c\",\n            \"dir\",\n            \"/s\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Electron Theme Service in TypeScript\nDESCRIPTION: This snippet configures the Electron theme service by binding it to the ThemeService interface. It ensures that the ElectronThemeService is used in the Electron context, while the default ThemeService is used in the web context.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/file-search/test-resources/subdir1/foo.txt#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default new ContainerModule((bind, unbind, isBound, rebind) => {\n    if (environment.electron.isElectron()) {\n        rebind(ThemeService).to(ElectronThemeService).inSingletonScope();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Electron Theme Service in TypeScript\nDESCRIPTION: This snippet defines a class ElectronThemeService that extends ThemeService to handle Electron-specific theming. It includes methods for initializing the theme, applying it to the Electron window, and handling theme changes.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/file-search/test-resources/subdir1/foo.txt#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ElectronThemeService extends ThemeService {\n\n    protected readonly themeRules = new Map<string, ThemeRules>();\n\n    constructor(@inject(WindowService) protected readonly windowService: WindowService) {\n        super();\n    }\n\n    protected async initialize(): Promise<void> {\n        super.initialize();\n        this.windowService.getWindow().on('themeChanged', (theme: Theme) => this.changeTheme(theme.name));\n        const theme = this.getCurrentTheme();\n        await this.loadCSS();\n        await this.applyTheme(theme.name, theme);\n    }\n\n    protected async doSetTheme(newTheme: string): Promise<void> {\n        const theme = await super.loadTheme(newTheme);\n        if (!theme) {\n            return;\n        }\n        await this.applyTheme(newTheme, theme);\n        this.windowService.getWindow().setTheme(theme);\n    }\n\n    protected async applyTheme(name: string, theme: Theme): Promise<void> {\n        const rules = await this.loadThemeRules(name);\n        if (rules) {\n            this.themeRules.set(name, rules);\n            rules.forEach((rule, key) => document.documentElement.style.setProperty(key, rule));\n        }\n    }\n\n    protected async loadThemeRules(name: string): Promise<ThemeRules | undefined> {\n        const theme = this.themes[name];\n        const cssText = theme?.css?.find(css => css.endsWith('-electron.css'));\n        if (!cssText) {\n            return undefined;\n        }\n        const response = await fetch(cssText);\n        const content = await response.text();\n        return this.parseCSSText(content);\n    }\n\n    protected parseCSSText(text: string): ThemeRules {\n        const result = new Map<string, string>();\n        const regexp = /:root\\s*{([^}]*)}/;\n        const match = regexp.exec(text);\n        if (!match) {\n            return result;\n        }\n        const declarations = match[1].split(';');\n        for (const declaration of declarations) {\n            const [property, value] = declaration.split(':').map(s => s.trim());\n            if (property && value) {\n                result.set(property, value);\n            }\n        }\n        return result;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Localization Keys in TypeScript\nDESCRIPTION: Example showing how to use nls.localize to mark strings for localization in TypeScript code. The strings are identified by namespaced keys and their default values.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/dev-packages/localization-manager/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst hi = nls.localize('greetings/hi', 'Hello');\nconst bye = nls.localize('greetings/bye', 'Bye');\n```\n\n----------------------------------------\n\nTITLE: Configuring OVSXRouterClient in JSONC\nDESCRIPTION: This snippet demonstrates the configuration structure for the OVSXRouterClient class. It includes registries, usage rules, and conditions for forwarding requests to specific registries based on request content and extension IDs.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/dev-packages/ovsx-client/README.md#2025-04-20_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"registries\": {\n        // `[Alias]: URL` pairs to avoid copy pasting URLs down the config\n    },\n    \"use\": [\n        // List of aliases/URLs to use when no filtering was applied.\n    ],\n    \"rules\": [\n        {\n            \"ifRequestContains\": \"regex matched against various fields in requests\",\n            \"ifExtensionIdMatches\": \"regex matched against the extension id (without version)\",\n            \"use\": [/*\n                List of registries to forward the request to when all the\n                conditions are matched.\n\n                `null` or `[]` means to not forward the request anywhere.\n            */]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CircularDependencyPlugin to webpack.config.js\nDESCRIPTION: JavaScript code for manually re-enabling the CircularDependencyPlugin in webpack configuration after its removal in v1.32.0. This is useful for projects that still want to detect circular dependencies.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Migration.md#2025-04-20_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconfig[0].module.plugins.push(new CircularDependencyPlugin({\n    exclude: /(node_modules)[\\\\|\\/]./,\n    failOnError: false\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Theia Core Env Variables Server in TypeScript\nDESCRIPTION: The snippet demonstrates how to customize the directory where Theia stores configuration files like settings.json by subclassing EnvVariablesServerImpl. Dependencies include inversify for dependency injection and @theia/core for core functionalities. This implementation requires rebinding the subclassed server within the backend module to modify the directory path.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/changelogs/CHANGELOG-2020.md#2025-04-20_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// your-env-variables-server.ts:\n\nimport { injectable } from 'inversify';\nimport { EnvVariablesServerImpl } from '@theia/core/lib/node/env-variables';\n\n@injectable()\nexport class YourEnvVariableServer extends EnvVariablesServerImpl {\n\n    async getConfigDirUri(): Promise<string> {\n        return 'file:///path/to/your/desired/config/dir';\n    }\n\n}\n\n// your-backend-application-module.ts:\n\nimport { ContainerModule } from 'inversify';\nimport { EnvVariablesServer } from '@theia/core/lib/common/env-variables';\nimport { YourEnvVariableServer } from './your-env-variables-server';\n\nexport default new ContainerModule((bind, unbind, isBound, rebind) => {\n    rebind(EnvVariablesServer).to(YourEnvVariableServer).inSingletonScope();\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Inversify using Theia Core Re-Exports\nDESCRIPTION: Example showing how to import the inversify library using Theia's re-exports mechanism. This approach makes application builds more stable by using the versions of dependencies provided by @theia/core.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/core/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { injectable } from '@theia/core/shared/inversify';\n\n@injectable()\nexport class SomeClass {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gitpod Environment for Theia Development\nDESCRIPTION: This YAML configuration sets up a Gitpod workspace for Theia development. It specifies a custom Docker image, defines initialization and build tasks, and exposes necessary ports for the application.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/file-search/test-resources/subdir1/sub-bar/foo.txt#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage: eu.gcr.io/gitpod-core-dev/dev/dev-environment:release-2022-09-08-08-32-08\n\ntasks:\n  - init: |\n      yarn --cwd examples/api-samples\n      yarn --cwd examples/playwright\n    command: |\n      yarn --cwd examples/api-samples watch &\n      yarn --cwd examples/playwright watch\n\nports:\n  - port: 3000\n    onOpen: open-preview\n  - port: 9229\n    onOpen: ignore\n  - port: 9339\n    onOpen: ignore\n\nvscode:\n  extensions:\n    - dbaeumer.vscode-eslint\n    - EditorConfig.EditorConfig\n\n```\n\n----------------------------------------\n\nTITLE: Adding Webpack Babel Loader for ES5 Transpilation\nDESCRIPTION: Configuration to add a Babel loader rule to webpack for transpiling ES2017 code back to ES2015. This is useful if you require an ES5 codebase.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Migration.md#2025-04-20_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconfig.module.rules.push({\n    test: /\\.js$/,\n    use: {\n        loader: 'babel-loader',\n        options: {\n            presets: [['@babel/preset-env', { targets: { chrome: '58', ie: '11' } }]],\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Source Maps in tsconfig.json for Theia Plugin\nDESCRIPTION: Configuration to enable source map generation in the TypeScript compiler for a Theia plugin.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_22\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"sourceMap\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Theia Logger Levels\nDESCRIPTION: Example JSON configuration for setting custom log levels in a Theia application. This configuration sets the default log level to 'info' while specifying custom levels for 'terminal' and 'task' loggers.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/core/README.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"defaultLevel\": \"info\",\n  \"levels\": {\n    \"terminal\": \"debug\",\n    \"task\": \"error\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Theia Tree Extension Package in JSON\nDESCRIPTION: Defines the package.json configuration for the @theia/tree extension in Theia. This configuration specifies package metadata, dependencies, contribution points via theiaExtensions, and development scripts. It includes references to the main API entry points and specifies the extension's frontend module.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/examples/playwright/src/tests/resources/notebook-files/sample.ipynb#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@theia/tree\",\n  \"version\": \"1.46.0\",\n  \"description\": \"Theia - Tree Extension\",\n  \"dependencies\": {\n    \"@theia/core\": \"1.46.0\",\n    \"@theia/widget-manager\": \"1.46.0\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"theiaExtensions\": [\n    {\n      \"frontendElectronModule\": \"lib/electron-browser/tree-frontend-electron-module\",\n      \"frontendModule\": \"lib/browser/tree-frontend-module\"\n    }\n  ],\n  \"keywords\": [\n    \"theia-extension\"\n  ],\n  \"license\": \"EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/eclipse-theia/theia.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/eclipse-theia/theia/issues\"\n  },\n  \"homepage\": \"https://github.com/eclipse-theia/theia\",\n  \"files\": [\n    \"lib\",\n    \"src\"\n  ],\n  \"scripts\": {\n    \"build\": \"theiaext build\",\n    \"clean\": \"theiaext clean\",\n    \"compile\": \"theiaext compile\",\n    \"lint\": \"theiaext lint\",\n    \"test\": \"theiaext test\",\n    \"watch\": \"theiaext watch\"\n  },\n  \"devDependencies\": {\n    \"@theia/ext-scripts\": \"1.46.0\"\n  },\n  \"nyc\": {\n    \"extends\": \"../../configs/nyc.json\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring @postConstruct Methods for Inversify 6.0\nDESCRIPTION: Code diff showing how to refactor @postConstruct methods that return Promises to work with Inversify 6.0. This splits the async initialization into sync and async parts.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Migration.md#2025-04-20_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-@postConstruct()\n-protected async init(): Promise<void> {\n-  await longRunningOperation();\n-}\n+@postConstruct()\n+protected init(): void {\n+  this.doInit();\n+}\n+\n+protected async doInit(): Promise<void> {\n+  await longRunningOperation();\n+}\n```\n\n----------------------------------------\n\nTITLE: Building Playwright Tests for Theia in Bash\nDESCRIPTION: This snippet shows the command to build the Playwright library, tests, and install all dependencies for the Theia project. It navigates to the playwright example directory and runs the build script.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/examples/playwright/docs/DEVELOPING.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/playwright\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Scrollback in TypeScript\nDESCRIPTION: Added a new preference to control the terminal scrollback for tasks. This allows users to customize how much scrollback history is retained in the integrated terminal when running tasks.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/changelogs/CHANGELOG-2019.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"terminal.integrated.scrollback\": number\n```\n\n----------------------------------------\n\nTITLE: cURL Command for Multi-file Download in Theia\nDESCRIPTION: Example cURL command demonstrating how to use the PUT /files/ endpoint to download multiple files. The command includes the required Content-Type header and a JSON payload with file URIs.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/filesystem/src/common/download/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT -H \"Content-Type: application/json\" -d '{ \"uris\": [\"file:///Users/akos.kitta/git/theia/package.json\", \"file:///Users/akos.kitta/git/theia/README.md\"] }' http://localhost:3000/files/\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Compiling Theia\nDESCRIPTION: Commands to download dependencies and build TypeScript packages for Theia.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\nnpm run compile\n```\n\n----------------------------------------\n\nTITLE: Running Headful Playwright Tests for Theia via CLI in Bash\nDESCRIPTION: This command runs the Playwright tests for Theia in headful mode, allowing observation of test execution in a browser. It can be used to run all tests or a specific test file by providing the file path.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/examples/playwright/docs/DEVELOPING.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run ui-tests-headful\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for Source Map Generation in Theia Plugin\nDESCRIPTION: Webpack configuration to enable source map output for a Theia plugin in development mode.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n    devtool: 'source-map'\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-file Download Request Body Format in JSON\nDESCRIPTION: JSON structure for the request body when downloading multiple files using the PUT /files/ endpoint. The 'uris' array contains encoded file URIs of the resources to be downloaded.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/filesystem/src/common/download/README.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"uri\": [\n        \"/encoded/file/uri/to/the/resource\",\n        \"/another/encoded/file/uri/to/the/resource\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building All Theia Components\nDESCRIPTION: Command to install dependencies, link and build TypeScript packages, lint, and build example applications for Theia.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnpm run all\n```\n\n----------------------------------------\n\nTITLE: Configuring Theia Extension with Electron Main and Preload Scripts\nDESCRIPTION: JSON configuration for declaring both preload script and electron-main module entries in the theiaExtensions configuration. This setup is needed for implementing APIs that bridge the Electron main and renderer processes.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Migration.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"theiaExtensions\": [\n  {\n    \"preload\": \"lib/electron-browser/preload\",\n    \"electronMain\": \"lib/electron-main/electron-main-module\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for Theia Project in JSON\nDESCRIPTION: This snippet defines the package.json configuration for the Theia project. It includes project metadata, dependencies, scripts for development and building, and publishing configuration. The file sets up the core structure and build processes for the Theia IDE platform.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/file-search/test-resources/subdir1/sub2/foo.txt#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@theia/root\",\n  \"version\": \"1.45.0\",\n  \"private\": true,\n  \"engines\": {\n    \"yarn\": \">=1.7.0 <2\",\n    \"node\": \">=14.18.0\"\n  },\n  \"resolution\": {\n    \"**/shell-quote\": \"1.7.3\"\n  },\n  \"dependencies\": {\n    \"@theia/generator-plugin\": \"1.45.0\",\n    \"@theia/generator-webapp\": \"1.45.0\",\n    \"check-dependencies\": \"^1.1.0\",\n    \"concurrently\": \"^3.5.0\",\n    \"env-cmd\": \"^10.1.0\",\n    \"inversify\": \"^5.0.1\",\n    \"lerna\": \"^4.0.0\",\n    \"nx\": \"15.0.13\",\n    \"requestretry\": \"^3.1.0\",\n    \"rimraf\": \"^2.6.1\",\n    \"shelljs\": \"^0.8.0\"\n  },\n  \"devDependencies\": {\n    \"@types/fs-extra\": \"^4.0.2\",\n    \"@types/node\": \"18.14.0\",\n    \"@types/requestretry\": \"^1.12.3\",\n    \"@types/semver\": \"^5.4.0\",\n    \"@typescript-eslint/eslint-plugin\": \"^5.33.0\",\n    \"@typescript-eslint/parser\": \"^5.33.0\",\n    \"coveralls\": \"^3.0.0\",\n    \"decompress\": \"^4.2.1\",\n    \"eslint\": \"^8.21.0\",\n    \"eslint-plugin-deprecation\": \"^1.3.2\",\n    \"eslint-plugin-import\": \"^2.26.0\",\n    \"eslint-plugin-no-null\": \"^1.0.2\",\n    \"eslint-plugin-no-unsanitized\": \"^3.0.2\",\n    \"eslint-plugin-react\": \"^7.30.1\",\n    \"fs-extra\": \"^4.0.2\",\n    \"ignore-styles\": \"^5.0.1\",\n    \"minimist\": \"^1.2.0\",\n    \"nyc\": \"^15.1.0\",\n    \"semver\": \"^5.4.1\",\n    \"ts-node\": \"^10.9.1\",\n    \"typescript\": \"~4.5.5\",\n    \"which\": \"^3.0.0\"\n  },\n  \"resolutions\": {\n    \"node-gyp\": \"7.1.2\"\n  },\n  \"scripts\": {\n    \"prepare\": \"yarn clean && yarn build\",\n    \"clean\": \"lerna run clean\",\n    \"clean:node_modules\": \"lerna clean --yes && rimraf node_modules\",\n    \"build\": \"lerna run build --concurrency=8 --scope \"@theia/!(example-)*\" && yarn run bundle\",\n    \"bundle\": \"yarn rebuild:browser && yarn rebuild:electron && yarn download:plugins\",\n    \"rebuild:browser\": \"theia rebuild:browser\",\n    \"rebuild:electron\": \"theia rebuild:electron\",\n    \"watch\": \"lerna run --parallel watch\",\n    \"publish\": \"yarn && yarn test && yarn publish:latest\",\n    \"publish:latest\": \"lerna publish --registry=https://registry.npmjs.org/ --exact --no-git-tag-version --no-push --pre-dist-tag latest\",\n    \"start\": \"concurrently -n backend,frontend -c blue,green \\\"node scripts/set-top-level-project.js && yarn --cwd examples/browser start\\\" \\\"yarn start:frontend\\\"\",\n    \"start:frontend\": \"node scripts/set-top-level-project.js && cd examples/browser && yarn run start:frontend\",\n    \"start:backend\": \"cd examples/browser && yarn run start:backend\",\n    \"test\": \"env-cmd nyc npx nx run-many --target=test --all --exclude=@theia/{core,editor-preview,getting-started,monaco-editor-core,monaco,code-impl,example-*}\",\n    \"test:ext\": \"env-cmd nyc npx nx run-many --target=test --all --exclude=@theia/{core,editor-preview,getting-started,monaco-editor-core,monaco,code-impl,example-*} --fail-fast\",\n    \"test:single-package\": \"cd $PWD && test-single-package.js\",\n    \"test:browser\": \"env-cmd cd examples/browser && yarn test\",\n    \"test:electron\": \"env-cmd yarn --cwd examples/electron test\",\n    \"download:plugins\": \"lerna run download:plugins\",\n    \"check:dependencies\": \"node scripts/check-dependencies.js\",\n    \"check:installed-dependencies\": \"npx node-dep-check --exclude-packages \\\"@theia/.*\\\",\\\"nx\\\",\\\"prettier-plugin-organize-imports\\\",\\\"rimraf\\\",\\\"fs-extra\\\",\\\"decompress\\\",\\\"requestretry\\\",\\\"env-cmd\\\",\\\"minimist\\\",\\\"semver\\\",\\\"typescript\\\",\\\"ts-node\\\",\\\"@typescript-eslint/*\\\",\\\"eslint*\\\",\\\"which\\\",\\\"nyc\\\",\\\"ignore-styles\\\",\\\"coveralls\\\",\\\"@types/*\\\",\\\"inversify\\\",\\\"@theia/*\\\"\",\n    \"lint\": \"lerna run lint --parallel\",\n    \"lint:fix\": \"lerna run lint --parallel -- --fix\",\n    \"format\": \"nx run-many --target=format --all\",\n    \"nx:version\": \"nx --version\"\n  },\n  \"workspaces\": [\n    \"dev-packages/*\",\n    \"packages/*\",\n    \"examples/*\"\n  ],\n  \"theiaPluginsDir\": \"plugins\",\n  \"theiaPlugins\": {\n    \"vscode-builtin-bat\": \"https://open-vsx.org/api/vscode/bat/1.45.1/file/vscode.bat-1.45.1.vsix\",\n    \"vscode-builtin-clojure\": \"https://open-vsx.org/api/vscode/clojure/1.45.1/file/vscode.clojure-1.45.1.vsix\",\n    \"vscode-builtin-coffeescript\": \"https://open-vsx.org/api/vscode/coffeescript/1.45.1/file/vscode.coffeescript-1.45.1.vsix\",\n    \"vscode-builtin-configuration-editing\": \"https://open-vsx.org/api/vscode/configuration-editing/1.45.1/file/vscode.configuration-editing-1.45.1.vsix\",\n    \"vscode-builtin-cpp\": \"https://open-vsx.org/api/vscode/cpp/1.45.1/file/vscode.cpp-1.45.1.vsix\",\n    \"vscode-builtin-csharp\": \"https://open-vsx.org/api/vscode/csharp/1.45.1/file/vscode.csharp-1.45.1.vsix\",\n    \"vscode-builtin-css\": \"https://open-vsx.org/api/vscode/css/1.51.1/file/vscode.css-1.51.1.vsix\",\n    \"vscode-builtin-css-language-features\": \"https://open-vsx.org/api/vscode/css-language-features/1.57.0/file/vscode.css-language-features-1.57.0.vsix\",\n    \"vscode-builtin-debug-auto-launch\": \"https://open-vsx.org/api/vscode/debug-auto-launch/1.45.1/file/vscode.debug-auto-launch-1.45.1.vsix\",\n    \"vscode-builtin-docker\": \"https://open-vsx.org/api/vscode/docker/1.51.1/file/vscode.docker-1.51.1.vsix\",\n    \"vscode-builtin-emmet\": \"https://open-vsx.org/api/vscode/emmet/1.45.1/file/vscode.emmet-1.45.1.vsix\",\n    \"vscode-builtin-fsharp\": \"https://open-vsx.org/api/vscode/fsharp/1.45.1/file/vscode.fsharp-1.45.1.vsix\",\n    \"vscode-builtin-go\": \"https://open-vsx.org/api/vscode/go/1.45.1/file/vscode.go-1.45.1.vsix\",\n    \"vscode-builtin-groovy\": \"https://open-vsx.org/api/vscode/groovy/1.45.1/file/vscode.groovy-1.45.1.vsix\",\n    \"vscode-builtin-html\": \"https://open-vsx.org/api/vscode/html/1.51.1/file/vscode.html-1.51.1.vsix\",\n    \"vscode-builtin-html-language-features\": \"https://open-vsx.org/api/vscode/html-language-features/1.57.0/file/vscode.html-language-features-1.57.0.vsix\",\n    \"vscode-builtin-ini\": \"https://open-vsx.org/api/vscode/ini/1.45.1/file/vscode.ini-1.45.1.vsix\",\n    \"vscode-builtin-java\": \"https://open-vsx.org/api/vscode/java/1.51.1/file/vscode.java-1.51.1.vsix\",\n    \"vscode-builtin-javascript\": \"https://open-vsx.org/api/vscode/javascript/1.45.1/file/vscode.javascript-1.45.1.vsix\",\n    \"vscode-builtin-json\": \"https://open-vsx.org/api/vscode/json/1.51.1/file/vscode.json-1.51.1.vsix\",\n    \"vscode-builtin-json-language-features\": \"https://open-vsx.org/api/vscode/json-language-features/1.57.0/file/vscode.json-language-features-1.57.0.vsix\",\n    \"vscode-builtin-less\": \"https://open-vsx.org/api/vscode/less/1.45.1/file/vscode.less-1.45.1.vsix\",\n    \"vscode-builtin-log\": \"https://open-vsx.org/api/vscode/log/1.45.1/file/vscode.log-1.45.1.vsix\",\n    \"vscode-builtin-lua\": \"https://open-vsx.org/api/vscode/lua/1.45.1/file/vscode.lua-1.45.1.vsix\",\n    \"vscode-builtin-make\": \"https://open-vsx.org/api/vscode/make/1.45.1/file/vscode.make-1.45.1.vsix\",\n    \"vscode-builtin-markdown\": \"https://open-vsx.org/api/vscode/markdown/1.45.1/file/vscode.markdown-1.45.1.vsix\",\n    \"vscode-builtin-merge-conflict\": \"https://open-vsx.org/api/vscode/merge-conflict/1.45.1/file/vscode.merge-conflict-1.45.1.vsix\",\n    \"vscode-builtin-npm\": \"https://open-vsx.org/api/vscode/npm/1.45.1/file/vscode.npm-1.45.1.vsix\",\n    \"vscode-builtin-node-debug\": \"https://github.com/theia-ide/vscode-node-debug/releases/download/v1.35.3/node-debug-1.35.3.vsix\",\n    \"vscode-builtin-node-debug2\": \"https://github.com/theia-ide/vscode-node-debug2/releases/download/v1.33.0/node-debug2-1.33.0.vsix\",\n    \"vscode-builtin-objective-c\": \"https://open-vsx.org/api/vscode/objective-c/1.45.1/file/vscode.objective-c-1.45.1.vsix\",\n    \"vscode-builtin-perl\": \"https://open-vsx.org/api/vscode/perl/1.45.1/file/vscode.perl-1.45.1.vsix\",\n    \"vscode-builtin-powershell\": \"https://open-vsx.org/api/vscode/powershell/1.45.1/file/vscode.powershell-1.45.1.vsix\",\n    \"vscode-builtin-pug\": \"https://open-vsx.org/api/vscode/pug/1.45.1/file/vscode.pug-1.45.1.vsix\",\n    \"vscode-builtin-python\": \"https://open-vsx.org/api/vscode/python/1.45.1/file/vscode.python-1.45.1.vsix\",\n    \"vscode-builtin-r\": \"https://open-vsx.org/api/vscode/r/1.45.1/file/vscode.r-1.45.1.vsix\",\n    \"vscode-builtin-razor\": \"https://open-vsx.org/api/vscode/razor/1.45.1/file/vscode.razor-1.45.1.vsix\",\n    \"vscode-builtin-ruby\": \"https://open-vsx.org/api/vscode/ruby/1.45.1/file/vscode.ruby-1.45.1.vsix\",\n    \"vscode-builtin-rust\": \"https://open-vsx.org/api/vscode/rust/1.45.1/file/vscode.rust-1.45.1.vsix\",\n    \"vscode-builtin-scss\": \"https://open-vsx.org/api/vscode/scss/1.45.1/file/vscode.scss-1.45.1.vsix\",\n    \"vscode-builtin-shaderlab\": \"https://open-vsx.org/api/vscode/shaderlab/1.45.1/file/vscode.shaderlab-1.45.1.vsix\",\n    \"vscode-builtin-shell\": \"https://open-vsx.org/api/vscode/shellscript/1.45.1/file/vscode.shellscript-1.45.1.vsix\",\n    \"vscode-builtin-sql\": \"https://open-vsx.org/api/vscode/sql/1.45.1/file/vscode.sql-1.45.1.vsix\",\n    \"vscode-builtin-swift\": \"https://open-vsx.org/api/vscode/swift/1.45.1/file/vscode.swift-1.45.1.vsix\",\n    \"vscode-builtin-theme-abyss\": \"https://open-vsx.org/api/vscode/theme-abyss/1.45.1/file/vscode.theme-abyss-1.45.1.vsix\",\n    \"vscode-builtin-theme-defaults\": \"https://open-vsx.org/api/vscode/theme-defaults/1.45.1/file/vscode.theme-defaults-1.45.1.vsix\",\n    \"vscode-builtin-theme-kimbie-dark\": \"https://open-vsx.org/api/vscode/theme-kimbie-dark/1.45.1/file/vscode.theme-kimbie-dark-1.45.1.vsix\",\n    \"vscode-builtin-theme-monokai\": \"https://open-vsx.org/api/vscode/theme-monokai/1.45.1/file/vscode.theme-monokai-1.45.1.vsix\",\n    \"vscode-builtin-theme-monokai-dimmed\": \"https://open-vsx.org/api/vscode/theme-monokai-dimmed/1.45.1/file/vscode.theme-monokai-dimmed-1.45.1.vsix\",\n    \"vscode-builtin-theme-quietlight\": \"https://open-vsx.org/api/vscode/theme-quietlight/1.45.1/file/vscode.theme-quietlight-1.45.1.vsix\",\n    \"vscode-builtin-theme-red\": \"https://open-vsx.org/api/vscode/theme-red/1.45.1/file/vscode.theme-red-1.45.1.vsix\",\n    \"vscode-builtin-theme-solarized-dark\": \"https://open-vsx.org/api/vscode/theme-solarized-dark/1.45.1/file/vscode.theme-solarized-dark-1.45.1.vsix\",\n    \"vscode-builtin-theme-tomorrow-night-blue\": \"https://open-vsx.org/api/vscode/theme-tomorrow-night-blue/1.45.1/file/vscode.theme-tomorrow-night-blue-1.45.1.vsix\",\n    \"vscode-builtin-typescript\": \"https://open-vsx.org/api/vscode/typescript/1.45.1/file/vscode.typescript-1.45.1.vsix\",\n    \"vscode-builtin-typescript-language-features\": \"https://open-vsx.org/api/vscode/typescript-language-features/1.45.1/file/vscode.typescript-language-features-1.45.1.vsix\",\n    \"vscode-builtin-vb\": \"https://open-vsx.org/api/vscode/vb/1.45.1/file/vscode.vb-1.45.1.vsix\",\n    \"vscode-builtin-xml\": \"https://open-vsx.org/api/vscode/xml/1.45.1/file/vscode.xml-1.45.1.vsix\",\n    \"vscode-builtin-yaml\": \"https://open-vsx.org/api/vscode/yaml/1.45.1/file/vscode.yaml-1.45.1.vsix\",\n    \"vscode-editorconfig\": \"https://github.com/theia-ide/editorconfig-vscode/releases/download/v0.14.4/EditorConfig-0.14.4.vsix\",\n    \"vscode-eslint\": \"https://github.com/theia-ide/vscode-eslint/releases/download/release%2F2.1.4-next.1/vscode-eslint-2.1.4-next.1.vsix\",\n    \"vscode-git\": \"https://open-vsx.org/api/vscode/git/1.45.1/file/vscode.git-1.45.1.vsix\",\n    \"vscode-github\": \"https://open-vsx.org/api/vscode/github/1.50.1/file/vscode.github-1.50.1.vsix\",\n    \"vscode-references-view\": \"https://open-vsx.org/api/vscode/references-view/0.0.49/file/vscode.references-view-0.0.49.vsix\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Lerna Watch Command for Theia Navigator Extension\nDESCRIPTION: This command uses Lerna to watch and compile changes for the @theia/navigator extension and its dependencies in parallel.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nnpx lerna run watch --scope @theia/navigator --include-filtered-dependencies --parallel\n```\n\n----------------------------------------\n\nTITLE: Compiling Theia TypeScript Sources\nDESCRIPTION: Command to compile TypeScript sources for Theia after dependencies are installed.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nnpm run compile\n```\n\n----------------------------------------\n\nTITLE: Configuring Theia Extension with Electron Preload Script\nDESCRIPTION: JSON configuration for declaring a preload script entry in the theiaExtensions configuration. This is needed when using electron-related functionality from the browser with context isolation enabled.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Migration.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"theiaExtensions\": [\n    {\n      \"preload\": \"lib/electron-browser/preload\",\n```\n\n----------------------------------------\n\nTITLE: Generated NLS JSON Structure\nDESCRIPTION: The JSON output structure generated by the nls-extract command, showing how the localization keys are organized hierarchically.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/dev-packages/localization-manager/README.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"greetings\": {\n    \"hi\": \"Hello\",\n    \"bye\": \"Bye\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Configuration for Theia Plugin in VS Code\nDESCRIPTION: Launch configuration for debugging a VS Code extension as a Theia plugin. It starts the backend process and connects to the plugin-host on port 9339.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_21\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"name\": \"Launch VS Code extension as Theia plugin\",\n    \"type\": \"node\",\n    \"request\": \"launch\",\n    \"port\": 9339,\n    \"timeout\": 100000,\n    \"args\": [\n        \"${workspaceFolder}/examples/browser/src-gen/backend/main.js\",\n        \"${workspaceFolder}\",\n        \"--port=3030\",\n        \"--hosted-plugin-inspect=9339\",\n        \"--plugins=local-dir:${workspaceFolder}/plugins\"\n    ],\n    \"stopOnEntry\": false,\n    \"sourceMaps\": true,\n    \"outFiles\": [\n        \"${workspaceFolder}/**/*.js\"\n    ],\n    \"internalConsoleOptions\": \"openOnSessionStart\",\n    \"outputCapture\": \"std\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom View in Tests\nDESCRIPTION: Shows how to use a custom view page object in tests by opening it through the app object.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/examples/playwright/docs/EXTENSIBILITY.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await TheiaAppLoader.load({ playwright, browser });\nconst myView = await app.openView(MyView);\nawait myView.clickMyButton();\n```\n\n----------------------------------------\n\nTITLE: Declaring Test Suite in JavaScript\nDESCRIPTION: Shows how to declare a basic test suite using Chai assertions within a function scope to avoid global namespace conflicts.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/api-testing.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Editors', function () {\n\n    const { assert } = chai;\n\n});\n```\n\n----------------------------------------\n\nTITLE: Translated French NLS JSON\nDESCRIPTION: Example of an automatically translated French localization file generated using the DeepL API integration, showing the same structure with translated values.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/dev-packages/localization-manager/README.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"greetings\": {\n    \"hi\": \"Bonjour\",\n    \"bye\": \"Au revoir\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Theia Core and Extension Packages\nDESCRIPTION: Command to watch and rebuild all Theia components when changes are detected.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Running Theia Playwright Tests in UI Mode\nDESCRIPTION: Command to run Playwright tests with the UI mode enabled, which provides an advanced test development experience with watch and trace capabilities.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/examples/playwright/docs/GETTING_STARTED.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn ui-tests --ui\n```\n\n----------------------------------------\n\nTITLE: URI String Manipulation Example (TypeScript)\nDESCRIPTION: Demonstrates correct and incorrect ways to manipulate URIs using Path and URI objects, highlighting best practices for handling file paths in Theia\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/coding-guidelines.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// bad\nuriString + '/' + pathString\n\n// good\nnew URI(uriString).join(pathString)\n\n// bad\npathString.substring(absolutePathString.length + 1)\n\n// good\nnew Path(absolutePathString).relative(pathString)\n```\n\n----------------------------------------\n\nTITLE: Setting up Theia Playwright template with Git and Yarn\nDESCRIPTION: Commands to clone the theia-playwright-template repository and install dependencies using Yarn. This is the recommended starting point for creating Playwright tests for Theia applications.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/examples/playwright/docs/GETTING_STARTED.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:eclipse-theia/theia-playwright-template.git\ncd theia-playwright-template\nyarn\n```\n\n----------------------------------------\n\nTITLE: Building and Running Theia on Windows\nDESCRIPTION: Shell commands to clone, build, and run Theia on Windows using Git Bash as administrator.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/eclipse-theia/theia.git \\\n    && cd theia \\\n    && npm install \\\n    && npm run build:browser \\\n    && npm run start:browser\n```\n\n----------------------------------------\n\nTITLE: Rebuilding All Theia Components\nDESCRIPTION: Command to rebuild all Theia components including TypeScript and example applications.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: External Terminal Extension Commands Reference\nDESCRIPTION: Defines the OPEN_NATIVE_CONSOLE command for spawning external terminals across different operating systems.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/external-terminal/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `OPEN_NATIVE_CONSOLE`: spawns an external terminal (native console) for different use-cases.\n```\n\n----------------------------------------\n\nTITLE: Building Theia Playwright Tests\nDESCRIPTION: Command to build the Playwright library, tests, and install all dependencies including browser binaries. This must be executed in the playwright directory before running tests.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/examples/playwright/docs/GETTING_STARTED.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/playwright\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Working with Custom Status Indicators\nDESCRIPTION: Demonstrates how to access and interact with custom status indicators through the StatusBar page object.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/examples/playwright/docs/EXTENSIBILITY.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await TheiaAppLoader.load({ playwright, browser });\nconst problemIndicator = await app.statusBar.statusIndicator(\n  TheiaProblemIndicator\n);\nconst numberOfProblems = await problemIndicator.numberOfProblems();\nexpect(numberOfProblems).to.be(2);\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Theia Application\nDESCRIPTION: Configures webpack to bundle Theia application, ensuring the initialization function is included correctly as a `commonjs2` library.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/plugin-ext/doc/how-to-add-new-custom-plugin-api.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst configs = require('./gen-webpack.config.js');\nconst nodeConfig = require('./gen-webpack.node.config.js');\n\nif (nodeConfig.config.entry) {\n    /**\n     * Add our initialization function. If unsure, look at the already generated entries for\n     * the nodeConfig where an entry is added for the default 'backend-init-theia' initialization.\n     */\n    nodeConfig.config.entry['foo-init'] = {\n        import: require.resolve('@namespace/package/lib/node/foo-init'),\n        library: { type: 'commonjs2' }\n    };\n}\n\nmodule.exports = [...configs, nodeConfig.config];\n```\n\n----------------------------------------\n\nTITLE: Plugin Activation Configuration in package.json\nDESCRIPTION: Theia plugins now require explicit activation events declaration to ensure startup behavior. Without `\"activationEvents\": [\"*\"]`, plugins may not start automatically at application launch.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/changelogs/CHANGELOG-2019.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"activationEvents\": [\"*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Extension Impact Script in Node.js\nDESCRIPTION: Command to run the script for measuring the impact of extensions on startup performance. It compares the startup time of a base Theia application with the startup time when specific extensions are added.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/scripts/performance/README.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnode extension-impact.js\n```\n\n----------------------------------------\n\nTITLE: Watching Playwright Tests for Theia in Bash\nDESCRIPTION: This command sets up a watch process that rebuilds the test code after each change, ensuring that executed tests are always up-to-date when running them with the Playwright VS Code Extension.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/examples/playwright/docs/DEVELOPING.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Increasing Inotify Watches on Linux\nDESCRIPTION: Resolves ENOSPC errors by increasing the maximum number of inotify watches for file system monitoring during Theia development\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\necho fs.inotify.max_user_watches=524288 | sudo tee -a \\/etc\\/sysctl.conf && sudo sysctl -p\n```\n\n----------------------------------------\n\nTITLE: Downloading Plugins for Theia Examples\nDESCRIPTION: Command to download plugins for use with the Theia example applications.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run download:plugins\n```\n\n----------------------------------------\n\nTITLE: Executing Electron Performance Script in Node.js\nDESCRIPTION: Command to run the Electron startup performance measurement script using Node.js. It accepts optional parameters for customizing the measurement.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/scripts/performance/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnode electron-performance.js\n```\n\n----------------------------------------\n\nTITLE: Inversify Initialization Changes\nDESCRIPTION: Explains the adjustments to initialization methods due to the upgrade to Inversify 6.0.  It outlines specific changes related to PreferenceProxySchema, OnigasmPromise, and PreferenceTransactionPrelude symbols, providing updated types and symbols.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/changelogs/CHANGELOG-2023.md#2025-04-20_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n\t- the type expected by the `PreferenceProxySchema` symbol has been changed from `PromiseLike<PreferenceSchema>` to `() => PromiseLike<PreferenceSchema>`\n\t- the symbol `OnigasmPromise` has been changed to `OnigasmProvider` and injects a function of type `() => Promise<IOnigLib>`\n\t- the symbol `PreferenceTransactionPrelude` has been changed to `PreferenceTransactionPreludeProvider` and injects a function of type `() => Promise<unknown>`\n```\n\n----------------------------------------\n\nTITLE: Fixing Xcode Developer Directory on macOS\nDESCRIPTION: Corrects the active developer directory when experiencing Xcode or command line tool configuration issues\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nsudo xcode-select --switch \\/Library\\/Developer\\/CommandLineTools\n```\n\n----------------------------------------\n\nTITLE: Starting Theia Browser Example\nDESCRIPTION: Command to start the Theia browser example application.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Running Electron Performance Script in Console\nDESCRIPTION: Commands to build the Theia Electron example and run the Electron startup performance measurement script. It includes steps for installation and building.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/scripts/performance/README.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm install\nnpm run build:electron\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Monaco Editor Core in VSCode\nDESCRIPTION: Commands for installing dependencies and building the Monaco editor core in the VSCode repository.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/monaco/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run gulp editor-distro\n```\n\n----------------------------------------\n\nTITLE: Variable Naming Convention Example in TypeScript\nDESCRIPTION: Demonstrates proper variable naming using whole words instead of abbreviations for better code readability.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/coding-guidelines.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// bad\nconst termWdgId = 1;\n\n// good\nconst terminalWidgetId = 1;\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Theia Browser Native Packages\nDESCRIPTION: Command to rebuild native Node.js packages for the Theia browser example.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nnpm run rebuild:browser\n```\n\n----------------------------------------\n\nTITLE: Adding Test Watch Configuration in package.json\nDESCRIPTION: Configuration to add to a Theia extension's package.json to enable test watch mode functionality. This allows continuous test execution when files change.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Testing.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"test:watch\": \"theiaext test:watch\"\n```\n\n----------------------------------------\n\nTITLE: Linking Local Monaco Editor Core in Theia\nDESCRIPTION: Example of how to link a local build of monaco-editor-core in Theia's package.json files.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/monaco/README.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"@theia/monaco-editor-core\": \"link:<path to your local build of monaco-editor-core>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Theia Directory Environment Variable\nDESCRIPTION: Command to set an environment variable for the Theia repository directory to simplify further commands.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nTHEIA=$PWD/theia\n```\n\n----------------------------------------\n\nTITLE: Configuring msgpackr Resolution for Callstack Issues\nDESCRIPTION: JSON configuration to downgrade msgpackr dependency to version 1.8.3 using yarn resolutions. This workaround addresses the 'maximum callstack exceeded' errors in the framework.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Migration.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"resolutions\": {\n    \"**/msgpackr\": \"1.8.3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Theia Electron Example\nDESCRIPTION: Commands to clone the Theia repository, install dependencies, build the Electron example, download plugins, and start the Electron application.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/eclipse-theia/theia \\\n    && cd theia \\\n    && npm install \\\n    && npm run build:electron \\\n    && npm run download:plugins \\\n    && npm run start:electron\n```\n\n----------------------------------------\n\nTITLE: Executing Browser Performance Script in Node.js\nDESCRIPTION: Command to run the browser startup performance measurement script using Node.js. It accepts optional parameters for customizing the measurement.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/scripts/performance/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnode browser-performance.js\n```\n\n----------------------------------------\n\nTITLE: Starting Theia Browser Example in Gitpod\nDESCRIPTION: Command to start the Theia browser example in a Gitpod environment after the initial build is complete.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run start:browser ../.. --hostname 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Adding a New Script to package.json for Theia Extension Scripts\nDESCRIPTION: This snippet shows how to add a new 'hello' script to the package.json file of @theia/ext-scripts. The script is added with the 'ext:' prefix and prints 'Hello World'.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/dev-packages/private-ext-scripts/README.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"@theia/ext-scripts\",\n    \"theia-monorepo-scripts\": {\n        \"ext:hello\": \"echo 'Hello World'\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Theia Example Applications\nDESCRIPTION: Commands to build various Theia example applications including browser and Electron versions.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build:browser\nnpm run build:browser-only\nnpm run build:electron\n\n# build all example applications at once:\nnpm run build:applications\n```\n\n----------------------------------------\n\nTITLE: Installing theiaext in a Theia Package\nDESCRIPTION: This snippet demonstrates how to install theiaext as a development dependency in a Theia package. The version number may vary.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/dev-packages/private-ext-scripts/README.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"@theia/myextension\",\n    \"devDependencies\": {\n        \"@theia/ext-scripts\": \"^0.1.1\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring socket.io Resolution for Security Vulnerability\nDESCRIPTION: JSON configuration to update socket.io dependencies to version 4.5.3 to address a critical vulnerability in socket.io-parser prior to v1.31.1 of Theia.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Migration.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"resolutions\": {\n    \"**/socket.io\": \"^4.5.3\",\n    \"**/socket.io-client\": \"^4.5.3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding theiaext Script to Package npm Scripts\nDESCRIPTION: This snippet demonstrates how to add the theiaext 'hello' script to the npm scripts of your package, allowing it to be called using npm run.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/dev-packages/private-ext-scripts/README.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"@theia/myextension\",\n    \"scripts\": {\n        \"hello\": \"theiaext hello\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Theia Electron Example\nDESCRIPTION: Command to start the Theia Electron example application.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nnpm start:electron\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin License Text\nDESCRIPTION: The Developer Certificate of Origin (DCO) version 1.1 text that contributors must agree to when making contributions to the project. This certifies the contributor's right to submit code under open source licenses.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Dialog Disposal on Close\nDESCRIPTION: Fixed disposing of dialogs on close, which may affect custom dialog implementations.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/changelogs/CHANGELOG-2024.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [core] fixed disposing of dialogs on close - [#14456](https://github.com/eclipse-theia/theia/pull/14456) - Contributed on behalf of STMicroelectronics\n```\n\n----------------------------------------\n\nTITLE: Configuring Re-Exports in package.json for Theia Projects\nDESCRIPTION: This JSON snippet demonstrates how to configure the theiaReExports key in package.json to specify re-export settings. It shows how to set up different export types and destinations for re-exported packages.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/dev-packages/private-re-exports/README.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"theiaReExports\": {\n        \"destination\": {\n            \"export *\": [\n                \"packages that export via *\"\n            ],\n            \"export =\": [\n                \"packages that export via =\"\n            ],\n            \"copy\": \"other-package#destination\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Individual Theia Extension Packages\nDESCRIPTION: Commands to build specific Theia extension packages using Lerna or npm.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nnpx lerna run compile --scope @theia/core\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm run compile\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Local Native Extension Build\nDESCRIPTION: Shell commands to set an environment variable that instructs prebuild-install to build the native extension locally instead of downloading prebuilt binaries.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Migration.md#2025-04-20_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\n# either:\nexport npm_config_build_from_source=true\nyarn\n# or:\nnpm_config_build_from_source=true yarn\n```\n\n----------------------------------------\n\nTITLE: RPC Class Renaming\nDESCRIPTION: Describes the renaming of classes and types related to the RPC protocol. It specifies the change from the `JsonRpc*` prefix to `Rpc*`, emphasizing that old classes are deprecated but still available.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/changelogs/CHANGELOG-2023.md#2025-04-20_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n\t- e.g. `JsonRpcProxyFactory` is deprecated, use `RpcProxyFactory` instead.\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Remote Settings and Configuration\nDESCRIPTION: Use local settings and configuration while connected to remote by rebinding UserStorageProvider.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/changelogs/CHANGELOG-2024.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [remote] use local settings and configuration while connected to remote (rebinds UserStorageProvider) [#14548]<https://github.com/eclipse-theia/theia/pull/14548/>\n```\n\n----------------------------------------\n\nTITLE: Watching Theia Example Applications\nDESCRIPTION: Commands to watch and rebuild Theia browser or Electron examples when changes are detected.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\n# either\nnpm run watch:browser\n\n# or\nnpm run watch:electron\n```\n\n----------------------------------------\n\nTITLE: Adding Webpack Resolution in package.json\nDESCRIPTION: Yarn resolution configuration to fix webpack version for production builds. This may be necessary to resolve issues with webpack-sources dependency.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Migration.md#2025-04-20_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n\"resolutions\": {\n  \"**/webpack\": \"5.46.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example User Query Format for MCP Search\nDESCRIPTION: Sample user query format for using the MCP search functionality, showing how users would structure their input to utilize the MCP search tool.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/packages/ai-mcp/README.md#2025-04-20_snippet_2\n\nLANGUAGE: md\nCODE:\n```\nSearch the internet for XYZ\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes - Core TypeScript Updates\nDESCRIPTION: Breaking changes include migration from PhosphorJS to Lumino, fixed dependency versions for Express types, typing corrections for key listeners, and changes to AI-related interfaces.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Express types fixed versions\n@types/express: ^4.17.21\n@types/express-serve-static-core: 5.0.4\n\n// PhosphorJS to Lumino migration\n// Old: import { ... } from '@phosphor/...' \n// New: import { ... } from '@lumino/...'\n\n// CSS selector changes\n// Old: .p-Widget\n// New: .lm-Widget\n\n// Command changes\n// Old: { icon: 'some-icon' }\n// New: { iconClass: 'some-icon' }\n```\n\n----------------------------------------\n\nTITLE: Watching Specific Theia Package\nDESCRIPTION: Command to watch and rebuild a specific Theia package using Lerna.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nnpx lerna run watch --scope @theia/package-name\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Theia Logo and Description\nDESCRIPTION: HTML markup defining the logo section and description of the Eclipse Theia project, including the project logo image and a brief tagline.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"theia-logo\" align=\"center\">\n    <br />\n    <img src=\"https://raw.githubusercontent.com/eclipse-theia/theia/master/logo/theia-logo-gray.svg?sanitize=true\" alt=\"Theia Logo\" width=\"300\"/>\n    <h3>Cloud & Desktop IDE Framework</h3>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Linting Theia TypeScript Sources\nDESCRIPTION: Command to run linting on Theia TypeScript sources.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nnpm run lint # lint TypeScript sources\n```\n\n----------------------------------------\n\nTITLE: Cloning Theia Repository\nDESCRIPTION: Command to clone the Theia repository from GitHub.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/eclipse-theia/theia\n```\n\n----------------------------------------\n\nTITLE: HTML Badges Section for Project Status\nDESCRIPTION: HTML div containing Markdown badges that show various statuses of the project including PR welcomeness, build status, and links to issues and discussions.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/README.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"badges\" align=\"center\">\n\n  [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-curved)](https://github.com/eclipse-theia/theia/labels/help%20wanted)\n  [![Build Status](https://github.com/eclipse-theia/theia/workflows/Build/badge.svg?branch=master)](https://github.com/eclipse-theia/theia/actions?query=branch%3Amaster+event%3Apush+event%3Aschedule)\n  [![Publish VS Code Built-in Extensions](https://github.com/eclipse-theia/vscode-builtin-extensions/actions/workflows/publish-vsx-latest.yml/badge.svg?branch=master)](https://github.com/eclipse-theia/vscode-builtin-extensions/actions/workflows/publish-vsx-latest.yml)\n  [![Open questions](https://img.shields.io/badge/Open-questions-blue.svg?style=flat-curved)](https://github.com/eclipse-theia/theia/discussions/categories/q-a)\n  [![Open bugs](https://img.shields.io/badge/Open-bugs-red.svg?style=flat-curved)](https://github.com/eclipse-theia/theia/labels/bug)\n  [![Gitpod Ready-to-Code](https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/eclipse-theia/theia)\n\nEclipse Theia is an extensible framework to develop full-fledged multi-language Cloud & Desktop IDEs and tools with state-of-the-art web technologies.\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration to Prevent Directory Walking\nDESCRIPTION: TSConfig modification to prevent TypeScript from walking up parent directories, fixing duplicate identifier errors.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_24\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"compilerOptions\": {\n       \"typeRoots\": [\"./node_modules/@types\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Header with Logo and Title\nDESCRIPTION: HTML markup for displaying the Theia logo and project title in a centered container with styling.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/dev-packages/application-package/README.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div align='center'>\n\n<br />\n\n<img src='https://raw.githubusercontent.com/eclipse-theia/theia/master/logo/theia.svg?sanitize=true' alt='theia-ext-logo' width='100px' />\n\n<h2>ECLIPSE THEIA - APPLICATION-PACKAGE</h2>\n\n<hr />\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes Reference in Markdown\nDESCRIPTION: Markdown anchor link syntax for breaking changes section in version 1.61.0 of the changelog.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<a name=\"breaking_changes_1.61.0\">[Breaking Changes:](#breaking_changes_1.61.0)</a>\n```\n\n----------------------------------------\n\nTITLE: HTML Image Container for Theia Screenshot\nDESCRIPTION: HTML div that contains a screenshot of the Theia IDE, styled to have a specific width and centered alignment.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/README.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div style='margin:0 auto;width:60%;'>\n\n![Theia](https://raw.githubusercontent.com/eclipse-theia/theia/master/doc/images/theia-screenshot.png)\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools on macOS\nDESCRIPTION: Installs the necessary Xcode command line tools required for building and running Theia on macOS development environments\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: NPM Installation with Unsafe Permissions\nDESCRIPTION: Allows installation with elevated permissions by using the unsafe-perm flag to bypass certain permission restrictions\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#2025-04-20_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --unsafe-perm\n```\n\n----------------------------------------\n\nTITLE: Configuring Theia Plugins with Extension Pack and Debug Extensions\nDESCRIPTION: JSON configuration for including the builtin extension pack along with JavaScript debug support plugins. This addresses an issue with the builtin extension pack at version 1.79.0 which excluded necessary debug extensions.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/doc/Migration.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"theiaPlugins\": {\n  \"eclipse-theia.builtin-extension-pack\": \"https://open-vsx.org/api/eclipse-theia/builtin-extension-pack/1.79.0/file/eclipse-theia.builtin-extension-pack-1.79.0.vsix\",\n  \"ms-vscode.js-debug\": \"https://open-vsx.org/api/ms-vscode/js-debug/1.78.0/file/ms-vscode.js-debug-1.78.0.vsix\",\n  \"ms-vscode.js-debug-companion\": \"https://open-vsx.org/api/ms-vscode/js-debug-companion/1.1.2/file/ms-vscode.js-debug-companion-1.1.2.vsix\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing theiaext Script from Command Line\nDESCRIPTION: This snippet shows how to call the 'hello' script using theiaext from the command line in the context of your package.\nSOURCE: https://github.com/eclipse-theia/theia/blob/master/dev-packages/private-ext-scripts/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx theiaext hello\n```"
  }
]