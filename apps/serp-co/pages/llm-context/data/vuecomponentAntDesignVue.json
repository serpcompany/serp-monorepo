[
  {
    "owner": "vuecomponent",
    "repo": "ant-design-vue",
    "content": "TITLE: Creating a New Vite Project with Ant Design Vue\nDESCRIPTION: Command to create a new project using Vite, which is recommended for use with Ant Design Vue.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/getting-started.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm create vite@latest\n```\n\n----------------------------------------\n\nTITLE: Using Table Component in Ant Design Vue - HTML and Vue.js\nDESCRIPTION: This snippet demonstrates how to implement the Ant Design Vue Table component with sample data and column definitions. It sets up a Vue template with a Table component bound to a data source and columns for displaying user data.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/table/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <a-table :dataSource=\"dataSource\" :columns=\"columns\" />\n</template>\n<script>\n  export default {\n    setup() {\n      return {\n        dataSource: [\n          {\n            key: '1',\n            name: 'Mike',\n            age: 32,\n            address: '10 Downing Street',\n          },\n          {\n            key: '2',\n            name: 'John',\n            age: 42,\n            address: '10 Downing Street',\n          },\n        ],\n\n        columns: [\n          {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n          },\n          {\n            title: 'Age',\n            dataIndex: 'age',\n            key: 'age',\n          },\n          {\n            title: 'Address',\n            dataIndex: 'address',\n            key: 'address',\n          },\n        ],\n      };\n    },\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Themes with ConfigProvider in Vue\nDESCRIPTION: This example shows how to create local themes by nesting ConfigProvider components. Child themes inherit values from parent themes that aren't explicitly overridden.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/customize-theme.en-US.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <a-config-provider\n    :theme=\"{\n      token: {\n        colorPrimary: '#1677ff',\n      },\n    }\"\n  >\n    <a-button />\n    <a-config-provider\n      :theme=\"{\n        token: {\n          colorPrimary: '#1890ff',\n        },\n      }\"\n    >\n      <a-button />\n    </a-config-provider>\n  </a-config-provider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Vue via npm\nDESCRIPTION: Command to install Ant Design Vue package using npm package manager. Adds the library as a project dependency.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install ant-design-vue --save\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for automatic component imports\nDESCRIPTION: Configuration for Vite using unplugin-vue-components and AntDesignVueResolver to automatically import components on demand. This eliminates the need for manual imports of each component.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/introduce.en-US.md#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// vite.config.js\nimport { defineConfig } from 'vite';\nimport Components from 'unplugin-vue-components/vite';\nimport { AntDesignVueResolver } from 'unplugin-vue-components/resolvers';\nexport default defineConfig({\n  plugins: [\n    // ...\n    Components({\n      resolvers: [\n        AntDesignVueResolver({\n          importStyle: false, // css in js\n        }),\n      ],\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Internationalization with ConfigProvider in Vue\nDESCRIPTION: This snippet demonstrates how to set up internationalization for an Ant Design Vue application using ConfigProvider. It includes importing the Chinese locale, configuring dayjs for date internationalization, and wrapping the app component with ConfigProvider.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/i18n.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <a-config-provider :locale=\"locale\">\n    <App />\n  </a-config-provider>\n</template>\n\n<script>\n  import zhCN from 'ant-design-vue/es/locale/zh_CN';\n  import dayjs from 'dayjs';\n  import 'dayjs/locale/zh-cn';\n  dayjs.locale('zh-cn');\n\n  export default {\n    data() {\n      return {\n        locale: zhCN,\n      };\n    },\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme Colors with ConfigProvider in Vue\nDESCRIPTION: This snippet demonstrates how to customize the primary color of the design theme using ConfigProvider's theme property to modify Design Tokens.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/customize-theme.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <a-config-provider\n    :theme=\"{\n      token: {\n        colorPrimary: '#00b96b',\n      },\n    }\"\n  >\n    <a-button />\n  </a-config-provider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Global Registration of Specific Ant Design Vue Components\nDESCRIPTION: Example of how to globally register specific Ant Design Vue components and plugins in a Vue 3 application.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/getting-started.en-US.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Button, message } from 'ant-design-vue';\nimport App from './App';\n\nconst app = createApp(App);\n\n/* Automatically register components under Button, such as Button.Group */\napp.use(Button).mount('#app');\n\napp.config.globalProperties.$message = message;\n```\n\n----------------------------------------\n\nTITLE: Configuring StyleProvider for High CSS Selector Priority in Vue\nDESCRIPTION: This snippet demonstrates how to use StyleProvider to set a high hash priority, which removes the ':where' selector wrapper. This is useful for supporting older browsers or resolving conflicts with frameworks like TailwindCSS.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/compatible-style.zh-CN.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <a-style-provider hash-priority=\"high\">\n    <MyApp />\n  </a-style-provider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of App Component in Vue 3\nDESCRIPTION: Demonstrates how to use the App component from Ant Design Vue to access global message, modal, and notification functions. The example shows button click handlers that trigger these functions.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/app/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <a-space>\n    <a-button type=\"primary\" @click=\"showMessage\">Open message</a-button>\n    <a-button type=\"primary\" @click=\"showModal\">Open modal</a-button>\n    <a-button type=\"primary\" @click=\"showNotification\">Open notification</a-button>\n  </a-space>\n</template>\n\n<script setup lang=\"ts\">\n  import { App } from 'ant-design-vue';\n\n  const { message, modal, notification } = App.useApp();\n\n  const showMessage = () => {\n    message.success('Success!');\n  };\n\n  const showModal = () => {\n    modal.warning({\n      title: 'This is a warning message',\n      content: 'some messages...some messages...',\n    });\n  };\n\n  const showNotification = () => {\n    notification.info({\n      message: `Notification topLeft`,\n      description: 'Hello, Ant Design Vue!!',\n      placement: 'topLeft',\n    });\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Vue with npm\nDESCRIPTION: Command to install the Ant Design Vue library using npm package manager. This installs version 4.x of the library as a dependency in your project.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/introduce.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install ant-design-vue@4.x --save\n```\n\n----------------------------------------\n\nTITLE: Using Global Store in Vue 3 Component\nDESCRIPTION: Demonstrates how to use the global store in a Vue component to access the message function from the App component.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/app/index.en-US.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <a-space>\n    <a-button type=\"primary\" @click=\"showMessage\">Open message</a-button>\n  </a-space>\n</template>\n\n<script setup>\n  import { useGlobalStore } from '@/stores/global';\n  const global = useGlobalStore();\n  const showMessage = () => {\n    global.message.success('Success!');\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Nested Form Items Solution - HTML\nDESCRIPTION: Correct approach for handling multiple form inputs by nesting Form.Item components.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/form/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<a-form-item>\n  <a-input name=\"a\"></a-input>\n  <a-form-item><a-input name=\"b\"></a-input></a-form-item>\n</a-form-item>\n```\n\n----------------------------------------\n\nTITLE: Replacing DatePicker Components with Moment.js or date-fns in Ant Design Vue\nDESCRIPTION: This snippet demonstrates how to replace the default dayjs implementation with either moment.js or date-fns for date/time components in Ant Design Vue. It shows proper import paths for DatePicker, TimePicker, and Calendar components along with the correct registration order when using the global Ant Design Vue plugin.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/replace-date.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// moment or date-fns\nimport DatePicker from 'ant-design-vue/es/date-picker/moment';\nimport TimePicker from 'ant-design-vue/es/time-picker/moment';\nimport Calendar from 'ant-design-vue/es/calendar/moment';\n// import DatePicker from 'ant-design-vue/es/date-picker/date-fns';\n// import TimePicker from 'ant-design-vue/es/time-picker/date-fns';\n// import Calendar from 'ant-design-vue/es/calendar/date-fns';\nimport { createApp } from 'vue';\nimport App from './App.vue';\nimport antd from 'ant-design-vue';\nconst app = createApp(App);\napp.use(DatePicker).use(TimePicker).use(Calendar).use(antd).mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Importing and registering Ant Design Vue components\nDESCRIPTION: JSX code example demonstrating how to import a specific component (DatePicker) from the Ant Design Vue library and register it with a Vue application instance.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/introduce.en-US.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DatePicker } from 'ant-design-vue';\napp.use(DatePicker);\n```\n\n----------------------------------------\n\nTITLE: Installing unplugin-vue-components for on-demand imports\nDESCRIPTION: Command to install the unplugin-vue-components package as a development dependency. This plugin enables automatic importing of Ant Design Vue components on demand.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/introduce.en-US.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install unplugin-vue-components -D\n```\n\n----------------------------------------\n\nTITLE: Basic Layout Structure Implementation in Ant Design Vue\nDESCRIPTION: Demonstrates the basic structure of a layout component with header, footer, sidebar, and content areas nested within the main Layout component.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/layout/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Layout>\n  <Header>header</Header>\n  <Layout>\n    <Sider>left sidebar</Sider>\n    <Content>main content</Content>\n    <Sider>right sidebar</Sider>\n  </Layout>\n  <Footer>footer</Footer>\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: useForm Method Signature and Configuration\nDESCRIPTION: Provides the complete type definition and configuration options for the useForm method, including model reference, rules, and validation options\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/form/index.en-US.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useForm(\n  modelRef: Props | Ref<Props>,\n  rulesRef?: Props | Ref<Props>,\n  options?: {\n    immediate?: boolean;\n    deep?: boolean;\n    validateOnRuleChange?: boolean;\n    debounce?: DebounceSettings;\n  },\n): {\n  modelRef: Props | Ref<Props>;\n  rulesRef: Props | Ref<Props>;\n  initialModel: Props;\n  validateInfos: validateInfos;\n  resetFields: (newValues?: Props) => void;\n  validate: <T = any>(names?: namesType, option?: validateOptions) => Promise<T>;\n  validateField: (\n    name?: string,\n    value?: any,\n    rules?: [Record<string, unknown>],\n    option?: validateOptions,\n  ) => Promise<RuleError[]>;\n  mergeValidateInfo: (items: ValidateInfo | ValidateInfo[]) => ValidateInfo;\n  clearValidate: (names?: namesType) => void;\n  onValidate?: (\n    name: string | number | string[] | number[],\n    status: boolean,\n    errorMsgs: string[] | null,\n  ) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Component Visibility API in Vue Templates\nDESCRIPTION: Example demonstrating how to migrate from the 'visible' prop to the unified 'open' prop for various components like Modal, Tag, Table, and Slider in Vue templates.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/migration-v4.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n<template>\n-- <a-modal :visible=\"visible\">content</a-modal>\n++ <a-modal :open=\"visible\">content</a-modal>\n\n-- <a-tag :visible=\"visible\">tag</a-tag>\n++ <a-tag v-if=\"visible\">tag</a-tag>\n\n  <a-table\n    :data=\"[]\"\n    :columns=\"[\n      {\n        title: 'Name',\n        dataIndex: 'name',\n--      filterDropdownVisible: visible,\n++      filterDropdownOpen: visible,\n      },\n    ]\"\n  />\n\n-- <a-slider :tooltipVisible=\"visible\" />\n++ <a-slider :tooltip=\"{ open: visible }\" />\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst visible = ref(true);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring DatePicker with Locale using ConfigProvider in Vue\nDESCRIPTION: This snippet demonstrates how to configure the DatePicker component's locale globally using the ConfigProvider component in Vue. It imports the locale file and sets it as a property in the ConfigProvider component. This ensures that all DatePicker components within the ConfigProvider will use the specified locale.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/date-picker/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <a-config-provider :locale=\"locale\">\n    <a-date-picker v-model:value=\"value\" />\n  </a-config-provider>\n</template>\n<script>\n  // The default locale is en-US, if you want to use other locale, just set locale in entry file globally.\n  import dayjs from 'dayjs';\n  import 'dayjs/locale/zh-cn';\n  import locale from 'ant-design-vue/es/date-picker/locale/zh_CN';\n  import { defineComponent } from 'vue';\n  dayjs.locale('zh-cn');\n  export default defineComponent({\n    setup() {\n      return {\n        value: dayjs('2015-01-01', 'YYYY-MM-DD')\n        dayjs,\n        locale\n      };\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Different Icon Themes in Vue\nDESCRIPTION: Example of importing and using different themed icons (outlined, filled, and two-tone) from @ant-design/icons-vue in a Vue component.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/icon/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StarOutlined, StarFilled, StarTwoTone } from '@ant-design/icons-vue';\n\n<star-outlined />\n<star-filled />\n<star-two-tone two-tone-color=\"#eb2f96\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Group in Ant Design Vue\nDESCRIPTION: Demonstrates how to create an Input Group component with multiple input fields. This structure allows for compact and organized input layouts.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/input/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-input-group>\n  <a-input />\n  <a-input />\n</a-input-group>\n```\n\n----------------------------------------\n\nTITLE: Consuming Design Tokens with useToken Hook in Vue\nDESCRIPTION: This code demonstrates how to access and use Design Tokens within Vue components using the useToken hook. It applies the current theme's primary color to a button's background.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/customize-theme.en-US.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <a-button :style=\"{ backgroundColor: token.colorPrimary }\">Button</a-button>\n</template>\n\n<script setup>\n  import { theme } from 'ant-design-vue';\n  const { useToken } = theme;\n  const { token } = useToken();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementation of Custom Component in Form Item\nDESCRIPTION: How to use the custom component to wrap multiple inputs within a single Form.Item to solve the collection problem.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/migration-v3.en-US.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a-form-item>\n  <custom-com>\n    <a-input name=\"a\"></a-input>\n    <a-input name=\"b\"></a-input>\n  </custom-com>\n</a-form-item>\n```\n\n----------------------------------------\n\nTITLE: Importing useForm Method from Ant Design Vue\nDESCRIPTION: Demonstrates how to import the useForm method from the Ant Design Vue library for form validation and state management\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/form/index.en-US.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Form } from 'ant-design-vue';\nconst useForm = Form.useForm;\n```\n\n----------------------------------------\n\nTITLE: Basic Layout Structure in JSX for Ant Design Vue\nDESCRIPTION: Demonstrates the basic structure of a Layout component with Header, Sider, Content, and Footer elements. This snippet shows how to nest these components to create a complete page layout.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/layout/index.zh-CN.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Layout>\n  <Header>header</Header>\n  <Layout>\n    <Sider>left sidebar</Sider>\n    <Content>main content</Content>\n    <Sider>right sidebar</Sider>\n  </Layout>\n  <Footer>footer</Footer>\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Basic Style Extraction with Cache in Ant Design Vue\nDESCRIPTION: Demonstrates the basic approach of rendering components and extracting styles using a cache mechanism for SSR. Components are rendered once to generate complete styles that can be written to a CSS file.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/extract-ssr.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst cache = createCache();\n\n// HTML Content\nrenderToString(\n  <StyleProvider cache={cache}>\n    <Button />\n    <Switch />\n    <Input />\n    {/* Rest antd components */}\n  </StyleProvider>,\n);\n\n// Style Content\nconst styleText = extractStyle(cache);\n```\n\n----------------------------------------\n\nTITLE: Implementing Breadcrumb with Vue Router\nDESCRIPTION: Demonstrates how to use the Breadcrumb component with Vue Router. It shows a template using a-breadcrumb with custom item rendering, and a script defining routes and their structure.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/breadcrumb/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <a-breadcrumb :routes=\"routes\">\n    <template #itemRender=\"{ route, params, routes, paths }\">\n      <span v-if=\"routes.indexOf(route) === routes.length - 1\">{{route.breadcrumbName}}</span>\n      <router-link v-else :to=\"paths.join('/')\">{{route.breadcrumbName}}</router-link>\n    </template>\n  </a-breadcrumb>\n</template>\n<script lang=\"ts\">\n  import { defineComponent, ref } from 'vue';\n  interface Route {\n    path: string;\n    breadcrumbName: string;\n    children?: Array<{\n      path: string;\n      breadcrumbName: string;\n    }>;\n  }\n  export default defineComponent({\n    setup() {\n      const routes = ref<Route[]>([\n        {\n          path: 'index',\n          breadcrumbName: 'home',\n        },\n        {\n          path: 'first',\n          breadcrumbName: 'first',\n          children: [\n            {\n              path: '/general',\n              breadcrumbName: 'General',\n            },\n            {\n              path: '/layout',\n              breadcrumbName: 'Layout',\n            },\n            {\n              path: '/navigation',\n              breadcrumbName: 'Navigation',\n            },\n          ],\n        },\n        {\n          path: 'second',\n          breadcrumbName: 'second',\n        },\n      ]);\n      return {\n        routes,\n      };\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Less Loader with Design Tokens\nDESCRIPTION: This example shows how to use Design Tokens with Less preprocessor by injecting them via less-loader configuration in a build system like webpack.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/customize-theme.en-US.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  loader: \"less-loader\",\n  options: {\n    lessOptions: {\n      modifyVars: mapToken,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Modal.useModal with Context in Vue\nDESCRIPTION: This snippet illustrates how to use `Modal.useModal()` to create a modal instance with context in a Vue component. The `contextHolder` is inserted into the template, and the `modal` instance is used to create a confirmation modal. This allows the modal to access the component's context.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/modal/index.en-US.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <contextHolder />\n  <!-- <component :is='contextHolder'/> -->\n</template>\n<script setup>\n  import { Modal } from 'ant-design-vue';\n  const [modal, contextHolder] = Modal.useModal();\n\n  modal.confirm({\n    // ...\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Prefix Class for Ant Design Vue Components\nDESCRIPTION: This JavaScript snippet demonstrates how to use ConfigProvider.config() to set a global prefix class for Modal, Message, and Notification components. It shows both static and reactive configuration options.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/config-provider/index.en-US.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nConfigProvider.config({\n  prefixCls: 'ant',\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// some cinfig support reactively, you can change prefixCls.value = 'other'\nconst prefixCls = ref('ant');\nConfigProvider.config({\n  prefixCls,\n});\n```\n\n----------------------------------------\n\nTITLE: Solution 1: Using Nested Form Items in HTML\nDESCRIPTION: A solution to the multiple inputs problem by nesting Form.Item components to properly collect form data from each input element.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/migration-v3.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-form-item>\n  <a-input name=\"a\"></a-input>\n  <a-form-item><a-input name=\"b\"></a-input></a-form-item>\n</a-form-item>\n```\n\n----------------------------------------\n\nTITLE: Using Ant Design Vue Button component in App.vue\nDESCRIPTION: Template section of App.vue that incorporates an Ant Design Vue Button component with the 'primary' type property.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/use-with-vue-cli.en-US.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<template>\n  <div id=\"app\">\n    <img src=\"./assets/logo.png\">\n    <a-button type=\"primary\">Button></a-button>\n    <router-view/>\n  </div>\n</template>\n...\n```\n\n----------------------------------------\n\nTITLE: Using Default Values and Value Binding in Ant Design Vue Components\nDESCRIPTION: Examples of different approaches to binding values in Ant Design Vue form components, including defaultValue, change event, and v-model directives.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/faq.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ndefaultValue or change or v-model\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Selector Priority with StyleProvider in Ant Design Vue\nDESCRIPTION: This snippet demonstrates how to use the StyleProvider component with hash-priority set to 'high' to remove the :where wrapper around selectors, increasing their specificity for better compatibility with older browsers or frameworks like TailwindCSS.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/compatible-style.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n// Config `hashPriority` to `high` instead of default `low`, which will remove `:where` wrapper\n<template>\n  <a-style-provider hash-priority=\"high\">\n    <MyApp />\n  </a-style-provider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Component Usage - HTML\nDESCRIPTION: Implementation example showing how to use a custom form component to wrap multiple inputs.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/form/index.en-US.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<a-form-item>\n  <custom-com>\n    <a-input name=\"a\"></a-input>\n    <a-input name=\"b\"></a-input>\n  </custom-com>\n</a-form-item>\n```\n\n----------------------------------------\n\nTITLE: Simplified Style Extraction Using Utility Function\nDESCRIPTION: Shows the simplified method for extracting styles from all Ant Design Vue components using a utility function. This approach excludes popup-type components that are not needed in SSR.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/extract-ssr.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { extractStyle } from 'ant-design-vue/lib/_util/static-style-extract';\nimport fs from 'fs';\n\n// `extractStyle` containers all the antd component\n// excludes popup like component which is no need in ssr: Modal, message, notification, etc.\nconst css = extractStyle();\n\nfs.writeFile(...);\n```\n\n----------------------------------------\n\nTITLE: Cascader Component Usage in Vue\nDESCRIPTION: This code snippet demonstrates how to use the `<a-cascader>` component in a Vue template. It binds the `options` property to a data source and uses `v-model:value` for two-way data binding to the selected value.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/cascader/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-cascader :options=\"options\" v-model:value=\"value\" />\n```\n\n----------------------------------------\n\nTITLE: Using Render Props with Transfer Component in Vue\nDESCRIPTION: Example of using render props with the Transfer component in Ant Design Vue. This demonstrates how to access internal state and functions to create custom item rendering.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/transfer/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-transfer>\n  <template\n    #children=\"{\n      direction,\n      filteredItems,\n      selectedKeys,\n      disabled: listDisabled,\n      onItemSelectAll,\n      onItemSelect,\n    }\"\n  >\n    <your-component />\n  <template>\n</a-transfer>\n```\n\n----------------------------------------\n\nTITLE: Global Usage of App Component with Pinia in Vue 3\nDESCRIPTION: Shows how to create a global store using Pinia to access App component functions across the application. It defines a store with message, notification, and modal references.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/app/index.en-US.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App } from 'ant-design-vue';\nimport type { MessageInstance } from 'ant-design-vue/es/message/interface';\nimport type { ModalStaticFunctions } from 'ant-design-vue/es/modal/confirm';\nimport type { NotificationInstance } from 'ant-design-vue/es/notification/interface';\n\nexport const useGlobalStore = defineStore('global', () => {\n  const message: MessageInstance = ref();\n  const notification: NotificationInstance = ref();\n  const modal: Omit<ModalStaticFunctions, 'warn'> = ref();\n  (() => {\n    const staticFunction = App.useApp();\n    message.value = staticFunction.message;\n    modal.value = staticFunction.modal;\n    notification.value = staticFunction.notification;\n  })();\n\n  return { message, notification, modal };\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Radio Component Properties\nDESCRIPTION: Demonstrates the core configuration options for Radio and RadioGroup components, including selection, disabled state, and value binding\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/radio/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Radio with autofocus and disabled state -->\n<a-radio\n  :autofocus=\"true\"\n  :disabled=\"false\"\n  :value=\"optionValue\"\n  v-model:checked=\"selectedValue\"\n>\n```\n\n----------------------------------------\n\nTITLE: Custom Form Component - Vue\nDESCRIPTION: Example of creating a custom component that uses Form.Item context injection.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/form/index.en-US.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<script>\n  // custom component\n  import { Form } from 'ant-design-vue';\n  export default {\n    name: 'custom-name',\n    setup() {\n      const formItemContext = Form.useInjectFormItemContext();\n    },\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Preset Theme Algorithms in Ant Design Vue\nDESCRIPTION: This example shows how to apply a preset dark theme algorithm to components using ConfigProvider. The code imports the theme package from Ant Design Vue and applies the darkAlgorithm.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/customize-theme.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <a-config-provider\n    :theme=\"{\n      algorithm: theme.darkAlgorithm,\n    }\"\n  >\n    <a-button />\n  </a-config-provider>\n</template>\n\n<script setup>\n  import { theme } from 'ant-design-vue';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring App Component with ConfigProvider in Vue 3\nDESCRIPTION: Demonstrates the correct sequence of using ConfigProvider with the App component to apply theme tokens.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/app/index.en-US.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a-config-provider theme=\"{{ ... }}\">\n  <a-app>...</a-app>\n</a-config-provider>\n```\n\n----------------------------------------\n\nTITLE: Promise-based Form Validation in Ant Design Vue 2.x\nDESCRIPTION: Demonstrates the new Promise-based approach for form validation in Ant Design Vue 2.x using async/await or then/catch patterns.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/migration-v2.en-US.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// v2\nvalidateFields().then(values ​​=> {\n  // Do something with value\n});\n```\n\n----------------------------------------\n\nTITLE: Editable Configuration Object Structure in Typography Component\nDESCRIPTION: JSON structure that defines the configuration options for making text editable within Typography components. It includes options for tooltip visibility, editing state control, text constraints, auto-sizing, various callback functions, and trigger types.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/typography/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  {\n    tooltip: boolean,\n    editing: boolean,\n    maxlength: number,\n    autoSize: boolean | { minRows: number, maxRows: number },\n    onStart: function,\n    onChange: function(string),\n    onCancel: function,\n    onEnd: function,\n    triggerType: ('icon' | 'text')[],\n  }\n```\n\n----------------------------------------\n\nTITLE: Grid Column Usage - Vue Template\nDESCRIPTION: Example showing how to create three equal-width columns using the grid system.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/grid/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-col :span=\"8\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing DatePicker with Locale in Vue\nDESCRIPTION: This snippet demonstrates how to initialize the DatePicker component with a specific locale (zh_CN) in Vue. It imports the locale file and sets it as a property in the component's setup function, passing it to the DatePicker component.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/date-picker/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <a-date-picker v-model:value=\"value\" :locale=\"locale\" />\n</template>\n<script>\n  import locale from 'ant-design-vue/es/date-picker/locale/zh_CN';\n  import { defineComponent } from 'vue';\n  export default defineComponent({\n    setup() {\n      return {\n        locale,\n        value: null,\n      };\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Badge with Count in Vue\nDESCRIPTION: This snippet demonstrates how to use the Badge component with a count property in Ant Design Vue. It wraps an anchor tag with a badge displaying a count of 5.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/badge/index.en_US.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-badge :count=\"5\">\n  <a href=\"#\" class=\"head-example\" />\n</a-badge>\n```\n\n----------------------------------------\n\nTITLE: Button Properties Table in Markdown\nDESCRIPTION: Table showing various properties available for the Button component, including their types, default values, and version information.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/button/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| block | option to fit button width to its parent width | boolean | `false` |  |\n| danger | set the danger status of button | boolean | `false` | 2.2.0 |\n| disabled | disabled state of button | boolean | `false` |  |\n| ghost | make background transparent and invert text and border colors | boolean | `false` |  |\n| href | redirect url of link button | string | - |  |\n| htmlType | set the original html `type` of `button`, see: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type) | string | `button` |  |\n| icon | set the icon of button, see: Icon component | v-slot | - |  |\n| loading | set the loading status of button | boolean \\| { delay: number } | `false` |  |\n| shape | Can be set button shape | `default` \\| `circle` \\| `round` | `default` |  |\n| size | set the size of button | `large` \\| `middle` \\| `small` | `middle` |  |\n| target | same as target attribute of a, works when href is specified | string | - |  |\n| type | can be set button type | `primary` \\| `ghost` \\| `dashed` \\| `link` \\| `text` \\| `default` | `default` |  |\n```\n\n----------------------------------------\n\nTITLE: Manual Form Field Association - HTML\nDESCRIPTION: Example showing how to manually associate form fields when automatic monitoring is disabled.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/form/index.en-US.md#2025-04-21_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<a-form-item name=\"form.name\" ref=\"name\" :autoLink=\"false\">\n  <a-input v-model:value=\"other\" />\n  <span>hahha</span>\n  <div>\n    <a-input\n      v-model:value=\"form.name\"\n      @blur=\"() => {$refs.name.onFieldBlur()}\"\n      @change=\"() => {$refs.name.onFieldChange()}\"\n    />\n  </div>\n</a-form-item>\n```\n\n----------------------------------------\n\nTITLE: Custom Row Management in Ant Design Vue - JavaScript and JSX\nDESCRIPTION: This snippet shows how to define custom behaviors for rows and header rows in the Ant Design Vue Table component using JSX syntax. It allows for customizing event handling for clicks, double clicks, and mouse events on rows.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/table/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Table\n  customRow={(record) => {\n    return {\n      xxx, // props\n      onClick: (event) => {},       // click row\n      onDblclick: (event) => {}, // double click row\n      onContextmenu: (event) => {}  // right button click row\n      onMouseenter: (event) => {}   // mouse enter row\n      onMouseleave: (event) => {}   // mouse leave row\n    };\n  }}\n  customHeaderRow={(columns, index) => {\n    return {\n      onClick: () => {},        // click header row\n    };\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Cascader Component in Vue\nDESCRIPTION: Demonstrates the basic usage of the Cascader component in a Vue template. It binds the component's value to a reactive property and provides options for selection.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/cascader/index.zh-CN.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-cascader :options=\"options\" v-model:value=\"value\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Carousel API Properties in Markdown\nDESCRIPTION: This code snippet defines the API properties for the Carousel component in a markdown table format. It includes properties like autoplay, dotPosition, dots, dotsClass, easing, effect, afterChange, and beforeChange, along with their descriptions, types, default values, and version information.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/carousel/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| autoplay | Whether to scroll automatically | boolean | `false` |  |\n| dotPosition | The position of the dots, which can be one of `top` `bottom` `left` `right` | string | `bottom` | 1.5.0 |\n| dots | Whether to show the dots at the bottom of the gallery | boolean | `true` |  |\n| dotsClass | Class name of the dots | string | `slick-dots` |  |\n| easing | Transition interpolation function name | string | `linear` |  |\n| effect | Transition effect | `scrollx` \\| `fade` | `scrollx` |  |\n| afterChange | Callback function called after the current index changes | function(current) | - |  |\n| beforeChange | Callback function called before the current index changes | function(from, to) | - |  |\n```\n\n----------------------------------------\n\nTITLE: Configuring Popup Container in Vue Component\nDESCRIPTION: This snippet demonstrates how to use ConfigProvider to set a custom popup container for components. It includes a method to determine the container based on the presence of a dialog context.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/config-provider/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <a-config-provider :getPopupContainer=\"getPopupContainer\">\n    <app />\n  </a-config-provider>\n</template>\n<script>\n  export default {\n    methods: {\n      getPopupContainer(el, dialogContext) {\n        if (dialogContext) {\n          return dialogContext.getDialogWrap();\n        } else {\n          return document.body;\n        }\n      },\n    },\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Font Icon Component\nDESCRIPTION: Example of creating a custom icon component using createFromIconfontCN function, which allows using icons from iconfont.cn.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/icon/index.en-US.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createFromIconfontCN } from '@ant-design/icons-vue';\nimport { defineComponent } from 'vue';\nconst MyIcon = createFromIconfontCN({\n  scriptUrl: '//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js', // generated by iconfont.cn\n});\n\nexport default defineComponent({\n  setup() {\n    return () => <MyIcon type=\"icon-dianzan\" />;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar Component with Vue and Dayjs\nDESCRIPTION: This snippet demonstrates how to set up and use the Calendar component with Vue and Dayjs. It shows how to set the locale and bind value and event handlers.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/calendar/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// The default locale is en-US, if you want to use other locale, just set locale in entry file globally.\n// import dayjs from 'dayjs';\n// import 'dayjs/locale/zh-cn';\n// dayjs.locale('zh-cn');\n\n<a-calendar v-model:value @panelChange=\"onPanelChange\" @select=\"onSelect\"></a-calendar>\n```\n\n----------------------------------------\n\nTITLE: Defining Avatar API Properties in Markdown\nDESCRIPTION: A markdown table listing the API properties for the Avatar component, including their descriptions, types, default values, and version information.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/avatar/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| alt | This attribute defines the alternative text describing the image | string | - |  |\n| crossOrigin | cors settings attributes | `'anonymous'` \\| `'use-credentials'` \\| `''` | - | 3.0 |\n| draggable | Whether the picture is allowed to be dragged | boolean \\| `'true'` \\| `'false'` | - | 2.2.0 |\n| gap | Letter type unit distance between left and right sides | number | 4 | 2.2.0 |\n| icon | the `Icon` type for an icon avatar, see `Icon` Component | VNode \\| slot | - |  |\n| loadError | handler when img load error, return false to prevent default fallback behavior | () => boolean | - |  |\n| shape | the shape of avatar | `circle` \\| `square` | `circle` |  |\n| size | The size of the avatar | number \\| `large` \\| `small` \\| `default` \\| { xs: number, sm: number, ...} | `default` | 2.2.0 |\n| src | the address of the image for an image avatar | string | - |  |\n| srcset | a list of sources to use for different screen resolutions | string | - |  |\n```\n\n----------------------------------------\n\nTITLE: Using Render Props in Transfer Component with Vue Template\nDESCRIPTION: Example of using render props in the Transfer component to customize list rendering. This demonstrates how to access direction, filtered items, selection state, and functions for item selection.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/transfer/index.zh-CN.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-transfer>\n  <template\n    #children=\"{\n      direction,\n      filteredItems,\n      selectedKeys,\n      disabled: listDisabled,\n      onItemSelectAll,\n      onItemSelect,\n    }\"\n  >\n    <your-component />\n  <template>\n</a-transfer>\n```\n\n----------------------------------------\n\nTITLE: Destroying All Confirmation Modals on Route Change in Vue\nDESCRIPTION: This snippet shows how to destroy all confirmation modals (Modal.info, Modal.success, etc.) using `Modal.destroyAll()` within a Vue Router's `beforeEach` hook. This ensures that any open confirmation modals are closed when the user navigates to a new route.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/modal/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst router = new VueRouter({ ... })\n\n// router change\nrouter.beforeEach((to, from, next) => {\n  Modal.destroyAll();\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Dayjs Locale for DatePicker\nDESCRIPTION: This JavaScript code demonstrates how to customize the locale of Dayjs, a date library. It imports Dayjs, the updateLocale plugin, and the desired locale (zh-cn). It then extends Dayjs with the updateLocale plugin and updates the locale to set the start of the week to Sunday (0).\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/date-picker/index.en-US.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport dayjs from 'dayjs';\nimport updateLocale from 'dayjs/plugin/updateLocale';\nimport 'dayjs/locale/zh-cn';\n\ndayjs.extend(updateLocale);\ndayjs.updateLocale('zh-cn', {\n  weekStart: 0,\n});\n```\n\n----------------------------------------\n\nTITLE: FloatButton Common API Table in Markdown\nDESCRIPTION: Markdown table documenting the common API properties of the FloatButton component including icon, description, tooltip, type, shape, href, target, and badge properties.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/float-button/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| icon | Set the icon component of button | slot | - |  |\n| description | Text and other | string \\| slot | - |  |\n| tooltip | The text shown in the tooltip | string \\| slot |  |  |\n| type | Setting button type | `default` \\| `primary` | `default` |  |\n| shape | Setting button shape | `circle` \\| `square` | `circle` |  |\n| href | The target of hyperlink | string | - |  |\n| target | Specifies where to display the linked URL | string | - |  |\n| badge | Attach Badge to FloatButton. `status` and other props related are not supported. | [BadgeProps](/components/badge#api) | - |  |\n```\n\n----------------------------------------\n\nTITLE: Basic Timeline Implementation in Ant Design Vue\nDESCRIPTION: A basic example of implementing a timeline component with four timeline items showing events with dates. This demonstrates the fundamental structure of the Timeline component.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/timeline/index.zh-CN.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-timeline>\n  <a-timeline-item>创建服务现场 2015-09-01</a-timeline-item>\n  <a-timeline-item>初步排除网络异常 2015-09-01</a-timeline-item>\n  <a-timeline-item>技术测试异常 2015-09-01</a-timeline-item>\n  <a-timeline-item>网络异常正在修复 2015-09-01</a-timeline-item>\n</a-timeline>\n```\n\n----------------------------------------\n\nTITLE: Global Registration of All Ant Design Vue Components\nDESCRIPTION: Example of how to globally register all Ant Design Vue components in a Vue 3 application.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/getting-started.en-US.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createApp } from 'vue';\nimport Antd from 'ant-design-vue';\nimport App from './App';\nimport 'ant-design-vue/dist/reset.css';\n\nconst app = createApp(App);\n\napp.use(Antd).mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar with Default Configuration\nDESCRIPTION: Basic calendar component setup with event handlers for panel change and date selection\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/calendar/index.zh-CN.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<a-calendar v-model:value=\"value\" @panelChange=\"onPanelChange\" @select=\"onSelect\"></a-calendar>\n```\n\n----------------------------------------\n\nTITLE: Defining Anchor Props in Markdown\nDESCRIPTION: This snippet lists the properties of the Anchor component, including their descriptions, types, default values, and version information.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/anchor/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| affix | Fixed mode of Anchor | boolean | true |  |\n| bounds | Bounding distance of anchor area | number | 5(px) |  |\n| getContainer | Scrolling container | () => HTMLElement | () => window |  |\n| getCurrentAnchor | Customize the anchor highlight | (activeLink: string) => string | - | activeLink(3.3) |\n| offsetBottom | Pixels to offset from bottom when calculating position of scroll | number | - |  |\n| offsetTop | Pixels to offset from top when calculating position of scroll | number | 0 |  |\n| showInkInFixed | Whether show ink-square when `：affix=\"false\"` | boolean | false |  |\n| targetOffset | Anchor scroll offset, default as `offsetTop`, [example](#components-anchor-demo-targetoffset) | number | `offsetTop` | 1.5.0 |\n| wrapperClass | The class name of the container | string | - |  |\n| wrapperStyle | The style of the container | object | - |  |\n| items | Data configuration option content, support nesting through children | { key, href, title, target, children }\\[] [see](#anchoritem) | - | 4.0 |\n| direction | Set Anchor direction | `vertical` \\| `horizontal` | `vertical` | 4.0 |\n| customTitle | custom option title by slot | v-slot=\"AnchorItem\" | - | 4.0 |\n```\n\n----------------------------------------\n\nTITLE: Customizing Component-Specific Design Tokens in Vue\nDESCRIPTION: This snippet demonstrates how to customize the primary color for a specific component (Radio) without affecting other components using the components property in ConfigProvider.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/customize-theme.en-US.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <a-config-provider\n    :theme=\"{\n      components: {\n        Radio: {\n          colorPrimary: '#00b96b',\n        },\n      },\n    }\"\n  >\n    <a-radio>Radio</a-radio>\n    <a-checkbox>Checkbox</a-checkbox>\n  </a-config-provider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: On-demand Icon Import in Ant Design Vue 2.x\nDESCRIPTION: Shows the recommended way to import icons in Ant Design Vue 2.x that supports tree shaking and reduces bundle size by approximately 150 KB (Gzipped).\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/migration-v2.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <smile-outlined />\n  <a-button>\n    <template #icon><smile-outlined /></template>\n  </a-button>\n</template>\n<script>\n  import SmileOutlined from '@ant-design/icons-vue/SmileOutlined';\n  export default {\n    components: {\n      SmileOutlined,\n    },\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue CLI 3 for SVG Icons\nDESCRIPTION: Configuration for vue.config.js to use vue-svg-loader, enabling the import of SVG icons as Vue components.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/icon/index.en-US.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// vue.config.js\nmodule.exports = {\n  chainWebpack: config => {\n    const svgRule = config.module.rule('svg');\n\n    svgRule.uses.clear();\n\n    svgRule.use('vue-svg-loader').loader('vue-svg-loader');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using automatic imports with unplugin-vue-components\nDESCRIPTION: Example of importing Button component with unplugin-vue-components. The plugin automatically converts this to a proper import from ant-design-vue library.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/introduce.en-US.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from 'ant-design-vue';\n```\n\n----------------------------------------\n\nTITLE: Rendering Components inside Parent Containers in Ant Design Vue\nDESCRIPTION: Code snippet demonstrating how to render popup components like Select, Dropdown, DatePicker inside their parent node to prevent them from disappearing when clicking other components or to prevent them from scrolling with the page.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/faq.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-select :getPopupContainer=\"trigger => trigger.parentNode\">\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Context in Ant Design Vue with HTML\nDESCRIPTION: This HTML snippet, together with a script setup, demonstrates how to implement the use of the Ant Design Vue's `message.useMessage()` in a Vue component. The provided template shows the placement of the `contextHolder` element which is returned by `useMessage()`. This setup ensures that the message component respects the Vue context, allowing integration with ConfigProvider settings or other context-dependent features.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/message/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<template>\n  <contextHolder />\n  <!-- <component :is='contextHolder'/> -->\n</template>\n<script setup>\n  import { message } from 'ant-design-vue';\n  const [messageApi, contextHolder] = message.useMessage();\n  messageApi.open({\n    // ...\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Positioning Affix Component with Absolute Values\nDESCRIPTION: Example showing how to use the Affix component with absolute positioning, setting specific x and y coordinates. Note that while children of Affix cannot use absolute positioning, the Affix component itself can be positioned absolutely.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/affix/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-affix :style=\"{ position: 'absolute', top: y, left: x}\">...</a-affix>\n```\n\n----------------------------------------\n\nTITLE: Converting Legacy Tokens for Less Migration in Webpack\nDESCRIPTION: JavaScript configuration for Webpack that demonstrates how to convert Ant Design Vue v4 tokens to v3 less variables for compatibility with existing less stylesheets.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/migration-v4.en-US.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { theme } = require('ant-design-vue/lib');\nconst convertLegacyToken = require('ant-design-vue/lib/theme/convertLegacyToken');\n\nconst { defaultAlgorithm, defaultSeed } = theme;\n\nconst mapToken = defaultAlgorithm(defaultSeed);\nconst v3Token = convertLegacyToken(mapToken);\n\n// Webpack Config\nmodule.exports = {\n  // ... other config\n  loader: 'less-loader',\n  options: {\n    lessOptions: {\n      modifyVars: v3Token,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Row Key in Transfer Component\nDESCRIPTION: Example showing how to specify a custom key for uniquely identifying elements in the Transfer component when the default 'key' property is not available in your data.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/transfer/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// eg. your primary key is `uid`\nreturn <Transfer :rowKey=\"record => record.uid\" />;\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Select Component Usage\nDESCRIPTION: Demonstrates the basic syntax for using the Ant Design Vue Select component with a single option\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/select/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-select>\\n  <a-select-option value=\"lucy\">lucy</a-select-option>\\n</a-select>\n```\n\n----------------------------------------\n\nTITLE: Using MessageOutlined Icon in Vue Component\nDESCRIPTION: Example of importing and using the MessageOutlined icon in a Vue component with custom styling.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/icon/index.en-US.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <message-outlined :style=\"{fontSize: '16px', color: '#08c'}\" />\n</template>\n<script>\n  import { MessageOutlined } from '@ant-design/icons-vue';\n  import { defineComponent } from 'vue';\n  export default defineComponent({\n    components: {\n      MessageOutlined,\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic AutoComplete Usage - HTML\nDESCRIPTION: Basic implementation of the AutoComplete component with value binding and options prop.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/auto-complete/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-auto-complete v-model:value=\"value\" :options=\"options\" />\n```\n\n----------------------------------------\n\nTITLE: Local Registration of Ant Design Vue Components\nDESCRIPTION: Example of how to locally register Ant Design Vue components within a single Vue component.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/getting-started.en-US.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <a-button>Add</a-button>\n</template>\n<script>\n  import { Button } from 'ant-design-vue';\n  const ButtonGroup = Button.Group;\n\n  export default {\n    components: {\n      AButton: Button,\n      AButtonGroup: ButtonGroup,\n    },\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Watermark API Properties Table\nDESCRIPTION: Markdown table detailing the core properties of the Watermark component, including width, height, rotation, z-index, image source, content, font styling, and spacing configurations.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/watermark/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| width | The width of the watermark, the default value of `content` is its own width | number | 120 |  |\n| height | The height of the watermark, the default value of `content` is its own height | number | 64 |  |\n| rotate | When the watermark is drawn, the rotation Angle, unit `°` | number | -22 |  |\n| zIndex | The z-index of the appended watermark element | number | 9 |  |\n| image | Image source, it is recommended to export 2x or 3x image, high priority | string | - |  |\n| content | Watermark text content | string \\| string[] | - |  |\n| font | Text style | [Font](#font) | [Font](#font) |  |\n| gap | The spacing between watermarks | \\[number, number\\] | \\[100, 100\\] |  |\n| offset | The offset of the watermark from the upper left corner of the container. The default is `gap/2` | \\[number, number\\] | \\[gap\\[0\\]/2, gap\\[1\\]/2\\] |  |\n```\n\n----------------------------------------\n\nTITLE: Defining a Select Component in Ant Design Vue\nDESCRIPTION: This snippet demonstrates how to create a basic Select component using Ant Design Vue framework. It includes the definition of a Select element with an option.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/select/index.zh-CN.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-select>\n  <a-select-option value=\"lucy\">lucy</a-select-option>\n</a-select>\n```\n\n----------------------------------------\n\nTITLE: Custom SVG Loader for Rsbuild\nDESCRIPTION: Implementation of a custom SVG loader for Rsbuild, allowing for SVG optimization and Vue-specific modifications.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/icon/index.en-US.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// vue-svg-loader.js\n/* eslint-disable */\nconst { optimize } = require('svgo');\nconst { version } = require('vue');\nconst semverMajor = require('semver/functions/major');\n\nmodule.exports = async function (svg) {\n  const callback = this.async();\n\n  try {\n    ({ data: svg } = await optimize(svg, {\n      path: this.resourcePath,\n      js2svg: {\n        indent: 2,\n        pretty: true,\n      },\n      plugins: [\n        'convertStyleToAttrs',\n        'removeDoctype',\n        'removeXMLProcInst',\n        'removeComments',\n        'removeMetadata',\n        'removeTitle',\n        'removeDesc',\n        'removeStyleElement',\n        'removeXMLNS',\n        'removeXMLProcInst',\n      ],\n    }));\n  } catch (error) {\n    callback(error);\n    return;\n  }\n\n  if (semverMajor(version) === 2) {\n    svg = svg.replace('<svg', '<svg v-on=\"$listeners\"');\n  }\n\n  callback(null, `<template>${svg}</template>`);\n};\n```\n\n----------------------------------------\n\nTITLE: Updating and Destroying Modal Instance in Vue\nDESCRIPTION: This snippet demonstrates how to create a modal instance using `Modal.info()`, update its properties like title and content using `modal.update()`, and then destroy the modal instance using `modal.destroy()` in a Vue application.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/modal/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst modal = Modal.info();\n\nmodal.update({\n  title: 'Updated title',\n  content: 'Updated content',\n});\n\nmodal.destroy();\n```\n\n----------------------------------------\n\nTITLE: Descriptions Component API Table - Markdown\nDESCRIPTION: API table documenting the properties available for the Descriptions component, including property names, descriptions, types, default values and version information.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/descriptions/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| bordered | whether to display the border | boolean | false | |\n| colon | change default props `colon` value of `Descriptions.Item` | boolean | true | |\n| column | the number of `DescriptionItems` in a row,could be a number or a object like `{ xs: 8, sm: 16, md: 24}`,(Only set `bordered={true}` to take effect) | number | 3 | |\n| contentStyle | Customize content style | CSSProperties | - | 2.2.0 |\n| extra | The action area of the description list, placed at the top-right | string \\| VNode \\| slot | - | 2.0.0 |\n| labelStyle | Customize label style | CSSProperties | - | 2.2.0 |\n| layout | Define description layout | `horizontal` \\| `vertical` | `horizontal` | |\n| size | set the size of the list. Can be set to `middle`,`small`, or not filled | `default` \\| `middle` \\| `small` | `default` | |\n| title | The title of the description list, placed at the top | string \\| VNode \\| slot | - | |\n```\n\n----------------------------------------\n\nTITLE: Radio Group Configuration with Options\nDESCRIPTION: Illustrates how to create a radio group with multiple options, setting button style, size, and handling selection\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/radio/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<a-radio-group\n  v-model:value=\"groupValue\"\n  :options=\"['Option 1', 'Option 2', 'Option 3']\"\n  :button-style=\"'solid'\"\n  :option-type=\"'button'\"\n  :size=\"'default'\"\n  @change=\"handleChange\"\n>\n```\n\n----------------------------------------\n\nTITLE: Breakpoint Width Configuration in Ant Design Vue\nDESCRIPTION: Defines the responsive breakpoint width values used for layout responsiveness across different screen sizes.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/layout/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  xs: '480px',\n  sm: '576px',\n  md: '768px',\n  lg: '992px',\n  xl: '1200px',\n  xxl: '1600px',\n  xxxl: '2000px',\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom SVG Icon in Vue Component\nDESCRIPTION: Example of importing and using a custom SVG icon as a component in a Vue application.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/icon/index.en-US.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { defineComponent } from 'vue';\nimport Icon from '@ant-design/icons-vue';\nimport MessageSvg from 'path/to/message.svg'; // path to your '*.svg' file.\n\nexport default defineComponent({\n  setup() {\n    return () => <Icon type={MessageSvg} />;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Alert Component API in Markdown\nDESCRIPTION: This code snippet defines the API for the Alert component, including properties, their descriptions, types, default values, and version information.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/alert/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| action | The action of Alert | slot | - | 4.0.0 |\n| afterClose | Called when close animation is finished | () => void | - |  |\n| banner | Whether to show as banner | boolean | false |  |\n| closable | Whether Alert can be closed | boolean |  |  |\n| closeIcon | Custom close icon | slot | `<CloseOutlined />` | 3.0 |\n| closeText | Close text to show | string\\|slot | - |  |\n| description | Additional content of Alert | string\\|slot | - |  |\n| icon | Custom icon, effective when `showIcon` is `true` | vnode \\| slot | - |  |\n| message | Content of Alert | string\\|slot | - |  |\n| showIcon | Whether to show icon | boolean | false,in `banner` mode default is true |  |\n| type | Type of Alert styles, options: `success`, `info`, `warning`, `error` | string | `info`,in `banner` mode default is `warning` |  |\n```\n\n----------------------------------------\n\nTITLE: Configuring main.js for Ant Design Vue integration\nDESCRIPTION: Code for the main.js file that imports and registers the Button component from Ant Design Vue, sets up the CSS styles, and mounts the Vue application.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/use-with-vue-cli.en-US.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Vue from 'vue';\nimport Button from 'ant-design-vue/lib/button';\nimport 'ant-design-vue/dist/reset.css';\nimport App from './App';\n\nconst app = createApp(App);\n\n/* Automatically register components under Button, such as Button.Group */\napp.use(Button).mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Starting the Vue development server\nDESCRIPTION: Commands to navigate into the project directory and start the Vue development server, which will serve the application on http://localhost:8080/.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/use-with-vue-cli.en-US.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd antd-demo\n$ npm run serve\n```\n\n----------------------------------------\n\nTITLE: Rendering Empty Component with Button in JSX\nDESCRIPTION: This snippet demonstrates how to use the Empty component with a nested Button component. It shows the basic structure for creating an empty state with a call-to-action button.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/empty/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Empty>\n  <Button>Create</Button>\n</Empty>\n```\n\n----------------------------------------\n\nTITLE: Ellipsis Configuration Object Structure in Typography Component\nDESCRIPTION: JSON structure that defines the configuration options for text with ellipsis behavior within Typography components. It includes options for row limits, expandability, custom suffixes and symbols, tooltip control, and callback functions for ellipsis and expand events.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/typography/index.en-US.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n  {\n    rows: number,\n    expandable: boolean,\n    suffix: string,\n    symbol: string,\n    tooltip: boolean | string,\n    onExpand: function(event),\n    onEllipsis: function(ellipsis),\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring main.js to import Ant Design Vue\nDESCRIPTION: Code to modify the main.js file to import Ant Design Vue Button component and its styles, then register the component with the Vue application instance.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/use-with-vue-cli.zh-CN.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Vue from 'vue';\nimport Button from 'ant-design-vue/lib/button';\nimport 'ant-design-vue/dist/antd.css';\nimport App from './App';\n\nconst app = createApp(App);\n\n/* 会自动注册 Button 下的子组件, 例如 Button.Group */\napp.use(Button).mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Modifying App.vue to use Ant Design Vue Button\nDESCRIPTION: Example of how to update the App.vue template to include an Ant Design Vue Button component with the primary type attribute.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/use-with-vue-cli.zh-CN.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<template>\n  <div id=\"app\">\n    <img src=\"./assets/logo.png\">\n    <a-button type=\"primary\">Button></a-button>\n  </div>\n</template>\n...\n```\n\n----------------------------------------\n\nTITLE: Setting RangePicker Mode in Ant Design Vue\nDESCRIPTION: Example showing how to set the mode property on RangePicker components, which affects the displayed panel but not the date picking behavior.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/faq.en-US.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<RangePicker mode=\"month\" />\n```\n\n----------------------------------------\n\nTITLE: Solution 2: Custom Component with FormItemContext in Vue\nDESCRIPTION: A custom Vue component that uses Form.useInjectFormItemContext to properly handle multiple form inputs, merging them into one form item.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/migration-v3.en-US.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  // custom component\n  import { Form } from 'ant-design-vue';\n  export default {\n    name: 'custom-name',\n    setup() {\n      const formItemContext = Form.useInjectFormItemContext();\n    },\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Copyable Configuration Object Structure in Typography Component\nDESCRIPTION: JSON structure that defines the configuration options for making text copyable within Typography components. It includes options for custom text to copy, tooltip visibility, and a callback function for copy events.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/typography/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  {\n    text: string,\n    onCopy: function(event),\n    tooltip: false,\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Security Policy for Ant Design Vue Button\nDESCRIPTION: This example shows how to set up Content Security Policy (CSP) for an Ant Design Vue Button component using ConfigProvider. It demonstrates setting a nonce code for enhanced security.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/config-provider/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-config-provider :csp=\"{ nonce: 'YourNonceCode' }\">\n  <a-button>My Button</a-button>\n</a-config-provider>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Message Settings in Ant Design Vue JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure global settings for the Ant Design Vue Message component using the `message.config()` method. Key configuration options include setting the message display duration, enabling RTL mode, defining a maximum count of simultaneously displayed messages, and specifying a CSS class prefix. This configuration allows fine-tuning of message behavior and appearance according to application requirements.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/message/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmessage.config({\n  top: '100px',\n  duration: 2,\n  maxCount: 3,\n  rtl: true,\n  prefixCls: 'my-message',\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing CSS Selector Changes with and without ':where'\nDESCRIPTION: This diff snippet shows the change in CSS selector when switching from ':where' to class selector. It illustrates how the CSS priority is affected by the StyleProvider configuration.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/compatible-style.zh-CN.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--  :where(.css-bAMboO).ant-btn {\n++  .css-bAMboO.ant-btn {\n      color: #fff;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox Group Properties in Markdown\nDESCRIPTION: This snippet defines the properties for the Checkbox Group component, including disabled, name, options, and value. It specifies the type, default value, and description for each property.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/checkbox/index.zh-CN.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| disabled | 整组失效 | boolean | false |  |\n| name | CheckboxGroup 下所有 `input[type=\"checkbox\"]` 的 `name` 属性 | string | - | 1.5.0 |\n| options | 指定可选项，可以通过 slot=\"label\" slot-scope=\"option\" 定制`label` | string\\[] \\| Array&lt;{ label: string value: string disabled?: boolean, indeterminate?: boolean, onChange?: function }> | \\[] |  |\n| value(v-model) | 指定选中的选项 | (boolean \\| string \\| number)\\[] | \\[] |  |\n```\n\n----------------------------------------\n\nTITLE: Handling Calendar Panel Selection in Vue\nDESCRIPTION: This snippet shows how to handle the 'select' event of the Calendar component in Vue. It demonstrates how to differentiate between different sources of selection, specifically for date panel clicks.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/calendar/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\" setup>\n  const onSelect = (date, { source }) => {\n    if (source === 'date') {\n      console.log('Panel Select:', source);\n    }\n  };\n</script>\n<template>\n  <a-calendar @select=\"onSelect\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Modal.useModal with Context in Vue (repeated)\nDESCRIPTION: This snippet is a repetition of the previous one, illustrating the use of `Modal.useModal()` to create a modal instance with context in a Vue component. The `contextHolder` is inserted into the template, and the `modal` instance is used to create a confirmation modal. This allows the modal to access the component's context.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/modal/index.en-US.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <contextHolder />\n  <!-- <component :is='contextHolder'/> -->\n</template>\n<script setup>\n  import { Modal } from 'ant-design-vue';\n  const [modal, contextHolder] = Modal.useModal();\n\n  modal.confirm({\n    // ...\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Breakpoint Width Configuration in JavaScript for Ant Design Vue\nDESCRIPTION: Defines the width values for different breakpoints used in responsive layouts. These values are used to trigger layout changes based on screen size.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/layout/index.zh-CN.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  xs: '480px',\n  sm: '576px',\n  md: '768px',\n  lg: '992px',\n  xl: '1200px',\n  xxl: '1600px',\n  xxxl: '2000px',\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Component Props in Markdown\nDESCRIPTION: A markdown table listing and describing the various props available for the Tree component in Ant Design Vue. It includes prop names, descriptions, types, default values, and version information.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/tree/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| allowDrop | Whether to allow dropping on the node | ({ dropNode, dropPosition }) => boolean | - |  |\n| autoExpandParent | Whether to automatically expand a parent treeNode | boolean | false |  |\n| blockNode | Whether treeNode fill remaining horizontal space | boolean | false |  |\n| checkable | Adds a `Checkbox` before the treeNodes | boolean | false |  |\n| checkedKeys(v-model) | (Controlled) Specifies the keys of the checked treeNodes (PS: When this specifies the key of a treeNode which is also a parent treeNode, all the children treeNodes of will be checked; and vice versa, when it specifies the key of a treeNode which is a child treeNode, its parent treeNode will also be checked. When `checkable` and `checkStrictly` is true, its object has `checked` and `halfChecked` property. Regardless of whether the child or parent treeNode is checked, they won't impact each other. | string\\[] \\| number\\[] \\| {checked: string\\[] \\| number\\[], halfChecked: string\\[] \\| number\\[]} | \\[] |  |\n| checkStrictly | Check treeNode precisely; parent treeNode and children treeNodes are not associated | boolean | false |  |\n| defaultExpandAll | Whether to expand all treeNodes by default | boolean | false |  |\n| disabled | whether disabled the tree | bool | false |  |\n| draggable | Specifies whether this Tree is draggable (IE > 8) | boolean | false |  |\n| expandedKeys(v-model) | (Controlled) Specifies the keys of the expanded treeNodes | string\\[] \\| number\\[] | \\[] |  |\n| fieldNames | Replace the title,key and children fields in treeNode with the corresponding fields in treeData | object | { children:'children', title:'title', key:'key' } | 3.0.0 |\n| filterTreeNode | Defines a function to filter (highlight) treeNodes. When the function returns `true`, the corresponding treeNode will be highlighted | function(node) | - |  |\n| height | Config virtual scroll height. Will not support horizontal scroll when enable this | number | - |  |\n| loadData | Load data asynchronously | function(node) | - |  |\n| loadedKeys | (Controlled) Set loaded tree nodes. Need work with `loadData` | string\\[] \\| number\\[] | \\[] |  |\n| multiple | Allows selecting multiple treeNodes | boolean | false |  |\n| selectable | whether can be selected | boolean | true |  |\n| selectedKeys(v-model) | (Controlled) Specifies the keys of the selected treeNodes | string\\[] \\| number\\[] | - |  |\n| showIcon | Shows the icon before a TreeNode's title. There is no default style; you must set a custom style for it if set to `true` | boolean | false |  |\n| showLine | Shows a connecting line | boolean \\| {showLeafIcon: boolean}(3.0+) | false |  |\n| switcherIcon | customize collapse/expand icon of tree node | v-slot:switcherIcon=\"{active, checked, expanded, loading, selected, halfChecked, title, key, children, dataRef, data, defaultIcon, switcherCls}\" | - |  |\n| title | custom title | slot |  | 2.0.0 |\n| treeData | treeNode of tree, please use `treeNodes` before v1.1.4 | [TreeNode\\[\\]](#treenode) | - |  |\n| virtual | Disable virtual scroll when set to false | boolean | true | 3.0 |\n```\n\n----------------------------------------\n\nTITLE: Cascader Option Interface in Typescript\nDESCRIPTION: This TypeScript interface defines the structure of an option within the Cascader component's options array. It includes properties for value, label, disabled state, children, and whether it's a leaf node.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/cascader/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Option {\n  value: string | number;\n  label?: VNode;\n  disabled?: boolean;\n  children?: Option[];\n  // Determines if this is a leaf node(effective when `loadData` is specified).\n  // `false` will force trade TreeNode as a parent node.\n  // Show expand icon even if the current node has no children.\n  isLeaf?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Cascader Option\nDESCRIPTION: Defines the TypeScript interface for a Cascader option. It specifies the structure of each option in the hierarchical data, including properties like value, label, disabled status, and children.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/cascader/index.zh-CN.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Option {\n  value: string | number;\n  label?: any;\n  disabled?: boolean;\n  children?: Option[];\n  // 标记是否为叶子节点，设置了 `loadData` 时有效\n  // 设为 `false` 时会强制标记为父节点，即使当前节点没有 children，也会显示展开图标\n  isLeaf?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Form Item Rest Component - HTML\nDESCRIPTION: Example using Form.Item.Rest component to prevent data collection for specific form elements.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/form/index.en-US.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<a-form-item>\n  <a-input name=\"a\"></a-input>\n  <a-form-item-rest><a-input name=\"b\"></a-input></a-form-item-rest>\n</a-form-item>\n```\n\n----------------------------------------\n\nTITLE: Defining DirectoryTree Props in Markdown\nDESCRIPTION: A markdown table listing and describing the props available for the DirectoryTree sub-component in Ant Design Vue. It includes prop names, descriptions, types, and default values.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/tree/index.en-US.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Property     | Description                                                   | Type   | Default |\n| ------------ | ------------------------------------------------------------- | ------ | ------- |\n| expandAction | Directory open logic, optional `false` `'click'` `'dblclick'` | string | click   |\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Component Events in Markdown\nDESCRIPTION: A markdown table listing and describing the various events available for the Tree component in Ant Design Vue. It includes event names, descriptions, and the arguments passed to the event handlers.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/tree/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Events Name | Description | Arguments |\n| --- | --- | --- |\n| check | Callback function for when the onCheck event occurs | function(checkedKeys, e:{checked: bool, checkedNodes, node, event}) |\n| dragend | Callback function for when the onDragEnd event occurs | function({event, node}) |\n| dragenter | Callback function for when the onDragEnter event occurs | function({event, node, expandedKeys}) |\n| dragleave | Callback function for when the onDragLeave event occurs | function({event, node}) |\n| dragover | Callback function for when the onDragOver event occurs | function({event, node}) |\n| dragstart | Callback function for when the onDragStart event occurs | function({event, node}) |\n| drop | Callback function for when the onDrop event occurs | function({event, node, dragNode, dragNodesKeys}) |\n| expand | Callback function for when a treeNode is expanded or collapsed | function(expandedKeys, {expanded: bool, node}) |\n| load | Callback function for when a treeNode is loaded | function(loadedKeys, {event, node}) |\n| rightClick | Callback function for when the user right clicks a treeNode | function({event, node}) |\n| select | Callback function for when the user clicks a treeNode | function(selectedKeys, e:{selected: bool, selectedNodes, node, event}) |\n```\n\n----------------------------------------\n\nTITLE: Defining FormatType for Date Formatting in TypeScript\nDESCRIPTION: This TypeScript code defines a `FormatType` which can be a string, a function that takes a Dayjs object and returns a string, or an array of either. It's used to define the format of the date displayed in the DatePicker component.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/date-picker/index.en-US.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Dayjs } from 'dayjs';\n\ntype Generic = string;\ntype GenericFn = (value: Dayjs) => string;\n\nexport type FormatType = Generic | GenericFn | Array<Generic | GenericFn>;\n```\n\n----------------------------------------\n\nTITLE: Updating Component Popup Class Name in Vue Templates\nDESCRIPTION: Example showing how to migrate from legacy 'dropdownClassName' API to the unified 'popupClassName' API for Select components in Vue templates.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/migration-v4.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n<template>\n  <a-select\n--  dropdownClassName=\"my-select-popup\"\n++  popupClassName=\"my-select-popup\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Divider Component API Properties Table\nDESCRIPTION: Markdown table defining the API properties for the Divider component, including property names, descriptions, types, default values, and version information.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/divider/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| dashed | whether line is dashed | boolean | false |  |\n| orientation | position of title inside divider | `left` \\| `right` \\| `center` | `center` |  |\n| orientationMargin | The margin-left/right between the title and its closest border, while the `orientation` must be `left` or `right` | string \\| number | - | 3.0 |\n| plain | Divider text show as plain style | boolean | true | 2.2.0 |\n| type | direction type of divider | `horizontal` \\| `vertical` | `horizontal` |  |\n```\n\n----------------------------------------\n\nTITLE: Result Component API Properties\nDESCRIPTION: Defines the configuration options for the Result component, including status, title, subtitle, icon, and extra content areas\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/result/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ResultProps {\n  status?: 'success' | 'error' | 'info' | 'warning' | '404' | '403' | '500'\n  title?: string | VNode\n  subTitle?: string | VNode\n  icon?: VNode\n  extra?: VNode\n}\n```\n\n----------------------------------------\n\nTITLE: Including dayjs dependencies in browser\nDESCRIPTION: HTML snippet showing how to include dayjs and its required plugins via CDN before using Ant Design Vue in a browser environment. These are prerequisites for date-related components.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/introduce.en-US.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/dayjs/dayjs.min.js\"></script>\n<script src=\"https://unpkg.com/dayjs/plugin/customParseFormat.js\"></script>\n<script src=\"https://unpkg.com/dayjs/plugin/weekday.js\"></script>\n<script src=\"https://unpkg.com/dayjs/plugin/localeData.js\"></script>\n<script src=\"https://unpkg.com/dayjs/plugin/weekOfYear.js\"></script>\n<script src=\"https://unpkg.com/dayjs/plugin/weekYear.js\"></script>\n<script src=\"https://unpkg.com/dayjs/plugin/advancedFormat.js\"></script>\n<script src=\"https://unpkg.com/dayjs/plugin/quarterOfYear.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining Alert Component Events in Markdown\nDESCRIPTION: This code snippet defines the events for the Alert component, including the event name, description, arguments, and version information.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/alert/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Events Name | Description                   | Arguments               | Version |\n| ----------- | ----------------------------- | ----------------------- | ------- |\n| close       | Callback when Alert is closed | (e: MouseEvent) => void | -       |\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Theme Algorithms in Ant Design Vue\nDESCRIPTION: This snippet demonstrates how to combine multiple theme algorithms to create a composite theme, such as a dark and compact theme using the algorithm property.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/customize-theme.en-US.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { theme } from 'ant-design-vue';\n\nconst { darkAlgorithm, compactAlgorithm } = theme;\n\nconst theme = {\n  algorithm: [darkAlgorithm, compactAlgorithm],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TreeNode Props in Markdown\nDESCRIPTION: A markdown table listing and describing the various props available for the TreeNode sub-component in Ant Design Vue. It includes prop names, descriptions, types, default values, and version information.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/tree/index.en-US.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| checkable | When Tree is checkable, set TreeNode display Checkbox or not | boolean | - |  |\n| class | className | string | - |  |\n| disableCheckbox | Disables the checkbox of the treeNode | boolean | false |  |\n| disabled | Disables the treeNode | boolean | false |  |\n| icon | customize icon. When you pass component, whose render will receive full TreeNode props as component props | slot\\|slot-scope | - |  |\n| isLeaf | Determines if this is a leaf node(effective when `loadData` is specified) | boolean | - |  |\n| key | Used with (default)ExpandedKeys / (default)CheckedKeys / (default)SelectedKeys. P.S.: It must be unique in all of treeNodes of the tree! | string \\| number | internal calculated position of treeNode |  |\n| selectable | Set whether the treeNode can be selected | boolean | true |  |\n| style | style | string\\|object | - |  |\n| title | Title | string | '---' |  |\n```\n\n----------------------------------------\n\nTITLE: Upload Change Event Response Structure in JSX\nDESCRIPTION: Structure of the response object returned by the upload change event, showing file details, file list, and event information.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/upload/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  file: { /* ... */ },\n  fileList: [ /* ... */ ],\n  event: { /* ... */ },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Route Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface for the Route object used in the Breadcrumb component. It specifies the structure of route items including path, breadcrumbName, and optional children.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/breadcrumb/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Route {\n  path: string;\n  breadcrumbName: string;\n  children?: Array<{\n    path: string;\n    breadcrumbName: string;\n  }>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Drawer Component Events in Markdown\nDESCRIPTION: This code snippet defines the events available for the Drawer component in a markdown table format. It includes event names, descriptions, types, default values, and version information.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/drawer/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Events Name | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| afterOpenChange | Callback after the animation ends when switching drawers. | function(open) | - | 4.0 |\n| close | Specify a callback that will be called when a user clicks mask, close button or Cancel button. | function(e) | - |  |\n```\n\n----------------------------------------\n\nTITLE: Embedded Usage of App Component in Vue 3\nDESCRIPTION: Shows how to nest App components within each other, although this is not recommended unless necessary.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/app/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-app>\n  <a-space>\n    ...\n    <a-app>...</a-app>\n  </a-space>\n</a-app>\n```\n\n----------------------------------------\n\nTITLE: Solution 3: Using Form-Item-Rest Component in HTML\nDESCRIPTION: Using the a-form-item-rest component to prevent data collection for certain form elements without generating additional DOM nodes.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/migration-v3.en-US.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<a-form-item>\n  <a-input name=\"a\"></a-input>\n  <a-form-item-rest><a-input name=\"b\"></a-input></a-form-item-rest>\n</a-form-item>\n```\n\n----------------------------------------\n\nTITLE: AutoComplete Data Source Configuration - V2 TypeScript\nDESCRIPTION: Example showing how to configure data source in version 2 of the component\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/auto-complete/index.zh-CN.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndataSource = ['light', 'bamboo'];\n// or\ndataSource = [\n  { value: 'light', text: 'Light' },\n  { value: 'bamboo', text: 'Bamboo' },\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default Spin Indicator with Vue\nDESCRIPTION: Configures a global default spin indicator using Vue's h() function to create a custom loading icon with predefined CSS classes\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/spin/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nSpin.setDefaultIndicator({\n  indicator: h('i', { class: 'anticon anticon-loading anticon-spin ant-spin-dot' }),\n});\n```\n\n----------------------------------------\n\nTITLE: Transfer Render Props Structure\nDESCRIPTION: JSON structure showing the props passed to children when using render props with the Transfer component. These props provide access to internal state and functions.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/transfer/index.en-US.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"direction\": String,\n  \"disabled\": Boolean,\n  \"filteredItems\": Array,\n  \"selectedKeys\": Array,\n  \"onItemSelect\": Function,\n  \"onItemSelectAll\": Function\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Drawer Component Props in Markdown\nDESCRIPTION: This code snippet defines the props available for the Drawer component in a markdown table format. It includes prop names, descriptions, types, default values, and version information.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/drawer/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Props | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| autofocus | Whether Drawer should get focused after open | boolean | true | 3.0.0 |\n| bodyStyle | Style of the drawer content part | CSSProperties | - |  |\n| class | Config Drawer Panel className. Use `rootClassName` if want to config top dom style | string | - |  |\n| closable | Whether a close (x) button is visible on top left of the Drawer dialog or not | boolean | true |  |\n| closeIcon | Custom close icon | VNode \\| slot | `<CloseOutlined />` | 3.0.0 |\n| contentWrapperStyle | Style of the drawer wrapper of content part | CSSProperties | - | 3.0.0 |\n| destroyOnClose | Whether to unmount child components on closing drawer or not | boolean | false |  |\n| extra | Extra actions area at corner | VNode \\| slot | - | 3.0.0 |\n| footer | The footer for Drawer | VNode \\| slot | - | 3.0.0 |\n| footerStyle | Style of the drawer footer part | CSSProperties | - | 3.0.0 |\n| forceRender | Prerender Drawer component forcely | boolean | false | 3.0.0 |\n| getContainer | mounted node and display window for Drawer | HTMLElement \\| `() => HTMLElement` \\| Selectors | 'body' |  |\n| headerStyle | Style of the drawer header part | CSSProperties | - | 3.0.0 |\n| height | Placement is `top` or `bottom`, height of the Drawer dialog | string \\| number | 378 |  |\n| keyboard | Whether support press esc to close | boolean | true |  |\n| mask | Whether to show mask or not | Boolean | true |  |\n| maskClosable | Clicking on the mask (area outside the Drawer) to close the Drawer or not | boolean | true |  |\n| maskStyle | Style for Drawer's mask element | CSSProperties | {} |  |\n| placement | The placement of the Drawer | 'top' \\| 'right' \\| 'bottom' \\| 'left' | 'right' |  |\n| push | Nested drawers push behavior | boolean \\| {distance: string \\| number} | { distance: 180 } | 3.0.0 |\n| rootClassName | The class name of the container of the Drawer dialog | string | - | 4.0 |\n| rootStyle | Style of wrapper element which **contains mask** compare to `style` | CSSProperties | - | 4.0 |\n| style | Style of Drawer panel. Use `bodyStyle` if want to config body only | CSSProperties | - |  |\n| size | presetted size of drawer, default `378px` and large `736px` | `default` \\| `large` | `default` | 3.0.0 |\n| style | Style of wrapper element which contains mask compare to drawerStyle | CSSProperties | - |  |\n| title | The title for Drawer | string \\| slot | - |  |\n| open(v-model) | Whether the Drawer dialog is visible or not | boolean | - | 4.0 |\n| width | Width of the Drawer dialog | string \\| number | 378 |  |\n| zIndex | The `z-index` of the Drawer | Number | 1000 |  |\n```\n\n----------------------------------------\n\nTITLE: Defining Anchor Events in Markdown\nDESCRIPTION: This snippet lists the events that can be triggered by the Anchor component, including their descriptions, arguments, and version information.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/anchor/index.en-US.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Events Name | Description | Arguments | Version |  |\n| --- | --- | --- | --- | --- |\n| change | Listening for anchor link change | (currentActiveLink: string) => void |  | 1.5.0 |\n| click | set the handler to handle `click` event | Function(e: MouseEvent, link: Object) |  |  |\n```\n\n----------------------------------------\n\nTITLE: Using Standalone Badge in Vue\nDESCRIPTION: This example shows how to use the Badge component as a standalone element without wrapping any content. It displays a badge with a count of 5.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/badge/index.en_US.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a-badge :count=\"5\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Preview Type Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the preview configuration object. Specifies properties for controlling image preview visibility, container, source, styling and navigation.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/image/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  visible?: boolean;\n  onVisibleChange?: (visible, prevVisible) => void;\n  getContainer?: string | HTMLElement | (() => HTMLElement);\n  src?: string;\n  maskClassName?: string;\n  current?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Descriptions Item Props Table - Markdown\nDESCRIPTION: API table documenting the properties available for individual Description items, including property names, descriptions, types, default values and version information.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/descriptions/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| contentStyle | Customize content style | CSSProperties | - | 2.2.0 |\n| label | description of the content | string \\| VNode \\| slot | - | |\n| labelStyle | Customize label style | CSSProperties | - | 2.2.0 |\n| span | The number of columns included | number | 1 |\n```\n\n----------------------------------------\n\nTITLE: Importing Ant Design Vue stylesheets\nDESCRIPTION: JSX code example showing how to manually import the required CSS stylesheets for Ant Design Vue components. This step is necessary for proper styling of components.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/introduce.en-US.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport 'ant-design-vue/dist/reset.css';\n```\n\n----------------------------------------\n\nTITLE: FloatButton Events Table in Markdown\nDESCRIPTION: Markdown table showing the available events for the FloatButton component, specifically the click event handler.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/float-button/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Events Name | Description                             | Arguments         | Version |\n| ----------- | --------------------------------------- | ----------------- | ------- |\n| click       | Set the handler to handle `click` event | `(event) => void` | -       |\n```\n\n----------------------------------------\n\nTITLE: RadioGroup Component Configuration\nDESCRIPTION: Provides configuration options for grouping radio buttons, including button style, disabled state, naming, and option types\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/radio/index.zh-CN.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  buttonStyle: 'outline' | 'solid' = 'outline',\n  disabled: boolean = false,\n  name: string,\n  options: string[] | number[] | { label: string, value: string, disabled?: boolean }[],\n  optionType: 'default' | 'button' = 'default',\n  size: 'large' | 'default' | 'small' = 'default',\n  value: any\n}\n```\n\n----------------------------------------\n\nTITLE: Radio Component API Props\nDESCRIPTION: Defines the core properties for the Radio component, including autofocus, checked state, disabled mode, and value comparison\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/radio/index.zh-CN.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  autofocus: boolean = false,\n  checked: boolean = false,\n  disabled: boolean = false,\n  value: any\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Carousel Methods in Markdown\nDESCRIPTION: This code snippet defines the methods available for the Carousel component in a markdown table format. It includes methods like goTo, next, and prev, along with their descriptions and version information.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/carousel/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Description | Version |\n| --- | --- | --- |\n| goTo(slideNumber, dontAnimate) | Go to slide index, if dontAnimate=true, it happens without animation |  |\n| next() | Change current slide to next slide |  |\n| prev() | Change current slide to previous slide |  |\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox Properties in Markdown\nDESCRIPTION: This snippet defines the properties for the Checkbox component, including autofocus, checked, disabled, indeterminate, and value. It specifies the type, default value, and description for each property.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/checkbox/index.zh-CN.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autofocus | 自动获取焦点 | boolean | false |  |\n| checked(v-model) | 指定当前是否选中 | boolean | false |  |\n| disabled | 失效状态 | boolean | false |  |\n| indeterminate | 设置 indeterminate 状态，只负责样式控制 | boolean | false |  |\n| value | 与 CheckboxGroup 组合使用时的值 | boolean \\| string \\| number | - |  |\n```\n\n----------------------------------------\n\nTITLE: Handling Date Selection with Source Information\nDESCRIPTION: Demonstrates how to filter and handle date selection events based on source type\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/calendar/index.zh-CN.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\" setup>\n  const onSelect = (date, { source }) => {\n    if (source === 'date') {\n      console.log('Panel Select:', source);\n    }\n  };\n</script>\n<template>\n  <a-calendar @select=\"onSelect\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Form Validation with Callback in Ant Design Vue 1.x\nDESCRIPTION: Shows the old way of validating forms using callbacks in Ant Design Vue 1.x, which checks for errors before processing form values.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/migration-v2.en-US.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// v1\nvalidateFields((err, value) => {\n  if (!err) {\n    // Do something with value\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Breakpoint Type in TypeScript for Table Column Responsiveness\nDESCRIPTION: TypeScript type definition for Breakpoint, used to control column visibility at different screen sizes in Ant Design Vue tables.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/table/index.en-US.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Breakpoint = 'xxxl' | 'xxl' | 'xl' | 'lg' | 'md' | 'sm' | 'xs';\n```\n\n----------------------------------------\n\nTITLE: Defining FilterDropdownProps Interface for Table Column Filters\nDESCRIPTION: TypeScript interface definitions for filter dropdown properties, used to customize table column filters in Ant Design Vue. Includes related interfaces for filter confirmation and reset operations.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/table/index.en-US.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FilterDropdownProps {\n  prefixCls: string;\n  setSelectedKeys: (selectedKeys: Key[]) => void;\n  selectedKeys: Key[];\n  confirm: (param?: FilterConfirmProps) => void;\n  clearFilters?: (param?: FilterResetProps) => void;\n  filters?: ColumnFilterItem[];\n  visible: boolean;\n  column: ColumnType;\n}\n\ninterface FilterConfirmProps {\n  closeDropdown: boolean;\n}\n\ninterface FilterResetProps {\n  confirm?: boolean;\n  closeDropdown?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Avatar.Group API Properties in Markdown\nDESCRIPTION: A markdown table listing the API properties for the Avatar.Group component, including their descriptions, types, default values, and version information.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/avatar/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| maxCount | Max avatars to show | number | - |  |\n| maxPopoverPlacement | The placement of excess avatar Popover | `top` \\| `bottom` | `top` |  |\n| maxPopoverTrigger | Set the trigger of excess avatar Popover | `hover` \\| `focus` \\| `click` | `hover` | 3.0 |\n| maxStyle | The style of excess avatar style | CSSProperties | - |  |\n| size | The size of the avatar | number \\| `large` \\| `small` \\| `default` \\| { xs: number, sm: number, ...} | `default` |  |\n| shape | The shape of the avatar | `circle` \\| `square` | `circle` | 4.0 |\n```\n\n----------------------------------------\n\nTITLE: Rendering Design Resources Grid in HTML\nDESCRIPTION: HTML markup for displaying a grid of design resource cards, each containing an icon, title, and description. The cards link to various Ant Design resources including Sketch symbols, Ant Design Pro, Axure library, and design tools.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/download.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"resource-cards\">\n  <a target=\"_blank\" href=\"https://github.com/ant-design/ant-design/releases/download/resource/Ant.Design.Components.3.12.0.sketch\" class=\"resource-card\">\n    <div class=\"resource-card-icon\">\n      <img width=\"65\" src=\"https://gw.alipayobjects.com/zos/rmsportal/pKfDZnzocrbAOSzDQOQq.png\" />\n    </div>\n    <div class=\"resource-card-content\">\n      <span class=\"resource-card-title\">\n        RENEW Sketch Symbols\n      </span>\n      <span class=\"resource-card-description\">Sketch Symbols for Desktop</span>\n    </div>\n  </a>\n  <!-- Additional resource cards... -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting TwoTone Color for Icons\nDESCRIPTION: Example of using static methods getTwoToneColor() and setTwoToneColor() to specify the primary color for two-tone icons.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/icon/index.en-US.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getTwoToneColor, setTwoToneColor } from '@ant-design/icons';\n\nsetTwoToneColor('#eb2f96');\ngetTwoToneColor(); // #eb2f96\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Icons for Vue\nDESCRIPTION: Command to install the @ant-design/icons-vue package using npm, which is required before using icons in your project.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/icon/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @ant-design/icons-vue\n```\n\n----------------------------------------\n\nTITLE: Default Vue CLI project structure\nDESCRIPTION: The default directory structure of a Vue project created with Vue CLI, showing the organization of files and folders.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/use-with-vue-cli.en-US.md#2025-04-21_snippet_3\n\nLANGUAGE: null\nCODE:\n```\n├── README.md\n├── babel.config\n├── package.json\n├── public\n│   ├── favicon.ico\n│   └── index.html\n├── src\n│   ├── assets\n│   │   └── logo.png\n│   ├── components\n│   │   └── HelloWorld.vue\n│   ├── App.vue\n│   └── main.js\n└── yarn.lock\n```\n\n----------------------------------------\n\nTITLE: Basic Grid Image Example - HTML\nDESCRIPTION: HTML code showing the grid design concept with an image illustration.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/grid/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grid-demo\">\n  <img src=\"https://gw.alipayobjects.com/zos/bmw-prod/9189c9ef-c601-40dc-9960-c11dbb681888.svg\" alt=\"grid design\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: RangePicker with Month Mode in Vue\nDESCRIPTION: Code example showing how to set the RangePicker component to month mode. Note that this only changes the display panel and not the interaction behavior.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/faq.zh-CN.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<RangePicker mode=\"month\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Row Key in Transfer Component with JSX\nDESCRIPTION: Example of specifying a custom row key for the Transfer component using JSX syntax. This is necessary when your data doesn't have a 'key' property to serve as a unique identifier.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/transfer/index.zh-CN.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// 比如你的数据主键是 uid\nreturn <Transfer :rowKey=\"record => record.uid\" />;\n```\n\n----------------------------------------\n\nTITLE: Transfer Component Render Props Interface\nDESCRIPTION: JSON structure showing the parameters passed to child components when using the render props pattern with the Transfer component. Includes direction, disabled state, filtered items, selection states, and functions.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/transfer/index.zh-CN.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"direction\": String,\n  \"disabled\": Boolean,\n  \"filteredItems\": Array,\n  \"selectedKeys\": Array,\n  \"onItemSelect\": Function,\n  \"onItemSelectAll\": Function\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Form Inputs Example - HTML\nDESCRIPTION: Example showing incorrect usage of multiple form inputs within a single Form.Item component.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/form/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a-form-item>\n  <a-input name=\"a\"></a-input>\n  <a-input name=\"b\"></a-input>\n</a-form-item>\n```\n\n----------------------------------------\n\nTITLE: DatePicker with Year Mode in Vue\nDESCRIPTION: Code example showing how to set the DatePicker component to year mode. Note that this only changes the display panel and not the interaction behavior.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/faq.zh-CN.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DatePicker mode=\"year\" />\n```\n\n----------------------------------------\n\nTITLE: Defining SegmentedBaseOption Interface in TypeScript\nDESCRIPTION: This TypeScript interface outlines the properties associated with each segment option in the segmented control. It includes optional properties such as 'disabled', 'payload', and 'title' to enhance functionality and user interface customization.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/segmented/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SegmentedBaseOption {\n  value: string | number;\n  disabled?: boolean;\n  payload?: any; // payload more data\n  /**\n   * html `title` property for label\n   */\n  title?: string;\n  className?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SegmentedOption Interface in TypeScript\nDESCRIPTION: This TypeScript interface extends the SegmentedBaseOption to include an optional 'label' property, which allows for custom labeling of the segmented options. The label can be a VueNode or a function that provides a VueNode based on the option.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/segmented/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SegmentedOption extends SegmentedBaseOption {\n  label?: VueNode | ((option: SegmentedBaseOption) => VueNode);\n}\n```\n\n----------------------------------------\n\nTITLE: Vue CLI default project structure\nDESCRIPTION: The default directory structure of a Vue CLI generated project, showing the file organization.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/use-with-vue-cli.zh-CN.md#2025-04-21_snippet_3\n\nLANGUAGE: null\nCODE:\n```\n├── README.md\n├── babel.config\n├── package.json\n├── public\n│   ├── favicon.ico\n│   └── index.html\n├── src\n│   ├── assets\n│   │   └── logo.png\n│   ├── components\n│   │   └── HelloWorld.vue\n│   ├── App.vue\n│   └── main.js\n└── yarn.lock\n```\n\n----------------------------------------\n\nTITLE: Using getPopupContainer for Select Component in Vue\nDESCRIPTION: Code example showing how to use the getPopupContainer property to render a Select dropdown within its parent node, preventing it from disappearing when interacting with other popup components.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/faq.zh-CN.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<a-select :getPopupContainer=\"trigger => trigger.parentNode\">\n```\n\n----------------------------------------\n\nTITLE: FloatButton.Group API Table in Markdown\nDESCRIPTION: Markdown table documenting the API properties specific to the FloatButton.Group component including shape, trigger, and open properties.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/float-button/index.en-US.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| shape | Setting button shape of children | `circle` \\| `square` | `circle` |  |\n| trigger | Which action can trigger menu open/close | `click` \\| `hover` | - |  |\n| open(v-model) | Whether the menu is visible or not | boolean | - |  |\n```\n\n----------------------------------------\n\nTITLE: Comment Component API Properties Table\nDESCRIPTION: API table showing the available properties for the Comment component, including actions, author, avatar, content, and datetime fields. Each property can accept either string values or custom slots.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/comment/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| actions | List of action items rendered below the comment content | Array \\| slot | - |\n| author | The element to display as the comment author | string\\|slot | - |\n| avatar | The element to display as the comment avatar - generally an antd `Avatar` or src | string\\|slot | - |\n| content | The main content of the comment | string\\|slot | - |\n| datetime | A datetime element containing the time to be displayed | string\\|slot | - |\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Vue\nDESCRIPTION: Command to add ant-design-vue package to the project using yarn.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/use-with-vue-cli.zh-CN.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add ant-design-vue\n```\n\n----------------------------------------\n\nTITLE: Static Consumption of Design Tokens in JavaScript\nDESCRIPTION: This snippet shows how to access Design Tokens outside of Vue's lifecycle using static functions. It retrieves default token values that can be used in non-Vue contexts.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/customize-theme.en-US.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { theme } from 'ant-design-vue';\n\nconst { defaultAlgorithm, defaultSeed } = theme;\n\nconst mapToken = defaultAlgorithm(defaultSeed);\n```\n\n----------------------------------------\n\nTITLE: Button Events Table in Markdown\nDESCRIPTION: Table showing available events for the Button component.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/button/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Events Name | Description | Arguments | Version |\n| ----------- | ----------- | --------- | ------- |\n| click | set the handler to handle `click` event | (event) => void | |\n```\n\n----------------------------------------\n\nTITLE: Starting the Vue development server\nDESCRIPTION: Commands to navigate to the project directory and start the Vue development server.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/use-with-vue-cli.zh-CN.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd antd-demo\n$ npm run serve\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Vue dependency\nDESCRIPTION: Command to add the Ant Design Vue library as a dependency in your Vue project using yarn.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/use-with-vue-cli.en-US.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add ant-design-vue\n```\n\n----------------------------------------\n\nTITLE: Multi-Theme Style Extraction Configuration\nDESCRIPTION: Illustrates how to extract styles for multiple themes using ConfigProvider. Allows developers to implement hybrid theme requirements by applying different theme configurations to the same component set.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/extract-ssr.en-US.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// `node` is the components set we prepared\nconst css = extractStyle(node => (\n  <>\n    <ConfigProvider theme={theme1}>{node}</ConfigProvider>\n    <ConfigProvider theme={theme2}>{node}</ConfigProvider>\n    <ConfigProvider theme={theme3}>{node}</ConfigProvider>\n  </>\n));\n```\n\n----------------------------------------\n\nTITLE: Data Source Migration V2 - TypeScript\nDESCRIPTION: Example showing the old dataSource format in v2 of the component.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/auto-complete/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndataSource = ['light', 'bamboo'];\n// or\ndataSource = [\n  { value: 'light', text: 'Light' },\n  { value: 'bamboo', text: 'Bamboo' },\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a new Vue project with Vue CLI\nDESCRIPTION: Command to create a new Vue project named 'antd-demo' using Vue CLI.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/use-with-vue-cli.zh-CN.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ vue create antd-demo\n```\n\n----------------------------------------\n\nTITLE: Removing babel-plugin-import Configuration\nDESCRIPTION: Diff showing how to remove the babel-plugin-import configuration from .babelrc, as it's no longer required with Ant Design Vue v4's CSS-in-JS approach.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/migration-v4.en-US.md#2025-04-21_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n\"plugins\": [\n-- [\"import\", { \"libraryName\": \"ant-design-vue\", \"libraryDirectory\": \"lib\"}, \"ant-design-vue\"],\n]\n```\n\n----------------------------------------\n\nTITLE: Font Properties Table\nDESCRIPTION: Markdown table documenting the font-related properties for the Watermark component, including color, size, weight, family, and style options.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/watermark/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| color | font color | string | rgba(0,0,0,.15) |  |\n| fontSize | font size | number | 16 |  |\n| fontWeight | font weight | `normal` \\| `light` \\| `weight` \\| number | normal |  |\n| fontFamily | font family | string | sans-serif |  |\n| fontStyle | font style  | `none` \\| `normal` \\| `italic` \\| `oblique` | normal |  |\n```\n\n----------------------------------------\n\nTITLE: AutoComplete Options Configuration - V3 TypeScript\nDESCRIPTION: Example showing how to configure options in version 3 of the component\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/auto-complete/index.zh-CN.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptions = [\n  { value: 'light', label: 'Light' },\n  { value: 'bamboo', label: 'Bamboo' },\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Vue CLI using npm or yarn\nDESCRIPTION: Commands to globally install Vue CLI using either npm or yarn package managers.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/use-with-vue-cli.zh-CN.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g @vue/cli\n# OR\n$ yarn global add @vue/cli\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Vue v4\nDESCRIPTION: Bash command to install the latest version of Ant Design Vue v4 as a dependency in your project.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/migration-v4.en-US.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save ant-design-vue@4\n```\n\n----------------------------------------\n\nTITLE: Checkbox Methods Table in Markdown\nDESCRIPTION: Table showing available methods for the Checkbox component.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/button/index.en-US.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Description | Version |\n| ------- | ------------ | ------- |\n| blur() | remove focus | |\n| focus() | get focus | |\n```\n\n----------------------------------------\n\nTITLE: Defining AnchorItem Properties in Markdown\nDESCRIPTION: This snippet describes the properties of the AnchorItem subcomponent, including their descriptions, types, and default values.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/anchor/index.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| key | The unique identifier of the Anchor Link | string \\| number | - |  |\n| href | The target of hyperlink | string |  |  |\n| target | Specifies where to display the linked URL | string |  |  |\n| title | The content of hyperlink | VueNode \\| (item: AnchorItem) => VueNode |  |  |\n| children | Nested Anchor Link, `Attention: This attribute does not support horizontal orientation` | [AnchorItem](#anchoritem)\\[] | - |  |\n```\n\n----------------------------------------\n\nTITLE: FloatButton.Group Events Table in Markdown\nDESCRIPTION: Markdown table showing the events available for FloatButton.Group component, specifically the openChange event.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/float-button/index.en-US.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Events Name | Description                                   | Arguments               | Version |\n| ----------- | --------------------------------------------- | ----------------------- | ------- |\n| openChange  | Callback executed when active menu is changed | (open: boolean) => void | -       |\n```\n\n----------------------------------------\n\nTITLE: Form Item with Multiple Inputs Example in HTML\nDESCRIPTION: An example of a Form.Item containing multiple input elements, which causes collection confusion since Form.Item doesn't know which input to collect.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/migration-v3.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-form-item>\n  <a-input name=\"a\"></a-input>\n  <a-input name=\"b\"></a-input>\n</a-form-item>\n```\n\n----------------------------------------\n\nTITLE: Options Format V3 - TypeScript\nDESCRIPTION: Example showing the new options format in v3 of the component, replacing the old dataSource prop.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/auto-complete/index.en-US.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptions = [\n  { value: 'light', label: 'Light' },\n  { value: 'bamboo', label: 'Bamboo' },\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Link Props in Markdown\nDESCRIPTION: This snippet describes the properties of the Link subcomponent, including their descriptions, types, default values, and version information.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/anchor/index.en-US.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description                               | Type         | Default | Version |\n| -------- | ----------------------------------------- | ------------ | ------- | ------- |\n| href     | target of hyperlink                       | string       |         |         |\n| target   | Specifies where to display the linked URL | string       |         | 1.5.0   |\n| title    | content of hyperlink                      | string\\|slot |         |         |\n```\n\n----------------------------------------\n\nTITLE: FloatButton.BackTop API Table in Markdown\nDESCRIPTION: Markdown table documenting the API properties specific to the FloatButton.BackTop component including duration, target, and visibilityHeight properties.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/float-button/index.en-US.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| duration | Time to return to top（ms） | number | 450 |  |\n| target | Specifies the scrollable area dom node | () => HTMLElement | () => window |  |\n| visibilityHeight | The BackTop button will not show until the scroll height reaches this value | number | 400 |  |\n```\n\n----------------------------------------\n\nTITLE: Installing Vue CLI globally with npm or yarn\nDESCRIPTION: Command to install Vue CLI globally using either npm or yarn package managers. This is a prerequisite before creating a new Vue project.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/use-with-vue-cli.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g @vue/cli\n# OR\n$ yarn global add @vue/cli\n```\n\n----------------------------------------\n\nTITLE: Configuring StyleProvider with Legacy Logical Properties Transformer in Vue\nDESCRIPTION: This snippet shows how to use StyleProvider with a transformer to convert CSS logical properties to traditional properties. This is useful for compatibility with older browsers that don't support CSS logical properties.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/compatible-style.zh-CN.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <a-style-provider :transformers=\"[legacyLogicalPropertiesTransformer]\">\n    <MyApp />\n  </a-style-provider>\n</template>\n\n<script lang=\"ts\" setup>\n  import { legacyLogicalPropertiesTransformer } from 'ant-design-vue';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Vue\nDESCRIPTION: Command to install Ant Design Vue version 4.x using npm.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/getting-started.en-US.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save ant-design-vue@4.x\n```\n\n----------------------------------------\n\nTITLE: Updating Select Component API in Vue\nDESCRIPTION: This snippet demonstrates the change in the API for the Select component, replacing 'dropdownClassName' with 'popupClassName'.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/migration-v4.zh-CN.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <a-select\n--  dropdownClassName=\"my-select-popup\"\n++  popupClassName=\"my-select-popup\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a new Vue project with Vue CLI\nDESCRIPTION: Command to create a new Vue.js project named 'antd-demo' using Vue CLI.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/use-with-vue-cli.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ vue create antd-demo\n```\n\n----------------------------------------\n\nTITLE: Rsbuild Configuration for SVG Icons\nDESCRIPTION: Configuration for Rsbuild to use the custom SVG loader and set up SVG handling in the build process.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/icon/index.en-US.md#2025-04-21_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n// rsbuild.config.ts\n/* eslint-disable */\nimport { defineConfig } from '@rsbuild/core';\nimport { pluginVue } from '@rsbuild/plugin-vue';\n\nexport default defineConfig({\n  tools: {\n    bundlerChain(chain, { CHAIN_ID }) {\n      chain.module.rule(CHAIN_ID.RULE.SVG).exclude.add(/\\.svg$/);\n    },\n    rspack: {\n      module: {\n        rules: [\n          {\n            test: /\\.svg$/,\n            use: ['vue-loader', 'vue-svg-loader'],\n          },\n        ],\n      },\n      resolveLoader: {\n        alias: {\n          'vue-svg-loader': require('path').join(__dirname, './vue-svg-loader.js'),\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Logical Properties Support with StyleProvider\nDESCRIPTION: This snippet demonstrates how to use the StyleProvider component with the legacyLogicalPropertiesTransformer to ensure compatibility with browsers that don't support CSS logical properties. This is important for maintaining RTL and LTR layout consistency.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/compatible-style.en-US.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n// `transformers` provides a way to transform CSS properties\n<template>\n  <a-style-provider :transformers=\"[legacyLogicalPropertiesTransformer]\">\n    <MyApp />\n  </a-style-provider>\n</template>\n\n<script lang=\"ts\" setup>\n  import { legacyLogicalPropertiesTransformer } from 'ant-design-vue';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Vue 4.x via npm\nDESCRIPTION: This bash command installs the latest 4.x version of Ant Design Vue using npm.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/migration-v4.zh-CN.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save ant-design-vue@4.x\n```\n\n----------------------------------------\n\nTITLE: Updating Modal and Tag Components API in Vue\nDESCRIPTION: This snippet shows the changes in the API for Modal and Tag components, replacing 'visible' with 'open' for Modal and removing 'visible' for Tag.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/migration-v4.zh-CN.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n-- <a-modal :visible=\"visible\">content</a-modal>\n++ <a-modal :open=\"visible\">content</a-modal>\n\n-- <a-tag :visible=\"visible\">tag</a-tag>\n++ <a-tag v-if=\"visible\">tag</a-tag>\n\n  <a-table\n    :data=\"[]\"\n    :columns=\"[\n      {\n        title: 'Name',\n        dataIndex: 'name',\n--      filterDropdownVisible: visible,\n++      filterDropdownOpen: visible,\n      },\n    ]\"\n  />\n\n-- <a-slider :tooltipVisible=\"visible\" />\n++ <a-slider :tooltip=\"{ open: visible }\" />\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst visible = ref(true);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Rsbuild Project with Ant Design Vue\nDESCRIPTION: Command to create a new project using Rsbuild, another option for setting up an Ant Design Vue project.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/getting-started.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm create rsbuild@latest\n```\n\n----------------------------------------\n\nTITLE: CSS Selector Transformation When Changing Hash Priority\nDESCRIPTION: This diff shows how the CSS selectors are transformed when changing the hash-priority from 'low' to 'high'. The :where wrapper is removed, resulting in higher specificity selectors.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/compatible-style.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--  :where(.css-bAMboO).ant-btn {\n++  .css-bAMboO.ant-btn {\n      color: #fff;\n    }\n```\n\n----------------------------------------\n\nTITLE: Removing Ant Design Vue Less Imports\nDESCRIPTION: Diff showing how to remove Ant Design Vue less file references from stylesheets when migrating to v4, as less files are no longer provided in the new version.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/migration-v4.en-US.md#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n// Your less file\n--  @import (reference) '~ant-design-vue/es/style/themes/index';\nor\n--  @import '~ant-design-vue/es/style/some-other-less-file-ref';\n```\n\n----------------------------------------\n\nTITLE: Configuring Less Variables for Ant Design Vue 4.x Compatibility\nDESCRIPTION: This JavaScript snippet demonstrates how to configure Less variables to maintain compatibility with Ant Design Vue 4.x styles using the theme conversion utility.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/migration-v4.zh-CN.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { theme } = require('ant-design-vue/lib');\nconst convertLegacyToken = require('ant-design-vue/lib/theme/convertLegacyToken');\n\nconst { defaultAlgorithm, defaultSeed } = theme;\n\nconst mapToken = defaultAlgorithm(defaultSeed);\nconst v3Token = convertLegacyToken(mapToken);\n\n// Webpack Config\nmodule.exports = {\n  // ... other config\n  loader: 'less-loader',\n  options: {\n    lessOptions: {\n      modifyVars: v3Token,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Vue via yarn\nDESCRIPTION: Alternative command to install Ant Design Vue package using yarn package manager. Adds the library as a project dependency.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add ant-design-vue\n```\n\n----------------------------------------\n\nTITLE: Comparing CSS Logical Properties Before and After Transformation\nDESCRIPTION: This diff snippet demonstrates how CSS logical properties are transformed into traditional CSS properties. It shows the change from the 'inset' property to individual top, right, bottom, and left properties.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/compatible-style.zh-CN.md#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n.ant-modal-root {\n-- inset: 0;\n++ top: 0;\n++ right: 0;\n++ bottom: 0;\n++ left: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Vue with yarn\nDESCRIPTION: Command to install the Ant Design Vue library using yarn package manager. This adds version 4.x of the library as a dependency in your project.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/introduce.en-US.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add ant-design-vue@4.x\n```\n\n----------------------------------------\n\nTITLE: CSS Logical Properties Transformation Example\nDESCRIPTION: This diff demonstrates how CSS logical properties are transformed when using the legacyLogicalPropertiesTransformer. The 'inset' property is converted to individual top, right, bottom, and left properties for better browser compatibility.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/compatible-style.en-US.md#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n.ant-modal-root {\n-- inset: 0;\n++ top: 0;\n++ right: 0;\n++ bottom: 0;\n++ left: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Version Support Table in Markdown\nDESCRIPTION: Markdown table showing which versions of ant-design-vue are currently supported with security updates. Version 1.x and 3.x are supported, while 2.x is not.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/SECURITY.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| 1.x     | :white_check_mark: |\n| 2.x     | :x:                |\n| 3.x     | :white_check_mark: |\n```\n\n----------------------------------------\n\nTITLE: Semantic Versioning Reference\nDESCRIPTION: Link to the semantic versioning specification that ant-design-vue follows for version numbering.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/CHANGELOG.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`ant-design-vue` strictly follows [Semantic Versioning 2.0.0](http://semver.org/).\n```\n\n----------------------------------------\n\nTITLE: Obsolete Icon Usage in Ant Design Vue 1.x\nDESCRIPTION: Demonstrates the deprecated way of using Icon components in Ant Design Vue 1.x, which doesn't support tree shaking and increases bundle size.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/migration-v2.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-icon type=\"smile\" />\n<a-button icon=\"smile\" />\n```\n\n----------------------------------------\n\nTITLE: Forking Vant Generator Types Package\nDESCRIPTION: Command to fork the generator-types package from youzan/vant repository for use in ant-design-vue project development.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/antd-tools/generator-types/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfork github.com/youzan/vant packages/generator-types\n```\n\n----------------------------------------\n\nTITLE: Removing Direct Less File Imports for Ant Design Vue\nDESCRIPTION: This diff snippet shows how to remove direct imports of Ant Design Vue Less files, which are no longer supported in version 4.x.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/migration-v4.zh-CN.md#2025-04-21_snippet_4\n\nLANGUAGE: less\nCODE:\n```\n// Your less file\n--  @import (reference) '~ant-design-vue/es/style/themes/index';\nor\n--  @import '~ant-design-vue/es/style/some-other-less-file-ref';\n```\n\n----------------------------------------\n\nTITLE: Creating a New Vue CLI Project (Deprecated)\nDESCRIPTION: Commands to create a new project using Vue CLI, which is no longer recommended but still supported.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/getting-started.en-US.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g @vue/cli\n# OR\n$ yarn global add @vue/cli\n\n$ vue create antd-demo\n```\n\n----------------------------------------\n\nTITLE: Removing babel-plugin-import Configuration\nDESCRIPTION: This diff snippet demonstrates how to remove the babel-plugin-import configuration from the .babelrc file, as it's no longer needed in Ant Design Vue 4.x.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/migration-v4.zh-CN.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\"plugins\": [\n-- [\"import\", { \"libraryName\": \"ant-design-vue\", \"libraryDirectory\": \"lib\"}, \"ant-design-vue\"],\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox Methods in Markdown\nDESCRIPTION: This snippet defines the available methods for the Checkbox component, including blur() and focus(). It specifies the name and description for each method.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/checkbox/index.zh-CN.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| 名称    | 描述     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 移除焦点 |      |\n| focus() | 获取焦点 |      |\n```\n\n----------------------------------------\n\nTITLE: Upload File Object Structure Example in JSX\nDESCRIPTION: Example structure of a file object returned during upload operations, showing the standard properties and format used by the component.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/upload/index.en-US.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  uid: 'uid',   // unique identifier, negative is recommend, to prevent interference with internal generated id\n  name: 'xx.png',   // file name\n  status: 'done', // options：uploading, done, error, removed\n  response: '{\"status\": \"success\"}', // response from server\n  linkProps: '{\"download\": \"image\"}', // additional html props of file link\n  xhr: 'XMLHttpRequest{ ... }', // XMLHttpRequest Header\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DatePicker Mode in Ant Design Vue\nDESCRIPTION: Example showing how to set the mode property on DatePicker components, which affects the displayed panel but not the date picking behavior.\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/site/src/vueDocs/faq.en-US.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker mode=\"year\" />\n```\n\n----------------------------------------\n\nTITLE: Basic AutoComplete Usage - HTML\nDESCRIPTION: Basic implementation of the AutoComplete component with value binding and options prop\nSOURCE: https://github.com/vuecomponent/ant-design-vue/blob/main/components/auto-complete/index.zh-CN.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a-auto-complete v-model:value=\"value\" :options=\"options\" />\n```"
  }
]