[
  {
    "owner": "oasisprotocol",
    "repo": "sapphire-paratime",
    "content": "TITLE: Vigil Smart Contract\nDESCRIPTION: Solidity code for the Vigil smart contract, which implements a dead person's switch with confidentiality features.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/quickstart.mdx#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract Vigil {\n    struct SecretMetadata {\n        uint256 expiresAt;\n        string description;\n    }\n\n    SecretMetadata[] public _metas;\n    bytes[] private _secrets;\n\n    function createSecret(string calldata description, bytes calldata secret, uint256 expiresInSecs) external {\n        _metas.push(SecretMetadata(block.timestamp + expiresInSecs, description));\n        _secrets.push(secret);\n    }\n\n    function revealSecret(uint256 index) external view returns (bytes memory) {\n        require(_metas[index].expiresAt <= block.timestamp, \"not expired\");\n        return _secrets[index];\n    }\n\n    // ... (other functions omitted for brevity)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Sapphire Hardhat Provider\nDESCRIPTION: This snippet shows how to import the Sapphire Hardhat provider in the Hardhat configuration file. It should be imported before other plugins to ensure proper wrapping of the provider.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/testing.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ESM\nimport '@oasisprotocol/sapphire-hardhat';\n\n// CommonJS\nrequire('@oasisprotocol/sapphire-hardhat');\n\n/** All other plugins must go below this one! **/\n```\n\n----------------------------------------\n\nTITLE: Configuring Sapphire Testnet Network\nDESCRIPTION: TypeScript code to add the Sapphire Testnet network configuration to the Hardhat config file.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/quickstart.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nnetworks: {\n  \"sapphire-testnet\": {\n    url: \"https://testnet.sapphire.oasis.dev\",\n    chainId: 23295,\n    accounts: [PRIVATE_KEY],\n  },\n  // other networks...\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing a speed bump in Solidity smart contracts\nDESCRIPTION: This Solidity contract demonstrates a speed bump pattern to prevent off-chain calls from being chained together. It ensures that a block has been finalized before revealing a secret.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/security.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Secret {\n  uint256 private _height;\n  bytes private _secret;\n  address private _buyer;\n\n  constructor(bytes memory _text) {\n    _secret = _text;\n  }\n\n  function recordPayment() external payable {\n    require(msg.value == 1 ether);\n    // set and lock buyer\n    _height = block.number;\n    _buyer = msg.sender;\n  }\n\n  /// @notice Reveals the secret.\n  function revealSecret() view external returns (bytes memory) {\n    require(block.number > _height, \"not settled\");\n    require(_buyer != address(0), \"no recorded buyer\");\n    // TODO: optionally authenticate call from buyer\n    return _secret;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sapphire-Hardhat Plugin via NPM\nDESCRIPTION: Command to install the @oasisprotocol/sapphire-hardhat plugin as a development dependency in your Node.js project.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/integrations/hardhat/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @oasisprotocol/sapphire-hardhat\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-7201 Namespaced Storage in Solidity\nDESCRIPTION: This Solidity contract demonstrates how to implement ERC-7201 namespaced storage for delegatecall contracts. It provides a secure approach to storage organization in upgradable contracts by using namespaces to prevent storage collisions when multiple contracts share storage space.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/deployment.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.0;\n\ncontract Example7201 {\n    /// @custom:storage-location erc7201:Example7201.state\n    struct State {\n        uint256 counter;\n    }\n\n    function _stateStorageSlot()\n        private pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encode(uint256(keccak256(\"Example7201.state\")) - 1)) & ~bytes32(uint256(0xff));\n    }\n\n    function _getState()\n        private pure\n        returns (State storage state)\n    {\n        bytes32 slot = _stateStorageSlot();\n        assembly {\n            state.slot := slot\n        }\n    }\n\n    function increment()\n        public\n    {\n        State storage state = _getState();\n\n        state.counter += 1;\n    }\n\n    function get()\n        public view\n        returns (uint256)\n    {\n        State storage state = _getState();\n\n        return state.counter;\n    }\n}\n\ncontract ExampleCaller {\n    Example7201 private example;\n\n    constructor () {\n        example = new Example7201();\n    }\n    function get()\n        external\n        returns (uint256 counter)\n    {\n        (bool success, bytes memory result ) = address(example).delegatecall(abi.encodeCall(example.get, ()));\n        require(success);\n        counter = abi.decode(result, (uint256));\n    }\n\n    function increment()\n        external\n    {\n        (bool success, ) = address(example).delegatecall(abi.encodeCall(example.increment, ()));\n        require(success);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Hardhat Tests on Sapphire Localnet\nDESCRIPTION: This command demonstrates how to run Hardhat tests on the Sapphire Localnet network.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/testing.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx hardhat test --network sapphire-localnet\n```\n\n----------------------------------------\n\nTITLE: Extending a Contract with SIWE Authentication in Solidity\nDESCRIPTION: A Solidity implementation of a message box with Sign-In with Ethereum (SIWE) authentication. The contract extends the basic MessageBox with SiweAuth, allowing authentication via SIWE tokens for view calls when msg.sender is address(0).\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/authentication.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nimport {SiweAuth} from \"@oasisprotocol/sapphire-contracts/contracts/auth/SiweAuth.sol\";\n\ncontract MessageBox is SiweAuth {\n  address private _owner;\n  string private _message;\n\n  modifier onlyOwner(bytes memory token) {\n    if (msg.sender != _owner && authMsgSender(token) != _owner) {\n        revert(\"not allowed\");\n    }\n    _;\n  }\n\n  constructor(string memory domain) SiweAuth(domain) {\n    _owner = msg.sender;\n  }\n\n  function getSecretMessage(bytes memory token) external view onlyOwner(token) returns (string memory) {\n    return _message;\n  }\n\n  function setSecretMessage(string calldata message) external onlyOwner(bytes(\"\")) {\n    _message = message;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Ethers Signer for Encrypted Transactions\nDESCRIPTION: This snippet demonstrates how to import and use the 'wrap' function from the Sapphire Paratime package to wrap an Ethers signer for handling encrypted transactions.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/testing.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { wrap } from \"@oasisprotocol/sapphire-paratime\";\n\nconst wallet = new Wallet(process.env.PRIVATE_KEY);\nconst provider = new ethers.JsonRpcProvider('http://127.0.0.1:8545'); // Localnet RPC URL\nconst wrappedSigner = wrap(wallet.connect(provider));\n```\n\n----------------------------------------\n\nTITLE: Wrapping Ethereum Provider with Sapphire\nDESCRIPTION: Code snippet showing how to wrap an Ethereum provider with Sapphire's wrapper for transaction encryption.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/browser.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { wrapEthereumProvider } from '@oasisprotocol/sapphire-paratime';\n\nconst provider = wrapEthereumProvider(window.ethereum);\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Control for Confidential Messages in Solidity\nDESCRIPTION: A Solidity contract that implements access control for storing and retrieving confidential messages. The contract allows only the owner to set and get a secret message, enforced through the onlyOwner modifier.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/authentication.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract MessageBox {\n    address private _owner;\n    string private _message;\n\n    modifier onlyOwner() {\n        if (msg.sender != _owner) {\n            revert(\"not allowed\");\n        }\n        _;\n    }\n    constructor() {\n        _owner = msg.sender;\n    }\n\n    function getSecretMessage() external view onlyOwner returns (string memory) {\n        return _message;\n    }\n\n    function setSecretMessage(string calldata message) external onlyOwner {\n        _message = message;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying to Sapphire Testnet\nDESCRIPTION: Commands for deploying the Vigil contract to Sapphire testnet, requiring a private key export and using pnpm with Hardhat.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/examples/hardhat/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport PRIVATE_KEY=0x..\npnpm hardhat full-vigil --network sapphire-testnet\n```\n\n----------------------------------------\n\nTITLE: Implementing Signed View Calls in Go for Sapphire ParaTime\nDESCRIPTION: This code demonstrates how to implement signed queries to the Sapphire ParaTime using Go. It wraps an Ethereum client to automatically sign view calls with a private key stored in an environment variable, allowing authentication without user interaction for backend services.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/authentication.md#2025-04-16_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"crypto/ecdsa\"\n\n    \"github.com/ethereum/go-ethereum/accounts/abi/bind\"\n    \"github.com/ethereum/go-ethereum/common\"\n    \"github.com/ethereum/go-ethereum/crypto\"\n    \"github.com/ethereum/go-ethereum/ethclient\"\n    \n    sapphire \"github.com/oasisprotocol/sapphire-paratime/clients/go\"\n\n    messageBox \"demo-starter/contracts/message-box\"\n)\n\nfunc GetC10lMessage() (string, error) {\n    client, err = ethclient.Dial(\"https://testnet.sapphire.oasis.io\")\n    if err != nil {\n        return \"\", err\n    }\n\t\n    sk, err = crypto.HexToECDSA(os.Getenv(\"PRIVATE_KEY\"))\n    addr := crypto.PubkeyToAddress(*sk.Public().(*ecdsa.PublicKey))\n\n    wrappedClient, err := sapphire.WrapClient(c.Client, func(digest [32]byte) ([]byte, error) {\n        return crypto.Sign(digest[:], sk)\n    })\n    if err != nil {\n        return \"\", fmt.Errorf(\"unable to wrap backend: %v\", err)\n    }\n\n    mb, err := messageBox.NewMessageBox(common.HexToAddress(\"0x5FbDB2315678afecb367f032d93F642f64180aa3\"), wrappedClient)\n    if err != nil {\n        return \"\", fmt.Errorf(\"Unable to get instance of contract: %v\", err)\n    }\n\t\n    msg, err := mb.GetSecretMessage(&bind.CallOpts{From: addr}) // Don't forget to pass callOpts!\n    if err != nil {\n        return \"\", fmt.Errorf(\"failed to retrieve message: %v\", err)\n    }\n\t\n    return msg, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Wagmi with Sapphire\nDESCRIPTION: Command to install Wagmi and its dependencies including Sapphire integration.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/browser.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @oasisprotocol/sapphire-wagmi-v2 wagmi@2.x viem@2.x\n```\n\n----------------------------------------\n\nTITLE: Creating a Wrapped Ethereum Client for Sapphire ParaTime\nDESCRIPTION: Instantiates an Ethereum client with the Sapphire gateway URL and wraps it with a custom signing function. This enables confidential transactions on the Sapphire ParaTime.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/clients/go/README.md#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// key := private key\nclient, _ := ethclient.Dial(sapphire.Networks[SapphireChainID.Uint64()].DefaultGateway)\nbackend, _ := sapphire.WrapClient(client, func(digest [32]byte)([]byte, error) {\n  // Pass in a custom signing function to interact with the signer\n  return crypto.Sign(digest[:], key)\n})\n```\n\n----------------------------------------\n\nTITLE: Making Confidential Queries with Sapphire\nDESCRIPTION: Shows how to make confidential read queries to a smart contract by passing CallOpts with the sender's address. This ensures the query data is encrypted and associated with the sender's account.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/clients/go/README.md#2025-04-16_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nbalance := nft.BalanceOf(&bind.CallOpts{From: \"0xYOUR_ADDRESS\"}, common.HexToAddress(\"0xDce075E1C39b1ae0b75D554558b6451A226ffe00\"))\n```\n\n----------------------------------------\n\nTITLE: Installing Sapphire-Wagmi Plugin and Dependencies\nDESCRIPTION: Command to install the Sapphire-Wagmi plugin package along with its required dependencies (Wagmi v2 and Viem v2).\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/integrations/wagmi-v2/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @oasisprotocol/sapphire-wagmi-v2 wagmi@2.x viem@2.x\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagmi with Sapphire\nDESCRIPTION: Example of setting up Wagmi configuration with Sapphire connectors and transports.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/browser.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"wagmi\";\nimport { sapphire, sapphireTestnet } from \"wagmi/chains\";\nimport {\n\tinjectedWithSapphire,\n\tsapphireHttpTransport,\n} from \"@oasisprotocol/sapphire-wagmi-v2\";\n\nexport const config = createConfig({\n\tmultiInjectedProviderDiscovery: false,\n\tchains: [sapphire, sapphireTestnet],\n\tconnectors: [injectedWithSapphire()],\n\ttransports: {\n\t\t[sapphire.id]: sapphireHttpTransport(),\n\t\t[sapphireTestnet.id]: sapphireHttpTransport()\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Submitting Confidential Transactions with Sapphire\nDESCRIPTION: Demonstrates how to submit a confidential transaction using the Sapphire-specific TransactOpts and waiting for the transaction to be mined. This ensures the transaction data is encrypted.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/clients/go/README.md#2025-04-16_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntxOpts := backend.Transactor(senderAddr)\ntx, _ := nft.Transfer(txOpts, tokenId, recipient)\nreceipt, _ := bind.WaitMined(context.Background(), client, tx)\n```\n\n----------------------------------------\n\nTITLE: Installing Sapphire TypeScript Wrapper\nDESCRIPTION: Command to install the Sapphire TypeScript Wrapper package using npm.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/browser.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @oasisprotocol/sapphire-paratime\n```\n\n----------------------------------------\n\nTITLE: Complete Gasless Proxy Contract Implementation\nDESCRIPTION: A full implementation of a proxy contract that enables gasless transactions. It includes functionality to set up a keypair, create proxy transactions, and execute them on behalf of users.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/gasless.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nimport { encryptCallData } from \"@oasisprotocol/sapphire-contracts/contracts/CalldataEncryption.sol\";\nimport { EIP155Signer } from \"@oasisprotocol/sapphire-contracts/contracts/EIP155Signer.sol\";\n\nstruct EthereumKeypair {\n  address addr;\n  bytes32 secret;\n  uint64 nonce;\n}\n\nstruct EthTx {\n  uint64 nonce;\n  uint256 gasPrice;\n  uint64 gasLimit;\n  address to;\n  uint256 value;\n  bytes data;\n  uint256 chainId;\n}\n\n// Proxy for gasless transaction.\ncontract Gasless {\n  EthereumKeypair private kp;\n\n  function setKeypair(EthereumKeypair memory keypair) external payable {\n    kp = keypair;\n  }\n\n  function makeProxyTx(address innercallAddr, bytes memory innercall)\n  external\n  view\n  returns (bytes memory output)\n  {\n    bytes memory data = abi.encode(innercallAddr, innercall);\n\n    // Call will invoke proxy().\n    return\n      EIP155Signer.sign(\n        kp.addr,\n        kp.secret,\n        EIP155Signer.EthTx({\n          nonce: kp.nonce,\n          gasPrice: 100_000_000_000,\n          gasLimit: 250000,\n          to: address(this),\n          value: 0,\n          data: encryptCallData(abi.encodeCall(this.proxy, data)),\n          chainId: block.chainid\n        })\n      );\n  }\n\n  function proxy(bytes memory data) external payable {\n    (address addr, bytes memory subcallData) = abi.decode(\n      data,\n      (address, bytes)\n    );\n    (bool success, bytes memory outData) = addr.call{value: msg.value}(\n      subcallData\n    );\n    if (!success) {\n      // Add inner-transaction meaningful data in case of error.\n      assembly {\n        revert(add(outData, 32), mload(outData))\n      }\n    }\n    kp.nonce += 1;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat for Sapphire Localnet\nDESCRIPTION: This snippet shows how to configure Hardhat for use with Sapphire Localnet. It includes network configuration and account setup for local testing.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/testing.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HardhatUserConfig } from \"hardhat/config\";\nimport \"@nomicfoundation/hardhat-toolbox\";\n\n// Example accounts script\nconst TEST_HDWALLET = {\n  mnemonic: \"test test test test test test test test test test test junk\",\n  path: \"m/44'/60'/0'/0\",\n  initialIndex: 0,\n  count: 20,\n  passphrase: \"\",\n};\nconst accounts = process.env.PRIVATE_KEY ? [process.env.PRIVATE_KEY] : TEST_HDWALLET;\n\nconst config: HardhatUserConfig = {\n  solidity: \"0.8.19\",\n  // highlight-start\n  networks: {\n    \"sapphire-localnet\": {\n      url: \"http://localhost:8545\", // Localnet RPC URL\n      chainId: 23294,               // Sapphire Localnet chain ID\n      accounts\n    },\n  },\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing gas padding in Solidity smart contracts\nDESCRIPTION: This Solidity contract demonstrates how to use Sapphire's gas padding precompile to prevent leaking information about a transaction's execution through gas usage patterns.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/security.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\ncontract GasExample {\n  bytes32 tmp;\n\n  function constantMath(bool doMath, uint128 padGasAmount) external {\n    if (doMath) {\n      bytes32 x;\n\n      for (uint256 i = 0; i < 100; i++) {\n        x = keccak256(abi.encodePacked(x, tmp));\n      }\n\n      tmp = x;\n    }\n\n    Sapphire.padGas(padGasAmount);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Sapphire ParaTime with Hardhat\nDESCRIPTION: Example of how to integrate the Sapphire ParaTime compatibility library with Hardhat by importing the @oasisprotocol/sapphire-hardhat plugin in a hardhat.config.ts file.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/clients/js/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@oasisprotocol/sapphire-hardhat';\n// All other Hardhat plugins must come below.\n```\n\n----------------------------------------\n\nTITLE: Creating Encrypted Wallet Client\nDESCRIPTION: Example demonstrating how to create and configure a wallet client with Sapphire encryption, including account generation and transport configuration\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/integrations/viem-v2/README.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient } from 'viem'\nimport { english, generateMnemonic, mnemonicToAccount } from 'viem/accounts';\nimport { sapphireLocalnet, sapphireHttpTransport, wrapWalletClient } from '@oasisprotocol/sapphire-viem-v2';\n\nconst account = mnemonicToAccount(generateMnemonic(english));\n\nconst walletClient = await wrapWalletClient(createWalletClient({\n\taccount,\n\tchain: sapphireLocalnet,\n\ttransport: sapphireHttpTransport()\n}));\n```\n\n----------------------------------------\n\nTITLE: Random Number Generation Using Sapphire Contract\nDESCRIPTION: Example Solidity contract demonstrating how to use Sapphire's randomBytes function to generate random numbers securely.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/contracts/README.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.13;\n\nimport {Sapphire} from \"@oasisprotocol/sapphire-contracts/contracts/Sapphire.sol\";\n\ncontract RandomNumber {\n    function generateNumber() public view returns (uint) {\n        return uint(bytes32(Sapphire.randomBytes(32, \"\")));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring hardhat-deploy with Proxy for Oasis Sapphire\nDESCRIPTION: This snippet demonstrates how to configure a deployment script using hardhat-deploy to deploy an upgradable contract with a proxy on Oasis Sapphire. It avoids using eth_getStorageAt by utilizing a proxy configuration that includes an owner() function.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/deployment.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = async ({getNamedAccounts, deployments, getChainId}) => {\n  const {deploy} = deployments;\n  const {deployer} = await getNamedAccounts();\n  await deploy('Greeter', {\n    from: deployer,\n    proxy: true,\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating Sapphire with Ethers.js in Node.js Environment\nDESCRIPTION: Example showing how to configure Sapphire with Ethers.js in a Node.js environment. Uses a private key to create a wallet connected to the Sapphire testnet.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/integrations/ethers-v6/README.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDefaultProvider, Wallet } from 'ethers';\nimport { NETWORKS, wrapEthersSigner } from '@oasisprotocol/sapphire-ethers-v6';\n\nconst defaultProvider = getDefaultProvider(NETWORKS.testnet.defaultGateway);\nconst signer = wrapEthersSigner(new Wallet('YOUR_PRIVATE_KEY').connect(defaultProvider));\n```\n\n----------------------------------------\n\nTITLE: Configuring Safe Singleton Factory Addresses in hardhat.config.ts\nDESCRIPTION: This snippet shows how to specify the Safe Singleton factory addresses for both Sapphire Testnet (chain ID 23295) and another network (chain ID 97) in the hardhat configuration file. This enables deterministic deployment across different networks.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/deployment.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n  deterministicDeployment: {\n    \"97\": {\n      factory: '0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7',\n      deployer: '0xE1CB04A0fA36DdD16a06ea828007E35e1a3cBC37',\n      funding: '2000000',\n      signedTx: '',\n    },\n    \"23295\": {\n      factory: '0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7',\n      deployer: '0xE1CB04A0fA36DdD16a06ea828007E35e1a3cBC37',\n      funding: '2000000',\n      signedTx: '',\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Configuring Sapphire-Wagmi for Multi-Chain Applications\nDESCRIPTION: TypeScript configuration for applications supporting both Sapphire and non-Sapphire chains. Uses provider filtering to selectively apply encryption only to specific providers when connecting to Sapphire networks.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/integrations/wagmi-v2/README.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http } from \"wagmi\";\nimport { sapphire, sapphireTestnet } from \"wagmi/chains\";\nimport {\n  sapphireLocalnet,\n  createSapphireConfig,\n} from \"@oasisprotocol/sapphire-wagmi-v2\";\n\nexport const wagmiConfig = createSapphireConfig({\n  sapphireConfig: {\n    replaceProviders: false,\n    // Define which providers you want to wrap via RDNS\n    wrappedProvidersFilter: (rdns) => ['io.metamask'].includes(rdns)\n  },\n  chains: [sapphire, sapphireTestnet, sapphireLocalnet],\n  transports: {\n    [sapphire.id]: http(),\n    [sapphireTestnet.id]: http(),\n    [sapphireLocalnet.id]: http(),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Deterministic Deployment on Oasis Sapphire\nDESCRIPTION: This code shows how to configure a deployment script for deterministic deployment using hardhat-deploy with the Safe Singleton factory for replay protection on Oasis Sapphire. Deterministic deployment ensures contracts are deployed to the same address across different networks.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/deployment.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = async ({getNamedAccounts, deployments, getChainId}) => {\n  const {deploy} = deployments;\n  const {deployer} = await getNamedAccounts();\n  await deploy('Greeter', {\n    from: deployer,\n    deterministicDeployment: true,\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Signed View Calls in Python for Sapphire ParaTime\nDESCRIPTION: This code demonstrates how to implement signed queries to the Sapphire ParaTime using Python. It wraps a Web3 client to automatically sign view calls with a private key stored in an environment variable, enabling backend authentication without user interaction.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/authentication.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3\nfrom web3.middleware import construct_sign_and_send_raw_middleware\nfrom eth_account.signers.local import LocalAccount\nfrom eth_account import Account\n\nfrom sapphirepy import sapphire\n\ndef get_c10l_message(address: str, network_name: Optional[str] = \"sapphire-localnet\") -> str:\n    w3 = Web3(Web3.HTTPProvider(sapphire.NETWORKS[network_name]))\n    account: LocalAccount = Account.from_key(os.environ.get(\"PRIVATE_KEY\"))\n    w3.middleware_onion.add(construct_sign_and_send_raw_middleware(account))\n    w3 = sapphire.wrap(w3, account)\n    \n    compiled_contract = json.load(\"MessageBox_compiled.json\")\n    contract_data = compiled_contract[\"contracts\"][\"MessageBox.sol\"][\"MessageBox\"]\n    message_box = w3.eth.contract(address=address, abi=contract_data[\"abi\"])\n    \n    return message_box.functions.message().call()\n```\n\n----------------------------------------\n\nTITLE: Wrapping an EIP-1193 Compatible Ethereum Provider in Sapphire ParaTime\nDESCRIPTION: Example of how to wrap a standard EIP-1193 compatible Ethereum provider (like window.ethereum) with the Sapphire ParaTime wrapper to enable encrypted transactions and queries.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/clients/js/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { wrapEthereumProvider } from '@oasisprotocol/sapphire-paratime';\n\nconst provider = wrapEthereumProvider(window.ethereum);\nwindow.ethereum = wrapEthereumProvider(window.ethereum); // If you're feeling bold.\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Smart Contract with Sapphire Backend\nDESCRIPTION: Creates a new instance of a smart contract using the wrapped Sapphire backend instead of the standard ethclient.Client. This enables confidential interactions with the contract.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/clients/go/README.md#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nnft, _ := NewNft(addr, backend)\n```\n\n----------------------------------------\n\nTITLE: Signing Transactions with EIP155Signer in Solidity\nDESCRIPTION: This function utilizes the EIP155Signer library to sign a transaction, returning a raw, RLP-encoded signed transaction ready for broadcast. It requires the signer's public address, secret key, and transaction details.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/gasless.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction sign(address publicAddress, bytes32 secretKey, EthTx memory transaction) internal view returns (bytes memory);\n```\n\n----------------------------------------\n\nTITLE: Integrating Sapphire with Ethers.js in Browser Environment\nDESCRIPTION: Example of how to use Oasis Sapphire with Ethers.js in a browser environment. This wraps the BrowserProvider's signer with the Sapphire encryption wrapper.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/integrations/ethers-v6/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BrowserProvider } from 'ethers';\nimport { wrapEthersSigner } from '@oasisprotocol/sapphire-ethers-v6';\n\nconst signer = wrapEthersSigner(\n  new BrowserProvider(window.ethereum).getSigner()\n);\n```\n\n----------------------------------------\n\nTITLE: Using Gasless Transactions with TypeScript Client\nDESCRIPTION: A TypeScript implementation that sets up a keypair for the gasless proxy, encodes a comment function call, obtains a signed meta-transaction, and submits it to the network without the user paying gas fees.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/gasless.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst CommentBox = await ethers.getContractFactory(\"CommentBox\");\nconst commentBox = await CommentBox.deploy();\nawait commentBox.waitForDeployment();\nconst Gasless = await ethers.getContractFactory(\"Gasless\");\nconst gasless = await Gasless.deploy();\nawait gasless.waitForDeployment();\n\n// Set the keypair used to sign the meta-transaction.\nawait gasless.setKeypair({\n  addr: \"70997970C51812dc3A010C7d01b50e0d17dc79C8\",\n  secret: Uint8Array.from(Buffer.from(\"59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d\", 'hex')),\n  nonce: 0,\n});\n\nconst innercall = commentBox.interface.encodeFunctionData('comment', ['Hello, free world!']);\nconst tx = await gasless.makeProxyTx(commentBox.address, innercall);\n\nconst plainProvider = new ethers.JsonRpcProvider(ethers.provider.connection);\nconst plainResp = await plainProvider.sendTransaction(tx);\n\nconst receipt = await ethers.provider.getTransactionReceipt(plainResp.hash);\nif (!receipt || receipt.status != 1) throw new Error('tx failed');\n```\n\n----------------------------------------\n\nTITLE: Configuring Viem with Sapphire\nDESCRIPTION: Example of creating a wrapped wallet client with Viem and Sapphire integration.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/browser.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient } from 'viem'\nimport { english, generateMnemonic, mnemonicToAccount } from 'viem/accounts';\nimport { sapphireLocalnet, sapphireHttpTransport, wrapWalletClient } from '@oasisprotocol/sapphire-viem-v2';\n\nconst account = mnemonicToAccount(generateMnemonic(english));\n\nconst walletClient = await wrapWalletClient(createWalletClient({\n\taccount,\n\tchain: sapphireLocalnet,\n\ttransport: sapphireHttpTransport()\n}));\n```\n\n----------------------------------------\n\nTITLE: Writing E2E Tests for Sapphire dApp with dAppwright\nDESCRIPTION: Example of writing end-to-end tests for a Sapphire dApp using dAppwright. It includes navigating to the application, interacting with MetaMask, setting and revealing a message, and making assertions.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/dappwright.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntest.beforeEach(async ({ page }) => {\n  await page.goto('http://localhost:5173')\n})\n\ntest('set and view message', async ({ wallet, page }) => {\n  // Load page\n  await page.getByTestId('rk-connect-button').click()\n  await page.getByTestId('rk-wallet-option-injected-sapphire').click()\n  await wallet.approve()\n\n  // Set a message\n  await page.locator(':text-matches(\"0x.{40}\")').fill('hola amigos')\n  const submitBtn = page.getByRole('button', { name: 'Set Message' })\n  await submitBtn.click()\n  await wallet.confirmTransaction()\n\n  // Reveal the message\n  await expect(submitBtn).toBeEnabled()\n  await page.locator('[data-label=\"Tap to reveal\"]').click()\n  await wallet.confirmTransaction()\n\n  // Assert message has been set\n  await expect(page.locator('[data-label=\"Tap to reveal\"]').locator('input')).toHaveValue('hola amigos')\n})\n```\n\n----------------------------------------\n\nTITLE: Using Sapphire with an Ethers Provider (No Signing Required)\nDESCRIPTION: Example of using the Sapphire wrapper with just a Provider when no transaction signing is required. This enables encrypted gas estimates and view calls.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/integrations/ethers-v6/README.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDefaultProvider } from 'ethers';\nimport { NETWORKS, wrapEthersProvider } from '@oasisprotocol/sapphire-ethers-v6';\n\nconst defaultProvider = getDefaultProvider(NETWORKS.testnet.defaultGateway);\nconst provider = wrapEthersProvider(defaultProvider);\n```\n\n----------------------------------------\n\nTITLE: Installing Sapphire Hardhat Provider\nDESCRIPTION: This command installs the Sapphire Hardhat provider package for handling encrypted transactions in a Hardhat environment.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/testing.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D @oasisprotocol/sapphire-hardhat\n```\n\n----------------------------------------\n\nTITLE: Implementing SIWE Authentication in TypeScript Client\nDESCRIPTION: A TypeScript implementation for authenticating with a SIWE-enabled contract. This code generates a SIWE message, gets it signed by the user's wallet, and uses the resulting token to make authenticated view calls to the contract.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/authentication.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {SiweMessage} from 'siwe';\nimport { ethers } from 'hardhat'\n\nlet token = '';\n\nasync function getSecretMessage(): Promise<Message> {\n  const messageBox = await ethers.getContractAt('MessageBox', '0x5FbDB2315678afecb367f032d93F642f64180aa3');\n\n  if (token == '') { // Stored in browser session.\n    const domain = await messageBox.domain();\n    const siweMsg = new SiweMessage({\n      domain,\n      address: addr, // User's selected account address.\n      uri: `http://${domain}`,\n      version: \"1\",\n      chainId: 0x5afe, // Sapphire Testnet\n    }).toMessage();\n    const sig = ethers.Signature.from((await window.ethereum.getSigner(addr)).signMessage(siweMsg));\n    token = await messageBox.login(siweMsg, sig);\n  }\n\n  return messageBox.getSecretMessage(token);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Account Configuration\nDESCRIPTION: TypeScript code to add an account configuration using a private key from an environment variable.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/quickstart.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst PRIVATE_KEY = process.env.PRIVATE_KEY || '';\n\nif (!PRIVATE_KEY) {\n  throw new Error(\"Missing PRIVATE_KEY environment variable\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Owner Authentication Contract in Solidity\nDESCRIPTION: A simple Solidity contract demonstrating basic owner authentication using msg.sender. The contract stores an owner address during construction and provides a function to check if the caller is the owner.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/authentication.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Example {\n    address _owner;\n    constructor () {\n        _owner = msg.sender;\n    }\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sapphire Paratime Package\nDESCRIPTION: This command installs the Sapphire Paratime package for use with Ethers.js to handle encrypted transactions.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/testing.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D @oasisprotocol/sapphire-paratime\n```\n\n----------------------------------------\n\nTITLE: Simple CommentBox Smart Contract\nDESCRIPTION: A basic smart contract that allows adding comments to an on-chain array. This is used as an example target contract for demonstrating gasless transactions.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/gasless.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\ncontract CommentBox {\n  string[] public comments;\n\n  function comment(string memory commentText) external {\n    comments.push(commentText);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Sapphire Hardhat Plugin\nDESCRIPTION: TypeScript code to import the Sapphire Hardhat plugin in the Hardhat configuration file.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/quickstart.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@oasisprotocol/sapphire-hardhat';\n```\n\n----------------------------------------\n\nTITLE: Importing Sapphire-Hardhat Plugin in Hardhat Config\nDESCRIPTION: Code examples showing how to import the Sapphire-Hardhat plugin in your Hardhat configuration file using either ESM or CommonJS syntax. The plugin must be imported before any other plugins.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/integrations/hardhat/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ESM\nimport '@oasisprotocol/sapphire-hardhat';\n\n// CommonJS\nrequire('@oasisprotocol/sapphire-hardhat');\n\n/** All other plugins must go below this one! **/\n```\n\n----------------------------------------\n\nTITLE: Configuring Web3.py with Sapphire ParaTime\nDESCRIPTION: Python code demonstrating how to initialize Web3 providers (both synchronous and asynchronous) with Sapphire ParaTime, configure signing accounts, and wrap them with Sapphire's end-to-end encryption middleware.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/clients/py/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3, AsyncWeb3\nfrom web3.middleware import SignAndSendRawMiddlewareBuilder\nfrom eth_account import Account\nfrom eth_account.signers.local import LocalAccount\n\nfrom sapphirepy import sapphire\n\nw3 = Web3(Web3.HTTPProvider(sapphire.NETWORKS['sapphire-localnet']))\nasync_w3 = AsyncWeb3(\n    AsyncWeb3.AsyncHTTPProvider(\n        sapphire.NETWORKS['sapphire-localnet']\n    )\n)\n\n# Optional: Setup your Web3 provider with a signing account.\n# This account is used for signing transactions.\naccount: LocalAccount = (\n    Account.from_key(  # pylint: disable=no-value-for-parameter\n        private_key=\"<your_private_key_here>\"\n    )\n)\nw3.middleware_onion.add(SignAndSendRawMiddlewareBuilder.build(account))\n\n# Finally, wrap the provider to add Sapphire end-to-end encryption.\n# Note: Account parameter in the wrap() function is used for signing view\n# calls and can be different from the account used for singing transactions.\nw3 = sapphire.wrap(w3, account) # Can provide custom \"account\" parameter\n# Wrapper middleware also works with AsyncWeb3\nasync_w3 = sapphire.wrap(async_w3, account)\n\n# Optionally, query Oasis Web3 Gateway for the gas price.\n# from web3.gas_strategies.rpc import rpc_gas_price_strategy\n# w3.eth.set_gas_price_strategy(rpc_gas_price_strategy)\n```\n\n----------------------------------------\n\nTITLE: Ethereum Keypair Structure for On-Chain Signing\nDESCRIPTION: A data structure for storing a signer's Ethereum address, private key, and nonce. This information is stored in encrypted contract state to enable gasless transactions.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/gasless.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstruct EthereumKeypair {\n  address addr;\n  bytes32 secret;\n  uint64 nonce;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Relayed Transaction via GSN\nDESCRIPTION: Command to test the GSN setup by sending a relayed request to call the 'emitMessage' method on the test recipient contract with the message 'hello world!'.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/gasless.md#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnpx gsn send-request --network sapphire-testnet --abiFile 'node_modules/@oasislabs/opengsn-cli/dist/compiled/TestRecipient.json' --method emitMessage --methodParams 'hello world!' --to 0x594cd6354b23A5200a57355072E2A5B15354ee21 --paymaster 0x8C06261f58a024C958d42df89be7195c8690008d --privateKeyHex $PRIVATE_KEY --from 0xfA3AC9f65C9D75EE3978ab76c6a1105f03156204 --gasLimit 150000 --gasPrice 100\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright for Local Dev Server in TypeScript\nDESCRIPTION: Configuration for Playwright to start a local dev server before running tests. It specifies the command to start the server, the URL to use, and options for reusing the server and handling output.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/dappwright.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  /* Run your local dev server before starting the tests */\n  webServer: {\n    command: 'pnpm dev',\n    url: process.env.FRONTEND_URL || 'http://localhost:8080/',\n    reuseExistingServer: !process.env.CI,\n    stdout: 'pipe',\n    stderr: 'pipe',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring hardhat-tracer in TypeScript\nDESCRIPTION: This code snippet demonstrates how to add the hardhat-tracer plugin to the Hardhat configuration file (config.ts) for enabling call trace functionality.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/security.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"hardhat-tracer\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Sapphire Dependencies\nDESCRIPTION: Commands to install dependencies and build the project packages including sapphire-paratime, contracts, and sapphire-hardhat.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/examples/onchain-signer/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Standard Contract Addresses Table in Markdown\nDESCRIPTION: Table showing the mainnet and testnet addresses for core contracts including Multicall V3, CreateX, and Wrapped ROSE, along with their source references.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/addresses.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                       | Mainnet Address                                            | Testnet Address                                            | Source                             |\n|----------------------------|------------------------------------------------------------|------------------------------------------------------------|------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: Installing GSN Command Line Tools for Sapphire\nDESCRIPTION: Commands to initialize a new npm project and install the Oasis Labs fork of the OpenGSN CLI tools needed for deploying GSN on Sapphire ParaTime.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/gasless.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm init\nnpm install -D @oasislabs/opengsn-cli\n```\n\n----------------------------------------\n\nTITLE: Installing dAppwright and Playwright for Sapphire dApp Testing\nDESCRIPTION: Commands to install dAppwright and Playwright, which are essential for end-to-end testing of Sapphire dApps. It also includes a command to run example tests.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/dappwright.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D @tenkeylabs/dappwright\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm init playwright@latest\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx playwright test\n```\n\n----------------------------------------\n\nTITLE: Displaying Contract Deployment Information in Markdown Table\nDESCRIPTION: This Markdown table lists various contract deployments on Oasis Sapphire ParaTime, including their names, mainnet and testnet addresses, and links to source code. It covers deployments for Celer, Safe, Band Oracle, and Router Protocol.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/addresses.md#2025-04-16_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n| Name | Mainnet Address | Testnet Address | Source |\n| ---- | --------------- | --------------- | ------ |\n| [Celer IM Executor][message-executor] | Multiple executors available | [`0x9C850D230FFFaCEf1E2D1741a00080856630e455`][message-executor-testnet] | [Message Executor][message-executor-source] |\n| [Celer MessageBus][message-bus] | [`0x9Bb46D5100d2Db4608112026951c9C965b233f4D`][message-bus-mainnet] | [`0x9Bb46D5100d2Db4608112026951c9C965b233f4D`][message-bus-testnet] | [Message bus][message-bus-source] |\n| [Safe Singleton Factory][singleton-factory] | [`0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7`][singleton-factory-mainnet] | [`0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7`][singleton-factory-testnet] | [Singleton Factory][singleton-factory] |\n| [Band Oracle][band-oracle] | [`0xDA7a001b254CD22e46d3eAB04d937489c93174C3`][band-oracle-mainnet] | [`0x0c2362c9A0586Dd7295549C65a4A5e3aFE10a88A`][band-oracle-testnet] | [Oracle][band-oracle-source] |\n| [Router Gateway][router-gateway] | [`0x86dfc31d9cb3280ee1eb1096caa9fc66299af973`][router-gateway-mainnet] | [`0xfbE6D1e711CC2BC241dfa682CBbFF6D68bf62e67`][router-gateway-testnet] | [Gateway][router-gateway-source] |\n| [Router Asset Forwarder][router-forwarder] | [`0x21c1e74caadf990e237920d5515955a024031109`][router-forwarder-mainnet] | - | [Asset Forwarder][router-forwarder-source] |\n| [Router Asset Bridge][router-bridge] | [`0x01b4ce0d48ce91eb6bcaf5db33870c65d641b894`][router-bridge-mainnet] | - | [Asset Bridge][router-bridge-source] |\n```\n\n----------------------------------------\n\nTITLE: Funding the GSN Paymaster Contract\nDESCRIPTION: Command to fund the paymaster contract with 5 native tokens, which will be used to pay for relayed transactions on behalf of users.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/gasless.md#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpx gsn paymaster-fund --network sapphire-testnet --hub 0xc4423AB6133B06e4e60D594Ac49abE53374124b3 --paymaster 0x8C06261f58a024C958d42df89be7195c8690008d --privateKeyHex $PRIVATE_KEY --amount 5000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Celer cBridge Tokens Tables in Markdown\nDESCRIPTION: Tables showing cross-chain token mappings for Celer cBridge on both mainnet and testnet, including source and destination chain addresses.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/addresses.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Source Chain | Token Name | Source Address | Dest. Chain | Dest Address |\n| ------------ | ---------- | -------------- | ----------- | ------------ |\n```\n\n----------------------------------------\n\nTITLE: Checking Paymaster Balance\nDESCRIPTION: Command to check the current balance of the paymaster contract to ensure it has sufficient funds for relaying transactions.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/gasless.md#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpx gsn paymaster-balance --network sapphire-testnet --hub 0xc4423AB6133B06e4e60D594Ac49abE53374124b3  --paymaster 0x8C06261f58a024C958d42df89be7195c8690008d\n```\n\n----------------------------------------\n\nTITLE: Deploying GSN Contracts on Sapphire Testnet\nDESCRIPTION: Command to deploy all GSN relaying contracts including test token and paymaster to the Sapphire testnet using the previously set private key.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/gasless.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpx gsn deploy --network sapphire-testnet --burnAddress 0xfA3AC9f65C9D75EE3978ab76c6a1105f03156204 --devAddress 0xfA3AC9f65C9D75EE3978ab76c6a1105f03156204 --testToken true --testPaymaster true --yes --privateKeyHex $PRIVATE_KEY\n```\n\n----------------------------------------\n\nTITLE: Running Vigil Contract Deployment and Test\nDESCRIPTION: Shell command to deploy and test the Vigil contract on the Sapphire Testnet using a Hardhat task.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/quickstart.mdx#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nPRIVATE_KEY=\"0x...\" npx hardhat full-vigil --network sapphire-testnet\n```\n\n----------------------------------------\n\nTITLE: Deploying Smart Contract to Sapphire Testnet\nDESCRIPTION: Command to deploy the smart contract to Sapphire Testnet using Hardhat. Requires a private key to be provided as an environment variable.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/examples/hardhat-boilerplate/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nPRIVATE_KEY=your_sapphire_private_key_in_hex npx hardhat run scripts/deploy.js --network sapphire-testnet\n```\n\n----------------------------------------\n\nTITLE: Configuring Sapphire-Wagmi for Single Chain (Sapphire Only)\nDESCRIPTION: TypeScript configuration for applications connecting exclusively to Sapphire networks. Sets replaceProviders to true to automatically wrap all EIP-6963 providers with end-to-end encryption.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/integrations/wagmi-v2/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http } from \"wagmi\";\nimport { sapphire, sapphireTestnet } from \"wagmi/chains\";\nimport {\n  sapphireLocalnet,\n  createSapphireConfig,\n} from \"@oasisprotocol/sapphire-wagmi-v2\";\n\nexport const wagmiConfig = createSapphireConfig({\n  sapphireConfig: {\n    replaceProviders: true,\n  },\n  chains: [sapphire, sapphireTestnet, sapphireLocalnet],\n  transports: {\n    [sapphire.id]: http(),\n    [sapphireTestnet.id]: http(),\n    [sapphireLocalnet.id]: http(),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Ethers v6 with Sapphire\nDESCRIPTION: Command to install Ethers v6 and its Sapphire wrapper package.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/browser.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install 'ethers@6.x' '@oasisprotocol/sapphire-ethers-v6'\n```\n\n----------------------------------------\n\nTITLE: Starting the GSN Relay Server\nDESCRIPTION: Command to start a GSN relay server that will relay transactions on behalf of users, using the addresses of previously deployed contracts.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/gasless.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpx gsn relayer-run --relayHubAddress 0xc4423AB6133B06e4e60D594Ac49abE53374124b3 --managerStakeTokenAddress  0x6Ed21672c0c26Daa32943F7b1cA1f1d0ABdbac66 --ownerAddress '0xfA3AC9f65C9D75EE3978ab76c6a1105f03156204' --ethereumNodeUrl 'https://testnet.sapphire.oasis.io' --workdir .\n```\n\n----------------------------------------\n\nTITLE: Configuring Sapphire-Wagmi with EIP-1193 Injected Provider\nDESCRIPTION: TypeScript configuration that uses the injectedWithSapphire connector and sapphireHttpTransport for connecting to Sapphire networks using the EIP-1193 injected provider standard instead of EIP-6963.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/integrations/wagmi-v2/README.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"wagmi\";\nimport { sapphire, sapphireTestnet } from \"wagmi/chains\";\nimport {\n  injectedWithSapphire,\n  sapphireHttpTransport,\n  sapphireLocalnet\n} from \"@oasisprotocol/sapphire-wagmi-v2\";\n\nexport const wagmiConfig = createConfig({\n  multiInjectedProviderDiscovery: false,\n  chains: [sapphire, sapphireTestnet, sapphireLocalnet],\n  connectors: [injectedWithSapphire()],\n  transports: {\n    [sapphire.id]: sapphireHttpTransport(),\n    [sapphireTestnet.id]: sapphireHttpTransport(),\n    [sapphireLocalnet.id]: sapphireHttpTransport()\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Sapphire Ethers.js Wrapper\nDESCRIPTION: Command to add the Sapphire Ethers.js wrapper to your project using pnpm. This installs both ethers v6 and the sapphire integration package.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/integrations/ethers-v6/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add 'ethers@6.x' '@oasisprotocol/sapphire-ethers-v6'\n```\n\n----------------------------------------\n\nTITLE: Registering the GSN Relay Server\nDESCRIPTION: Command to register the relay server with the relay hub by staking the required token, making it available to relay transactions for users.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/gasless.md#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpx gsn relayer-register --network sapphire-testnet --relayUrl 'http://localhost:8090' --token 0x6Ed21672c0c26Daa32943F7b1cA1f1d0ABdbac66 --wrap true --privateKeyHex $PRIVATE_KEY\n```\n\n----------------------------------------\n\nTITLE: Configuring Sapphire Wagmi Integration\nDESCRIPTION: Sets up Wagmi configuration with Sapphire integration for encrypted blockchain interactions. Uses injectedWithSapphire connector and sapphireHttpTransport for handling encrypted transactions and view calls across different Sapphire networks.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/examples/wagmi-v2/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { injectedWithSapphire,\n         sapphireHttpTransport,\n         sapphireLocalnet } from \"@oasisprotocol/sapphire-wagmi-v2\";\n\nexport const config = createConfig({\n\tmultiInjectedProviderDiscovery: false,\n\tchains: [sapphire, sapphireTestnet, sapphireLocalnet],\n\tconnectors: [injectedWithSapphire()],\n\ttransports: {\n\t\t[sapphire.id]: sapphireHttpTransport(),\n\t\t[sapphireTestnet.id]: sapphireHttpTransport(),\n\t\t[sapphireLocalnet.id]: sapphireHttpTransport(),\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Sapphire Chain Configurations\nDESCRIPTION: Example showing how to import chain configurations for Sapphire local testnet, mainnet, and testnet networks\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/integrations/viem-v2/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sapphireLocalnet } from '@oasisprotocol/sapphire-viem-v2';\nimport { sapphire, sapphireTestnet } from 'viem/chains';\n```\n\n----------------------------------------\n\nTITLE: Integrating Ethers v6 with Sapphire\nDESCRIPTION: Code showing how to wrap an Ethers v6 signer with Sapphire's wrapper.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/browser.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BrowserProvider } from 'ethers';\nimport { wrapEthersSigner } from '@oasisprotocol/sapphire-ethers-v6';\n\nconst signer = wrapEthersSigner(\n  new BrowserProvider(window.ethereum).getSigner()\n);\n```\n\n----------------------------------------\n\nTITLE: Calling gas-padded function in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to call a gas-padded function from a smart contract, demonstrating that both calls should use the same amount of gas regardless of the actual computation performed.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/security.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait contract.constantMath(true, 100000);\nawait contract.constantMath(false, 100000);\n```\n\n----------------------------------------\n\nTITLE: Setting Up dAppwright Test Context for Sapphire dApp Testing\nDESCRIPTION: TypeScript code to set up the test context for dAppwright, including launching a browser context with MetaMask extension, adding Sapphire Localnet as a custom network, and extending the test context with wallet functionality.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/dappwright.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BrowserContext, expect, test as baseTest } from '@playwright/test'\nimport dappwright, { Dappwright, MetaMaskWallet } from '@tenkeylabs/dappwright'\n\nexport const test = baseTest.extend<{\n  context: BrowserContext\n  wallet: Dappwright\n}>({\n  context: async ({}, use) => {\n    // Launch context with extension\n    const [wallet, _, context] = await dappwright.bootstrap('', {\n      wallet: 'metamask',\n      version: MetaMaskWallet.recommendedVersion,\n      seed: 'test test test test test test test test test test test junk', // Hardhat's default https://hardhat.org/hardhat-network/docs/reference#accounts\n      headless: false,\n    })\n\n    // Add Sapphire Localnet as a custom network\n    await wallet.addNetwork({\n      networkName: 'Sapphire Localnet',\n      rpc: 'http://localhost:8545',\n      chainId: 23293,\n      symbol: 'ROSE',\n    })\n\n    await use(context)\n  },\n\n  wallet: async ({ context }, use) => {\n    const metamask = await dappwright.getWallet('metamask', context)\n\n    await use(metamask)\n  },\n})\n...\n```\n\n----------------------------------------\n\nTITLE: Tracing a specific transaction with Hardhat\nDESCRIPTION: This command allows tracing a particular transaction using its hash, providing detailed information about the transaction execution.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/security.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx hardhat trace --hash 0xTransactionHash\n```\n\n----------------------------------------\n\nTITLE: Sending a Manually Packaged Transaction with Standard Ethereum Client\nDESCRIPTION: Shows how to send a manually packaged and signed Sapphire transaction using a standard Ethereum client. The transaction is already encrypted and ready for the Sapphire ParaTime.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/clients/go/README.md#2025-04-16_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n_ = c.SendTransaction(ctx, signedTx)\n```\n\n----------------------------------------\n\nTITLE: CI Configuration for Sapphire dApp E2E Testing\nDESCRIPTION: YAML configuration for running dAppwright tests in a CI environment. It includes setting up a Sapphire Localnet service, deploying the backend, running tests with xvfb, and uploading test results on failure.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/dappwright.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nplaywright-test:\n  runs-on: ubuntu-latest\n  services:\n    sapphire-localnet-ci:\n      image: ghcr.io/oasisprotocol/sapphire-localnet:latest\n      ports:\n        - 8545:8545\n        - 8546:8546\n      env:\n        OASIS_DOCKER_START_EXPLORER: no\n      options: >\n        --rm\n        --health-cmd=\"test -f /CONTAINER_READY\"\n        --health-start-period=90s\n\n  steps:\n    - name: Deploy backend\n      working-directory: backend\n      id: deploy\n      run: |\n        echo \"message_box_address=$(pnpm hardhat deploy localhost --network sapphire-localnet | grep -o '0x.*')\" >> $GITHUB_OUTPUT\n\n    - name: Build\n      working-directory: frontend\n      run: pnpm build\n\n    - name: Install Playwright dependencies\n      run: pnpm test:setup\n      working-directory: frontend\n\n    - name: Run playwright tests (with xvfb-run to support headed extension test)\n      working-directory: frontend\n      run: xvfb-run pnpm test\n      env:\n        VITE_MESSAGE_BOX_ADDR: ${{ steps.deploy.outputs.message_box_address }}\n\n    - name: Upload playwright test-results\n      if: ${{ failure() }}\n      uses: actions/upload-artifact@v4\n      with:\n        name: playwright-test-results\n        path: frontend/test-results\n        retention-days: 5\n```\n\n----------------------------------------\n\nTITLE: Manually Packaging and Signing Ethereum Transactions for Sapphire\nDESCRIPTION: Demonstrates how to manually package an existing Ethereum transaction for the Sapphire ParaTime using a custom signer. This approach allows for using existing signing infrastructure with Sapphire.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/clients/go/README.md#2025-04-16_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nsapphireTestnetChainId := 0x5aff // Sapphire Testnet.\npackedTx := sapphire.PackTx(tx, sapphire.NewCipher(sapphireTestnetChainId))\nsignedTx := sign(packedTx) // Using your usual signer.\n```\n\n----------------------------------------\n\nTITLE: Running Local Debug Environment\nDESCRIPTION: Command to build and launch a local debugging environment using Docker and make.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/runtime/README.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmake debug\n```\n\n----------------------------------------\n\nTITLE: Running Hardhat tests with opcode tracing\nDESCRIPTION: This command runs Hardhat tests with verbose output and traces specific EVM opcodes (SSTORE and SLOAD) for analyzing storage access patterns.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/security.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx hardhat test --vvv --opcodes SSTORE,SLOAD\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Sapphire Localnet\nDESCRIPTION: Commands for building and testing the project on Sapphire localnet environment using Make commands.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/examples/hardhat/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake build\nmake test\n```\n\n----------------------------------------\n\nTITLE: Installing Sapphire Python Client Dependencies\nDESCRIPTION: Shell commands for installing the required and development Python packages for the Sapphire ParaTime client, followed by building the package.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/clients/py/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip3 install --user -r requirements.txt\npip3 install --user -r requirements.dev.txt\nmake\n```\n\n----------------------------------------\n\nTITLE: Installing hardhat-tracer for EVM state transition analysis\nDESCRIPTION: This snippet shows how to install the hardhat-tracer package using npm or yarn. The tool is used to examine base EVM state transitions for security analysis.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/security.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D hardhat-tracer\n```\n\n----------------------------------------\n\nTITLE: Building and Testing the Sapphire Compatibility Library\nDESCRIPTION: Command to build and test the Sapphire compatibility library locally. Requires Go version 1.22 or later and the latest compatible go-ethereum version.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/clients/go/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Installing Sapphire Hardhat Plugin\nDESCRIPTION: Command to install the Sapphire Hardhat plugin as a development dependency.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/quickstart.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D @oasisprotocol/sapphire-hardhat\n```\n\n----------------------------------------\n\nTITLE: Building SGX Production Binary\nDESCRIPTION: Commands to build the production SGX binary for deployment, including conversion to SGX format.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/runtime/README.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncargo build --release --target x86_64-fortanix-unknown-sgx --locked\ncargo elf2sgxs --release\n```\n\n----------------------------------------\n\nTITLE: Starting Localnet Sapphire Node in Docker\nDESCRIPTION: Docker command to spin up a local Sapphire node for confidential testing, exposing ports 8545 and 8546 with test mnemonic configuration.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/examples/onchain-signer/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it -p8545:8545 -p8546:8546 ghcr.io/oasisprotocol/sapphire-localnet -test-mnemonic -n 5\n```\n\n----------------------------------------\n\nTITLE: Initializing Hardhat Project\nDESCRIPTION: Command to initialize a new Hardhat project with TypeScript.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/quickstart.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx hardhat init\n```\n\n----------------------------------------\n\nTITLE: Building Mock SGX Binary\nDESCRIPTION: Commands to build an unsafe mock SGX binary for local development and testing, with debug features enabled.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/runtime/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport OASIS_UNSAFE_SKIP_AVR_VERIFY=1 OASIS_UNSAFE_ALLOW_DEBUG_ENCLAVES=1 OASIS_UNSAFE_USE_LOCALNET_CHAINID=1\ncargo build --release --locked --features debug-mock-sgx\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Toolchain\nDESCRIPTION: Commands to install the Rust programming language and its package manager rustup, followed by sourcing the environment variables.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/runtime/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nsource \"$HOME/.cargo/env\"\n```\n\n----------------------------------------\n\nTITLE: Installing Fortanix SGX Tools\nDESCRIPTION: Command to install the required Fortanix SGX development tools using cargo.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/runtime/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo install --locked fortanix-sgx-tools sgxs-tools\n```\n\n----------------------------------------\n\nTITLE: Running Confidential Tests on Localnet\nDESCRIPTION: Command to run tests against the Sapphire localnet network for confidential testing scenarios.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/examples/onchain-signer/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm run test --network sapphire-localnet\n```\n\n----------------------------------------\n\nTITLE: Setting Rust Default Toolchain to Nightly\nDESCRIPTION: Command to set the default Rust toolchain to the nightly version.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/examples/foundry/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrustup default nightly\n```\n\n----------------------------------------\n\nTITLE: Checking Active Rust Toolchain\nDESCRIPTION: Command output showing the active Rust toolchain version and configuration.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/runtime/README.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n...\n\nactive toolchain\n----------------\n\nnightly-nightly-2022-02-16-x86_64-unknown-linux-gnu (overridden by '...')\nrustc 1.60.0-nightly (09cb29c64 2022-02-15)\n```\n\n----------------------------------------\n\nTITLE: Installing Foundry with Bash\nDESCRIPTION: Command to download and install Foundry using a bash script.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/examples/foundry/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://foundry.paradigm.xyz | bash\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies\nDESCRIPTION: Shell commands for installing Foundry and mdbook-pagetoc to generate API documentation locally.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/contracts/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://foundry.paradigm.xyz | bash\ncargo install mdbook-pagetoc\npnpm doc\n```\n\n----------------------------------------\n\nTITLE: Installing Viem with Sapphire\nDESCRIPTION: Command to install Viem and its Sapphire wrapper package.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/browser.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @oasisprotocol/sapphire-viem-v2 viem@2.x\n```\n\n----------------------------------------\n\nTITLE: Setting Up Foundry Environment\nDESCRIPTION: Command to update Foundry to the latest version.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/examples/foundry/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfoundryup\n```\n\n----------------------------------------\n\nTITLE: Installing Sapphire-Viem Dependencies\nDESCRIPTION: Command to install the Sapphire-Viem plugin and its peer dependency Viem version 2.x\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/integrations/viem-v2/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @oasisprotocol/sapphire-viem-v2 viem@2.x\n```\n\n----------------------------------------\n\nTITLE: Creating Hardhat Project Directory\nDESCRIPTION: Commands to create and enter a new directory for the Hardhat project.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/quickstart.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir quickstart && cd quickstart\n```\n\n----------------------------------------\n\nTITLE: Installing OpenGSN Contracts for Smart Contract Development\nDESCRIPTION: Command to install the OpenGSN contracts package which is needed for developing GSN-enabled smart contracts that can receive relayed calls.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/gasless.md#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D @opengsn/contracts@3.0.0-beta.2\n```\n\n----------------------------------------\n\nTITLE: Router Nitro Tokens Mainnet Table in Markdown\nDESCRIPTION: Table listing Router Nitro token addresses on mainnet with their decimal precision, including USDC.e, USDT, WETH, FOUR, and OCEAN tokens.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/addresses.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Token Name                  | Address                                                             | Decimals |\n| --------------------------- | ------------------------------------------------------------------- | -------- |\n```\n\n----------------------------------------\n\nTITLE: Importing Sapphire ParaTime and Go-Ethereum Dependencies\nDESCRIPTION: Import statements required for using the Sapphire compatibility library with go-ethereum. Includes context, ethereum ABI binding, ethclient, and the Sapphire ParaTime client.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/clients/go/README.md#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n\n    \"github.com/ethereum/go-ethereum/accounts/abi/bind\"\n    \"github.com/ethereum/go-ethereum/ethclient\"\n\n    sapphire \"github.com/oasisprotocol/sapphire-paratime/clients/go\"\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCard Component in React JSX\nDESCRIPTION: Demonstrates how to use the DocCard component to reference another documentation page about Ethereum compatibility.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/concept.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCard item={findSidebarItem('/build/sapphire/ethereum')} />\n```\n\n----------------------------------------\n\nTITLE: Installing Sapphire Contracts Package\nDESCRIPTION: Command to install the Sapphire Contracts library using pnpm package manager.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/contracts/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pnpm install @oasisprotocol/sapphire-contracts\n```\n\n----------------------------------------\n\nTITLE: Importing Document Components in React\nDESCRIPTION: Shows how to import DocCard component and utility function for Docusaurus documentation site.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/concept.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCard from '@theme/DocCard';\nimport {findSidebarItem} from '@site/src/sidebarUtils';\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install project dependencies using PNPM package manager within the project directory.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/examples/hardhat-boilerplate/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Python Dependencies for Sapphire ParaTime\nDESCRIPTION: A requirements.txt style list specifying Python package dependencies for the Sapphire ParaTime project. It includes cbor2 for CBOR serialization, pynacl for cryptographic operations, and web3 version 7.x for Ethereum blockchain interaction.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/clients/py/requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncbor2\npynacl\nweb3==7.*\n```\n\n----------------------------------------\n\nTITLE: Running Forge Tests with Verbose Output\nDESCRIPTION: Command to run Forge tests with high verbosity for the Sapphire project.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/examples/foundry/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nforge test -vvv\n```\n\n----------------------------------------\n\nTITLE: Starting Frontend Development Server\nDESCRIPTION: Commands to navigate to the frontend directory and start the development server for the React application.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/examples/hardhat-boilerplate/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd frontend\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: This snippet defines the crawling rules for web robots. It allows all user agents (*) to access any part of the website, as there are no specific disallow rules set.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/examples/hardhat-boilerplate/frontend/public/robots.txt#2025-04-16_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Running Non-Confidential Tests on Hardhat\nDESCRIPTION: Command to execute non-confidential tests using a Hardhat node.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/examples/onchain-signer/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Documentation UI in JSX\nDESCRIPTION: Imports DocCardList component from the Docusaurus theme and a utility function to find sidebar items for the documentation navigation. These components help render the documentation interface.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/README.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {findSidebarItem} from '@site/src/sidebarUtils';\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Cards with DocCardList in JSX\nDESCRIPTION: Uses the DocCardList component to render a list of related documentation resources. This component takes an array of sidebar items to display as cards, providing easy navigation to other relevant documentation sections.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/README.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList items={[\n    findSidebarItem('/build/rofl/'),\n    findSidebarItem('/build/opl/'),\n    findSidebarItem('/node/web3'),\n    findSidebarItem('/build/tools/other-paratimes/'),\n]} />\n```\n\n----------------------------------------\n\nTITLE: Building Sapphire Project with Make\nDESCRIPTION: Command to build the project dependencies and Rust bindings using Make.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/examples/foundry/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake build\n```\n\n----------------------------------------\n\nTITLE: Setting Private Key for GSN Deployment\nDESCRIPTION: Command to export the hex-encoded private key (without 0x prefix) as an environment variable for deploying GSN contracts.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/docs/develop/gasless.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nexport PRIVATE_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Installing Rust with Bash Script\nDESCRIPTION: Command to download and install Rust using the official installation script.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/examples/foundry/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Nightly Toolchain\nDESCRIPTION: Command to install the nightly version of Rust toolchain.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/examples/foundry/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrustup toolchain install nightly\n```\n\n----------------------------------------\n\nTITLE: Documenting Changelog in Markdown\nDESCRIPTION: This snippet shows the structure of the changelog, including version numbers, dates, and categorized changes (e.g., Fixed). It also includes links to GitHub issues and pull requests.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/integrations/viem-v2/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nAll notables changes to this project are documented in this file.\n\nThe format is inspired by [Keep a Changelog].\n\n[Keep a Changelog]: https://keepachangelog.com/en/1.0.0/\n\n## 2.0.1 (2024-09)\n\nhttps://github.com/oasisprotocol/sapphire-paratime/milestone/5\n\n### Fixed\n\n - Viem v2 hangs in Node due to referenced interval timer\n   - https://github.com/oasisprotocol/sapphire-paratime/pull/383\n\n## 2.0.0-next.1 (2024-08)\n\n### Fixed\n\n - Use PNPM to publish packaging, so `workspace:^` links in package.json get translated to their correct versions.\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Changelog entries documenting version releases 2.22.2 and 2.22.2-next.0, including release dates and fixed issues.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/integrations/hardhat/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nAll notables changes to this project are documented in this file.\n\nThe format is inspired by [Keep a Changelog].\n\n[Keep a Changelog]: https://keepachangelog.com/en/1.0.0/\n\n## 2.22.2 (2025-02)\n\nPublish stable V2 integration.\n\n## 2.22.2-next.0 (2024-08)\n\n### Fixed\n\n- Use PNPM to publish packaging, so `workspace:^` links in package.json get translated to their correct versions.\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries in Markdown\nDESCRIPTION: Markdown formatted changelog entries documenting version updates 6.0.1 and 6.0.0-next.1, including dependency changes and fixes.\nSOURCE: https://github.com/oasisprotocol/sapphire-paratime/blob/main/integrations/ethers-v6/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 6.0.1 (2024-09)\n\nhttps://github.com/oasisprotocol/sapphire-paratime/milestone/7?closed=1\n\n - Make `ethers` a non-optional `peerDependency`\n\n## 6.0.0-next.1 (2024-08)\n\n### Fixed\n\n - Use PNPM to publish packaging, so `workspace:^` links in package.json get translated to their correct versions.\n```"
  }
]