[
  {
    "owner": "core-ds",
    "repo": "core-components",
    "content": "TITLE: Rendering Toast Notifications with Anchors and Fixed Positions in React (JSX)\nDESCRIPTION: This snippet shows how to render two types of Toast notifications using React state hooks. One Toast appears adjacent to a dynamically set anchor element (button), and the other displays fixed at the bottom of the screen. It features conditional rendering of buttons, control of Toast visibility, and includes an action button on the fixed Toast. Dependencies include React and the Toast component, with key parameters such as 'open' to control visibility, 'anchorElement' to position the Toast near an element, 'position' and 'offset' to tweak placement, and 'autoCloseDelay' for auto-dismiss timing.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/toast/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [anchorToastOpen, setAnchorToastOpen] = React.useState(false);\n\n    const [fixedToastOpen, setFixedToastOpen] = React.useState(false);\n\n    const [buttonElement, setButtonElement] = React.useState(null);\n\n    const handleButtonRef = (node) => {\n        setButtonElement(node);\n    };\n\n    return (\n        <Space direction='horizontal' size={24}>\n            <Toast\n                breakpoint={BREAKPOINT}\n                open={anchorToastOpen}\n                anchorElement={buttonElement}\n                position='right'\n                offset={[0, 24]}\n                title='Пример уведомления'\n                hasCloser={false}\n                block={false}\n                onClose={() => {\n                    setAnchorToastOpen(false);\n                }}\n                autoCloseDelay={1500}\n            />\n            <Toast\n                breakpoint={BREAKPOINT}\n                open={fixedToastOpen}\n                badge='positive-checkmark'\n                title='Пример уведомления с кнопкой и крестиком'\n                hasCloser={true}\n                bottomButtonPosition={isMobile()}\n                onClose={() => {\n                    setFixedToastOpen(false);\n                }}\n                autoCloseDelay={3000}\n                actionButton={\n                    <Button\n                        breakpoint={BREAKPOINT}\n                        size={isMobile() ? 'xs' : 's'}\n                        view='ghost'\n                        colors='inverted'\n                        onClick={() => {\n                            setFixedToastOpen(false);\n                        }}\n                    >\n                        Отменить\n                    </Button>\n                }\n                style={{ left: !isMobile() && '20%' }}\n            />\n            <Button\n                breakpoint={BREAKPOINT}\n                onClick={() => {\n                    setFixedToastOpen(true);\n                }}\n            >\n                Показать снизу\n            </Button>\n            {!isMobile() && (\n                <Button\n                    breakpoint={BREAKPOINT}\n                    ref={handleButtonRef}\n                    onClick={() => {\n                        setAnchorToastOpen(true);\n                    }}\n                >\n                    Показать рядом\n                </Button>\n            )}\n        </Space>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Step SidePanel with React core-components in JSX\nDESCRIPTION: This snippet defines a multi-step side panel component using React with core-components. It maintains panel open state and a step indicator using React.useState, and renders dynamic header, content, and footer based on the current step. Dependencies include React, core-components such as SidePanel, Button, and Container. Key parameters are DATA (steps configuration), step (current workflow step), and open (panel visibility). The panel displays content and navigation buttons for each step and supports both forward and backward navigation, with UI adapted for smaller mobile screens. Inputs are user actions (button clicks), outputs are rendered panel states. Limitations include hardcoded data and inline styling for demonstration purposes.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/side-panel/src/docs/description.mdx#_snippet_12\n\nLANGUAGE: JSX\nCODE:\n```\nconst DATA = {\n    1: {\n        title: 'Первый уровень',\n        btnText: 'Дальше',\n        bg: 'rgba(55, 120, 251, 0.1)',\n        color: '#3778FB',\n    },\n    2: {\n        title: 'Второй уровень',\n        btnText: 'Дальше',\n        bg: 'rgba(207, 112, 255, 0.1)',\n        color: '#CF70FF',\n    },\n    3: {\n        title: 'Третий уровень',\n        btnText: 'Готово',\n        bg: 'rgba(112, 255, 126, 0.1)',\n        color: '#058102',\n    },\n};\n\nrender(() => {\n    const [step, setStep] = React.useState(1);\n    const [open, setOpen] = React.useState(false);\n\n    const handleOpen = () => {\n        setOpen(true);\n        setStep(1);\n    };\n    const handleClose = () => setOpen(false);\n\n    const item = DATA[step];\n\n    const commonStyles = {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        transition: 'background 0.2s ease-in, border 0.2s ease-in',\n        borderRadius: '8px',\n        background: item.bg,\n        border: `1px dashed ${item.color}`,\n        color: item.color,\n        width: '100%',\n        boxSizing: 'border-box',\n    };\n\n    return (\n        <Container>\n            <Button size={document.body.clientWidth < 450 ? 'm' : 's'} onClick={handleOpen}>\n                Открыть сайд панель\n            </Button>\n\n            <SidePanel open={open} onClose={handleClose}>\n                <SidePanel.Header\n                    sticky={true}\n                    hasCloser={true}\n                    hasBackButton={step !== 1}\n                    title={item.title}\n                    onBack={() => setStep(step - 1)}\n                />\n                <SidePanel.Content flex={true}>\n                    <div\n                        style={{\n                            ...commonStyles,\n                            height: '100%',\n                        }}\n                    >\n                        <span style={{ fontWeight: 700, fontSize: '72px' }}>{step}</span>\n                    </div>\n                </SidePanel.Content>\n                <SidePanel.Footer sticky={true}>\n                    <Button\n                        size={document.body.clientWidth < 450 ? 'm' : 's'}\n                        view='primary'\n                        onClick={\n                            item.btnText === DATA[1].btnText ? () => setStep(step + 1) : handleClose\n                        }\n                    >\n                        {item.btnText}\n                    </Button>\n                </SidePanel.Footer>\n            </SidePanel>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Controlling Collapse Expanded State with React Hooks (JSX)\nDESCRIPTION: This snippet illustrates how to manage the expanded state of the Collapse component externally using React hooks such as useState. User interactions update the 'expanded' and 'loaded' states to control when additional content is shown and when a loading skeleton is displayed. Dependencies include React for state management, the Collapse and Typography components for content, Gap for spacing, and Link for interactive toggling; the isMobile utility is used for responsiveness. The key parameters are 'expanded', reflecting the open/closed state, and 'showSkeleton', which activates a placeholder loading effect. Inputs are user click events, and outputs are dynamic updates to the component rendering. The pattern is suitable for interactive UIs where content expansion and loading indicators are required.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/collapse/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nrender(() => {\n    const [expanded, setExpanded] = React.useState(false);\n    const [loaded, setLoaded] = React.useState(false);\n\n    const handleToggle = () => {\n        if (!expanded) {\n            setLoaded(true);\n            setTimeout(() => setLoaded(false), 2000);\n        }\n        setExpanded(!expanded);\n    };\n\n    return (\n        <div style={{width: isMobile() ? 320: 460}}>\n            <Typography.TitleResponsive font='system' view='medium'>\n                Почему банк проверяет мои операции?  \n            </Typography.TitleResponsive>\n            <Gap size='m'/>\n            <Typography.Text font='system' view='primary-medium'>\n                В 2001 году в России начал действовать Федеральный закон №115 «О противодействии легализации доходов, \n                полученных преступным путём, и финансированию терроризма».\n                В рамках закона банки могут блокировать карты, отказывать в проведении сомнительных операций, \n                ограничить доступ в интернет-банк или запрашивать документы, если по операции клиента возникли подозрения. \n            </Typography.Text>\n            <Gap size='m'/>\n            <Collapse expanded={expanded}>\n                <Typography.Text \n                    font='system' \n                    view='primary-medium' \n                    showSkeleton={loaded} \n                >\n                    Требования 115-ФЗ и связанных с ним документов Банка России часто меняются, \n                    предприниматели не всегда успевают за ними следить.\n                    Последствия нарушений «антиотмывочного» законодательства всегда неприятны: \n                    приходится остановить бизнес-процессы и доказать банку законность операций. \n                    Специалисты «Альфа-банка» собрали понятные рекомендации, как сэкономить время на объяснения и предотвратить блокировки.\n                </Typography.Text>\n                <Gap size='m'/>\n            </Collapse>\n            <Typography.Text view='primary-medium'>\n                <Link pseudo={true} view='secondary' onClick={handleToggle}>\n                    {expanded ? 'Скрыть' : 'Подробнее'}\n                </Link>\n            </Typography.Text>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Number Input with Immediate Feedback in React - JavaScript\nDESCRIPTION: This snippet demonstrates two input components for entering numeric values with real-time validation in React. The first, NumberInput, maintains state and immediately shows an error if non-digit characters are entered, using a regular expression for validation. The second, MaskedNumberInput, leverages a mask to restrict entry to only digits. Both use controlled components and require React and appropriate Input/MaskedInput components as dependencies. The render section displays both inputs side by side for comparison.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/validation.stories.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst NumberInput = () => {\n    const [value, setValue] = React.useState('');\n    const [error, setError] = React.useState();\n\n    const handleChange = (e) => {\n        const inputValue = e.target.value;\n        setValue(inputValue);\n\n        if (!/^\\d*$/.test(inputValue)) {\n            setError('Введено недопустимое значение');\n        } else {\n            setError(false);\n        }\n    };\n\n    return (\n        <Input\n            value={value}\n            onChange={handleChange}\n            size='m'\n            block={true}\n            placeholder='Мгновенная валидация'\n            error={error}\n        />\n    );\n};\n\nconst MaskedNumberInput = () => {\n    const [value, setValue] = React.useState('');\n\n    return (\n        <MaskedInput\n            value={value}\n            onChange={(e) => setValue(e.target.value)}\n            size='m'\n            block={true}\n            placeholder='Маска'\n            mask={(rawValue) => new Array(rawValue.length).fill(/\\d/)}\n        />\n    );\n};\n\nrender(() => {\n    return (\n        <div style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}>\n            <NumberInput />\n            <Gap size='m' />\n            <MaskedNumberInput />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing InputAutocomplete Components with React (JSX)\nDESCRIPTION: This snippet demonstrates how to import InputAutocomplete, InputAutocompleteDesktop, and InputAutocompleteMobile components from the @alfalab/core-components library using ES6 import syntax. Dependencies include the @alfalab/core-components package. These imports enable the use of respective components for desktop and mobile input autocomplete interfaces in a React application.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/input-autocomplete/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { InputAutocomplete } from '@alfalab/core-components/input-autocomplete';\nimport { InputAutocompleteDesktop } from '@alfalab/core-components/input-autocomplete/desktop';\nimport { InputAutocompleteMobile } from '@alfalab/core-components/input-autocomplete/mobile';\n```\n\n----------------------------------------\n\nTITLE: Implementing a Toggleable BaseModal with Button in React\nDESCRIPTION: This React JSX snippet demonstrates how to create a modal dialog using the `BaseModal` component. It uses the `useState` hook to manage the modal's visibility state (`open`). A `Button` component is configured to call `handleModalOpen` on click, which toggles the `open` state. The `BaseModal` component is conditionally rendered based on the `open` state and uses `handleModalOpen` as its `onClose` handler. It depends on React, Button, BaseModal components, and potentially helper functions/constants like `isMobile` and `BREAKPOINT`.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/base-modal/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [open, setOpen] = React.useState(false);\n    const handleModalOpen = () => setOpen(!open);\n\n    return (\n        <>\n            <Button \n                size='m' \n                onClick={handleModalOpen} \n                block={isMobile()} \n                breakpoint={BREAKPOINT}\n            >\n                Показать BaseModal\n            </Button>\n\n            <BaseModal open={open} onClose={handleModalOpen}>\n                <div style={{ padding: '100px' }}>BaseModal</div>\n            </BaseModal>\n        </>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: React PassCode Component for PIN Entry and Validation\nDESCRIPTION: This snippet implements a React component that allows users to input a PIN code, validates the code against a predefined value, and manages various UI states such as initial input, success confirmation, and error handling. Key dependencies include React hooks and UI components for buttons, typography, and icons. It handles input validation, user feedback, and layout adjustments for mobile screens.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pass-code-v1/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst VALID_CODE = '0451';\nconst MAX_LENGTH = VALID_CODE.length;\nconst SCREENS = {\n    INITIAL: 'initial',\n    ENTER_CODE: 'ENTER_CODE',\n    SUCCESS: 'success',\n};\n\nrender(() => {\n    const [screen, setScreen] = React.useState(SCREENS.INITIAL);\n    const [error, setError] = React.useState(false);\n    const [code, setCode] = React.useState('');\n    const [passCodeParams, setPassCodeParams] = React.useState();\n\n    const validate = (codeToValidate) => {\n        if (codeToValidate !== VALID_CODE) {\n            setTimeout(() => setError('Error message'), 300);\n            setTimeout(() => {\n                setError((prev) => {\n                    if (prev) {\n                        setCode('');\n                        return false;\n                    }\n\n                    return prev;\n                });\n            }, 1300);\n\n            return;\n        }\n\n        setTimeout(() => setScreen(SCREENS.SUCCESS), 500);\n    };\n\n    const handleChange = (value) => {\n        setCode(value);\n        setError(false);\n\n        if (passCodeParams.codeLength > 0 && value.length === MAX_LENGTH) {\n            validate(value);\n        }\n    };\n\n    if (screen === SCREENS.INITIAL) {\n        return (\n            <>\n                <Button\n                    block\n                    onClick={() => {\n                        setPassCodeParams({\n                            codeLength: MAX_LENGTH,\n                            message: 'Введите код из четырёх цифр',\n                        });\n                        setScreen(SCREENS.ENTER_CODE);\n                    }}\n                >\n                    Код из четырех цифр\n                </Button>\n                <Gap size='m' />\n                <Button\n                    block\n                    onClick={() => {\n                        setPassCodeParams({ maxCodeLength: 12 });\n                        setScreen(SCREENS.ENTER_CODE);\n                    }}\n                >\n                    Длина кода неизвестна заранее\n                </Button>\n            </>\n        );\n    }\n\n    if (screen === SCREENS.SUCCESS) {\n        return (\n            <div style={{ display: 'flex', flexFlow: 'column nowrap', height: 600 }}>\n                <Gap size='xl' />\n                <Gap size='8xl' />\n                <div\n                    style={{\n                        display: 'flex',\n                        flexFlow: 'column nowrap',\n                        alignItems: 'center',\n                        justifyContent: 'space-between',\n                        flex: 1,\n                    }}\n                >\n                    <div style={{ textAlign: 'center' }}>\n                        <SuperEllipse\n                            size={80}\n                            backgroundColor='var(--color-light-status-positive)'\n                        >\n                            <CheckmarkMIcon style={{ fill: '#fff' }} />\n                        </SuperEllipse>\n\n                        <Gap size='m' />\n\n                        <Typography.Text view='primary-medium' weight='bold'>\n                            Введён корректный код\n                        </Typography.Text>\n                    </div>\n\n                    <Button\n                        block\n                        onClick={() => {\n                            setScreen(SCREENS.INITIAL);\n                            setError(false);\n                            setCode('');\n                        }}\n                    >\n                        Попробовать ещё раз\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexFlow: 'column nowrap',\n                justifyContent: 'space-between',\n                height: 600,\n            }}\n        >\n            <PassCodeV1 {...passCodeParams} value={code} onChange={handleChange} error={error} />\n\n            {passCodeParams.maxCodeLength > 0 && (\n                <Button block view='primary' onClick={() => validate(code)}>\n                    Продолжить\n                </Button>\n            )}\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Accessible Semantic HTML Tables with <table> Element in HTML\nDESCRIPTION: This snippet demonstrates how to create an accessible table using semantic HTML tags. It uses the <table> element with a <caption> to provide a descriptive title, <thead> and <tbody> to structure header and body rows, and sets the scope attribute on <th> elements to associate headers correctly with data cells. These attributes enhance screen reader support and ensure proper interpretation of table structure. No external dependencies are required.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/tables.stories.mdx#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\\n    <caption>\\n        Список студентов курса\\n    </caption>\\n    <thead>\\n        <tr>\\n            <th scope=\\\"col\\\">№ строки</th>\\n            <th scope=\\\"col\\\">ФИО</th>\\n            <th scope=\\\"col\\\">Дата рождения</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <th scope=\\\"row\\\">1</th>\\n            <th>Иванов Иван Иванович</th>\\n            <th>01.01.2000</th>\\n        </tr>\\n    </tbody>\\n</table>\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkboxes with Different Sizes in React\nDESCRIPTION: This snippet demonstrates Checkbox components with two different sizes (24px and 20px). It includes interactive controls for toggling error states, hints, and disabled states. The component allows users to handle checkbox state changes via the onChange handler.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/checkbox/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [checked, setChecked] = React.useState({\n        checkbox_24: true,\n        checkbox_20: true,\n    });\n\n    const [switchChecked, setSwitchChecked] = React.useState(true);\n    const [error, setError] = React.useState(false);\n    const [disabled, setDisabled] = React.useState(false);\n\n    const handleChange = (name) => (event) => {\n        setChecked((prevState) => ({\n            ...prevState,\n            [name]: event.target.checked,\n        }));\n    };\n\n    return (\n        <React.Fragment>\n            <div\n                style={{\n                    width: document.body.clientWidth < 450 ? '100%' : 320,\n                    minHeight: '108px',\n                }}\n            >\n                <div style={{ minHeight: '46px' }}>\n                    <Checkbox\n                        block={true}\n                        size={24}\n                        onChange={handleChange('checkbox_24')}\n                        checked={checked.checkbox_24}\n                        disabled={disabled}\n                        label='Согласен с условиями'\n                        {...(switchChecked && { hint: 'И внимательно их прочитал' })}\n                        {...(error && { error: 'Error message' })}\n                    />\n                </div>\n                <Gap size='20' />\n                <div style={{ marginLeft: '8px' }}>\n                    <Checkbox\n                        block={true}\n                        size={20}\n                        onChange={handleChange('checkbox_20')}\n                        checked={checked.checkbox_20}\n                        disabled={disabled}\n                        label='Согласен с условиями'\n                        {...(switchChecked && { hint: 'И внимательно их прочитал' })}\n                        {...(error && { error: 'Error message' })}\n                    />\n                </div>\n            </div>\n            <Gap size='20' />\n            <Divider />\n            <Gap size='20' />\n            <Switch\n                block={true}\n                checked={switchChecked}\n                label='Подпись под лейблом'\n                onChange={() => setSwitchChecked((prevState) => !prevState)}\n            />\n            <Gap size='20' />\n\n            <Button view='secondary' size='32' onClick={() => setError((prevState) => !prevState)}>\n                Ошибка\n            </Button>\n            <span style={{ marginLeft: '8px' }}>\n                <Button\n                    view='secondary'\n                    size='32'\n                    onClick={() => setDisabled((prevState) => !prevState)}\n                >\n                    Заблокирован\n                </Button>\n            </span>\n        </React.Fragment>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Single Selection with SelectDesktop and SelectMobile in JSX\nDESCRIPTION: Demonstrates a single selection pattern using React JSX. It defines a set of options and renders a SelectDesktop component on desktop with immediate closure on selection. For mobile, it maintains the selected state using React.useState and updates selection via onChange handler. Dependencies include React, SelectDesktop, SelectMobile, and BaseOption components. Inputs are option arrays and user selection events; output is the selected option key. The code supports unselecting options and uses a placeholder and label for UI clarity.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/select/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst OPTIONS = [\n    { key: '1', content: 'Neptunium' },\n    { key: '2', content: 'Plutonium' },\n    { key: '3', content: 'Americium' },\n    { key: '4', content: 'Curium' },\n    { key: '5', content: 'Berkelium' },\n    { key: '6', content: 'Californium' },\n    { key: '7', content: 'Einsteinium' },\n    { key: '8', content: 'Fermium' },\n];\n\nrender(() => {\n    return (\n        <div style={{ width: 320 }}>\n            <SelectDesktop\n                allowUnselect={true}\n                size={56}\n                options={OPTIONS}\n                placeholder='Выберите элемент'\n                label='Одиночный выбор'\n                Option={BaseOption}\n                block={true}\n            />\n        </div>\n    );\n});\n\n//MOBILE\nconst OPTIONS = [\n    { key: '1', content: 'Neptunium' },\n    { key: '2', content: 'Plutonium' },\n    { key: '3', content: 'Americium' },\n    { key: '4', content: 'Curium' },\n    { key: '5', content: 'Berkelium' },\n    { key: '6', content: 'Californium' },\n    { key: '7', content: 'Einsteinium' },\n    { key: '8', content: 'Fermium' },\n];\n\nrender(() => {\n    const [selected, setSelected] = React.useState();\n\n    const handleChange = ({ selected }) => {\n        setSelected(selected);\n    };\n\n    return (\n        <div style={{ width: '100%' }}>\n            <SelectMobile\n                allowUnselect={true}\n                options={OPTIONS}\n                placeholder='Выберите элемент'\n                label='Одиночный выбор'\n                Option={BaseOption}\n                block={true}\n                selected={selected}\n                onChange={handleChange}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Group with Custom Fields for Selection in React\nDESCRIPTION: This code demonstrates how to create a filter group with single selection, multiple selection, and date range filters in React. It includes custom field components, state management, and various event handlers for filter interactions.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/filter-tag/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Одиночный выбор\nconst CustomField = ({\n    label,\n    selected,\n    setSelectedItems,\n    innerProps: { ref, ...restInnerProps },\n    ...restProps\n}) => {\n    const checkedContent = (\n        <span>\n            {!label && 'Одиночный выбор:'}\n            <b> {selected && selected.content}</b>\n        </span>\n    );\n\n    const contentLabel = <span>Одиночный выбор</span>;\n\n    return (\n        <div ref={ref}>\n            <FilterTag\n                onClear={() => setSelectedItems([])}\n                checked={selected}\n                {...restInnerProps}\n                {...restProps}\n            >\n                {selected ? checkedContent : contentLabel}\n            </FilterTag>\n        </div>\n    );\n};\n\n// Множественный выбор\nconst CustomFieldMultiple = ({\n    label,\n    selected,\n    setSelectedItems,\n    selectedMultiple,\n    innerProps: { ref, ...restInnerProps },\n    ...restProps\n}) => {\n    const content = selected && selected.content;\n\n    const checkedContent = (\n        <span>\n            {!label && 'Множественный выбор:'}\n            <b>\n                {' '}\n                {selectedMultiple.length !== 1 ? `Выбрано: ${selectedMultiple.length}` : content}\n            </b>\n        </span>\n    );\n\n    const contentLabel = <span>Множественный выбор</span>;\n\n    return (\n        <div ref={ref}>\n            <FilterTag\n                onClear={() => setSelectedItems([])}\n                checked={selected}\n                {...restInnerProps}\n                {...restProps}\n            >\n                {selected ? checkedContent : contentLabel}\n            </FilterTag>\n        </div>\n    );\n};\n\nrender(() => {\n    const options = React.useMemo(\n        () => [\n            { key: '1', content: 'Aurum' },\n            { key: '2', content: 'Bercelium' },\n            { key: '3', content: 'Curium' },\n            { key: '4', content: 'Neptunium' },\n            { key: '5', content: 'Plutonuim' },\n        ],\n        [],\n    );\n\n    const [label, setLabel] = React.useState(false);\n\n    const [selected, setSelected] = React.useState([]);\n\n    const handleChangeSelected = ({ selectedMultiple }) => {\n        setSelected(selectedMultiple);\n    };\n\n    const [selectedMultiple, setSelectedMultiple] = React.useState([]);\n    const handleChangeMultiple = ({ selectedMultiple }) => {\n        setSelectedMultiple(selectedMultiple.map((option) => option.key));\n    };\n\n    // Диапазон значений\n    const [filterTag, setFilterTag] = React.useState(null);\n    const [open, setOpen] = React.useState(false);\n    const [value, setValue] = React.useState();\n    const { selectedFrom, selectedTo, updatePeriod } = usePeriod();\n\n    const handleOpen = () => {\n        setOpen(!open);\n    };\n\n    const handleClear = () => {\n        setOpen(false);\n        updatePeriod(null, null);\n    };\n\n    const handleUpdatePeriodr = (date) => {\n        updatePeriod(date);\n\n        if (selectedFrom) {\n            setOpen(false);\n        }\n    };\n\n    const handleFilterTagRef = (node) => {\n        setFilterTag(node);\n    };\n\n    const handleBlur = (ref, handleClick) => {\n        React.useEffect(() => {\n            const listener = (event) => {\n                if (ref.current && !ref.current.contains(event.target)) {\n                    handleClick(event);\n                }\n            };\n\n            document.addEventListener('mousedown', listener);\n            document.addEventListener('touchstart', listener);\n\n            return () => {\n                document.removeEventListener('mousedown', listener);\n                document.removeEventListener('touchstart', listener);\n            };\n        }, [ref, handleClick]);\n    };\n    const calendarRef = React.useRef(null);\n\n    handleBlur(calendarRef, (event) => {\n        if (filterTag && !filterTag.contains(event.target)) {\n            handleOpen();\n        }\n    });\n\n    const getDateString = React.useCallback((date) => {\n        const day = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate();\n        const month = date.getMonth() + 1 < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1;\n        const year = date.getFullYear();\n\n        return `${day}.${month}.${year}`;\n    }, []);\n\n    const selectedRange = React.useMemo(() => {\n        if (selectedFrom && selectedTo) {\n            const selectedFromDate = new Date(selectedFrom);\n            const selectedToDate = new Date(selectedTo);\n            return `${getDateString(selectedFromDate)} – ${getDateString(selectedToDate)}`;\n        }\n        return '';\n    }, [selectedFrom, selectedTo]);\n\n    const checkedContent = (\n        <span>\n            {!label && 'Диапазон значений:'}\n            <b> {selectedRange && selectedRange}</b>\n        </span>\n    );\n    const content = <span>Диапазон значений</span>;\n\n    const css = `\n        div {\n            border-radius: var(--border-radius-8);\n        }\n    `;\n\n    return (\n        <>\n            <SelectDesktop\n                allowUnselect={true}\n                popoverPosition='bottom-start'\n                options={options}\n                Field={CustomField}\n                onChange={handleChangeSelected}\n                selected={selected}\n                Option={BaseOption}\n                label={label}\n                fieldProps={{ size: 32 }}\n            />\n            <Gap size='m' />\n            <SelectDesktop\n                allowUnselect={true}\n                popoverPosition='bottom-start'\n                options={options}\n                Field={CustomFieldMultiple}\n                onChange={handleChangeMultiple}\n                selected={selectedMultiple}\n                multiple={true}\n                label={label}\n                fieldProps={{ size: 32 }}\n            />\n            <Gap size='m' />\n            <Popover\n                anchorElement={filterTag}\n                offset={[0, 4]}\n                open={open}\n                preventFlip={true}\n                position='bottom-start'\n            >\n                <style>{css}</style>\n                <Calendar\n                    ref={calendarRef}\n                    responsive={true}\n                    value={value}\n                    selectedFrom={selectedFrom}\n                    selectedTo={selectedTo}\n                    onChange={handleUpdatePeriodr}\n                    selectorView='month-only'\n                />\n            </Popover>\n\n            <FilterTag\n                ref={handleFilterTagRef}\n                size={32}\n                onClick={handleOpen}\n                onClear={handleClear}\n                checked={selectedRange}\n                open={open}\n            >\n                {selectedRange ? checkedContent : content}\n            </FilterTag>\n            <Gap size='m' />\n            <Switch\n                block={true}\n                checked={label}\n                label='Скрывать лейбл после выбора'\n                onChange={() => setLabel(!label)}\n            />\n        </>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Using appropriate input types in HTML5 forms for accessibility\nDESCRIPTION: This snippet demonstrates the use of native HTML5 input types such as email, url, number, and date to improve input semantics and accessibility, while cautioning against over-reliance on simple text inputs for specialized data.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/forms.stories.mdx#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n⛔ Плохо\n<label>\n    Введите номер телефона\n    <input type=\"text\" />\n</label>\n\n⛔ Не очень\n<label>\n    Введите номер телефона в формате +7 XXX XX-XX-XX\n    <input type=\"text\" />\n</label>\n\n✅ Хорошо\n<PhoneInput\n    label=\"Введите номер телефона\"\n    title=\"Российский номер телефона в формате +7 XXX XX-XX-XX\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring NumberInput Component with Separator and Fraction Length in React JSX\nDESCRIPTION: This snippet implements a NumberInput React component allowing users to input integers and decimals with configurable decimal separators (comma or dot) and fractional part length (unlimited or 2 digits). It uses React state hooks to manage input value, separator type, and fractional length controls. Key props include 'separator' for decimal delimiter and 'fractionLength' to limit decimal places. The snippet adapts layout for mobile devices and includes RadioGroup components for user configuration. It expects numeric input and returns updated controlled values. Dependencies include React, NumberInput, RadioGroup, Radio, Gap, and utility functions like isMobile and BREAKPOINT constants.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/number-input/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [value, setValue] = React.useState(null);\n\n    const [separator, setSeparator] = React.useState(',');\n    const [fractionLengthRadioValue, setFractionLengthRadioValue] = React.useState('notLimited');\n\n    const handleChange = (_, payload) => {\n        setValue(payload.value);\n    };\n\n    const handleSeparatorChange = (_, payload) => {\n        setSeparator(payload.value);\n        setValue(null);\n    };\n\n    const handleFractionLengthRadioChange = (_, payload) => {\n        setFractionLengthRadioValue(payload.value);\n        setValue(null);\n    };\n\n    return (\n        <div style={{ width: isMobile() ? '100%' : 320 }}>\n            <NumberInput\n                value={value}\n                block={true}\n                onChange={handleChange}\n                placeholder='Введите число'\n                label='Число'\n                labelView={isMobile() ? 'outer' : 'inner'}\n                separator={separator}\n                fractionLength={fractionLengthRadioValue === 'limited' ? 2 : undefined}\n                size={isMobile() ? 48 : 56}\n                clear={true}\n                onClear={() => setValue(null)}\n                breakpoint={BREAKPOINT}\n            />\n            <Gap size='xl' />\n            <RadioGroup\n                label='Отделять дробную часть'\n                direction='vertical'\n                name='radioGroupFirst'\n                onChange={handleSeparatorChange}\n                value={separator}\n            >\n                <Radio label='Запятой' value=',' />\n                <Radio label='Точкой' value='.' />\n            </RadioGroup>\n            <Gap size='xl' />\n            <RadioGroup\n                label='Длина дробной части'\n                direction='vertical'\n                name='radioGroupSecond'\n                onChange={handleFractionLengthRadioChange}\n                value={fractionLengthRadioValue}\n            >\n                <Radio label='Не ограничена' value='notLimited' />\n                <Radio label='2 знака' value='limited' />\n            </RadioGroup>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SliderInput States\nDESCRIPTION: This snippet showcases how to configure the states (error, disabled) of the SliderInput component. It also demonstrates using a custom formatter to display currency values on the slider pips. The example defines a `formatAmountSimple` function to format numeric values as currency. It then uses React useState hooks to manage the slider value and properties for different states, updating them based on button clicks.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/slider-input/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst formatAmountSimple = (() => {\n    const formatter = new Intl.NumberFormat('ru-RU', {\n        style: 'currency',\n        currency: 'RUB',\n    });\n\n    return (value) => (value ? formatter.format(value).slice(0, -5) : '');\n})();\n\nconst min = 100000;\nconst max = 300000;\nconst pips = {\n    mode: 'values',\n    values: [min, max - min, max],\n    format: {\n        to: (value) => formatAmountSimple(value),\n    },\n};\n\nrender(() => {\n    const [value, setValue] = React.useState(150000);\n    const [props, setProps] = React.useState({});\n\n    return (\n        <div style={{ width: '100%' }}>\n            <div style={{ width: isMobile() ? '100%' : 320 }}>\n                <SliderInput\n                    value={formatAmountSimple(value)}\n                    sliderValue={value}\n                    label='Label'\n                    labelView={isMobile() ? 'outer' : 'inner'}\n                    size={isMobile() ? 48 : 56}\n                    pips={pips}\n                    min={min}\n                    max={max}\n                    step={1000}\n                    block={true}\n                    onChange={(_, { value }) => setValue(value)}\n                    breakpoint={BREAKPOINT}\n                    {...props}\n                />\n            </div>\n            <Gap size='xl' />\n\n            <Space direction='horizontal' wrap={true}>\n                <Button onClick={() => setProps({})} size={32} view='secondary'>\n                    По умолчанию\n                </Button>\n                <Button onClick={() => setProps({ error: 'Error' })} size={32} view='secondary'>\n                    Ошибка\n                </Button>\n                <Button\n                    onClick={() => setProps({ disabled: true, hint: 'Hint' })}\n                    size={32}\n                    view='secondary'\n                >\n                    Заблокирован\n                </Button>\n            </Space>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing configurable SidePanel with different presets in React\nDESCRIPTION: A comprehensive example of a SidePanel component with configurable header, footer, positioning, and scrollbar options. The component includes text content, collapsible sections, and various interactive controls to demonstrate common use cases.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/side-panel/src/docs/description.mdx#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nconst Text = () => (\n    <>\n        <Typography.Text tag='p'>\n            В 2001 году в России начал действовать Федеральный закон №115 «О противодействии\n            легализации доходов, полученных преступным путём, и финансированию терроризма». В рамках\n            закона банки могут блокировать карты, отказывать в проведении сомнительных операций,\n            ограничить доступ в интернет-банк или запрашивать документы, если по операции клиента\n            возникли подозрения.\n        </Typography.Text>\n        <br />\n        <Typography.Text tag='p'>\n            Требования 115-ФЗ и связанных с ним документов Банка России часто меняются,\n            предприниматели не всегда успевают за ними следить. Последствия нарушений\n            «антиотмывочного» законодательства всегда неприятны: приходится остановить\n            бизнес-процессы и доказать банку законность операций. Специалисты «Альфа-банка» собрали\n            понятные рекомендации, как сэкономить время на объяснения и предотвратить блокировки\n        </Typography.Text>\n        <Collapse collapsedLabel='Подробнее' expandedLabel='Скрыть'>\n            <Typography.Text tag='p'>\n                115-ФЗ Касается всех предпринимателей, фирм и физлиц, а также тех, кто пользуется\n                банковским счётом для бизнеса, крупных денежных переводов или личных расчётов.\n                Ограничения интернет-банка, блокировка карт добросовестных компаний могут произойти\n                из-за неправильно оформленных документов, ошибок в платёжке или попыток снизить\n                налоги.\n            </Typography.Text>\n            <br />\n            <Typography.Text tag='p'>\n                Клиенты воспринимают ограничения как атаку со стороны банка, но чаще всего сами\n                допускают ошибки или нарушения, которых можно избежать. Банки не преследуют цели\n                доставить неудобства клиентам — они обязаны соблюдать законодательство и следовать\n                инструкциям и рекомендациям ЦБ, а в противном случае рискуют лишиться лицензии.\n            </Typography.Text>\n            <br />\n            <Typography.Text tag='p'>\n                Обналичивание — сомнительные операции, когда юрлицо или предприниматель снимает со\n                счёта более 80% от оборота или переводит деньги на счета физлиц, которые затем\n                снимают в наличной форме.\n            </Typography.Text>\n            <br />\n            <Typography.Text tag='p'>\n                Вывод капитала за границу — это переводы нерезидентам по договорам об импорте\n                работ/услуг и результатов интеллектуальной деятельности, по которым проведение\n                расчётов осуществляется без одновременной уплаты НДС; по сделкам купли-продажи\n                ценных бумаг, а также товаров, которые не пересекают границу России.\n            </Typography.Text>\n            <br />\n            <Typography.Text tag='p'>\n                Транзитные операции — операции, в процессе которых деньги поступают на счёт компании\n                от других резидентов и списываются в короткие сроки. При этом, как правило, в этих\n                случаях по счёту нет начислений зарплат, уплаты налогов, и они не соответствуют\n                заявленному компанией виду деятельности.\n            </Typography.Text>\n            <br />\n            <Typography.Text tag='p'>\n                Запрашивать могут любые документы и устанавливать разные сроки их предоставления —\n                это зависит от службы контроля конкретного банка. Обычно банки запрашивают чеки,\n                счета или договора с контрагентами. В некоторых случаях бывает достаточно устных\n                объяснений. Для проверки информации и пересмотра уровня риска банк может пригласить\n                клиента в банк для устного разъяснения или выехать по месту ведения бизнеса клиента.\n            </Typography.Text>\n        </Collapse>\n    </>\n);\n\nconst HEADER_SETTINGS = [\n    { label: 'Заголовок', name: 'hasTitle' },\n    { label: 'Крестик', name: 'hasCloser' },\n    { label: 'Стрелка назад', name: 'hasBackButton' },\n    { label: 'Фиксация шапки при скролле', name: 'sticky' },\n];\n\nconst FOOTER_SETTINGS = [\n    { label: 'Primary Button', name: 'hasPrimaryButton' },\n    { label: 'Secondary Button', name: 'hasSecondaryButton' },\n    { label: 'Фиксация футера при скролле', name: 'sticky' },\n];\n\nrender(() => {\n    const [open, setOpen] = React.useState(false);\n\n    const [radioState, setRadioState] = React.useState({\n        placement: 'right',\n        scrollbar: 'native',\n    });\n\n    const [headerSettings, setHeaderSettings] = React.useState(() => ({\n        ...HEADER_SETTINGS.reduce((res, item) => ({ ...res, [item.name]: false }), {}),\n        titleInContent: false,\n    }));\n\n    const [footerSettings, setFooterSettings] = React.useState(() =>\n        FOOTER_SETTINGS.reduce((res, item) => ({ ...res, [item.name]: false }), {}),\n    );\n\n    const getKey = () => JSON.stringify(headerSettings);\n\n    const handleRadioStateChange = (key, _, payload) => {\n        setRadioState((state) => ({ ...state, [key]: payload.value }));\n    };\n\n    const handleOpen = () => setOpen(true);\n\n    const handleClose = () => setOpen(false);\n\n    const handleHeaderSettingsChange = (_, { name, checked }) => {\n        setHeaderSettings((prevState) => ({ ...prevState, [name]: checked }));\n    };\n\n    const handleFooterSettingsChange = (_, { name, checked }) => {\n        setFooterSettings((prevState) => ({ ...prevState, [name]: checked }));\n    };\n\n    const showHeader =\n        headerSettings.hasTitle || headerSettings.hasCloser || headerSettings.hasBackButton;\n\n    const showFooter = footerSettings.hasPrimaryButton || footerSettings.hasSecondaryButton;\n\n    return (\n        <React.Fragment>\n            <Button type='button' size='s' onClick={handleOpen}>\n                Открыть сайд-панель\n            </Button>\n\n            <Gap size='2xl' />\n\n            <SidePanelDesktop\n                key={getKey()}\n                open={open}\n                onClose={handleClose}\n                placement={radioState.placement}\n                nativeScrollbar={radioState.scrollbar === 'native'}\n            >\n                {showHeader && (\n                    <SidePanelDesktop.Header\n                        hasBackButton={headerSettings.hasBackButton}\n                        hasCloser={headerSettings.hasCloser}\n                        sticky={headerSettings.sticky}\n                        title={\n                            headerSettings.hasTitle\n                                ? 'Почему банк проверяет мои операции?'\n                                : undefined\n                        }\n                    />\n                )}\n                <SidePanelDesktop.Content>\n                    <div style={{ position: 'relative' }}>\n                        {headerSettings.titleInContent ? (\n                            <>\n                                <Typography.Title view='medium' tag='h3' font='system'>\n                                    {`Почему банк проверяет мои операции?`}\n                                </Typography.Title>\n                                <Gap size='m' />\n                            </>\n                        ) : undefined}\n                        <Text />\n                    </div>\n                </SidePanelDesktop.Content>\n                {showFooter && (\n                    <SidePanelDesktop.Footer sticky={footerSettings.sticky}>\n                        <SidePanelDesktop.Controls\n                            primary={\n                                footerSettings.hasPrimaryButton ? (\n                                    <Button view='primary' size='s' onClick={handleClose}>\n                                        Primary\n                                    </Button>\n                                ) : null\n                            }\n                            secondary={\n                                footerSettings.hasSecondaryButton ? (\n                                    <Button view='secondary' size='s' onClick={handleClose}>\n                                        Secondary\n                                    </Button>\n                                ) : null\n                            }\n                        />\n                    </SidePanelDesktop.Footer>\n                )}\n            </SidePanelDesktop>\n\n            <RadioGroup\n                label='Размещение'\n                direction='vertical'\n                name='placement'\n                onChange={handleRadioStateChange.bind(null, 'placement')}\n                value={radioState.placement}\n            >\n                <Radio label='Слева' value='left' />\n                <Radio label='Справа' value='right' />\n            </RadioGroup>\n\n            <Gap size='2xl' />\n\n            <RadioGroup\n                label='Скроллбар'\n                direction='vertical'\n                name='scrollbar'\n                onChange={handleRadioStateChange.bind(null, 'scrollbar')}\n                value={radioState.scrollbar}\n            >\n                <Radio label='Нативный' value='native' />\n                <Radio label='Кастомный' value='custom' />\n            </RadioGroup>\n\n            <Gap size='2xl' />\n\n            <CheckboxGroup label='Настройки шапки' onChange={handleHeaderSettingsChange}>\n                {HEADER_SETTINGS.map((item) => (\n                    <Switch\n                        key={item.name}\n                        size='m'\n                        label={item.label}\n                        name={item.name}\n                        checked={headerSettings[item.name]}\n                    />\n                ))}\n            </CheckboxGroup>\n\n            <Gap size='2xl' />\n\n            <CheckboxGroup\n                label='Примеры наполнения контентной части'\n                onChange={handleHeaderSettingsChange}\n            >\n                <Switch\n```\n\n----------------------------------------\n\nTITLE: Configuration of Header and Footer Options in React Modal\nDESCRIPTION: A React component managing state and rendering UI controls for configuring header and footer options of a mobile modal. It includes select dropdowns for layout choices, switches for toggling features like close button, back button, and sticky headers, and a button to open the modal. State management is handled via React.useState hooks to reflect user selections dynamically.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/modal/src/docs/description.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst HEADER_SELECT_OPTIONS = [\n    { key: 'withoutTitle', content: 'Нет заголовка' },\n    { key: 'defaultTitle', content: 'Стандартный' },\n    { key: 'compactTitle', content: 'Компактный' },\n    { key: 'compactTitleWithSubtitle', content: 'Компактный с подписью' },\n    { key: 'compactTitleWithCenterAlign', content: 'Компактный центрированный' },\n    {\n        key: 'compactTitleWithSubtitleAndCenterAlign',\n        content: 'Компактный центрированный с подписью',\n    },\n];\n\nconst FOOTER_SELECT_OPTIONS = [\n    { key: 'vertical', content: 'Вертикальный' },\n    { key: 'horizontal', content: 'Горизонтальный' },\n];\n\nconst HEADER_SETTINGS = [\n    { label: 'Крестик', name: 'hasCloser' },\n    { label: 'Стрелка назад', name: 'hasBackButton' },\n    { label: 'Фиксация шапки при скролле', name: 'sticky' },\n];\n\nconst FOOTER_SETTINGS = [\n    { label: 'Primary Button', name: 'hasPrimaryButton' },\n    { label: 'Secondary Button', name: 'hasSecondaryButton' },\n    { label: 'Фиксация футера при скролле', name: 'sticky' },\n];\n\nrender(() => {\n    const [open, setOpen] = React.useState(false);\n    const [headerViewSelected, setHeaderView] = React.useState(HEADER_SELECT_OPTIONS[0].key);\n    const [footerViewSelected, setFooterView] = React.useState(FOOTER_SELECT_OPTIONS[0].key);\n    const [headerSettings, setHeaderSettings] = React.useState(() => ({\n        ...HEADER_SETTINGS.reduce((res, item) => ({ ...res, [item.name]: false }), {}),\n        titleInContent: false,\n    }));\n    const [footerSettings, setFooterSettings] = React.useState(() =>\n        FOOTER_SETTINGS.reduce((res, item) => ({ ...res, [item.name]: false }), {}),\n    );\n\n    const showHeader =\n        headerViewSelected !== HEADER_SELECT_OPTIONS[0].key ||\n        headerSettings.hasCloser ||\n        headerSettings.hasBackButton;\n\n    const showFooter = footerSettings.hasPrimaryButton || footerSettings.hasSecondaryButton;\n\n    const getKey = () =>\n        `${JSON.stringify(headerSettings)}-${headerViewSelected}-${footerViewSelected}`;\n\n    const handleOpen = () => setOpen(true);\n\n    const handleClose = () => setOpen(false);\n\n    const handleHeaderSettingsChange = (_, { name, checked }) => {\n        setHeaderSettings((prevState) => ({ ...prevState, [name]: checked }));\n    };\n\n    const handleFooterSettingsChange = (_, { name, checked }) => {\n        setFooterSettings((prevState) => ({ ...prevState, [name]: checked }));\n    };\n\n    return (\n        <Container>\n            <Button size='xs' onClick={handleOpen}>\n                Показать модалку\n            </Button>\n\n            <Gap size='2xl' />\n\n            <p style={{ margin: '0 0 var(--gap-12) 0' }}>Настройки шапки</p>\n\n            <SelectMobile\n                block={true}\n                options={HEADER_SELECT_OPTIONS}\n                label='Заголовок'\n                selected={headerViewSelected}\n                onChange={({ selected }) => setHeaderView(selected.key)}\n                Option={BaseOption}\n            />\n\n            <Gap size='m' />\n\n            <CheckboxGroup onChange={handleHeaderSettingsChange}>\n                {HEADER_SETTINGS.map((item) => (\n                    <Switch\n                        key={item.name}\n                        size='m'\n                        label={item.label}\n                        name={item.name}\n                        checked={headerSettings[item.name]}\n                    />\n                ))}\n            </CheckboxGroup>\n\n            <Gap size='2xl' />\n\n            <CheckboxGroup\n                label='Примеры наполнения контентной части'\n                onChange={handleHeaderSettingsChange}\n            >\n                <Switch\n                    size='m'\n                    label='Заголовок в контентной области'\n                    name='titleInContent'\n                    checked={headerSettings.titleInContent}\n                />\n            </CheckboxGroup>\n\n            <Gap size='2xl' />\n\n            <p style={{ margin: '0 0 var(--gap-12) 0' }}>Настройки футера</p>\n\n            <SelectMobile\n                block={true}\n                options={FOOTER_SELECT_OPTIONS}\n                label='Лейаут'\n                selected={footerViewSelected}\n                onChange={({ selected }) => setFooterView(selected.key)}\n                Option={BaseOption}\n            />\n\n            <Gap size='m' />\n\n            <CheckboxGroup label='Настройки футера' onChange={handleFooterSettingsChange}>\n                {FOOTER_SETTINGS.map((item) => (\n                    <Switch\n                        key={item.name}\n                        size='m'\n                        label={item.label}\n                        name={item.name}\n                        checked={footerSettings[item.name]}\n                    />\n                ))}\n            </CheckboxGroup>\n\n            <ModalMobile open={open} onClose={handleClose} key={getKey()}>\n                {showHeader && (\n                    <ModalMobile.Header\n                        hasCloser={headerSettings.hasCloser}\n                        hasBackButton={headerSettings.hasBackButton}\n                        sticky={headerSettings.sticky}\n                        align={\n                            [\n                                'compactTitleWithCenterAlign',\n                                'compactTitleWithSubtitleAndCenterAlign',\n                            ].includes(headerViewSelected)\n                                ? 'center'\n                                : undefined\n                        }\n                        title={\n                            [\n                                'defaultTitle',\n                                'compactTitle',\n                                'compactTitleWithSubtitle',\n                                'compactTitleWithCenterAlign',\n                                'compactTitleWithSubtitleAndCenterAlign',\n                            ].includes(headerViewSelected)\n                        }\n                    />\n                )}\n            </ModalMobile>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Adaptive Typography Headings with Font Selection - React JSX\nDESCRIPTION: This snippet implements adaptive heading styles for both desktop and mobile using React and the @alfalab/core-components/typography package. Users can select between system and Styrene fonts using a Select component, while mapped VIEW_TYPES control heading sizes. Key dependencies include React, SelectDesktop, SelectMobile, BaseOption, Gap, and Typography.TitleResponsive or Typography.TitleMobile components. The snippet accepts user input for font selection and propagates it to the responsive heading component, rendering different heading sizes accordingly; the output is a stack of stylized headings that reflect current user/font selection. Limitations: Code assumes presence of certain custom components and styling as per core-components and requires a suitable context (such as Storybook or a live demo environment).\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/typography/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nconst OPTIONS = [\n    { key: '1', content: 'Font: System' },\n    { key: '2', content: 'Font: Styrene' },\n];\n\nconst VIEW_TYPES = ['xLarge', 'Large', 'Medium', 'Small', 'xSmall'];\n\nrender(() => {\n    const [selected, setSelected] = React.useState(OPTIONS[0]);\n\n    const handleChange = ({ selected }) => {\n        if (selected) {\n            setSelected(selected);\n        }\n    };\n\n    return (\n        <div style={{ width: 320 }}>\n            <SelectDesktop\n                allowUnselect={true}\n                block={true}\n                size={56}\n                options={OPTIONS}\n                Option={BaseOption}\n                onChange={handleChange}\n                selected={selected}\n            />\n            <Gap size='xl' />\n            {VIEW_TYPES.map((view) => (\n                <React.Fragment key={view}>\n                    <Typography.TitleResponsive\n                        font={selected.key === '1' ? 'system' : 'styrene'}\n                        view={view.toLowerCase()}\n                        key={view}\n                        tag='div'\n                    >\n                        {view}\n                    </Typography.TitleResponsive>\n                    <Gap size='m' />\n                </React.Fragment>\n            ))}\n        </div>\n    );\n});\n//MOBILE\nconst OPTIONS = [\n    { key: '1', content: 'Font: System' },\n    { key: '2', content: 'Font: Styrene' },\n];\n\nconst VIEW_TYPES = ['xLarge', 'Large', 'Medium', 'Small', 'xSmall'];\n\nrender(() => {\n    const [selected, setSelected] = React.useState(OPTIONS[0]);\n\n    const handleChange = ({ selected }) => {\n        if (selected) {\n            setSelected(selected);\n        }\n    };\n\n    return (\n        <div>\n            <SelectMobile\n                allowUnselect={true}\n                block={true}\n                size={56}\n                options={OPTIONS}\n                Option={BaseOption}\n                onChange={handleChange}\n                selected={selected}\n            />\n            <Gap size='xl' />\n            {VIEW_TYPES.map((view) => (\n                <React.Fragment key={view}>\n                    <Typography.TitleMobile\n                        font={selected.key === '1' ? 'system' : 'styrene'}\n                        view={view.toLowerCase()}\n                        key={view}\n                        tag='div'\n                    >\n                        {view}\n                    </Typography.TitleMobile>\n                    <Gap size='m' />\n                </React.Fragment>\n            ))}\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Vertical CheckboxGroup Implementation - React\nDESCRIPTION: This snippet showcases a vertical CheckboxGroup implementation in React, using the `CheckboxGroupDesktop` component. It handles state for multiple checkboxes and displays an error state.  The `onChange` handler updates the state based on checkbox selections. This example is designed for desktop and can accommodate more options than the horizontal layout.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/checkbox-group/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [value, setValue] = React.useState({\n        one: false,\n        two: false,\n        three: false,\n        four: false,\n        five: false,\n    });\n    const [error, setError] = React.useState(false);\n\n    const onChange = (_, payload) => {\n        setValue({ ...value, [payload.name]: payload.checked });\n    };\n\n    return (\n        <div style={{ width: '100%' }}>\n            <CheckboxGroupDesktop\n                label='Выберите планеты земной группы'\n                onChange={onChange}\n                hint='Несколько из этих планет принадлежат земной группе'\n                error={error}\n            >\n                <Checkbox label='Марс' name='one' checked={value.one} size={24} />\n                <Checkbox label='Юпитер' name='two' checked={value.two} size={24} />\n                <Checkbox label='Меркурий' name='three' checked={value.three} size={24} />\n                <Checkbox label='Сатурн' name='four' checked={value.four} size={24} />\n                <Checkbox label='Нептун' name='five' checked={value.five} size={24} />\n            </CheckboxGroupDesktop>\n\n            <Gap size='2xl' />\n\n            <Space direction='horizontal' wrap={true}>\n                <Button size='xxs' onClick={() => setError(false)}>\n                    По умолчанию\n                </Button>\n                <Button size='xxs' onClick={() => setError('Правильный ответ: Марс и Меркурий')}>\n                    Состояние ошибки\n                </Button>\n            </Space>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Pattern Lock Components for Different Devices (JavaScript/JSX)\nDESCRIPTION: This snippet shows the import statements for various Pattern Lock components tailored for general, desktop, and mobile usage, as well as a hook for input cleanup and a theme state object. Dependencies include the core components package and associated shared hooks.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pattern-lock-v1/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { PatternLockV1 } from '@alfalab/core-components/pattern-lock-v1';\nimport { PatternLockMobileV1 } from '@alfalab/core-components/pattern-lock-v1/mobile';\nimport { PatternLockDesktopV1 } from '@alfalab/core-components/pattern-lock-v1/desktop';\n// Hook for clearing input\nimport { usePatternLockCleanup } from '@alfalab/core-components/pattern-lock-v1/shared';\n// Optional theme state object\nimport { THEME_STATE } from '@alfalab/core-components/pattern-lock';\n```\n\n----------------------------------------\n\nTITLE: Creating a Drag-and-Drop Sortable List Story in React with Storybook\nDESCRIPTION: This JSX snippet defines a React component within a Storybook story named \"SortableList\" that renders a sortable, draggable list using the SortableList component from Alfaleab core components. It initializes items state with unique ids and dynamically renders each list item with iconography and text using nested Alfaleab UI components. The snippet supports configurable padding, border radius, activator nodes, view style, and control positioning through Storybook knobs. Dependencies include React, Storybook addons (addon-docs, addon-knobs), and Alfaleab core components for UI elements. Inputs include query parameters for preview style and UI knobs for customizing the SortableList behavior. Output is a styled sortable list with live drag-end state updates. Limitations involve reliance on external Alfaleab packages and Storybook environment for proper rendering.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/sortable-list/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta, Story, Markdown } from '@storybook/addon-docs';\nimport { select } from '@storybook/addon-knobs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\n\nimport { Typography } from '@alfalab/core-components-typography';\nimport { SortableList } from '@alfalab/core-components-sortable-list';\nimport { DiamondsMIcon } from '@alfalab/icons-glyph/DiamondsMIcon';\nimport { GenericWrapper } from '@alfalab/core-components-generic-wrapper';\nimport { SuperEllipse } from '@alfalab/core-components-icon-view/super-ellipse';\nimport { Gap } from '@alfalab/core-components-gap';\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\nimport {\n    stylesStringToObj,\n    getQueryParam,\n} from '../../../screenshot-utils/screenshots-story/utils';\n\n<Meta title='Components/SortableList' component={SortableList} id='SortableList' />\n\n<Story name='SortableList'>\n    {React.createElement(() => {\n        const [items, setItems] = React.useState(() =>\n            [1, 2, 3].map((item) => ({ id: item })),\n        );\n        const previewStyles = stylesStringToObj(getQueryParam('wrapperStyles'));\n        const isPreview = Object.keys(previewStyles).length > 0;\n        const renderItem = (item) => {\n            return (\n                <GenericWrapper alignItems='center' padding={{ top: 's', bottom: 's', left: 'm' }}>\n                    {!isPreview &&\n                        <>\n                            <GenericWrapper>\n                                <SuperEllipse size={48}>\n                                    <DiamondsMIcon aria-label='diamonds' />\n                                </SuperEllipse>\n                            </GenericWrapper>\n                            <Gap size='m' direction='horizontal' />\n                        </>\n                    }\n\n                    <GenericWrapper>\n                        <GenericWrapper column>\n                            <Typography.Text view='component-primary'>{ isPreview ? 'Draggable item' :`Элемент списка ${item.id}`}</Typography.Text>\n                            {!isPreview &&\n                            <>\n                                <Gap size='2xs' />\n                                <Typography.Text view='primary-small' color='secondary'>\n                                    Перетащи меня\n                                </Typography.Text>\n                            </>}\n                        </GenericWrapper>\n                    </GenericWrapper>\n                </GenericWrapper>\n            );\n        };\n        const paddingSizes = [undefined, '3xs', '2xs', 'xs', 's', 'm', 'l'];\n        const paddingTop = select('padding.top', paddingSizes, undefined);\n        const paddingRight = select('padding.right', paddingSizes, undefined);\n        const paddingBottom = select('padding.bottom', paddingSizes, undefined);\n        const paddingLeft = select('padding.left', paddingSizes, undefined);\n        return (\n            <div style={previewStyles}>\n                <div style={{width: 320}}>\n                    <SortableList\n                        items={items}\n                        onDragEnd={(_, newIds) => setItems(newIds)}\n                        padding={{\n                            top: paddingTop,\n                            right: paddingRight,\n                            bottom: paddingBottom,\n                            left: paddingLeft,\n                        }}\n                        borderRadius={select('border-radius', [undefined, 'm', 'l', 'xl'], 'xl')}\n                        renderItem={renderItem}\n                        activatorNode={select('activatorNode', ['cell', 'control'], 'cell')}\n                        view={select('view', ['primary', 'secondary'], 'primary')}\n                        controlPadding={select('controlPadding', paddingSizes, 'xs')}\n                        controlPosition={select('controlPosition', ['left', 'right'], 'right')}\n                    />\n                </div>\n            </div>\n        );\n    })}\n\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Data Table with Column Customization in React\nDESCRIPTION: This code illustrates rendering a data table with several columns, each configurable via properties such as 'hidden', 'width', and 'textAlign'. The table displays rows of data with formatted text elements and an amount component, demonstrating flexible presentation of structured information within React components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/table/src/docs/description.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrender(() => {\n    return (\n        <Table>\n            <Table.THead>\n                <Table.THeadCell title='Id' hidden={true}>\n                    Id\n                </Table.THeadCell>\n\n                <Table.THeadCell title='Дата' width={120}>\n                    Дата\n                </Table.THeadCell>\n\n                <Table.THeadCell title='Контрагент' textAlign='center'>\n                    Контрагент\n                </Table.THeadCell>\n\n                <Table.THeadCell title='Сумма' textAlign='right' width={268}>\n                    Сумма\n                </Table.THeadCell>\n            </Table.THead>\n            <Table.TBody>\n                {data.map((row) => (\n                    <Table.TRow key={row.id}>\n                        <Table.TCell>{row.id}</Table.TCell>\n\n                        <Table.TCell>\n                            <Typography.Text view='primary-small' tag='div'>\n                                {row.date}\n                            </Typography.Text>\n                        </Table.TCell>\n\n                        <Table.TCell>\n                            <Space size={2} align='center'>\n                                <Typography.Text view='primary-small' tag='div'>\n                                    {row.title}\n                                </Typography.Text>\n                                <Typography.Text view='primary-small' color='secondary'>\n                                    {row.subtitle}\n                                </Typography.Text>\n                            </Space>\n                        </Table.TCell>\n\n                        <Table.TCell>\n                            <Amount\n                                value={row.sum}\n                                currency='RUR'\n                                minority={100}\n                                view='withZeroMinorPart'\n                                bold='full'\n                                transparentMinor={true}\n                            />\n                        </Table.TCell>\n                    </Table.TRow>\n                ))}\n            </Table.TBody>\n        </Table>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Range Selection Calendar in React\nDESCRIPTION: Shows how to create a calendar for selecting date ranges with different behaviors. The component supports 'clarification' and 'reset' range behavior modes, and the mobile version also includes an option to toggle between range-only and single-date-and-range selection modes.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [rangeBehavior, setRangeBehavior] = React.useState('clarification');\n    const [value, setValue] = React.useState();\n\n    const format = React.useCallback((timestamp) => {\n        if (!timestamp) return '';\n\n        return new Intl.DateTimeFormat('ru-RU', {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n        }).format(new Date(timestamp));\n    }, []);\n\n    React.useEffect(() => {\n        setValue([]);\n    }, [rangeBehavior]);\n\n    const selectedRange = React.useMemo(() => {\n        return `${format(value ? value.dateFrom : undefined)} - ${format(\n            value ? value.dateTo : undefined,\n        )}`;\n    }, [value]);\n\n    const calendarStyles = {\n        border: '1px solid rgba(233, 233, 235, 1)',\n        borderRadius: '8px',\n        boxShadow: 'var(--shadow-m)',\n    };\n\n    return (\n        <div style={{ width: 344 }}>\n            <div style={calendarStyles}>\n                <CalendarDesktop\n                    mode='range'\n                    rangeBehavior={rangeBehavior}\n                    value={value}\n                    onChange={(dateFrom, dateTo) => setValue({ dateFrom, dateTo })}\n                    selectorView='month-only'\n                    showCurrentYearSelector={true}\n                    responsive={true}\n                />\n            </div>\n            <p style={{ marginTop: 32, marginBottom: 32 }}>Values: {selectedRange}</p>\n            <div>\n                <RadioGroup\n                    label='Тип выбора границ'\n                    direction='vertical'\n                    name='rangeBehavior'\n                    onChange={(_, payload) => setRangeBehavior(payload.value)}\n                    value={rangeBehavior}\n                >\n                    <Radio size='m' label='Уточнение' value='clarification' />\n                    <Radio size='m' label='Сброс' value='reset' />\n                </RadioGroup>\n            </div>\n        </div>\n    );\n});\n//MOBILE\nrender(() => {\n    const [open, setOpen] = React.useState(false);\n\n    const [rangeBehavior, setRangeBehavior] = React.useState('clarification');\n    const [selectionMode, setSelectionMode] = React.useState('range');\n    const [value, setValue] = React.useState();\n\n    const format = React.useCallback((timestamp) => {\n        if (!timestamp) return '';\n\n        return new Intl.DateTimeFormat('ru-RU', {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n        }).format(new Date(timestamp));\n    }, []);\n\n    React.useEffect(() => {\n        setValue([]);\n    }, [rangeBehavior]);\n\n    const selectedRange = React.useMemo(() => {\n        return `${format(value ? value.dateFrom : undefined)} - ${format(\n            value ? value.dateTo : undefined,\n        )}`;\n    }, [value]);\n\n    const allowSelectionFromEmptyRange = selectionMode === 'singleAndRange';\n\n    return (\n        <Container>\n            <Button onClick={() => setOpen(true)} block={true}>\n                Открыть календарь\n            </Button>\n            <CalendarMobile\n                mode='range'\n                rangeBehavior={rangeBehavior}\n                value={value}\n                onChange={(dateFrom, dateTo) => setValue({ dateFrom, dateTo })}\n                onClose={() => setOpen(false)}\n                open={open}\n                selectorView='month-only'\n                allowSelectionFromEmptyRange={allowSelectionFromEmptyRange}\n            />\n            <p style={{ marginTop: 32, marginBottom: 0 }}>Values: {selectedRange}</p>\n            <div style={{ marginTop: '32px' }}>\n                <RadioGroup\n                    label='Режим'\n                    direction='vertical'\n                    name='selectionMode'\n                    onChange={(_, payload) => setSelectionMode(payload.value)}\n                    value={selectionMode}\n                >\n                    <Radio size='m' label='Принимает диапазон значений' value='range' />\n                    <Radio\n                        size='m'\n                        label='Может принимать и диапазон и дату'\n                        value='singleAndRange'\n                    />\n                </RadioGroup>\n            </div>\n            <div style={{ marginTop: '32px' }}>\n                <RadioGroup\n                    label='Тип выбора границ'\n                    direction='vertical'\n                    name='rangeBehavior'\n                    onChange={(_, payload) => setRangeBehavior(payload.value)}\n                    value={rangeBehavior}\n                >\n                    <Radio size='m' label='Уточнение' value='clarification' />\n                    <Radio size='m' label='Сброс' value='reset' />\n                </RadioGroup>\n            </div>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Header for Desktop Modal - React\nDESCRIPTION: This React code defines the `Header` component for the desktop modal, setting up a layout and basic styling using the style prop. It also uses `React.useEffect` hook to manage the header visibility within the modal context. The component sets the `hasHeader` flag using `ModalContext`. It displays a header with placeholders for various elements.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/modal/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Header = () => {\n    const { setHasHeader } = React.useContext(ModalContext);\n\n    React.useEffect(() => setHasHeader(true), [setHasHeader]);\n\n    const commonStyles = {\n        backgroundColor: 'rgba(55, 120, 251, 0.1)',\n        border: '1px dashed rgb(55, 120, 251)',\n        boxSizing: 'border-box',\n        borderRadius: '8px',\n        height: '48px',\n    };\n\n    const addonsStyles = {\n        ...commonStyles,\n        width: '48px',\n    };\n\n    const innerAddonsStyles = {\n        ...addonsStyles,\n        backgroundColor: 'rgba(207, 112, 255, 0.1)',\n    };\n\n    const bottomAddonsStyles = {\n        ...commonStyles,\n        width: '100%',\n    };\n\n    const wrapperStyles = {\n        display: 'flex',\n        justifyContent: 'center',\n    };\n\n    const titleStyles = {\n        ...commonStyles,\n        flexGrow: 1,\n    };\n\n    return (\n        <div style={{ margin: 'var(--modal-s-header-paddings)' }}>\n            <div style={wrapperStyles}>\n                <div style={innerAddonsStyles} />\n                <div style={addonsStyles} />\n                <div style={titleStyles} />\n                <div style={addonsStyles} />\n                <div style={innerAddonsStyles} />\n            </div>\n            <div style={bottomAddonsStyles} />\n        </div>\n    );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Importing UniversalModal Desktop Variant in React (JSX)\nDESCRIPTION: This snippet illustrates how to import desktop-specific UniversalModal components, their types, and related button components from '@alfalab/core-components/universal-modal/desktop'. Both atom and compound import styles are provided. Dependencies include the '@alfalab/core-components/universal-modal' package. Input types like UniversalModalDesktopProps, ContentDesktopProps, HeaderPropsDesktop, and FooterDesktopProps are used to enforce prop requirements for each component variant. Output is rendered modal UIs optimized for desktop interfaces.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/universal-modal/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Atom import\nimport { UniversalModalDesktopComponent } from '@alfalab/core-components/universal-modal/desktop';\nimport type { UniversalModalDesktopProps } from '@alfalab/core-components/universal-modal/desktop';\n\nimport { ContentDesktop } from '@alfalab/core-components/universal-modal/desktop';\nimport type { ContentDesktopProps } from '@alfalab/core-components/universal-modal/desktop';\n\nimport { HeaderDesktop } from '@alfalab/core-components/universal-modal/desktop';\nimport type { HeaderPropsDesktop } from '@alfalab/core-components/universal-modal/desktop';\n\nimport { FooterDesktop } from '@alfalab/core-components/universal-modal/desktop';\nimport type { FooterDesktopProps } from '@alfalab/core-components/universal-modal/desktop';\n\n// Compound import\nimport { UniversalModalDesktop } from '@alfalab/core-components/universal-modal/desktop';\nimport type { UniversalModalDesktopProps } from '@alfalab/core-components/universal-modal/desktop';\n\n// Components\nimport { ArrowButtonDesktop, CrossButtonDesktop } from '@alfalab/core-components/universal-modal/desktop';\n```\n\n----------------------------------------\n\nTITLE: Transitioning Between Modals in React\nDESCRIPTION: This snippet showcases how to manage the sequential display of two modals in a React application. It uses React's `useState` hook to manage the open/close state of each modal, introducing a `setTimeout` function to delay the opening of the second modal, effectively waiting for the closing animation of the first modal to complete. The snippet includes the rendering of buttons, backdrop, and two instances of a `UniversalModalDesktop` component, each displaying distinct content.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/universal-modal/src/docs/description.mdx#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [openModal, setOpenModal] = React.useState(false);\n    const [openSecondModal, setOpenSecondModal] = React.useState(false);\n    const [backdropOpen, setBackdropOpen] = React.useState(false);\n\n    const handleButtonClick = () => {\n        setOpenModal(true);\n        setBackdropOpen(true);\n    };\n\n    const handleCloseModal = () => {\n        setOpenModal(false);\n        setTimeout(() => {\n            setOpenSecondModal(true);\n        }, 300);\n    };\n\n    const handleCloseSecondModal = () => {\n        setOpenSecondModal(false);\n        setBackdropOpen(false);\n    };\n\n    return (\n        <div style={{ position: 'relative', zIndex: 1 }}>\n            <Button onClick={handleButtonClick}>Показать модалку</Button>\n            <Backdrop open={backdropOpen} />\n            <UniversalModalDesktop\n                open={openModal}\n                height={400}\n                overlay={false}\n                onClose={handleCloseModal}\n            >\n                <UniversalModalDesktop.Header\n                    sticky={true}\n                    title='Одна модалка'\n                    align='left'\n                    hasCloser={true}\n                />\n                <UniversalModalDesktop.Content>\n                    <Typography.Text view='primary-medium'>\n                        В 2001 году в России начал действовать Федеральный закон №115 «О\n                        противодействии легализации доходов, полученных преступным путём, и\n                        финансированию терроризма». В рамках закона банки могут блокировать карты,\n                        отказывать в проведении сомнительных операций, ограничить доступ в\n                        интернет-банк или запрашивать документы, если по операции клиента возникли\n                        подозрения.\n                    </Typography.Text>\n                </UniversalModalDesktop.Content>\n                <UniversalModalDesktop.Footer sticky={true} layout='start'>\n                    <Button size={48} view='primary' onClick={handleCloseModal}>\n                        Дальше\n                    </Button>\n                </UniversalModalDesktop.Footer>\n            </UniversalModalDesktop>\n\n            <UniversalModalDesktop\n                open={openSecondModal}\n                height={280}\n                overlay={false}\n                onClose={handleCloseSecondModal}\n            >\n                <UniversalModalDesktop.Header\n                    sticky={true}\n                    title='Другая модалка'\n                    align='left'\n                    hasCloser={true}\n                />\n                <UniversalModalDesktop.Content>\n                    <Typography.Text view='primary-medium'>\n                        В 2001 году в России начал действовать Федеральный закон №115 «О\n                        противодействии легализации доходов, полученных преступным путём, и\n                        финансированию терроризма».\n                    </Typography.Text>\n                </UniversalModalDesktop.Content>\n                <UniversalModalDesktop.Footer sticky={true} layout='start'>\n                    <Button size={48} view='primary' onClick={handleCloseSecondModal}>\n                        Дальше\n                    </Button>\n                </UniversalModalDesktop.Footer>\n            </UniversalModalDesktop>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Storybook Documentation Components for SidePanel in JSX\nDESCRIPTION: Renders Storybook documentation elements for the SidePanel component including a header, and tabs displaying description, development notes, and changelog markdown content. These elements organize the documentation UI within Storybook to provide structured developer insights and change history for the component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/side-panel/src/docs/Component.stories.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentHeader name='SidePanel' />\n\n<Tabs\n    description={<Description />}\n    development={<Development />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n/>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Textarea Height Mechanics (Desktop) - JSX\nDESCRIPTION: Shows how to configure a React `Textarea` component for different height behaviors (auto-resize, fixed rows, manual resize) and how to conditionally render and position its label based on user selection from a `Select` component. Requires React and potentially specific component libraries (`Select`, `Gap`, `Textarea`, `BaseOption`).\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/textarea/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst OPTIONS = [\n    { key: '1', content: 'Нет' },\n    { key: '2', content: 'Внутри' },\n    { key: '3', content: 'Снаружи' },\n];\nrender(() => {\n    const [selected, setSelected] = React.useState(OPTIONS[1]);\n    const handleChange = ({ selected }) => {\n        if (selected) {\n            setSelected(selected);\n        }\n    };\n    const visibleLabel = selected.key !== '1';\n    const positionLabel = visibleLabel && selected.key !== '2' ? 'outer' : 'inner';\n    return (\n        <div style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}>\n            <Select\n                label='Лейбл'\n                allowUnselect={true}\n                block={true}\n                size={56}\n                options={OPTIONS}\n                Option={BaseOption}\n                onChange={handleChange}\n                selected={selected}\n            />\n            <Gap size='xl' />\n            <Textarea\n                label={visibleLabel && 'Автоматическое изменение высоты'}\n                block={true}\n                labelView={positionLabel}\n            />\n            <Gap size='m' />\n            <Textarea\n                label={visibleLabel && 'Высота в три строки'}\n                minRows={3}\n                autosize={false}\n                block={true}\n                labelView={positionLabel}\n            />\n            <Gap size='m' />\n            <Textarea\n                label={visibleLabel && 'Ручное управление высотой'}\n                labelView={positionLabel}\n                autosize={false}\n                resize='vertical'\n                minRows={3}\n                block={true}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Vertical Steps Component in React\nDESCRIPTION: This code snippet demonstrates how to render a vertical Steps component in React with additional features such as interactive steps and PureCell usage. It includes state management for active step, ordering, and error handling. The component also includes functions for changing steps, handling errors, and determining if a step is disabled or has an error. It uses `mobileHeight={560}` indicating it is styled for mobile screens with 560px height.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/steps/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [ordered, setOrdered] = React.useState(true);\n    const [error, setError] = React.useState(false);\n    const [step, setStep] = React.useState(2);\n\n    const handleReset = () => setStep(1);\n\n    const handleStepsChange = (stepNumber) => setStep(stepNumber);\n\n    const handleOrderChange = () => setOrdered((prev) => !prev);\n\n    const handleErrorChange = () => {\n        setError((prev) => {\n            if (!prev && step > 3) {\n                setStep(3);\n            }\n\n            return !prev;\n        });\n    };\n\n    const handleStepDisable = (stepNumber) => {\n        if (error) {\n            return stepNumber === 4 || stepNumber === 5;\n        }\n\n        return stepNumber === 4;\n    };\n\n    const handleStepError = (stepNumber) => {\n        if (error) {\n            return stepNumber === 3;\n        }\n    };\n\n    return (\n        <Space size={24}>\n            <Steps\n                activeStep={step}\n                defaultActiveStep={2}\n                ordered={ordered}\n                onChange={handleStepsChange}\n                isVerticalAlign={true}\n                interactive={false}\n                checkIsStepDisabled={handleStepDisable}\n                checkIsStepError={handleStepError}\n            >\n                {[1, 2, 3, 4, 5].map((item, key) => (\n                    <PureCell key={key} verticalPadding='none' horizontalPadding='none'>\n                        <PureCell.Content>\n                            <PureCell.Main>\n                                <PureCell.Text titleColor='primary' view='component-primary'>\n                                    Шаг {item}\n                                </PureCell.Text>\n                                <PureCell.Category categoryName='Subtitle' />\n                            </PureCell.Main>\n                            {item === 2 && (\n                                <PureCell.Footer>\n                                    <div style={{ display: 'flex', gap: 12 }}>\n                                        <PureCell.FooterButton view='primary'>\n                                            Label\n                                        </PureCell.FooterButton>\n                                        <PureCell.FooterButton view='secondary'>\n                                            Label\n                                        </PureCell.FooterButton>\n                                    </div>\n                                </PureCell.Footer>\n                            )}\n                        </PureCell.Content>\n                    </PureCell>\n                ))}\n            </Steps>\n            <Typography.Text view='component-secondary' color='secondary'>\n                Выбран шаг {step}\n            </Typography.Text>\n            <>\n                <Switch checked={ordered} onChange={handleOrderChange} label='Номера шагов' />\n                <Gap size='m' />\n                <Switch\n                    checked={error}\n                    onChange={handleErrorChange}\n                    label='Есть некорректно заполненный шаг'\n                />\n            </>\n        </Space>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering SystemMessage in Modal (JSX)\nDESCRIPTION: This snippet renders a SystemMessage component within a Modal, allowing customization through settings controlled by Select and CheckboxGroup components. It defines state for the modal's open state, selected graphic, and enabled settings. The renderGraphic function conditionally renders different graphic elements based on the selected option. The button controls are conditionally rendered based on the enabled settings.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/system-message/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst IS_MOBILE = document.body.clientWidth < 450;\nconst SETTINGS_KEY = {\n    subtitle: 'subtitle',\n    caption: 'caption',\n    primary: 'primary',\n    secondary: 'secondary',\n    button_columns: 'button_columns',\n    graphic_icon: 'graphic_icon',\n    graphic_img: 'graphic_img',\n    graphic_none: 'graphic_none',\n};\n\nconst SETTINGS_MAP = {\n    [SETTINGS_KEY.subtitle]: 'Subtitle',\n    [SETTINGS_KEY.caption]: 'Caption',\n    [SETTINGS_KEY.primary]: 'Button primary',\n    [SETTINGS_KEY.secondary]: 'Button secondary',\n    ...(IS_MOBILE ? { [SETTINGS_KEY.button_columns]: 'Buttons vertical layout' } : null),\n};\n\nconst SELECT_OPTIONS = [\n    {\n        key: SETTINGS_KEY.graphic_icon,\n        content: 'IconView',\n    },\n    {\n        key: SETTINGS_KEY.graphic_img,\n        content: 'Img',\n    },\n    {\n        key: SETTINGS_KEY.graphic_none,\n        content: 'None',\n    },\n];\n\nconst sizeButton = IS_MOBILE ? 'm' : 's';\n\nrender(() => {\n    const [graphic, setGraphic] = React.useState(SELECT_OPTIONS[0].key);\n    const [open, setOpen] = React.useState(false);\n    const [settings, setSettings] = React.useState(() =>\n        Object.keys(SETTINGS_MAP).reduce((res, name) => ({ ...res, [name]: true }), {}),\n    );\n\n    const handleSettingsChange = (_, { name, checked }) => {\n        setSettings((prevState) => ({ ...prevState, [name]: checked }));\n    };\n\n    const renderGraphic = () => {\n        if (graphic === SETTINGS_KEY.graphic_icon) {\n            return (\n                <SystemMessage.Graphic>\n                    <SuperEllipse size={80} backgroundColor='var(--color-light-neutral-translucent-100)'>\n                        <MobilePhoneBubbleLineMIcon color='var(--color-light-neutral-translucent-1300)' />\n                    </SuperEllipse>\n                </SystemMessage.Graphic>\n            );\n        }\n\n        if (graphic === SETTINGS_KEY.graphic_img) {\n            return (\n                <SystemMessage.Graphic>\n                    <img\n                        src='./images/system-message_graphic.png'\n                        alt='system message graphic'\n                        width='100%'\n                    />\n                </SystemMessage.Graphic>\n            );\n        }\n\n        return null;\n    };\n\n    return (\n        <>\n            <Modal open={open} onClose={() => setOpen(false)}>\n                <Modal.Header hasCloser={true} />\n                <Modal.Content flex={true}>\n                    <SystemMessage\n                        fullHeight={true}\n                        padding={IS_MOBILE ? 0 : { right: 24, left: 24, bottom: 24 }}\n                    >\n                        {renderGraphic()}\n\n                        <SystemMessage.Title>\n                            Подтвердите подключение кодом из смс\n                        </SystemMessage.Title>\n\n                        {settings[SETTINGS_KEY.subtitle] && (\n                            <SystemMessage.Subtitle>\n                                Проверили вашу заявку — всё в порядке. Осталось подтвердить\n                                подключение\n                            </SystemMessage.Subtitle>\n                        )}\n\n                        {settings[SETTINGS_KEY.caption] && (\n                            <SystemMessage.Caption>\n                                Для этого нажмите на кнопочку ниже\n                            </SystemMessage.Caption>\n                        )}\n\n                        {(settings[SETTINGS_KEY.primary] || settings[SETTINGS_KEY.secondary]) && (\n                            <SystemMessage.Controls\n                                direction={settings[SETTINGS_KEY.button_columns] ? 'column' : 'row'}\n                            >\n                                {settings[SETTINGS_KEY.primary] && (\n                                    <Button size={sizeButton} view='primary'>\n                                        Получить код\n                                    </Button>\n                                )}\n\n                                {settings[SETTINGS_KEY.secondary] && (\n                                    <Button size={sizeButton} onClick={() => setOpen(false)}>\n                                        Отмена\n                                    </Button>\n                                )}\n                            </SystemMessage.Controls>\n                        )}\n                    </SystemMessage>\n                </Modal.Content>\n            </Modal>\n\n            <Button onClick={() => setOpen(true)}>Открыть модалку</Button>\n\n            <Gap size='m' />\n\n            <div style={{ maxWidth: 320 }}>\n                <Select\n                    block={true}\n                    label='Graphic'\n                    options={SELECT_OPTIONS}\n                    selected={graphic}\n                    onChange={({ selected }) => setGraphic(selected.key)}\n                    Option={BaseOption}\n                />\n            </div>\n\n            <Gap size='m' />\n\n            <CheckboxGroup onChange={handleSettingsChange}>\n                {Object.keys(SETTINGS_MAP).map((name) => (\n                    <Switch\n                        key={name}\n                        size='m'\n                        label={SETTINGS_MAP[name]}\n                        name={name}\n                        checked={settings[name]}\n                    />\n                ))}\n            </CheckboxGroup>\n        </>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Morphology Component Structure Description\nDESCRIPTION: The Morphology component is a custom React component that functions as a [Select] element with a [CustomButton] substituted for the default input field. This structure allows for customizable button appearances while preserving select-like behavior, enabling flexible styling and interaction patterns within the UI.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/custom-picker-button/src/docs/description.mdx#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Rendering PureCell Addons with Monetary Values, Icons, and Buttons in React JSX\nDESCRIPTION: This snippet demonstrates rendering multiple PureCell addons within a Container component using React JSX. It involves displaying financial amounts with minor units and currency formatting using PureCell.Amount, alongside status badges and icons. Additionally, it shows grouping icons and rendering buttons inside an addon. Required dependencies include PureCell and related subcomponents such as PureCell.Amount, PureCell.Addon, and UI elements like StatusBadge, AirplaneSIcon, StarMIcon, and Button. Inputs include numeric values, currency codes, colors, and styling props controlling layout and appearance. The output is a set of horizontally aligned PureCell components each with customized content. Limitations involve styling manually applied via inline CSS for width and flex gap adjustments.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pure-cell/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => (\n    <Container>\n        <div style={{ width: 80 }}>\n            <PureCell direction='horizontal' verticalPadding='default'>\n                <PureCell.Content>\n                    <PureCell.Addon addonPadding='none'>\n                        <PureCell.Amount\n                            value={100099}\n                            minorUnits={100}\n                            currency='RUR'\n                            color='primary'\n                            view={'withZeroMinorPart'}\n                            transparentMinor={true}\n                        />\n                        <PureCell.Text titleColor='secondary' view='component-primary'>\n                            Text\n                        </PureCell.Text>\n                    </PureCell.Addon>\n                </PureCell.Content>\n            </PureCell>\n        </div>\n        <div style={{ width: 110 }}>\n            <PureCell direction='horizontal' verticalPadding='default'>\n                <PureCell.Content>\n                    <PureCell.Addon addonPadding='none'>\n                        <div style={{ display: 'flex', gap: '6px' }}>\n                            <PureCell.Amount\n                                value={100099}\n                                minorUnits={100}\n                                currency='RUR'\n                                color='primary'\n                                view='withZeroMinorPart'\n                                transparentMinor={true}\n                            />\n                            <StatusBadge view='neutral-operation' />\n                        </div>\n                        <div style={{ display: 'flex', gap: '6px' }}>\n                            <PureCell.Amount\n                                value={100}\n                                minorUnits={1}\n                                color='primary'\n                                showPlus={true}\n                                transparentMinor={true}\n                            />\n                            <AirplaneSIcon fill='#EF3124' />\n                        </div>\n                    </PureCell.Addon>\n                </PureCell.Content>\n            </PureCell>\n        </div>\n\n        <div style={{ width: 64 }}>\n            <PureCell direction='horizontal' verticalPadding='default'>\n                <PureCell.Content>\n                    <PureCell.Addon addonPadding='none'>\n                        <div style={{ display: 'flex', gap: '16px' }}>\n                            <StarMIcon />\n                            <StarMIcon />\n                        </div>\n                    </PureCell.Addon>\n                </PureCell.Content>\n            </PureCell>\n        </div>\n\n        <div style={{ width: 110 }}>\n            <PureCell direction='horizontal' verticalPadding='default'>\n                <PureCell.Content>\n                    <PureCell.Addon addonPadding='none'>\n                        <Button size='xxs'>Button Text</Button>\n                    </PureCell.Addon>\n                </PureCell.Content>\n            </PureCell>\n        </div>\n    </Container>\n));\n```\n\n----------------------------------------\n\nTITLE: Multi-Step Modal Mobile Implementation (React/JSX)\nDESCRIPTION: This code snippet implements a multi-step modal for mobile devices using React and JSX with the UniversalModalMobile component. It defines modal content for each step and manages state to control modal visibility and the current step. The mobile version includes specific UI elements such as a back button in the header for navigation between steps and dynamic updates to the header, content, and footer based on the current step.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/universal-modal/src/docs/description.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst modalsDataMobile = {\n    1: {\n        title: 'Первый уровень',\n        btnText: 'Дальше',\n        bg: '#D8EAFF',\n        color: '#2288FA',\n    },\n    2: {\n        title: 'Второй уровень',\n        btnText: 'Дальше',\n        bg: '#D1F1D7',\n        color: '#0CC44D',\n    },\n    3: {\n        title: 'Третий уровень',\n        btnText: 'Готово',\n        bg: '#FDE6C8',\n        color: '#FA9313',\n    },\n};\nrender(() => {\n    const [open, setOpen] = React.useState(false);\n    const [step, setStep] = React.useState(1);\n\n    const item = modalsDataMobile[step];\n\n    const commonStyles = {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        transition: 'background 0.2s ease-in, border 0.2s ease-in',\n        borderRadius: '8px',\n        background: item.bg,\n        color: item.color,\n        width: '100%',\n        boxSizing: 'border-box',\n    };\n\n    const handleNextButtonClick = () => {\n        if (step === Object.keys(modalsDataMobile).length) {\n            setOpen(false);\n            return;\n        }\n        setStep((prev) => prev + 1);\n    };\n\n    return (\n        <React.Fragment>\n            <Button onClick={() => setOpen((prev) => !prev)}>Показать модалку</Button>\n            <UniversalModalMobile open={open} height={500} onClose={() => setOpen(false)}>\n                <UniversalModalMobile.Header\n                    sticky={true}\n                    {...(step === 1 && {\n                        title: (\n                            <Typography.Title view='small' font='system'>\n                                {item.title}\n                            </Typography.Title>\n                        ),\n                    })}\n                    {...(step > 1 && {\n                        bottomAddons: (\n                            <Typography.Title view='small' font='system'>\n                                {item.title}\n                            </Typography.Title>\n                        ),\n                    })}\n                    {...(step > 1 && {\n                        leftAddons: (\n                            <ButtonMobile\n                                shape='rounded'\n                                size={32}\n                                leftAddons={\n                                    <ChevronLeftMIcon\n                                        style={{\n                                            fill: 'var(--color-light-neutral-translucent-700)',\n                                        }}\n                                    />\n                                }\n                                onClick={() => setStep((prev) => prev - 1)}\n                            />\n                        ),\n                    })}\n                    hasCloser={true}\n                    align='center'\n                    {...(step === 1 && { align: 'left' })}\n                />\n                <UniversalModalMobile.Content>\n                    <div\n                        style={{\n                            ...commonStyles,\n                            height: '100%',\n                        }}\n                    >\n                        <span style={{ fontWeight: 700, fontSize: '72px' }}>{step}</span>\n                    </div>\n                </UniversalModalMobile.Content>\n                <UniversalModalMobile.Footer sticky={true} layout='start'>\n                    <Button\n                        size={56}\n                        view='primary'\n                        onClick={handleNextButtonClick}\n                        block={isMobile()}\n                    >\n                        {item.btnText}\n                    </Button>\n                </UniversalModalMobile.Footer>\n            </UniversalModalMobile>\n        </React.Fragment>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Basic BankCard Component Implementation in React\nDESCRIPTION: This example renders a basic `BankCard` input field. It uses React's `useState` hook to manage the input's value and provides `Button` components to set a default value or clear the input. The `onChange` handler updates the state when the input value changes.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/bank-card/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [value, setValue] = React.useState('2201382000000013');\n\n    const handleChange = (event, payload) => setValue(payload.value);\n\n    return (\n        <>\n            <BankCard value={value} onChange={handleChange} />\n            <Gap size='xl' />\n            <Button size='xxs' onClick={() => setValue('2201382000000013')}>\n                Вставить номер карты\n            </Button>\n            <Gap size='s' direction='horizontal' />\n            <Button size='xxs' onClick={() => setValue('')}>\n                Очистить\n            </Button>\n        </>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Component Anatomy in React JSX\nDESCRIPTION: This code demonstrates the structure of Modal components for both desktop and mobile views. It defines styled containers to visually represent the header, content, and footer sections with dashed borders and blue backgrounds. The example includes state management for toggling the modal display.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/universal-modal/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst dashedBackground = {\n    boxSizing: 'border-box',\n    border: '1px dashed #2288FA',\n    backgroundColor: '#D8EAFF',\n    borderRadius: 8,\n};\n\nconst headerAnatomyStyles = {\n    padding: '20px 20px 0',\n    display: 'flex',\n    addonStyles: {\n        width: 48,\n        height: 48,\n        ...dashedBackground,\n    },\n    titleStyles: {\n        flexGrow: 1,\n        height: 48,\n        ...dashedBackground,\n    },\n};\n\nconst contentAnatomyStyles = {\n    padding: '0 32px',\n    height: 336,\n    content: {\n        height: '100%',\n        ...dashedBackground,\n    },\n    flex: 1,\n};\n\nconst footerAnatomyStyles = {\n    boxSizing: 'border-box',\n    padding: '16px 32px 32px',\n    footer: {\n        height: 48,\n        ...dashedBackground,\n    },\n};\nrender(() => {\n    const [open, setOpen] = React.useState(false);\n\n    return (\n        <React.Fragment>\n            <Button onClick={() => setOpen((prev) => !prev)}>Показать анатомию</Button>\n            <UniversalModalDesktop\n                open={open}\n                width={500}\n                height={500}\n                onClose={() => setOpen(false)}\n            >\n                <div style={{ ...headerAnatomyStyles }}>\n                    <div style={{ ...headerAnatomyStyles.addonStyles }} />\n                    <div style={{ ...headerAnatomyStyles.titleStyles }} />\n                    <div style={{ ...headerAnatomyStyles.addonStyles }} />\n                </div>\n                <div style={{ ...contentAnatomyStyles }}>\n                    <div style={{ ...contentAnatomyStyles.content }}></div>\n                </div>\n                <div style={{ ...footerAnatomyStyles }}>\n                    <div style={{ ...footerAnatomyStyles.footer }}></div>\n                </div>\n            </UniversalModalDesktop>\n        </React.Fragment>\n    );\n});\n\n//MOBILE\nconst dashedBackground = {\n    boxSizing: 'border-box',\n    border: '1px dashed #2288FA',\n    backgroundColor: '#D8EAFF',\n    borderRadius: 8,\n};\n\nconst headerAnatomyStyles = {\n    padding: '20px 20px 0',\n    display: 'flex',\n    addonStyles: {\n        width: 48,\n        height: 48,\n        ...dashedBackground,\n    },\n    titleStyles: {\n        flexGrow: 1,\n        height: 48,\n        ...dashedBackground,\n    },\n};\n\nconst contentAnatomyStyles = {\n    padding: '0 32px',\n    height: 336,\n    content: {\n        height: '100%',\n        ...dashedBackground,\n    },\n    flex: 1,\n};\n\nconst footerAnatomyStyles = {\n    boxSizing: 'border-box',\n    padding: '16px 32px 32px',\n    footer: {\n        height: 48,\n        ...dashedBackground,\n    },\n};\nrender(() => {\n    const [open, setOpen] = React.useState(false);\n\n    return (\n        <React.Fragment>\n            <Button onClick={() => setOpen((prev) => !prev)}>Показать анатомию</Button>\n            <UniversalModalMobile\n                open={open}\n                width={500}\n                height={500}\n                onClose={() => setOpen(false)}\n            >\n                <div style={{ ...headerAnatomyStyles }}>\n                    <div style={{ ...headerAnatomyStyles.addonStyles }} />\n                    <div style={{ ...headerAnatomyStyles.titleStyles }} />\n                    <div style={{ ...headerAnatomyStyles.addonStyles }} />\n                </div>\n                <div style={{ ...contentAnatomyStyles }}>\n                    <div style={{ ...contentAnatomyStyles.content }}></div>\n                </div>\n                <div style={{ ...footerAnatomyStyles }}>\n                    <div style={{ ...footerAnatomyStyles.footer }}></div>\n                </div>\n            </UniversalModalMobile>\n        </React.Fragment>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ComponentHeader with Radio Component Usage Instructions\nDESCRIPTION: Defines the component header section that provides important usage guidance, indicating that the Radio component should only be used within a RadioGroup component, with a link to the RadioGroup documentation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/radio/src/docs/Component.stories.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<ComponentHeader name='Radio'>\n    {'Используется только в составе\\u00A0'}\n    <Link view='default' underline={false} href={createComponentUrl('RadioGroup')}>\n        {'RadioGroup.'}\n    </Link>\n</ComponentHeader>\n```\n\n----------------------------------------\n\nTITLE: Providing Accessible Labels for Form Controls - HTML\nDESCRIPTION: This set of examples provides guidance for labeling interactive form elements such as input fields and buttons using explicit <label> elements and descriptive text. Dependencies: HTML5. Parameters: label association (for attribute, nesting). Inputs: text and password fields. Outputs: clear, accessible forms. Limitations: placeholder alone does not provide adequate accessibility; labels are essential.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/accessibility.stories.mdx#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n❌ Плохо\n<input type=\"text\" placeholder=\"Имя пользователя\" />\n\n✅ Хорошо\n<label>\n    Имя пользователя\n    <input type=\"text\" />\n</label>\n\n✅ Хорошо\n<label for=\"password\">Пароль</label>\n<input type=\"password\" id=\"password\" />\n\n✅ Хорошо\n<button type=\"button\">Загрузить историю платежей</button>\n```\n\n----------------------------------------\n\nTITLE: Positioning Modal and Tooltip with Stack (React/JSX)\nDESCRIPTION: This example demonstrates how to use the Stack component to manage the z-index of a modal and a tooltip. It shows how to nest Stack components to increment the z-index for child components. The modal's visibility is controlled by a state variable `modalOpen`.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/stack/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [modalOpen, setModalOpen] = React.useState(false);\n\n    return (\n        <div>\n            <Button onClick={() => setModalOpen(true)}>Показать модалку</Button>\n\n            <Stack value={1000}>\n                {(zIndex) => (\n                    <ModalDesktop\n                        zIndex={zIndex}\n                        open={modalOpen}\n                        onClose={() => setModalOpen(false)}\n                    >\n                        <ModalDesktop.Content>\n                            <style>{`.target {width: 100%}`}</style>\n                            <Stack>\n                                {(nextZIndex) => (\n                                    <Tooltip\n                                        zIndex={nextZIndex}\n                                        content={<div>Tooltip</div>}\n                                        trigger='click'\n                                        targetClassName='target'\n                                    >\n                                        <Button block={true}>Показать тултип</Button>\n                                    </Tooltip>\n                                )}\n                            </Stack>\n                        </ModalDesktop.Content>\n                    </ModalDesktop>\n                )}\n            </Stack>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Status Component with Different Sizes (React)\nDESCRIPTION: This snippet demonstrates the `Status` component with different sizes (40, 32, 24, and 20). The `size` prop controls the component's dimensions. The component is rendered within a flex container and uses the `Gap` component to separate the `Status` instances.  The `uppercase` prop is set to false.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/status/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Container>\n    <div style={{ display: 'flex' }}>\n        <Status size='40' uppercase={false}>\n            Всё в порядке\n        </Status>\n        <Gap size='12' direction='horizontal' />\n        <Status size='32' uppercase={false}>\n            Всё в порядке\n        </Status>\n        <Gap size='12' direction='horizontal' />\n        <Status size='24' uppercase={false}>\n            Всё в порядке\n        </Status>\n        <Gap size='12' direction='horizontal' />\n        <Status size='20' uppercase={false}>\n            Всё в порядке\n        </Status>\n    </div>\n</Container>\n```\n\n----------------------------------------\n\nTITLE: Rendering Sortable List with Styled Items and Drag End - JSX\nDESCRIPTION: This code snippet renders a SortableList with dynamically generated items. Each item is rendered using the `renderItem` function, which utilizes GenericWrapper, SuperEllipse, DiamondsMIcon, Gap, and Typography components to create a styled list item. The `onDragEnd` function updates the order of the items upon dragging and dropping. The SortableList has padding, borderRadius, and controlPadding. This example shows more complex styling with reusable components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/sortable-list/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [items, setItems] = React.useState(() =>\n        [1, 2, 3, 4, 5, 6].map((item) => ({ id: item })),\n    );\n\n    const renderItem = (item) => {\n        return (\n            <GenericWrapper alignItems='center' padding={{ top: 's', bottom: 's', left: 'm' }}>\n                <GenericWrapper>\n                    <SuperEllipse size={48}>\n                        <DiamondsMIcon />\n                    </SuperEllipse>\n                </GenericWrapper>\n                <Gap size='m' direction='horizontal' />\n                <GenericWrapper>\n                    <GenericWrapper column>\n                        <Typography.Text view='component-primary'>{`Элемент списка ${item.id}`}</Typography.Text>\n                        <Gap size='2xs' />\n                        <Typography.Text view='primary-small' color='secondary'>\n                            Перетащи меня\n                        </Typography.Text>\n                    </GenericWrapper>\n                </GenericWrapper>\n            </GenericWrapper>\n        );\n    };\n\n    return (\n        <div style={{ maxWidth: 350 }}>\n            <SortableList\n                items={items}\n                onDragEnd={(_, newIds) => setItems(newIds)}\n                padding='xs'\n                borderRadius='m'\n                controlPadding='s'\n                renderItem={renderItem}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Notifications with NotificationManager in React JSX\nDESCRIPTION: This snippet demonstrates how to implement a notification system using NotificationManager component. It includes functions for adding notifications with rotating badge colors, managing notification state with React hooks, and properly removing notifications from the state array.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/notification-manager/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [notifications, setNotifications] = React.useState([]);\n\n    const [count, setCount] = React.useState(1);\n\n    const getColorBadge = (num) => {\n        if (num % 3 === 1) {\n            return 'positive';\n        } else if (num % 3 === 2) {\n            return 'attention';\n        } else if (num % 3 === 0) {\n            return 'negative';\n        }\n    };\n\n    const addNotification = () => {\n        const newNotification = (\n            <Notification\n                badge={getColorBadge(count)}\n                title={`Уведомление #${count}`}\n                autoCloseDelay={3000}\n                id={count.toString()}\n                key={count.toString()}\n                zIndex={1000 + count}\n            >\n                Описание уведомления\n            </Notification>\n        );\n\n        setNotifications([...notifications, newNotification]);\n        setCount((val) => val + 1);\n    };\n\n    const removeNotification = React.useCallback((id) => {\n        /**\n         * Обратите внимание, что актуальный массив нотификаций\n         * нужно брать из аргументов функции обновления состояния.\n         */\n        setNotifications((actualNotifications) =>\n            actualNotifications.filter((notification) => notification.props.id !== id),\n        );\n    }, []);\n\n    return (\n        <div>\n            <Button onClick={addNotification}>Показать уведомление</Button>\n            <NotificationManager\n                notifications={notifications}\n                onRemoveNotification={removeNotification}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering SelectMobile Components with Custom Options in React (TypeScript)\nDESCRIPTION: This snippet shows how to render two SelectMobile components within a React functional component using TypeScript. Each SelectMobile is assigned a set of options, a display label, and a handler for selection changes that updates state via setBottomView. The components utilize props such as block, labelView, selected, Option (rendered via BaseOption), and size. Dependencies include React, the SelectMobile and BaseOption components, and the presence of BOTTOM_SELECT_OPTIONS variable. Input includes user interaction for selecting options; output is state change and UI update. All components are controlled and expect properly shaped props.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/navigation-bar/src/docs/description.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n                Option={BaseOption}\n                size={48}\n            />\n            <SelectMobile\n                block={true}\n                options={BOTTOM_SELECT_OPTIONS}\n                label='Нижний слот'\n                labelView='outer'\n                selected={bottomSelected}\n                onChange={({ selected }) => setBottomView(selected.key)}\n                Option={BaseOption}\n                size={48}\n            />\n        </Space>\n    </div>\n</div>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering customizable Plate with border and rounding toggles in React JSX\nDESCRIPTION: This snippet demonstrates rendering a Plate notification component with interactive toggles controlling border and rounding styles using React state hooks. It conditionally adjusts the presence of buttons based on device type, applies custom add-ons like StatusBadge, and manages layout height responsively. Dependencies include React, a utility isMobile() to detect device type, and imported components Button, Plate, StatusBadge, Switch, and Gap. Inputs are user interactions on switches, which update boolean states controlling 'border' and 'rounded' properties. Output is a dynamically styled Plate notification UI.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/plate/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [border, setBorder] = React.useState(true);\n    const [rounded, setRounded] = React.useState(true);\n    return (\n        <div style={{ height: isMobile() ? 110 : 150 }}>\n            <Plate\n                view='positive'\n                title='Пример уведомления'\n                border={border}\n                rounded={rounded}\n                subAddons={!isMobile() && [<Button>Подробнее</Button>]}\n                buttons={isMobile() && [<Button>Подробнее</Button>]}\n                leftAddons={\n                    <StatusBadge view='positive-checkmark' />\n                }\n                breakpoint={BREAKPOINT}\n            />\n            <Gap size='xl' />\n            <Switch\n                block={true}\n                checked={rounded}\n                label='Скругление'\n                onChange={() => setRounded(!rounded)}\n            />\n            <Gap size='m' />\n            <Switch\n                block={true}\n                checked={border}\n                label='Обводка'\n                onChange={() => setBorder(!border)}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Layout with Graphic and Content Slots in React JSX\nDESCRIPTION: This React JSX snippet implements a layout component with two primary slots: Graphic and Content, supporting vertical or horizontal arrangement controlled by React state. It uses inline styles to apply consistent spacing, sizing, and border styling to elements representing graphics, content blocks, addons, and footers. State management with useState hook manages the graphic positioning ('left', 'right', 'top'), and a RadioGroup enables the user to change this dynamically. The layout leverages PureCell components for structuring the graphical and content areas and supports styling with predefined presets. It depends on React, Storybook's Container, Row, and Col components for block layout, and PureCell subcomponents. The expected inputs include a graphic position value and UI event handlers, producing a flexible, styled composite layout output.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pure-cell/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [graphics, setGraphicsRadioValue] = React.useState('left');\n\n    const onGraphicsRadioChange = React.useCallback((_, payload) => {\n        setGraphicsRadioValue(payload.value);\n    }, []);\n\n    const styleAddons = {\n        width: '40px',\n        height: '40px',\n        borderRadius: '8px',\n        backgroundColor: 'rgba(55, 120, 251, 0.1)',\n        border: '1px dashed rgb(55, 120, 251)',\n        boxSizing: 'border-box',\n    };\n\n    const styleFooter = {\n        width: '263px',\n        height: '16px',\n        borderRadius: '8px',\n        backgroundColor: 'rgba(55, 120, 251, 0.1)',\n        border: '1px dashed rgb(55, 120, 251)',\n        boxSizing: 'border-box',\n    };\n\n    const styleContent = {\n        width: '207px',\n        height: '20px',\n        borderRadius: '8px',\n        backgroundColor: 'rgba(55, 120, 251, 0.1)',\n        border: '1px dashed rgb(55, 120, 251)',\n        boxSizing: 'border-box',\n    };\n\n    const styleGraphics = {\n        width: '64px',\n        height: '64px',\n        borderRadius: '8px',\n        backgroundColor: 'rgba(55, 120, 251, 0.1)',\n        border: '1px dashed rgb(55, 120, 251)',\n        boxSizing: 'border-box',\n    };\n\n    return (\n        <Space size={20}>\n            <div\n                style={{\n                    width: '340px',\n                    backgroundColor: 'rgba(55, 120, 251, 0.1)',\n                    padding: '12px 16px',\n                }}\n            >\n                <PureCell direction={graphics !== 'top' ? 'horizontal' : 'vertical'}>\n                    {graphics !== 'right' && (\n                        <PureCell.Graphics verticalAlign='center'>\n                            <div style={styleGraphics} />\n                        </PureCell.Graphics>\n                    )}\n                    <PureCell.Content>\n                        <PureCell.Main>\n                            <div style={styleContent} />\n                            <div style={styleContent} />\n                        </PureCell.Main>\n                        <PureCell.Addon verticalAlign='center'>\n                            <div style={styleAddons} />\n                        </PureCell.Addon>\n                        <PureCell.Footer footerPadding='default'>\n                            <div style={styleFooter} />\n                        </PureCell.Footer>\n                    </PureCell.Content>\n                    {graphics === 'right' && (\n                        <PureCell.Graphics>\n                            <div style={styleGraphics} />\n                        </PureCell.Graphics>\n                    )}\n                </PureCell>\n            </div>\n\n            <RadioGroup\n                direction='vertical'\n                name='radioGroup'\n                onChange={onGraphicsRadioChange}\n                value={graphics}\n            >\n                <Radio label='Графика слева' value='left' />\n                <Radio label='Графика справа' value='right' />\n                <Radio label='Графика сверху' value='top' />\n            </RadioGroup>\n        </Space>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Desktop Tabs with Overflow Handling in React\nDESCRIPTION: This React snippet defines a desktop tab component with options for handling overflow via scrollable or collapsible behavior, allowing users to select a subset of tabs and switch between them. It manages state for selected tab, overflow type, and text style, updating UI accordingly. Dependencies include React and the Tabs components (TabsDesktop, TabsCollapsible, Tab, Typography, Gap, Space, RadioGroup, Radio).\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst TABS = [\n    { title: 'Aurum', id: 'tab-1' },\n    { title: 'Bercelium', id: 'tab-2' },\n    { title: 'Curium', id: 'tab-3' },\n    { title: 'Neptunium', id: 'tab-4' },\n    { title: 'Plutonuim', id: 'tab-5' },\n    { title: 'Rubidium', id: 'tab-6' },\n    { title: 'Californium', id: 'tab-7' },\n    { title: 'Hydrogenium', id: 'tab-8' },\n    { title: 'Helium', id: 'tab-9' },\n    { title: 'Lithium', id: 'tab-10' },\n    { title: 'Beryllium', id: 'tab-11' },\n    { title: 'Borum', id: 'tab-12' },\n    { title: 'Carboneum', id: 'tab-13' },\n    { title: 'Nitrogenium', id: 'tab-14' },\n    { title: 'Oxygenium', id: 'tab-15' },\n];\n\nrender(() => {\n    const [selectedId, setSelectedId] = React.useState(TABS[0].id);\n\n    const [count, setCount] = React.useState('3');\n    const [overflowType, setOverflowType] = React.useState('scrollable');\n    const [textStyle, setTextStyle] = React.useState('paragraph-primary-large');\n\n    const handleChange = (event, { selectedId }) => {\n        setSelectedId(selectedId);\n    };\n\n    const TabsComponent = overflowType === 'collapsible' ? TabsCollapsible : TabsDesktop;\n\n    return (\n        <>\n            <TabsComponent\n                selectedId={selectedId}\n                onChange={handleChange}\n                scrollable={overflowType === 'scrollable'}\n                textStyle={textStyle}\n            >\n                {TABS.slice(0, Number(count)).map((item) => (\n                    <Tab title={item.title} id={item.id} key={item.id} />\n                ))}\n            </TabsComponent>\n            <br />\n            <Typography.Text view='primary-medium' color='secondary'>\n                Выбран таб: {TABS.find((tab) => tab.id === selectedId).title}\n            </Typography.Text>\n\n            <Gap size='l' />\n\n            <Space size={24}>\n                <RadioGroup\n                    direction='vertical'\n                    label='Количество табов'\n                    value={count}\n                    onChange={(e) => {\n                        setCount(e.target.value);\n                        setSelectedId(TABS[0].id);\n                    }}\n                >\n                    <Radio label='3' value='3' />\n                    <Radio label='15' value='15' />\n                </RadioGroup>\n\n                <RadioGroup\n                    direction='vertical'\n                    label='Обработка переполнения'\n                    value={overflowType}\n                    onChange={(e) => setOverflowType(e.target.value)}\n                >\n                    <Radio label='Scrollable' value='scrollable' />\n                    <Radio label='Collapsible' value='collapsible' />\n                </RadioGroup>\n\n                <RadioGroup\n                    direction='vertical'\n                    label='Стиль текста табов'\n                    value={textStyle}\n                    onChange={(e) => setTextStyle(e.target.value)}\n                >\n                    <Radio label='Paragraph primary large' value='paragraph-primary-large' />\n                    <Radio label='Headline small' value='headline-small' />\n                </RadioGroup>\n            </Space>\n        </>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Structuring Navigation Menus Accessibly - HTML\nDESCRIPTION: These examples show how to properly create accessible navigation menus using semantic elements like <nav>, <ul>, <li>, and ARIA attributes instead of plain divs and spans. Dependencies: Standard HTML5, understanding of ARIA roles and aria-current. Key parameters include navigation elements and ARIA attributes. Expected input is a menu component, output is an accessible navigation structure. Limitations: Requires correct application of ARIA roles for full assistive technology support.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/accessibility.stories.mdx#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n❌ Плохо\n<div class=\"menu\">\n    <span class=\"menu-item current\">Шапки, шарфы, варежки</span>\n    <span class=\"menu-item\"><a href=\"#\">Цены</a></span>\n    <span class=\"menu-item\"><a href=\"#\">Контакты</a></span>\n</div>\n\n✅ Хорошо\n<nav>\n    <ul>\n        <li aria-current=\"page\">\n            <span class=\"current\"\n                ><span class=\"visually-hidden\">Текущий пункт:</span>Шапки, шарфы, варежки</span\n            >\n        </li>\n        <li><a href=\"#\">Цены</a></li>\n        <li><a href=\"#\">Контакты</a></li>\n    </ul>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Tag-based CheckboxGroup Mobile Implementation - React\nDESCRIPTION: This snippet demonstrates the use of Tags within a CheckboxGroup for mobile using React, using `CheckboxGroupMobile`. It utilizes the `type='tag'` property to render the checkboxes as tags on mobile devices.  The code manages state for each tag and includes error handling. It follows the same logic as the desktop version, but is rendered using mobile specific components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/checkbox-group/src/docs/description.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n//MOBILE\nrender(() => {\n    const [value, setValue] = React.useState({ one: false, two: false, three: false, four: false });\n    const [error, setError] = React.useState(false);\n\n    const onChange = (_, payload) => {\n        setValue({ ...value, [payload.name]: payload.checked });\n    };\n\n    return (\n        <div style={{ width: '100%' }}>\n            <CheckboxGroupMobile\n                label='Выберите один или несколько вариантов'\n                onChange={onChange}\n                direction='horizontal'\n                type='tag'\n                hint='Выберите один из вариантов'\n                error={error}\n            >\n                <Tag name='one' checked={value.one}>\n                    Вариант 1\n                </Tag>\n                <Tag name='two' checked={value.two}>\n                    Вариант 2\n                </Tag>\n                <Tag name='three' checked={value.three}>\n                    Вариант 3\n                </Tag>\n                <Tag name='four' checked={value.four}>\n                    Вариант 4\n                </Tag>\n            </CheckboxGroupMobile>\n\n            <Gap size='2xl' />\n\n            <Space direction='horizontal' wrap={true}>\n                <Button size='xxs' onClick={() => setError(false)}>\n                    По умолчанию\n                </Button>\n                <Button size='xxs' onClick={() => setError('Error message')}>\n                    Состояние ошибки\n                </Button>\n            </Space>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Modal Component Usage Example in React Storybook\nDESCRIPTION: A comprehensive example showing how to use the Modal component with various configuration options including headers, footers, content, and responsive variants. The example demonstrates controlling modal state and customizing appearance.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/modal/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nexport const ModalComponent = ModalDesktop;\n\n<Story name='Modal'>\n    {React.createElement(() => {\n        const [open, setOpen] = React.useState(false);\n        const handleModalOpen = () => setOpen(!open);\n        const component = select(\n            'ModalComponent',\n            ['ModalResponsive', 'ModalDesktop', 'ModalMobile'],\n            'ModalResponsive',\n        );\n        const header = boolean('header', true);\n        const headerTitle = text('header.title');\n        const hasCloser = boolean('header.hasCloser', true);\n        const trim = boolean('header.trim', true);\n        const align = select('header.align', ['left', 'right', 'center'], 'left');\n        const stickyHeader = boolean('header.sticky', false);\n        const footer = boolean('footer', false);\n        const stickyFooter = boolean('footer.sticky', false);\n        const footerLayout = select(\n            'footer.layout',\n            ['start', 'center', 'space-between', 'column'],\n            'start',\n        );\n        const footerGap = select('footer.gap', [false, 16, 24, 32], false);\n        const flexContent = boolean('content.flex', false);\n        const ModalComponent =\n            component === 'ModalResponsive'\n                ? ModalResponsive\n                : component === 'ModalDesktop'\n                ? ModalDesktop\n                : ModalMobile;\n        const props =\n            ModalComponent !== ModalMobile\n                ? {\n                      size: select('size', [500, 600, 800, 1140, 'fullscreen'], 500),\n                  }\n                : {};\n        const previewStyles = stylesStringToObj(getQueryParam('wrapperStyles'));\n        const isPreview = Object.keys(previewStyles).length > 0;\n        const isMobile = ModalComponent === ModalMobile;\n        const FooterButton = isMobile ? ButtonMobile : ButtonDesktop;\n        return (\n            <div style={{ display: 'inline-block', background: 'transparent', ...previewStyles }}>\n                <Button type='button' size='xs' onClick={handleModalOpen}>\n                    Открыть модалку\n                </Button>\n                <ModalComponent\n                    open={open || boolean('open')}\n                    onClose={handleModalOpen}\n                    keepMounted={boolean('keepMounted', false)}\n                    backdropProps={{\n                        invisible: boolean('invisibleBackdrop', false),\n                    }}\n                    {...props}\n                >\n                    {header && (\n                        <ModalComponent.Header\n                            sticky={stickyHeader}\n                            hasCloser={hasCloser}\n                            title={headerTitle}\n                            trim={trim}\n                            align={align}\n                        />\n                    )}\n                    <ModalComponent.Content flex={flexContent}>\n                        <Content isPreview={isPreview} />\n                    </ModalComponent.Content>\n                    {footer && (\n                        <ModalComponent.Footer sticky={stickyFooter}>\n                            <ModalComponent.Controls\n                                layout={footerLayout}\n                                gap={footerGap}\n                                primary={\n                                    <FooterButton size={isMobile ? 'm' : 's'} view='primary'>\n                                        {isPreview ? 'Кнопка' : 'Сохранить'}\n                                    </FooterButton>\n                                }\n                                secondary={\n                                    <FooterButton size={isMobile ? 'm' : 's'} view='secondary'>\n                                        {isPreview ? 'Кнопка' : 'Отмена'}\n                                    </FooterButton>\n                                }\n                            />\n                        </ModalComponent.Footer>\n                    )}\n                </ModalComponent>\n            </div>\n        );\n    })}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Customizing Tooltip Positioning and Fallback in React\nDESCRIPTION: This code snippet illustrates the use of `fallbackPlacements` prop to specify alternate positions for the tooltip if the primary position ('left') is not suitable. The `position` prop sets the default position of the tooltip, while `fallbackPlacements` is an array specifying the order in which the component attempts to display in case of space limitations. The snippet uses a div for styling and layout control, and includes button element to trigger the tooltip.  The expected output is a tooltip that displays, possibly in a fallback position, when the button is clicked.  This example requires a `Tooltip` and `Button` component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tooltip/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<div\n    style={{\n        width: '100%',\n        height: '300px',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n    }}\n>\n    <Tooltip\n        position='left'\n        fallbackPlacements={['bottom', 'top']}\n        trigger='click'\n        content={<div style={{ width: 241 }}> Пример небольшого вспомогательного текста. </div>}\n    >\n        <Button view='primary'>Показать Tooltip</Button>\n    </Tooltip>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Date Range Input with React\nDESCRIPTION: This snippet renders a date range input, allowing users to select a start and end date.  It utilizes `UniversalDateInput` with the `date-range` view and allows for the customization of calendar options and input controls, including calendar type (none, month-only) and keyboard input blocking. The `onChange` prop is used for handling date range selection. The initialization of the range uses `initialState` for reset functionality.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/universal-date-input/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst initialState = {\n    dateFrom: null,\n    dateTo: null,\n};\n\nrender(() => {\n    const [radioSelected, setRadioSelected] = React.useState('none');\n    const [disableUserInput, setDisableUserInput] = React.useState(false);\n    const [range, setRange] = React.useState(initialState);\n\n    const handleChange = (newRange) => setRange(newRange);\n\n    return (\n        <div style={{ width: isMobile() ? '100%' : 'var(--calendar-width)' }}>\n            <UniversalDateInput\n                breakpoint={BREAKPOINT}\n                block={true}\n                view='date-range'\n                label='Диапазон дат'\n                labelView={isMobile() ? 'outer' : 'inner'}\n                value={range}\n                size={isMobile() ? 48 : 56}\n                disableUserInput={disableUserInput}\n                picker={radioSelected !== 'none'}\n                rangeBehavior={radioSelected}\n                onChange={handleChange}\n                Calendar={Calendar}\n                calendarProps={{\n                    selectorView: 'month-only',\n                }}\n                clear={true}\n                onClear={(e) => {\n                    e.stopPropagation();\n                    setRange(initialState);\n                }}\n            />\n\n            <Gap size='xl' />\n\n            <RadioGroup\n                label='Календарь'\n                direction='vertical'\n                onChange={(_, { value }) => setRadioSelected(value)}\n                value={radioSelected}\n            >\n                <Radio label='Без календаря' value='none' />\n                <Radio label='С механикой уточнения границ' value='clarification' />\n                <Radio label='С механикой сброса границ' value='reset' />\n            </RadioGroup>\n\n            <Gap size='xl' />\n\n            <Switch\n                block={true}\n                checked={disableUserInput}\n                label='Запретить ввод с клавиатуры'\n                onChange={() => setDisableUserInput(!disableUserInput)}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering DateTimeInput Component with Picker in JSX\nDESCRIPTION: This snippet demonstrates the DateTimeInput component with an integrated date picker. The picker is used when date selection is restricted (e.g., no weekends allowed). The component includes label, placeholder, picker mode, block attribute and medium size.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/date-time-input/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(\n    <div style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}>\n        <DateTimeInput label='Дата и время' placeholder='ДД.ММ.ГГГГ, ЧЧ:ММ' picker block size='m' />\n    </div>,\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering PureCell Preview and Main View Components in React JSX\nDESCRIPTION: Renders a PureCell component in React with two modes: a preview mode displaying styled placeholders and a main mode rendering the full UI cell with dynamic properties like href, padding, and direction. Dependencies include React, the PureCell component library, and helper functions such as 'text' for property values. Key parameters include 'isPreview' to toggle modes, 'verticalPaddingPrepared', 'horizontalPadding', 'direction', and 'graphicPadding' to control layout and spacing. Inputs are React props and selectable parameters, outputs are styled JSX elements. Limitations include reliance on external styling constants and components such as Circle which are not defined here.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pure-cell/src/docs/Component.stories.mdx#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst styleGraphics = {\n    width: '64px',\n    height: '64px',\n    borderRadius: '8px',\n    backgroundColor: 'rgba(55, 120, 251, 0.1)',\n    border: '1px dashed rgb(55, 120, 251)',\n    boxSizing: 'border-box',\n};\nreturn isPreview ? (\n    <div style={previewStyles}>\n        <div\n            style={{\n                width: '320px',\n                backgroundColor: 'rgba(55, 120, 251, 0.1)',\n                padding: '12px 16px',\n            }}\n        >\n            <PureCell padding='default' direction='horizontal'>\n                <PureCell.Graphics verticalAlign='center'>\n                    <div style={styleGraphics} />\n                </PureCell.Graphics>\n                <PureCell.Content>\n                    <PureCell.Main>\n                        <div style={styleContent} />\n                        <div style={styleContent} />\n                    </PureCell.Main>\n                    <PureCell.Addon verticalAlign='center'>\n                        <div style={styleAddons} />\n                    </PureCell.Addon>\n                    <PureCell.Footer footerPadding='default'>\n                        <div style={styleFooter} />\n                    </PureCell.Footer>\n                </PureCell.Content>\n            </PureCell>\n        </div>\n    </div>\n) : (\n    <PureCell\n        href={text(\"href\", \"\")}\n        verticalPadding={verticalPaddingPrepared}\n        horizontalPadding={horizontalPadding}\n        direction={direction}\n    >\n        <PureCell.Graphics graphicPadding={graphicPadding}>\n            <Circle />\n        </PureCell.Graphics>\n        <PureCell.Content>\n            <PureCell.Main>\n                <PureCell.Text titleColor='primary' view='component-primary' rowLimit={1}>\n                    Яндекс Лавка\n                </PureCell.Text>\n                <PureCell.Category\n                    categoryName={'Кафе, рестораны, столовые, бары'}\n                    categoryPercent={10}\n                />\n            </PureCell.Main>\n            <PureCell.Addon></PureCell.Addon>\n            <PureCell.Footer>\n                <PureCell.Comment>Комментарий есть</PureCell.Comment>\n            </PureCell.Footer>\n        </PureCell.Content>\n    </PureCell>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Complex PureCell Structure - React/JSX\nDESCRIPTION: Demonstrates a comprehensive `PureCell` layout including graphics, main text content (with primary and secondary text, category), footer elements (subtitle, button), and an addon containing a status badge. Shows how multiple sub-components are composed within a single `PureCell`.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pure-cell/src/docs/Component.stories.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n                                </PureCell.Text>\n                                <PureCell.Text titleColor='secondary' view='primary-small'>\n                                    Additional Info\n                                </PureCell.Text>\n                            </PureCell.Main>\n                            <PureCell.Addon verticalAlign='center'>\n                                <div style={{ width: 24, height: 24, display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                                    <StatusBadge size={20} view='neutral-information' />\n                                </div>\n                            </PureCell.Addon>\n                        </PureCell.Content>\n                    </PureCell>\n                    <PureCell\n                        href={text('href', '')}\n                         verticalPadding={verticalPaddingPrepared}\n                        horizontalPadding={horizontalPadding}\n                        direction={direction}\n                    >\n                        <PureCell.Graphics graphicPadding={graphicPadding}>\n                            <Circle />\n                        </PureCell.Graphics>\n                        <PureCell.Content>\n                            <PureCell.Main>\n                                <PureCell.Text\n                                    titleColor='primary'\n                                    view='component-primary'\n                                    rowLimit={1}\n                                >\n                                    Яндекс Лавка\n                                </PureCell.Text>\n                                <PureCell.Category\n                                    categoryName={'Кафе, рестораны, столовые, бары'}\n                                    categoryPercent={10}\n                                />\n                            </PureCell.Main>\n                            <PureCell.Footer>\n                                <PureCell.ExtraSubtitle>Status</PureCell.ExtraSubtitle>\n                                <PureCell.FooterButton>Button</PureCell.FooterButton>\n                            </PureCell.Footer>\n                        </PureCell.Content>\n                    </PureCell>\n                </div>\n            </div>\n        );\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Confirmation Component with Multiple Verification Scenarios\nDESCRIPTION: This code snippet demonstrates how to implement a confirmation component that handles various verification scenarios such as successful verification, error states, retry limitations, and temporary blocks. It uses the useConfirmation hook to manage state and renders different UIs based on the device width.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/confirmation/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nrender(() => {\n    const isMobileFrame = document.body.clientWidth < 450;\n    const variants = [\n        { key: 'success', content: 'Корректный код' },\n        { key: 'error', content: 'Некорректный код' },\n        { key: 'fatal', content: 'Закончились попытки ввода кода' },\n        { key: 'sms-requests-ended', content: 'Закончились попытки запроса кода' },\n        { key: 'temp-block', content: 'Сценарий, когда форма временно заблокирована' },\n    ];\n\n    const [variant, setVariant] = React.useState(variants[0]);\n    const [shownSuccessScreen, setShownSuccessScreen] = React.useState(false);\n\n    const {\n        confirmationState,\n        confirmationScreen,\n        confirmationBlockSmsRetry,\n        setConfirmationState,\n        setConfirmationScreen,\n        setConfirmationBlockSmsRetry,\n    } = useConfirmation();\n\n    const handleInputFinished = () => {\n        setTimeout(() => {\n            switch (variant.key) {\n                case 'success':\n                    setShownSuccessScreen(true);\n                    setConfirmationState('INITIAL');\n                    break;\n                case 'error':\n                    setConfirmationState('CODE_ERROR');\n                    break;\n                case 'fatal':\n                    setConfirmationScreen('FATAL_ERROR');\n                    break;\n                case 'sms-requests-ended':\n                    setConfirmationState('CODE_ERROR');\n                    break;\n                case 'temp-block':\n                    setConfirmationScreen('TEMP_BLOCK');\n                    break;\n                default:\n                    break;\n            }\n        }, 1000);\n    };\n\n    const handleSmsRetryClick = () => {\n        setTimeout(() => {\n            if (variant.key === 'sms-requests-ended') {\n                setConfirmationBlockSmsRetry(true);\n            }\n            setConfirmationState('INITIAL');\n        }, 1000);\n    };\n\n    const handleTempBlockFinished = () => {\n        setConfirmationScreen('INITIAL');\n        setConfirmationState('CODE_SENDING');\n    };\n\n    const Component = isMobileFrame ? ConfirmationMobile : Confirmation;\n\n    return (\n        <div style={{ margin: '0 auto', width: isMobileFrame ? '100%' : 388 }}>\n            <SelectDesktop\n                block={true}\n                options={variants}\n                onChange={({ selected }) => {\n                    setShownSuccessScreen(false);\n                    setConfirmationState('INITIAL');\n                    setConfirmationScreen('INITIAL');\n                    setConfirmationBlockSmsRetry(false);\n                    setVariant(selected);\n                }}\n                selected={variant.key}\n                Option={BaseOption}\n                optionsListWidth='field'\n            />\n            <div\n                key={variant.key}\n                style={{\n                    margin: '16px 0 0',\n                    padding: '16px',\n                    boxShadow: '0 0 0 1px #eeeff1',\n                    boxSizing: 'border-box',\n                }}\n            >\n                {shownSuccessScreen ? (\n                    <div style={{ display: 'flex', flexFlow: 'column nowrap', height: 266 }}>\n                        <Gap size='2xl' />\n                        <div\n                            style={{\n                                display: 'flex',\n                                flexFlow: 'column nowrap',\n                                alignItems: 'center',\n                                flex: 1,\n                            }}\n                        >\n                            <div style={{ textAlign: 'center' }}>\n                                <SuperEllipse\n                                    size={80}\n                                    backgroundColor='var(--color-light-status-positive)'\n                                >\n                                    <CheckmarkMIcon style={{ fill: '#fff' }} />\n                                </SuperEllipse>\n\n                                <Gap size='m' />\n\n                                <Typography.Text view='primary-medium' weight='bold'>\n                                    Введён корректный код\n                                </Typography.Text>\n                            </div>\n\n                            <Gap size={isMobileFrame ? '2xl' : '4xl'} />\n\n                            <Button onClick={() => setShownSuccessScreen(false)} size='xs'>\n                                Попробовать ещё раз\n                            </Button>\n                        </div>\n                    </div>\n                ) : (\n                    <Component\n                        screen={confirmationScreen}\n                        state={confirmationState}\n                        alignContent='center'\n                        blockSmsRetry={confirmationBlockSmsRetry}\n                        countdownDuration={10000}\n                        onChangeState={setConfirmationState}\n                        onChangeScreen={setConfirmationScreen}\n                        onInputFinished={handleInputFinished}\n                        onSmsRetryClick={handleSmsRetryClick}\n                        onTempBlockFinished={handleTempBlockFinished}\n                        phone='+7 ··· ··· 07 24'\n                    />\n                )}\n            </div>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering SystemMessage with Interactive Controls (React/JSX)\nDESCRIPTION: This React functional component defines a Storybook story for the `SystemMessage` component. It utilizes Storybook knobs (`boolean`, `select`, `number`) to enable interactive manipulation of various props, allowing users to control the presence of graphic, title, subtitle, caption, and controls, the type of graphic rendered, button visibility, direction of controls, full height setting, breakpoint, and padding. It demonstrates how to structure the `SystemMessage` component with its child components and integrate other components like `SuperEllipse` and `Button` within its structure.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/system-message/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nReact.createElement(() => {\n        const graphic = select('graphic', ['IconView', 'Img', 'None'], 'IconView');\n        const title = boolean('title', true);\n        const subtitle = boolean('subtitle', true);\n        const caption = boolean('caption', true);\n        const controls = boolean('controls', true);\n        const controlDirection = select('direction', ['row', 'column'], 'row');\n        const showPrimaryButton = boolean('showPrimaryButton', true);\n        const showSecondaryButton = boolean('showSecondaryButton', true);\n        const fullHeight = boolean('fullHeight', false);\n        const breakpoint = number('breakpoint', 1024);\n        const previewStyles = stylesStringToObj(getQueryParam('wrapperStyles'));\n        const isPreview = Object.keys(previewStyles).length > 0;\n        const renderGraphic = () => {\n            if (graphic === 'IconView') {\n                return (\n                    <SystemMessage.Graphic>\n                        <SuperEllipse size={80}>\n                            <MobilePhoneBubbleLineMIcon\n                                color='var(--color-light-neutral-translucent-1300)'\n                                aria-label='mobile phone bubble'\n                            />\n                        </SuperEllipse>\n                    </SystemMessage.Graphic>\n                );\n            }\n            if (graphic === 'Img') {\n                return (\n                    <SystemMessage.Graphic>\n                        <img\n                            src='./images/system-message_graphic.png'\n                            alt='system message graphic'\n                            width='100%'\n                        />\n                    </SystemMessage.Graphic>\n                );\n            }\n            return null;\n        };\n        return (\n            <div\n                style={{\n                    display: 'inline-block',\n                    ...previewStyles,\n                }}\n            >\n                <div\n                    style={{\n                        boxSizing: 'border-box',\n                        maxWidth: 440,\n                        height: 640,\n                        ...(isPreview\n                            ? {\n                                  borderRadius: 12,\n                                  background: 'var(--color-light-modal-bg-primary)',\n                                  maxWidth: 500,\n                                  height: 384,\n                                  paddingTop: 40,\n                              }\n                            : null),\n                    }}\n                >\n                    <SystemMessage\n                        dataTestId='system-message'\n                        fullHeight={fullHeight}\n                        breakpoint={breakpoint}\n                        padding={{\n                            top: number('paddingTop', 0),\n                            right: number('paddingRight', 40),\n                            bottom: number('paddingBottom', 0),\n                            left: number('paddingLeft', 40),\n                        }}\n                    >\n                        {renderGraphic()}\n                        {title && (\n                            <SystemMessage.Title>\n                                Подтвердите подключение кодом из смс\n                            </SystemMessage.Title>\n                        )}\n                        {subtitle && (\n                            <SystemMessage.Subtitle>\n                                Проверили вашу заявку — всё в порядке. Осталось подтвердить\n                                подключение\n                            </SystemMessage.Subtitle>\n                        )}\n                        {caption && !isPreview && (\n                            <SystemMessage.Caption>\n                                Для этого нажмите на кнопочку ниже\n                            </SystemMessage.Caption>\n                        )}\n                        {controls && (\n                            <SystemMessage.Controls direction={controlDirection}>\n                                {showPrimaryButton && (\n                                    <Button\n                                        size={document.body.clientWidth < 371 ? 'm' : 's'}\n                                        view={isPreview ? 'secondary' : 'primary'}\n                                        breakpoint={breakpoint}\n                                    >\n                                        Получить код\n                                    </Button>\n                                )}\n                                {showSecondaryButton && !isPreview && (\n                                    <Button\n                                        size={document.body.clientWidth < 371 ? 'm' : 's'}\n                                        breakpoint={breakpoint}\n                                    >\n                                        Отмена\n                                    </Button>\n                                )}\n                            </SystemMessage.Controls>\n                        )}\n                    </SystemMessage>\n                </div>\n            </div>\n        );\n    })\n```\n\n----------------------------------------\n\nTITLE: Configuring Slider Segments and Step Size with React JSX\nDESCRIPTION: This snippet demonstrates how to set up a slider with customizable segment counts and step sizes within segments using a React functional component. It requires the React library and a Slider component supporting size, value, onChange, pips (for tick marks), and range props. State hooks control the slider's current value and slider progress. The example shows two sliders with different pips and range configurations, illustrating how to define discrete segment values and snapping behavior. Inputs are controlled slider thumb positions, and outputs are updated displayed values.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/slider/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [value, setValue] = React.useState(0);\n    const [slider, setSlider] = React.useState(1);\n\n    const handleChange = ({ value }) => setValue(value);\n    const handleChangeSlider = ({ value }) => setSlider(value);\n\n    return (\n        <>\n            <div>Value:{value}</div>\n            <br />\n            <Slider\n                size={4}\n                value={value}\n                onChange={handleChange}\n                pips={{\n                    mode: 'values',\n                    values: [0, 10, 100],\n                }}\n                range={{\n                    min: [0],\n                    '50%': [10, 10],\n                    max: [100],\n                }}\n            />\n            <br />\n            <br />\n            <div>Value:{slider}</div>\n            <br />\n            <Slider\n                size={4}\n                value={slider}\n                onChange={handleChangeSlider}\n                min={1}\n                max={8}\n                pips={{\n                    mode: 'steps',\n                }}\n            />\n        </>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Vertical CheckboxGroup Mobile Implementation - React\nDESCRIPTION: This snippet demonstrates a vertical CheckboxGroup implementation for mobile using React, using the `CheckboxGroupMobile` component.  It manages state for multiple checkboxes and displays an error state. The `onChange` handler updates the state based on the selected checkboxes.  It's optimized for mobile screens and shares the same logic as the desktop version.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/checkbox-group/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n//MOBILE\nrender(() => {\n    const [value, setValue] = React.useState({\n        one: false,\n        two: false,\n        three: false,\n        four: false,\n        five: false,\n    });\n    const [error, setError] = React.useState(false);\n\n    const onChange = (_, payload) => {\n        setValue({ ...value, [payload.name]: payload.checked });\n    };\n\n    return (\n        <div style={{ width: '100%' }}>\n            <CheckboxGroupMobile\n                label='Выберите планеты земной группы'\n                onChange={onChange}\n                hint='Несколько из этих планет принадлежат земной группе'\n                error={error}\n            >\n                <Checkbox label='Марс' name='one' checked={value.one} size={24} />\n                <Checkbox label='Юпитер' name='two' checked={value.two} size={24} />\n                <Checkbox label='Меркурий' name='three' checked={value.three} size={24} />\n                <Checkbox label='Сатурн' name='four' checked={value.four} size={24} />\n                <Checkbox label='Нептун' name='five' checked={value.five} size={24} />\n            </CheckboxGroupMobile>\n\n            <Gap size='2xl' />\n\n            <Space direction='horizontal' wrap={true}>\n                <Button size='xxs' onClick={() => setError(false)}>\n                    По умолчанию\n                </Button>\n                <Button size='xxs' onClick={() => setError('Правильный ответ: Марс и Меркурий')}>\n                    Состояние ошибки\n                </Button>\n            </Space>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Using Select in a Form (Desktop and Mobile) - React\nDESCRIPTION: This code snippet demonstrates how to use the Select component within a form, including form submission and handling the selected value. The `SelectDesktop` component is used for desktop and `SelectMobile` for mobile views. It utilizes React's `useState` and `useMemo` hooks to manage state and optimize rendering. The form submission serializes the form data and updates the `serialized` state.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/select/src/docs/description.mdx#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const options = React.useMemo(\n        () => [\n            { key: '1', content: 'Neptunium' },\n            { key: '2', content: 'Plutonium' },\n            { key: '3', content: 'Americium' },\n            { key: '4', content: 'Curium' },\n            { key: '5', content: 'Berkelium' },\n            { key: '6', content: 'Californium' },\n            { key: '7', content: 'Einsteinium' },\n            { key: '8', content: 'Fermium' },\n        ],\n        [],\n    );\n\n    const [serialized, setSerialized] = React.useState();\n    const [selected, setSelected] = React.useState([]);\n\n    const onSubmit = (event) => {\n        event.preventDefault();\n\n        const form = event.target;\n        const formData = new FormData(form);\n\n        setSerialized(new URLSearchParams(formData).toString());\n    };\n\n    const handleChange = ({ selectedMultiple }) => {\n        setSelected(selectedMultiple.map((option) => option.key));\n    };\n\n    return (\n        <form onSubmit={onSubmit}>\n            <Space>\n                <div style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}>\n                    <SelectDesktop\n                        allowUnselect={true}\n                        placeholder='Выберите элементы'\n                        label='Множественный выбор'\n                        block={true}\n                        name='select'\n                        optionsListWidth='field'\n                        Option={BaseOption}\n                        size={56}\n                        selected={selected}\n                        {...useSelectWithApply({\n                            options,\n                            selected,\n                            onChange: handleChange,\n                        })}\n                    />\n                </div>\n\n                <Button size={40} type='submit'>\n                    Отправить\n                </Button>\n\n                <div>serialized: {serialized}</div>\n            </Space>\n        </form>\n    );\n});\n//MOBILE\nrender(() => {\n    const options = React.useMemo(\n        () => [\n            { key: '1', content: 'Neptunium' },\n            { key: '2', content: 'Plutonium' },\n            { key: '3', content: 'Americium' },\n            { key: '4', content: 'Curium' },\n            { key: '5', content: 'Berkelium' },\n            { key: '6', content: 'Californium' },\n            { key: '7', content: 'Einsteinium' },\n            { key: '8', content: 'Fermium' },\n        ],\n        [],\n    );\n\n    const [serialized, setSerialized] = React.useState();\n    const [selected, setSelected] = React.useState([]);\n\n    const onSubmit = (event) => {\n        event.preventDefault();\n\n        const form = event.target;\n        const formData = new FormData(form);\n\n        setSerialized(new URLSearchParams(formData).toString());\n    };\n\n    const handleChange = ({ selectedMultiple }) => {\n        setSelected(selectedMultiple.map((option) => option.key));\n    };\n\n    return (\n        <form onSubmit={onSubmit}>\n            <div style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}>\n                <SelectMobile\n                    allowUnselect={true}\n                    size={56}\n                    block={true}\n                    options={options}\n                    placeholder='Выберите элемент'\n                    label='Множественный выбор'\n                    name='select'\n                    multiple={true}\n                    onChange={handleChange}\n                    selected={selected}\n                    Option={BaseOption}\n                />\n            </div>\n\n            <Gap size='m' />\n\n            <Button size={40} type='submit'>\n                Отправить\n            </Button>\n\n            <Gap size='m' />\n\n            <div>serialized: {serialized}</div>\n        </form>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a React Table with Selectable Rows and Expandable Content\nDESCRIPTION: An implementation of a table component with row selection functionality using checkboxes and expandable row content. Features include select all functionality, tooltips, and collapsible content for each row.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/table/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst data = [\n    {\n        id: 28,\n        date: '30.06.2022',\n        title: 'ООО \"КОРПУС-ИТ\"',\n        sum: 21000000,\n    },\n    {\n        id: 12,\n        date: '30.06.2022',\n        title: 'ОБЩЕСТВО С ОГРАНИЧЕННОЙ ОТВЕТСТВЕННОСТЬЮ \"МОБИЛСТИЛ\"',\n        subtitle:\n            'Оказание услуг по договору № 26/09 на основании акта № 1450 от 30 июня 2020 года, в т.ч. НДС 18%',\n        sum: 10002030,\n    },\n    {\n        id: 5,\n        date: '30.06.2022',\n        title: 'ИП Жуков Валерий Сергеевич',\n        subtitle: 'Услуги по ремонту за июнь, НДС не облагается',\n        sum: 3000069,\n    },\n];\n\nrender(() => {\n    const [selectedRows, setSelectedRows] = React.useState(new Set());\n\n    const handleRowSelect = (rowId) => {\n        const nextSelected = new Set(selectedRows);\n\n        if (rowId === 'all') {\n            setSelectedRows(\n                new Set(selectedRows.size === data.length ? [] : data.map((row) => row.id)),\n            );\n\n            return;\n        }\n\n        if (nextSelected.has(rowId)) {\n            nextSelected.delete(rowId);\n        } else {\n            nextSelected.add(rowId);\n        }\n\n        setSelectedRows(nextSelected);\n    };\n\n    return (\n        <Table>\n            <Table.THead>\n                <Table.THeadCell width='48px'>\n                    <Tooltip\n                        view='hint'\n                        position='top'\n                        content={\n                            <React.Fragment>\n                                Выбрать все\n                                <br />\n                                на странице\n                            </React.Fragment>\n                        }\n                    >\n                        <Checkbox\n                            size='m'\n                            onClick={() => handleRowSelect('all')}\n                            checked={\n                                data.length > 0 && data.every((row) => selectedRows.has(row.id))\n                            }\n                            indeterminate={\n                                data.length > 0 && data.some((row) => selectedRows.has(row.id))\n                            }\n                        />\n                    </Tooltip>\n                </Table.THeadCell>\n\n                <Table.THeadCell title='Дата'>Дата</Table.THeadCell>\n\n                <Table.THeadCell title='Контрагент'>Контрагент</Table.THeadCell>\n\n                <Table.THeadCell title='Сумма' textAlign='right' width={268}>\n                    Сумма\n                </Table.THeadCell>\n            </Table.THead>\n            <Table.TBody>\n                {data.map((row) => (\n                    <Table.TExpandableRow\n                        key={row.id}\n                        selected={selectedRows.has(row.id)}\n                        renderContent={(expanded) => (\n                            <>\n                                <Table.TCell colSpan={1} />\n                                <Table.TCell colSpan={3}>\n                                    <Collapse expanded={expanded}>\n                                        <div style={{ paddingBottom: '16px' }}>\n                                            <div\n                                                style={{\n                                                    border: '1px dashed #007AFF',\n                                                    height: '200px',\n                                                }}\n                                            />\n                                        </div>\n                                    </Collapse>\n                                </Table.TCell>\n                            </>\n                        )}\n                    >\n                        <Table.TCell>\n                            <Checkbox\n                                size='m'\n                                onClick={() => handleRowSelect(row.id)}\n                                checked={selectedRows.has(row.id)}\n                            />\n                        </Table.TCell>\n\n                        <Table.TCell>\n                            <Typography.Text view='primary-small' tag='div'>\n                                {row.date}\n                            </Typography.Text>\n                        </Table.TCell>\n\n                        <Table.TCell>\n                            <Space size={2}>\n                                <Typography.Text view='primary-small' tag='div'>\n                                    {row.title}\n                                </Typography.Text>\n                                <Typography.Text view='primary-small' color='secondary'>\n                                    {row.subtitle}\n                                </Typography.Text>\n                            </Space>\n                        </Table.TCell>\n\n                        <Table.TCell>\n                            <Amount\n                                value={row.sum}\n                                currency='RUR'\n                                minority={100}\n                                view='withZeroMinorPart'\n                                bold='full'\n                                transparentMinor={true}\n                            />\n                        </Table.TCell>\n                    </Table.TExpandableRow>\n                ))}\n            </Table.TBody>\n        </Table>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Slider Range Selection with Overlapping Thumbs in React JSX\nDESCRIPTION: This snippet demonstrates how to use a slider component to select a value range with two thumbs, allowing them to cross over by enabling the 'unconstrained-tap' behavior. It requires React and the Slider component with support for value and valueTo props to specify the range. It uses React state hooks holding objects with 'value' and 'valueTo' keys representing minimum and maximum thumb positions. The snippet also shows standard constrained range behavior for comparison. Inputs are thumb positions, outputs are the displayed min and max values updating dynamically on slider interaction.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/slider/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [sliderTap, setSliderTap] = React.useState({\n        value: 4,\n        valueTo: 6,\n    });\n\n    const [slider, setSlider] = React.useState({\n        value: 4,\n        valueTo: 6,\n    });\n\n    const handleChangeSliderTap = (payload) => {\n        setSliderTap(payload);\n    };\n\n    const handleChangeSlider = (payload) => {\n        setSlider(payload);\n    };\n\n    return (\n        <>\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <span>min: {sliderTap.value}</span>\n                <span>max: {sliderTap.valueTo}</span>\n            </div>\n            <Gap size='s' />\n            <Slider\n                size={4}\n                value={sliderTap.value}\n                valueTo={sliderTap.valueTo}\n                onChange={handleChangeSliderTap}\n                min={1}\n                max={8}\n                pips={{\n                    mode: 'steps',\n                }}\n            />\n            <Gap size='3xl' />\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <span>min: {slider.value}</span>\n                <span>max: {slider.valueTo}</span>\n            </div>\n            <Gap size='s' />\n            <Slider\n                size={4}\n                value={slider.value}\n                valueTo={slider.valueTo}\n                behaviour='unconstrained-tap'\n                onChange={handleChangeSlider}\n                min={1}\n                max={8}\n                pips={{\n                    mode: 'steps',\n                }}\n            />\n        </>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Usage Example of ArgsTabs with Markdown Components\nDESCRIPTION: Utilizes the ArgsTabs component to enable users to switch between Markdown desktop, mobile, and default components in a tabbed interface, facilitating responsive component testing and visualization.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/markdown/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ArgsTabs components={{MarkdownDesktop, MarkdownMobile, Markdown}} />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Date Range Input with Mask in React\nDESCRIPTION: This snippet demonstrates rendering a date range input field with a mask for the format 'DD.MM.YYYY - DD.MM.YYYY'. The input adapts its width based on the viewport width and allows for manual date entry. It requires the `DateRangeInput` component from the core components library and showcases a simple setup with `label` and `placeholder` props. It’s suitable for collecting date intervals with optional manual input.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/date-range-input/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nrender(\n    <div style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}>\n        <DateRangeInput\n            label='Период действия патента'\n            placeholder='ДД.ММ.ГГГГ - ДД.ММ.ГГГГ'\n            block={true}\n            size='m'\n        />\n    </div>,\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Documentation Layout in JSX\nDESCRIPTION: This snippet sets up the documentation page for the InputAutocomplete component using Storybook's Meta and block components. It imports necessary resources such as component stories, markdown changelogs, and MDX documentation files, then uses Meta to bind stories, ComponentHeader to provide a localized name and description, and Tabs to organize content sections (description, changelog, development). Dependencies include @storybook/addon-docs for Meta and Markdown, storybook/blocks for layout components, and raw md/mdx content for textual documentation. Inputs are the imported content modules and the component name, and output is the structured Storybook documentation page layout with multiple informational tabs.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/input-autocomplete/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta of={Stories} />\n\n<ComponentHeader\n    name='InputAutocomplete'\n    children='Даёт возможность выбрать значение из списка доступных, либо ввестить своё с \\u043fомощью клавиатуры.'\n/>\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Indicator Appearance - Desktop\nDESCRIPTION: This snippet demonstrates customization options for the `Indicator` component. It sets the `backgroundColor`, `color`, and `border` properties to alter its visual appearance. The layout uses flex containers to hold the indicators. It is an example of how to overwrite the base styles. The components used are Container and Indicator.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/indicator/src/docs/description.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst styles = {\n    display: 'flex',\n    justifyContent: 'center',\n    gap: '20px',\n    width: 108,\n    padding: 20,\n    backgroundColor: 'var(--color-light-base-bg-secondary)',\n    borderRadius: '12px',\n    boxSizing: 'border-box',\n    alignItems: 'center',\n};\n\nrender(\n    <Container>\n        <div style={styles}>\n            <Indicator\n                value={1}\n                height={24}\n                backgroundColor='var(--color-light-status-attention)'\n                color='var(--color-light-status-negative)'\n                border={{\n                    width: 4,\n                    color: 'var(--color-light-status-negative)',\n                }}\n            />\n            <Indicator\n                value={1}\n                height={24}\n                backgroundColor='var(--color-light-base-bg-primary)'\n                color='var(--color-light-status-info)'\n                border={{\n                    width: 2,\n                    color: 'var(--color-light-status-info)',\n                }}\n            />\n        </div>\n    </Container>\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing InputAutocomplete with Masked Input and Card Options in React (JSX)\nDESCRIPTION: This snippet customizes an InputAutocomplete component in React with masked input for formatted account entry and a custom dropdown option renderer displaying card content and names. It uses React state to track input, allows for filtered search among card options, and integrates a MaskedInput component to enforce input formatting. Key dependencies are React, InputAutocomplete, MaskedInput, BaseOption, Typography, Gap, and custom card data; expects form context where masked input and custom options rendering are relevant. Inputs are formatted card numbers, output is the selected or entered card displayed with appropriate formatting; it is intended for use cases such as bank account/card input fields.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/input-autocomplete/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nrender(() => {\n    const matchOption = (option, inputValue) =>\n        option.content.toLowerCase().includes((inputValue || '').toLowerCase());\n\n    const mask = [\n        /\\d/,\n        /\\d/,\n        /\\d/,\n        /\\d/,\n        ' ',\n        /\\d/,\n        /\\d/,\n        /\\d/,\n        /\\d/,\n        ' ',\n        /\\d/,\n        /\\d/,\n        /\\d/,\n        /\\d/,\n        ' ',\n        /\\d/,\n        /\\d/,\n        /\\d/,\n        /\\d/,\n    ];\n\n    const cards = [\n        {\n            key: 'Карта 1',\n            content: '4035 5010 0000 0008',\n        },\n        {\n            key: 'Карта 2',\n            content: '4360 0000 0100 0005',\n        },\n        {\n            key: 'Карта 3',\n            content: '8171 9999 2766 0000',\n        },\n        {\n            key: 'Карта 4',\n            content: '5204 2477 5000 1471',\n        },\n        {\n            key: 'Карта 5',\n            content: '4111 1111 1111 1111',\n        },\n    ];\n\n    const CardOption = (props) => (\n        <BaseOption {...props}>\n            <div style={{ padding: 'var(--gap-12)' }}>\n                <Typography.Text view='component-primary'>{props.option.content}</Typography.Text>\n                <Gap size='2xs' />\n                <Typography.Text view='primary-small' color='secondary'>\n                    {props.option.key}\n                </Typography.Text>\n            </div>\n        </BaseOption>\n    );\n\n    const [value, setValue] = React.useState('');\n    const inputRef = React.useRef();\n\n    const handleInput = (newValue) => setValue(newValue);\n\n    const handleChange = ({ selected }) => {\n        const value = selected ? selected.content : null;\n        setValue(value);\n        if (value && inputRef.current) {\n            requestAnimationFrame(() =>\n                inputRef.current.setSelectionRange(value.length, value.length),\n            );\n        }\n    };\n\n    const filteredOptions = cards.filter((option) => matchOption(option, value));\n\n    return (\n        <div style={{ width: isMobile() ? '100%' : 320 }}>\n            <InputAutocomplete\n                breakpoint={BREAKPOINT}\n                size='m'\n                options={filteredOptions}\n                selected={[]}\n                label='Маскированный ввод счёта'\n                placeholder='Счёт'\n                onInput={handleInput}\n                onChange={handleChange}\n                value={value}\n                Option={CardOption}\n                Input={MaskedInput}\n                block={true}\n                inputProps={{\n                    ref: inputRef,\n                    mask,\n                    clear: isMobile(),\n                    onClear: () => setValue(''),\n                }}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating SliderInput with Amount Input\nDESCRIPTION: This snippet demonstrates the integration of the SliderInput component with the AmountInput component for formatted input values.  It uses custom event handlers to synchronize the slider and input values, including formatting and validation.  It also shows how to configure range and pips properties to handle the amount input.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/slider-input/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst min = 50000;\nconst max = 10000000;\nconst step = 1000;\nconst range = {\n    min: [min],\n    '25%': [100000, 10000],\n    '75%': [1000000, 100000],\n    max: [max],\n};\nconst pips = {\n    mode: 'values',\n    values: [min, max],\n    format: {\n        to: (value) => {\n            if (value < 1000000) return `${value / 1000} тыс`;\n            return `${value / 1000000} млн`;\n        },\n    },\n};\n\nrender(() => {\n    const [value, setValue] = React.useState(120000);\n\n    const handleInputChange = (event, { value }) => {\n        setValue(value !== '' ? (value / 100).toString() : '');\n    };\n\n    const handleSliderChange = ({ value }) => {\n        setValue(value);\n    };\n\n    const handleBlur = () => {\n        if (value !== '') {\n            setValue(Math.max(min, Math.min(max, parseFloat(value.toString()))));\n        }\n    };\n\n    return (\n        <div style={{ width: isMobile() ? '100%' : 320 }}>\n            <SliderInput\n                block={true}\n                value={value !== '' ? value * 100 : ''}\n                sliderValue={value}\n                onInputChange={handleInputChange}\n                onSliderChange={handleSliderChange}\n                onBlur={handleBlur}\n                min={min}\n                max={max}\n                range={range}\n                pips={pips}\n                step={step}\n                label='Первоначальный взнос'\n                Input={AmountInput}\n                labelView={isMobile() ? 'outer' : 'inner'}\n                size={isMobile() ? 48 : 56}\n                breakpoint={BREAKPOINT}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Tag Styles and States in React (JSX)\nDESCRIPTION: Illustrates configuring the visual appearance of `Tag` components using `view` ('outlined', 'filled') and `shape` ('rounded', 'rectangular') props. Also demonstrates managing the `checked` state and toggling the `disabled` state for multiple tags using React state (`useState`) and a `Switch` component. Includes layout variations.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tag/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [disabled, setDisabled] = React.useState(false);\n\n    const VIEWS = [\n        { key: 'outlinedRounded', view: 'outlined', shape: 'rounded' },\n        { key: 'filledRounded', view: 'filled', shape: 'rounded' },\n        { key: 'outlinedRectangular', view: 'outlined', shape: 'rectangular' },\n        { key: 'filledRectangular', view: 'filled', shape: 'rectangular' },\n    ];\n\n    const [checked, setChecked] = React.useState(\n        Object.fromEntries(VIEWS.map((item) => [item.key, false])),\n    );\n\n    return (\n        <Container>\n            <Row align='middle'>\n                {VIEWS.map((item) => (\n                    <div key={item.key} style={{ marginRight: 12 }}>\n                        <Tag\n                            size='s'\n                            view={item.view}\n                            shape={item.shape}\n                            disabled={disabled}\n                            checked={checked[item.key]}\n                            onClick={() =>\n                                setChecked({ ...checked, [item.key]: !checked[item.key] })\n                            }\n                        >\n                            Label\n                        </Tag>\n                    </div>\n                ))}\n            </Row>\n\n            <Gap size='l' />\n\n            <Switch\n                checked={disabled}\n                onChange={() => setDisabled((prevState) => !prevState)}\n                label='Disabled'\n            />\n        </Container>\n    );\n});\n```\n\nLANGUAGE: jsx\nCODE:\n```\n//MOBILE\nrender(() => {\n    const [disabled, setDisabled] = React.useState(false);\n\n    const ROUNDEDS = [\n        { key: 'outlinedRounded', view: 'outlined', shape: 'rounded' },\n        { key: 'filledRounded', view: 'filled', shape: 'rounded' },\n    ];\n\n    const RECTANGLES = [\n        { key: 'outlinedRectangular', view: 'outlined', shape: 'rectangular' },\n        { key: 'filledRectangular', view: 'filled', shape: 'rectangular' },\n    ];\n    const [checkedRounded, setCheckedRounded] = React.useState(\n        Object.fromEntries(ROUNDEDS.map((item) => [item.key, false])),\n    );\n    const [checkedRectangular, setCheckedRectangular] = React.useState(\n        Object.fromEntries(ROUNDEDS.map((item) => [item.key, false])),\n    );\n\n    return (\n        <Container>\n            <Row align='middle'>\n                {ROUNDEDS.map((item) => (\n                    <div key={item.key} style={{ marginRight: 12 }}>\n                        <Tag\n                            size='s'\n                            view={item.view}\n                            shape={item.shape}\n                            disabled={disabled}\n                            checked={checkedRounded[item.key]}\n                            onClick={() =>\n                                setCheckedRounded({\n                                    ...checkedRounded,\n                                    [item.key]: !checkedRounded[item.key],\n                                })\n                            }\n                        >\n                            Label\n                        </Tag>\n                    </div>\n                ))}\n            </Row>\n            <Row align='middle'>\n                {RECTANGLES.map((item) => (\n                    <div key={item.key} style={{ marginRight: 12 }}>\n                        <Tag\n                            size='s'\n                            view={item.view}\n                            shape={item.shape}\n                            disabled={disabled}\n                            checked={checkedRectangular[item.key]}\n                            onClick={() =>\n                                setCheckedRectangular({\n                                    ...checkedRectangular,\n                                    [item.key]: !checkedRectangular[item.key],\n                                })\n                            }\n                        >\n                            Label\n                        </Tag>\n                    </div>\n                ))}\n            </Row>\n\n            <Gap size='l' />\n\n            <Switch\n                checked={disabled}\n                onChange={() => setDisabled((prevState) => !prevState)}\n                label='Disabled'\n            />\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing FilterTag with leftAddons Slot\nDESCRIPTION: Example of customizing the FilterTag component using the leftAddons slot to add a custom element. The example demonstrates toggling the addon and selected state with Switch components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/filter-tag/src/docs/description.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [leftAddons, setLeftAddons] = React.useState(true);\n    const [selected, setSelected] = React.useState(false);\n\n    const addon = () => {\n        if (leftAddons) {\n            return (\n                <div\n                    style={{\n                        width: 16,\n                        height: 16,\n                        backgroundColor: 'var(--color-light-status-muted-alt-info)',\n                        border: '1px dashed var(--color-light-status-info)',\n                        borderRadius: '4px',\n                    }}\n                />\n            );\n        }\n\n        return null;\n    };\n\n    return (\n        <Container>\n            <FilterTag size={32} checked={selected} leftAddons={addon()}>\n                {selected ? (\n                    <span>\n                        Label:<b> Value</b>\n                    </span>\n                ) : (\n                    <span>Label</span>\n                )}\n            </FilterTag>\n            <Gap size={24} />\n            <Switch\n                label='LeftAddon'\n                checked={leftAddons}\n                onChange={() => setLeftAddons((prevState) => !prevState)}\n            />\n            <Gap size={16} />\n            <Switch\n                label='Selected'\n                checked={selected}\n                onChange={() => setSelected((prevState) => !prevState)}\n            />\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Mq Component and useMatchMedia Hook in React\nDESCRIPTION: This snippet shows how to import the `Mq` component and the `useMatchMedia` hook from the `@alfalab/core-components/mq` package. These are used for implementing media query-based conditional rendering and logic within React applications.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/mq/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Mq, useMatchMedia } from '@alfalab/core-components/mq';\n```\n\n----------------------------------------\n\nTITLE: Creating Tabs for Documentation Sections in Storybook\nDESCRIPTION: Utilizes the Tabs component to organize different documentation sections like description, changelog, and development into a tabbed interface, enhancing navigation and readability within Storybook.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/checkbox-group/src/docs/Component.docs.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Data Structure for Chart Rendering\nDESCRIPTION: This snippet explains the expected data format for rendering charts, including 'labels' as an array of strings or numbers, and 'series' as an array of objects with a mandatory 'data' array. Each data item should contain 'label' and 'value' fields, defining the label and numerical value for each point.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/chart/src/docs/development.mdx#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Controlled File Input and Submission with Attach Component in React JSX\nDESCRIPTION: This snippet emulates controlled file input behavior in React using the Attach component by maintaining file selection state externally. It captures selected files on change, stores them in component state, and prepares a FormData payload to POST files asynchronously to a remote endpoint ('https://httpbin.org/post'). The submit button triggers the upload and stores the JSON response, which is then parsed and displayed as base64 images. Dependencies include React, Attach, Button, Space components, and fetch API. Key parameters include the 'value' attribute controlling selected files, 'onChange' handler adding files, and 'onClear' resetting selection. Limitations arise from the inability to fully control native file input values due to inherent browser restrictions.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/attach/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [response, setResponse] = React.useState(null);\n    const [files, setFiles] = React.useState([]);\n\n    const handleChange = (event, payload) => {\n        setFiles([...files, ...payload.files]);\n    };\n\n    const handleSubmit = () => {\n        const formData = new FormData();\n\n        files.forEach((file, i) => {\n            formData.append(`file${i}`, file);\n        });\n\n        fetch('https://httpbin.org/post', {\n            method: 'POST',\n            body: formData,\n        })\n            .then((r) => r.json())\n            .then((r) => setResponse(r));\n    };\n\n    return (\n        <Space size={24}>\n            <Attach\n                value={files}\n                onChange={handleChange}\n                multiple={true}\n                name='file'\n                onClear={() => setFiles([])}\n                size={56}\n                maxFilenameLength={isMobile() ? 10 : undefined}\n                buttonProps={{\n                    breakpoint: BREAKPOINT,\n                    nowrap: true,\n                }}\n            />\n            <Button size={32} type='button' onClick={handleSubmit}>\n                Отправить\n            </Button>\n\n            {response &&\n                Object.entries(response.files).map(([fileName, base64]) => (\n                    <img src={base64} key={fileName} width={100} />\n                ))}\n        </Space>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Storybook Meta and Documentation Layout in JSX\nDESCRIPTION: This JSX snippet sets up the Storybook documentation structure for the AmountInput component. It uses the <Meta> component to associate the page with imported stories, displays a localized header describing the component's use, and arranges documentation sections into tabs for description, changelog, and development guides using custom Markdown and MDX content. The main dependency is React with Storybook's documentation and block components. Inputs include imported documentation; the result is a fully interactive docs page for the component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/amount-input/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta of={Stories} />\n\n<ComponentHeader name='AmountInput' children='Используется для ввода сумм.' />\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Date and Time Input with React\nDESCRIPTION: This snippet renders a date and time input field. The `UniversalDateInput` is configured with the `date-time` view. It includes a `Switch` component to toggle the visibility of the calendar picker. The `onChange` prop handles date changes.  The `picker` state controls the calendar's visibility.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/universal-date-input/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [picker, setPicker] = React.useState(false);\n    const [date, setDate] = React.useState();\n\n    const handleChange = (date) => setDate(date);\n\n    return (\n        <div style={{ width: isMobile() ? '100%' : 'var(--calendar-width)' }}>\n            <UniversalDateInput\n                breakpoint={BREAKPOINT}\n                block={true}\n                view='date-time'\n                label='Дата и время'\n                labelView={isMobile() ? 'outer' : 'inner'}\n                size={isMobile() ? 48 : 56}\n                value={date}\n                onChange={handleChange}\n                picker={picker}\n                Calendar={Calendar}\n                calendarProps={{\n                    selectorView: 'month-only',\n                }}\n                clear={true}\n                onClear={(e) => {\n                    e.stopPropagation();\n                    setDate(null);\n                }}\n            />\n\n            <Gap size='xl' />\n\n            <Switch\n                block={true}\n                checked={picker}\n                label='Календарь для ввода даты'\n                onChange={() => setPicker(!picker)}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Plate component with dynamic content mechanics and user-controlled layout options in React JSX\nDESCRIPTION: This snippet implements a complex interactive interface allowing users to manipulate various properties of a Plate notification component, such as content folding, closing mechanics, badge visibility, title style, subtitle height limit, button positioning, content width limit, and folding state. React state manages the configuration object and folding toggle. Multiple RadioGroup controls handle user selections by updating the state, dynamically affecting Plate's appearance and behavior. Dependencies include React, components Container, Plate, StatusBadge, Button, Gap, RadioGroup, Radio, and breakpoint constant. Input is user interaction with radios; output is a Plate component updated in real-time to reflect chosen options.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/plate/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [folded, setFolded] = React.useState(true);\n    const [value, setValue] = React.useState({\n        badge: 'yes',\n        title: 'bold',\n        subTitle: 'no',\n        button: 'no',\n        width: 'limit',\n        mechanics: 'no',\n    });\n\n    const onChange = (_, payload) => {\n        setValue({ ...value, [payload.name]: payload.value });\n    };\n\n    return (\n        <Container>\n            <Plate\n                view='positive'\n                hasCloser={value.mechanics === 'close'}\n                title='Фёдор Михайлович Достоевский'\n                limitContentWidth={value.width === 'limit'}\n                rowLimit={value.subTitle === 'limit' && 3}\n                titleView={value.title}\n                foldable={value.mechanics === 'folded'}\n                folded={folded}\n                onToggle={() => setFolded(!folded)}\n                leftAddons={\n                    value.badge === 'yes' && (<StatusBadge view='positive-checkmark' />)\n                }\n                subAddons={\n                    value.button === 'right' && [<Button>Отлично</Button>, <Button>Хорошо</Button>]\n                }\n                buttons={\n                    value.button === 'bottom' && [<Button>Хорошо</Button>, <Button>Отлично</Button>]\n                }\n                breakpoint={BREAKPOINT}\n            >\n                После смерти Достоевский был признан классиком русской литературы и одним из лучших\n                романистов мирового значения, считается первым представителем персонализма в России.\n                Творчество русского писателя оказало воздействие на мировую литературу, в частности\n                на творчество ряда лауреатов Нобелевской премии по литературе, философов Фридриха\n                Ницше и Жана-Поля Сартра, а также на становление различных психологических учений и\n                экзистенциализма, его новелла 1864 года «Записки из подполья» считается одним из\n                первых произведений экзистенциалистской литературы.}\n            </Plate>\n            <Gap size='xl' />\n            <RadioGroup\n                label='Бейдж'\n                direction='vertical'\n                name='badge'\n                onChange={onChange}\n                value={value.badge}\n            >\n                <Radio size='m' label='Нет' value='no' />\n                <Radio size='m' label='Есть' value='yes' />\n            </RadioGroup>\n            <Gap size='xl' />\n            <RadioGroup\n                label='Заголовок'\n                direction='vertical'\n                name='title'\n                onChange={onChange}\n                value={value.title}\n            >\n                <Radio size='m' label='Обычный' value='bold' />\n                <Radio size='m' label='Облегчённый' value='light' />\n            </RadioGroup>\n            <Gap size='xl' />\n            <RadioGroup\n                label='Вспомогательный текст'\n                direction='vertical'\n                name='subTitle'\n                onChange={onChange}\n                value={value.subTitle}\n            >\n                <Radio size='m' label='Без ограничения по высоте' value='no' />\n                <Radio size='m' label='Ограничен тремя строками' value='limit' />\n            </RadioGroup>\n            <Gap size='xl' />\n            <RadioGroup\n                label='Кнопки'\n                direction='vertical'\n                name='button'\n                onChange={onChange}\n                value={value.button}\n            >\n                <Radio size='m' label='Нет' value='no' />\n                <Radio size='m' label='Справа от заголовка' value='right' />\n                <Radio size='m' label='Под контентом' value='bottom' />\n            </RadioGroup>\n            <Gap size='xl' />\n            <RadioGroup\n                label='Ограничение ширины контентной части'\n                direction='vertical'\n                name='width'\n                onChange={onChange}\n                value={value.width}\n            >\n                <Radio size='m' label='С ограничением' value='limit' />\n                <Radio size='m' label='Без ограничения' value='no' />\n            </RadioGroup>\n            <Gap size='xl' />\n            <RadioGroup\n                label='Механика'\n                direction='vertical'\n                name='mechanics'\n                onChange={onChange}\n                value={value.mechanics}\n            >\n                <Radio size='m' label='Нет' value='no' />\n                <Radio size='m' label='Скрыть контент' value='folded' />\n                <Radio size='m' label='Убрать уведомление' value='close' />\n            </RadioGroup>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination with Quick Access in React\nDESCRIPTION: This snippet implements a simple pagination component with quick access to pages using a Pagination component. It utilizes React hooks for state management and calculates the total page count based on data size. It enables navigation between pages with minimal configuration.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pagination/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nrender(() => {\n    const DATA_SIZE = isMobile() ? 5 : 20;\n    const PER_PAGE = 1;\n\n    const [page, setPage] = React.useState(0);\n\n    const handlePageChange = pageIndex => setPage(pageIndex);\n\n    const pagesCount = Math.ceil(DATA_SIZE / PER_PAGE);\n\n    return (\n        <Container align='center'>\n            <Pagination\n                currentPageIndex={page}\n                pagesCount={pagesCount}\n                onPageChange={handlePageChange}\n            />\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Tags with Different Sizes in React (JSX)\nDESCRIPTION: Demonstrates rendering multiple `Tag` components with recommended sizes ('s', 'xs', 'xxs'). Uses React state (`useState`) to manage the `checked` state for each tag, toggling it `onClick`. Components `Container` and `Row` are used for layout.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tag/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const SIZES = ['s', 'xs', 'xxs'];\n\n    const [checked, setChecked] = React.useState(\n        Object.fromEntries(SIZES.map((key) => [key, false])),\n    );\n\n    return (\n        <Container>\n            <Row align='middle'>\n                {SIZES.map((size) => (\n                    <div key={size} style={{ marginRight: 12 }}>\n                        <Tag\n                            size={size}\n                            checked={checked[size]}\n                            onClick={() => setChecked({ ...checked, [size]: !checked[size] })}\n                        >\n                            Label\n                        </Tag>\n                    </div>\n                ))}\n            </Row>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Stepper and Disabling Keyboard Input in NumberInput React JSX Component\nDESCRIPTION: This snippet demonstrates adding a stepper control to the NumberInput React component for incrementing/decrementing values in fixed steps, with the option to disable keyboard input. It leverages React hooks to manage the input value and a boolean state for disabling user keyboard input. Key props include 'step', 'min', 'max', and 'disableUserInput'. The component also includes a Switch to toggle keyboard input disabling. The snippet adapts responsively for mobile devices and enforces numeric input within specified bounds. Dependencies include React, NumberInput, Switch, Gap, and mixins for responsiveness.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/number-input/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [value, setValue] = React.useState();\n    const [disableUserInput, setDisableUserInput] = React.useState(false);\n\n    const handleChange = (_, payload) => {\n        setValue(payload.value);\n    };\n\n    return (\n        <div style={{ width: isMobile() ? '100%' : 320 }}>\n            <NumberInput\n                value={value}\n                onChange={handleChange}\n                step={1}\n                min={0}\n                max={10}\n                block={true}\n                disableUserInput={disableUserInput}\n                placeholder='Введите число'\n                label='Число'\n                labelView={isMobile() ? 'outer' : 'inner'}\n                size={isMobile() ? 48 : 56}\n                breakpoint={BREAKPOINT}\n            />\n\n            <Gap size='xl' />\n\n            <Switch\n                block={true}\n                checked={disableUserInput}\n                label='Запретить ввод с клавиатуры'\n                onChange={() => setDisableUserInput(!disableUserInput)}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering ProductCover.Stack with Configuration Options (JSX)\nDESCRIPTION: This snippet demonstrates how to render the ProductCover.Stack component with different configurations for size, alignment, and number of cards. It utilizes RadioGroup components to allow the user to select the desired configuration. The selected configuration determines the properties passed to the ProductCover.Stack component, such as size, align, firstCard, secondCard, and numberOfCards.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/product-cover/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [numberOfCards, setNumberOfCards] = React.useState('2');\n    const [sizeAndAlignCard, setSizeAndAlignCard] = React.useState('128-default');\n\n    const onChangeNumberOfCards = (_, payload) => {\n        setNumberOfCards(payload.value);\n    };\n\n    const onChangeSizeCard = (_, payload) => {\n        setSizeAndAlignCard(payload.value);\n    };\n\n    const SIZE_AND_ALIGN = {\n        '128-default': {\n            size: 128,\n            align: 'default',\n            shadow: '0px 0px 4px 0px rgba(0, 0, 0, 0.16)',\n        },\n        '40-default': { size: 40, align: 'default', shadow: '2px 2px 2px 0px rgba(0, 0, 0, 0.10)' },\n        '40-bottom': { size: 40, align: 'bottom', shadow: '0px 2px 2px 0px rgba(0, 0, 0, 0.10)' },\n        '32-default': { size: 32, align: 'default', shadow: '2px 2px 2px 0px rgba(0, 0, 0, 0.10)' },\n        '16-default': { size: 16, align: 'default', shadow: 'none' },\n    };\n\n    const CARD_COUNT = {\n        2: undefined,\n        3: 3,\n    };\n\n    const sizeCard = SIZE_AND_ALIGN[sizeAndAlignCard].size;\n    const alignCard = SIZE_AND_ALIGN[sizeAndAlignCard].align;\n    const shadow = SIZE_AND_ALIGN[sizeAndAlignCard].shadow;\n\n    const firstCard = {\n        cardNumber: 1234000000001234,\n        shadow: '2px 2px 2px 0px rgba(0, 0, 0, 0.20)',\n        baseUrl: 'https://online.alfabank.ru/cards-images/cards/',\n        layers: 'BACKGROUND,LOGO,PAYMENT_SYSTEM',\n        cardId: 'RM',\n        shadow,\n    };\n\n    const secondCard = {\n        ...(numberOfCards === '2' && {\n            baseUrl: 'https://online.alfabank.ru/cards-images/cards/',\n            layers: 'BACKGROUND,LOGO,PAYMENT_SYSTEM',\n            cardId: 'RM',\n        }),\n        ...(sizeAndAlignCard === '40-default' && {\n            cardNumber: 1234000000001234,\n        }),\n    };\n\n    return (\n        <Container>\n            <Row>\n                <Col>\n                    <ProductCover.Stack\n                        size={sizeCard}\n                        align={alignCard}\n                        firstCard={firstCard}\n                        secondCard={secondCard}\n                        numberOfCards={sizeCard === 16 ? 3 : CARD_COUNT[numberOfCards]}\n                    />\n                </Col>\n            </Row>\n\n            <Row>\n                <RadioGroup\n                    label='Конфигурация'\n                    name='radioGroup'\n                    onChange={onChangeSizeCard}\n                    value={sizeAndAlignCard}\n                >\n                    <Radio label='128х205' value='128-default' size='m' />\n                    <Radio\n                        label='40х65 со смещением в правый нижний угол'\n                        value='40-default'\n                        size='m'\n                    />\n                    <Radio label='40х65 со смещением вниз' value='40-bottom' size='m' />\n                    <Radio\n                        label='32х51 со смещением в правый нижний угол'\n                        value='32-default'\n                        size='m'\n                    />\n                    <Radio\n                        label='16х24 со смещением в правый нижний угол'\n                        value='16-default'\n                        size='m'\n                    />\n                </RadioGroup>\n            </Row>\n\n            <Row>\n                <RadioGroup\n                    label='Количество карт'\n                    name='radioGroup'\n                    onChange={onChangeNumberOfCards}\n                    value={numberOfCards}\n                >\n                    <Radio label='Две' value='2' size='m' />\n                    <Radio label='Больше двух' value='3' size='m' />\n                </RadioGroup>\n            </Row>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying multiple Plate components with varied color views and custom backgrounds in React JSX\nDESCRIPTION: This snippet shows a set of Plate components each with different 'view' properties illustrating various notification states such as positive, negative, attention, common, and custom. Some Plates include custom background colors, border colors, and icons, demonstrating styling flexibility. Dependencies include React and components Container, Plate, StatusBadge, DiamondsMIcon, and Gap. This example focuses on static visual demonstrations with no interactivity, generating multiple styled notification plates stacked vertically.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/plate/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Container>\n    <Plate\n        view='positive'\n        title='Пример уведомления'\n        leftAddons={<StatusBadge view='positive-checkmark' />}\n        breakpoint={BREAKPOINT}\n    />\n    <Gap size='l' />\n    <Plate\n        view='negative'\n        title='Пример уведомления'\n        leftAddons={<StatusBadge view='negative-alert' />}\n        breakpoint={BREAKPOINT}\n    />\n    <Gap size='l' />\n    <Plate\n        view='attention'\n        title='Пример уведомления'\n        leftAddons={<StatusBadge view='attention-alert' />}\n        breakpoint={BREAKPOINT}\n    />\n    <Gap size='l' />\n    <Plate\n        view='common'\n        title='Пример уведомления'\n        leftAddons={<StatusBadge view='neutral-information' />}\n        breakpoint={BREAKPOINT}\n    />\n    <Gap size='l' />\n    <Plate\n        view='custom'\n        background='rgba(207, 112, 255, 0.1)'\n        borderColor='rgba(207, 112, 255)'\n        border={true}\n        title='Пример уведомления'\n        leftAddons={<DiamondsMIcon color='#CF70FF' />}\n        breakpoint={BREAKPOINT}\n    />\n    <Gap size='l' />\n    <Plate\n        view='custom'\n        title='Пример уведомления'\n        className='plateGlobal'\n        leftAddons={<DiamondsMIcon />}\n        breakpoint={BREAKPOINT}\n    />\n</Container>\n```\n\n----------------------------------------\n\nTITLE: Customizing Tags with Addons in React (JSX)\nDESCRIPTION: Shows how to add custom content to the left and right sides of a `Tag` component using the `leftAddons` and `rightAddons` props. Examples include adding simple styled divs, `Badge` components, and `Amount` components as addons. Relies on `React`, `Tag`, `Container`, `Row`, `Badge`, and `Amount` components. Two layout variations (potentially desktop and mobile) are shown.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tag/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const addon = (\n        <div\n            style={{\n                background: 'rgba(55, 120, 251, 0.1)',\n                border: '1px dashed #3778FB',\n                borderRadius: '8px',\n                height: '24px',\n                width: '24px',\n                boxSizing: 'border-box',\n            }}\n        />\n    );\n\n    const amountAddon = (\n        <div style={{ paddingRight: '4px' }}>\n            <Amount view='withZeroMinorPart' value={123400} currency='RUR' minority={100} />\n        </div>\n    );\n\n    return (\n        <Container>\n            <Row>\n                <div style={{ marginRight: 12 }}>\n                    <Tag size='s'>Label</Tag>\n                </div>\n                <div style={{ marginRight: 12 }}>\n                    <Tag size='s' rightAddons={addon} leftAddons={addon}>\n                        Label\n                    </Tag>\n                </div>\n                <div style={{ marginRight: 12 }}>\n                    <Tag size='s' rightAddons={<Badge view='count' height={24} content={1} />}>\n                        Label\n                    </Tag>\n                </div>\n                <div style={{ marginRight: 12 }}>\n                    <Tag size='s' rightAddons={amountAddon}>\n                        Label\n                    </Tag>\n                </div>\n            </Row>\n        </Container>\n    );\n});\n```\n\nLANGUAGE: jsx\nCODE:\n```\n//MOBILE\nrender(() => {\n    const addon = (\n        <div\n            style={{\n                background: 'rgba(55, 120, 251, 0.1)',\n                border: '1px dashed #3778FB',\n                borderRadius: '8px',\n                height: '24px',\n                width: '24px',\n                boxSizing: 'border-box',\n            }}\n        />\n    );\n\n    const amountAddon = (\n        <div style={{ paddingRight: '4px' }}>\n            <Amount view='withZeroMinorPart' value={123400} currency='RUR' minority={100} />\n        </div>\n    );\n\n    return (\n        <Container>\n            <Row>\n                <div style={{ marginRight: 12 }}>\n                    <Tag size='s'>Label</Tag>\n                </div>\n                <div>\n                    <Tag size='s' rightAddons={addon} leftAddons={addon}>\n                        Label\n                    </Tag>\n                </div>\n            </Row>\n            <div style={{ display: 'flex', marginTop: 16 }}>\n                <div style={{ marginRight: 12 }}>\n                    <Tag size='s' rightAddons={<Badge view='count' height={24} content={1} />}>\n                        Label\n                    </Tag>\n                </div>\n                <div>\n                    <Tag size='s' rightAddons={amountAddon}>\n                        Label\n                    </Tag>\n                </div>\n            </div>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Preset Cell Examples with Composite Components in React JSX\nDESCRIPTION: This snippet presents several preset cell layouts built using nested flex containers and UI primitives suitable for product interface components. It demonstrates combining typography, icons, circular elements, progress bars, and interactive buttons with consistent spacing and alignment. The snippet depends on custom components such as Container, GenericWrapper, Typography, Gap, Circle, HeartMIcon, CircularProgressBar, Comment, and Button. It shows static content composition to render information blocks typical for dashboards or financial product screens. Inputs are primarily JSX children; output is a structured UI panel showcasing multiple styled entries.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/generic-wrapper/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Container>\n    <div style={{ width: '288px' }}>\n        <GenericWrapper column>\n            <Typography.Text>Title</Typography.Text>\n            <Gap size={'3xs'} />\n            <Typography.Text>Subtitle</Typography.Text>\n        </GenericWrapper>\n        <Gap size={'l'} />\n        <GenericWrapper alignItems={'center'}>\n            <GenericWrapper>\n                <Circle size={48}>\n                    <HeartMIcon />\n                </Circle>\n            </GenericWrapper>\n            <Gap size={'m'} direction={'horizontal'} />\n            <GenericWrapper>\n                <GenericWrapper column>\n                    <Typography.Text>Благотворительность</Typography.Text>\n                    <Gap size={'3xs'} />\n                    <Typography.Text>25 000 ₽</Typography.Text>\n                </GenericWrapper>\n            </GenericWrapper>\n        </GenericWrapper>\n        <Gap size={'l'} />\n        <GenericWrapper alignItems={'center'}>\n            <GenericWrapper>\n                <Circle size={48}>\n                    <HeartMIcon />\n                </Circle>\n            </GenericWrapper>\n            <Gap size={'m'} direction={'horizontal'} />\n            <GenericWrapper grow>\n                <GenericWrapper column grow>\n                    <GenericWrapper justifyContent={'between'} grow>\n                        <Typography.Text>Перекрёсток</Typography.Text>\n                        <Typography.Text>−6 231 ₽</Typography.Text>\n                    </GenericWrapper>\n                    <Gap size={'3xs'} />\n                    <GenericWrapper justifyContent={'between'} grow>\n                        <Typography.Text>Гипермаркет</Typography.Text>\n                        <Typography.Text>+62 ₽</Typography.Text>\n                    </GenericWrapper>\n                </GenericWrapper>\n            </GenericWrapper>\n        </GenericWrapper>\n        <Gap size={'l'} />\n        <GenericWrapper alignItems={'start'}>\n            <GenericWrapper>\n                <Circle size={48}>\n                    <HeartMIcon />\n                </Circle>\n            </GenericWrapper>\n            <Gap size={'m'} direction={'horizontal'} />\n            <GenericWrapper column grow>\n                <GenericWrapper justifyContent={'between'} grow>\n                    <Typography.Text>\n                        <div style={{ maxWidth: '133px' }}>Между своими счетами</div>\n                    </Typography.Text>\n                    <Typography.Text>+18 777 ₽</Typography.Text>\n                </GenericWrapper>\n                <Gap size={'3xs'} />\n                <Typography.Text>Пополнение</Typography.Text>\n                <Gap size={'xs'} />\n                <Comment>Коплю на мечту</Comment>\n            </GenericWrapper>\n        </GenericWrapper>\n        <Gap size={'l'} />\n        <GenericWrapper justifyContent={'between'}>\n            <GenericWrapper column>\n                <Typography.Text>Платёж 14 октября</Typography.Text>\n                <Gap size={'xs'} />\n                <Typography.Text>Сумма платежа</Typography.Text>\n                <Typography.Text>30 600,90 ₽</Typography.Text>\n            </GenericWrapper>\n            <GenericWrapper>\n                <CircularProgressBar value={25} subtitle='дней' size='l' />\n            </GenericWrapper>\n        </GenericWrapper>\n        <Gap size={'l'} />\n        <GenericWrapper>\n            <GenericWrapper>\n                <Circle size={48}>\n                    <HeartMIcon />\n                </Circle>\n            </GenericWrapper>\n            <Gap size={'m'} direction={'horizontal'} />\n            <GenericWrapper column>\n                <Typography.Text>Используется вложенность</Typography.Text>\n                <Typography.Text>Одной ячейки в другую</Typography.Text>\n            </GenericWrapper>\n        </GenericWrapper>\n        <Gap size={'m'} />\n        <Button block>Понятно</Button>\n    </div>\n</Container>\n```\n\n----------------------------------------\n\nTITLE: Importing Responsive and Device-Specific Tab Components in React\nDESCRIPTION: These snippets illustrate importing both general and device-specific tab components from the Alfalab Design System for use in React applications. They include imports for desktop and mobile tabs to facilitate responsive UI development.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgsTabs, CssVars } from 'storybook/blocks';\nimport { Tab, TabsDesktop } from '../desktop';\nimport { TabsMobile } from '../mobile';\nimport { Tabs } from '..';\nimport vars from '!!raw-loader!../vars.css';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Импорт адаптивных табов\nimport { Tabs, Tab } from '@alfalab/core-components/tabs';\n\n// Импорт только десктопных табов\nimport { TabsDesktop, Tab } from '@alfalab/core-components/tabs/desktop';\n\n// Импорт только мобильных табов\nimport { TabsMobile, Tab } from '@alfalab/core-components/tabs/mobile';\n```\n\n----------------------------------------\n\nTITLE: Configuring and Displaying SteppedProgressBar in Storybook\nDESCRIPTION: Demonstrates rendering the SteppedProgressBar component within a Storybook story. It utilizes Storybook knobs (select, number, text) to dynamically control props like 'colors', 'step', 'maxStep', 'description', and 'view'. Conditional background styling is applied based on the 'colors' prop to enhance visibility for the 'inverted' color scheme.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/stepped-progress-bar/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Story name='SteppedProgressBar'>\n    {React.createElement(() => {\n        const colors = select('colors', ['default', 'inverted'], 'default');\n        return (\n            <div\n                style={{\n                    backgroundColor:\n                        colors === 'inverted'\n                            ? 'var(--color-light-base-bg-primary-inverted)'\n                            : 'transparent',\n                    padding: '20px',\n                    position: 'absolute',\n                    inset: '0px',\n                }}\n            >\n                <SteppedProgressBar\n                    colors={colors}\n                    step={number('step', 1)}\n                    maxStep={number('maxStep', 3)}\n                    description={text('description', 'Выбор карты')}\n                    view={select('view', [\n                        'positive',\n                        'negative',\n                        'attention',\n                        'link',\n                        'tertiary',\n                        'secondary',\n                        'primary',\n                        'accent',\n                    ])}\n                />\n            </div>\n        );\n    })}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Defining Side Panel Text Content Component React\nDESCRIPTION: Defines a functional React component `Text` that renders rich text content within the side panel. It utilizes `Typography.Text` for paragraphs, `Link` for interactive text, and `Collapse` to hide/show additional content.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/side-panel/src/docs/description.mdx#_snippet_9\n\nLANGUAGE: React\nCODE:\n```\n//MOBILE\nconst Text = ({ onClose }) => (\n    <>\n        <Typography.Text tag='p'>\n            В 2001 году в России начал действовать Федеральный закон №115 «О противодействии\n            легализации доходов, полученных преступным путём, и финансированию терроризма». В рамках\n            закона банки могут блокировать карты, отказывать в проведении сомнительных операций,\n            ограничить доступ в интернет-банк или запрашивать документы, если по операции клиента\n            возникли подозрения.{' '}\n            <Link onClick={onClose}>Нажмите сюда, чтобы закрыть модалку без крестика</Link>\n        </Typography.Text>\n        <br />\n        <Typography.Text tag='p'>\n            Требования 115-ФЗ и связанных с ним документов Банка России часто меняются,\n            предприниматели не всегда успевают за ними следить. Последствия нарушений\n            «антиотмывочного» законодательства всегда неприятны: приходится остановить\n            бизнес-процессы и доказать банку законность операций. Специалисты «Альфа-банка» собрали\n            понятные рекомендации, как сэкономить время на объяснения и предотвратить блокировки\n        </Typography.Text>\n        <Collapse collapsedLabel='Подробнее' expandedLabel='Скрыть'>\n            <Typography.Text tag='p'>\n                115-ФЗ Касается всех предпринимателей, фирм и физлиц, а также тех, кто пользуется\n                банковским счётом для бизнеса, крупных денежных переводов или личных расчётов.\n                Ограничения интернет-банка, блокировка карт добросовестных компаний могут произойти\n                из-за неправильно оформленных документов, ошибок в платёжке или попыток снизить\n                налоги.\n            </Typography.Text>\n            <br />\n            <Typography.Text tag='p'>\n                Клиенты воспринимают ограничения как атаку со стороны банка, но чаще всего сами\n                допускают ошибки или нарушения, которых можно избежать. Банки не преследуют цели\n                доставить неудобства клиентам — они обязаны соблюдать законодательство и следовать\n                инструкциям и рекомендациям ЦБ, а в противном случае рискуют лишиться лицензии.\n            </Typography.Text>\n            <br />\n            <Typography.Text tag='p'>\n                Обналичивание — сомнительные операции, когда юрлицо или предприниматель снимает со\n                счёта более 80% от оборота или переводит деньги на счета физлиц, которые затем\n                снимают в наличной форме.\n            </Typography.Text>\n            <br />\n            <Typography.Text tag='p'>\n                Вывод капитала за границу — это переводы нерезидентам по договорам об импорте\n                работ/услуг и результатов интеллектуальной деятельности, по которым проведение\n                расчётов осуществляется без одновременной уплаты НДС; по сделкам купли-продажи\n                ценных бумаг, а также товаров, которые не пересекают границу России.\n            </Typography.Text>\n            <br />\n            <Typography.Text tag='p'>\n                Транзитные операции — операции, в процессе которых деньги поступают на счёт компании\n                от других резидентов и списываются в короткие сроки. При этом, как правило, в этих\n                случаях по счёту нет начислений зарплат, уплаты налогов, и они не соответствуют\n                заявленному компанией виду деятельности.\n            </Typography.Text>\n            <br />\n            <Typography.Text tag='p'>\n                Запрашивать могут любые документы и устанавливать разные сроки их предоставления —\n                это зависит от службы контроля конкретного банка. Обычно банки запрашивают чеки,\n                счета или договора с контрагентами. В некоторых случаях бывает достаточно устных\n                объяснений. Для проверки информации и пересмотра уровня риска банк может пригласить\n                клиента в банк для устного разъяснения или выехать по месту ведения бизнеса клиента.\n            </Typography.Text>\n        </Collapse>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Multiple Selection with Confirmation and Instant Update in JSX using SelectDesktop and SelectMobile\nDESCRIPTION: Illustrates two multiple selection patterns in React JSX: one requiring confirmation before applying changes and another applying changes immediately upon selection. Desktop examples use SelectDesktop with multiple selection enabled by the 'multiple' prop and show state management with React.useState hooks. Mobile example employs SelectMobile supporting multiple selection with confirmation pattern. Dependencies include React, SelectDesktop, SelectMobile, BaseOption, and an optional useSelectWithApply hook for applying selections. Inputs are option arrays and user multi-selection actions; outputs are arrays of selected option keys. Recommended usage for mobile is the confirmation pattern for better UX.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/select/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst OPTIONS = [\n    { key: '1', content: 'Neptunium' },\n    { key: '2', content: 'Plutonium' },\n    { key: '3', content: 'Americium' },\n    { key: '4', content: 'Curium' },\n    { key: '5', content: 'Berkelium' },\n    { key: '6', content: 'Californium' },\n    { key: '7', content: 'Einsteinium' },\n    { key: '8', content: 'Fermium' },\n];\n\nrender(() => {\n    const [selectedFirst, setSelectedFirst] = React.useState([]);\n    const [selectedSecond, setSelectedSecond] = React.useState([]);\n\n    return (\n        <div style={{ width: 320 }}>\n            <SelectDesktop\n                allowUnselect={true}\n                size={56}\n                placeholder='Выберите элементы'\n                label='Множественный выбор'\n                Option={BaseOption}\n                multiple={true}\n                block={true}\n                {...useSelectWithApply({\n                    options: OPTIONS,\n                    selected: selectedFirst,\n                    onChange: ({ selectedMultiple }) => {\n                        setSelectedFirst(selectedMultiple.map((option) => option.key));\n                    },\n                })}\n            />\n            <div style={{ height: 'var(--gap-16)' }} />\n            <SelectDesktop\n                selected={selectedSecond}\n                allowUnselect={true}\n                size={56}\n                options={OPTIONS}\n                placeholder='Выберите элементы'\n                label='Множественный выбор'\n                Option={BaseOption}\n                multiple={true}\n                block={true}\n                onChange={({ selectedMultiple }) => {\n                    setSelectedSecond(selectedMultiple.map((option) => option.key));\n                }}\n            />\n        </div>\n    );\n});\n\n//MOBILE\nconst OPTIONS = [\n    { key: '1', content: 'Neptunium' },\n    { key: '2', content: 'Plutonium' },\n    { key: '3', content: 'Americium' },\n    { key: '4', content: 'Curium' },\n    { key: '5', content: 'Berkelium' },\n    { key: '6', content: 'Californium' },\n    { key: '7', content: 'Einsteinium' },\n    { key: '8', content: 'Fermium' },\n];\n\nrender(() => {\n    const [selectedFirst, setSelectedFirst] = React.useState([]);\n\n    return (\n        <div style={{ width: '100%' }}>\n            <SelectMobile\n                multiple={true}\n                allowUnselect={true}\n                options={OPTIONS}\n                placeholder='Выберите элементы'\n                label='Множественный выбор'\n                Option={BaseOption}\n                block={true}\n                selected={selectedFirst}\n                onChange={({ selectedMultiple }) => {\n                    setSelectedFirst(selectedMultiple.map((option) => option.key));\n                }}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in React with Core DS Pagination Component\nDESCRIPTION: This snippet demonstrates pagination of a large dataset using React functional components and Core DS's Pagination component within a Table. It initializes state for current page and items per page, calculates total pages, and slices the data array accordingly. Pagination controls allow users to change pages and adjust the number of items displayed per page. Dependencies include React, Core DS Table and Pagination components, Typography.Text for styled text, and an Amount component for formatted currency display. Inputs are a static as well as dynamically extended dataset; output is a paginated table view with interactive navigation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/table/src/docs/description.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst data = [\n    {\n        id: 28,\n        date: '30.06.2022',\n        title: 'ООО \"КОРПУС-ИТ\"',\n        sum: 21000000,\n    },\n    {\n        id: 12,\n        date: '30.06.2022',\n        title: 'ОБЩЕСТВО С ОГРАНИЧЕННОЙ ОТВЕТСТВЕННОСТЬЮ \"МОБИЛСТИЛ\"',\n        subtitle:\n            'Оказание услуг по договору № 26/09 на основании акта № 1450 от 30 июня 2020 года, в т.ч. НДС 18%',\n        sum: 10002030,\n    },\n    {\n        id: 5,\n        date: '30.06.2022',\n        title: 'ИП Жуков Валерий Сергеевич',\n        subtitle: 'Услуги по ремонту за июнь, НДС не облагается',\n        sum: 3000069,\n    },\n    {\n        id: 4,\n        date: '30.06.2022',\n        title: 'ООО \"Берест\"',\n        sum: 84300,\n    },\n    {\n        id: 1,\n        date: '30.06.2022',\n        title: 'УФК по Свердловской области (Государственное учреждение - Свердловское региональное отделение Фонда социального страхования Российской Федерации)',\n        sum: 15900,\n    },\n    {\n        id: 27,\n        date: '21.10.2021',\n        title: 'MasterBrok',\n        sum: 106000,\n    },\n    {\n        id: 26,\n        date: '20.10.2021',\n        title: 'MR ANTON TAGUNOV',\n        sum: 189800,\n    },\n];\n\nArray(100)\n    .fill('')\n    .forEach((_, i) =>\n        data.push({\n            id: (i + 1) * 100,\n            date: '20.10.2021',\n            title: `Контрагент #${i + 1}`,\n            sum: 1000000 + (i + 1) * 10000,\n        }),\n    );\n\nrender(() => {\n    const [perPage, setPerPage] = React.useState(5);\n    const [page, setPage] = React.useState(0);\n\n    const handlePerPageChange = (value) => {\n        setPage(0);\n        setPerPage(value);\n    };\n\n    const handlePageChange = (pageIndex) => setPage(pageIndex);\n\n    const pagesCount = Math.ceil(data.length / perPage);\n\n    const currentPageData = React.useMemo(() => {\n        return data.slice(page * perPage).slice(0, perPage);\n    }, [data, page, perPage]);\n\n    return (\n        <Table\n            pagination={\n                <Table.Pagination\n                    perPage={perPage}\n                    currentPageIndex={page}\n                    pagesCount={pagesCount}\n                    possiblePerPage={[5, 25, 50, 100]}\n                    onPageChange={handlePageChange}\n                    onPerPageChange={handlePerPageChange}\n                />\n            }\n        >\n            <Table.THead>\n                <Table.THeadCell title='Дата' width='120px'>\n                    Дата\n                </Table.THeadCell>\n\n                <Table.THeadCell title='Контрагент'>Контрагент</Table.THeadCell>\n\n                <Table.THeadCell title='Сумма' textAlign='right' width={268}>\n                    Сумма\n                </Table.THeadCell>\n            </Table.THead>\n            <Table.TBody>\n                {currentPageData.map((row) => (\n                    <Table.TRow key={row.id}>\n                        <Table.TCell>\n                            <Typography.Text view='primary-small' tag='div'>\n                                {row.date}\n                            </Typography.Text>\n                        </Table.TCell>\n\n                        <Table.TCell>\n                            <Typography.Text view='primary-small' tag='div'>\n                                {row.title}\n                            </Typography.Text>\n                        </Table.TCell>\n\n                        <Table.TCell>\n                            <Amount\n                                value={row.sum}\n                                currency='RUR'\n                                minority={100}\n                                view='withZeroMinorPart'\n                                bold='full'\n                                transparentMinor={true}\n                            />\n                        </Table.TCell>\n                    </Table.TRow>\n                ))}\n            </Table.TBody>\n        </Table>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Tabbed Content (JSX)\nDESCRIPTION: The `Tabs` component organizes the component's information into tabbed sections. It takes three props: `description`, `changelog`, and `development`. The `description` prop renders the content from the `description.mdx` file. The `changelog` prop renders the content from the `CHANGELOG.md` file as Markdown and `development` renders content from the `development.mdx` file. This enables organized access to descriptions, changelogs and development insights for the component in the storybook interface.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/notification-manager/src/docs/Component.docs.mdx#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Horizontal CheckboxGroup Mobile Implementation - React\nDESCRIPTION: This snippet demonstrates the implementation of a horizontal CheckboxGroup for mobile using React.  It utilizes the `CheckboxGroupMobile` component with a horizontal layout and handles state changes for individual checkboxes. The code includes error handling and button components to toggle the error state. It's designed for mobile devices and follows the same logic as the desktop version.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/checkbox-group/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n//MOBILE\nrender(() => {\n    const [value, setValue] = React.useState({ one: false, two: false, three: false });\n    const [error, setError] = React.useState(false);\n\n    const onChange = (_, payload) => {\n        setValue({ ...value, [payload.name]: payload.checked });\n    };\n\n    return (\n        <div style={{ width: '100%' }}>\n            <CheckboxGroupMobile\n                label='Планеты расположенные между Землёй и Солнцем'\n                direction='horizontal'\n                onChange={onChange}\n                hint='Выберите несколько планет'\n                error={error}\n            >\n                <Checkbox label='Меркурий' name='one' checked={value.one} size={24} />\n                <Checkbox label='Венера' name='two' checked={value.two} size={24} />\n                <Checkbox label='Нептун' name='three' checked={value.three} size={24} />\n            </CheckboxGroupMobile>\n\n            <Gap size='2xl' />\n\n            <Space direction='horizontal' wrap={true}>\n                <Button size='xxs' onClick={() => setError(false)}>\n                    По умолчанию\n                </Button>\n                <Button size='xxs' onClick={() => setError('Правильный ответ: Венера и Меркурий')}>\n                    Состояние ошибки\n                </Button>\n            </Space>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Basic TabBar with Border Toggle in React\nDESCRIPTION: A simple example that demonstrates a TabBar with two tabs and a toggle for showing/hiding the border. Each tab includes both a label and an icon using DiamondsMIcon component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tab-bar/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nrender(() => {\n    const [border, setBorder] = React.useState(false);\n    const [selectedId, setSelectedId] = React.useState('1');\n\n    return (\n        <div\n            style={{\n                minHeight: 105,\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'space-between',\n            }}\n        >\n            <Switch label='Бордер' checked={border} onChange={() => setBorder((p) => !p)} />\n\n            <div style={{ margin: '0 -20px -20px' }}>\n                <TabBar selectedId={selectedId} onChange={setSelectedId} border={border}>\n                    <TabBar.Tab id='1' label='TabName1' icon={<DiamondsMIcon />} />\n                    <TabBar.Tab id='2' label='TabName2' icon={<DiamondsMIcon />} />\n                </TabBar>\n            </div>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Select Components (React)\nDESCRIPTION: This snippet demonstrates importing different variations of the `Select` component from the `@alfalab/core-components/select` library. It shows the imports for responsive, desktop, mobile, and modal versions, along with utility components used internally.  It also provides import paths for related modules.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/select/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Responsive\nimport { Select } from '@alfalab/core-components/select';\n\n// Desktop\nimport { SelectDesktop } from '@alfalab/core-components/select/desktop';\n\n// BottomSheet version\nimport { SelectMobile } from '@alfalab/core-components/select/mobile';\n\n// Modal version\nimport { SelectModalMobile } from '@alfalab/core-components/select/mobile';\n\n// Other...\nimport {\n    BaseOption,\n    useSelectWithApply,\n    useLazyLoading,\n} from '@alfalab/core-components/select/shared';\n```\n\n----------------------------------------\n\nTITLE: Rendering CustomButton Background Color Variants with Tokens and Gradients in JSX\nDESCRIPTION: This snippet shows how to assign background colors to CustomButton components using design tokens, solid colors, and linear gradients. The VARIANTS object includes configurations specifying stateType, contentColor, and different backgroundColor values, emphasizing token awareness for dark mode contexts. The render function detects mobile view and dynamically creates buttons for each variant in a flex container. Dependencies include React and CustomButton components. Inputs include background color variants and screen width; the output is a responsive button layout demonstrating diverse background styles.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/custom-button/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst VARIANTS = {\n    Token: {\n        stateType: 'lightening',\n        contentColor: 'white',\n        backgroundColor: 'var(--color-light-base-bg-secondary-inverted)',\n    },\n    Color: {\n        stateType: 'lightening',\n        contentColor: 'white',\n        backgroundColor: '#EB58BF',\n    },\n    Gradient: {\n        stateType: 'lightening',\n        contentColor: 'white',\n        backgroundColor: 'linear-gradient(264deg, #FF42CA 0%, #FF8A00 100%)',\n    },\n};\nrender(() => {\n    const isMobile = document.body.clientWidth < 450;\n    return (\n        <div style={{ display: 'flex', flexFlow: 'row wrap', gap: '16px' }}>\n            {Object.keys(VARIANTS).map((title) => (\n                <CustomButton {...VARIANTS[title]} block={isMobile} key={title}>\n                    {title}\n                </CustomButton>\n            ))}\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering SelectMobile with custom options and rendering - React\nDESCRIPTION: This snippet showcases the use of SelectMobile component with customized options. It demonstrates both single and multiple selection modes. Custom rendering is applied using the `valueRenderer` property to display selected values differently.  The options are pre-defined or generated from a data source with custom rendering.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/select/src/docs/description.mdx#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nconst OPTIONS = [\n    { key: '1', content: 'Neptunium' },\n    { key: '2', content: 'Plutonium' },\n    { key: '3', content: 'Americium' },\n    { key: '4', content: 'Curium' },\n    { key: '5', content: 'Berkelium' },\n    { key: '6', content: 'Californium' },\n    { key: '7', content: 'Einsteinium' },\n    { key: '8', content: 'Fermium' },\n];\n\nrender(() => {\n    const [selectedFirst, setSelectedFirst] = React.useState();\n    const [selected, setSelected] = React.useState();\n\n    const handleChange = ({ selected }) => {\n        setSelected(selected);\n    };\n\n    const renderOption = ({ text, amount, icon, iconSize = 48, padding }) => {\n        return (\n            <GenericWrapper alignItems='center' padding={padding}>\n                <GenericWrapper>\n                    <SuperEllipse size={iconSize}>{icon}</SuperEllipse>\n                </GenericWrapper>\n                <Gap size='m' direction='horizontal' />\n                <GenericWrapper>\n                    <GenericWrapper column>\n                        <Typography.Text color='secondary' view='primary-small'>\n                            {text}\n                        </Typography.Text>\n                        <Gap size='3xs' />\n                        <Typography.Text>\n                            <Amount\n                                value={amount}\n                                minority={100}\n                                currency='RUR'\n                                view='withZeroMinorPart'\n                                transparentMinor={true}\n                            />\n                        </Typography.Text>\n                    </GenericWrapper>\n                </GenericWrapper>\n            </GenericWrapper>\n        );\n    };\n\n    const renderSelected = ({ selected }) => {\n        return selected\n            ? renderOption({\n                  ...selected.value,\n                  padding: undefined,\n                  iconSize: 40,\n              })\n            : undefined;\n    };\n\n    const data = [\n        {\n            key: 'Account1',\n            value: {\n                text: 'Зарплатный счёт',\n                amount: 3405161,\n                icon: <StarMIcon />,\n                padding: { top: 's', bottom: 's', left: 'm' },\n            },\n        },\n        {\n            key: 'Account2',\n            value: {\n                text: 'Накопительный счёт',\n                amount: 6000024,\n                icon: <SafeBoxMIcon />,\n                padding: { top: 's', bottom: 's', left: 'm' },\n            },\n        },\n    ];\n\n    const pureCellOptions = data.map((item) => ({\n        ...item,\n        content: renderOption(item.value),\n    }));\n\n    return (\n        <div style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}>\n            <SelectMobile\n                selected={selectedFirst}\n                allowUnselect={true}\n                placeholder='Выберите элементы'\n                label='Множественный выбор'\n                block={true}\n                optionsListWidth='field'\n                Option={BaseOption}\n                size={56}\n                options={OPTIONS}\n                multiple={true}\n                showHeaderWithSelectAll={true}\n                onChange={({ selectedMultiple }) =>\n                    setSelectedFirst(selectedMultiple.map((option) => option.key))\n                }\n            />\n            <Gap size='m' />\n            <SelectMobile\n                allowUnselect={true}\n                placeholder='Выберите счёт'\n                options={pureCellOptions}\n                Option={BaseOption}\n                size={56}\n                valueRenderer={renderSelected}\n                block={true}\n                selected={selected}\n                onChange={handleChange}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Storybook Documentation for Notification Component in JSX\nDESCRIPTION: This code configures the Storybook documentation page for the Notification component. It imports Meta and Markdown components from Storybook, custom documentation blocks, component stories, and MDX documentation files. The structure includes a component header with description and tabbed content sections.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/notification/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta of={Stories} />\n\n<ComponentHeader\n    name='Notification'\n    children='Информирует пользователя о текущем состоянии операций или сообщает пользователю о результате выполнения его команды. Не имеет мобильной версии.'\n/>\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta Information for DateRangeInput Component\nDESCRIPTION: Meta configuration for the DateRangeInput component in Storybook, specifying it as a deprecated component with appropriate title and component reference.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/date-range-input/src/docs/Component.stories.mdx#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta title='Deprecated components/DateRangeInput' component={DateRangeInput} id='DateRangeInput' />\n```\n\n----------------------------------------\n\nTITLE: Defining Footer Select Options JavaScript\nDESCRIPTION: Defines a constant array `FOOTER_SELECT_OPTIONS` used to populate the options for the footer layout select component. Each object includes a unique `key` and display `content` in Russian.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/side-panel/src/docs/description.mdx#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst FOOTER_SELECT_OPTIONS = [\n    { key: 'vertical', content: 'Вертикальный' },\n    { key: 'horizontal', content: 'Горизонтальный' },\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing PatternLock with State Management in React\nDESCRIPTION: This React functional component demonstrates the integration of a `PatternLock` component. It uses `useState` to manage the current screen (initial, enter code, success) and the lock state (initial, success, failure). `useEffect` and `useRef` are used to handle state resets after a delay and to interact with the `PatternLock` instance. The component validates the entered pattern against a predefined code, updates the UI accordingly (showing success messages or error toasts), and adapts rendering based on whether the view is mobile (`isMobile()`) or desktop.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pattern-lock/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst SCREENS = {\n    INITIAL: 'initial',\n    ENTER_CODE: 'ENTER_CODE',\n    SUCCESS: 'success',\n};\nrender(() => {\n    const shouldBeCode = [6, 9, 8, 7, 5, 1];\n    const [currentState, setCurrentState] = React.useState(THEME_STATE.INITIAL);\n    const [screen, setScreen] = React.useState(SCREENS.INITIAL);\n    const [passCodeParams, setPassCodeParams] = React.useState();\n    const patternLockInstance = React.useRef();\n    const timerId = React.useRef();\n    const containerRef = React.useRef(null);\n\n    const handleComplete = (code) => {\n        if (shouldBeCode.join() === code.join()) {\n            setCurrentState(THEME_STATE.SUCCESS);\n            setTimeout(() => setScreen(SCREENS.SUCCESS), 700);\n        } else {\n            setCurrentState(THEME_STATE.FAILURE);\n        }\n    };\n\n    const handleDragStart = () => {\n        setCurrentState(THEME_STATE.INITIAL);\n    };\n\n    React.useEffect(() => {\n        if (currentState !== THEME_STATE.INITIAL) {\n            // Сбрасываем стейт через сек.\n            timerId.current = setTimeout(() => {\n                setCurrentState(THEME_STATE.INITIAL);\n                patternLockInstance.current.setInitialState();\n            }, 1000);\n        }\n\n        return () => clearTimeout(timerId.current);\n    }, [currentState]);\n\n    const renderMessage = () => {\n        if (passCodeParams === 'codeLength') {\n            return (\n                <div style={{ textAlign: 'center' }}>\n                    <Typography.Text view='primary-medium'>\n                        Введите код из шести знаков\n                    </Typography.Text>\n                    <Gap size={24} />\n                </div>\n            );\n        }\n\n        return null;\n    };\n\n    if (screen === SCREENS.INITIAL) {\n        return (\n            <div\n                style={{\n                    height: 600,\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: isMobile() ? 'start' : 'center',\n                    alignItems: 'center',\n                }}\n            >\n                <div style={{ width: 320 }}>\n                    <Button\n                        block\n                        onClick={() => {\n                            setPassCodeParams('codeLength');\n                            setScreen(SCREENS.ENTER_CODE);\n                        }}\n                    >\n                       Код длинной 6 знаков\n                    </Button>\n                    <Gap size='m' />\n                    <Button\n                        block\n                        onClick={() => {\n                            setPassCodeParams('maxCodeLength');\n                            setScreen(SCREENS.ENTER_CODE);\n                        }}\n                    >\n                        Длина кода неизвестна заранее\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    if (screen === SCREENS.SUCCESS) {\n        return (\n            <div style={{ display: 'flex', flexFlow: 'column nowrap', height: 600 }}>\n                <Gap size='xl' />\n                <Gap size='8xl' />\n                <div\n                    style={{\n                        display: 'flex',\n                        flexFlow: 'column nowrap',\n                        alignItems: 'center',\n                        justifyContent: 'space-between',\n                        ...(isMobile() && { flex: 1 }),\n                    }}\n                >\n                    <div style={{ textAlign: 'center', width: isMobile() ? 315 : 472 }}>\n                        <SuperEllipse\n                            size={80}\n                            backgroundColor='var(--color-light-graphic-positive)'\n                        >\n                            <CheckmarkMIcon style={{ fill: '#fff' }} />\n                        </SuperEllipse>\n\n                        <Gap size='m' />\n\n                        <Typography.Title view='small' font='system'>\n                            Введён корректный пароль\n                        </Typography.Title>\n\n                        <Gap size={16} />\n\n                        <Typography.Text view='primary-medium'>\n                            Это пример экрана, на который попадает пользователь после ввода\n                            корректного пароля\n                        </Typography.Text>\n                    </div>\n\n                    <Gap size={24} />\n\n                    <Button\n                        onClick={() => {\n                            setScreen(SCREENS.INITIAL);\n                        }}\n                        style={{\n                            ...(isMobile() && { width: 320 }),\n                        }}\n                    >\n                        Попробовать ещё раз\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    if (isMobile()) {\n        return (\n            <Container align='center'>\n                <div\n                    style={{ height: '600px', boxSizing: 'border-box', paddingTop: '36px' }}\n                    ref={containerRef}\n                >\n                    {renderMessage()}\n                    <div\n                        style={{\n                            display: 'flex',\n                            flexDirection: 'column',\n                            justifyContent: 'end',\n                            height: passCodeParams === 'maxCodeLength' ? '564px' : '502px',\n                        }}\n                    >\n                        <Toast\n                            title={'Error message'}\n                            open={currentState === THEME_STATE.FAILURE}\n                            anchorElement={containerRef.current}\n                            position='top'\n                            badge='negative-alert'\n                            offset={[0, -56]}\n                            style={{ width: '304px' }}\n                            onClose={() => {}}\n                        />\n                        <PatternLock\n                            ref={patternLockInstance}\n                            onComplete={handleComplete}\n                            themeState={currentState}\n                            onDragStart={handleDragStart}\n                            observeTokens={true}\n                            error={currentState === THEME_STATE.FAILURE && 'Error message'}\n                            showForgotCodeBtn={passCodeParams === 'maxCodeLength'}\n                            breakpoint={BREAKPOINT}\n                        />\n                    </div>\n                </div>\n            </Container>\n        );\n    }\n\n    return (\n        <Container align='center'>\n            <div\n                style={{\n                    height: '600px',\n                    boxSizing: 'border-box',\n                    paddingTop: passCodeParams === 'maxCodeLength' ? 129 : 92,\n                }}\n                ref={containerRef}\n            >\n                <Toast\n                    title={'Error message'}\n                    open={currentState === THEME_STATE.FAILURE}\n                    anchorElement={containerRef.current}\n                    position='top'\n                    badge='negative-alert'\n                    offset={[0, -56]}\n                    style={{ width: '304px' }}\n                    onClose={() => {}}\n                />\n                {renderMessage()}\n                <PatternLock\n                    ref={patternLockInstance}\n                    onComplete={handleComplete}\n                    themeState={currentState}\n                    onDragStart={handleDragStart}\n                    observeTokens={true}\n                    error={currentState === THEME_STATE.FAILURE && 'Error message'}\n                    showForgotCodeBtn={true}\n                    breakpoint={BREAKPOINT}\n                />\n            </div>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Side Panel State and Handlers React\nDESCRIPTION: Initializes state variables using `useState` for controlling the side panel's open/closed state, selected header/footer views, and header/footer boolean settings. It also defines handler functions (`handleOpen`, `handleClose`, `handleHeaderSettingsChange`, `handleFooterSettingsChange`) to update these states based on user interactions with control components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/side-panel/src/docs/description.mdx#_snippet_10\n\nLANGUAGE: React\nCODE:\n```\nrender(() => {\n    const [open, setOpen] = React.useState(false);\n    const [headerViewSelected, setHeaderView] = React.useState(HEADER_SELECT_OPTIONS[0].key);\n    const [footerViewSelected, setFooterView] = React.useState(FOOTER_SELECT_OPTIONS[0].key);\n    const [headerSettings, setHeaderSettings] = React.useState(() => ({\n        ...HEADER_SETTINGS.reduce((res, item) => ({ ...res, [item.name]: false }), {}),\n        titleInContent: false,\n    }));\n    const [footerSettings, setFooterSettings] = React.useState(() =>\n        FOOTER_SETTINGS.reduce((res, item) => ({ ...res, [item.name]: false }), {}),\n    );\n\n    const showHeader =\n        headerViewSelected !== HEADER_SELECT_OPTIONS[0].key ||\n        headerSettings.hasCloser ||\n        headerSettings.hasBackButton;\n\n    const showFooter = footerSettings.hasPrimaryButton || footerSettings.hasSecondaryButton;\n\n    const getKey = () =>\n        `${JSON.stringify(headerSettings)}-${headerViewSelected}-${footerViewSelected}`;\n\n    const handleOpen = () => setOpen(true);\n\n    const handleClose = () => setOpen(false);\n\n    const handleHeaderSettingsChange = (_, { name, checked }) => {\n        setHeaderSettings((prevState) => ({ ...prevState, [name]: checked }));\n    };\n\n    const handleFooterSettingsChange = (_, { name, checked }) => {\n        setFooterSettings((prevState) => ({ ...prevState, [name]: checked }));\n    };\n\n    return (\n```\n\n----------------------------------------\n\nTITLE: Validating on Form Submission in React - JavaScript\nDESCRIPTION: This snippet illustrates a React form that validates fields only upon form submission. The form contains multiple controlled Input components whose values and errors are managed in a state object. The validateForm function aggregates errors for fields where user-entered values do not match required patronymics. On submit, the form sets error messages for all invalid fields and focuses the first error control. Dependencies include React, Input, Button, and Gap components. The example is suitable for required field validation and form-level error handling.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/validation.stories.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst data = {\n    pushkin: {\n        patronymic: 'сергеевич',\n        desc: 'Отчество Александра Пушкина',\n        errMsg: 'Александр Сергеевич – наше всё',\n    },\n    fet: {\n        patronymic: 'афанасьевич',\n        desc: 'Отчество Афанасия Фета',\n        errMsg: 'Отца Афанасия тоже звали Афанасием',\n    },\n};\n\nconst dataKeys = Object.keys(data);\n\nconst validateForm = (form) => {\n    let errors = {};\n\n    dataKeys.forEach((key) => {\n        if (data[key].patronymic !== form.values[key].toLowerCase()) {\n            errors[key] = data[key].errMsg;\n        }\n    });\n\n    return Object.keys(errors).length > 0 ? errors : null;\n};\n\nconst getInitialState = () => {\n    const initialValues = dataKeys.reduce((result, key) => {\n        result[key] = '';\n        return result;\n    }, {});\n\n    return { values: initialValues, errors: initialValues };\n};\n\nrender(() => {\n    const [form, setForm] = React.useState(getInitialState);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        const errors = validateForm(form);\n        if (errors) {\n            setForm((prevState) => ({ ...prevState, errors: { ...prevState.errors, ...errors } }));\n        }\n    };\n\n    const handleChange = (e) => {\n        const name = e.target.name;\n\n        setForm((prevState) => ({\n            ...prevState,\n            values: { ...prevState.values, ...{ [name]: e.target.value } },\n            errors: { ...prevState.errors, ...{ [name]: '' } },\n        }));\n    };\n\n    return (\n        <form\n            style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}\n            onSubmit={handleSubmit}\n        >\n            {dataKeys.map((key, idx) => (\n                <span key={key}>\n                    <Input\n                        value={form.values[key]}\n                        error={form.errors[key]}\n                        name={key}\n                        onChange={handleChange}\n                        size='m'\n                        block={true}\n                        placeholder={data[key].desc}\n                    />\n                    {idx !== dataKeys.length - 1 && <Gap size='m' />}\n                </span>\n            ))}\n\n            <Gap size='m' />\n            <Button view='primary' size='m' type='submit'>\n                Отправить форму\n            </Button>\n        </form>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Using Date Range Picker with Disabled Keyboard Input in React\nDESCRIPTION: This example illustrates a date range input with a picker enabled for restricted date selection, and an option to disable keyboard input for manual entry. It maintains a state (`disableUserInput`) toggled by a switch component, demonstrating how to control user input methods. Dependencies include `DateRangeInput`, `Switch`, and `Gap`, and the layout adapts to mobile heights. It is ideal for scenarios requiring date selection through a picker only.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/date-range-input/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nrender(() => {\n    const [disableUserInput, setDisableUserInput] = React.useState(false);\n\n    return (\n        <div style={{ width: '100%' }}>\n            <div style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}>\n                <DateRangeInput\n                    label='Укажите диапазон дат'\n                    placeholder='ДД.ММ.ГГГГ - ДД.ММ.ГГГГ'\n                    picker={true}\n                    block={true}\n                    size='m'\n                    disableUserInput={disableUserInput}\n                />\n            </div>\n            <Gap size='xl' />\n\n            <Switch\n                checked={disableUserInput}\n                onChange={() => setDisableUserInput((prevState) => !prevState)}\n                label='Запретить ввод с клавиатуры'\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Actions for Uploaded Files Management in React\nDESCRIPTION: This code snippet provides a React component allowing users to delete, restore, and download uploaded files. It manages restore states for multiple elements, and handles user interactions to toggle between file deletion and restoration, rendering different icons or links accordingly.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/file-upload-item/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n```jsx live mobileHeight={500}\nrender(() => {\n    const [isRestore, showIsRestore] = React.useState({\n        element_1: false,\n        element_2: false,\n    });\n\n    const handleDelete = (element) => () => {\n        showIsRestore((prev) => ({\n            ...prev,\n            [element]: true,\n        }));\n    };\n\n    const handleRestore = (element) => () => {\n        showIsRestore((prev) => ({\n            ...prev,\n            [element]: false,\n        }));\n    };\n\n    return (\n        <React.Fragment>\n            <div style={{ width: 360 }}>\n                <FileUploadItem\n                    title='hello-world.docx'\n                    size={2097152}\n                    uploadDate='22.07.2024'\n                    uploadStatus={'UPLOADED'}\n                    showDelete={true}\n                    downloadLink='./txt/hello-world.docx'\n                    showRestore={isRestore.element_1}\n                    onDelete={handleDelete('element_1')}\n                    onRestore={handleRestore('element_1')}\n                >\n                    <FileUploadItem.StatusControl />\n                    <FileUploadItem.Content />\n                    <FileUploadItem.Actions />\n                </FileUploadItem>\n                <Gap size={20} />\n                <FileUploadItem\n                    title='gagarin_yu_a.png.png'\n                    size={27262976}\n                    uploadDate='01.05.1998'\n                    uploadStatus={'UPLOADED'}\n                    showDelete={true}\n                    downloadLink='./images/gagarin_yu_a.png'\n                    showRestore={isRestore.element_2}\n                    onDelete={handleDelete('element_2')}\n                    onRestore={handleRestore('element_2')}\n                    {...(!isRestore.element_2 && { imageUrl: './images/gagarin_yu_a.png' })}\n                    {...(isRestore.element_2 && { customIcon: () => <DocumentImageOffMIcon /> })}\n                >\n                    <FileUploadItem.StatusControl />\n                    <FileUploadItem.Content />\n                    <FileUploadItem.Actions />\n                </FileUploadItem>\n            </div>\n        </React.Fragment>\n    );\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring BottomSheet Component with Magnetic Areas in React JSX\nDESCRIPTION: This example demonstrates how to implement a BottomSheet component with configurable heights using magnetic areas. The code supports three different configurations: min/max heights, intermediate magnetic areas, and external trigger control. It includes state management for the component's open state and active area.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/bottom-sheet/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst VARIANTS = {\n    MIN_MAX: 'min_max',\n    EXTRA_AREA: 'extra_area',\n    EXT_TRIGGER: 'ext_trigger',\n};\n\nconst SETTINGS = [\n    {\n        label: 'Минимальная и максимальная высота',\n        desc: 'Шторка откроется на 200рх, её можно будет растянуть на кастомную максимальную высоту, ограниченную 100рх до верха экрана. Свайп вниз от минимальной высоты закроет шторку.',\n        value: VARIANTS.MIN_MAX,\n    },\n    {\n        label: 'Промежуточная магнитная область',\n        desc: 'У шторки будет минимальная и максимальная высота, а между ними промежуточная магнитная область.',\n        value: VARIANTS.EXTRA_AREA,\n    },\n    {\n        label: 'Внешний триггер',\n        desc: 'Изначально шторка будет открыта на свою минимальную высоту, но по тапу на кнопку шторку можно будет открыть полностью.',\n        value: VARIANTS.EXT_TRIGGER,\n    },\n];\n\nconst VARIANT_PROPS_MAP = {\n    [VARIANTS.MIN_MAX]: { magneticAreas: [0, 200, -100], initialActiveAreaIndex: 1 },\n    [VARIANTS.EXTRA_AREA]: { magneticAreas: [0, 100, '50%', -100] },\n    [VARIANTS.EXT_TRIGGER]: {\n        magneticAreas: [0, 200, -100],\n        hideOverlay: true,\n        initialActiveAreaIndex: 1,\n    },\n};\n\nconst ITEM_STYLES = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    transition: 'background 0.2s ease-in, border 0.2s ease-in',\n    borderRadius: '8px',\n    background: 'rgba(55, 120, 251, 0.1)',\n    border: `1px dashed #3778FB`,\n    color: '#3778FB',\n    width: '100%',\n    boxSizing: 'border-box',\n    height: 170,\n};\n\nconst WRAPPER_STYLES = {\n    padding: 20,\n    margin: -20,\n    height: 600,\n    transition: 'background-color 0.3s ease',\n};\n\nrender(() => {\n    const [checked, setChecked] = React.useState(VARIANTS.MIN_MAX);\n    const [open, setOpen] = React.useState(false);\n    const [activeAreaIdx, setActiveAreaIdx] = React.useState(0);\n    const bottomSheetRef = React.useRef(null);\n\n    const variantProps = VARIANT_PROPS_MAP[checked];\n    const isExternalTrigger = checked === VARIANTS.EXT_TRIGGER && open;\n    const scrollLocked = activeAreaIdx !== variantProps.magneticAreas.length - 1;\n    const openWithExternalTrigger = isExternalTrigger && open;\n    const isNotLastAreaWithExtTrigger = openWithExternalTrigger && scrollLocked;\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => setOpen(false);\n\n    const handleAreaChange = (idx) => setActiveAreaIdx(idx);\n\n    const magnetizeToLastArea = () =>\n        bottomSheetRef.current.scrollToArea(variantProps.magneticAreas.length - 1);\n\n    return (\n        <div\n            style={{\n                ...WRAPPER_STYLES,\n                backgroundColor: openWithExternalTrigger\n                    ? 'var(--color-light-base-bg-secondary)'\n                    : 'var(--color-light-base-bg-primary)',\n            }}\n        >\n            <ButtonMobile\n                view={isNotLastAreaWithExtTrigger ? 'accent' : 'secondary'}\n                size='s'\n                onClick={openWithExternalTrigger ? magnetizeToLastArea : handleOpen}\n                block={true}\n            >\n                {isExternalTrigger ? 'Открыть полностью' : 'Показать шторку'}\n            </ButtonMobile>\n\n            <Gap size='2xl' />\n\n            <RadioGroup\n                label='Конфигурация шторки'\n                value={checked}\n                onChange={(_, payload) => setChecked(payload.value)}\n            >\n                {SETTINGS.map((item) => (\n                    <Radio\n                        disabled={open}\n                        label={item.label}\n                        value={item.value}\n                        key={item.value}\n                        hint={item.desc}\n                        size='m'\n                    />\n                ))}\n            </RadioGroup>\n\n            <BottomSheet\n                bottomSheetInstanceRef={bottomSheetRef}\n                open={open}\n                onClose={handleClose}\n                key={checked}\n                scrollLocked={scrollLocked}\n                hideScrollbar={true}\n                onMagnetize={handleAreaChange}\n                {...variantProps}\n                {...(!isNotLastAreaWithExtTrigger ? { hideOverlay: false } : null)}\n            >\n                <div style={{ display: 'flex', flexFlow: 'column', gap: 16 }}>\n                    {[1, 2, 3, 4, 5].map((item) => (\n                        <div key={item} style={ITEM_STYLES}>\n                            <span style={{ fontWeight: 700, fontSize: '72px' }}>{item}</span>\n                        </div>\n                    ))}\n                </div>\n            </BottomSheet>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Tabs Components Properties and Content Control\nDESCRIPTION: This snippet demonstrates configuring tab properties such as titles, IDs, disabling tabs, and controlling content rendering with the 'keepMounted' property. It highlights how to arrange and customize tab behaviors within a React component setup.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ArgsTabs\n    components={{\n        TabsDesktop,\n        TabsMobile,\n        TabsResponsive: Tabs,\n        Tab,\n    }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Date Boundaries for Calendar\nDESCRIPTION: This example demonstrates how to limit date selection by defining a valid range using the `minDate` and `maxDate` properties. It sets a minimum date of February 6, 2023, and a maximum date of July 6, 2023, and displays both a desktop and mobile version of the calendar.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar/src/docs/description.mdx#_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nrender(() => {\n    const [value, setValue] = React.useState(() => new Date().setMonth(1));\n    const minDate = startOfDay(new Date());\n    minDate.setDate(6);\n    minDate.setMonth(1);\n\n    const maxDate = startOfDay(new Date());\n    maxDate.setDate(6);\n    maxDate.setMonth(6);\n\n    const calendarStyles = {\n        border: '1px solid rgba(233, 233, 235, 1)',\n        borderRadius: '8px',\n        boxSizing: 'border-box',\n        boxShadow: 'var(--shadow-m)',\n    };\n\n    return (\n        <div style={{ width: '344px', ...calendarStyles }}>\n            <CalendarDesktop\n                responsive={true}\n                value={value}\n                onChange={setValue}\n                selectorView='month-only'\n                minDate={minDate.getTime()}\n                maxDate={maxDate.getTime()}\n                showCurrentYearSelector={true}\n            />\n        </div>\n    );\n});\n//MOBILE\nrender(() => {\n    const [value, setValue] = React.useState(() => new Date().setMonth(1));\n    const [open, setOpen] = React.useState(false);\n    const minDate = startOfDay(new Date());\n    minDate.setDate(6);\n    minDate.setMonth(1);\n\n    const maxDate = startOfDay(new Date());\n    maxDate.setDate(6);\n    maxDate.setMonth(6);\n\n    return (\n        <Container>\n            <Button onClick={() => setOpen(true)} block={true}>\n                Открыть календарь\n            </Button>\n            <CalendarMobile\n                value={value}\n                onChange={setValue}\n                onClose={() => setOpen(false)}\n                open={open}\n                responsive={true}\n                selectorView='month-only'\n                minDate={minDate.getTime()}\n                maxDate={maxDate.getTime()}\n            />\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Mobile Modal Appearance Selection UI with React\nDESCRIPTION: This React snippet implements a mobile interface allowing users to toggle the appearance and behavior of a modal component. It manages state variables for modal visibility, header buttons, and layout options, providing radio button controls for selecting modal position (bottom or right), and a button to toggle modal display.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/universal-modal/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nrender(() => {\n    const [open, setOpen] = React.useState(false);\n\n    const [headerButtonCross, setHeaderButtonCross] = React.useState(true);\n    const [headerButtonArrow, setHeaderButtonArrow] = React.useState(false);\n    const [headerTitle, setHeaderTitle] = React.useState(true);\n\n    const [mainFooterButton, setMainFooterButton] = React.useState(true);\n    const [additionalFooterButton, setAdditionalFooterButton] = React.useState(false);\n    const [verticalFooterButtons, setVerticalFooterButtons] = React.useState(false);\n    const [subtitle, setSubtitle] = React.useState(false);\n    const [alignment, setAlignment] = React.useState(false);\n\n    const [contentTitle, setContentTitle] = React.useState(false);\n    const [contentButton, setContentButton] = React.useState(false);\n\n    const [modalAppearance, setModalAppearance] = React.useState('bottom');\n\n    return (\n        <React.Fragment>\n            <Button onClick={() => setOpen((prev) => !prev)}>Показать модалку</Button>\n            <Gap size={20} />\n            <Divider />\n            <Gap size={20} />\n            Появление модалки\n            <Gap size={12} />\n            <div style={{ display: 'flex', flexDirection: 'column' }}>\n                <Radio\n                    size={24}\n                    label='Снизу'\n                    hint='Для обычных модалок'\n                    checked={modalAppearance === 'bottom'}\n                    onChange={() => setModalAppearance('bottom')}\n                />\n                <Gap size={12} />\n                <Radio\n                    size={24}\n                    label='Справа'\n                    hint='Для сайдпанелей'\n                    checked={modalAppearance === 'right'}\n                    onChange={() => setModalAppearance('right')}\n                />\n```\n\n----------------------------------------\n\nTITLE: Rendering FileUploadItemV1 Examples - JSX\nDESCRIPTION: This code snippet demonstrates the usage of the `FileUploadItemV1` React component. It renders multiple instances of this component, each with different properties like `name`, `uploadDate`, `size`, `showDelete`, `showRestore`, `uploadPercent`, `uploadStatus`, `downloadLink`, `error` and `icon` to simulate different file upload scenarios. The `DiamondMIcon` is also used. These different configurations showcase the flexibility and features of the FileUploadItemV1 component for displaying file upload items in a user interface.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/file-upload-item-v1/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n    <FileUploadItemV1\n        name='Довольно длинное название файла.pdf'\n        uploadDate='22.01.2018'\n        size={500000000}\n        showDelete={false}\n        showRestore={true}\n    />\n    <FileUploadItemV1\n        name='Название файла.pdf'\n        uploadDate='22.01.2018'\n        size={45000}\n        showDelete={true}\n    />\n    <FileUploadItemV1\n        name='С кастомной иконкой.pdf'\n        uploadDate='22.01.2018'\n        size={50000}\n        showDelete={true}\n        icon={DiamondsMIcon}\n    />\n        <FileUploadItemV1\n        name='Название файла.pdf'\n        uploadDate='22.01.2018'\n        uploadPercent={23.5678}\n        uploadStatus='UPLOADING'\n        showDelete={true}\n    />\n    <FileUploadItemV1\n        name='Название файла.txt'\n        uploadDate='22.01.2018'\n        size={157290000}\n        downloadLink='/link'\n        uploadStatus='SUCCESS'\n        showDelete={true}\n    />\n    <FileUploadItemV1\n        name='Название файла.jpg'\n        uploadDate='22.01.2018'\n        size={45000}\n        uploadStatus='ERROR'\n        showDelete={true}\n    />\n    <FileUploadItemV1\n        name='Название файла.png'\n        uploadDate='22.01.2018'\n        size={450000000}\n        uploadStatus='ERROR'\n        error={\n            <>\n                <p style={{ margin: 0, marginBottom: '8px' }}>Размер больше 500 Кб</p>\n                <p style={{ margin: 0 }}>\n                    Недопустимый формат файла. Загрузите файл в одном из этих форматов: .txt, .xml,\n                    .csv\n                </p>\n            </>\n        }\n        showDelete={true}\n    />\n</>\n```\n\n----------------------------------------\n\nTITLE: Customizing TabsSecondary with Right Addons (Mobile)\nDESCRIPTION: This snippet demonstrates how to customize the TabsSecondary component on mobile by adding right addons to each tab. It defines a custom addon element and includes it in the Tab component's rightAddons prop. This example uses the TabsMobile component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/src/docs/description.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [selectedId, setSelectedId] = React.useState('tab-1');\n    const [selectedSecondaryId, setSelectedSecondaryId] = React.useState('tab-1');\n\n    const handleChange = (event, { selectedId }) => setSelectedId(selectedId);\n    const handleSecondaryChange = (event, { selectedId }) => setSelectedSecondaryId(selectedId);\n\n    const addon = (\n        <div\n            style={{\n                background: 'rgba(55, 120, 251, 0.1)',\n                border: '1px dashed #3778FB',\n                borderRadius: '8px',\n                height: '24px',\n                width: '24px',\n                boxSizing: 'border-box',\n            }}\n        />\n    );\n\n    return (\n        <>\n            <TabsMobile size='xs' selectedId={selectedId} onChange={handleChange}>\n                <Tab title='Aurum' id='tab-1' rightAddons={addon} />\n                <Tab title='Bercelium' id='tab-2' rightAddons={addon} />\n                <Tab title='Curium' id='tab-3' rightAddons={addon} />\n                <Tab title='Neptunium' id='tab-4' rightAddons={addon} />\n            </TabsMobile>\n            <div style={{ marginTop: 20 }}>\n                <TabsMobile\n                    selectedId={selectedSecondaryId}\n                    onChange={handleSecondaryChange}\n                    view='secondary'\n                    size='xs'\n                >\n                    <Tab title='Aurum' id='tab-1' rightAddons={addon} />\n                    <Tab title='Bercelium' id='tab-2' rightAddons={addon} />\n                    <Tab title='Curium' id='tab-3' rightAddons={addon} />\n                    <Tab title='Neptunium' id='tab-4' rightAddons={addon} />\n                </TabsMobile>\n            </div>\n        </>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Limiting Textarea Characters and Showing Counter - JSX\nDESCRIPTION: Shows how to configure a React `Textarea` component to limit the maximum number of input characters using `maxLength` and display a character count using `showCounter`. Also sets `minRows` and `block` props. Requires the `Textarea` component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/textarea/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}>\n    <Textarea label='Label' block={true} minRows={3} maxLength={96} showCounter={true} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Expandable Rows in React with Core DS TExpandableRow Component\nDESCRIPTION: This snippet showcases the use of TExpandableRow component to create table rows that can expand and collapse to show additional hidden content. The component uses a render prop, renderContent, that receives the current expanded state, allowing flexible rendering such as integrating a Collapse animation component. It supports both uncontrolled mode (internal state) and controlled mode (external state management). Dependencies include React, Core DS Table components, Typography.Text, Space for layout spacing, Collapse for animated visibility, and Amount for currency formatting. Inputs are a small dataset with detailed rows; output is a table where rows can be expanded to reveal content with a dashed border placeholder area.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/table/src/docs/description.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst data = [\n    {\n        id: 5,\n        date: '30.06.2022',\n        title: 'ИП Жуков Валерий Сергеевич',\n        subtitle: 'Услуги по ремонту за июнь, НДС не облагается',\n        sum: 21000000,\n    },\n    {\n        id: 12,\n        date: '30.06.2022',\n        title: 'ОБЩЕСТВО С ОГРАНИЧЕННОЙ ОТВЕТСТВЕННОСТЬЮ \"МОБИЛСТИЛ\"',\n        subtitle:\n            'Оказание услуг по договору № 26/09 на основании акта № 1450 от 30 июня 2020 года, в т.ч. НДС 18%',\n        sum: 10002030,\n    },\n    {\n        id: 28,\n        date: '30.06.2022',\n        title: 'ООО \"КОРПУС-ИТ\"',\n        sum: 3000069,\n    },\n];\n\nrender(() => {\n    return (\n        <Table>\n            <Table.THead>\n                <Table.THeadCell title='Дата'>Дата</Table.THeadCell>\n\n                <Table.THeadCell title='Контрагент'>Контрагент</Table.THeadCell>\n\n                <Table.THeadCell title='Сумма' textAlign='right' width={268}>\n                    Сумма\n                </Table.THeadCell>\n            </Table.THead>\n            <Table.TBody>\n                {data.map((row) => (\n                    <Table.TExpandableRow\n                        key={row.id}\n                        defaultExpanded={row.id === 5}\n                        renderContent={(expanded) => (\n                            <>\n                                <Table.TCell colSpan={1} />\n                                <Table.TCell colSpan={2}>\n                                    <Collapse expanded={expanded}>\n                                        <div style={{ paddingBottom: '16px' }}>\n                                            <div\n                                                style={{\n                                                    border: '1px dashed #007AFF',\n                                                    height: '200px',\n                                                }}\n                                            />\n                                        </div>\n                                    </Collapse>\n                                </Table.TCell>\n                            </>\n                        )}\n                    >\n                        <Table.TCell>\n                            <Typography.Text view='primary-small' tag='div'>\n                                {row.date}\n                            </Typography.Text>\n                        </Table.TCell>\n\n                        <Table.TCell>\n                            <Space size={2}>\n                                <Typography.Text view='primary-small' tag='div'>\n                                    {row.title}\n                                </Typography.Text>\n                                <Typography.Text view='primary-small' color='secondary'>\n                                    {row.subtitle}\n                                </Typography.Text>\n                            </Space>\n                        </Table.TCell>\n\n                        <Table.TCell>\n                            <Amount\n                                value={row.sum}\n                                currency='RUR'\n                                minority={100}\n                                view='withZeroMinorPart'\n                                bold='full'\n                                transparentMinor={true}\n                            />\n                        </Table.TCell>\n                    </Table.TExpandableRow>\n                ))}\n            </Table.TBody>\n        </Table>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Multi-Step Modal Desktop Implementation (React/JSX)\nDESCRIPTION: This code snippet demonstrates the implementation of a multi-step modal for desktop using React and JSX with the UniversalModalDesktop component. It defines modal content for each step, manages state for modal visibility and current step, and renders the appropriate header, content, and footer based on the current step. The modal includes navigation buttons to move between steps and a close button to exit.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/universal-modal/src/docs/description.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst modalsData = {\n    1: {\n        title: 'Первый уровень',\n        btnText: 'Дальше',\n        bg: '#D8EAFF',\n        color: '#2288FA',\n    },\n    2: {\n        title: 'Второй уровень',\n        btnText: 'Дальше',\n        bg: '#D1F1D7',\n        color: '#0CC44D',\n    },\n    3: {\n        title: 'Третий уровень',\n        btnText: 'Готово',\n        bg: '#FDE6C8',\n        color: '#FA9313',\n    },\n};\n\nrender(() => {\n    const [open, setOpen] = React.useState(false);\n    const [step, setStep] = React.useState(1);\n\n    const item = modalsData[step];\n\n    const commonStyles = {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        transition: 'background 0.2s ease-in, border 0.2s ease-in',\n        borderRadius: '8px',\n        background: item.bg,\n        color: item.color,\n        width: '100%',\n        boxSizing: 'border-box',\n    };\n\n    const handleNextButtonClick = () => {\n        if (step === Object.keys(modalsData).length) {\n            setOpen(false);\n            return;\n        }\n        setStep((prev) => prev + 1);\n    };\n\n    return (\n        <React.Fragment>\n            <Button onClick={() => setOpen((prev) => !prev)}>Показать модалку</Button>\n            <UniversalModalDesktop open={open} height={500} onClose={() => setOpen(false)}>\n                <UniversalModalDesktop.Header\n                    sticky={true}\n                    {...(step === 1 && {\n                        title: (\n                            <Typography.Title view='small' font='system'>\n                                {item.title}\n                            </Typography.Title>\n                        ),\n                    })}\n                    {...(step > 1 && {\n                        bottomAddons: (\n                            <Typography.Title view='small' font='system'>\n                                {item.title}\n                            </Typography.Title>\n                        ),\n                    })}\n                    {...(step > 1 && {\n                        hasBackButton: true,\n                        onBack: () => setStep((prev) => prev - 1),\n                    })}\n                    hasCloser={true}\n                    align='center'\n                    {...(step === 1 && { align: 'left' })}\n                />\n                <UniversalModalDesktop.Content>\n                    <div\n                        style={{\n                            ...commonStyles,\n                            height: '100%',\n                        }}\n                    >\n                        <span style={{ fontWeight: 700, fontSize: '72px' }}>{step}</span>\n                    </div>\n                </UniversalModalDesktop.Content>\n                <UniversalModalDesktop.Footer sticky={true} layout='start'>\n                    <Button\n                        size={48}\n                        view='primary'\n                        onClick={handleNextButtonClick}\n                        block={isMobile()}\n                    >\n                        {item.btnText}\n                    </Button>\n                </UniversalModalDesktop.Footer>\n            </UniversalModalDesktop>\n        </React.Fragment>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Simulating Upload Progress with Attach Component in React JSX\nDESCRIPTION: This snippet demonstrates how to simulate file upload progress within a React component using the Attach UI component. It manages state variables for multiple file selection and upload progress, employs a setInterval to increment upload progress, and configures the Attach component with dynamic props including disabling multiple selection, progress bar updates, and responsive max filename length. Dependencies include React and the custom Attach and Switch components, as well as utility functions like isMobile. Key inputs are user file selection events and interactions with the toggle switch; output is a UI reflecting simulated upload progress and toggled multiple-file mode. Limitations include simulation rather than actual upload logic.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/attach/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [multiple, setMultiple] = React.useState(false);\n    const [progress, setProgress] = React.useState(0);\n\n    const simulateProgress = () => {\n        const interval = setInterval(() => {\n            setProgress((prevProgress) => {\n                if (prevProgress === 100) {\n                    clearInterval(interval);\n                    return 100;\n                }\n                return prevProgress + 1;\n            });\n        }, 100);\n  };\n  \n    const handleChange = () => {\n        simulateProgress()\n    };\n    \n    return (\n        <Space size={24} >\n        <Attach \n            size={56} \n            onChange={handleChange}\n            multiple={multiple} \n            maxFilenameLength={isMobile() ? 10 : undefined}\n            progressBarPercent={progress === 100 ? null : progress}\n            buttonProps={{\n                breakpoint: BREAKPOINT,\n                nowrap: true,\n            }}\n        />\n        <Switch\n            block={true}\n            checked={multiple}\n            label='Несколько файлов'\n            onChange={() => setMultiple(!multiple)}\n        />\n        </Space>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing PageIndicatorDynamic Component in React\nDESCRIPTION: Example of using PageIndicatorDynamic component with two size options (6px and 8px). Features include cyclic behavior, customizable duration, and control buttons to navigate between elements.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/page-indicator/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const elements = 7;\n    const [active, setActive] = React.useState(true);\n    const toggleActive = () => setActive((active) => !active);\n    const [activeElement, setActiveElement] = React.useState(0);\n    const handlePrevClick = () => setActiveElement((prev) => Math.max(--prev, 0));\n    const handleNextClick = () => setActiveElement((prev) => Math.min(++prev, elements - 1));\n    const duration = (index) => (index % 2 === 0 ? 2000 : 4000);\n\n    return (\n        <div>\n            <Container>\n                <PageIndicatorDynamic\n                    size={8}\n                    activeElement={activeElement}\n                    elements={elements}\n                    onActiveElementChange={setActiveElement}\n                    active={active}\n                    cycle={true}\n                    duration={duration}\n                />\n                <Gap size={8} />\n                <PageIndicatorDynamic\n                    size={6}\n                    activeElement={activeElement}\n                    elements={elements}\n                    active={active}\n                    duration={duration}\n                />\n            </Container>\n            <Row style={{ gap: 'var(--gap-xs)' }}>\n                <Button leftAddons={<ChevronLeftMIcon />} onClick={handlePrevClick} />\n                <Button\n                    leftAddons={active ? <PauseCompactMIcon /> : <PlayCompactMIcon />}\n                    onClick={toggleActive}\n                />\n                <Button leftAddons={<ChevronRightMIcon />} onClick={handleNextClick} />\n            </Row>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Desktop Select Options with Amount on Top\nDESCRIPTION: Maps account data to create options for a desktop select dropdown, utilizing the renderOptionWithAmountOnTop component with specificpadding configurations to display account amounts above labels.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/select/src/docs/description.mdx#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst OPTIONS_WITH_AMOUNT_ON_TOP = DATA.map(({ amount, text }, idx) => ({\n    key: idx,\n    content: renderOptionWithAmountOnTop({\n        text,\n        amount,\n        padding: { top: 'xs', bottom: 'xs', left: 's' },\n    }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheet Component Structure with React\nDESCRIPTION: This example demonstrates the anatomy of the BottomSheet component using a live demo. It creates a customized Header component and shows how to structure the BottomSheet with proper header, content, and footer placement to ensure fixed positioning during scrolling.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/bottom-sheet/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Header = () => {\n    const { setHasHeader, onClose } = React.useContext(ModalContext);\n\n    React.useEffect(() => setHasHeader(true), [setHasHeader]);\n\n    const commonStyles = {\n        backgroundColor: 'rgba(55, 120, 251, 0.1)',\n        border: '1px dashed rgb(55, 120, 251)',\n        boxSizing: 'border-box',\n        borderRadius: '8px',\n        height: '48px',\n    };\n\n    const addonsStyles = {\n        ...commonStyles,\n        width: '48px',\n    };\n\n    const innerAddonsStyles = {\n        ...addonsStyles,\n        backgroundColor: 'rgba(207, 112, 255, 0.1)',\n    };\n\n    const bottomAddonsStyles = {\n        ...commonStyles,\n        width: '100%',\n    };\n\n    const wrapperStyles = {\n        display: 'flex',\n        justifyContent: 'center',\n    };\n\n    const titleStyles = {\n        ...commonStyles,\n        flexGrow: 1,\n    };\n\n    return (\n        <div style={{ margin: 'var(--gap-12-neg) var(--gap-8-neg)' }}>\n            <div style={wrapperStyles}>\n                <div style={innerAddonsStyles} />\n                <div style={addonsStyles} />\n                <div style={titleStyles} />\n                <div style={addonsStyles} />\n                <div style={innerAddonsStyles} onClick={onClose} />\n            </div>\n            <div style={bottomAddonsStyles} />\n        </div>\n    );\n};\n\nrender(() => {\n    const [open, setOpen] = React.useState(false);\n    const handleOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n\n    const commonStyle = {\n        width: '100%',\n        borderRadius: '8px',\n        backgroundColor: 'rgba(55, 120, 251, 0.1)',\n        border: '1px dashed rgb(55, 120, 251)',\n        boxSizing: 'border-box',\n    };\n\n    const contentStyle = {\n        ...commonStyle,\n        height: '380px',\n    };\n\n    const footerStyle = {\n        ...commonStyle,\n        height: '48px',\n    };\n\n    return (\n        <Container>\n            <ButtonMobile type='button' size='s' onClick={handleOpen} block={true}>\n                Показать анатомию\n            </ButtonMobile>\n            <BottomSheet\n                trimTitle={false}\n                open={open}\n                onClose={handleClose}\n                title={<Header />}\n                actionButton={<div style={footerStyle} />}\n            >\n                <div style={contentStyle} />\n            </BottomSheet>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a React component with a calendar and toggle switch\nDESCRIPTION: This snippet defines a React component that manages visibility state using useState, applies custom styles to the calendar container, and renders a CalendarWithSkeleton component. A switch toggles the skeletonization of content, enabling dynamic UI updates based on user interaction.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [visible, setVisible] = React.useState(true);\n    \n    const calendarStyles = {\n        border: '1px solid rgba(233, 233, 235, 1)',\n        borderRadius: '8px',\n        boxShadow: `0px 20px 24px rgba(0, 0, 0, 0.08),\n                    0px 12px 16px rgba(0, 0, 0, 0.04),\n                    0px 4px 8px rgba(0, 0, 0, 0.04),\n                    0px 0px 1px rgba(0, 0, 0, 0.04)`,\n    };\n\n    return (\n        <div style={{ width: 344 }}>\n            <div style={calendarStyles}>\n                <CalendarWithSkeleton calendarVisible={visible} />\n            </div>\n            <Gap size='xl'/>\n            <Switch\n                block={true}\n                checked={!visible}\n                label='Скелетонизация контента'\n                onChange={() => setVisible(!visible)}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal Radio Group in React\nDESCRIPTION: Example of horizontal radio group implementation with desktop and mobile variants. Includes state management, error handling, and interactive buttons to toggle error states.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/radio-group/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [value, setValue] = React.useState('one');\n    const [error, setError] = React.useState(false);\n\n    const onChange = (_, payload) => {\n        setValue(payload.value);\n    };\n\n    return (\n        <div style={{ width: '100%' }}>\n            <RadioGroupDesktop\n                label='Ближайшая планета к Солнцу'\n                direction='horizontal'\n                name='radioGroup'\n                onChange={onChange}\n                hint='Выберите один из вариантов'\n                error={error}\n                value={value}\n            >\n                <Radio label='Меркурий' value='one' size={24} />\n                <Radio label='Венера' value='two' size={24} />\n                <Radio label='Нептун' value='three' size={24} />\n            </RadioGroupDesktop>\n\n            <Gap size='2xl' />\n\n            <Space direction='horizontal' wrap={true}>\n                <Button size='xxs' onClick={() => setError(false)}>\n                    По умолчанию\n                </Button>\n                <Button size='xxs' onClick={() => setError('Правильный ответ: Меркурий')}>\n                    Состояние ошибки\n                </Button>\n            </Space>\n        </div>\n    );\n});\n//MOBILE\nrender(() => {\n    const [value, setValue] = React.useState('one');\n    const [error, setError] = React.useState(false);\n\n    const onChange = (_, payload) => {\n        setValue(payload.value);\n    };\n\n    return (\n        <div style={{ width: '100%' }}>\n            <RadioGroupMobile\n                label='Ближайшая планета к Солнцу'\n                direction='horizontal'\n                name='radioGroup'\n                onChange={onChange}\n                hint='Выберите один из вариантов'\n                error={error}\n                value={value}\n            >\n                <Radio label='Меркурий' value='one' size={24} />\n                <Radio label='Венера' value='two' size={24} />\n                <Radio label='Нептун' value='three' size={24} />\n            </RadioGroupMobile>\n\n            <Gap size='2xl' />\n\n            <Space direction='horizontal' wrap={true}>\n                <Button size='xxs' onClick={() => setError(false)}>\n                    По умолчанию\n                </Button>\n                <Button size='xxs' onClick={() => setError('Правильный ответ: Меркурий')}>\n                    Состояние ошибки\n                </Button>\n            </Space>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Conditional SidePanel Content with Toggle in React JSX\nDESCRIPTION: Defines a Content component that conditionally renders multiple paragraphs of the Text component or a preview placeholder based on the isPreview prop and internal state. It provides a button to toggle additional content visibility. State management is done using React.useState, and a Storybook boolean knob also controls the toggle externally. This component simulates expandable content inside the SidePanel.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/side-panel/src/docs/Component.stories.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Content = ({ isPreview }) => {\n    const [showMore, setShowMore] = React.useState(false);\n    return isPreview ? (\n        <>Пример текстового контента.</>\n    ) : (\n        <>\n            <Text />\n            {(showMore || boolean('showMore')) && (\n                <>\n                    <Text />\n                    <Text />\n                    <Text />\n                    <Text />\n                    <Text />\n                </>\n            )}\n            <Button size='xs' type='Button' onClick={() => setShowMore(!showMore)}>\n                {showMore ? 'Скрыть' : 'Показать еще'}\n            </Button>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing RadioGroup Components in JSX\nDESCRIPTION: This snippet demonstrates the standard import statements required to use the different variants of the RadioGroup component (standard, mobile, desktop) in a JavaScript or TypeScript file within a React project. It assumes the `@alfalab/core-components` library is installed and configured. These imports make the components available for rendering and interaction.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/radio-group/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RadioGroup } from '@alfalab/core-components/radio-group';\nimport { RadioGroupMobile } from '@alfalab/core-components/radio-group/mobile';\nimport { RadioGroupDesktop } from '@alfalab/core-components/radio-group/desktop';\n```\n\n----------------------------------------\n\nTITLE: Removing Notification with React Hook - React\nDESCRIPTION: This code snippet defines a `removeNotification` function using the `React.useCallback` hook. It filters an array of notifications based on the provided ID, using a functional update on React's `setNotifications` state. This correctly updates the notifications list.  It uses `actualNotifications` from the functional argument of the `setNotifications` update function. The constraint is that the setNotifications function needs to use a functional update for the filtering to work properly.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/notification-manager/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst removeNotification = React.useCallback(id => {\n    /**\n     * Обратите внимание, что актуальный массив нотификаций\n     * нужно брать из аргументов функции обновления состояния.\n     */\n    setNotifications(actualNotifications =>\n        actualNotifications.filter(notification => notification.props.id !== id),\n    );\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Step BottomSheet Flow in React (JSX)\nDESCRIPTION: This example demonstrates creating a multi-step user flow using the `BottomSheet` component. It utilizes React's `useState` hook to manage the current `step` and the `open` state of the sheet. Data for each step (title, button text, background color) is stored in the `DATA` object. The `BottomSheet` props like `title`, `hasBacker`, `onBack`, and the content style are updated based on the current step. The `actionButton` (`ButtonMobile`) either increments the step state or closes the sheet depending on whether it's the final step. The height for all steps is consistently set to `full`.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/bottom-sheet/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst DATA = {\n    1: {\n        title: 'Первый уровень',\n        btnText: 'Дальше',\n        bg: 'rgba(55, 120, 251, 0.1)',\n        color: '#3778FB',\n    },\n    2: {\n        title: 'Второй уровень',\n        btnText: 'Дальше',\n        bg: 'rgba(207, 112, 255, 0.1)',\n        color: '#CF70FF',\n    },\n    3: {\n        title: 'Третий уровень',\n        btnText: 'Готово',\n        bg: 'rgba(112, 255, 126, 0.1)',\n        color: '#058102',\n    },\n};\n\nrender(() => {\n    const [step, setStep] = React.useState(1);\n    const [open, setOpen] = React.useState(false);\n\n    const handleOpen = () => {\n        setOpen(true);\n        setStep(1);\n    };\n    const handleClose = () => setOpen(false);\n\n    const item = DATA[step];\n\n    const commonStyles = {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        transition: 'background 0.2s ease-in, border 0.2s ease-in',\n        borderRadius: '8px',\n        background: item.bg,\n        border: `1px dashed ${item.color}`,\n        color: item.color,\n        width: '100%',\n        boxSizing: 'border-box',\n    };\n\n    return (\n        <Container>\n            <ButtonMobile size='s' onClick={handleOpen} block={true}>\n                Показать шторку\n            </ButtonMobile>\n\n            <BottomSheet\n                open={open}\n                onClose={handleClose}\n                initialHeight='full'\n                stickyHeader={true}\n                stickyFooter={true}\n                hasCloser={true}\n                hasBacker={step !== 1}\n                title={item.title}\n                onBack={() => setStep(step - 1)}\n                actionButton={\n                    <ButtonMobile\n                        size='m'\n                        view='primary'\n                        onClick={\n                            item.btnText === DATA[1].btnText ? () => setStep(step + 1) : handleClose\n                        }\n                    >\n                        {item.btnText}\n                    </ButtonMobile>\n                }\n            >\n                <div style={{ ...commonStyles, height: '100%' }}>\n                    <span style={{ fontWeight: 700, fontSize: '72px' }}>{step}</span>\n                </div>\n            </BottomSheet>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering PageIndicatorBullet Component in React Storybook\nDESCRIPTION: This React code snippet defines a Storybook story for the `PageIndicatorBullet` component. It utilizes `React.createElement` and Storybook knobs (`select`, `number`) to enable interactive adjustment of component properties such as `colors`, `activeElement`, `size`, `gap`, and `elements`. The component is displayed within a styled `div` that adapts its background color based on the selected `colors` prop, facilitating the visualization of different themes.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/page-indicator/src/docs/Component.stories.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Story name='PageIndicatorBullet'>\n    {React.createElement(() => {\n        const colors = select(\n            'colors',\n            ['default', 'inverted', 'static', 'static-inverted'],\n            'default',\n        );\n        return (\n            <div\n                style={{\n                    backgroundColor:\n                        colors === 'inverted'\n                            ? 'var(--color-light-base-bg-primary-inverted)'\n                            : 'transparent',\n                    padding: '8px',\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    right: 0,\n                    bottom: 0,\n                }}\n            >\n                <PageIndicatorBullet\n                    activeElement={number('activeElement', 0)}\n                    size={number('size', 8)}\n                    gap={number('gap', 8)}\n                    elements={number('elements', 10)}\n                    colors={colors}\n                />\n            </div>\n        );\n    })}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Grouped Options List in SelectDesktop and SelectMobile Using JSX\nDESCRIPTION: Shows how to create grouped option lists in React JSX with Select components. The OPTIONS array includes group labels with nested options arrays to categorize list items. The SelectDesktop example renders the grouped list with props for unselecting, size, placeholder, label, and block layout. The mobile version maintains selected item state with React.useState and handles changes via an onChange callback. Dependencies include React, SelectDesktop, SelectMobile, and BaseOption. Inputs are nested option group arrays and user selection; output is the selected key. Layout adjusts dynamically based on window width.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/select/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst OPTIONS = [\n    {\n        label: 'nonmetals',\n        options: [\n            { key: '1', content: 'Hydrogen' },\n            { key: '2', content: 'Helium' },\n        ],\n    },\n    {\n        label: 'metals',\n        options: [\n            { key: '3', content: 'Aurum' },\n            { key: '4', content: 'Platinum' },\n        ],\n    },\n];\nrender(() => {\n    return (\n        <div style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}>\n            <SelectDesktop\n                allowUnselect={true}\n                size={56}\n                options={OPTIONS}\n                placeholder='Выберите элемент'\n                label='Сгруппированный список'\n                Option={BaseOption}\n                block={true}\n            />\n        </div>\n    );\n});\n\n//MOBILE\nconst OPTIONS = [\n    {\n        label: 'nonmetals',\n        options: [\n            { key: '1', content: 'Hydrogen' },\n            { key: '2', content: 'Helium' },\n        ],\n    },\n    {\n        label: 'metals',\n        options: [\n            { key: '3', content: 'Aurum' },\n            { key: '4', content: 'Platinum' },\n        ],\n    },\n];\nrender(() => {\n    const [selected, setSelected] = React.useState();\n\n    const handleChange = ({ selected }) => {\n        setSelected(selected);\n    };\n\n    return (\n        <div style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}>\n            <SelectMobile\n                allowUnselect={true}\n                options={OPTIONS}\n                placeholder='Выберите элемент'\n                label='Сгруппированный список'\n                Option={BaseOption}\n                selected={selected}\n                onChange={handleChange}\n                block={true}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: React Component for Modal Configuration Interface\nDESCRIPTION: This React component enables users to dynamically configure modal dialog properties, including orientation, size, header, footer, and content settings. It manages state for all configurable options and updates styles based on user interactions, providing a flexible testing environment for modal variations. Dependencies include React and custom UI components such as Button, SelectDesktop, Switch, and Radio.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/universal-modal/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst horizontalOptions = [\n    { key: 'start', content: 'Start' },\n    { key: 'center', content: 'Center' },\n    { key: 'end', content: 'End' },\n];\nconst verticalOptions = [\n    { key: 'top', content: 'Top' },\n    { key: 'center', content: 'Center' },\n    { key: 'bottom', content: 'Bottom' },\n];\nconst heightOptions = [\n    { key: '500', content: '500' },\n    { key: '600', content: '600' },\n    { key: '800', content: '800' },\n    { key: 'fullHeight', content: 'Full' },\n];\nconst widthOptions = [\n    { key: '500', content: '500' },\n    { key: '600', content: '600' },\n    { key: '800', content: '800' },\n    { key: 'fullWidth', content: 'Full' },\n];\n\nrender(() => {\n    const [open, setOpen] = React.useState(false);\n    const [horizontalAlign, setHorizontalAlign] = React.useState('center');\n    const [verticalAlign, setVerticalAlign] = React.useState('center');\n    const [modalWidth, setModalWidth] = React.useState('500');\n    const [modalHeight, setModalHeight] = React.useState('500');\n\n    const [headerButtonCross, setHeaderButtonCross] = React.useState(true);\n    const [headerButtonArrow, setHeaderButtonArrow] = React.useState(false);\n    const [headerType, setHeaderType] = React.useState('none');\n\n    const [mainFooterButton, setMainFooterButton] = React.useState(true);\n    const [additionalFooterButton, setAdditionalFooterButton] = React.useState(false);\n    const [verticalFooterButtons, setVerticalFooterButtons] = React.useState(false);\n    const [stretchFooterButtons, setStretchFooterButtons] = React.useState(false);\n\n    const [contentTitle, setContentTitle] = React.useState(false);\n    const [contentButton, setContentButton] = React.useState(false);\n\n    const handleRadioChange = (state) => {\n        setHeaderType(state);\n    };\n\n    const getButtonSize = () => {\n        if (horizontalAlign !== 'center') {\n            return 56;\n        } else {\n            if (modalWidth >= 800) {\n                return 56;\n            }\n            return 48;\n        }\n    };\n\n    const getMargin = () => {\n        if (horizontalAlign === 'center') {\n            if (verticalAlign === 'top') {\n                return {\n                    top: 12,\n                    ...(modalWidth === 'fullWidth' && {\n                        right: 12,\n                        left: 12,\n                    }),\n                    ...(modalHeight === 'fullHeight' && {\n                        bottom: 12,\n                    }),\n                };\n            }\n\n            if (verticalAlign === 'center') {\n                return {\n                    ...(modalWidth === 'fullWidth' && {\n                        right: 12,\n                        left: 12,\n                    }),\n                    ...(modalHeight === 'fullHeight' && {\n                        top: 12,\n                        bottom: 12,\n                    }),\n                };\n            }\n\n            if (verticalAlign === 'bottom') {\n                return {\n                    bottom: 12,\n                    ...(modalWidth === 'fullWidth' && {\n                        right: 12,\n                        left: 12,\n                    }),\n                    ...(modalHeight === 'fullHeight' && {\n                        top: 12,\n                    }),\n                };\n            }\n        } else {\n            return { top: 12, right: 12, bottom: 12, left: 12 };\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <Button onClick={() => setOpen((prev) => !prev)}>Показать модалку</Button>\n            <Gap size={20} />\n            <Divider />\n            <Gap size={20} />\n            <div style={{ display: 'flex', flexDirection: 'column', width: 532 }}>\n                <div style={{ display: 'flex' }}>\n                    <div style={{ width: 260 }}>\n                        <SelectDesktop\n                            size={56}\n                            options={horizontalOptions}\n                            selected={horizontalAlign}\n                            label='Положение по горизонтали'\n                            block={true}\n                            onChange={({ selected }) => setHorizontalAlign(selected.key)}\n                        />\n                    </div>\n                    <Gap size={12} direction={'horizontal'} />\n                    <div style={{ width: 260 }}>\n                        <SelectDesktop\n                            size={56}\n                            options={verticalOptions}\n                            selected={verticalAlign}\n                            label='Положение по вертикали'\n                            block={true}\n                            onChange={({ selected }) => setVerticalAlign(selected.key)}\n                        />\n                    </div>\n                </div>\n                <Gap size={12} />\n                <div style={{ display: 'flex' }}>\n                    <div style={{ width: 260 }}>\n                        <SelectDesktop\n                            size={56}\n                            options={heightOptions}\n                            selected={modalHeight}\n                            label='Высота'\n                            block={true}\n                            onChange={({ selected }) => setModalHeight(selected.key)}\n                        />\n                    </div>\n                    <Gap size={12} direction={'horizontal'} />\n                    <div style={{ width: 260 }}>\n                        <SelectDesktop\n                            size={56}\n                            options={widthOptions}\n                            selected={modalWidth}\n                            label='Ширина'\n                            block={true}\n                            onChange={({ selected }) => setModalWidth(selected.key)}\n                        />\n                    </div>\n                </div>\n            </div>\n            <Gap size={24} />\n            Навигация\n            <Gap size={12} />\n            <div>\n                <Switch\n                    label='Крестик'\n                    checked={headerButtonCross}\n                    onChange={() => setHeaderButtonCross((prev) => !prev)}\n                />\n                <Gap size={12} />\n                <Switch\n                    label='Стрелка назад'\n                    checked={headerButtonArrow}\n                    onChange={() => setHeaderButtonArrow((prev) => !prev)}\n                />\n                <Gap size={12} />\n                Заголовок в шапке\n                <Gap size={12} />\n                <div style={{ display: 'flex', flexDirection: 'column' }}>\n                    <Radio\n                        size={24}\n                        onChange={() => handleRadioChange('normal')}\n                        checked={headerType === 'normal'}\n                        label='Обычный'\n                        hint='Для модалок шириной до 800 рх'\n                    />\n                    <Gap size={12} />\n                    <Radio\n                        size={24}\n                        onChange={() => handleRadioChange('big')}\n                        checked={headerType === 'big'}\n                        label='Крупный'\n                        hint='Для широких модалок и сайдпанелей'\n                    />\n                    <Gap size={12} />\n                    <Radio\n                        size={24}\n                        onChange={() => handleRadioChange('none')}\n                        checked={headerType === 'none'}\n                        label='Без заголовка'\n                    />\n                </div>\n            </div>\n            <Gap size={24} />\n            Настройки футера\n            <Gap size={12} />\n            <div>\n                <Switch\n                    label='Основная кнопка'\n                    checked={mainFooterButton}\n                    onChange={() => {\n                        setContentButton(false);\n                        setMainFooterButton((prev) => !prev);\n                    }}\n                />\n                <Gap size={12} />\n                <Switch\n                    label='Дополнительная кнопка'\n                    checked={additionalFooterButton}\n                    onChange={() => {\n                        setContentButton(false);\n                        setAdditionalFooterButton((prev) => !prev);\n                    }}\n                />\n                <Gap size={12} />\n                <Switch\n                    label='Вертикальная ориентация'\n                    checked={verticalFooterButtons}\n                    onChange={() => setVerticalFooterButtons((prev) => !prev)}\n                />\n                <Gap size={12} />\n                <Switch\n                    label='Растянуть кнопки на всю ширину'\n                    hint='Только для горизонтального расположения'\n                    checked={stretchFooterButtons}\n                    onChange={() => setStretchFooterButtons((prev) => !prev)}\n                />\n            </div>\n            <Gap size={24} />\n            Настройки контента\n            <Gap size={12} />\n            <div>\n                <Switch\n                    label='Заголовок'\n                    hint='Если не стали размещать его в шапке'\n                    checked={contentTitle}\n                    onChange={() => {\n                        setContentTitle((prev) => !prev);\n                    }}\n                />\n                <Gap size={12} />\n                <Switch\n                    label='Кнопка'\n                    hint='Если не стали размещать его в футере'\n                    checked={contentButton}\n                    onChange={() => {\n                        setMainFooterButton(false);\n                        setAdditionalFooterButton(false);\n                        setContentButton((prev) => !prev);\n                    }}\n                />\n```\n\n----------------------------------------\n\nTITLE: Defining Confirmation Screen and State Types in TypeScript\nDESCRIPTION: Defines the TypeScript union types for possible screens and states within the Confirmation component. 'ConfirmationScreen' lists screen identifiers that include initial, hint, fatal error, and temporary block displays. 'ConfirmationState' outlines states such as initial, checking, sending, and error conditions for the confirmation code input process. These typing definitions facilitate type-safe state management and screen control within the application.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/confirmation/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ConfirmationScreen =\n    | 'INITIAL' // начальный экран\n    | 'HINT' // экран \"Не приходит смс?\"\n    | 'FATAL_ERROR' // экран критической ошибки\n    | 'TEMP_BLOCK'; // экран временной блокировки\n\nexport type ConfirmationState =\n    | 'INITIAL' // начальное состояние\n    | 'CODE_CHECKING' // проверка кода\n    | 'CODE_SENDING' // повторная отправка кода\n    | 'CODE_ERROR'; // ошибка, когда ввели неверный код\n```\n\n----------------------------------------\n\nTITLE: Implementing PureCell.Graphics with Custom Padding in React\nDESCRIPTION: This snippet demonstrates how to use PureCell.Graphics with a Circle component and customizable graphic padding. It allows for adjusting vertical and horizontal padding with multiple padding options.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pure-cell/src/docs/Component.stories.mdx#_snippet_12\n\nLANGUAGE: JSX\nCODE:\n```\n<PureCell\n    href={text('href', '')}\n    verticalPadding={verticalPaddingPrepared}\n    horizontalPadding={horizontalPadding}\n    direction={direction}\n>\n    <PureCell.Graphics graphicPadding={graphicPadding}>\n        <Circle />\n    </PureCell.Graphics>\n</PureCell>\n```\n\n----------------------------------------\n\nTITLE: Initializing TabsSecondary with Configuration Options\nDESCRIPTION: This snippet demonstrates how to initialize and configure the TabsSecondary component with various options like size, shape, scrollable behavior, and tag view. It also shows how to dynamically change the number of tabs displayed and handle tab selection.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst TABS = [\n    { title: 'Aurum', id: 'tab-1' },\n    { title: 'Bercelium', id: 'tab-2' },\n    { title: 'Curium', id: 'tab-3' },\n    { title: 'Neptunium', id: 'tab-4' },\n    { title: 'Plutonuim', id: 'tab-5' },\n    { title: 'Rubidium', id: 'tab-6' },\n    { title: 'Californium', id: 'tab-7' },\n    { title: 'Hydrogenium', id: 'tab-8' },\n    { title: 'Helium', id: 'tab-9' },\n    { title: 'Lithium', id: 'tab-10' },\n    { title: 'Beryllium', id: 'tab-11' },\n    { title: 'Borum', id: 'tab-12' },\n    { title: 'Carboneum', id: 'tab-13' },\n    { title: 'Nitrogenium', id: 'tab-14' },\n    { title: 'Oxygenium', id: 'tab-15' },\n];\n\nconst IS_MOBILE = document.body.clientWidth < 450;\n\nrender(() => {\n    const [selectedId, setSelectedId] = React.useState(TABS[0].id);\n\n    const [count, setCount] = React.useState('3');\n    const [size, setSize] = React.useState(IS_MOBILE ? 'xs' : 's');\n    const [shape, setShape] = React.useState('rounded');\n    const [tagView, setTagView] = React.useState('outlined');\n\n    const handleChange = (event, { selectedId }) => {\n        setSelectedId(selectedId);\n    };\n\n    return (\n        <>\n            <Tabs\n                breakpoint={450}\n                selectedId={selectedId}\n                onChange={handleChange}\n                view='secondary'\n                size={size}\n                scrollable={true}\n                tagShape={shape}\n                tagView={tagView}\n                fullWidthScroll={IS_MOBILE}\n            >\n                {TABS.slice(0, Number(count)).map((item) => (\n                    <Tab title={item.title} id={item.id} key={item.id} />\n                ))}\n            </Tabs>\n            <br />\n            <Typography.Text view='primary-medium' color='secondary'>\n                Выбран таб: {TABS.find((tab) => tab.id === selectedId).title}\n            </Typography.Text>\n\n            <Gap size='l' />\n\n            <Space size={24}>\n                <RadioGroup\n                    direction='vertical'\n                    label='Количество табов'\n                    value={count}\n                    onChange={(e) => {\n                        setCount(e.target.value);\n                        setSelectedId(TABS[0].id);\n                    }}\n                >\n                    <Radio label='3' value='3' />\n                    <Radio label='15' value='15' />\n                </RadioGroup>\n\n                <RadioGroup\n                    direction='vertical'\n                    label='Размер'\n                    value={size}\n                    onChange={(e) => setSize(e.target.value)}\n                >\n                    {!IS_MOBILE && <Radio label='S' value='s' />}\n                    <Radio label='XS' value='xs' />\n                    <Radio label='XXS' value='xxs' />\n                </RadioGroup>\n\n                <RadioGroup\n                    direction='vertical'\n                    label='Форма табов'\n                    value={shape}\n                    onChange={(e) => setShape(e.target.value)}\n                >\n                    <Radio label='Rounded' value='rounded' />\n                    <Radio label='Rectangular' value='rectangular' />\n                </RadioGroup>\n\n                <RadioGroup\n                    direction='vertical'\n                    label='Стиль табов'\n                    value={tagView}\n                    onChange={(e) => setTagView(e.target.value)}\n                >\n                    <Radio label='Outlined' value='outlined' />\n                    <Radio label='Filled' value='filled' />\n                </RadioGroup>\n            </Space>\n        </>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Tables Using ARIA Roles in HTML\nDESCRIPTION: This snippet illustrates building an accessible table structure using ARIA roles instead of native <table> elements. It employs divs with roles such as table, rowgroup, row, columnheader, rowheader, and cell, combined with aria-label and aria-describedby attributes for descriptive labeling. This approach supports accessibility when standard <table> elements cannot be used, relying on correct ARIA markup to maintain semantic meaning for assistive technologies. No external libraries are needed.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/tables.stories.mdx#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div role=\\\"table\\\" aria-label=\\\"Студенты\\\" aria-describedby=\\\"students-table-desc\\\">\\n    <div id=\\\"students-table-desc\\\">Список студентов курса</div>\\n    <div role=\\\"rowgroup\\\">\\n        <div role=\\\"row\\\">\\n            <span role=\\\"columnheader\\\"> № строки </span>\\n            <span role=\\\"columnheader\\\"> ФИО </span>\\n            <span role=\\\"columnheader\\\"> Дата рождения </span>\\n        </div>\\n    </div>\\n    <div role=\\\"rowgroup\\\">\\n        <div role=\\\"row\\\">\\n            <span role=\\\"rowheader\\\"> 1 </span>\\n            <span role=\\\"cell\\\"> Иванов Иван Иванович </span>\\n            <span role=\\\"cell\\\"> 01.01.2000 </span>\\n        </div>\\n    </div>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Extending Input with Suffix via Higher-Order Components in React (JS/JSX)\nDESCRIPTION: Showcases dynamic selection between mobile and desktop input components using withSuffix HOC for adding a suffix. Relies on isMobile, InputMobile, InputDesktop, withSuffix, and BREAKPOINT. The suffix prop allows custom JSX content to appear after the user's input. Expected to work where customizable input adornments are required. Inputs: value and props; Outputs: a React component with a custom suffix.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/form-control/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const SuffixInputComponent = isMobile() ? withSuffix(InputMobile) : withSuffix(InputDesktop);\n\n    return (\n        <div style={{ width: 320 }}>\n            <SuffixInputComponent\n                value='Value'\n                block={true}\n                label='Label'\n                labelView={isMobile() ? 'outer' : 'inner'}\n                size={isMobile() ? 's' : 'm'}\n                suffix={<span style={{ color: 'var(--color-light-text-secondary)' }}> Suffix</span>}\n                breakpoint={BREAKPOINT}\n            />\n        </div>\n    );\n});\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Component Header (JSX)\nDESCRIPTION: The `ComponentHeader` component is utilized to display a header for the 'NotificationManager' component. It sets the component's name and a description. This improves the visual presentation of the story and introduces some russian text. The `children` prop gives a human-readable description of the component's purpose, appearing in the Storybook interface.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/notification-manager/src/docs/Component.docs.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<ComponentHeader\n    name='NotificationManager'\n    children='Используется для одновременного вывода нескольких уведомлений.'\n/>\n```\n\n----------------------------------------\n\nTITLE: Using native and custom elements for accessible checkboxes in HTML\nDESCRIPTION: This snippet compares poorly and well-implemented methods for creating accessible checkboxes, emphasizing the use of roles, ARIA attributes, and native input elements to ensure compatibility with screen readers.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/forms.stories.mdx#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n⛔ Плохо\n<div class=\"checkbox checked\">Check me</div>\n\n✅ Хорошо\n<div\n    class=\"checkbox checked\"\n    role=\"checkbox\"\n    aria-checked=\"true\"\n    onClick=\"{clickHandler}\"\n    onKeyDown=\"{keyDownHandler}\"\n>\n    Check me\n</div>\n\n✅ Еще лучше\n<input type=\"checkbox\" id=\"my-checkbox\" />\n<label for=\"my-checkbox\">Check me</label>\n```\n\n----------------------------------------\n\nTITLE: Rendering Body Text with Weight and Monospace Options - React JSX\nDESCRIPTION: This snippet displays multiple text styles using Typography.Text, allowing the user to choose between Regular, Medium, and Bold weights, as well as toggle monospace numbers via a Switch component. It utilizes a Select component for weight selection and dynamically maps style variants. Required dependencies: React, Select, BaseOption, Gap, Switch, Typography.Text, and BREAKPOINT for responsive select. The inputs are the selected weight/boolean for monospace; the output is a vertical list of styled text samples with interactive controls. Limitations: This assumes the supporting components are implemented and expects to run in a React environment supporting these dependencies.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/typography/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nconst OPTIONS = [\n    { key: '1', content: 'Weight: Regular', value: 'regular' },\n    { key: '2', content: 'Weight: Medium', value: 'medium' },\n    { key: '3', content: 'Weight: Bold', value: 'bold' },\n];\n\nconst VIEW_TYPES = {\n    'primary-large': 'PrimaryLarge',\n    'primary-medium': 'PrimaryMedium',\n    'primary-small': 'PrimarySmall',\n    'secondary-large': 'SecondaryLarge',\n    'secondary-medium': 'SecondaryMedium',\n    'secondary-small': 'SecondarySmall',\n    'component-primary': 'ComponentPrimary',\n    'component-secondary': 'ComponentSecondary',\n    caps: 'Caps',\n};\n\nrender(() => {\n    const [selected, setSelected] = React.useState(OPTIONS[0]);\n    const [monospaceNumbers, setMonospaceNumbers] = React.useState(false);\n\n    const handleChange = ({ selected }) => {\n        if (selected) {\n            setSelected(selected);\n        }\n    };\n\n    return (\n        <div style={{ width: 320 }}>\n            <Select\n                allowUnselect={true}\n                block={true}\n                size={56}\n                options={OPTIONS}\n                Option={BaseOption}\n                onChange={handleChange}\n                selected={selected}\n                breakpoint={BREAKPOINT}\n            />\n            <Gap size='m' />\n            <Switch\n                checked={monospaceNumbers}\n                onChange={() => setMonospaceNumbers(!monospaceNumbers)}\n                label='MonospaceNumbers'\n            />\n            <Gap size='xl' />\n            {Object.keys(VIEW_TYPES).map((view) => (\n                <React.Fragment key={view}>\n                    <Typography.Text\n                        weight={selected.value}\n                        view={view.toLowerCase()}\n                        key={view}\n                        tag='div'\n                        monospaceNumbers={monospaceNumbers}\n                    >\n                        {VIEW_TYPES[view]} 123456\n                    </Typography.Text>\n                    <Gap size='m' />\n                </React.Fragment>\n            ))}\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Adding stickyHeader prop\nDESCRIPTION: This section describes the addition of the 'stickyHeader' prop. This prop is for fixing table headers during scrolling. It allows the headers to remain visible even when the user scrolls through the table content, thereby improving usability for tables with large datasets.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/table/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Rendering InputAutocomplete with Optional Chevron and Multiselect in React (JSX)\nDESCRIPTION: This snippet implements an InputAutocomplete UI component allowing users to select elements from a provided options list with optional chevron icon, support for multi-selection, and an adaptive modal for mobile devices. It handles dynamic option filtering, input change handling, and toggles UI features like chevron display and multi-mode selectors via UI switches. Dependencies include React, InputAutocomplete, BaseOption, Typography, Switch, Gap, and utilities like BREAKPOINT and isMobile(). Input is via keyboard or list selection, outputs selected values to the input or a comma-separated string for multi-select; it is limited to the given set of options and expects typical React functional component context.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/input-autocomplete/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nconst options = [\n    { key: 'Neptunium' },\n    { key: 'Plutonium' },\n    { key: 'Americium' },\n    { key: 'Curium' },\n    { key: 'Berkelium' },\n    { key: 'Californium' },\n    { key: 'Einsteinium' },\n    { key: 'Fermium' },\n    { key: 'Mendelevium' },\n    { key: 'Nobelium' },\n    { key: 'Lawrencium' },\n    { key: 'Rutherfordium' },\n    { key: 'Dubnium' },\n    { key: 'Seaborgium' },\n    { key: 'Bohrium' },\n];\n\nrender(() => {\n    const [shownChevron, setShownChevron] = React.useState(false);\n    const [multiple, setMultiple] = React.useState(false);\n    const [showInModal, setShowInModal] = React.useState(false);\n    const [value, setValue] = React.useState('');\n\n    const matchOption = (option, inputValue) =>\n        option.key.toLowerCase().includes((inputValue || '').toLowerCase());\n\n    const handleInput = (newValue) => setValue(newValue);\n\n    const handleChange = ({ selected, selectedMultiple }) => {\n        if (multiple) {\n            const value = selectedMultiple.length\n                ? selectedMultiple.map((option) => option.key).join(', ') + ', '\n                : '';\n            setValue(value);\n\n            return;\n        }\n\n        setValue(selected ? selected.key : '');\n    };\n\n    const inputValues = value.replace(/ /g, '').split(',');\n\n    const selectedOptions = options.filter((option) => inputValues.includes(option.key.trim()));\n\n    const selected = multiple\n        ? selectedOptions.map((option) => option.key)\n        : options.find((o) => o.key === inputValues[0]) || [];\n\n    const getFilteredOptions = () => {\n        if (multiple) {\n            return inputValues.length === selected.length\n                // отображаем весь список, если значения в поле ввода совпадают с выбранными значениями в списке\n                ? options\n                // отображаем только совпадения с новым введенным значением, включая уже выбранные элементы\n                : options.filter((option) => matchOption(option, inputValues[inputValues.length - 1]));\n        }\n\n        return options.some(({ key }) => key === value)\n            ? options\n            : options.filter((option) => matchOption(option, value));\n    };\n\n    return (\n        <div style={{ width: 320 }}>\n            <InputAutocomplete\n                breakpoint={BREAKPOINT}\n                size='m'\n                selected={selected}\n                block={true}\n                options={getFilteredOptions()}\n                label='Инпут с автокомплитом'\n                placeholder='Начните вводить название'\n                onChange={handleChange}\n                onInput={handleInput}\n                value={value}\n                Arrow={shownChevron ? Arrow : undefined}\n                multiple={multiple}\n                allowUnselect={true}\n                Option={BaseOption}\n                showEmptyOptionsList={true}\n                isBottomSheet={!showInModal}\n                inputProps={{\n                    onClear: () => setValue(''),\n                    clear: true,\n                }}\n                optionsListProps={{\n                    emptyPlaceholder: (\n                        <div style={{ display: 'flex', justifyContent: 'center' }}>\n                            <Typography.Text view='component-primary'>\n                                Ничего не нашлось\n                            </Typography.Text>\n                        </div>\n                    ),\n                }}\n            />\n            <Gap size='xl' />\n            <Switch\n                checked={shownChevron}\n                label='Шеврон'\n                onChange={() => setShownChevron((prevState) => !prevState)}\n            />\n            <Gap size='m' />\n            <Switch\n                checked={multiple}\n                label='Мультивыбор'\n                onChange={() => {\n                    setMultiple((prevState) => !prevState);\n                    setValue('');\n                }}\n            />\n            {isMobile() && (\n                <>\n                    <Gap size='m' />\n                    <Switch\n                        checked={showInModal}\n                        label='Открывать в модалке'\n                        onChange={() => setShowInModal((prevState) => !prevState)}\n                    />\n                </>\n            )}\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Search in SelectDesktop Component (React)\nDESCRIPTION: This React snippet demonstrates the use of the `SelectDesktop` component with search enabled using `showSearch=true`.  It renders a single selection and a multiple selection using `OPTIONS` data. It shows a grouped options example which sets `searchProps={{ filterGroup: true }}`. The component uses state variables for selected values and handles the selection changes. The output is the UI with the select components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/select/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst OPTIONS = [\n    { key: '1', content: 'Neptunium' },\n    { key: '2', content: 'Plutonium' },\n    { key: '3', content: 'Americium' },\n    { key: '4', content: 'Curium' },\n    { key: '5', content: 'Berkelium' },\n    { key: '6', content: 'Californium' },\n    { key: '7', content: 'Einsteinium' },\n    { key: '8', content: 'Fermium' },\n];\n\nconst GROUP_OPTIONS = [\n    {\n        label: 'nonmetals',\n        options: [\n            { key: '1', content: 'Argon' },\n            { key: '2', content: 'Helium' },\n        ],\n    },\n    {\n        label: 'metals',\n        options: [\n            { key: '3', content: 'Aurum' },\n            { key: '4', content: 'Platinum' },\n        ],\n    },\n];\n\nrender(() => {\n    const [selectedFirst, setSelectedFirst] = React.useState([]);\n    const [selectedSecond, setSelectedSecond] = React.useState([]);\n\n    return (\n        <div style={{ width: 320 }}>\n            <SelectDesktop\n                showSearch={true}\n                selected={selectedFirst}\n                size={56}\n                options={OPTIONS}\n                placeholder='Выберите элемент'\n                label='Одиночный выбор'\n                Option={BaseOption}\n                block={true}\n                onChange={({ selected }) => {\n                    setSelectedFirst(selected);\n                }}\n            />\n            <Gap size='m' />\n            <SelectDesktop\n                allowUnselect={true}\n                size={56}\n                placeholder='Выберите элементы'\n                label='Множественный выбор'\n                Option={BaseOption}\n                multiple={true}\n                block={true}\n                {...useSelectWithApply({\n                    showSearch: true,\n                    options: OPTIONS,\n                    selected: selectedSecond,\n                    onChange: ({ selectedMultiple }) => {\n                        setSelectedSecond(selectedMultiple.map((option) => option.key));\n                    },\n                })}\n            />\n            <Gap size='m' />\n            <SelectDesktop\n                allowUnselect={true}\n                size={56}\n                options={GROUP_OPTIONS}\n                placeholder='Выберите элемент'\n                label='Сгруппированный список'\n                Option={BaseOption}\n                block={true}\n                showSearch={true}\n                searchProps={{ filterGroup: true }}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering PureCell with Amount and Formatting Controls - React/JSX\nDESCRIPTION: Storybook example showcasing the `PureCell` component with an `PureCell.Amount` sub-component. Uses Storybook controls (`select`, `text`, `boolean`) to manage props affecting the display of an amount, including value, currency, minor units, weight, view style, color, and visibility, alongside general `PureCell` layout controls.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pure-cell/src/docs/Component.stories.mdx#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n{React.createElement(() => {\n        const verticalPadding = select(\n            'verticalPadding',\n            ['airy', 'default', 'compact', 'tiny', 'none'],\n            'default',\n        );\n        const verticalTopPadding = select(\n            'verticalPadding.top',\n            ['airy', 'default', 'compact', 'tiny', 'none', undefined],\n            undefined,\n        );\n        const verticalBottomPadding = select(\n            'verticalPadding.bottom',\n            ['airy', 'default', 'compact', 'tiny', 'none', undefined],\n            undefined,\n        );\n        const verticalPaddingPrepared = (verticalTopPadding || verticalBottomPadding) ? {top: verticalTopPadding, bottom: verticalBottomPadding } : verticalPadding\n\n        const horizontalPadding = select(\n            'horizontalPadding',\n            ['left', 'right', 'both', 'none'],\n            'none',\n        );\n        const direction = select('direction', ['vertical', 'horizontal'], 'horizontal');\n        const weight = select('weight', ['bold', 'normal'], 'normal');\n        const view = select('view', ['component', 'primary-small'], 'component');\n        const viewAmount = select('viewAmount', ['default', 'withZeroMinorPart'], 'default');\n        const color = select(\n            'color',\n            [\n                'tertiary',\n                'disabled',\n                'accent',\n                'primary',\n                'attention',\n                'positive',\n                'secondary',\n                'tertiary-inverted',\n                'primary-inverted',\n                'secondary-inverted',\n                'link',\n                'negative',\n            ],\n            'primary',\n        );\n        const value = text('value', '100000000');\n        const hidden = boolean('hidden', false);\n        return (\n            <PureCell\n                href={text('href', '')}\n                verticalPadding={verticalPaddingPrepared}\n                horizontalPadding={horizontalPadding}\n                direction={direction}\n            >\n                <PureCell.Content>\n                    <PureCell.Main>\n                        <PureCell.Text titleColor='secondary' view='primary-small'>\n                            Product Name ··0000\n                        </PureCell.Text>\n                        <PureCell.Amount\n                            hidden={hidden}\n                            view={viewAmount}\n                            value={value}\n                            minorUnits='100'\n                            currency='RUR'\n                            weight={weight}\n                            color={color}\n                        />\n                    </PureCell.Main>\n                    <PureCell.Footer>\n                        <Typography.Text color='secondary' view='primary-small'>\n                            Caption Secondary\n                        </Typography.Text>\n                        <PureCell.FooterButton>Action</PureCell.FooterButton>\n                    </PureCell.Footer>\n                </PureCell.Content>\n            </PureCell>\n        );\n    })}\n```\n\n----------------------------------------\n\nTITLE: Rendering masked TimeInput component with responsive styling in React JSX\nDESCRIPTION: This live JSX snippet demonstrates rendering of a TimeInput component with a masked input for time in HH:MM format. It is wrapped in a div that adjusts its width responsively based on the document body width, using full width for smaller screens and fixed width otherwise. The TimeInput receives props label, placeholder, size, and block to configure its appearance and behavior. This component depends on Alfafab's core TimeInput and inherits configuration from FormControl. The input accepts time values formatted as hours and minutes with input masking applied. The component is intended for interactive use in forms.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/time-input/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(\n    <div style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}>\n        <TimeInput label='\\u0412\\u0440\\u0435\\u043C\\u044F \\u0432\\u0438\\u0437\\u0438\\u0442\\u0430' placeholder='\\u0427\\u0427:\\u041C\\u041C' size='m' block={true} />\n    </div>,\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Drawer Anatomy with React Context (JavaScript/JSX)\nDESCRIPTION: This snippet demonstrates how to create a Drawer interface using React, splitting the UI into modular Header, Content, and Footer components. It uses React Hooks such as useContext and useEffect to communicate context (e.g., DrawerContext) for managing header/footer presence and DOM references. State is managed for toggle interaction, and styles are applied inline to illustrate component presentation. Dependencies include React, DrawerContext, and UI components like Button, Drawer, and Container; key inputs involve open/close state toggling, and outputs are rendered UI elements. The example assumes context and helper components are defined elsewhere and does not include accessibility or error boundary handling.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/drawer/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Header = () => {\n    const { setHasHeader } = React.useContext(DrawerContext);\n    React.useEffect(() => setHasHeader(true), [setHasHeader]);\n\n    const commonStyles = {\n        backgroundColor: 'rgba(55, 120, 251, 0.1)',\n        border: '1px dashed rgb(55, 120, 251)',\n        boxSizing: 'border-box',\n        borderRadius: '8px',\n        height: '48px',\n    };\n\n    const addonsStyles = {\n        ...commonStyles,\n        width: '48px',\n    };\n\n    const innerAddonsStyles = {\n        ...addonsStyles,\n        backgroundColor: 'rgba(207, 112, 255, 0.1)',\n    };\n\n    const bottomAddonsStyles = {\n        ...commonStyles,\n        width: '100%',\n    };\n\n    const wrapperStyles = {\n        display: 'flex',\n        justifyContent: 'center',\n    };\n\n    const titleStyles = {\n        ...commonStyles,\n        flexGrow: 1,\n    };\n\n    return (\n        <div style={{ margin: 'var(--modal-s-header-paddings)' }}>\n            <div style={wrapperStyles}>\n                <div style={innerAddonsStyles} />\n                <div style={addonsStyles} />\n                <div style={titleStyles} />\n                <div style={addonsStyles} />\n                <div style={innerAddonsStyles} />\n            </div>\n            <div style={bottomAddonsStyles} />\n        </div>\n    );\n};\n\nfunction Content() {\n    const { contentRef } = React.useContext(DrawerContext);\n    const styleContent = {\n        height: '100%',\n        borderRadius: '8px',\n        backgroundColor: 'rgba(55, 120, 251, 0.1)',\n        border: '1px dashed rgb(55, 120, 251)',\n        boxSizing: 'border-box',\n        margin: '0 40px',\n    };\n\n    return (\n        <div style={styleContent} ref={contentRef}></div>\n    );\n}\n\nfunction Footer() {\n    const { setHasFooter } = React.useContext(DrawerContext);\n    React.useEffect(() => setHasFooter(true), [setHasFooter]);\n\n    const styleFooter = {\n        minHeight: '48px',\n        borderRadius: '8px',\n        backgroundColor: 'rgba(55, 120, 251, 0.1)',\n        border: '1px dashed rgb(55, 120, 251)',\n        boxSizing: 'border-box',\n        margin: 'var(--modal-s-footer-paddings)',\n    };\n    return (\n        <div style={styleFooter}></div>\n    );\n}\n\nrender(() => {\n    const [modalAnatomy, setModalAnatomy] = React.useState(false);\n    const handleModalAnatomy = () => setModalAnatomy(!modalAnatomy);\n\n    return (\n        <Container>\n            <Button type='button' size='s' onClick={handleModalAnatomy}>\n                Показать анатомию\n            </Button>\n            <Drawer open={modalAnatomy} onClose={handleModalAnatomy} size='m'>\n                <Header />\n                <Content />\n                <Footer />\n            </Drawer>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Button with Addons\nDESCRIPTION: This snippet showcases button customization using `leftAddons` and `rightAddons` slots to add icons. It also demonstrates the use of the `hint` property and controls for toggling the label, hint, and addons.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/button/src/docs/description.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [label, setLabel] = React.useState(true);\n    const [hint, setHint] = React.useState();\n    const [leftAddons, setLeftAddons] = React.useState(false);\n    const [rightAddons, setRightAddons] = React.useState(false);\n\n    const handleLabelChange = () => setLabel(!label);\n    const handleHintChange = () => setHint((p) => (p ? undefined : 'Hint'));\n    const handleLeftAddonsChange = () => setLeftAddons(!leftAddons);\n    const handleRightAddonsChange = () => setRightAddons(!rightAddons);\n\n    return (\n        <div>\n            <Button\n                breakpoint={BREAKPOINT}\n                leftAddons={leftAddons && <StarMIcon />}\n                rightAddons={rightAddons && <StarMIcon />}\n                hint={hint}\n                view='primary'\n                block={isMobile()}\n            >\n                {label && 'Label'}\n            </Button>\n\n            <Gap size='xl' />\n\n            <Switch label='Label' checked={label} onChange={handleLabelChange} />\n            <Gap size='m' />\n            <Switch label='Hint' checked={hint} onChange={handleHintChange} />\n            <Gap size='m' />\n            <Switch label='LeftAddons' checked={leftAddons} onChange={handleLeftAddonsChange} />\n            <Gap size='m' />\n            <Switch label='RightAddons' checked={rightAddons} onChange={handleRightAddonsChange} />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Component with Configurable Properties in React\nDESCRIPTION: An interactive demonstration of the Radio component showing how it can be configured with various properties like size, disabled state, label, hint, alignment, and color theme. The component maintains its own checked state and can be controlled via knobs in Storybook.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/radio/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nReact.createElement(() => {\n        const [checked, setChecked] = React.useState(false);\n        const handleChange = () => setChecked(!checked);\n        const size = select('size', [20, 24], 20);\n        const disabled = boolean('disabled', false);\n        const inactive = boolean('inactive', false);\n        const checkedKnob = boolean('checked', false);\n        const block = boolean('block', false);\n        const label = text('label', 'Text label');\n        const hint = text('hint', 'Hint');\n        const align = select('align', ['start', 'center'], 'start');\n        const addons = text('addons');\n        const colors = select('colors', ['default', 'inverted'], 'default');\n        return (\n            <div\n                style={{\n                    backgroundColor:\n                        colors === 'inverted'\n                            ? 'var(--color-light-base-bg-primary-inverted)'\n                            : 'transparent',\n                    padding: '8px',\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    right: 0,\n                    bottom: 0,\n                }}\n            >\n                <Radio\n                    disabled={disabled}\n                    inactive={inactive}\n                    addons={addons}\n                    block={block}\n                    size={size}\n                    align={align}\n                    onChange={handleChange}\n                    checked={checked || checkedKnob}\n                    hint={hint}\n                    label={label}\n                    colors={colors}\n                />\n            </div>\n        );\n    })\n```\n\n----------------------------------------\n\nTITLE: Rendering Radio Components with Sizes in React\nDESCRIPTION: This snippet renders multiple Radio components with different sizes (24px and 20px) and states.  It utilizes React state to manage the selected radio options, disabled state, and a switch for a hint.  The `handleChange` function updates the selected option based on user interaction.  The output is a rendered display of various radio buttons demonstrating different states and sizes.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/radio/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [selectedOptions, setSelectedOptions] = React.useState({\n        group_1: 'checkbox24_1',\n        group_2: 'checkbox20_1',\n    });\n    const [switchChecked, setSwitchChecked] = React.useState(true);\n    const [disabled, setDisabled] = React.useState(false);\n\n    const handleChange = (group, name) => () => {\n        setSelectedOptions((prevOptions) => ({\n            ...prevOptions,\n            [group]: name,\n        }));\n    };\n\n    return (\n        <React.Fragment>\n            <div\n                style={{\n                    width: document.body.clientWidth < 450 ? '100%' : 320,\n                }}\n            >\n                <div style={{ minHeight: '46px' }}>\n                    <Radio\n                        size={24}\n                        onChange={handleChange('group_1', 'checkbox24_1')}\n                        checked={selectedOptions.group_1 === 'checkbox24_1'}\n                        label='Согласен с условиями'\n                        disabled={disabled}\n                        {...(switchChecked && { hint: 'И внимательно их прочитал' })}\n                        block={true}\n                    />\n                </div>\n\n                <Gap size='20' />\n                <div style={{ minHeight: '46px' }}>\n                    <Radio\n                        size={24}\n                        onChange={handleChange('group_1', 'checkbox24_2')}\n                        checked={selectedOptions.group_1 === 'checkbox24_2'}\n                        label='Согласен с условиями'\n                        disabled={disabled}\n                        {...(switchChecked && { hint: 'И внимательно их прочитал' })}\n                        block={true}\n                    />\n                </div>\n\n                <Gap size='32' />\n                <div style={{ marginLeft: '8px' }}>\n                    <div style={{ minHeight: '42px' }}>\n                        <Radio\n                            size={20}\n                            onChange={handleChange('group_2', 'checkbox20_1')}\n                            checked={selectedOptions.group_2 === 'checkbox20_1'}\n                            label='Согласен с условиями'\n                            disabled={disabled}\n                            {...(switchChecked && { hint: 'И внимательно их прочитал' })}\n                            block={true}\n                        />\n                    </div>\n                    <Gap size='12' />\n                    <div style={{ minHeight: '42px' }}>\n                        <Radio\n                            size={20}\n                            onChange={handleChange('group_2', 'checkbox20_2')}\n                            checked={selectedOptions.group_2 === 'checkbox20_2'}\n                            label='Согласен с условиями'\n                            disabled={disabled}\n                            {...(switchChecked && { hint: 'И внимательно их прочитал' })}\n                            block={true}\n                        />\n                    </div>\n                </div>\n            </div>\n            <Gap size='32' />\n            <Divider />\n            <Gap size='20' />\n            <Switch\n                block={true}\n                checked={switchChecked}\n                label='Подпись под лейблом'\n                onChange={() => setSwitchChecked((prevState) => !prevState)}\n            />\n            <Gap size='20' />\n            <Switch\n                block={true}\n                checked={disabled}\n                label='Заблокирован'\n                onClick={() => setDisabled((prevState) => !prevState)}\n            />\n        </React.Fragment>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Stack Component in React JSX\nDESCRIPTION: This snippet imports the Stack component from the @alfalab/core-components/stack package for use in a React JSX project. It is a basic import statement that enables developers to utilize the Stack layout component within their React components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/stack/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stack } from '@alfalab/core-components/stack';\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload Item with Status Control and Theme Switch in React\nDESCRIPTION: This snippet defines a React component that renders a file upload UI with icon flexibility, status indicators, and switching between colored and default icons. It manages states for upload status, file title, selected icon type, and handles user actions for file selection, deletion, and theme switching. It also renders radio buttons to select file types and a toggle switch for icon styling.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/file-upload-item/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n```jsx live mobileHeight={500}\nrender(() => {\n    const radioButtons = [\n        { title: 'Нет файла', extension: 'Нет файла' },\n        { title: 'Пример.docx', extension: 'DocX' },\n        { title: 'Пример.pdf', extension: 'PDF' },\n        { title: 'Пример.xls', extension: 'XLS' },\n        { title: 'Пример.1c', extension: '1C' },\n        { title: 'Фото газеты.jpg', extension: 'Img' },\n        { title: 'Пример.fig', extension: 'Другой тип' },\n        { title: '2 файла', extension: 'Несколько файлов' },\n    ];\n\n    const [status, setStatus] = React.useState('INITIAL');\n    const [title, setTitle] = React.useState('Прикрепите файл');\n    const [checked, setChecked] = React.useState(0);\n    const [progressBar, setProgressBar] = React.useState(0);\n    const [switchChecked, setSwitchChecked] = React.useState(false);\n\n    const handleChange = (index) => () => {\n        setChecked(index);\n        setProgressBar(0);\n        setTitle(radioButtons[index].title);\n        setStatus(index === 0 ? 'INITIAL' : 'UPLOADED');\n    };\n\n    const handleDelete = () => {\n        setChecked(0);\n        setTitle(radioButtons[0].title);\n        setStatus('INITIAL');\n    };\n\n    const handleSwitchChange = () => {\n        setSwitchChecked(prev => !prev)\n    }\n\n    const isImg = radioButtons[checked].extension === 'Img';\n\n    return (\n        <React.Fragment>\n            <div style={{ maxWidth: 360 }}>\n                <FileUploadItem\n                    title={title}\n                    subtitle='Нет файла'\n                    uploadStatus={status}\n                    size={2097152} // 2mb\n                    uploadDate={new Date().toLocaleDateString()}\n                    progressBar={progressBar}\n                    {...(checked !== 0 && { showDelete: true })}\n                    {...(isImg && { imageUrl: './images/gagarin_yu_a.png' })}\n                    {...(switchChecked && {iconStyle: 'colored'})}\n                    onDelete={handleDelete}\n                >\n                    <FileUploadItem.StatusControl />\n                    <FileUploadItem.Content />\n                    <FileUploadItem.Actions />\n                </FileUploadItem>\n            </div>\n            <Gap size={20} />\n            Контент\n            <Gap size={12} />\n            {radioButtons.map((button, index) => (\n                <React.Fragment key={button.title}>\n                    <Radio\n                        key={button.title}\n                        block={true}\n                        size={24}\n                        onChange={handleChange(index)}\n                        checked={checked === index}\n                        label={button.extension}\n                    />\n                    <Gap size={12} />\n                </React.Fragment>\n            ))}\n            <Gap size={20} />\n            <Divider />\n            <Gap size={20} />\n            <Switch\n                checked={switchChecked}\n                label='Цветные иконки'\n                onChange={handleSwitchChange}\n            />\n        </React.Fragment>\n    );\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Importing SelectWithTags Component Variants (JSX)\nDESCRIPTION: This snippet provides examples of how to import the responsive, desktop, and mobile-specific versions of the SelectWithTags component. Choosing the appropriate import path allows developers to select the variant best suited for their application's target platform or desired responsive behavior.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/select-with-tags/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Responsive\nimport { SelectWithTags } from '@alfalab/core-components/select-with-tags';\n\n// Desktop\nimport { SelectWithTagsDesktop } from '@alfalab/core-components/select-with-tags/desktop';\n\n// Mobile\nimport { SelectWithTagsMobile } from '@alfalab/core-components/select-with-tags/mobile';\n```\n\n----------------------------------------\n\nTITLE: Skeleton Loading for Calendar\nDESCRIPTION: This snippet implements a skeleton loading state for the Calendar component using `CalendarWithSkeleton`.  The visibility of the skeleton is toggled by a button click, simulating the loading process. It uses the `calendarVisible` prop to control the visibility of the actual calendar content.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar/src/docs/description.mdx#_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\nrender(() => {\n    const [value, setValue] = React.useState(() => new Date().setMonth(1));\n    const [visible, setVisible] = React.useState(true);\n\n    const calendarStyles = {\n        border: '1px solid rgba(233, 233, 235, 1)',\n        borderRadius: '8px',\n        boxSizing: 'border-box',\n        boxShadow: 'var(--shadow-m)',\n    };\n\n    return (\n        <>\n            <div style={{ width: '344px', ...calendarStyles }}>\n                <CalendarWithSkeleton\n                    value={value}\n                    onChange={setValue}\n                    calendarVisible={visible}\n                    selectorView='month-only'\n                    responsive={true}\n                    showCurrentYearSelector={true}\n                />\n            </div>\n            <div style={{ marginTop: '32px' }}></div>\n            <Button size='xs' onClick={() => setVisible(!visible)}>\n                Показать скелетон\n            </Button>\n        </>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Storybook Metadata Initialization for CardImage\nDESCRIPTION: This snippet imports necessary modules from '@storybook/addon-docs', and custom components, and imports stories for CardImage. The Meta component sets the metadata for the stories associated with the CardImage component.  It sets up the framework for documentation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/card-image/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta of={Stories} />\n```\n\n----------------------------------------\n\nTITLE: Import Attach Component (JSX)\nDESCRIPTION: Imports the Attach component from the '@alfalab/core-components/attach' module. This component is likely used for handling file attachments or uploads in a React application.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/attach/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Attach } from '@alfalab/core-components/attach';\n```\n\n----------------------------------------\n\nTITLE: Implementing Search in SelectMobile Component (React)\nDESCRIPTION: This React snippet illustrates the use of `SelectMobile` component with the `showSearch` prop and `searchProps` for group options searching. It renders multiple selections for the `OPTIONS` and `GROUP_OPTIONS`. The component uses `React.useState` for managing selected values and `onChange` for updating state upon selection.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/select/src/docs/description.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst OPTIONS = [\n    { key: '1', content: 'Neptunium' },\n    { key: '2', content: 'Plutonium' },\n    { key: '3', content: 'Americium' },\n    { key: '4', content: 'Curium' },\n    { key: '5', content: 'Berkelium' },\n    { key: '6', content: 'Californium' },\n    { key: '7', content: 'Einsteinium' },\n    { key: '8', content: 'Fermium' },\n];\n\nconst GROUP_OPTIONS = [\n    {\n        label: 'nonmetals',\n        options: [\n            { key: '1', content: 'Argon' },\n            { key: '2', content: 'Helium' },\n        ],\n    },\n    {\n        label: 'metals',\n        options: [\n            { key: '3', content: 'Aurum' },\n            { key: '4', content: 'Platinum' },\n        ],\n    },\n];\n\nrender(() => {\n    const [selected, setSelected] = React.useState([]);\n\n    return (\n        <div style={{ width: '100%' }}>\n            <SelectMobile\n                showSearch={true}\n                multiple={true}\n                allowUnselect={true}\n                options={OPTIONS}\n                placeholder='Выберите элементы'\n                label='Множественный выбор'\n                Option={BaseOption}\n                block={true}\n                selected={selected}\n                onChange={({ selectedMultiple }) => {\n                    setSelected(selectedMultiple.map((option) => option.key));\n                }}\n            />\n            <Gap size='m' />\n            <SelectMobile\n                allowUnselect={true}\n                size={56}\n                options={GROUP_OPTIONS}\n                placeholder='Выберите элемент'\n                label='Сгруппированный список'\n                Option={BaseOption}\n                block={true}\n                showSearch={true}\n                searchProps={{ filterGroup: true }}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Spinner Component Story with Dynamic Props in React JSX\nDESCRIPTION: This snippet defines a Storybook story named 'Spinner' for the Spinner component, using knobs to dynamically control properties such as size, line width, visibility, colors, and inline styles. It imports necessary Storybook decorators and uses React.createElement to render the Spinner inside a styled div that changes background color based on the color selection knob. The story enables interactive manipulation of the Spinner's appearance within Storybook.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/spinner/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { boolean, select, number, object } from '@storybook/addon-knobs';\nimport { Spinner } from '@alfalab/core-components-spinner';\n\n<Story name='Spinner'>\n    {React.createElement(() => {\n        const colors = select('colors', ['default', 'inverted'], 'default');\n        return (\n            <div\n                style={{\n                    backgroundColor:\n                        colors === 'inverted'\n                            ? 'var(--color-light-base-bg-primary-inverted)'\n                            : 'transparent',\n                    padding: '8px',\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    right: 0,\n                    bottom: 0,\n                }}\n            >\n                <Spinner\n                    size={number('size', 20)}\n                    lineWidth={number('lineWidth', 2)}\n                    visible={boolean('visible', true)}\n                    colors={colors}\n                    style={object('style', {})}\n                />\n            </div>\n        );\n    })}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storybook Documentation for ActionButton Component\nDESCRIPTION: This code sets up the Storybook documentation page for the ActionButton component. It imports required Storybook addons, component stories, and markdown documentation files, then structures them into a complete documentation page with ComponentHeader and Tabs.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/action-button/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta of={Stories} />\n\n<ComponentHeader\n    name='ActionButton'\n    children='Используется как триггер для выполнения определённого действия. Лейбл кнопки должен однозначно сообщать пользователю, что произойдёт после нажатия на неё.'\n/>\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Radio component\nDESCRIPTION: Defines a React radio button group component, allowing selection among multiple options. Uses React, with props for options, selected value, and change handlers. Facilitates form inputs requiring single choice selection.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_114\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-radio component implementation\n```\n\n----------------------------------------\n\nTITLE: Rendering Popover Component with Interactive Controls in Storybook - React/JavaScript\nDESCRIPTION: This snippet demonstrates how to render the Popover UI component inside a Storybook story using React. It leverages Storybook's knobs addon to interactively adjust Popover props, such as open state, position, offset, transition options, and arrow visibility. The code uses React state to handle button reference and open/close toggling, allows preview of custom wrapper styles via query parameters, and conditionally renders either a placeholder div or a Button as the Popover anchor. Dependencies include @alfalab/core-components-button, @alfalab/core-components-popover, @storybook/addon-knobs, and React. Inputs include user interactions and knob controls; outputs are live updates of the Popover's presentation. Key limitations include reliance on Storybook and the surrounding component context.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/popover/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Story, Markdown } from '@storybook/addon-docs';\nimport { boolean, select, number } from '@storybook/addon-knobs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\n\nimport { Button } from '@alfalab/core-components-button';\nimport { Popover } from '@alfalab/core-components-popover';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\nimport {\n    getQueryParam,\n    stylesStringToObj,\n} from '../../../screenshot-utils/screenshots-story/utils';\n\n<Meta title='Components/Popover' component={Popover} id='Popover' />\n\n{/* Canvas */}\n\n<Story name='Popover'>\n    {React.createElement(() => {\n        const POSITION_OPTIONS = [\n            'top',\n            'top-start',\n            'top-end',\n            'bottom',\n            'bottom-start',\n            'bottom-end',\n            'right',\n            'right-start',\n            'right-end',\n            'left',\n            'left-start',\n            'left-end',\n        ];\n        const [open, setOpen] = React.useState(false);\n        const [buttonElement, setButtonElement] = React.useState(null);\n        const toggle = () => {\n            setOpen(!open);\n        };\n        const handleRef = (node) => {\n            setButtonElement(node);\n        };\n        const transitionTimeout = number('transition.timeout (ms)', 150);\n        const previewStyles = stylesStringToObj(getQueryParam('wrapperStyles'));\n        const isPreview = Object.keys(previewStyles).length > 0;\n        return (\n            <div\n                style={\n                    isPreview\n                        ? previewStyles\n                        : {\n                              width: '100%',\n                              height: '300px',\n                              display: 'flex',\n                              justifyContent: 'center',\n                              alignItems: 'center',\n                          }\n                }\n            >\n                <style>{`.popover {border-radius: var(--border-radius-8)}  `}</style>\n                <Popover\n                    anchorElement={buttonElement}\n                    popperClassName='popover'\n                    useAnchorWidth={boolean('useAnchorWidth', false)}\n                    position={select('position', POSITION_OPTIONS, 'bottom')}\n                    open={open || boolean('open', false)}\n                    transition={{ timeout: transitionTimeout }}\n                    offset={[number('offset[0]', 0), number('offset[1]', 0)]}\n                    withArrow={boolean('withArrow', false)}\n                    withTransition={boolean('withTransition', true)}\n                >\n                    <div\n                        style={\n                            isPreview\n                                ? { width: 420, height: 380 }\n                                : { padding: '15px', width: '156px' }\n                        }\n                    >\n                        {isPreview ? '' : 'I am popover'}\n                    </div>\n                </Popover>\n                {isPreview ? (\n                    <div ref={handleRef} />\n                ) : (\n                    <Button ref={handleRef} onClick={toggle}>\n                        {open ? 'Скрыть' : 'Показать'} Popover\n                    </Button>\n                )}\n            </div>\n        );\n    })}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Picker Buttons for Mobile with React JSX\nDESCRIPTION: This snippet demonstrates rendering custom picker buttons optimized for mobile devices using React JSX syntax. It initializes options with and without icons, then renders two variants inside a space container: a standard and a compact version, styled similarly with linear-gradient backgrounds. Dependencies include React, 'CustomPickerButtonMobile' component, and icon components. It illustrates mobile-specific component usage, styling, and options configuration.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/custom-picker-button/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nconst options = [{ key: 'Car' }, { key: 'Star' }, { key: 'Flower' }, { key: 'Banknote' }];\n\nconst optionsWithIcons = [\n    { key: 'Car', icon: CarMIcon },\n    { key: 'Star', icon: StarMIcon },\n    { key: 'Flower', icon: FlowerMMIcon },\n    { key: 'Banknote', icon: BanknoteMIcon },\n];\n\nrender(\n    <Space direction='horizontal'>\n        <CustomPickerButtonMobile\n            backgroundColor='linear-gradient(264.15deg, #FF42CA 0%, #FF8A00 100%)'\n            options={optionsWithIcons}\n            label='Picker button'\n        />\n        <CustomPickerButtonMobile\n            backgroundColor='linear-gradient(264.15deg, #FF42CA 0%, #FF8A00 100%)'\n            options={options}\n            variant='compact'\n        />\n    </Space>,\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Variants (Mobile)\nDESCRIPTION: This snippet renders button variants for mobile using `ButtonMobile` component with `block` property to occupy full width. Includes logic to toggle disabled state using `Switch` component. It uses `Gap` components for spacing.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/button/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [disabled, setDisabled] = React.useState(false);\n\n    return (\n        <>\n            <ButtonMobile block={true} disabled={disabled} view='accent'>\n                Accent\n            </ButtonMobile>\n            <Gap size='l' />\n            <ButtonMobile block={true} disabled={disabled} view='primary'>\n                Primary\n            </ButtonMobile>\n            <Gap size='l' />\n            <ButtonMobile block={true} disabled={disabled} view='secondary'>\n                Secondary\n            </ButtonMobile>\n            <Gap size='l' />\n            <ButtonMobile block={true} disabled={disabled} view='outlined'>\n                Outlined\n            </ButtonMobile>\n            <Gap size='l' />\n            <ButtonMobile block={true} disabled={disabled} view='transparent'>\n                Transparent\n            </ButtonMobile>\n            <Gap size='l' />\n            <ButtonMobile block={true} disabled={disabled} view='text'>\n                Text\n            </ButtonMobile>\n            <Gap size='xl' />\n            <Switch\n                checked={disabled}\n                onChange={() => setDisabled((prevState) => !prevState)}\n                label='Недоступна'\n            />\n        </>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Status Badges in React\nDESCRIPTION: This JSX snippet renders a collection of `StatusBadge` components within a `div`. It iterates through an array of views and an array of sizes, generating a `StatusBadge` for each combination. The `StatusBadge` components take `view` and `size` props as inputs, which determines the icon and size respectively.  It leverages `React.Fragment`, `Space`, and `Gap` components for layout and spacing. The output is a display of status badges with varying icons and sizes on a responsive layout.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/status-badge/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n    {[\n        'negative-cross',\n        'negative-block',\n        'negative-alert',\n        'attention-alert',\n        'positive-checkmark',\n        'neutral-information',\n        'neutral-cross',\n        'neutral-operation',\n    ].map((view) => (\n        <React.Fragment key={view}>\n            <Space size={20} align='center' direction={isMobile() ? 'horizontal' : 'vertical'}>\n                {[40, 32, 24, 20, 16].map((size) => (\n                    <StatusBadge key={size} view={view} size={size} />\n                ))}\n            </Space>\n            <Gap size='l' direction={isMobile() ? 'vertical' : 'horizontal'} />\n        </React.Fragment>\n    ))}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing Input Components with Left and Right Addons in React (JSX)\nDESCRIPTION: Displays how to attach leftAddons and rightAddons to FormControl for better customization. Each addon slot can contain up to two elements, commonly IconButton components. Style objects are used for visual consistency and spacing. Can be extended with custom components. Prerequisites: FormControl, IconButton, DiamondsMIcon, Gap, isMobile, BREAKPOINT, and React. Inputs: addon components; Outputs: Form inputs with customizable content to the left and right.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/form-control/src/docs/description.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const styleWrapperIcons = {\n        height: '100%',\n        display: 'flex',\n        gap: 4,\n    };\n\n    return (\n        <div style={{ width: 320 }}>\n            <FormControl\n                block={true}\n                label='Label'\n                labelView={isMobile() ? 'outer' : 'inner'}\n                size={isMobile() ? 's' : 'm'}\n                breakpoint={BREAKPOINT}\n                leftAddons={\n                    <IconButton\n                        view='secondary'\n                        icon={DiamondsMIcon}\n                        size='xs'\n                        alignIcon='left'\n                    />\n                }\n            />\n            <Gap size='l' />\n            <FormControl\n                block={true}\n                label='Label'\n                labelView={isMobile() ? 'outer' : 'inner'}\n                size={isMobile() ? 's' : 'm'}\n                breakpoint={BREAKPOINT}\n                rightAddons={\n                    <IconButton\n                        view='secondary'\n                        icon={DiamondsMIcon}\n                        size='xs'\n                        alignIcon='right'\n                    />\n                }\n            />\n            <Gap size='l' />\n            <FormControl\n                block={true}\n                label='Label'\n                labelView={isMobile() ? 'outer' : 'inner'}\n                size={isMobile() ? 's' : 'm'}\n                breakpoint={BREAKPOINT}\n                leftAddons={\n                    <div style={{...styleWrapperIcons, marginLeft: 'var(--gap-8-neg)' }}>\n                        <IconButton\n                            view='secondary'\n                            icon={DiamondsMIcon}\n                            size='xs'\n                            alignIcon='right'\n                        />\n                        <IconButton\n                            view='secondary'\n                            icon={DiamondsMIcon}\n                            size='xs'\n                            alignIcon='left'\n                        />\n                    </div>\n                }\n                rightAddons={\n                    <div style={{...styleWrapperIcons, marginRight: 'var(--gap-8-neg)' }}>\n                        <IconButton\n                            view='secondary'\n                            icon={DiamondsMIcon}\n                            size='xs'\n                            alignIcon='right'\n                        />\n                        <IconButton\n                            view='secondary'\n                            icon={DiamondsMIcon}\n                            size='xs'\n                            alignIcon='left'\n                        />\n                    </div>\n                }\n            />\n        </div>\n    );\n});\n\n```\n\n----------------------------------------\n\nTITLE: Displaying the PickerButtonDesktop Component in Storybook (JSX)\nDESCRIPTION: Defines a Storybook story named 'PickerButtonDesktop' showcasing the desktop-specific PickerButton component (PickerButtonDesktop). It employs knobs for interactive control over its properties ('options', 'label', 'size', 'view', 'variant', 'disabled', 'loading', 'leftAddons', 'showArrow'), mirroring the configuration options of the other PickerButton variants.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/picker-button/src/docs/Component.stories.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Story name='PickerButtonDesktop'>\n    <PickerButtonDesktop\n        options={options}\n        label={text('label', 'Действие')}\n        size={select('size', [32 , 40 , 48 , 56 , 64 , 72], 56)}\n        view={select(\n            'view',\n            ['link', 'filled', 'primary', 'secondary', 'outlined', 'ghost', 'accent'],\n            'secondary',\n        )}\n        variant={select('variant', ['default', 'compact'])}\n        disabled={boolean('disabled', false)}\n        loading={boolean('loading', false)}\n        leftAddons={boolean('Иконка слева', false) ? <StarMIcon /> : null}\n        showArrow={boolean('Показывать стрелку', true)}\n    />\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Fixing Imports in Stories using JavaScript\nDESCRIPTION: This commit addresses an issue with incorrect imports within the stories for the @alfalab/core-components-input-autocomplete package. It ensures that the stories are importing the necessary components correctly, resolving potential errors and improving the overall usability of the component's documentation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/input-autocomplete/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nИсправить импорты в сторях. ([#998](https://github.com/core-ds/core-components/issues/998)) ([e6a654a](https://github.com/core-ds/core-components/commit/e6a654a0599451c7d149484cb61d8067eed083b7))\n```\n\n----------------------------------------\n\nTITLE: DataTestId Usage Example\nDESCRIPTION: This snippet shows how to use `dataTestId` with the Button component and how to import and use `getButtonTestIds` to get structured test IDs.  The function returns an object containing test IDs for the button and the spinner.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/button/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n{\n    button: dataTestId, \n    spinner: `${dataTestId}-loader`,\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Layout with Direction Toggle in React JSX\nDESCRIPTION: This snippet creates a flexible container allowing users to switch between vertical and horizontal layouts dynamically. It uses React's useState to track the current direction and passes corresponding props to flex containers that arrange child elements with configurable padding and spacing. The layout includes a styled placeholder box and a RadioGroup component for selecting the orientation, updating the state and rerendering accordingly. Dependencies include React and custom UI components like Container, Row, GenericWrapper, RadioGroup, and Radio. Inputs include the direction state controlled by user interaction, and output is the dynamically styled layout presentation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/generic-wrapper/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [direction, setDirection] = React.useState('horizontal');\n\n    const addon = (\n        <div\n            style={{\n                background: 'rgba(55, 120, 251, 0.1)',\n                border: '1px dashed #3778FB',\n                borderRadius: '8px',\n                height: '64px',\n                width: '64px',\n                boxSizing: 'border-box',\n            }}\n        />\n    );\n\n    return (\n        <Container>\n            <Row>\n                <div style={{ backgroundColor: 'rgba(55, 120, 251, 0.1)'}}>\n                    <GenericWrapper padding={{ top: 16, right: 16, bottom: 16, left: 16 }} gap={20} column={direction === 'vertical'}>\n                        <GenericWrapper>{addon}</GenericWrapper>\n                        <GenericWrapper>{addon}</GenericWrapper>\n                        <GenericWrapper>{addon}</GenericWrapper>\n                    </GenericWrapper>\n                </div>\n            </Row>\n            <div style={{ marginTop: '20px' }}>\n                <RadioGroup\n                    label='Направление'\n                    direction='vertical'\n                    name='radioGroupFirst'\n                    onChange={(_, { value }) => setDirection(value)}\n                    value={direction}\n                >\n                    <Radio label='Горизонтальное' value='horizontal' />\n                    <Radio label='Вертикальное' value='vertical' />\n                </RadioGroup>\n            </div>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Adding onCountryChange Handler\nDESCRIPTION: This modification adds an `onCountryChange` event handler to the `intl-phone-input` component. This allows the user to respond to changes in the selected country. The handler will allow users to execute code when a country is selected in the international phone input.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_102\n\n\n\n----------------------------------------\n\nTITLE: Using getNavigationBarTestIds Utility to Generate dataTestId in JSX\nDESCRIPTION: This snippet illustrates the expected return structure of the getNavigationBarTestIds function, which helps generate standardized dataTestId strings for elements within the NavigationBar component. This function facilitates element searching in tests by providing consistent test ID naming conventions. The input parameter is a base dataTestId string, and the output is an object with keys for navigationBar, title, and subtitle test IDs. It requires importing from '@alfalab/core-components/navigation-bar/shared'.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/navigation-bar/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    navigationBar: dataTestId, \n    title: `${dataTestId}-title`,\n    subtitle: `${dataTestId}-subtitle`,\n};\n```\n\n----------------------------------------\n\nTITLE: Adding missing updates to Select component\nDESCRIPTION: Updates the existing Select component to include missing features or bug fixes, possibly involving input handling and type definitions. Ensures the component functions as expected with various configurations.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_116\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-select updates implementation\n```\n\n----------------------------------------\n\nTITLE: Adding Text Component\nDESCRIPTION: This update introduces a new component called `Text`. The `Text` component likely provides styling and rendering functionalities for text content within the application. This change is reflected in the core-ds component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Controlling Text Wrapping\nDESCRIPTION: This snippet demonstrates using the `nowrap` property to prevent text from wrapping to a new line inside the button. The behavior is toggled using a Switch component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/button/src/docs/description.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [checked, setChecked] = React.useState(true);\n\n    const handleChange = () => setChecked(!checked);\n\n    return (\n        <Container>\n            <div style={{ display: 'flex', width: '180px' }}>\n                <ButtonDesktop view='primary' nowrap={checked}>\n                    Пример длинного текста\n                </ButtonDesktop>\n            </div>\n            <Row align='middle'>\n                <Switch\n                    label={<span>Запретить перенос строки</span>}\n                    checked={checked}\n                    onChange={handleChange}\n                />\n            </Row>\n        </Container>\n    );\n});\n```\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [checked, setChecked] = React.useState(true);\n\n    const handleChange = () => setChecked(!checked);\n\n    return (\n        <Container>\n            <div style={{ display: 'flex', width: '180px' }}>\n                <ButtonMobile view='primary' nowrap={checked}>\n                    Пример длинного текста\n                </ButtonMobile>\n            </div>\n            <Row align='middle'>\n                <Switch\n                    label={<span>Запретить перенос строки</span>}\n                    checked={checked}\n                    onChange={handleChange}\n                />\n            </Row>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Typography Atomic and Compound Components in React (JSX)\nDESCRIPTION: Demonstrates how to import atomic typography components (TitleDesktop, TitleMobile, TitleResponsive, Text) and compound components (Typography and its subcomponents) from the @alfalab/core-components/typography package for React projects. This snippet requires the @alfalab/core-components package to be installed and shows usage of ES module import syntax. It also includes how to import the typography CSS variables for styling.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/typography/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Атомарные импорты\nimport { TitleDesktop, TitleMobile, TitleResponsive, Text } from '@alfalab/core-components/typography';\n\n// Компаунд импорт\nimport { Typography } from '@alfalab/core-components/typography';\n\n@import '@alfalab/core-components/vars/typography.css';\n```\n\n----------------------------------------\n\nTITLE: Rendering PureCell Category Component in React JSX\nDESCRIPTION: This snippet defines a React story rendering a PureCell component configured for displaying categories. It allows dynamic selection of vertical and horizontal padding, graphic padding, and layout direction. The component incorporates a graphic element (Circle), main text, and a PureCell.Category subcomponent displaying a category name and percentage. Dependencies include React, PureCell, and selection controls for interactive parameter adjustment. Inputs include textual category info and padding options; output is a category-styled PureCell component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pure-cell/src/docs/Component.stories.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst verticalPadding = select(\n    'verticalPadding',\n    ['airy', 'default', 'compact', 'tiny', 'none'],\n    'default',\n);\nconst verticalTopPadding = select(\n    'verticalPadding.top',\n    ['airy', 'default', 'compact', 'tiny', 'none', undefined],\n    undefined,\n);\nconst verticalBottomPadding = select(\n    'verticalPadding.bottom',\n    ['airy', 'default', 'compact', 'tiny', 'none', undefined],\n    undefined,\n);\nconst verticalPaddingPrepared = (verticalTopPadding || verticalBottomPadding) ? {top: verticalTopPadding, bottom: verticalBottomPadding } : verticalPadding\n\nconst horizontalPadding = select(\n    'horizontalPadding',\n    ['left', 'right', 'both', 'none'],\n    'none',\n);\n\nconst graphicPadding = select(\n    'graphicPadding',\n    ['airy', 'default', 'compact', 'tiny', 'none', undefined],\n    undefined,\n);\n\nconst direction = select('direction', ['vertical', 'horizontal'], 'horizontal');\nconst categoryName = text('categoryName', 'Кафе, рестораны, столовые, бары');\nconst categoryPercent = text('categoryPercent', '10');\nreturn (\n    <PureCell\n        href={text('href', '')}\n        verticalPadding={verticalPaddingPrepared}\n        horizontalPadding={horizontalPadding}\n        direction={direction}\n    >\n        <PureCell.Graphics graphicPadding={graphicPadding}>\n            <Circle />\n        </PureCell.Graphics>\n        <PureCell.Content>\n            <PureCell.Main>\n                <PureCell.Text titleColor='primary' view='component-primary' rowLimit={1}>\n                    Яндекс Лавка\n                </PureCell.Text>\n                <PureCell.Category\n                    categoryName={categoryName}\n                    categoryPercent={categoryPercent}\n                />\n            </PureCell.Main>\n        </PureCell.Content>\n    </PureCell>\n);\n```\n\n----------------------------------------\n\nTITLE: getTextareaTestIds Function (JSX)\nDESCRIPTION: This code snippet shows the structure of the object returned by the `getTextareaTestIds` function, which is used for creating consistent dataTestId attributes for testing purposes. It provides specific selectors for the textarea, its wrapper, addons, error message, and hint.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/textarea/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    textarea: dataTestId,\n    inputWrapper: `${dataTestId}-form-control`,\n    inputWrapperInner: `${dataTestId}-form-control-inner`,\n    leftAddons: `${dataTestId}-form-control-left-addons`,\n    rightAddons: `${dataTestId}-form-control-right-addons`,\n    error: `${dataTestId}-form-control-error-message`,\n    hint: `${dataTestId}-form-control-hint`,\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering and Configuring a Customizable React Modal with Russian Compliance Content\nDESCRIPTION: This React component renders a modal with dynamic header, content, and footer sections, tailored for Russian banking law information. It accepts various props for layout customization, including header alignment, button presence, and content expansion controls. The component manages multiple internal state variables to toggle modal visibility, header configuration, and content details, providing a user-interactive interface. Dependencies include React, Typography components, Gap, Button, Collapse, and project-specific modal components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/universal-modal/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n            </div>\n            <UniversalModalDesktop\n                open={open}\n                width={modalWidth}\n                height={modalHeight}\n                horizontalAlign={horizontalAlign}\n                verticalAlign={verticalAlign}\n                margin={getMargin()}\n                onClose={() => setOpen(false)}\n            >\n                <UniversalModalDesktop.Header\n                    sticky={true}\n                    {...(headerType !== 'none' &&\n                        !headerButtonArrow && {\n                            align: 'left',\n                            title: 'Почему банк проверяет мои операции?',\n                            bigTitle: headerType === 'big',\n                        })}\n                    {...(headerButtonArrow && {\n                        hasBackButton: headerButtonArrow,\n                        onBack: () => setOpen(false),\n                        align: 'center',\n                        ...(headerType !== 'none' && {\n                            bottomAddons: 'Почему банк проверяет мои операции?',\n                            bigTitle: headerType === 'big',\n                        }),\n                    })}\n                    hasCloser={headerButtonCross}\n                />\n                <UniversalModalDesktop.Content>\n                    {contentTitle && (\n                        <React.Fragment>\n                            <Typography.Title view='medium' font='system'>\n                                Почему банк проверяет мои операции?\n                            </Typography.Title>\n                            <Gap size={16} />\n                        </React.Fragment>\n                    )}\n\n                    <Typography.Text tag='p'>\n                        В 2001 году в России начал действовать Федеральный закон №115 «О\n                        противодействии легализации доходов, полученных преступным путём, и\n                        финансированию терроризма». В рамках закона банки могут блокировать карты,\n                        отказывать в проведении сомнительных операций, ограничить доступ в\n                        интернет-банк или запрашивать документы, если по операции клиента возникли\n                        подозрения.\n                    </Typography.Text>\n                    <br />\n                    <Typography.Text tag='p'>\n                        Требования 115-ФЗ и связанных с ним документов Банка России часто меняются,\n                        предприниматели не всегда успевают за ними следить. Последствия нарушений\n                        «антиотмывочного» законодательства всегда неприятны: приходится остановить\n                        бизнес-процессы и доказать банку законность операций. Специалисты\n                        «Альфа-банка» собрали понятные рекомендации, как сэкономить время на\n                        объяснения и предотвратить блокировки\n                    </Typography.Text>\n\n                    <Collapse collapsedLabel='Подробнее' expandedLabel='Скрыть'>\n                        <Typography.Text tag='p'>\n                            115-ФЗ Касается всех предпринимателей, фирм и физлиц, а также тех, кто\n                            пользуется банковским счётом для бизнеса, крупных денежных переводов или\n                            личных расчетов. Ограничения интернет-банка, блокировка карт\n                            добросовестных компаний могут произойти из-за неправильно оформленных\n                            документов, ошибок в платёжке или попыток снизить налоги.\n                        </Typography.Text>\n                        <br />\n                        <Typography.Text tag='p'>\n                            Клиенты воспринимают ограничения как атаку со стороны банка, но чаще\n                            всего сами допускают ошибки или нарушения, которых можно избежать. Банки\n                            не преследуют цели доставить неудобства клиентам — они обязаны соблюдать\n                            законодательство и следовать инструкциям и рекомендациям ЦБ, а в\n                            противном случае рискуют лишиться лицензии.\n                        </Typography.Text>\n                        <br />\n                        <Typography.Text tag='p'>\n                            Обналичивание — сомнительные операции, когда юрлицо или предприниматель\n                            снимает со счёта более 80% от оборота или переводит деньги на счета\n                            физлиц, которые затем снимают в наличной форме.\n                        </Typography.Text>\n                        <br />\n                        <Typography.Text tag='p'>\n                            Вывод капитала за границу — это переводы нерезидентам по договорам об\n                            импорте работ/услуг и результатов интеллектуальной деятельности, по\n                            которым проведение расчётов осуществляется без одновременной уплаты НДС;\n                            по сделкам купли-продажи ценных бумаг, а также товаров, которые не\n                            пересекают границу России.\n                        </Typography.Text>\n                        <br />\n                        <Typography.Text tag='p'>\n                            Транзитные операции — операции, в процессе которых деньги поступают на\n                            счёт компании от других резидентов и списываются в короткие сроки. При\n                            этом, как правило, в этих случаях по счёту нет начислений зарплат,\n                            уплаты налогов, и они не соответствуют заявленному компанией виду\n                            деятельности.\n                        </Typography.Text>\n                        <br />\n                        <Typography.Text tag='p'>\n                            Запрашивать могут любые документы и устанавливать разные сроки их\n                            предоставления — это зависит от службы контроля конкретного банка.\n                            Обычно банки запрашивают чеки, счета или договора с контрагентами. В\n                            некоторых случаях бывает достаточно устных объяснений. Для проверки\n                            информации и пересмотра уровня риска банк может пригласить клиента в\n                            банк для устного разъяснения или выехать по месту ведения бизнеса\n                            клиента.\n                        </Typography.Text>\n                    </Collapse>\n                    {contentButton && (\n                        <React.Fragment>\n                            <Gap size={16} />\n                            <Gap size={24} />\n                            <Button size={48} onClick={() => setOpen(false)}>\n                                Кнопка\n                            </Button>\n                        </React.Fragment>\n                    )}\n                </UniversalModalDesktop.Content>\n                {(mainFooterButton || additionalFooterButton) && (\n                    <UniversalModalDesktop.Footer\n                        sticky={true}\n                        layout={verticalFooterButtons ? 'column' : 'start'}\n                    >\n                        {mainFooterButton && (\n                            <Button\n                                size={getButtonSize()}\n                                view='primary'\n                                block={stretchFooterButtons}\n                                onClick={() => setOpen(false)}\n                            >\n                                Primary\n                            </Button>\n                        )}\n\n                        {additionalFooterButton && (\n                            <Button\n                                size={getButtonSize()}\n                                view='secondary'\n                                block={stretchFooterButtons}\n                                onClick={() => setOpen(false)}\n                            >\n                                Secondary\n                            </Button>\n                        )}\n                    </UniversalModalDesktop.Footer>\n                )}\n            </UniversalModalDesktop>\n        </React.Fragment>\n```\n\n----------------------------------------\n\nTITLE: Importing BottomSheet Component (JSX)\nDESCRIPTION: This snippet demonstrates how to import the BottomSheet component from the '@alfalab/core-components/bottom-sheet' module. This import statement allows you to use the BottomSheet component in your React application.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/bottom-sheet/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BottomSheet } from '@alfalab/core-components/bottom-sheet';\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Variants (Desktop)\nDESCRIPTION: This snippet renders various button variants (accent, primary, secondary, outlined, transparent, and text) using the `ButtonDesktop` component. It also includes a Switch component to toggle the disabled state of the buttons.  It shows usage of Space and Gap components for layout. The mobile version is omitted.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/button/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [disabled, setDisabled] = React.useState(false);\n\n    return (\n        <>\n            <Space direction='horizontal' align='center'>\n                <ButtonDesktop disabled={disabled} view='accent'>\n                    Accent\n                </ButtonDesktop>\n                <ButtonDesktop disabled={disabled} view='primary'>\n                    Primary\n                </ButtonDesktop>\n                <ButtonDesktop disabled={disabled} view='secondary'>\n                    Secondary\n                </ButtonDesktop>\n                <ButtonDesktop disabled={disabled} view='outlined'>\n                    Outlined\n                </ButtonDesktop>\n                <ButtonDesktop disabled={disabled} view='transparent'>\n                    Transparent\n                </ButtonDesktop>\n                <ButtonDesktop disabled={disabled} view='text'>\n                    Text\n                </ButtonDesktop>\n            </Space>\n\n            <Gap size='xl' />\n\n            <Switch\n                checked={disabled}\n                onChange={() => setDisabled((prevState) => !prevState)}\n                label='Недоступна'\n            />\n        </>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Variables for Theming in React\nDESCRIPTION: This code applies CSS variables to the application using the CssVars component, allowing for dynamic theming or custom style overrides based on the loaded variables. It ensures style consistency across the tab components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/src/docs/development.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<CssVars css={vars} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Margin-Adjustable Modal in React\nDESCRIPTION: This is the main React component that renders a button to show/hide a modal, along with controls to adjust the modal's margins. The component uses React's `useState` hook to manage the modal's open state and the margin values. The `updateMargin` function updates the margin state based on user selections.  It renders the modal, including its header, content and footer.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/universal-modal/src/docs/description.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [open, setOpen] = React.useState(false);\n\n    const [margin, setMargin] = React.useState({\n        top: 12,\n        right: 12,\n        bottom: 12,\n        left: 12,\n    });\n\n    const updateMargin = (value, key) => {\n        setMargin((prev) => {\n            return {\n                ...prev,\n                [key]: Number(value),\n            };\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <Button onClick={() => setOpen((prev) => !prev)}>Показать модалку</Button>\n            <Gap size={20} />\n            <Divider />\n            <Gap size={20} />\n            <div style={{ display: 'flex', flexDirection: 'column', width: 532 }}>\n                <div style={{ display: 'flex' }}>\n                    <div style={{ width: 260 }}>\n                        <SelectDesktop\n                            size={56}\n                            options={margins}\n                            selected={String(margin.left)}\n                            label='Левый'\n                            block={true}\n                            onChange={({ selected }) => updateMargin(selected.key, 'left')}\n                        />\n                    </div>\n                    <Gap size={12} direction={'horizontal'} />\n                    <div style={{ width: 260 }}>\n                        <SelectDesktop\n                            size={56}\n                            options={margins}\n                            selected={String(margin.right)}\n                            label='Правый'\n                            block={true}\n                            onChange={({ selected }) => updateMargin(selected.key, 'right')}\n                        />\n                    </div>\n                </div>\n                <Gap size={12} />\n                <div style={{ display: 'flex' }}>\n                    <div style={{ width: 260 }}>\n                        <SelectDesktop\n                            size={56}\n                            options={margins}\n                            selected={String(margin.top)}\n                            label='Верхний'\n                            block={true}\n                            onChange={({ selected }) => updateMargin(selected.key, 'top')}\n                        />\n                    </div>\n                    <Gap size={12} direction={'horizontal'} />\n                    <div style={{ width: 260 }}>\n                        <SelectDesktop\n                            size={56}\n                            options={margins}\n                            selected={String(margin.bottom)}\n                            label='Нижний'\n                            block={true}\n                            onChange={({ selected }) => updateMargin(selected.key, 'bottom')}\n                        />\n                    </div>\n                </div>\n            </div>\n            <UniversalModalDesktop\n                open={open}\n                width={'500'}\n                height={'fullHeight'}\n                horizontalAlign={'end'}\n                verticalAlign={'center'}\n                margin={margin}\n                onClose={() => setOpen(false)}\n            >\n                <UniversalModalDesktop.Header\n                    align='left'\n                    sticky={true}\n                    title='Почему банк проверяет мои операции?'\n                    hasCloser={true}\n                />\n                <UniversalModalDesktop.Content>\n                    <Typography.Text tag='p'>\n                        В 2001 году в России начал действовать Федеральный закон №115 «О\n                        противодействии легализации доходов, полученных преступным путём, и\n                        финансированию терроризма». В рамках закона банки могут блокировать карты,\n                        отказывать в проведении сомнительных операций, ограничить доступ в\n                        интернет-банк или запрашивать документы, если по операции клиента возникли\n                        подозрения.\n                    </Typography.Text>\n                    <br />\n                    <Typography.Text tag='p'>\n                        Требования 115-ФЗ и связанных с ним документов Банка России часто меняются,\n                        предприниматели не всегда успевают за ними следить. Последствия нарушений\n                        «антиотмывочного» законодательства всегда неприятны: приходится остановить\n                        бизнес-процессы и доказать банку законность операций. Специалисты\n                        «Альфа-банка» собрали понятные рекомендации, как сэкономить время на\n                        объяснения и предотвратить блокировки\n                    </Typography.Text>\n\n                    <Collapse collapsedLabel='Подробнее' expandedLabel='Скрыть'>\n                        <Typography.Text tag='p'>\n                            115-ФЗ Касается всех предпринимателей, фирм и физлиц, а также тех, кто\n                            пользуется банковским счётом для бизнеса, крупных денежных переводов или\n                            личных расчётов. Ограничения интернет-банка, блокировка карт\n                            добросовестных компаний могут произойти из-за неправильно оформленных\n                            документов, ошибок в платёжке или попыток снизить налоги.\n                        </Typography.Text>\n                        <br />\n                        <Typography.Text tag='p'>\n                            Клиенты воспринимают ограничения как атаку со стороны банка, но чаще\n                            всего сами допускают ошибки или нарушения, которых можно избежать. Банки\n                            не преследуют цели доставить неудобства клиентам — они обязаны соблюдать\n                            законодательство и следовать инструкциям и рекомендациям ЦБ, а в\n                            противном случае рискуют лишиться лицензии.\n                        </Typography.Text>\n                        <br />\n                        <Typography.Text tag='p'>\n                            Обналичивание — сомнительные операции, когда юрлицо или предприниматель\n                            снимает со счёта более 80% от оборота или переводит деньги на счета\n                            физлиц, которые затем снимают в наличной форме.\n                        </Typography.Text>\n                        <br />\n                        <Typography.Text tag='p'>\n                            Вывод капитала за границу — это переводы нерезидентам по договорам об\n                            импорте работ/услуг и результатов интеллектуальной деятельности, по\n                            которым проведение расчётов осуществляется без одновременной уплаты НДС;\n                            по сделкам купли-продажи ценных бумаг, а также товаров, которые не\n                            пересекают границу России.\n                        </Typography.Text>\n                        <br />\n                        <Typography.Text tag='p'>\n                            Транзитные операции — операции, в процессе которых деньги поступают на\n                            счёт компании от других резидентов и списываются в короткие сроки. При\n                            этом, как правило, в этих случаях по счёту нет начислений зарплат,\n                            уплаты налогов, и они не соответствуют заявленному компанией виду\n                            деятельности.\n                        </Typography.Text>\n                        <br />\n                        <Typography.Text tag='p'>\n                            Запрашивать могут любые документы и устанавливать разные сроки их\n                            предоставления — это зависит от службы контроля конкретного банка.\n                            Обычно банки запрашивают чеки, счета или договора с контрагентами. В\n                            некоторых случаях бывает достаточно устных объяснений. Для проверки\n                            информации и пересмотра уровня риска банк может пригласить клиента в\n                            банк для устного разъяснения или выехать по месту ведения бизнеса\n                            клиента.\n                        </Typography.Text>\n                    </Collapse>\n                </UniversalModalDesktop.Content>\n                <UniversalModalDesktop.Footer sticky={true} layout='start'>\n                    <Button size={48} view='primary' onClick={() => setOpen(false)}>\n                        Primary\n                    </Button>\n                    <Button size={48} view='secondary' onClick={() => setOpen(false)}>\n                        Secondary\n                    </Button>\n                </UniversalModalDesktop.Footer>\n            </UniversalModalDesktop>\n        </React.Fragment>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing BankCard Component in React JSX\nDESCRIPTION: This snippet shows how to import the BankCard React component from the @alfalab/core-components library to use it within a React application. It requires React and the @alfalab/core-components package to be installed in the project as dependencies. The snippet imports BankCard for rendering customized bank card UI elements.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/bank-card/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BankCard } from '@alfalab/core-components/bank-card';\n```\n\n----------------------------------------\n\nTITLE: Extending PickerButton Options Type\nDESCRIPTION: This update extends the options type for the picker-button component.  The change likely enhances the flexibility and functionality of the options that can be used with picker buttons.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Implementing Date Selection Calendar in React\nDESCRIPTION: Demonstrates how to create a date selection calendar with two different header configurations. The component allows switching between a month slider and month/year picker views and includes date formatting functionality.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [value, setValue] = React.useState();\n\n    const [firstRadioValue, setFirstRadioValue] = React.useState('single');\n\n    React.useEffect(() => {\n        setValue();\n    }, [firstRadioValue]);\n\n    const format = React.useCallback((timestamp) => {\n        if (!timestamp) return '';\n\n        return new Intl.DateTimeFormat('ru-RU', {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n        }).format(new Date(timestamp));\n    }, []);\n\n    const selectedDate = React.useMemo(() => {\n        return format(value);\n    }, [value]);\n\n    const onFirstRadioChange = React.useCallback((_, payload) => {\n        setFirstRadioValue(payload.value);\n    }, []);\n\n    const calendarStyles = {\n        border: '1px solid rgba(233, 233, 235, 1)',\n        borderRadius: '8px',\n        boxShadow: 'var(--shadow-m)',\n    };\n\n    return (\n        <div style={{ width: 344 }}>\n            <div style={calendarStyles}>\n                <CalendarDesktop\n                    value={value}\n                    responsive={true}\n                    onChange={setValue}\n                    selectorView={firstRadioValue === 'single' ? 'month-only' : 'full'}\n                    showCurrentYearSelector={true}\n                />\n            </div>\n            <p style={{ marginTop: 32, marginBottom: 32 }}>\n                Выбранная дата: {value && selectedDate}\n            </p>\n            <div>\n                <RadioGroup\n                    label='Контрол для выбора месяца и года'\n                    direction='vertical'\n                    name='radioGroup'\n                    onChange={onFirstRadioChange}\n                    value={firstRadioValue}\n                >\n                    <Radio size='m' label='Слайдер месяцев' value='single' />\n                    <Radio size='m' label='Пикеры месяца и года' value='multiple' />\n                </RadioGroup>\n            </div>\n        </div>\n    );\n});\n//MOBILE\nrender(() => {\n    const [open, setOpen] = React.useState(false);\n    const [value, setValue] = React.useState();\n\n    const [firstRadioValue, setFirstRadioValue] = React.useState('single');\n\n    React.useEffect(() => {\n        setValue();\n    }, [firstRadioValue]);\n\n    const format = React.useCallback((timestamp) => {\n        if (!timestamp) return '';\n\n        return new Intl.DateTimeFormat('ru-RU', {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n        }).format(new Date(timestamp));\n    }, []);\n\n    const selectedDate = React.useMemo(() => {\n        return format(value);\n    }, [value]);\n\n    const onFirstRadioChange = React.useCallback((_, payload) => {\n        setFirstRadioValue(payload.value);\n    }, []);\n\n    return (\n        <Container>\n            <Button block={true} onClick={() => setOpen(true)}>\n                Открыть календарь\n            </Button>\n            <CalendarMobile\n                value={value}\n                onChange={setValue}\n                selectorView={firstRadioValue === 'single' ? 'month-only' : 'full'}\n                yearsAmount={firstRadioValue === 'single' ? 0 : 20}\n                onClose={() => setOpen(false)}\n                open={open}\n            />\n            <div style={{ marginTop: '32px' }}>\n                <RadioGroup\n                    label='Контрол для выбора месяца и года'\n                    direction='vertical'\n                    name='radioGroup'\n                    onChange={onFirstRadioChange}\n                    value={firstRadioValue}\n                >\n                    <Radio size='m' label='Слайдер месяцев' value='single' />\n                    <Radio size='m' label='Пикеры месяца и года' value='multiple' />\n                </RadioGroup>\n            </div>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Using useMatchMedia Hook for Media Query Matching in React\nDESCRIPTION: This example demonstrates the usage of the `useMatchMedia` hook within a React component (using a live render function context). It takes a media query string as input (e.g., '(min-width: 600px)') and returns a boolean state (`matches`) indicating whether the current browser environment matches the query.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/mq/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const query = '(min-width: 600px)';\n    const [matches] = useMatchMedia(query);\n\n    return `Matches ${query}: ${matches}`;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Line Chart with Area and Brush Navigation in JSX\nDESCRIPTION: This example demonstrates a line chart with an area series and date-based x-axis. It includes configuration for time formatting, tooltips, brush control for navigation, and gradient styling. The chart compares current and previous period data with different line styles.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/chart/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const formatXAxis = (time) => format(time, 'dd LLL');\n    const cartesianGrid = {\n        stroke: 'var(--color-light-neutral-400)',\n        fill: 'var(--color-light-base-bg-primary)',\n    };\n    const composeChart = {\n        barSize: 24,\n    };\n    const xAxis = {\n        axisLine: false,\n        type: 'category',\n        interval: 'preserveStartEnd',\n        minTickGap: 20,\n        tickLine: false,\n        dataKey: 'label',\n        tickFormatter: formatXAxis,\n        tickType: 'point',\n    };\n    const yAxis = {\n        axisLine: false,\n        type: 'number',\n        tickCount: 6,\n        interval: 'preserveStartEnd',\n        tickLine: false,\n        tickSize: 6,\n    };\n    const legend = {\n        verticalAlign: 'top',\n        marginTop: 15,\n        iconHeight: 20,\n    };\n    const tooltip = {\n        separator: ' ',\n        offset: 20,\n        filterNull: true,\n        cursor: {\n            stroke: 'var(--color-light-neutral-400)',\n            strokeWidth: 1,\n        },\n        isAnimationActive: true,\n        animationBegin: 0,\n        animationDuration: 500,\n        animationEasing: 'ease',\n        arrow: true,\n        labelFormatter: formatXAxis,\n    };\n    const brush = {\n        dataKey: 'label',\n        travellerWidth: 20,\n        brushMargin: 10,\n        height: 20,\n        stroke: 'var(--color-static-status-blue)',\n        alwaysShowText: true,\n        tickFormatter: formatXAxis,\n    };\n\n    const chartData = (num, includeValue) => {\n        const labels = Array(20).fill(null).map((_, idx) => {\n            const date = new Date('2020-12-18');\n            date.setDate(date.getDate() + idx);\n            return date.getTime();\n        });\n\n        if (includeValue) {\n            return labels.map((label, idx) => ({\n            label: idx === 0 ? label : labels[idx - 1],\n            value: idx === 0 ? 15 : Math.floor(Math.random() * num) + 10\n            }));\n        } else {\n            return labels;\n        }\n    };\n\n    const lineChart = {\n        chart: 'line',\n        icon: 'strokeCircle',\n        properties: {\n            name: 'текущий период',\n            dataKey: 'b',\n            stroke: 'var(--color-static-status-blue)',\n            dot: true,\n            dotSettings: {\n                scale: 1.5,\n                initScale: 0,\n                width: 18,\n                height: 18,\n            },\n            inheritStroke: true,\n            type: 'monotone',\n            strokeWidth: 2,\n            strokeDasharray: '10 10',\n        },\n        data: chartData(30, true)\n    };\n    const areaChart = {\n        chart: 'area',\n        icon: 'filledCircle',\n        offset: 0.1,\n        gradient: {\n            gid: 'ar-grad',\n            points: [\n                {\n                    offset: 0,\n                    stopColor: 'rgba(0, 112, 224, 0.2)',\n                    stopOpacity: 1,\n                },\n                {\n                    offset: 95,\n                    stopColor: 'rgba(0, 128, 255, 0)',\n                    stopOpacity: 1,\n                },\n            ],\n        },\n        properties: {\n            name: 'предыдущий период',\n            dataKey: 'a',\n            type: 'monotone',\n            stroke: 'var(--color-static-status-blue)',\n            dotSettings: {\n                scale: 1.5,\n                initScale: 0,\n                width: 18,\n                height: 18,\n            },\n            dot: true,\n            strokeWidth: 2,\n        },\n        data: chartData(50, true)\n    };\n    \n    return (\n        <div style={{ display: 'flex' }}>\n            <div style={{ width: '600px', height: '400px' }}>\n                    <Chart\n                        id={'line-chart'}\n                        composeChart={composeChart}\n                        cartesianGrid={cartesianGrid}\n                        xAxis={xAxis}\n                        yAxis={yAxis}\n                        tooltip={tooltip}\n                        legend={legend}\n                        brush={brush}\n                        labels={chartData(30, false)}\n                        series={[lineChart, areaChart]}\n                    />\n            </div>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering SegmentedControl with String and Component Titles in React (JSX)\nDESCRIPTION: Illustrates SegmentedControl usage with segments that display either string labels or React component icons as titles. This demonstrates component flexibility in handling different content types for segment titles. Requires React, SegmentedControl, Segment, Space, and a custom AScoresCircleMIcon React component. State management with React.useState and onChange handlers allow dynamic tab selection. Outputs include control variations with both plain text and custom React component icons.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/segmented-control/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [selectedId, setSelectedId] = React.useState({\n        '1': 1,\n        '2': 1,\n    });\n    const handleChange = (pos, id) => setSelectedId({ ...selectedId, [pos]: id });\n    return (\n        <div style={{ width: 360 }}>\n        <Space fullWidth size={24}>\n            <SegmentedControl selectedId={selectedId[\"1\"]} onChange={(id) => handleChange('1', id)}>\n                <Segment id={1} title='Таб 1' />\n                <Segment id={2} title='Таб 2' />\n            </SegmentedControl>\n            <SegmentedControl selectedId={selectedId[\"2\"]} onChange={(id) => handleChange('2', id)}>\n                <Segment id={1} title={<AScoresCircleMIcon />} />\n                <Segment id={2} title={<AScoresCircleMIcon />} />\n            </SegmentedControl>\n        </Space>\n    </div>\n    )\n})\n//MOBILE\nrender(() => {\n    const [selectedId, setSelectedId] = React.useState({\n        '1': 1,\n        '2': 1,\n    });\n    const handleChange = (pos, id) => setSelectedId({ ...selectedId, [pos]: id });\n    return (\n        <Space fullWidth size={24}>\n            <SegmentedControl selectedId={selectedId[\"1\"]} onChange={(id) => handleChange('1', id)}>\n                <Segment id={1} title='Таб 1' />\n                <Segment id={2} title='Таб 2' />\n            </SegmentedControl>\n            <SegmentedControl selectedId={selectedId[\"2\"]} onChange={(id) => handleChange('2', id)}>\n                <Segment id={1} title={<AScoresCircleMIcon />} />\n                <Segment id={2} title={<AScoresCircleMIcon />} />\n            </SegmentedControl>\n        </Space>\n    )\n})\n```\n\n----------------------------------------\n\nTITLE: Importing CodeInput Components in React (JSX)\nDESCRIPTION: Shows how to import the responsive `CodeInput` component along with its specific `CodeInputMobile` and `CodeInputDesktop` variants from the `@alfalab/core-components` library. The index export provides the responsive version.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/code-input/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CodeInput } from '@alfalab/core-components/code-input';\nimport { CodeInputMobile } from '@alfalab/core-components/code-input/mobile';\nimport { CodeInputDesktop } from '@alfalab/core-components/code-input/desktop';\n```\n\n----------------------------------------\n\nTITLE: Displaying Indicator Views - Desktop\nDESCRIPTION: This code snippet demonstrates the usage of Indicator components with different `view` properties ('red', 'grey', and 'white') and utilizes a state variable to control the presence of a border. A `Switch` component allows the user to toggle the border. The layout uses a flex container to arrange the indicators horizontally. The component uses the Container, Indicator, Gap, and Switch components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/indicator/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\nconst [border, setBorder] = React.useState(false);\n\nconst styles = {\n    display: 'flex',\n    justifyContent: 'center',\n    gap: '20px',\n    width: 169,\n    padding: 20,\n    backgroundColor: 'var(--color-light-base-bg-secondary)',\n    borderRadius: '12px',\n    boxSizing: 'border-box',\n    alignItems: 'center',\n};\n    return (\n        <Container>\n\n            <div style={styles}>\n                <Indicator height={24} value={1} view='red' border={border} />\n                <Indicator height={24} value={99} view='red' border={border} />\n                <Indicator height={24} value={100} view='red' border={border} />\n            </div>\n            <Gap size='xs' />\n            <div style={styles}>\n                <Indicator height={24} value={1} view='grey' border={border} />\n                <Indicator height={24} value={99} view='grey' border={border} />\n                <Indicator height={24} value={100} view='grey' border={border} />\n            </div>\n            <Gap size='xs' />\n            <div style={styles}>\n                <Indicator height={24} value={1} view='white' border={border} />\n                <Indicator height={24} value={99} view='white' border={border} />\n                <Indicator height={24} value={100} view='white' border={border} />\n            </div>\n            <Gap size='xl' />\n            <Switch\n                block={true}\n                checked={border}\n                label='Обводка'\n                onChange={() => setBorder(!border)}\n            />\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Sizes (Desktop)\nDESCRIPTION: This snippet renders buttons with different sizes using the `ButtonDesktop` component. It uses predefined arrays for big and small sizes and a map for size values. The Space component is used for horizontal layout.  \nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/button/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst BIG_SIZES = ['xl', 'l', 'm'];\nconst SMALL_SIZES = ['s', 'xs', 'xxs'];\nconst SIZES_MAP = {\n    xl: 72,\n    l: 64,\n    m: 56,\n    s: 48,\n    xs: 40,\n    xxs: 32,\n};\n\nrender(\n    <>\n        <Space direction='horizontal' align='center'>\n            {BIG_SIZES.map((size) => (\n                <ButtonDesktop key={size} size={size} view='primary'>\n                    {`${size.toUpperCase()} (${SIZES_MAP[size]}px)`}\n                </ButtonDesktop>\n            ))}\n        </Space>\n        <Gap size='l' />\n        <Space direction='horizontal' align='center'>\n            {SMALL_SIZES.map((size) => (\n                <ButtonDesktop key={size} size={size} view='primary'>\n                    {`${size.toUpperCase()} (${SIZES_MAP[size]}px)`}\n                </ButtonDesktop>\n            ))}\n        </Space>\n    </>,\n);\n```\n\n----------------------------------------\n\nTITLE: Styling Variables with CSS Modules for ProgressBar\nDESCRIPTION: The code assigns CSS styles to a variable using a CSS loader with raw-loader, preparing the styles for applying CSS variables or inline styles in React components. This setup facilitates custom styling of the ProgressBar component via CSS variables.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/progress-bar/src/docs/development.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport styles from '!!raw-loader!../index.module.css';\n```\n\n----------------------------------------\n\nTITLE: Using getStepsTestIds Function in React\nDESCRIPTION: This snippet details the functionality of `getStepsTestIds`. It is imported from `@alfalab/core-components/steps/shared`. The function returns an object containing dataTestId strings which allows for easy element identification and testing within the Steps component. The output is a object of test id values.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/steps/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    steps: dataTestId,\n    step: `${dataTestId}-step`,\n};\n```\n\n----------------------------------------\n\nTITLE: Adding a new core component\nDESCRIPTION: Implementation of a React component that encapsulates a specific UI element, typically defining its structure, styling, and behavior. Dependencies may include React and related libraries, with key parameters controlling its appearance and interaction. This pattern is used for expanding the core component library with reusable UI elements.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_103\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-list component implementation\n```\n\n----------------------------------------\n\nTITLE: Importing CustomButton component from core-components library\nDESCRIPTION: This snippet demonstrates importing the CustomButton component from the '@alfalab/core-components/custom-button' package, essential for integrating the button into the project and utilizing its properties and styles.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/custom-button/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { CustomButton } from '@alfalab/core-components/custom-button';\n```\n\n----------------------------------------\n\nTITLE: Displaying Notification Component using React\nDESCRIPTION: This React snippet demonstrates rendering and controlling the visibility of a `Notification` component. It utilizes `useState` to manage the `visible` state and `useCallback` for optimized event handlers (`toggleVisibility`, `hideNotification`) that control the notification's display based on button clicks or internal component events (`onClose`, `onCloseTimeout`). Dependencies include React and the `Notification` and `Button` components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/notification/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [isVisible, setIsVisible] = React.useState(false);\n\n    const toggleVisibility = React.useCallback(() => setIsVisible((prev) => !prev), []);\n    const hideNotification = React.useCallback(() => setIsVisible(false), []);\n\n    return (\n        <div>\n            <Notification\n                badge='positive-checkmark'\n                title='Пример уведомления'\n                visible={isVisible}\n                offset={180}\n                onClose={hideNotification}\n                onCloseTimeout={hideNotification}\n            >\n                Описание уведомления\n            </Notification>\n            <Button onClick={toggleVisibility}>Показать уведомление</Button>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring BottomSheet Component Properties in React (JSX)\nDESCRIPTION: This snippet demonstrates configuring a `BottomSheet` component with various properties. It conditionally sets the `title`, `titleView`, `subtitle`, `stickyFooter`, `swipeable`, and `initialHeight` props based on external state variables (`headerViewSelected`, `footerSettings`, `mechanics`). An `actionButton` is dynamically rendered with primary and secondary `ButtonMobile` components, controlled by `showFooter` and `footerSettings`. The layout of buttons within the footer depends on `footerViewSelected`. It also shows conditional rendering of a title within the main content area using `Typography.Title` based on `headerSettings`.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/bottom-sheet/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n                    ].includes(headerViewSelected)\n                        ? 'compact'\n                        : undefined\n                }\n                subtitle={\n                    ['compactTitleWithSubtitle', 'compactTitleWithSubtitleAndCenterAlign'].includes(\n                        headerViewSelected,\n                    )\n                        ? 'Почему банк проверяет мои\\u00A0операции?'\n                        : undefined\n                }\n                stickyFooter={footerSettings.sticky}\n                swipeable={mechanics.swipeable}\n                initialHeight={mechanics.adaptive ? 'default' : 'full'}\n                actionButton={\n                    showFooter ? (\n                        <div\n                            style={{\n                                display: 'flex',\n                                flexDirection:\n                                    footerViewSelected === 'vertical' ? 'column-reverse' : 'row',\n                            }}\n                        >\n                            {footerSettings.hasSecondaryButton && (\n                                <ButtonMobile\n                                    view='secondary'\n                                    size='m'\n                                    onClick={handleClose}\n                                    block={true}\n                                >\n                                    Secondary\n                                </ButtonMobile>\n                            )}\n\n                            {footerSettings.hasPrimaryButton &&\n                            footerSettings.hasSecondaryButton ? (\n                                <Gap size='m' direction={footerViewSelected} />\n                            ) : null}\n\n                            {footerSettings.hasPrimaryButton && (\n                                <ButtonMobile\n                                    view='primary'\n                                    size='m'\n                                    onClick={handleClose}\n                                    block={true}\n                                >\n                                    Primary\n                                </ButtonMobile>\n                            )}\n                        </div>\n                    ) : undefined\n                }\n            >\n                {headerSettings.titleInContent ? (\n                    <>\n                        <Typography.Title view='xsmall' tag='div' font='system'>\n                            {`Почему банк проверяет мои\\u00A0операции?`}\n                        </Typography.Title>\n                        <Gap size='m' />\n                    </>\n                ) : undefined}\n\n                <Text onClose={handleClose} />\n            </BottomSheet>\n        </Container>\n```\n\n----------------------------------------\n\nTITLE: Single File Upload Implementation (React)\nDESCRIPTION: This snippet demonstrates the implementation of a single file upload using a React component. It handles file selection, displays upload progress (though this is simplified), shows/hides delete buttons, and displays file information. The component utilizes React hooks for state management and a ref for accessing the file input element.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/file-upload-item/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [status, setStatus] = React.useState('INITIAL');\n    const [title, setTitle] = React.useState('Прикрепите файл');\n    const [size, setSize] = React.useState(0);\n    const [imageUrl, setImageUrl] = React.useState(null);\n    const [isImage, setIsImage] = React.useState(false);\n    const [isShowDelete, setIsShowDelete] = React.useState(false);\n    const inputRef = React.useRef(null);\n\n    const handleFileChange = (e) => {\n        const file = e.target.files[0];\n        setStatus('SUCCESS');\n        setTitle(file.name);\n        setSize(file.size);\n        setImageUrl('');\n        setIsShowDelete(true);\n\n        // если тип фала image, добавляем картинку как иконку\n        if (file && file.type.includes('image')) {\n            setIsImage(true);\n            const reader = new FileReader();\n\n            reader.onloadend = () => {\n                setImageUrl(reader.result);\n            };\n\n            reader.readAsDataURL(file);\n        }\n    };\n\n    const handleDelete = () => {\n        setStatus('INITIAL');\n        setImageUrl('');\n        setTitle('Прикрепите файл');\n        setIsShowDelete(false);\n        inputRef.current.value = null;\n    };\n\n    return (\n        <React.Fragment>\n            <input\n                type='file'\n                id='file-upload-item-id'\n                onChange={handleFileChange}\n                style={{ display: 'none' }}\n                ref={inputRef}\n            />\n            <FileUploadItem\n                title={title}\n                subtitle='Нет файла'\n                uploadStatus={status}\n                uploadDate={new Date().toLocaleDateString()}\n                size={size}\n                showDelete={isShowDelete}\n                onDelete={handleDelete}\n                {...(isImage && { imageUrl })}\n            >\n                <label htmlFor='file-upload-item-id' style={{ display: 'flex', width: 320 }}>\n                    <FileUploadItem.StatusControl />\n                    <FileUploadItem.Content />\n                </label>\n                <FileUploadItem.Actions />\n            </FileUploadItem>\n        </React.Fragment>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Data Initialization for Account Options\nDESCRIPTION: Defines an array of account data objects each containing an amount and descriptive text representing different account types for rendering options in select components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/select/src/docs/description.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst DATA = [\n    {\n        amount: 3405116,\n        text: 'Зарплатный счёт',\n    },\n    {\n        amount: 600024,\n        text: 'Накопительный счёт',\n    },\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Story for Checkbox Component in React\nDESCRIPTION: This snippet defines a Storybook story named 'Checkbox' for the Checkbox React component. It uses React functional components and hooks to manage checkbox state, and Storybook's 'knobs' addon to allow interactive modification of props such as size, disabled status, label text, and colors. The story renders the Checkbox component within a styled div that adapts background color based on a color scheme selection. Dependencies include React, @storybook/addon-knobs for UI controls, and the Checkbox component from @alfalab/core-components-checkbox. Inputs are controlled via knobs, and output is the dynamically rendered interactive Checkbox UI.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/checkbox/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { text, boolean, select } from '@storybook/addon-knobs';\nimport { Checkbox } from '@alfalab/core-components-checkbox';\n\n<Story name='Checkbox'>\n    {React.createElement(() => {\n        const [checked, setChecked] = React.useState(false);\n        const handleChange = () => setChecked(!checked);\n        const size = select('size', [20, 24], 20);\n        const disabled = boolean('disabled', false);\n        const inactive = boolean('inactive', false);\n        const checkedKnob = boolean('checked', false);\n        const label = text('label', 'Согласен с условиями');\n        const indeterminate = boolean('indeterminate', false);\n        const hint = text('hint', 'Дополнительная информация');\n        const error = text('error', '');\n        const block = boolean('block', false);\n        const addons = text('addons');\n        const align = select('align', ['start', 'center']);\n        const colors = select('colors', ['default', 'inverted'], 'default');\n        return (\n            <div\n                style={{\n                    backgroundColor:\n                        colors === 'inverted'\n                            ? 'var(--color-light-base-bg-primary-inverted)'\n                            : 'transparent',\n                    padding: '8px',\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    right: 0,\n                    bottom: 0,\n                }}\n            >\n                <Checkbox\n                    disabled={disabled}\n                    inactive={inactive}\n                    size={size}\n                    block={block}\n                    addons={addons}\n                    align={align}\n                    onChange={handleChange}\n                    checked={checked || checkedKnob}\n                    label={label}\n                    indeterminate={indeterminate}\n                    hint={hint}\n                    error={error}\n                    colors={colors}\n                />\n            </div>\n        );\n    })}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Storybook Metadata and Component Header Setup in JavaScript\nDESCRIPTION: This snippet imports necessary Storybook add-ons, custom blocks, and story data, then sets up metadata and a header for the component documentation. It prepares the environment for displaying the component's documentation within Storybook.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/select/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta of={Stories} />\n\n<ComponentHeader name='Select' children='Поле ввода с выпадающим списком.' />\n```\n\n----------------------------------------\n\nTITLE: Configuring Label Placement in Input Components with React (JSX)\nDESCRIPTION: Illustrates different ways to display labels in Input components: inside the input, outside, or not shown. Uses the Input and Gap components with block rendering, placeholder, and size properties determined by device type via isMobile. The optional labelView prop controls label positioning. Requires Input, Gap, isMobile, and BREAKPOINT to be defined. Inputs: none directly; Outputs: UI showcasing label placement variations.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/form-control/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n    <div style={{ width: 320 }}>\n        <Input\n            block\n            placeholder='Placeholder'\n            label='Лейбл внутри'\n            size={isMobile() ? 's' : 'm'}\n            breakpoint={BREAKPOINT}\n        />\n        <Gap size='l' />\n        <Input\n            block\n            placeholder='Placeholder'\n            label='Лейбл снаружи'\n            size={isMobile() ? 's' : 'm'}\n            labelView='outer'\n            breakpoint={BREAKPOINT}\n        />\n        <Gap size='l' />\n        <Input\n            block\n            placeholder='Placeholder'\n            size={isMobile() ? 's' : 'm'}\n            breakpoint={BREAKPOINT}\n        />\n    </div>\n\n```\n\n----------------------------------------\n\nTITLE: Rendering CalendarRange Component in React\nDESCRIPTION: This snippet renders a `CalendarRange` component. It initializes state for `valueFrom` and `valueTo` representing the selected date range and uses functions from `date-fns` to set the minimum and maximum selectable dates. It displays selected values and dates and provides a `RadioGroup` for configuring the calendar's position.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-range/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// import { startOfDay, subMonths, addMonths, startOfMonth, startOfDay } from 'date-fns';\n// import { parseDateString } from '@alfalab/core-components/calendar-input';\n\nrender(() => {\n    const [calendarPosition, setCalendarPosition] = React.useState('static');\n\n    const defaultDate = parseDateString('10.03.2022');\n    const [valueFrom, setValueFrom] = React.useState({ value: '', date: null });\n    const [valueTo, setValueTo] = React.useState({ value: '', date: null });\n\n    const minDate = subMonths(startOfDay(defaultDate), 3).getTime();\n    const maxDate = addMonths(startOfDay(defaultDate), 3).getTime();\n\n    return (\n        <Space size={24}>\n            <CalendarRange\n                valueFrom={valueFrom.value}\n                valueTo={valueTo.value}\n                minDate={minDate}\n                maxDate={maxDate}\n                defaultMonth={startOfMonth(defaultDate)}\n                offDays={[startOfDay(defaultDate)]}\n                calendarPosition={calendarPosition}\n                onChange={({ valueFrom, valueTo, dateFrom, dateTo }) => {\n                    setValueFrom({ value: valueFrom, date: dateFrom });\n                    setValueTo({ value: valueTo, date: dateTo });\n                }}\n            />\n            <>\n                <Typography.Text view='primary-medium' color='secondary'>\n                    Values: {valueFrom.value} — {valueTo.value}\n                </Typography.Text>\n                <Gap size='m'/>\n                <Typography.Text view='primary-medium' color='secondary'>\n                    Dates: {valueFrom.date && formatDate(valueFrom.date)} — {valueTo.date && formatDate(valueTo.date)}\n                </Typography.Text>\n           </>   \n            <RadioGroup\n                label='Конфигурация пикера'\n                direction='vertical'\n                onChange={(_, { value }) => setCalendarPosition(value)}\n                value={calendarPosition}\n            >\n                <Radio label='Доступен сразу' value='static' />\n                <Radio label='Открывается в popover' value='popover' />\n            </RadioGroup>\n        </Space>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Hints Below FormControl Inputs in React (JSX)\nDESCRIPTION: Demonstrates use of the hint property in FormControl to display auxiliary text below an input field. Components used include FormControl inside a sized box, with responsive label placement and size selection. Dependencies include FormControl, isMobile, and BREAKPOINT. Inputs: props for label, hint, and size; Outputs: Form field with a hint below input.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/form-control/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n    <div style={{ width: 320 }}>\n        <FormControl\n            block={true}\n            label='Label'\n            hint='Hint'\n            labelView={isMobile() ? 'outer' : 'inner'}\n            size={isMobile() ? 's' : 'm'}\n            breakpoint={BREAKPOINT}\n        />\n    </div>\n\n```\n\n----------------------------------------\n\nTITLE: Upgrading Import Statements of @alfalab Core Components Pass Code v1 - JavaScript\nDESCRIPTION: Demonstrates how to update import statements when migrating to the new @alfalab/core-components-pass-code-v1 package. It shows example code blocks before and after the upgrade to maintain backward compatibility with previous component versions. This snippet requires a JavaScript environment that supports ES module imports.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pass-code-v1/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { PassCode } from '@alfalab/core-components/pass-code';\nimport { PatternLock } from '@alfalab/core-components/pattern-lock';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { PassCodeV1 } from '@alfalab/core-components/pass-code-v1';\nimport { PatternLockV1 } from '@alfalab/core-components-pattern-lock-v1';\n```\n\n----------------------------------------\n\nTITLE: Importing Modules for CalendarInput in Storybook\nDESCRIPTION: This snippet imports necessary modules for rendering the CalendarInput component within a Storybook story. It imports components, knobs for interactive control (text, select, boolean), and functions from external libraries. The imported modules enable the rendering, customization, and documentation of the CalendarInput component within the Storybook interface. Dependencies include @storybook/addon-docs, @storybook/addon-knobs, @alfalab/core-components-date-input, and @alfalab/core-components-calendar-input.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-input/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, Story, Markdown } from '@storybook/addon-docs';\nimport { text, select, boolean } from '@storybook/addon-knobs';\nimport { formatDate } from '@alfalab/core-components-date-input';\nimport { CalendarInput } from '@alfalab/core-components-calendar-input';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Rendering PureCell with Addon and Padding Controls - React/JSX\nDESCRIPTION: Storybook example demonstrating the `PureCell` component with an `PureCell.Addon` and various padding options (`vertical`, `horizontal`, `graphic`, `addon`). Uses Storybook controls (`select`, `text`) to allow interactive adjustment of component props like padding styles, direction, and `href` within the Storybook environment.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pure-cell/src/docs/Component.stories.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n{React.createElement(() => {\n        const verticalPadding = select(\n            'verticalPadding',\n            ['airy', 'default', 'compact', 'tiny', 'none'],\n            'default',\n        );\n        const verticalTopPadding = select(\n            'verticalPadding.top',\n            ['airy', 'default', 'compact', 'tiny', 'none', undefined],\n            undefined,\n        );\n        const verticalBottomPadding = select(\n            'verticalPadding.bottom',\n            ['airy', 'default', 'compact', 'tiny', 'none', undefined],\n            undefined,\n        );\n        const verticalPaddingPrepared = (verticalTopPadding || verticalBottomPadding) ? {top: verticalTopPadding, bottom: verticalBottomPadding } : verticalPadding\n\n        const horizontalPadding = select(\n            'horizontalPadding',\n            ['left', 'right', 'both', 'none'],\n            'none',\n        );\n        const graphicPadding = select(\n            'graphicPadding',\n            ['airy', 'default', 'compact', 'tiny', 'none', undefined],\n            undefined,\n        );\n        const addonPadding = select('addonPadding', ['default', 'none'], 'default');\n        const direction = select('direction', ['vertical', 'horizontal'], 'horizontal');\n        return (\n            <div\n                style={{\n                    width: '400px',\n                }}\n            >\n                <PureCell\n                    href={text('href', '')}\n                    verticalPadding={verticalPaddingPrepared}\n                    horizontalPadding={horizontalPadding}\n                    direction={direction}\n                >\n                    <PureCell.Graphics graphicPadding={graphicPadding}>\n                        <Circle />\n                    </PureCell.Graphics>\n                    <PureCell.Content>\n                        <PureCell.Main>\n                            <PureCell.Text titleColor='primary' view='component-primary'>\n                                Card Name\n                            </PureCell.Text>\n                            <PureCell.Text titleColor='secondary' view='primary-small'>\n                                Additional Info\n                            </PureCell.Text>\n                        </PureCell.Main>\n                        <PureCell.Addon verticalAlign='center' addonPadding={addonPadding}>\n                            <div style={{ width: 24, height: 24, display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                                <StatusBadge size={20} view='neutral-information' />\n                            </div>\n                        </PureCell.Addon>\n                    </PureCell.Content>\n                </PureCell>\n            </div>\n        );\n    })}\n```\n\n----------------------------------------\n\nTITLE: Implementing PickerButton Components for Desktop and Mobile in React\nDESCRIPTION: Example showing how to implement both PickerButtonDesktop and PickerButtonMobile components with different styling options. The code demonstrates using options with and without icons, primary view style, and compact variant implementation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/picker-button/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst options = [{ key: 'Car' }, { key: 'Star' }, { key: 'Flower' }, { key: 'Banknote' }];\n\nconst optionsWithIcons = [\n    { key: 'Car', icon: CarMIcon },\n    { key: 'Star', icon: StarMIcon },\n    { key: 'Flower', icon: FlowerMMIcon },\n    { key: 'Banknote', icon: BanknoteMIcon },\n];\n\nrender(\n    <Space direction='horizontal'>\n        <PickerButtonDesktop options={optionsWithIcons} view='primary' label='Picker button' />\n        <PickerButtonDesktop options={options} view='primary' variant='compact' />\n    </Space>,\n);\n//MOBILE\nconst options = [{ key: 'Car' }, { key: 'Star' }, { key: 'Flower' }, { key: 'Banknote' }];\n\nconst optionsWithIcons = [\n    { key: 'Car', icon: CarMIcon },\n    { key: 'Star', icon: StarMIcon },\n    { key: 'Flower', icon: FlowerMMIcon },\n    { key: 'Banknote', icon: BanknoteMIcon },\n];\n\nrender(\n    <Space direction='horizontal'>\n        <PickerButtonMobile options={optionsWithIcons} view='primary' label='Picker button' />\n        <PickerButtonMobile options={options} view='primary' variant='compact' />\n    </Space>,\n);\n```\n\n----------------------------------------\n\nTITLE: Fix outside click in modal component\nDESCRIPTION: Handles click events outside modal boundaries to close the modal, preventing clicks on overlay or background from causing unwanted interactions. Implements event listeners on document or overlay elements.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_55\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Event listener for outside modal click to trigger close */\n```\n\n----------------------------------------\n\nTITLE: Importing ListHeader Component in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the ListHeader component from the '@alfalab/core-components/list-header' package, enabling its usage within React components using JavaScript.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/list-header/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ListHeader } from '@alfalab/core-components/list-header';\n```\n\n----------------------------------------\n\nTITLE: Rendering CalendarInput Component with Knobs\nDESCRIPTION: This code renders the CalendarInput component using React and various knobs to control its behavior. It initializes a state variable to hold the date value, defines an onChange handler, and utilizes knobs from `@storybook/addon-knobs` to customize properties like label, placeholder, mobileMode, preventFlip, block, success, error, disabled, and readOnly. The output is the rendered CalendarInput component with user-configurable properties. Requires React, the CalendarInput component, and the addon-knobs package.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-input/src/docs/Component.stories.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Story name='CalendarInput'>\n    {React.createElement(() => {\n        const [value, setValue] = React.useState(formatDate(new Date()));\n        const handleChange = (event, { value }) => setValue(value);\n        return (\n            <CalendarInput\n                value={value}\n                onChange={handleChange}\n                label={text('label', 'Дата регистрации')}\n                placeholder={text('placeholder', '')}\n                mobileMode={select('mobileMode', ['native', 'input', 'popover'], 'popover')}\n                preventFlip={boolean('preventFlip', false)}\n                block={boolean('block', false)}\n                success={boolean('success', false)}\n                error={boolean('error', false)}\n                disabled={boolean('disabled', false)}\n                readOnly={boolean('readOnly', false)}\n            />\n        );\n    })}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Importing Alfаlab Core Components Variables as JavaScript Variables in TypeScript\nDESCRIPTION: Demonstrates how to import all CSS variables provided by Alfаlab core components as JavaScript objects using TypeScript, enabling type-safe access to CSS variables. Key usage includes referencing variables via the imported object, such as vars.gap2xl equaling '32px'. Requires installation of the '@alfalab/core-components/vars' package.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/vars/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vars from '@alfalab/core-components/vars';\n\nvars.gap2xl === '32px'; //true\n```\n\n----------------------------------------\n\nTITLE: Displaying Slider Labels with React JSX\nDESCRIPTION: This snippet illustrates the usage of the Slider component with and without visible value labels, using React hooks to track slider values. The implementation requires React and a Slider component that can display pips and handle onChange events. The snippet uses two sliders; one configured to show labels on specific discrete values using the 'pips' prop with values and range, and a second slider with default no labels. This provides flexible UI for users depending on whether labeled ticks are necessary. Inputs are user interaction modifying slider value, outputs are displayed current values.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/slider/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [value, setValue] = React.useState(0);\n    const [slider, setSlider] = React.useState(0);\n\n    const handleChange = ({ value }) => setValue(value);\n    const handleChangeSlider = ({ value }) => setSlider(value);\n\n    return (\n        <>\n            <div>Value: {value}</div>\n            <br />\n            <Slider\n                size={4}\n                value={value}\n                onChange={handleChange}\n                pips={{\n                    mode: 'values',\n                    values: [0, 10, 100],\n                }}\n                range={{\n                    min: [0],\n                    '50%': [10, 10],\n                    max: [100],\n                }}\n            />\n            <br />\n            <br />\n            <div>Value: {slider}</div>\n            <br />\n            <Slider size={4} value={slider} onChange={handleChangeSlider} />\n        </>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Using PeriodSlider Component\nDESCRIPTION: This example demonstrates how to use the `PeriodSlider` component for navigating through different time periods. It shows the slider with different `periodType` values (year, quarter, month, day) and handles the `onPrevArrowClick` and `onNextArrowClick` events to update the selected period. The code also showcases how to enable the year selector.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar/src/docs/description.mdx#_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\nrender(() => {\n    const [values, setValues] = React.useState({\n        value: new Date(),\n        valueFrom: new Date(),\n        valueTo: new Date(),\n    });\n\n    const handler = (event, newValues) => setValues(newValues);\n\n    return (\n        <div style={{ width: 500 }}>\n            <p style={{ margin: 0 }}>Дата начала: {format(values.valueFrom, DATE_FORMAT)}</p>\n            <p style={{ marginTop: 10, marginBottom: 20 }}>\n                Дата конца: {format(values.valueTo, DATE_FORMAT)}\n            </p>\n\n            <PeriodSlider\n                value={values.value}\n                periodType='year'\n                onPrevArrowClick={handler}\n                onNextArrowClick={handler}\n            />\n\n            <br />\n\n            <PeriodSlider\n                value={values.value}\n                periodType='quarter'\n                onPrevArrowClick={handler}\n                onNextArrowClick={handler}\n            />\n\n            <br />\n\n            <PeriodSlider\n                value={values.value}\n                periodType='month'\n                onPrevArrowClick={handler}\n                onNextArrowClick={handler}\n            />\n\n            <br />\n\n            <PeriodSlider\n                value={values.value}\n                periodType='month'\n                onPrevArrowClick={handler}\n                onNextArrowClick={handler}\n                showCurrentYearSelector={true}\n            />\n\n            <br />\n\n            <PeriodSlider\n                value={values.value}\n                periodType='day'\n                onPrevArrowClick={handler}\n                onNextArrowClick={handler}\n            />\n\n            <br />\n\n            <PeriodSlider periodType='day' onPrevArrowClick={handler} onNextArrowClick={handler} />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Typography CSS Variables in React (JSX)\nDESCRIPTION: Shows how to import the typography CSS variables from the core-components package using the CSS @import syntax within a JSX or CSS-in-JS context to ensure consistent typography styling across components. This snippet is used in combination with system font management or custom font-face declarations.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/typography/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n@import '@alfalab/core-components/vars/typography.css';\n```\n\n----------------------------------------\n\nTITLE: Overview of Date Range Input Morphology and Composition\nDESCRIPTION: This explanatory snippet details that the date range input is a wrapper over `FormControl`, inheriting its configurations, and that it uses a `Calendar` component within a `Popover` for date selection. It emphasizes that the date picker is used for restricted date selection, such as excluding weekends, and that the component is flexible for customization through inherited properties and nested components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/date-range-input/src/docs/description.mdx#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Rendering PureCell Content Component with Graphic and Addon in React JSX\nDESCRIPTION: This snippet showcases a PureCell component wrapped in a div of fixed width, featuring configurable vertical and horizontal paddings, graphic padding, and direction. It includes graphics (Circle), main text, category label, and an addon with a styled StatusBadge icon. The example demonstrates flexible layout and styling with dynamic control over component appearance. Dependencies include React, PureCell, Circle, and StatusBadge components along with dynamic selection controls for props. Inputs are layout and content parameters; output is a content-rich PureCell UI element.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pure-cell/src/docs/Component.stories.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst verticalPadding = select(\n    'verticalPadding',\n    ['airy', 'default', 'compact', 'tiny', 'none'],\n    'default',\n);\nconst verticalTopPadding = select(\n    'verticalPadding.top',\n    ['airy', 'default', 'compact', 'tiny', 'none', undefined],\n    undefined,\n);\nconst verticalBottomPadding = select(\n    'verticalPadding.bottom',\n    ['airy', 'default', 'compact', 'tiny', 'none', undefined],\n    undefined,\n);\nconst verticalPaddingPrepared = (verticalTopPadding || verticalBottomPadding) ? {top: verticalTopPadding, bottom: verticalBottomPadding } : verticalPadding\n\nconst horizontalPadding = select(\n    'horizontalPadding',\n    ['left', 'right', 'both', 'none'],\n    'none',\n);\nconst graphicPadding = select(\n    'graphicPadding',\n    ['airy', 'default', 'compact', 'tiny', 'none', undefined],\n    undefined,\n);\nconst direction = select('direction', ['vertical', 'horizontal'], 'horizontal');\nreturn (\n    <div\n        style={{\n            width: '400px',\n        }}\n    >\n        <PureCell\n            href={text('href', '')}\n            verticalPadding={verticalPaddingPrepared}\n            horizontalPadding={horizontalPadding}\n            direction={direction}\n        >\n            <PureCell.Graphics graphicPadding={graphicPadding}>\n                <Circle />\n            </PureCell.Graphics>\n            <PureCell.Content>\n                <PureCell.Main>\n                    <PureCell.Text\n                        titleColor='primary'\n                        view='component-primary'\n                        rowLimit={1}\n                    >\n                        Яндекс Лавка\n                    </PureCell.Text>\n                    <PureCell.Category\n                        categoryName={'Кафе, рестораны, столовые, бары'}\n                        categoryPercent={10}\n                    />\n                </PureCell.Main>\n                <PureCell.Addon>\n                    <div style={{ width: 24, height: 24, display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <StatusBadge size={20} view='neutral-information' />\n                    </div>\n                </PureCell.Addon>\n            </PureCell.Content>\n        </PureCell>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Content to Calendar Days with Day Addons in React\nDESCRIPTION: Example demonstrating how to add custom content below date numbers in a calendar using the dayAddons prop. Shows three styled div elements added to specific dates in both desktop and mobile calendars.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar/src/docs/description.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [value, setValue] = React.useState();\n\n    const firstAddonStyles = {\n        backgroundColor: 'rgba(55, 120, 251, 0.1)',\n        border: '1px dashed rgb(55, 120, 251)',\n        boxSizing: 'border-box',\n        borderRadius: '2px',\n        height: '8px',\n        width: '40px',\n    };\n\n    const secondAddonStyles = {\n        ...firstAddonStyles,\n        height: '16px',\n    };\n\n    const thirdAddonStyles = {\n        ...firstAddonStyles,\n        height: '10px',\n    };\n\n    const dayAddons = [\n        { date: new Date().setDate(5), addon: <div style={firstAddonStyles} /> },\n        { date: new Date().setDate(6), addon: <div style={secondAddonStyles} /> },\n        { date: new Date().setDate(7), addon: <div style={thirdAddonStyles} /> },\n    ];\n\n    const calendarStyles = {\n        border: '1px solid rgba(233, 233, 235, 1)',\n        borderRadius: '8px',\n        boxSizing: 'border-box',\n        boxShadow: 'var(--shadow-m)',\n    };\n\n    return (\n        <div style={{ width: '344px', ...calendarStyles }}>\n            <CalendarDesktop\n                responsive={true}\n                value={value}\n                selectorView='month-only'\n                dayAddons={dayAddons}\n                onChange={setValue}\n                shape='rectangular'\n                showCurrentYearSelector={true}\n            />\n        </div>\n    );\n});\n//MOBILE\nrender(() => {\n    const [value, setValue] = React.useState();\n    const [open, setOpen] = React.useState(false);\n\n    const firstAddonStyles = {\n        backgroundColor: 'rgba(55, 120, 251, 0.1)',\n        border: '1px dashed rgb(55, 120, 251)',\n        boxSizing: 'border-box',\n        borderRadius: '2px',\n        height: '8px',\n        width: '40px',\n    };\n\n    const secondAddonStyles = {\n        ...firstAddonStyles,\n        height: '16px',\n    };\n\n    const thirdAddonStyles = {\n        ...firstAddonStyles,\n        height: '10px',\n    };\n\n    const dayAddons = [\n        { date: new Date().setDate(5), addon: <div style={firstAddonStyles} /> },\n        { date: new Date().setDate(6), addon: <div style={secondAddonStyles} /> },\n        { date: new Date().setDate(7), addon: <div style={thirdAddonStyles} /> },\n    ];\n\n    return (\n        <Container>\n            <Button onClick={() => setOpen(true)} block={true}>\n                Открыть календарь\n            </Button>\n            <CalendarMobile\n                onClose={() => setOpen(false)}\n                value={value}\n                onChange={setValue}\n                open={open}\n                selectorView='month-only'\n                dayAddons={dayAddons}\n                shape='rectangular'\n            />\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Notification Component from Alfalaab Core-Components in JSX\nDESCRIPTION: This snippet demonstrates how to import the Notification component from the '@alfalab/core-components/notification' package in a React JSX environment. It establishes the base for component usage by ensuring the correct module is imported before implementation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/notification/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Notification } from '@alfalab/core-components/notification';\n```\n\n----------------------------------------\n\nTITLE: Importing Status Component from Alfala Core Components in JSX\nDESCRIPTION: This snippet shows how to import the Status component from the '@alfalab/core-components/status' package to be used within a React JSX environment. It is necessary for utilizing the Status component in the project and serves as the starting point for component usage.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/status/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Status } from '@alfalab/core-components/status';\n```\n\n----------------------------------------\n\nTITLE: Adding PassCode Component\nDESCRIPTION: A new component named 'PassCode' has been added. This update introduces a new component, likely for handling passcode input or verification.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Configuring Storybook Documentation Tabs with JSX in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure a Storybook documentation page using JSX inside a JavaScript module. It imports Meta and Markdown from '@storybook/addon-docs' for metadata and markdown rendering, ComponentHeader and Tabs from 'storybook/blocks' for UI structure, and various content files (MDX and raw markdown). The snippet sets up the Meta component for the imported stories, displays a component header with a localized description, and creates tabbed sections to show the component's description, changelog, and development documentation. Dependencies include Storybook 6+ with addon-docs and support for MDX and raw markdown imports. Inputs include imported content files that are rendered inside the tabs. The output is a structured interactive documentation UI within Storybook.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/markdown/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta of={Stories} />\n\n<ComponentHeader\n    name='Markdown'\n    children='Используется для отображения и форматирования текстового контента.'\n/>\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Radio Component with JSX\nDESCRIPTION: This snippet demonstrates importing the Radio component from the core-components library. It imports the Radio component itself, making it available for use within the JSX environment of the Storybook documentation. No specific parameters are needed for import. This import is a prerequisite for utilizing the Radio component in the examples, ArgsTable and other documentation sections.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/radio/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Radio } from '@alfalab/core-components/radio';\n```\n\n----------------------------------------\n\nTITLE: Importing NumberInput Components in React\nDESCRIPTION: This code snippet demonstrates how to import the `NumberInput` component and its variations (desktop and mobile) from the `@alfalab/core-components` library. It showcases how to import the responsive, desktop, and mobile versions of the component for different use cases and screen sizes. This is a prerequisite for utilizing the `NumberInput` component in React applications.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/number-input/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// responsive версия компонента\nimport { NumberInput } from '@alfalab/core-components/number-input';\n\n// desktop версия компонента\nimport { NumberInputDesktop } from '@alfalab/core-components/number-input/desktop';\n\n// mobile версия компонента\nimport { NumberInputMobile } from '@alfalab/core-components/number-input/mobile';\n```\n\n----------------------------------------\n\nTITLE: Rendering SegmentedControl with Varying Segment Counts in React (JSX)\nDESCRIPTION: Shows the creation of SegmentedControl components supporting two to five Segment children, demonstrating flexibility in handling multiple options. Depends on React, SegmentedControl, Segment, and Space components, using React.useState to track selections for each example. Both desktop and mobile layout variations are provided for context. Inputs include selection tracking and tab onChange handling, while outputs are SegmentedControls with dynamic segment counts and labels.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/segmented-control/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [selectedId, setSelectedId] = React.useState({\n        '1': 1,\n        '2': 1,\n        '3': 1,\n        '4': 1,\n        '5': 1,\n    });\n    const handleChange = (pos, id) => setSelectedId({ ...selectedId, [pos]: id });\n    return (\n        <div style={{ width: 360 }}>\n        <Space fullWidth size={24}>\n            <SegmentedControl selectedId={selectedId[\"1\"]} onChange={(id) => handleChange('1', id)}>\n                <Segment id={1} title='Таб 1' />\n                <Segment id={2} title='Таб 2' />\n            </SegmentedControl>\n            <SegmentedControl selectedId={selectedId[\"2\"]} onChange={(id) => handleChange('2', id)}>\n                <Segment id={1} title='Таб 1' />\n                <Segment id={2} title='Таб 2' />\n                <Segment id={3} title='Таб 3' />\n            </SegmentedControl>\n            <SegmentedControl selectedId={selectedId[\"3\"]} onChange={(id) => handleChange('3', id)}>\n                <Segment id={1} title='Таб 1' />\n                <Segment id={2} title='Таб 2' />\n                <Segment id={3} title='Таб 3' />\n                <Segment id={4} title='Таб 4' />\n            </SegmentedControl>\n            <SegmentedControl selectedId={selectedId[\"4\"]} onChange={(id) => handleChange('4', id)}>\n                <Segment id={1} title='Таб 1' />\n                <Segment id={2} title='Таб 2' />\n                <Segment id={3} title='Таб 3' />\n                <Segment id={4} title='Таб 4' />\n                <Segment id={5} title='Таб 5' />\n            </SegmentedControl>\n        </Space>\n    </div>\n    )\n})\n//MOBILE\nrender(() => {\n    const [selectedId, setSelectedId] = React.useState({\n        '1': 1,\n        '2': 1,\n        '3': 1,\n        '4': 1,\n        '5': 1,\n    });\n    const handleChange = (pos, id) => setSelectedId({ ...selectedId, [pos]: id });\n    return (\n        <Space fullWidth size={24}>\n            <SegmentedControl selectedId={selectedId[\"1\"]} onChange={(id) => handleChange('1', id)}>\n                <Segment id={1} title='Таб 1' />\n                <Segment id={2} title='Таб 2' />\n            </SegmentedControl>\n            <SegmentedControl selectedId={selectedId[\"2\"]} onChange={(id) => handleChange('2', id)}>\n                <Segment id={1} title='Таб 1' />\n                <Segment id={2} title='Таб 2' />\n                <Segment id={3} title='Таб 3' />\n            </SegmentedControl>\n            <SegmentedControl selectedId={selectedId[\"3\"]} onChange={(id) => handleChange('3', id)}>\n                <Segment id={1} title='Таб 1' />\n                <Segment id={2} title='Таб 2' />\n                <Segment id={3} title='Таб 3' />\n                <Segment id={4} title='Таб 4' />\n            </SegmentedControl>\n            <SegmentedControl selectedId={selectedId[\"4\"]} onChange={(id) => handleChange('4', id)}>\n                <Segment id={1} title='Таб 1' />\n                <Segment id={2} title='Таб 2' />\n                <Segment id={3} title='Таб 3' />\n                <Segment id={4} title='Таб 4' />\n                <Segment id={5} title='Таб 5' />\n            </SegmentedControl>\n        </Space>\n    )\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Count Badge component with various styles and behaviors in React\nDESCRIPTION: This code demonstrates rendering multiple 'Badge' components with view='count', different content values, heights, colors, and outline options within styled containers. It requires a 'Badge' component and demonstrates handling content display logic (e.g., showing '99+' for values over 99) with configurable appearance. The example involves styling with inline styles and showcases customization for filled backgrounds, outlines, and sizes.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/badge/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst styles = {\n    display: 'flex',\n    justifyContent: 'space-between',\n    width: 233,\n    padding: 20,\n    backgroundColor: 'var(--color-light-base-bg-secondary)',\n    borderRadius: '12px',\n    boxSizing: 'border-box',\n};\n\nrender(\n    <Container>\n        <div style={styles}>\n            <Badge view='count' />\n            <Badge view='count' content={1} />\n            <Badge height={24} view='count' content={1} />\n            <Badge height={24} view='count' content={99} />\n            <Badge height={24} view='count' content={100} />\n        </div>\n        <Gap size='xs' />\n        <div style={styles}>\n            <Badge view='count' visibleIconOutline={true} />\n            <Badge view='count' content={1} visibleIconOutline={true} />\n            <Badge height={24} view='count' content={1} visibleIconOutline={true} />\n            <Badge height={24} view='count' content={99} visibleIconOutline={true} />\n            <Badge height={24} view='count' content={100} visibleIconOutline={true} />\n        </div>\n        <Gap size='xs' />\n        <div style={styles}>\n            <Badge view='count' color='specialbg-secondary-transparent' />\n            <Badge view='count' content={1} color='specialbg-secondary-transparent' />\n            <Badge height={24} view='count' content={1} color='specialbg-secondary-transparent' />\n            <Badge height={24} view='count' content={99} color='specialbg-secondary-transparent' />\n            <Badge height={24} view='count' content={100} color='specialbg-secondary-transparent' />\n        </div>\n        <Gap size='xs' />\n        <div style={styles}>\n            <Badge view='count' color='primary' />\n            <Badge view='count' content={1} color='primary' />\n            <Badge height={24} view='count' content={1} color='primary' />\n            <Badge height={24} view='count' content={99} color='primary' />\n            <Badge height={24} view='count' content={100} color='primary' />\n        </div>\n    </Container>,\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storybook Metadata and Documentation Tabs in React JSX\nDESCRIPTION: This JSX snippet configures the Storybook metadata and documentation tabs for the SortableList component story. It defines the story's Meta element with title, component reference, and id, and adds component headers and tabs integrating external MDX and Markdown content for description, changelog, and development notes. Dependencies include Storybook addon-docs, markdown and MDX files, and Storybook UI blocks. Inputs are static documentation content imported from files, and outputs are UI tabs presenting rich component documentation alongside the interactive example. This snippet is essential for well-structured component documentation within Storybook.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/sortable-list/src/docs/Component.stories.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title='Components/SortableList' component={SortableList} id='SortableList' />\n\n{/* Docs */}\n\n<ComponentHeader name='SortableList' children='Список перетаскиваемых элементов' />\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing CustomButton Anatomy Using Left and Right Addons in JSX\nDESCRIPTION: This snippet demonstrates the use of leftAddons and rightAddons slots to customize the content rendered inside the CustomButton component. It uses React state hooks to toggle the presence of label text, hint tooltip, and addon icons on the left and right sides of the button. If no label text is present, the button renders as a square. The render includes interactive Switch components to toggle these states. Dependencies include React, CustomButton, Switch, Gap, and StarMIcon components. Inputs are boolean states controlling label, hint, and addon visibility; output is a dynamically customizable button UI.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/custom-button/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [label, setLabel] = React.useState(true);\n    const [hint, setHint] = React.useState();\n    const [leftAddons, setLeftAddons] = React.useState(false);\n    const [rightAddons, setRightAddons] = React.useState(false);\n\n    const handleLabelChange = () => setLabel(!label);\n    const handleHintChange = () => setHint((p) => (p ? undefined : 'Hint'));\n    const handleLeftAddonsChange = () => setLeftAddons(!leftAddons);\n    const handleRightAddonsChange = () => setRightAddons(!rightAddons);\n\n    return (\n        <div>\n            <CustomButton\n                leftAddons={leftAddons && <StarMIcon />}\n                rightAddons={rightAddons && <StarMIcon />}\n                hint={hint}\n                block={isMobile()}\n                backgroundColor={'var(--color-light-base-bg-secondary-inverted)'}\n            >\n                {label && 'Label'}\n            </CustomButton>\n\n            <Gap size='xl' />\n\n            <Switch label='Label' checked={label} onChange={handleLabelChange} />\n            <Gap size='m' />\n            <Switch label='Hint' checked={hint} onChange={handleHintChange} />\n            <Gap size='m' />\n            <Switch label='LeftAddons' checked={leftAddons} onChange={handleLeftAddonsChange} />\n            <Gap size='m' />\n            <Switch label='RightAddons' checked={rightAddons} onChange={handleRightAddonsChange} />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Password Input with Visibility Toggle in React\nDESCRIPTION: This JSX snippet demonstrates rendering a `PasswordInput` component. It utilizes the `React.useState` hook to manage the `passwordVisible` state, which is toggled via the `onPasswordVisibleChange` callback. The component's appearance (width, label position, size) is dynamically adjusted based on the `isMobile()` helper function and the `BREAKPOINT` constant.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/password-input/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [passwordVisible, setPasswordVisible] = React.useState(false);\n\n    return (\n        <div style={{ width: isMobile() ? '100%' : 320 }}>\n            <PasswordInput\n                passwordVisible={passwordVisible}\n                onPasswordVisibleChange={(visible) => {\n                    setPasswordVisible(visible);\n                }}\n                label='Пароль'\n                labelView={isMobile() ? 'outer' : 'inner'}\n                size={isMobile() ? 48 : 56}\n                breakpoint={BREAKPOINT}\n                block={true}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering PureCell General Balance Component in React JSX\nDESCRIPTION: This snippet renders a PureCell component displaying a general balance with customizable padding and direction properties. It includes nested PureCell.Content, PureCell.Main with textual title and amount, and PureCell.Addon for a ChevronForwardMIcon. Dependencies include React components PureCell and ChevronForwardMIcon, with props like 'hidden', 'view', 'value', 'currency', and padding controls for layout. Input parameters define text, padding styles, direction, and display properties. The output is a configured PureCell component representing a balance entry within a UI.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pure-cell/src/docs/Component.stories.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nhref={text('href', '')}\nverticalPadding={verticalPaddingPrepared}\nhorizontalPadding={horizontalPadding}\ndirection={direction}\n>\n<PureCell.Content>\n    <PureCell.Main>\n        <PureCell.Text titleColor='secondary' view='primary-small'>\n            Общий баланс\n        </PureCell.Text>\n        <PureCell.AmountTitle\n            hidden={hidden}\n            view={viewAmount}\n            value={value}\n            minorUnits='100'\n            currency='RUR'\n            transparentMinor={true}\n            titleProps={{ color }}\n        />\n    </PureCell.Main>\n    <PureCell.Addon verticalAlign='center'>\n        <ChevronForwardMIcon />\n    </PureCell.Addon>\n</PureCell.Content>\n</PureCell>\n);\n```\n\n----------------------------------------\n\nTITLE: TabBar with Custom Animation in React\nDESCRIPTION: Example demonstrating custom animations when switching between tabs using CSS animations and React state management. It implements two animation types: scale and rotate, applied to tab icons when they are selected.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tab-bar/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nconst ANIMATION_EXAMPLES = {\n    SCALE: 'scale',\n    ROTATE: 'rotate',\n};\n\nconst AnimatedIcon = ({ Icon, animationClassName, selected }) => {\n    const [className, setClassName] = React.useState();\n    const didMountRef = React.useRef(false);\n\n    React.useEffect(() => {\n        if (didMountRef.current) {\n            if (selected) {\n                setClassName(animationClassName);\n            } else {\n                setClassName(undefined);\n            }\n        } else {\n            didMountRef.current = true;\n        }\n    }, [selected]);\n\n    return <Icon className={className} />;\n};\n\nrender(() => {\n    const [selectedId, setSelectedId] = React.useState('1');\n\n    return (\n        <div style={{ margin: '-20px' }}>\n            <style>\n                {`\n                .tab {\n                    transition: color 100ms ease-in-out;\n                }\n\n                .icon {\n                    transition: transform 100ms ease-in-out;\n                }\n\n                .tab:not(.selected):active .icon {\n                    transform: scale(0.8);\n                }\n\n                .scale {\n                    animation: scale_animation 300ms ease-in-out;\n                }\n\n                .rotate {\n                    animation: rotate_animation 600ms ease-in-out;\n                }\n\n                @keyframes scale_animation {\n                    0% {\n                        transform: scale(1);\n                    }\n                    50% {\n                        transform: scale(1.2);\n                    }\n                    100% {\n                        transform: scale(1);\n                    }\n\n                }\n\n                @keyframes rotate_animation {\n                    0% {\n                        transform: rotate(0deg);\n                    }\n                    100% {\n                        transform: rotate(360deg);\n                    }\n\n                }\n            `}\n            </style>\n\n            <TabBar\n                selectedId={selectedId}\n                onChange={setSelectedId}\n                tabClassNames={{\n                    className: 'tab',\n                    iconClassName: 'icon',\n                    selectedClassName: 'selected',\n                }}\n            >\n                <TabBar.Tab\n                    id='1'\n                    label='TabName1'\n                    icon={\n                        <AnimatedIcon\n                            Icon={DiamondsMIcon}\n                            animationClassName={ANIMATION_EXAMPLES.SCALE}\n                        />\n                    }\n                />\n                <TabBar.Tab\n                    id='2'\n                    label='TabName2'\n                    icon={\n                        <AnimatedIcon\n                            Icon={DiamondsMIcon}\n                            animationClassName={ANIMATION_EXAMPLES.ROTATE}\n                        />\n                    }\n                />\n            </TabBar>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Columns with Custom Settings in React\nDESCRIPTION: This snippet demonstrates defining table columns with configurable properties such as 'hidden', 'width', and 'textAlign'. The table displays data with columns that can be dynamically hidden or styled, providing flexible layout control. Dependencies include React for rendering and a custom Table component structure.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/table/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst data = [\n    {\n        id: 28,\n        date: '30.06.2022',\n        title: 'ООО \"КОРПУС-ИТ\"',\n        sum: 21000000,\n    },\n    {\n        id: 12,\n        date: '30.06.2022',\n        title: 'ОБЩЕСТВО С ОГРАНИЧЕННОЙ ОТВЕТСТВЕННОСТЬЮ \"МОБИЛСТИЛ\"',\n        subtitle:\n            'Оказание услуг по договору № 26/09 на основании акта № 1450 от 30 июня 2020 года, в т.ч. НДС 18%',\n        sum: 10002030,\n    },\n    {\n        id: 5,\n        date: '30.06.2022',\n        title: 'ИП Жуков Валерий Сергеевич',\n        subtitle: 'Услуги по ремонту за июнь, НДС не облагается',\n        sum: 3000069,\n    },\n];\n\nrender(() => {\n    return (\n        <Table>\n            <Table.THead>\n                <Table.THeadCell title='Id' hidden={true}>\n                    Id\n                </Table.THeadCell>\n\n                <Table.THeadCell title='Дата' width={120}>\n                    Дата\n                </Table.THeadCell>\n\n                <Table.THeadCell title='Контрагент' textAlign='center'>\n                    Контрагент\n                </Table.THeadCell>\n\n                <Table.THeadCell title='Сумма' textAlign='right' width={268}>\n                    Сумма\n                </Table.THeadCell>\n            </Table.THead>\n            <Table.TBody>\n                {data.map((row) => (\n                    <Table.TRow key={row.id}>\n                        <Table.TCell>{row.id}</Table.TCell>\n\n                        <Table.TCell>\n                            <Typography.Text view='primary-small' tag='div'>\n                                {row.date}\n                            </Typography.Text>\n                        </Table.TCell>\n\n                        <Table.TCell>\n                            <Space size={2} align='center'>\n                                <Typography.Text view='primary-small' tag='div'>\n                                    {row.title}\n                                </Typography.Text>\n                                <Typography.Text view='primary-small' color='secondary'>\n                                    {row.subtitle}\n                                </Typography.Text>\n                            </Space>\n                        </Table.TCell>\n\n                        <Table.TCell>\n                            <Amount\n                                value={row.sum}\n                                currency='RUR'\n                                minority={100}\n                                view='withZeroMinorPart'\n                                bold='full'\n                                transparentMinor={true}\n                            />\n                        </Table.TCell>\n                    </Table.TRow>\n                ))}\n            </Table.TBody>\n        </Table>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Page Indicator Components from Core Components Library\nDESCRIPTION: This snippet demonstrates how to import all Page Indicator variant components from the @alfalab/core-components library. The import includes Dynamic, Bullet, Step, and Runner variants.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/page-indicator/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n    PageIndicatorDynamic,\n    PageIndicatorBullet,\n    PageIndicatorStep,\n    PageIndicatorRunner,\n} from '@alfalab/core-components/page-indicator';\n```\n\n----------------------------------------\n\nTITLE: Importing FileUploadItemV1 after Migration - @alfalab/core-components - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the correct way to import the upgraded FileUploadItemV1 component from the @alfalab/core-components/file-upload-item-v1 package following a major version migration. Ensure that all references to the deprecated FileUploadItem have been replaced with FileUploadItemV1 across your application to maintain compatibility. No additional dependencies beyond @alfalab/core-components/file-upload-item-v1 are required; after this update, older component versions continue to work, but support will eventually be dropped.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { FileUploadItemV1 } from '@alfalab/core-components/file-upload-item-v1';\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Documentation for Backdrop Component in JSX\nDESCRIPTION: This code snippet sets up the documentation structure for a Backdrop component in Storybook. It imports necessary storybook addons, component stories, and markdown files for documentation sections, then arranges them in a tabbed interface with component header.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/backdrop/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta of={Stories} />\n\n<ComponentHeader\n    name='Backdrop'\n    children='Используется для затемнения фона при вызове модального слоя.'\n/>\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing TabsSecondary with Right Addons (Desktop)\nDESCRIPTION: This snippet demonstrates how to customize the TabsSecondary component by adding right addons to each tab. It defines a custom addon element and includes it in the Tab component's rightAddons prop. This example uses the TabsDesktop component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/src/docs/description.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [selectedId, setSelectedId] = React.useState('tab-1');\n    const [selectedSecondaryId, setSelectedSecondaryId] = React.useState('tab-1');\n\n    const handleChange = (event, { selectedId }) => setSelectedId(selectedId);\n    const handleSecondaryChange = (event, { selectedId }) => setSelectedSecondaryId(selectedId);\n\n    const addon = (\n        <div\n            style={{\n                background: 'rgba(55, 120, 251, 0.1)',\n                border: '1px dashed #3778FB',\n                borderRadius: '8px',\n                height: '24px',\n                width: '24px',\n                boxSizing: 'border-box',\n            }}\n        />\n    );\n\n    return (\n        <>\n            <TabsDesktop size='xs' selectedId={selectedId} onChange={handleChange}>\n                <Tab title='Aurum' id='tab-1' rightAddons={addon} />\n                <Tab title='Bercelium' id='tab-2' rightAddons={addon} />\n                <Tab title='Curium' id='tab-3' rightAddons={addon} />\n                <Tab title='Neptunium' id='tab-4' rightAddons={addon} />\n            </TabsDesktop>\n            <div style={{ marginTop: 20 }}>\n                <TabsDesktop\n                    selectedId={selectedSecondaryId}\n                    onChange={handleSecondaryChange}\n                    view='secondary'\n                    size='xs'\n                >\n                    <Tab title='Aurum' id='tab-1' rightAddons={addon} />\n                    <Tab title='Bercelium' id='tab-2' rightAddons={addon} />\n                    <Tab title='Curium' id='tab-3' rightAddons={addon} />\n                    <Tab title='Neptunium' id='tab-4' rightAddons={addon} />\n                </TabsDesktop>\n            </div>\n        </>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Introducing Fresh Colors From alfa-ui-primitives\nDESCRIPTION: The document introduces a new color scheme fetched from alfa-ui-primitives. This means that the colors used by the components in the core-ds project will be updated to reflect the color definitions present in the alfa-ui-primitives repository. The change ensures that colors are consistent across the different parts of the UI system.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_99\n\n\n\n----------------------------------------\n\nTITLE: Rendering Desktop Select Component with Custom Amount Display\nDESCRIPTION: Implements a React component rendering two desktop select elements with flexible options, managing selection state using React hooks. The first select displays amounts with the amount on top, and the second with the amount below the label. Uses handlers for value rendering and change events.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/select/src/docs/description.mdx#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nrender(() => {\n    const [selectedFirst, setSelectedFirst] = React.useState([]);\n    const [selectedSecond, setSelectedSecond] = React.useState([]);\n\n    return (\n        <div style={{ width: 320 }}>\n            <SelectDesktop\n                allowUnselect={true}\n                size={56}\n                placeholder='Выберите счёт'\n                label='Счёт'\n                Option={BaseOption}\n                block={true}\n                selected={selectedFirst}\n                options={OPTIONS_WITH_AMOUNT_ON_TOP}\n                valueRenderer={({ selected }) => {\n                    if (!selected) return '';\n\n                    const { amount } = DATA[selected.key];\n\n                    return (\n                        <Amount\n                            value={amount}\n                            minority={100}\n                            currency='RUR'\n                            view='withZeroMinorPart'\n                            transparentMinor={false}\n                        />\n                    );\n                }}\n                onChange={({ selected }) => setSelectedFirst(selected)}\n            />\n            <div style={{ height: 'var(--gap-16)' }} />\n            <SelectDesktop\n                selected={selectedSecond}\n                allowUnselect={true}\n                size={56}\n                options={OPTIONS}\n                placeholder='Выберите счёт'\n                Option={BaseOption}\n                block={true}\n                valueRenderer={({ selected }) => {\n                    if (!selected) return '';\n\n                    const { text, amount } = DATA[selected.key];\n\n                    return renderOption({\n                        text,\n                        amount,\n                        padding: { top: 'xs', bottom: 'xs' },\n                    });\n                }}\n                onChange={({ selected }) => {\n                    setSelectedSecond(selected);\n                }}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for IconButton Touch Area\nDESCRIPTION: This CSS snippet increases the clickable area of an IconButton within an Input component by adjusting the margin. It targets the IconButton using the data-test-id attribute and reduces the right margin to enlarge the touchable area.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/input/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nbutton[data-test-id='icon'] {\n    margin-right: var(--gap-12-neg);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Steps Component in React\nDESCRIPTION: This snippet demonstrates how to import the `Steps` component from the `@alfalab/core-components/steps` module.  This import is necessary to utilize the Steps component within your React application.  No specific parameters are needed, as this is an import statement. The output allows access to the component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/steps/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Steps } from '@alfalab/core-components/steps';\n```\n\n----------------------------------------\n\nTITLE: Rendering International Phone Input with Country Selector and Autocomplete in React (JSX)\nDESCRIPTION: This snippet initializes the InternationalPhoneInput component in a React functional context, demonstrating how to use state to manage phone value, selected country, country code clearability, and enable an autocomplete mode. It includes RadioGroup to set clearable behavior for the country code and a Switch for toggling autocomplete, as well as rich UI composition with Typography and Gap. Dependencies include React, InternationalPhoneInput, Gap, Typography, RadioGroup, Radio, and Switch from the respective UI library. The component expects properties like 'breakpoint', 'label', 'value', 'onChange', 'onCountryChange', and optionally takes an 'options' array for autocomplete functionality. It outputs the selected country code and supports responsive styling based on viewport width.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/international-phone-input/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst OPTIONS = [\n    { key: '+7 921 681 53 98' },\n    { key: '+7 921 681 52 97' },\n    { key: '+7 921 681 52 96' },\n    { key: '+7 921 681 52 95' },\n    { key: '8 921 681 52 94' },\n];\n\nrender(() => {\n    const [value, setValue] = React.useState('');\n    const [selectedCountry, setSelectedCountry] = React.useState();\n    const [clearableCountryCode, setClearableCountryCode] = React.useState(false);\n    const [autocomplete, setAutocomplete] = React.useState(false);\n\n    const handleChange = (phone) => setValue(phone);\n\n    return (\n        <div style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}>\n            <InternationalPhoneInput\n                breakpoint={BREAKPOINT}\n                label='Номер телефона'\n                placeholder='Введите номер телефона'\n                value={value}\n                onChange={handleChange}\n                onCountryChange={setSelectedCountry}\n                options={autocomplete ? OPTIONS : undefined}\n                block={true}\n                clearableCountryCode={clearableCountryCode}\n            />\n            <Gap size='m' />\n            <Typography.Text color='secondary'>\n                Код выбранной страны: {selectedCountry && selectedCountry.iso2}\n            </Typography.Text>\n            <Gap size='xl' />\n            <RadioGroup\n                label='Разрешить удаление кода страны'\n                direction='vertical'\n                name='radioGroup'\n                onChange={(_, { value }) => setClearableCountryCode(value === 'preserve' ? value : value === 'true')}\n                value={`${clearableCountryCode}`}\n            >\n                <Radio size='m' label='Нет' value='false' />\n                <Radio size='m' label='Да' value='true' />\n                <Radio size='m' label='Сохранить' value='preserve' />\n            </RadioGroup>\n            <Gap size='m' />\n            <Switch\n                checked={autocomplete}\n                label='Режим автокомплита'\n                onChange={() => {\n                    setAutocomplete((prevState) => !prevState);\n                }}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Gap Component in Core Components (JSX)\nDESCRIPTION: This code snippet demonstrates how to import the Gap component from the @alfalab/core-components/gap package using a JSX import statement. To use this, ensure that the '@alfalab/core-components' package is installed in your project. The Gap component serves as a layout spacer and its available properties must be referenced separately. No additional input or output is present in this snippet; it is solely for usage within a React JSX environment.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/gap/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Gap } from '@alfalab/core-components/gap';\n```\n\n----------------------------------------\n\nTITLE: Fixing onChange type for input-autocomplete\nDESCRIPTION: This commit fixes the onChange event type for the input-autocomplete component. This resolves potential type-related errors when handling the onChange event.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/input-autocomplete/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\n**input-autocomplete:** fixed onChange type ([#110](https://github.com/core-ds/core-components/issues/110)) ([c994661](https://github.com/core-ds/core-components/commit/c9946615af9aecb3f1974c887bdd6686708ac18e))\n```\n\n----------------------------------------\n\nTITLE: Implementing FilterTag with Predefined Value in SelectMobile\nDESCRIPTION: Example of implementing a FilterTag with a predefined value in a SelectMobile component. The custom field shows a FilterTag with selected value and no clear button for mobile devices.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/filter-tag/src/docs/description.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomField = ({\n    label,\n    selected,\n    setSelectedItems,\n    innerProps: { ref, ...restInnerProps },\n    ...restProps\n}) => (\n    <div ref={ref}>\n        <FilterTag checked={selected} showClear={false} {...restInnerProps} {...restProps}>\n            {selected.content}\n        </FilterTag>\n    </div>\n);\nrender(() => {\n    const options = React.useMemo(\n        () => [\n            { key: '1', content: 'По возрастанию' },\n            { key: '2', content: 'По убыванию' },\n        ],\n        [],\n    );\n\n    const [selected, setSelected] = React.useState([options[0]]);\n\n    const handleChangeSelected = ({ selectedMultiple }) => {\n        setSelected(selectedMultiple);\n    };\n\n    return (\n        <SelectMobile\n            popoverPosition='bottom-start'\n            options={options}\n            Field={CustomField}\n            onChange={handleChangeSelected}\n            selected={selected}\n            fieldProps={{ size: 32 }}\n        />\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Status Icon Badges with different sizes and outlines in React\nDESCRIPTION: This example shows rendering status 'Badge' components with 'view=icon', various icon colors ('positive', 'negative', 'attention', 'secondary'), and outline options including 'visibleColorOutline' and 'visibleIconOutline'. It employs size variations ('xl', 'm', 's') to demonstrate different icon sizes within styled containers. These badges are intended for displaying status indicators with consistent visual presets across interfaces.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/badge/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst styles = {\n    display: 'flex',\n    justifyContent: 'space-between',\n    padding: 20,\n    backgroundColor: 'var(--color-light-base-bg-secondary)',\n    borderRadius: '12px',\n    boxSizing: 'border-box',\n};\n\nrender(\n    <Container>\n        <div style={{ width: 372, ...styles }}>\n            <Badge\n                view='icon'\n                iconColor='positive'\n                visibleColorOutline='true'\n                content={<CheckmarkCircleMIcon />}\n            />\n            <Badge\n                view='icon'\n                iconColor='negative'\n                visibleColorOutline='true'\n                content={<AlertCircleMIcon />}\n            />\n            <Badge\n                view='icon'\n                iconColor='negative'\n                visibleColorOutline='true'\n                content={<CrossCircleMIcon />}\n            />\n            <Badge\n                view='icon'\n                iconColor='negative'\n                visibleColorOutline='true'\n                content={<StopCircleMIcon />}\n            />\n            <Badge\n                view='icon'\n                iconColor='attention'\n                visibleColorOutline='true'\n                content={<AlertCircleMIcon />}\n            />\n            <Badge\n                view='icon'\n                iconColor='secondary'\n                visibleColorOutline='true'\n                content={<CrossCircleMIcon />}\n            />\n            <Badge\n                view='icon'\n                iconColor='secondary'\n                visibleColorOutline='true'\n                content={<InformationCircleMIcon />}\n            />\n            <Badge\n                view='icon'\n                iconColor='secondary'\n                visibleColorOutline='true'\n                content={<ClockMIcon />}\n            />\n        </div>\n        <Gap size='xs' />\n        <div style={{ width: 152, ...styles }}>\n            <Badge\n                view='icon'\n                iconColor='positive'\n                visibleColorOutline='true'\n                content={<CheckmarkCircleMIcon />}\n            />\n            <Badge\n                view='icon'\n                iconColor='positive'\n                visibleIconOutline='true'\n                content={<CheckmarkCircleMIcon />}\n            />\n            <Badge view='icon' iconColor='positive' content={<CheckmarkCircleMIcon />} />\n        </div>\n        <Gap size='xs' />\n        <div style={{ width: 164, ...styles }}>\n            <Badge\n                view='icon'\n                size='xl'\n                iconColor='positive'\n                visibleColorOutline='true'\n                content={<CheckmarkCircleMIcon />}\n        />\n            <Badge\n                view='icon'\n                size='m'\n                iconColor='positive'\n                visibleColorOutline='true'\n                content={<CheckmarkCircleMIcon />}\n            />\n            <Badge\n                view='icon'\n                size='s'\n                iconColor='positive'\n                visibleColorOutline='true'\n                content={<CheckmarkCircleSIcon />}\n            />\n        </div>\n    </Container>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Picker Buttons for Desktop with React JSX\nDESCRIPTION: This snippet demonstrates rendering custom picker buttons for desktop using React JSX syntax. It initializes options with and without icons, then renders two variants of buttons within a space container: a standard and a compact version, each styled with a linear-gradient background. Dependencies include React, custom components 'CustomPickerButtonDesktop' and 'Space', and icon components `CarMIcon`, `StarMIcon`, etc. It illustrates how to pass options, styling, and label props to these components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/custom-picker-button/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nconst options = [{ key: 'Car' }, { key: 'Star' }, { key: 'Flower' }, { key: 'Banknote' }];\n\nconst optionsWithIcons = [\n    { key: 'Car', icon: CarMIcon },\n    { key: 'Star', icon: StarMIcon },\n    { key: 'Flower', icon: FlowerMMIcon },\n    { key: 'Banknote', icon: BanknoteMIcon },\n];\n\nrender(\n    <Space direction='horizontal'>\n        <CustomPickerButtonDesktop\n            backgroundColor='linear-gradient(264.15deg, #FF42CA 0%, #FF8A00 100%)'\n            options={optionsWithIcons}\n            label='Picker button'\n        />\n        <CustomPickerButtonDesktop\n            backgroundColor='linear-gradient(264.15deg, #FF42CA 0%, #FF8A00 100%)'\n            options={options}\n            variant='compact'\n        />\n    </Space>,\n);\n```\n\n----------------------------------------\n\nTITLE: Adding clearableCountryCode prop to phone-input\nDESCRIPTION: This commit adds a new prop called `clearableCountyCode` to the phone-input component. This feature was requested in issue #749.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/phone-input/CHANGELOG.md#_snippet_2\n\nLANGUAGE: other\nCODE:\n```\nd110ae7\n```\n\n----------------------------------------\n\nTITLE: Rendering SegmentedControl with Different Sizes and Shapes in React (JSX)\nDESCRIPTION: Demonstrates creating SegmentedControl components with two distinct sizes (default and 40px) and two shapes (default and rounded) in React using JSX. Requires the React, SegmentedControl, Segment, and Space components, and leverages React.useState for managing per-segment selection state. The snippet shows both desktop and mobile layout variants, illustrating the handling of style and layout props in each context. Inputs include a fixed state object and event handling for tab switches, and outputs are the rendered controls with correct selection state.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/segmented-control/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [selectedId, setSelectedId] = React.useState({\n        '1': 1,\n        '2': 1,\n        '3': 1,\n        '4': 1,\n    });\n    const handleChange = (pos, id) => setSelectedId({ ...selectedId, [pos]: id });\n    return (\n        <div style={{ width: 360 }}>\n        <Space fullWidth size={24}>\n            <SegmentedControl size={40} onChange={(id) => handleChange('1', id)} selectedId={selectedId[\"1\"]}>\n                <Segment id={1} title='Таб 1' />\n                <Segment id={2} title='Таб 2' />\n            </SegmentedControl>\n            <SegmentedControl onChange={(id) => handleChange('2', id)} selectedId={selectedId[\"2\"]}>\n                <Segment id={1} title='Таб 1' />\n                <Segment id={2} title='Таб 2' />\n            </SegmentedControl>\n            <SegmentedControl size={40} shape='rounded' onChange={(id) => handleChange('3', id)} selectedId={selectedId[\"3\"]}>\n                <Segment id={1} title='Таб 1' />\n                <Segment id={2} title='Таб 2' />\n            </SegmentedControl>\n            <SegmentedControl shape='rounded' onChange={(id) => handleChange('4', id)} selectedId={selectedId[\"4\"]}>\n                <Segment id={1} title='Таб 1' />\n                <Segment id={2} title='Таб 2' />\n            </SegmentedControl>\n        </Space>\n    </div>\n    )\n})\n//MOBILE\nrender(() => {\n    const [selectedId, setSelectedId] = React.useState({\n        '1': 1,\n        '2': 1,\n        '3': 1,\n        '4': 1,\n    });\n    const handleChange = (pos, id) => setSelectedId({ ...selectedId, [pos]: id });\n    return (\n        <Space fullWidth size={24}>\n            <SegmentedControl size={40} onChange={(id) => handleChange('1', id)} selectedId={selectedId[\"1\"]}>\n                <Segment id={1} title='Таб 1' />\n                <Segment id={2} title='Таб 2' />\n            </SegmentedControl>\n            <SegmentedControl onChange={(id) => handleChange('2', id)} selectedId={selectedId[\"2\"]}>\n                <Segment id={1} title='Таб 1' />\n                <Segment id={2} title='Таб 2' />\n            </SegmentedControl>\n            <SegmentedControl size={40} shape='rounded' onChange={(id) => handleChange('3', id)} selectedId={selectedId[\"3\"]}>\n                <Segment id={1} title='Таб 1' />\n                <Segment id={2} title='Таб 2' />\n            </SegmentedControl>\n            <SegmentedControl shape='rounded' onChange={(id) => handleChange('4', id)} selectedId={selectedId[\"4\"]}>\n                <Segment id={1} title='Таб 1' />\n                <Segment id={2} title='Таб 2' />\n            </SegmentedControl>\n        </Space>\n    )\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Warning Message with Plate and Link Components\nDESCRIPTION: This snippet renders a non-interactive warning message using the 'Plate' component with visual styling and includes a 'Link' for navigation to documentation. It demonstrates component composition and customization via props.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/confirmation-v1/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Plate } from '@alfalab/core-components/plate';\nimport { Link } from '@alfalab/core-components/link';\n\n<Plate\n    view='attention'\n    titleView='light'\n    limitContentWidth={false}\n    title={\n        <>\n            Компонент больше не поддерживается, переходите на новый компонент{' '}\n            <Link href='https://core-ds.github.io/core-components/master/?path=/docs/confirmation--docs'>\n                Confirmation.\n            </Link>\n        </>\n    }\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing DateTimeInput Components for React JSX\nDESCRIPTION: This JSX snippet imports three variants of the DateTimeInput component from the @alfalab/core-components package: the base DateTimeInput, DateTimeInputDesktop, and DateTimeInputMobile. These imports enable the usage of these components in responsive React applications, allowing tailored date-time input UX on different device types. Prerequisites include having @alfalab/core-components installed and a React environment supporting JSX syntax.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/date-time-input/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DateTimeInput } from '@alfalab/core-components/date-time-input';\nimport { DateTimeInputDesktop } from '@alfalab/core-components/date-time-desktop';\nimport { DateTimeInputMobile } from '@alfalab/core-components/date-time-mobile';\n```\n\n----------------------------------------\n\nTITLE: Line Chart Configuration in TypeScript\nDESCRIPTION: Describes the configuration for a line chart including options for visibility, styling, dot settings, and line properties. Allows customization of line color, stroke width, line type, and dot appearance with responsive settings.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/chart/src/docs/development.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n/*\n * Пример графика типа line\n */\n{\n    /*\n     * Скрыть график\n     */\n    hide?: false,\n\n    /*\n     * Скрыть график в легенде\n     */\n    hideLegend?: false,\n\n    /*\n     * Скрыть график в тултипe\n     */\n    hideTooltip?: false,\n\n    /*\n     * Z-index графика\n     */\n    zIndex,\n\n    /*\n     * Тип графика\n     */\n    chart: 'line',\n\n    /*\n     * Тип иконки для графика\n     */\n    icon,\n\n    /*\n     * Параметры графика\n     */\n    properties: {\n\n        /*\n         * Название графика (отображается в легендах и тултипе)\n         */\n        name,\n\n        /*\n         * Ключ данных\n         */\n        dataKey,\n\n        /*\n         * Цвет линии графика\n         */\n        stroke?: '#3182bd',\n\n        /*\n         * Отображение точек на графике\n         */\n        dot?,\n\n        /*\n         * Параметры для точек грфика (если dot: true)\n         */\n        dotSettings: [{\n\n            /*\n             * Значение media query\n             */\n            media,\n\n            /*\n             * Значение маштаба при ховере\n             */\n            scale,\n\n            /*\n             * Начальный значения маштаба\n             */\n            initScale,\n\n            /*\n             * Ширина точки\n             */\n            width,\n\n            /*\n             * Высота точки\n             */\n            height,\n        }],\n\n        /*\n         * Наследование цвета\n         */\n        inheritStroke?: false,\n\n        /*\n         * Форматирование значения графика для тултипа\n         */\n        formatter?,\n\n        /*\n         * Тип линии\n         */\n        type? 'linear',\n\n        /*\n         * Толщина линии\n         */\n        strokeWidth?: 1,\n\n        /*\n         * Прерывистость линии\n         */\n        strokeDasharray?,\n    },\n\n    /*\n     *  Массив данных для отрисовки\n     */\n    data: [\n\n        /**\n         * Метка\n         */\n        label,\n\n        /**\n         * Значение\n         */\n        value,\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Footer Settings Configuration JavaScript\nDESCRIPTION: Defines a constant array `FOOTER_SETTINGS` containing configurations for boolean footer options controlled by `Switch` components. Each object specifies the `label` (in Russian) and the corresponding `name` for the setting.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/side-panel/src/docs/description.mdx#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst FOOTER_SETTINGS = [\n    { label: 'Primary Button', name: 'hasPrimaryButton' },\n    { label: 'Secondary Button', name: 'hasSecondaryButton' },\n    { label: 'Фиксация футера при скролле', name: 'sticky' },\n];\n```\n\n----------------------------------------\n\nTITLE: Setup for PureCell with AmountTitle Controls - React/JSX\nDESCRIPTION: Storybook example setup code for demonstrating the `PureCell` component with an `PureCell.AmountTitle` sub-component. Defines Storybook controls (`select`, `text`, `boolean`) for adjusting padding options, direction, amount view style, color, value, and visibility before the component rendering begins.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pure-cell/src/docs/Component.stories.mdx#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n{React.createElement(() => {\n                const verticalPadding = select(\n            'verticalPadding',\n            ['airy', 'default', 'compact', 'tiny', 'none'],\n            'default',\n        );\n        const verticalTopPadding = select(\n            'verticalPadding.top',\n            ['airy', 'default', 'compact', 'tiny', 'none', undefined],\n            undefined,\n        );\n        const verticalBottomPadding = select(\n            'verticalPadding.bottom',\n            ['airy', 'default', 'compact', 'tiny', 'none', undefined],\n            undefined,\n        );\n        const verticalPaddingPrepared = (verticalTopPadding || verticalBottomPadding) ? {top: verticalTopPadding, bottom: verticalBottomPadding } : verticalPadding\n\n        const horizontalPadding = select(\n            'horizontalPadding',\n            ['left', 'right', 'both', 'none'],\n            'none',\n        );\n        const direction = select('direction', ['vertical', 'horizontal'], 'horizontal');\n        const viewAmount = select(\n            'viewAmount',\n            ['default', 'withZeroMinorPart'],\n            'withZeroMinorPart',\n        );\n        const color = select(\n            'color',\n            [\n                'tertiary',\n                'disabled',\n                'accent',\n                'primary',\n                'attention',\n                'positive',\n                'secondary',\n                'tertiary-inverted',\n                'primary-inverted',\n                'secondary-inverted',\n                'link',\n                'negative',\n            ],\n            'primary',\n        );\n        const value = text('value', '100000000');\n        const hidden = boolean('hidden', false);\n\n        return (\n            <PureCell\n```\n\n----------------------------------------\n\nTITLE: Customizing Status Component with CSS (React)\nDESCRIPTION: This snippet demonstrates how to customize the `Status` component using CSS. It defines a CSS class and applies it to the `Status` component using the `className` prop. The CSS is defined using a `style` tag within a `Container`. The `uppercase` prop is set to false.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/status/src/docs/description.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    return (\n        <Container>\n            <style>\n                {\n                    '.className.className {color: var(--color-light-decorative-text-purple); background-color: var(--color-light-decorative-muted-purple);}'\n                }\n            </style>\n            <Status size={40} uppercase={false} className='className'>\n                Кастом\n            </Status>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing CalendarRange Component in React\nDESCRIPTION: This snippet demonstrates how to import the CalendarRange component from the '@alfalab/core-components/calendar-range' library. This import allows you to use the CalendarRange component in your React application. No additional dependencies are needed besides the installed core-components library.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-range/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CalendarRange } from '@alfalab/core-components/calendar-range';\n```\n\n----------------------------------------\n\nTITLE: Importing Dropzone Component (JSX)\nDESCRIPTION: This code snippet demonstrates how to import the Dropzone component from the '@alfalab/core-components/dropzone' library in a JSX context. This import statement makes the Dropzone component available for use within your React or JSX code. Ensure that the @alfalab/core-components package is installed in your project.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/dropzone/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Dropzone } from '@alfalab/core-components/dropzone';\n```\n\n----------------------------------------\n\nTITLE: Rendering StatusBadge Indicators in React\nDESCRIPTION: This code snippet demonstrates how to render different types of StatusBadge indicators within a React component. It iterates through an array of indicator configurations, rendering a StatusBadge component for each configuration. It includes examples of various views such as 'positive-checkmark', 'negative-alert', etc.  It also shows an example where a custom icon is used.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/steps/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const styles = {\n        display: 'flex',\n        alignItems: 'center',\n        gap: '12px',\n    };\n\n    const stylesCustom = {\n        width: 24,\n        height: 24,\n        background: 'rgba(55, 120, 251, 0.1)',\n        border: '1px dashed #3778FB',\n        borderRadius: 8,\n        boxSizing: 'border-box',\n    };\n\n    const viewIndicators = [\n        {\n            view: 'positive-checkmark',\n            content: 'Completed',\n        },\n        {\n            view: 'positive-checkmark',\n            content: 'Positive',\n        },\n        {\n            view: 'negative-alert',\n            content: 'Negative',\n        },\n        {\n            view: 'negative-cross',\n            content: 'CriticalError',\n        },\n        {\n            view: 'attention-alert',\n            content: 'Warning',\n        },\n        {\n            view: 'neutral-operation',\n            content: 'Warning',\n            icon: <ClockMIcon />,\n        },\n        {\n            content: 'Custom',\n        },\n    ];\n    return (\n        <Space size={20}>\n            {viewIndicators.map((indicator, key) => (\n                <div key={key} style={styles}>\n                    {indicator.view ? (\n                        <StatusBadge view={indicator.view} />\n                    ) : (\n                        <div style={stylesCustom} />\n                    )}\n                    <Typography.Text color='secondary' view='primary-small'>\n                        {indicator.content}\n                    </Typography.Text>\n                </div>\n            ))}\n        </Space>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing SliderInput Component\nDESCRIPTION: This snippet demonstrates the basic usage of the SliderInput component with configurable segments and steps. It initializes two SliderInput components with different configurations for min/max values, steps, and pips. It uses React useState hooks to manage the slider values and update them based on user interaction.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/slider-input/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst min = 1;\n\nrender(() => {\n    const [value1, setValue1] = React.useState(3);\n    const [value2, setValue2] = React.useState(5);\n\n    return (\n        <div style={{ width: isMobile() ? '100%' : 320 }}>\n            <SliderInput\n                value={value1}\n                label='Label'\n                labelView={isMobile() ? 'outer' : 'inner'}\n                size={isMobile() ? 48 : 56}\n                pips={{\n                    mode: 'values',\n                    values: [min, 10 / 2, 10],\n                }}\n                min={min}\n                max={10}\n                step={1}\n                block={true}\n                onChange={(_, { value }) => setValue1(value)}\n                breakpoint={BREAKPOINT}\n            />\n            <Gap size='xl' />\n            <SliderInput\n                value={value2}\n                label='Label'\n                labelView={isMobile() ? 'outer' : 'inner'}\n                size={isMobile() ? 48 : 56}\n                pips={{\n                    mode: 'values',\n                    values: [min, 10, 100],\n                }}\n                min={min}\n                max={100}\n                range={{\n                    min: min,\n                    '50%': [10, 5],\n                    max: 100,\n                }}\n                step={1}\n                block={true}\n                onChange={(_, { value }) => setValue2(value)}\n                breakpoint={BREAKPOINT}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Updating picker-button, badge, tag and keyboard-focusable dependencies\nDESCRIPTION: This section updates various dependencies. It updates 'picker-button' to 10.2.0, 'badge' to 4.0.4, 'keyboard-focusable' to 4.0.3, and 'tag' to 5.0.3.  Also fixes an issue with default imports in cjs formats.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Defining Button Width\nDESCRIPTION: This snippet demonstrates different ways to define button width: adapting to content length, setting a fixed width using CSS, and occupying the full container width using the `block` property.  It also introduces usage of `nowrap` prop.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/button/src/docs/description.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ textAlign: isMobile() ? 'center' : 'left' }}>\n    <Button breakpoint={BREAKPOINT}>Мин.</Button>\n    <Gap size='l' />\n    <Button breakpoint={BREAKPOINT}>Ширина зависит от лейбла</Button>\n    <Gap size='l' />\n    <style>{'.button { width: 300px; }'}</style>\n    <Button breakpoint={BREAKPOINT} className='button'>\n        Ширина задана вручную\n    </Button>\n    <Gap size='l' />\n    <Button block={true} size={56} nowrap={true} breakpoint={BREAKPOINT}>\n        Занимает всю ширину контейнера\n    </Button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardFocusable with Different Component Types\nDESCRIPTION: Examples demonstrating how to use KeyboardFocusable with native elements, components that support ref forwarding, and components that don't support ref forwarding.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/keyboard-focusable/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Нативный элемент\n<KeyboardFocusable>\n    {(ref, focused) => <button type='button' ref={ref} className={cn({ [styles.focused]: focused })} />}\n</KeyboardFocusable>\n\n// Компонент, поддерживающий проброс рефа\n<KeyboardFocusable>\n    {(ref, focused) => <ForwardRefComponent ref={ref} className={cn({ [styles.focused]: focused })} />}\n</KeyboardFocusable>\n\n// Если компонент не пробрасывает реф, то можно использовать обертку\n<KeyboardFocusable>\n    {(ref, focused) => (\n        <div ref={ref} className={cn({ [styles.focused]: focused })}>\n            <ComponentWithoutForwardRef />\n        </div>\n    )}\n</KeyboardFocusable>\n```\n\n----------------------------------------\n\nTITLE: Add new side-panel component\nDESCRIPTION: Defines a new UI component side-panel for secondary navigation or contextual overlays. Implements props for visibility and positioning, storing layout state and event handlers for toggling.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_53\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Side-panel component definition with toggle props and layout styles */\n```\n\n----------------------------------------\n\nTITLE: Using ArgTypes to Document ListHeader Properties\nDESCRIPTION: This snippet uses Storybook's ArgTypes to automatically generate documentation for the ListHeader component's properties. It helps developers understand available props and their types for better integration and testing.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/list-header/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ArgTypes of={ListHeader} />\n```\n\n----------------------------------------\n\nTITLE: Creating tabbed interface with description, changelog, and development content in Storybook\nDESCRIPTION: This implementation uses the Tabs component to organize different documentation sections, including an imported description, a Markdown-rendered changelog, and development notes, facilitating easy navigation and comprehensive information display.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/file-upload-item/src/docs/Component.docs.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Scrollbar Component in JSX\nDESCRIPTION: This code snippet demonstrates how to import the Scrollbar component from the @alfalab/core-components library.  It shows the import statement required to use the Scrollbar component within a Storybook story or any other JSX-based environment. No specific parameters are used in this import statement.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/scrollbar/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Scrollbar } from '@alfalab/core-components/scrollbar';\n```\n\n----------------------------------------\n\nTITLE: Importing FileUploadItemV1 Component (JSX)\nDESCRIPTION: Demonstrates the standard method for importing the FileUploadItemV1 component from the @alfalab/core-components library using ES module syntax. This import is required to use the component in a React application.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/file-upload-item-v1/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FileUploadItemV1 } from '@alfalab/core-components/file-upload-item-v1';\n```\n\n----------------------------------------\n\nTITLE: Removing Modal Overlay in React\nDESCRIPTION: This snippet shows how to disable the overlay for a modal, allowing interaction with the content behind it. It leverages React's `useState` hook to manage the modal's visibility. The `UniversalModalDesktop` component is used, with the `overlay` prop set to `false`. This enables the user to interact with elements outside the modal while the modal is open.  The example also demonstrates the usage of the Button, Header, Content and Footer components within the modal.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/universal-modal/src/docs/description.mdx#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [open, setOpen] = React.useState(false);\n\n    return (\n        <React.Fragment>\n            <Button onClick={() => setOpen((prev) => !prev)}>Показать модалку</Button>\n            <UniversalModalDesktop\n                open={open}\n                width={'500'}\n                height={'fullHeight'}\n                horizontalAlign={'end'}\n                verticalAlign={'center'}\n                overlay={false}\n                onClose={() => setOpen(false)}\n                margin={{ top: 12, right: 12, bottom: 12, left: 12 }}\n            >\n                <UniversalModalDesktop.Header\n                    align='left'\n                    sticky={true}\n                    title='Почему банк проверяет мои операции?'\n                    hasCloser={true}\n                />\n                <UniversalModalDesktop.Content>\n                    <Typography.Text tag='p'>\n                        В 2001 году в России начал действовать Федеральный закон №115 «О\n                        противодействии легализации доходов, полученных преступным путём, и\n                        финансированию терроризма». В рамках закона банки могут блокировать карты,\n                        отказывать в проведении сомнительных операций, ограничить доступ в\n                        интернет-банк или запрашивать документы, если по операции клиента возникли\n                        подозрения.\n                    </Typography.Text>\n                    <br />\n                    <Typography.Text tag='p'>\n                        Требования 115-ФЗ и связанных с ним документов Банка России часто меняются,\n                        предприниматели не всегда успевают за ними следить. Последствия нарушений\n                        «антиотмывочного» законодательства всегда неприятны: приходится остановить\n                        бизнес-процессы и доказать банку законность операций. Специалисты\n                        «Альфа-банка» собрали понятные рекомендации, как сэкономить время на\n                        объяснения и предотвратить блокировки\n                    </Typography.Text>\n\n                    <Collapse collapsedLabel='Подробнее' expandedLabel='Скрыть'>\n                        <Typography.Text tag='p'>\n                            115-ФЗ Касается всех предпринимателей, фирм и физлиц, а также тех, кто\n                            пользуется банковским счётом для бизнеса, крупных денежных переводов или\n                            личных расчётов. Ограничения интернет-банка, блокировка карт\n                            добросовестных компаний могут произойти из-за неправильно оформленных\n                            документов, ошибок в платёжке или попыток снизить налоги.\n                        </Typography.Text>\n                        <br />\n                        <Typography.Text tag='p'>\n                            Клиенты воспринимают ограничения как атаку со стороны банка, но чаще\n                            всего сами допускают ошибки или нарушения, которых можно избежать. Банки\n                            не преследуют цели доставить неудобства клиентам — они обязаны соблюдать\n                            законодательство и следовать инструкциям и рекомендациям ЦБ, а в\n                            противном случае рискуют лишиться лицензии.\n                        </Typography.Text>\n                        <br />\n                        <Typography.Text tag='p'>\n                            Обналичивание — сомнительные операции, когда юрлицо или предприниматель\n                            снимает со счёта более 80% от оборота или переводит деньги на счета\n                            физлиц, которые затем снимают в наличной форме.\n                        </Typography.Text>\n                        <br />\n                        <Typography.Text tag='p'>\n                            Вывод капитала за границу — это переводы нерезидентам по договорам об\n                            импорте работ/услуг и результатов интеллектуальной деятельности, по\n                            которым проведение расчётов осуществляется без одновременной уплаты НДС;\n                            по сделкам купли-продажи ценных бумаг, а также товаров, которые не\n                            пересекают границу России.\n                        </Typography.Text>\n                        <br />\n                        <Typography.Text tag='p'>\n                            Транзитные операции — операции, в процессе которых деньги поступают на\n                            счёт компании от других резидентов и списываются в короткие сроки. При\n                            этом, как правило, в этих случаях по счёту нет начислений зарплат,\n                            уплаты налогов, и они не соответствуют заявленному компанией виду\n                            деятельности.\n                        </Typography.Text>\n                        <br />\n                        <Typography.Text tag='p'>\n                            Запрашивать могут любые документы и устанавливать разные сроки их\n                            предоставления — это зависит от службы контроля конкретного банка.\n                            Обычно банки запрашивают чеки, счета или договора с контрагентами. В\n                            некоторых случаях бывает достаточно устных объяснений. Для проверки\n                            информации и пересмотра уровня риска банк может пригласить клиента в\n                            банк для устного разъяснения или выехать по месту ведения бизнеса\n                            клиента.\n                        </Typography.Text>\n                    </Collapse>\n                </UniversalModalDesktop.Content>\n                <UniversalModalDesktop.Footer sticky={true} layout='start'>\n                    <Button size={48} view='primary' onClick={() => setOpen(false)}>\n                        Primary\n                    </Button>\n                    <Button size={48} view='secondary' onClick={() => setOpen(false)}>\n                        Secondary\n                    </Button>\n                </UniversalModalDesktop.Footer>\n            </UniversalModalDesktop>\n        </React.Fragment>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Component with Background Content\nDESCRIPTION: This React snippet renders a component and controls its background content (color, image, text, icon) using checkboxes and radio buttons. It uses state to manage the component's properties and provides interactive elements to customize the appearance. Dependencies include React, and other imported components such as `Circle`, `SuperEllipse`, `Rectangle`, `NoShape`, `DiamondsMIcon`, `Container`, `Row`, `Col`, `Typography.Title`, `CheckboxGroup`, `Checkbox`, and `RadioGroup`.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/icon-view/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [component, setComponent] = React.useState('SuperEllipse');\n    const [value, setValue] = React.useState({\n        background: true,\n        image: false,\n        text: false,\n        icon: false,\n    });\n\n    const Component = {\n        Circle,\n        SuperEllipse,\n        Rectangle,\n        NoShape,\n    }[component];\n\n    const onChangeRadio = (_, payload) => {\n        setComponent(payload.value);\n    };\n\n    const onChange = (_, payload) => {\n        setValue({ ...value, [payload.name]: payload.checked });\n    };\n\n    return (\n        <Container>\n            <Row>\n                <Col>\n                    <Component\n                        size='80'\n                        mainSize={64}\n                        backgroundColor={\n                            value.background\n                                ? 'var(--color-light-base-bg-secondary)'\n                                : 'transparent'\n                        }\n                        imageUrl={value.image && './images/imgBg.png'}\n                        text={\n                            value.text && (\n                                <Typography.Title\n                                    view='small'\n                                    weight='bold'\n                                    font='system'\n                                    color='secondary'\n                                >\n                                    БК\n                                </Typography.Title>\n                            )\n                        }\n                    >\n                        {value.icon && <DiamondsMIcon />}\n                    </Component>\n                </Col>\n            </Row>\n\n            <Row>\n                <CheckboxGroup label='Контент' onChange={onChange}>\n                    <Checkbox\n                        label='Цвет фона'\n                        name='background'\n                        checked={value.background}\n                        size='m'\n                    />\n                    <Checkbox label='Изображение' name='image' checked={value.image} size='m' />\n                    <Checkbox label='Текст' name='text' checked={value.text} size='m' />\n                    <Checkbox label='Иконка' name='icon' checked={value.icon} size='m' />\n                </CheckboxGroup>\n            </Row>\n\n            <Row>\n                <RadioGroup\n                    name='radioGroup'\n                    onChange={onChangeRadio}\n                    label='Форма шейпа'\n                    value={component}\n                >\n                    {['SuperEllipse', 'Circle', 'Rectangle', 'NoShape'].map((c) => (\n                        <Radio\n                            label={c === 'NoShape' ? 'noShape' : c.toLowerCase()}\n                            value={c}\n                            size='m'\n                            key={c}\n                        />\n                    ))}\n                </RadioGroup>\n            </Row>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ModalMobile with Titles and Controls in JSX\nDESCRIPTION: This snippet defines a React modal component using ModalMobile and associated components like Typography, ButtonMobile, and ModalMobile.Footer. It conditionally renders titles, subtitles, and footer controls based on selected view settings and props. The modal displays text content, handles close actions, and supports primary and secondary buttons with customizable layouts. Dependencies include a React environment, the ModalMobile component suite, and imported UI elements such as Typography and ButtonMobile. Key parameters include headerViewSelected (to determine title style), headerSettings (to toggle title content), and footerSettings (to configure footer button presence and layout). Inputs include user interaction events, and outputs involve UI updates and callback invocation. The snippet exemplifies managing modal content and controls dynamically with React JSX.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/modal/src/docs/description.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n                                ? 'Почему банк проверяет мои\\u00A0операции?'\n                                : undefined\n                        }\n                        titleSize={\n                            [\n                                'compactTitle',\n                                'compactTitleWithSubtitle',\n                                'compactTitleWithCenterAlign',\n                                'compactTitleWithSubtitleAndCenterAlign',\n                            ].includes(headerViewSelected)\n                                ? 'compact'\n                                : undefined\n                        }\n                        subtitle={\n                            [\n                                'compactTitleWithSubtitle',\n                                'compactTitleWithSubtitleAndCenterAlign',\n                            ].includes(headerViewSelected)\n                                ? 'Почему банк проверяет мои\\u00A0операции?'\n                                : undefined\n                        }\n                    />\n                )}\n                <ModalMobile.Content>\n                    {headerSettings.titleInContent ? (\n                        <>\n                            <Typography.Title view='xsmall' tag='div' font='system'>\n                                {`Почему банк проверяет мои\\u00A0операции?`}\n                            </Typography.Title>\n                            <Gap size='m' />\n                        </>\n                    ) : undefined}\n\n                    <Text onClose={handleClose} />\n                </ModalMobile.Content>\n                {showFooter && (\n                    <ModalMobile.Footer sticky={footerSettings.sticky}>\n                        <ModalMobile.Controls\n                            layout={footerViewSelected === 'vertical' ? 'column' : 'space-between'}\n                            primary={\n                                footerSettings.hasPrimaryButton ? (\n                                    <ButtonMobile\n                                        view='primary'\n                                        size='m'\n                                        onClick={handleClose}\n                                        block={true}\n                                    >\n                                        Primary\n                                    </ButtonMobile>\n                                ) : null\n                            }\n                            secondary={\n                                footerSettings.hasSecondaryButton ? (\n                                    <ButtonMobile\n                                        view='secondary'\n                                        size='m'\n                                        onClick={handleClose}\n                                        block={true}\n                                    >\n                                        Secondary\n                                    </ButtonMobile>\n                                ) : null\n                            }\n                        />\n                    </ModalMobile.Footer>\n                )}\n            </ModalMobile>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering CustomButton State and Content Color Variants in JSX\nDESCRIPTION: This snippet defines a VARIANTS object with button styling configurations combining different stateTypes, contentColors, backgroundColors, and disableTypes. The main render function uses React state to toggle button disabled state and conditionally adjusts layout for mobile view. It renders buttons on four background types with appropriate disableType settings, displaying variant-specific hints. Dependencies include React, CustomButton, Gap, and Switch components. Inputs are variant keys, disabled state, and screen size; outputs are rendered interactive buttons with distinct visual states.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/custom-button/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst VARIANTS = {\n    StaticWhite: {\n        stateType: 'static-lightening',\n        contentColor: 'static-white',\n        backgroundColor: '#EB58BF',\n        hint: 'StaticLightening',\n    },\n    White: {\n        stateType: 'lightening',\n        contentColor: 'white',\n        backgroundColor: '#EB58BF',\n        hint: 'Lightening',\n    },\n    StaticBlack: {\n        stateType: 'static-darkening',\n        contentColor: 'static-black',\n        backgroundColor: '#7FEFFA',\n        hint: 'StaticDarkening',\n    },\n    Black: {\n        stateType: 'darkening',\n        contentColor: 'black',\n        backgroundColor: '#7FEFFA',\n        hint: 'Darkening',\n    },\n};\nrender(() => {\n    const [disabled, setDisabled] = React.useState(false);\n    const isMobile = document.body.clientWidth < 450;\n    return (\n        <React.Fragment>\n            <div>\n                <div\n                    style={{\n                        borderRadius: '20px',\n                        backgroundColor: 'var(--color-light-neutral-100)',\n                        padding: '20px',\n                        width: 670,\n                        boxSizing: 'border-box',\n                        color: 'var(--color-light-text-primary)',\n                    }}\n                >\n                    На светлом фоне\n                    <Gap size={12} />\n                    <div style={{ display: 'flex', flexFlow: 'row wrap', gap: '16px' }}>\n                        {Object.keys(VARIANTS).map((title) => (\n                            <CustomButton\n                                {...VARIANTS[title]}\n                                disabled={disabled}\n                                block={isMobile}\n                                key={title}\n                                hint={VARIANTS[title].hint}\n                                disableType='default'\n                            >\n                                {title}\n                            </CustomButton>\n                        ))}\n                    </div>\n                </div>\n            </div>\n            <Gap size={20} />\n            <div>\n                <div\n                    style={{\n                        borderRadius: '20px',\n                        backgroundColor: 'var(--color-static-neutral-100)',\n                        padding: '20px',\n                        width: 670,\n                        boxSizing: 'border-box',\n                        color: 'var(--color-static-text-primary)',\n                    }}\n                >\n                    На светлом статичном фоне\n                    <Gap size={12} />\n                    <div style={{ display: 'flex', flexFlow: 'row wrap', gap: '16px' }}>\n                        {Object.keys(VARIANTS).map((title) => (\n                            <CustomButton\n                                {...VARIANTS[title]}\n                                disabled={disabled}\n                                block={isMobile}\n                                key={title}\n                                hint={VARIANTS[title].hint}\n                                disableType='static'\n                            >\n                                {title}\n                            </CustomButton>\n                        ))}\n                    </div>\n                </div>\n            </div>\n            <Gap size={20} />\n            <div>\n                <div\n                    style={{\n                        borderRadius: '20px',\n                        backgroundColor: 'var(--color-light-neutral-100-inverted)',\n                        padding: '20px',\n                        width: 670,\n                        boxSizing: 'border-box',\n                        color: 'var(--color-light-text-primary-inverted)',\n                    }}\n                >\n                    На тёмном фоне\n                    <Gap size={12} />\n                    <div style={{ display: 'flex', flexFlow: 'row wrap', gap: '16px' }}>\n                        {Object.keys(VARIANTS).map((title) => (\n                            <CustomButton\n                                {...VARIANTS[title]}\n                                disabled={disabled}\n                                block={isMobile}\n                                key={title}\n                                hint={VARIANTS[title].hint}\n                                disableType='inverted'\n                            >\n                                {title}\n                            </CustomButton>\n                        ))}\n                    </div>\n                </div>\n            </div>\n            <Gap size={20} />\n            <div>\n                <div\n                    style={{\n                        borderRadius: '20px',\n                        backgroundColor: 'var(--color-static-neutral-100-inverted)',\n                        padding: '20px',\n                        width: 670,\n                        boxSizing: 'border-box',\n                        color: 'var(--color-static-text-primary-inverted)',\n                    }}\n                >\n                    На тёмном статичном фоне\n                    <Gap size={12} />\n                    <div style={{ display: 'flex', flexFlow: 'row wrap', gap: '16px' }}>\n                        {Object.keys(VARIANTS).map((title) => (\n                            <CustomButton\n                                {...VARIANTS[title]}\n                                disabled={disabled}\n                                block={isMobile}\n                                key={title}\n                                hint={VARIANTS[title].hint}\n                                disableType='static-inverted'\n                            >\n                                {title}\n                            </CustomButton>\n                        ))}\n                    </div>\n                </div>\n            </div>\n            <Gap size='xl' />\n            <Switch\n                checked={disabled}\n                onChange={() => setDisabled((prevState) => !prevState)}\n                label='Недоступна'\n            />\n        </React.Fragment>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Using CustomPickerButton Component in Storybook\nDESCRIPTION: Demonstrates the base `CustomPickerButton` component within a Storybook story. It utilizes Storybook knobs (`color`, `select`, `text`, `boolean`) to allow interactive control over props like `backgroundColor`, `contentColor`, `stateType`, `options`, `label`, `size`, `variant`, `disabled`, `loading`, `leftAddons` (conditionally rendering `StarMIcon`), and `showArrow`. The `options`, `CONTENT_COLORS`, and `STATE_TYPES` constants are used for the select knobs.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/custom-picker-button/src/docs/Component.stories.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Story name='CustomPickerButton'>\n    <CustomPickerButton\n        backgroundColor={color('backgroundColor', '#FF45C3')}\n        contentColor={select('contentColor', CONTENT_COLORS, 'white')}\n        stateType={select('stateType', STATE_TYPES, 'darkening')}\n        options={options}\n        label={text('label', 'Действие')}\n        size={select('size', [32 , 40 , 48 , 56 , 64 , 72], 56)}\n        variant={select('variant', ['default', 'compact'])}\n        disabled={boolean('disabled', false)}\n        loading={boolean('loading', false)}\n        leftAddons={boolean('Иконка слева', false) ? <StarMIcon /> : null}\n        showArrow={boolean('Показывать стрелку', true)}\n    />\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Defining Component Metadata and Header in Storybook\nDESCRIPTION: This code snippet uses Storybook's `<Meta>` component to associate the component with its stories and the `<ComponentHeader>` component to display a header with the component's name and a brief description. The `Meta` tag is used to configure Storybook's behavior for the component, and the `ComponentHeader` provides visual labeling. There are no parameters specified in the Meta tag. The ComponentHeader takes `name` and `children` to specify the name and description of the component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/progress-bar/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Meta of={Stories} />\n\n<ComponentHeader name='ProgressBar' children='Используется для отображения прогресса.' />\n```\n\n----------------------------------------\n\nTITLE: Text Alignment Configuration\nDESCRIPTION: This snippet demonstrates how to align text within the `Text` component using the `align` property.  It showcases left, center, and right alignment options. The `tag` property is used to render the `Text` component as a `div` element. The width of the container is also dynamically set using a ternary operator based on `isMobile()` function.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/text/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ width: isMobile() ? 320 : 200 }}>\n    <Text tag='div' align='center'>\n        По центру\n    </Text>\n    <Gap size='s' />\n    <Text tag='div' align='left'>\n        По левому краю\n    </Text>\n    <Gap size='s' />\n    <Text tag='div' align='right'>\n        По правому краю\n    </Text>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Bar Chart with Line Overlay in JSX\nDESCRIPTION: This example demonstrates how to create a bar chart with two bar series and a line series overlay. It includes configuration for grid, legend, tooltip, brush control, and axis formatting. The chart displays expense and income data with a balance line on top.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/chart/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const cartesianGrid = {\n        vertical: false,\n        horizontal: true,\n        strokeDasharray: 0,\n        stroke: 'var(--color-light-neutral-400)',\n        fill: 'var(--color-light-base-bg-primary)',\n    };\n    const legend = {\n        marginTop: 10,\n    };\n    const tooltip = {\n        separator: ' ',\n        offset: 20,\n        filterNull: true,\n        cursor: {\n            stroke: 'var(--color-light-neutral-400)',\n            strokeWidth: 1,\n        },\n        isAnimationActive: true,\n        animationBegin: 0,\n        animationDuration: 500,\n        animationEasing: 'ease',\n        arrow: true,\n    };\n    const brush = {\n        dataKey: 'label',\n        travellerWidth: 20,\n        height: 20,\n        alwaysShowText: true,\n        stroke: 'var(--color-static-status-blue)',\n    };\n\n    const chartBar = (includeValue) => {\n        const labels = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь']\n        if (includeValue) {\n            return labels.map((label, idx) => ({\n            label: label,\n            value:  Math.floor(Math.random() * 250) + 10\n            }));\n        } else {\n            return labels;\n        }\n    };\n\n    const barChartFirst = {\n        zIndex: 1,\n        chart: 'bar',\n        properties: {\n            name: 'расход',\n            dataKey: 'uv',\n            formatter: (decimal) => `${decimal * 1000}`,\n            fill: 'var(--color-static-graphic-persimmon)',\n        },\n        data: chartBar(true),\n    };\n    const barChartSecond = {\n        zIndex: 10,\n        chart: 'bar',\n        properties: {\n            name: 'приход',\n            dataKey: 'pv',\n            formatter: (decimal) => `${decimal * 1000}`,\n            fill: 'var(--color-static-graphic-green-jungle)',\n        },\n        data: chartBar(true),\n    };\n    const lineChart = {\n        zIndex: 50,\n        chart: 'line',\n        icon: 'circleLine',\n        properties: {\n            name: 'остаток',\n            dataKey: 'cnt',\n            stroke: 'var(--color-static-status-blue)',\n            dot: true,\n            dotSettings: {\n                scale: 1.5,\n                initScale: 1,\n                width: 18,\n                height: 18,\n            },\n            formatter: (decimal) => `${decimal * 1000}`,\n            type: 'monotone',\n            strokeWidth: 2,\n        },\n        data: chartBar(true),\n    };\n    const composeChart = {\n        initMargin: {\n            left: 20,\n        },\n        barSize: 10,\n    };\n    const xAxis = {\n        tickLine: false,\n        axisLine: false,\n        interval: 'preserveStartEnd',\n        tickMargin: 10,\n        dataKey: 'label',\n    };\n    const yAxis = {\n        axisLine: false,\n        type: 'number',\n        tickCount: 6,\n        tickLine: false,\n        tickMargin: 0,\n        tickFormatter: (decimal) => `${decimal}\\xa0тыс.`,\n    };\n\n    return (\n        <div style={{ display: 'flex' }}>\n            <div style={{ width: '600px', height: '400px' }}>\n                <Chart\n                    id='bar-chart'\n                    composeChart={composeChart}\n                    cartesianGrid={cartesianGrid}\n                    xAxis={xAxis}\n                    yAxis={yAxis}\n                    tooltip={tooltip}\n                    legend={legend}\n                    brush={brush}\n                    labels={chartBar(false)}\n                    series={[barChartFirst, barChartSecond, lineChart]}\n                />\n            </div>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering PageIndicatorRunner Component in React Storybook\nDESCRIPTION: This React code snippet defines a Storybook story for the `PageIndicatorRunner` component. It employs `React.createElement` along with Storybook knobs (`select`, `number`) to provide interactive control over the component's properties, including `colors`, `activeElement`, `size`, and `elements`. The component is presented within a styled `div`, which changes its background based on the selected `colors` prop to correctly render different visual themes.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/page-indicator/src/docs/Component.stories.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Story name='PageIndicatorRunner'>\n    {React.createElement(() => {\n        const colors = select(\n            'colors',\n            ['default', 'inverted', 'static', 'static-inverted'],\n            'default',\n        );\n        return (\n            <div\n                style={{\n                    backgroundColor:\n                        colors === 'inverted'\n                            ? 'var(--color-light-base-bg-primary-inverted)'\n                            : 'transparent',\n                    padding: '8px',\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    right: 0,\n                    bottom: 0,\n                }}\n            >\n                <PageIndicatorRunner\n                    activeElement={number('activeElement', 0)}\n                    size={number('size', 4)}\n                    elements={number('elements', 10)}\n                    colors={colors}\n                />\n            </div>\n        );\n    })}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Using getNotificationTestIds Function for Data Test ID Modifiers in JSX\nDESCRIPTION: This code snippet illustrates the object structure returned by the getNotificationTestIds function used to generate selector modifiers for testing Notification component elements. It requires a base string dataTestId and returns an object with 'badge' and 'component' keys suffixed accordingly to uniquely identify UI elements for automated testing.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/notification/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    badge: `${dataTestId}-badge`,,\n    component: `${dataTestId}-component`,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Component Header - JavaScript\nDESCRIPTION: This snippet creates a header for the component using the `<ComponentHeader>` component. It sets the `name` prop to 'Chart' and `children` prop to 'Используется для построения графиков.' (which translates to 'Used for plotting graphs.'). This header provides a visual title and description for the chart component in the Storybook documentation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/chart/src/docs/Component.docs.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ComponentHeader\n    name='Chart'\n    children='Используется для построения графиков.'\n/>\n```\n\n----------------------------------------\n\nTITLE: Exporting CSS variables in JavaScript\nDESCRIPTION: This update fixes the export of CSS variables into a JavaScript file. It ensures that the JavaScript file is present in both the root package and the core-components-vars package.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/vars/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Preventing invalid input[type=number]\nDESCRIPTION: This update disables the input and pasting of characters `[eE]` in input fields with `type=number`. This change aims to prevent unexpected or invalid numerical input.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Adding Visible Options to Select Component\nDESCRIPTION: This change adds the `visible-options` feature to the select component.  This might involve defining a maximum number of options to be shown, introducing a mechanism for displaying more options (e.g., a scrollable list). This improves the user experience.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_87\n\n\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta for Mq Component (JSX)\nDESCRIPTION: Sets up the Storybook documentation page metadata by linking it to the corresponding stories defined in './Component.stories'. This enables Storybook features like ArgsTable and controls integration based on the stories.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/mq/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta of={Stories} />\n```\n\n----------------------------------------\n\nTITLE: Rendering a Customizable Mobile Popup Sheet Component in React (JSX)\nDESCRIPTION: This React JSX snippet implements a mobile-only popup sheet component with adjustable settings including a closer button, swipe-to-close gesture, and optional custom content. It leverages React hooks (useState) for managing open state and a settings object initialized from a predefined SETTINGS array. The component features a button to open the popup, switches to toggle the settings, and conditional rendering inside the PopupSheet for either custom message content or a default styled placeholder. Required dependencies include React, ButtonMobile, CheckboxGroup, Switch, PopupSheet, SystemMessageMobile, Typography, and associated icons/components. Inputs include user interaction events for opening the sheet and toggling settings, and outputs comprise dynamic rendering of the sheet based on state. Limitations include no scroll support within the popup and absence of a desktop version.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/popup-sheet/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst SETTINGS = [\n    { label: 'Крестик', name: 'hasCloser' },\n    { label: 'Закрытие свайпом', name: 'swipeable' },\n    { label: 'Кастомный контент', name: 'customContent' },\n];\n\nrender(() => {\n    const [open, setOpen] = React.useState(false);\n    const [settings, setSettings] = React.useState(() =>\n        SETTINGS.reduce((res, item) => ({ ...res, [item.name]: false }), {}),\n    );\n\n    const handleSettingsChange = (_, { name, checked }) => {\n        setSettings((prevState) => ({ ...prevState, [name]: checked }));\n    };\n\n    return (\n        <div>\n            <ButtonMobile type='button' size='s' onClick={() => setOpen(true)} block={true}>\n                Показать шторку\n            </ButtonMobile>\n\n            <Gap size='m' />\n\n            <CheckboxGroup onChange={handleSettingsChange}>\n                {SETTINGS.map((item) => (\n                    <Switch\n                        key={item.name}\n                        size='m'\n                        label={item.label}\n                        name={item.name}\n                        checked={settings[item.name]}\n                    />\n                ))}\n            </CheckboxGroup>\n\n            <PopupSheet\n                hasCloser={settings.hasCloser}\n                swipeable={settings.swipeable}\n                open={open}\n                onClose={() => setOpen(false)}\n                padding={0}\n            >\n                {settings.customContent ? (\n                    <SystemMessageMobile padding={32}>\n                        <SystemMessageMobile.Graphic padding={{ bottom: 24 }}>\n                            <SuperEllipse size={80}>\n                                <MobilePhoneBubbleLineMIcon color='var(--color-light-neutral-translucent-1300)' />\n                            </SuperEllipse>\n                        </SystemMessageMobile.Graphic>\n\n                        <SystemMessageMobile.Title>\n                            Подтвердите подключение кодом из смс\n                        </SystemMessageMobile.Title>\n\n                        <SystemMessageMobile.Subtitle>\n                            {`Проверили вашу заявку — всё в порядке. Осталось подтвердить подключение`}\n                        </SystemMessageMobile.Subtitle>\n\n                        <SystemMessageMobile.Controls>\n                            <ButtonMobile size='m' view='secondary' onClick={() => setOpen(false)}>\n                                Получить код\n                            </ButtonMobile>\n                        </SystemMessageMobile.Controls>\n                    </SystemMessageMobile>\n                ) : (\n                    <div\n                        style={{\n                            display: 'flex',\n                            alignItems: 'center',\n                            justifyContent: 'center',\n                            height: 200,\n                            color: 'rgba(55, 120, 251, 1)',\n                            backgroundColor: 'rgba(55, 120, 251, 0.1)',\n                        }}\n                    >\n                        <Typography.Text view='caps' weight='bold'>\n                            Custom\n                        </Typography.Text>\n                    </div>\n                )}\n            </PopupSheet>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Allow withZeroMinorPart formatting\nDESCRIPTION: This commit allows formatting the amount withZeroMinorPart. This ensures that the amount is formatted correctly when the minor part (e.g., cents) is zero.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_173\n\n\n\n----------------------------------------\n\nTITLE: CodeInput Component Rendering in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the CodeInput component within a Container. It dynamically adjusts the number of input fields based on whether the device is mobile and uses a breakpoint for responsive design. It imports the CodeInput component and the isMobile function.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/code-input/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Container align = {isMobile() ? 'center' : 'left'}>\n    <CodeInput fields={isMobile() ? 4 : 5} breakpoint={BREAKPOINT}/>\n</Container>\n```\n\n----------------------------------------\n\nTITLE: Rendering Time Input with React\nDESCRIPTION: This snippet demonstrates rendering a time input field. It uses `UniversalDateInput` with the `time` view. The `onChange` prop handles time changes, and the `clear` prop, alongside `onClear`, allows to clear the input value.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/universal-date-input/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [value, setValue] = React.useState('');\n\n    const handleChange = (time) => setValue(time);\n\n    return (\n        <div style={{ width: isMobile() ? '100%' : 320 }}>\n            <UniversalDateInput\n                value={value}\n                onChange={handleChange}\n                view='time'\n                label='Время'\n                labelView={isMobile() ? 'outer' : 'inner'}\n                size={isMobile() ? 48 : 56}\n                breakpoint={BREAKPOINT}\n                block={true}\n                clear={true}\n                onClear={(e) => {\n                    e.stopPropagation();\n                    setValue('');\n                }}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Resizable FormControl Components in React (JSX)\nDESCRIPTION: Demonstrates rendering multiple FormControl components in a vertical layout with various preset sizes (xl, l, m, s, 40) inside a fixed-width container. Dependencies include FormControl and Gap components, isMobile helper, and a BREAKPOINT constant. Each control uses block rendering, dynamic label placement, and a distinct size—expected to be used for responsive forms requiring standardized heights. Inputs: none directly; Outputs: React elements for the UI. Requires all components and props to be available in the context.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/form-control/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n    <div style={{ width: 320 }}>\n        <FormControl\n            block={true}\n            label='Label'\n            labelView={isMobile() ? 'outer' : 'inner'}\n            size='xl'\n            breakpoint={BREAKPOINT}\n        />\n        <Gap size='m' />\n        <FormControl\n            block={true}\n            label='Label'\n            labelView={isMobile() ? 'outer' : 'inner'}\n            size='l'\n            breakpoint={BREAKPOINT}\n        />\n        <Gap size='m' />\n        <FormControl\n            block={true}\n            label='Label'\n            labelView={isMobile() ? 'outer' : 'inner'}\n            size='m'\n            breakpoint={BREAKPOINT}\n        />\n        <Gap size='m' />\n        <FormControl\n            block={true}\n            label='Label'\n            labelView={isMobile() ? 'outer' : 'inner'}\n            size='s'\n            breakpoint={BREAKPOINT}\n        />\n        <Gap size='m' />\n        <FormControl\n            block={true}\n            label='Label'\n            labelView={isMobile() ? 'outer' : 'inner'}\n            size={40}\n            breakpoint={BREAKPOINT}\n        />\n    </div>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple React Table with Core Components\nDESCRIPTION: A basic implementation of a table component displaying data with dates, counterparty information, and monetary amounts. Uses Typography and Amount components for formatting cell content.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/table/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst data = [\n    {\n        id: 28,\n        date: '30.06.2022',\n        title: 'ООО \"КОРПУС-ИТ\"',\n        sum: 21000000,\n    },\n    {\n        id: 12,\n        date: '30.06.2022',\n        title: 'ОБЩЕСТВО С ОГРАНИЧЕННОЙ ОТВЕТСТВЕННОСТЬЮ \"МОБИЛСТИЛ\"',\n        subtitle:\n            'Оказание услуг по договору № 26/09 на основании акта № 1450 от 30 июня 2020 года, в т.ч. НДС 18%',\n        sum: 10002030,\n    },\n    {\n        id: 5,\n        date: '30.06.2022',\n        title: 'ИП Жуков Валерий Сергеевич',\n        subtitle: 'Услуги по ремонту за июнь, НДС не облагается',\n        sum: 3000069,\n    },\n];\n\nrender(() => {\n    return (\n        <Table>\n            <Table.THead>\n                <Table.THeadCell title='Дата'>Дата</Table.THeadCell>\n\n                <Table.THeadCell title='Контрагент'>Контрагент</Table.THeadCell>\n\n                <Table.THeadCell title='Сумма' textAlign='right' width={268}>\n                    Сумма\n                </Table.THeadCell>\n            </Table.THead>\n            <Table.TBody>\n                {data.map((row) => (\n                    <Table.TRow key={row.id}>\n                        <Table.TCell>\n                            <Typography.Text view='primary-small' tag='div'>\n                                {row.date}\n                            </Typography.Text>\n                        </Table.TCell>\n\n                        <Table.TCell>\n                            <Space size={2}>\n                                <Typography.Text view='primary-small' tag='div'>\n                                    {row.title}\n                                </Typography.Text>\n                                <Typography.Text view='primary-small' color='secondary'>\n                                    {row.subtitle}\n                                </Typography.Text>\n                            </Space>\n                        </Table.TCell>\n\n                        <Table.TCell>\n                            <Amount\n                                value={row.sum}\n                                currency='RUR'\n                                minority={100}\n                                view='withZeroMinorPart'\n                                bold='full'\n                                transparentMinor={true}\n                            />\n                        </Table.TCell>\n                    </Table.TRow>\n                ))}\n            </Table.TBody>\n        </Table>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Icon Addons - React\nDESCRIPTION: This snippet defines a reusable React component `ShowIcontAddons` that renders a specified number of `IconButton` components with the `DiamondsMIcon`. It accepts a `quantity` prop to determine the number of icons to render.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/navigation-bar/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ShowIcontAddons = ({ quantity }) => (\n    <div style={{ display: 'flex', gap: '4px', padding: '0 4px' }}>\n        {Array(quantity)\n            .fill('')\n            .map((_, key) => (\n                <div key={key}>\n                    <IconButton view='primary' size={40} icon={DiamondsMIcon} />\n                </div>\n            ))}\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Collapse Component from Alfaleab Core Components in JSX\nDESCRIPTION: This snippet shows how to import the Collapse component from the @alfalab/core-components/collapse package for use within React JSX code. It assumes the presence of the Alfaleab core-components package installed in the project dependencies. This import statement is required to utilize Collapse in JSX components and to enable further manipulation of its properties as referenced by the ArgsTable.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/collapse/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Collapse } from '@alfalab/core-components/collapse';\n```\n\n----------------------------------------\n\nTITLE: Live Loader Example in JSX\nDESCRIPTION: This code snippet provides a live example of the Loader component. It demonstrates how to render the Loader component within a JSX environment. No specific properties are set, implying the use of default values.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/loader/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Loader />\n```\n\n----------------------------------------\n\nTITLE: Rendering Side Panel Controls and Component React\nDESCRIPTION: Renders the UI for configuring and displaying the `SidePanelMobile`. It includes a button to open the panel, `SelectMobile` components for header/footer view selection, and `CheckboxGroup` components containing `Switch` controls for boolean header/footer settings. Finally, it renders the `SidePanelMobile` component itself, conditionally rendering its header based on derived state and passing configuration props.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/side-panel/src/docs/description.mdx#_snippet_11\n\nLANGUAGE: React\nCODE:\n```\n<Container>\n            <Button size='xs' onClick={handleOpen}>\n                Открыть сайд панель\n            </Button>\n\n            <Gap size='2xl' />\n\n            <p style={{ margin: '0 0 var(--gap-12) 0' }}>Настройки шапки</p>\n\n            <SelectMobile\n                block={true}\n                options={HEADER_SELECT_OPTIONS}\n                label='Заголовок'\n                selected={headerViewSelected}\n                onChange={({ selected }) => setHeaderView(selected.key)}\n                Option={BaseOption}\n            />\n\n            <Gap size='m' />\n\n            <CheckboxGroup onChange={handleHeaderSettingsChange}>\n                {HEADER_SETTINGS.map((item) => (\n                    <Switch\n                        key={item.name}\n                        size='m'\n                        label={item.label}\n                        name={item.name}\n                        checked={headerSettings[item.name]}\n                    />\n                ))}\n            </CheckboxGroup>\n\n            <Gap size='2xl' />\n\n            <CheckboxGroup\n                label='Примеры наполнения контентной части'\n                onChange={handleHeaderSettingsChange}\n            >\n                <Switch\n                    size='m'\n                    label='Заголовок в контентной области'\n                    name='titleInContent'\n                    checked={headerSettings.titleInContent}\n                />\n            </CheckboxGroup>\n\n            <Gap size='2xl' />\n\n            <p style={{ margin: '0 0 var(--gap-12) 0' }}>Настройки футера</p>\n\n            <SelectMobile\n                block={true}\n                options={FOOTER_SELECT_OPTIONS}\n                label='Лейаут'\n                selected={footerViewSelected}\n                onChange={({ selected }) => setFooterView(selected.key)}\n                Option={BaseOption}\n            />\n\n            <Gap size='m' />\n\n            <CheckboxGroup label='Настройки футера' onChange={handleFooterSettingsChange}>\n                {FOOTER_SETTINGS.map((item) => (\n                    <Switch\n                        key={item.name}\n                        size='m'\n                        label={item.label}\n                        name={item.name}\n                        checked={footerSettings[item.name]}\n                    />\n                ))}\n            </CheckboxGroup>\n\n            <SidePanelMobile open={open} onClose={handleClose} key={getKey()}>\n                {showHeader && (\n                    <SidePanelMobile.Header\n                        hasCloser={headerSettings.hasCloser}\n                        hasBackButton={headerSettings.hasBackButton}\n                        sticky={headerSettings.sticky}\n                        align={\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Component from @alfalab/core-components in JavaScript\nDESCRIPTION: This snippet imports the Checkbox component from the @alfalab/core-components library to be used within the project. It establishes dependency setup for checkbox UI elements, which can be extended or styled further as needed.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/checkbox/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Checkbox } from '@alfalab/core-components/checkbox';\n```\n\n----------------------------------------\n\nTITLE: Configuring Calendar with Events, Holidays, and Off Days in React\nDESCRIPTION: Example showing how to configure a Calendar component with special dates: events on specific days, off days (Mondays), and holidays (weekends). The example includes both desktop and mobile implementations.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [value, setValue] = React.useState();\n    const defaultDate = new Date('May 01, 2023 00:00:00');\n    const events = [defaultDate.setDate(4), defaultDate.setDate(10), defaultDate.setDate(14)];\n\n    const offDays = [\n        defaultDate.setDate(1),\n        defaultDate.setDate(8),\n        defaultDate.setDate(15),\n        defaultDate.setDate(22),\n        defaultDate.setDate(29),\n    ];\n\n    const holidays = [\n        defaultDate.setDate(6),\n        defaultDate.setDate(7),\n        defaultDate.setDate(13),\n        defaultDate.setDate(14),\n        defaultDate.setDate(20),\n        defaultDate.setDate(21),\n        defaultDate.setDate(27),\n        defaultDate.setDate(28),\n    ];\n\n    const calendarStyles = {\n        border: '1px solid rgba(233, 233, 235, 1)',\n        borderRadius: '8px',\n        boxSizing: 'border-box',\n        boxShadow: 'var(--shadow-m)',\n    };\n\n    return (\n        <div style={{ width: '344px', ...calendarStyles }}>\n            <CalendarDesktop\n                defaultMonth={defaultDate.getTime()}\n                value={value}\n                onChange={setValue}\n                responsive={true}\n                selectorView='month-only'\n                events={events}\n                offDays={offDays}\n                holidays={holidays}\n                showCurrentYearSelector={true}\n            />\n        </div>\n    );\n});\n//MOBILE\nrender(() => {\n    const [value, setValue] = React.useState();\n    const [open, setOpen] = React.useState(false);\n    const defaultDate = new Date('May 01, 2023 00:00:00');\n    const events = [defaultDate.setDate(4), defaultDate.setDate(10), defaultDate.setDate(14)];\n\n    const offDays = [\n        defaultDate.setDate(1),\n        defaultDate.setDate(8),\n        defaultDate.setDate(15),\n        defaultDate.setDate(22),\n        defaultDate.setDate(29),\n    ];\n\n    const holidays = [\n        defaultDate.setDate(6),\n        defaultDate.setDate(7),\n        defaultDate.setDate(13),\n        defaultDate.setDate(14),\n        defaultDate.setDate(20),\n        defaultDate.setDate(21),\n        defaultDate.setDate(27),\n        defaultDate.setDate(28),\n    ];\n\n    return (\n        <Container>\n            <Button onClick={() => setOpen(true)} block={true}>\n                Открыть календарь\n            </Button>\n            <CalendarMobile\n                value={value}\n                onChange={setValue}\n                onClose={() => setOpen(false)}\n                open={open}\n                selectorView='month-only'\n                events={events}\n                offDays={offDays}\n                holidays={holidays}\n            />\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Indicator Views - Mobile\nDESCRIPTION: This snippet showcases Indicator components with various `view` properties ('red', 'grey', and 'white'). It uses a state variable to control the border and includes a `Switch` component for toggling the border. It is a mobile version of the previous code snippet. The layout utilizes a flex container to arrange the indicators horizontally. The components used are Container, Indicator, Gap, and Switch.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/indicator/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\nconst [border, setBorder] = React.useState(false);\n\nconst styles = {\n    display: 'flex',\n    justifyContent: 'center',\n    gap: '12px',\n    width: 320,\n    padding: 20,\n    backgroundColor: 'var(--color-light-base-bg-secondary)',\n    borderRadius: '12px',\n    boxSizing: 'border-box',\n    alignItems: 'center',\n};\n\n    return (\n        <Container>\n\n            <div style={styles}>\n                <Indicator height={24} value={1} view='red' border={border} />\n                <Indicator height={24} value={99} view='red' border={border} />\n                <Indicator height={24} value={100} view='red' border={border} />\n            </div>\n            <Gap size='xs' />\n            <div style={styles}>\n                <Indicator height={24} value={1} view='grey' border={border} />\n                <Indicator height={24} value={99} view='grey' border={border} />\n                <Indicator height={24} value={100} view='grey' border={border} />\n            </div>\n            <Gap size='xs' />\n            <div style={styles}>\n                <Indicator height={24} value={1} view='white' border={border} />\n                <Indicator height={24} value={99} view='white' border={border} />\n                <Indicator height={24} value={100} view='white' border={border} />\n            </div>\n            <Gap size='l' />\n            <Switch\n                block={true}\n                checked={border}\n                label='Обводка'\n                onChange={() => setBorder(!border)}\n            />\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Date Formatting and Range Selection with FilterTag\nDESCRIPTION: Code for formatting dates and displaying a date range selection in a FilterTag component. The component shows a selected date range and provides functionality to clear the selection.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/filter-tag/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst day = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate();\nconst month = date.getMonth() + 1 < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1;\nconst year = date.getFullYear();\n\nreturn `${day}.${month}.${year}`;\n}, []);\n\nconst selectedRange = React.useMemo(() => {\n    if (selectedFrom && selectedTo) {\n        const selectedFromDate = new Date(selectedFrom);\n        const selectedToDate = new Date(selectedTo);\n        return `${getDateString(selectedFromDate)} - ${getDateString(selectedToDate)}`;\n    }\n    return '';\n}, [selectedFrom, selectedTo]);\n\nconst checkedContent = (\n    <span>\n        {!label && 'Диапазон значений:'}\n        <b> {selectedRange && selectedRange}</b>\n    </span>\n);\nconst content = <span>Диапазон значений</span>;\n\nreturn (\n    <>\n        <SelectMobile\n            placeholder='Одиночный выбор'\n            allowUnselect={true}\n            popoverPosition='bottom-start'\n            options={options}\n            Field={CustomField}\n            onChange={handleChangeSelected}\n            selected={selected}\n            label={label}\n            fieldProps={{ size: 32 }}\n        />\n        <Gap size='m' />\n        <SelectMobile\n            placeholder='Множественный выбор'\n            allowUnselect={true}\n            popoverPosition='bottom-start'\n            options={options}\n            Field={CustomFieldMultiple}\n            onChange={handleChangeMultiple}\n            selected={selectedMultiple}\n            multiple={true}\n            label={label}\n            fieldProps={{ size: 32 }}\n        />\n        <Gap size='m' />\n        <CalendarMobile\n            open={open}\n            onClose={() => setOpen(false)}\n            value={value}\n            selectedFrom={selectedFrom}\n            selectedTo={selectedTo}\n            onChange={handleUpdatePeriodr}\n            selectorView='month-only'\n        />\n        <FilterTag\n            size={32}\n            onClick={handleOpen}\n            onClear={handleClear}\n            checked={selectedRange}\n            open={open}\n        >\n            {selectedRange ? checkedContent : content}\n        </FilterTag>\n        <Gap size='m' />\n        <Switch\n            block={true}\n            checked={label}\n            label='Скрывать лейбл после выбора'\n            onChange={() => setLabel(!label)}\n        />\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Confirmation Components in React (JSX)\nDESCRIPTION: Demonstrates how to import the Confirmation component and its platform-specific variants from the '@alfalab/core-components/confirmation' package. This setup is prerequisite for utilizing the confirmation UI in React projects and ensures access to desktop, mobile, and responsive implementations.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/confirmation/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Confirmation } from '@alfalab/core-components/confirmation';\nimport { ConfirmationDesktop } from '@alfalab/core-components/confirmation/desktop';\nimport { ConfirmationMobile } from '@alfalab/core-components/confirmation/mobile';\n```\n\n----------------------------------------\n\nTITLE: Import Statements for Markdown Components in JavaScript\nDESCRIPTION: Defines import statements to include core Markdown components for general, mobile, and desktop use cases from the @alfalab library, establishing dependencies needed for rendering Markdown content across different device viewports.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/markdown/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Markdown } from '@alfalab/core-components/markdown';\nimport { MarkdownMobile } from '@alfalab/core-components/markdown/mobile';\nimport { MarkdownDesktop } from '@alfalab/core-components/markdown/desktop';\n```\n\n----------------------------------------\n\nTITLE: Validating Input on Blur Event in React - JavaScript\nDESCRIPTION: This snippet provides a reusable InputWrapper component that performs validation when the input field loses focus. The component checks if the entered value matches the expected 'patronymic' prop, displaying a custom error message when it does not. Error state resets when the user modifies the input. Dependencies include React, an Input component, and the ability to pass placeholder, patronymic, and errMsg props. The render section demonstrates two instances of InputWrapper for different validation scenarios.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/validation.stories.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst InputWrapper = ({ patronymic, placeholder, errMsg }) => {\n    const [value, setValue] = React.useState('');\n    const [error, setError] = React.useState(false);\n\n    const validate = () => {\n        if (value.toLowerCase() !== patronymic) {\n            setError(errMsg);\n        }\n    };\n\n    const handleChange = (e) => {\n        setValue(e.target.value);\n        setError(false);\n    };\n\n    const handleBlur = () => validate();\n\n    return (\n        <Input\n            value={value}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            size='m'\n            block={true}\n            placeholder={placeholder}\n            error={error}\n        />\n    );\n};\n\nrender(() => {\n    return (\n        <div style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}>\n            <InputWrapper\n                placeholder='Отчество Александра Пушкина'\n                patronymic='сергеевич'\n                errMsg='Александр Сергеевич – наше всё'\n            />\n            <Gap size='m' />\n            <InputWrapper\n                placeholder='Отчество Афанасия Фета'\n                patronymic='афанасьевич'\n                errMsg='Отца Афанасия тоже звали Афанасием'\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Icon View Components in React JSX\nDESCRIPTION: Shows how to import icon view components from @alfalab/core-components. Includes both fully loaded components and a component without preloaded icons that requires a separate paths import.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/icon-view/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Компоненты с предзагрузкой всех иконок\nimport { Circle } from '@alfalab/core-components/icon-view/circle';\nimport { SuperEllipse } from '@alfalab/core-components/icon-view/super-ellipse';\nimport { Rectangle } from '@alfalab/core-components/icon-view/rectangle';\nimport { NoShape } from '@alfalab/core-components/icon-view/no-shape';\n\n// Компонент без предзагрузки иконок\nimport { SuperEllipseBlank, pathsMap16 } from '@alfalab/core-components/icon-view/super-ellipse';\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Documentation for KeyboardFocusable Component in JSX\nDESCRIPTION: This code snippet sets up the Storybook documentation page for the KeyboardFocusable component. It imports necessary Storybook addons, component stories, and documentation fragments to create a structured documentation with tabs for description, changelog, and development guidelines.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/keyboard-focusable/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta of={Stories} />\n\n<ComponentHeader\n    name='KeyboardFocusable'\n    children='Используется для подсветки элемента при фокусе.'\n/>\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Generating dataTestId Modifiers Object for PassCodeV1 Component in React JSX\nDESCRIPTION: This snippet illustrates the structure of an object returned by the getPassCodeTestIds function, designed to generate standardized dataTestId modifiers for querying various DOM elements within the PassCodeV1 component during testing. The input parameter is a base dataTestId string, which is concatenated with suffixes to identify specific parts like the wrapper, input progress, keypad, and buttons. This pattern improves test query consistency and maintainability.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pass-code-v1/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    passCode: `${dataTestId}-wrapper`,\n    inputProgress: `${dataTestId}-input-progress`,\n    keypad: `${dataTestId}-keypad`,\n    keypadButton: `${dataTestId}-keypad-button`,\n    backspaceButton: `${dataTestId}-backspace-button`,\n    error: `${dataTestId}-error`,\n    message: `${dataTestId}-message`,\n};\n```\n\n----------------------------------------\n\nTITLE: Introducing Border-Radius Vars\nDESCRIPTION: The update introduces border-radius variables. These variables define the corner rounding of UI elements.  This provides a centralized way to control the border radius settings across the UI, which promotes consistency and simplifies design updates.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_100\n\n\n\n----------------------------------------\n\nTITLE: Adding InputAutocompleteMobile component\nDESCRIPTION: This commit adds a new InputAutocompleteMobile component. This new component seems to be purposed to mobile devices.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/input-autocomplete/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\n**input-autocomplete:** add new component InputAutocompleteMobile ([#96](https://github.com/core-ds/core-components/issues/96)) ([a0e9f95](https://github.com/core-ds/core-components/commit/a0e9f95edbfcd6722e99647d75a262805e81a4a7))\n```\n\n----------------------------------------\n\nTITLE: Gallery with Image Preview - React\nDESCRIPTION: This example demonstrates how to display a gallery with image previews.  Clicking on a preview image opens the Gallery component, displaying the corresponding image. The `slideIndex` state variable manages the currently selected image within the gallery. The `isMobile()` function (not provided) is assumed to determine if the layout should be adjusted for mobile devices.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/gallery/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst images = [\n    {\n        name: 'Вертикальное изображение',\n        src: './images/gallery_1.jpg',\n    },\n    {\n        name: 'Горизонтальное  изображение',\n        src: './images/gallery_2.jpg',\n    },\n    {\n        name: 'Квадратное изображение',\n        src: './images/gallery_3.jpg',\n    },\n    {\n        name: 'Маленькое изображение',\n        src: './images/gallery_4.jpg',\n    },\n];\n\nrender(() => {\n    const [open, setOpen] = React.useState(false);\n    const [slideIndex, setSlideIndex] = React.useState(0);\n\n    const openGallery = (slideIndex) => {\n        setSlideIndex(slideIndex);\n        setOpen(true);\n    };\n\n    const closeGallery = () => setOpen(false);\n\n    return (\n        <div>\n            <div\n                style={{\n                    display: 'flex',\n                    flexWrap: 'wrap',\n                    justifyContent: isMobile() ? 'center' : 'left',\n                }}\n            >\n                {images.map((image, index) => (\n                    <div\n                        key={image.src}\n                        onClick={() => {\n                            openGallery(index);\n                        }}\n                        style={{\n                            width: '200px',\n                            height: '200px',\n                            cursor: 'pointer',\n                            backgroundSize: 'cover',\n                            backgroundImage: `url(${image.src})`,\n                            margin: '4px',\n                        }}\n                    />\n                ))}\n            </div>\n\n            <Gallery\n                open={open}\n                onClose={closeGallery}\n                images={images}\n                slideIndex={slideIndex}\n                onSlideIndexChange={setSlideIndex}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing ProductCover.Single Appearance (JSX)\nDESCRIPTION: This example demonstrates how to customize the appearance of the ProductCover.Single component using different views defined in the singleView object. It uses a Select component to allow the user to choose between different card configurations, such as a default card, a light locked card, a dark locked card, or a product view.  The selected view determines the properties passed to the ProductCover.Single component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/product-cover/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst VIEW_SELECT_OPTIONS = [\n    { key: 'card', content: 'Карта' },\n    { key: 'defaultCard', content: 'Карта без рубашки' },\n    { key: 'lightCard', content: 'Заблокированная светлая карта' },\n    { key: 'darkCard', content: 'Заблокированная тёмная карта' },\n    { key: 'product', content: 'Продукт' },\n];\n\nrender(() => {\n    const [viewSelected, setViewSelected] = React.useState(VIEW_SELECT_OPTIONS[0].key);\n\n    const baseCard = {\n        cardNumber: 1234000000001234,\n        baseUrl: 'https://online.alfabank.ru/cards-images/cards/',\n        layers: 'BACKGROUND,LOGO,PAYMENT_SYSTEM',\n        cardId: 'RM',\n    };\n\n    const singleView = {\n        card: baseCard,\n        defaultCard: {},\n        lightCard: {\n            ...baseCard,\n            icon: LockClosedMIcon,\n            overlayProps: {\n                colors: 'inverted',\n                visible: true,\n            },\n            iconColor: 'var(--color-static-text-primary-inverted)',\n        },\n        darkCard: {\n            ...baseCard,\n            icon: LockClosedMIcon,\n            cardId: 'VV',\n            overlayProps: {\n                visible: true,\n            },\n        },\n        product: {\n            icon: SafeBoxMIcon,\n            borderColor: 'var(--color-light-neutral-translucent-300)',\n            iconColor: 'var(--color-light-text-secondary)',\n        },\n    };\n\n    return (\n        <div style={{ width: 320 }}>\n            <Select\n                block={true}\n                options={VIEW_SELECT_OPTIONS}\n                label='Пример'\n                labelView={isMobile() ? 'outer' : 'inner'}\n                size={isMobile() ? 48 : 56}\n                selected={viewSelected}\n                onChange={({ selected }) => setViewSelected(selected.key)}\n                Option={BaseOption}\n            />\n            <Gap size={20} />\n            <ProductCover.Single\n                size={40}\n                cardNumber={singleView[viewSelected].cardNumber}\n                baseUrl={singleView[viewSelected].baseUrl}\n                layers={singleView[viewSelected].layers}\n                cardId={singleView[viewSelected].cardId}\n                overlayProps={singleView[viewSelected].overlayProps}\n                icon={singleView[viewSelected].icon}\n                iconColor={singleView[viewSelected].iconColor}\n                borderColor={singleView[viewSelected].borderColor}\n                backgroundColor='var(--color-light-neutral-200)'\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ModalContext Type in TSX\nDESCRIPTION: This TypeScript code defines the ModalContext type, which is used to manage the state and interactions within the modal. It includes properties for controlling header and footer visibility, scroll behavior, highlighted states, callbacks for custom headers/footers, a close handler, and a content ref.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/base-modal/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport type ModalContext = {\n    // Указаывает, используется ли футер\n    hasFooter?: boolean;\n    // Указаывает, используется ли шапка (например, позволяет гибко настраивать отступы)\n    hasHeader?: boolean;\n    // Указаывает наличие скролла\n    hasScroll?: boolean;\n    // Указаывает, что контент прокручен\n    headerHighlighted?: boolean;\n    // Указаывает, что контент прокручен не до конца\n    footerHighlighted?: boolean;\n    // Коллбэк, который должна вызвать кастомная шапка\n    setHasHeader: (exists: boolean) => void;\n    // Коллбэк, который должна вызвать кастомный футер\n    setHasFooter: (exists: boolean) => void;\n    // Позволяет закрыть модальное окно\n    onClose: (event: MouseEvent<HTMLElement>) => void;\n    // Реф, который должен быть установлен контентой области\n    contentRef: Ref<HTMLElement>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using ArgsTable for Component Properties Documentation\nDESCRIPTION: This snippet shows how to generate a properties table for the Chart component using ArgsTable, which displays all its props including data, options, and style configurations, aiding in component documentation and testing.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/chart/src/docs/development.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ArgsTable of={Chart} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapsible Tabs with Hide Option on Desktop in React\nDESCRIPTION: This React snippet illustrates desktop-only tab navigation with the ability to hide specific tabs into a 'More' menu, facilitating overflow management. It tracks the selected tab and manages an array of hidden tab IDs, updating the view accordingly. Dependencies include React and the TabsCollapsible component, alongside UI controls such as CheckboxGroup and Checkbox.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst TABS = [\n    { title: 'Aurum', id: 'tab-1' },\n    { title: 'Bercelium', id: 'tab-2' },\n    { title: 'Curium', id: 'tab-3' },\n    { title: 'Neptunium', id: 'tab-4' },\n    { title: 'Plutonuim', id: 'tab-5' },\n    { title: 'Rubidium', id: 'tab-6' },\n    { title: 'Californium', id: 'tab-7' },\n    { title: 'Hydrogenium', id: 'tab-8' },\n    { title: 'Helium', id: 'tab-9' },\n    { title: 'Lithium', id: 'tab-10' },\n    { title: 'Beryllium', id: 'tab-11' },\n    { title: 'Borum', id: 'tab-12' },\n    { title: 'Carboneum', id: 'tab-13' },\n    { title: 'Nitrogenium', id: 'tab-14' },\n    { title: 'Oxygenium', id: 'tab-15' },\n];\n\nrender(() => {\n    const [selectedId, setSelectedId] = React.useState(TABS[0].id);\n    const [collapsibleTabsIds, setCollapsibleTabsIds] = React.useState([]);\n\n    const handleChange = (event, { selectedId }) => {\n        setSelectedId(selectedId);\n    };\n\n    const handleCollapsibleChange = (e, { name, checked }) => {\n        if (checked) {\n            setCollapsibleTabsIds((p) => [...p, name]);\n        } else {\n            setCollapsibleTabsIds((p) => p.filter((id) => id !== name));\n        }\n    };\n\n    return (\n        <>\n            <TabsCollapsible\n                key={collapsibleTabsIds.length}\n                selectedId={selectedId}\n                onChange={handleChange}\n                collapsedTabsIds={collapsibleTabsIds}\n            >\n                {TABS.map((item) => (\n                    <Tab title={item.title} id={item.id} key={item.id} />\n                ))}\n            </TabsCollapsible>\n            <br />\n            <Typography.Text view='primary-medium' color='secondary'>\n                Выбран таб: {TABS.find((tab) => tab.id === selectedId).title}\n            </Typography.Text>\n\n            <Gap size='l' />\n\n            <CheckboxGroup\n                label='Скрытые табы'\n                direction='vertical'\n                value={collapsibleTabsIds}\n                onChange={handleCollapsibleChange}\n            >\n                {TABS.slice(4, 7).map((t) => (\n                    <Checkbox\n                        key={t.id}\n                        label={t.title}\n                        name={t.id}\n                        checked={collapsibleTabsIds.includes(t.id)}\n                    />\n                ))}\n            </CheckboxGroup>\n        </>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Tag component min-width\nDESCRIPTION: Sets a minimum width for Tag components to ensure visual consistency across different sizes and content lengths. Uses CSS or style-in-JS within React components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_128\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-tag min-width styling\n```\n\n----------------------------------------\n\nTITLE: Applying CSS variables with CssVars in Storybook\nDESCRIPTION: This snippet uses the CssVars block to apply custom CSS styles to the component by passing imported styles as CSS variables. It facilitates styling customization within the storybook environment or component previews.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/custom-button/src/docs/development.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<CssVars css={styles} />\n```\n\n----------------------------------------\n\nTITLE: Changing styles of Skeleton component\nDESCRIPTION: Provides style updates to the Skeleton component for better visual appearance or responsiveness. Relies on CSS or style-in-JS for implementation, applicable during loading states.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_120\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-skeleton style adjustments\n```\n\n----------------------------------------\n\nTITLE: Propagating Storybook Theme and Mode Styles - JavaScript\nDESCRIPTION: This JavaScript function is designed to run within a Storybook documentation page's iframe. It accesses the parent window's document to find theme and mode stylesheet elements (identified by specific IDs) and clones them into the current document's head. This ensures that components rendered within the iframe inherit the theme and mode styles selected in the main Storybook UI. It depends on the parent Storybook frame containing elements with `THEME_TAG_ID` and `MODE_COLORS_TAG_ID`.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/utils/mobile.stories.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function InitialThemeAndMode() {\n    const parentDoc = window.parent.document;\n    const themeStyles = parentDoc.getElementById(THEME_TAG_ID);\n    const modeStyles = parentDoc.getElementById(MODE_COLORS_TAG_ID);\n    if (themeStyles) document.head.appendChild(themeStyles.cloneNode(true));\n    if (modeStyles) document.head.appendChild(modeStyles.cloneNode(true));\n}\n```\n\n----------------------------------------\n\nTITLE: Updating badge and picker-button dependencies\nDESCRIPTION: This section updates dependencies, including 'badge' to version 5.0.0 and 'picker-button' to 10.2.2.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Rendering Indicator Component - Desktop\nDESCRIPTION: This snippet renders multiple instances of an Indicator component within a flex container.  The `styles` object defines the layout properties, including display, justification, gap, width, padding, background color, border radius, box sizing and alignment. The  `Indicator`  component's height is set in pixels. It is a demonstration for the desktop view.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/indicator/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst styles = {\n    display: 'flex',\n    justifyContent: 'center',\n    gap: '20px',\n    width: 342,\n    padding: 20,\n    backgroundColor: 'var(--color-light-base-bg-secondary)',\n    borderRadius: '12px',\n    boxSizing: 'border-box',\n    alignItems: 'center',\n};\n\nrender(\n    <Container>\n        <div style={styles}>\n            <Indicator height={48} value={1} view='red' />\n            <Indicator height={40} value={1} view='red' />\n            <Indicator height={32} value={1} view='red' />\n            <Indicator height={24} value={1} view='red' />\n            <Indicator height={20} value={1} view='red' />\n            <Indicator height={16} value={1} view='red' />\n            <Indicator view='red' />\n        </div>\n    </Container>\n);\n```\n\n----------------------------------------\n\nTITLE: Import Textarea Component (JSX)\nDESCRIPTION: This code snippet demonstrates how to import the Textarea component from the @alfalab/core-components library in a JSX file.  This import allows you to use the Textarea component in your React application.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/textarea/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Textarea } from '@alfalab/core-components/textarea';\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropzone with Status Updates (React)\nDESCRIPTION: This code snippet demonstrates a React component that utilizes a Dropzone for handling file uploads. It manages the list of files, the download status (success or error), and updates the UI based on these states. The component also includes radio buttons to simulate different download outcomes.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/dropzone/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [filesList, setFilesList] = React.useState([]);\n    const [ downloadStatus, setDownloadStatus] = React.useState('success');\n\n    const handleDrop = files => {\n        setFilesList(\n            Array.from(files)\n                .map(file => file.name)\n                .filter(Boolean),\n        );\n    };\n    const onDownloadStatusChange = (_, payload) => {\n        setDownloadStatus(payload.value);\n        setFilesList([])\n    };\n    \n    const stylesStatus = {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: 724,\n        height: 200,\n    }\n\n    const stylesText = {\n        lineHeight: '24px',\n        marginTop: 8,\n    }\n\n    const isError = filesList.length && downloadStatus === 'error';\n\n    const statusDropzone = (text, Icon)=> (\n        <div style={stylesStatus}> \n            <Icon />\n            <span style={stylesText}>{text}</span>\n        </div>\n    )\n\n    return (\n        <Space size={24}>\n            <Dropzone\n                error={isError}\n                onDrop={handleDrop}\n            >\n                    {filesList.length > 0 ? (\n                        downloadStatus === 'success' ?\n                        statusDropzone('Успех',CheckmarkMIcon ) : //\"Success\"\n                        statusDropzone('Ошибка',CrossMIcon )  //\"Error\"\n                    ) : (\n                        statusDropzone('Перетащите файлы',ContainerMIcon ) //\"Drag files\"\n                    )}\n            </Dropzone>\n            <RadioGroup\n                label='Состояние после загрузки'  //\"Status after uploading\"\n                direction='vertical'\n                name='radioGroup'\n                onChange={onDownloadStatusChange}\n                value={downloadStatus}\n            >\n                <Radio size='m' label='Успех' value='success' />\n                <Radio size='m' label='Ошибка' value='error' />\n            </RadioGroup>\n        </Space>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sorting Head Cells in React Table\nDESCRIPTION: This snippet demonstrates a sortable table header cell component that visualizes sorting direction with icons and manages sorting state. It provides visual cues for sorted columns, supports default sorting states, and calls a callback function to trigger re-sorting when clicked. It is designed to be integrated into a larger table component setup.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/table/src/docs/description.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst data = [\n    {\n        id: 1,\n        date: '27.06.2022',\n        title: 'ИП Жуков Валерий Сергеевич',\n        subtitle: 'Услуги по ремонту за июнь, НДС не облагается',\n        sum: 21000000,\n    },\n    {\n        id: 2,\n        date: '28.06.2022',\n        title: 'ОБЩЕСТВО С ОГРАНИЧЕННОЙ ОТВЕТСТВЕННОСТЬЮ \"МОБИЛСТИЛ\"',\n        subtitle:\n            'Оказание услуг по договору № 26/09 на основании акта № 1450 от 30 июня 2020 года, в т.ч. НДС 18%',\n        sum: 10002030,\n    },\n    {\n        id: 3,\n        date: '29.06.2022',\n        title: 'ООО \"КОРПУС-ИТ\"',\n        sum: 3000069,\n    },\n    {\n        id: 4,\n        date: '30.06.2022',\n        title: 'MasterBrok',\n        sum: 42130000,\n    },\n];\n\nrender(() => {\n    const [sortKey, setSortKey] = React.useState(undefined);\n    const [isSortedDesc, setIsSortedDesc] = React.useState(undefined);\n\n    const defaultIsSortedDesc = false;\n\n    const handleSort = (key) => {\n        setSortKey(key);\n\n        if (isSortedDesc !== undefined) {\n            setIsSortedDesc(!isSortedDesc ? undefined : defaultIsSortedDesc);\n        } else {\n            setIsSortedDesc(!defaultIsSortedDesc);\n        }\n    };\n\n    const sortedData = React.useMemo(() => {\n        if (!sortKey || isSortedDesc === undefined) return data;\n\n        return [...data].sort((a, b) => {\n            if (sortKey === 'sum') {\n                return isSortedDesc ? b.sum - a.sum : a.sum - b.sum;\n            }\n\n            if (sortKey === 'date') {\n                return isSortedDesc ? b.date.localeCompare(a.date) : a.date.localeCompare(b.date);\n            }\n        });\n    }, [data, isSortedDesc, sortKey]);\n\n    return (\n        <Table>\n            <Table.THead>\n                <Table.TSortableHeadCell\n                    title='Дата'\n                    defaultIsSortedDesc={defaultIsSortedDesc}\n                    isSortedDesc={sortKey === 'date' ? isSortedDesc : undefined}\n                    onSort={() => handleSort('date')}\n                >\n                    Дата\n                </Table.TSortableHeadCell>\n\n                <Table.THeadCell title='Контрагент'>Контрагент</Table.THeadCell>\n\n                <Table.TSortableHeadCell\n                    title='Сумма'\n                    isSortedDesc={sortKey === 'sum' ? isSortedDesc : undefined}\n                    onSort={() => handleSort('sum')}\n                >\n                    Сумма\n                </Table.TSortableHeadCell>\n            </Table.THead>\n            <Table.TBody>\n                {sortedData.map((row) => (\n                    <Table.TRow key={row.id}>\n                        <Table.TCell>\n                            <Typography.Text view='primary-small' tag='div'>\n                                {row.date}\n                            </Typography.Text>\n                        </Table.TCell>\n\n                        <Table.TCell>\n                            <Space size={2}>\n                                <Typography.Text view='primary-small' tag='div'>\n                                    {row.title}\n                                </Typography.Text>\n                                <Typography.Text view='primary-small' color='secondary'>\n                                    {row.subtitle}\n                                </Typography.Text>\n                            </Space>\n                        </Table.TCell>\n\n                        <Table.TCell>\n                            <Amount\n                                value={row.sum}\n                                currency='RUR'\n                                minority={100}\n                                view='withZeroMinorPart'\n                                bold='full'\n                                transparentMinor={true}\n                            />\n                        </Table.TCell>\n                    </Table.TRow>\n                ))}\n            </Table.TBody>\n        </Table>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Interactive PureCell Components with Storybook in JavaScript and JSX\nDESCRIPTION: Defines a Storybook story for the PureCell React component allowing configurable display options such as padding, direction, weight, view style, color, and amount via knobs. Uses imported UI elements and icons to compose various layouts of PureCell, demonstrating different text, graphic, and footer compositions. Inputs like 'verticalPadding', 'horizontalPadding', 'direction', and 'value' are controlled through Storybook's select and text knobs, enabling live interactive preview and testing. Outputs include flexbox-aligned PureCell elements with nested subcomponents for graphic icons, main content, text, amounts, categories, and footer buttons or comments.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pure-cell/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Story, Markdown } from '@storybook/addon-docs';\nimport { text, boolean, select } from '@storybook/addon-knobs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\n\nimport { Circle } from '@alfalab/core-components-icon-view/circle';\nimport { PureCell } from '@alfalab/core-components-pure-cell';\nimport { Typography } from '@alfalab/core-components-typography';\nimport { StatusBadge } from '@alfalab/core-components-status-badge';\nimport { StarMIcon } from '@alfalab/icons-glyph/StarMIcon';\nimport { ChevronForwardMIcon } from '@alfalab/icons-glyph/ChevronForwardMIcon';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\nimport {\n    stylesStringToObj,\n    getQueryParam,\n} from '../../../screenshot-utils/screenshots-story/utils';\n\nexport const VIEWS = ['primary', 'secondary', 'tertiary', 'link', 'ghost'];\n\n<Meta title='Components/PureCell' component={PureCell} id='PureCell' />\n\n{/* Canvas */}\n\n<Story name='PureCell'>\n    {React.createElement(() => {\n        const verticalPadding = select(\n            'verticalPadding',\n            ['airy', 'default', 'compact', 'tiny', 'none'],\n            'default',\n        );\n        const verticalTopPadding = select(\n            'verticalPadding.top',\n            ['airy', 'default', 'compact', 'tiny', 'none', undefined],\n            undefined,\n        );\n        const verticalBottomPadding = select(\n            'verticalPadding.bottom',\n            ['airy', 'default', 'compact', 'tiny', 'none', undefined],\n            undefined,\n        );\n        const verticalPaddingPrepared = (verticalTopPadding || verticalBottomPadding) ? {top: verticalTopPadding, bottom: verticalBottomPadding } : verticalPadding\n\n        const horizontalPadding = select(\n            'horizontalPadding',\n            ['left', 'right', 'both', 'none'],\n            'none',\n        );\n        const graphicPadding = select(\n            'graphicPadding',\n            ['airy', 'default', 'compact', 'tiny', 'none', undefined],\n            undefined,\n        );\n        const direction = select('direction', ['vertical', 'horizontal'], 'horizontal');\n        const weight = select('weight', ['bold', 'normal'], 'normal');\n        const view = select('view', ['component', 'primary-small'], 'component');\n        const viewAmount = select(\n            'viewAmount',\n            ['default', 'withZeroMinorPart'],\n            'withZeroMinorPart',\n        );\n        const color = select(\n            'color',\n            [\n                'tertiary',\n                'disabled',\n                'accent',\n                'primary',\n                'attention',\n                'positive',\n                'secondary',\n                'tertiary-inverted',\n                'primary-inverted',\n                'secondary-inverted',\n                'link',\n                'negative',\n            ],\n            'primary',\n        );\n        const value = text('value', '100000000');\n        return (\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'space-around',\n                }}\n            >\n                <div\n                    style={{\n                        display: 'flex',\n                        gap: '20px',\n                        flexWrap: 'nowrap',\n                        flexDirection: 'column',\n                        flexBasis: '250px',\n                    }}\n                >\n                    <PureCell\n                        href={text('href', '')}\n                        verticalPadding={verticalPaddingPrepared}\n                        horizontalPadding={horizontalPadding}\n                        direction={direction}\n                    >\n                        <PureCell.Graphics graphicPadding={graphicPadding}>\n                            <StarMIcon />\n                        </PureCell.Graphics>\n                        <PureCell.Content>\n                            <PureCell.Main>\n                                <PureCell.Text\n                                    titleColor='primary'\n                                    view='component-primary'\n                                    value='Value'\n                                    valueColor='secondary'\n                                    rowLimit={1}\n                                >\n                                    Long title for example\n                                </PureCell.Text>\n                                <PureCell.Text\n                                    titleColor='secondary'\n                                    view='primary-small'\n                                    value='SubValue'\n                                    valueColor='secondary'\n                                    rowLimit={1}\n                                >\n                                    Long label for example\n                                </PureCell.Text>\n                            </PureCell.Main>\n                        </PureCell.Content>\n                    </PureCell>\n                    <PureCell\n                        href={text('href', '')}\n                        verticalPadding={verticalPaddingPrepared}\n                        horizontalPadding={horizontalPadding}\n                        direction={direction}\n                    >\n                        <PureCell.Content>\n                            <PureCell.Main>\n                                <PureCell.Text titleColor='secondary' view='primary-small'>\n                                    Product Name ··0000\n                                </PureCell.Text>\n                                <PureCell.Amount\n                                    view={viewAmount}\n                                    value={value}\n                                    minorUnits='100'\n                                    currency='RUR'\n                                    weight={weight}\n                                    color={color}\n                                />\n                            </PureCell.Main>\n                            <PureCell.Footer>\n                                <Typography.Text titleColor='secondary' view='primary-small'>\n                                    Caption Secondary\n                                </Typography.Text>\n                                <PureCell.FooterButton>Action</PureCell.FooterButton>\n                            </PureCell.Footer>\n                        </PureCell.Content>\n                    </PureCell>\n                    <PureCell\n                        href={text('href', '')}\n                        verticalPadding={verticalPaddingPrepared}\n                        horizontalPadding={horizontalPadding}\n                        direction={direction}\n                    >\n                        <PureCell.Content>\n                            <PureCell.Main>\n                                <PureCell.Text titleColor='secondary' view='primary-small'>\n                                    Общий баланс\n                                </PureCell.Text>\n                                <PureCell.AmountTitle\n                                    view={viewAmount}\n                                    value={value}\n                                    minorUnits='100'\n                                    currency='RUR'\n                                    transparentMinor={true}\n                                    titleProps={{ color }}\n                                />\n                            </PureCell.Main>\n                            <PureCell.Addon verticalAlign='center'>\n                                <ChevronForwardMIcon />\n                            </PureCell.Addon>\n                        </PureCell.Content>\n                    </PureCell>\n                </div>\n                <div\n                    style={{\n                        display: 'flex',\n                        gap: '20px',\n                        flexWrap: 'nowrap',\n                        flexDirection: 'column',\n                    }}\n                >\n                    <PureCell\n                        href={text('href', '')}\n                         verticalPadding={verticalPaddingPrepared}\n                        horizontalPadding={horizontalPadding}\n                        direction={direction}\n                    >\n                        <PureCell.Content>\n                            <PureCell.Main>\n                                <PureCell.Text\n                                    titleColor='primary'\n                                    view='component-primary'\n                                    rowLimit={1}\n                                >\n                                    Яндекс Лавка\n                                </PureCell.Text>\n                                <PureCell.Category\n                                    categoryName={'Кафе, рестораны, столовые, бары'}\n                                    categoryPercent={10}\n                                />\n                            </PureCell.Main>\n                            <PureCell.Footer>\n                                <PureCell.Comment>Комментарий есть</PureCell.Comment>\n                            </PureCell.Footer>\n                        </PureCell.Content>\n                    </PureCell>\n                    <PureCell\n                        href={text('href', '')}\n                        verticalPadding={verticalPaddingPrepared}\n                        horizontalPadding={horizontalPadding}\n                        direction={direction}\n                    >\n                        <PureCell.Graphics graphicPadding={graphicPadding}>\n                            <Circle />\n                        </PureCell.Graphics>\n                        <PureCell.Content>\n                            <PureCell.Main>\n                                <PureCell.Text titleColor='primary' view='component-primary'>\n                                    Card Name\n```\n\n----------------------------------------\n\nTITLE: Using dataTestId Modifiers for PassCode Component Testing in JSX\nDESCRIPTION: This snippet explains the usage of dataTestId modifiers in the PassCode component to uniquely identify UI elements for testing and querying DOM nodes. It introduces the utility function getPassCodeTestIds imported from '@alfalab/core-components/pass-code/shared', which returns an object mapping element names to dataTestId string patterns for wrapper, input progress, keypad, buttons, error message, and more. This facilitates consistent and easy element selection during automated testing.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pass-code/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    passCode: `${dataTestId}-wrapper`,\n    inputProgress: `${dataTestId}-input-progress`,\n    keypad: `${dataTestId}-keypad`,\n    keypadButton: `${dataTestId}-keypad-button`,\n    backspaceButton: `${dataTestId}-backspace-button`,\n    error: `${dataTestId}-error`,\n    message: `${dataTestId}-message`,\n};\n```\n\n----------------------------------------\n\nTITLE: TabBar with Indicators and Customization in React\nDESCRIPTION: A comprehensive example showing TabBar with indicators, color customization options, and tab text overflow handling. It demonstrates four indicator options including no indicator, indicator without value, and indicators with numeric values.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tab-bar/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nconst INDICATOR_OPTIONS = [\n    { showIndicator: false, label: 'Без индикатора' },\n    { showIndicator: true, label: 'Индикатор без значения' },\n    {\n        showIndicator: true,\n        indicatorProps: { value: 7 },\n        label: '7 уведомлений',\n    },\n    {\n        showIndicator: true,\n        indicatorProps: { value: 100 },\n        label: '99+ уведомлений',\n    },\n];\n\nrender(() => {\n    const [selectedId, setSelectedId] = React.useState('Tab1');\n    const [accentColor, setAccentColor] = React.useState('primary');\n    const [bgColor, setBgColor] = React.useState('modal-bg-primary');\n    const [optionId, setOptionId] = React.useState('0');\n    const [textOverflow, setTextOverflow] = React.useState(false);\n\n    return (\n        <div\n            style={{\n                minHeight: 355,\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'space-between',\n            }}\n        >\n            <div>\n                <Typography.Text tag='p' style={{ textAlign: 'center' }}>\n                    {selectedId}\n                </Typography.Text>\n\n                <Gap size='s' />\n\n                <Switch\n                    label='Длинное название таба'\n                    checked={textOverflow}\n                    onChange={() => setTextOverflow((p) => !p)}\n                />\n\n                <Gap size='xl' />\n\n                <RadioGroup\n                    onChange={(_, { value }) => setOptionId(value)}\n                    value={optionId}\n                    label='Индикатор'\n                >\n                    {INDICATOR_OPTIONS.map((option, idx) => (\n                        <Radio size='m' value={String(idx)} label={option.label} key={idx} />\n                    ))}\n                </RadioGroup>\n\n                <Gap size='xl' />\n\n                <RadioGroup\n                    onChange={(_, { value }) => setAccentColor(value)}\n                    value={accentColor}\n                    label='Цвет активного таба'\n                >\n                    <Radio label='Accent-primary' value='primary' size='m' />\n                    <Radio label='Accent-secondary' value='secondary' size='m' />\n                </RadioGroup>\n\n                <Gap size='xl' />\n\n                <RadioGroup\n                    onChange={(_, { value }) => setBgColor(value)}\n                    value={bgColor}\n                    label='Цвет подложки'\n                >\n                    <Radio label='Modal-bg-primary' value='modal-bg-primary' size='m' />\n                    <Radio label='Modal-bg-alt-primary' value='modal-bg-alt-primary' size='m' />\n                </RadioGroup>\n                <Gap size='l' />\n            </div>\n\n            <div style={{ margin: '0 -20px -20px' }}>\n                <TabBar\n                    bgColor={bgColor}\n                    accentColor={accentColor}\n                    selectedId={selectedId}\n                    onChange={setSelectedId}\n                    border={true}\n                >\n                    {Array(5)\n                        .fill(null)\n                        .map((_, idx) => {\n                            return (\n                                <TabBar.Tab\n                                    {...(idx === 0 ? INDICATOR_OPTIONS[Number(optionId)] : null)}\n                                    key={idx}\n                                    id={`Tab${idx + 1}`}\n                                    icon={<DiamondsMIcon />}\n                                    label={`TabName${idx + 1}`}\n                                    {...(idx === 0 && textOverflow\n                                        ? { label: 'LongTabName1' }\n                                        : null)}\n                                />\n                            );\n                        })}\n                </TabBar>\n            </div>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: React Example for International Phone Input with Filtering\nDESCRIPTION: This React code demonstrates an example component rendering an international phone input with country code selection and input filtering. It manages local state for the phone number and country, supports filtering options based on user input, and illustrates integration with the IntlPhoneInput component, which is configured with various properties such as default country and read-only status.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/intl-phone-input/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nrender(() => {\n    const options = [\n        { key: '+7 921 681 53 98' },\n        { key: '+7 921 681 52 97' },\n        { key: '+7 921 681 52 96' },\n        { key: '+7 921 681 52 95' },\n        { key: '+7 921 681 52 94' },\n    ];\n\n    const matchOption = (option, inputValue) =>\n        option.key.toLowerCase().includes((inputValue || '').toLowerCase());\n\n    const [value, setValue] = React.useState('+7');\n    const [selectedCountry, setSelectedCountry] = React.useState('RU');\n\n    const handleChange = (newValue) => setValue(newValue);\n\n    const handleCountryChange = (countryCode) => setSelectedCountry(countryCode);\n\n    const filteredOptions = options.filter((option) => matchOption(option, value));\n\n    return (\n        <div style={{ width: '320px' }}>\n            <IntlPhoneInput\n                value={value}\n                onChange={handleChange}\n                options={filteredOptions}\n                block={true}\n                label='Номер телефона'\n                defaultCountryIso2='RU'\n                readOnly={false}\n                onCountryChange={handleCountryChange}\n            />\n            <br />\n            Код выбранной страны: <strong>{selectedCountry}</strong>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a basic ToastPlate component in JavaScript\nDESCRIPTION: This snippet demonstrates rendering a Toast component with a positive badge, title, close button, and action button. It adapts layout based on viewport width, using a condition to set the bottom button position. The code relies on React-like rendering with a functional component. No external dependencies are explicitly shown, but it implies React or a similar library for JSX rendering.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/toast-plate/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nrender(() => {\n    const isMobile = document.body.clientWidth < 450;\n    return (\n        <ToastPlate\n            badge='positive-checkmark'\n            title='Поздравляем, полный успех'\n            hasCloser={true}\n            block={true}\n            bottomButtonPosition={isMobile}\n            onClose={Function.prototype}\n            actionButton={\n                <Button colors='inverted' view='ghost' size={isMobile ? 'xs' : 's'}>\n                    Восстановить\n                </Button>\n            }\n        />\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Import Statements (JavaScript)\nDESCRIPTION: This snippet imports necessary modules and components. It includes modules from '@storybook/addon-docs' for documentation and Storybook elements, '@storybook/addon-knobs' for interactive controls, and core components like Textarea from '@alfalab/core-components-textarea' as well as icon components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/textarea/src/docs/Component.stories.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, Story, Markdown } from '@storybook/addon-docs';\nimport { text, select, boolean, number } from '@storybook/addon-knobs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport { StarMIcon } from '@alfalab/icons-glyph/StarMIcon';\nimport { DiamondsSIcon } from '@alfalab/icons-glyph/DiamondsSIcon';\nimport { Textarea } from '@alfalab/core-components-textarea';\n```\n\n----------------------------------------\n\nTITLE: Defining Modal Context - TypeScript\nDESCRIPTION: This snippet defines the `ModalContext` type used for managing the modal's state and behavior. It includes properties like `hasFooter`, `hasHeader`, `hasScroll`, and callbacks for setting header and footer visibility, closing the modal, and a content ref. This context is used for customizable modal behavior.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/modal/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport type ModalContext = {\n    // Указывает, используется ли футер\n    hasFooter?: boolean;\n    // Указывает, используется ли шапка (например, позволяет гибко настраивать отступы)\n    hasHeader?: boolean;\n    // Указывает наличие скролла\n    hasScroll?: boolean;\n    // Указывает, что контент прокручен\n    headerHighlighted?: boolean;\n    // Указывает, что контент прокручен не до конца\n    footerHighlighted?: boolean;\n    // Коллбэк, который должна вызвать кастомная шапка\n    setHasHeader: (exists: boolean) => void;\n    // Коллбэк, который должна вызвать кастомный футер\n    setHasFooter: (exists: boolean) => void;\n    // Позволяет закрыть модальное окно\n    onClose: (event: React.MouseEvent<HTMLElement>) => void;\n    // Реф, который должен быть установлен контентой области\n    contentRef: React.Ref<HTMLElement>;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Desktop SidePanel with Custom Components React JSX\nDESCRIPTION: Demonstrates how to render and control a Desktop SidePanel component. It uses React's `useState` hook to manage the open/closed state of the panel. A button is rendered to trigger opening the panel, and the `SidePanelDesktop` component is rendered conditionally, passing the state and state-updating functions (`open`, `onClose`). Custom `Header`, `SidePanelDesktop.Content`, and `SidePanelDesktop.Footer` components are passed as children to structure the panel.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/side-panel/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [open, setOpen] = React.useState(false);\n    const handleOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n\n    const commonStyle = {\n        borderRadius: '8px',\n        backgroundColor: 'rgba(55, 120, 251, 0.1)',\n        border: '1px dashed rgb(55, 120, 251)',\n        boxSizing: 'border-box',\n        width: '100%',\n    };\n\n    const contentStyle = {\n        ...commonStyle,\n        height: '100%',\n    };\n\n    const footerStyle = {\n        ...commonStyle,\n        height: '48px',\n    };\n\n    return (\n        <Container>\n            <Button type='button' size='s' onClick={handleOpen}>\n                Показать анатомию\n            </Button>\n            <SidePanelDesktop open={open} onClose={handleClose}>\n                <Header />\n                <SidePanelDesktop.Content>\n                    <div style={contentStyle}></div>\n                </SidePanelDesktop.Content>\n                <SidePanelDesktop.Footer>\n                    <div style={footerStyle}></div>\n                </SidePanelDesktop.Footer>\n            </SidePanelDesktop>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Month Selection in Calendar\nDESCRIPTION: This code shows how to enable direct month selection using the `clickableMonth` prop in `CalendarMobile`.  It also demonstrates setting the calendar's shape using a RadioGroup. It allows users to quickly select months within the calendar interface.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar/src/docs/description.mdx#_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\nrender(() => {\n    const [open, setOpen] = React.useState(false);\n    const [value, setValue] = React.useState();\n\n    const [firstRadioValue, setFirstRadioValue] = React.useState('rounded');\n\n    React.useEffect(() => {\n        setValue();\n    }, [firstRadioValue]);\n\n    const onFirstRadioChange = React.useCallback((_, payload) => {\n        setFirstRadioValue(payload.value);\n    }, []);\n\n    return (\n        <Container>\n            <Button block={true} onClick={() => setOpen(true)}>\n                Открыть календарь\n            </Button>\n            <CalendarMobile\n                mode={'range'}\n                selectorView={'month-only'}\n                shape={firstRadioValue}\n                clickableMonth={true}\n                value={value}\n                onChange={(dateFrom, dateTo) => setValue({ dateFrom, dateTo })}\n                onClose={() => setOpen(false)}\n                open={open}\n            />\n            <div style={{ marginTop: '32px' }}>\n                <RadioGroup\n                    label='Форма'\n                    direction='vertical'\n                    name='radioGroup'\n                    onChange={onFirstRadioChange}\n                    value={firstRadioValue}\n                >\n                    <Radio size='m' label='Круглая' value='rounded' />\n                    <Radio size='m' label='Прямоугольная' value='rectangular' />\n                </RadioGroup>\n            </div>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Content Component for Modal in React\nDESCRIPTION: A content component for the Modal that conditionally renders text blocks with a show/hide toggle button. This component is used to demonstrate how content can be managed inside the Modal.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/modal/src/docs/Component.stories.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nexport const Text = () => (\n    <p style={{ margin: '0 0 16px' }}>\n        Сейчас много говорят об отказах банков в проведении операций, блокировках интернет-банка.\n        Это связано с тем, что Центральный банк РФ обязывает банки выявлять операции своих клиентов,\n        потенциально нарушающие требования Федерального закона «О противодействии легализации\n        (отмыванию) доходов, полученных преступным путем, и финансированию терроризма» — 115-ФЗ\n    </p>\n);\n\nexport const Content = ({ isPreview }) => {\n    const [showMore, setShowMore] = React.useState(false);\n    return isPreview ? (\n        <>Пример текстового контента.</>\n    ) : (\n        <>\n            <Text />\n            {(showMore || boolean('showMore')) && (\n                <>\n                    <Text />\n                    <Text />\n                    <Text />\n                </>\n            )}\n            <Button size='xs' type='Button' onClick={() => setShowMore(!showMore)}>\n                {showMore ? 'Скрыть' : 'Показать еще'}\n            </Button>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering the TokenConverter Component in Storybook\nDESCRIPTION: Renders the imported TokenConverter component within the Storybook page, displaying its UI for preview and interaction. This forms the visual part of the documentation setup.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/token-converter.stories.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<TokenConverter />\n```\n\n----------------------------------------\n\nTITLE: Using Custom Badge Icons Configuration in Toast\nDESCRIPTION: Example showing how to configure custom badge icons for the toast-plate component after the migration that replaces badge with status-badge. The getBadgeIcons prop now accepts an object with icon mapping.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/toast/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  'positive-checkmark': {\n      24: AScoresCircleMIcon,\n  },\n  'negative-cross': {\n    ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Component Header in Storybook (JSX)\nDESCRIPTION: Renders a standard header for the 'Mq' component documentation page using the custom 'ComponentHeader' block. It displays the component name ('Mq') and a short description (in Russian) indicating its use for implementing media query support.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/mq/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ComponentHeader\n    name='Mq'\n    children='Используется для имплементации поддержки медиа запросов.'\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Component with Sizes (Mobile)\nDESCRIPTION: This React snippet renders a series of components, each with a different size, specifically designed for mobile screens. It organizes sizes into different groups (BIG_SIZES, MEDIUM_SIZES, SMALL_SIZES) and renders a `Component` with the corresponding size within each group.  It also includes conditional rendering to display different icons based on the component's size. Dependencies include React, and other imported components such as `Circle`, `SuperEllipse`, `Rectangle`, `NoShape`, `DiamondsXxlIcon`, `DiamondsSIcon`, `DiamondsMIcon`, `Container`, `Gap`, `Row`, `RadioGroup`, and `Radio`.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/icon-view/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n//MOBILE\nrender(() => {\n    const BIG_SIZES = ['128', '80', '64'];\n    const MEDIUM_SIZES = ['56', '48', '40'];\n    const SMALL_SIZES = ['32', '24', '20', '16'];\n\n    const [component, setComponent] = React.useState('SuperEllipse');\n\n    const Component = {\n        Circle,\n        SuperEllipse,\n        Rectangle,\n        NoShape,\n    }[component];\n\n    const onChange = (_, payload) => {\n        setComponent(payload.value);\n    };\n\n    const styles = {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        gap: '16px',\n    };\n\n    const mainSize = {\n        16: 16,\n        20: 16,\n        24: 20,\n        32: 24,\n        40: 32,\n        48: 40,\n        56: 48,\n        64: 56,\n        80: 64,\n        128: 80,\n    };\n\n    return (\n        <Container>\n            <div style={styles}>\n                {BIG_SIZES.map((size) => (\n                    <Component size={size} mainSize={mainSize[size]} border={true}>\n                        {size !== '64' ? <DiamondsXxlIcon /> : <DiamondsMIcon />}\n                    </Component>\n                ))}\n            </div>\n            <Gap size='xl' />\n            <div style={styles}>\n                {MEDIUM_SIZES.map((size) => (\n                    <Component size={size} mainSize={mainSize[size]} border={true}>\n                        <DiamondsMIcon />\n                    </Component>\n                ))}\n            </div>\n            <Gap size='xl' />\n            <div style={styles}>\n                {SMALL_SIZES.map((size) => {\n                    if (component === 'Rectangle' && size === '16') return;\n                    return (\n                        <Component size={size} mainSize={mainSize[size]} border={true}>\n                            {size === '32' || size === '24' ? <DiamondsMIcon /> : <DiamondsSIcon />}\n                        </Component>\n                    );\n                })}\n            </div>\n\n            <Row>\n                <RadioGroup name='radioGroup' onChange={onChange} value={component}>\n                    {['SuperEllipse', 'Circle', 'Rectangle', 'NoShape'].map((c) => (\n                        <Radio\n                            label={c === 'NoShape' ? 'noShape' : c.toLowerCase()}\n                            value={c}\n                            size='m'\n                            key={c}\n                        />\n                    ))}\n                </RadioGroup>\n            </Row>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Resizing Button Text\nDESCRIPTION: This snippet demonstrates the use of the `textResizing` property to control how text is resized within the button. It uses a RadioGroup component to switch between 'hug' and 'fill' text resizing modes.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/button/src/docs/description.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [textResizing, setTextResizing] = React.useState('hug');\n\n    return (\n        <div style={{ width: isMobile() ? '100%' : 240 }}>\n            <Button\n                view='primary'\n                breakpoint={BREAKPOINT}\n                block={true}\n                rightAddons={<StarMIcon />}\n                leftAddons={<StarMIcon />}\n                hint='Hint'\n                textResizing={textResizing}\n            >\n                Label\n            </Button>\n\n            <Gap size='xl' />\n\n            <RadioGroup\n                label='Поведение текста'\n                value={textResizing}\n                onChange={(_, { value }) => setTextResizing(value)}\n                breakpoint={BREAKPOINT}\n            >\n                <Radio value='hug' label='Hug' />\n                <Radio value='fill' label='Fill' />\n            </RadioGroup>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing PassCode Components from Alfaleab Core Components in JSX\nDESCRIPTION: This snippet demonstrates how to import the PassCode component for desktop, mobile, and responsive variants along with the KeyPadButton component from the Alfaleab core-components library. The imports enable usage of device-specific or universal pass code input UI. It also shows importing CSS variables for styling purposes. Dependencies include '@alfalab/core-components/pass-code' and 'storybook/blocks' for CSS vars injection.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pass-code/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Десктоп/мобайл\nimport { PassCodeDesktop } from '@alfalab/core-components/pass-code/desktop';\nimport { PassCodeMobile } from '@alfalab/core-components/pass-code/mobile';\n\n// Респонсив\nimport { PassCode } from '@alfalab/core-components/pass-code';\n\n// Если добавляете аддон, то можно обернуть его в KeyPadButton. Так не понадобится подгонять стили под другие кнопки.\nimport { KeyPadButton } from '@alfalab/core-components/pass-code';\n```\n\n----------------------------------------\n\nTITLE: Displaying Component Header using JSX\nDESCRIPTION: Renders the custom 'ComponentHeader' block within the Storybook page. It sets the displayed component name to 'HatchingProgressBar' and provides a brief description (in Russian) of its purpose: 'Used to display progress when filling out a form'.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/hatching-progress-bar/src/docs/Component.docs.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentHeader\n    name='HatchingProgressBar'\n    children='Используется для отображения прогресса при заполнении формы.'\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting up ToastPlate Component Documentation in Storybook with JSX\nDESCRIPTION: This code imports and configures Storybook documentation components to create a documentation page for the ToastPlate component. It sets up a tabbed interface with description, changelog, and development information tabs.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/toast-plate/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta of={Stories} />\n\n<ComponentHeader \n    name='ToastPlate' \n/>\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Import TabBar Component (JSX)\nDESCRIPTION: Imports the TabBar component from the @alfalab/core-components/tab-bar module. This allows you to use the TabBar component in your JSX code.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tab-bar/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { TabBar } from '@alfalab/core-components/tab-bar';\n```\n\n----------------------------------------\n\nTITLE: Rendering Component with Sizes in React\nDESCRIPTION: This React snippet renders a series of components, each with a different size.  It uses a list of sizes to map over and render a `Component` with the given size. It also includes conditional rendering to display different icons based on the component's size.  Dependencies include React, and other imported components such as `Circle`, `SuperEllipse`, `Rectangle`, `NoShape`, `DiamondsXxlIcon`, `DiamondsSIcon`, `DiamondsMIcon`, `Container`, `Row`, `RadioGroup`, and `Radio`.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/icon-view/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const SIZES = ['128', '80', '72', '64', '56', '48', '40', '32', '24', '20', '16'];\n    const [component, setComponent] = React.useState('SuperEllipse');\n\n    const Component = {\n        Circle,\n        SuperEllipse,\n        Rectangle,\n        NoShape,\n    }[component];\n\n    const onChange = (_, payload) => {\n        setComponent(payload.value);\n    };\n\n    const styles = {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        gap: '16px',\n    };\n\n    const mainSize = {\n        16: 16,\n        20: 16,\n        24: 20,\n        32: 24,\n        40: 32,\n        48: 40,\n        56: 48,\n        64: 56,\n        72: 56,\n        80: 64,\n        128: 80,\n    };\n\n    return (\n        <Container>\n            <div style={styles}>\n                {SIZES.map((size) => {\n                    if (component === 'Rectangle' && size === '16') return;\n                    return (\n                        <Component size={size} mainSize={mainSize[size]} border={true}>\n                            {size === '128' || size === '80' ? (\n                                <DiamondsXxlIcon />\n                            ) : size <= '20' ? (\n                                <DiamondsSIcon />\n                            ) : (\n                                <DiamondsMIcon />\n                            )}\n                        </Component>\n                    );\n                })}\n            </div>\n            <Row>\n                <RadioGroup name='radioGroup' onChange={onChange} value={component}>\n                    {['SuperEllipse', 'Circle', 'Rectangle', 'NoShape'].map((c) => (\n                        <Radio\n                            label={c === 'NoShape' ? 'noShape' : c.toLowerCase()}\n                            value={c}\n                            size='m'\n                            key={c}\n                        />\n                    ))}\n                </RadioGroup>\n            </Row>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing CalendarInput Components\nDESCRIPTION: This code snippet demonstrates how to import the CalendarInput component and its variants (desktop and mobile) from the '@alfalab/core-components/calendar-input' module. This allows developers to use the component in their React applications.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-input/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CalendarInput } from '@alfalab/core-components/calendar-input';\nimport { CalendarInputDesktop } from '@alfalab/core-components/calendar-input/desktop';\nimport { CalendarInputMobile } from '@alfalab/core-components/calendar-input/mobile';\n```\n\n----------------------------------------\n\nTITLE: Fixing \"document is not defined\" Error\nDESCRIPTION: This update fixes the \"document is not defined\" error when immediateMount=true, likely improving server-side rendering.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Theming Wizard Component Import and Usage\nDESCRIPTION: This snippet imports the ThemingWizard component from the storybook theme module and renders it within the documentation or UI. It provides an interactive interface for configuring or previewing theming options in the project.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/theming.stories.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ThemingWizard />\n```\n\n----------------------------------------\n\nTITLE: Importing Modules for Storybook Documentation in JavaScript\nDESCRIPTION: Imports essential modules from '@storybook/addon-docs' and other custom components for creating documentation pages in a Storybook environment. Sets up the foundation for rendering documentation components and content.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/button/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: SMS Message Template for Android WebOTP\nDESCRIPTION: This markdown snippet provides the required template for SMS messages on Android to enable automatic code insertion using the WebOTP API.  It highlights the importance of using a valid domain name associated with the application and includes the one-time password (OTP) in the specified format. The OTP should be included after the phrase 'Your OTP is:'\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/code-input/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\nYour OTP is: 123456.\n@example.com #123456\n```\n\n----------------------------------------\n\nTITLE: Initializing GenericWrapper Storybook React\nDESCRIPTION: This snippet defines a Storybook story for the GenericWrapper component. It uses knobs to allow interactive modification of the component's properties. The story renders a div with several nested GenericWrapper components to demonstrate different configurations. It also uses the Gap component to introduce space between the elements. The story includes parameters for alignment, padding, and the use of 'grow' for inner elements.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/generic-wrapper/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    () => {\n        const gapSizes = ['3xs', '2xs', 'xs', 's', 'm', 'l', 'xl', 0, 2, 4, 8, 12, 16, 20, 24];\n        const alignItems = select('alignItems', ['end', 'start', 'center', 'baseline'], 'start');\n        const justifyContent = select(\n            'justifyContent',\n            ['between', 'around', 'evenly', 'center', 'start', 'end'],\n            undefined,\n        );\n        const column = boolean('column', false);\n        const paddingTop = select('padding.top', gapSizes, 20);\n        const paddingRight = select('padding.right', gapSizes, 20);\n        const paddingBottom = select('padding.bottom', gapSizes, 20);\n        const paddingLeft = select('padding.left', gapSizes, 20);\n        const gapDirection = radios(\n            'gapDirection',\n            {\n                vertical: 'vertical',\n                horizontal: 'horizontal',\n            },\n            'horizontal',\n        );\n        const growElement1 = boolean('grow (1st element)', false);\n        const growElement2 = boolean('grow (2st element)', false);\n        const growElement3 = boolean(`grow (3d element)`, false);\n        const gapSize1 = select('1st Gap size', gapSizes, 'l');\n        const gapSize2 = select('2nd Gap size', gapSizes, 'l');\n        const previewStyles = stylesStringToObj(getQueryParam('wrapperStyles'));\n        const isPreview = Object.keys(previewStyles).length > 0;\n        const itemStyle = isPreview ? { width: 110, height: 80, borderRadius: 16 } : null;\n        return (\n            <div\n                style={{\n                    width: 1000,\n                    ...previewStyles,\n                }}\n            >\n                <div\n                    style={\n                        isPreview\n                            ? {\n                                  background: '#3778FB1A',\n                                  display: 'inline-block',\n                              }\n                            : {\n                                  border: '1px dashed #EFC2D5',\n                                  borderRadius: '8px',\n                              }\n                    }\n                >\n                    <GenericWrapper\n                        alignItems={alignItems}\n                        column={column}\n                        padding={{\n                            top: paddingTop,\n                            right: paddingRight,\n                            bottom: paddingBottom,\n                            left: paddingLeft,\n                        }}\n                        justifyContent={justifyContent}\n                    >\n                        <GenericWrapper grow={growElement1}>\n                            <div\n                                style={{\n                                    background: 'rgba(55, 120, 251, 0.1)',\n                                    border: '1px dashed #3778FB',\n                                    borderRadius: '8px',\n                                    height: 128,\n                                    width: 128,\n                                    boxSizing: 'border-box',\n                                    ...itemStyle,\n                                }}\n                            />\n                        </GenericWrapper>\n                        <Gap direction={gapDirection} size={gapSize1} />\n                        <GenericWrapper grow={growElement2}>\n                            <div\n                                style={{\n                                    background: 'rgba(55, 120, 251, 0.1)',\n                                    border: '1px dashed #3778FB',\n                                    borderRadius: '8px',\n                                    height: 64,\n                                    width: 64,\n                                    boxSizing: 'border-box',\n                                    ...itemStyle,\n                                }}\n                            />\n                        </GenericWrapper>\n                        <Gap direction={gapDirection} size={gapSize2} />\n                        <GenericWrapper grow={growElement3}>\n                            <div\n                                style={{\n                                    background: 'rgba(55, 120, 251, 0.1)',\n                                    border: '1px dashed #3778FB',\n                                    borderRadius: '8px',\n                                    height: 164,\n                                    width: 164,\n                                    boxSizing: 'border-box',\n                                    ...itemStyle,\n                                }}\n                            />\n                        </GenericWrapper>\n                    </GenericWrapper>\n                </div>\n                <Gap size='l' direction='horizontal' />\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Slider Component Sizes (M and S) Using React JSX\nDESCRIPTION: This example shows how to render Slider components with two different sizes ('M' represented by size=4 and 'S' by size=2) in React. It depends on React and a Slider component supporting the size prop controlling UI dimensions. Using React state hooks, it manages slider values and updates these on user interaction. The snippet also includes a variant optimized for mobile layout with adjusted margin spacing. Inputs are slider thumb positions, and outputs are updated slider states and rendered sliders in the specified sizes.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/slider/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [value, setValue] = React.useState(0);\n    const [slider, setSlider] = React.useState(0);\n\n    const handleChange = ({ value }) => setValue(value);\n    const handleChangeSlider = ({ value }) => setSlider(value);\n\n    return (\n        <>\n            <Slider size={4} value={value} onChange={handleChange} />\n            <br />\n            <br />\n            <Slider size={2} value={slider} onChange={handleChangeSlider} />\n        </>\n    );\n});\n//MOBILE\nrender(() => {\n    const [value, setValue] = React.useState(0);\n    const [slider, setSlider] = React.useState(0);\n\n    const handleChange = ({ value }) => setValue(value);\n    const handleChangeSlider = ({ value }) => setSlider(value);\n\n    return (\n        <>\n            <div style={{ marginBottom: 80 }}>\n                <Slider size={4} value={value} onChange={handleChange} />\n            </div>\n            <Slider size={2} value={slider} onChange={handleChangeSlider} />\n        </>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Slider Input component\nDESCRIPTION: Implements a combined slider and input component for precise value selection. Uses React, with props for value, min, max, and handlers. Supports integration with forms and real-time updates.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_122\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-slider-input implementation\n```\n\n----------------------------------------\n\nTITLE: Styrene Font-Face Integration for Custom Typography\nDESCRIPTION: Defines @font-face declarations to load the 'Styrene UI' font at weights 400, 500, and 700. This enables using Styrene UI in all supporting browsers by specifying both WOFF2 and fallback WOFF formats. Each declaration sets the font-family name, the source URLs, font weight, and style. Ensure CDN URLs remain accessible and add 'font-feature-settings' plus smoothing CSS as recommended for optimal rendering.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/typography.stories.mdx#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n    font-family: 'Styrene UI';\n    src: url('https://alfabank.servicecdn.ru/media/fonts/styrene-ui/styrene-ui_regular.woff2')\n            format('woff2'), url('https://alfabank.servicecdn.ru/media/fonts/styrene-ui/styrene-ui_regular.woff')\n            format('woff');\n    font-weight: 400;\n    font-style: normal;\n}\n@font-face {\n    font-family: 'Styrene UI';\n    src: url('https://alfabank.servicecdn.ru/media/fonts/styrene-ui/styrene-ui_medium.woff2') format('woff2'),\n        url('https://alfabank.servicecdn.ru/media/fonts/styrene-ui/styrene-ui_medium.woff') format('woff');\n    font-weight: 500;\n    font-style: normal;\n}\n@font-face {\n    font-family: 'Styrene UI';\n    src: url('https://alfabank.servicecdn.ru/media/fonts/styrene-ui/styrene-ui_bold.woff2') format('woff2'),\n        url('https://alfabank.servicecdn.ru/media/fonts/styrene-ui/styrene-ui_bold.woff') format('woff');\n    font-weight: 700;\n    font-style: normal;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Documentation Tabs\nDESCRIPTION: Defines a tabbed interface including description, changelog, and development sections, each rendering respective MDX or Markdown content for comprehensive documentation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/number-input/src/docs/Component.docs.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Desktop getInputAutocompleteDesktopTestIds Object Structure in JavaScript\nDESCRIPTION: This snippet shows the structure of the object returned by the getInputAutocompleteDesktopTestIds utility for desktop input autocomplete. This object maps testing selectors to dataTestId-suffixed IDs, making it easier to select elements during automated tests. Key properties include option, optionsList, and several field control helpers. No special dependencies except calling the function with a suitable dataTestId string.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/input-autocomplete/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    inputAutocomplete: dataTestId,\n    option: `${dataTestId}-option`,\n    optionsList: `${dataTestId}-options-list`,\n    field: `${dataTestId}-field`,\n    fieldInner: `${dataTestId}-field-form-control-inner`,\n    fieldFormControl: `${dataTestId}-field-form-control`,\n    fieldLeftAddons: `${dataTestId}-field-form-control-left-addons`,\n    fieldRightAddons: `${dataTestId}-field-form-control-right-addons`,\n    fieldError: `${dataTestId}-field-form-control-error-message`,\n    fieldHint: `${dataTestId}-field-form-control-hint`,\n};\n```\n\n----------------------------------------\n\nTITLE: Importing UniversalModal Responsive Variant in React (JSX)\nDESCRIPTION: This snippet demonstrates multiple approaches to importing the UniversalModal responsive components and their associated types from '@alfalab/core-components/universal-modal'. Both atom (individual components) and compound imports are shown. To use these components, ensure you have installed the '@alfalab/core-components/universal-modal' library. Typical inputs are component props typed as UniversalModalResponsiveProps, ContentResponsiveProps, HeaderResponsiveProps, and FooterResponsiveProps. Components are suitable for rendering modals that adapt responsively to different device sizes.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/universal-modal/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Atom import\nimport { UniversalModal } from '@alfalab/core-components/universal-modal';\nimport type {UniversalModalResponsiveProps } from '@alfalab/core-components/universal-modal';\n\nimport { ContentResponsive } from '@alfalab/core-components/universal-modal';\nimport type { ContentResponsiveProps } from '@alfalab/core-components/universal-modal';\n\nimport { HeaderResponsive } from '@alfalab/core-components/universal-modal';\nimport type { HeaderResponsiveProps } from '@alfalab/core-components/universal-modal';\n\nimport { FooterResponsive } from '@alfalab/core-components/universal-modal';\nimport type { FooterResponsiveProps } from '@alfalab/core-components/universal-modal';\n\n// Compound import\nimport { UniversalModalResponsive } from '@alfalab/core-components/universal-modal';\nimport type {UniversalModalResponsiveProps } from '@alfalab/core-components/universal-modal';\n```\n\n----------------------------------------\n\nTITLE: Exporting CSS custom properties as JS vars\nDESCRIPTION: The implementation exports CSS custom properties as JavaScript variables.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/vars/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: React State Management and Interaction Handling for SMS Confirmation Component\nDESCRIPTION: This comprehensive React example demonstrates managing multiple state variables related to SMS code input, error handling, countdown timers, and user interactions within the 'ConfirmationV1' component. It includes functions for handling code submission, retries, and different error scenarios, showing how to orchestrate complex user flows.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/confirmation-v1/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nrender(() => {\n    const [open, setOpen] = React.useState(false);\n\n    const [variant, setVariant] = React.useState({ key: 'success', content: 'Успешный сценарий' });\n    const [value, setValue] = React.useState('');\n    const [codeChecking, setCodeChecking] = React.useState(false);\n    const [codeSending, setCodeSending] = React.useState(false);\n    const [error, setError] = React.useState('');\n    const [errorIsFatal, setErrorIsFatal] = React.useState(false);\n    const [noAttemptsLeftMessage, setNoAttemptsLeftMessage] = React.useState('');\n    const [errorOverlimit, setErrorOverlimit] = React.useState(false);\n    const [errorOverlimitIsFatal, setErrorOverlimitIsFatal] = React.useState(false);\n    const [overlimitTitle, setOverlimitTitle] = React.useState(\n        'Превышено количество\\n попыток ввода кода',\n    );\n    const [overlimitText, setOverlimitText] = React.useState(\n        'Повторное подтверждение кодом из SMS\\n будет возможно через',\n    );\n    const [overlimitCountdownDuration, setOverlimitCountdownDuration] = React.useState(10000);\n\n    const setCode = (code) => {\n        setValue(code);\n        setError('');\n    };\n\n    const handleSubmit = () => {\n        setCodeChecking(true);\n        setError('');\n        setTimeout(() => {\n            setCodeChecking(false);\n            switch (variant.key) {\n                case 'success':\n                    break;\n                case 'error':\n                    setError('Неправильный код');\n                    break;\n                case 'fatal':\n                    setError('Выполните операцию с самого начала');\n                    setErrorIsFatal(true);\n                    break;\n                case 'attempts-left':\n                    setNoAttemptsLeftMessage('Не осталось попыток запроса кода');\n                    break;\n                case 'overlimit-input':\n                    setOverlimitTitle('Превышено количество\\n попыток ввода кода');\n                    setOverlimitText(\n                        'Повторное подтверждение кодом из SMS\\n будет возможно через 1 минуту',\n                    );\n                    setOverlimitCountdownDuration(60000);\n                    setErrorOverlimit(true);\n                    setErrorOverlimitIsFatal(false);\n                    break;\n                case 'overlimit-attempts':\n                    setOverlimitTitle('Превышено количество\\n попыток запроса кода');\n                    setOverlimitText(\n                        'Повторное подтверждение кода из SMS\\n будет возможно через 24 часа ',\n                    );\n                    setOverlimitCountdownDuration(86400000);\n                    setErrorOverlimit(true);\n                    setErrorOverlimitIsFatal(true);\n                    break;\n            }\n        }, 300);\n    };\n    const handleOverlimitCountdownFinished = () => {\n        setOverlimitTitle('Введите код из SMS');\n        setOverlimitText('Чтобы продолжить нажмите кнопку\\n «Запросить новый код»');\n        setErrorOverlimitIsFatal(false);\n    };\n    const handleSmsRetryClick = () => {\n        setCodeSending(true);\n        setError('');\n        setCode('');\n        setTimeout(() => {\n            setCodeSending(false);\n        }, 300);\n    };\n    const handleOverlimitRetryClick = () => {\n        setCodeSending(true);\n        setError('');\n        setCode('');\n        setErrorOverlimit(false);\n        setTimeout(() => {\n            setCodeSending(false);\n        }, 300);\n    };\n\n    return (\n        <Space>\n            <SelectDesktop\n                options={[\n                    { key: 'success', content: 'Успешный сценарий' },\n                    { key: 'error', content: 'Сценарий с ошибкой' },\n                    { key: 'fatal', content: 'Сценарий с критичной ошибкой' },\n                    {\n                        key: 'attempts-left',\n                        content: 'Сценарий, когда кончились попытки запроса смс',\n                    },\n                    {\n                        key: 'overlimit-input',\n                        content: 'Сценарий, когда кончились попытки ввода и форма заблокирована',\n                    },\n                    {\n                        key: 'overlimit-attempts',\n                        content:\n                            'Сценарий, когда кончились попытки запроса смс и форма заблокирована',\n                    },\n                ]}\n                onChange={({ selected }) => {\n                    setVariant(selected);\n                }}\n                selected={variant.key}\n            />\n\n            <div\n                style={{\n                    display: 'inline-flex',\n                    padding: '16px',\n                    border: '1px solid #eeeff1',\n                }}\n            >\n                <ConfirmationV1\n                    phone='+7 000 000 00 42'\n                    onInputFinished={handleSubmit}\n                    onSmsRetryClick={handleSmsRetryClick}\n                    codeSending={codeSending}\n                    codeChecking={codeChecking}\n                    countdownDuration={10000}\n                    code={value}\n                    onInputChange={({ code }) => setCode(code)}\n                    alignContent='center'\n                    requiredCharAmount={5}\n                    error={Boolean(error)}\n                    errorText={error}\n                    errorIsFatal={errorIsFatal}\n                    noAttemptsLeftMessage={noAttemptsLeftMessage}\n                    errorOverlimit={errorOverlimit}\n                    errorOverlimitIsFatal={errorOverlimitIsFatal}\n                    overlimitTitle={overlimitTitle}\n                    overlimitText={overlimitText}\n                    overlimitCountdownDuration={overlimitCountdownDuration}\n                    onOverlimitSmsRetryClick={handleOverlimitRetryClick}\n                    onOverlimitCountdownFinished={handleOverlimitCountdownFinished}\n                />\n            </div>\n        </Space>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Composing IconView Documentation Layout with Tabs in Storybook (JSX)\nDESCRIPTION: This snippet assembles the documentation interface for the IconView React component using Storybook's MDX features. It sets metadata, displays a component header with a brief Russian description, and creates a tabbed documentation layout by injecting imported Markdown and MDX as tab content. Assumes dependencies on Storybook's docs ecosystem, Storybook blocks, and externally provided markdown/MDX files. Expected inputs are valid React components or markdown strings; the output is an interactive docs tabbed view for use within Storybook.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/icon-view/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta of={Stories} />\n\n<ComponentHeader name='IconView' children='Используется для отображения графических элементов.' />\n\n<Tabs\n    description={<Description />}\n    development={<Development />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Metadata (JSX)\nDESCRIPTION: This snippet uses the `<Meta>` component from '@storybook/addon-docs' to set metadata for the story, linking the component's stories defined in 'Component.stories'. This provides essential information to Storybook to define properties such as the component's title, description, and argTypes. This metadata enables Storybook to present the component and its variations.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/notification-manager/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta of={Stories} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Controlled Open Feature\nDESCRIPTION: This commit introduces the controlled open feature for the select component, likely allowing external control over the select's visibility state. This provides greater flexibility when integrating the select with other UI elements.  No specific code snippets are provided in this context.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/intl-phone-input/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Customizing Status Badges with Icons in React\nDESCRIPTION: This JSX snippet demonstrates how to use custom icons within `StatusBadge` components. It defines a `customIcons` object that maps badge sizes to icon components. The code then iterates through a reversed array of sizes and renders `StatusBadge` components, providing the size, `view`, and `customIcons` properties. The `customIcons` prop is passed to the `StatusBadge` component to override the default icon with specified custom icons. The output is a display of status badges with custom icons for specific sizes and views.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/status-badge/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const sizes = [16, 20, 24, 32, 40];\n    const customIcons = {\n        'positive-checkmark': {\n            16: AScoresCircleMIcon,\n            20: AScoresCircleMIcon,\n            24: AScoresCircleMIcon,\n            32: AScoresCircleMIcon,\n            40: AScoresCircleMIcon,\n        },\n    };\n    return (\n        <React.Fragment>\n            <Space size={20} align='center' direction={isMobile() ? 'horizontal' : 'vertical'}>\n                {sizes.reverse().map((size) => {\n                    return (\n                        <StatusBadge\n                            key={size}\n                            view={'positive-checkmark'}\n                            size={size}\n                            customIcons={customIcons}\n                        />\n                    );\n                })}\n            </Space>\n        </React.Fragment>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Using the 'Plate' component with a linked attention message (JavaScript/React)\nDESCRIPTION: This snippet demonstrates how to render a 'Plate' component with an attention view, custom title content including a 'Link' component pointing to documentation, and styling options. It requires '@alfalab/core-components/plate' and '@alfalab/core-components/link' dependencies. The component serves as an alert or notice with a call-to-action link.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/badge/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Plate } from '@alfalab/core-components/plate';\nimport { Link } from '@alfalab/core-components/link';\n\n<Plate\n    view='attention'\n    limitContentWidth={false}\n    title={\n        <>\n            Компонент больше не поддерживается, переходите на новый компонент {''}\n            <Link href='https://core-ds.github.io/core-components/master/?path=/docs/statusbadge--docs'>\n                StatusBadge.\n            </Link>\n        </>\n    }\n    titleView='light'\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Desktop Modal Components - React\nDESCRIPTION: This React snippet renders the modal and its components. It manages the `modalAnatomy` state to control modal visibility and uses the `Header`, `ModalDesktop.Content`, and `ModalDesktop.Footer` components to structure the modal. The button is used to toggle the modal's open state. This example demonstrates the integration of the Header component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/modal/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [modalAnatomy, setModalAnatomy] = React.useState(false);\n    const handleModalAnatomy = () => setModalAnatomy(!modalAnatomy);\n\n    const styleContent = {\n        width: '100%',\n        height: '600px',\n        borderRadius: '8px',\n        backgroundColor: 'rgba(55, 120, 251, 0.1)',\n        border: '1px dashed rgb(55, 120, 251)',\n        boxSizing: 'border-box',\n    };\n\n    const styleFooter = {\n        width: '100%',\n        height: '48px',\n        borderRadius: '8px',\n        backgroundColor: 'rgba(55, 120, 251, 0.1)',\n        border: '1px dashed rgb(55, 120, 251)',\n        boxSizing: 'border-box',\n    };\n\n    return (\n        <Container>\n            <Button type='button' size='s' onClick={handleModalAnatomy}>\n                Показать анатомию\n            </Button>\n            <ModalDesktop open={modalAnatomy} onClose={handleModalAnatomy} size={600}>\n                <Header />\n                <ModalDesktop.Content>\n                    <div style={styleContent}></div>\n                </ModalDesktop.Content>\n                <ModalDesktop.Footer>\n                    <div style={styleFooter}></div>\n                </ModalDesktop.Footer>\n            </ModalDesktop>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Using PureCell.ExtraSubtitle with Configurable Text Color in React\nDESCRIPTION: This snippet shows how to implement PureCell.ExtraSubtitle with configurable color options within a PureCell component. It allows customization of padding, direction, and the specific color of the subtitle text.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pure-cell/src/docs/Component.stories.mdx#_snippet_11\n\nLANGUAGE: JSX\nCODE:\n```\n<PureCell\n    href={text('href', '')}\n    verticalPadding={verticalPaddingPrepared}\n    horizontalPadding={horizontalPadding}\n    direction={direction}\n>\n    <PureCell.Content>\n        <PureCell.Main>\n            <PureCell.Text titleColor='primary' view='component-primary' rowLimit={1}>\n                Яндекс Лавка\n            </PureCell.Text>\n            <PureCell.Category\n                categoryName={'Кафе, рестораны, столовые, бары'}\n                categoryPercent={10}\n            />\n        </PureCell.Main>\n        <PureCell.Footer footerPadding={footerPadding}>\n            <PureCell.ExtraSubtitle color={color}>Status</PureCell.ExtraSubtitle>\n        </PureCell.Footer>\n    </PureCell.Content>\n</PureCell>\n```\n\n----------------------------------------\n\nTITLE: Text Style Configuration\nDESCRIPTION: This snippet demonstrates setting different text styles using the `view` property of the `Text` component. It utilizes predefined styles such as 'headline-system-small' and 'paragraph-primary-medium'. The `Gap` component is used for spacing between the text elements.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/text/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n    <Text view='headline-system-small'>Headline-system-small</Text>\n    <Gap size='m' />\n    <Text view='paragraph-primary-medium'>Paragraph-primary-medium</Text>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Mobile SidePanel with Custom Components React JSX\nDESCRIPTION: Provides an example of rendering and controlling a Mobile SidePanel component. Similar to the desktop example, it uses React's `useState` to manage the panel's visibility. It renders a button (with size 'xs' for mobile) to open the panel and displays the `SidePanelMobile` component, passing the open state, close handler, and custom children (`Header`, `SidePanelMobile.Content`, `SidePanelMobile.Footer`) to define the panel's structure and content areas.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/side-panel/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [open, setOpen] = React.useState(false);\n    const handleOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n\n    const commonStyle = {\n        borderRadius: '8px',\n        backgroundColor: 'rgba(55, 120, 251, 0.1)',\n        border: '1px dashed rgb(55, 120, 251)',\n        boxSizing: 'border-box',\n        width: '100%',\n    };\n\n    const contentStyle = {\n        ...commonStyle,\n        height: '100%',\n    };\n\n    const footerStyle = {\n        ...commonStyle,\n        height: '48px',\n    };\n\n    return (\n        <Container>\n            <Button type='button' size='xs' onClick={handleOpen}>\n                Показать анатомию\n            </Button>\n            <SidePanelMobile open={open} onClose={handleClose}>\n                <Header />\n                <SidePanelMobile.Content>\n                    <div style={contentStyle}></div>\n                </SidePanelMobile.Content>\n                <SidePanelMobile.Footer>\n                    <div style={footerStyle}></div>\n                </SidePanelMobile.Footer>\n            </SidePanelMobile>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Success Screen in React\nDESCRIPTION: This React snippet demonstrates creating a custom screen for a successful confirmation event. It uses `ConfirmationContext` to access properties like `texts`, `onChangeScreen`, and `onChangeState`.  The screen displays a success message and a button that, when clicked, resets the screen and state. This code depends on the `@alfalab/core-components-confirmation` library and React's context API.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/confirmation-update.stories.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n// import { Confirmation, ConfirmationContext } from '@alfalab/core-components-confirmation';\n\nrender(() => {\n    const CodeSuccesScreen = () => {\n        const { texts, onChangeScreen, onChangeState } = React.useContext(ConfirmationContext);\n        return (\n            <Space align='center' size={24}>\n                <img src='./images/success_code.svg' alt='success' />\n                <Space align='center'>\n                    <Typography.Title color='primary' view='small'>\n                        {texts.codeSuccessTitle}\n                    </Typography.Title>\n                    <Typography.Text view='primary-medium'>\n                        {texts.codeSuccessDescription}\n                    </Typography.Text>\n                </Space>\n                <Button\n                    size='s'\n                    view='tertiary'\n                    onClick={() => {\n                        onChangeScreen('INITIAL');\n                        onChangeState('INITIAL');\n                    }}\n                >\n                    {texts.codeSuccessButtonTitle}\n                </Button>\n            </Space>\n        );\n    };\n\n    const { confirmationState, confirmationScreen, setConfirmationState, setConfirmationScreen } =\n        useConfirmation();\n\n    const handleInputFinished = () => {\n        setConfirmationScreen('CODE_SUCCESS');\n    };\n\n    const handleChangeScreen = (screen) => {\n        setConfirmationScreen(screen);\n    };\n\n    const getScreensMap = (screenMap) => ({ ...screenMap, CODE_SUCCESS: CodeSuccesScreen });\n\n    return (\n        <Confirmation\n            screen={confirmationScreen}\n            state={confirmationState}\n            alignContent='center'\n            countdownDuration={20000}\n            onChangeState={setConfirmationState}\n            onChangeScreen={handleChangeScreen}\n            onInputFinished={handleInputFinished}\n            getScreensMap={getScreensMap}\n            phone='+7 ··· ··· 07-24'\n            texts={{\n                codeSuccessTitle: 'Заявка на подключение отправлена',\n                codeSuccessDescription: 'Услуга подключится в течение 3-х рабочих дней',\n                codeSuccessButtonTitle: 'Перейти в список заявок',\n            }}\n        />\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing different alignment options with Space component in JSX\nDESCRIPTION: Demonstrates three different alignment options for the Space component: start, center, and end. This example places three differently sized blocks in each Space component to show how alignment affects their positioning.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/space/src/docs/description.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const styleBlock = {\n        width: '96px',\n        height: '32px',\n        borderRadius: '8px',\n        backgroundColor: 'var(--color-light-neutral-translucent-200)',\n    };\n    return (\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <Space useCssGaps={true} align='start' size={8}>\n                <div style={styleBlock} />\n                <div style={{ ...styleBlock, width: '144px' }} />\n                <div style={{ ...styleBlock, width: '176px' }} />\n            </Space>\n            <Space useCssGaps={true} align='center' size={8}>\n                <div style={styleBlock} />\n                <div style={{ ...styleBlock, width: '144px' }} />\n                <div style={{ ...styleBlock, width: '176px' }} />\n            </Space>\n            <Space useCssGaps={true} align='end' size={8}>\n                <div style={styleBlock} />\n                <div style={{ ...styleBlock, width: '144px' }} />\n                <div style={{ ...styleBlock, width: '176px' }} />\n            </Space>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Markdown Files for Documentation\nDESCRIPTION: This snippet imports Markdown files for descriptions, development information, and the changelog of the documented component. These files will be rendered inside tabs. It utilizes the '.mdx' and '?raw' extensions to import the content of the Markdown files. These files are essential for the component documentation, allowing for a structured format to present documentation content. The imported files are assumed to exist in the same or a relative location of the import statement.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Defining Options and Constants for Storybook Knobs\nDESCRIPTION: Exports JavaScript arrays containing options for the picker button (`options`), available content colors (`CONTENT_COLORS`), and state types (`STATE_TYPES`). These constants are used within Storybook stories to populate select knobs.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/custom-picker-button/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const options = [\n    { key: 'Заказать карту' },\n    { key: 'Выписка по счёту' },\n    { key: 'Выпустить карту' },\n    { key: 'Скопировать реквизиты' },\n];\n\nexport const CONTENT_COLORS = ['white', 'black'];\nexport const STATE_TYPES = ['darkening', 'lightening'];\n```\n\n----------------------------------------\n\nTITLE: Creating and providing core config context with React useMemo (JavaScript/JSX)\nDESCRIPTION: This snippet demonstrates how to create a core configuration object with memoization to optimize performance, setting the breakpoint for responsive design and specifying the client environment (e.g., desktop). It employs React's useMemo hook and provides the configuration via CoreConfigContext.Provider around the app component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/core-config.stories.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst coreConfig = React.useMemo<CoreConfigContext>(\n    () => ({ breakpoint: 1024, client: 'desktop' }), []\n);\n\n<CoreConfigContext.Provider>\n    <App />\n</CoreConfigContext.Provider>\n```\n\n----------------------------------------\n\nTITLE: Adding phone number auto-completion feature in React component\nDESCRIPTION: This snippet introduces a new feature to auto-fill phone number inputs with country code preservation support. It depends on React components handling phone inputs, possibly using `international-phone-input` component, with an optional `clearableCountryCode` prop for Safari compatibility. It enhances user experience by simplifying phone number entry while maintaining country code information.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction PhoneInput({ clearableCountryCode }) {\n  // Component logic for auto-completion\n  // Uses 'clearableCountryCode' to control behavior\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-step Modal Navigation with React JSX\nDESCRIPTION: This snippet implements a multi-step modal dialog where users can navigate through sequential steps with individual titles and button texts. React state hooks manage the current step and modal visibility. The modal supports conditional rendering of back buttons, sticky headers/footers, and adapts styles and sizes responsively. Key parameters include step (current step index), open (modal visibility), and item (data object for step content). The dialog renders a large step number display with customized background and border colors. The primary button advances the step or closes the modal based on the current step context. This snippet requires React and UI components like Button, Modal, and Container, and emphasizes smooth UX with fixed modal positioning and responsive button sizes.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/modal/src/docs/description.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst DATA = {\n    1: {\n        title: 'Первый уровень',\n        btnText: 'Дальше',\n        bg: 'rgba(55, 120, 251, 0.1)',\n        color: '#3778FB',\n    },\n    2: {\n        title: 'Второй уровень',\n        btnText: 'Дальше',\n        bg: 'rgba(207, 112, 255, 0.1)',\n        color: '#CF70FF',\n    },\n    3: {\n        title: 'Третий уровень',\n        btnText: 'Готово',\n        bg: 'rgba(112, 255, 126, 0.1)',\n        color: '#058102',\n    },\n};\n\nrender(() => {\n    const [step, setStep] = React.useState(1);\n    const [open, setOpen] = React.useState(false);\n\n    const handleOpen = () => {\n        setOpen(true);\n        setStep(1);\n    };\n    const handleClose = () => setOpen(false);\n\n    const item = DATA[step];\n\n    const commonStyles = {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        transition: 'background 0.2s ease-in, border 0.2s ease-in',\n        borderRadius: '8px',\n        background: item.bg,\n        border: `1px dashed ${item.color}`,\n        color: item.color,\n        width: '100%',\n        boxSizing: 'border-box',\n    };\n\n    return (\n        <Container>\n            <Button size={document.body.clientWidth < 450 ? 'm' : 's'} onClick={handleOpen}>\n                Показать модалку\n            </Button>\n\n            <Modal open={open} onClose={handleClose} fixedPosition={true}>\n                <Modal.Header\n                    sticky={true}\n                    hasCloser={true}\n                    hasBackButton={step !== 1}\n                    title={item.title}\n                    onBack={() => setStep(step - 1)}\n                />\n                <Modal.Content flex={true}>\n                    <div\n                        style={{\n                            ...commonStyles,\n                            height: document.body.clientWidth < 450 ? '100%' : '550px',\n                        }}\n                    >\n                        <span style={{ fontWeight: 700, fontSize: '72px' }}>{step}</span>\n                    </div>\n                </Modal.Content>\n                <Modal.Footer sticky={true}>\n                    <Button\n                        size={document.body.clientWidth < 450 ? 'm' : 's'}\n                        view='primary'\n                        onClick={\n                            item.btnText === DATA[1].btnText ? () => setStep(step + 1) : handleClose\n                        }\n                    >\n                        {item.btnText}\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta with Import of Component Stories\nDESCRIPTION: This snippet imports Storybook add-ons, components, and markdown files, then sets up the story metadata using the Meta component, linking it to the imported story definitions. It provides the foundational configuration for the documentation page, establishing context and dependencies.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-range/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta of={Stories} />\n```\n\n----------------------------------------\n\nTITLE: Adding Slider component\nDESCRIPTION: Defines a React slider component for selecting values within a range. Dependencies include React and possibly a third-party slider library. Props include min, max, value, and change handlers.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_121\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-slider implementation\n```\n\n----------------------------------------\n\nTITLE: Displaying Gallery with different media quantities - React\nDESCRIPTION: This example shows how to use the Gallery component to display different quantities of media (images and videos). It utilizes React's useState hook to manage the gallery's open state and the selected media quantity. A RadioGroup component allows users to select the number of media items to display.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/gallery/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst images = [\n    {\n        name: 'Вертикальное изображение',\n        src: './images/gallery_1.jpg',\n    },\n    {\n        name: 'Горизонтальное  изображение',\n        src: './images/gallery_2.jpg',\n    },\n    {\n        name: 'Квадратное изображение',\n        src: './images/gallery_3.jpg',\n    },\n    {\n        name: 'Маленькое изображение',\n        src: './images/gallery_4.jpg',\n    },\n    {\n        name: 'Alfa promo.m3u8',\n        src: 'https://alfavideo.servicecdn.ru/videos/101064_31s0hnwZaamhbwE/master.m3u8',\n    },\n    {\n        name: 'Битое изображение.jpg',\n        src: 'https://picsum.photos',\n    },\n];\n\nconst video = [\n    {\n        name: 'Alfa promo.m3u8',\n        src: 'https://alfavideo.servicecdn.ru/videos/101064_31s0hnwZaamhbwE/master.m3u8',\n    },\n];\n\nconst imagesQuantityMapper = {\n    some: images,\n    one: [images[0]],\n    'one video': video,\n};\n\nrender(() => {\n    const [open, setOpen] = React.useState(false);\n    const [imagesQuantity, setImagesQuantity] = React.useState('some');\n\n    const onImagesQuantityChange = (_, payload) => {\n        setImagesQuantity(payload.value);\n    };\n\n    return (\n        <div style={{ width: 320 }}>\n            <Button view='secondary' block={true} onClick={() => setOpen(true)}>\n                Открыть галерею\n            </Button>\n            <Gallery\n                open={open}\n                onClose={() => {\n                    setOpen(false);\n                }}\n                images={imagesQuantityMapper[imagesQuantity]}\n            />\n            <Gap size='xl' />\n            <RadioGroup\n                label='Количество медиа'\n                direction='vertical'\n                name='radioGroup'\n                onChange={onImagesQuantityChange}\n                value={imagesQuantity}\n            >\n                <Radio size='m' label='Несколько' value='some' />\n                <Radio size='m' label='Одно изображение' value='one' />\n                <Radio size='m' label='Одно видео' value='one video' />\n            </RadioGroup>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Using CustomPickerButtonDesktop Component in Storybook\nDESCRIPTION: Demonstrates the desktop-specific `CustomPickerButtonDesktop` component within a Storybook story. Similar to the other variants, it employs Storybook knobs (`color`, `select`, `text`, `boolean`) to interactively adjust props such as `backgroundColor`, `contentColor`, `stateType`, `options`, `label`, `size`, `variant`, `disabled`, `loading`, `leftAddons` (with `StarMIcon`), and `showArrow`.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/custom-picker-button/src/docs/Component.stories.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Story name='CustomPickerButtonDesktop'>\n    <CustomPickerButtonDesktop\n        backgroundColor={color('backgroundColor', '#FF45C3')}\n        contentColor={select('contentColor', CONTENT_COLORS, 'white')}\n        stateType={select('stateType', STATE_TYPES, 'darkening')}\n        options={options}\n        label={text('label', 'Действие')}\n        size={select('size', [32 , 40 , 48 , 56 , 64 , 72], 56)}\n        variant={select('variant', ['default', 'compact'])}\n        disabled={boolean('disabled', false)}\n        loading={boolean('loading', false)}\n        leftAddons={boolean('Иконка слева', false) ? <StarMIcon /> : null}\n        showArrow={boolean('Показывать стрелку', true)}\n    />\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Global Container Override with PortalContext\nDESCRIPTION: This snippet demonstrates how to globally override the rendering container for Portal components using PortalContext.Provider. All Portal components within the provider will render into the specified DOM element, eliminating the need for individual getPortalContainer props.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/portal/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {PortalContext} from '@alfalab/core-components/shared';\n\n<PortalContext.Provider value={() => document.querySelector('.foobar')}>\n    ...\n</PortalContext.Provider>;\n```\n\n----------------------------------------\n\nTITLE: Defining dataTestId Structure in React\nDESCRIPTION: This snippet shows the structure of the dataTestId used within the CalendarRange component. The `getCalendarRangeTestIds` function returns an object with keys representing different elements within the component. This facilitates testing and element selection via `dataTestId`. The values of the object can be used to find specific elements within the rendered component during testing.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-range/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    component: dataTestId,\n    calendarContainerFrom: `${dataTestId}-container-from`,\n    calendarContainerTo: `${dataTestId}-container-to`,\n};\n```\n\n----------------------------------------\n\nTITLE: Updating dependencies with tslib library\nDESCRIPTION: This section outlines several changes. It adds the 'tslib' library as a dependency.  It also updates the 'tag' component to version 5.1.0, 'badge' to 5.0.1, 'keyboard-focusable' to 4.0.4, and 'picker-button' to 10.3.7.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Adding OptionsSize prop to Select Component\nDESCRIPTION: This modification adds the `optionsSize` prop to the select component. The `optionsSize` prop allows to customize the styling, size and presentation of items displayed inside the options list. It provides additional options for customizing the behavior of select components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_86\n\n\n\n----------------------------------------\n\nTITLE: Select with OptionShape Selected - React\nDESCRIPTION: This code demonstrates the usage of `SelectDesktop` and `SelectMobile` components with option objects instead of keys for selected values. It uses React's `useState` and `useMemo` hooks. The `handleChange` function directly updates the `selected` state with the selected option objects.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/select/src/docs/description.mdx#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const options = React.useMemo(\n        () => [\n            { key: '1', content: 'Neptunium' },\n            { key: '2', content: 'Plutonium' },\n            { key: '3', content: 'Americium' },\n            { key: '4', content: 'Curium' },\n            { key: '5', content: 'Berkelium' },\n            { key: '6', content: 'Californium' },\n            { key: '7', content: 'Einsteinium' },\n            { key: '8', content: 'Fermium' },\n        ],\n        [],\n    );\n\n    const [selected, setSelected] = React.useState([]);\n\n    const handleChange = ({ selectedMultiple }) => {\n        setSelected(selectedMultiple);\n    };\n\n    return (\n        <div style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}>\n            <SelectDesktop\n                allowUnselect={true}\n                placeholder='Выберите элементы'\n                label='Множественный выбор'\n                block={true}\n                name='select'\n                optionsListWidth='field'\n                Option={BaseOption}\n                size={56}\n                selected={selected}\n                {...useSelectWithApply({\n                    options,\n                    selected,\n                    onChange: handleChange,\n                })}\n            />\n        </div>\n    );\n});\n//MOBILE\nrender(() => {\n    const options = React.useMemo(\n        () => [\n            { key: '1', content: 'Neptunium' },\n            { key: '2', content: 'Plutonium' },\n            { key: '3', content: 'Americium' },\n            { key: '4', content: 'Curium' },\n            { key: '5', content: 'Berkelium' },\n            { key: '6', content: 'Californium' },\n            { key: '7', content: 'Einsteinium' },\n            { key: '8', content: 'Fermium' },\n        ],\n        [],\n    );\n\n    const [selected, setSelected] = React.useState([]);\n\n    const handleChange = ({ selectedMultiple }) => {\n        setSelected(selectedMultiple);\n    };\n\n    return (\n        <div style={{ width: '100%' }}>\n            <SelectMobile\n                allowUnselect={true}\n                size={56}\n                block={true}\n                options={options}\n                placeholder='Выберите элемент'\n                label='Множественный выбор'\n                name='select'\n                multiple={true}\n                onChange={handleChange}\n                selected={selected}\n                Option={BaseOption}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Header Settings Configuration JavaScript\nDESCRIPTION: Defines a constant array `HEADER_SETTINGS` containing configurations for boolean header options controlled by `Switch` components. Each object specifies the `label` (in Russian) and the corresponding `name` for the setting.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/side-panel/src/docs/description.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst HEADER_SETTINGS = [\n    { label: 'Крестик', name: 'hasCloser' },\n    { label: 'Стрелка назад', name: 'hasBackButton' },\n    { label: 'Фиксация шапки при скролле', name: 'sticky' },\n];\n```\n\n----------------------------------------\n\nTITLE: IntlPhoneInput API Changes with New Props\nDESCRIPTION: Changes to the IntlPhoneInput component adding new features like canBeEmptyCountry, hideCountrySelect, ruNumberPriority, and clear props. The onCountryChange callback can now receive undefined when canBeEmptyCountry is true.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\n// New props added to IntlPhoneInput\n<IntlPhoneInput\n  canBeEmptyCountry={true} // Allow empty country state\n  hideCountrySelect={false} // Option to hide country select\n  ruNumberPriority={true} // Prioritize Russian number format\n  clear={true} // Reset country on field clear\n  onCountryChange={(country) => {\n    // Now can be undefined when canBeEmptyCountry is true\n    console.log(country);\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Russian Informational Text Content in React Component\nDESCRIPTION: A React functional component that renders a multilingual (Russian) informational text with collapsible sections and links. It explains legal obligations and best practices related to anti-money laundering laws for Russian businesses, including operational examples and compliance tips. It relies on React components such as Typography.Text, Link, and Collapse.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/modal/src/docs/description.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Text = ({ onClose }) => (\n    <>\n        <Typography.Text tag='p'>\n            В 2001 году в России начал действовать Федеральный закон №115 «О противодействии\n            легализации доходов, полученных преступным путём, и финансированию терроризма». В рамках\n            закона банки могут блокировать карты, отказывать в проведении сомнительных операций,\n            ограничить доступ в интернет-банк или запрашивать документы, если по операции клиента\n            возникли подозрения.{' '}\n            <Link onClick={onClose}>Нажмите сюда, чтобы закрыть модалку без крестика</Link>\n        </Typography.Text>\n        <br />\n        <Typography.Text tag='p'>\n            Требования 115-ФЗ и связанных с ним документов Банка России часто меняются,\n            предприниматели не всегда успевают за ними следить. Последствия нарушений\n            «антиотмывочного» законодательства всегда неприятны: приходится остановить\n            бизнес-процессы и доказать банку законность операций. Специалисты «Альфа-банка» собрали\n            понятные рекомендации, как сэкономить время на объяснения и предотвратить блокировки\n        </Typography.Text>\n        <Collapse collapsedLabel='Подробнее' expandedLabel='Скрыть'>\n            <Typography.Text tag='p'>\n                115-ФЗ Касается всех предпринимателей, фирм и физлиц, а также тех, кто пользуется\n                банковским счётом для бизнеса, крупных денежных переводов или личных расчётов.\n                Ограничения интернет-банка, блокировка карт добросовестных компаний могут произойти\n                из-за неправильно оформленных документов, ошибок в платёжке или попыток снизить\n                налоги.\n            </Typography.Text>\n            <br />\n            <Typography.Text tag='p'>\n                Клиенты воспринимают ограничения как атаку со стороны банка, но чаще всего сами\n                допускают ошибки или нарушения, которых можно избежать. Банки не преследуют цели\n                доставить неудобства клиентам — они обязаны соблюдать законодательство и следовать\n                инструкциям и рекомендациям ЦБ, а в противном случае рискуют лишиться лицензии.\n            </Typography.Text>\n            <br />\n            <Typography.Text tag='p'>\n                Обналичивание — сомнительные операции, когда юрлицо или предприниматель снимает со\n                счёта более 80% от оборота или переводит деньги на счета физлиц, которые затем\n                снимают в наличной форме.\n            </Typography.Text>\n            <br />\n            <Typography.Text tag='p'>\n                Вывод капитала за границу — это переводы нерезидентам по договорам об импорте\n                работ/услуг и результатов интеллектуальной деятельности, по которым проведение\n                расчётов осуществляется без одновременной уплаты НДС; по сделкам купли-продажи\n                ценных бумаг, а также товаров, которые не пересекают границу России.\n            </Typography.Text>\n            <br />\n            <Typography.Text tag='p'>\n                Транзитные операции — операции, в процессе которых деньги поступают на счёт компании\n                от других резидентов и списываются в короткие сроки. При этом, как правило, в этих\n                случаях по счёту нет начислений зарплат, уплаты налогов, и они не соответствуют\n                заявленному компанией виду деятельности.\n            </Typography.Text>\n            <br />\n            <Typography.Text tag='p'>\n                Запрашивать могут любые документы и устанавливать разные сроки их предоставления —\n                это зависит от службы контроля конкретного банка. Обычно банки запрашивают чеки,\n                счета или договора с контрагентами. В некоторых случаях бывает достаточно устных\n                объяснений. Для проверки информации и пересмотра уровня риска банк может пригласить\n                клиента в банк для устного разъяснения или выехать по месту ведения бизнеса клиента.\n            </Typography.Text>\n        </Collapse>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Storybook Meta Configuration for Accessibility Navigation Documentation\nDESCRIPTION: Defines the meta information for the Storybook documentation page, including title, parameters to hide the canvas tab, and an identifier for the navigation guidelines. This setup enables proper organization and display of the documentation content within Storybook.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/menu.stories.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n\n<Meta\n    title='Accessibility/Навигация'\n    parameters={{ previewTabs: { canvas: { hidden: true } } }}\n    id='Guidelines/Accessibility/Navigation'\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Mobile Select Components with Custom Options\nDESCRIPTION: Provides a React component rendering two mobile select dropdowns with options displaying account details and amounts, supporting unselection and dynamic content rendering via valueRender functions. Uses React state hooks to manage selections across both mobile dropdowns.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/select/src/docs/description.mdx#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nrender(() => {\n    const [selectedFirst, setSelectedFirst] = React.useState([]);\n    const [selectedSecond, setSelectedSecond] = React.useState([]);\n\n    return (\n        <div style={{ width: '100%' }}>\n            <SelectMobile\n                allowUnselect={true}\n                options={OPTIONS_WITH_AMOUNT_ON_TOP}\n                placeholder='Выберите счёт'\n                label='Счёт'\n                Option={BaseOption}\n                block={true}\n                selected={selectedFirst}\n                onChange={({ selected }) => setSelectedFirst(selected)}\n                valueRenderer={({ selected }) => {\n                    if (!selected) return '';\n\n                    const { amount } = DATA[selected.key];\n\n                    return (\n                        <Amount\n                            value={amount}\n                            minority={100}\n                            currency='RUR'\n                            view='withZeroMinorPart'\n                            transparentMinor={false}\n                        />\n                    );\n                }}\n            />\n            <div style={{ height: 'var(--gap-16)' }} />\n            <SelectMobile\n                allowUnselect={true}\n                options={OPTIONS}\n                placeholder='Выберите счёт'\n                Option={BaseOption}\n                block={true}\n                selected={selectedSecond}\n                onChange={({ selected }) => setSelectedSecond(selected)}\n                valueRenderer={({ selected }) => {\n                    if (!selected) return '';\n\n                    const { text, amount } = DATA[selected.key];\n\n                    return renderOption({\n                        text,\n                        amount,\n                        padding: { top: 'xs', bottom: 'xs' },\n                    });\n                }}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Using useConfirmation Hook for State and Screen Management in React (JSX)\nDESCRIPTION: Provides an example React functional component that uses the 'useConfirmation' hook to manage the Confirmation component's screen and state. It demonstrates handling asynchronous code validation with conditional state adjustments, retry logic for resending codes, and rendering a desktop confirmation component that responds to state and screen changes via callback props. This pattern enables dynamic and user-driven control of confirmation workflows.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/confirmation/src/docs/development.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Confirmation, useConfirmation } from '@alfalab/core-components/confirmation';\n\nconst Example = () => {\n    const { confirmationState, confirmationScreen, setConfirmationState, setConfirmationScreen } =\n        useConfirmation();\n\n    const handleInputFinished = async (code) => {\n        const res = await checkCode(code);\n\n        if (!res.ok) {\n            setConfirmationState('CODE_ERROR');\n        }\n    };\n\n    const handleSmsRetryClick = () => {\n        resendCode();\n\n        setConfirmationState('INITIAL');\n    };\n\n    return (\n        <ConfirmationDesktop\n            screen={confirmationScreen}\n            state={confirmationState}\n            onChangeState={setConfirmationState}\n            onChangeScreen={setConfirmationScreen}\n            onInputFinished={handleInputFinished}\n            onSmsRetryClick={handleSmsRetryClick}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Horizontal CheckboxGroup Implementation - React\nDESCRIPTION: This snippet demonstrates the implementation of a horizontal CheckboxGroup using React. It utilizes the `CheckboxGroupDesktop` component with a horizontal layout and handles state changes for individual checkboxes. The code also includes error handling and button components to toggle the error state. It showcases how to create a checkbox group with a label, hint, and error message.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/checkbox-group/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [value, setValue] = React.useState({ one: false, two: false, three: false });\n    const [error, setError] = React.useState(false);\n\n    const onChange = (_, payload) => {\n        setValue({ ...value, [payload.name]: payload.checked });\n    };\n\n    return (\n        <div style={{ width: '100%' }}>\n            <CheckboxGroupDesktop\n                label='Планеты расположенные между Землёй и Солнцем'\n                direction='horizontal'\n                onChange={onChange}\n                hint='Выберите несколько планет'\n                error={error}\n            >\n                <Checkbox label='Меркурий' name='one' checked={value.one} size={24} />\n                <Checkbox label='Венера' name='two' checked={value.two} size={24} />\n                <Checkbox label='Нептун' name='three' checked={value.three} size={24} />\n            </CheckboxGroupDesktop>\n\n            <Gap size='2xl' />\n\n            <Space direction='horizontal' wrap={true}>\n                <Button size='xxs' onClick={() => setError(false)}>\n                    По умолчанию\n                </Button>\n                <Button size='xxs' onClick={() => setError('Правильный ответ: Венера и Меркурий')}>\n                    Состояние ошибки\n                </Button>\n            </Space>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Enhancing the Button Component with Types, Ref Forwarding, and Theming in JavaScript\nDESCRIPTION: This code enhances the button component by adding TypeScript types, React's forwardRef for ref passing, and styling updates for better theming flexibility. It ensures robust type safety and reusability, with support for `href` props for link-like buttons, depending on React and CSS modules.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2021.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Implementation of Button component with types and ref forwarding\nimport React, { forwardRef } from 'react';\nimport styles from './button.module.css';\n\nconst Button = forwardRef(({ href, children, styleType, ...rest }, ref) => {\n  const Component = href ? 'a' : 'button';\n  return (\n    <Component\n      ref={ref}\n      className={`${styles.button} ${styles[styleType]}`}\n      {...rest}\n    >\n      {children}\n    </Component>\n  );\n});\n\nexport default Button;\n```\n\n----------------------------------------\n\nTITLE: Importing SliderInput Component in React\nDESCRIPTION: Shows how to import the SliderInput component from the @alfalab/core-components library. This import statement is necessary before using the component in your React application.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/slider-input/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SliderInput } from '@alfalab/core-components/slider-input';\n```\n\n----------------------------------------\n\nTITLE: Displaying Deprecated TimeInput in Storybook with Knobs - JavaScript/JSX\nDESCRIPTION: This snippet defines a Storybook story for the TimeInput component, allowing real-time manipulation of its props using addon-knobs. It demonstrates block-level toggling, size selection, and text-based controls for error, hint, label, and placeholder, as well as a clearable flag. The required dependencies include React, Storybook core features, @storybook/addon-knobs, and @alfalab/core-components-time-input; all props reflect those accepted by TimeInput. User interaction with the controls dynamically updates the rendered component in the Canvas tab.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/time-input/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { text, select, boolean } from '@storybook/addon-knobs';\nimport { TimeInput } from '@alfalab/core-components-time-input';\n\n<Story name='TimeInput'>\n    {React.createElement(() => {\n        return (\n            <TimeInput\n                block={boolean('block', false)}\n                size={select('size', ['s', 'm', 'l'], 's')}\n                error={text('error', '')}\n                hint={text('hint', '')}\n                label={text('label', '')}\n                placeholder={text('placeholder', '')}\n                clear={boolean('clear', false)}\n            />\n        );\n    })}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Configuring Underlay component with Storybook controls\nDESCRIPTION: A complex Storybook story that demonstrates the Underlay component with multiple configurable properties using Storybook knobs. It handles both preview mode and interactive mode with different styling options.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/underlay/src/docs/Component.stories.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nconst paddingSizes = ['3xs', '2xs', 'xs', 's', 'm', 'l', 'xl', '2xl', '3xl', '4xl'];\nconst borderSizes = ['xs', 's', 'm', 'l', 'xl', '2xl', '3xl'];\nconst borderRadius = {\n    bottomRight: select('borderRadius.bottomRight', borderSizes, 'm', 'underlayProps'),\n    bottomLeft: select('borderRadius.bottomLeft', borderSizes, 'm', 'underlayProps'),\n    topRight: select('borderRadius.topRight', borderSizes, 'm', 'underlayProps'),\n    topLeft: select('borderRadius.topLeft', borderSizes, 'm', 'underlayProps'),\n}\nconst borderSize = select('borderSize', ['1', '2', '4'], '2', 'underlayProps');\nconst paddingTop = select('padding.top', paddingSizes, 'm', 'underlayProps');\nconst paddingRight = select('padding.right', paddingSizes, 'm', 'underlayProps');\nconst paddingBottom = select('padding.bottom', paddingSizes, 'm', 'underlayProps');\nconst paddingLeft = select('padding.left', paddingSizes, 'm', 'underlayProps');\nconst overflow = boolean('overflow', true, 'underlayProps');\nconst height = number('height', 250, undefined, 'underlayProps');\nconst width = number('width', 700, undefined, 'underlayProps');\nconst bottomRightCorner = select(\n    'borderRadius.bottomRight',\n    borderSizes,\n    'm',\n    'contentProps',\n);\nconst bottomLeftCorner = select(\n    'borderRadius.bottomLeft',\n    borderSizes,\n    'm',\n    'contentProps',\n);\nconst topRightCorner = select('borderRadius.topRight', borderSizes, 'm', 'contentProps');\nconst topLeftCorner = select('borderRadius.topLeft', borderSizes, 'm', 'contentProps');\nconst contentProps = {\n    borderSize: select('borderSize', ['1', '2', '4'], '1', 'contentProps'),\n    borderColor: select('borderColor', BORDER_COLOR, 'secondary', 'contentProps'),\n    borderRadius: {\n        bottomRight: bottomRightCorner,\n        bottomLeft: bottomLeftCorner,\n        topRight: topRightCorner,\n        topLeft: topLeftCorner,\n    },\n    backgroundColor: text('backgroundColor', 'primary', 'contentProps'),\n    backgroundImageURL: text('backgroundImageURL', '', 'contentProps'),\n    shadow: select('shadow', SHADOW, 'shadow-s', 'contentProps'),\n    axis: select('axis', ['vertical', 'horizontal'], 'vertical', 'contentProps'),\n    alignment: select(\n        'alignment',\n        ['start', 'end', 'fill', 'center'],\n        'center',\n        'contentProps',\n    )\n};\nconst previewStyles = stylesStringToObj(getQueryParam('wrapperStyles'));\nconst isPreview = Object.keys(previewStyles).length > 0;\nconst styleGraphics = {\n    width: '288px',\n    height: '100px',\n    borderRadius: '8px',\n    backgroundColor: 'rgba(55, 120, 251, 0.1)',\n    border: '1px dashed rgb(55, 120, 251)',\n    boxSizing: 'border-box',\n};\n```\n\n----------------------------------------\n\nTITLE: Using Plate and Link Components in JSX\nDESCRIPTION: This code snippet demonstrates how to use the Plate and Link components from '@alfalab/core-components'. It displays a message within the Plate component with a link to the Spinner documentation. The Plate component is configured with 'attention' view, 'light' titleView, and limitContentWidth set to false.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/loader/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Plate\n    view='attention'\n    titleView='light'\n    limitContentWidth={false}\n    title={\n        <>\n            Компонент больше не поддерживается, переходите на новый компонент{' '}\n            <Link href='https://core-ds.github.io/core-components/master/?path=/docs/spinner--docs'>\n                Spinner.\n            </Link>\n        </>\n    }\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring and Rendering PureCell.Text Component with Dynamic Properties in React JSX\nDESCRIPTION: Defines a React functional component that renders a PureCell with a nested PureCell.Text and PureCell.Category components, featuring interactive property selectors for vertical and horizontal padding, graphic padding, direction, row limit, view style, and title color. It depends on React, PureCell UI components, and UI helpers such as 'select' and 'text' for property controls. Key parameters include verticalPadding, horizontalPadding, graphicPadding, direction, rowLimit, view, and color, allowing flexible UI customization. The code outputs a JSX representation of the cell with controlled styling and content. Constraints are that the snippet assumes presence of UI controls and external PureCell component definitions.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pure-cell/src/docs/Component.stories.mdx#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst verticalPadding = select(\n    'verticalPadding',\n    ['airy', 'default', 'compact', 'tiny', 'none'],\n    'default',\n);\nconst verticalTopPadding = select(\n    'verticalPadding.top',\n    ['airy', 'default', 'compact', 'tiny', 'none', undefined],\n    undefined,\n);\nconst verticalBottomPadding = select(\n    'verticalPadding.bottom',\n    ['airy', 'default', 'compact', 'tiny', 'none', undefined],\n    undefined,\n);\nconst verticalPaddingPrepared = (verticalTopPadding || verticalBottomPadding) ? {top: verticalTopPadding, bottom: verticalBottomPadding } : verticalPadding\n\nconst horizontalPadding = select(\n    'horizontalPadding',\n    ['left', 'right', 'both', 'none'],\n    'none',\n);\nconst graphicPadding = select(\n    'graphicPadding',\n    ['airy', 'default', 'compact', 'tiny', 'none', undefined],\n    undefined,\n);\nconst direction = select('direction', ['vertical', 'horizontal'], 'horizontal');\nconst rowLimit = select('rowLimit', ['1', '2'], '1');\nconst view = select('view', ['primary-small', 'component'], 'component');\nconst color = select(\n    'titleColor',\n    [\n        'tertiary',\n        'disabled',\n        'accent',\n        'primary',\n        'attention',\n        'positive',\n        'secondary',\n        'tertiary-inverted',\n        'primary-inverted',\n        'secondary-inverted',\n        'link',\n        'negative',\n    ],\n    'primary',\n);\nreturn (\n    <PureCell\n        href={text('href', '')}\n        verticalPadding={verticalPaddingPrepared}\n        horizontalPadding={horizontalPadding}\n        direction={direction}\n    >\n        <PureCell.Graphics graphicPadding={graphicPadding}>\n            <Circle />\n        </PureCell.Graphics>\n        <PureCell.Content>\n            <PureCell.Main>\n                <PureCell.Text\n                    titleColor={color}\n                    value={text('value', '')}\n                    view={view}\n                    rowLimit={rowLimit}\n                >\n                    Яндекс Лавка\n                </PureCell.Text>\n                <PureCell.Category\n                    categoryName={'Кафе, рестораны, столовые, бары'}\n                    categoryPercent={10}\n                />\n            </PureCell.Main>\n            <PureCell.Footer>\n                <PureCell.Comment>Комментарий есть</PureCell.Comment>\n            </PureCell.Footer>\n        </PureCell.Content>\n    </PureCell>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Component Header in Storybook MDX (MDX/JSX)\nDESCRIPTION: Utilizes a custom `<ComponentHeader>` block (imported from `storybook/blocks`) to display the component's name and a brief description at the top of the documentation page. This provides a consistent visual header for the component's documentation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tag/src/docs/Component.docs.mdx#_snippet_2\n\nLANGUAGE: MDX/JSX\nCODE:\n```\n<ComponentHeader\n    name='Tag'\n    children='Многофункциональный контрол. Используется в составе групп и других компонентов.'\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating picker-button dependency\nDESCRIPTION: This section updates the dependencies of the project, specifically the 'picker-button' component, to version 10.3.12.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Rendering ProductCover.Single with Various Sizes (JSX)\nDESCRIPTION: This snippet renders ProductCover.Single components with different sizes defined in the BIG_SIZES and SMALL_SIZES arrays. It iterates over these arrays and creates a ProductCover.Single instance for each size, configuring properties like cardholderName, cardNumber, baseUrl, layers, cardId, and eyeButton.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/product-cover/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const BIG_SIZES = [164, 128, 96, 48];\n    const SMALL_SIZES = [40, 32, 16];\n\n    return (\n        <>\n            <Space direction='horizontal' align='start' size={[20]}>\n                {BIG_SIZES.map((size) => (\n                    <ProductCover.Single\n                        key={String(size)}\n                        size={size}\n                        cardholderName='Cardholder Name'\n                        cardNumber={1234000000001234}\n                        baseUrl='https://online.alfabank.ru/cards-images/cards/'\n                        layers='BACKGROUND,LOGO,PAYMENT_SYSTEM'\n                        cardId='RM'\n                        eyeButton={true}\n                    />\n                ))}\n            </Space>\n            <Gap size='l' />\n            <Space direction='horizontal' align='center' size={[20]}>\n                {SMALL_SIZES.map((size) => (\n                    <ProductCover.Single\n                        key={String(size)}\n                        size={size}\n                        cardholderName='Cardholder Name'\n                        cardNumber={1234000000001234}\n                        baseUrl='https://online.alfabank.ru/cards-images/cards/'\n                        layers='BACKGROUND,LOGO,PAYMENT_SYSTEM'\n                        cardId='RM'\n                    />\n                ))}\n            </Space>\n        </>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering International Phone Input Without Country Picker in React (JSX)\nDESCRIPTION: This example demonstrates how to render the InternationalPhoneInput component without the explicit country selection dropdown by passing 'countrySelectProps' with 'hideCountrySelect' set to true. React state is used to handle the phone number value and track the detected country automatically based on input. The snippet showcases minimal but flexible integration, with output reflecting the resolved country code. Dependencies are React and UI components InternationalPhoneInput, Gap, and Typography. Inputs include 'label', 'placeholder', 'value', and 'onChange', with the output being the entered number and auto-detected country.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/international-phone-input/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [value, setValue] = React.useState('');\n    const [selectedCountry, setSelectedCountry] = React.useState();\n\n    const handleChange = (phone) => setValue(phone);\n\n    return (\n        <div style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}>\n            <InternationalPhoneInput\n                breakpoint={BREAKPOINT}\n                label='Номер телефона'\n                placeholder='Введите номер телефона'\n                value={value}\n                onChange={handleChange}\n                onCountryChange={setSelectedCountry}\n                block={true}\n                countrySelectProps={{ hideCountrySelect: true }}\n            />\n            <Gap size='m' />\n            <Typography.Text color='secondary'>\n                Код выбранной страны: {selectedCountry && selectedCountry.iso2}\n            </Typography.Text>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering PureCell Footer Component with Padding and Graphic Controls in React JSX\nDESCRIPTION: This snippet shows a PureCell component example focusing on footer configuration with selectable footer, vertical, and horizontal paddings and layout direction. It features graphics with padding, content, and main sections. The story uses React and PureCell components alongside select controls for dynamic UI adjustments. Inputs include footer padding type, vertical and horizontal layout paddings, graphic padding options, and direction. The output is a PureCell component demonstrating footer usage in a UI layout scenario.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pure-cell/src/docs/Component.stories.mdx#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst footerPadding = select('footerPadding', ['default', 'none'], 'default');\nconst verticalPadding = select(\n    'verticalPadding',\n    ['airy', 'default', 'compact', 'tiny', 'none'],\n    'default',\n);\nconst verticalTopPadding = select(\n    'verticalPadding.top',\n    ['airy', 'default', 'compact', 'tiny', 'none', undefined],\n    undefined,\n);\nconst verticalBottomPadding = select(\n    'verticalPadding.bottom',\n    ['airy', 'default', 'compact', 'tiny', 'none', undefined],\n    undefined,\n);\nconst verticalPaddingPrepared = (verticalTopPadding || verticalBottomPadding) ? {top: verticalTopPadding, bottom: verticalBottomPadding } : verticalPadding\n\nconst horizontalPadding = select(\n    'horizontalPadding',\n    ['left', 'right', 'both', 'none'],\n    'none',\n);\nconst graphicPadding = select(\n    'graphicPadding',\n    ['airy', 'default', 'compact', 'tiny', 'none', undefined],\n    undefined,\n);\nconst direction = select('direction', ['vertical', 'horizontal'], 'horizontal');\nreturn (\n    <PureCell\n        href={text('href', '')}\n        verticalPadding={verticalPaddingPrepared}\n        horizontalPadding={horizontalPadding}\n        direction={direction}\n    >\n        <PureCell.Graphics graphicPadding={graphicPadding}>\n            <Circle />\n        </PureCell.Graphics>\n        <PureCell.Content>\n            <PureCell.Main>\n```\n\n----------------------------------------\n\nTITLE: TabBar dataTestId Object (JSX)\nDESCRIPTION: Defines the structure of the object returned by the `getTabBarTestIds` function. This object contains the dataTestId for the TabBar and its individual tabs.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tab-bar/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n{\n    tabBar: dataTestId, \n    tab: `${dataTestId}-tab`,\n};\n```\n\n----------------------------------------\n\nTITLE: Adding shadows for palette and product bundles\nDESCRIPTION: This change introduces shadows for the bluetint palette (shadows-bluetint.css) and product variable bundles (vars/bundle/corp.css and similar files).\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/vars/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta Component for Changelog Page in JSX\nDESCRIPTION: Sets up the Storybook Meta component to define the documentation page title and parameters. This configuration hides the canvas tab in the Storybook interface as it's not needed for changelog documentation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/changelog.stories.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title='Changelog' parameters={{ previewTabs: { canvas: { hidden: true } } }} id='Changelog' />\n```\n\n----------------------------------------\n\nTITLE: Adding React 18 support in @alfalab/core-components-with-suffix\nDESCRIPTION: This commit introduces support for React 18 in the @alfalab/core-components-with-suffix package. This update enables compatibility with the latest React version, potentially unlocking new features and performance improvements.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/with-suffix/CHANGELOG.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nreact 18 support ([#159](https://github.com/core-ds/core-components/issues/159)) ([2e6693c](https://github.com/core-ds/core-components/commit/2e6693c62f534e333aadb7d3fff4ffd78ac84c63))\n```\n\n----------------------------------------\n\nTITLE: Rendering Clickable Styled Container and Underlay Components in React JSX\nDESCRIPTION: This snippet renders a Container component encapsulating multiple Underlay components configured with interactive click handlers and detailed style props such as border radius, size, shadow, background and border colors, padding, and content alignment. The Underlays contain PureCell components organizing textual content with customizable directions and padding. Additionally, one Underlay arranges SuperEllipse components with embedded icons to visually represent different statuses. Key dependencies include React, the Container, Underlay, PureCell, SuperEllipse components, and icon components. The snippet expects the environment to support JSX and component imports, rendering UI with clickable responses and customizable appearance.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/underlay/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const handleClick = () => {\n        alert('Клик!');\n    };\n\n    return (\n        <Container>\n            <Underlay\n                onClick={handleClick}\n                borderRadius='m'\n                borderSize='1'\n                shadow='shadow-s'\n                backgroundColor='secondary'\n                borderColor='primary'\n                overflow={false}\n                dimensions={{ height: 160, width: 320 }}\n                padding={{\n                    top: 'm',\n                    right: 'm',\n                    bottom: 'm',\n                    left: 'm',\n                }}\n                contentProps={{\n                    borderSize: '1',\n                    borderColor: 'secondary',\n                    borderRadius: {\n                        bottomRight: 'm',\n                        bottomLeft: 'm',\n                        topRight: 'm',\n                        topLeft: 'm',\n                    },\n                    backgroundColor: 'primary',\n                    shadow: 'shadow-s',\n                    axis: 'vertical',\n                    alignment: 'center',\n                    justifyContent: 'center',\n                }}\n            >\n                <PureCell direction='horizontal' verticalPadding='default' horizontalPadding='both'>\n                    <PureCell.Content>\n                        <PureCell.Main>\n                            <PureCell.Text\n                                titleColor='primary'\n                                view='component-primary'\n                                value='Value'\n                                valueColor='primary'\n                                rowLimit={1}\n                            >\n                                Title\n                            </PureCell.Text>\n                            <PureCell.Text titleColor='secondary' view='primary-small' rowLimit={1}>\n                                Subtitle\n                            </PureCell.Text>\n                        </PureCell.Main>\n                    </PureCell.Content>\n                </PureCell>\n                <PureCell direction='horizontal' verticalPadding='compact' horizontalPadding='both'>\n                    <PureCell.Content>\n                        <PureCell.Main>\n                            <PureCell.Text\n                                titleColor='primary'\n                                view='component-primary'\n                                value='Value'\n                                valueColor='primary'\n                                rowLimit={1}\n                            >\n                                Title\n                            </PureCell.Text>\n                            <PureCell.Text titleColor='secondary' view='primary-small' rowLimit={1}>\n                                Subtitle\n                            </PureCell.Text>\n                        </PureCell.Main>\n                    </PureCell.Content>\n                </PureCell>\n            </Underlay>\n            <div style={{ height: 24 }}></div>\n            <Underlay\n                onClick={handleClick}\n                borderRadius='m'\n                borderSize='1'\n                shadow='shadow-s'\n                backgroundColor='secondary'\n                borderColor='primary'\n                overflow={false}\n                dimensions={{ height: 'auto', width: 320 }}\n                padding={{\n                    top: 'm',\n                    right: 'm',\n                    bottom: 'm',\n                    left: 'm',\n                }}\n                contentProps={{\n                    backgroundColor: 'secondary',\n                    axis: 'horizontal',\n                    alignment: 'center',\n                    justifyContent: 'center',\n                }}\n            >\n                <SuperEllipse size='80' backgroundColor='#2FC26E' border={true}>\n                    <CheckmarkHeavyMIcon color='#fff' />\n                </SuperEllipse>\n                <SuperEllipse size='80' backgroundColor='#F15045' border={true}>\n                    <CrossHeavyMIcon color='#fff' />\n                </SuperEllipse>\n                <SuperEllipse size='80' backgroundColor='#F6BF65' border={true}>\n                    <ExclamationMIcon color='#fff' />\n                </SuperEllipse>\n            </Underlay>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: PureCell Component API Refactoring\nDESCRIPTION: Refactoring of PureCell subcomponents including AmountTitle, Amount, Addon, Category, and Text. Props were combined with existing types, some props were removed or renamed.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\n// PureCell.AmountTitle - combined with AmountType, removed 'amount' prop\n<PureCell.AmountTitle {...amountProps} />\n\n// PureCell.Amount - combined with AmountType, renamed 'view' to 'textView'\n<PureCell.Amount textView=\"positive\" {...amountProps} />\n\n// PureCell.Addon - extended 'verticalAlign' prop values\n<PureCell.Addon verticalAlign=\"top|center|bottom\" />\n\n// PureCell.Category - added 'rightAddons' prop\n<PureCell.Category rightAddons={<Icon />} />\n```\n\n----------------------------------------\n\nTITLE: Configuring BankCard Mask Types (Card vs. Account Number) in React\nDESCRIPTION: This snippet demonstrates how to configure the `BankCard` component for different input formats using the `maskType` prop. It shows two instances: one accepting a standard card number (`maskType={'card'}`) and another accepting an account number (`maskType={'account-number'}`). Each instance has independent state management and control buttons.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/bank-card/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [value1, setValue1] = React.useState('2201382000000013');\n    const handleChange1 = (event, payload) => setValue1(payload.value);\n\n    const [value2, setValue2] = React.useState('22013820000000131234');\n    const handleChange2 = (event, payload) => setValue2(payload.value);\n\n    return (\n        <>\n            <div>\n                <BankCard value={value1} maskType={'card'} onChange={handleChange1} />\n                <Gap size='xl' />\n                <Button size='xxs' onClick={() => setValue1('2201382000000013')}>\n                    Вставить номер карты\n                </Button>\n                <Gap size='s' direction='horizontal' />\n                <Button size='xxs' onClick={() => setValue1('')}>\n                    Очистить\n                </Button>\n            </div>\n            <br/>\n            <div>\n                <BankCard value={value2} maskType={'account-number'} onChange={handleChange2} />\n                <Gap size='xl' />\n                <Button size='xxs' onClick={() => setValue2('22013820000000131234')}>\n                    Вставить номер карты\n                </Button>\n                <Gap size='s' direction='horizontal' />\n                <Button size='xxs' onClick={() => setValue2('')}>\n                    Очистить\n                </Button>\n            </div>\n        </>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing PureCell Component Variations in React\nDESCRIPTION: Demonstrates multiple configurations of the PureCell component with different layouts, content types, and styling. Includes examples with graphics, text formatting, amount displays, icons, and various alignment options. All examples are contained within a 370px container.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pure-cell/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => (\n    <div style={{ width: '370px' }}>\n        <PureCell direction='horizontal' verticalPadding='default'>\n            <PureCell.Graphics>\n                <SuperEllipse size='48' backgroundColor='rgba(229, 159, 114, 1)'>\n                    <HeartMIcon fill='#fff' />\n                </SuperEllipse>\n            </PureCell.Graphics>\n            <PureCell.Content>\n                <PureCell.Main>\n                    <PureCell.Text\n                        titleColor='primary'\n                        valueColor='secondary'\n                        view='component-primary'\n                        value={\n                            <Amount\n                                value={100099}\n                                minority={100}\n                                transparentMinor={true}\n                                bold='full'\n                                currency='RUB'\n                            />\n                        }\n                    >\n                        Title\n                    </PureCell.Text>\n                    <PureCell.Text\n                        titleColor='secondary'\n                        valueColor='secondary'\n                        view='primary-small'\n                        value='Subvalue'\n                    >\n                        Subtitle\n                    </PureCell.Text>\n                </PureCell.Main>\n            </PureCell.Content>\n        </PureCell>\n\n        <PureCell direction='horizontal' verticalPadding='default'>\n            <PureCell.Graphics>\n                <SuperEllipse size='48' backgroundColor='rgba(229, 159, 114, 1)'>\n                    <HeartMIcon fill='#fff' />\n                </SuperEllipse>\n            </PureCell.Graphics>\n            <PureCell.Content>\n                <PureCell.Main>\n                    <PureCell.Text\n                        titleColor='primary'\n                        valueColor='secondary'\n                        view='component-primary'\n                    >\n                        Title\n                    </PureCell.Text>\n                    <PureCell.Text\n                        titleColor='secondary'\n                        valueColor='secondary'\n                        view='primary-small'\n                    >\n                        Subtitle\n                    </PureCell.Text>\n                </PureCell.Main>\n            </PureCell.Content>\n            <PureCell.Addon verticalAlign='center'>\n                <ChevronRightMIcon fill='rgba(116, 116, 116, 1)' />\n            </PureCell.Addon>\n        </PureCell>\n\n        <PureCell direction='horizontal' verticalPadding='default'>\n            <PureCell.Graphics>\n                <SuperEllipse size='48' backgroundColor='rgba(138, 138, 142, 1)'>\n                    <ArrowDownLineDownMIcon fill='#fff' />\n                </SuperEllipse>\n            </PureCell.Graphics>\n            <PureCell.Content>\n                <PureCell.Main>\n                    <PureCell.Text\n                        titleColor='primary'\n                        view='component-primary'\n                        value={\n                            <Typography.Text\n                                view='component-primary'\n                                font='system'\n                                color='positive'\n                            >\n                                <Amount\n                                    value={18777}\n                                    showPlus={true}\n                                    currency='RUB'\n                                    minority={1}\n                                    bold='none'\n                                />\n                            </Typography.Text>\n                        }\n                    >\n                        Title\n                    </PureCell.Text>\n                    <PureCell.Text\n                        titleColor='secondary'\n                        valueColor='secondary'\n                        view='primary-small'\n                    >\n                        Пополнение\n                    </PureCell.Text>\n                </PureCell.Main>\n                <PureCell.Footer footerPadding='default'>\n                    <Comment>Коплю на мечту</Comment>\n                </PureCell.Footer>\n            </PureCell.Content>\n        </PureCell>\n\n        <PureCell direction='horizontal' verticalPadding='default'>\n            <PureCell.Content>\n                <PureCell.Main>\n                    <PureCell.Text titleColor='secondary' view='primary-small'>\n                        Product Name ··0000\n                    </PureCell.Text>\n                    <PureCell.Amount\n                        value={100000054}\n                        minorUnits={100}\n                        currency='RUR'\n                        color='primary'\n                        view={'withZeroMinorPart'}\n                        transparentMinor={true}\n                        textView='primary-medium'\n                    />\n                </PureCell.Main>\n                <PureCell.Footer>\n                    <Typography.Text color='secondary' view='primary-small'>\n                        Статус продукта\n                    </Typography.Text>\n                    <PureCell.FooterButton>Action</PureCell.FooterButton>\n                </PureCell.Footer>\n            </PureCell.Content>\n        </PureCell>\n        <div style={{ width: 240 }}>\n            <PureCell direction='horizontal' verticalPadding='default'>\n                <PureCell.Content>\n                    <PureCell.Main>\n                        <PureCell.Text titleColor='secondary' view='primary-small'>\n                            Account Name ··0000\n                        </PureCell.Text>\n                        <PureCell.Amount\n                            value={100000099}\n                            minorUnits={100}\n                            currency='RUR'\n                            color='primary'\n                            view={'withZeroMinorPart'}\n                            transparentMinor={true}\n                            textView='primary-medium'\n                        />\n                    </PureCell.Main>\n                    <PureCell.Addon verticalAlign='center'>\n                        <div style={{ display: 'flex', gridColumnGap: '8px' }}>\n                            <CashMoneyMIcon style={{ color: '#c5c5c7' }} />\n                            <EyeMIcon style={{ color: '#c5c5c7' }} />\n                        </div>\n                    </PureCell.Addon>\n                </PureCell.Content>\n            </PureCell>\n        </div>\n\n        <div style={{ width: 80 }}>\n            <PureCell direction='vertical' verticalPadding='default'>\n                <PureCell.Graphics verticalAlign='center'>\n                    <SuperEllipse size='48'>\n                        <AddMIcon />\n                    </SuperEllipse>\n                </PureCell.Graphics>\n                <PureCell.Content>\n                    <PureCell.Main>\n                        <PureCell.Text titleColor='primary' view='component-primary'>\n                            {'Новый\\r\\nперевод'}\n                        </PureCell.Text>\n                    </PureCell.Main>\n                </PureCell.Content>\n            </PureCell>\n        </div>\n    </div>\n));\n```\n\n----------------------------------------\n\nTITLE: Generating Desktop Select Options with Amount Below Label\nDESCRIPTION: Creates an array of option objects for a desktop select dropdown, each containing content rendered by the standard renderOption component with specific padding parameters, showing amounts beneath labels.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/select/src/docs/description.mdx#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst OPTIONS = DATA.map(({ amount, text }, idx) => ({\n    key: idx,\n    content: renderOption({ text, amount, padding: { top: 'xs', bottom: 'xs', left: 's' } }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Defining Header Select Options JavaScript\nDESCRIPTION: Defines a constant array `HEADER_SELECT_OPTIONS` used to populate the options for the header configuration select component. Each object includes a unique `key` for internal use and display `content` in Russian.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/side-panel/src/docs/description.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst HEADER_SELECT_OPTIONS = [\n    { key: 'withoutTitle', content: 'Нет заголовка' },\n    { key: 'defaultTitle', content: 'Стандартный' },\n    { key: 'compactTitle', content: 'Компактный' },\n    { key: 'compactTitleWithSubtitle', content: 'Компактный с подписью' },\n    { key: 'compactTitleWithCenterAlign', content: 'Компактный центрированный' },\n    {\n        key: 'compactTitleWithSubtitleAndCenterAlign',\n        content: 'Компактный центрированный с подписью',\n    },\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Spinner Preset Story with Customizable Sizes in React JSX\nDESCRIPTION: This snippet defines a Storybook story named 'Preset' for the Spinner component, showcasing selection of predefined sizes (16, 24, 48) via the 'preset' knob. The story dynamically changes background color based on a color selection knob and allows toggling Spinner visibility. It demonstrates an alternative usage pattern of the Spinner component focusing on preset configurations, enabling users to quickly switch between common Spinner sizes within Storybook.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/spinner/src/docs/Component.stories.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Story name='Preset'>\n    {React.createElement(() => {\n        const colors = select('colors', ['default', 'inverted'], 'default');\n        return (\n            <div\n                style={{\n                    backgroundColor:\n                        colors === 'inverted'\n                            ? 'var(--color-light-base-bg-primary-inverted)'\n                            : 'transparent',\n                    padding: '8px',\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    right: 0,\n                    bottom: 0,\n                }}\n            >\n                <Spinner\n                    preset={select('preset', [16, 24, 48], 24)}\n                    visible={boolean('visible', true)}\n                    colors={colors}\n                />\n            </div>\n        );\n    })}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Implementing ChildElement helper component in React\nDESCRIPTION: A helper component that renders a div with styled borders and spacing to demonstrate child elements within the Underlay component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/underlay/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nexport const ChildElement = ({ children }) => {\n    return (\n        <div\n            style={{\n                width: 'fit-content',\n                height: 70,\n                border: '2px solid var(--color-light-status-positive)',\n                margin: 4,\n                padding: 4,\n            }}\n        >\n            {children}\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Variables with CssVars in React\nDESCRIPTION: This snippet applies CSS variables loaded from external stylesheet via the CssVars component, enabling theme customization and styling for the Pattern Lock components. It depends on a CSS object imported using raw-loader.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pattern-lock-v1/src/docs/development.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<CssVars css={vars} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Additional Modules for Storybook Documentation in JSX\nDESCRIPTION: This snippet imports ArgsTable from '@storybook/addon-docs', CssVars from 'storybook/blocks', and the Divider component and its styles for documentation purposes. ArgsTable generates a props table for the Divider component, while CssVars applies CSS variable styles loaded via raw-loader. These are used within Storybook to create interactive and styled API documentation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/divider/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ArgsTable } from '@storybook/addon-docs';\nimport { CssVars } from 'storybook/blocks';\nimport { Divider } from '../index';\nimport styles from '!!raw-loader!../index.module.css';\n```\n\n----------------------------------------\n\nTITLE: Generating dataTestId values for PureCell - JSX\nDESCRIPTION: This snippet shows the structure of the object returned by `getPureCellTestIds`. This function provides consistent and predictable dataTestId attributes for various elements within the PureCell component, aiding in UI testing. The function takes a base `dataTestId` as input and generates derived IDs for each element.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pure-cell/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    pureCell: dataTestId,\n    addon: `${dataTestId}-addon`,\n    amount: `${dataTestId}-amount`,\n    amountText: `${dataTestId}-amount-text`,\n    amountTitle: `${dataTestId}-amount-title`,\n    coreAmountTitle: `${dataTestId}-core-amount-title`,\n    categoryName: `${dataTestId}-category-name`,\n    categoryPercent: `${dataTestId}-category-percent`,\n    categoryRightAddon: `${dataTestId}-category-right-addon`,\n    content: `${dataTestId}-content`,\n    footer: `${dataTestId}-footer`,\n    footerButton: `${dataTestId}-button`,\n    extraSubtitle: `${dataTestId}-footer-title`,\n    graphics: `${dataTestId}-graphics`,\n    main: `${dataTestId}-main`,\n    textContent: `${dataTestId}-text_content`,\n    textValue: `${dataTestId}-text_value`,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Calendar with Configurable Day Shape in React\nDESCRIPTION: Example showing how to switch between rounded and rectangular shapes for calendar day cells using a RadioGroup control. Includes implementations for both desktop and mobile calendars.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [value, setValue] = React.useState();\n\n    const [firstRadioValue, setFirstRadioValue] = React.useState('rounded');\n\n    React.useEffect(() => {\n        setValue();\n    }, [firstRadioValue]);\n\n    const onFirstRadioChange = React.useCallback((_, payload) => {\n        setFirstRadioValue(payload.value);\n    }, []);\n\n    const calendarStyles = {\n        border: '1px solid rgba(233, 233, 235, 1)',\n        borderRadius: '8px',\n        boxSizing: 'border-box',\n        boxShadow: 'var(--shadow-m)',\n    };\n\n    return (\n        <>\n            <div style={{ width: '344px', ...calendarStyles }}>\n                <CalendarDesktop\n                    responsive={true}\n                    selectorView='month-only'\n                    value={value}\n                    onChange={setValue}\n                    shape={firstRadioValue}\n                    showCurrentYearSelector={true}\n                />\n            </div>\n            <Gap size='2xl' />\n            <RadioGroup\n                label='Форма'\n                direction='vertical'\n                name='radioGroup'\n                onChange={onFirstRadioChange}\n                value={firstRadioValue}\n            >\n                <Radio size='m' label='Круглая' value='rounded' />\n                <Radio size='m' label='Прямоугольная' value='rectangular' />\n            </RadioGroup>\n        </>\n    );\n});\n//MOBILE\nrender(() => {\n    const [value, setValue] = React.useState();\n    const [open, setOpen] = React.useState(false);\n\n    const [firstRadioValue, setFirstRadioValue] = React.useState('rounded');\n\n    React.useEffect(() => {\n        setValue();\n    }, [firstRadioValue]);\n\n    const onFirstRadioChange = React.useCallback((_, payload) => {\n        setFirstRadioValue(payload.value);\n    }, []);\n\n    return (\n        <Container>\n            <Button onClick={() => setOpen(true)} block={true}>\n                Открыть календарь\n            </Button>\n            <CalendarMobile\n                onClose={() => setOpen(false)}\n                open={open}\n                selectorView='month-only'\n                value={value}\n                onChange={setValue}\n                shape={firstRadioValue}\n            />\n            <Gap size='2xl' />\n            <RadioGroup\n                label='Форма'\n                direction='vertical'\n                name='radioGroup'\n                onChange={onFirstRadioChange}\n                value={firstRadioValue}\n            >\n                <Radio size='m' label='Круглая' value='rounded' />\n                <Radio size='m' label='Прямоугольная' value='rectangular' />\n            </RadioGroup>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Options - React\nDESCRIPTION: This snippet initializes arrays of options that will be used in `SelectMobile` components to customize the appearance of the navigation bar.  Each option object has `key` and `content` properties.  The `content` property holds display text, and `key` is used for internal identification.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/navigation-bar/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ALIGN_SELECT_OPTIONS = [\n    { key: 'center', content: 'Центральное' },\n    { key: 'left', content: 'Левое' },\n];\nconst BACKGROUND_SELECT_OPTIONS = [\n    { key: 'var(--color-light-base-bg-primary)', content: 'base-bg-primary' },\n    { key: 'var(--color-light-base-bg-secondary)', content: 'base-bg-secondary' },\n    { key: 'transparent', content: 'transparent-default' },\n];\nconst BORDER_SELECT_OPTIONS = [\n    { key: 'scroll', content: '*Только при скролле' },\n    { key: 'no', content: 'Без бордера' },\n    { key: 'yes', content: 'Всегда есть' },\n];\nconst STICKY_SELECT_OPTIONS = [\n    { key: 'yes', content: 'Фиксированное' },\n    { key: 'no', content: 'Скроллится с контентом' },\n];\nconst MAIN_SELECT_OPTIONS = [\n    { key: 'title', content: 'Заголовок' },\n    { key: 'titleWithSubtitle', content: 'Заголовок и подпись' },\n    { key: 'no', content: 'Пустой' },\n];\nconst LEFT_SELECT_OPTIONS = [\n    { key: 'back', content: 'Стрелка назад' },\n    { key: 'floatingBack', content: 'Плавающая стрелка назад' },\n    { key: 'primary', content: 'Основное действие' },\n    { key: 'secondary', content: 'Второстепенное действие' },\n    { key: 'no', content: 'Пустой' },\n];\nconst RIGHT_SELECT_OPTIONS = [\n    { key: 'close', content: 'Плавающий крестик' },\n    { key: 'primary', content: 'Основное действие' },\n    { key: 'secondary', content: 'Второстепенное действие' },\n    { key: 'oneIcon', content: 'Одна иконка' },\n    { key: 'twoIcons', content: 'Две иконки' },\n    { key: 'threeIcons', content: 'Три иконки' },\n    { key: 'no', content: 'Пустой' },\n];\nconst BOTTOM_SELECT_OPTIONS = [\n    { key: 'no', content: 'Пустой' },\n    { key: 'input', content: '*Input' },\n    { key: 'segmentedControl', content: '*SegmentedControl' },\n];\n```\n\n----------------------------------------\n\nTITLE: Importing and Organizing Storybook Docs and Markdown Content in React (JavaScript/JSX)\nDESCRIPTION: This snippet demonstrates how to import Storybook documentation utilities, markdown content, and MDX blocks into a React-based Storybook docs file. Core dependencies include Storybook's addon-docs for composition, the storybook/blocks package for reusable UI blocks, and local or raw-imported markdown/MDX files for documentation content. The imports are organized to facilitate their use within custom documentation layouts, laying groundwork for the dynamic display of component documentation sections.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/icon-view/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata for Storybook Component (JavaScript)\nDESCRIPTION: This snippet uses the `Meta` component from `@storybook/addon-docs` to define metadata for the component stories.  It takes the stories from a specified file (referenced by `Stories`) to link the metadata to the stories. The result is that storybook correctly understands the component and can generate documentation.  The input is a reference to the stories, and the output is the configuration of the metadata.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/cdn-icon/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Meta of={Stories} />\n```\n\n----------------------------------------\n\nTITLE: Updating calendar@6.1.14\nDESCRIPTION: This patch change updates the calendar component's version to 6.1.14. This suggests a bug fix or a minor update within the calendar component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/CHANGELOG.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n-   Обновлены зависимости\n    -   calendar@6.1.14\n```\n\n----------------------------------------\n\nTITLE: Preventing popover closure on input click in Autocomplete\nDESCRIPTION: Modifies input autocomplete behavior to prevent the popover from closing when clicking inside the input, improving UX for multi-select or complex inputs. Requires React and event handling logic.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_138\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for input-autocomplete behavior modification\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and Dependencies (JSX)\nDESCRIPTION: This snippet imports necessary modules from '@storybook/addon-docs' and local storybook blocks such as 'ComponentHeader' and 'Tabs'. It also imports stories and markdown files containing descriptions, development information, and changelogs for the NotificationManager component. These imports are crucial for setting up the documentation and integrating external data into the Storybook stories.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/notification-manager/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: React Storybook Story for List Component with Dynamic Preview\nDESCRIPTION: Defines a Storybook story illustrating the List component with dynamic styles based on URL query parameters. Supports multiple list types, colors, and customization options such as captions, markers, and class names. Utilizes React hooks to manage styles and conditional rendering for preview mode.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/list/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Story, Markdown } from '@storybook/addon-docs';\nimport { text, select } from '@storybook/addon-knobs';\nimport { Typography } from '@alfalab/core-components-typography';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport { List } from '@alfalab/core-components-list';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\nimport {\n    stylesStringToObj,\n    getQueryParam,\n} from '../../../screenshot-utils/screenshots-story/utils';\n\nexport const TAG = ['ul', 'ol'];\nexport const COLOR = [\n    'tertiary',\n    'disabled',\n    'accent',\n    'primary',\n    'attention',\n    'positive',\n    'secondary',\n    'tertiary-inverted',\n    'primary-inverted',\n    'secondary-inverted',\n    'link',\n    'negative',\n    'static-primary-light',\n    'static-secondary-light',\n    'static-tertiary-light',\n    'static-primary-dark',\n    'static-secondary-dark',\n    'static-tertiary-dark',\n    'static-accent',\n];\n\n<Meta title='Components/List' component={List} id='List' />\n\n<Story name='List'>\n    {React.createElement(() => {\n        const previewStyles = stylesStringToObj(getQueryParam('wrapperStyles'));\n        const isPreview = Object.keys(previewStyles).length > 0;\n        if (isPreview) {\n            return (\n                <div style={previewStyles}>\n                    <List tag='ol'>\n                        <List.Item>\n                            <Typography.Text tag='span' view='primary-medium' color='primary'>\n                                Пример элемента списка\n                            </Typography.Text>\n                        </List.Item>\n                        <List.Item>\n                            <Typography.Text tag='span' view='primary-medium' color='primary'>\n                                Пример элемента списка\n                            </Typography.Text>\n                        </List.Item>\n                        <List.Item>\n                            <Typography.Text tag='span' view='primary-medium' color='primary'>\n                                Пример элемента списка\n                            </Typography.Text>\n                        </List.Item>\n                    </List>\n                </div>\n            );\n        }\n        return (\n            <List\n                tag={select('tag', TAG, 'ul')}\n                marker={text('marker', '')}\n                className={text('className', '')}\n                dataTestId={text('dataTestId', '')}\n                colorMarker={select('colorMarker', COLOR, 'primary')}\n            >\n                <List.Item caption={text('caption', '')}>\n                    <Typography.Text tag='span' view='primary-medium' color='primary'>\n                        Список — перечень чего-либо.\n                    </Typography.Text>\n                </List.Item>\n                <List.Item>\n                    <Typography.Text tag='span' view='primary-medium' color='primary'>\n                        Список — в информатике и программировании — последовательность элементов\n                        данных.\n                    </Typography.Text>\n                </List.Item>\n                <List.Item>\n                    <Typography.Text tag='span' view='primary-medium' color='primary'>\n                        Список — в типографике способ оформления перечней в тексте.\n                    </Typography.Text>\n                </List.Item>\n                <List.Item>\n                    <Typography.Text tag='span' view='primary-medium' color='primary'>\n                        Список — в текстологии документ, созданный в результате воспроизведения\n                        рукописи (например, список в летописании) или машинописного текста\n                        первоначального документа (протографа данного списка); в отличие от копии,\n                        точное воспроизведение оригинала не является целью.\n                    </Typography.Text>\n                </List.Item>\n                <List.Item>\n                    <Typography.Text tag='span' view='primary-medium' color='primary'>\n                        Список — в иконописи икона, представляющая собой воспроизведение почитаемой\n                        иконы (протографа данного списка); в отличие от копии, не воспроизводит\n                        оригинал в точности.\n                    </Typography.Text>\n                </List.Item>\n            </List>\n        );\n    })}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Using MaskedInput with Regex Card Number Mask in JSX\nDESCRIPTION: This snippet defines a mask array using regular expressions and space characters to enforce the format for a 16-digit number, typically used for card numbers (e.g., '0000 0000 0000 0000'). It then renders the MaskedInput component, applying this mask and configuring its appearance and behavior using props like `label`, `placeholder`, `labelView`, `size`, `breakpoint`, and `block`.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/masked-input/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst masksCard = [\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    ' ',\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    ' ',\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    ' ',\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    /\\d/,\n];\n\nrender(\n    <div style={{ width: '240px' }}>\n        <MaskedInput\n            mask={masksCard}\n            label='Номер карты'\n            placeholder='0000 0000 0000 0000'\n            labelView={isMobile() ? 'outer' : 'inner'}\n            size={isMobile() ? 48 : 56}\n            breakpoint={BREAKPOINT}\n            block={true}\n        />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon Addon to Status Component (React)\nDESCRIPTION: This snippet shows how to add an icon (DiamondsMIcon) as a left addon to the `Status` component. The `leftAddons` prop is used to render the icon. The component uses `Space` to control spacing between elements and the `view` prop set to 'muted'.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/status/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    return (\n        <Space direction='horizontal' size={12}>\n            <Status view='muted' size={40} uppercase={false}>\n                Без аддона\n            </Status>\n            <Status\n                view='muted'\n                size={40}\n                uppercase={false}\n                leftAddons={<DiamondsMIcon width={16} height={16} />}\n            >\n                С аддоном\n            </Status>\n        </Space>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Pagination with Hidden Arrows for Smooth Transition in React\nDESCRIPTION: This example adds the 'hideArrows' prop set to false to prevent arrow flickering or jumps when switching pages, enhancing user experience during page transitions. It shares similar structure with the basic pagination but emphasizes a specific prop to improve visual smoothness.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pagination/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nrender(() => {\n    const DATA_SIZE = isMobile() ? 5 : 20;\n    const PER_PAGE = 1;\n\n    const [page, setPage] = React.useState(0);\n\n    const handlePageChange = pageIndex => setPage(pageIndex);\n\n    const pagesCount = Math.ceil(DATA_SIZE / PER_PAGE);\n\n    return (\n        <Container align='center'>\n            <Pagination\n                hideArrows={false}\n                currentPageIndex={page}\n                pagesCount={pagesCount}\n                onPageChange={handlePageChange}\n            />\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering UniversalModalMobile Component with React\nDESCRIPTION: This snippet renders a `UniversalModalMobile` component, which likely represents a modal dialog. It includes content and footer sections with conditional rendering of UI elements based on props such as `contentButton`, `mainFooterButton`, and `additionalFooterButton`. The component uses other components, such as `Button`, `Typography.Text`, and `Collapse`, to create the modal's structure and content, and handles the modal's open/close state.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/universal-modal/src/docs/description.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n            <UniversalModalMobile>\n                <UniversalModalMobile.Content>\n                    <Collapse>\n                        <Typography.Text>\n                            клиента.\n                        </Typography.Text>\n                    </Collapse>\n                    {contentButton && (\n                        <React.Fragment>\n                            <Gap size={32} />\n                            <Button size={48} onClick={() => setOpen(false)}>\n                                Кнопка\n                            </Button>\n                        </React.Fragment>\n                    )}\n                </UniversalModalMobile.Content>\n                {(mainFooterButton || additionalFooterButton) && (\n                    <UniversalModalMobile.Footer\n                        sticky={true}\n                        layout={verticalFooterButtons ? 'column' : 'start'}\n                    >\n                        {mainFooterButton && (\n                            <Button\n                                size={56}\n                                view='primary'\n                                block={true}\n                                onClick={() => setOpen(false)}\n                            >\n                                Primary\n                            </Button>\n                        )}\n\n                        {additionalFooterButton && (\n                            <Button\n                                size={56}\n                                view='secondary'\n                                block={true}\n                                onClick={() => setOpen(false)}\n                            >\n                                Secondary\n                            </Button>\n                        )}\n                    </UniversalModalMobile.Footer>\n                )}\n            </UniversalModalMobile>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta component for documentation\nDESCRIPTION: This snippet sets the Meta component with the imported stories to associate metadata with the documentation page, enabling Storybook to link the stories correctly within the documentation context.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/file-upload-item/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Meta of={Stories} />\n```\n\n----------------------------------------\n\nTITLE: Creating a Badge Component Story in React\nDESCRIPTION: This React code creates a Storybook story for the 'Badge' component. It utilizes the select, number, and boolean knobs from '@storybook/addon-knobs' to control the component's properties dynamically. Depending on the 'view' knob, the code renders either a count-based badge or an icon-based badge, allowing for different variations and configurations. The output is rendered within a div to control styling and layout.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/badge/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    React.createElement(() => {\n        const view = select('view', ['count', 'icon'], 'count');\n        const size = select('size', ['s', 'm', 'xl'], 'm');\n        const props =\n            view === 'count'\n                ? {\n                      view,\n                      content: number('content', 1),\n                      size: select('size', ['s', 'm', 'l'], 'm'),\n                      height: number('height', 16),\n                      visibleIconOutline: boolean('visibleIconOutline', false),\n                      color: select(\n                          'color',\n                          ['accent', 'primary', 'specialbg-secondary-transparent'],\n                          'accent',\n                      ),\n                  }\n                : {\n                      view,\n                      size,\n                      content: size === 's' ? <CheckmarkCircleSIcon /> : <CheckmarkCircleMIcon />,\n                      visibleIconOutline: boolean('visibleIconOutline', false),\n                      visibleColorOutline: boolean('visibleColorOutline', false),\n                      iconColor: select(\n                          'iconColor',\n                          [\n                              'positive',\n                              'attention',\n                              'negative',\n                              'tertiary',\n                              'secondary',\n                              'primary',\n                              'link',\n                          ],\n                          'positive',\n                      ),\n                      iconUnderlayColor: select(\n                          'iconUnderlayColor',\n                          ['static-light', 'primary'],\n                          'static-light',\n                      ),\n                  };\n        const previewStyles = stylesStringToObj(getQueryParam('wrapperStyles'));\n        const isPreview = Object.keys(previewStyles).length > 0;\n        return isPreview ? (\n            <div style={previewStyles}>\n                <Badge\n                    view='icon'\n                    iconColor='positive'\n                    visibleColorOutline='true'\n                    content={<CheckmarkCircleMIcon />}\n                />\n                <Gap direction='horizontal' size='s' />\n                <Badge\n                    view='icon'\n                    iconColor='attention'\n                    visibleColorOutline='true'\n                    content={<AlertCircleMIcon />}\n                />\n                <Gap direction='horizontal' size='s' />\n                <Badge\n                    view='icon'\n                    iconColor='negative'\n                    visibleColorOutline='true'\n                    content={<AlertCircleMIcon />}\n                />\n            </div>\n        ) : (\n            <div\n                style={{\n                    display: 'inline-flex',\n                    backgroundColor: 'rgb(22%, 47%, 98%, 0.1)',\n                    ...(view === 'count' && {\n                        backgroundColor: 'none',\n                        padding: '20px',\n                        display: 'block',\n                        height: '100px',\n                        minWidth: '100px',\n                    }),\n                }}\n            >\n                <Badge {...props} />\n            </div>\n        );\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Adding property table for FileUploadItem using ArgsTable\nDESCRIPTION: This snippet includes a Storybook ArgsTable component that automatically generates a properties table for the FileUploadItem component, aiding in documentation and development by displaying all props and their types. It depends on '@storybook/addon-docs' and the imported component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/file-upload-item/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ArgsTable of={FileUploadItem} />\n```\n\n----------------------------------------\n\nTITLE: Setting up Storybook documentation for Toast component in JSX\nDESCRIPTION: This code configures the Storybook documentation page for the Toast component. It imports Storybook components, component stories, and MDX documentation files, then arranges them into a structured documentation page with a header and tabbed sections.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/toast/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta of={Stories} />\n\n<ComponentHeader\n    name='Toast'\n    children='Используется для уведомления пользователя о результате выполнения его команды.'\n/>\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using dataTestId for Element Identification in Pattern Lock Components\nDESCRIPTION: This snippet details the method for utilizing dataTestId attributes in Pattern Lock components for testing purposes, including a utility function that returns an object of test identifiers for different elements. It facilitates easier selection of UI elements during testing.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pattern-lock-v1/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst getPatternLockTestIds = (dataTestId) => ({\n    patternLock: dataTestId,\n    forgotCodeBtn: `${dataTestId}-forgot-code-btn`,\n    error: `${dataTestId}-error`,\n    message: `${dataTestId}-message`,\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Underlay component in preview mode\nDESCRIPTION: Renders the Underlay component with predefined properties for a preview mode display, with a styled graphics box inside.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/underlay/src/docs/Component.stories.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<div style={previewStyles}>\n    <Underlay\n        backgroundColor='var(--color-light-modal-bg-primary)'\n        overflow={false}\n        dimensions={{ height: 132, width: 320 }}\n        padding={{ top: 'm', right: 'm', bottom: 'm', left: 'm', }}\n        contentProps={{\n            axis: 'vertical',\n            alignment: 'center',\n            justifyContent: 'center',\n        }}\n    >\n        <div style={styleGraphics}/>\n    </Underlay>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Updating calendar@6.1.9\nDESCRIPTION: This patch change updates the calendar component's version to 6.1.9. This suggests a bug fix or a minor update within the calendar component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/CHANGELOG.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n-   Обновлены зависимости\n    -   calendar@6.1.9\n```\n\n----------------------------------------\n\nTITLE: Implementing Mobile Tabs with Text Style and Overflow in React\nDESCRIPTION: This React snippet demonstrates a mobile-specific tab interface with fixed scrollable layout and customizable text styles. It maintains state for selected tab, count of displayed tabs, and text style, updating the interface based on user interactions. Dependencies include React and the TabsMobile component along with UI controls like RadioGroup and Radio.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst TABS = [\n    { title: 'Aurum', id: 'tab-1' },\n    { title: 'Bercelium', id: 'tab-2' },\n    { title: 'Curium', id: 'tab-3' },\n    { title: 'Neptunium', id: 'tab-4' },\n    { title: 'Plutonuim', id: 'tab-5' },\n    { title: 'Rubidium', id: 'tab-6' },\n    { title: 'Californium', id: 'tab-7' },\n    { title: 'Hydrogenium', id: 'tab-8' },\n    { title: 'Helium', id: 'tab-9' },\n    { title: 'Lithium', id: 'tab-10' },\n    { title: 'Beryllium', id: 'tab-11' },\n    { title: 'Borum', id: 'tab-12' },\n    { title: 'Carboneum', id: 'tab-13' },\n    { title: 'Nitrogenium', id: 'tab-14' },\n    { title: 'Oxygenium', id: 'tab-15' },\n];\n\nrender(() => {\n    const [selectedId, setSelectedId] = React.useState(TABS[0].id);\n    const [textStyle, setTextStyle] = React.useState('paragraph-primary-large');\n\n    const [count, setCount] = React.useState('3');\n\n    const handleChange = (event, { selectedId }) => {\n        setSelectedId(selectedId);\n    };\n\n    return (\n        <>\n            <TabsMobile\n                selectedId={selectedId}\n                onChange={handleChange}\n                scrollable={true}\n                fullWidthScroll={true}\n                textStyle={textStyle}\n            >\n                {TABS.slice(0, Number(count)).map((item) => (\n                    <Tab title={item.title} id={item.id} key={item.id} />\n                ))}\n            </TabsMobile>\n            <br />\n            <Typography.Text view='primary-medium' color='secondary'>\n                Выбран таб: {TABS.find((tab) => tab.id === selectedId).title}\n            </Typography.Text>\n\n            <Gap size='l' />\n\n            <Space size={24}>\n                <RadioGroup\n                    direction='vertical'\n                    label='Количество табов'\n                    value={count}\n                    onChange={(e) => {\n                        setCount(e.target.value);\n                        setSelectedId(TABS[0].id);\n                    }}\n                >\n                    <Radio label='3' value='3' />\n                    <Radio label='15' value='15' />\n                </RadioGroup>\n\n                <RadioGroup\n                    direction='vertical'\n                    label='Стиль текста табов'\n                    value={textStyle}\n                    onChange={(e) => setTextStyle(e.target.value)}\n                >\n                    <Radio label='Paragraph primary large' value='paragraph-primary-large' />\n                    <Radio label='Headline medium' value='headline-medium' />\n                </RadioGroup>\n            </Space>\n        </>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering PureCell Footers with Buttons and Text in React JSX\nDESCRIPTION: This snippet illustrates rendering PureCell.Footer components with embedded footer buttons and text using React JSX. It presents multiple PureCells arranged within a Space component with spacing, featuring footer texts styled by Typography.Text and action buttons via PureCell.FooterButton. Required dependencies are PureCell, Typography, and Space components. Inputs include strings for button text and footer messages with applied color and view styling. The output is a vertical stack of PureCells containing footers with interactive buttons and neutral status text. Constraints include static content and minimal interactivity in this specific example.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pure-cell/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => (\n    <Space size={25}>\n        <PureCell direction='horizontal'>\n            <PureCell.Content>\n                <PureCell.Footer>\n                    <PureCell.FooterButton>Button Text</PureCell.FooterButton>\n                </PureCell.Footer>\n            </PureCell.Content>\n        </PureCell>\n\n        <PureCell direction='horizontal'>\n            <PureCell.Content>\n                <PureCell.Footer>\n                    <Typography.Text color='secondary' view='primary-small'>\n                        Neutral Status\n                    </Typography.Text>\n                    <PureCell.FooterButton>Button Text</PureCell.FooterButton>\n                </PureCell.Footer>\n            </PureCell.Content>\n        </PureCell>\n    </Space>\n));\n```\n\n----------------------------------------\n\nTITLE: Adding Base Input\nDESCRIPTION: This commit adds a base input component. The base input serves as a foundation for creating more complex input components. It typically handles common input-related functionality.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_165\n\n\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta and Component Header in JSX\nDESCRIPTION: This JSX snippet defines meta information for the PopupSheet component documentation within Storybook using the imported Stories object. It sets the component's name and a children string describing its purpose in Russian. This segment arranges the high-level metadata and header for the documentation page, preparing the presentation framework.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/popup-sheet/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta of={Stories} />\n\n<ComponentHeader\n    name='PopupSheet'\n    children='Используется для отображения контента в модальном слое.'\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and Component Dependencies\nDESCRIPTION: This snippet imports modules and components from Storybook's add-on-docs and the project's component stories and documentation files (.mdx). The modules are used for rendering component metadata, markdown content, and the visual presentation of the documentation itself. Dependencies include Storybook add-ons, the component's stories file, and .mdx documentation files that contain the detailed descriptions.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/progress-bar/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Multiple File Upload with Progress (React)\nDESCRIPTION: This code snippet demonstrates a multiple file upload component, including displaying file names, sizes, and upload progress. It uses React state to manage file information, calculates upload progress via animation, and provides a delete functionality. It uses `requestAnimationFrame` for the progress animation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/file-upload-item/src/docs/description.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [files, setFiles] = React.useState([]);\n\n    const distance = 100;\n    const duration = 500;\n    let startAnimation = null;\n\n    const measure = (timestamp, index) => {\n        if (!startAnimation) {\n            startAnimation = timestamp;\n        }\n\n        const progress = (timestamp - startAnimation) / duration;\n        const progressValue = progress * distance;\n\n        setFiles((prevFiles) => {\n            const newFiles = [...prevFiles];\n            newFiles[index].progress = progressValue;\n            return newFiles;\n        });\n\n        if (progress < 1) {\n            return requestAnimationFrame((t) => measure(t, index));\n        }\n\n        setFiles((prevFiles) => {\n            const newFiles = [...prevFiles];\n            newFiles[index].status = 'SUCCESS';\n            return newFiles;\n        });\n    };\n\n    const handleFileChange = (event) => {\n        const selectedFiles = Array.from(event.target.files);\n        const newFiles = selectedFiles.map((file) => ({\n            file,\n            progress: 0,\n            status: 'UPLOADING',\n        }));\n\n        setFiles((prevFiles) => [...prevFiles, ...newFiles]);\n\n        newFiles.forEach((file, index) =>\n            requestAnimationFrame((t) => measure(t, index + files.length)),\n        );\n\n        event.target.value = null;\n    };\n\n    const handleDelete = (name) => () => {\n        setFiles((prevFiles) => [...prevFiles.filter((item) => item.file.name !== name)]);\n    };\n\n    return (\n        <React.Fragment>\n            <input\n                type='file'\n                multiple='multiple'\n                id='multi-file-input-id'\n                onChange={handleFileChange}\n                style={{ display: 'none' }}\n            />\n            {files.map((item) => {\n                return (\n                    <div key={item.file.name} style={{ width: isMobile() ? 320 : 360 }}>\n                        <FileUploadItem\n                            title={item.file.name}\n                            size={item.file.size}\n                            uploadDate={new Date(item.file.lastModifiedDate).toLocaleDateString()}\n                            uploadStatus={item.status}\n                            progressBar={item.progress}\n                            showDelete={true}\n                            onDelete={handleDelete(item.file.name)}\n                        >\n                            <FileUploadItem.StatusControl />\n                            <FileUploadItem.Content />\n                            <FileUploadItem.Actions />\n                        </FileUploadItem>\n                        <Gap size={20} />\n                    </div>\n                );\n            })}\n            <FileUploadItem title='Прикрепите файл' subtitle='Нет файла' uploadStatus='INITIAL'>\n                <label htmlFor='multi-file-input-id' style={{ display: 'flex', width: 320 }}>\n                    <FileUploadItem.StatusControl />\n                    <FileUploadItem.Content />\n                    <FileUploadItem.Actions />\n                </label>\n            </FileUploadItem>\n        </React.Fragment>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Returning dist directory in @alfalab/core-components-with-suffix\nDESCRIPTION: This commit returns the `dist` directory to the published packages of @alfalab/core-components-with-suffix, reverting a previous change. This action likely restores compatibility for consumers who rely on the `dist` directory structure.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/with-suffix/CHANGELOG.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nreturned dist directory ([#199](https://github.com/core-ds/core-components/issues/199)) ([fabc15e](https://github.com/core-ds/core-components/commit/fabc15effa1457ca65ec7238206f1b1fc2a2a613))\n```\n\n----------------------------------------\n\nTITLE: Updating Badge View and Outline\nDESCRIPTION: This modification reinvents the icon view of the badge component and also adds the `visibleIconOutline` prop. The change enhances the visual presentation of the badge and provides control over the outline of the icon. This aims to improve the visual style and the configurability of the component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_78\n\n\n\n----------------------------------------\n\nTITLE: Rendering SelectDesktop with custom options & header - React\nDESCRIPTION: This snippet demonstrates rendering a SelectDesktop component with customized options and a header. It uses React hooks for state management and memoization. The component allows multiple selections and uses the 'useSelectWithApply' hook to handle select all functionality.  Custom rendering of options is done with `BaseOption`.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/select/src/docs/description.mdx#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const options = React.useMemo(\n        () => [\n            { key: '1', content: 'Neptunium' },\n            { key: '2', content: 'Plutonium' },\n            { key: '3', content: 'Americium' },\n            { key: '4', content: 'Curium' },\n            { key: '5', content: 'Berkelium' },\n            { key: '6', content: 'Californium' },\n            { key: '7', content: 'Einsteinium' },\n            { key: '8', content: 'Fermium' },\n        ],\n        [],\n    );\n\n    const [selected, setSelected] = React.useState([]);\n\n    const handleChange = ({ selectedMultiple }) => {\n        setSelected(selectedMultiple.map((option) => option.key));\n    };\n\n    const selectWithHeader = (\n        <SelectDesktop\n            allowUnselect={true}\n            placeholder='Выберите элементы'\n            label='Множественный выбор'\n            block={true}\n            optionsListWidth='field'\n            Option={BaseOption}\n            size={56}\n            {...useSelectWithApply({\n                options,\n                selected,\n                showHeaderWithSelectAll: true,\n                onChange: handleChange,\n            })}\n        />\n    );\n\n    const renderOption = ({ text, amount, icon, iconSize = 48, padding }) => {\n        return (\n            <GenericWrapper alignItems='center' padding={padding}>\n                <GenericWrapper>\n                    <SuperEllipse size={iconSize}>{icon}</SuperEllipse>\n                </GenericWrapper>\n                <Gap size='m' direction='horizontal' />\n                <GenericWrapper>\n                    <GenericWrapper column>\n                        <Typography.Text color='secondary' view='primary-small'>\n                            {text}\n                        </Typography.Text>\n                        <Gap size='3xs' />\n                        <Typography.Text>\n                            <Amount\n                                value={amount}\n                                minority={100}\n                                currency='RUR'\n                                view='withZeroMinorPart'\n                                transparentMinor={true}\n                            />\n                        </Typography.Text>\n                    </GenericWrapper>\n                </GenericWrapper>\n            </GenericWrapper>\n        );\n    };\n\n    const renderSelected = ({ selected }) => {\n        return selected\n            ? renderOption({\n                  ...selected.value,\n                  padding: undefined,\n                  iconSize: 40,\n              })\n            : undefined;\n    };\n\n    const data = [\n        {\n            key: 'Account1',\n            value: {\n                text: 'Зарплатный счёт',\n                amount: 3405161,\n                icon: <StarMIcon />,\n                padding: { top: 's', bottom: 's', left: 'm' },\n            },\n        },\n        {\n            key: 'Account2',\n            value: {\n                text: 'Накопительный счёт',\n                amount: 6000024,\n                icon: <SafeBoxMIcon />,\n                padding: { top: 's', bottom: 's', left: 'm' },\n            },\n        },\n    ];\n\n    const pureCellOptions = data.map((item) => ({\n        ...item,\n        content: renderOption(item.value),\n    }));\n\n    const selectWithPureCell = (\n        <SelectDesktop\n            allowUnselect={true}\n            placeholder='Выберите счёт'\n            options={pureCellOptions}\n            Option={BaseOption}\n            size={56}\n            valueRenderer={renderSelected}\n            block={true}\n        />\n    );\n\n    return (\n        <div style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}>\n            {selectWithHeader}\n            <div style={{ height: 'var(--gap-16)' }} />\n            {selectWithPureCell}\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Tabs for Documentation Content in Storybook\nDESCRIPTION: This snippet uses the Storybook `Tabs` component to create a tabbed interface. The `Tabs` component is used to display different types of documentation content. The `description`, `changelog`, and `development` props accepts content in the form of React components or Markdown, allowing integration of MDX files that contain component descriptions, change logs, and development notes. \nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/progress-bar/src/docs/Component.docs.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta Configuration for Accessibility Documentation\nDESCRIPTION: Configuration for a Storybook documentation page about keyboard control accessibility. It sets up the document title, hides the canvas tab, and assigns a specific ID for the guideline.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/keyboard.stories.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta\n    title='Accessibility/Управление с клавиатуры'\n    parameters={{ previewTabs: { canvas: { hidden: true } } }}\n    id='Guidelines/Accessibility/Keyboard-control'\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing modules and setup for Storybook documentation in JavaScript\nDESCRIPTION: This snippet imports necessary components from Storybook add-ons and local component files to configure documentation for a UI component. It uses React to render metadata, headers, and tabs that contain description, changelog, and development information.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/file-upload-item/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Addons and Components in JavaScript\nDESCRIPTION: Imports specific modules and components required for configuring Storybook documentation for a UI component. Includes Meta, Markdown from '@storybook/addon-docs', custom blocks like ComponentHeader and Tabs, as well as content sources such as stories, MDX files, and markdown.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/plate/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Setting up Storybook Documentation for Drawer Component in JSX\nDESCRIPTION: This snippet demonstrates how to configure a Storybook documentation page for a Drawer component. It imports necessary Storybook addons, component stories, and documentation files, then structures the page with a ComponentHeader and Tabs.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/drawer/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta of={Stories} />\n\n<ComponentHeader\n    name='Drawer'\n    children='Используется для десктопных модальных сущностей, появляющихся слева или справа.'\n/>\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Enabling System Compatibility in Typography Title with AlfaSans (TypeScript)\nDESCRIPTION: Renders a Typography.Title component using the 'font' prop as an object to specify both the 'alfasans' font and 'systemCompat: true'. This ensures system-compatible metric alignment when replacing system fonts with Alfa Interface Sans. Intended for TypeScript/JSX, this pattern is helpful in migration scenarios and expects the 'Typography' component to support an object-shaped font prop.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/typography.stories.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<Typography.Title\n    font={{\n        font: 'alfasans',\n        systemCompat: true,\n    }}\n>\n    Заголовок\n</Typography.Title>\n```\n\n----------------------------------------\n\nTITLE: Rendering Date Input with React\nDESCRIPTION: This snippet renders a date input field with options for calendar selection and keyboard input disabling.  It uses the `UniversalDateInput` component to display the date input, and other components to control the calendar and input settings. The `onChange` prop is used to handle date changes, and `disableUserInput` will toggle keyboard input.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/universal-date-input/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [radioSelected, setRadioSelected] = React.useState('none');\n    const [disableUserInput, setDisableUserInput] = React.useState(false);\n    const [date, setDate] = React.useState(null);\n\n    const handleChange = (date) => setDate(date);\n\n    return (\n        <div style={{ width: isMobile() ? '100%' : 'var(--calendar-width)' }}>\n            <UniversalDateInput\n                breakpoint={BREAKPOINT}\n                block={true}\n                view='date'\n                label='Дата'\n                labelView={isMobile() ? 'outer' : 'inner'}\n                size={isMobile() ? 48 : 56}\n                value={date}\n                onChange={handleChange}\n                disableUserInput={disableUserInput}\n                picker={radioSelected !== 'none'}\n                Calendar={Calendar}\n                calendarProps={{\n                    selectorView: radioSelected,\n                }}\n                clear={true}\n                onClear={(e) => {\n                    e.stopPropagation();\n                    setDate(null);\n                }}\n            />\n\n            <Gap size='xl' />\n\n            <RadioGroup\n                label='Календарь'\n                direction='vertical'\n                onChange={(_, { value }) => setRadioSelected(value)}\n                value={radioSelected}\n            >\n                <Radio label='Без календаря' value='none' />\n                <Radio label='Со слайдером месяцев' value='month-only' />\n                <Radio label='С выбором года и месяца' value='full' />\n            </RadioGroup>\n\n            <Gap size='xl' />\n\n            <Switch\n                block={true}\n                checked={disableUserInput}\n                label='Запретить ввод с клавиатуры'\n                onChange={() => setDisableUserInput(!disableUserInput)}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Updating dependencies\nDESCRIPTION: This commit updates project dependencies. This ensures that the project uses the latest versions of libraries and tools, incorporating bug fixes, performance improvements, and security patches.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_163\n\n\n\n----------------------------------------\n\nTITLE: Input with Clickable Icon Addons\nDESCRIPTION: This React snippet demonstrates how to create an Input component with clickable icons as right addons. It uses React hooks (useState, useCallback) to manage the state of the input and a Toast notification. It includes CSS styling for the IconButton to increase its clickable area.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/input/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [isVisible, setIsVisible] = React.useState(false);\n    const [title, setTitle] = React.useState('');\n    const [valueOne, setValueOne] = React.useState('Value');\n    const [valueTwo, setValueTwo] = React.useState('Value');\n\n    const toggleVisiblity = () => setIsVisible((prev) => !prev);\n\n    const singleIcon = () => {\n        setTitle('Вы восхитительны!');\n        toggleVisiblity();\n    };\n\n    const leftIcon = () => {\n        setTitle('Левая');\n        toggleVisiblity();\n    };\n\n    const rightIcon = () => {\n        setTitle('Правая');\n        toggleVisiblity();\n    };\n\n    const hideNotification = React.useCallback(() => setIsVisible(false), []);\n\n    const styleWrapperIcons = {\n        height: '100%',\n        display: 'flex',\n        gap: 4,\n        marginRight: 'var(--gap-8-neg)',\n    };\n\n    /* Указать для IconButton через className */\n    const css = `\n        button[data-test-id='icon'] {\n            margin-right: var(--gap-12-neg);\n        }\n    `;\n\n    return (\n        <div style={{ width: 320 }}>\n            <style>{css}</style>\n            <Input\n                value={valueOne}\n                block={true}\n                onChange={(e) => setValueOne(e.target.value)}\n                label='Label'\n                placeholder='Placeholder'\n                labelView={isMobile() ? 'outer' : 'inner'}\n                size={isMobile() ? 48 : 56}\n                breakpoint={BREAKPOINT}\n                rightAddons={\n                    <IconButton\n                        view='secondary'\n                        onClick={singleIcon}\n                        icon={DiamondsMIcon}\n                        size='s'\n                        dataTestId='icon'\n                    />\n                }\n            />\n            <Gap size='l' />\n            <Input\n                value={valueTwo}\n                block={true}\n                onChange={(e) => setValueTwo(e.target.value)}\n                label='Label'\n                placeholder='Placeholder'\n                labelView={isMobile() ? 'outer' : 'inner'}\n                size={isMobile() ? 48 : 56}\n                breakpoint={BREAKPOINT}\n                rightAddons={\n                    <div style={styleWrapperIcons}>\n                        <IconButton\n                            view='secondary'\n                            onClick={leftIcon}\n                            icon={DiamondsMIcon}\n                            size='xs'\n                            alignIcon='right'\n                        />\n                        <IconButton\n                            view='secondary'\n                            onClick={rightIcon}\n                            icon={FlowerMIcon}\n                            size='xs'\n                            alignIcon='left'\n                        />\n                    </div>\n                }\n            />\n            <Toast\n                title={title}\n                open={isVisible}\n                onClose={hideNotification}\n                hasCloser={false}\n                autoCloseDelay={2000}\n                style={{ left: isMobile() ? '30%' : '41%' }}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Screenshot Tests\nDESCRIPTION: This command updates the reference screenshots when test results are changed. It is typically run after reviewing changes and ensuring that visual updates are intended. The `-u` flag signifies update mode which means that the existing screenshot is replaced with the new generated snapshot.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/screenshots.stories.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn test:screenshots -u\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Museum Page in JavaScript/JSX\nDESCRIPTION: Sets up a Storybook documentation page titled 'Museum' with custom parameters to hide the canvas tab and render the Museum component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/museum.stories.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\nimport { Museum } from 'storybook/pages/museum';\n\n<Meta title='Museum' parameters={{ previewTabs: { canvas: { hidden: true } } }} id='museum' />\n\n<Museum />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Documentation for DateInput Component (JavaScript)\nDESCRIPTION: This snippet defines a Storybook story for the DateInput component, showcasing its props using interactive Storybook knobs for props such as 'block', 'size', 'error', 'hint', and 'label'. It requires Storybook, @storybook/addon-knobs, @alfalab/core-components-date-input, and associated markdown documentation files. The interactive setup allows users to experiment with different prop values and see the effects live, facilitating both documentation and component validation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/date-input/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Story, Markdown } from '@storybook/addon-docs';\nimport { text, select, boolean } from '@storybook/addon-knobs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport { DateInput } from '@alfalab/core-components-date-input';\n\nimport Development from './development.mdx';\nimport Description from './description.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta title='Deprecated components/DateInput' component={DateInput} id='DateInput' />\n\n<Story name='DateInput'>\n    <DateInput\n        block={boolean('block', false)}\n        size={select('size', ['s', 'm', 'l', 'xl'], 's')}\n        error={text('error', '')}\n        hint={text('hint', '')}\n        label={text('label', '')}\n    />\n</Story>\n\n<ComponentHeader name='DateInput' children='Поле для указания даты.' />\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Changing Sizes for Multiple Components\nDESCRIPTION: This update modifies the size of several form components, including button, form-control, input, input-autocomplete, intl-phone-input, phone-input, pure-input, select, select-with-tags, slider-input, tabs, and tag. The changes involve reducing the 'L' size from 72 to 64 and adding an 'XL' size of 72. This impacts the visual presentation and layout of the UI elements by adjusting their dimensions and possibly their spacing or padding.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_69\n\n\n\n----------------------------------------\n\nTITLE: Rendering Responsive PhoneInput Component (JSX)\nDESCRIPTION: This snippet shows how to render a PhoneInput component within a container div. It demonstrates setting dynamic properties like width, label view, size, and block state based on an 'isMobile' check, along with static properties like placeholder, label, and a breakpoint.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/phone-input/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<div style={{ width: isMobile() ? '100%' : 320 }}>\n    <PhoneInput\n        placeholder='+7 000 000 00 00'\n        label='Телефонный номер'\n        labelView={isMobile() ? 'outer' : 'inner'}\n        size={isMobile() ? 48 : 56}\n        breakpoint={BREAKPOINT}\n        block={true}\n    />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Colors for Status Component (React)\nDESCRIPTION: This snippet demonstrates how to apply different colors to the `Status` component. It iterates through an array called `COLORS` and renders the `Status` component for each color. The `view` and `color` props are used to control the color and style of the component. It is rendered within a flex container.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/status/src/docs/description.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Container>\n    <div style={{ display: 'flex' }}>\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\n            {COLORS.map((color) => (\n                <React.Fragment key={color}>\n                    <Status view='contrast' color={color} key={color} size='24' uppercase={false}>\n                        Label\n                    </Status>\n                    <Gap size='12' />\n                </React.Fragment>\n            ))}\n        </div>\n        <Gap size='12' direction='horizontal' />\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\n            {COLORS.map((color) => (\n                <React.Fragment key={color}>\n                    <Status view='muted-alt' color={color} key={color} size='24' uppercase={false}>\n                        Label\n                    </Status>\n                    <Gap size='12' />\n                </React.Fragment>\n            ))}\n        </div>\n        <Gap size='12' direction='horizontal' />\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\n            {COLORS.map((color) => (\n                <React.Fragment key={color}>\n                    <Status view='muted' color={color} size='24' uppercase={false}>\n                        Label\n                    </Status>\n                    <Gap size='12' />\n                </React.Fragment>\n            ))}\n        </div>\n    </div>\n</Container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Metadata\nDESCRIPTION: Sets up the Meta component with story definitions to define the story's metadata in Storybook, linking the stories to be documented.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/number-input/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Meta of={Stories} />\n```\n\n----------------------------------------\n\nTITLE: Toast Plate Badge Migration Example\nDESCRIPTION: This snippet demonstrates the migration changes for the toast-plate component, specifically the update to the getBadgeIcons prop.  The prop now accepts an object with specific keys and icon definitions. This change ensures compatibility with the new status-badge component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/notification/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  'positive-checkmark': {\n      24: AScoresCircleMIcon,\n  },\n  'negative-cross': {\n    ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Plate Component\nDESCRIPTION: This code snippet demonstrates how to import the Plate component and its mobile and desktop versions from the '@alfalab/core-components/plate' package. It is necessary to import these components to use them in your React application.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/plate/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Plate } from '@alfalab/core-components/plate';\nimport { PlateMobile } from '@alfalab/core-components/plate/mobile';\nimport { PlateDesktop } from '@alfalab/core-components/plate/desktop';\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Storybook Documentation in JavaScript\nDESCRIPTION: This snippet imports required modules and components from Storybook's addon-docs and blocks packages, as well as local markdown and story files needed for rendering the MaskedInput documentation page. Dependencies include Meta and Markdown for documentation layout, ComponentHeader for the component title and description, and Tabs for organizing content into multiple tab panes. The snippet prepares all external resources necessary for the subsequent documentation components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/masked-input/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Storybook CardImage Header and Tab Initialization\nDESCRIPTION: This snippet uses the ComponentHeader and Tabs components to structure the documentation. ComponentHeader displays the component's name and description. Tabs organizes different sections like description, changelog, and development, pulling content from separate .mdx files and CHANGELOG.md.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/card-image/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<ComponentHeader\n    name='CardImage'\n    children='Компонент изображения карты.'\n/>\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Textarea Height Mechanics (Mobile) - JSX\nDESCRIPTION: Shows how to configure a React `Textarea` component for different height behaviors (auto-resize, fixed rows, manual resize) in a mobile context using a `SelectMobile` component to control label properties. Requires React and potentially specific mobile component libraries (`SelectMobile`, `Gap`, `Textarea`).\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/textarea/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst OPTIONS = [\n    { key: '1', content: 'Нет' },\n    { key: '2', content: 'Внутри' },\n    { key: '3', content: 'Снаружи' },\n];\nrender(() => {\n    const [selected, setSelected] = React.useState(OPTIONS[1]);\n    const handleChange = ({ selected }) => {\n        if (selected) {\n            setSelected(selected);\n        }\n    };\n    const visibleLabel = selected.key !== '1';\n    const positionLabel = visibleLabel && selected.key !== '2' ? 'outer' : 'inner';\n    return (\n        <div style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}>\n            <SelectMobile\n                label='Лейбл'\n                allowUnselect={true}\n                block={true}\n                size={56}\n                options={OPTIONS}\n                onChange={handleChange}\n                selected={selected}\n            />\n            <Gap size='xl' />\n            <Textarea\n                label={visibleLabel && 'Автоматическое изменение высоты'}\n                block={true}\n                labelView={positionLabel}\n            />\n            <Gap size='m' />\n            <Textarea\n                label={visibleLabel && 'Высота в три строки'}\n                minRows={3}\n                autosize={false}\n                block={true}\n                labelView={positionLabel}\n            />\n            <Gap size='m' />\n            <Textarea\n                label={visibleLabel && 'Ручное управление высотой'}\n                labelView={positionLabel}\n                autosize={false}\n                resize='vertical'\n                minRows={3}\n                block={true}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Phone Input component\nDESCRIPTION: React component for phone number input with formatting and validation features. Dependencies are React and possibly a phone input library. It accepts props for initial value, onChange handler, and optional configurations, enabling users to input standardized phone numbers.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_108\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-phone-input component implementation\n```\n\n----------------------------------------\n\nTITLE: Importing Modules and Components for Storybook Documentation\nDESCRIPTION: Imports necessary dependencies from Storybook addons and local files to set up the documentation page. Includes Meta, Markdown, ComponentHeader, Tabs, component stories, description, development, and changelog data.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/checkbox-group/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Adding the Notification Manager Component\nDESCRIPTION: This modification adds a new component called `notification-manager`. This component is designed to handle the display and management of notifications within the application. This allows the component to display notifications to users. The component will provide a centralized system to handle, track, and present notifications to users.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_73\n\n\n\n----------------------------------------\n\nTITLE: Displaying Skeleton Loader with Typography Components - React JSX\nDESCRIPTION: This code demonstrates the use of skeleton loading states for both headings and paragraph text in a React application, using Typography.TitleResponsive and Typography.Text with the showSkeleton prop. A Switch toggles the skeleton state, dynamically updating its appearance. Required dependencies: React, Switch, Typography, and Gap. Inputs include the boolean value for skeleton state; outputs are placeholder versions of typography that adapt style and width to match device context. The skeleton is responsive and can take custom width parameters, supporting both mobile and desktop layouts. Note: It relies on the @alfalab/core-components/typography and assumes document and clientWidth are available for IS_MOBILE detection.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/typography/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nconst IS_MOBILE = document.body.clientWidth < 450;\nrender(() => {\n    const [showSkeleton, setShowSkeleton] = React.useState(false);\n\n    return (\n        <>\n            <Switch\n                checked={showSkeleton}\n                label='Скелетонизация контента'\n                onChange={() => setShowSkeleton((p) => !p)}\n            />\n\n            <Gap size='l' />\n\n            <Typography.TitleResponsive\n                view='small'\n                font='system'\n                showSkeleton={showSkeleton}\n                skeletonProps={{ width: IS_MOBILE ? ['100%', '34%'] : 420 }}\n            >\n                Почему банк проверяет мои операции?\n            </Typography.TitleResponsive>\n\n            <Gap size='s' />\n\n            <Typography.Text tag='p' view='primary-medium' showSkeleton={showSkeleton}>\n                {`В 2001 году в России начал действовать Федеральный закон №115 «О\\u00a0противодействии\n                легализации доходов, полученных преступным путём, и финансированию терроризма». В\n                рамках закона банки могут блокировать карты, отказывать в\\u00a0проведении сомнительных\n                операций, ограничить доступ в\\u00a0интернет-банк или запрашивать документы, если по\n                операции клиента возникли подозрения.`}\n            </Typography.Text>\n        </>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Indicator Appearance - Mobile\nDESCRIPTION: This snippet showcases customization options for the `Indicator` component. It sets the `backgroundColor`, `color`, and `border` properties to alter its visual appearance. The layout uses a flex container to hold the indicators. This is the mobile version of the previous example. The components used are Container and Indicator.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/indicator/src/docs/description.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst styles = {\n    display: 'flex',\n    justifyContent: 'center',\n    gap: '12px',\n    width: 320,\n    padding: 20,\n    backgroundColor: 'var(--color-light-base-bg-secondary)',\n    borderRadius: '12px',\n    boxSizing: 'border-box',\n    alignItems: 'center',\n};\n\nrender(\n    <Container>\n        <div style={styles}>\n            <Indicator\n                value={1}\n                height={24}\n                backgroundColor='var(--color-light-status-attention)'\n                color='var(--color-light-status-negative)'\n                border={{\n                    width: 4,\n                    color: 'var(--color-light-status-negative)',\n                }}\n            />\n            <Indicator\n                value={1}\n                height={24}\n                backgroundColor='var(--color-light-base-bg-primary)'\n                color='var(--color-light-status-info)'\n                border={{\n                    width: 2,\n                    color: 'var(--color-light-status-info)',\n                }}\n            />\n        </div>\n    </Container>\n);\n```\n\n----------------------------------------\n\nTITLE: Typing ConfirmationTexts for Customizing Screen Texts in TypeScript\nDESCRIPTION: Declares a TypeScript type 'ConfirmationTexts' which specifies various optional properties to customize text content for different confirmation screens. These include titles, error messages, button labels, and descriptions that can be set for each screen state to tailor user interface messaging. This facilitates internationalization and personalized UI adjustments via typed props.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/confirmation/src/docs/development.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ConfirmationTexts = {\n    /**\n     * Экран INITIAL\n     */\n    title?: ReactNode; // заголовок\n    codeError?: string; // ошибка проверки кода\n    codeChecking?: string; // код проверяется\n    codeSending?: string; // код отправляется\n    codeSended?: string; // код отправлен\n    buttonRetry?: string; // кнопка повторной отправки кода\n    linkToHint?: string; // ссылка на экран HINT\n    noAttemptsLeft?: string; // не осталось попыток запроса кода\n    countdown?: string; // 'запросить повторно можно через'\n\n    /**\n     * Экран HINT\n     */\n    hintButton?: string; // кнопка 'Вернуться'\n\n    /**\n     * Экран FATAL_ERROR\n     */\n    fatalErrorTitle?: ReactNode; // заголовок\n    fatalErrorDescription?: ReactNode; // описание\n    fatalErrorButton?: string; // кнопка\n\n    /**\n     * Экран TEMP_BLOCK\n     */\n    tempBlockTitle?: ReactNode; // заголовок\n    tempBlockDescription?: ReactNode; // описание\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta for CheckboxGroup Component\nDESCRIPTION: Sets up the Meta component with references to the component stories, providing metadata for Storybook to display the component documentation properly.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/checkbox-group/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Meta of={Stories} />\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Fixing stories for pure-cell - JavaScript\nDESCRIPTION: This bug fix resolves the stories within the pure-cell component. Fixing stories enhances the component's documentation and testability, allowing developers to easily visualize and interact with the component's different states and configurations.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-range/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n### Bug Fixes\n\n-   **pure-cell:** fix stories ([#113](https://github.com/core-ds/core-components/issues/113)) ([01f6138](https://github.com/core-ds/core-components/commit/01f6138615b1b7268510e012c314650c084c9ef0))\n```\n\n----------------------------------------\n\nTITLE: Adding the Icon Button Component\nDESCRIPTION: This update introduces the `icon-button` component.  Icon buttons combine the visual representation of an icon with the functionality of a button. This component is useful for creating interactive elements with symbolic representations. This is a new component that adds functionality.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_72\n\n\n\n----------------------------------------\n\nTITLE: Adding the Drawer Component\nDESCRIPTION: The drawer component is being added to the core-components library. A drawer is a UI element that slides in from the edge of the screen, typically used to display navigation, supplementary content, or options. This component offers a new way to present content and is an addition to the range of components available in core-components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_71\n\n\n\n----------------------------------------\n\nTITLE: Configuring PureCell.Main with Style Customizations in React\nDESCRIPTION: This snippet shows how to implement PureCell.Main with custom styling for addons, footer, and content. It includes customizable padding options, direction settings, and styled placeholder elements for visualization.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pure-cell/src/docs/Component.stories.mdx#_snippet_13\n\nLANGUAGE: JSX\nCODE:\n```\nconst styleAddons = {\n    width: '40px',\n    height: '40px',\n    borderRadius: '8px',\n    backgroundColor: 'rgba(55, 120, 251, 0.1)',\n    border: '1px dashed rgb(55, 120, 251)',\n    boxSizing: 'border-box',\n};\nconst styleFooter = {\n    width: '240px',\n    height: '16px',\n    borderRadius: '8px',\n    backgroundColor: 'rgba(55, 120, 251, 0.1)',\n    border: '1px dashed rgb(55, 120, 251)',\n    boxSizing: 'border-box',\n};\nconst styleContent = {\n    width: '180px',\n    height: '20px',\n    borderRadius: '8px',\n    backgroundColor: 'rgba(55, 120, 251, 0.1)',\n    border: '1px dashed rgb(55, 120, 251)',\n    boxSizing: 'border-box',\n};\n```\n\n----------------------------------------\n\nTITLE: Importing SortableList Component (JSX)\nDESCRIPTION: Demonstrates the standard method for importing the SortableList component from the @alfalab/core-components library. This is necessary to use the component in a React/JSX application.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/sortable-list/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { SortableList } from '@alfalab/core-components/sortable-list';\n```\n\n----------------------------------------\n\nTITLE: Importing Alfаlab Core Components CSS Variables in CSS\nDESCRIPTION: Imports the main variables file from the Alfаlab core components package into a CSS file to enable usage of predefined CSS variables throughout the project. This import provides access to all core variables for consistent styling.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/vars/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import '@alfalab/core-components/vars';\n```\n\n----------------------------------------\n\nTITLE: Using ArgTypes for ProgressBar Properties in Storybook\nDESCRIPTION: This snippet utilizes the Storybook ArgTypes addon to automatically generate documentation for the ProgressBar component's props. It references the component to extract and display prop types and descriptions for easier understanding and configuration in Storybook.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/progress-bar/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ArgTypes of={ProgressBar} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Tabs with Markdown Content - JavaScript\nDESCRIPTION: This code uses the `Tabs` component to organize the documentation content. It takes in description, changelog, and development data via the `description`, `changelog` and `development` props. The `description` prop takes a React component from the imported `description.mdx` file, while the `changelog` prop uses the `Markdown` component to display the content from `Changelog` loaded from the `CHANGELOG.md` file. The `development` prop takes in the content from the imported `development.mdx` file.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/link/src/docs/Component.docs.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Component Header for CalendarRange\nDESCRIPTION: This snippet displays a header for the CalendarRange component, providing its name and description in the documentation interface. It utilizes the ComponentHeader component and passes the component's name and a brief description as children, aiding in component identification for users.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-range/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ComponentHeader name='CalendarRange' children='Используется для ввода диапазона дат.' />\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Addons and Components (JavaScript)\nDESCRIPTION: This snippet imports essential modules and components required for creating a Storybook documentation page. It imports `Meta` and `Markdown` from `@storybook/addon-docs` to enable document generation and markdown rendering. It also imports `ComponentHeader` and `Tabs` custom components from `storybook/blocks`. Furthermore, it imports component stories from the `Component.stories` file and various MDX files to provide component descriptions, development info and changelog. No specific parameters are used, and the output is the ability to use these modules in subsequent code.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/cdn-icon/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Defining Switch Component Story using React and Storybook\nDESCRIPTION: This React code defines a story for a Switch component within a Storybook environment. It uses knobs to enable interactive modification of component properties and render the component.  Dependencies include React, and the Switch component from the @alfalab/core-components-switch library, as well as Storybook addons. The story displays the Switch component with various configurable properties through knobs, like disabled, inactive, checked and others.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/switch/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n    {\n        const colors = select('colors', ['default', 'inverted'], 'default');\n        const [checked, setChecked] = React.useState(false);\n        const handleChange = () => setChecked(!checked);\n        const disabled = boolean('disabled', false);\n        const inactive = boolean('inactive', false);\n        const checkedKnob = boolean('checked', false);\n        const reversed = boolean('reversed', false);\n        const block = boolean('block', false);\n        const addons = text('addons');\n        const align = select('align', ['start', 'center']);\n        const className = text('className', '');\n        const dataTestId = text('dataTestId', '');\n        const label = text('label', 'Условие тоггла');\n        const hint = text('hint', 'Описание пункта');\n        const error = text('error', '');\n        return (\n            <Switch\n                disabled={disabled}\n                inactive={inactive}\n                checked={checked || checkedKnob}\n                reversed={reversed}\n                block={block}\n                addons={addons}\n                align={align}\n                className={className}\n                dataTestId={dataTestId}\n                label={label}\n                hint={hint}\n                error={error}\n                colors={colors}\n                onChange={handleChange}\n            />\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Using custom CSS modules naming\nDESCRIPTION: This commit uses custom naming for CSS modules. CSS modules provide a way to scope CSS styles locally to a component. This change likely defines a naming convention to avoid potential conflicts.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_164\n\n\n\n----------------------------------------\n\nTITLE: Removing dist directory in published packages\nDESCRIPTION: This commit removes the dist directory in published packages. This change affects the location of index files within the published package, requiring adjustments in how consumers import the component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/input-autocomplete/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nremoved dist directory in published packages ([#200](https://github.com/core-ds/core-components/issues/200)) ([8af8fee](https://github.com/core-ds/core-components/commit/8af8fee53ca0bd19fa2d1ca1422e0df23096e2c8))\n```\n\n----------------------------------------\n\nTITLE: Customizing OptionsList for Select-Mobile\nDESCRIPTION: This update allows customization of the optionsList in the select-mobile component, enhancing its flexibility.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Integrating BottomAddon for Slider Input Customization in React (JSX)\nDESCRIPTION: Presents usage of a SliderInput component, enhanced with BottomAddon content such as a scale (pips) under the slider. Uses React.useState for value management and the onChange handler to sync UI state. Requires SliderInput, isMobile, React, and BREAKPOINT; pips is configured for specific values, min/max/step guide the slider's range. Inputs: value, label, pips, size, min, max, step; Outputs: A slider UI with label and auxiliary content below.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/form-control/src/docs/description.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [value, setValue] = React.useState(3);\n\n    return (\n        <div style={{ width: 320 }}>\n            <SliderInput\n                value={value}\n                label='Label'\n                labelView={isMobile() ? 'outer' : 'inner'}\n                size={isMobile() ? 's' : 'm'}\n                pips={{\n                    mode: 'values',\n                    values: [1, 10 / 2, 10],\n                }}\n                min={1}\n                max={10}\n                step={1}\n                block={true}\n                onChange={(_, { value }) => setValue(value)}\n                breakpoint={BREAKPOINT}\n            />\n        </div>\n    );\n});\n\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Returning dist directory - JavaScript\nDESCRIPTION: This bug fix returns the 'dist' directory to the published packages. This likely reverts a previous change where the 'dist' directory was removed. Returning the 'dist' directory addresses issues caused by its absence, such as broken imports or incorrect file paths for consuming projects. This also restores the expected package structure.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-range/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n### Bug Fixes\n\n-   returned dist directory ([#199](https://github.com/core-ds/core-components/issues/199)) ([fabc15e](https://github.com/core-ds/core-components/commit/fabc15effa1457ca65ec7238206f1b1fc2a2a613))\n```\n\n----------------------------------------\n\nTITLE: Removing dist directory in published packages\nDESCRIPTION: This commit removes the `dist` directory from the published packages of @alfalab/core-components-with-suffix. This change may affect how the package is consumed, especially if consumers directly rely on files within the dist directory.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/with-suffix/CHANGELOG.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nremoved dist directory in published packages ([#200](https://github.com/core-ds/core-components/issues/200)) ([8af8fee](https://github.com/core-ds/core-components/commit/8af8fee53ca0bd19fa2d1ca1422e0df23096e2c8))\n```\n\n----------------------------------------\n\nTITLE: Applying Typography CSS Mixin for Custom Styling\nDESCRIPTION: Demonstrates how to import the core typography CSS mixins and apply the 'headline_small' mixin to a custom selector. The '@import' statement brings in the necessary variables, while '@mixin headline_small;' applies a consistent small headline style to elements matched by the '.item' selector. Make sure '@alfalab/core-components/vars/typography.css' is available and preprocessors like Sass are configured to support '@mixin'.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/typography.stories.mdx#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import '@alfalab/core-components/vars/typography.css';\n\n.item {\n    @mixin headline_small;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a HatchingProgressBar React Component\nDESCRIPTION: This snippet demonstrates the usage of a React component named 'HatchingProgressBar' which visually represents progress with a hatch overlay. The component takes 'value' for current progress and 'hatchValue' for the target hatch progress, indicating future advancement. Dependencies include React; the component should be imported from the relevant library or module. It is intended for UI rendering to display progress status visually.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/hatching-progress-bar/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<HatchingProgressBar value={40} hatchValue={60} />\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for DateRangeInput Storybook Documentation\nDESCRIPTION: Import statements for necessary Storybook addons, components, and documentation files required to build the DateRangeInput component documentation page.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/date-range-input/src/docs/Component.stories.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Story, Markdown } from '@storybook/addon-docs';\nimport { text, select, boolean, number } from '@storybook/addon-knobs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport { DateRangeInput } from '@alfalab/core-components-date-range-input';\n\nimport Changelog from '../../CHANGELOG.md?raw';\nimport Description from './description.mdx';\nimport Development from './development.mdx';\n```\n\n----------------------------------------\n\nTITLE: Rendering Toast Notification with Custom Plate Component in React (JSX)\nDESCRIPTION: This snippet demonstrates rendering a Toast notification attached to a container element with a custom Plate component used as the Toast's visual wrapper. It manages the Toast's open state with React hooks and uses a ref to access the container DOM element for anchoring and portal placement. The custom Plate includes visual elements like title, border, rounded corners, and a status badge. Dependencies include React, Toast, Plate, and StatusBadge components. Key parameters include 'anchorElement' for positioning, 'getPortalContainer' for portal rendering target, and 'ToastPlate' to override the default Toast wrapper.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/toast/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [anchorToastOpen, setAnchorToastOpen] = React.useState(false);\n\n    const containerRef = React.useRef();\n\n    React.useLayoutEffect(() => {\n        containerRef.current = document.querySelector('#toast-container');\n    }, []);\n\n    return (\n        <div id='toast-container'>\n            <Toast\n                breakpoint={BREAKPOINT}\n                open={anchorToastOpen}\n                anchorElement={containerRef.current}\n                position='bottom-start'\n                offset={[0, 8]}\n                onClose={() => {\n                    setAnchorToastOpen(false);\n                }}\n                autoCloseDelay={3000}\n                getPortalContainer={() => containerRef.current}\n                hasCloser={true}\n                ToastPlate={React.forwardRef((props, ref) => {\n                    return (\n                        <Plate\n                            {...props}\n                            ref={ref}\n                            view='positive'\n                            title='Пример уведомления'\n                            border={true}\n                            rounded={true}\n                            leftAddons={<StatusBadge view='positive-checkmark' />}\n                            breakpoint={BREAKPOINT}\n                            open={true}\n                        />\n                    );\n                })}\n            />\n            <Button\n                breakpoint={BREAKPOINT}\n                onClick={() => {\n                    setAnchorToastOpen(true);\n                }}\n            >\n                Показать plate\n            </Button>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering NavigationBar with React and JSX\nDESCRIPTION: This code snippet renders a NavigationBar component with various slots (leftAddons, rightAddons, bottomAddons) and alignment controlled by a SelectMobile component. It defines styles for different elements like addons and the main content area and uses state to manage the selected alignment. Dependencies include React, the NavigationBar component, and other styling-related components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/navigation-bar/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst ALIGN_SELECT_OPTIONS = [\n    { key: 'left', content: 'Левое' },\n    { key: 'center', content: 'Центральное' },\n];\n\nrender(() => {\n    const [alignViewSelected, setAlignView] = React.useState(ALIGN_SELECT_OPTIONS[0].key);\n\n    const wrapperStyles = {\n        width: 360,\n        margin: 'var(--gap-20-neg)',\n    };\n\n    const commonStyles = {\n        backgroundColor: 'var(--color-light-status-muted-alt-attention)',\n        border: '1px dashed var(--color-light-status-attention)',\n        boxSizing: 'border-box',\n        borderRadius: '8px',\n        height: '40px',\n        ...(alignViewSelected === 'left' && {\n            backgroundColor: 'var(--color-light-status-muted-alt-negative)',\n        }),\n    };\n\n    const addonsStyles = {\n        ...commonStyles,\n        backgroundColor: 'var(--color-light-status-muted-alt-positive)',\n        borderColor: 'var(--color-light-status-positive)',\n        width: '48px',\n    };\n\n    const bottomAddonsStyles = {\n        ...commonStyles,\n        backgroundColor: 'var(--color-light-status-muted-alt-info)',\n        borderColor: 'var(--color-light-status-info)',\n        width: '100%',\n    };\n    return (\n        <div>\n            <div style={wrapperStyles}>\n                <NavigationBar\n                    leftAddons={<div style={addonsStyles} />}\n                    rightAddons={<div style={addonsStyles} />}\n                    bottomAddons={<div style={bottomAddonsStyles} />}\n                    backgroundColor='var(--color-light-base-bg-secondary)'\n                    align={alignViewSelected}\n                >\n                    <div style={commonStyles} />\n                </NavigationBar>\n            </div>\n            <Gap size={40} />\n            <div style={{ margin: ' 0 -4px' }}>\n                <SelectMobile\n                    block={true}\n                    options={ALIGN_SELECT_OPTIONS}\n                    label='Выравнивание'\n                    labelView='outer'\n                    selected={alignViewSelected}\n                    onChange={({ selected }) => setAlignView(selected.key)}\n                    Option={BaseOption}\n                    size={48}\n                />\n            </div>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Header for Mobile Modal - React\nDESCRIPTION: This React code defines the `Header` component for the mobile modal. It utilizes a similar structure to the desktop header, including layout and style.  The component uses `React.useEffect` hook to set `hasHeader` to true. It also includes an `onClick` handler on one of the elements to close the modal, using the `onClose` prop.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/modal/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst Header = () => {\n    const { setHasHeader, onClose } = React.useContext(ModalContext);\n\n    React.useEffect(() => setHasHeader(true), [setHasHeader]);\n\n    const commonStyles = {\n        backgroundColor: 'rgba(55, 120, 251, 0.1)',\n        border: '1px dashed rgb(55, 120, 251)',\n        boxSizing: 'border-box',\n        borderRadius: '8px',\n        height: '48px',\n    };\n\n    const addonsStyles = {\n        ...commonStyles,\n        width: '48px',\n    };\n\n    const innerAddonsStyles = {\n        ...addonsStyles,\n        backgroundColor: 'rgba(207, 112, 255, 0.1)',\n    };\n\n    const bottomAddonsStyles = {\n        ...commonStyles,\n        width: '100%',\n    };\n\n    const wrapperStyles = {\n        display: 'flex',\n        justifyContent: 'center',\n    };\n\n    const titleStyles = {\n        ...commonStyles,\n        flexGrow: 1,\n    };\n\n    return (\n        <div style={{ margin: 'var(--modal-header-mobile-paddings)' }}>\n            <div style={wrapperStyles}>\n                <div style={innerAddonsStyles} />\n                <div style={addonsStyles} />\n                <div style={titleStyles} />\n                <div style={addonsStyles} />\n                <div style={innerAddonsStyles} onClick={onClose} />\n            </div>\n            <div style={bottomAddonsStyles} />\n        </div>\n    );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Importing StatusBadge Component in JSX\nDESCRIPTION: This JSX code snippet demonstrates the standard import statement required to use the StatusBadge component within a project utilizing the @alfalab/core-components library.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/status-badge/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StatusBadge } from '@alfalab/core-components/status-badge';\n```\n\n----------------------------------------\n\nTITLE: Importing Gallery component in JSX\nDESCRIPTION: This code snippet demonstrates how to import the Gallery component from the '@alfalab/core-components/gallery' module. This import statement allows you to use the Gallery component within your React or JSX code.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/gallery/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Gallery } from '@alfalab/core-components/gallery';\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Documentation Tabs for CustomButton (JavaScript/MDX)\nDESCRIPTION: This snippet demonstrates the setup of a documentation page for the CustomButton component in Storybook using JavaScript and MDX. It imports Storybook doc utilities, component metadata, and markdown sources for display within a tabbed interface. Required dependencies include Storybook's addon-docs, storybook/blocks, as well as the corresponding MDX and Markdown files. Key parameters include the imported Stories object for Meta, component name for the header, and tab content for the Tabs layout. There are no inputs or outputs, as this file only configures Storybook's display with no executable logic.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/custom-button/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta of={Stories} />\n\n<ComponentHeader name='CustomButton' />\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Building a React Table with Sticky Header and Dynamic Data\nDESCRIPTION: An implementation of a table with a sticky header that remains visible when scrolling. The example generates dummy data with dates and random monetary values, demonstrating how to handle scrollable content with fixed headers.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/table/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst getCurrentDay = function (addDays) {\n    var date = new Date();\n    date.setDate(date.getDate() + addDays);\n    return date;\n};\nconst data = Array.from({ length: 10 }, (_, i) => i + 1).map((idx) => ({\n    id: idx,\n    date: getCurrentDay(idx),\n    title: `ООО \"Company Name ${idx}\"`,\n    sum: Math.floor(Math.random() * 1000000),\n}));\n\nrender(() => {\n    return (\n        <div style={{ height: '300px' }}>\n            <Table stickyHeader>\n                <Table.THead>\n                    <Table.THeadCell title='Дата'>Дата</Table.THeadCell>\n\n                    <Table.THeadCell title='Контрагент'>Контрагент</Table.THeadCell>\n\n                    <Table.THeadCell title='Сумма' textAlign='right' width={268}>\n                        Сумма\n                    </Table.THeadCell>\n                </Table.THead>\n                <Table.TBody>\n                    {data.map((row) => (\n                        <Table.TRow key={row.id}>\n                            <Table.TCell>\n                                <Typography.Text view='primary-small' tag='div'>\n                                    {row.date.toLocaleDateString()}\n                                </Typography.Text>\n                            </Table.TCell>\n\n                            <Table.TCell>\n                                <Space size={2}>\n                                    <Typography.Text view='primary-small' tag='div'>\n                                        {row.title}\n                                    </Typography.Text>\n                                    <Typography.Text view='primary-small' color='secondary'>\n                                        {row.subtitle}\n                                    </Typography.Text>\n                                </Space>\n                            </Table.TCell>\n\n                            <Table.TCell>\n                                <Amount\n                                    value={row.sum}\n                                    currency='RUR'\n                                    minority={100}\n\n```\n\n----------------------------------------\n\nTITLE: Adding support for one-day range selection in calendar\nDESCRIPTION: This change introduces functionality to enable the selection of a one-day range within the calendar-range component. Previously, selecting a range required at least two days. This modification extends the calendar's functionality by offering more flexibility when specifying date ranges.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_76\n\n\n\n----------------------------------------\n\nTITLE: Importing Storybook Addons and Component Files\nDESCRIPTION: Imports necessary modules for the Storybook MDX documentation page. This includes Meta and Markdown from '@storybook/addon-docs', custom Storybook blocks (ComponentHeader, Tabs), the component's stories from './Component.stories', and external markdown files for description, development guidance, and the project's changelog.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/hatching-progress-bar/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Importing Grid Component from @alfalab/core-components in JSX\nDESCRIPTION: This snippet shows how to import the Grid component from the @alfalab/core-components/grid package in a React JSX environment. It assumes the package is installed and available in the project dependencies. The import allows the developer to use the Grid component to build grid-based layouts within a React application.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/grid/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Grid } from '@alfalab/core-components/grid';\n```\n\n----------------------------------------\n\nTITLE: Displaying Indicators in React\nDESCRIPTION: This code renders multiple `SuperEllipse` components, each with an indicator placed in the `indicator` or `topAddons` prop. It demonstrates different usages of the `Indicator` component, including passing values to it and different styling. It uses inline styles for the display configuration, which are applied to a div element containing the `SuperEllipse` components. The second snippet applies the same concept, with the mobile version having a container for layout.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/icon-view/src/docs/description.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst styles = {\n    display: 'flex',\n    gap: '20px',\n};\n\nrender(\n    <div style={styles}>\n        <SuperEllipse size='80' indicator={<Indicator view='red' />} />\n        <SuperEllipse size='80' topAddons={<Indicator value={1} height={24} view='red' />} />\n        <SuperEllipse size='80' topAddons={<Indicator value={25} height={24} view='red' />} />\n        <SuperEllipse size='80' topAddons={<Indicator value={100} height={24} view='red' />} />\n    </div>,\n);\n```\n\nLANGUAGE: jsx\nCODE:\n```\n//MOBILE\nconst styles = {\n    display: 'flex',\n    gap: '20px',\n};\n\nrender(\n    <Container>\n        <div style={styles}>\n            <SuperEllipse size='80' indicator={<Indicator view='red' />} />\n            <SuperEllipse size='80' topAddons={<Indicator value={1} height={24} view='red' />} />\n            <SuperEllipse size='80' topAddons={<Indicator value={25} height={24} view='red' />} />\n        </div>\n        <Gap size='l' />\n        <SuperEllipse size='80' topAddons={<Indicator value={100} height={24} view='red' />} />\n    </Container>,\n);\n```\n\n----------------------------------------\n\nTITLE: Managing File Upload Status with Progress and Error Handling in React\nDESCRIPTION: This snippet demonstrates a React component that manages file upload status, progress animation, and error display. It simulates upload progress with requestAnimationFrame, handles different error scenarios, and updates UI elements such as progress bars and error messages based on upload outcomes.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/file-upload-item/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n```jsx live mobileHeight={500}\nrender(() => {\n    const [status, setStatus] = React.useState('INITIAL');\n    const [title, setTitle] = React.useState('Прикрепите файл');\n    const [progressBar, setProgressBar] = React.useState(0);\n    const [error, setError] = React.useState('');\n\n    const distance = 100;\n    const duration = 500;\n    let startAnimation = null;\n\n    const measure = (timestamp, status) => {\n        if (!startAnimation) {\n            startAnimation = timestamp;\n        }\n\n        const progress = (timestamp - startAnimation) / duration;\n        const progressValue = progress * distance;\n        setProgressBar(progressValue);\n\n        if (progress < 1) {\n            return requestAnimationFrame((t) => measure(t, status));\n        }\n\n        if (status === 'SUCCESS') {\n            setStatus(status);\n        } else if (status === 'ERROR') {\n            setStatus('ERROR');\n            setError('Описание первой ошибки');\n        } else if (status === 'MULTI_ERROR') {\n            setStatus('ERROR');\n            setError(['Описание первой ошибки', 'Описание второй ошибки']);\n        }\n    };\n\n    const handleSuccessClick = () => {\n        setError('');\n        setProgressBar(0);\n        setStatus('UPLOADING');\n        setTitle('Пример.docx');\n        requestAnimationFrame((t) => measure(t, 'SUCCESS'));\n    };\n\n    const handleError = () => {\n        setProgressBar(0);\n        setStatus('UPLOADING');\n        requestAnimationFrame((t) => measure(t, 'ERROR'));\n    };\n\n    const handleMultiError = () => {\n        setProgressBar(0);\n        setStatus('UPLOADING');\n        requestAnimationFrame((t) => measure(t, 'MULTI_ERROR'));\n    };\n\n    return (\n        <React.Fragment>\n            <FileUploadItem\n                title={title}\n                subtitle='Нет файла'\n                uploadStatus={status}\n                progressBar={progressBar}\n                uploadDate='22.07.2024'\n                size={2097152} // 2mb\n                error={error}\n            >\n                <FileUploadItem.StatusControl />\n                <FileUploadItem.Content />\n                <FileUploadItem.Actions />\n            </FileUploadItem>\n            <Gap size={20} />\n            <div>\n                <Button size={32} onClick={handleSuccessClick}>\n                    Успех\n                </Button>\n                <Gap size={8} direction='horizontal' />\n                <Button size={32} onClick={handleError}>\n                    Ошибка\n                </Button>\n                <Gap size={8} direction={isMobile() ? 'vertical' : 'horizontal'} />\n                <Button size={32} onClick={handleMultiError}>\n                    Несколько ошибок\n                </Button>\n            </div>\n        </React.Fragment>\n    );\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Textarea Story with Knobs (React)\nDESCRIPTION: This story demonstrates the usage of the Textarea component with various knobs for interactive customization. It uses Storybook's `select`, `boolean`, and `number` knobs to control properties such as size, maximum length, autosizing, and more. It renders a Textarea component with dynamically configured props, allowing users to experiment with different configurations directly in Storybook.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/textarea/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{React.createElement(() => {\n        const size = select('size', [40, 48, 56, 64, 72], 48);\n        const IconComponent = size === 40 ? DiamondsSIcon : StarMIcon;\n\n        return (\n            <Textarea\n                showCounter={boolean('showCounter', false)}\n                maxLength={number('maxLength', 500)}\n                autosize={boolean('autosize', true)}\n                allowOverflow={boolean('allowOverflow', true)}\n                block={boolean('block', false)}\n                size={size}\n                disabled={boolean('disabled', false)}\n                placeholder={text('placeholder', '')}\n                resize={select('resize', ['none', 'vertical'], 'none')}\n                minRows={number('minRows', undefined)}\n                maxRows={number('maxRows', undefined)}\n                maxHeight={number('maxHeight', undefined)}\n                label={text('label', '')}\n                labelView={select('labelView', ['inner', 'outer'], 'inner')}\n                hint={text('hint', '')}\n                error={text('error', '')}\n                rightAddons={boolean('rightAddons', false) && !text('error') && <IconComponent />}\n                leftAddons={boolean('leftAddons', false) && <IconComponent />}\n                bottomAddons={boolean('bottomAddons', false) && <span>bottom text</span>}\n                readOnly={boolean('readOnly', false)}\n                nativeScrollbar={boolean('nativeScrollbar', false)}\n            />\n        );\n    })}\n```\n\n----------------------------------------\n\nTITLE: Fixing Imports in Stories\nDESCRIPTION: This commit addresses issues with imports within the stories of the @alfalab/core-components-with-suffix package. This fixes the broken import and resolves the associated issue #998.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/with-suffix/CHANGELOG.md#_snippet_6\n\nLANGUAGE: none\nCODE:\n```\nИсправить импорты в сторях. ([#998](https://github.com/core-ds/core-components/issues/998)) ([e6a654a](https://github.com/core-ds/core-components/commit/e6a654a0599451c7d149484cb61d8067eed083b7))\n```\n\n----------------------------------------\n\nTITLE: Importing NotificationManager - React\nDESCRIPTION: This snippet imports the NotificationManager component from the specified module path. This import allows the component to be used in the React application. No specific dependencies are required other than the component's module. The output of this import is that you can now use NotificationManager in your component. There are no constraints imposed by this particular import statement.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/notification-manager/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { NotificationManager } from '@alfalab/core-components/notification-manager';\n```\n\n----------------------------------------\n\nTITLE: Add negative value support to amount-input\nDESCRIPTION: Extends the amount-input component to accept negative numbers for cases requiring subtraction or negative balances. Updates validation logic and input handling.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_64\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Logic enabling negative number input in amount-input component */\n```\n\n----------------------------------------\n\nTITLE: Displaying a Deprecation Notice Using Core Components in React\nDESCRIPTION: This snippet renders a <Plate> component displaying an attention view with a message indicating deprecation of an old component, and providing a link to the new InternationalPhoneInput documentation. It relies on '@alfalab/core-components/plate' and '@alfalab/core-components/link' libraries, and is intended for use in React applications to notify users about component updates.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/intl-phone-input/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Plate } from '@alfalab/core-components/plate';\nimport { Link } from '@alfalab/core-components/link';\n\n<Plate\n    view='attention'\n    limitContentWidth={false}\n    title={\n        <>\n            Компонент больше не поддерживается, переходите на новый компонент {''}\n             <Link href='https://core-ds.github.io/core-components/master/?path=/docs/internationalphoneinput--docs'>\n                 InternationalPhoneInput.\n             </Link>\n        </>\n    }\n    titleView='light'\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Calendar Story Component with Device-Specific Rendering in React\nDESCRIPTION: Creates a Storybook story that demonstrates the Calendar component with configurable options. It renders different versions (desktop or mobile) based on user selection and handles theme-based border radius adjustments.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar/src/docs/Component.stories.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Story name='Calendar'>\n    {React.createElement(() => {\n        const offDays = [new Date().setDate(7)];\n        const events = [new Date().setDate(3), new Date().setDate(17)];\n        const [open, setOpen] = React.useState(false);\n        const [value, setValue] = React.useState();\n        const { selectedFrom, selectedTo, updatePeriod } = usePeriod();\n        const device = select('device', ['desktop', 'mobile'], 'desktop');\n        const selectorView = select('selectorView', ['full', 'month-only'], 'full');\n        const defaultView = select('defaultView', ['days', 'months', 'years'], 'days');\n        const defaultMonth = select('defaultMonth', MONTHS, 'none');\n\n        const getBorderRadiusByTheme = (theme) => {\n            if (theme === 'corp') {\n                return 16;\n            }\n\n            return 8;\n        }\n\n        const updateBorderRadius = (e) => {\n            setBorderRadius(getBorderRadiusByTheme(e.detail.theme))\n        }\n\n        React.useEffect(() => {\n            document.body.addEventListener('theme-change', updateBorderRadius);\n\n            return () => {\n                document.body.removeEventListener('theme-change', updateBorderRadius);\n            }\n        }, []);\n\n        const [borderRadius, setBorderRadius] = React.useState(getBorderRadiusByTheme(localStorage.getItem('selectedTheme') || 'default'));\n\n        const renderContent = () => {\n            if (device === 'desktop') {\n                return (\n                    <div\n                        style={{\n                            display: 'inline-block',\n                            background: 'var(--color-light-base-bg-primary)',\n                            width: 312,\n                            ...stylesStringToObj(getQueryParam('wrapperStyles')),\n                        }}\n                    >\n                        <div style={{ ...WRAPPER_STYLES, borderRadius }}>\n                            <Calendar\n                                defaultMonth={\n                                    defaultMonth === 'none' ? undefined : Number(defaultMonth)\n                                }\n                                value={value}\n                                onChange={setValue}\n                                offDays={offDays}\n                                events={events}\n                                defaultView={defaultView}\n                                selectorView={selectorView}\n                                responsive={true}\n                                showCurrentYearSelector={boolean('showCurrentYearSelector', false)}\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (selectorView === 'full') {\n                return (\n                    <>\n                        <Button onClick={() => setOpen(true)}>Открыть календарь</Button>\n                        <CalendarMobile\n                            onClose={() => setOpen(false)}\n                            open={open}\n                            value={value}\n                            onChange={setValue}\n                            defaultView={defaultView}\n                            selectorView={selectorView}\n                        />\n                    </>\n                );\n            } else {\n                return (\n                    <>\n                        <Button onClick={() => setOpen(true)}>Открыть календарь (период)</Button>\n                        <CalendarMobile\n                            onClose={() => setOpen(false)}\n                            open={open}\n                            onChange={updatePeriod}\n                            selectedFrom={selectedFrom}\n                            selectedTo={selectedTo}\n                            defaultView={defaultView}\n                            selectorView={selectorView}\n                        />\n                    </>\n                );\n            }\n        };\n        return renderContent();\n    })}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Removing composed props from MoneyInput\nDESCRIPTION: This commit removes composed props from the MoneyInput component. It removes the props that were combined to prevent unnecessary complexity.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_189\n\n\n\n----------------------------------------\n\nTITLE: Importing Storybook Addons and Components (JavaScript)\nDESCRIPTION: Imports necessary modules from Storybook addons, custom blocks, and storybook stories, as well as Markdown content for documentation sections. Sets up dependencies required for rendering the documentation page.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/gap/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Importing Toast Components (JSX)\nDESCRIPTION: This code snippet demonstrates how to import the Toast component and its platform-specific versions (ToastMobile and ToastDesktop) from the @alfalab/core-components/toast library. This allows developers to use the Toast component in their React applications.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/toast/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Toast } from '@alfalab/core-components/toast';\nimport { ToastMobile } from '@alfalab/core-components/toast/mobile';\nimport { ToastDesktop } from '@alfalab/core-components/toast/desktop';\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata and UI Elements (JavaScript)\nDESCRIPTION: This code configures the Storybook metadata and uses pre-defined React components for rendering the documentation. `<Meta>` defines the component stories to be documented. `<ComponentHeader>` displays the component's name and a brief description.  `<Tabs>` organizes different parts of the documentation like description, changelog and development guide, from markdown files.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/alert/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Meta of={Stories} />\n\n<ComponentHeader\n    name='Alert'\n    children='Информирует пользователя о текущем состоянии системы или сообщает какую-либо важную информацию.'\n/>\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing PickerButton and Variants from Package\nDESCRIPTION: This snippet shows how to import the PickerButton component and its responsive variants directly from the '@alfalab/core-components' package, including separate imports for mobile and desktop versions. It indicates the package's modular structure and facilitates responsive component usage.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/picker-button/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { PickerButton } from '@alfalab/core-components/picker-button';\nimport { PickerButtonMobile } from '@alfalab/core-components/picker-button/mobile';\nimport { PickerButtonDesktop } from '@alfalab/core-components/picker-button/desktop';\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Styrene UI Font Using CSS @font-face (CSS)\nDESCRIPTION: Provides CSS @font-face declarations to include the custom Styrene UI font with multiple font weights (400, 500, 700) using WOFF2 and WOFF formats from CDN sources. It requires usage of the font-feature-settings CSS property set to 'ss01' and font smoothing properties (-webkit-font-smoothing and -moz-osx-font-smoothing) to enhance rendering quality. This snippet assumes reliable network access to the specified CDN URLs and recommends storing fonts locally for production use.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/typography/src/docs/development.mdx#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n    font-family: 'Styrene UI';\n    src: url('https://alfabank.servicecdn.ru/media/fonts/styrene-ui/styrene-ui_regular.woff2')\n            format('woff2'), url('https://alfabank.servicecdn.ru/media/fonts/styrene-ui/styrene-ui_regular.woff')\n            format('woff');\n    font-weight: 400;\n    font-style: normal;\n}\n@font-face {\n    font-family: 'Styrene UI';\n    src: url('https://alfabank.servicecdn.ru/media/fonts/styrene-ui/styrene-ui_medium.woff2') format('woff2'),\n        url('https://alfabank.servicecdn.ru/media/fonts/styrene-ui/styrene-ui_medium.woff') format('woff');\n    font-weight: 500;\n    font-style: normal;\n}\n@font-face {\n    font-family: 'Styrene UI';\n    src: url('https://alfabank.servicecdn.ru/media/fonts/styrene-ui/styrene-ui_bold.woff2') format('woff2'),\n        url('https://alfabank.servicecdn.ru/media/fonts/styrene-ui/styrene-ui_bold.woff') format('woff');\n    font-weight: 700;\n    font-style: normal;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PageIndicatorStep Component in React\nDESCRIPTION: Example of PageIndicatorStep component that adapts its width to the container size. This indicator is available in one size (4px) and provides a step-by-step visual representation of progress.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/page-indicator/src/docs/description.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const elements = 5;\n    const [activeElement, setActiveElement] = React.useState(0);\n    const handlePrevClick = () => setActiveElement((prev) => Math.max(--prev, 0));\n    const handleNextClick = () => setActiveElement((prev) => Math.min(++prev, elements - 1));\n\n    return (\n        <div>\n            <div style={{ width: 168 }}>\n                <PageIndicatorStep size={4} activeElement={activeElement} elements={elements} />\n            </div>\n            <Row style={{ gap: 'var(--gap-xs)' }}>\n                <Button leftAddons={<ChevronLeftMIcon />} onClick={handlePrevClick} />\n                <Button leftAddons={<ChevronRightMIcon />} onClick={handleNextClick} />\n            </Row>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Using dataTestId with International Phone Input Components\nDESCRIPTION: Shows the structure of objects returned by the getInternationalPhoneInputDesktopTestIds and getInternationalPhoneInputMobileTestIds functions, which provide test IDs for different elements of the component for testing purposes.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/international-phone-input/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// desktop\n{\n    // Для инпута при автокомплите\n    fieldAutocompleteWrapper: dataTestId,\n    fieldAutocompleteInner: `${dataTestId}-field-form-control-inner`,\n    fieldAutocompleteFormControl: `${dataTestId}-field-form-control`,\n    fieldAutocompleteLeftAddons: `${dataTestId}-field-form-control-left-addons`,\n    fieldAutocompleteRightAddons: `${dataTestId}-field-form-control-right-addons`,\n    fieldAutocompleteError: `${dataTestId}-field-form-control-error-message`,\n    fieldAutocompleteHint: `${dataTestId}-field-form-control-hint`,\n    option: `${dataTestId}-option`,\n    optionsList: `${dataTestId}-options-list`,\n\n    // Для инпута без автокомплита\n    field: dataTestId,\n    fieldInner: `${dataTestId}-form-control-inner`,\n    fieldFormControl: `${dataTestId}-form-control`,\n    fieldLeftAddons: `${dataTestId}-form-control-left-addons`,\n    fieldRightAddons: `${dataTestId}-form-control-right-addons`,\n    fieldError: `${dataTestId}-form-control-error-message`,\n    fieldHint: `${dataTestId}-form-control-hint`,\n\n    // Для списка стран\n    countryOption: `${dataTestId}-country-select-option`,\n    countryOptionsList: `${dataTestId}-country-select-options-list`,\n};\n\n// mobile\n{\n    // Для инпута при автокомплите\n    fieldAutocompleteWrapper: dataTestId,\n    fieldAutocompleteInner: `${dataTestId}-field-form-control-inner`,\n    fieldAutocompleteFormControl: `${dataTestId}-field-form-control`,\n    fieldAutocompleteLeftAddons: `${dataTestId}-field-form-control-left-addons`,\n    fieldAutocompleteRightAddons: `${dataTestId}-field-form-control-right-addons`,\n    fieldAutocompleteError: `${dataTestId}-field-form-control-error-message`,\n    fieldAutocompleteHint: `${dataTestId}-field-form-control-hint`,\n\n    searchInput: `${dataTestId}-search`,\n    searchFormControl: `${dataTestId}-search-form-control`,\n    searchInner: `${dataTestId}-search-form-control-inner`,\n    searchLeftAddons: `${dataTestId}-search-form-control-left-addons`,\n    searchRightAddons: `${dataTestId}-search-form-control-right-addons`,\n    searchError: `${dataTestId}-search-form-control-error-message`,\n    searchHint: `${dataTestId}-search-form-control-hint`,\n\n    bottomSheet: `${dataTestId}-bottom-sheet`,\n    bottomSheetHeader: `${dataTestId}-bottom-sheet-header`,\n    bottomSheetContent: `${dataTestId}-bottom-sheet-content`,\n    option: `${dataTestId}-option`,\n    optionsList: `${dataTestId}-options-list`,\n\n    clearButton: `${dataTestId}-clear`,\n    applyButton: `${dataTestId}-apply`,\n\n    // Для инпута без автокомплита\n    field: dataTestId,\n    fieldInner: `${dataTestId}-form-control-inner`,\n    fieldFormControl: `${dataTestId}-form-control`,\n    fieldLeftAddons: `${dataTestId}-form-control-left-addons`,\n    fieldRightAddons: `${dataTestId}-form-control-right-addons`,\n    fieldError: `${dataTestId}-form-control-error-message`,\n    fieldHint: `${dataTestId}-form-control-hint`,\n\n    // Для списка стран\n    countryBottomSheet: `${dataTestId}-country-select-bottom-sheet`,\n    countryBottomSheetHeader: `${dataTestId}-country-select-bottom-sheet-header`,\n    countryBottomSheetContent: `${dataTestId}-country-select-bottom-sheet-content`,\n    countryOption: `${dataTestId}-country-select-option`,\n    countryOptionsList: `${dataTestId}-country-select-options-list`,\n};\n```\n\n----------------------------------------\n\nTITLE: Fixing withoutBorder prop CSS issue\nDESCRIPTION: This update addresses a CSS-related issue related to the `withoutBorder` property of the table component. It ensures that the intended behavior of the `withoutBorder` prop is correctly reflected in the rendered table, by fixing the CSS rules.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/table/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Fix disabled styles in icon-button\nDESCRIPTION: Corrects visual styles for disabled icon-button components to clearly indicate non-interactive state, including color and cursor modifications.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_65\n\nLANGUAGE: CSS\nCODE:\n```\n/* CSS rules for styling disabled icon-button */\n```\n\n----------------------------------------\n\nTITLE: Adding select-modal-mobile\nDESCRIPTION: This commit adds select-modal-mobile. The functionality is not described in details\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/input-autocomplete/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\n**select:** add select-modal-mobile ([#47](https://github.com/core-ds/core-components/issues/47)) ([5ec4268](https://github.com/core-ds/core-components/commit/5ec42688065bb279d721541ec21bde242675ab8a))\n```\n\n----------------------------------------\n\nTITLE: Mobile Filter Group Implementation in React\nDESCRIPTION: This code shows the mobile version of filter group components with single and multiple selection capabilities. It includes custom field components with appropriate label handling and selection state management.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/filter-tag/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n//MOBILE\n// Одиночный выбор\nconst CustomField = ({\n    label,\n    selected,\n    setSelectedItems,\n    innerProps: { ref, ...restInnerProps },\n    ...restProps\n}) => {\n    const checkedContent = (\n        <span>\n            {!label && 'Одиночный выбор:'}\n            <b> {selected && selected.content}</b>\n        </span>\n    );\n\n    const contentLabel = <span>Одиночный выбор</span>;\n\n    return (\n        <div ref={ref}>\n            <FilterTag\n                onClear={() => setSelectedItems([])}\n                checked={selected}\n                {...restInnerProps}\n                {...restProps}\n            >\n                {selected ? checkedContent : contentLabel}\n            </FilterTag>\n        </div>\n    );\n};\n\n// Множественный выбор\nconst CustomFieldMultiple = ({\n    label,\n    selected,\n    setSelectedItems,\n    selectedMultiple,\n    innerProps: { ref, ...restInnerProps },\n    ...restProps\n}) => {\n    const content = selected && selected.content;\n\n    const checkedContent = (\n        <span>\n            {!label && 'Множественный выбор:'}\n            <b>\n                {' '}\n                {selectedMultiple.length !== 1 ? `Выбрано: ${selectedMultiple.length}` : content}\n            </b>\n        </span>\n    );\n\n    const contentLabel = <span>Множественный выбор</span>;\n\n    return (\n        <div ref={ref}>\n            <FilterTag\n                onClear={() => setSelectedItems([])}\n                checked={selected}\n                {...restInnerProps}\n                {...restProps}\n            >\n                {selected ? checkedContent : contentLabel}\n            </FilterTag>\n        </div>\n    );\n};\n\nrender(() => {\n    const options = [\n        { key: '1', content: 'Aurum' },\n        { key: '2', content: 'Bercelium' },\n        { key: '3', content: 'Curium' },\n        { key: '4', content: 'Neptunium' },\n        { key: '5', content: 'Plutonuim' },\n    ];\n\n    const [label, setLabel] = React.useState(false);\n\n    const [selected, setSelected] = React.useState([]);\n\n    const handleChangeSelected = ({ selectedMultiple }) => {\n        setSelected(selectedMultiple);\n    };\n\n    const [selectedMultiple, setSelectedMultiple] = React.useState([]);\n    const handleChangeMultiple = ({ selectedMultiple }) => {\n        setSelectedMultiple(selectedMultiple.map((option) => option.key));\n    };\n\n    // Диапазон значений\n    const [open, setOpen] = React.useState(false);\n    const [value, setValue] = React.useState();\n    const { selectedFrom, selectedTo, updatePeriod } = usePeriod();\n\n    const handleOpen = () => {\n        setOpen(!open);\n    };\n\n    const handleClear = () => {\n        setOpen(false);\n        updatePeriod(null, null);\n    };\n\n    const handleUpdatePeriodr = (date) => {\n        updatePeriod(date);\n\n        if (selectedFrom) {\n            setOpen(false);\n        }\n    };\n\n    const getDateString = React.useCallback((date) => {\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Radio Group in React\nDESCRIPTION: Example of vertical radio group implementation with desktop and mobile variants. Shows how to handle longer label text with multiple options and includes error state management.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/radio-group/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [value, setValue] = React.useState('one');\n    const [error, setError] = React.useState(false);\n\n    const onChange = (_, payload) => {\n        setValue(payload.value);\n    };\n\n    return (\n        <div style={{ width: '100%' }}>\n            <RadioGroupDesktop\n                label='Выберите планету земной группы'\n                onChange={onChange}\n                hint='Только одна из этих планет принадлежит земной группе'\n                error={error}\n                value={value}\n            >\n                <Radio label='Марс' value='one' size={24} />\n                <Radio label='Юпитер' value='two' size={24} />\n                <Radio label='Меркурий' value='three' size={24} />\n                <Radio label='Сатурн' value='four' size={24} />\n                <Radio label='Нептун' value='five' size={24} />\n            </RadioGroupDesktop>\n\n            <Gap size='2xl' />\n\n            <Space direction='horizontal' wrap={true}>\n                <Button size='xxs' onClick={() => setError(false)}>\n                    По умолчанию\n                </Button>\n                <Button size='xxs' onClick={() => setError('Правильный ответ: Марс')}>\n                    Состояние ошибки\n                </Button>\n            </Space>\n        </div>\n    );\n});\n//MOBILE\nrender(() => {\n    const [value, setValue] = React.useState('one');\n    const [error, setError] = React.useState(false);\n\n    const onChange = (_, payload) => {\n        setValue(payload.value);\n    };\n\n    return (\n        <div style={{ width: '100%' }}>\n            <RadioGroupMobile\n                label='Выберите планету земной группы'\n                onChange={onChange}\n                hint='Только одна из этих планет принадлежит земной группе'\n                error={error}\n                value={value}\n            >\n                <Radio label='Марс' value='one' size={24} />\n                <Radio label='Юпитер' value='two' size={24} />\n                <Radio label='Меркурий' value='three' size={24} />\n                <Radio label='Сатурн' value='four' size={24} />\n                <Radio label='Нептун' value='five' size={24} />\n            </RadioGroupMobile>\n\n            <Gap size='2xl' />\n\n            <Space direction='horizontal' wrap={true}>\n                <Button size='xxs' onClick={() => setError(false)}>\n                    По умолчанию\n                </Button>\n                <Button size='xxs' onClick={() => setError('Правильный ответ: Марс')}>\n                    Состояние ошибки\n                </Button>\n            </Space>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing PageIndicatorBullet with Less Than Six Elements in React\nDESCRIPTION: Implementation of PageIndicatorBullet with fewer than six elements, showing both 6px and 8px size options. The component adapts its appearance and animation based on the number of elements.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/page-indicator/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const elements = 5;\n    const [activeElement, setActiveElement] = React.useState(0);\n    const handlePrevClick = () => setActiveElement((prev) => Math.max(--prev, 0));\n    const handleNextClick = () => setActiveElement((prev) => Math.min(++prev, elements - 1));\n\n    return (\n        <div>\n            <Container>\n                <PageIndicatorBullet size={8} activeElement={activeElement} elements={elements} />\n                <Gap size={8} />\n                <PageIndicatorBullet size={6} activeElement={activeElement} elements={elements} />\n            </Container>\n            <Row style={{ gap: 'var(--gap-xs)' }}>\n                <Button leftAddons={<ChevronLeftMIcon />} onClick={handlePrevClick} />\n                <Button leftAddons={<ChevronRightMIcon />} onClick={handleNextClick} />\n            </Row>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Adding international-phone-input onClear Call\nDESCRIPTION: This update adds the `onClear` function call to `inputProps` for the `international-phone-input` component. This allows for handling clearing events on the input component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Rendering a Mobile-Only Month Calendar View with React (JSX)\nDESCRIPTION: Provides a live example for rendering the mobile-only month calendar UI using React. Utilizes React's useState hook to manage the currently selected value and customizes the header with inline styles for fixed positioning. The CalendarMonthOnlyViewHeader and CalendarMonthOnlyView components are arranged in a mobile-friendly column, with props such as onChange and showCurrentYearSelector controlling state and visibility. Input includes user interaction, while output is an updated calendar state.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar/src/docs/development.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nrender(() => {\n    const [value, setValue] = React.useState();\n\n    const headerStyle = {\n        top: 0,\n        left: 0,\n        position: 'fixed',\n        boxSizing: 'border-box',\n        zIndex: 2,\n        width: '100%',\n        padding: 'var(--gap-12) var(--gap-24)',\n        background: 'var(--color-light-base-bg-primary)',\n        borderBottom: '1px solid var(--color-light-neutral-500)',\n    };\n\n    return (\n        <>\n            <div style={headerStyle}>\n                <CalendarMonthOnlyViewHeader />\n            </div>\n            <Gap size='m' direction='vertical' />\n            <CalendarMonthOnlyView\n                value={value}\n                onChange={setValue}\n                showCurrentYearSelector={false}\n            />\n        </>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook MDX and Component Story Dependencies in JSX\nDESCRIPTION: Imports necessary Storybook addon-docs modules such as Meta and Markdown for embedding documentation, as well as ComponentHeader and Tabs from storybook/blocks for UI layout. Additionally imports the Portal component stories and markdown-based description, development, and changelog content to be rendered within the documentation page.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/portal/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Changing size L and adding size XL to phone-input\nDESCRIPTION: This commit introduces changes to the sizes of the phone-input component. The size L is changed from 72 to 64, and a new size XL with a height of 72 is added. This change introduces a breaking change, where the size L has been altered and now size XL is introduced\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/phone-input/CHANGELOG.md#_snippet_4\n\nLANGUAGE: other\nCODE:\n```\n13257c5\n```\n\n----------------------------------------\n\nTITLE: Importing CardImage Component in JSX\nDESCRIPTION: This snippet shows the ES6 import statement needed to use the CardImage component from the '@alfalab/core-components/card-image' package within a React project or module. It makes the CardImage component available for use.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/card-image/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CardImage } from '@alfalab/core-components/card-image';\n```\n\n----------------------------------------\n\nTITLE: Updating calendar@6.2.0 and skeleton@4.0.3\nDESCRIPTION: This section details the fix for a default import issue and updates the calendar and skeleton dependencies. The calendar is updated to version 6.2.0 and skeleton to 4.0.3. This is a dependency update.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/CHANGELOG.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n-   Исправлена проблема с default-импортом в cjs форматах\n\n-   Обновлены зависимости\n    -   calendar@6.2.0\n    -   skeleton@4.0.3\n```\n\n----------------------------------------\n\nTITLE: Displaying an Alert Component with Alfalah Core Components in JSX\nDESCRIPTION: This snippet shows a simple Alert component rendered with a message informing the user of approval and prompting consent. It demonstrates usage of Alfalah Core's Alert component to display user notifications. The code requires importing and rendering the Alert component and expects a descriptive string as its child to communicate the alert message.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/alert/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Alert>Вам одобрено. Согласитесь на предложение</Alert>\n```\n\n----------------------------------------\n\nTITLE: Storybook Meta Definition for Theming Documentation\nDESCRIPTION: This snippet defines meta information for Storybook documentation, including the title, parameters to hide the canvas tab, and an identifier. It serves to set up the documentation page for theming instructions in Storybook.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/theming.stories.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n\nimport { ThemingWizard } from 'storybook/theming-wizard';\n\n<Meta\n    title='For users/Темизация'\n    parameters={{ previewTabs: { canvas: { hidden: true } } }}\n    id='Instructions/Theming'\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing DateRangeInput Component with Configurable Props in Storybook\nDESCRIPTION: A Storybook story that demonstrates the DateRangeInput component with configurable properties through knobs. Users can adjust block mode, size, error message, hint text, label, picker visibility, clear button visibility, and default month.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/date-range-input/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Story name='DateRangeInput'>\n    {React.createElement(() => {\n        return (\n            <DateRangeInput\n                block={boolean('block', false)}\n                size={select('size', ['s', 'm', 'l'], 's')}\n                error={text('error', '')}\n                hint={text('hint', '')}\n                label={text('label', '')}\n                picker={boolean('picker', false)}\n                clear={boolean('clear', false)}\n                defaultMonth={number('defaultMonth', undefined)}\n            />\n        );\n    })}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Replacing Select Icons\nDESCRIPTION: Icons loaded from 'alfabank.servicecdn.ru' in the Select component are replaced with icons from icons-glyph.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Tag-based CheckboxGroup Implementation - React\nDESCRIPTION: This snippet demonstrates the use of Tags within a CheckboxGroup in React, using `CheckboxGroupDesktop`.  It utilizes the `type='tag'` property to render the checkboxes as tags.  The code manages state for each tag and includes error handling. This approach is suitable for scenarios where radio button-like behavior is desired with a visually distinct style. Tags are used instead of checkboxes.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/checkbox-group/src/docs/description.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [value, setValue] = React.useState({ one: false, two: false, three: false, four: false });\n    const [error, setError] = React.useState(false);\n\n    const onChange = (_, payload) => {\n        setValue({ ...value, [payload.name]: payload.checked });\n    };\n\n    return (\n        <div style={{ width: '100%' }}>\n            <CheckboxGroupDesktop\n                label='Выберите один или несколько вариантов'\n                onChange={onChange}\n                direction='horizontal'\n                type='tag'\n                hint='Выберите один из вариантов'\n                error={error}\n            >\n                <Tag name='one' checked={value.one}>\n                    Вариант 1\n                </Tag>\n                <Tag name='two' checked={value.two}>\n                    Вариант 2\n                </Tag>\n                <Tag name='three' checked={value.three}>\n                    Вариант 3\n                </Tag>\n                <Tag name='four' checked={value.four}>\n                    Вариант 4\n                </Tag>\n            </CheckboxGroupDesktop>\n\n            <Gap size='2xl' />\n\n            <Space direction='horizontal' wrap={true}>\n                <Button size='xxs' onClick={() => setError(false)}>\n                    По умолчанию\n                </Button>\n                <Button size='xxs' onClick={() => setError('Error message')}>\n                    Состояние ошибки\n                </Button>\n            </Space>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing FileUploadItem from the core-components library\nDESCRIPTION: This snippet shows how to import the FileUploadItem component and its TypeScript type definitions from the '@alfalab/core-components/file-upload-item' package, enabling its usage within a React project with strong typing support.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/file-upload-item/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { FileUploadItem } from '@alfalab/core-components/file-upload-item';\n\nimport { type FileUploadItemProps } from '@alfalab/core-components/file-upload-item';\nimport { type FileUploadItemStatus } from '@alfalab/core-components/file-upload-item';\n```\n\n----------------------------------------\n\nTITLE: Creating a component header with name and description in Storybook\nDESCRIPTION: Displays a header for the component documentation with a specified name and description text, indicating the component's purpose. It uses the 'ComponentHeader' block and provides an accessible label in Russian.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/comment/src/docs/Component.docs.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ComponentHeader name='Comment' children='Используется для отображаения комментариев.' />\n```\n\n----------------------------------------\n\nTITLE: Adding comments to bash\nDESCRIPTION: This commit adds comments to bash scripts. Comments are human-readable explanations added to source code to clarify its functionality. They improve code readability and maintainability.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_152\n\n\n\n----------------------------------------\n\nTITLE: Migrating InputAutocompleteMobile Props in JSX\nDESCRIPTION: Demonstrates the required property changes when migrating the InputAutocompleteMobile component from a previous version. Due to the removal of separate filter state management in the mobile component, props like 'onFilter', 'filter', and 'onClearFilter' are removed. The 'onInput' prop should now handle input changes. Additionally, 'bottomSheetHeaderAddonsProps' is renamed to 'inputProps', and 'transitionProps' (previously nested under 'bottomSheetProps') is now a direct prop.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/input-autocomplete/CHANGELOG.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<InputAutocompleteMobile\n    onFilter={onFilter}\n    filter={filter}\n    value={value}\n    bottomSheetHeaderAddonsProps={{}}\n    bottomSheetProps={{ transitionProps }}\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<InputAutocompleteMobile\n    onInput={onFilter}\n    value={value}\n    inputProps={{}}\n    transitionProps={transitionProps}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing IconButton from core components library\nDESCRIPTION: This snippet shows the import statement needed to include the IconButton component from the core components package, enabling its use within React projects.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/icon-button/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { IconButton } from '@alfalab/core-components/icon-button';\n```\n\n----------------------------------------\n\nTITLE: Generating Test IDs for CalendarMobile Component (JSX Object Structure)\nDESCRIPTION: Shows the structure of the object returned by getCalendarMobileTestIds, a utility from @alfalab/core-components/calendar/shared, which aids in generating data-testid attributes for calendar elements. This pattern ensures reliable selectors for testing mobile calendar components. Key properties include dataTestId-suffixed strings for calendar sections, action buttons, and navigation controls.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n// mobile\n{\n    calendar: dataTestId,\n    content: `${dataTestId}-content`,\n    footer: `${dataTestId}-footer`,\n    header: `${dataTestId}-header`,\n    closer: `${dataTestId}-header-closer`,\n    btnApply: `${dataTestId}-btn-apply`,\n    btnReset: `${dataTestId}-btn-reset`,\n    btnNextDate: `${dataTestId}-slider-btn-next-day`,\n    btnPreviousDate: `${dataTestId}-slider-btn-previous-day`,\n};\n```\n\n----------------------------------------\n\nTITLE: Updating calendar@6.1.13\nDESCRIPTION: This patch change updates the calendar component's version to 6.1.13. This suggests a bug fix or minor update within the calendar component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/CHANGELOG.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n-   Обновлены зависимости\n    -   calendar@6.1.13\n```\n\n----------------------------------------\n\nTITLE: Creating Tabbed Documentation Layout using Tabs JSX\nDESCRIPTION: Employs a custom `Tabs` component to organize documentation content into distinct sections: description, changelog, and development. Each section is passed as a prop (`description`, `changelog`, `development`) containing the content loaded from imported MDX/Markdown files. This structure provides an organized way to present various aspects of the component documentation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/form-control/src/docs/Component.docs.mdx#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing DateTimeInput Component with Storybook Knobs\nDESCRIPTION: This snippet demonstrates how to use the DateTimeInput component from @alfalab/core-components-date-time-input with configurable props using Storybook knobs. The component allows for date and time input with various customizable properties including size, error messages, hints, and labels.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/date-time-input/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Story name='DateTimeInput'>\n    {React.createElement(() => {\n        return (\n            <DateTimeInput\n                block={boolean('block', false)}\n                size={select('size', ['s', 'm', 'l'], 's')}\n                error={text('error', '')}\n                hint={text('hint', '')}\n                label={text('label', '')}\n                picker={boolean('picker', false)}\n                clear={boolean('clear', false)}\n                defaultMonth={number('defaultMonth', undefined)}\n            />\n        );\n    })}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta for Documentation\nDESCRIPTION: This snippet utilizes the '@storybook/addon-docs' Meta component to set up documentation parameters such as title, unique identifier, and interface customization. It defines the visual and organizational aspects of the Storybook documentation page, including hiding the canvas tab.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/supported.browsers.stories.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n\n<Meta\n    title='For users/Поддерживаемые браузеры'\n    parameters={{ previewTabs: { canvas: { hidden: true } } }}\n    id='Instructions/supported_browsers'\n/>\n```\n\n----------------------------------------\n\nTITLE: Replacing Gallery and Input Icons\nDESCRIPTION: Icons loaded from 'alfabank.servicecdn.ru' in the Gallery and Input components are replaced with icons from icons-glyph.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Alfa Interface Sans Font-Face Integration for Custom Typography\nDESCRIPTION: Adds @font-face rules to define the 'Alfa Interface Sans' font in regular (400), medium (500), and bold (700) variants. The sources use WOFF2 format provided via CDN for maximum efficiency. Include these declarations before using 'Alfa Interface Sans' in CSS or typography components. For best legibility, follow up with -webkit-font-smoothing and -moz-osx-font-smoothing CSS properties.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/typography.stories.mdx#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n    font-family: 'Alfa Interface Sans';\n    src: url('https://alfabank.servicecdn.ru/media/fonts/alfa-interface-sans_regular.woff2') format('woff2');\n    font-weight: 400;\n    font-style: normal;\n}\n@font-face {\n    font-family: 'Alfa Interface Sans';\n    src: url('https://alfabank.servicecdn.ru/media/fonts/alfa-interface-sans_medium.woff2') format('woff2');\n    font-weight: 500;\n    font-style: normal;\n}\n@font-face {\n    font-family: 'Alfa Interface Sans';\n    src: url('https://alfabank.servicecdn.ru/media/fonts/alfa-interface-sans_bold.woff2') format('woff2');\n    font-weight: 700;\n    font-style: normal;\n}\n```\n\n----------------------------------------\n\nTITLE: React 18 Support Feature\nDESCRIPTION: Adds React 18 support to the @alfalab/core-components-alert package. This feature ensures compatibility with the new React version, allowing developers to leverage the latest React capabilities within their projects utilizing the alert component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/alert/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n-   react 18 support ([#159](https://github.com/core-ds/core-components/issues/159)) ([2e6693c](https://github.com/core-ds/core-components/commit/2e6693c62f534e333aadb7d3fff4ffd78ac84c63))\n```\n\n----------------------------------------\n\nTITLE: Rendering interactive Underlay component with customizable props\nDESCRIPTION: Renders the Underlay component with fully customizable properties using Storybook knobs, containing multiple child elements as demonstration content.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/underlay/src/docs/Component.stories.mdx#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Underlay\n    borderRadius={borderRadius}\n    borderSize={borderSize}\n    shadow={select('shadow', SHADOW, 'shadow-l', 'underlayProps')}\n    backgroundColor={text(\n        'backgroundColor',\n        'positive-muted',\n        'underlayProps',\n    )}\n    borderColor={select(\n        'borderColor',\n        BORDER_COLOR,\n        'graphic-positive',\n        'underlayProps',\n    )}\n    overflow={overflow}\n    dimensions={{ height, width }}\n    padding={{\n        top: paddingTop,\n        right: paddingRight,\n        bottom: paddingBottom,\n        left: paddingLeft,\n    }}\n    contentProps={contentProps}\n>\n    <ChildElement>Вам одобрено</ChildElement>\n    <ChildElement>Согласитесь на предложение</ChildElement>\n    <ChildElement>Успешно</ChildElement>\n</Underlay>\n```\n\n----------------------------------------\n\nTITLE: Rendering PageIndicatorStep Component in React Storybook\nDESCRIPTION: This React code snippet sets up a Storybook story for the `PageIndicatorStep` component. Using `React.createElement` and Storybook knobs (`select`, `number`), it allows users to dynamically configure properties like `colors`, `activeElement`, `size`, `gap`, and `elements`. The component is rendered inside a styled container (`div`) whose background color adjusts according to the chosen `colors` theme to properly display inverted variants.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/page-indicator/src/docs/Component.stories.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Story name='PageIndicatorStep'>\n    {React.createElement(() => {\n        const colors = select(\n            'colors',\n            ['default', 'inverted', 'static', 'static-inverted'],\n            'default',\n        );\n        return (\n            <div\n                style={{\n                    backgroundColor:\n                        colors === 'inverted'\n                            ? 'var(--color-light-base-bg-primary-inverted)'\n                            : 'transparent',\n                    padding: '8px',\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    right: 0,\n                    bottom: 0,\n                }}\n            >\n                <PageIndicatorStep\n                    activeElement={number('activeElement', 0)}\n                    size={number('size', 4)}\n                    gap={number('gap', 4)}\n                    elements={number('elements', 10)}\n                    colors={colors}\n                />\n            </div>\n        );\n    })}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Implementing PureCell.FooterButton with Customizable Properties in React\nDESCRIPTION: This snippet demonstrates how to use PureCell.FooterButton with various customizable properties including padding, direction, and button styling options. The component includes configurable view, colors, loading state, and addons.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pure-cell/src/docs/Component.stories.mdx#_snippet_10\n\nLANGUAGE: JSX\nCODE:\n```\n<PureCell\n    href={text('href', '')}\n    verticalPadding={verticalPaddingPrepared}\n    horizontalPadding={horizontalPadding}\n    direction={direction}\n>\n    <PureCell.Content>\n        <PureCell.Main>\n            <PureCell.Text titleColor='primary' view='component-primary' rowLimit={1}>\n                Яндекс Лавка\n            </PureCell.Text>\n            <PureCell.Category\n                categoryName={'Кафе, рестораны, столовые, бары'}\n                categoryPercent={10}\n            />\n        </PureCell.Main>\n        <PureCell.Footer footerPadding={footerPadding}>\n            <PureCell.FooterButton\n                view={select('view', VIEWS, 'primary')}\n                colors={colors}\n                href={text('href', '')}\n                loading={boolean('loading')}\n                disabled={boolean('disabled', false)}\n                block={boolean('block', false)}\n                nowrap={boolean('nowrap', false)}\n                leftAddons={boolean('leftAddons', false) && <StarMIcon />}\n                rightAddons={boolean('rightAddons', false) && <StarMIcon />}\n            >\n                Button\n            </PureCell.FooterButton>\n        </PureCell.Footer>\n    </PureCell.Content>\n</PureCell>\n```\n\n----------------------------------------\n\nTITLE: Importing PasswordInput Component in React\nDESCRIPTION: This code snippet demonstrates how to import the PasswordInput component from the @alfalab/core-components library into a React application.  This import statement is necessary to use the PasswordInput component in JSX code.  Make sure that @alfalab/core-components is installed as a project dependency.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/password-input/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PasswordInput } from '@alfalab/core-components/password-input';\n```\n\n----------------------------------------\n\nTITLE: Rendering Radio Components with States in React\nDESCRIPTION: This snippet showcases different states of the Radio component: checked, disabled, and their combinations. It renders Radio components with different labels and attributes (checked, disabled, block) to represent these states visually. The main functionality involves rendering the radio buttons with the specified props to demonstrate their visual representation in each state.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/radio/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    return (\n        <div style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}>\n            <Radio size={24} label='Выбрана' checked={true} block={true} />\n            <Gap size='20' />\n            <Radio\n                size={24}\n                label='Выбрана и недоступна'\n                disabled={true}\n                checked={true}\n                block={true}\n            />\n            <Gap size='20' />\n            <Radio size={24} label='По умолчанию' block={true} />\n            <Gap size='20' />\n            <Radio size={24} label='По умолчанию и недоступна' disabled={true} block={true} />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storybook Meta Configuration for DateTimeInput\nDESCRIPTION: This snippet shows how to configure the Storybook metadata for the DateTimeInput component. It sets the component title in the Storybook navigation as 'Deprecated components/DateTimeInput' and associates the component with the DateTimeInput implementation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/date-time-input/src/docs/Component.stories.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta title='Deprecated components/DateTimeInput' component={DateTimeInput} id='DateTimeInput' />\n```\n\n----------------------------------------\n\nTITLE: Fixing border-radius in packages\nDESCRIPTION: This commit addresses an issue with the border-radius in several packages.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/phone-input/CHANGELOG.md#_snippet_6\n\nLANGUAGE: other\nCODE:\n```\n781749e\n```\n\n----------------------------------------\n\nTITLE: Updating calendar@6.1.15\nDESCRIPTION: This patch change updates the calendar component's version to 6.1.15. This indicates a bug fix or a minor feature enhancement within the calendar component. It is a dependency update.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/CHANGELOG.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n-   Обновлены зависимости\n    -   calendar@6.1.15\n```\n\n----------------------------------------\n\nTITLE: Rendering Component Header using ComponentHeader JSX\nDESCRIPTION: Utilizes a custom `ComponentHeader` component to display the name and a brief description of the `FormControl` component. The `name` prop sets the component title, and the `children` prop contains a short explanatory text (in Russian in this case). This provides a visual introduction to the documented component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/form-control/src/docs/Component.docs.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<ComponentHeader\n    name='FormControl'\n    children='Базовый компонент для построения полей ввода. Не может быть использован в чистом виде.'\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Tag Components in React (@alfalab/core-components)\nDESCRIPTION: Shows how to import the responsive Tag component (from the index) and its platform-specific variants (TagDesktop, TagMobile) from the @alfalab/core-components/tag package for use in React applications. The responsive version is typically imported from the main package entry point.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tag/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tag } from '@alfalab/core-components/tag';\nimport { TagDesktop } from '@alfalab/core-components/tag/desktop';\nimport { TagMobile } from '@alfalab/core-components/tag/mobile';\n```\n\n----------------------------------------\n\nTITLE: Defining dataTestId Modifiers for NumberInput in React\nDESCRIPTION: This code snippet outlines the structure returned by the `getNumberInputTestIds` function, used for applying `dataTestId` modifiers to the `NumberInput` component. The object returned by the function contains various keys corresponding to different parts of the component.  This structure facilitates selecting individual elements for testing purposes. It depends on the `@alfalab/core-components/number-input/shared` import.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/number-input/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    input: dataTestId,\n    inputWrapper: `${dataTestId}-form-control`,\n    inputWrapperInner: `${dataTestId}-form-control-inner`,\n    leftAddons: `${dataTestId}-form-control-left-addons`,\n    rightAddons: `${dataTestId}-form-control-right-addons`,\n    error: `${dataTestId}-form-control-error-message`,\n    hint: `${dataTestId}-form-control-hint`,\n    decrementButton: `${dataTestId}-decrement-button`,\n    incrementButton: `${dataTestId}-increment-button`\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Metadata and Parameters\nDESCRIPTION: This snippet sets up the metadata for a Storybook documentation page. It defines the title and hides the canvas tab in the preview, useful for documentation without interactive previews.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/screenshots.stories.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n\n<Meta\n    title='For contributors/Скриншотное тестирование'\n    parameters={{ previewTabs: { canvas: { hidden: true } } }}\n    id='Instructions/Screenshot-testing'\n/>\n```\n\n----------------------------------------\n\nTITLE: Fix label and margin styles in form controls\nDESCRIPTION: Corrects CSS margins and positioning for labels and hints in form control components to enhance visual consistency and layout.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_62\n\nLANGUAGE: CSS\nCODE:\n```\n/* CSS adjustments for label and hint margins in form controls */\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag-based Radio Group in React\nDESCRIPTION: Example of implementing a radio group using Tag components instead of traditional radio buttons. Demonstrates horizontal layout with wrapping for both desktop and mobile variants.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/radio-group/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [value, setValue] = React.useState('one');\n    const [error, setError] = React.useState(false);\n\n    const onChange = (_, payload) => {\n        setValue(payload.value);\n    };\n\n    return (\n        <div style={{ width: '100%' }}>\n            <RadioGroupDesktop\n                label='Выберите один из вариантов'\n                onChange={onChange}\n                direction='horizontal'\n                type='tag'\n                hint='Выберите один из вариантов'\n                error={error}\n                value={value}\n                name='radioGroupTag'\n            >\n                <Tag value='one'>Вариант 1</Tag>\n                <Tag value='two'>Вариант 2</Tag>\n                <Tag value='three'>Вариант 3</Tag>\n                <Tag value='four'>Вариант 4</Tag>\n            </RadioGroupDesktop>\n\n            <Gap size='2xl' />\n\n            <Space direction='horizontal' wrap={true}>\n                <Button size='xxs' onClick={() => setError(false)}>\n                    По умолчанию\n                </Button>\n                <Button size='xxs' onClick={() => setError('Error message')}>\n                    Состояние ошибки\n                </Button>\n            </Space>\n        </div>\n    );\n});\n//MOBILE\nrender(() => {\n    const [value, setValue] = React.useState('one');\n    const [error, setError] = React.useState(false);\n\n    const onChange = (_, payload) => {\n        setValue(payload.value);\n    };\n\n    return (\n        <div style={{ width: '100%' }}>\n            <RadioGroupMobile\n                label='Выберите один из вариантов'\n                onChange={onChange}\n                direction='horizontal'\n                type='tag'\n                hint='Выберите один из вариантов'\n                error={error}\n                value={value}\n                name='radioGroupTag'\n            >\n                <Tag value='one'>Вариант 1</Tag>\n                <Tag value='two'>Вариант 2</Tag>\n                <Tag value='three'>Вариант 3</Tag>\n                <Tag value='four'>Вариант 4</Tag>\n            </RadioGroupMobile>\n\n            <Gap size='2xl' />\n\n            <Space direction='horizontal' wrap={true}>\n                <Button size='xxs' onClick={() => setError(false)}>\n                    По умолчанию\n                </Button>\n                <Button size='xxs' onClick={() => setError('Error message')}>\n                    Состояние ошибки\n                </Button>\n            </Space>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation Tabs - JavaScript\nDESCRIPTION: This snippet creates tabs for the component's documentation using the `<Tabs>` component. It assigns the `description`, `changelog`, and `development` props with corresponding content. The `description` prop uses the `Description` component, `changelog` uses a Markdown component to render the `Changelog`, and the `development` uses the `Development` component. These tabs organize different aspects of the component documentation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/chart/src/docs/Component.docs.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Collapsed Tag List to Select with Tags\nDESCRIPTION: This adds functionality to the `select-with-tags` component to collapse the tag list. This is useful when a select has many tags, allowing them to be hidden until the user interacts with the control. This improves the usability and display of the component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_88\n\n\n\n----------------------------------------\n\nTITLE: Rendering Components Overview Component - MDX\nDESCRIPTION: Renders the `ComponentsOverview` React component. This component is expected to contain the actual content for the 'Components overview' page, such as lists of components, descriptions, or examples. It leverages the logic defined within the `ComponentsOverview` component file.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/components.overview.stories.mdx#_snippet_2\n\nLANGUAGE: MDX\nCODE:\n```\n<ComponentsOverview />\n```\n\n----------------------------------------\n\nTITLE: Fixing Checkbox and FormControl Bugs in IE 11\nDESCRIPTION: Fixes errors in the Checkbox and FormControl components in IE 11.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_29\n\n\n\n----------------------------------------\n\nTITLE: Importing Calendar Components and Dependencies in React\nDESCRIPTION: Imports necessary components and utilities for the Calendar documentation, including Storybook addons, Calendar components (desktop and mobile versions), and utility functions.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Story, Markdown } from '@storybook/addon-docs';\nimport { select, boolean } from '@storybook/addon-knobs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport { Button } from '@alfalab/core-components-button';\nimport { CalendarDesktop as Calendar } from '@alfalab/core-components-calendar/desktop';\nimport { usePeriod } from '@alfalab/core-components-calendar/shared';\nimport { CalendarMobile } from '@alfalab/core-components-calendar/mobile';\n\nimport Changelog from '../../CHANGELOG.md?raw';\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport {\n    getQueryParam,\n    stylesStringToObj,\n} from '../../../screenshot-utils/screenshots-story/utils';\n```\n\n----------------------------------------\n\nTITLE: Showing error icon and arrow in Select component\nDESCRIPTION: Modifies the Select component to display both an error icon and an arrow indicator simultaneously, improving visual feedback for validation states. Depends on React and icon libraries.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_118\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-select visual modifications\n```\n\n----------------------------------------\n\nTITLE: Importing Toast Plate Components for Desktop, Mobile, and Responsive Versions in JavaScript/JSX\nDESCRIPTION: This code imports the main toast plate component along with its mobile and desktop variants from the package '@alfalab/core-components'. It also imports styling variables using raw-loader. The imports set up the necessary components for use in different device contexts and styles. Dependencies include the component library and styling loader.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/toast-plate/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: JavaScript/JSX\nCODE:\n```\nimport { ToastPlate } from '@alfalab/core-components/toast-plate';\nimport { ToastPlateMobile } from '@alfalab/core-components/toast-plate/mobile';\nimport { ToastPlateDesktop } from '@alfalab/core-components/toast-plate/desktop';\n```\n\n----------------------------------------\n\nTITLE: Removing date validation from date-input - JavaScript\nDESCRIPTION: This feature removes date validation from the date-input component. This potentially increases the flexibility of the input, but might require consumers to implement their own validation logic to ensure data integrity. By removing date validation, the date input allows any input and the validation is moved elsewhere.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-range/CHANGELOG.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n### Features\n\n-   **date-input:** removed date validation ([#69](https://github.com/core-ds/core-components/issues/69)) ([ca56ec9](https://github.com/core-ds/core-components/commit/ca56ec97db0d966233bd4312fdddabd59ed427ae))\n```\n\n----------------------------------------\n\nTITLE: Adding Tag component with click theming\nDESCRIPTION: Creates a Tag component with support for click-based themes, allowing for interactive and styled tags. Relies on React and styling systems for theme variants.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_127\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-tag implementation\n```\n\n----------------------------------------\n\nTITLE: Rendering Standard DateTimeInput Component in JSX\nDESCRIPTION: This snippet demonstrates the basic implementation of the DateTimeInput component with a standard date and time input field using mask format DD.MM.YYYY, HH:MM. The component includes a label, placeholder, block attribute and medium size.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/date-time-input/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(\n    <div style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}>\n        <DateTimeInput label='Дата и время' placeholder='ДД.ММ.ГГГГ, ЧЧ:ММ' block size='m' />\n    </div>,\n);\n```\n\n----------------------------------------\n\nTITLE: Setting up Documentation Tabs in Storybook (JSX)\nDESCRIPTION: Renders a ComponentHeader with the component name ('PickerButton') and a brief description using custom Storybook blocks. It then uses the Tabs component to organize documentation content, dynamically loading Description, Development, and Changelog content from imported MDX and Markdown files.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/picker-button/src/docs/Component.stories.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentHeader\n    name='PickerButton'\n    children='Кнопка используется для скрытия редких или одинаковых по контексту действий.'\n/>\n\n<Tabs\n    description={<Description />}\n    development={<Development />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding dividers between blocks with Space component in JSX\nDESCRIPTION: Shows how to use the Space component with dividers between elements. The example places Divider components between four blocks, with alignment that responds to the device type.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/space/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const styleBlock = {\n        width: '64px',\n        height: '64px',\n        borderRadius: '8px',\n        backgroundColor: 'var(--color-light-neutral-translucent-200)',\n    };\n    return (\n        <Space useCssGaps={true} divider={<Divider />} align={isMobile() ? 'center' : 'start'}>\n            {new Array(4).fill(null).map((_, idx) => (\n                <div key={idx} style={styleBlock} />\n            ))}\n        </Space>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Popover class for Tooltip UI\nDESCRIPTION: Enhances the popover element associated with tooltip components by adding custom class names for styling purposes. This class allows styling adjustments in CSS for tooltip positioning, appearance, or animation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_111\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-popover class addition\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Histogram with Customizable Bars in JSX\nDESCRIPTION: This example shows how to implement a horizontal histogram with customizable bars including rounded corners. It demonstrates how to configure axis properties, data formatting, and styling for a clear visualization of categorical data.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/chart/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const composeChart = {\n        barCategoryGap: '5%',\n    };\n    const xAxis = {\n        axisLine: false,\n        type: 'category',\n        interval: 'preserveStartEnd',\n        tickLine: false,\n        tickMargin: 10,\n        dataKey: 'label',\n    };\n    const yAxis = {\n        hide: true,\n    };\n    const labelsBarChart = [\n        'Long label',\n        'Label1',\n        'Label2',\n        'Label3',\n        'Label4',\n        'Label5',\n        'Label6',\n        'Label7',\n    ];\n    const barChart = {\n        chart: 'bar',\n        radius: { top: 10, bottom: 10, } || 0,\n        labelList: {\n            offset: 10,\n        },\n        properties: {\n            name: 'приход',\n            dataKey: 'cm',\n            formatter: (decimal) => `${decimal * 1000}`,\n            fill: 'var(--color-static-graphic-green-jungle)',\n        },\n        data: [\n            {\n                label: 'Long label',\n                value: 5000,\n            },\n            {\n                label: 'Label1',\n                value: 650,\n            },\n            {\n                label: 'Label2',\n                value: 3522,\n            },\n            {\n                label: 'Label3',\n                value: 0,\n            },\n            {\n                label: 'Label4',\n                value: 2000,\n            },\n            {\n                label: 'Label5',\n                value: 1043,\n            },\n            {\n                label: 'Label6',\n                value: 600,\n            },\n            {\n                label: 'Label7',\n                value: 1,\n            },\n        ],\n    };\n        \n    return (\n        <div style={{ display: 'flex' }}>\n           <div style={{ width: '600px', height: '400px' }}>\n                    <Chart\n                        id='bar-chart'\n                        composeChart={composeChart}\n                        xAxis={xAxis}\n                        yAxis={yAxis}\n                        labels={labelsBarChart}\n                        series={[barChart]}\n                    />\n            </div>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Metadata for InternationalPhoneInput\nDESCRIPTION: This snippet imports necessary modules from Storybook Addon Docs and defines the component's metadata. It sets the title, uses a ComponentHeader to display the component's name with a descriptive children property and utilizes the Tabs component to organize descriptions, changelog, and development related content. Dependencies include Storybook's addon-docs, and the ComponentHeader and Tabs components. The output is a formatted Storybook documentation page for the InternationalPhoneInput component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/international-phone-input/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta of={Stories} title='Components/InternationalPhoneInput' />\n\n<ComponentHeader\n    name='InternationalPhoneInput'\n    children='Используется для ввода телефонного номера в международном формате.'\n/>\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Structure of SortableList Test IDs Object (JSX)\nDESCRIPTION: Shows the structure of the object returned by the getSortableListTestIds helper function. This object provides standardized dataTestId values for the sortable list container and individual items, useful for testing and automation. The IDs are derived from a base dataTestId and the item's index.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/sortable-list/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n{\n    sortableList: `${dataTestId}-container`, \n    item: `${dataTestId}-item_${index}`,\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta Information (JavaScript)\nDESCRIPTION: Defines metadata for the Storybook documentation page by associating the imported stories component. Enables Storybook to recognize and organize the documentation page for the component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/gap/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Meta of={Stories} />\n```\n\n----------------------------------------\n\nTITLE: Fixing sborka bug\nDESCRIPTION: This commit fixes one more sborka bug, resolving issue #579.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/phone-input/CHANGELOG.md#_snippet_5\n\nLANGUAGE: other\nCODE:\n```\n9fbe0be\n```\n\n----------------------------------------\n\nTITLE: Importing Chart Component from core-components package\nDESCRIPTION: This snippet demonstrates importing the Chart component from the '@alfalab/core-components/chart' package using JSX syntax. It is used to include the Chart component into React applications for rendering various types of charts.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/chart/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Chart } from '@alfalab/core-components/chart';\n```\n\n----------------------------------------\n\nTITLE: Adding dataTestId to Select component\nDESCRIPTION: Enhances the Select component by adding a dataTestId attribute for easier testing automation. Depends on React, with the attribute passed as a prop, enabling QA and testing scripts to identify elements reliably.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_115\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-select with dataTestId implementation\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Tabs\nDESCRIPTION: This code creates tabs to organize different sections of the component's documentation using the `Tabs` component.  It renders a description from './description.mdx', a changelog from '../../CHANGELOG.md?raw' formatted with Markdown, and a development section from './development.mdx'.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/loader/src/docs/Component.docs.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Grouping related form fields with fieldset and aria roles\nDESCRIPTION: This example shows how to group related form inputs using `<fieldset>` and `<legend>`, or ARIA attributes like `role=\"group\"` and `aria-labelledby`, to enhance form structure for assistive technologies.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/forms.stories.mdx#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<fieldset>\n    <legend>Контакты</legend>\n    <label for=\"input-mail\" id=\"label-mail\">Электронная почта</label>\n    <input type=\"email\" id=\"input-mail\" aria-labelledby=\"label-mail\" />\n\n    <label for=\"input-phone\" id=\"label-phone\">Телефон</label>\n    <input type=\"email\" id=\"input-phone\" aria-labelledby=\"label-phone\" />\n</fieldset>\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Bumping Packages Version - JavaScript\nDESCRIPTION: This bug fix addresses an issue by bumping the packages version. Bumping package versions typically resolves dependency conflicts or incorporates the latest updates from dependent packages. Updating versions can fix bugs, improve stability, and enhance compatibility within the project.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-range/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n### Bug Fixes\n\n-   bump packages version ([#153](https://github.com/core-ds/core-components/issues/153)) ([fd3e082](https://github.com/core-ds/core-components/commit/fd3e08205672129cdce04e1000c673f2cd9c10da))\n```\n\n----------------------------------------\n\nTITLE: Updating calendar@6.2.4\nDESCRIPTION: This patch change updates the calendar component's version to 6.2.4. This signifies a bug fix or minor feature update in the calendar component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/CHANGELOG.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n-   Обновлены зависимости\n    -   calendar@6.2.4\n```\n\n----------------------------------------\n\nTITLE: Adding New Sizes for SuperEllipse and Circle Components\nDESCRIPTION: Adds a new size (24px) for the SuperEllipse component and new sizes (24px and 128px) for the Circle component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_30\n\n\n\n----------------------------------------\n\nTITLE: Customizing Badge Icons in ToastPlate with User-Defined Icons\nDESCRIPTION: This snippet illustrates the customization of badge icons within the ToastPlate component by providing a 'getBadgeIcons' mapping. It assigns a custom icon component to a badge identifier, allowing for flexible visual customization. It maintains the same layout and properties as the basic render, with an added prop for icon overrides. Dependencies imply the presence of icon components such as AScoresCircleMIcon.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/toast-plate/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nrender(() => {\n    const isMobile = document.body.clientWidth < 450;\n\n    const customIcons = {\n        'positive-checkmark': {\n            24: AScoresCircleMIcon,\n        },\n    };\n\n    return (\n        <ToastPlate\n            badge='positive-checkmark'\n            title='Поздравляем, полный успех'\n            hasCloser={true}\n            block={true}\n            bottomButtonPosition={isMobile}\n            onClose={Function.prototype}\n            actionButton={\n                <Button colors='inverted' view='ghost' size={isMobile ? 'xs' : 's'}>\n                    Восстановить\n                </Button>\n            }\n            getBadgeIcons={customIcons}\n        />\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Tag UI Component in JavaScript\nDESCRIPTION: This code introduces a Tag component used for categorization or labeling within the UI. It depends on React and CSS modules, providing a styled, reusable element for display purposes.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2021.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Tag component implementation\nimport styles from './tag.module.css';\n\nfunction Tag({ label, color }) {\n  return <span className={`${styles.tag} ${styles[color]}`}>{label}</span>;\n}\n\nexport default Tag;\n```\n\n----------------------------------------\n\nTITLE: Rendering Mobile Modal Components - React\nDESCRIPTION: This React snippet renders the modal and its components specifically designed for mobile. It manages the `open` state for modal visibility, uses `Header`, `ModalMobile.Content`, and `ModalMobile.Footer` components. It includes a button that triggers the modal to appear and has different styles for mobile version. This example demonstrates the integration of the Header component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/modal/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [open, setOpen] = React.useState(false);\n    const handleOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n\n    const commonStyle = {\n        width: '100%',\n        borderRadius: '8px',\n        backgroundColor: 'rgba(55, 120, 251, 0.1)',\n        border: '1px dashed rgb(55, 120, 251)',\n        boxSizing: 'border-box',\n    };\n\n    const contentStyle = {\n        ...commonStyle,\n        height: '100%',\n    };\n\n    const footerStyle = {\n        ...commonStyle,\n        height: '48px',\n    };\n\n    return (\n        <Container>\n            <Button type='button' size='xs' onClick={handleOpen}>\n                Показать анатомию\n            </Button>\n            <ModalMobile open={open} onClose={handleClose} size={600}>\n                <Header />\n                <ModalMobile.Content flex={true}>\n                    <div style={contentStyle}></div>\n                </ModalMobile.Content>\n                <ModalMobile.Footer>\n                    <div style={footerStyle}></div>\n                </ModalMobile.Footer>\n            </ModalMobile>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating horizontal spacing between blocks with Space component in JSX\nDESCRIPTION: Demonstrates how to use the Space component to create fixed horizontal spacing between blocks. The component arranges three identical blocks with automatic responsive alignment based on mobile detection.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/space/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const styleBlock = {\n        width: '64px',\n        height: '64px',\n        borderRadius: '8px',\n        backgroundColor: 'var(--color-light-neutral-translucent-200)',\n    };\n    return (\n        <Space useCssGaps={true} direction='horizontal' align={isMobile() ? 'center' : 'start'}>\n            {new Array(3).fill(null).map((_, idx) => (\n                <div key={idx} style={styleBlock} />\n            ))}\n        </Space>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining SidePanel Header (Mobile) React JSX\nDESCRIPTION: Defines a custom Header component specifically for the Mobile SidePanel. It follows the same pattern as the Desktop header, using `ModalContext` for state management (`setHasHeader`) and panel closing (`onClose`). Placeholder styles are applied via CSS-in-JS objects, structuring the header with placeholder elements, but notably uses a different CSS variable (`--side-panel-header-mobile-paddings`) for margin compared to the desktop version.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/side-panel/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst Header = () => {\n    const { setHasHeader, onClose } = React.useContext(ModalContext);\n\n    React.useEffect(() => setHasHeader(true), [setHasHeader]);\n\n    const commonStyles = {\n        backgroundColor: 'rgba(55, 120, 251, 0.1)',\n        border: '1px dashed rgb(55, 120, 251)',\n        boxSizing: 'border-box',\n        borderRadius: '8px',\n        height: '48px',\n    };\n\n    const addonsStyles = {\n        ...commonStyles,\n        width: '48px',\n    };\n\n    const innerAddonsStyles = {\n        ...addonsStyles,\n        backgroundColor: 'rgba(207, 112, 255, 0.1)',\n    };\n\n    const bottomAddonsStyles = {\n        ...commonStyles,\n        width: '100%',\n    };\n\n    const wrapperStyles = {\n        display: 'flex',\n        justifyContent: 'center',\n    };\n\n    const titleStyles = {\n        ...commonStyles,\n        flexGrow: 1;\n    };\n\n    return (\n        <div style={{ margin: 'var(--side-panel-header-mobile-paddings)' }}>\n            <div style={wrapperStyles}>\n                <div style={innerAddonsStyles} />\n                <div style={addonsStyles} />\n                <div style={titleStyles} />\n                <div style={addonsStyles} />\n                <div style={innerAddonsStyles} onClick={onClose} />\n            </div>\n            <div style={bottomAddonsStyles} />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining BottomSheet Storybook Page Layout using JSX\nDESCRIPTION: This JSX code defines the structure of the Storybook documentation page for the 'BottomSheet' component. It imports necessary Storybook modules and content files (MDX, Markdown). It uses the `Meta` component to link to the component's stories (`Stories`), `ComponentHeader` to display the title and a brief description, and `Tabs` to organize content sections (Description, Changelog, Development) loaded from external files.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/bottom-sheet/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta of={Stories} />\n\n<ComponentHeader\n    name='BottomSheet'\n    children='Используется для отображения контента в модальном слое.'\n/>\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding React 18 Support - JavaScript\nDESCRIPTION: This feature adds support for React 18. This involves updating dependencies, modifying components to be compatible with React 18's new features and changes, and ensuring that the components work as expected in a React 18 environment. React 18 support likely allows the component library to leverage new React features and performance improvements.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-range/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n### Features\n\n-   react 18 support ([#159](https://github.com/core-ds/core-components/issues/159)) ([2e6693c](https://github.com/core-ds/core-components/commit/2e6693c62f534e333aadb7d3fff4ffd78ac84c63))\n```\n\n----------------------------------------\n\nTITLE: Adding a Border to a Component in React\nDESCRIPTION: This React snippet demonstrates adding a border to a `SuperEllipse` component and controlling its visibility using a switch component.  The border color is set using a CSS variable.  Dependencies include React, `SuperEllipse`, `DiamondsMIcon`, `Container`, `Row`, and `Switch` components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/icon-view/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [border, setBorder] = React.useState(false);\n    return (\n        <Container>\n            <Row>\n                <Col>\n                    <SuperEllipse\n                        size='80'\n                        mainSize={64}\n                        backgroundColor='var(--color-light-base-bg-secondary)'\n                        border={border && { color: 'var(--color-light-neutral-400)' }}\n                    >\n                        <DiamondsMIcon />\n                    </SuperEllipse>\n                </Col>\n            </Row>\n            <Row>\n                <Switch\n                    block={true}\n                    checked={border}\n                    label='Обводка'\n                    onChange={() => setBorder(!border)}\n                />\n            </Row>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rounded Shape for Status Component (React)\nDESCRIPTION: This snippet showcases the `Status` component with and without the `shape='rounded'` prop. The `shape` prop modifies the appearance of the component. It also demonstrates the `uppercase` prop set to false. It uses `Container` and a flexbox for layout.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/status/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Container>\n    <div style={{ display: 'flex' }}>\n        <Status size='40' uppercase={false}>\n            Всё в порядке\n        </Status>\n        <Gap size='12' direction='horizontal' />\n        <Status size='40' uppercase={false} shape='rounded'>\n            Всё в порядке\n        </Status>\n    </div>\n</Container>\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Shapes\nDESCRIPTION: This snippet renders a button with a dynamically changing shape (rectangular or rounded). It uses a RadioGroup component to control the shape of the button. The `shape` state is managed using `React.useState` and updated based on radio button selection.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/button/src/docs/description.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [shape, setShape] = React.useState('rectangular');\n\n    return (\n        <>\n            <Button shape={shape} view='primary' breakpoint={BREAKPOINT}>\n                Label\n            </Button>\n\n            <Gap size='xl' />\n\n            <RadioGroup\n                label='Shape'\n                value={shape}\n                onChange={(_, { value }) => setShape(value)}\n                breakpoint={BREAKPOINT}\n            >\n                <Radio value='rectangular' label='Rectangular' />\n                <Radio value='rounded' label='Rounded' />\n            </RadioGroup>\n        </>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Updating calendar@6.2.2\nDESCRIPTION: This patch change updates the calendar component's version to 6.2.2. This indicates a bug fix or a minor feature enhancement within the calendar component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/CHANGELOG.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n-   Обновлены зависимости\n    -   calendar@6.2.2\n```\n\n----------------------------------------\n\nTITLE: Updating calendar@6.2.1\nDESCRIPTION: This patch change updates the calendar component's version to 6.2.1. This indicates a bug fix or a minor feature enhancement within the calendar component. This is a dependency update.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/CHANGELOG.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n-   Обновлены зависимости\n    -   calendar@6.2.1\n```\n\n----------------------------------------\n\nTITLE: Fix caret jumps in phone input\nDESCRIPTION: Corrects cursor positioning issues in the intl-phone-input component during user input, ensuring smooth user experience with numeric and formatted phone numbers. Relies on input event handling and caret management.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_56\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Caret position correction logic in intl-phone-input component */\n```\n\n----------------------------------------\n\nTITLE: Hiding Native Spinner\nDESCRIPTION: Hides the native spinner (arrows) for the Input component when type='number'.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_34\n\n\n\n----------------------------------------\n\nTITLE: Adding new default input\nDESCRIPTION: This commit adds a new default input component. The new input has an updated appearance and functionalities.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_194\n\n\n\n----------------------------------------\n\nTITLE: Adding react 18 support\nDESCRIPTION: This commit introduces support for React 18. This likely involves updating dependencies and ensuring compatibility with React 18 APIs.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/input-autocomplete/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nreact 18 support ([#159](https://github.com/core-ds/core-components/issues/159)) ([2e6693c](https://github.com/core-ds/core-components/commit/2e6693c62f534e333aadb7d3fff4ffd78ac84c63))\n```\n\n----------------------------------------\n\nTITLE: Rendering deprecation notice with Alfafab Plate and Link components in JSX\nDESCRIPTION: This snippet renders a deprecation warning inside a Plate component from Alfafab core-components, informing users that the current component is deprecated and directing them to the UniversalDateInput component via a Link. It sets Plate properties such as view, limitContentWidth, title (including a nested Link), and titleView. It requires @alfalab/core-components/plate and @alfalab/core-components/link packages. The message is primarily informational with internal JSX content to format the message and link.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/time-input/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Plate } from '@alfalab/core-components/plate';\nimport { Link } from '@alfalab/core-components/link';\n\n<Plate\n    view='attention'\n    limitContentWidth={false}\n    title={\n        <>\n            Компонент больше не поддерживается, переходитесь на новый компонент {''}\n            <Link href='https://core-ds.github.io/core-components/master/?path=/docs/universaldateinput--docs'>\n                UniversalDateInput.\n            </Link>\n        </>\n    }\n    titleView='light'\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Component Documentation Header and Tabs\nDESCRIPTION: This snippet demonstrates how to create a component header with a description and organize documentation into tabs. It includes tabs for component description, changelog, and development guidelines for the DateTimeInput component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/date-time-input/src/docs/Component.stories.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<ComponentHeader name='DateTimeInput' children='Поле для указания диапазона даты и времени.' />\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Tooltip Components\nDESCRIPTION: This snippet demonstrates how to import the Tooltip component and its specific versions (Desktop and Mobile) from the @alfalab/core-components library. It shows the import statements for using these components in a React application. The desktop and mobile versions are located in their respective subdirectories.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tooltip/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Респонсив версия\nimport { Tooltip } from '@alfalab/core-components/tooltip';\n\n// Десктоп версия\nimport { TooltipDesktop } from '@alfalab/core-components/tooltip/desktop';\n\n// Мобильная версия\nimport { TooltipMobile } from '@alfalab/core-components/tooltip/mobile';\n```\n\n----------------------------------------\n\nTITLE: Setting story metadata with Meta component\nDESCRIPTION: Defines metadata for the component stories, linking the stories object for automatic story extraction and documentation rendering within Storybook. This setup enables the integration of stories with the docs page.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/comment/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Meta of={Stories} />\n```\n\n----------------------------------------\n\nTITLE: Updating calendar@6.1.7\nDESCRIPTION: This patch change updates the calendar component's version to 6.1.7. This suggests a bug fix or a minor update within the calendar component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/CHANGELOG.md#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n-   Обновлены зависимости\n    -   calendar@6.1.7\n```\n\n----------------------------------------\n\nTITLE: Rendering Indicator Component - Mobile\nDESCRIPTION: This snippet renders multiple instances of an Indicator component within a flex container.  The `styles` object defines the layout properties, including display, justification, gap, width, padding, background color, border radius, box sizing and alignment. The  `Indicator`  component's height is set in pixels. It is a demonstration for the mobile view. It is nearly identical to the desktop version, but with different `width` and `gap` values to better fit a mobile screen.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/indicator/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst styles = {\n    display: 'flex',\n    justifyContent: 'center',\n    gap: '12px',\n    width: '100%',\n    padding: 20,\n    backgroundColor: 'var(--color-light-base-bg-secondary)',\n    borderRadius: '12px',\n    boxSizing: 'border-box',\n    alignItems: 'center',\n};\n\nrender(\n    <Container>\n        <div style={styles}>\n            <Indicator height={48} value={1} view='red' />\n            <Indicator height={40} value={1} view='red' />\n            <Indicator height={32} value={1} view='red' />\n            <Indicator height={24} value={1} view='red' />\n            <Indicator height={20} value={1} view='red' />\n            <Indicator height={16} value={1} view='red' />\n            <Indicator view='red' />\n        </div>\n    </Container>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing BaseModal Component in JSX\nDESCRIPTION: This code snippet demonstrates how to import the BaseModal component from the @alfalab/core-components library within a JSX file. This allows you to use the BaseModal component in your React application.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/base-modal/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BaseModal } from '@alfalab/core-components/base-modal';\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Slider Demo in React Storybook\nDESCRIPTION: Sets up a React component within a Storybook story that manages the Slider's value using React useState hook. Uses knobs to allow dynamic adjustment of Slider props during story interaction and demonstrates real-time updates.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/slider/src/docs/Component.stories.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Story name='Slider'>\n    {React.createElement(() => {\n        const [value, setValue] = React.useState(50);\n        const handleChange = ({ value }) => setValue(value);\n        return (\n            <Slider\n                value={value}\n                valueTo={number('valueTo', 0)}\n                onChange={handleChange}\n                min={number('min', 0)}\n                max={number('max', 100)}\n                step={number('step', 1)}\n                size={select('size', [2, 4], 2)}\n                behaviour={select('behaviour', ['unconstrained-tap', 'tap'], 'tap')}\n            />\n        );\n    })}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Defining new border radius variables in CSS\nDESCRIPTION: This patch adds multiple new CSS custom properties for border-radius values, providing developers with more granular control over rounded element styles. It also marks some older variables as deprecated to encourage migration to newer naming conventions.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_37\n\nLANGUAGE: CSS\nCODE:\n```\n:root {\n  --border-radius-0: 0px;\n  --border-radius-4: 4px;\n  --border-radius-6: 6px;\n  --border-radius-8: 8px;\n  --border-radius-10: 10px;\n  --border-radius-12: 12px;\n  --border-radius-16: 16px;\n  --border-radius-20: 20px;\n  --border-radius-24: 24px;\n  --border-radius-36: 36px;\n  /* Deprecated variables */\n  --border-radius-xs: 2px; /* deprecated */\n  --border-radius-s: 4px; /* deprecated */\n  --border-radius-m: 8px; /* deprecated */\n  --border-radius-l: 12px; /* deprecated */\n  --border-radius-xl: 16px; /* deprecated */\n  --border-radius-xxl: 24px; /* deprecated */\n  --border-radius-3xl: 36px; /* deprecated */\n}\n```\n\n----------------------------------------\n\nTITLE: Toast Review Fixes\nDESCRIPTION: The modifications include review fixes for the toast component. These revisions address issues identified during a code review. This could address bugs, improve the components, or standardize the implementation to meet coding guidelines.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_93\n\n\n\n----------------------------------------\n\nTITLE: Maintaining Native Semantic Behavior with ARIA Roles - HTML\nDESCRIPTION: This snippet demonstrates how not to override semantic behavior of elements by applying inappropriate ARIA roles, emphasizing that button and heading elements should retain their native purpose. Dependencies: Standard HTML5. Parameters involve element tags and role attributes. Input: a clickable header requirement. Output: accessible structure with a <button> inside <h1>. Limitations: Non-semantic role assignments can break accessibility.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/accessibility.stories.mdx#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n❌ Плохо\n<h1 role=\"button\">Clickable header</h1>\n\n✅ Хорошо\n<h1><button>Clickable header</button></h1>\n```\n\n----------------------------------------\n\nTITLE: Importing Modules and Defining Storybook Metadata (JavaScript)\nDESCRIPTION: This snippet imports the `Meta` component from `@storybook/addon-docs` to define metadata for the Storybook story, and the `IconsOverview` component. It then defines metadata for the story, setting the title, hiding the canvas tab and setting the id. This sets the environment for displaying the icon overview.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/icons.overview.stories.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\nimport { IconsOverview } from '../.storybook/pages/icons-overview';\n\n<Meta\n    title='Icons overview'\n    parameters={{ previewTabs: { canvas: { hidden: true } } }}\n    id='icons-overview'\n/>\n\n<IconsOverview />\n```\n\n----------------------------------------\n\nTITLE: Defining Margin Options in React\nDESCRIPTION: This snippet defines an array of margin values used for a select input. The `margins` array stores objects, each containing a `key` (string representation of the margin value) and `content` (the same value for display purposes). These margin values are used by `SelectDesktop` to configure the modal's positioning.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/universal-modal/src/docs/description.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst margins = [\n    { key: '0', content: '0' },\n    { key: '2', content: '2' },\n    { key: '4', content: '4' },\n    { key: '8', content: '8' },\n    { key: '12', content: '12' },\n    { key: '16', content: '16' },\n    { key: '20', content: '20' },\n    { key: '24', content: '24' },\n    { key: '32', content: '32' },\n    { key: '40', content: '40' },\n    { key: '48', content: '48' },\n    { key: '56', content: '56' },\n    { key: '64', content: '64' },\n    { key: '72', content: '72' },\n    { key: '80', content: '80' },\n    { key: '96', content: '96' },\n    { key: '128', content: '128' },\n];\n```\n\n----------------------------------------\n\nTITLE: Adding new portal component\nDESCRIPTION: This commit adds a new portal component. Portals can render their children into a DOM node that exists outside of the DOM hierarchy of the parent component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_199\n\n\n\n----------------------------------------\n\nTITLE: Rendering Horizontal Steps Component in React\nDESCRIPTION: This code snippet demonstrates how to render a horizontal Steps component in React. It includes state management for active step, ordering, and error handling. The component also has functions for changing steps, handling errors, and determining if a step is disabled or has an error.  The snippet also uses the `desktopOnly` directive indicating it is only rendered on desktop.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/steps/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [ordered, setOrdered] = React.useState(true);\n    const [error, setError] = React.useState(false);\n    const [step, setStep] = React.useState(2);\n\n    const handleStepsChange = (stepNumber) => setStep(stepNumber);\n\n    const handleOrderChange = () => setOrdered((prev) => !prev);\n\n    const handleErrorChange = () => {\n        setError((prev) => {\n            if (!prev && step > 3) {\n                setStep(3);\n            }\n\n            return !prev;\n        });\n    };\n\n    const handleStepDisable = (stepNumber) => {\n        if (error) {\n            return stepNumber === 4 || stepNumber === 5;\n        }\n\n        return stepNumber === 4;\n    };\n\n    const handleStepError = (stepNumber) => {\n        if (error) {\n            return stepNumber === 3;\n        }\n    };\n\n    return (\n        <Space size={24}>\n            <Steps\n                activeStep={step}\n                defaultActiveStep={2}\n                ordered={ordered}\n                onChange={handleStepsChange}\n                checkIsStepDisabled={handleStepDisable}\n                checkIsStepError={handleStepError}\n            >\n                {[1, 2, 3, 4, 5].map((item, key) => (\n                    <div key={key}>Шаг {item}</div>\n                ))}\n            </Steps>\n            <Typography.Text view='component-secondary' color='secondary'>\n                Выбран шаг {step}\n            </Typography.Text>\n            <>\n                <Switch checked={ordered} onChange={handleOrderChange} label='Номера шагов' />\n                <Gap size='m' />\n                <Switch\n                    checked={error}\n                    onChange={handleErrorChange}\n                    label='Есть некорректно заполненный шаг'\n                />\n            </>\n        </Space>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Modal Component\nDESCRIPTION: The `modal` component is being reinvented. This usually entails a significant overhaul of the modal's design, functionality, or internal structure.  This likely involves UI/UX improvements, and potentially a change in how modals are managed or rendered in the component library.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_75\n\n\n\n----------------------------------------\n\nTITLE: Improving button theming\nDESCRIPTION: This commit improves the button theming. The theming encompasses customization options for the button's appearance, such as colors, fonts, and sizes. These changes aim to provide a better design, usability and flexibility.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_169\n\n\n\n----------------------------------------\n\nTITLE: Implementing circumflexus retrieval feature\nDESCRIPTION: This commit implements a feature related to circumflexus retrieval within the @alfalab/core-components-with-suffix package. The specific functionality and implementation details are tied to issue #57.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/with-suffix/CHANGELOG.md#_snippet_5\n\nLANGUAGE: none\nCODE:\n```\ncircumflexus retrieval ([#57](https://github.com/core-ds/core-components/issues/57)) ([3820da8](https://github.com/core-ds/core-components/commit/3820da818bcdcbee6904c648b3e29c3c828fe202))\n```\n\n----------------------------------------\n\nTITLE: Adding Wrapper Around Children Component in Tooltip\nDESCRIPTION: This change adds a wrapper around the children component within the `tooltip` component. This is done to support the functionality provided by the `tooltip` component such as displaying tooltip information on hover. It gives a standardized way of handling the child components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_96\n\n\n\n----------------------------------------\n\nTITLE: Importing Storybook Addons and Component Documentation Files in JavaScript\nDESCRIPTION: This snippet imports necessary modules, including Storybook addons (@storybook/addon-docs and storybook/blocks) for documentation rendering, the component stories, as well as MDX and raw markdown files for component description, development, and changelog content. These imports set up prerequisites for composing the documentation page.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/universal-modal/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Extending Confirmation Component with Custom Screens in React (JSX)\nDESCRIPTION: Shows a React example where the Confirmation component is extended to include custom screens beyond the default set by overriding the 'getScreensMap' prop. This allows developers to inject additional screen components mapped to new identifiers, providing enhanced flexibility in defining unique confirmation workflows or screens while preserving core functionality.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/confirmation/src/docs/development.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst Example = () => {\n    const { confirmationState, confirmationScreen, setConfirmationState, setConfirmationScreen } =\n        useConfirmation();\n\n    return (\n        <Confirmation\n            screen={confirmationScreen}\n            state={confirmationState}\n            onChangeState={setConfirmationState}\n            onChangeScreen={setConfirmationScreen}\n            getScreensMap={(screensMap) => ({\n                ...screensMap,\n                HINT: () => <>Custom hint screen</>,\n                CUSTOM_SCREEN: () => <>Custom screen</>,\n            })}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Component Impact List\nDESCRIPTION: This snippet is a list of components impacted by various changes, indicating which specific components have been modified or affected by updates in the Core Components library.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_59\n\nLANGUAGE: text\nCODE:\n```\n`action-button` `alert` `amount` `amount-input` `attach`<br /> `backdrop` `badge` `bank-card` `base-modal` `bottom-sheet`<br /> `button` `calendar` `calendar-input` `calendar-range` `calendar-with-skeleton`<br /> `card-image` `cdn-icon` `chart` `checkbox` `checkbox-group`<br /> `circular-progress-bar` `code-input` `collapse` `comment` `confirmation`<br /> `confirmation-v1` `custom-button` `custom-picker-button` `date-input` `divider`<br /> `drawer` `filter-tag` `form-control` `gallery` `gap`<br /> `generic-wrapper` `grid` `hatching-progress-bar` `icon-button` `icon-view`<br /> `indicator` `input` `input-autocomplete` `intl-phone-input` `keyboard-focusable`<br /> `link` `list` `list-header` `loader` `masked-input`<br /> `modal` `mq` `notification` `notification-manager` `number-input`<br /> `pass-code` `phone-input` `picker-button` `plate` `popover`<br /> `portal` `progress-bar` `pure-cell` `pure-input` `radio`<br /> `radio-group` `scrollbar` `segmented-control` `select` `select-with-tags`<br /> `side-panel` `skeleton` `slider` `slider-input` `sortable-list`<br /> `space` `spinner` `status` `stepped-progress-bar` `steps`<br /> `switch` `system-message` `tabs` `tag` `textarea`<br /> `toast` `toast-plate` `tooltip` `typography` `underlay`<br /> `with-suffix`\n```\n\n----------------------------------------\n\nTITLE: Configuring Tabs with Documentation for Scrollbar\nDESCRIPTION: Establishes tabbed sections within the Storybook page, displaying the description, changelog, and development details about the Scrollbar component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/scrollbar/src/docs/Component.docs.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating auto-wrapping blocks with custom spacing in JSX\nDESCRIPTION: Demonstrates how to create auto-wrapping rows of blocks with separate horizontal and vertical spacing. This example creates 20 blocks that will wrap based on container width with 16px horizontal and 20px vertical spacing.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/space/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const styleBlock = {\n        width: '64px',\n        height: '64px',\n        borderRadius: '8px',\n        backgroundColor: 'var(--color-light-neutral-translucent-200)',\n    };\n    return (\n        <Space useCssGaps={true} direction='horizontal' size={[16, 20]} wrap>\n            {new Array(20).fill(null).map((_, idx) => (\n                <div key={idx} style={styleBlock} />\n            ))}\n        </Space>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Responsive Button Rendering with React and JSX\nDESCRIPTION: This JSX code renders a responsive button that changes its appearance based on the screen size. The `Mq` component likely handles media queries, and the `query` prop specifies the breakpoint to target, i.e. '--mobile', or '--tablet-s'.  The `Button` component is rendered inside the `Mq` component and its content is conditional based on the media query matching the current screen width. The `breakpoint` prop is passed to the `Button` component, although its specific usage depends on the implementation of the `Button` component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/mq/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n    <Mq query='--mobile'>\n        <Button breakpoint={BREAKPOINT} >Мобильная кнопка</Button>\n    </Mq>\n    <Mq query='--tablet-s'>\n        <Button breakpoint={BREAKPOINT} >Десктопная кнопка</Button>\n    </Mq>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Allowing to select one-day range in calendar\nDESCRIPTION: This change introduces functionality to enable the selection of a one-day range within the calendar-range component. Previously, selecting a range required at least two days. This modification extends the calendar's functionality by offering more flexibility when specifying date ranges.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_77\n\n\n\n----------------------------------------\n\nTITLE: Listening to GALLERY_EVENTS Custom Events - @alfalab/core-components-gallery - JavaScript\nDESCRIPTION: This JavaScript snippet provides an example of listening for custom gallery events (such as ON_PLAY) using the window.addEventListener API. GALLERY_EVENTS should be imported from @alfalab/core-components-gallery. The handler function receives a custom event object each time the specified gallery event is triggered. Ensure that @alfalab/core-components-gallery is installed and that the listening context is appropriate for handling UI gallery events related to video playback.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.addEventListener(GALLERY_EVENTS.ON_PLAY, handler)\n```\n\n----------------------------------------\n\nTITLE: Fixing Disabled State in Button Link Mode\nDESCRIPTION: Fixes the disabled state in the Link mode for the button component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_31\n\n\n\n----------------------------------------\n\nTITLE: Displaying the Base PickerButton Component in Storybook (JSX)\nDESCRIPTION: Defines a Storybook story named 'PickerButton' showcasing the base PickerButton component. It utilizes knobs (@storybook/addon-knobs) to allow interactive control over props like 'options', 'label', 'size', 'view', 'variant', 'disabled', 'loading', 'leftAddons' (conditionally rendering StarMIcon), and 'showArrow'.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/picker-button/src/docs/Component.stories.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Story name='PickerButton'>\n    <PickerButton\n        options={options}\n        label={text('label', 'Действие')}\n        size={select('size', [32 , 40 , 48 , 56 , 64 , 72], 56)}\n        view={select(\n            'view',\n            ['link', 'filled', 'primary', 'secondary', 'outlined', 'ghost', 'accent'],\n            'secondary',\n        )}\n        variant={select('variant', ['default', 'compact'])}\n        disabled={boolean('disabled', false)}\n        loading={boolean('loading', false)}\n        leftAddons={boolean('Иконка слева', false) ? <StarMIcon /> : null}\n        showArrow={boolean('Показывать стрелку', true)}\n    />\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Upgrading Storybook\nDESCRIPTION: This commit upgrades Storybook to a newer version, as part of issue #696.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/phone-input/CHANGELOG.md#_snippet_3\n\nLANGUAGE: other\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Change types for OptionList and add Tooltip handlers\nDESCRIPTION: Refines type definitions for OptionList component and introduces event handlers for Tooltip interactions, facilitating better type safety and interactive behavior in tooltips. Uses TypeScript or PropTypes for type definitions.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_59\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Type definitions for OptionList including event handlers for Tooltip */\n```\n\n----------------------------------------\n\nTITLE: Rendering Component Variants with ArgsTabs for Responsive Design\nDESCRIPTION: This snippet illustrates the use of ArgsTabs to display different Pattern Lock component variants for general, desktop, and mobile contexts, facilitating testing and documentation of different device-specific implementations.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pattern-lock-v1/src/docs/development.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ArgsTabs components={{PatternLockV1, PatternLockDesktopV1, PatternLockMobileV1}} />\n```\n\n----------------------------------------\n\nTITLE: Changing Mobile-S to Mobile-XS\nDESCRIPTION: This is a modification to the responsive design or media query settings. This change renames the `mobile-s` breakpoint to `mobile-xs`.  This changes the responsive behavior of the components within the `core-ds` library for mobile devices.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_83\n\n\n\n----------------------------------------\n\nTITLE: Switching Typography Variables and Mixins for AlfaSans in CSS\nDESCRIPTION: Shows the required @import path changes in CSS files to transition from system/Styrene-based variable sets to those adapted for Alfa Interface Sans. The snippet uses unified diff highlighting with '-' and '+' lines to represent removal and addition, respectively. It covers imports for core variable index files, product bundles, and typography mixins, guiding developers through a smooth migration process.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/typography.stories.mdx#_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- @import '@alfalab/core-components/vars/src/index.css';\n+ @import '@alfalab/core-components/vars/src/alfasans-index.css';\n```\n\nLANGUAGE: diff\nCODE:\n```\n- @import '@alfalab/core-components/vars/src/bundle/click.css';\n- @import '@alfalab/core-components/vars/src/bundle/corp.css';\n- @import '@alfalab/core-components/vars/src/bundle/intranet.css';\n+ @import '@alfalab/core-components/vars/src/bundle/alfasans-click.css';\n+ @import '@alfalab/core-components/vars/src/bundle/alfasans-corp.css';\n+ @import '@alfalab/core-components/vars/src/bundle/alfasans-intranet.css';\n```\n\nLANGUAGE: diff\nCODE:\n```\n- @import '@alfalab/core-components/vars/src/typography.css';\n+ @import '@alfalab/core-components/vars/src/alfasans-typography.css';\n```\n\n----------------------------------------\n\nTITLE: React-Based Skeleton Placeholder with Style and State Toggle\nDESCRIPTION: This snippet defines a React component utilizing hooks to toggle the visibility of skeleton placeholders, applying specific shape styles, and composing UI elements such as Switch, Gap, Skeleton, and Status. It aims to demonstrate animated loading placeholders with custom styling and a toggle control.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/skeleton/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst SHAPRE_STYLE = {\n    width: 40,\n    height: 40,\n    borderRadius: 8,\n    backgroundImage: 'url(./images/imgBg.png)',\n    backgroundSize: 'cover',\n};\n\nrender(() => {\n    const [visible, setVisible] = React.useState(false);\n\n    return (\n        <>\n            <Switch\n                checked={visible}\n                label='Скелетонизация контента'\n                onChange={() => setVisible((p) => !p)}\n            />\n\n            <Gap size='l' />\n\n            <div style={{ display: 'flex', alignItems: 'center' }}>\n                <Skeleton visible={visible}>\n                    <div style={SHAPRE_STYLE} />\n                </Skeleton>\n\n                <Gap size='s' direction='horizontal' />\n\n                <Skeleton visible={visible} style={{ borderRadius: 'var(--border-radius-4)' }}>\n                    <Status view='contrast'>This is fine</Status>\n                </Skeleton>\n            </div>\n        </>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Dropzone contentClassName Property\nDESCRIPTION: This update adds an extra class for the dropzone content. The `contentClassName` prop allows for more flexible styling and customization of the dropzone component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Import DateRangeInput Components (JSX)\nDESCRIPTION: This code snippet demonstrates how to import the DateRangeInput, DateRangeInputDesktop, and DateRangeInputMobile components from the '@alfalab/core-components/date-range-input' library. These components allow users to select a range of dates in a React application. The desktop and mobile variants provide responsive design options.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/date-range-input/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DateRangeInput } from '@alfalab/core-components/date-range-input';\nimport { DateRangeInputDesktop } from '@alfalab/core-components/date-range-input/desktop';\nimport { DateRangeInputMobile } from '@alfalab/core-components/date-range-input/mobile';\n```\n\n----------------------------------------\n\nTITLE: Rendering Static Text Content Component in React JSX\nDESCRIPTION: Defines a React functional component named Text that renders a paragraph with fixed text about banking transaction restrictions related to Russian federal law 115-FZ. This component is used within the SidePanel content to provide sample textual content. It is stateless and styled with a bottom margin.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/side-panel/src/docs/Component.stories.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Text = () => (\n    <p style={{ margin: '0 0 16px' }}>\n        Сейчас много говорят об отказах банков в проведении операций, блокировках интернет-банка.\n        Это связано с тем, что Центральный банк РФ обязывает банки выявлять операции своих клиентов,\n        потенциально нарушающие требования Федерального закона «О противодействии легализации\n        (отмыванию) доходов, полученных преступным путем, и финансированию терроризма» — 115-ФЗ\n    </p>\n);\n```\n\n----------------------------------------\n\nTITLE: Adding a new 40 size to components\nDESCRIPTION: This update includes adding a new size (40) across multiple components, including `amount-input`, `form-control`, `input`, `input-autocomplete`, `number-input`, `password-input`, `phone-input`, `select`, `select-with-tags`, `slider-input`, `textarea`, `themes`, and `universal-date-input`. This adds additional customization possibilities.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Fixing PickerButton Icon Disappearance\nDESCRIPTION: Fixes the icon disappearance issue in PickerButton when a right addon is present. The default icon no longer disappears.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta and Structured Component Documentation in JSX\nDESCRIPTION: This snippet defines the Storybook metadata for the Divider component utilizing the Meta component and sets up structured documentation layout with a header and tabbed content areas. It uses the ComponentHeader to display the component name and description in Russian, and the Tabs component to organize detailed description, changelog markdown, and development notes. The snippet requires correctly loaded markdown components and story data for rendering.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/divider/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta of={Stories} />\n\n<ComponentHeader\n    name='Divider'\n    children='Используется как разделитель.'\n/>\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Options List Width to Select Component\nDESCRIPTION: This adds the ability to configure the width of the options list in the select component.  This gives control over how the options list appears in relation to the select input. This change provides a way to customize the display of options within the select component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_85\n\n\n\n----------------------------------------\n\nTITLE: Bump Packages Version Bug Fix\nDESCRIPTION: Addresses an issue where package versions were not correctly updated. This fix ensures that all dependencies are aligned and consistent, preventing potential conflicts and ensuring proper functionality of the alert component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/alert/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n-   bump packages version ([#153](https://github.com/core-ds/core-components/issues/153)) ([fd3e082](https://github.com/core-ds/core-components/commit/fd3e08205672129cdce04e1000c673f2cd9c10da))\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch Components with State Management in React\nDESCRIPTION: Demonstrates how to render multiple Switch components with state control, labels, hints, and layout adjustments based on viewport size. It showcases handling user interaction via React hooks to toggle switch states and optional layout customization. Dependencies include React and a Switch component from the UI library.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/switch/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nrender(() => {\n    const [checked1, setChecked1] = React.useState(false);\n    const [checked2, setChecked2] = React.useState(false);\n\n    return (\n        <div style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}>\n            <Switch\n                block={true}\n                checked={checked1}\n                label='Сделать всё хорошо'\n                hint='Бесплатно без СМС'\n                onChange={() => setChecked1((prevState) => !prevState)}\n            />\n            <Gap size='xl' />\n            <Switch\n                block={true}\n                reversed={true}\n                checked={checked2}\n                label='Сделать всё хорошо'\n                hint='Бесплатно без СМС'\n                onChange={() => setChecked2((prevState) => !prevState)}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Metadata for the Stories\nDESCRIPTION: Uses the Meta component to link the imported stories to the Storybook documentation context, enabling automatic extraction of story metadata and parameter configuration.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/plate/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Meta of={Stories} />\n```\n\n----------------------------------------\n\nTITLE: Displaying a Notification Banner with Link using @alfalab/core-components\nDESCRIPTION: This snippet renders a notification banner component (`Plate`) with an attention view, informing users that a component is deprecated and providing a link to the new component. The banner uses properties like `view`, `limitContentWidth`, and `title` with embedded `Link` component for navigation. It depends on '@alfalab/core-components/plate' and '@alfalab/core-components/link'.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/date-range-input/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Plate } from '@alfalab/core-components/plate';\nimport { Link } from '@alfalab/core-components/link';\n\n<Plate\n    view='attention'\n    limitContentWidth={false}\n    title={\n        <>\n            Компонент больше не поддерживается, переходите на новый компонент {''}\n            <Link href='https://core-ds.github.io/core-components/master/?path=/docs/universaldateinput--docs'>\n                UniversalDateInput.\n            </Link>\n        </>\n    }\n    titleView='light'\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing PageIndicatorRunner Component in React\nDESCRIPTION: Example of PageIndicatorRunner component that adapts its width to the container size. This indicator provides a runner-style visual representation of progress and is available in one size (4px).\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/page-indicator/src/docs/description.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const elements = 5;\n    const [activeElement, setActiveElement] = React.useState(0);\n    const handlePrevClick = () => setActiveElement((prev) => Math.max(--prev, 0));\n    const handleNextClick = () => setActiveElement((prev) => Math.min(++prev, elements - 1));\n\n    return (\n        <div>\n            <div style={{ width: 168 }}>\n                <PageIndicatorRunner size={4} activeElement={activeElement} elements={elements} />\n            </div>\n            <Row style={{ gap: 'var(--gap-xs)' }}>\n                <Button leftAddons={<ChevronLeftMIcon />} onClick={handlePrevClick} />\n                <Button leftAddons={<ChevronRightMIcon />} onClick={handleNextClick} />\n            </Row>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Adding smart default placeholder\nDESCRIPTION: This commit adds a smart default placeholder for the money-input component. The placeholder provides better usability and context to the user to input an amount in the correct format.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_184\n\n\n\n----------------------------------------\n\nTITLE: Refuse to use resize-observer polyfill\nDESCRIPTION: Optimizes resize detection by conditionally excluding polyfills when native resize observer is available, reducing overhead and improving performance. Checks environmental capabilities prior to polyfill load.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_54\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Conditional logic to bypass resize-observer polyfill when unnecessary */\n```\n\n----------------------------------------\n\nTITLE: Rendering an Attention Plate Component with Alfalah Core Components in JSX\nDESCRIPTION: This snippet renders a Plate component from Alfalah Core with properties that style it as an attention message. It uses the view prop set to \"attention\" and sets the title's visual style to \"light\". The title content includes an inline Link component directing users to a new component documentation URL. The limitContentWidth property disables content width restriction to allow full width usage. Dependencies include @alfalab/core-components Plate and Link.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/alert/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Plate } from '@alfalab/core-components/plate';\nimport { Link } from '@alfalab/core-components/link';\n\n<Plate\n    view='attention'\n    titleView='light'\n    limitContentWidth={false}\n    title={\n        <>\n            Компонент больше не поддерживается, переходите на новый компонент’{' '}\n            <Link href='https://core-ds.github.io/core-components/master/?path=/docs/plate--docs'>\n                Plate.\n            </Link>\n        </>\n    }\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding the CDN Icon Component\nDESCRIPTION: This change introduces a new component named `cdn-icon`.  The purpose of this component is to support the integration and display of icons fetched from a CDN (Content Delivery Network). The component allows to load and render icons hosted externally. The component simplifies the process of incorporating external icon resources into the application.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_70\n\n\n\n----------------------------------------\n\nTITLE: Using getInputTestIds Utility for Consistent dataTestId Generation in JSX\nDESCRIPTION: This snippet provides the object returned by the getInputTestIds function, which generates a set of standardized dataTestId strings used as attributes for testing the Input component and its sub-elements. Each key corresponds to a specific part of the FormControl wrapper or its adornments, aiding automated UI testing by enabling precise element targeting.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/input/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    input: dataTestId,\n    inputWrapper: `${dataTestId}-form-control`,\n    inputWrapperInner: `${dataTestId}-form-control-inner`,\n    leftAddons: `${dataTestId}-form-control-left-addons`,\n    rightAddons: `${dataTestId}-form-control-right-addons`,\n    error: `${dataTestId}-form-control-error-message`,\n    hint: `${dataTestId}-form-control-hint`,\n    errorIcon: `${dataTestId}-error-icon`,\n    successIcon: `${dataTestId}-success-icon`,\n    clearIcon: `${dataTestId}-clear-icon`,\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Calendar Components Using React and @alfalab/core-components (JSX)\nDESCRIPTION: Demonstrates how to import both the general Calendar component and its platform-specific variants (CalendarDesktop, CalendarMobile, CalendarMonthOnlyView, CalendarMonthOnlyViewHeader) from the @alfalab/core-components library. No external dependencies are required besides React and @alfalab/core-components. This approach allows selective usage of desktop or mobile calendar features as per the application's requirements.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Calendar } from '@alfalab/core-components/calendar';\nimport { CalendarDesktop } from '@alfalab/core-components/calendar/desktop';\nimport {\n    CalendarMobile,\n    CalendarMonthOnlyView,\n    CalendarMonthOnlyViewHeader,\n} from '@alfalab/core-components/calendar/mobile';\n```\n\n----------------------------------------\n\nTITLE: Rendering CDNIcon Components with Horizontal Space Layout in React JSX\nDESCRIPTION: This React JSX snippet renders three CDNIcon components placed horizontally inside a Space container that centers its children and spaces them with a size of 24 units. Each CDNIcon is styled with distinct color values referencing CSS variables and different icon names indicating size variants. Required dependencies include the React framework and implementation of Space and CDNIcon components supporting the given props. The inputs are the 'color' and 'name' props controlling icon appearance, while the output is a horizontal alignment of styled icons within the UI. The snippet demonstrates how to compose reusable icon components with consistent layout and theming.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/cdn-icon/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Space direction='horizontal' align='center' size={24}>\n    <CDNIcon \n        color='var(--color-light-neutral-translucent-1300)' \n        name='glyph_diamonds_xxl' \n    />\n    <CDNIcon \n        color='var(--color-light-neutral-700)' \n        name='glyph_diamonds_m' \n    />\n    <CDNIcon \n        color='var(--color-light-neutral-500)' \n        name='glyph_diamonds_s' \n    />\n</Space>\n```\n\n----------------------------------------\n\nTITLE: Always Showing SMS Come Link in Confirmation Component\nDESCRIPTION: This change ensures that the SMS come link is always displayed within the confirmation component. This ensures users have consistent access to an alternate verification method. This update increases the usability.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_80\n\n\n\n----------------------------------------\n\nTITLE: Changing minority color\nDESCRIPTION: This commit changes the minority color. This is used to provide better styling to the money input component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_185\n\n\n\n----------------------------------------\n\nTITLE: Using Divider component in JSX\nDESCRIPTION: This snippet shows the inclusion of a Divider component as a separator between layout sections. It requires the Divider component to be imported and used within React JSX. It helps in visually separating content segments.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/divider/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Divider />\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and Local Modules (JavaScript)\nDESCRIPTION: This snippet imports necessary modules for configuring the Storybook documentation. It imports modules from `@storybook/addon-docs` and `storybook/blocks` for metadata and custom blocks. It also imports component stories and Markdown files for description, development, and changelog content. This allows for dynamic content population and component documentation within Storybook.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/alert/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Adding a Header component in core-components\nDESCRIPTION: Defines a React component for the header section of a list, providing structure and styling for list headers. It depends on React and styling libraries, with parameters for customization. It supports consistent section headers across the component library.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_104\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-list-header component implementation\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation Tabs for Slider Component in Storybook\nDESCRIPTION: Provides organization and navigation for additional documentation sections related to the Slider component, including description, development notes, and changelog, through tabbed interface elements.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/slider/src/docs/Component.stories.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ComponentHeader\n    name='Slider'\n    children='Компонент используется для указания значения из заданного диапазона.'\n/>\n\n<Tabs\n    description={<Description />}\n    development={<Development />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n/>\n```\n\n----------------------------------------\n\nTITLE: Running multiple codemod transformers\nDESCRIPTION: This command executes multiple codemod transformers (e.g., `button-xs` and `button-views`) on TypeScript files within the `src` directory. It utilizes `npx` to run the `@alfalab/core-components-codemod` package, applying the specified transformers to files matching the provided glob pattern. The code is modified according to the combined rules of the selected transformers.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/codemod/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx @alfalab/core-components-codemod --transformers=button-xs,button-views --glob='src/**/*.tsx'\n```\n\n----------------------------------------\n\nTITLE: Generating Test IDs for UniversalModal Components (JSX)\nDESCRIPTION: This snippet illustrates the object structure returned by the getUniversalModalTestIds utility function from '@alfalab/core-components/universal-modal/shared'. This function generates a set of standardized dataTestId strings for testing UniversalModal sub-elements. Input is the base dataTestId, and output is an object mapping field names (modal, header, title, etc.) to test ID strings. No dependencies aside from the specified library are required.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/universal-modal/src/docs/development.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{\n        modal: dataTestId,\n        header: `${dataTestId}-header`,\n        title: `${dataTestId}-header-title`,\n        content: `${dataTestId}-content`,\n        footer: `${dataTestId}-footer`,\n        closer: `${dataTestId}-header-closer`,\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Divider UI Element in JavaScript\nDESCRIPTION: This snippet introduces a simple divider component used for visually separating content sections. It relies on CSS modules for styling and is designed to be reusable within other components or layouts.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2021.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Divider component implementation\nimport styles from './divider.module.css';\n\nfunction Divider() {\n  return <hr className={styles.divider} />;\n}\n\nexport default Divider;\n```\n\n----------------------------------------\n\nTITLE: Adding atomic imports to amount\nDESCRIPTION: This update adds atomic imports to the `amount` component, likely improving code structure and maintainability.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Usage dataTestId Modifiers - JSX\nDESCRIPTION: This snippet illustrates the structure of the object returned by the `getPatternLockTestIds` function, which is used for applying dataTestId modifiers to the pattern lock components.  This functionality provides a way to find elements with `dataTestId` attributes in the PatternLock component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pattern-lock/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    patternLock: dataTestId,\n    forgotCodeBtn: `${dataTestId}-forgot-code-btn`,\n    error: `${dataTestId}-error`,\n    message: `${dataTestId}-message`,\n};\n```\n\n----------------------------------------\n\nTITLE: Fixing CSS variables in @alfalab/core-components-with-suffix\nDESCRIPTION: This commit addresses a bug related to missing CSS variables within the @alfalab/core-components-with-suffix package. It ensures that the necessary CSS variables are properly included, resolving potential styling issues or inconsistencies.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/with-suffix/CHANGELOG.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nfixed missing css vars ([#227](https://github.com/core-ds/core-components/issues/227)) ([42912d3](https://github.com/core-ds/core-components/commit/42912d306657490e8c7f577cb53120767d503fcb))\n```\n\n----------------------------------------\n\nTITLE: Importing Component Stories - JavaScript\nDESCRIPTION: Imports all exports from the local `./Component.stories` file. This import makes the component's stories available to the documentation page, typically used by the `Meta` component to link the docs page to the stories.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/status/src/docs/Component.docs.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Stories from './Component.stories';\n```\n\n----------------------------------------\n\nTITLE: Improving Read-Only Behavior\nDESCRIPTION: This refers to changes to enhance the behavior of components when they are in read-only mode.  This will include modifications to the visual presentation, functionality, or accessibility features of components.  These changes aim to improve the usability and user experience of read-only components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_101\n\n\n\n----------------------------------------\n\nTITLE: HTML Example for Accessible Navigation Menu with ARIA Attributes\nDESCRIPTION: Provides an HTML snippet illustrating how to construct an accessible navigation menu using the <nav> element with aria-label for description, and <ul> with aria-current on the active item. It includes a hidden span for screen readers to identify the current menu item, enhancing accessibility. Suitable for static menu structure, supporting current, multi-level, and descriptive labeling.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/menu.stories.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<nav aria-label=\"О компании\">\n    <ul>\n        <li aria-current=\"page\">\n            <span><span class=\"hidden\">Текущий пункт:</span>О нас</span>\n        </li>\n        <li><a href=\"#\">Примеры работ</a></li>\n        <li><a href=\"#\">Контакты</a></li>\n    </ul>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Title Using Typography Components in JSX\nDESCRIPTION: Renders a small-sized title using the Typography.Title component in JSX. This snippet demonstrates passing the 'view' parameter to select a predefined text style according to the design system, with 'small' producing a more compact title. This approach requires the Typography module to be installed and imported, and the output is an HTML element (e.g., h1, h2) styled per the selected typography settings.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/typography.stories.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Typography.Title view='small'>Заголовок</Title>\n```\n\n----------------------------------------\n\nTITLE: Rendering Storybook Documentation Layout with React and JSX\nDESCRIPTION: This snippet defines the structure of the documentation page using JSX. It sets metadata linking to the component stories, displays a component header with the component name and a description in Russian, and organizes three tabs: description, development, and changelog. The tabs display MDX and markdown content imported earlier, leveraging Storybook's UI components to present organized documentation to users.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/universal-modal/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta of={Stories} />\n\n<ComponentHeader\n    name='UniversalModal'\n    children='Модальное окно. Используется для отображения контента в модальном слое.'\n/>\n\n<Tabs\n    description={<Description />}\n    development={<Development />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Vertical Scrollbar with React JSX\nDESCRIPTION: This snippet demonstrates rendering a vertically scrollable container using the `Scrollbar` component in React. It dynamically creates a list of 51 divs, applying alternating background colors using CSS variables via the `getChildStyle` helper function. The scrollbar is configured to be always visible (`autoHide={false}`).\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/scrollbar/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const getChildStyle = (bgColor) => ({\n        height: 80,\n        textAlign: 'center',\n        lineHeight: '80px',\n        fontSize: 40,\n        fontWeight: 700,\n        color: 'var(--color-light-text-tertiary)',\n        background: `var(${bgColor})`,\n    });\n    return (\n        <div style={{ height: 240, margin: 'var(--gap-20-neg)' }}>\n            <Scrollbar style={{ height: '100%' }} autoHide={false}>\n                {new Array(51).fill(null).map((_, idx) => {\n                    const style = getChildStyle(\n                        idx % 2 === 0 ? '--color-light-neutral-200' : '--color-light-base-bg-secondary',\n                    );\n                    return (\n                        <div key={idx} style={style}>\n                            {idx + 1}\n                        </div>\n                    );\n                })}\n            </Scrollbar>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Adding new link component\nDESCRIPTION: This commit adds a new link component. The link component is used to create hyperlinks within the application. The component manages its styling and interactions.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_181\n\n\n\n----------------------------------------\n\nTITLE: Add select-modal-mobile in select component\nDESCRIPTION: Introduces a new modal-based UI optimized for mobile devices to improve select input usability on smaller screens. Depends on modal and select components communication, with props to toggle modal display.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_52\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Implementation of select modal for mobile in select component */\n```\n\n----------------------------------------\n\nTITLE: Displaying the PickerButtonMobile Component in Storybook (JSX)\nDESCRIPTION: Defines a Storybook story named 'PickerButtonMobile' showcasing the mobile-specific PickerButton component (PickerButtonMobile). It uses knobs for interactive props configuration ('options', 'label', 'size', 'view', 'variant', 'disabled', 'loading', 'leftAddons', 'showArrow'), similar to the base PickerButton story.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/picker-button/src/docs/Component.stories.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Story name='PickerButtonMobile'>\n    <PickerButtonMobile\n        options={options}\n        label={text('label', 'Действие')}\n        size={select('size', [32 , 40 , 48 , 56 , 64 , 72], 56)}\n        view={select(\n            'view',\n            ['link', 'filled', 'primary', 'secondary', 'outlined', 'ghost', 'accent'],\n            'secondary',\n        )}\n        variant={select('variant', ['default', 'compact'])}\n        disabled={boolean('disabled', false)}\n        loading={boolean('loading', false)}\n        leftAddons={boolean('Иконка слева', false) ? <StarMIcon /> : null}\n        showArrow={boolean('Показывать стрелку', true)}\n    />\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Adding atomic imports to modal\nDESCRIPTION: This update adds atomic imports to the `modal` component, likely for better code organization and maintainability.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Creating Component Header in Storybook (JavaScript)\nDESCRIPTION: This snippet uses a custom component `ComponentHeader` to create a header for the component's documentation. It sets the name of the component to 'CDNIcon' and provides a human-readable description in the `children` prop, which will be rendered within the component. The result is a header shown in the component documentation page. The header's text is passed as a prop, and no inputs are expected.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/cdn-icon/src/docs/Component.docs.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ComponentHeader\n    name='CDNIcon'\n    children='\\u0418\\u0441\\u043f\\u043e\\u043b\\u044c\\u0437\\u0443\\u0435\\u0442\\u0441\\u044f \\u0434\\u043b\\u044f \\u043e\\u0442\\u043e\\u0431\\u0440\\u0430\\u0436\\u0435\\u043d\\u0438\\u044f \\u0438\\u043a\\u043e\\u043d\\u043e\\u043a.'\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing the Switch Toggle Component in JavaScript\nDESCRIPTION: This snippet defines a switch component for toggling boolean states, supporting styling and accessibility. It uses React and CSS modules, enabling user interaction for binary settings within forms or UI controls.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2021.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Switch toggle component\nimport styles from './switch.module.css';\n\nfunction Switch({ checked, onChange }) {\n  return (\n    <button\n      type=\"button\"\n      className={styles.switch}\n      onClick={() => onChange(!checked)}\n      aria-checked={checked}\n      role=\"switch\"\n    >\n      <div className={styles.thumb} style={{ transform: `translateX(${checked ? '100%' : '0'})` }} />\n    </button>\n  );\n}\n\nexport default Switch;\n```\n\n----------------------------------------\n\nTITLE: Importing Divider Component in React JSX\nDESCRIPTION: This snippet shows how to import the Divider component from the @alfalab/core-components library into a React JSX file. It is essential for utilizing the Divider component within a React application.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/divider/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Divider } from '@alfalab/core-components/divider';\n```\n\n----------------------------------------\n\nTITLE: Add size and theme options to spinner component\nDESCRIPTION: Extends the spinner component's API to include configurable size and inverted theme, enabling more versatile visual customization for loading indicators. Requires updates to component props and style handling.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_50\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Spinner component props with size and theme options */\n```\n\n----------------------------------------\n\nTITLE: Rendering Option with Amount Positioned Above Label in React\nDESCRIPTION: Defines a React functional component that renders a select option with the amount displayed above the label. Uses layout wrappers and typography components, with dependencies on React, custom UI components, and styling hooks. Parameters include amount, padding, and label text, providing a structured display of account data.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/select/src/docs/description.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst renderOptionWithAmountOnTop = ({ amount, padding, text }) => {\n    return (\n        <GenericWrapper alignItems='center' padding={padding}>\n            <GenericWrapper column>\n                <Typography.Text view='component-primary'>\n                    <Amount\n                        value={amount}\n                        minority={100}\n                        currency='RUR'\n                        view='withZeroMinorPart'\n                        transparentMinor={false}\n                    />\n                </Typography.Text>\n                <Typography.Text color='secondary' view='primary-small'>\n                    {text}\n                </Typography.Text>\n            </GenericWrapper>\n        </GenericWrapper>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Different Checkbox States in React\nDESCRIPTION: This snippet shows various checkbox states including indeterminate, checked, disabled, and default (unchecked) states. It demonstrates how to configure the Checkbox component for each state with consistent sizing and block layout.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/checkbox/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    return (\n        <div style={{ width: document.body.clientWidth < 450 ? '100%' : 320 }}>\n            <Checkbox size={24} label='Неопределён' indeterminate={true} block={true} />\n            <Gap size='20' />\n            <Checkbox size={24} label='Выбран' checked={true} block={true} />\n            <Gap size='20' />\n            <Checkbox\n                size={24}\n                label='Выбран и недоступен'\n                disabled={true}\n                checked={true}\n                block={true}\n            />\n            <Gap size='20' />\n            <Checkbox size={24} label='По умолчанию' checked={false} block={true} />\n            <Gap size='20' />\n            <Checkbox\n                size={24}\n                label='По умолчанию и недоступен'\n                checked={false}\n                disabled={true}\n                block={true}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: OptionsList Customization Example - React\nDESCRIPTION: This snippet demonstrates how to customize the `OptionsList` component. It defines a custom header and footer, and applies custom styles to the options using `getOptionProps`.  It showcases customizing styles for each option and for the header and footer of the options list, using CSS variables.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/select/src/docs/description.mdx#_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const options = React.useMemo(\n        () => [\n            { key: '1', content: 'Neptunium' },\n            { key: '2', content: 'Plutonium' },\n            { key: '3', content: 'Americium' },\n            { key: '4', content: 'Curium' },\n            { key: '5', content: 'Berkelium' },\n        ],\n        [],\n    );\n\n    return (\n        <div\n            style={{\n                width: document.body.clientWidth < 450 ? '100%' : 320,\n                paddingTop: 'var(--select-options-list-top-padding)',\n                paddingBottom: 'var(--select-options-list-bottom-padding)',\n                boxShadow: 'var(--select-options-list-box-shadow)',\n                borderRadius: 'var(--select-options-list-border-radius)',\n                background: 'var(--select-option-background)',\n                overflow: 'hidden',\n            }}\n        >\n            <OptionsList\n                Option={BaseOption}\n                getOptionProps={(option, index) => ({\n                    index,\n                    option,\n                    innerProps: {\n                        style: {\n                            background: 'var(--color-light-status-muted-positive)',\n                            borderBottom:\n                                index + 1 !== options.length\n                                    ? '1px solid var(--color-light-status-info)'\n                                    : 'none',\n                        },\n                    },\n                })}\n                options={options}\n                header={\n                    <div\n                        style={{\n                            height: 12,\n                            background: 'var(--color-light-status-muted-negative)',\n                        }}\n                    ></div>\n                }\n                footer={\n                    <div\n                        style={{\n                            height: 12,\n                            background: 'var(--color-light-status-muted-negative)',\n                        }}\n                    ></div>\n                }\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Sortable List Item with Custom Style - JSX\nDESCRIPTION: This code snippet renders a SortableList with a single disabled item. The `renderItem` function returns a div element with a specific background color, dashed border, and height. The SortableList is wrapped in a div with a maximum width of 340 pixels. The component demonstrates the customization of the individual list item.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/sortable-list/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const renderItem = () => {\n        return (\n            <div\n                style={{\n                    background: 'rgba(55, 120, 251, 0.1)',\n                    border: '1px dashed #3778FB',\n                    height: 48,\n                    boxSizing: 'border-box',\n                }}\n            />\n        );\n    };\n\n    return (\n        <div style={{ maxWidth: 340 }}>\n            <SortableList items={[{ id: 0, disabled: true }]} renderItem={renderItem} />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Add inverted theme to Button component (React, JavaScript)\nDESCRIPTION: This snippet shows the implementation of a new 'inverted' theme for Button components. It likely involves adding a boolean prop 'inverted' that toggles specific styles for the button. Dependencies include React and styling libraries (e.g., styled-components or CSS modules). Usage allows developers to create visually inverted buttons for thematic contrast.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2021.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Button = styled.button`\n  background: ${props => (props.inverted ? 'white' : 'primaryColor')};\n  color: ${props => (props.inverted ? 'primaryColor' : 'white')};\n  /* additional styles */\n`;\n// Usage: <Button inverted>Click me</Button>\n```\n\n----------------------------------------\n\nTITLE: Fix onChange type in input-autocomplete\nDESCRIPTION: Ensures correct typing for onChange handlers in the input-autocomplete component, preventing runtime errors and improving type safety in TypeScript projects.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_61\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Type definition update for onChange handler in input-autocomplete */\n```\n\n----------------------------------------\n\nTITLE: Legacy FileUploadItem Import - @alfalab/core-components - JavaScript\nDESCRIPTION: This JavaScript import statement shows the legacy method for importing FileUploadItem from the older file-upload-item subpackage of @alfalab/core-components. When upgrading to the latest major version, this import should be replaced with the FileUploadItemV1 import. This snippet uses ECMAScript modules and assumes @alfalab/core-components/file-upload-item is installed; following updates, the older import may be deprecated.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { FileUploadItem } from '@alfalab/core-components/file-upload-item';\n```\n\n----------------------------------------\n\nTITLE: Implementing Semantic Buttons in HTML - HTML\nDESCRIPTION: These examples illustrate the importance of using the native <button> element over non-semantic <div> or <div role=\"button\"> approaches. Dependencies: None, requires standard HTML5. Key parameters are element type (div or button) and attributes (role, type). Expected input is an interactive clickable element, and the output is improved accessibility for all users. Limitations: custom elements must replicate native behavior for full accessibility.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/accessibility.stories.mdx#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n❌ Плохо\n<div>Click Me</div>\n\n❌ Не очень\n<div role=\"button\">Click Me</div>\n\n✅ Хорошо\n<button type=\"button\">Click Me</button>\n```\n\n----------------------------------------\n\nTITLE: Defining storybook metadata for core-components documentation\nDESCRIPTION: This code sets up storybook metadata for the core-components, specifying the title, parameters for the preview tab, and an identifier. It helps organize and document the UI component library within storybook.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/core-config.stories.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n\n<Meta\n    title='For users/CoreConfig'\n    parameters={{ previewTabs: { canvas: { hidden: true } } }}\n    id='Instructions/core-config'\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta and Component Header\nDESCRIPTION: This snippet sets the meta information for the stories imported using the 'Stories' import, using `<Meta of={Stories} />`. Then, uses the `ComponentHeader` component to display the name of the component and a brief description. This provides the basic structure and naming of the Storybook documentation. It will take the `Stories` variable to extract details about it. It expects the Stories variable to be defined, which is imported from a story file.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/src/docs/Component.docs.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Meta of={Stories} />\n\n<ComponentHeader name='CalendarWithSkeleton' children='Используется во время загрузки календаря.' />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Horizontal Scrollbar with React JSX\nDESCRIPTION: This snippet showcases the implementation of a horizontal scrollbar using the `Scrollbar` component in React. It applies specific styles (`whiteSpace: 'nowrap'`, `overflow: 'auto'`) to enable horizontal scrolling. Child elements are displayed inline (`display: 'inline-block'`) and styled with alternating background colors using CSS variables. The scrollbar visibility is set to always on (`autoHide={false}`).\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/scrollbar/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const scrollbarStyle = {\n        whiteSpace: 'nowrap',\n        overflow: 'auto',\n        margin: 'var(--gap-20-neg)',\n    };\n    const getChildStyle = (bgColor) => ({\n        display: 'inline-block',\n        width: 80,\n        height: 240,\n        textAlign: 'center',\n        lineHeight: '200px',\n        fontSize: 40,\n        fontWeight: 700,\n        color: 'var(--color-light-text-tertiary)',\n        background: `var(${bgColor})`,\n    });\n    return (\n        <Scrollbar style={scrollbarStyle} autoHide={false}>\n            {new Array(51).fill(null).map((_, idx) => {\n                const style = getChildStyle(\n                    idx % 2 === 0 ? '--color-light-neutral-200' : '--color-light-base-bg-secondary',\n                );\n                return (\n                    <div key={idx} style={style}>\n                        {idx + 1}\n                    </div>\n                );\n            })}\n        </Scrollbar>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Tooltips with Different Styles and Triggers in React\nDESCRIPTION: This snippet demonstrates the use of `TooltipDesktop` and `Tooltip` components to render tooltips with different visual styles (default and 'hint') and trigger mechanisms ('click').  It displays a primary button that, when clicked, shows a tooltip containing text. Dependencies include Button, TooltipDesktop, Tooltip, Gap, and Container components. The snippet showcases the use of the `position`, `trigger`, and `content` props to customize the tooltip's behavior and appearance. It presents both desktop and mobile examples and uses display flex for layout.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tooltip/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<div style={{display: 'flex'}}>\n    <TooltipDesktop\n        position='bottom'\n        trigger='click'\n        content={\n            <div style={{ width: 241}}> Пример небольшого вспомогательного текста. </div>\n        }\n    >\n        <Button view='primary'>Показать Tooltip</Button>\n    </TooltipDesktop>\n    <Gap direction='horizontal' size='m'/>\n    <TooltipDesktop content={<div>Пример подсказки</div>} position='bottom' view='hint' trigger='click'>\n        <Button view='primary'>Показать Hint</Button>\n    </TooltipDesktop>\n</div>\n//MOBILE\n<Container>\n    <Tooltip\n        position='bottom'\n        trigger='click'\n        content={\n            <div> Пример небольшого вспомогательного текста. </div>\n        }\n    >\n        <div style={{ width: 320 }}>\n            <Button block={true} view='primary'>Показать Tooltip</Button>\n        </div>\n    </Tooltip>\n    <Gap size='m'/>\n    <Tooltip content={<div>Пример подсказки</div>} position='bottom' view='hint' trigger='click'>\n        <div style={{ width: 320 }}>\n            <Button block={true} view='primary'>Показать Hint</Button>\n        </div>\n    </Tooltip>\n</Container>\n```\n\n----------------------------------------\n\nTITLE: Button Size Feature and Breaking Change\nDESCRIPTION: Introduces a new button size (40px) and modifies existing button sizes. This involves a breaking change where the 'xs' button size is replaced with 'xxs', potentially requiring code modifications in existing implementations.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/alert/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n-   **button:** добавлена кнопка размера 40px, изменены скругления ([#886](https://github.com/core-ds/core-components/issues/886)) ([88e657a](https://github.com/core-ds/core-components/commit/88e657a9f0f68b8b58f6e9437053954ee984f83c)), closes [#890](https://github.com/core-ds/core-components/issues/890)\n\n### BREAKING CHANGES\n\n-   **button:** Кнопка размера xs теперь имеет размер 40px. Тем, кто использовал размер xs, надо\n    заменить размер на xxs. Можно воспользоваться codemod.\n```\n\n----------------------------------------\n\nTITLE: Rendering UI Components with React\nDESCRIPTION: This snippet renders a React component and its nested elements. It uses state variables to control the content displayed in the slots of the `SuperEllipse` component. It defines various UI elements and their placement within the component based on the state. Dependencies include React and associated UI components like `SuperEllipse`, `RadioGroup`, `Radio`, and icons.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/icon-view/src/docs/description.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [content, setContent] = React.useState('icon');\n    const [topAddons, setTopAddons] = React.useState('indicatorSmall');\n    const [bottomAddons, setBottomAddons] = React.useState('iconView');\n\n    const onChangeContent = (_, payload) => {\n        setContent(payload.value);\n    };\n\n    const onChangeTopAddons = (_, payload) => {\n        setTopAddons(payload.value);\n    };\n\n    const onChangeBottomAddons = (_, payload) => {\n        setBottomAddons(payload.value);\n    };\n\n    const iconView = (\n        <Circle size='24' mainSize={16}>\n            <DiamondsSIcon />\n        </Circle>\n    );\n\n    const indicatorSmall = topAddons === 'indicatorSmall' && <Indicator view='red' />;\n    const indicator = <Indicator value={1} view='red' height={24} />;\n\n    const contentIconView = {\n        icon: <DiamondsMIcon />,\n        emoji: <img src='./images/heart.png' alt='emoji heart' />,\n        noContent: null,\n    }[content];\n\n    const topAddonsView = {\n        indicator,\n        iconView,\n    }[topAddons];\n\n    return (\n        <Container>\n            <Row>\n                <Col>\n                    <SuperEllipse\n                        size='80'\n                        mainSize={64}\n                        topAddons={topAddonsView}\n                        indicator={indicatorSmall}\n                        bottomAddons={bottomAddons === 'iconView' && iconView}\n                    >\n                        {contentIconView}\n                    </SuperEllipse>\n                </Col>\n            </Row>\n\n            <Row>\n                <RadioGroup\n                    label='Центральный слот'\n                    name='radioGroup'\n                    onChange={onChangeContent}\n                    value={content}\n                >\n                    <Radio label='Иконка' value='icon' size='m' />\n                    <Radio label='Craftwork Emoji' value='emoji' size='m' />\n                    <Radio label='Без контента' value='noContent' size='m' />\n                </RadioGroup>\n            </Row>\n\n            <Row>\n                <RadioGroup\n                    label='Верхний аддон'\n                    name='radioGroup'\n                    onChange={onChangeTopAddons}\n                    value={topAddons}\n                >\n                    <Radio label='Маленький индикатор' value='indicatorSmall' size='m' />\n                    <Radio label='Индикатор' value='indicator' size='m' />\n                    <Radio label='IconView' value='iconView' size='m' />\n                    <Radio label='Без контента' value='noContent' size='m' />\n                </RadioGroup>\n            </Row>\n\n            <Row>\n                <RadioGroup\n                    label='Нижний аддон'\n                    name='radioGroup'\n                    onChange={onChangeBottomAddons}\n                    value={bottomAddons}\n                >\n                    <Radio label='IconView' value='iconView' size='m' />\n                    <Radio label='Без контента' value='noContent' size='m' />\n                </RadioGroup>\n            </Row>\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Updating icons-glyph dependency\nDESCRIPTION: This update involves updating the dependency `icons-glyph`, which likely contains new icons or icon updates, used in the project.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Improving bottomSheet component\nDESCRIPTION: This commit improves the bottomSheet component. No specific details are provided.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/input-autocomplete/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n**BottonSheet:** improved bottomSheet component ([#185](https://github.com/core-ds/core-components/issues/185)) ([ba5fa06](https://github.com/core-ds/core-components/commit/ba5fa06d5f342ac5e04adadb72fd21e1f699c00a))\n```\n\n----------------------------------------\n\nTITLE: Introducing vars bundles\nDESCRIPTION: This feature introduces variable bundles to improve the organization and usage of CSS variables.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/vars/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Applying CSS variables from CSS Modules to IconButton styling\nDESCRIPTION: This snippet imports CSS modules as raw text and applies combined styles to CSS variables for dynamic theming or styling of the IconButton component. Requires dependencies like raw-loader and assumes CSS variables are used in styling.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/icon-button/src/docs/development.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<CssVars css={`${styles}${defaultStyles}`}/>\n```\n\n----------------------------------------\n\nTITLE: CSS Fix for Button Component with withoutBorder Prop\nDESCRIPTION: CSS error fix that prevented the withoutBorder prop from working correctly in the table component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_39\n\nLANGUAGE: CSS\nCODE:\n```\n/* CSS fix applied to ensure withoutBorder prop works correctly */\n.component.withoutBorder {\n  border: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Story for SidePanel with Dynamic Props and Responsive Variants in React JSX\nDESCRIPTION: Implements a Storybook story named 'SidePanel' that renders a SidePanel component variant selected dynamically from responsive, desktop, or mobile implementations. It features state for open/close toggling, multiple Storybook knobs (boolean, select, text) controlling header, footer, sizing, and layout. The story handles conditional rendering of header, content, and footer with appropriate button variants for desktop or mobile. Styling and wrapper styles are derived from query parameters and utilities to enable preview mode. This snippet orchestrates interactive demonstration of component usage in various configurations.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/side-panel/src/docs/Component.stories.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Story name='SidePanel'>\n    {React.createElement(() => {\n        const [open, setOpen] = React.useState(false);\n        const handleModalOpen = () => setOpen(!open);\n        const component = select(\n            'SidePanelComponent',\n            ['SidePanelResponsive', 'SidePanelDesktop', 'SidePanelMobile'],\n            'SidePanelDesktop',\n        );\n        const header = boolean('header', true);\n        const headerTitle = text('header.title');\n        const headerAlign = select('header.align', ['left', 'center'], 'left');\n        const hasCloser = boolean('header.hasCloser', true);\n        const trim = boolean('header.trim', true);\n        const stickyHeader = boolean('header.sticky', false);\n        const stickyFooter = boolean('footer.sticky', false);\n        const footerLayout = select(\n            'footer.layout',\n            ['start', 'center', 'space-between', 'column'],\n            'start',\n        );\n        const SidePanelComponent = React.useMemo(() => {\n            return {\n                SidePanelResponsive: SidePanelResponsive,\n                SidePanelDesktop: SidePanelDesktop,\n                SidePanelMobile: SidePanelMobile,\n            }[component];\n        }, [component]);\n        const props =\n            SidePanelComponent !== SidePanelMobile\n                ? {\n                      size: select('size', [500], 500),\n                  }\n                : {};\n        const previewStyles = stylesStringToObj(getQueryParam('wrapperStyles'));\n        const isPreview = Object.keys(previewStyles).length > 0;\n        const isMobile = SidePanelComponent === SidePanelMobile;\n        const FooterButton = isMobile ? ButtonMobile : ButtonDesktop;\n        return (\n            <div style={{ display: 'inline-block', background: 'transparent', ...previewStyles }}>\n                {!isPreview && (\n                    <Button type='button' size='xs' onClick={handleModalOpen}>\n                        Открыть сайд-панель\n                    </Button>\n                )}\n                <SidePanelComponent\n                    open={open || boolean('open')}\n                    onClose={handleModalOpen}\n                    {...props}\n                >\n                    {header && (\n                        <SidePanelComponent.Header\n                            sticky={stickyHeader}\n                            hasCloser={hasCloser}\n                            title={headerTitle}\n                            trim={trim}\n                            align={headerAlign}\n                        />\n                    )}\n                    <SidePanelComponent.Content>\n                        <Content isPreview={isPreview} />\n                    </SidePanelComponent.Content>\n                    {stickyFooter && (\n                        <SidePanelComponent.Footer sticky={stickyFooter}>\n                            <SidePanelComponent.Controls\n                                layout={footerLayout}\n                                primary={\n                                    <FooterButton size={isMobile ? 'm' : 's'} view='primary'>\n                                        {isPreview ? 'Кнопка' : 'Сохранить'}\n                                    </FooterButton>\n                                }\n                                secondary={\n                                    <FooterButton size={isMobile ? 'm' : 's'} view='secondary'>\n                                        {isPreview ? 'Кнопка' : 'Отмена'}\n                                    </FooterButton>\n                                }\n                            />\n                        </SidePanelComponent.Footer>\n                    )}\n                </SidePanelComponent>\n            </div>\n        );\n    })}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Restore body styles on unmount in Base Modal React component\nDESCRIPTION: This code snippet pertains to a React component managing modal dialogs, specifically restoring the iframe body styles when the modal unmounts to prevent style leakage or layout issues. Dependencies include React and potentially context or state management for modal visibility. The code ensures cleanup and consistent styling behavior after modal closure.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2021.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nuseEffect(() => {\n    return () => {\n        // Restore original styles to body when modal unmounts\n        document.body.style.overflow = '';\n        document.body.style.paddingRight = '';\n    };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Rendering Static Collapse Component in React (JSX)\nDESCRIPTION: This snippet demonstrates the basic usage of the Collapse component wrapped within a responsive div. It utilizes various Typography subcomponents to display styled text, with the collapsed content containing extended information about banking regulations. Dependencies required include React, Collapse, Gap, and Typography components, as well as an isMobile utility for responsive design. The main parameters include font for typography, view for styling, and labels for the Collapse's collapsed and expanded states. The input is a static JSX structure and the output is rendered static interactive content; dynamic state management is not included in this example.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/collapse/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<div style={{width: isMobile() ? 320: 460}}>\n    <Typography.TitleResponsive font='system' view='medium'>\n        Почему банк проверяет мои операции?  \n    </Typography.TitleResponsive>\n    <Gap size='m'/>\n    <Typography.Text font='system' view='primary-medium'>\n        В 2001 году в России начал действовать Федеральный закон №115 «О противодействии легализации доходов, \n        полученных преступным путём, и финансированию терроризма».\n        В рамках закона банки могут блокировать карты, отказывать в проведении сомнительных операций, \n        ограничить доступ в интернет-банк или запрашивать документы, если по операции клиента возникли подозрения. \n    </Typography.Text>\n    <Gap size='m'/>\n    <Collapse collapsedLabel='Подробнее' expandedLabel='Скрыть'>\n        Требования 115-ФЗ и связанных с ним документов Банка России часто меняются, \n        предприниматели не всегда успевают за ними следить.\n        Последствия нарушений «антиотмывочного» законодательства всегда неприятны: \n        приходится остановить бизнес-процессы и доказать банку законность операций. \n        Специалисты «Альфа-банка» собрали понятные рекомендации, как сэкономить время на объяснения и предотвратить блокировки.\n    </Collapse>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing PageIndicatorBullet with Exactly Six Elements in React\nDESCRIPTION: Example showing PageIndicatorBullet with exactly six elements, demonstrating how the component adapts its appearance for this specific number of items. Includes navigation controls and both size options.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/page-indicator/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const elements = 6;\n    const [activeElement, setActiveElement] = React.useState(0);\n    const handlePrevClick = () => setActiveElement((prev) => Math.max(--prev, 0));\n    const handleNextClick = () => setActiveElement((prev) => Math.min(++prev, elements - 1));\n\n    return (\n        <div>\n            <div>\n                <PageIndicatorBullet size={8} activeElement={activeElement} elements={elements} />\n                <Gap size={8} />\n                <PageIndicatorBullet size={6} activeElement={activeElement} elements={elements} />\n            </div>\n            <Row style={{ gap: 'var(--gap-xs)' }}>\n                <Button leftAddons={<ChevronLeftMIcon />} onClick={handlePrevClick} />\n                <Button leftAddons={<ChevronRightMIcon />} onClick={handleNextClick} />\n            </Row>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Tabs for Documentation\nDESCRIPTION: This snippet adds tabbed sections to the documentation, linking to the previously imported markdown files for descriptions, changelog, and development information. The `Tabs` component takes the descriptions, changelog, and development markdown files as children, displaying them within the tabs. This enables users to navigate different aspects of the component documentation. It requires the definition of `Description`, `Changelog`, and `Development` which are imported from their corresponding files.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/src/docs/Component.docs.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Screenshot Tests\nDESCRIPTION: This code shows how to implement dynamic screenshot tests using Playwright.  It interacts with a web page (fills an input field) and then captures a screenshot for comparison.  It uses helper functions to open and close the browser and uses `matchHtml` function to take the snapshot.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/screenshots.stories.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// component.screenshot.test.ts\ndescribe('Input | interactions tests', () => {\n    test('Fill input value', async () => {\n        const pageUrl = createStorybookUrl({ componentName: 'Input' });\n        const { browser, context, page } = await openBrowser(chromium, pageUrl);\n\n        try {\n            await page.fill('input', 'value');\n\n            await matchHtml({ context, page, expect });\n        } catch (error) {\n            // eslint-disable-next-line no-console\n            console.error(error);\n        } finally {\n            await closeBrowser({ browser, context, page });\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing Carret Position on Backspace in Intl Phone Input\nDESCRIPTION: This commit fixes the caret position after pressing the backspace key within the international phone input component. This resolves an issue with incorrect cursor positioning when deleting characters in the input field.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/intl-phone-input/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Posting Storybook URL to PR after push\nDESCRIPTION: This commit configures the system to post the Storybook URL to the Pull Request after a push. This allows the contributors to test their work directly from Storybook.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_159\n\n\n\n----------------------------------------\n\nTITLE: Creating Component Header\nDESCRIPTION: Renders a header for the NumberInput component with its name and a brief description in Russian, aiding users in identifying the component within documentation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/number-input/src/docs/Component.docs.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ComponentHeader name='NumberInput' children='Поле для ввода чисел.' />\n```\n\n----------------------------------------\n\nTITLE: Importing CalendarWithSkeleton in JSX\nDESCRIPTION: Demonstrates how to import the `CalendarWithSkeleton` component from the `@alfalab/core-components/calendar-with-skeleton` package for use in React or JSX-based applications. This import makes the component available for rendering.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CalendarWithSkeleton } from '@alfalab/core-components/calendar-with-skeleton';\n```\n\n----------------------------------------\n\nTITLE: Add file delete disable option\nDESCRIPTION: Provides a prop to disable the delete button in file-upload-item component, giving users control over file management actions and preventing accidental deletions.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_66\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Prop addition for disabling delete button in file-upload-item */\n```\n\n----------------------------------------\n\nTITLE: DataTestId Usage in BottomSheet (JSX)\nDESCRIPTION: This code snippet shows the structure of the object returned by `getBottomSheetTestIds`, which provides a consistent way to apply `dataTestId` attributes to different parts of the BottomSheet component. The function generates test IDs for the bottomSheet, content, footer, header, title, closer, and backButton elements, making it easier to locate and test them.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/bottom-sheet/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    bottomSheet: dataTestId,\n    content: `${dataTestId}-content`,\n    footer: `${dataTestId}-footer`,\n    header: `${dataTestId}-header`,\n    title: `${dataTestId}-header-title`,\n    closer: `${dataTestId}-header-closer`,\n    backButton: `${dataTestId}-header-back-button`,\n};\n```\n\n----------------------------------------\n\nTITLE: Adding onError Callback to calendar-range Feature - JavaScript\nDESCRIPTION: This feature adds an onError callback to the calendar-range component. The callback function will likely be triggered when an error occurs within the calendar range selection process, such as invalid date ranges or selection errors. This allows developers to handle errors more gracefully and provide feedback to the user.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-range/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n### Features\n\n-   **calendar-range:** added onError callback ([#253](https://github.com/core-ds/core-components/issues/253)) ([46e163c](https://github.com/core-ds/core-components/commit/46e163c750427e410d9aa9df6c554a5fbb86eba2))\n```\n\n----------------------------------------\n\nTITLE: Returning dist directory\nDESCRIPTION: This commit returns the dist directory to fix a previous breaking change. This revert ensures compatibility with existing import paths.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/input-autocomplete/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nreturned dist directory ([#199](https://github.com/core-ds/core-components/issues/199)) ([fabc15e](https://github.com/core-ds/core-components/commit/fabc15effa1457ca65ec7238206f1b1fc2a2a613))\n```\n\n----------------------------------------\n\nTITLE: Recent SelectWithTags Changes in Markdown\nDESCRIPTION: A markdown changelog listing version updates and modifications to the SelectWithTags component, including dependency updates, feature additions, and bug fixes.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/select-with-tags/CHANGELOG.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\n## 8.6.13\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   bottom-sheet@6.18.7\n    -   select@17.20.12\n\n## 8.6.12\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   select@17.20.11\n    -   bottom-sheet@6.18.6\n\n## 8.6.11\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   bottom-sheet@6.18.5\n    -   select@17.20.10\n\n## 8.6.10\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   select@17.20.9\n    -   bottom-sheet@6.18.4\n\n## 8.6.9\n\n### Patch Changes\n\n<sup><time>28.02.2025</time></sup>\n\n### [#1596](https://github.com/core-ds/core-components/pull/1596)\n\n-   Убрана обязвтельность пропсов `value` и `OnInput`\n\n-   Обновлены зависимости\n    -   select@17.20.8\n    -   bottom-sheet@6.18.3\n```\n\n----------------------------------------\n\nTITLE: Rendering Option with Amount Positioned Below Label in React\nDESCRIPTION: Defines a React functional component that renders a select option with the amount displayed below the label. Uses layout wrappers and typography components, facilitating flexible display of account options with custom padding and styling. Parameters include amount, padding, and label text.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/select/src/docs/description.mdx#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst renderOption = ({ amount, padding, text }) => (\n    <GenericWrapper alignItems='center' padding={padding}>\n        <GenericWrapper column>\n            <Typography.Text color='secondary' view='primary-small'>\n                {text}\n            </Typography.Text>\n            <Typography.Text view='component-primary'>\n                <Amount\n                    value={amount}\n                    minority={100}\n                    currency='RUR'\n                    view='withZeroMinorPart'\n                    transparentMinor={false}\n                />\n            </Typography.Text>\n        </GenericWrapper>\n    </GenericWrapper>\n);\n```\n\n----------------------------------------\n\nTITLE: Refactoring Import Statements for Core Components Migration in JavaScript\nDESCRIPTION: This snippet demonstrates how to update import statements for migrating from the older version of the FileUploadItem component to the newer version (FileUploadItemV1). It is intended to help maintain backward compatibility when upgrading the core-components library. This snippet requires the developer to manually change import paths in their JavaScript codebase and assures continued usage of legacy component versions until support is deprecated.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/file-upload-item-v1/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { FileUploadItem } from '@alfalab/core-components/file-upload-item';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { FileUploadItemV1 } from '@alfalab/core-components/file-upload-item-v1';\n```\n\n----------------------------------------\n\nTITLE: Circumflexus Retrieval Feature\nDESCRIPTION: Implements circumflexus retrieval functionality within the @alfalab/core-components-alert package. This feature likely involves retrieving specific data or configurations related to circumflexes, enhancing the component's adaptability and configuration options.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/alert/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n-   circumflexus retrieval ([#57](https://github.com/core-ds/core-components/issues/57)) ([3820da8](https://github.com/core-ds/core-components/commit/3820da818bcdcbee6904c648b3e29c3c828fe202))\n```\n\n----------------------------------------\n\nTITLE: Importing DateInput Component\nDESCRIPTION: This code snippet demonstrates how to import the DateInput component from the @alfalab/core-components library for use in a React application. It imports the component using the named import syntax.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/date-input/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DateInput } from '@alfalab/core-components/date-input';\n```\n\n----------------------------------------\n\nTITLE: Running a single codemod transformer\nDESCRIPTION: This command executes a specific codemod transformer (e.g., `button-xs`) on TypeScript files within the `src` directory.  It uses `npx` to run the `@alfalab/core-components-codemod` package and applies the specified transformer to files matching the provided glob pattern. The transformer modifies the code based on its defined rules.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/codemod/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx @alfalab/core-components-codemod --transformers=button-xs --glob='src/**/*.tsx'\n```\n\n----------------------------------------\n\nTITLE: Adding rel=\"noopener noreferrer\" to Buttons\nDESCRIPTION: This modification adds the `rel=\"noopener noreferrer\"` attribute to button elements when the `target` attribute is set to `_blank`.  This improves security by preventing the linked page from accessing the original page's window object. It is a standard security practice to prevent tabnabbing attacks.  The change applies to button components within the core-components library.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_68\n\n\n\n----------------------------------------\n\nTITLE: Updating picker-button dependency\nDESCRIPTION: This entry updates dependencies, setting 'picker-button' to version 10.2.1.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Defining Storybook Documentation Metadata - MDX\nDESCRIPTION: Uses the `Meta` component provided by `@storybook/addon-docs` to configure the documentation page. The `title` prop sets the page title displayed in the Storybook sidebar. The `parameters` prop is used to configure Storybook behavior for this page, specifically hiding the 'Canvas' tab. The `id` provides a unique identifier for the page.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/components.overview.stories.mdx#_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\n<Meta\n    title='Components overview'\n    parameters={{ previewTabs: { canvas: { hidden: true } } }}\n    id='components-overview'\n/>\n```\n\n----------------------------------------\n\nTITLE: Gap Variables Table - Markdown\nDESCRIPTION: This Markdown snippet defines a table that lists the available gap variables and their corresponding pixel values. The gap variables are intended to be used for setting margins and paddings in CSS.  The table includes positive gap values from --gap-0 to --gap-128.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/gaps.stories.mdx#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n{`\n| Название  | Значение |\n| --------- | -------- |\n| --gap-0   | 0px      |\n| --gap-2   | 2px      |\n| --gap-4   | 4px      |\n| --gap-8   | 8px      |\n| --gap-12  | 12px     |\n| --gap-16  | 16px     |\n| --gap-20  | 20px     |\n| --gap-24  | 24px     |\n| --gap-32  | 32px     |\n| --gap-40  | 40px     |\n| --gap-48  | 48px     |\n| --gap-56  | 56px     |\n| --gap-64  | 64px     |\n| --gap-72  | 72px     |\n| --gap-80  | 80px     |\n| --gap-96  | 96px     |\n| --gap-128 | 128px    |\n`}\n```\n\n----------------------------------------\n\nTITLE: Using ArgsTable for CustomButton property documentation in Storybook\nDESCRIPTION: This code renders an ArgsTable component linking to the CustomButton component to display its configurable props within Storybook documentation. It requires '@storybook/addon-docs' for displaying prop tables.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/custom-button/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ArgsTable of={CustomButton} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Component Header with Description (MDX/JSX)\nDESCRIPTION: Renders a custom ComponentHeader element for the page. It specifies the component's name and provides a brief description using the `children` prop. Note that the description text provided in the `children` prop is in Russian.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pattern-lock/src/docs/Component.docs.mdx#_snippet_2\n\nLANGUAGE: MDX\nCODE:\n```\n<ComponentHeader\n    name='PatternLock'\n    children='Компонент для авторизации пользователя с помощью графического ключа.'\n/>\n```\n\n----------------------------------------\n\nTITLE: Styling a second spacer div in JSX\nDESCRIPTION: This snippet displays another styled div used for spacing, similar to the first but with a marginTop property. It uses inline styles with CSS variables for consistent theming, intended to manage vertical spacing in a layout.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/divider/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ height: 24, marginTop: 'var(--gap-8)', backgroundColor: 'var(--color-light-base-bg-secondary)' }} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Switch Components in Different States\nDESCRIPTION: Shows various Switch component configurations, including checked, unchecked, disabled, and their labels. Illustrates rendering static states where switches are either enabled or disabled, highlighting their visual differences and label associations. Dependencies are minimal, primarily React and Switch component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/switch/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nrender(() => {\n    return (\n        <>\n            <Switch checked={true} label='Выбран' />\n            <Gap size='m' />\n            <Switch checked={true} label='Выбран и недоступен' disabled={true} />\n            <Gap size='xl' />\n            <Switch checked={false} label='По умолчанию' />\n            <Gap size='m' />\n            <Switch checked={false} label='По умолчанию и недоступен' disabled={true} />\n        </>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Documentation Utilities in JavaScript\nDESCRIPTION: This snippet imports essential modules and documentation markdown files required for configuring Storybook's documentation pages. Dependencies include '@storybook/addon-docs' for Meta and Markdown helpers, 'storybook/blocks' for custom documentation layouts, and component-specific markdown files for tab content. The imports enable subsequent rendering of dynamic documentation content tied to the AmountInput component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/amount-input/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Fixing missing CSS variables\nDESCRIPTION: This patch corrects the presence of missing CSS variables.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/vars/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Importing Storybook Documentation Components - JavaScript\nDESCRIPTION: Imports the `Meta` component from `@storybook/addon-docs` which is used to define documentation page metadata, and the `ComponentsOverview` component from a local path (`storybook/pages/components-overview`) responsible for rendering the content of the overview page. These imports are necessary setup for creating a custom documentation page in Storybook.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/components.overview.stories.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\nimport { ComponentsOverview } from 'storybook/pages/components-overview';\n```\n\n----------------------------------------\n\nTITLE: Project Setup: Testing, Dependencies, and Storybook Configuration in JavaScript\nDESCRIPTION: This code involves setup scripts for testing (`setupTests`), updating dependencies, and configuring Storybook with MDX story format, and documentation add-ons. It depends on Node.js packages and Storybook extensions to facilitate UI component development, documentation, and testing.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2021.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Setup scripts for tests and Storybook configuration\n// setupTests.js contains testing environment setup code\n// storybook/main.js and preview.js configure MDX stories, addons, and themes\nimport '@storybook/addon-docs';\nimport { addParameters } from '@storybook/react';\n\naddParameters({\n  docs: {\n    container: null,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating calendar@6.2.5\nDESCRIPTION: This patch change updates the calendar component's version to 6.2.5. This indicates a bug fix or a minor feature enhancement within the calendar component. This is a dependency update.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/CHANGELOG.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n-   Обновлены зависимости\n    -   calendar@6.2.5\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Sizes (Mobile)\nDESCRIPTION: This snippet renders buttons with different sizes for mobile using the `ButtonMobile` component with `block` property. It iterates through an array of sizes and renders a button for each size, displaying the size and pixel value.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/button/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst SIZES_MAP = {\n    xl: 72,\n    l: 64,\n    m: 56,\n    s: 48,\n    xs: 40,\n    xxs: 32,\n};\nconst SIZES = ['xl', 'l', 'm', 's', 'xs', 'xxs'];\n\nrender(\n    <Container>\n        {SIZES.map((size, idx) => (\n            <React.Fragment key={size}>\n                <ButtonMobile block={true} size={size} view='primary'>\n                    {`${size.toUpperCase()} (${SIZES_MAP[size]}px)`}\n                </ButtonMobile>\n                {SIZES.length - 1 !== idx && <Gap size='l' />}\n            </React.Fragment>\n        ))}\n    </Container>,\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering a Notice Using Plate and Link Components (React/JSX)\nDESCRIPTION: This snippet demonstrates how to display an attention message indicating that a component is deprecated, using the Plate component for layout and the Link component for navigation. It customizes the appearance with 'view' and 'titleView' properties and embeds a hyperlink to the new component documentation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-input/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Plate\n    view='attention'\n    limitContentWidth={false}\n    title={\n        <>\n            Компонент больше не поддерживается, переходите на новый компонент {''}\n            <Link href='https://core-ds.github.io/core-components/master/?path=/docs/universaldateinput--docs'>\n                UniversalDateInput.\n            </Link>\n        </>\n    }\n    titleView='light'\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Typography Title with AlfaSans Font in TypeScript\nDESCRIPTION: Renders a Typography.Title component with the 'font' prop set to 'alfasans', enabling the use of the custom 'Alfa Interface Sans' typeface. The snippet demonstrates usage in a TypeScript/JSX environment. Make sure 'Typography' is imported and the font-face is properly declared in your CSS for the custom font to display correctly.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/typography.stories.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<Typography.Title font='alfasans'>Заголовок</Typography.Title>\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Addons and Component Stories - JavaScript\nDESCRIPTION: This code snippet imports modules from `@storybook/addon-docs`, `storybook/blocks`, and the component's stories file, as well as markdown files used for description, development, and changelog sections in the storybook documentation. `Meta`, `Markdown`, `ComponentHeader`, and `Tabs` are all used to create a documentation page for the Link component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/link/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Addon Docs Modules\nDESCRIPTION: This snippet imports modules from '@storybook/addon-docs' and 'storybook/blocks'. These modules are crucial for creating documentation pages for Storybook components. The 'Meta' module allows for specifying metadata about the stories and the component. 'ComponentHeader' and 'Tabs' are used for structuring and presenting documentation in a user-friendly way. Requires the installation of Storybook and its relevant addons.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n```\n\n----------------------------------------\n\nTITLE: Importing Modal Components - React\nDESCRIPTION: This snippet demonstrates how to import different modal components from a specified library. It includes compound imports, context imports, and atomic imports for various modal components. The imports cover desktop and mobile variations.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/modal/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Компаунд импорты\nimport { Modal } from '@alfalab/core-components/modal';\nimport { ModalDesktop } from '@alfalab/core-components/modal/desktop';\nimport { ModalMobile } from '@alfalab/core-components/modal/mobile';\n\n// Контекст\nimport { ModalContext } from '@alfalab/core-components/modal/shared';\n\n// Атомарные импорты\nimport { ModalComponentDesktop, ContentDesktop, HeaderDesktop, FooterDesktop, ControlsDesktop } from '@alfalab/core-components/modal/desktop';\nimport { ModalComponentMobile, ContentMobile, HeaderMobile, FooterMobile, ControlsMobile } from '@alfalab/core-components/modal/mobile';\nimport { ModalComponentResponsive, ContentResponsive, HeaderResponsive, FooterResponsive, ControlsResponsive } from '@alfalab/core-components/modal';\n```\n\n----------------------------------------\n\nTITLE: Importing Alfаlab Core Components Separate Variable Sets in CSS\nDESCRIPTION: Multiple CSS snippets import individual sets of variables from Alfаlab core components, such as gaps, border-radius, shadows, and various color schemes (bluetint, addons, decorative, qualitative, sequential, pfm). Each import provides scoped, categorized CSS variables for specific styling aspects. These imports help modularize and selectively apply styles.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/vars/src/docs/description.mdx#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@import '@alfalab/core-components/vars/gaps.css';\n```\n\nLANGUAGE: css\nCODE:\n```\n@import '@alfalab/core-components/vars/border-radius.css';\n```\n\nLANGUAGE: css\nCODE:\n```\n@import '@alfalab/core-components/vars/shadows-bluetint.css';\n```\n\nLANGUAGE: css\nCODE:\n```\n@import '@alfalab/core-components/vars/colors-bluetint.css';\n```\n\nLANGUAGE: css\nCODE:\n```\n@import '@alfalab/core-components/vars/colors-addons.css';\n```\n\nLANGUAGE: css\nCODE:\n```\n@import '@alfalab/core-components/vars/colors-decorative.css';\n```\n\nLANGUAGE: css\nCODE:\n```\n@import '@alfalab/core-components/vars/colors-qualitative.css';\n```\n\nLANGUAGE: css\nCODE:\n```\n@import '@alfalab/core-components/vars/colors-sequential.css';\n```\n\nLANGUAGE: css\nCODE:\n```\n@import '@alfalab/core-components/vars/colors-pfm.css';\n```\n\n----------------------------------------\n\nTITLE: Storybook Story for Confirmation React Component\nDESCRIPTION: This code defines a Storybook story that demonstrates the Confirmation component in various configurations within a React environment. It utilizes multiple knobs for dynamic interaction and manages different confirmation states, screens, and variants to showcase the component's flexibility. Dependencies include React, @storybook/addon-docs, @storybook/addon-knobs, and core components from '@alfalab/core-components'.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/confirmation/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Story, Markdown } from '@storybook/addon-docs';\nimport { select, number, boolean } from '@storybook/addon-knobs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\n\nimport { SelectDesktop } from '@alfalab/core-components-select/desktop';\nimport { useConfirmation } from '@alfalab/core-components-confirmation';\nimport { ConfirmationMobile } from '@alfalab/core-components-confirmation/mobile';\nimport { ConfirmationDesktop } from '@alfalab/core-components-confirmation/desktop';\nimport { Button } from '@alfalab/core-components-button';\nimport { Confirmation } from '@alfalab/core-components-confirmation';\nimport Changelog from '../../CHANGELOG.md?raw';\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport {\n    stylesStringToObj,\n    getQueryParam,\n} from '../../../screenshot-utils/screenshots-story/utils';\n\n<Meta title='Components/Confirmation' id='Confirmation' />\n\n{/* Canvas */}\n\n<Story name='Confirmation'>\n    {React.createElement(() => {\n        const component = select(\n            'ConfirmationComponent',\n            ['ConfirmationResponsive', 'ConfirmationDesktop', 'ConfirmationMobile'],\n            'ConfirmationResponsive',\n        );\n        const variants = [\n            { key: 'success', content: 'Успешный сценарий' },\n            { key: 'error', content: 'Сценарий с ошибкой' },\n            { key: 'fatal', content: 'Сценарий с критичной ошибкой' },\n            {\n                key: 'attempts-left',\n                content: 'Сценарий, когда кончились попытки запроса смс',\n            },\n            {\n                key: 'temp-block',\n                content: 'Сценарий, когда форма временно заблокирована',\n            },\n        ];\n        const [variant, setVariant] = React.useState({\n            key: 'success',\n            content: 'Успешный сценарий',\n        });\n        const {\n            confirmationState,\n            confirmationScreen,\n            confirmationBlockSmsRetry,\n            setConfirmationState,\n            setConfirmationScreen,\n            setConfirmationBlockSmsRetry,\n        } = useConfirmation();\n        const handleInputFinished = () => {\n            setTimeout(() => {\n                switch (variant.key) {\n                    case 'success':\n                        setConfirmationState('INITIAL');\n                        break;\n                    case 'error':\n                        setConfirmationState('CODE_ERROR');\n                        break;\n                    case 'fatal':\n                        setConfirmationScreen('FATAL_ERROR');\n                        break;\n                    case 'attempts-left':\n                        setConfirmationState('CODE_ERROR');\n                        break;\n                    case 'temp-block':\n                        setConfirmationScreen('TEMP_BLOCK');\n                        break;\n                    default:\n                        break;\n                }\n            }, 1000);\n        };\n        const handleSmsRetryClick = () => {\n            setTimeout(() => {\n                if (variant.key === 'attempts-left') {\n                    setConfirmationBlockSmsRetry(true);\n                }\n                setConfirmationState('INITIAL');\n            }, 1000);\n        };\n        const handleTempBlockFinished = () => {\n            setConfirmationScreen('INITIAL');\n            setConfirmationState('CODE_SENDING');\n        };\n        const ConfirmationComponent = React.useMemo(() => {\n            return {\n                ConfirmationResponsive: Confirmation,\n                ConfirmationDesktop,\n                ConfirmationMobile,\n            }[component];\n        }, [component]);\n        const previewStyles = stylesStringToObj(getQueryParam('wrapperStyles'));\n        const isPreview = Object.keys(previewStyles).length > 0;\n        return (\n            <div style={previewStyles}>\n                {!isPreview && (\n                    <SelectDesktop\n                        options={variants}\n                        onChange={({ selected }) => {\n                            setConfirmationState('INITIAL');\n                            setConfirmationScreen('INITIAL');\n                            setConfirmationBlockSmsRetry(false);\n                            setVariant(selected);\n                        }}\n                        selected={variant.key}\n                    />\n                )}\n                <div\n                    key={variant.key}\n                    style={{\n                        boxSizing: 'border-box',\n                        borderRadius: 12,\n                        width: 500,\n                        height: 380,\n                        paddingTop: 48,\n                        ...(isPreview\n                            ? { background: 'var(--color-light-modal-bg-primary)' }\n                            : null),\n                    }}\n                >\n                    <ConfirmationComponent\n                        hideCountdownSection={boolean('hideCountdownSection', false)}\n                        screen={confirmationScreen}\n                        state={confirmationState}\n                        alignContent={select('alignContent', ['left', 'center'], 'center')}\n                        blockSmsRetry={confirmationBlockSmsRetry}\n                        countdownDuration={10000}\n                        requiredCharAmount={number('requiredCharAmount', 5)}\n                        onChangeState={setConfirmationState}\n                        onChangeScreen={setConfirmationScreen}\n                        onInputFinished={handleInputFinished}\n                        onSmsRetryClick={handleSmsRetryClick}\n                        onTempBlockFinished={handleTempBlockFinished}\n                        phone={'+7 ··· ··· 07 24'}\n                        initialScreenHintSlot={\n                            boolean('initialScreenHintSlot', false) ? (\n                                <Button size='s'>Custom Button</Button>\n                            ) : null\n                        }\n                    />\n                </div>\n            </div>\n        );\n    })}\n</Story>\n\n{/* Docs */}\n\n<ComponentHeader name='Confirmation' children='Используется для ввода кода подтверждения.' />\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding desktop/mobile imports to custom-button\nDESCRIPTION: This update adds the ability to import desktop and mobile versions of the `custom-button` component separately. This provides greater flexibility in customizing the component based on the device.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_26\n\n\n\n----------------------------------------\n\nTITLE: Rendering PureCell Comment Component in React JSX\nDESCRIPTION: This snippet renders a PureCell component that includes a comment footer section. It allows selecting vertical and horizontal padding and direction properties for layout control. The component displays main text with a category and an optional comment in the footer area. Dependencies include React, PureCell, and selection utilities enabling UI customization. Inputs include text for comment, category info, padding configurations, and direction; output presents a structured PureCell with a comment displayed.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pure-cell/src/docs/Component.stories.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst verticalPadding = select(\n    'verticalPadding',\n    ['airy', 'default', 'compact', 'tiny', 'none'],\n    'default',\n);\nconst verticalTopPadding = select(\n    'verticalPadding.top',\n    ['airy', 'default', 'compact', 'tiny', 'none', undefined],\n    undefined,\n);\nconst verticalBottomPadding = select(\n    'verticalPadding.bottom',\n    ['airy', 'default', 'compact', 'tiny', 'none', undefined],\n    undefined,\n);\nconst verticalPaddingPrepared = (verticalTopPadding || verticalBottomPadding) ? {top: verticalTopPadding, bottom: verticalBottomPadding } : verticalPadding\n\nconst horizontalPadding = select(\n    'horizontalPadding',\n    ['left', 'right', 'both', 'none'],\n    'none',\n);\nconst direction = select('direction', ['vertical', 'horizontal'], 'horizontal');\nreturn (\n    <PureCell\n        href={text('href', '')}\n        verticalPadding={verticalPaddingPrepared}\n        horizontalPadding={horizontalPadding}\n        direction={direction}\n    >\n        <PureCell.Content>\n            <PureCell.Main>\n                <PureCell.Text titleColor='primary' view='component-primary' rowLimit={1}>\n                    Яндекс Лавка\n                </PureCell.Text>\n                <PureCell.Category\n                    categoryName={'Кафе, рестораны, столовые, бары'}\n                    categoryPercent={10}\n                />\n            </PureCell.Main>\n            <PureCell.Footer>\n                <PureCell.Comment>Комментарий есть</PureCell.Comment>\n            </PureCell.Footer>\n        </PureCell.Content>\n    </PureCell>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Storybook Documentation UI for MaskedInput Component in JSX\nDESCRIPTION: This snippet uses JSX to define the structure of the MaskedInput documentation page in Storybook. The <Meta> component associates the page with the imported component stories. The <ComponentHeader> displays the component name ('MaskedInput') and a Russian-language description specifying its use for masked text input. The <Tabs> component organizes the documentation content into three tabs: a description imported from a markdown file, a changelog displayed via the Markdown component, and development notes imported as another markdown file. This layout enables clear segmentation of relevant documentation information.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/masked-input/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta of={Stories} />\n\n<ComponentHeader name='MaskedInput' children='Используется для ввода текста по указанной маске.' />\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing International Phone Input Components in React\nDESCRIPTION: Demonstrates how to import different versions of the International Phone Input component including responsive, desktop and mobile variants from the core components library.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/international-phone-input/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// responsive версия\nimport { InternationalPhoneInput } from '@alfalab/core-components/international-phone-input';\n\n// desktop версия\nimport { InternationalPhoneInputDesktop } from '@alfalab/core-components/international-phone-input/desktop';\n\n// mobile версия\nimport { InternationalPhoneInputMobile } from '@alfalab/core-components/international-phone-input/mobile';\n```\n\n----------------------------------------\n\nTITLE: Updating `Typography.Text` to include 'tagline' variant\nDESCRIPTION: This change adds a new styling option 'tagline' to the `Typography.Text` component, enabling developers to apply specific font and style settings for tagline text, enhancing visual hierarchy.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst TypographyText = ({ variant }) => {\n  if (variant === 'tagline') {\n    // Apply tagline styles\n  }\n  // Default rendering\n};\n```\n\n----------------------------------------\n\nTITLE: Updating CSP img-src for alfabank.gcdn.co\nDESCRIPTION: Specifies the updated Content Security Policy (CSP) `img-src` directive required for version 8.0.0 due to a new icon CDN. This breaking change introduces the `alfabank.gcdn.co` domain, which must be added to the allowed image sources.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/input/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Configuration\nCODE:\n```\n'self' alfabank.gcdn.co data: 'self'\n```\n\n----------------------------------------\n\nTITLE: Rendering Comment and Gap Components in JSX with Inline Styles\nDESCRIPTION: This snippet demonstrates rendering a div with fixed width that contains multiple Comment components with different contents, separated by Gap components of size 'm'. It illustrates component composition, inline styling, and property usage like 'rowLimit' for limiting comment lines.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/comment/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{width: 290}} >\n    <Comment>Короткий комментарий</Comment>\n    <Gap size='m'/>\n    <Comment>Длинный комментарий без ограничения по количеству строк</Comment>\n    <Gap size='m'/>\n    <Comment rowLimit={2}>Длинный комментарий с ограничением по количеству строк</Comment>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Tabs with Markdown Content in JSX\nDESCRIPTION: This snippet utilizes the Tabs component from Storybook to display multiple sections: description, changelog, and development notes. It inserts imported MDX and raw markdown components as tab content. This approach modularizes documentation, enabling tabbed navigation between explanatory, developmental, and historical change content for the PopupSheet component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/popup-sheet/src/docs/Component.docs.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and Markdown Dependencies in JavaScript\nDESCRIPTION: This snippet imports necessary modules and components for creating Storybook documentation. It loads Storybook meta and markdown utilities, UI blocks for headers and tabs, the component's story definitions, and related markdown/MDX content. These imports set up the environment to build structured documentation panels for the PopupSheet component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/popup-sheet/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Importing NavigationBar and Addons from Alfaleab Core Components in JSX\nDESCRIPTION: This snippet shows how to import the NavigationBar component and its associated ActionIconAddon and ActionTextAddon addons from the '@alfalab/core-components/navigation-bar' package. These imports are necessary to use these components within a React (JSX) project. No additional dependencies are required aside from having the Alfaleab core-components package installed.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/navigation-bar/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { NavigationBar } from '@alfalab/core-components/navigation-bar';\nimport { ActionIconAddon, ActionTextAddon  } from '@alfalab/core-components/navigation-bar/shared';\n```\n\n----------------------------------------\n\nTITLE: Importing Space Component - JavaScript (JSX)\nDESCRIPTION: This snippet imports the Space component from the core-components library. It uses a standard import statement to make the component available for use in the rest of the file. The component is then used for presentation and styling. The 'Space' component likely represents spacing or layout functionalities.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/space/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Space } from '@alfalab/core-components/space';\n```\n\n----------------------------------------\n\nTITLE: Bumping packages version\nDESCRIPTION: This commit bumps the version of various packages. It's a general update across the project.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/input-autocomplete/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\nbump packages version ([#153](https://github.com/core-ds/core-components/issues/153)) ([fd3e082](https://github.com/core-ds/core-components/commit/fd3e08205672129cdce04e1000c673f2cd9c10da))\n```\n\n----------------------------------------\n\nTITLE: Adding dataTestId support\nDESCRIPTION: This update adds support for `dataTestId` to various components, facilitating the use of testing and debugging. It includes adding the data test id to content, footer and more. Additionally the method `getBottomSheetTestIds` is added to find bottom sheet elements, or `get{ComponentName}TestIds` for various other components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Adding types & forwardRef to button\nDESCRIPTION: This commit adds types and the forwardRef functionality to the button component. Adding types improves code safety and readability. forwardRef enables the component to receive a ref, which is useful for advanced component interaction.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_166\n\n\n\n----------------------------------------\n\nTITLE: Providing user notifications for form errors and success states with ARIA live regions\nDESCRIPTION: This snippet demonstrates how to inform users about form errors or success messages using ARIA roles such as `alert` and `aria-live`, ensuring notifications are immediately announced by assistive technologies.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/forms.stories.mdx#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<form>...</form>\n<!-- assertive - сообщение будет прочитано немедленно -->\n<!-- polite - сообщение будет озвучено после текущего -->\n<div role=\"alert\" aria-live=\"assertive\">Ваши настройки не сохранились, попробуйте ещё раз!</div>\n\n<label>\n    Адрес:\n    <input name=\"address\" type=\"text\" aria-describedby=\"address-error\" />\n</label>\n<div id=\"address-error\">Введите корректный адрес</div>\n```\n\n----------------------------------------\n\nTITLE: Applying Font Smoothing in CSS\nDESCRIPTION: Shows the application of cross-browser font smoothing using '-webkit-font-smoothing' and '-moz-osx-font-smoothing'. These CSS properties enhance the on-screen readability of anti-aliased fonts such as Styrene or Alfa Interface Sans. Apply these rules to elements or globally as needed for consistent rendering on macOS and WebKit-based browsers.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/typography.stories.mdx#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n-webkit-font-smoothing: antialiased;\n-moz-osx-font-smoothing: grayscale;\n```\n\n----------------------------------------\n\nTITLE: Fixing value prop in phone-input\nDESCRIPTION: This commit fixes an issue with the `value` prop in the phone-input component, resolving issue #757.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/phone-input/CHANGELOG.md#_snippet_1\n\nLANGUAGE: other\nCODE:\n```\n3ba0168\n```\n\n----------------------------------------\n\nTITLE: Implementing FilterTag with Predefined Value in SelectDesktop\nDESCRIPTION: Example of implementing a FilterTag with a predefined value in a SelectDesktop component. The custom field shows a FilterTag with selected value and no clear button.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/filter-tag/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomField = ({\n    label,\n    selected,\n    setSelectedItems,\n    innerProps: { ref, ...restInnerProps },\n    ...restProps\n}) => (\n    <div ref={ref}>\n        <FilterTag checked={selected} showClear={false} {...restInnerProps} {...restProps}>\n            <b>{selected.content}</b>\n        </FilterTag>\n    </div>\n);\nrender(() => {\n    const options = React.useMemo(\n        () => [\n            { key: '1', content: 'По возрастанию' },\n            { key: '2', content: 'По убыванию' },\n        ],\n        [],\n    );\n\n    const [selected, setSelected] = React.useState([options[0]]);\n\n    const handleChangeSelected = ({ selectedMultiple }) => {\n        setSelected(selectedMultiple);\n    };\n\n    return (\n        <SelectDesktop\n            popoverPosition='bottom-start'\n            options={options}\n            Field={CustomField}\n            onChange={handleChangeSelected}\n            selected={selected}\n            fieldProps={{ size: 32 }}\n            Option={BaseOption}\n        />\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing Smart Error Icon in Input Component with JavaScript\nDESCRIPTION: This commit fixes an issue with the smart error icon within the input component. It ensures that the error icon is displayed correctly based on the input's state, enhancing user feedback and improving the overall user experience. It closes issue #782.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/input-autocomplete/CHANGELOG.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n**input:** smart error icon ([#746](https://github.com/core-ds/core-components/issues/746)) ([f1950d6](https://github.com/core-ds/core-components/commit/f1950d6d516d17d993f0865c10390b6301bb2707)), closes [#782](https://github.com/core-ds/core-components/issues/782)\n```\n\n----------------------------------------\n\nTITLE: Generating Static Screenshot Tests\nDESCRIPTION: This code snippet demonstrates how to create static screenshot tests using a utility function, `setupScreenshotTesting` and  `generateTestCases`.  It defines test cases based on component props. The test generates screenshots based on the provided cases, where cases represents a combination of component props.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/screenshots.stories.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// component.screenshot.test.ts\nconst screenshotTesting = setupScreenshotTesting({\n    it,\n    beforeAll,\n    afterAll,\n    expect,\n});\n\nconst cases = generateTestCases({\n    componentName: 'Input',\n    knobs: {\n        value: 'value',\n        size: ['s', 'm', 'l'],\n        block: [false, true],\n        disabled: [false, true],\n    },\n});\n\ndescribe('Input | screenshots sizes, blocks and disabled', screenshotTesting({ cases }));\n```\n\n----------------------------------------\n\nTITLE: Configuring component properties with ArgsTabs in Storybook\nDESCRIPTION: This JSX snippet demonstrates how to use the ArgsTabs component to display various Table sub-components and related elements within Storybook. The configuration maps component names to their respective implementations, facilitating interactive property documentation and testing.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/table/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ArgsTabs\n    components={{\n        Table: Table,\n        TExpandableRow: Table.TExpandableRow,\n        Pagination: Table.Pagination,\n        TCell: Table.TCell,\n        THead: Table.THead,\n        THeadCell: Table.THeadCell,\n        TSortableHeadCell: Table.TSortableHeadCell,\n        TRow: Table.TRow,\n        Body: Table.TBody,\n    }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Month Input with React\nDESCRIPTION: This snippet renders a month input field. The `UniversalDateInput` is configured with the `month` view to handle month inputs. The `onChange` prop manages the input changes, and `onClear` enables clear function.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/universal-date-input/src/docs/description.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [value, setValue] = React.useState('');\n\n    const handleChange = (month) => setValue(month);\n\n    return (\n        <div style={{ width: isMobile() ? '100%' : 320 }}>\n            <UniversalDateInput\n                value={value}\n                onChange={handleChange}\n                view='month'\n                label='Месяц'\n                labelView={isMobile() ? 'outer' : 'inner'}\n                size={isMobile() ? 48 : 56}\n                breakpoint={BREAKPOINT}\n                block={true}\n                clear={true}\n                onClear={(e) => {\n                    e.stopPropagation();\n                    setValue('');\n                }}\n            />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Updating universal-date-input onChange/onComplete Props\nDESCRIPTION: This update modifies the `onChange` and `onComplete` properties and the `value` property of the `universal-date-input` component. It includes renaming `onChange` to `onInputChange` and `onComplete` to `onChange`, as well as updating the `value` to accept a date/date range, instead of a string. The component also now allows to observe the date completely entered or cleared, this is achieved through the onChange prop.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Structuring Documentation with Tabs in Storybook (JSX)\nDESCRIPTION: Uses the 'Tabs' block to organize the component documentation into separate sections. It renders tabs for 'Description', 'Changelog', and 'Development', embedding content dynamically loaded from external MDX (`Description`, `Development`) and Markdown (`Changelog`) files.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/mq/src/docs/Component.docs.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using CustomPickerButtonMobile Component in Storybook\nDESCRIPTION: Demonstrates the mobile-specific `CustomPickerButtonMobile` component within a Storybook story. It uses the same set of Storybook knobs (`color`, `select`, `text`, `boolean`) as the base component to configure its appearance and behavior, including `backgroundColor`, `contentColor`, `stateType`, `options`, `label`, `size`, `variant`, `disabled`, `loading`, `leftAddons` (with `StarMIcon`), and `showArrow`.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/custom-picker-button/src/docs/Component.stories.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Story name='CustomPickerButtonMobile'>\n    <CustomPickerButtonMobile\n        backgroundColor={color('backgroundColor', '#FF45C3')}\n        contentColor={select('contentColor', CONTENT_COLORS, 'white')}\n        stateType={select('stateType', STATE_TYPES, 'darkening')}\n        options={options}\n        label={text('label', 'Действие')}\n        size={select('size', [32 , 40 , 48 , 56 , 64 , 72], 56)}\n        variant={select('variant', ['default', 'compact'])}\n        disabled={boolean('disabled', false)}\n        loading={boolean('loading', false)}\n        leftAddons={boolean('Иконка слева', false) ? <StarMIcon /> : null}\n        showArrow={boolean('Показывать стрелку', true)}\n    />\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Adding Default Value to useMatchMedia Hook\nDESCRIPTION: A default value has been added to the useMatchMedia hook. The useEffect is also replaced with useLayoutEffect.  This improves the hook's usability and behaviour.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Adding Form Control component\nDESCRIPTION: This commit adds the FormControl component. FormControl is a wrapper component that provides common functionality for form controls, such as labels, validation, and error handling.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_178\n\n\n\n----------------------------------------\n\nTITLE: Importing Storybook Doc Dependencies (MDX/JSX)\nDESCRIPTION: Imports components from Storybook addons and local utilities, along with various content files (.stories, .mdx, .md) needed to construct the documentation page. These imports provide the building blocks and content for the final rendered page.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pattern-lock/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: MDX\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\n\nimport * as Stories from './Component.stories';\n\nimport Development from './development.mdx';\nimport Description from './description.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Removing dist directory in published packages - JavaScript\nDESCRIPTION: This feature removes the 'dist' directory from the published packages. The 'dist' directory typically contains the built and optimized code ready for distribution. Removing it likely changes how the package is structured and how the code is imported/required by consuming projects. This might be done to reduce package size or to change the distribution strategy.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-range/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n### Features\n\n-   removed dist directory in published packages ([#200](https://github.com/core-ds/core-components/issues/200)) ([8af8fee](https://github.com/core-ds/core-components/commit/8af8fee53ca0bd19fa2d1ca1422e0df23096e2c8))\n\n### BREAKING CHANGES\n\n-   Изменена директория расположения индексных файлов в опубликованных пакетах (удалена\n    директория dist)\n\nCo-authored-by: Vladimir Gevak <VGevak@alfabank.ru>\n```\n\n----------------------------------------\n\nTITLE: Fixing input error icon in core-components\nDESCRIPTION: This commit fixes an issue with the smart error icon in the input component. It addresses a bug reported in issue #782.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/phone-input/CHANGELOG.md#_snippet_0\n\nLANGUAGE: other\nCODE:\n```\nf1950d6\n```\n\n----------------------------------------\n\nTITLE: Animations for TabBar Icons in CSS\nDESCRIPTION: CSS styles defining animations and transitions for TabBar icons. Includes scale and rotate animations with keyframes, and basic transitions for tab color and icon transformations.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tab-bar/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n.tab {\n    transition: color 100ms ease-in-out;\n}\n\n.icon {\n    transition: transform 100ms ease-in-out;\n}\n\n.tab:not(.selected):active .icon {\n    transform: scale(0.8);\n}\n\n.scale {\n    animation: scale_animation 300ms ease-in-out;\n}\n\n.rotate {\n    animation: rotate_animation 600ms ease-in-out;\n}\n\n@keyframes scale_animation {\n    0% {\n        transform: scale(1);\n    }\n    50% {\n        transform: scale(1.2);\n    }\n    100% {\n        transform: scale(1);\n    }\n}\n\n@keyframes rotate_animation {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a new domain to the img-src list\nDESCRIPTION: This change adds a new domain ('alfabank.gcdn.co') to the list of allowed sources for images in the 'img-src' directive of the Content Security Policy (CSP). This ensures that images from the specified domain can be loaded. This change is required to address potential security vulnerabilities and is a breaking change as it modifies the application's security configuration.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar/CHANGELOG.md#_snippet_0\n\nLANGUAGE: unknown\nCODE:\n```\nДобавьте новый домен в список разрешенных 'img-src': `'self' alfabank.gcdn.co data: 'self'`\n```\n\n----------------------------------------\n\nTITLE: Demonstrating FilterTag States with Disabled Functionality\nDESCRIPTION: Example showing different states of the FilterTag component, including active/inactive and disabled states. The disabled state can be toggled with a Switch component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/filter-tag/src/docs/description.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [disabled, setDisabled] = React.useState(false);\n\n    return (\n        <Container>\n            <Row align='middle'>\n                <FilterTag size={32} checked={false} disabled={disabled}>\n                    <span>Label</span>\n                </FilterTag>\n                <Gap size={12} direction='horizontal' />\n                <FilterTag size={32} checked={true} disabled={disabled}>\n                    {disabled ? (\n                        <span>Label</span>\n                    ) : (\n                        <span>\n                            Label:<b> Value</b>\n                        </span>\n                    )}\n                </FilterTag>\n            </Row>\n            <Gap size={24} />\n            <Switch\n                label='Недоступно'\n                checked={disabled}\n                onChange={() => setDisabled((prevState) => !prevState)}\n            />\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Typography Variables and Mixins in CSS\nDESCRIPTION: Shows how to import the typography CSS variables and use typography mixins from Alfаlab core components. The example includes material to import the typography.css file, then use a SCSS mixin like headline_xlarge in a class. This allows consistent typography styling across the project through reusable variable sets and mixins.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/vars/src/docs/description.mdx#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@import '@alfalab/core-components/vars/typography.css';\n\n//  Использование миксина\n.class-name {\n    @mixin headline_xlarge;\n}\n```\n\n----------------------------------------\n\nTITLE: Text Overflow Handling\nDESCRIPTION: This snippet demonstrates how to limit the number of lines of text displayed and truncate the text using the `rowLimit` property of the `Text` component.  The width of the containing div is dynamically set based on the `isMobile()` function, which is assumed to be available in the context.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/text/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ width: isMobile() ? 320 : 430 }}>\n    <Text rowLimit={1}>\n        Я взял со стола, как теперь помню, червонного туза и бросил кверху: дыхание у всех\n        остановилось;\n    </Text>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Collapse component toggle using expanded prop (React, JavaScript)\nDESCRIPTION: This snippet implements a Collapse component that toggles its expanded state based on an 'expanded' prop, allowing controlled open/close behavior. Dependencies include React for component state management. It enhances the component's flexibility for parent-controlled visibility transitions.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2021.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Collapse({ expanded, children }) {\n  return (\n    <div style={{ maxHeight: expanded ? 'none' : '0', overflow: 'hidden' }}>\n      {children}\n    </div>\n  );\n}\n// Usage: <Collapse expanded={isOpen}>Content</Collapse>\n```\n\n----------------------------------------\n\nTITLE: Setting up Storybook documentation for Tooltip component in JSX\nDESCRIPTION: This code configures the Storybook documentation page for the Tooltip component. It imports Storybook addons, custom blocks, component stories, and documentation fragments, then renders a structured documentation page with tabs for different sections.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tooltip/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta of={Stories} />\n\n<ComponentHeader\n    name='Tooltip'\n    children='Используется для отображения дополнительной информации.'\n/>\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Themes for Tabs\nDESCRIPTION: Introduces and applies theme variants to Tabs components such as click and site themes, enhancing customization and visual style consistency across applications.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_131\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-themes theme implementation\n```\n\n----------------------------------------\n\nTITLE: Updating confirmation Subtitle Visibility\nDESCRIPTION: This update ensures that the \"Code sent to\" subtitle is not displayed in the `confirmation` component if the phone number is not provided. This improves the user experience and prevents the display of unnecessary information.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Feat, change api, add PureAmount\nDESCRIPTION: This commit implements features, changes the API, and adds a PureAmount component. This update includes adding features and API changes for the amount component and adding a 'PureAmount' component. PureAmount is used to prevent the re-renders of its child elements.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_174\n\n\n\n----------------------------------------\n\nTITLE: Adding collapsible prop to Tabs\nDESCRIPTION: This section introduces the `collapsible` prop to the Tabs component, enabling tabs to collapse into a PickerButton when they don't fit in the window. It also adds a hook called `use-collapsible-elements` to watch for container width changes.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Adding Skeleton loading component\nDESCRIPTION: Implements a Skeleton component to show placeholder loading UI during asynchronous operations. Uses React, with customizable styles and animation effects, to improve perceived performance.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_119\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-skeleton component implementation\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta and Component Header - JavaScript\nDESCRIPTION: This section configures the Storybook Meta and ComponentHeader components. The `<Meta>` component links the component's stories. The `<ComponentHeader>` component renders the component's name and a brief description. The `children` prop in `<ComponentHeader>` provides a description of the Link component, while the `name` prop specifies the component's name as 'Link'.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/link/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Meta of={Stories} />\n\n<ComponentHeader\n    name='Link'\n    children='Ссылка — элемент навигации, который обозначает возможность перехода на другую страницу или вызова нового информационного слоя.'\n/>\n```\n\n----------------------------------------\n\nTITLE: Per-Page Switching Pagination in React\nDESCRIPTION: This snippet demonstrates pagination configured for per-page navigation by setting the 'view' prop to 'per-page'. It allows users to navigate through data one page at a time, suitable for detailed or step-by-step browsing scenarios.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pagination/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nrender(() => {\n    const DATA_SIZE = 20;\n    const PER_PAGE = 1;\n\n    const [page, setPage] = React.useState(0);\n\n    const handlePageChange = pageIndex => setPage(pageIndex);\n\n    const pagesCount = Math.ceil(DATA_SIZE / PER_PAGE);\n\n    return (\n        <Container align='center'>\n            <Pagination\n                currentPageIndex={page}\n                pagesCount={pagesCount}\n                onPageChange={handlePageChange}\n                view='per-page'\n            />\n        </Container>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Notification component with feature close button\nDESCRIPTION: A React notification component that displays messages or alerts to users, with options for closing the notification. Dependencies include React and styling libraries, with parameters controlling message content and visibility. It enhances user feedback mechanisms.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_107\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-notification component implementation\n```\n\n----------------------------------------\n\nTITLE: Adding support for `defaultMatchMedia` prop in component for fallback media query\nDESCRIPTION: This feature adds a new property to components allowing developers to specify a fallback value for media queries via `defaultMatchMediaValue`. It enhances responsiveness and adaptive behavior in environments where matchMedia may not be supported.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst useMatchMedia = ({ defaultMatchMediaValue }) => {\n  // Hook logic that uses fallback value if matchMedia is unavailable\n};\n```\n\n----------------------------------------\n\nTITLE: Labeling form elements with labels and ARIA attributes in HTML\nDESCRIPTION: This snippet illustrates best practices for associating labels with form controls using `<label>`, `for`, and ARIA attributes like `aria-labelledby` and `aria-label` to enhance accessibility.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/forms.stories.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n⛔ Плохо\n<label>Электронная почта</label>\n<input type=\"text\" />\n\n✅ Хорошо\n<label>\n    Электронная почта\n    <input type=\"email\" />\n</label>\n\n✅ Хорошо\n<input type=\"text\" aria-label=\"Поиск по странам\" />\n<button>Найти</button>\n```\n\n----------------------------------------\n\nTITLE: Loading CSS variables\nDESCRIPTION: This snippet is used to load CSS variables from the index.module.css file. The raw-loader is used to import the CSS as a string, allowing it to be used with the CssVars component in Storybook to display available CSS variables for the component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tooltip/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nimport styles from '!!raw-loader!../index.module.css';\n```\n\n----------------------------------------\n\nTITLE: Adding Masked Input\nDESCRIPTION: This commit adds the masked input component. The masked input component allows for the input to be formatted, such as a phone number or credit card. This provides a better user experience and ensures the input data's format is correct.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_154\n\n\n\n----------------------------------------\n\nTITLE: Updating select Dependency\nDESCRIPTION: This update updates the `downshift` dependency used by the `select` component to version 8.3.1. Downshift is a library commonly used for building accessible autocomplete, dropdown, and select components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Adding loading state\nDESCRIPTION: This commit adds the loading state to the button component. The loading state is displayed when an action is in progress, such as an API request, preventing user interaction.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_176\n\n\n\n----------------------------------------\n\nTITLE: Updating picker-button dependency\nDESCRIPTION: This section updates the dependencies, specifically the 'picker-button' component to version 10.3.0.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Adding Textarea component\nDESCRIPTION: Implements a multi-line input, Textarea component, with support for controlled and uncontrolled modes. Uses React, with props for height, value, and change handlers, enabling multi-line user input.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_129\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-textarea implementation\n```\n\n----------------------------------------\n\nTITLE: Updating picker-button dependency\nDESCRIPTION: The dependencies are updated. The 'picker-button' component is updated to version 10.3.4.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Importing FilterTag Components in React\nDESCRIPTION: Shows how to import the different versions of the FilterTag component from @alfalab/core-components. The responsive version is imported from the main path, while desktop and mobile versions have specific import paths.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/filter-tag/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FilterTag } from '@alfalab/core-components/filter-tag';\nimport { FilterTagMobile } from '@alfalab/core-components/filter-tag/mobile';\nimport { FilterTagDesktop } from '@alfalab/core-components/filter-tag/desktop';\n```\n\n----------------------------------------\n\nTITLE: Update CSP img-src Directive\nDESCRIPTION: Provides the new value for the Content Security Policy 'img-src' directive as part of a breaking change. This update is necessary to allow images (specifically icons) to load from the new CDN domain 'alfabank.gcdn.co'. Users must manually update their CSP configuration.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/modal/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Configuration\nCODE:\n```\n'self' alfabank.gcdn.co data: 'self'\n```\n\n----------------------------------------\n\nTITLE: ToastPlate Migration Example\nDESCRIPTION: This snippet demonstrates the changes required for migrating the toast-plate component. Specifically, it shows the updated format for the `getBadgeIcons` prop, which now expects an object with nested objects for each badge type and size, referencing the desired icon.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/toast-plate/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  'positive-checkmark': {\n      24: AScoresCircleMIcon,\n  },\n  'negative-cross': {\n    ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing full-width blocks with Space component in JSX\nDESCRIPTION: Shows how to use the Space component with the fullWidth property to create horizontally spaced full-width blocks. This arrangement creates 5 blocks that expand to fill the container width with 12px spacing between them.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/space/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const styleBlock = {\n        width: '100%',\n        height: '32px',\n        borderRadius: '8px',\n        backgroundColor: 'var(--color-light-neutral-translucent-200)',\n    };\n    return (\n        <Space useCssGaps={true} direction='horizontal' size={12} fullWidth>\n            {new Array(5).fill(null).map((_, idx) => (\n                <div key={idx} style={styleBlock} />\n            ))}\n        </Space>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Add all props forwarding in CalendarInput component (React, JavaScript)\nDESCRIPTION: This snippet enables the CalendarInput component to pass all received props to the underlying calendar element via spread operator, facilitating customization and extensibility. Dependencies include React. It simplifies prop management for additional attributes or event handlers.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2021.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction CalendarInput(props) {\n  return <Calendar {...props} />;\n}\n// Usage: <CalendarInput dateFormat=\"MM/DD/YYYY\" />\n```\n\n----------------------------------------\n\nTITLE: Fixing TSortableHeadCell type\nDESCRIPTION: This update fixes an issue where the type of TSortableHeadCell in the table component was not correctly implemented with stickyHeader. This involved ensuring that the type definition was correctly associated with the sticky header feature.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/table/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Ensuring correct scroll behavior on select options in Safari\nDESCRIPTION: This patch modifies select component behavior so that clicking on options prevents excessive scrolling, enhancing usability on Safari browsers.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst handleOptionClick = (event) => {\n  event.stopPropagation();\n};\n```\n\n----------------------------------------\n\nTITLE: Adding href prop, types & styles to button\nDESCRIPTION: This commit adds the 'href' property, and updates the types and styles for the button component. The href prop allows the button to function as a hyperlink.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_168\n\n\n\n----------------------------------------\n\nTITLE: Updating picker-button dependency\nDESCRIPTION: This section updates the 'picker-button' dependency to version 10.3.1.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Tag Size Feature and Breaking Change\nDESCRIPTION: Adds a 40px tag size and adjusts tag spacing. A breaking change replaces the 'xs' tag size with 'xxs', necessitating updates for users relying on the previous 'xs' size.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/alert/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n-   feat(tag): добавлен тэг размера 40px, изменены отступы\n\nДобавлен тэг размером 40px, изменены отступы. Тем, кто использовал размер xs, надо заменить размер\nна xxs.\n\n-   **button:** Тэг размера xs теперь имеет размер 40px. Тем, кто использовал размер xs, надо\n    заменить размер на xxs. Можно воспользоваться codemod.\n```\n\n----------------------------------------\n\nTITLE: Replacing input type 'card' with inputMode 'numeric' in Input component via codemod\nDESCRIPTION: This code modification automates the conversion of input components with attribute type='card' to attribute inputMode='numeric', improving input behavior for numeric entry, especially on mobile browsers. It relies on a codemod script used during codebase refactoring.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst replaceTypeWithInputMode = (ast) => {\n  // Traverse AST and replace attribute 'type'='card' with 'inputMode'='numeric'\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Alfаlab Core Components CSS Bundle in Project Root CSS\nDESCRIPTION: Shows how to include a prepared CSS bundle from Alfаlab core components in a root-level CSS file, allowing all bundled variables and mixins to be available globally within the project styles. This ensures consistent variables usage across components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/vars/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* app.css */\n@import '@alfalab/core-components/vars/bundle/click.css';\n```\n\n----------------------------------------\n\nTITLE: Importing Styling Variables Using Raw-Loader for Toast Plate in JavaScript\nDESCRIPTION: This snippet imports styling variables for the toast component using webpack's raw-loader, allowing access to CSS as a raw string. It facilitates custom styling and theming based on imported styles. The styles are imported from a CSS file located in the parent directory.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/toast-plate/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: JavaScript/JSX\nCODE:\n```\nimport styles from '!!raw-loader!../vars.css';\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Variables from Styles in JSX\nDESCRIPTION: This snippet demonstrates how to apply CSS variables extracted from a CSS module to a React component via the CssVars block, facilitating styling customization by passing the styles object. It requires the 'storybook/blocks' and a CSS module as dependencies.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/list-header/src/docs/development.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<CssVars css={styles} />\n```\n\n----------------------------------------\n\nTITLE: Rendering and Styling NavigationBar - React\nDESCRIPTION: This is the main part of the React component. It initializes several state variables using `React.useState` to manage the selected options for different aspects of the `NavigationBar`. It defines content for the left, right, and bottom addons of the navigation bar. It also defines styles to control the appearance. The component renders the `NavigationBar` and several `SelectMobile` components for user configuration and updates the `NavigationBar` based on user selections.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/navigation-bar/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nrender(() => {\n    const [alignViewSelected, setAlignView] = React.useState(ALIGN_SELECT_OPTIONS[0].key);\n    const [backgroundViewSelected, setBackgroundView] = React.useState(\n        BACKGROUND_SELECT_OPTIONS[0].key,\n    );\n    const [borderViewSelected, setBorderView] = React.useState(BORDER_SELECT_OPTIONS[0].key);\n    const [stickyViewSelected, setStickyView] = React.useState(STICKY_SELECT_OPTIONS[0].key);\n\n    const [mainSelected, setMainView] = React.useState(MAIN_SELECT_OPTIONS[0].key);\n    const [leftSelected, setLeftView] = React.useState(LEFT_SELECT_OPTIONS[0].key);\n    const [rightSelected, setRightView] = React.useState(RIGHT_SELECT_OPTIONS[0].key);\n    const [bottomSelected, setBottomView] = React.useState(BOTTOM_SELECT_OPTIONS[0].key);\n\n    const [selectedId, setSelectedId] = React.useState(1);\n    const [scrollTop, setScrollTop] = React.useState(false);\n\n    const mainContent = {\n        title: { title: 'Название экрана', subtitle: undefined },\n        titleWithSubtitle: { title: 'Название экрана', subtitle: 'Подпись экрана' },\n        no: { title: undefined, subtitle: undefined },\n    };\n\n    const leftContent = {\n        back: <ActionIconAddon action='back' />,\n        floatingBack: <ActionIconAddon action='floatingBack' />,\n        primary: <ActionTextAddon text='Label' action='primary' />,\n        secondary: <ActionTextAddon text='Label' action='secondary' />,\n        no: undefined,\n    };\n\n    const rightContent = {\n        close: <ActionIconAddon action='close' />,\n        primary: <ActionTextAddon text='Label' action='primary' />,\n        secondary: <ActionTextAddon text='Label' action='secondary' />,\n        oneIcon: <ShowIcontAddons quantity={1} />,\n        twoIcons: <ShowIcontAddons quantity={2} />,\n        threeIcons: <ShowIcontAddons quantity={3} />,\n        no: undefined,\n    };\n\n    const border = {\n        yes: true,\n        no: false,\n        scroll: scrollTop,\n    };\n\n    const wrapperBottomStyles = {\n        padding: '8px 12px 0px',\n    };\n\n    const input = (\n        <div style={wrapperBottomStyles}>\n            <Input block leftAddons={<MagnifierMIcon color='#86868A' />} placeholder='Поиск' />\n        </div>\n    );\n\n    const segmentedControl = (\n        <div style={wrapperBottomStyles}>\n            <SegmentedControl onChange={(id) => setSelectedId(id)} selectedId={selectedId}>\n                <Segment id={1} title='Label' />\n                <Segment id={2} title='Label' />\n            </SegmentedControl>\n        </div>\n    );\n\n    const bottomContent = {\n        input,\n        segmentedControl: segmentedControl,\n        no: undefined,\n    };\n\n    const wrapperStyles = {\n        height: 635,\n        overflowY: 'scroll',\n        width: 360,\n        margin: 'var(--gap-20-neg)',\n    };\n\n    const handleScroll = (event) => {\n        const scrolledToHeader = event.currentTarget.scrollTop > 0;\n        setScrollTop(scrolledToHeader);\n    };\n\n    const css = `\n        div[data-test-id='title'] {\n            padding: 0 var(--gap-4);\n        }\n    `;\n    \n    return (\n        <div style={wrapperStyles} onScroll={handleScroll}>\n            <style>{css}</style>\n            <NavigationBar\n                title={mainContent[mainSelected].title}\n                subtitle={mainContent[mainSelected].subtitle}\n                leftAddons={leftContent[leftSelected]}\n                rightAddons={rightContent[rightSelected]}\n                bottomAddons={bottomContent[bottomSelected]}\n                align={alignViewSelected}\n                backgroundColor={backgroundViewSelected}\n                border={border[borderViewSelected]}\n                sticky={stickyViewSelected === 'yes'}\n            />\n            <Gap size={24} />\n            <div style={{ margin: '0px 16px 20px' }}>\n                <Space size={24} fullWidth>\n                    <Typography.TitleMobile\n                        view='xsmall'\n                        font='system'\n                        weight='semibold'\n                        dataTestId='title'\n                    >\n                        Основные настройки\n                    </Typography.TitleMobile>\n                    <SelectMobile\n                        block={true}\n                        options={BACKGROUND_SELECT_OPTIONS}\n                        label='Цвет фона'\n                        labelView='outer'\n                        selected={backgroundViewSelected}\n                        onChange={({ selected }) => setBackgroundView(selected.key)}\n                        Option={BaseOption}\n                        size={48}\n                    />\n                    <SelectMobile\n                        block={true}\n                        options={BORDER_SELECT_OPTIONS}\n                        label='Бордер'\n                        labelView='outer'\n                        selected={borderViewSelected}\n                        onChange={({ selected }) => setBorderView(selected.key)}\n                        Option={BaseOption}\n                        size={48}\n                    />\n                    <SelectMobile\n                        block={true}\n                        options={ALIGN_SELECT_OPTIONS}\n                        label='Выравнивание'\n                        labelView='outer'\n                        selected={alignViewSelected}\n                        onChange={({ selected }) => setAlignView(selected.key)}\n                        Option={BaseOption}\n                        size={48}\n                    />\n                    <SelectMobile\n                        block={true}\n                        options={STICKY_SELECT_OPTIONS}\n                        label='Положение'\n                        labelView='outer'\n                        selected={stickyViewSelected}\n                        onChange={({ selected }) => setStickyView(selected.key)}\n                        Option={BaseOption}\n                        size={48}\n                    />\n                </Space>\n                <Gap size={24} />\n                <Space size={24} fullWidth>\n                    <Typography.TitleMobile\n                        view='xsmall'\n                        font='system'\n                        weight='semibold'\n                        dataTestId='title'\n                    >\n                        Контент\n                    </Typography.TitleMobile>\n                    <SelectMobile\n                        block={true}\n                        options={MAIN_SELECT_OPTIONS}\n                        label='Основной слот'\n                        labelView='outer'\n                        selected={mainSelected}\n                        onChange={({ selected }) => setMainView(selected.key)}\n                        Option={BaseOption}\n                        size={48}\n                    />\n                    {alignViewSelected === 'center' && (\n                        <SelectMobile\n                            block={true}\n                            options={LEFT_SELECT_OPTIONS}\n                            label='Левый слот'\n                            labelView='outer'\n                            selected={leftSelected}\n                            onChange={({ selected }) => setLeftView(selected.key)}\n                            Option={BaseOption}\n                            size={48}\n                        />\n                    )}\n                    <SelectMobile\n                        block={true}\n                        options={RIGHT_SELECT_OPTIONS}\n                        label='Правый слот'\n                        labelView='outer'\n                        selected={rightSelected}\n                        onChange={({ selected }) => setRightView(selected.key)}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Docs Tabs with MDX - JavaScript\nDESCRIPTION: This snippet configures a Storybook documentation page for the Gallery component by importing Storybook blocks and markdown files, then setting up documentation tabs for description, changelog, and development notes. Dependencies include Storybook's addon-docs, MDX component files, and a raw markdown loader. The code references Stories for documentation context, and the Tabs component passes in rendered markdown or MDX for each documentation tab. The input is the documentation sources and the Gallery component stories, and the output is a structured, multi-tab documentation page in Storybook.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/gallery/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta of={Stories} />\n\n<ComponentHeader\n    name='Gallery'\n    children='Используется для просмотра изображений.'\n/>\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating index.js Format\nDESCRIPTION: This update changes the format of the `index.js` file in the root of the package to CommonJS (cjs) format.  This change affects how the components are imported and used within other parts of the project.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Updating package versions in core components\nDESCRIPTION: This update involves updating package versions including `@alfalab/data`, `@alfalab/hooks`, and `@alfalab/utils`. These updates fix build issues and potentially include new features.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Rendering Backdrop Component Usage Example in React - JSX\nDESCRIPTION: This code snippet demonstrates the usage of the Backdrop component within a React function, utilizing the useState hook to control the open state of the Backdrop. It renders a Button that toggles the Backdrop's visibility and dynamically changes its label based on state, and also closes the Backdrop when it is clicked. Dependencies include React (with hooks), the Backdrop and Button components, a utility function isMobile(), and the BREAKPOINT constant. The key parameters include the open prop for Backdrop, event handlers for click events, and optional sizing and responsive styling for Button. Inputs include user clicks on the button or backdrop; expected output is a modal overlay that appears or disappears in response. The snippet assumes all dependencies are properly imported and follows standard React conventions.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/backdrop/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const [open, setOpen] = React.useState(false);\n\n    return (\n        <div style={{ zIndex: 1, position: 'relative' }}>\n            <Button \n                onClick={() => setOpen(!open)} \n                size='m' \n                block={isMobile()} \n                breakpoint={BREAKPOINT}\n            >\n                {open ? 'Закрыть Backdrop' : 'Показать Backdrop'}\n            </Button>\n            <Backdrop open={open} onClick={() => setOpen(false)} />\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Changing height of Textarea component\nDESCRIPTION: Adjusts the height styling of the Textarea component to meet design specifications. Uses CSS or style-in-JS, ensuring usability and consistent layout.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_130\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-textarea height styling\n```\n\n----------------------------------------\n\nTITLE: Fixing default import in CJS formats\nDESCRIPTION: This patch fixes an issue with default imports in CJS (CommonJS) formats.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/vars/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Updating picker-button dependency\nDESCRIPTION: This section updates the 'picker-button' dependency to version 10.1.1.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Importing UniversalModal Mobile Variant in React (JSX)\nDESCRIPTION: This snippet covers the import of mobile-version UniversalModal components, their props types, and auxiliary button components from '@alfalab/core-components/universal-modal/mobile'. It demonstrates both individual and grouped import methods. '@alfalab/core-components/universal-modal' must be installed as a dependency. Each component accepts props such as UniversalModalMobileProps, ContentMobileProps, HeaderMobileProps, and FooterMobileProps, tailored for mobile UIs.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/universal-modal/src/docs/development.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// Atom import\nimport { UniversalModalMobileComponent } from '@alfalab/core-components/universal-modal/mobile';\nimport type { UniversalModalMobileProps } from '@alfalab/core-components/universal-modal/mobile';\n\nimport { ContentMobile } from '@alfalab/core-components/universal-modal/mobile';\nimport type { ContentMobileProps } from '@alfalab/core-components/universal-modal/mobile';\n\nimport { HeaderMobile } from '@alfalab/core-components/universal-modal/mobile';\nimport type { HeaderMobileProps } from '@alfalab/core-components/universal-modal/mobile';\n\nimport { FooterMobile } from '@alfalab/core-components/universal-modal/mobile';\nimport type { FooterMobileProps } from '@alfalab/core-components/universal-modal/mobile';\n\n// Compound import\nimport { UniversalModalMobile } from '@alfalab/core-components/universal-modal/mobile';\nimport type { UniversalModalMobileProps } from '@alfalab/core-components/universal-modal/mobile';\n\n// Components\nimport { ArrowButtonMobile, CrossButtonMobile } from '@alfalab/core-components/universal-modal/mobile';\n```\n\n----------------------------------------\n\nTITLE: Implementing the Input with Icons and Addons in JavaScript\nDESCRIPTION: This code enhances input components by adding support for icons and addons, improving user input flexibility. It manages icons, props, and styling updates, facilitating more complex input fields for forms, depending on React and CSS modules.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2021.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Input component with icons and addons\nimport styles from './input-with-icons.css';\n\nfunction InputWithIcons({ icon, addon, ...props }) {\n  return (\n    <div className={styles.inputWrapper}>\n      {icon && <span className={styles.icon}>{icon}</span>}\n      <input {...props} />\n      {addon && <span className={styles.addon}>{addon}</span>}\n    </div>\n  );\n}\n\nexport default InputWithIcons;\n```\n\n----------------------------------------\n\nTITLE: Importing Alert Components in JavaScript/React\nDESCRIPTION: This snippet shows the import statements necessary to include the Alert component and its responsive variants in a React project. It imports the main Alert component alongside its desktop and mobile versions from the '@alfalab/core-components' library.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/alert/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Alert } from '../index';\n\n// Responsive\nimport { Alert } from '@alfalab/core-components/alert';\n\n// Desktop version\nimport { AlertDesktop } from '@alfalab/core-components/alert/desktop';\n\n// Mobile version\nimport { AlertMobile } from '@alfalab/core-components/alert/mobile';\n```\n\n----------------------------------------\n\nTITLE: Fixing Table and TRow types\nDESCRIPTION: This fix modifies the type definitions for the `Table` and `TRow` components, ensuring that `Table` can only comprise of `TBody`, and `TRow` comprises a single cell. This change ensures a more robust component structure and promotes better type safety within the code.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/table/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Updating CSP img-src for alfabank.servicecdn.ru\nDESCRIPTION: Specifies the updated Content Security Policy (CSP) `img-src` directive required for version 9.0.0. This breaking change introduces the `alfabank.servicecdn.ru` domain for hosting images, requiring it to be added to the allowed sources.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/input/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Configuration\nCODE:\n```\n'self' alfabank.servicecdn.ru data: 'self'\n```\n\n----------------------------------------\n\nTITLE: Importing PickerButton and Variants from Local Modules\nDESCRIPTION: This snippet imports the PickerButton component along with its desktop and mobile variants from local module paths. It demonstrates how the components are organized and imported for use within a project, supporting responsive design strategies.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/picker-button/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { PickerButton } from '../index';\nimport { PickerButtonDesktop } from '../desktop';\nimport { PickerButtonMobile } from '../mobile';\n```\n\n----------------------------------------\n\nTITLE: Setting Component Metadata - JavaScript\nDESCRIPTION: This snippet sets the component metadata within Storybook. It utilizes the `<Meta>` component from `@storybook/addon-docs` and passes the `Stories` object as a prop. This enables Storybook to recognize and process the defined stories associated with the component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/chart/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Meta of={Stories} />\n```\n\n----------------------------------------\n\nTITLE: Adding sideEffects to system-message\nDESCRIPTION: This section includes the addition of `sideEffects: false` to the `system-message` component's `package.json`. The `sideEffects: false` property helps improve build performance by allowing bundlers to perform tree-shaking more effectively.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Migrate slider to noui-slider\nDESCRIPTION: Replaces the existing slider implementation with the noui-slider library for enhanced performance and features. Requires dependency on the noui-slider package and integration with existing slider logic.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_51\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Slider component migration to noui-slider library */\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Variables to Style Toast Plate Components in JavaScript\nDESCRIPTION: This JSX snippet applies CSS variables to toast components using the CssVars component, passing the imported styles as a prop. It links the styling variables to the component's styling context, enabling theme customization. Dependencies include the CssVars component and the imported styles object.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/toast-plate/src/docs/development.mdx#_snippet_4\n\nLANGUAGE: JavaScript/JSX\nCODE:\n```\n<CssVars css={styles} />\n```\n\n----------------------------------------\n\nTITLE: Defining Options Array for PickerButton (JavaScript)\nDESCRIPTION: Defines a constant JavaScript array named 'options' containing objects, each with a 'key' property. This array provides the menu items to be displayed when the PickerButton is activated.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/picker-button/src/docs/Component.stories.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const options = [\n    { key: 'Заказать карту' },\n    { key: 'Выписка по счёту' },\n    { key: 'Выпустить карту' },\n    { key: 'Скопировать реквизиты' },\n];\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Fixing disabled colors for icon-button - JavaScript\nDESCRIPTION: This bug fix corrects the disabled colors for the icon-button component. By fixing the colors, the visual state of the disabled button is more clearly communicated to the user, improving usability.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-range/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n### Bug Fixes\n\n-   **icon-button:** fix disabled colors ([#104](https://github.com/core-ds/core-components/issues/104)) ([3f03849](https://github.com/core-ds/core-components/commit/3f038495bb63f72cd81ceeedbe55b52119581d57))\n```\n\n----------------------------------------\n\nTITLE: Recalculate options list width when opening Select component (React, JavaScript)\nDESCRIPTION: This code snippet adjusts the width of the options dropdown list dynamically when the Select component opens, ensuring proper alignment and appearance. Dependencies include React and DOM measurements. It improves the dropdown UI consistency.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2021.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst recalcWidth = () => {\n  if (optionsContainerRef.current) {\n    optionsContainerRef.current.style.width = \n      selectRef.current.offsetWidth + 'px';\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Component Documentation Tabs (JavaScript)\nDESCRIPTION: This code snippet utilizes the `Tabs` component to organize and display the documentation content. It defines different tabs with content from various MDX files (Description, Development, Changelog). The `description` tab renders the content from `description.mdx`. The `changelog` tab uses the `Markdown` component to render the `CHANGELOG.md` file. Finally the `development` tab renders from the `development.mdx` file. The expected output is tabbed documentation in Storybook, displaying these files. The input is the description, the changelog, and development data, and the output is formatted documentation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/cdn-icon/src/docs/Component.docs.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Uppercase Style for Status Component (React)\nDESCRIPTION: This snippet demonstrates the `Status` component without the `uppercase` prop. The `uppercase` prop is not specified, so by default it is probably `false`. It uses `Container` and a flexbox for layout.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/status/src/docs/description.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Container>\n    <div style={{ display: 'flex' }}>\n        <Status size='40' uppercase={false}>\n            Всё в порядке\n        </Status>\n        <Gap size='12' direction='horizontal' />\n        <Status size='40'>Всё в порядке</Status>\n    </div>\n</Container>\n```\n\n----------------------------------------\n\nTITLE: Structuring Documentation with Tabs using JSX\nDESCRIPTION: Utilizes the custom 'Tabs' block to organize the component's documentation content into separate tabs. It assigns the imported 'Description' component to the 'description' tab, the 'Changelog' content (wrapped in a 'Markdown' component) to the 'changelog' tab, and the 'Development' component to the 'development' tab.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/hatching-progress-bar/src/docs/Component.docs.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Themes with List Click Theme\nDESCRIPTION: This change lists the click theme.  Click themes could be used to apply visual styles when a user clicks or interacts with list items, or any UI elements used as list components. This improves the visual response to user interactions within components that render lists.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_90\n\n\n\n----------------------------------------\n\nTITLE: Rendering Component Header with Name and Description in Storybook\nDESCRIPTION: Displays a header for the 'Plate' component with descriptive text about its purpose, helping users understand its role within the system. Uses the ComponentHeader component with specified name and children props.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/plate/src/docs/Component.docs.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ComponentHeader\n    name='Plate'\n    children='Информирует пользователя о текущем состоянии системы или сообщает какую-либо важную информацию.'\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and Component Modules - JavaScript\nDESCRIPTION: This snippet imports necessary modules for Storybook documentation and component stories. It imports `Meta` and `Markdown` from `@storybook/addon-docs`, `ComponentHeader` and `Tabs` from `storybook/blocks`, and component stories (`Stories`) from './Component.stories'. It also imports Markdown files for description, development, and changelog. This sets up the required dependencies for creating the component documentation within Storybook.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/chart/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Defining SidePanel Header (Desktop) React JSX\nDESCRIPTION: Defines a custom Header component for the Desktop SidePanel. It uses React context (`ModalContext`) to signal the presence of a header and access the `onClose` function. It applies basic placeholder styling using CSS-in-JS objects and includes multiple placeholder `div` elements to represent header elements like icons, title, and action buttons.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/side-panel/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Header = () => {\n    const { setHasHeader, onClose } = React.useContext(ModalContext);\n\n    React.useEffect(() => setHasHeader(true), [setHasHeader]);\n\n    const commonStyles = {\n        backgroundColor: 'rgba(55, 120, 251, 0.1)',\n        border: '1px dashed rgb(55, 120, 251)',\n        boxSizing: 'border-box',\n        borderRadius: '8px',\n        height: '48px',\n    };\n\n    const addonsStyles = {\n        ...commonStyles,\n        width: '48px',\n    };\n\n    const innerAddonsStyles = {\n        ...addonsStyles,\n        backgroundColor: 'rgba(207, 112, 255, 0.1)',\n    };\n\n    const bottomAddonsStyles = {\n        ...commonStyles,\n        width: '100%',\n    };\n\n    const wrapperStyles = {\n        display: 'flex',\n        justifyContent: 'center',\n    };\n\n    const titleStyles = {\n        ...commonStyles,\n        flexGrow: 1,\n    };\n\n    return (\n        <div style={{ margin: 'var(--side-panel-s-header-paddings)' }}>\n            <div style={wrapperStyles}>\n                <div style={innerAddonsStyles} />\n                <div style={addonsStyles} />\n                <div style={titleStyles} />\n                <div style={addonsStyles} />\n                <div style={innerAddonsStyles} onClick={onClose} />\n            </div>\n            <div style={bottomAddonsStyles} />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating the Component Header for Scrollbar\nDESCRIPTION: Defines the header section for the Scrollbar component in Storybook, specifying its name and description in Russian.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/scrollbar/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ComponentHeader\n    name='Scrollbar'\n    children='Используется для управления контентм с помощью полосы прокрутки.'\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting system font by default in Storybook\nDESCRIPTION: This commit configures Storybook to use the system font by default. Storybook is a development environment for UI components. Setting the default font helps ensure consistency and accurate rendering across different environments.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_150\n\n\n\n----------------------------------------\n\nTITLE: Updating loader animation\nDESCRIPTION: Enhances the loader component's animation effects for better visual appeal and performance, using CSS or animation libraries within React.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_141\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-loader animation update\n```\n\n----------------------------------------\n\nTITLE: Drawer and SidePanel Components with Left Placement Option\nDESCRIPTION: Enhancement to Drawer and SidePanel components allowing them to appear from the left side of the screen with the new placement prop. Added custom scrollbar functionality.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Drawer/SidePanel with left placement\n<Drawer placement=\"left\" open={isOpen}>\n  {/* Content */}\n</Drawer>\n\n<SidePanel placement=\"left\" open={isOpen}>\n  {/* Content with custom scrollbar */}\n</SidePanel>\n```\n\n----------------------------------------\n\nTITLE: Importing ArgsTabs and Grid Components in JSX\nDESCRIPTION: This snippet imports ArgsTabs from storybook/blocks and Grid from a local index file. ArgsTabs is typically used for creating tabbed controls for component arguments/documentation within storybook, while Grid is the local grid component to be used presumably inside storybook stories or within the app.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/grid/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ArgsTabs } from 'storybook/blocks';\nimport { Grid } from '../index';\n```\n\n----------------------------------------\n\nTITLE: Removing Unclearable Country Code in Intl Phone Input\nDESCRIPTION: This commit prevents users from inadvertently changing a country code in the intl-phone-input component that shouldn't be cleared. This likely involves logic within the input field to ensure the country code is preserved. No specific code snippets are provided in this context.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/intl-phone-input/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Updating calendar@6.2.9 and tslib library\nDESCRIPTION: This section outlines the changes implemented in the project. It includes the addition of the tslib library and the updated versions of calendar and skeleton components. It mainly includes updates to the dependencies.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/CHANGELOG.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-   В зависимости добавлена библиотека tslib\n\n-   Обновлены зависимости\n    -   calendar@6.2.9\n    -   skeleton@4.0.4\n```\n\n----------------------------------------\n\nTITLE: Structuring Doc Content with Tabs (MDX/JSX)\nDESCRIPTION: Utilizes a Tabs component to create a tabbed layout for organizing the documentation content. It assigns imported content files (Description, Development) and the Changelog Markdown content (rendered via the Markdown component) to specific tabs.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pattern-lock/src/docs/Component.docs.mdx#_snippet_3\n\nLANGUAGE: MDX\nCODE:\n```\n<Tabs\n    description={<Description />}\n    development={<Development />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Documentation for ProductCover Component\nDESCRIPTION: This code snippet configures the Storybook documentation page for the ProductCover component. It imports necessary Storybook addons and custom components, sets up the component metadata, header, and organizes content into tabbed sections.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/product-cover/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta of={Stories} />\n\n<ComponentHeader name='ProductCover' children='Используется для отображения банковских карт.' />\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating select Styles\nDESCRIPTION: This update increases the specificity of Checkmark styles within the `select` component. It addresses an issue where styles from `Badge` were overwriting Checkmark styles, causing the badge to be rendered alongside a dot.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Adding defaultMargins Prop to Text Component\nDESCRIPTION: A new prop 'defaultMargins' is added to the Text component, allowing disabling the margin for the 'p' tag. This prop provides more control over text formatting.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Adding stickyHeader Prop to Table\nDESCRIPTION: Adds the `stickyHeader` prop to the table for fixing the headers when scrolling.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_36\n\n\n\n----------------------------------------\n\nTITLE: Using Gap Variables in CSS\nDESCRIPTION: This CSS snippet demonstrates how to import and use the predefined gap variables from `@alfalab/core-components/vars/gaps.css`.  It showcases applying both positive and negative gap values as margin properties to a CSS class.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/gaps.stories.mdx#_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n@import '@alfalab/core-components/vars/gaps.css';\n\n.item {\n    margin-bottom: var(--gap-24);\n\n    /* Отрицательное значение */\n    margin-top: var(--gap-24-neg);\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing React SVG icons with size compression\nDESCRIPTION: This patch involves SVG icon assets used for flags in international phone inputs, compressing size while maintaining visual quality. It improves load times and performance for icon-heavy components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_39\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=\"20\" height=\"15\" viewBox=\"0 0 20 15\" xmlns=\"http://www.w3.org/2000/svg\">\n  <!-- SVG content -->\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies and Components in React for Storybook SidePanel Integration\nDESCRIPTION: Imports various modules and components necessary for building a Storybook story for the SidePanel component, including Storybook addons for docs and knobs, UI components representing Button and SidePanel variants (desktop, mobile, responsive), markdown content for documentation, and utility functions for style parsing and query parameter retrieval. This setup enables dynamic control of story properties and rich documentation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/side-panel/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, Story, Markdown } from '@storybook/addon-docs';\nimport { boolean, select, text } from '@storybook/addon-knobs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\n\nimport { Button } from '@alfalab/core-components-button';\nimport { ButtonDesktop } from '@alfalab/core-components-button/desktop';\nimport { ButtonMobile } from '@alfalab/core-components-button/mobile';\nimport { SidePanelMobile } from '@alfalab/core-components-side-panel/mobile';\nimport { SidePanelDesktop } from '@alfalab/core-components-side-panel/desktop';\nimport { SidePanelResponsive } from '@alfalab/core-components-side-panel/Component.responsive';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\nimport {\n    getQueryParam,\n    stylesStringToObj,\n} from '../../../screenshot-utils/screenshots-story/utils';\n```\n\n----------------------------------------\n\nTITLE: Fix resize observer in modal component\nDESCRIPTION: Resolves issues with resize observation for the base-modal component to ensure correct handling of dynamic size changes. Dependencies include resize observer logic and DOM event listeners, with key functionality wrapping resize handling to prevent errors.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Resize observer fix in base-modal for accurate size detection */\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Docs Components and Local Modules\nDESCRIPTION: Imports core Storybook documentation components, custom block components, story definitions, MDX files, and raw Markdown changelog. Sets up dependencies for subsequent documentation rendering.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/number-input/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Updating international-phone-input and input-autocomplete Callbacks\nDESCRIPTION: This update replaces the type of the `onChange` callback for `international-phone-input` and the `onInput` callback for `input-autocomplete`. The callbacks will now receive the `value` as a string parameter. The update reflects that the types of the callbacks are now string instead of any other types.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Adding tabs textStyle Prop\nDESCRIPTION: This update introduces the `textStyle` prop for the `tabs` component. This prop allows to define the style of the tabs text (only primary style). If `textStyle` is provided, the `size` property will be ignored, and all indents also depend on `textStyle`.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Adding Click Theme for Components\nDESCRIPTION: This commit adds an experimental click theme for the checkbox, radio, and switch components. The click theme customizes the appearance and behavior of these components when they are clicked. This enhancement could improve the user experience by visually indicating the click.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_148\n\n\n\n----------------------------------------\n\nTITLE: Importing Table Component from @alfalab/core-components\nDESCRIPTION: This snippet shows the import statement required to include the Table component from the '@alfalab/core-components/table' package, which is necessary for rendering and utilizing table functionalities within the application.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/table/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Table } from '@alfalab/core-components/table';\n```\n\n----------------------------------------\n\nTITLE: Adding Props Documentation for SidePanel Subcomponents\nDESCRIPTION: Props and their descriptions for SidePanel subcomponents have been added to the documentation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Importing ArgsTable from @storybook/addon-docs\nDESCRIPTION: This snippet imports ArgsTable from the Storybook addon to facilitate automatic generation of component property tables in documentation. It is essential for displaying component prop details in stories or docs.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/chart/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgsTable } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Adding CSS variable for border radius 32\nDESCRIPTION: This CSS snippet introduces a new custom property `--border-radius-32`, allowing for consistent border-radius styling across components. The variable is part of a styling patch aimed at expanding radius options for UI elements.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_35\n\nLANGUAGE: CSS\nCODE:\n```\n:root {\n  --border-radius-32: 8px; /* Example value */\n}\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Increasing specificity of button css class - JavaScript\nDESCRIPTION: This bug fix increases the CSS specificity of the button class within the calendar component. Increasing specificity resolves styling conflicts where other CSS rules are overriding the intended styles for the buttons, leading to a more consistent and predictable appearance.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-range/CHANGELOG.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n### Bug Fixes\n\n-   **calendar:** increased specificity of the button css class ([#103](https://github.com/core-ds/core-components/issues/103)) ([3d20c11](https://github.com/core-ds/core-components/commit/3d20c112a1c161951afa2e1c6fca8d3c048501e7))\n```\n\n----------------------------------------\n\nTITLE: Initializing Git LFS\nDESCRIPTION: This command initializes git-lfs for a repository, setting up necessary hooks to manage large files. This is a required step after installing git-lfs to enable it for the current project.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/screenshots.stories.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit lfs install --force\n```\n\n----------------------------------------\n\nTITLE: Fixing Number Formatting in intl-phone-input\nDESCRIPTION: Fixes the number formatting in intl-phone-input when the number is passed externally in props `value`.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_37\n\n\n\n----------------------------------------\n\nTITLE: Adding BaseOption, Optgroup, and Select Updates\nDESCRIPTION: Adds a new BaseOption component, changes indents in the group title (Optgroup component), changes indents in the footer returned by the useSelectWithApply hook, and adds the ability to pass a custom Option into the useLazyLoading and useSelectWithLoading hooks.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Component Overview and Supported Chart Types\nDESCRIPTION: This section documents that the Chart component is based on the D3 library (licensed under MIT) and supports three chart types: bar, line, and area. It informs developers about the underlying technology and functionalities available.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/chart/src/docs/development.mdx#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Importing Button Components\nDESCRIPTION: This code snippet demonstrates how to import the Button component, along with its desktop and mobile variants, from the '@alfalab/core-components/button' package. The main index exports the responsive version of the component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/button/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Button } from '@alfalab/core-components/button';\nimport { ButtonDesktop } from '@alfalab/core-components/button/desktop';\nimport { ButtonMobile } from '@alfalab/core-components/button/mobile';\n```\n\n----------------------------------------\n\nTITLE: Fixing disabled colors for icon-button\nDESCRIPTION: This commit addresses an issue with disabled colors in the icon-button component. The fix ensures correct visual representation of disabled icon buttons.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/input-autocomplete/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\n**icon-button:** fix disabled colors ([#104](https://github.com/core-ds/core-components/issues/104)) ([3f03849](https://github.com/core-ds/core-components/commit/3f038495bb63f72cd81ceeedbe55b52119581d57))\n```\n\n----------------------------------------\n\nTITLE: Importing Raw Changelog Content - JavaScript\nDESCRIPTION: Imports the content of the `../../CHANGELOG.md` file as a raw string using the `?raw` Webpack loader query. This raw string is then typically processed or rendered using a Markdown component, like the imported `Markdown` component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/status/src/docs/Component.docs.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Example OTP Message Format for WebOTP API\nDESCRIPTION: Provides an example of a valid SMS message format required by the WebOTP API for use with the `CodeInput` component. The message should start with human-readable text, include the OTP code, and end with the specified domain and OTP hash.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/code-input/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nYour OTP is: 1234.\n@example.com #1234\n```\n\n----------------------------------------\n\nTITLE: Importing React Switch Component (JSX)\nDESCRIPTION: This code snippet demonstrates the standard ES module import statement required to use the Switch component in a React or JSX environment. It imports the named export 'Switch' from the '@alfalab/core-components/switch' package, making the component available for use in your application.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/switch/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Switch } from '@alfalab/core-components/switch';\n```\n\n----------------------------------------\n\nTITLE: Storybook ArgTypes Documentation for Text Component Properties\nDESCRIPTION: This snippet utilizes the ArgTypes utility from '@storybook/addon-docs' to generate documentation for the properties of the Text component. It helps in visualizing and testing component props, aiding developers and designers in understanding customization options.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/text/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ArgTypes of={Text} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Metadata for PickerButton (JSX)\nDESCRIPTION: Sets up Storybook metadata using the 'Meta' component from '@storybook/addon-docs'. It defines the title in the Storybook hierarchy ('Components/PickerButton'), associates the documentation with the 'PickerButton' component, and assigns a unique ID ('PickerButton').\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/picker-button/src/docs/Component.stories.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title='Components/PickerButton' component={PickerButton} id='PickerButton' />\n```\n\n----------------------------------------\n\nTITLE: Hiding Select when One Country in Intl Phone Input\nDESCRIPTION: This commit modifies the intl-phone-input component to hide the country select dropdown when only one country option is available. This simplifies the UI when the country selection is not necessary. No specific code snippets are provided in this context.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/intl-phone-input/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Pass aria-disabled attribute in Select component when disabled (React, JavaScript)\nDESCRIPTION: This code highlights conditional passing of 'aria-disabled' attribute to the Select component to improve accessibility when the component is disabled. Dependencies include React. This enhances screen reader compatibility and accessibility compliance.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2021.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n<select aria-disabled={isDisabled} disabled={isDisabled}>...\n```\n\n----------------------------------------\n\nTITLE: Removing Extra Prop in Toast Component\nDESCRIPTION: An extraneous property has been removed from the toast component. This means removing any unused or redundant property from the component's code. Removing unnecessary properties can help to improve performance and code maintainability.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_92\n\n\n\n----------------------------------------\n\nTITLE: Refactoring CSS and Adding sideEffects to pass-code\nDESCRIPTION: This section covers a minor refactoring of CSS and the addition of `sideEffects: false` to the `pass-code` component's `package.json`. The `sideEffects: false` property helps improve build performance by allowing bundlers to perform tree-shaking more effectively.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Importing Storybook Documentation Dependencies (JavaScript)\nDESCRIPTION: Imports the necessary components and utilities required for creating documentation pages in Storybook's MDX format. This includes core components like `Meta` for linking stories and `Markdown` for rendering raw Markdown, as well as custom UI blocks like `ComponentHeader` and `Tabs` used for structuring the page layout.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tag/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Updating calendar@6.2.3\nDESCRIPTION: This patch change updates the calendar component's version to 6.2.3. This signifies a bug fix or minor feature update in the calendar component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/CHANGELOG.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n-   Обновлены зависимости\n    -   calendar@6.2.3\n```\n\n----------------------------------------\n\nTITLE: Adding z-index to Sticky Header\nDESCRIPTION: This update adds a z-index to the sticky header component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Increasing CSS Specificity for Custom Styles in Core Components\nDESCRIPTION: Demonstrates how to increase the specificity of custom CSS styles when they don't override default component styles. The technique involves duplicating the class name selector to increase its specificity weight without using !important.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/users-faq.stories.mdx#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.yourClassName.yourClassName {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping package versions in @alfalab/core-components-with-suffix\nDESCRIPTION: This commit involves bumping the package versions for @alfalab/core-components-with-suffix. The update ensures that dependencies are up-to-date and that the package is compatible with other core-components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/with-suffix/CHANGELOG.md#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nbump packages version ([#153](https://github.com/core-ds/core-components/issues/153)) ([fd3e082](https://github.com/core-ds/core-components/commit/fd3e08205672129cdce04e1000c673f2cd9c10da))\n```\n\n----------------------------------------\n\nTITLE: Configuring Select component with inputs and error states\nDESCRIPTION: Provides detailed input handling and error display logic for the Select component, improving user feedback during invalid selections. Uses React, with props for error states and custom input behavior.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_117\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-select input and error handling\n```\n\n----------------------------------------\n\nTITLE: Updating table paddings and compactHorizontal prop\nDESCRIPTION: This snippet outlines changes related to table paddings and the addition of a `compactHorizontal` property. The updates involve adjustments to table padding styles and the introduction of `compactHorizontal`, likely to control table design or layout.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/table/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Adding Tabs Collapsible Prop and Hook\nDESCRIPTION: Adds the collapsible prop, which collapses tabs into a PickerButton when they don't fit in the window. Adds a hook use-collapsible-elements, which tracks container width changes and returns elements that don't fit.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Adding Tabs with style and class name modifications\nDESCRIPTION: Refines the Tabs component by configuring add-ons, container class names, removing gaps, and adjusting sizes for better layout and appearance. Uses React, emphasizing customization.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_126\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-tabs style and class modifications\n```\n\n----------------------------------------\n\nTITLE: Importing Alfаlab Core Components Additional Mixins in CSS\nDESCRIPTION: Demonstrates how to import additional mixins provided by Alfаlab core components via a dedicated mixins.css file. These mixins can be used throughout the project for enhanced styling flexibility and code reuse.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/vars/src/docs/description.mdx#_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n@import '@alfalab/core-components/vars/mixins.css';\n```\n\n----------------------------------------\n\nTITLE: Fixing tab list size calculation\nDESCRIPTION: This update addresses an issue with the calculation of the size and position of the bottom line in the `PrimaryTabList` component when tabs are added or removed. It ensures that the visual elements are correctly aligned.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Fixing Text in Confirmation Component\nDESCRIPTION: This commit fixes text-related issues in the confirmation component. The issue may include typos, grammatical errors, or other text-related problems. The goal is to improve the clarity and accuracy of the text displayed within the component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_82\n\n\n\n----------------------------------------\n\nTITLE: Storybook Meta Configuration for Token Converter Page\nDESCRIPTION: Defines the metadata for the Storybook documentation page of the Token Converter, including title, parameters to hide the canvas tab, and an identifier. This configuration customizes how the component is presented within Storybook.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/token-converter.stories.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Meta\n    title='Token converter'\n    parameters={{ previewTabs: { canvas: { hidden: true } } }}\n    id='token-converter'\n/>\n```\n\n----------------------------------------\n\nTITLE: Changing Plate Background Color\nDESCRIPTION: Changes the background color to light/specialbg/secondary-transparent for the Plate component in common mode.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Using Core Components CSS Variables in Custom CSS Classes\nDESCRIPTION: Provides an example of using a CSS variable imported from Alfаlab core components within a custom CSS class selector. The example uses the padding property set to the variable --gap-16. This demonstrates direct utilization of imported CSS variables for styling custom components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/vars/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* some-component.css */\n.class {\n    padding: var(--gap-16);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion Component in React\nDESCRIPTION: Shows how to import the Accordion component from the @alfalab/core-components package. This is the standard way to include the Accordion component in a React application.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/accordion/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Accordion } from '@alfalab/core-components/accordion';\n```\n\n----------------------------------------\n\nTITLE: Component Header for List Component Documentation\nDESCRIPTION: Provides a header block that describes the List component, indicating its purpose as a component for creating lists. Used as part of the Storybook documentation tabs.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/list/src/docs/Component.stories.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ComponentHeader } from 'storybook/blocks';\n\n<ComponentHeader name='List' children='Компонент для создания списков.' />\n```\n\n----------------------------------------\n\nTITLE: Adding select component\nDESCRIPTION: This commit adds a select component. The select component provides a dropdown menu for selecting an option.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_200\n\n\n\n----------------------------------------\n\nTITLE: Caching icons in CDN icon component to prevent reloading\nDESCRIPTION: This implementation caches icon assets used in the CDN icon component, reducing network requests and improving performance when icons are re-rendered or re-mounted.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst iconCache = {};\nfunction loadIcon(iconName) {\n  if (iconCache[iconName]) {\n    return iconCache[iconName];\n  }\n  const icon = fetchIcon(iconName);\n  iconCache[iconName] = icon;\n  return icon;\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Input Value in Intl Phone Input\nDESCRIPTION: This commit ensures that the value entered in the international phone input is formatted correctly. This involves applying a formatting logic to the input value. No specific code snippets are provided in this context, just a feature implementation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/intl-phone-input/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Adding Gap Component\nDESCRIPTION: Adds a new Gap component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_32\n\n\n\n----------------------------------------\n\nTITLE: Introducing 2px Gap\nDESCRIPTION: This introduces a new variable or setting for a 2px gap.  This likely involves adding a consistent spacing value that can be used throughout the project. This provides a method for consistent spacing throughout the components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_97\n\n\n\n----------------------------------------\n\nTITLE: Installing core-config package via npm\nDESCRIPTION: This code snippet provides the command to install the @alfalab/core-config package using npm, enabling access to global configuration for core-components. It should be run in the terminal prior to usage.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/core-config.stories.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @alfalab/core-config\n```\n\n----------------------------------------\n\nTITLE: Importing Pagination Component in React\nDESCRIPTION: This snippet imports the `Pagination` component from the `@alfalab/core-components/pagination` module, which is a React component. It is a prerequisite for rendering and utilizing the Pagination component. The component will likely handle pagination logic and render pagination controls in a user interface.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pagination/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Pagination } from '@alfalab/core-components/pagination';\n```\n\n----------------------------------------\n\nTITLE: Updating calendar@6.1.3\nDESCRIPTION: This patch change updates the calendar component's version to 6.1.3. This suggests a bug fix or a minor update within the calendar component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/CHANGELOG.md#_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n-   Updated dependencies [[#189](https://github.com/core-ds/core-components/pull/189)]\n    -   @alfalab/core-components-calendar@6.1.3\n```\n\n----------------------------------------\n\nTITLE: Tabs with Documentation and Changelog for List Component\nDESCRIPTION: Creates a tabbed interface containing the description, development notes, and changelog for the List component. Utilizes imported MDX and Markdown files for detailed documentation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/list/src/docs/Component.stories.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Tabs } from 'storybook/blocks';\nimport { Markdown } from '@storybook/addon-docs';\n\n<Tabs\n    description={<Description />}\n    development={<Development />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta Information using JSX\nDESCRIPTION: Uses the Meta component from '@storybook/addon-docs' within the MDX file. It links this documentation page to the component's stories, imported as 'Stories', enabling Storybook to associate the documentation with the corresponding component examples.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/hatching-progress-bar/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta of={Stories} />\n```\n\n----------------------------------------\n\nTITLE: Removing optional chaining in Phone Input\nDESCRIPTION: Refactors the Phone Input component to eliminate optional chaining for broader browser compatibility or code clarity. Requires React and existing phone input logic, ensuring safe access to object properties.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_109\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for refactored core-components-phone-input without optional chaining\n```\n\n----------------------------------------\n\nTITLE: Adding semantic-release configuration\nDESCRIPTION: This commit introduces semantic-release to the project. Semantic-release is a tool that automates the process of publishing and versioning a project by analyzing commit messages and automatically determining the next version number and publishing the package to a registry.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_143\n\n\n\n----------------------------------------\n\nTITLE: Importing Description Content - JavaScript\nDESCRIPTION: Imports the content of the `./description.mdx` file as a React component. This component likely contains Markdown or MDX content describing the component's purpose or usage, intended to be rendered within the documentation page.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/status/src/docs/Component.docs.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Description from './description.mdx';\n```\n\n----------------------------------------\n\nTITLE: Upgrading Storybook\nDESCRIPTION: This commit updates the project's Storybook dependency to a newer version. This likely involves dependency upgrades, improvements in component rendering and documentation, or fixes to existing Storybook functionality.  No specific code is provided in this context.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/intl-phone-input/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Adding rowLimit Prop to Plate\nDESCRIPTION: A new optional prop `rowLimit` is added to the Plate component, allowing the restriction of the number of lines for the text passed in `children` (from 1 to 3).\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Rendering Changelog Content in Storybook with JSX\nDESCRIPTION: Renders the changelog documentation page with a header and the ChangelogComponent. The component uses the imported raw markdown content and sets the root property to true to indicate this is the main changelog display.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/changelog.stories.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n# История изменений\n\n<ChangelogComponent content={<Markdown>{Changelog}</Markdown>} root={true} />\n```\n\n----------------------------------------\n\nTITLE: Updating testing-library versions - JavaScript\nDESCRIPTION: This feature updates the versions of the testing-library used by the core-components. Updating testing libraries ensures compatibility, takes advantage of new features, and addresses any known bugs or security vulnerabilities in older versions of the testing libraries.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-range/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n### Features\n\n-   testing-library versions update ([#216](https://github.com/core-ds/core-components/issues/216)) ([33b6225](https://github.com/core-ds/core-components/commit/33b62259a1332f535f367502590ea37e7ad051d4))\n```\n\n----------------------------------------\n\nTITLE: Export CSS custom properties as JS variables\nDESCRIPTION: Facilitates theme customization by exposing CSS variables within JavaScript, enabling dynamic style adjustments and consistent theming across components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_67\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Script to export CSS variables as JS constants for styling purposes */\n```\n\n----------------------------------------\n\nTITLE: Adding `gap` property for flexible spacing in components\nDESCRIPTION: This code extends component style interfaces to include a new `gap` property, managing spacing between children in flex containers. It facilitates more flexible and customizable layout designs.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface FlexContainerProps {\n  gap?: string;\n  // Other props\n}\n```\n\n----------------------------------------\n\nTITLE: Fix 'window is not defined' error\nDESCRIPTION: Addresses runtime errors occurring during server-side rendering or in non-browser environments by guarding window usage. Ensures component stability across various execution contexts.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_49\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Conditional check for window object to prevent 'not defined' errors */\n```\n\n----------------------------------------\n\nTITLE: Add IE comment in select component\nDESCRIPTION: Includes developer comments to improve compatibility notes regarding Internet Explorer in the select component. The snippet documents handling of legacy browser support and potential polyfill requirements.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Comment added to indicate IE support considerations in select component */\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Storybook Changelog Page in TypeScript/React\nDESCRIPTION: Imports the necessary dependencies for creating a Storybook documentation page. This includes the Changelog component, Meta and Markdown from Storybook addon-docs, and the raw changelog markdown content.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/changelog.stories.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Changelog as ChangelogComponent } from 'storybook/blocks';\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport Changelog from '../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Adding storybook add-ons & update stories\nDESCRIPTION: This commit adds Storybook addons and updates the existing stories. The changes will enhance the component testing, improve visual presentation and make it easier to interact with components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_202\n\n\n\n----------------------------------------\n\nTITLE: Generating component property documentation with Storybook ArgTypes\nDESCRIPTION: This snippet utilizes Storybook's ArgTypes addon to automatically generate documentation for the IconButton component's props, aiding developers in understanding available properties and their types.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/icon-button/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ArgTypes of={IconButton} />\n```\n\n----------------------------------------\n\nTITLE: Text Color and Background\nDESCRIPTION: This snippet shows how to change the text color and background color using the `color` and `textBackgroundColor` properties of the `Text` component.  It utilizes CSS variables to define the colors.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/text/src/docs/description.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Text\n    color='var(--color-light-text-positive)'\n    textBackgroundColor='var(--color-light-status-muted-attention)'\n>\n    Пример с покраской фона\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Updating navigation-bar to Hide Text\nDESCRIPTION: This update adds the ability to hide the text (title) for the back button in modal components such as BottomSheet, Modal, and SidePanel.  This is achieved by setting `backButtonProps={{ text: null }}`.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Adding Textarea Overflow Mechanics\nDESCRIPTION: The Textarea component now handles overflow. Input is now available even if the number of entered characters exceeds maxLength. Characters exceeding maxLength are highlighted with an error color.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Fixing Slider Input onChange Handler Bug\nDESCRIPTION: This update fixes a bug in the onChange handler that caused incorrect value insertion with spaces in the slider-input component. The correction ensures proper data handling.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Portal Component Enhancement with immediateMount Prop\nDESCRIPTION: Addition of immediateMount prop to the Portal component to allow immediate rendering of child elements through the portal, fixing ref access issues in base-modal.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Portal immediateMount={true}>\n  {/* Child elements rendered immediately through portal */}\n  <div ref={elementRef}>Content</div>\n</Portal>\n```\n\n----------------------------------------\n\nTITLE: Type Export Change in TypeScript Components\nDESCRIPTION: A change that replaces 'export' of types with 'export type' in several components. This is a TypeScript-specific modification to improve type handling.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Before\nexport SomeType;\n\n// After\nexport type SomeType;\n```\n\n----------------------------------------\n\nTITLE: Importing PatternLock Components - JSX\nDESCRIPTION: This code snippet imports necessary components from the PatternLock library and its submodules. It imports the main `PatternLock` component, the `PatternLockMobile` and `PatternLockDesktop` variants, a hook `usePatternLockCleanup` for cleaning input, and `THEME_STATE` for managing themes.  These imports enable the use of PatternLock functionality within a React application.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pattern-lock/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PatternLock } from '@alfalab/core-components/pattern-lock';\nimport { PatternLockMobile } from '@alfalab/core-components/pattern-lock/mobile';\nimport { PatternLockDesktop } from '@alfalab/core-components/pattern-lock/desktop';\n// Хук для очистки ввода \nimport { usePatternLockCleanup } from '@alfalab/core-components/pattern-lock/shared';\n// Также можно импортировать объект с состояниями темы\nimport { THEME_STATE } from '@alfalab/core-components/pattern-lock';\n```\n\n----------------------------------------\n\nTITLE: Installing Git LFS\nDESCRIPTION: This command installs git-lfs on MacOS using brew. Git LFS is required to manage large files, such as screenshots, in a git repository effectively.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/screenshots.stories.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install git-lfs\n```\n\n----------------------------------------\n\nTITLE: Adding the No Attempts Left Message Prop\nDESCRIPTION: A new property, `noAttemptsLeftMessage`, is added to the confirmation component.  This provides a way to customize the message shown to the user when there are no remaining attempts.  This property enhances the user experience by providing more informative feedback.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_79\n\n\n\n----------------------------------------\n\nTITLE: Tune to latest requirements\nDESCRIPTION: This commit adapts the MoneyInput component to the latest requirements. It addresses enhancements and ensures the component adheres to the most up-to-date specifications.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_190\n\n\n\n----------------------------------------\n\nTITLE: Adding breakpoints and typography styles\nDESCRIPTION: Configures design tokens for responsive breakpoints and typography styles, enabling adaptive layouts and consistent typography across components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_133\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-vars breakpoints and typography styles\n```\n\n----------------------------------------\n\nTITLE: Fixing ModalResponsive State Reset\nDESCRIPTION: Fixes an issue in ModalResponsive where the state of child components was reset when switching between desktop and mobile views.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_27\n\n\n\n----------------------------------------\n\nTITLE: Adding clearCodeOnError Prop to Code-input\nDESCRIPTION: Adds the prop clearCodeOnError. If enabled, the code will be cleared when an error occurs.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_28\n\n\n\n----------------------------------------\n\nTITLE: Import Statements for Storybook and Token Converter Component\nDESCRIPTION: Imports the Meta component from '@storybook/addon-docs' to define story metadata and imports the TokenConverter component for rendering. These dependencies are essential for setting up the Storybook documentation page.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/token-converter.stories.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\nimport { TokenConverter } from '../.storybook/pages/token-converter';\n```\n\n----------------------------------------\n\nTITLE: Importing ProgressBar Component for Documentation\nDESCRIPTION: This code imports the ProgressBar component from the Alfalab core components library to be used in storybook documentation and examples. It ensures the component is available for rendering and property documentation within the storybook environment.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/progress-bar/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ProgressBar } from '@alfalab/core-components/progress-bar';\n```\n\n----------------------------------------\n\nTITLE: Fixing ESLint\nDESCRIPTION: This commit fixes issues identified by ESLint. ESLint is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code, making it easier to maintain consistent code quality.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_156\n\n\n\n----------------------------------------\n\nTITLE: Updating recharts dependency\nDESCRIPTION: This update upgrades the `recharts` dependency from version 2.1.2 to 2.12.7. This upgrade likely includes bug fixes, performance improvements, and new features in the charting library.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Rendering Component Header with Name and Description (JavaScript)\nDESCRIPTION: Creates a header section for the documentation page with the component name 'Gap' and a brief description in Russian. Provides context for the component being documented.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/gap/src/docs/Component.docs.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ComponentHeader\n    name='Gap'\n    children='Используется для создания отступов между блоками.'\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Flags Icons\nDESCRIPTION: This update replaces flag icons with new ones. If a country lacks a corresponding flag in the set, a placeholder is displayed instead.  This mainly affects the intl-phone-input component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Setting Up DateRangeInput Component Documentation with Storybook Tabs\nDESCRIPTION: Code that sets up the component documentation structure with a ComponentHeader and Tabs for different sections including description, changelog, and development guidelines.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/date-range-input/src/docs/Component.stories.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ComponentHeader name='DateRangeInput' children='Поле для указания диапазона дат.' />\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding safe-area support to side-panel\nDESCRIPTION: This update adds support for safe area in the `side-panel` component. This allows the component to properly handle device-specific insets, like those found on modern mobile devices.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Importing MaskedInput Component - JSX\nDESCRIPTION: This snippet imports the `MaskedInput` component. This component is likely used to create masked input fields. This import statement is essential for using the component within other JSX files.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/masked-input/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MaskedInput } from '@alfalab/core-components/masked-input';\n```\n\n----------------------------------------\n\nTITLE: Adding Tabs component with multiple panels\nDESCRIPTION: Implements a Tabs component with support for multiple tab panels, including add-ons and container styling. Uses React, supporting dynamic tab management and state handling.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_125\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-tabs implementation\n```\n\n----------------------------------------\n\nTITLE: Updating demo script\nDESCRIPTION: This commit updates the demo script. Demo scripts are useful for showcasing or testing the functionality of the components. It helps users to understand and explore how to use them.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_162\n\n\n\n----------------------------------------\n\nTITLE: Adding Mandatory Parameter and Props for Collapse\nDESCRIPTION: Adds a mandatory parameter (expanded) to the state handler types and adds props: `expandedContentClassName` and `defaultExpanded`.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Adding and configuring hoc with specific issue\nDESCRIPTION: Enhances a component with additional behavior via HOC, addressing specific issues or feature requests as detailed in issue tracking.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_137\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-with-suffix HOC configuration\n```\n\n----------------------------------------\n\nTITLE: Adding restProps to List Component\nDESCRIPTION: Adds restProps in the list component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Adding `monospaceNumbers` property for typography component\nDESCRIPTION: This snippet introduces a new boolean property `monospaceNumbers` to the typography component, forcing all digits to use a monospaced font for better alignment in numeric displays.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TypographyProps {\n  monospaceNumbers?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding atomic exports and sideEffects in side-panel\nDESCRIPTION: This update adds atomic exports and `sideEffects: false` to the `side-panel` component. Atomic exports help improve code organization, and `sideEffects: false` can assist with bundle optimization.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Updating theming docs\nDESCRIPTION: This commit updates the theming documentation. This action makes sure that the documentation regarding theming is up to date. It describes how the themes are implemented and how to customize them.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_151\n\n\n\n----------------------------------------\n\nTITLE: Lint fix\nDESCRIPTION: This commit fixes linting errors. Linting is the process of analyzing code for potential errors. Fixing these errors improves code quality and adherence to coding standards.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_157\n\n\n\n----------------------------------------\n\nTITLE: Adding icons & addons improvements\nDESCRIPTION: This commit improves the icons and addons of the inputs. This covers changes such as appearance, styling, or behavior. It aims to enhance the user experience or extend the functionality.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_195\n\n\n\n----------------------------------------\n\nTITLE: Adding customization to calendar-range width\nDESCRIPTION: This update adds an extra class to the calendar's container, which allows users to modify the container's width.  It also adds a modifier for the `data-test-id` attribute.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Allowing to hide error icon in theme\nDESCRIPTION: This commit allows the ability to hide the error icon in the FormControl component's theme. This enhances customization flexibility, allowing developers to control the visual representation of errors.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_179\n\n\n\n----------------------------------------\n\nTITLE: Setting Storybook Metadata with Meta Component\nDESCRIPTION: Defines the metadata for the Storybook story by associating it with specific stories from './Component.stories'. This metadata enables Storybook to recognize and organize the documentation component correctly.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/button/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Meta of={Stories} />\n```\n\n----------------------------------------\n\nTITLE: Removing Extra Wrapper for className Prop\nDESCRIPTION: This update removes an extra wrapper that limited the application of the className prop. It resolves an issue where the className prop's functionality was restricted.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Add modal classname prop in bottom-sheet component\nDESCRIPTION: Introduces a new property to customize modal class names in the bottom-sheet component, allowing developers to style modals more flexibly by passing custom class names. Depends on the component's prop handling system.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Prop addition for modal className in bottom-sheet component */\n```\n\n----------------------------------------\n\nTITLE: Importing Slider Component (React/JSX)\nDESCRIPTION: This snippet imports the Slider component from the @alfalab/core-components library. This allows the component to be used and rendered within the React application. No dependencies are required beyond the core-components library itself.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/slider/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Slider } from '@alfalab/core-components/slider';\n```\n\n----------------------------------------\n\nTITLE: Bar Chart Configuration in TypeScript\nDESCRIPTION: Defines the structure for configuring a bar chart with properties for styling, visibility, and data formatting. Includes options for customizing fill color, stroke width, and tooltip formatting.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/chart/src/docs/development.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n    dataKey,\n\n    /*\n    * Форматирование значения графика для тултипа\n    */\n    formatter?,\n\n    /*\n    * Цвет заливки графика\n    */\n    fill,\n\n    /*\n    * Цвет бордера графика\n    */\n    strokeWidth?,\n},\n\n/**\n * Данные для построения графика\n */\ndata: [\n    /**\n     * Метка\n     */\n    label,\n\n    /**\n     * Значение\n     */\n    value\n];\n```\n\n----------------------------------------\n\nTITLE: Fixing Popover Jumping in React 18\nDESCRIPTION: Fixes the popover jumping issue in React 18.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_26\n\n\n\n----------------------------------------\n\nTITLE: Changing error type to ReactNode\nDESCRIPTION: This commit modifies the error type to ReactNode within the @alfalab/core-components-with-suffix package. This change provides more flexibility in handling and displaying error messages, allowing for richer and more customizable error representations.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/with-suffix/CHANGELOG.md#_snippet_8\n\nLANGUAGE: none\nCODE:\n```\nchange error type to ReactNode ([#825](https://github.com/core-ds/core-components/issues/825)) ([c6d95c1](https://github.com/core-ds/core-components/commit/c6d95c1c6239f2b2a3bf2c1639554d8500e794f3))\n```\n\n----------------------------------------\n\nTITLE: Updating classnames dependency\nDESCRIPTION: This update upgrades the `classnames` dependency from version 2.3.1 to 2.5.1. This may include bug fixes and improvements to the class name management library.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_30\n\n\n\n----------------------------------------\n\nTITLE: Deleting postInstall\nDESCRIPTION: This commit removes the postInstall script. The postInstall script is run automatically after the package has been installed. The removal of postInstall indicates it's no longer needed or has been replaced by another approach.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_155\n\n\n\n----------------------------------------\n\nTITLE: Updating Themes with Click Theme for Tabs\nDESCRIPTION: This involves updating the click theme specifically for the tabs component. This improves the visual feedback when a tab is selected. This aims to enhance the user experience within the tab component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_91\n\n\n\n----------------------------------------\n\nTITLE: Fixing demo according PR comments\nDESCRIPTION: This commit fixes the demo according to the PR comments. It includes fixes, adjustments or improvements in the money-input demo based on the feedback received during the review process.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_186\n\n\n\n----------------------------------------\n\nTITLE: Example of dataTestId Structure - JSX\nDESCRIPTION: This snippet shows the structure of the dataTestId object for the modal. It defines dataTestId keys for modal parts like content, footer, controls, header, title, closer, and backButton. It is used to find elements for testing.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/modal/src/docs/development.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    modal: dataTestId,\n    content: `${dataTestId}-content`,\n    footer: `${dataTestId}-footer`,\n    controls: `${dataTestId}-controls`,\n    header: `${dataTestId}-header`,\n    title: `${dataTestId}-header-title`,\n    closer: `${dataTestId}-header-closer`,\n    backButton: `${dataTestId}-header-back-button`,\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting CSS variables from bluetint palette in JS\nDESCRIPTION: The code exports CSS variables from the bluetint palette into a JavaScript file, making them accessible for use within JavaScript code.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/vars/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Adding Spinner component for loading states\nDESCRIPTION: Creates a Spinner component to indicate ongoing operations, improving UX during async tasks. Uses React, customizable size and style props.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_124\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-spinner component implementation\n```\n\n----------------------------------------\n\nTITLE: Adding Icons and Arrow\nDESCRIPTION: This commit adds icons and arrow components to the project. Icons are graphical representations of various actions or objects, while arrows are used to indicate direction or flow.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_144\n\n\n\n----------------------------------------\n\nTITLE: Adding keyboard-only focus to button\nDESCRIPTION: This commit introduces keyboard-only focus to the button component. This improves accessibility by ensuring focus styles are visible when navigating the page with a keyboard.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_170\n\n\n\n----------------------------------------\n\nTITLE: Implement calendar mobile view\nDESCRIPTION: Adds a mobile-optimized calendar UI within the calendar component to improve usability on smaller screens. Involves responsive layout adjustments and touch-friendly controls.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_58\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Calendar component implementation for mobile responsiveness */\n```\n\n----------------------------------------\n\nTITLE: Fixing button types\nDESCRIPTION: This commit fixes the type definitions for the button component. Type definitions help to improve code quality and make it easier to catch type-related errors.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_177\n\n\n\n----------------------------------------\n\nTITLE: Using disabled-cursor\nDESCRIPTION: This commit incorporates the 'disabled-cursor' style. The use of 'disabled-cursor' typically affects the cursor's appearance, indicating that an element is disabled or not interactive.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_147\n\n\n\n----------------------------------------\n\nTITLE: Adding money-input component\nDESCRIPTION: This commit adds a money-input component, story and base test. The money-input component is used for formatting and validating currency input. The component encapsulates the formatting logic.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_183\n\n\n\n----------------------------------------\n\nTITLE: Implementing amount, add demo\nDESCRIPTION: This commit implements the amount component. This includes the complete implementation with features, functionalities and adding a demo showcasing the usage of the amount component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_175\n\n\n\n----------------------------------------\n\nTITLE: Adding lint\nDESCRIPTION: This commit adds linting to the project. Linting checks the code for potential errors and enforces a coding style.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_198\n\n\n\n----------------------------------------\n\nTITLE: Updating Skeleton Component's Default and Click Theme\nDESCRIPTION: The update modifies the default and click themes for the `skeleton` component.  These changes likely affect the visual appearance, such as colors or styles, to match a design specification.  The updates improve the visual appearance of the `skeleton` component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_89\n\n\n\n----------------------------------------\n\nTITLE: Can render without Transition\nDESCRIPTION: This commit enables the Popover component to render without using a Transition component. The transition is an animation that occurs between the open and closed states.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_191\n\n\n\n----------------------------------------\n\nTITLE: Importing SteppedProgressBar Component\nDESCRIPTION: Shows the standard ES6 import statement required to use the SteppedProgressBar component from the '@alfalab/core-components/stepped-progress-bar' package in a React/JSX project.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/stepped-progress-bar/src/docs/Component.stories.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SteppedProgressBar } from '@alfalab/core-components/stepped-progress-bar';\n```\n\n----------------------------------------\n\nTITLE: Changing errors logic\nDESCRIPTION: This commit changes the logic related to errors within the FormControl component. The changes address how errors are handled, displayed, or managed internally.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_180\n\n\n\n----------------------------------------\n\nTITLE: Change media query for TooltipResponsive\nDESCRIPTION: Modifies CSS media queries in the tooltip component to better adapt tooltip responsiveness to different screen sizes. Enhances UI responsiveness and layout stability across device types.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_48\n\nLANGUAGE: CSS\nCODE:\n```\n/* Updated media query rules for TooltipResponsive component */\n```\n\n----------------------------------------\n\nTITLE: Importing Raw CSS\nDESCRIPTION: This code snippet shows how to import raw CSS modules as a string using raw-loader for Storybook's CssVars block. It enables viewing and documenting the CSS variables used within the component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/plate/src/docs/development.mdx#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n!!raw-loader!../components/base-plate/index.module.css\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and local modules for documentation setup in JavaScript\nDESCRIPTION: Imports necessary components and modules from Storybook add-ons and local files to facilitate documentation rendering. Key dependencies include '@storybook/addon-docs' for creating documentation pages, custom blocks for layout, and markdown/MDX files for descriptive content.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/comment/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Fix Icon SVG Size Fit\nDESCRIPTION: Adjusts the size fit for SVG icons within the cdn-icon component. This change ensures icons scale correctly within their containers and improves visual consistency across the interface.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Code related to SVG icon size fit adjustments in the cdn-icon component */\n```\n\n----------------------------------------\n\nTITLE: Fixes according review comments\nDESCRIPTION: This commit implements the necessary fixes from the review comments. The changes will fix any identified issues.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_187\n\n\n\n----------------------------------------\n\nTITLE: Fixing Imports for glyph icons\nDESCRIPTION: This commit fixes imports for glyph icons in @alfalab/core-components-with-suffix. This correction ensures that glyph icons are correctly imported and displayed within the component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/with-suffix/CHANGELOG.md#_snippet_7\n\nLANGUAGE: none\nCODE:\n```\nimports for glyph icons ([#994](https://github.com/core-ds/core-components/issues/994)) ([8e807f2](https://github.com/core-ds/core-components/commit/8e807f26abf0f942fe8eadbd201caecb297b35dc))\n```\n\n----------------------------------------\n\nTITLE: Adding Higher-Order Component with suffix\nDESCRIPTION: Provides a higher-order component (HOC) that adds suffix functionality to wrapped components, useful for enhancing behavior or styling dynamically.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_136\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-with-suffix HOC implementation\n```\n\n----------------------------------------\n\nTITLE: Updating Slider Input stories\nDESCRIPTION: Refines the storybook or demo configurations for the Slider Input component, demonstrating usage scenarios. Depends on React and storybook setups.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_123\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-slider-input story updates\n```\n\n----------------------------------------\n\nTITLE: Hiding modal dialog\nDESCRIPTION: Provides functionality to hide or close modal dialogs through state control, ensuring proper cleanup and UX flow, implemented in React.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_142\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-modal hide functionality\n```\n\n----------------------------------------\n\nTITLE: Fixes according review comments\nDESCRIPTION: This commit implements the necessary fixes from the review comments. The changes will fix any identified issues.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_188\n\n\n\n----------------------------------------\n\nTITLE: Adding events & props\nDESCRIPTION: This commit adds events and props to the input components. Events and props will enable the developer to control the input component in multiple ways.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_197\n\n\n\n----------------------------------------\n\nTITLE: Adding Vertical Alignment to PureCell.Graphics\nDESCRIPTION: Adds vertical alignment to the PureCell.Graphics component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Add layout to Footer in Modal component (React, JavaScript)\nDESCRIPTION: This code snippet updates the Modal component to include a layout structure around its footer section, likely for styling or alignment purposes. Dependencies include React and styling solutions. The change improves structural consistency and layout control of modal footers.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2021.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ModalFooter = ({ children }) => (\n  <div className=\"modal-footer-container\">\n    {children}\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Updating tag and keyboard-focusable dependencies\nDESCRIPTION: This section updates dependencies, including 'tag' to version 5.0.2 and 'keyboard-focusable' to 4.0.2.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Adding and Hooking UI Media Query component\nDESCRIPTION: Provides a React component and hook for handling CSS media queries within JavaScript. It depends on React and the 'useMediaQuery' hook, allowing components to adapt styles and layout based on viewport size. This improves responsiveness and dynamic styling.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_106\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-mq component and hook implementation\n```\n\n----------------------------------------\n\nTITLE: Implementing PageIndicatorBullet with More Than Six Elements in React\nDESCRIPTION: Implementation of PageIndicatorBullet with more than six elements (10 in this example), showing how the component adapts its appearance and animation for larger numbers of items.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/page-indicator/src/docs/description.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const elements = 10;\n    const [activeElement, setActiveElement] = React.useState(0);\n    const handlePrevClick = () => setActiveElement((prev) => Math.max(--prev, 0));\n    const handleNextClick = () => setActiveElement((prev) => Math.min(++prev, elements - 1));\n\n    return (\n        <div>\n            <div>\n                <PageIndicatorBullet size={8} activeElement={activeElement} elements={elements} />\n                <Gap size={8} />\n                <PageIndicatorBullet size={6} activeElement={activeElement} elements={elements} />\n            </div>\n            <Row style={{ gap: 'var(--gap-xs)' }}>\n                <Button leftAddons={<ChevronLeftMIcon />} onClick={handlePrevClick} />\n                <Button leftAddons={<ChevronRightMIcon />} onClick={handleNextClick} />\n            </Row>\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Structuring Documentation Content with Tabs (MDX/JSX)\nDESCRIPTION: Employs a custom `<Tabs>` block (imported from `storybook/blocks`) to organize different sections of the component's documentation into a tabbed interface. Content for each tab (description, changelog, development) is loaded from separate imported files (`description.mdx`, `CHANGELOG.md`, `development.mdx`). The changelog is rendered using the standard Storybook `<Markdown>` component as it's a raw Markdown file.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tag/src/docs/Component.docs.mdx#_snippet_3\n\nLANGUAGE: MDX/JSX\nCODE:\n```\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Improving components, updating styles & props\nDESCRIPTION: This commit improves existing components, updates styles, and props. This could include refactoring existing components, modifying component's styles, adding or updating existing props.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_196\n\n\n\n----------------------------------------\n\nTITLE: Temporary fix for non-existing types\nDESCRIPTION: This bug fix provides a temporary solution for the problem of missing types. This is a placeholder until the complete set of correct types is available.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/table/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Adding sideEffects to multiple components\nDESCRIPTION: This update adds `sideEffects: false` to the `package.json` of the specified components. This can help with tree shaking and bundle size optimization. Affected components include `comment`, `confirmation-v1`, `custom-button`, `date-range-input`, and many more.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Modal styles fix in React component (JavaScript)\nDESCRIPTION: This code handles fixing style issues in a modal React component, possibly adjusting z-index, positioning, or layout styles to ensure proper display and stacking. Dependencies include React and style management tools. The fix improves modal visual consistency and prevents overlay conflicts.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2021.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst styleFix = () => {\n  // Adjust modal style for proper display\n  modalRef.current.style.zIndex = 1050;\n  modalRef.current.style.position = 'fixed';\n};\n```\n\n----------------------------------------\n\nTITLE: Export CSS variables as JS variables\nDESCRIPTION: Enables access to CSS custom properties within JavaScript code by exporting CSS variables, facilitating dynamic styling and theme customization in script files. Requires parsing CSS variables from stylesheets or DOM styles.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_57\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Export of CSS custom properties as JS variables for theme management */\n```\n\n----------------------------------------\n\nTITLE: Updating button styles\nDESCRIPTION: This commit updates the styles of the button component. This will include changes to things such as appearance and usability.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_171\n\n\n\n----------------------------------------\n\nTITLE: Publishing\nDESCRIPTION: This commit includes publishing related updates. It will cover the publication of the updated package to the NPM registry.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_160\n\n\n\n----------------------------------------\n\nTITLE: Updating picker-button dependency\nDESCRIPTION: This entry updates the dependencies, specifically the 'picker-button' component, to version 10.3.8.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Fixing drawer transition props\nDESCRIPTION: This update fixes the handling of transition prop in the `drawer` component. It also increases the specificity of the transition class within the `backdrop` component to ensure the correct styling.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Updating select, button, pagination Dependencies\nDESCRIPTION: This snippet describes the process of updating dependencies for the 'select', 'button', and 'pagination' packages within the core-components project. The updates include specific versions. There are no direct code snippets in this context; the focus is on the dependency management of these packages.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/table/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Updating picker-button dependency\nDESCRIPTION: This entry updates dependencies. Specifically, 'picker-button' component is set to version 10.0.1.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Fixing max-height Content\nDESCRIPTION: This update fixes the max-height of the content; the max-height is now only added to foldable content.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Applying Variables in CSS Classes\nDESCRIPTION: Explicit values in CSS classes (padding, border-radius, etc.) are replaced with variables.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_35\n\n\n\n----------------------------------------\n\nTITLE: Adding divider\nDESCRIPTION: This commit adds a divider component. The divider provides a horizontal or vertical line to separate content.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_193\n\n\n\n----------------------------------------\n\nTITLE: Updating picker-button dependency\nDESCRIPTION: The dependencies are updated. The 'picker-button' component is updated to version 10.3.9.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Adding a modal component\nDESCRIPTION: Defines a React modal component that manages overlay display for dialogs or prompts. It relies on React and relevant modal libraries or custom styling. Key parameters include visibility control and content, providing reusable modal functionality.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_105\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-modal component implementation\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Storybook Block Components - JavaScript\nDESCRIPTION: Imports custom `ComponentHeader` and `Tabs` components from a local 'storybook/blocks' path. These components are likely used to provide a consistent visual structure and layout for documentation pages.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/status/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Documentation Components - JavaScript\nDESCRIPTION: Imports `Meta` and `Markdown` components from the `@storybook/addon-docs` package. These components are essential for defining metadata for the story and rendering Markdown content within the documentation page.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/status/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Updating picker-button dependency\nDESCRIPTION: The dependencies are updated. Specifically, 'picker-button' is upgraded to version 10.3.2.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Customization of File Upload Item (React)\nDESCRIPTION: This snippet demonstrates how to customize the slots (left, content, right) of the `FileUploadItem` component by overriding the default styles. It creates simple placeholder divs with custom styling to represent the customizable slots.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/file-upload-item/src/docs/description.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nrender(() => {\n    const commonStyles = {\n        height: 48,\n        border: '1px dashed var(--color-light-status-info)',\n        borderRadius: '8px',\n        backgroundColor: 'var(--color-light-status-muted-alt-info)',\n    };\n\n    const leftAddonStyles = {\n        width: 48,\n        ...commonStyles,\n    };\n\n    const contentStyles = {\n        width: 232,\n        ...commonStyles,\n    };\n\n    const rightAddonStyles = {\n        width: 80,\n        ...commonStyles,\n    };\n\n    return (\n        <FileUploadItem>\n            <div style={leftAddonStyles}></div>\n            <div style={contentStyles}></div>\n            <div style={rightAddonStyles}></div>\n        </FileUploadItem>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Updating picker-button dependency\nDESCRIPTION: This section updates dependencies, specifically setting 'picker-button' to version 10.0.3.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Updating versions\nDESCRIPTION: This commit updates the versions of some dependencies, as part of issue #525.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/phone-input/CHANGELOG.md#_snippet_7\n\nLANGUAGE: other\nCODE:\n```\n31b2e4c\n```\n\n----------------------------------------\n\nTITLE: Rendering the Intro Component\nDESCRIPTION: Renders the imported Intro component which contains the quick start content for the documentation page.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/getting-started.stories.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Intro />\n```\n\n----------------------------------------\n\nTITLE: Adding new tokens light-graphic-positive-alpha-10\nDESCRIPTION: This change introduces new tokens light-graphic-positive-alpha-10 and light-graphic-negative-alpha-10 to the core components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/vars/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Adding __esModule to cjs export\nDESCRIPTION: This change adds the `__esModule` property to CommonJS (CJS) exports. This is a standard practice in modern JavaScript to indicate that a module is an ECMAScript module, even when it is being exported in the CJS format. It is used by bundlers and module loaders to correctly identify the type of the module.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/table/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Replacing lodash with common package\nDESCRIPTION: This change replaces the usage of lodash with the common package within the `collapse`, `input-autocomplete`, and `tabs` components. This can lead to better code reuse and maintainability.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_29\n\n\n\n----------------------------------------\n\nTITLE: Upgrade Storybook Feature\nDESCRIPTION: Upgrades the Storybook version used by the @alfalab/core-components-alert package. This enhancement brings improvements to the component's documentation and development environment within Storybook.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/alert/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n-   upgrade storybook ([#696](https://github.com/core-ds/core-components/issues/696))\n```\n\n----------------------------------------\n\nTITLE: Adding Plate component\nDESCRIPTION: Defines a React 'Plate' component used as a container or card with styling and optional close actions. It depends on React and styling libraries, suitable for creating modular, visually consistent sections within UIs.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_110\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-plate component implementation\n```\n\n----------------------------------------\n\nTITLE: Rendering component header with name and description in Storybook\nDESCRIPTION: This code renders a header section for the FileUploadItem component, specifying its name and providing a brief description in Russian, indicating the component's purpose within the UI.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/file-upload-item/src/docs/Component.docs.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ComponentHeader\n    name='FileUploadItem'\n    children='Используется для отображения загружаемого файла.'\n/>\n```\n\n----------------------------------------\n\nTITLE: Storybook Tabs for Documentation Sections in JavaScript\nDESCRIPTION: This snippet creates tabbed panels for displaying the component description, changelog, and development notes within Storybook. It uses imported MDX and markdown content, organizing documentation into a user-friendly interface.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/select/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering ArgsTabs Component for Toast Plate Variants in JavaScript\nDESCRIPTION: This JSX snippet renders the ArgsTabs component with a 'components' prop that includes desktop, mobile, and responsive toast plate variants. It allows switching between different component versions for testing or demonstration purposes. Dependencies include the ArgsTabs component from the core blocks library.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/toast-plate/src/docs/development.mdx#_snippet_3\n\nLANGUAGE: JavaScript/JSX\nCODE:\n```\n<ArgsTabs components={{ ToastPlateDesktop, ToastPlateMobile, ToastPlate }} />\n```\n\n----------------------------------------\n\nTITLE: Importing KeyboardFocusable in React\nDESCRIPTION: How to import the KeyboardFocusable component from the core components library.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/keyboard-focusable/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { KeyboardFocusable } from '@alfalab/core-components/keyboard-focusable';\n```\n\n----------------------------------------\n\nTITLE: Adding desktop/mobile imports for alert\nDESCRIPTION: This update adds desktop and mobile imports for the `alert` component. This allows the application to import different versions of the component, depending on the device.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Introducing Fresh Colors\nDESCRIPTION: This updates the color palette used within the core components.  This may involve adding new colors or modifying existing ones.  This applies updated color schemes to improve the visual appearance of the components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_98\n\n\n\n----------------------------------------\n\nTITLE: Raw CSS Styles (CSS)\nDESCRIPTION: Imports raw CSS styles from the `index.module.css` file using `raw-loader`. This is typically used to provide CSS variables for styling the TabBar component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tab-bar/src/docs/development.mdx#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\nimport styles from '!!raw-loader!../index.module.css';\n```\n\n----------------------------------------\n\nTITLE: Configuring tabbed sections with Description, Changelog, and Development in Storybook\nDESCRIPTION: Creates a tabbed interface that organizes documentation content, including component description, changelog, and development details. It uses the 'Tabs' component and imports pre-defined MDX and markdown content, facilitating flexible and structured documentation display.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/comment/src/docs/Component.docs.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Core Components Codemod tool\nDESCRIPTION: This command installs the `@alfalab/core-components-codemod` package as a development dependency using `yarn`. This allows developers to use codemod tools to automate code modifications.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/codemod/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add --dev @alfalab/core-components-codemod\n```\n\n----------------------------------------\n\nTITLE: Displaying BankCard Component Properties using Storybook ArgsTable in JSX\nDESCRIPTION: This snippet uses Storybook's ArgsTable addon to automatically generate a properties table for the BankCard component. It helps developers visualize and understand the API surface of BankCard within Storybook documentation. Dependencies include the @storybook/addon-docs package and the BankCard component itself. The ArgsTable of attribute links the table directly to the BankCard component to extract prop definitions.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/bank-card/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ArgsTable of={BankCard} />\n```\n\n----------------------------------------\n\nTITLE: Defining DataTestId Utility Function for Toast Plate Components in JavaScript\nDESCRIPTION: This code defines a utility function `getBaseToastPlateTestIds` that generates standardized test identifiers using a provided dataTestId. It helps facilitate testing by providing predictable IDs for toast badge and component elements. The function is exported for use in testing frameworks.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/toast-plate/src/docs/development.mdx#_snippet_2\n\nLANGUAGE: JavaScript/JSX\nCODE:\n```\nconst getBaseToastPlateTestIds = (dataTestId) => ({\n    badge: `${dataTestId}-badge`,\n    component: `${dataTestId}-component`,\n});\n```\n\n----------------------------------------\n\nTITLE: Area Chart Configuration in TypeScript\nDESCRIPTION: Specifies the configuration for an area chart with gradient support, visibility options, and styling properties. Includes settings for gradient definitions, line appearance, dot configuration, and data formatting.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/chart/src/docs/development.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n/*\n * Пример графика типа area\n */\n{\n    /*\n     * Скрыть график\n     */\n    hide?: false,\n\n    /*\n     * Скрыть график в легенде\n     */\n    hideLegend?: false,\n\n    /*\n     * Скрыть график в тултипe\n     */\n    hideTooltip?: false,\n\n    /*\n     * Z-index графика\n     */\n    zIndex,\n\n    /*\n     * Тип графика\n     */\n    chart: 'ara',\n\n    /*\n     * Тип иконки для графика\n     */\n    icon,\n\n    /*\n     * Оффсет для градиента (только для типа area)\n     */\n    offset,\n\n    /**\n     * Параметры градиента\n     */\n    gradient: {\n\n        /**\n         * Индефикатор градиента\n         */\n        gid,\n\n        /**\n         * Параметра точек для градиента\n         */\n        points: [\n\n            /**\n             * Отступ\n             */\n            offset: number,\n\n            /**\n             * Цвет\n             */\n            stopColor: string,\n\n            /**\n             * Прозрачность\n             */\n            stopOpacity: number,\n        ];\n    };\n\n    /*\n     * Параметры графика\n     */\n    properties: {\n\n        /*\n         * Название графика (отображается в легендах и тултипе)\n         */\n        name,\n\n        /*\n         * Ключ данных\n         */\n        dataKey,\n\n        /*\n         * Цвет линии графика\n         */\n        stroke?: '#3182bd',\n\n        /*\n         * Отображение точек на графике\n         */\n        dot?,\n\n        /*\n         * Параметры для точек грфика (если dot: true)\n         */\n        dotSettings: [{\n\n            /*\n             * Значение media query\n             */\n            media,\n\n            /*\n             * Значение маштаба при ховере\n             */\n            scale,\n\n            /*\n             * Начальный значения маштаба\n             */\n            initScale,\n\n            /*\n             * Ширина точки\n             */\n            width,\n\n            /*\n             * Высота точки\n             */\n            height,\n        }],\n\n        /*\n         * Наследование цвета\n         */\n        inheritStroke?: false,\n\n        /*\n         * Форматирование значения графика для тултипа\n         */\n        formatter?,\n\n        /*\n         * Тип линии\n         */\n        type? 'linear',\n\n        /*\n         * Толщина линии\n         */\n        strokeWidth?: 1,\n\n        /*\n         * Прерывистость линии\n         */\n        strokeDasharray?,\n    },\n\n    /**\n     * Данные для построения графика\n     */\n    data: [\n\n        /**\n         * Метка\n         */\n        label,\n\n        /**\n         * Значение\n         */\n        value,\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Screenshot Tests\nDESCRIPTION: This command runs the screenshot tests. It's assumed that the necessary dependencies (like Jest and Playwright) are installed and configured correctly for the project.  The command invokes the test suite to generate and compare screenshots.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/screenshots.stories.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn test:screenshots\n```\n\n----------------------------------------\n\nTITLE: Adding the Status Component\nDESCRIPTION: A new `status` component is being added.  Status components are useful for visually communicating the state or condition of an element or process. This can include indicators for success, failure, warnings, or other states. The component provides a standardized UI element to visually represent statuses.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_74\n\n\n\n----------------------------------------\n\nTITLE: Adding Progress Bar component\nDESCRIPTION: Implements a React progress bar component for indicating progress or loading states. Depends on React, with props to set progress percentage, style, and accessibility features. Used for visual feedback during tasks.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_112\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-progress-bar component implementation\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Fixing loading state for icon-button - JavaScript\nDESCRIPTION: This bug fix resolves the loading state for the icon-button component. By fixing this, the component displays correctly during asynchronous operations, giving users visual feedback that an action is in progress.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-range/CHANGELOG.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n### Bug Fixes\n\n-   **icon-button:** fix loading ([#105](https://github.com/core-ds/core-components/issues/105)) ([0b133f0](https://github.com/core-ds/core-components/commit/0b133f042e86702ec2861915f2cdbcdbad9ca905))\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Metadata using Meta JSX\nDESCRIPTION: Uses the Storybook `@storybook/addon-docs` `Meta` component to link the documentation page to the component's stories. The `of={Stories}` prop connects this MDX file to the stories defined in `./Component.stories.`. This allows Storybook to associate props, controls, and other story data with the documentation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/form-control/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta of={Stories} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Smart Error Icon\nDESCRIPTION: This commit implements a smart error icon feature. This likely involves dynamically displaying an error icon based on certain conditions or error states. No specific code is provided in this context, just a feature implementation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/intl-phone-input/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Using getPlateTestIds Function\nDESCRIPTION: This code snippet shows the structure of the object returned by the `getPlateTestIds` function, which is used for dataTestId based testing.  The function creates a test ID for the wrapper and the title element within the Plate component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/plate/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    wrapper: dataTestId,\n    title: `${dataTestId}-title`,\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Popover in Toast Component\nDESCRIPTION: This change updates the popover associated with the toast component. This may include changes to the visual appearance, positioning, or behaviour of the popover, and/or the content it displays. These updates improve the user experience.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_94\n\n\n\n----------------------------------------\n\nTITLE: Setting Component Metadata with Meta\nDESCRIPTION: This code configures the metadata for the Storybook component using the `<Meta>` component from `@storybook/addon-docs`.  It takes the stories object as input, setting the context for documentation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/loader/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Meta of={Stories} />\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storybook Meta Information for Radio Component\nDESCRIPTION: Configuration of the Storybook metadata for the Radio component, defining its title, component reference, and unique identifier for navigation and organization within Storybook.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/radio/src/docs/Component.stories.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta title='Components/Radio' component={Radio} id='Radio' />\n```\n\n----------------------------------------\n\nTITLE: Defining dataTestId object (React)\nDESCRIPTION: This snippet outlines the structure of an object returned by `getSelectTestIds`. It defines how `dataTestId` is used to target elements in the Select component. It lists a collection of keys that generate corresponding dataTestId values used for testing. It is essential for locating and validating components during automated testing and is dependent on a passed in `dataTestId`.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/select/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    select: dataTestId,\n    option: `${dataTestId}-option`,\n    optionsList: `${dataTestId}-options-list`,\n\n    clearButton: `${dataTestId}-options-list-clear`,\n    applyButton: `${dataTestId}-options-list-apply`,\n\n    // Для SelectMobile\n    bottomSheet: `${dataTestId}-bottom-sheet`,\n    bottomSheetHeader: `${dataTestId}-bottom-sheet-header`,\n    bottomSheetContent: `${dataTestId}-bottom-sheet-content`,\n\n    // Для SelectModalMobile\n    modal: `${dataTestId}-modal`,\n    modalHeader: `${dataTestId}-modal-header`,\n    modalContent: `${dataTestId}-modal-content`,\n\n    field: `${dataTestId}-field`,\n    fieldFormControl: `${dataTestId}-field-form-control`,\n    fieldLeftAddons: `${dataTestId}-field-form-control-left-addons`,\n    fieldRightAddons: `${dataTestId}-field-form-control-right-addons`,\n    fieldError: `${dataTestId}-field-form-control-error-message`,\n    fieldHint: `${dataTestId}-field-form-control-hint`,\n    fieldClearIcon: `${dataTestId}-field-clear-icon`,\n\n    searchInput: `${dataTestId}-search`,\n    searchFormControl: `${dataTestId}-search-form-control`,\n    searchInner: `${dataTestId}-search-form-control-inner`,\n    searchLeftAddons: `${dataTestId}-search-form-control-left-addons`,\n    searchRightAddons: `${dataTestId}-search-form-control-right-addons`,\n    searchError: `${dataTestId}-search-form-control-error-message`,\n    searchHint: `${dataTestId}-search-form-control-hint`,\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Action Button Theming and Fixing Addons Align to Toast-Plate\nDESCRIPTION: This update adds action button theming and fixes the alignment of addons within the `toast-plate` component. This involves theming the look of action buttons displayed in toasts and resolving any issues with how addons are visually positioned.  This adds style and improves the visual presentation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_95\n\n\n\n----------------------------------------\n\nTITLE: Adding atomic exports and sideEffects in pure-cell\nDESCRIPTION: This update adds atomic exports and `sideEffects: false` to the `pure-cell` component. Atomic exports help improve code organization, and `sideEffects: false` can assist with bundle optimization.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Setting up Storybook Meta Component for Quick Start Page\nDESCRIPTION: Configures a Storybook documentation page with the title 'Quick start', hiding the canvas preview tab and setting the page ID to 'intro'.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/getting-started.stories.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta title='Quick start' parameters={{ previewTabs: { canvas: { hidden: true } } }} id='intro' />\n```\n\n----------------------------------------\n\nTITLE: Mobile getInputAutocompleteMobileTestIds Object Structure in JavaScript\nDESCRIPTION: This JavaScript snippet displays the returned structure from getInputAutocompleteMobileTestIds, which provides test ID mappings for the mobile input autocomplete and modal components. It features mappings for different mobile-specific UI elements such as bottomSheet, modal, clearButton, and search controls, enabling targeted automated tests. The object requires a dataTestId input and returns IDs tailored to mobile interface elements.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/input-autocomplete/src/docs/development.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    inputAutocomplete: dataTestId,\n    option: `${dataTestId}-option`,\n    optionsList: `${dataTestId}-options-list`,\n\n    // для InputAutocompleteMobile\n    bottomSheet: `${dataTestId}-bottom-sheet`,\n    bottomSheetHeader: `${dataTestId}-bottom-sheet-header`,\n    bottomSheetContent: `${dataTestId}-bottom-sheet-content`,\n\n    // для InputAutocompleteModalMobile\n    modal: `${dataTestId}-modal`,\n    modalHeader: `${dataTestId}-modal-header`,\n    modalContent: `${dataTestId}-modal-content`,\n\n    clearButton: `${dataTestId}-clear`,\n    applyButton: `${dataTestId}-apply`,\n\n    fieldInner: `${dataTestId}-field-form-control-inner`,\n    fieldFormControl: `${dataTestId}-field-form-control`,\n    fieldLeftAddons: `${dataTestId}-field-form-control-left-addons`,\n    fieldRightAddons: `${dataTestId}-field-form-control-right-addons`,\n    fieldError: `${dataTestId}-field-form-control-error-message`,\n    fieldHint: `${dataTestId}-field-form-control-hint`,\n\n    searchInput: `${dataTestId}-search`,\n    searchFormControl: `${dataTestId}-search-form-control`,\n    searchInner: `${dataTestId}-search-form-control-inner`,\n    searchLeftAddons: `${dataTestId}-search-form-control-left-addons`,\n    searchRightAddons: `${dataTestId}-search-form-control-right-addons`,\n    searchError: `${dataTestId}-search-form-control-error-message`,\n    searchHint: `${dataTestId}-search-form-control-hint`,\n};\n```\n\n----------------------------------------\n\nTITLE: Changing height of pure input component\nDESCRIPTION: Adjusts the height styling of a 'pure' input component to align with design specifications. Requires React and CSS styling adjustments, with a focus on maintaining input usability and aesthetic consistency.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_113\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-pure-input height modification\n```\n\n----------------------------------------\n\nTITLE: Importing PureCell Components (Atomic & Compound) - JSX\nDESCRIPTION: This code snippet demonstrates how to import both atomic and compound PureCell components from the @alfalab/core-components library.  Atomic components are individual elements, while the compound component provides a pre-assembled structure. These components are intended for use in React applications.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pure-cell/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Атомарные\nimport {\n    PureCellComponent,\n    Main,\n    Graphics,\n    Content,\n    Text,\n    Amount,\n    AmountTitle,\n    Addon,\n    Footer,\n    ExtraSubtitle,\n    FooterButton,\n    Comment,\n    Category,\n} from '@alfalab/core-components/pure-cell';\n\n// Компаунд\nimport { PureCell } from '@alfalab/core-components/pure-cell';\n```\n\n----------------------------------------\n\nTITLE: Importing Components from Storybook\nDESCRIPTION: Imports the Meta component from Storybook addon-docs and the Intro component from a local Storybook pages directory.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/getting-started.stories.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\nimport { Intro } from 'storybook/pages/intro';\n```\n\n----------------------------------------\n\nTITLE: Adding Loader component\nDESCRIPTION: This commit adds a Loader component. The loader is a visual indicator displayed while content is loading. The loader is responsible for its styling and user experience.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_182\n\n\n\n----------------------------------------\n\nTITLE: Rendering Header for CheckboxGroup Component\nDESCRIPTION: Uses the ComponentHeader to display the component's name and description. The children prop contains a Russian description of the CheckboxGroup's purpose, indicating it is for selecting one or multiple available values.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/checkbox-group/src/docs/Component.docs.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ComponentHeader\n    name='CheckboxGroup'\n    children='Используется для выбора одного или нескольких доступных значений.'\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Button component within a React functional component\nDESCRIPTION: This snippet contains JSX syntax indicating the rendering of a Button component within a React functional component, likely for reusable UI purposes. It is responsible for displaying a button element that can be interacted with by users. Dependencies include React and a Button component imported from a UI library or local components. The snippet ends with a closing parentheses and a closing div, indicating a component's JSX return structure.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pass-code/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n                </Button>\n            )}\n        </div>\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Splitting select/option components\nDESCRIPTION: This update splits the `select/option` component and adds `OptionDesktop` and `OptionMobile` components to `select/shared`. This change allows for a more modular and device-specific implementation of the option components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Updating calendar@6.1.10\nDESCRIPTION: This patch change updates the calendar component's version to 6.1.10. This suggests a bug fix or a minor update within the calendar component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/CHANGELOG.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n-   Обновлены зависимости\n    -   calendar@6.1.10\n```\n\n----------------------------------------\n\nTITLE: Fixing Typings errors in Calendar\nDESCRIPTION: This fix addresses potential typing errors within the `calendar` component, improving code correctness and maintainability.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Deprecating 'RUR' currency in amount component\nDESCRIPTION: This update marks the 'RUR' (Russian Ruble) as deprecated in the amount component, guiding developers to prefer newer currency options and warning if deprecated currency is used, thus supporting future-proofing.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\nif (props.currency === 'RUR') {\n  console.warn(\"Warning: 'RUR' currency is deprecated. Please use 'RUB' instead.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing tab line position calculation\nDESCRIPTION: This update fixes the calculation of the bottom line's position within a tab, improving the component's visual correctness.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_27\n\n\n\n----------------------------------------\n\nTITLE: Correcting option selection in select\nDESCRIPTION: This update fixes an issue where the wrong options were being passed into the `selectedItems` prop in the `select` component. It also corrects the behavior of the `setSelectedItems` handler when using a virtual list in a group component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Changing Error Type to ReactNode\nDESCRIPTION: This commit modifies the error type within a component to accept a ReactNode. This allows for more flexible error display using React components, rather than only strings.  No specific code is provided in this context.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/intl-phone-input/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Fixing border color for custom shape\nDESCRIPTION: This fixes the `border` color in `view=custom shape=rect` components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_28\n\n\n\n----------------------------------------\n\nTITLE: Updating picker-button dependency\nDESCRIPTION: This section updates the dependencies, specifically updating the 'picker-button' component to version 10.3.3.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Updating calendar@6.1.5\nDESCRIPTION: This patch change updates the calendar component's version to 6.1.5. This suggests a bug fix or a minor update within the calendar component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/CHANGELOG.md#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n-   Updated dependencies [[#208](https://github.com/core-ds/core-components/pull/208)]\n    -   @alfalab/core-components-calendar@6.1.5\n```\n\n----------------------------------------\n\nTITLE: Fixing @alfalab/utils\nDESCRIPTION: This commit updates the @alfalab/utils dependency. This likely involves bug fixes or improvements within the utility package. No specific code is provided in this context, just a dependency update.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/intl-phone-input/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Updating calendar@6.1.6\nDESCRIPTION: This patch change updates the calendar component's version to 6.1.6. This suggests a bug fix or a minor update within the calendar component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/CHANGELOG.md#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n-   Updated dependencies [[#282](https://github.com/core-ds/core-components/pull/282)]\n    -   @alfalab/core-components-calendar@6.1.6\n```\n\n----------------------------------------\n\nTITLE: Styling a spacer div in JSX\nDESCRIPTION: This snippet demonstrates creating a styled div element used as a spacer with specific height, margin, and background color, utilizing inline styles and CSS variables. It depends on React JSX syntax and CSS variables for styling. The purpose is to provide spacing within a layout.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/divider/src/docs/description.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ height: 24, marginBottom: 'var(--gap-8)', backgroundColor: 'var(--color-light-base-bg-secondary)' }} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta for Slider Component in React\nDESCRIPTION: Defines metadata for the Slider component story in Storybook, setting the title, component reference, and identifier. It is essential for registering the component within Storybook's navigation and organizing stories.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/slider/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Story, Markdown } from '@storybook/addon-docs';\nimport { number, select } from '@storybook/addon-knobs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport { Slider } from '@alfalab/core-components-slider';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta title='Components/Slider' component={Slider} id='Slider' />\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies and ArgTypes Documentation Setup in JavaScript\nDESCRIPTION: This snippet imports the ArgTypes from '@storybook/addon-docs' and the Status component itself from a relative local path, establishing dependencies for documenting the component's properties within Storybook. The ArgTypes component usage enables automated extraction and display of the Status component's props and types.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/status/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ArgTypes } from '@storybook/addon-docs';\nimport { Status } from '../index';\n```\n\n----------------------------------------\n\nTITLE: Removing unused colors\nDESCRIPTION: This change removes unused colors from the CSS variables.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/vars/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Replacing Plate Icons\nDESCRIPTION: Icons loaded from 'alfabank.servicecdn.ru' in the Plate component are replaced with icons from icons-glyph.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_33\n\n\n\n----------------------------------------\n\nTITLE: Adding primitive style updates\nDESCRIPTION: Updates foundational style primitives such as colors, fonts, and spacing tokens to ensure a cohesive design language across components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_134\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-vars primitives style updates\n```\n\n----------------------------------------\n\nTITLE: Improving Theme Switcher\nDESCRIPTION: This commit enhances the theme switcher functionality. The theme switcher allows users to toggle between different themes (e.g., light and dark). The improved version might offer better usability or additional features.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_145\n\n\n\n----------------------------------------\n\nTITLE: Adding Shadows variables\nDESCRIPTION: Defines shadow-related styling variables for consistent shadow effects throughout the component library. Uses CSS variables or style tokens for theme consistency.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_132\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-vars shadows variables definitions\n```\n\n----------------------------------------\n\nTITLE: Setting up Storybook Metadata and Documentation Tabs in React\nDESCRIPTION: This snippet configures the metadata and documentation for the Checkbox component story in Storybook. It imports components from '@storybook/addon-docs' and '@storybook/blocks' to specify the story title, ID, and linked React component. Additionally, it includes tabs for Description, Development guidelines, and Changelog, rendering markdown and MDX content. This setup facilitates structured documentation and versioning information for the Checkbox component within Storybook. Dependencies include Storybook addons @addon-docs, @addons-knobs, and block-level UI components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/checkbox/src/docs/Component.stories.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta, Story, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta title='Components/Checkbox' component={Checkbox} id='Checkbox' />\n\n<ComponentHeader\n    name='Checkbox'\n    children='Используется для управления параметром с бинарным состоянием.'\n/>\n\n<Tabs\n    description={<Description />}\n    development={<Development />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n/>\n```\n\n----------------------------------------\n\nTITLE: Simplifying Link component\nDESCRIPTION: Refines the Link UI component by removing unnecessary addons or decorations, simplifying the appearance and behavior. Uses React and styling adjustments.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_140\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for simplified link component implementation\n```\n\n----------------------------------------\n\nTITLE: Displaying Component Header and Tabs in Storybook\nDESCRIPTION: This snippet adds component-level documentation to the Storybook story. It uses `ComponentHeader` and `Tabs` components to display a header with the component's name and a description. It also uses tabs for displaying descriptions, development information, and changelog content. This improves the user experience and provides important context for the component. Requires the imported blocks for the component header and tabs, along with description, development information, and the changelog data.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-input/src/docs/Component.stories.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<ComponentHeader name='CalendarInput' children='Поле для указания даты.' />\n\n<Tabs\n    description={<Description />}\n    development={<Development />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Alert Component Properties with ArgTypes\nDESCRIPTION: This snippet utilizes the ArgTypes utility from '@storybook/addon-docs' to generate documentation for the properties of the Alert component. It leverages the 'of' prop to specify the Alert component, enabling automatic property documentation generation.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/alert/src/docs/development.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ArgTypes of={Alert} />\n```\n\n----------------------------------------\n\nTITLE: Defining Calendar Component Documentation Structure in MDX\nDESCRIPTION: Sets up the documentation layout for the Calendar component using ComponentHeader and Tabs from Storybook blocks, incorporating description, development guidelines, and changelog information.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar/src/docs/Component.stories.mdx#_snippet_3\n\nLANGUAGE: MDX\nCODE:\n```\n<Meta title='Components/Calendar' component={Calendar} id='Calendar' />\n\n<ComponentHeader name='Calendar' children='Компонент для выбора даты и диапазона дат.' />\n\n<Tabs\n    description={<Description />}\n    development={<Development />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Storybook Metadata and Tabs Using React JSX\nDESCRIPTION: This snippet imports core Storybook documentation components such as Meta and Markdown from '@storybook/addon-docs', along with ComponentHeader and Tabs from 'storybook/blocks'. It also imports story definitions and markdown documentation files (description, development, changelog). The components are assembled within JSX to render metadata, a component header named 'Table' with a description in Russian, and a Tabs component containing the imported documentation. Dependencies include the '@storybook/addon-docs' package and proper setup of markdown handling for .md and .mdx files. The snippet expects JSX rendering in a React environment within Storybook.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/table/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta of={Stories} />\n\n<ComponentHeader\n    name='Table'\n    children='Набор компонентов для построения таблиц.'\n/>\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Reverting arrow in input autocomplete\nDESCRIPTION: Adjusts or removes the arrow indicator in the input autocomplete component, streamlining the UI as per design requirements. Uses React and styling adjustments.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_139\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for reverting input-autocomplete arrow\n```\n\n----------------------------------------\n\nTITLE: Creating Tabbed Interface with Description, Changelog, and Development Details\nDESCRIPTION: This snippet creates a tabs component that displays different sections such as description, changelog, and development info related to the CalendarRange component. It uses imported markdown components and the Changelog raw data, allowing users to switch between various documentation views in the storybook interface.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-range/src/docs/Component.docs.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Documentation for BaseModal Component\nDESCRIPTION: This snippet configures the Storybook documentation page for the BaseModal component. It imports required Storybook addons and documentation components, sets up the Meta configuration, and creates a tabbed interface with component description, changelog, and development information.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/base-modal/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta of={Stories} />\n\n<ComponentHeader name='BaseModal' children='Используется для построения модальных сущностей.' />\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Portal Component Documentation Layout using Storybook MDX in JSX\nDESCRIPTION: Defines the MDX structure for the Portal component doc page by specifying metadata binding to the component stories, rendering a component header with the component name and description in Russian, and creating tabs containing the separate documentation sections for description, changelog (rendered as markdown), and development notes. This snippet arranges the documentation UI for interactive and comprehensive usage in Storybook.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/portal/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta of={Stories} />\n\n<ComponentHeader\n    name='Portal'\n    children='Используется для рендера дочерних элементов в DOM-узел, который находится вне DOM-иерархии родительского компонента.'\n/>\n\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering PageIndicatorDynamic Component in React Storybook\nDESCRIPTION: This React code snippet defines a Storybook story for the `PageIndicatorDynamic` component. It uses `React.createElement` and Storybook knobs (`select`, `number`, `boolean`) to allow dynamic configuration of props like `colors`, `activeElement`, `size`, `gap`, `duration`, `elements`, `activeElementSize`, and `cycle`. The component is rendered inside a styled `div` whose background color changes based on the selected `colors` prop to demonstrate inverted themes.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/page-indicator/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Story name='PageIndicatorDynamic'>\n    {React.createElement(() => {\n        const colors = select(\n            'colors',\n            ['default', 'inverted', 'static', 'static-inverted'],\n            'default',\n        );\n        return (\n            <div\n                style={{\n                    backgroundColor:\n                        colors === 'inverted'\n                            ? 'var(--color-light-base-bg-primary-inverted)'\n                            : 'transparent',\n                    padding: '8px',\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    right: 0,\n                    bottom: 0,\n                }}\n            >\n                <PageIndicatorDynamic\n                    defaultActiveElement={number('activeElement', 0)}\n                    activeElement={number('activeElement', 0)}\n                    active={boolean('active', true)}\n                    size={number('size', 8)}\n                    gap={number('gap', 8)}\n                    duration={number('duration', 3000)}\n                    elements={number('elements', 10)}\n                    activeElementSize={number('activeElementSize', 56)}\n                    colors={colors}\n                    cycle={boolean('active', false)}\n                />\n            </div>\n        );\n    })}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Creating Tabbed Documentation Sections in Storybook\nDESCRIPTION: Implements a tabbed interface containing sections for description, changelog, and development notes related to the Button component. Each tab displays relevant content, with changelog rendered as Markdown. Facilitates organized access to component information.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/button/src/docs/Component.docs.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting up Storybook Metadata for Scrollbar Component\nDESCRIPTION: Configures the Storybook page to visualize the Scrollbar component, associating stories via the Meta helper from '@storybook/addon-docs'.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/scrollbar/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta of={Stories} />\n```\n\n----------------------------------------\n\nTITLE: Implementing smart error icon for Input Component\nDESCRIPTION: This commit introduces a \"smart error icon\" feature in the input component. It likely involves conditional rendering of the error icon based on specific error conditions, improving user experience. This addresses issue #746 and closes #782.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/with-suffix/CHANGELOG.md#_snippet_9\n\nLANGUAGE: none\nCODE:\n```\n**input:** smart error icon ([#746](https://github.com/core-ds/core-components/issues/746)) ([f1950d6](https://github.com/core-ds/core-components/commit/f1950d6d516d17d993f0865c10390b6301bb2707)), closes [#782](https://github.com/core-ds/core-components/issues/782)\n```\n\n----------------------------------------\n\nTITLE: Typing for Typography.Text Component\nDESCRIPTION: This update refines the typing for the Typography.Text component, allowing the passing of a ref. This improves the component's flexibility and integration with other React features.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Linking Storybook Stories to MDX Documentation (MDX/JSX)\nDESCRIPTION: Uses the `<Meta>` component from `@storybook/addon-docs` to associate this MDX documentation page with the component's primary story file (`Component.stories`). This enables Storybook to automatically pull in information from the stories, such as prop tables, args controls, and source code.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tag/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: MDX/JSX\nCODE:\n```\n<Meta of={Stories} />\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for PickerButton Storybook (JavaScript)\nDESCRIPTION: Imports necessary modules for the Storybook setup, including Storybook addons (Meta, Story, Markdown, knobs), icons (StarMIcon), custom blocks (ComponentHeader, Tabs), the PickerButton components (base, mobile, desktop), and Markdown content files.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/picker-button/src/docs/Component.stories.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, Story, Markdown } from '@storybook/addon-docs';\nimport { text, boolean, select } from '@storybook/addon-knobs';\nimport { StarMIcon } from '@alfalab/icons-glyph/StarMIcon';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport { PickerButton } from '@alfalab/core-components-picker-button';\nimport { PickerButtonMobile } from '@alfalab/core-components-picker-button/mobile';\nimport { PickerButtonDesktop } from '@alfalab/core-components-picker-button/desktop';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Documentation Tabs for Skeleton Component in JavaScript\nDESCRIPTION: This snippet imports necessary Storybook addons and local documentation components, then configures a documentation page for the 'Skeleton' component. It creates a header displaying the Russian usage description and sets up interactive tabs for Description, Development, and Changelog content using custom MDX and Markdown files. Dependencies include Storybook's '@storybook/addon-docs', the story files for the component, and MDX or Markdown documentation for proper rendering. The main parameters are the imported documentation files, and the tabs expect content as React components for each section. Inputs are documentation files; output is a structured, interactive Storybook docs page. All documentation content must be in valid MDX or Markdown format.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/skeleton/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Meta, Story, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n\n<Meta title='Components/Skeleton' of={Stories} />\n\n{/* Docs */}\n\n<ComponentHeader name='Skeleton' children='Используется как индикатор загрузки контента.' />\n\n<Tabs\n    description={<Description />}\n    development={<Development />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Tabs for Documentation Sections (JavaScript)\nDESCRIPTION: Constructs a tabbed interface to display different documentation sections such as description, changelog, and development notes. Utilizes imported Markdown and React components for content rendering.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/gap/src/docs/Component.docs.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Docs and Content Files in TypeScript/JSX\nDESCRIPTION: This snippet imports necessary modules from '@storybook/addon-docs' and 'storybook/blocks' to build a documentation page, along with local markdown and story files to populate content sections. It sets up dependencies on Storybook's documentation addon and markdown handling, requiring React environment and Storybook configured to process MDX and raw markdown imports.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/divider/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies JavaScript\nDESCRIPTION: Imports modules required for the Storybook documentation page. Includes standard Storybook addons, internal Storybook block components, and content files (MDX and Markdown) for the documentation sections. These imports make components and content available for use within the MDX layout.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/form-control/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Modules and Component Stories\nDESCRIPTION: This snippet imports necessary modules from `@storybook/addon-docs` and custom components for structuring the Storybook documentation. It imports `Meta` and `Markdown` for documentation generation, `ComponentHeader` and `Tabs` for layout elements, and stories from './Component.stories' along with the components used in the tabs.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/loader/src/docs/Component.docs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs';\nimport { ComponentHeader, Tabs } from 'storybook/blocks';\nimport * as Stories from './Component.stories';\n\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Importing Responsive Input Components in React JSX\nDESCRIPTION: This snippet demonstrates how to import the responsive Input component and its desktop and mobile variants from the '@alfalab/core-components/input' package. It shows the canonical import paths required to use these components within a React JSX environment.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/input/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Input } from '@alfalab/core-components/input';\nimport { InputDesktop } from '@alfalab/core-components/input/desktop';\nimport { InputMobile } from '@alfalab/core-components/input/mobile';\n```\n\n----------------------------------------\n\nTITLE: Markdown Inclusion\nDESCRIPTION: This snippet imports markdown files for use within the storybook documentation. `Description` and `Development` are imported as components from respective `.mdx` files. The `Changelog` is imported as raw markdown from the `CHANGELOG.md` file.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/textarea/src/docs/Component.stories.mdx#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nimport Description from './description.mdx';\nimport Development from './development.mdx';\nimport Changelog from '../../CHANGELOG.md?raw';\n```\n\n----------------------------------------\n\nTITLE: Adding JS Entries for Themes\nDESCRIPTION: This update adds JavaScript entries for the themes component. This likely enhances the theming capabilities.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Creating a Component Header with Button Description\nDESCRIPTION: Renders a header for the Button component including its name and a detailed description in Russian, explaining the button's usage as a trigger with an explicit label conveying its action to the user.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/button/src/docs/Component.docs.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ComponentHeader\n    name='Button'\n    children='Используется как триггер для выполнения определённого действия. Лейбл кнопки должен однозначно сообщать пользователю, что произойдёт после нажатия на неё.'\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding sideEffects: false to multiple components\nDESCRIPTION: This update includes adding `sideEffects: false` to the `package.json` files for several components.  This helps bundlers perform tree-shaking, reducing the final bundle size. Components affected: `drawer`, `notification`, `notification-manager`, and many more.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Importing PassCodeV1 and KeyPadButton Components in React JSX\nDESCRIPTION: This snippet demonstrates how to import the PassCodeV1 component and the KeyPadButton subcomponent from the '@alfalab/core-components/pass-code-v1' package. KeyPadButton can be used to wrap other add-ons for consistent button styling. The imports are intended for usage in React JSX files and require '@alfalab/core-components' to be installed as a dependency.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pass-code-v1/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PassCodeV1 } from '@alfalab/core-components/pass-code-v1';\n\n// Если добавляете аддон, то можно обернуть его в KeyPadButton. Так не понадобится подгонять стили под другие кнопки.\nimport { KeyPadButton } from '@alfalab/core-components/pass-code-v1';\n```\n\n----------------------------------------\n\nTITLE: Creating Tabs for Documentation Sections in Storybook\nDESCRIPTION: Defines a tabbed interface containing sections for description, changelog, and development details. Each tab renders imported MDX or Markdown content, organizing documentation into navigable segments for better readability.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/plate/src/docs/Component.docs.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Tabs\n    description={<Description />}\n    changelog={<Markdown>{Changelog}</Markdown>}\n    development={<Development />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Indicator Component in React\nDESCRIPTION: Shows how to import the Indicator component from the @alfalab/core-components library. This snippet demonstrates the standard import syntax for using the component in a React application.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/indicator/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Indicator } from '@alfalab/core-components/indicator';\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Doc Page Metadata (MDX/JSX)\nDESCRIPTION: Uses the Storybook `@addon-docs` Meta component to configure metadata for the documentation page. It sets the title for navigation within Storybook and links the page to the component's stories for prop tables and other automatic documentation features.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/pattern-lock/src/docs/Component.docs.mdx#_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\n<Meta title='Components/PatternLock' of={Stories} />\n```\n\n----------------------------------------\n\nTITLE: Importing Portal Component\nDESCRIPTION: Imports the Portal component from the specified path. This allows the component to be used in the current file.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/portal/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Portal } from '@alfalab/core-components/portal';\n```\n\n----------------------------------------\n\nTITLE: Import Statement for React Text Component\nDESCRIPTION: This snippet shows the import statement needed to include the Text component from the '@alfalab/core-components/text' package into a React project. It is essential for utilizing the Text component within the application's UI, allowing for standardized text styling and behavior.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/text/src/docs/development.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Text } from '@alfalab/core-components/text';\n```\n\n----------------------------------------\n\nTITLE: Importing Development Details Content - JavaScript\nDESCRIPTION: Imports the content of the `./development.mdx` file as a React component. Similar to the description, this component likely contains details about component development, guidelines, or technical implementation notes.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/status/src/docs/Component.docs.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Development from './development.mdx';\n```\n\n----------------------------------------\n\nTITLE: Creating the Base Input Component in JavaScript\nDESCRIPTION: This snippet involves the implementation of a foundational input component (`base-input`) in JavaScript, serving as a core building block for form inputs in the UI library. It depends on React and CSS Modules for styling, providing customizable and reusable input functionality.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2021.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Implementation of base-input component\nimport styles from './base-input.module.css';\n\nfunction BaseInput(props) {\n  return (\n    <input className={styles['base-input']} {...props} />\n  );\n}\n\nexport default BaseInput;\n```\n\n----------------------------------------\n\nTITLE: Creating a Component Header\nDESCRIPTION: This snippet defines a header for the component using the `ComponentHeader` component. It sets the component's name and a description for the header, which is translated for other languages.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/loader/src/docs/Component.docs.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ComponentHeader\n    name='Loader'\n    children='Используется для индикации выполнения команды пользователя.'\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for CalendarInput in Storybook\nDESCRIPTION: This snippet defines the metadata for the CalendarInput component within Storybook. It sets the title of the story, specifies the component being documented, and sets the component's ID. This metadata helps organize the stories and provide context within the Storybook interface.  It depends on the `Meta` object from `@storybook/addon-docs` and the `CalendarInput` component. The output is the configuration for the Storybook interface.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-input/src/docs/Component.stories.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Meta title='Deprecated components/CalendarInput' component={CalendarInput} id='CalendarInput' />\n```\n\n----------------------------------------\n\nTITLE: Defining Calendar Style Constants and Month Configuration in JavaScript\nDESCRIPTION: Defines styling constants for the Calendar wrapper and creates a months object that maps month names to their corresponding timestamp values for the current year.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar/src/docs/Component.stories.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const WRAPPER_STYLES = {\n    display: 'inline-block',\n    border: '1px solid var(--color-light-neutral-300)',\n    boxShadow: 'var(--shadow-m)',\n    background: 'var(--color-light-base-bg-primary)',\n    margin: 'var(--gap-8)',\n    width: 312,\n};\n\nexport const CURR_YEAR = new Date().getFullYear();\n\nexport const MONTHS = {\n    Январь: new Date(`${CURR_YEAR}-01-01`).getTime(),\n    Февраль: new Date(`${CURR_YEAR}-02-01`).getTime(),\n    Март: new Date(`${CURR_YEAR}-03-01`).getTime(),\n    Апрель: new Date(`${CURR_YEAR}-04-01`).getTime(),\n    Май: new Date(`${CURR_YEAR}-05-01`).getTime(),\n    Июнь: new Date(`${CURR_YEAR}-06-01`).getTime(),\n    Июль: new Date(`${CURR_YEAR}-07-01`).getTime(),\n    Август: new Date(`${CURR_YEAR}-08-01`).getTime(),\n    Сентябрь: new Date(`${CURR_YEAR}-09-01`).getTime(),\n    Октябрь: new Date(`${CURR_YEAR}-10-01`).getTime(),\n    Ноябрь: new Date(`${CURR_YEAR}-11-01`).getTime(),\n    Декабрь: new Date(`${CURR_YEAR}-12-01`).getTime(),\n    none: 'none',\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching and Checking Out LFS files\nDESCRIPTION: This command fetches all files tracked by git lfs from origin master branch, then checks them out. This ensures that the local copy of the repository has the latest screenshot files.\nSOURCE: https://github.com/core-ds/core-components/blob/master/docs/screenshots.stories.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit lfs fetch origin master && git lfs checkout\n```\n\n----------------------------------------\n\nTITLE: Adding import types to file-upload-item\nDESCRIPTION: This update adds imports for the component's types and props which enhance code quality and readability.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Changing Animation and Adding Scale to Popover\nDESCRIPTION: This modifies the animation used by the `popover` component and adds a scale transformation. This enhances the popover's visual effects. This improves the popover's visual presentation and provides a more dynamic user experience.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_84\n\n\n\n----------------------------------------\n\nTITLE: Adding demo script\nDESCRIPTION: This commit adds a demo script to the project. A demo script is likely used to showcase or test the functionality of the components. It helps users to understand and explore how to use them.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_153\n\n\n\n----------------------------------------\n\nTITLE: Modifying config for Storybook\nDESCRIPTION: This commit modifies the configuration for Storybook. This includes changes to the Storybook environment, such as the configuration of the components and the way they are displayed.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_158\n\n\n\n----------------------------------------\n\nTITLE: Implement calendar mobile - JavaScript\nDESCRIPTION: This feature implements the mobile version of the calendar component. Developing a mobile-friendly calendar enhances user experience on smaller screens, ensuring accessibility and usability across various devices. It involves responsive design principles and touch-friendly interactions.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-range/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n### Features\n\n-   **calendar:** implement calendar mobile ([#54](https://github.com/core-ds/core-components/issues/54)) ([730f51d](https://github.com/core-ds/core-components/commit/730f51d35823273f122fe84a0369f95745fd2878))\n```\n\n----------------------------------------\n\nTITLE: Implement label position fix in PureCell\nDESCRIPTION: Addresses layout and positioning issues for labels inside the PureCell component, improving alignment and visual clarity. Depends on CSS styling and component structure.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_63\n\nLANGUAGE: CSS\nCODE:\n```\n/* CSS fix for label positioning in PureCell component */\n```\n\n----------------------------------------\n\nTITLE: Moving to mdx stories\nDESCRIPTION: This commit moves the stories to the MDX format. MDX is a file format that allows for writing stories and components in the same file, integrating Markdown for documentation and narrative.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_201\n\n\n\n----------------------------------------\n\nTITLE: Removing extra vars & updating docs\nDESCRIPTION: This commit removes unnecessary variables and updates documentation. Removing extra vars likely improves code cleanliness and efficiency. Updating documentation ensures it accurately reflects the current state of the project.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_146\n\n\n\n----------------------------------------\n\nTITLE: Fix line-height in icon-view\nDESCRIPTION: Adjusts CSS styles for icon-view component to correct line-height settings, ensuring proper vertical alignment of icons and text.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_60\n\nLANGUAGE: CSS\nCODE:\n```\n/* CSS rule modifying line-height in icon-view component */\n```\n\n----------------------------------------\n\nTITLE: Fixing story\nDESCRIPTION: This commit fixes the story related to the button component. Stories are used to showcase the usage of the component and make it easier for developers to visualize and test them.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_167\n\n\n\n----------------------------------------\n\nTITLE: Adding desktop/mobile imports to pass-code\nDESCRIPTION: This update adds desktop and mobile imports to the `pass-code` component. This allows the application to import different versions of the component, depending on the device.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Adding tslib dependency\nDESCRIPTION: This snippet indicates the addition of the `tslib` library as a dependency to the project. `tslib` provides helper functions used by TypeScript to implement features such as async/await and other language features. Including `tslib` can reduce the size of the emitted JavaScript by avoiding redundant helper code.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/table/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Updating dependencies for core components\nDESCRIPTION: This update involves dependency updates across numerous components. These include changes to various packages, such as `accordion`, `action-button`, `alert`, `amount`, `attach`, and many more. The goal is to improve the quality of components.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Updating Click Theme for Tabs\nDESCRIPTION: This commit updates the click theme specifically for tabs with size 'm'. It refines the styling of the tabs within the click theme to improve visual consistency and user experience.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_149\n\n\n\n----------------------------------------\n\nTITLE: Fixing month-only calendar behavior\nDESCRIPTION: This section describes a critical fix in the `month-only` calendar related to how the `minDate` and `maxDate` props function. The fix addresses issues preventing proper date range limitations.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Updating calendar@6.1.8\nDESCRIPTION: This patch change updates the calendar component's version to 6.1.8. This suggests a bug fix or a minor update within the calendar component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/CHANGELOG.md#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n-   Обновлены зависимости\n    -   calendar@6.1.8\n```\n\n----------------------------------------\n\nTITLE: Updating calendar@6.1.4\nDESCRIPTION: This patch change updates the calendar component's version to 6.1.4. This suggests a bug fix or a minor update within the calendar component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/CHANGELOG.md#_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n-   Updated dependencies [[#175](https://github.com/core-ds/core-components/pull/175)]\n    -   @alfalab/core-components-calendar@6.1.4\n```\n\n----------------------------------------\n\nTITLE: Replacing lodash with react-fast-compare in select\nDESCRIPTION: This update replaces the `deep-equal` dependency with `react-fast-compare` in the `select` component. This likely improves performance and reduces bundle size, as `react-fast-compare` is a lighter-weight alternative.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Updating Typography Mixins\nDESCRIPTION: This update updates the ui-primitives package and typography mixins (changes line-height from 24 to 20 in headline-mobile_xsmall and headline-system-mobile_xsmall mixins).\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Updating calendar@6.1.11\nDESCRIPTION: This patch change updates the calendar component's version to 6.1.11. This suggests a bug fix or a minor update within the calendar component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/CHANGELOG.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n-   Обновлены зависимости\n    -   calendar@6.1.11\n```\n\n----------------------------------------\n\nTITLE: Adding color enhancements to addons\nDESCRIPTION: Extends color palette variables for addon components, ensuring color consistency and theme integration.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_135\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for core-components-vars colors for addons\n```\n\n----------------------------------------\n\nTITLE: Updating calendar@6.2.7\nDESCRIPTION: This patch change updates the calendar component's version to 6.2.7. This suggests a bug fix or minor update within the calendar component. This is a dependency update.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/CHANGELOG.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-   Обновлены зависимости\n    -   calendar@6.2.7\n```\n\n----------------------------------------\n\nTITLE: Fixing spacing and input background color in pass-code component\nDESCRIPTION: This code patch adjusts margins and background styling of the pass-code component, ensuring the component maintains proper spacing and transparent background, improving visual consistency.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.md#_snippet_44\n\nLANGUAGE: CSS\nCODE:\n```\n.pass-code {\n  margin: 8px;\n  background-color: transparent;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing default-import in cjs formats\nDESCRIPTION: This change addresses a problem related to default imports within CommonJS (CJS) formats. By fixing the issue, the component can correctly handle default imports, thereby improving the module's interoperability with different module systems and preventing unexpected errors during module loading.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/table/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Updating calendar@6.2.8\nDESCRIPTION: This patch change updates the calendar component's version to 6.2.8. This indicates a bug fix or a minor feature enhancement within the calendar component. The dependencies have been updated.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/CHANGELOG.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n-   Обновлены зависимости\n    -   calendar@6.2.8\n```\n\n----------------------------------------\n\nTITLE: Fixing PickerButtonDesktop import\nDESCRIPTION: This section addresses an issue with the import of the PickerButtonDesktop component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Bug Fix: Fixing line-height for icon-view - JavaScript\nDESCRIPTION: This bug fix resolves the incorrect line-height for the icon-view component. Correcting the line-height ensures proper vertical alignment of icons within the component, improving visual consistency and aesthetics.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-range/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n### Bug Fixes\n\n-   **icon-view:** fix line-height ([#111](https://github.com/core-ds/core-components/issues/111)) ([b16e0ea](https://github.com/core-ds/core-components/commit/b16e0ea206c819ba4370ed8c1662804a83648e0f))\n```\n\n----------------------------------------\n\nTITLE: Fixing import paths for variables in a bundle\nDESCRIPTION: This change corrects the import paths of variables within a bundle, likely related to resolving dependencies or making variables accessible.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/vars/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Updating vars from latest ui-primitives\nDESCRIPTION: This involves updating the vars from the most recent version of ui-primitives, removing deprecated colors and typography mixins.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/vars/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Updating tag and picker-button dependencies\nDESCRIPTION: The update involves changes in dependencies. Specifically, the 'tag' component is upgraded to version 5.2.0, and the 'picker-button' component to version 10.3.11.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Updating picker-button dependency\nDESCRIPTION: The 'picker-button' dependency is updated to version 10.0.2.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Setting up tests\nDESCRIPTION: This commit sets up the testing framework. This likely includes the installation of testing dependencies and creation of test files.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_161\n\n\n\n----------------------------------------\n\nTITLE: Adding boilerplate for amount\nDESCRIPTION: This commit adds boilerplate code for the 'amount' component. This likely includes the foundational code structure, such as file setup, initial component structure, and initial styles, setting up the component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_172\n\n\n\n----------------------------------------\n\nTITLE: Updating tag and picker-button dependencies\nDESCRIPTION: This section updates dependencies, including the 'tag' component to version 5.0.4 and the 'picker-button' component to 10.3.5.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Updating react-transition-group and calendar@6.2.6\nDESCRIPTION: This section details the update of react-transition-group and the calendar component to version 6.2.6. This suggests that the component is updated. It includes updating dependencies of the project.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/CHANGELOG.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n-   Обновлена версия react-transition-group\n\n-   Обновлены зависимости\n    -   calendar@6.2.6\n```\n\n----------------------------------------\n\nTITLE: Updating calendar@6.1.12\nDESCRIPTION: This patch change updates the calendar component's version to 6.1.12. This suggests a bug fix or a minor update within the calendar component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-with-skeleton/CHANGELOG.md#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n-   Обновлены зависимости\n    -   calendar@6.1.12\n```\n\n----------------------------------------\n\nTITLE: Updating picker-button dependency\nDESCRIPTION: This section updates the dependencies. Specifically, the 'picker-button' component is updated to version 10.3.6.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Updating picker-button dependency\nDESCRIPTION: This section updates the dependencies, updating the 'picker-button' component to version 10.3.10.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Updating picker-button dependency\nDESCRIPTION: The dependencies are updated. 'picker-button' is updated to version 10.0.4.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Adding circumflexus retrieval - JavaScript\nDESCRIPTION: This feature adds circumflexus retrieval functionality. The exact purpose is unclear, but it likely involves retrieving or handling circumflex characters or related data. The implementation details are hidden in the commit.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/calendar-range/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n### Features\n\n-   circumflexus retrieval ([#57](https://github.com/core-ds/core-components/issues/57)) ([3820da8](https://github.com/core-ds/core-components/commit/3820da818bcdcbee6904c648b3e29c3c828fe202))\n```\n\n----------------------------------------\n\nTITLE: Updating picker-button dependency\nDESCRIPTION: This section updates the dependencies, setting 'picker-button' to version 10.1.0.\nSOURCE: https://github.com/core-ds/core-components/blob/master/packages/tabs/CHANGELOG.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Updating alfa-ui-primitives and build colors\nDESCRIPTION: This commit updates the alfa-ui-primitives library and builds colors. The updates involve changes to the underlying color system and will include building new color values.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_192\n\n\n\n----------------------------------------\n\nTITLE: Confirmation Design Updates\nDESCRIPTION: This involves updates to the design of the confirmation component. These changes could encompass alterations to the layout, typography, color scheme, and visual elements of the confirmation interface. The update aims to enhance the visual appeal of the component.\nSOURCE: https://github.com/core-ds/core-components/blob/master/CHANGELOG.2022.md#_snippet_81\n\n"
  }
]