[
  {
    "owner": "helm",
    "repo": "helm",
    "content": "TITLE: Defining Service using common.service\nDESCRIPTION: This snippet demonstrates how to use the `common.service` template to create a basic Kubernetes `Service` resource. It takes a template name as input, which allows for custom overrides. The example shows how to define a service with custom metadata, labels, ports, and a selector. Dependencies include the Helm Helper Chart.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{{- template \"common.service\" (list . \"mychart.service\") -}}\n{{- define \"mychart.service\" -}}\n## Define overrides for your Service resource here, e.g.\n# metadata:\n#   labels:\n#     custom: label\n# spec:\n#   ports:\n#   - port: 8080\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Creating an RBAC Role for Pods Access in Kubernetes YAML\nDESCRIPTION: This YAML manifest defines a Role named \"subchart-role\" allowing 'get', 'list', and 'watch' operations on Pod resources within a namespace. The rule targets the empty API group and grants permissions only on 'pods'. This Role is intended to be used in RoleBindings to explicitly control Pod-level access for service accounts.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-skip-tests.txt#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: subchart-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\",\"list\",\"watch\"]\n```\n\n----------------------------------------\n\nTITLE: Exposing Subchart Workload with ClusterIP Service and Helm Chart Metadata in Kubernetes YAML\nDESCRIPTION: This YAML Service manifest defines a ClusterIP type service named 'subchart', adds Helm chart and Kubernetes version labels, and targets port 80 as 'nginx'. Required inputs include matching labels on application pods. The resource is intended for internal networking within the Kubernetes cluster and supports versioned chart deployment.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-skip-tests.txt#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subchart\n  labels:\n    helm.sh/chart: \"subchart-0.1.0\"\n    app.kubernetes.io/instance: \"release-name\"\n    kube-version/major: \"1\"\n    kube-version/minor: \"20\"\n    kube-version/version: \"v1.20.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: nginx\n  selector:\n    app.kubernetes.io/name: subchart\n```\n\n----------------------------------------\n\nTITLE: Defining ConfigMap using common.configmap\nDESCRIPTION: This snippet shows how to use the `common.configmap` template to define a Kubernetes ConfigMap and inject data. It demonstrates file loading using `.Files.Get`. Dependencies include the Helm Helper Chart.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n{{- template \"common.configmap\" (list . \"mychart.configmap\") -}}\n{{- define \"mychart.configmap\" -}}\ndata:\n  zeus: cat\n  athena: cat\n  julius: cat\n  one: |-\n    {{ .Files.Get \"file1.txt\" }}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using the 'common.secret' Helm Template in YAML\nDESCRIPTION: This snippet shows how to instantiate the 'common.secret' Helm template with a custom override ('mychart.secret'), encoding data values with base64 and sourcing file data. It requires Helm 3+ and expects access to secret data and possibly file references through '.Files.Get'. Inputs include data keys and optionally files. The output is a Kubernetes Secret resource with base64-encoded data, and the snippet can be used to parameterize chart secrets. Ensure that input data is properly sanitized and that referenced files exist within the chart.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n{{- template \"common.secret\" (list . \"mychart.secret\") -}}\n{{- define \"mychart.secret\" -}}\ndata:\n  zeus: {{ print \"cat\" | b64enc }}\n  athena: {{ print \"cat\" | b64enc }}\n  julius: {{ print \"cat\" | b64enc }}\n  one: |-\n    {{ .Files.Get \"file1.txt\" | b64enc }}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Creating a General Helm Template Service with Version Labels\nDESCRIPTION: Defines a ClusterIP Service named 'subchart' with labels conveying chart and Kubernetes version info. Targets pods with label 'app.kubernetes.io/name: subchart'.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-values-files.txt#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: subchart/templates/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: subchart\n  labels:\n    helm.sh/chart: \"subchart-0.1.0\"\n    app.kubernetes.io/instance: \"release-name\"\n    kube-version/major: \"1\"\n    kube-version/minor: \"20\"\n    kube-version/version: \"v1.20.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: apache\n  selector:\n    app.kubernetes.io/name: subchart\n```\n\n----------------------------------------\n\nTITLE: Defining a Service (YAML)\nDESCRIPTION: This snippet defines a Kubernetes Service named \"subchartb\".  The Service is of type ClusterIP and exposes port 80 using TCP.  It's intended for internal cluster communication.  It depends on a running Kubernetes cluster.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-with-api-version.txt#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subchartb\n  labels:\n    helm.sh/chart: \"subchartb-0.1.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: nginx\n  selector:\n    app.kubernetes.io/name: subchartb\n```\n\n----------------------------------------\n\nTITLE: Defining a Service (YAML)\nDESCRIPTION: This snippet defines a Kubernetes Service named \"subcharta\". The Service is of type ClusterIP and exposes port 80 using TCP.  It's intended for internal cluster communication.  It depends on a running Kubernetes cluster.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-with-api-version.txt#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subcharta\n  labels:\n    helm.sh/chart: \"subcharta-0.1.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: apache\n  selector:\n    app.kubernetes.io/name: subcharta\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes ClusterIP Service (YAML) - subchart\nDESCRIPTION: This snippet defines a Kubernetes Service named `subchart` of type ClusterIP for the main chart component. It configures port 80 (TCP) to forward traffic to target port 80 on pods selected by the label `app.kubernetes.io/name: subchart`. Additional labels are included, typically populated by Helm templating to identify the chart and release.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-with-kube-version.txt#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subchart\n  labels:\n    helm.sh/chart: \"subchart-0.1.0\"\n    app.kubernetes.io/instance: \"release-name\"\n    kube-version/major: \"1\"\n    kube-version/minor: \"16\"\n    kube-version/version: \"v1.16.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: nginx\n  selector:\n    app.kubernetes.io/name: subchart\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes ClusterIP Service (YAML) - subcharta\nDESCRIPTION: This snippet defines a Kubernetes Service named `subcharta` of type ClusterIP. It configures port 80 (TCP) to forward traffic to target port 80 on pods selected by the label `app.kubernetes.io/name: subcharta`. This service provides internal cluster access to the `subcharta` component, making it discoverable by other services within the cluster.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-with-kube-version.txt#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subcharta\n  labels:\n    helm.sh/chart: \"subcharta-0.1.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: apache\n  selector:\n    app.kubernetes.io/name: subcharta\n```\n\n----------------------------------------\n\nTITLE: Install MariaDB Helm Chart with values.yaml\nDESCRIPTION: Installs the MariaDB Helm chart using the `helm install` command, taking configuration values from a specified YAML file (`values.yaml`). This method is suitable for managing more extensive or complex sets of parameters.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/action/testdata/charts/chart-with-uncompressed-dependencies/charts/mariadb/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --name my-release -f values.yaml stable/mariadb\n```\n\n----------------------------------------\n\nTITLE: Defining a Service for 'subchartb' Subchart in Kubernetes (YAML)\nDESCRIPTION: This manifest defines a Kubernetes Service named 'subchartb' of type ClusterIP for the 'subchartb' subchart. It exposes port 80, targeting port 80 on pods labeled 'app.kubernetes.io/name: subchartb', and names the port 'nginx'. It originates from the 'subchart/charts/subchartb/templates/service.yaml' Helm template.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template.txt#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subchartb\n  labels:\n    helm.sh/chart: \"subchartb-0.1.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: nginx\n  selector:\n    app.kubernetes.io/name: subchartb\n```\n\n----------------------------------------\n\nTITLE: Deploying Alpine Linux Pod Using Helm Chart\nDESCRIPTION: This snippet demonstrates how to deploy an Alpine Linux pod using a Helm chart named 'testing/alpine' with specified chart and app versions. It helps automate the deployment process via Helm CLI commands, specifying chart details and release configurations.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/search-regex.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nhelm install my-alpine testing/alpine --version 0.2.0 --set appVersion=2.3.4\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Service (YAML)\nDESCRIPTION: This snippet defines a Kubernetes Service named \"subchart\".  It's type is ClusterIP and exposes port 80 using TCP.  The metadata includes Helm chart labels. It depends on a running Kubernetes cluster.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-with-api-version.txt#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subchart\n  labels:\n    helm.sh/chart: \"subchart-0.1.0\"\n    app.kubernetes.io/instance: \"release-name\"\n    kube-version/major: \"1\"\n    kube-version/minor: \"20\"\n    kube-version/version: \"v1.20.0\"\n    kube-api-version/test: v1\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: nginx\n  selector:\n    app.kubernetes.io/name: subchart\n```\n\n----------------------------------------\n\nTITLE: Defining a Web Service Override\nDESCRIPTION: This snippet provides an example of how to override the `common.service` template to define a specific web service. It adds custom metadata, labels, and port configurations. This demonstrates how the template allows for easy customization by merging overrides.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{{ template \"common.service\" (list . \"mychart.web.service\") -}}\n{{- define \"mychart.web.service\" -}}\nmetadata:\n  name: {{ template \"common.fullname\" . }}-www  # overrides the default name to add a suffix\n  labels:                                       # appended to the labels section\n    protocol: www\nspec:\n  ports:                                        # composes the `ports` section of the service definition.\n  - name: www\n    port: 80\n    targetPort: 8080\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Defining a ServiceAccount for 'subchart' in Kubernetes (YAML)\nDESCRIPTION: This manifest defines a Kubernetes ServiceAccount named 'subchart-sa'. It originates from the 'subchart/templates/subdir/serviceaccount.yaml' Helm template.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template.txt#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: subchart-sa\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a MariaDB Helm Chart Release\nDESCRIPTION: Deletes the Helm release named 'my-release'. This command removes all Kubernetes components (pods, services, volumes, etc.) associated with that specific MariaDB chart deployment.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/action/testdata/charts/chart-with-uncompressed-dependencies/charts/mariadb/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ helm delete my-release\n```\n\n----------------------------------------\n\nTITLE: Defining a Role (YAML)\nDESCRIPTION: This YAML snippet defines a Kubernetes Role named \"subchart-role\".  It grants permissions to get, list, and watch pods within the cluster. This Role is a Kubernetes RBAC resource.  It depends on the Kubernetes API being available.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-with-api-version.txt#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: subchart-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\",\"list\",\"watch\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Helm Chart Shell\nDESCRIPTION: This command uses the Helm CLI to install the chart located in the local directory './alpine'. Helm processes the templates using the values and deploys the defined Kubernetes resources to the cluster configured for Helm.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/chart/v2/loader/testdata/frobnitz.v2.reqs/charts/alpine/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nhelm install ./alpine\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes RBAC Role (YAML)\nDESCRIPTION: This snippet defines a Kubernetes Role named `subchart-role` for role-based access control (RBAC). It grants specific permissions (`get`, `list`, `watch`) on `pods` resources within the core API group (`\"\"`). This role is typically used in conjunction with a RoleBinding to grant these permissions to a specific subject like a ServiceAccount.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-with-kube-version.txt#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: subchart-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\",\"list\",\"watch\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Deployment using common.deployment\nDESCRIPTION: This snippet shows how to use the `common.deployment` template to define a basic Kubernetes Deployment. It allows for overriding deployment configurations. The example demonstrates customizing the `replicas` parameter.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{{- template \"common.deployment\" (list . \"mychart.deployment\") -}}\n{{- define \"mychart.deployment\" -}}\n## Define overrides for your Deployment resource here, e.g.\nspec:\n  replicas: {{ .Values.replicaCount }}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Creating a ConfigMap for Testing (YAML)\nDESCRIPTION: This YAML snippet defines a Kubernetes ConfigMap named \"release-name-testconfig\". The ConfigMap contains a single key-value pair for testing purposes and is annotated with a Helm hook to run during the test phase. Requires Kubernetes and Helm installed.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-with-api-version.txt#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: \"release-name-testconfig\"\n  annotations:\n    \"helm.sh/hook\": test\ndata:\n  message: Hello World\n```\n\n----------------------------------------\n\nTITLE: Extending common.deployment template in Helm\nDESCRIPTION: This example demonstrates how to extend the `common.deployment` template.  It sets the number of replicas in the deployment spec. The override template (`mychart.deployment`) is passed as a parameter to the `common.deployment` template.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/chart-with-template-lib-dep/charts/common/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{{- template \"common.deployment\" (list . \"mychart.deployment\") -}}\n{{- define \"mychart.deployment\" -}}\n## Define overrides for your Deployment resource here, e.g.\nspec:\n  replicas: {{ .Values.replicaCount }}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes ConfigMap for Helm Tests (YAML)\nDESCRIPTION: This snippet defines a Kubernetes ConfigMap named `release-name-testconfig`. It stores a simple key-value pair (`message: Hello World`) intended for use in a test environment. The annotation `\"helm.sh/hook\": test` indicates that this resource is specifically created as part of a Helm test suite, designed to be used by test pods.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-with-kube-version.txt#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: \"release-name-testconfig\"\n  annotations:\n    \"helm.sh/hook\": test\ndata:\n  message: Hello World\n```\n\n----------------------------------------\n\nTITLE: Defining 'subcharta' Service in Helm YAML\nDESCRIPTION: This snippet creates a Service resource named 'subcharta' with API version 1, including metadata labels indicating the chart version. It sets up a ClusterIP service on port 80 with TCP protocol, targeting port 80, and labels the service with 'app.kubernetes.io/name' as 'subcharta'. Dependencies involve Helm templating for parameter substitution. It connects network traffic to pods matching the specified selector within the cluster.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-show-only-multiple.txt#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n# Source: subchart/charts/subcharta/templates/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: subcharta\n  labels:\n    helm.sh/chart: \"subcharta-0.1.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: apache\n  selector:\n    app.kubernetes.io/name: subcharta\n```\n\n----------------------------------------\n\nTITLE: Defining a Pod for Testing (YAML)\nDESCRIPTION: This YAML snippet defines a Kubernetes Pod named \"release-name-test\". The Pod uses the alpine:latest image and retrieves the \"message\" from a ConfigMap. It also includes a command that echoes the message, indicating a test scenario. This pod has a restartPolicy: Never and is intended for testing purposes.  Dependencies are Kubernetes and the availability of the ConfigMap defined earlier.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-with-api-version.txt#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: \"release-name-test\"\n  annotations:\n    \"helm.sh/hook\": test\nspec:\n  containers:\n    - name: test\n      image: \"alpine:latest\"\n      envFrom:\n        - configMapRef:\n            name: \"release-name-testconfig\"\n      command:\n        - echo\n        - \"$message\"\n  restartPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Exposing Subchartb Workload with a ClusterIP Service in Kubernetes YAML\nDESCRIPTION: This Service YAML provides a ClusterIP service for the 'subchartb' workload, exposing port 80 as 'nginx' and labeling the object according to Helm chart standards. All labels and selectors must match those of the targeted Deployment or Pod. It enables internal communication within the Kubernetes cluster.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-skip-tests.txt#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subchartb\n  labels:\n    helm.sh/chart: \"subchartb-0.1.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: nginx\n  selector:\n    app.kubernetes.io/name: subchartb\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes ClusterIP Service for Helm SubchartA - YAML\nDESCRIPTION: Creates a Service named \"subcharta\" exposing port 80 using TCP protocol, targeting the same port on pods selected by the label 'app.kubernetes.io/name: subcharta'. The service type is ClusterIP which provides an internal cluster IP address for stable access to subchartA pods. Labels include the Helm chart version for tracking.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-name-template.txt#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subcharta\n  labels:\n    helm.sh/chart: \"subcharta-0.1.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: apache\n  selector:\n    app.kubernetes.io/name: subcharta\n```\n\n----------------------------------------\n\nTITLE: Example Ingress Resource Output from the 'common.ingress' Template\nDESCRIPTION: Renders the Kubernetes Ingress object as created by the 'common.ingress' Helm template, reflecting host, annotation, and TLS configurations. It demonstrates the output structure, including routes, labels, and resource naming. The resource depends on supplied values matching expected templates and can be used to wire application services to HTTP(S) routing in cluster environments.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    kubernetes.io/tls-acme: \"true\"\n  labels:\n    app.kubernetes.io/name: ingress\n    helm.sh/chart: ingress-0.1.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/instance: release-name\n  name: release-name-ingress\nspec:\n  rules:\n  - host: chart-example.local\n    http:\n      paths:\n      - backend:\n          serviceName: release-name-ingress\n          servicePort: 80\n        path: /\n  tls:\n  - hosts:\n    - chart-example.local\n    secretName: chart-example-tls\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes ClusterIP Service for Helm SubchartB - YAML\nDESCRIPTION: Defines a Service named \"subchartb\" exposing port 80 with TCP protocol, forwarding to port 80 on pods labeled with 'app.kubernetes.io/name: subchartb'. The Service is of type ClusterIP, making it accessible only within the cluster. The metadata labels include the Helm chart and version information for identification.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-name-template.txt#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subchartb\n  labels:\n    helm.sh/chart: \"subchartb-0.1.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: nginx\n  selector:\n    app.kubernetes.io/name: subchartb\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes ClusterIP Service for Helm Subchart - YAML\nDESCRIPTION: Creates a Service named \"subchart\" exposing port 80 via TCP, targeting pods labeled with 'app.kubernetes.io/name: subchart'. The metadata includes additional labels for Helm chart, instance, and Kubernetes versioning to support version-aware deployments. The service type is ClusterIP providing internal network access.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-name-template.txt#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subchart\n  labels:\n    helm.sh/chart: \"subchart-0.1.0\"\n    app.kubernetes.io/instance: \"foobar-ywjj-baz\"\n    kube-version/major: \"1\"\n    kube-version/minor: \"20\"\n    kube-version/version: \"v1.20.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: nginx\n  selector:\n    app.kubernetes.io/name: subchart\n```\n\n----------------------------------------\n\nTITLE: Using EnvVar Helpers for Container Environment Variable Specification in Helm\nDESCRIPTION: Exemplifies using the 'common.envvar.value' and 'common.envvar.secret' Helm helpers in a chart's container definition to specify environment variables with literal and secret values. Assumes access to the appropriate templates and secret resources. Inputs are environment variable key-value pairs or references to Kubernetes secrets; outputs are valid env specs for container manifests. Use to simplify handling of secrets and configs in deployment specifications.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n{{- template \"common.deployment\" (list . \"mychart.deployment\") -}}\n{{- define \"mychart.deployment\" -}}\nspec:\n  template:\n    spec:\n      containers:\n      - {{ template \"common.container\" (list . \"mychart.deployment.container\") }}\n{{- end -}}\n{{- define \"mychart.deployment.container\" -}}\n{{- $fullname := include \"common.fullname\" . -}}\nenv:\n- {{ template \"common.envvar.value\" (list \"ZEUS\" \"cat\") }}\n- {{ template \"common.envvar.secret\" (list \"ATHENA\" \"secret-name\" \"athena\") }}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Defining a Service for subchart in Kubernetes using YAML\nDESCRIPTION: Defines a Kubernetes Service named 'subchart'. It exposes port 80 as 'nginx', targeting port 80 with TCP protocol. The selector 'app.kubernetes.io/name: subchart' routes traffic to pods with that label.  Includes specific kube-version labels.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm.txt#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n---\n# Source: subchart/templates/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: subchart\n  labels:\n    helm.sh/chart: \"subchart-0.1.0\"\n    app.kubernetes.io/instance: \"release-name\"\n    kube-version/major: \"1\"\n    kube-version/minor: \"20\"\n    kube-version/version: \"v1.20.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: nginx\n  selector:\n    app.kubernetes.io/name: subchart\n```\n\n----------------------------------------\n\nTITLE: Expected Volumes Section Output with ConfigMap and PersistentVolumeClaim\nDESCRIPTION: Displays the YAML output for defining a pod spec's volumes using both a ConfigMap and a PersistentVolumeClaim, as generated by the corresponding Helm helpers. Ensures correct mapping for data/config management at runtime. Depends on referenced ConfigMaps and PVCs being defined and available at deploy time. Handles persistence by selecting emptyDir if persistence is not enabled.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n...\n    spec:\n      volumes:\n      - configMap:\n          name: configmap-name\n        name: config\n      - name: data\n        persistentVolumeClaim:\n          claimName: pvc-name\n...\n```\n\n----------------------------------------\n\nTITLE: Helm Chart Structure and Purpose for Alpine Linux\nDESCRIPTION: Describes the basic purpose of the Helm chart, which is to deploy a single Alpine Linux pod. It explains the typical directory structure, including the templates and values.yaml files, and how to install the chart using Helm commands.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/chart-with-template-with-invalid-yaml/README.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Defining Services for Helm Subcharts\nDESCRIPTION: Creates Kubernetes Service resources for the main chart and its subcharts (subcharta and subchartb). Each service exposes port 80 with different names (apache, nginx) and appropriate selectors for their respective components.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-with-crds.txt#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subcharta\n  labels:\n    helm.sh/chart: \"subcharta-0.1.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: apache\n  selector:\n    app.kubernetes.io/name: subcharta\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: subchartb\n  labels:\n    helm.sh/chart: \"subchartb-0.1.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: nginx\n  selector:\n    app.kubernetes.io/name: subchartb\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: subchart\n  labels:\n    helm.sh/chart: \"subchart-0.1.0\"\n    app.kubernetes.io/instance: \"release-name\"\n    kube-version/major: \"1\"\n    kube-version/minor: \"20\"\n    kube-version/version: \"v1.20.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: nginx\n  selector:\n    app.kubernetes.io/name: subchart\n```\n\n----------------------------------------\n\nTITLE: Defining a Service for 'subcharta' Subchart in Kubernetes (YAML)\nDESCRIPTION: This manifest defines a Kubernetes Service named 'subcharta' of type ClusterIP for the 'subcharta' subchart. It exposes port 80, targeting port 80 on pods labeled 'app.kubernetes.io/name: subcharta', and names the port 'apache'. It originates from the 'subchart/charts/subcharta/templates/service.yaml' Helm template.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template.txt#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subcharta\n  labels:\n    helm.sh/chart: \"subcharta-0.1.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: apache\n  selector:\n    app.kubernetes.io/name: subcharta\n```\n\n----------------------------------------\n\nTITLE: Example Values for common.metadata Template\nDESCRIPTION: Shows example values structure that would be used with the common.metadata template, including custom labels, annotations, hooks, and a fullnameOverride example.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nbio:\n  name: example\n  labels:\n    first: matt\n    last: butcher\n    nick: technosophos\n  annotations:\n    format: bio\n    destination: archive\n  hook: pre-install\n\npet:\n  fullnameOverride: Zeus\n```\n\n----------------------------------------\n\nTITLE: Creating a Helm Test Pod that Reads ConfigMap Data\nDESCRIPTION: Creates a Pod named 'release-name-test' with a 'test' container running Alpine Linux. It uses environment variables from the ConfigMap and executes 'echo $message' as command, with 'Never' restart policy, to validate configurations during Helm testing.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-values-files.txt#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: subchart/templates/tests/test-nothing.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: \"release-name-test\"\n  annotations:\n    \"helm.sh/hook\": test\nspec:\n  containers:\n    - name: test\n      image: \"alpine:latest\"\n      envFrom:\n        - configMapRef:\n            name: \"release-name-testconfig\"\n      command:\n        - echo\n        - \"$message\"\n  restartPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Using common.labels.standard Template in Helm Charts\nDESCRIPTION: Shows how to use the common.labels.standard template to generate a standard set of Kubernetes labels for resources managed by Helm.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n{{ template \"common.labels.standard\" . }}\n```\n\n----------------------------------------\n\nTITLE: Expected Env Section Output for Container Using EnvVar Helpers\nDESCRIPTION: Displays the expected YAML result for a container environment variable section generated using the EnvVar helpers. Literal and secret-derived variables are rendered as appropriate under the 'env' key. Requires correctly rendered templates and references to valid secrets in the cluster; applicable for securely propagating secrets into workloads.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n...\n    spec:\n      containers:\n      - env:\n        - name: ZEUS\n          value: cat\n        - name: ATHENA\n          valueFrom:\n            secretKeyRef:\n              key: athena\n              name: secret-name\n...\n```\n\n----------------------------------------\n\nTITLE: Subchart YAML Values Configuration\nDESCRIPTION: This YAML snippet represents the values configuration for the subchart of the 'issue-9027' Helm chart. It defines global and subchart-specific settings, including a nested 'hash' structure with several key-value pairs. The global 'hash' is duplicated in both the global context and subchart context.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/issue-9027.txt#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nglobal:\n  hash:\n    key3: 13\n    key4: 4\n    key5: 5\n    key6: 6\nhash:\n  key3: 13\n  key4: 4\n  key5: 5\n  key6: 6\n```\n\n----------------------------------------\n\nTITLE: Example Output Names from 'common.name' Helm Template with Overrides\nDESCRIPTION: Shows examples of the output produced by 'common.name', depicting both the use of name overrides, prefixes, suffixes, and the default naming. The helper respects global and chart-level settings; output adheres to the maximum allowed length for Kubernetes label values.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# with the values above\nname: pp-pre-some-name-suf-ps\n\n---\n# the default, for chart \"wordpress\"\nname: wordpress\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using the 'common.persistentvolumeclaim' Helm Template\nDESCRIPTION: This snippet explains how to provide values for the 'common.persistentvolumeclaim' Helm template, allowing charts to create configurable PersistentVolumeClaims. Users can override settings like storage class, size, and access mode via the values file. Requires Helm and persistence-enabled values; input fields control volume provisioning and must be set for non-default behavior.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\npersistence:\n  enabled: true\n  storageClass: fast\n  accessMode: ReadWriteOnce\n  size: 8Gi\n```\n\nLANGUAGE: yaml\nCODE:\n```\n{{- template \"common.persistentvolumeclaim\" (list . \"mychart.persistentvolumeclaim\") -}}\n{{- define \"mychart.persistentvolumeclaim\" -}}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Main Chart YAML Values Configuration\nDESCRIPTION: This YAML snippet shows the values configuration for the main chart of 'issue-9027'. It includes configurations within the 'global' scope and specifically targets settings for a subchart. The 'null' values are notable.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/issue-9027.txt#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nglobal:\n  hash:\n    key1: null\n    key2: null\n    key3: 13\nsubchart:\n  global:\n    hash:\n      key3: 13\n      key4: 4\n      key5: 5\n      key6: 6\n  hash:\n    key3: 13\n    key4: 4\n    key5: 5\n    key6: 6\n```\n\n----------------------------------------\n\nTITLE: Extending common.service template in Helm\nDESCRIPTION: This example shows how to extend the `common.service` template to define a Kubernetes Service resource with custom metadata, ports, and selectors. It defines two services: a web service and a mail service. The override template (`mychart.mail.service` and `mychart.web.service`) is passed as a parameter to the `common.service` template.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/chart-with-template-lib-dep/charts/common/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{{- template \"common.service\" (list . \"mychart.mail.service\") -}}\n{{- define \"mychart.mail.service\" -}}\nmetadata:\n  name: {{ template \"common.fullname\" . }}-mail # overrides the default name to add a suffix\n  labels:                                       # appended to the labels section\n    protocol: mail\nspec:\n  ports:                                        # composes the `ports` section of the service definition.\n  - name: smtp\n    port: 25\n    targetPort: 25\n  - name: imaps\n    port: 993\n    targetPort: 993\n  selector:                                     # this is appended to the default selector\n    protocol: mail\n{{- end -}}\n---\n{{ template \"common.service\" (list . \"mychart.web.service\") -}}\n{{- define \"mychart.web.service\" -}}\nmetadata:\n  name: {{ template \"common.fullname\" . }}-www  # overrides the default name to add a suffix\n  labels:                                       # appended to the labels section\n    protocol: www\nspec:\n  ports:                                        # composes the `ports` section of the service definition.\n  - name: www\n    port: 80\n    targetPort: 8080\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Ingress URL Generation - Helm Template\nDESCRIPTION: This snippet generates the application URL if Ingress is enabled. It iterates through the ingress hosts defined in `.Values.ingress.hosts` and constructs the URL using the host, path, and TLS settings. The URL schema is determined based on whether TLS is enabled in the ingress configuration.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/chart-with-lib-dep/templates/NOTES.txt#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range .Values.ingress.hosts }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ . }}{{ $.Values.ingress.path }}\n{{- end }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Role for Pod Access in Helm Subchart - YAML\nDESCRIPTION: Defines an RBAC Role resource named \"subchart-role\" which grants permissions to interact with pods. The Role allows 'get', 'list', and 'watch' verbs on the 'pods' resource within the core API group. This role is scoped to the namespace where it is deployed and is intended for binding to service accounts requiring pod read access.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-name-template.txt#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: subchart-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\",\"list\",\"watch\"]\n```\n\n----------------------------------------\n\nTITLE: Extending common.container template in Helm\nDESCRIPTION: This example demonstrates extending the `common.container` template within a `common.deployment` template.  It configures liveness and readiness probes for a container within a Deployment.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/chart-with-template-lib-dep/charts/common/README.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{{- template \"common.deployment\" (list . \"mychart.deployment\") -}}\n{{- define \"mychart.deployment\" -}}\n## Define overrides for your Deployment resource here, e.g.\nspec:\n  template:\n    spec:\n      containers:\n      - {{ template \"common.container\" (list . \"mychart.deployment.container\") }}\n{{- end -}}\n{{- define \"mychart.deployment.container\" -}}\n## Define overrides for your Container here, e.g.\nlivenessProbe:\n  httpGet:\n    path: /\n    port: 80\nreadinessProbe:\n  httpGet:\n    path: /\n    port: 80\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Example Secret Resource Output from the 'common.secret' Template\nDESCRIPTION: This is the expected Kubernetes YAML output when rendering the 'common.secret' Helm template with provided overrides and data. It demonstrates how custom labels, encoded data, and naming conventions are applied by the template logic. Dependencies include the presence of appropriate values and resource naming schemes, producing a standard Kubernetes Secret object suitable for use by applications or other resources.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\ndata:\n  athena: Y2F0\n  julius: Y2F0\n  one: VGhpcyBpcyBhIGZpbGUuCg==\n  zeus: Y2F0\nkind: Secret\nmetadata:\n  labels:\n    app.kubernetes.io/name: secret\n    helm.sh/chart: secret-0.1.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/instance: release-name\n  name: release-name-secret\ntype: Opaque\n```\n\n----------------------------------------\n\nTITLE: Generating Resource Metadata Name Using 'common.fullname' Helm Template\nDESCRIPTION: Demonstrates invoking the 'common.fullname' template to construct values for Kubernetes resource 'name' fields. It accommodates customization via value overrides for prefixes, suffixes, and base name, and enforces a 54 character limit. Assumes properly structured values in the chart or set by the user. Output is a string value intended for Kubernetes resource naming, supporting distinct naming pipelines for chart reuse.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nname: {{ template \"common.fullname\" . }}\n```\n\n----------------------------------------\n\nTITLE: Output of common.service template\nDESCRIPTION: This YAML code shows the output Kubernetes Service resources generated by the previous template example. It demonstrates how the `common.service` template combines the default configurations with the provided overrides, creating two distinct Service resources for web and mail protocols.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/chart-with-template-lib-dep/charts/common/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: service\n    chart: service-0.1.0\n    heritage: Tiller\n    protocol: mail\n    release: release-name\n  name: release-name-service-mail\nspec:\n  ports:\n  - name: smtp\n    port: 25\n    targetPort: 25\n  - name: imaps\n    port: 993\n    targetPort: 993\n  selector:\n    app: service\n    release: release-name\n    protocol: mail\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: service\n    chart: service-0.1.0\n    heritage: Tiller\n    protocol: www\n    release: release-name\n  name: release-name-service-www\nspec:\n  ports:\n  - name: www\n    port: 80\n    targetPort: 8080\n  type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Defining testing/alpine Helm Chart Metadata (YAML)\nDESCRIPTION: This YAML snippet defines metadata for the 'testing/alpine' Helm chart. It includes the 'app_version' (version of the Alpine Linux application being deployed), 'description' (purpose of the chart), 'name' (unique identifier for the chart), and 'version' (the chart's own version). This structure is commonly found in Helm chart definitions (Chart.yaml) or index files (index.yaml).\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/search-output-yaml.txt#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- app_version: 2.3.4\n  description: Deploy a basic Alpine Linux pod\n  name: testing/alpine\n  version: 0.2.0\n```\n\n----------------------------------------\n\nTITLE: Using common.labelize Template in Helm Charts\nDESCRIPTION: Demonstrates how to use the common.labelize helper template to convert a map into a set of labels in YAML format.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n{{- $map := dict \"first\" \"1\" \"second\" \"2\" \"third\" \"3\" -}}\n{{- template \"common.labelize\" $map -}}\n```\n\n----------------------------------------\n\nTITLE: Output of common.labelize Template\nDESCRIPTION: Shows the resulting YAML output from the common.labelize template, converting a map to key-value pairs.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nfirst: \"1\"\nsecond: \"2\"\nthird: \"3\"\n```\n\n----------------------------------------\n\nTITLE: Extending common.configmap template in Helm\nDESCRIPTION: This example demonstrates extending the `common.configmap` template to define a Kubernetes ConfigMap resource with custom data. It includes static string values and retrieves the contents of a file (file1.txt) using the `.Files.Get` function.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/chart-with-template-lib-dep/charts/common/README.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n{{- template \"common.configmap\" (list . \"mychart.configmap\") -}}\n{{- define \"mychart.configmap\" -}}\ndata:\n  zeus: cat\n  athena: cat\n  julius: cat\n  one: |-\n    {{ .Files.Get \"file1.txt\" }}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Defining a test ConfigMap in Kubernetes using YAML\nDESCRIPTION: Defines a ConfigMap for testing purposes named 'release-name-testconfig'. It utilizes the 'helm.sh/hook: test' annotation to be deployed as a test job. The ConfigMap contains a single data entry 'message' set to 'Hello World'.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm.txt#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\n---\n# Source: subchart/templates/tests/test-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: \"release-name-testconfig\"\n  annotations:\n    \"helm.sh/hook\": test\ndata:\n  message: Hello World\n```\n\n----------------------------------------\n\nTITLE: Install MariaDB Helm Chart with --set\nDESCRIPTION: Installs the MariaDB Helm chart using the `helm install` command. Configuration values are provided directly on the command line using the `--set` flag, allowing specific parameters like the root password and a new database name to be set during installation.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/action/testdata/charts/chart-with-uncompressed-dependencies/charts/mariadb/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --name my-release \\\n  --set root.password=secretpassword,user.database=app_database \\\n    stable/mariadb\n```\n\n----------------------------------------\n\nTITLE: Using common.chartref Template in Helm Charts\nDESCRIPTION: Shows how to use the common.chartref helper template to generate a chart reference string that is legal for Kubernetes label values.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nchartref: {{ template \"common.chartref\" . }}\n```\n\n----------------------------------------\n\nTITLE: Using common.metadata Template in Helm Charts\nDESCRIPTION: Demonstrates how to use the common.metadata helper template to generate the metadata section of Kubernetes resources, showing how to pass in context, override fullname, and specify custom labels and annotations.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n{{ template \"common.metadata\" (dict \"top\" . \"metadata\" .Values.bio) }}\n---\n{{ template \"common.metadata\" (dict \"top\" . \"metadata\" .Values.pet \"fullnameOverride\" .Values.pet.fullnameOverride) }}\n```\n\n----------------------------------------\n\nTITLE: Creating RBAC Resources for Kubernetes Subchart\nDESCRIPTION: Defines a set of RBAC resources including a ServiceAccount, Role with pod read permissions, and a RoleBinding that connects them. These resources establish the necessary permissions for the subchart components.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-with-crds.txt#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: subchart-sa\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: subchart-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\",\"list\",\"watch\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: subchart-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: subchart-role\nsubjects:\n- kind: ServiceAccount\n  name: subchart-sa\n  namespace: default\n```\n\n----------------------------------------\n\nTITLE: Initializing Build Information Struct in Go\nDESCRIPTION: Defines and initializes a BuildInfo struct to capture build metadata such as version, Git commit hash, tree state, and Go version. This snippet is used for embedding versioning data in the application binary to track build identity and environment. The fields include Version (string), GitCommit (string), GitTreeState (string), and GoVersion (string). This structure typically depends on a predefined BuildInfo type in the application's versioning package.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/version-client-shorthand.txt#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nversion.BuildInfo{Version:\"v4.0\", GitCommit:\"\", GitTreeState:\"\", GoVersion:\"\"}\n```\n\n----------------------------------------\n\nTITLE: Defining a ClusterIP Service for SubchartA Using Helm - YAML\nDESCRIPTION: This snippet creates a ClusterIP Service named \"subcharta\" for an application, specifying port 80 and targeting backend pods labeled \"subcharta\". It includes chart metadata labels for Helm and exposes an endpoint named 'apache'. Requires backend pods with matching labels to function properly.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-set.txt#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subcharta\n  labels:\n    helm.sh/chart: \"subcharta-0.1.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: apache\n  selector:\n    app.kubernetes.io/name: subcharta\n```\n\n----------------------------------------\n\nTITLE: Get Application URL with ClusterIP - Helm Template\nDESCRIPTION: This snippet retrieves the application URL when the service type is ClusterIP. It uses `kubectl` commands to get the Pod name and sets up port forwarding to access the application locally. Requires kubectl to be installed and configured.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/chart-with-template-lib-dep/templates/NOTES.txt#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods -l \"app={{ template \"chart-with-template-lib-dep.name\" . }},release={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n  echo \"Visit http://127.0.0.1:8080 to use your application\"\n  kubectl port-forward $POD_NAME 8080:80\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Generating Sanitized Helm Chart References for Kubernetes Labels in YAML\nDESCRIPTION: This Helm template helper named \"common.chartref\" outputs the concatenation of the chart name and sanitized chart version to produce a valid Kubernetes label string. Since Kubernetes label values cannot contain certain special characters like \"+\", this snippet replaces illegal characters in the chart version (e.g., converting \"+\" to \"_\") before rendering. The input context is the Helm chart metadata object, and the output is a string suitable for use as a Kubernetes label value that uniquely identifies the chart version.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/chart-with-template-lib-dep/charts/common/README.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nchartref: {{ template \"common.chartref\" . }}\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nchartref: foo-1.2.3-beta.55_1234\n\n```\n\n----------------------------------------\n\nTITLE: Initialize Helm and Add Helm Repository with Bash\nDESCRIPTION: Shell script to initialize Helm, add a custom repository, and update repositories to prepare for Helm chart installation. It automates setup commands for managing Helm charts in Kubernetes.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/ignore/testdata/cargo/a.txt#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nhelm init\nhelm repo add my-repo https://charts.example.com\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Defining Helm Lifecycle Hooks in YAML\nDESCRIPTION: This snippet provides a Helm template helper named \"common.hook\" that simplifies defining hooks on Kubernetes resources during Helm lifecycle events, such as \"pre-install\" or \"post-install\". It is intended to be used within Helm chart templates to attach lifecycle hooks by passing a comma-separated string representing Helm hook events. The input is a string of lifecycle phases, and the output is a corresponding YAML annotation with the key \"helm.sh/hook\" set to those phases. This template abstracts away annotation syntax for easier hook declarations.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/chart-with-template-lib-dep/charts/common/README.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n{{ template \"common.hook\" \"pre-install,post-install\" }}\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"helm.sh/hook\": \"pre-install,post-install\"\n\n```\n\n----------------------------------------\n\nTITLE: Defining a ClusterIP Service for SubchartB Using Helm - YAML\nDESCRIPTION: This snippet defines a ClusterIP Service named \"subchartb\" listening on port 80, serving as a front for pods labeled \"subchartb\". It uses Helm chart label conventions and exposes a port named 'nginx'. Backend pods must match the service selector for traffic routing.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-set.txt#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subchartb\n  labels:\n    helm.sh/chart: \"subchartb-0.1.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: nginx\n  selector:\n    app.kubernetes.io/name: subchartb\n```\n\n----------------------------------------\n\nTITLE: Update Helm Release with New Values File\nDESCRIPTION: Shell command to upgrade an existing Helm release with a new configuration file. It ensures that deployment parameters are updated without re-creating resources.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/ignore/testdata/cargo/a.txt#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nhelm upgrade my-release my-repo/my-chart --values new-values.yaml\n```\n\n----------------------------------------\n\nTITLE: Using common.hook Template in Helm Charts\nDESCRIPTION: Demonstrates how to use the common.hook helper template to define Helm hooks for Kubernetes resources.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\n{{ template \"common.hook\" \"pre-install,post-install\" }}\n```\n\n----------------------------------------\n\nTITLE: Helm Release Name Array in JSON\nDESCRIPTION: A JSON array containing four string values that represent Helm release names. These names can be used as defaults or examples when deploying Helm charts to Kubernetes clusters.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/list-short-json.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\"hummingbird\",\"iguana\",\"rocket\",\"starlord\"]\n```\n\n----------------------------------------\n\nTITLE: Defining a Main ClusterIP Service with Helm Metadata - YAML\nDESCRIPTION: This snippet deploys a main ClusterIP Service named \"subchart\" with advanced Helm and Kubernetes version metadata. It exposes port 80, targets matching pods, and uses extensive labels to record chart and deployment information. Pod selectors must match 'app.kubernetes.io/name: subchart' for service operation.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-set.txt#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subchart\n  labels:\n    helm.sh/chart: \"subchart-0.1.0\"\n    app.kubernetes.io/instance: \"release-name\"\n    kube-version/major: \"1\"\n    kube-version/minor: \"20\"\n    kube-version/version: \"v1.20.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: apache\n  selector:\n    app.kubernetes.io/name: subchart\n```\n\n----------------------------------------\n\nTITLE: Handling Shell Completion Directive in Helm\nDESCRIPTION: This snippet references the 'ShellCompDirectiveNoFileComp' symbol, indicating an operation related to shell completion behavior in Helm, specifically disabling file completion. It implies integration with Helm's shell completion system to control suggestions shown to the user.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/repo_repeat_comp.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nCompletion ended with directive: ShellCompDirectiveNoFileComp\n```\n\n----------------------------------------\n\nTITLE: Building Helm Container Image with Multi-stage Build\nDESCRIPTION: Dockerfile that uses a multi-stage build approach to create a minimal Helm container image. It starts with a build container to download Helm, then creates a minimal runtime container with just the Helm binary and necessary certificates.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/ignore/testdata/helm.txt#_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nARG BASE_REGISTRY=gcr.io/distroless\nARG BASE_IMAGE=base-debian11\nARG BASE_TAG=latest\n\nFROM alpine:latest as download\n\nARG TARGETPLATFORM\nARG HELM_VERSION\n\nRUN export ARCH=$(echo ${TARGETPLATFORM} | cut -d / -f2) \\\n    && export ARM=$(echo ${TARGETPLATFORM} | grep arm) \\\n    && if [ \"${ARM}\" ]; then export ARCH=arm; fi \\\n    && export ARM64=$(echo ${TARGETPLATFORM} | grep arm64) \\\n    && if [ \"${ARM64}\" ]; then export ARCH=arm64; fi \\\n    && if [ \"$ARCH\" = \"amd64\" ]; then export ARCH=x86_64; fi \\\n    && apk add --update --no-cache curl ca-certificates \\\n    && curl -sL \"https://get.helm.sh/helm-${HELM_VERSION}-linux-${ARCH}.tar.gz\" | tar -xvz\n\nFROM ${BASE_REGISTRY}/${BASE_IMAGE}:${BASE_TAG}\n\nLABEL org.opencontainers.image.source=\"https://github.com/helm/helm\"\n\nCOPY --from=download /linux-*/helm /usr/local/bin/helm\nCOPY --from=download /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\n\nENTRYPOINT [\"/usr/local/bin/helm\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Test Resources\nDESCRIPTION: Defines Helm test resources with test hook annotations. Includes a ConfigMap with test data and a test Pod that uses the ConfigMap data to execute a simple test command, demonstrating Helm's test capabilities.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-with-crds.txt#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: \"release-name-testconfig\"\n  annotations:\n    \"helm.sh/hook\": test\ndata:\n  message: Hello World\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: \"release-name-test\"\n  annotations:\n    \"helm.sh/hook\": test\nspec:\n  containers:\n    - name: test\n      image: \"alpine:latest\"\n      envFrom:\n        - configMapRef:\n            name: \"release-name-testconfig\"\n      command:\n        - echo\n        - \"$message\"\n  restartPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Creating a Helm Test ConfigMap Resource - YAML\nDESCRIPTION: This snippet creates a ConfigMap named \"release-name-testconfig\" and designates it as a Helm test resource using the helm.sh/hook annotation set to \"test\". The data contains a message key. It does not require dependencies and is read by other test resources during chart verification.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-set.txt#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: \"release-name-testconfig\"\n  annotations:\n    \"helm.sh/hook\": test\ndata:\n  message: Hello World\n```\n\n----------------------------------------\n\nTITLE: Granting Pod Read Access via Kubernetes Role in YAML\nDESCRIPTION: Creates a Kubernetes Role 'subchart-role' granting get, list, and watch permissions on Pod resources. This resource is key for RBAC configuration and requires Kubernetes with RBAC enabled. It expects namespace-scoped configuration and is typically bound to a ServiceAccount via a RoleBinding.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm-set-file.txt#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: subchart-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\",\"list\",\"watch\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Volumes with 'common.volume.configMap' and 'common.volume.pvc' Helm Helpers\nDESCRIPTION: Shows usage of Helm helpers for defining ConfigMap and PersistentVolumeClaim-based volumes within a container spec, supplied by values that control name and claim mapping. Assumes input of volume names, existing claim names, and persistence configuration. Dependencies include declared ConfigMaps, PVCs, or emptyDir fallback if persistence is disabled. Outputs are pod spec-compliant volume definitions for mounting configuration or persistent storage.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n{{- template \"common.deployment\" (list . \"mychart.deployment\") -}}\n{{- define \"mychart.deployment\" -}}\nspec:\n  template:\n    spec:\n      volumes:\n      - {{ template \"common.volume.configMap\" (list \"config\" \"configmap-name\") }}\n      - {{ template \"common.volume.pvc\" (list \"data\" \"pvc-name\" .Values.persistence) }}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Creating ConfigMap Resource in Helm Subchart\nDESCRIPTION: Defines a Kubernetes ConfigMap named 'subchart-cm' containing a single key-value pair where the key is 'value' and the value is 'baz'.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm-set.txt#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: subchart-cm\ndata:\n  value: baz\n```\n\n----------------------------------------\n\nTITLE: Additional NetworkPolicy Objects from Secondary Template\nDESCRIPTION: Multiple NetworkPolicy objects from a secondary template (02-b.yml) with sequential naming from 'fifth' through 'fifteenth'. These demonstrate object ordering across different template files.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/object-order.txt#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: object-order/templates/02-b.yml\n# 5\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: fifth\nspec:\n  podSelector: {}\n  policyTypes:\n    - Egress\n    - Ingress\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: object-order/templates/02-b.yml\n# 15 (11th object within 02-b.yml, in order to test `SplitManifests` which assigns `manifest-10`\n# to this object which should then come *after* `manifest-9`)\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: fifteenth\nspec:\n  podSelector: {}\n  policyTypes:\n    - Egress\n    - Ingress\n```\n\n----------------------------------------\n\nTITLE: Defining a ServiceAccount Resource in Kubernetes YAML\nDESCRIPTION: This YAML snippet creates a ServiceAccount named \"subchart-sa\" to be used by workloads requiring distinct Kubernetes permissions. No external dependencies are required beyond Kubernetes itself. The template sets metadata for identification, with no further fields specified. Inputs include the account name; outputs are the creation of a namespaced ServiceAccount object.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-skip-tests.txt#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: subchart-sa\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes RoleBinding for 'schedule-agents' ServiceAccount in YAML\nDESCRIPTION: This YAML snippet establishes a RoleBinding named 'schedule-agents' within the 'spaced' namespace, binding the Role 'schedule-agents' to a ServiceAccount of the same name. It links the Role to the ServiceAccount, granting it the specified permissions for pod operations.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/action/testdata/rbac.txt#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n# Source: hello/templates/rbac\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: schedule-agents\n  namespace: spaced\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: schedule-agents\nsubjects:\n- kind: ServiceAccount\n  name: schedule-agents\n  namespace: spaced\n```\n\n----------------------------------------\n\nTITLE: Using ShellCompDirectiveNoFileComp Directive in Helm's Shell Completion System\nDESCRIPTION: A reference to the ShellCompDirectiveNoFileComp constant which is used to instruct a shell completion system not to perform file completion for the current context.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/version-invalid-comp.txt#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nShellCompDirectiveNoFileComp\n```\n\n----------------------------------------\n\nTITLE: Defining ServiceAccount for Kubernetes RBAC in Helm Subchart\nDESCRIPTION: Creates a Kubernetes ServiceAccount named 'subchart-sa' that will be used for RBAC authorization in the subchart.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm-set.txt#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: subchart-sa\n```\n\n----------------------------------------\n\nTITLE: Binding a Role to a ServiceAccount via RoleBinding in Helm - YAML\nDESCRIPTION: This snippet sets up a RoleBinding named \"subchart-binding\" that links the \"subchart-role\" RBAC Role to the \"subchart-sa\" ServiceAccount in the \"default\" namespace, granting the account permissions as defined by the role. It uses rbac.authorization.k8s.io/v1 and requires defined Role and ServiceAccount resources within the namespace.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-set.txt#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: subchart-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: subchart-role\nsubjects:\n- kind: ServiceAccount\n  name: subchart-sa\n  namespace: default\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes RoleBinding to Bind Role to ServiceAccount in Helm Subchart - YAML\nDESCRIPTION: Defines a RoleBinding named \"subchart-binding\" which binds the Role \"subchart-role\" to the ServiceAccount \"subchart-sa\" in the default namespace. This resource links RBAC permissions to a specific identity (the ServiceAccount), enabling pods using this account to perform the authorized actions on pods as defined in the Role.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-name-template.txt#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: subchart-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: subchart-role\nsubjects:\n- kind: ServiceAccount\n  name: subchart-sa\n  namespace: default\n```\n\n----------------------------------------\n\nTITLE: Deployment of Alpine Linux Pod using Helm\nDESCRIPTION: Use the command `helm install ./alpine` to deploy the Alpine Linux pod based on the generated Helm chart. This command applies the templated resource definitions with the default values specified in values.yaml, creating a single Alpine pod in the cluster.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/chart-with-template-with-invalid-yaml/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nhelm install ./alpine\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes ServiceAccount with YAML\nDESCRIPTION: Defines a Kubernetes ServiceAccount named 'subchart-sa' for use within a subchart. No dependencies are required beyond basic Kubernetes cluster access. The output is a ServiceAccount resource, used to run pods with controlled permissions; no special input parameters or configuration is needed.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm-set-file.txt#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: subchart-sa\n```\n\n----------------------------------------\n\nTITLE: Defining a ServiceAccount in Kubernetes using YAML\nDESCRIPTION: Defines a ServiceAccount resource in Kubernetes. This ServiceAccount is named 'subchart-sa'. It's part of the subchart templates and used for granting specific permissions to pods within the Kubernetes cluster.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm.txt#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\n# Source: subchart/templates/subdir/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: subchart-sa\n```\n\n----------------------------------------\n\nTITLE: Exposing Subcharta Workload with a ClusterIP Service in Kubernetes YAML\nDESCRIPTION: This YAML Service manifest configures a ClusterIP Service named 'subcharta' for internal access to its workloads. It sets up port 80 for Apache traffic and uses label selectors following Helm chart conventions. Dependencies include a matching Deployment or Pod labeled with 'app.kubernetes.io/name: subcharta'.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-skip-tests.txt#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subcharta\n  labels:\n    helm.sh/chart: \"subcharta-0.1.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: apache\n  selector:\n    app.kubernetes.io/name: subcharta\n```\n\n----------------------------------------\n\nTITLE: Generating Unique Resource Names Using 'common.fullname.unique' Helm Template\nDESCRIPTION: Illustrates invoking the 'common.fullname.unique' helper, which adds a unique seven-character suffix to the resource name for disambiguation. Accepts same customizations as 'common.fullname'. Produces names that are unique within the cluster, up to 63 characters, and suitable for objects needing strong uniqueness guarantees.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nuniqueName: {{ template \"common.fullname.unique\" . }}\n```\n\n----------------------------------------\n\nTITLE: Defining Container using common.container\nDESCRIPTION: This snippet demonstrates how to use `common.container` within a deployment to define a container. It overrides the default container configurations and the example focuses on liveness and readiness probes. Dependencies include the Helm Helper Chart.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n{{- template \"common.deployment\" (list . \"mychart.deployment\") -}}\n{{- define \"mychart.deployment\" -}}\nspec:\n  template:\n    spec:\n      containers:\n      - {{ template \"common.container\" (list . \"mychart.deployment.container\") }}\n{{- end -}}\n{{- define \"mychart.deployment.container\" -}}\n## Define overrides for your Container here, e.g.\nlivenessProbe:\n  httpGet:\n    path: /\n    port: 80\nreadinessProbe:\n  httpGet:\n    path: /\n    port: 80\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Creating a ServiceAccount (YAML)\nDESCRIPTION: This snippet defines a Kubernetes ServiceAccount named \"subchart-sa\".  It is a basic definition without any specific permissions or configurations. The ServiceAccount is a core Kubernetes resource used to provide an identity for pods running in the cluster. No dependencies are needed beyond a Kubernetes cluster.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-with-api-version.txt#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: subchart-sa\n```\n\n----------------------------------------\n\nTITLE: Output of common.configmap template\nDESCRIPTION: This YAML code shows the resulting Kubernetes ConfigMap resource generated by the previous template example. It displays the custom data defined in the override template, including the content of 'file1.txt'.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/chart-with-template-lib-dep/charts/common/README.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\ndata:\n  athena: cat\n  julius: cat\n  one: This is a file.\n  zeus: cat\nkind: ConfigMap\nmetadata:\n  labels:\n    app: configmap\n    chart: configmap-0.1.0\n    heritage: Tiller\n    release: release-name\n  name: release-name-configmap\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes Role for Pod Operations in YAML\nDESCRIPTION: This YAML snippet creates a Role named 'schedule-agents' with permissions to perform all actions ('*') on pods, including exec and log resources, within a Kubernetes cluster. It sets the necessary apiVersion, kind, and rules, and is typically used to grant pod-related permissions to a service account.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/action/testdata/rbac.txt#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n# Source: hello/templates/rbac\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: schedule-agents\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\", \"pods/exec\", \"pods/log\"]\n  verbs: [\"*\"]\n```\n\n----------------------------------------\n\nTITLE: Defining a RoleBinding in Kubernetes using YAML\nDESCRIPTION: Defines a RoleBinding resource named 'subchart-binding' in Kubernetes.  It binds the 'subchart-role' Role to the 'subchart-sa' ServiceAccount in the 'default' namespace. This allows the ServiceAccount to have the permissions defined in the Role.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm.txt#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n---\n# Source: subchart/templates/subdir/rolebinding.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: subchart-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: subchart-role\nsubjects:\n- kind: ServiceAccount\n  name: subchart-sa\n  namespace: default\n```\n\n----------------------------------------\n\nTITLE: Provisioning Kubernetes Service for Subchartb using YAML\nDESCRIPTION: This YAML defines a ClusterIP Service 'subchartb' on port 80, labeled for Helm operations and selector-based routing to subchartb workloads. Typical dependencies include properly labeled pods; no further parameters are required. Output is a network-accessible Kubernetes Service associated with 'subchartb'.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm-set-file.txt#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subchartb\n  labels:\n    helm.sh/chart: \"subchartb-0.1.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: nginx\n  selector:\n    app.kubernetes.io/name: subchartb\n```\n\n----------------------------------------\n\nTITLE: Defining a Role for 'subchart' in Kubernetes (YAML)\nDESCRIPTION: This manifest defines a Kubernetes Role named 'subchart-role'. It grants permissions to 'get', 'list', and 'watch' Pod resources within its namespace. It originates from the 'subchart/templates/subdir/role.yaml' Helm template.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template.txt#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: subchart-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\",\"list\",\"watch\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Main Subchart Service with Kubernetes YAML\nDESCRIPTION: Establishes a ClusterIP Service 'subchart' serving TCP port 80, with version and instance Helm labels. Selects pods using 'app.kubernetes.io/name: subchart'. Dependencies are Helm templating for label values, and target pods must be appropriately labeled. Output is a versioned Service for the main subchart workload.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm-set-file.txt#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subchart\n  labels:\n    helm.sh/chart: \"subchart-0.1.0\"\n    app.kubernetes.io/instance: \"release-name\"\n    kube-version/major: \"1\"\n    kube-version/minor: \"20\"\n    kube-version/version: \"v1.20.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: nginx\n  selector:\n    app.kubernetes.io/name: subchart\n```\n\n----------------------------------------\n\nTITLE: Defining a Role in Kubernetes using YAML\nDESCRIPTION: Defines a Role resource named 'subchart-role' in Kubernetes. This Role grants 'get', 'list', and 'watch' permissions for 'pods' within the core API group (''). It's part of the subchart templates and used for defining access control.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm.txt#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n---\n# Source: subchart/templates/subdir/role.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: subchart-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\",\"list\",\"watch\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Pod for Helm Test Hook Using Alpine Image - YAML\nDESCRIPTION: Creates a test Pod named \"foobar-ywjj-baz-test\" annotated with the Helm test hook. It runs a single container using the alpine:latest image, which retrieves environment variables from the test ConfigMap. The container executes a command to echo the 'message' from the ConfigMap. The Pod has restartPolicy set to Never to run only once during tests.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-name-template.txt#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: \"foobar-ywjj-baz-test\"\n  annotations:\n    \"helm.sh/hook\": test\nspec:\n  containers:\n    - name: test\n      image: \"alpine:latest\"\n      envFrom:\n        - configMapRef:\n            name: \"foobar-ywjj-baz-testconfig\"\n      command:\n        - echo\n        - \"$message\"\n  restartPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Binding RBAC Role to ServiceAccount in Helm Subchart\nDESCRIPTION: Creates a RoleBinding named 'subchart-binding' that binds the previously defined Role to the ServiceAccount, establishing the RBAC permissions.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm-set.txt#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: subchart-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: subchart-role\nsubjects:\n- kind: ServiceAccount\n  name: subchart-sa\n  namespace: default\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Test Pod for Helm (YAML)\nDESCRIPTION: This snippet defines a Kubernetes Pod named `release-name-test`, annotated as a Helm test hook. The pod runs a simple command (`echo \"$message\"`) using the `alpine:latest` image. It fetches configuration data from the `release-name-testconfig` ConfigMap via `envFrom`. The `restartPolicy: Never` ensures the pod completes and does not restart, suitable for a short-lived test execution.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-with-kube-version.txt#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: \"release-name-test\"\n  annotations:\n    \"helm.sh/hook\": test\nspec:\n  containers:\n    - name: test\n      image: \"alpine:latest\"\n      envFrom:\n        - configMapRef:\n            name: \"release-name-testconfig\"\n      command:\n        - echo\n        - \"$message\"\n  restartPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Defining a ConfigMap in Kubernetes using YAML\nDESCRIPTION: Defines a ConfigMap resource named 'subchart-cm' in Kubernetes.  This ConfigMap contains a single data entry 'value' set to 'foo'. It's part of the subchart templates and is used for storing configuration data.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm.txt#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n---\n# Source: subchart/templates/subdir/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: subchart-cm\ndata:\n  value: foo\n```\n\n----------------------------------------\n\nTITLE: Defining a Service for subchartb in Kubernetes using YAML\nDESCRIPTION: Defines a Kubernetes Service named 'subchartb'. It exposes port 80 as 'nginx', targeting port 80 with TCP protocol. The selector 'app.kubernetes.io/name: subchartb' routes traffic to pods with that label.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm.txt#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n---\n# Source: subchart/charts/subchartb/templates/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: subchartb\n  labels:\n    helm.sh/chart: \"subchartb-0.1.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: nginx\n  selector:\n    app.kubernetes.io/name: subchartb\n```\n\n----------------------------------------\n\nTITLE: Defining a Mail Service Override\nDESCRIPTION: This snippet provides an example of how to override the `common.service` template to define a specific mail service. It adds custom metadata, labels, and port configurations. This demonstrates how the template allows for easy customization by merging overrides.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{{- template \"common.service\" (list . \"mychart.mail.service\") -}}\n{{- define \"mychart.mail.service\" -}}\nmetadata:\n  name: {{ template \"common.fullname\" . }}-mail # overrides the default name to add a suffix\n  labels:                                       # appended to the labels section\n    protocol: mail\nspec:\n  ports:                                        # composes the `ports` section of the service definition.\n  - name: smtp\n    port: 25\n    targetPort: 25\n  - name: imaps\n    port: 993\n    targetPort: 993\n  selector:                                     # this is appended to the default selector\n    protocol: mail\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Defining a test Pod in Kubernetes using YAML\nDESCRIPTION: Defines a Pod for testing purposes named 'release-name-test'. It utilizes the 'helm.sh/hook: test' annotation to be deployed as a test job. The Pod runs an alpine image and uses the 'release-name-testconfig' ConfigMap for environment variables.  The container executes 'echo $message'.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm.txt#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\n---\n# Source: subchart/templates/tests/test-nothing.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: \"release-name-test\"\n  annotations:\n    \"helm.sh/hook\": test\nspec:\n  containers:\n    - name: test\n      image: \"alpine:latest\"\n      envFrom:\n        - configMapRef:\n            name: \"release-name-testconfig\"\n      command:\n        - echo\n        - \"$message\"\n  restartPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Binding Kubernetes RBAC Role to ServiceAccount (YAML)\nDESCRIPTION: This snippet defines a Kubernetes RoleBinding named `subchart-binding`. It associates the `subchart-sa` ServiceAccount in the `default` namespace with the `subchart-role`, effectively granting the permissions defined in the role to the service account. This is a standard pattern for granting fine-grained permissions to applications running in pods that need to interact with specific Kubernetes resources.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-with-kube-version.txt#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: subchart-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: subchart-role\nsubjects:\n- kind: ServiceAccount\n  name: subchart-sa\n  namespace: default\n```\n\n----------------------------------------\n\nTITLE: Helm Get Manifest Command Usage\nDESCRIPTION: This snippet describes the usage of the `helm get manifest` command.  It indicates that the command requires one argument: the release name.  The command retrieves the Kubernetes manifest for a specified Helm release.  It also highlights the optional flags that can be used with the command.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/get-manifest-no-args.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nError: \"helm get manifest\" requires 1 argument\n\nUsage:  helm get manifest RELEASE_NAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining a Test ConfigMap for 'subchart' in Kubernetes (YAML)\nDESCRIPTION: This manifest defines a Kubernetes ConfigMap named 'release-name-testconfig' containing test data ('message: Hello World'). It includes the 'helm.sh/hook: test' annotation, indicating it should be used during Helm test runs. It originates from the 'subchart/templates/tests/test-config.yaml' Helm template.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template.txt#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: \"release-name-testconfig\"\n  annotations:\n    \"helm.sh/hook\": test\ndata:\n  message: Hello World\n```\n\n----------------------------------------\n\nTITLE: Defining CustomResourceDefinition in Kubernetes\nDESCRIPTION: Defines a CustomResourceDefinition (CRD) named TestCRD in the testcrdgroups.example.com API group. This CRD enables the creation of custom resources of kind TestCRD with various naming options.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-with-crds.txt#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: testcrds.testcrdgroups.example.com\nspec:\n  group: testcrdgroups.example.com\n  version: v1alpha1\n  names:\n    kind: TestCRD\n    listKind: TestCRDList\n    plural: testcrds\n    shortNames:\n      - tc\n    singular: authconfig\n```\n\n----------------------------------------\n\nTITLE: Usage: Correct Syntax for Helm Install - Shell\nDESCRIPTION: This snippet details the correct command-line syntax for using the `helm install` command. It outlines the mandatory `[NAME]` (release name) and `[CHART]` (chart reference) arguments, followed by optional `[flags]` to customize the installation.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/install-no-args.txt#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nUsage:  helm install [NAME] [CHART] [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Test ConfigMap for Subchart Using YAML\nDESCRIPTION: A Helm hook ConfigMap named 'release-name-testconfig' for test execution, annotated so Helm recognizes it as a test resource. Populates a single message field. No parameters needed, but annotation is critical for Helm post-install test hooks. This ConfigMap is commonly referenced by test pods.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm-set-file.txt#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: \"release-name-testconfig\"\n  annotations:\n    \"helm.sh/hook\": test\ndata:\n  message: Hello World\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes ClusterIP Service (YAML) - subchartb\nDESCRIPTION: This snippet defines a Kubernetes Service named `subchartb` of type ClusterIP, similar to the service for `subcharta`. It exposes port 80 (TCP) and routes it to target port 80 on pods selected by the label `app.kubernetes.io/name: subchartb`. This service provides internal cluster access to the `subchartb` component, enabling communication from other services within the cluster.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-with-kube-version.txt#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subchartb\n  labels:\n    helm.sh/chart: \"subchartb-0.1.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: nginx\n  selector:\n    app.kubernetes.io/name: subchartb\n```\n\n----------------------------------------\n\nTITLE: Helm Get Hooks Command Usage\nDESCRIPTION: This snippet describes the correct usage of the `helm get hooks` command. It indicates that the command requires one argument, which is the `RELEASE_NAME`. This argument specifies the name of the Helm release from which to retrieve the hooks. It explains how to use the command along with flags (optional). The output is the list of hooks related to the specified release.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/get-hooks-no-args.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUsage:  helm get hooks RELEASE_NAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Managing a Helm Test Pod to Echo Config Data - YAML\nDESCRIPTION: This snippet defines a Pod named \"release-name-test\" with a Helm test hook annotation, demonstrating how Helm charts can automate testing during deployment. The pod starts a container based on Alpine, injects environment variables from a ConfigMap, and executes an echo command printing the message. It requires the referenced ConfigMap and outputs a pod terminated after command execution.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-set.txt#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: \"release-name-test\"\n  annotations:\n    \"helm.sh/hook\": test\nspec:\n  containers:\n    - name: test\n      image: \"alpine:latest\"\n      envFrom:\n        - configMapRef:\n            name: \"release-name-testconfig\"\n      command:\n        - echo\n        - \"$message\"\n  restartPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Creating a RoleBinding (YAML)\nDESCRIPTION: This YAML snippet creates a Kubernetes RoleBinding named \"subchart-binding\". It binds the \"subchart-role\" to the \"subchart-sa\" ServiceAccount, granting the ServiceAccount the permissions defined in the role. This is an RBAC resource that depends on the Role resource being present.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-with-api-version.txt#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: subchart-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: subchart-role\nsubjects:\n- kind: ServiceAccount\n  name: subchart-sa\n  namespace: default\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes Service using YAML in Helm\nDESCRIPTION: This snippet defines a Kubernetes Service object.  It specifies the API version, kind (Service), and metadata like name and labels. The labels are used for identifying and selecting the service.  The `spec` section sets the service type to `ClusterIP`, defines ports, protocol (TCP), and the target port, along with the selector to match the pods the service should expose.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-show-only-one.txt#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subchart\n  labels:\n    helm.sh/chart: \"subchart-0.1.0\"\n    app.kubernetes.io/instance: \"release-name\"\n    kube-version/major: \"1\"\n    kube-version/minor: \"20\"\n    kube-version/version: \"v1.20.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: nginx\n  selector:\n    app.kubernetes.io/name: subchart\n```\n\n----------------------------------------\n\nTITLE: Extending common.secret template in Helm\nDESCRIPTION: This example shows how to extend the `common.secret` template to define a Kubernetes Secret resource with custom data. The values are base64 encoded using the `b64enc` function.  It includes static strings and file content.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/chart-with-template-lib-dep/charts/common/README.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n{{- template \"common.secret\" (list . \"mychart.secret\") -}}\n{{- define \"mychart.secret\" -}}\ndata:\n  zeus: {{ print \"cat\" | b64enc }}\n  athena: {{ print \"cat\" | b64enc }}\n  julius: {{ print \"cat\" | b64enc }}\n  one: |-\n    {{ .Files.Get \"file1.txt\" | b64enc }}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes ServiceAccount for Helm Subchart - YAML\nDESCRIPTION: Creates a Kubernetes ServiceAccount named \"subchart-sa\" intended for use by pods in the subchart. This resource allows pods to interact with the cluster using this identity. No specific annotations or secrets are attached, making it a basic ServiceAccount definition with default settings.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-name-template.txt#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: subchart-sa\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Deployment with Helm Template - YAML\nDESCRIPTION: This YAML snippet provides a Kubernetes Deployment manifest as rendered by a Helm chart, used to manage application pods. The deployment ensures a single replica of an nginx:stable container, configured with liveness and readiness HTTP probes on the root path and port 80. Required dependencies include a running Kubernetes cluster and Helm for template rendering. Core parameters include 'replicas', container 'image', health checks, and label selectors, with the manifest relying on Helm-supplied labels and proper namespace injection. It is limited to basic resource configuration and does not define advanced resource constraints or affinity rules.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-chart-with-template-lib-archive-dep.txt#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: release-name-chart-with-template-lib-archive-dep\n  labels:\n    app: chart-with-template-lib-archive-dep\n    chart: chart-with-template-lib-archive-dep-0.1.0\n    release: release-name\n    heritage: Helm\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: chart-with-template-lib-archive-dep\n      release: release-name\n  template:\n    metadata:\n      labels:\n        app: chart-with-template-lib-archive-dep\n        release: release-name\n    spec:\n      containers:\n        - name: chart-with-template-lib-archive-dep\n          image: \"nginx:stable\"\n          imagePullPolicy: IfNotPresent\n          ports:\n            - name: http\n              containerPort: 80\n              protocol: TCP\n          livenessProbe:\n            httpGet:\n              path: /\n              port: http\n          readinessProbe:\n            httpGet:\n              path: /\n              port: http\n          resources:\n            {}\n```\n\n----------------------------------------\n\nTITLE: Example Computed Helm Values (YAML)\nDESCRIPTION: This YAML snippet illustrates the format of computed values as output by Helm. These values represent the final configuration merged from various sources (like values.yaml, --set flags, parent chart values) used by the chart templates during rendering.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/get-values-all.txt#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nCOMPUTED VALUES:\nname: value\n```\n\n----------------------------------------\n\nTITLE: Defining a Service for 'subchart' Main Chart in Kubernetes (YAML)\nDESCRIPTION: This manifest defines a Kubernetes Service named 'subchart' of type ClusterIP for the main 'subchart' Helm chart. It exposes port 80, targeting port 80 on pods labeled 'app.kubernetes.io/name: subchart', and names the port 'nginx'. Includes additional labels for Helm chart info, instance name, and Kubernetes version. It originates from the 'subchart/templates/service.yaml' Helm template.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template.txt#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subchart\n  labels:\n    helm.sh/chart: \"subchart-0.1.0\"\n    app.kubernetes.io/instance: \"release-name\"\n    kube-version/major: \"1\"\n    kube-version/minor: \"20\"\n    kube-version/version: \"v1.20.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: nginx\n  selector:\n    app.kubernetes.io/name: subchart\n```\n\n----------------------------------------\n\nTITLE: Assigning Role to ServiceAccount with RoleBinding in Kubernetes YAML\nDESCRIPTION: This YAML snippet binds the previously defined 'subchart-role' to the 'subchart-sa' ServiceAccount using a RoleBinding named 'subchart-binding'. The rule specifies the subject and references the Role by name, controlling access within the 'default' namespace. Inputs include an existing Role and ServiceAccount; output is the RoleBinding association.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-skip-tests.txt#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: subchart-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: subchart-role\nsubjects:\n- kind: ServiceAccount\n  name: subchart-sa\n  namespace: default\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes Service with YAML\nDESCRIPTION: This snippet defines a Kubernetes Service resource. It exposes the application on port 80, using the ClusterIP type. The selector ensures the Service targets the correct pods based on labels. No dependencies are required other than a running Kubernetes cluster with Helm installed.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-chart-with-template-lib-dep.txt#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: chart-with-template-lib-dep\n    chart: chart-with-template-lib-dep-0.1.0\n    heritage: Helm\n    release: release-name\n  name: release-name-chart-with-template-lib-dep\nspec:\n  ports:\n  - name: http\n    port: 80\n    targetPort: http\n  selector:\n    app: chart-with-template-lib-dep\n    release: release-name\n  type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes RoleBinding in Helm Subchart\nDESCRIPTION: Defines a Kubernetes RoleBinding named 'subchart-binding' that links the previously defined 'subchart-role' to a ServiceAccount named 'subchart-sa' in the default namespace.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-show-only-glob.txt#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: subchart-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: subchart-role\nsubjects:\n- kind: ServiceAccount\n  name: subchart-sa\n  namespace: default\n```\n\n----------------------------------------\n\nTITLE: Defining a Service for Application 'subchartb' in Kubernetes\nDESCRIPTION: Creates a ClusterIP Service named 'subchartb' exposing port 80 with specified labels; it targets pods with label 'app.kubernetes.io/name: subchartb'.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-values-files.txt#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: subchart/charts/subchartb/templates/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: subchartb\n  labels:\n    helm.sh/chart: \"subchartb-0.1.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: nginx\n  selector:\n    app.kubernetes.io/name: subchartb\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes RBAC Role via Helm YAML Template - YAML\nDESCRIPTION: This snippet defines a Role named \"subchart-role\" granting read-only access to pods within a namespace. It is intended for RBAC configurations in Helm deployments and requires the rbac.authorization.k8s.io/v1 API group. The object enables list, get, and watch verbs on pods and expects to be referenced by RoleBindings.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-set.txt#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: subchart-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\",\"list\",\"watch\"]\n```\n\n----------------------------------------\n\nTITLE: Defining a Service for Application 'subcharta' in Kubernetes\nDESCRIPTION: Creates a ClusterIP Service named 'subcharta' exposing port 80 with label selectors. Dependencies include a Deployment selecting 'app.kubernetes.io/name: subcharta'.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-values-files.txt#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: subchart/charts/subcharta/templates/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: subcharta\n  labels:\n    helm.sh/chart: \"subcharta-0.1.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: apache\n  selector:\n    app.kubernetes.io/name: subcharta\n```\n\n----------------------------------------\n\nTITLE: Handling Helm 'get notes' command with required argument\nDESCRIPTION: This snippet demonstrates the correct usage of the 'helm get notes' command, which requires specifying a RELEASE_NAME argument. It explains that the command fetches notes associated with a specific Helm release, and highlights the importance of providing the necessary argument to avoid errors.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/get-notes-no-args.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm get notes RELEASE_NAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Kubernetes ConfigMap Resource Definition in YAML\nDESCRIPTION: A Kubernetes ConfigMap resource named 'test-configmap' with data containing a key-value pair of 'foo: bar'. This is part of the 'chart-with-secret' Helm chart template.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/install-dry-run-with-secret.txt#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: chart-with-secret/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: test-configmap\ndata:\n  foo: bar\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Service with Helm Template - YAML\nDESCRIPTION: This YAML snippet defines a Kubernetes Service manifest created by a Helm chart template. The service is of the ClusterIP type, exposing port 80 for HTTP traffic and targeting pods matching the specified 'app' and 'release' labels. Dependencies include the Kubernetes API server and the Helm CLI for templating, with key parameters such as 'port', 'targetPort', and 'selector'. The manifest expects Helm to inject proper naming and label values during chart installation, and it is suitable for internal service communication within a cluster.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-chart-with-template-lib-archive-dep.txt#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: chart-with-template-lib-archive-dep\n    chart: chart-with-template-lib-archive-dep-0.1.0\n    heritage: Helm\n    release: release-name\n  name: release-name-chart-with-template-lib-archive-dep\nspec:\n  ports:\n  - name: http\n    port: 80\n    targetPort: http\n  selector:\n    app: chart-with-template-lib-archive-dep\n    release: release-name\n  type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Defining 'subchart' Service in Helm YAML\nDESCRIPTION: This snippet declares a Service resource named 'subchart' with version 1, specifying metadata labels including chart version and Kubernetes version compatibility. It sets up a ClusterIP service listening on port 80, targeting the same port, with the label 'app.kubernetes.io/name' set to 'subchart'. Dependencies include Helm templating conventions for variable substitution. It enables network access to pods matching the selector within the cluster.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-show-only-multiple.txt#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n# Source: subchart/templates/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: subchart\n  labels:\n    helm.sh/chart: \"subchart-0.1.0\"\n    app.kubernetes.io/instance: \"release-name\"\n    kube-version/major: \"1\"\n    kube-version/minor: \"20\"\n    kube-version/version: \"v1.20.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: nginx\n  selector:\n    app.kubernetes.io/name: subchart\n```\n\n----------------------------------------\n\nTITLE: Generating Label Metadata Name Using 'common.name' Helm Template\nDESCRIPTION: Demonstrates how to invoke the 'common.name' helper template to obtain application label values for Kubernetes objects. The template allows customization with value-based name overrides, prefixes, and suffixes. Outputs a name string, with a 54-character limit, specifically formatted for use in the 'app' or similar label fields.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napp: {{ template \"common.name\" . }}\n```\n\n----------------------------------------\n\nTITLE: Creating a ConfigMap with TOML data in Helm Chart Template\nDESCRIPTION: This snippet demonstrates how to define a Kubernetes ConfigMap in a Helm chart template, containing TOML formatted data with a simple key-value pair. The template creates a resource named 'issue-totoml'.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/issue-totoml.txt#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# Source: issue-totoml/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: issue-totoml\ndata: |\n  key = 13\n```\n\n----------------------------------------\n\nTITLE: Defining Helm Pre-install Hook Job Metadata - YAML\nDESCRIPTION: This snippet provides the core metadata and structure for a Kubernetes Job designed to function as a Helm pre-install hook. The critical annotation `helm.sh/hook: pre-install` is included in the job's metadata, signaling to Helm that this resource should be executed before the chart's main resources are deployed. The full Job spec (containers, etc.) is not shown here but would follow this metadata.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/get-hooks.txt#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# Source: pre-install-hook.yaml\napiVersion: v1\nkind: Job\nmetadata:\n  annotations:\n    \"helm.sh/hook\": pre-install\n\n```\n\n----------------------------------------\n\nTITLE: Output of common.metadata Template\nDESCRIPTION: Shows the resulting YAML output from the common.metadata template, including standard and custom labels, annotations, and hook definitions across multiple resources.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  name: release-name-metadata\n  labels:\n    app.kubernetes.io/name: metadata\n    app.kubernetes.io/managed-by: \"Helm\"\n    app.kubernetes.io/instance: \"release-name\"\n    helm.sh/chart: metadata-0.1.0\n    first: \"matt\"\n    last: \"butcher\"\n    nick: \"technosophos\"\n  annotations:\n    \"destination\": \"archive\"\n    \"format\": \"bio\"\n    \"helm.sh/hook\": \"pre-install\"\n---\nmetadata:\n  name: Zeus\n  labels:\n    app.kubernetes.io/name: metadata\n    app.kubernetes.io/managed-by: \"Helm\"\n    app.kubernetes.io/instance: \"release-name\"\n    helm.sh/chart: metadata-0.1.0\n  annotations:\n```\n\n----------------------------------------\n\nTITLE: Defining Shell Completion Directive in Shell\nDESCRIPTION: This snippet declares a shell completion directive that disables file completion functionality, typically used in CLI tools like Helm to control shell autocompletion behavior. It requires a shell environment supporting completion directives and instructs the shell to not perform file completion at the point of the directive.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/revision-wrong-args-comp.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n:4\nCompletion ended with directive: ShellCompDirectiveNoFileComp\n```\n\n----------------------------------------\n\nTITLE: Creating a Helm Chart using helm create (Shell)\nDESCRIPTION: This command uses the Helm CLI tool to generate a boilerplate Helm chart structure in a new directory named 'alpine'. This is a common starting point for creating new Helm charts.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/chart/v2/util/testdata/dependent-chart-alias/charts/alpine/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm create alpine\n```\n\n----------------------------------------\n\nTITLE: Sample Output for Unique Name Generation with 'common.fullname.unique'\nDESCRIPTION: Presents a rendered example unique name as generated by the 'common.fullname.unique' helper template, demonstrating the application of the unique suffix. Inputs and overrides are functionally equivalent to those of 'common.fullname', enabling flexibility for charts needing to avoid naming collisions.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nuniqueName: release-name-fullname-jl0dbwx\n```\n\n----------------------------------------\n\nTITLE: Creating New Helm Chart (Shell)\nDESCRIPTION: This command initializes a new Helm chart project named 'alpine' in the current directory. It creates a standard chart structure including templates, values, and chart metadata files, serving as a starting point for chart development.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/chart/v2/util/testdata/frobnitz/charts/alpine/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm create alpine\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes Pod with Alpine Container in Helm Chart (with YAML Error)\nDESCRIPTION: This snippet defines a Kubernetes Pod named 'release-name-my-alpine' running an Alpine 3.9 container that sleeps for 9000 seconds. The YAML contains a syntax error on line 11 where 'invalid' appears without a proper key-value structure.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-with-invalid-yaml-debug.txt#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# Source: chart-with-template-with-invalid-yaml/templates/alpine-pod.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: \"release-name-my-alpine\"\nspec:\n  containers:\n  - name: waiter\n    image: \"alpine:3.9\"\n    command: [\"/bin/sleep\",\"9000\"]\ninvalid\n```\n\n----------------------------------------\n\nTITLE: Defining a Test Pod for 'subchart' in Kubernetes (YAML)\nDESCRIPTION: This manifest defines a Kubernetes Pod named 'release-name-test' intended for Helm testing, marked by the 'helm.sh/hook: test' annotation. The pod runs an Alpine container that sources environment variables from the 'release-name-testconfig' ConfigMap and executes a command to echo the 'message' variable. The pod is configured with a 'Never' restart policy. It originates from the 'subchart/templates/tests/test-nothing.yaml' Helm template.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template.txt#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: \"release-name-test\"\n  annotations:\n    \"helm.sh/hook\": test\nspec:\n  containers:\n    - name: test\n      image: \"alpine:latest\"\n      envFrom:\n        - configMapRef:\n            name: \"release-name-testconfig\"\n      command:\n        - echo\n        - \"$message\"\n  restartPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Creating Helm Chart Shell\nDESCRIPTION: This command uses the Helm CLI to scaffold a new chart directory structure named 'alpine'. It creates standard directories like 'templates/', 'charts/', and files like 'Chart.yaml', 'values.yaml', and potentially others depending on the Helm version.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/chart/v2/loader/testdata/frobnitz.v2.reqs/charts/alpine/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nhelm create alpine\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes Deployment with YAML\nDESCRIPTION: This snippet defines a Kubernetes Deployment resource. It specifies the desired state for the application, including the number of replicas, container image, and resource requests. The Deployment also defines liveness and readiness probes for health checks.  It depends on a running Kubernetes cluster and a configured container registry for image retrieval.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-chart-with-template-lib-dep.txt#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: release-name-chart-with-template-lib-dep\n  labels:\n    app: chart-with-template-lib-dep\n    chart: chart-with-template-lib-dep-0.1.0\n    release: release-name\n    heritage: Helm\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: chart-with-template-lib-dep\n      release: release-name\n  template:\n    metadata:\n      labels:\n        app: chart-with-template-lib-dep\n        release: release-name\n    spec:\n      containers:\n        - name: chart-with-template-lib-dep\n          image: \"nginx:stable\"\n          imagePullPolicy: IfNotPresent\n          ports:\n            - name: http\n              containerPort: 80\n              protocol: TCP\n          livenessProbe:\n            httpGet:\n              path: /\n              port: http\n          readinessProbe:\n            httpGet:\n              path: /\n              port: http\n          resources:\n            {}\n```\n\n----------------------------------------\n\nTITLE: Helm Schema Validation Error Output\nDESCRIPTION: This output demonstrates a typical error message from Helm when `helm install` or `helm upgrade` fails due to values not conforming to the schema defined within the chart (usually in `values.schema.json`). The message specifies the chart (`empty`) and lists the validation failures: a missing required property (`employmentInfo`) at the root level and a value (`/age: -5`) that violates a minimum constraint (must be >= 0).\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/schema-negative.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nError: INSTALLATION FAILED: values don't meet the specifications of the schema(s) in the following chart(s):\nempty:\n- at '': missing property 'employmentInfo'\n- at '/age': minimum: got -5, want 0\n```\n\n----------------------------------------\n\nTITLE: Viewing Helm Release Upgrade Status in plaintext\nDESCRIPTION: This output shows the result of a successful Helm upgrade command. It displays details about the release including its name, deployment timestamp, namespace, status, revision number, and a brief description of the operation result.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/upgrade.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nRelease \"funny-bunny\" has been upgraded. Happy Helming!\nNAME: funny-bunny\nLAST DEPLOYED: Fri Sep  2 22:04:05 1977\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 3\nDESCRIPTION: Upgrade complete\nTEST SUITE: None\n```\n\n----------------------------------------\n\nTITLE: Viewing Helm Release Status for 'apollo' Chart\nDESCRIPTION: Output from a 'helm status' or similar command showing the deployment information for a Helm chart named 'apollo'. The chart was deployed in 1977, is in the default namespace, has a deployed status, and is at revision 1.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/install-with-wait.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME: apollo\nLAST DEPLOYED: Fri Sep  2 22:04:05 1977\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nDESCRIPTION: Install complete\nTEST SUITE: None\n```\n\n----------------------------------------\n\nTITLE: Defining and Using the 'common.ingress' Helm Template with Host and TLS Values\nDESCRIPTION: This snippet demonstrates configuring and using the 'common.ingress' Helm template, passing custom values for hosts, annotations, and TLS settings. Requires Helm 3+ and Kubernetes support for the specified Ingress API. Inputs include values like hosts and TLS secret names; outputs are tailored Ingress resources for routing. Constraint: Must match Kubernetes versions supporting 'extensions/v1beta1' or adjust for newer APIs as needed.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  hosts:\n  - chart-example.local\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    kubernetes.io/tls-acme: \"true\"\n  tls:\n  - secretName: chart-example-tls\n    hosts:\n    - chart-example.local\n```\n\nLANGUAGE: yaml\nCODE:\n```\n{{- template \"common.ingress\" (list . \"mychart.ingress\") -}}\n{{- define \"mychart.ingress\" -}}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Inserting Chart Name in Helm Template using {{ .Chart.Name }}\nDESCRIPTION: This snippet demonstrates how to embed the chart's name dynamically within Helm templates using the {{ .Chart.Name }} syntax. It allows for flexible and parameterized templates that adjust based on the chart configuration, facilitating deployment customization.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/chart/v2/util/testdata/subpop/charts/subchart1/templates/NOTES.txt#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nSample notes for {{ .Chart.Name }}\n```\n\n----------------------------------------\n\nTITLE: Listing Helm Chart Releases Using Helm CLI\nDESCRIPTION: This snippet lists Helm chart releases in a specific namespace, displaying release names, revision numbers, update timestamps, statuses, chart names, and application versions. It helps monitor the current state of Helm releases in the Kubernetes cluster.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/list-uninstalling.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nhelm list --namespace default --output=table\n```\n\n----------------------------------------\n\nTITLE: Retrieving MariaDB root password from Kubernetes secret\nDESCRIPTION: Command to extract and decode the root password from the Kubernetes secret created during deployment.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/action/testdata/charts/chart-with-uncompressed-dependencies/charts/mariadb/templates/NOTES.txt#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get secret --namespace {{ .Release.Namespace }} {{ template \"mariadb.fullname\" . }} -o jsonpath=\"{.data.mariadb-root-password}\" | base64 --decode\n```\n\n----------------------------------------\n\nTITLE: Connecting to MariaDB master service in Kubernetes\nDESCRIPTION: Command to connect to the master MariaDB service, which provides read-write access to the database. Uses the root user and the specified database name.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/action/testdata/charts/chart-with-uncompressed-dependencies/charts/mariadb/templates/NOTES.txt#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmysql -h {{ template \"mariadb.fullname\" . }}.{{ .Release.Namespace }}.svc.cluster.local -uroot -p {{ .Values.db.name }}\n```\n\n----------------------------------------\n\nTITLE: Output of common.container template\nDESCRIPTION: This YAML snippet displays the resulting Kubernetes Deployment after utilizing the `common.deployment` and `common.container` templates with the configurations specified in the previous examples. It illustrates how the templates merge default settings with custom overrides to generate a complete Deployment resource.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/chart-with-template-lib-dep/charts/common/README.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    app: deployment\n    chart: deployment-0.1.0\n    heritage: Tiller\n    release: release-name\n  name: release-name-deployment\nspec:\n  template:\n    metadata:\n      labels:\n        app: deployment\n    spec:\n      containers:\n      - image: nginx:stable\n        imagePullPolicy: IfNotPresent\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 80\n        name: deployment\n        ports:\n        - containerPort: 80\n          name: http\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 80\n        resources:\n          limits:\n            cpu: 100m\n            memory: 128Mi\n          requests:\n            cpu: 100m\n            memory: 128Mi\n```\n\n----------------------------------------\n\nTITLE: Example PersistentVolumeClaim Resource Output from the Template\nDESCRIPTION: Illustrates the resulting Kubernetes PersistentVolumeClaim YAML as produced by the 'common.persistentvolumeclaim' Helm template given example values. It includes access modes, resource requests, and class specifications as configured, generating a storage claim for workloads. Dependencies are chart value settings and Kubernetes PersistentVolume support; output can be further referenced by pods for mounted volumes.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  labels:\n    app.kubernetes.io/name: persistentvolumeclaim\n    helm.sh/chart: persistentvolumeclaim-0.1.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/instance: release-name\n  name: release-name-persistentvolumeclaim\nspec:\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 8Gi\n  storageClassName: \"fast\"\n```\n\n----------------------------------------\n\nTITLE: Running profiling for Helm using environment variables and Go pprof tool - Shell\nDESCRIPTION: This snippet demonstrates how to perform runtime profiling of Helm's CPU and memory usage by setting environment variables to capture profiling data and then using Go's pprof tool to visualize the profiling graphs. It requires Helm installed on the system and the graphviz package for HTTP visualization. The example shows commands to collect profiles and open web interfaces on specified ports.\nSOURCE: https://github.com/helm/helm/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nHELM_PPROF_CPU_PROFILE=cpu.prof HELM_PPROF_MEM_PROFILE=mem.prof helm show all bitnami/nginx\n\n# Visualize graphs. You need to have installed graphviz package in your system\ngo tool pprof -http=\":8000\" cpu.prof\n\ngo tool pprof -http=\":8001\" mem.prof\n```\n\n----------------------------------------\n\nTITLE: Extending Resource Names by Composing on 'common.fullname' or 'common.name' in Helm\nDESCRIPTION: Demonstrates how to define custom helper templates in Helm that build on top of the standard 'common.fullname' or 'common.name' outputs, adding further suffixes. Assumes chart developers need to extend naming for subresource or auxiliary templates. Inputs are untouched '.'. Outputs are extended resource names; must be kept under the respective length limits (54 characters for fullname, including extension).\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n{{- define \"my.fullname\" -}}\n  {{ template \"common.fullname\" . }}-my-stuff\n{{- end -}}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n{{- define \"my.name\" -}}\n  {{ template \"common.name\" . }}-my-stuff\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Connecting to MariaDB slave service in Kubernetes\nDESCRIPTION: Command to connect to the slave MariaDB service, which provides read-only access to the database. Only available when replication is enabled.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/action/testdata/charts/chart-with-uncompressed-dependencies/charts/mariadb/templates/NOTES.txt#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmysql -h {{ template \"slave.fullname\" . }}.{{ .Release.Namespace }}.svc.cluster.local -uroot -p {{ .Values.db.name }}\n```\n\n----------------------------------------\n\nTITLE: Logging Helm Plugin Completion Call in Shell Script\nDESCRIPTION: This snippet logs the invocation of the plugin.complete function within the Helm plugin context, capturing the namespace, number of arguments, and each argument received. It helps in debugging or understanding the flow of plugin completions and relies on standard shell commands for output.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/plugin_args_ns_comp.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nplugin.complete was called\nNamespace: mynamespace\nNum args received: 1\nArgs received:\n:2\nCompletion ended with directive: ShellCompDirectiveNoSpace\n```\n\n----------------------------------------\n\nTITLE: Helm Linting Output for Chart with Deprecated API\nDESCRIPTION: Console output from the Helm linting tool showing information and warnings for a test chart. The output highlights a missing recommended icon in Chart.yaml and warns about the use of a deprecated API version (autoscaling/v2beta1) for HorizontalPodAutoscaler that will be unavailable in Kubernetes v1.25+.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/lint-chart-with-deprecated-api.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n==> Linting testdata/testcharts/chart-with-deprecated-api\n[INFO] Chart.yaml: icon is recommended\n[WARNING] templates/horizontalpodautoscaler.yaml: autoscaling/v2beta1 HorizontalPodAutoscaler is deprecated in v1.22+, unavailable in v1.25+; use autoscaling/v2 HorizontalPodAutoscaler\n\n1 chart(s) linted, 0 chart(s) failed\n```\n\n----------------------------------------\n\nTITLE: Example Output Names from 'common.fullname' Helm Template with Overrides\nDESCRIPTION: Provides sample outputs for the 'common.fullname' helper template with and without property overrides, showing the dynamic composition of full Kubernetes resource names. Dependencies include chart values for 'fullnameOverride', 'fullnamePrefix', 'fullnameSuffix', and their global equivalents. Constraints include the 54-character maximum; users can further extend names within this constraint in their charts.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# with the values above\nname: pp-pre-some-name-suf-ps\n\n---\n# the default, for release \"happy-panda\" and chart \"wordpress\"\nname: happy-panda-wordpress\n```\n\n----------------------------------------\n\nTITLE: Set Git Email Configuration - Bash\nDESCRIPTION: This command updates the global git configuration with the user's email address. It is used to properly attribute commits and sign them off.\nSOURCE: https://github.com/helm/helm/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.email joe.smith@example.com\n```\n\n----------------------------------------\n\nTITLE: ClusterIP URL Generation & Port Forwarding - Helm Template & Shell\nDESCRIPTION: This snippet provides instructions and executes a port-forward command when the service type is ClusterIP. It retrieves the pod name using `kubectl` and constructs a URL for local access. It also executes the `kubectl port-forward` command to forward traffic from the local machine to the pod.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/chart-with-lib-dep/templates/NOTES.txt#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods -l \"app={{ template \"chart-with-lib-dep.name\" . }},release={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n  echo \"Visit http://127.0.0.1:8080 to use your application\"\n  kubectl port-forward $POD_NAME 8080:80\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Provisioning Kubernetes Service for Subcharta using YAML\nDESCRIPTION: Defines a ClusterIP Service named 'subcharta' exposing TCP port 80, labeled for Helm chart identification. This enables inter-pod communication for workloads labeled with 'app.kubernetes.io/name: subcharta'. No special dependencies beyond standard Kubernetes Services; expected usage is proxying traffic to the subcharta app.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm-set-file.txt#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subcharta\n  labels:\n    helm.sh/chart: \"subcharta-0.1.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: apache\n  selector:\n    app.kubernetes.io/name: subcharta\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Pod for Helm Test Hook Using YAML\nDESCRIPTION: Defines a test Pod 'release-name-test' executed by Helm as a test hook. Uses an Alpine container that echoes a message from a referenced ConfigMap. Relies on Helm's hook annotation and pre-existing 'release-name-testconfig'. The pod is non-restarting, designed for ephemeral test runs with output from environment variable substitution.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm-set-file.txt#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: \"release-name-test\"\n  annotations:\n    \"helm.sh/hook\": test\nspec:\n  containers:\n    - name: test\n      image: \"alpine:latest\"\n      envFrom:\n        - configMapRef:\n            name: \"release-name-testconfig\"\n      command:\n        - echo\n        - \"$message\"\n  restartPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Set Git Name Configuration - Bash\nDESCRIPTION: This command updates the global git configuration with the user's name. It is used to properly attribute commits and sign them off.\nSOURCE: https://github.com/helm/helm/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.name \"Joe Smith\"\n```\n\n----------------------------------------\n\nTITLE: Output of common.secret template\nDESCRIPTION: This YAML code shows the output Kubernetes Secret resource generated by the preceding example. The data values are base64 encoded as is standard for secrets.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/chart-with-template-lib-dep/charts/common/README.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\ndata:\n  athena: Y2F0\n  julius: Y2F0\n  one: VGhpcyBpcyBhIGZpbGUuCg==\n  zeus: Y2F0\nkind: Secret\nmetadata:\n  labels:\n    app: secret\n    chart: secret-0.1.0\n    heritage: Tiller\n    release: release-name\n  name: release-name-secret\ntype: Opaque\n```\n\n----------------------------------------\n\nTITLE: Binding Kubernetes Role to ServiceAccount with RoleBinding in YAML\nDESCRIPTION: Establishes a RoleBinding named 'subchart-binding' to link the 'subchart-role' to the 'subchart-sa' ServiceAccount in the default namespace. This ensures the service account receives the RBAC permissions assigned in the related Role. Dependencies include the pre-existing Role and ServiceAccount; requires no custom parameters beside names.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm-set-file.txt#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: subchart-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: subchart-role\nsubjects:\n- kind: ServiceAccount\n  name: subchart-sa\n  namespace: default\n```\n\n----------------------------------------\n\nTITLE: Using ShellCompDirectiveNoFileComp in Helm CLI\nDESCRIPTION: This directive instructs the shell completion system that the current command does not accept any more arguments (though it may accept flags), and that file completion should not be suggested to the user.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/empty_nofile_comp.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n_activeHelp_ This command does not take any more arguments (but may accept flags).\n:4\nCompletion ended with directive: ShellCompDirectiveNoFileComp\n```\n\n----------------------------------------\n\nTITLE: Get Application URL with LoadBalancer - Helm Template\nDESCRIPTION: This snippet retrieves the application URL when the service type is LoadBalancer. It uses `kubectl` commands to get the Service IP and constructs and prints the URL. It also includes a note about the potential delay in the LoadBalancer IP becoming available. Requires kubectl to be installed and configured.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/chart-with-template-lib-dep/templates/NOTES.txt#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ template \"chart-with-template-lib-dep.fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc {{ template \"chart-with-template-lib-dep.fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Installing a Helm Chart using helm install (Shell)\nDESCRIPTION: This command uses the Helm CLI tool to install the Helm chart located in the './alpine' directory. Helm processes the templates and values to deploy resources into a Kubernetes cluster.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/chart/v2/util/testdata/dependent-chart-alias/charts/alpine/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm install ./alpine\n```\n\n----------------------------------------\n\nTITLE: Output of common.hook Template\nDESCRIPTION: Shows the resulting YAML output from the common.hook template, properly formatting Helm hook annotations.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\n\"helm.sh/hook\": \"pre-install,post-install\"\n```\n\n----------------------------------------\n\nTITLE: Automating Helm Deployment with Bash Script\nDESCRIPTION: A Bash script that automates the deployment of Helm charts, including packaging, repository updates, and deployment commands. It handles prerequisites like Helm installation checks and provides configurable parameters for chart versioning and namespace.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/ignore/testdata/mast/b.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# Check if Helm is installed\nif ! command -v helm &> /dev/null\nthen\n    echo \"Helm could not be found, please install Helm.\"\n    exit 1\nfi\n\n# Define variables\necho \"Deploying Helm chart...\"\nCHART_NAME=\"my-app\"\nRELEASE_NAME=\"my-app-release\"\nNAMESPACE=\"default\"\nCHART_VERSION=\"==1.2.3\"\n\n# Package the Helm chart\nhelm package ./charts/$CHART_NAME\n\n# Upload chart to repository, if applicable\n# helm repo index ./charts\n\n# Deploy the Helm chart\nhelm upgrade --install $RELEASE_NAME ./charts/$CHART_NAME-$CHART_VERSION.tgz --namespace $NAMESPACE --create-namespace\n\necho \"Deployment complete.\"\n\n```\n\n----------------------------------------\n\nTITLE: LoadBalancer URL Generation - Helm Template & Shell\nDESCRIPTION: This snippet generates the application URL when the service type is LoadBalancer. It uses `kubectl` within the Helm template to retrieve the LoadBalancer IP.  It then constructs and echoes the application URL, combining the protocol, Service IP, and service port specified in `.Values.service.port`.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/chart-with-lib-dep/templates/NOTES.txt#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ template \"chart-with-lib-dep.fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc {{ template \"chart-with-lib-dep.fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterIP Service for Subcharta in Helm Chart\nDESCRIPTION: Creates a Kubernetes Service of type ClusterIP for subcharta with port 80 mapping to target port 80 using TCP protocol. Selects pods with the label 'app.kubernetes.io/name: subcharta'.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm-set.txt#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subcharta\n  labels:\n    helm.sh/chart: \"subcharta-0.1.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: apache\n  selector:\n    app.kubernetes.io/name: subcharta\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes ConfigMap for Helm Subchart with YAML\nDESCRIPTION: Defines a ConfigMap resource named 'subchart-cm' with a single key 'value' set to 'qux', allowing configuration injection into other resources. Requires no specific dependencies, and can be referenced by pods or other manifests. The input is the key-value data, and the output is a ConfigMap resource mounted or referenced in cluster workloads.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm-set-file.txt#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: subchart-cm\ndata:\n  value: qux\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterIP Service for Subchartb in Helm Chart\nDESCRIPTION: Creates a Kubernetes Service of type ClusterIP for subchartb with port 80 mapping to target port 80 using TCP protocol. Selects pods with the label 'app.kubernetes.io/name: subchartb'.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm-set.txt#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subchartb\n  labels:\n    helm.sh/chart: \"subchartb-0.1.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: nginx\n  selector:\n    app.kubernetes.io/name: subchartb\n```\n\n----------------------------------------\n\nTITLE: Helm Chart Template with Conditional Logic in YAML\nDESCRIPTION: A Helm template snippet written in YAML that uses conditional expressions for deploying resources based on user-provided values. It employs Helm template functions to include or exclude sections dynamically during deployment.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/ignore/testdata/mast/b.txt#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ include \"my-chart.fullname\" . }}\n  labels:\n    app.kubernetes.io/name: \"{{ include \"my-chart.name\" . }}\"\n\n{{- if .Values.enableFeatureX }}\napiVersion: v1\nkind: Deployment\nmetadata:\n  name: {{ include \"my-chart.fullname\" . }}-featurex\n  labels:\n    app.kubernetes.io/name: \"{{ include \"my-chart.name\" . }}\"\nspec:\n  replicas: {{ .Values.replicaCount }}\n  template:\n    spec:\n      containers:\n        - name: featurex\n          image: \"{{ .Values.featureX.image }}\"\n{{- end }}\n\n```\n\n----------------------------------------\n\nTITLE: Output of common.chartref Template\nDESCRIPTION: Shows the resulting YAML output from the common.chartref template, demonstrating how special characters in version strings are sanitized for Kubernetes labels.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nchartref: foo-1.2.3-beta.55_1234\n```\n\n----------------------------------------\n\nTITLE: Defining a RoleBinding for 'subchart' in Kubernetes (YAML)\nDESCRIPTION: This manifest defines a Kubernetes RoleBinding named 'subchart-binding'. It binds the 'subchart-role' Role to the 'subchart-sa' ServiceAccount within the 'default' namespace, granting the service account the permissions defined in the role. It originates from the 'subchart/templates/subdir/rolebinding.yaml' Helm template.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template.txt#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: subchart-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: subchart-role\nsubjects:\n- kind: ServiceAccount\n  name: subchart-sa\n  namespace: default\n```\n\n----------------------------------------\n\nTITLE: NodePort URL Generation - Helm Template & Shell\nDESCRIPTION: This snippet generates the application URL when the service type is NodePort. It uses `kubectl` commands within the Helm template to retrieve the NodePort and Node IP.  It then constructs and echoes the application URL, combining the protocol, Node IP, and NodePort.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/chart-with-lib-dep/templates/NOTES.txt#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ template \"chart-with-lib-dep.fullname\" . }})\n  export NODE_IP=$(kubectl get nodes -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Main ClusterIP Service in Helm Subchart\nDESCRIPTION: Creates the main Kubernetes Service for the subchart with additional labels indicating the Kubernetes version. The service is of type ClusterIP with port 80 for nginx.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm-set.txt#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: subchart\n  labels:\n    helm.sh/chart: \"subchart-0.1.0\"\n    app.kubernetes.io/instance: \"release-name\"\n    kube-version/major: \"1\"\n    kube-version/minor: \"20\"\n    kube-version/version: \"v1.20.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: nginx\n  selector:\n    app.kubernetes.io/name: subchart\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes ServiceAccount (YAML)\nDESCRIPTION: This snippet defines a standard Kubernetes ServiceAccount named `subchart-sa`. Service accounts provide an identity for processes that run in pods, essential for interacting with the Kubernetes API. This specific account is likely intended for use by components deployed within the `subchart` for fine-grained access control.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-with-kube-version.txt#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: subchart-sa\n```\n\n----------------------------------------\n\nTITLE: Defining Test Pod for Helm Chart Verification\nDESCRIPTION: Creates a test Pod that will be executed when running 'helm test'. The Pod uses the alpine image and reads the message from the test ConfigMap, then echoes it as a basic test.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm-set.txt#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: \"release-name-test\"\n  annotations:\n    \"helm.sh/hook\": test\nspec:\n  containers:\n    - name: test\n      image: \"alpine:latest\"\n      envFrom:\n        - configMapRef:\n            name: \"release-name-testconfig\"\n      command:\n        - echo\n        - \"$message\"\n  restartPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes ServiceAccount via Helm YAML Template - YAML\nDESCRIPTION: This snippet creates a ServiceAccount named \"subchart-sa\" for use by workloads in the cluster, as specified in a Helm chart template. It requires no external dependencies and is typically used as an identity for pods needing specific permissions. It expects deployment into a namespace defined by the chart, and outputs a standard v1 ServiceAccount object.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-set.txt#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: subchart-sa\n```\n\n----------------------------------------\n\nTITLE: Defining a Service for subcharta in Kubernetes using YAML\nDESCRIPTION: Defines a Kubernetes Service named 'subcharta'.  It exposes port 80 as 'apache', targeting port 80 with TCP protocol.  The selector 'app.kubernetes.io/name: subcharta' routes traffic to pods with that label.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm.txt#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n---\n# Source: subchart/charts/subcharta/templates/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: subcharta\n  labels:\n    helm.sh/chart: \"subcharta-0.1.0\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n    name: apache\n  selector:\n    app.kubernetes.io/name: subcharta\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Deployment in Helm Templates\nDESCRIPTION: A Kubernetes Deployment manifest named 'fourth' that creates a single replica of a hello-world container. This deployment is intentionally placed after NetworkPolicy objects to demonstrate Helm's installation ordering.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/object-order.txt#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: object-order/templates/01-a.yml\n# 4 (Deployment should come after all NetworkPolicy manifests, since 'helm template' outputs in install order)\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: fourth\nspec:\n  selector:\n    matchLabels:\n      pod: fourth\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        pod: fourth\n    spec:\n      containers:\n        - name: hello-world\n          image: gcr.io/google-samples/node-hello:1.0\n```\n\n----------------------------------------\n\nTITLE: Defining Helm Build Information Structure in Go\nDESCRIPTION: This code defines a Go structure 'BuildInfo' to encapsulate Helm's version details, such as version number, Git commit ID, Git tree state, and Go language version. It serves as a data model for storing build-related metadata, essential for version management and debugging within Helm's codebase.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/version-client.txt#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype BuildInfo struct {\n    Version string\n    GitCommit string\n    GitTreeState string\n    GoVersion string\n}\n```\n\n----------------------------------------\n\nTITLE: Error: Missing Arguments for Helm Install - Shell\nDESCRIPTION: This snippet shows the specific error message returned by the Helm CLI when the `install` command is executed without providing the required arguments. It clearly states that at least one argument (typically the chart reference) is mandatory.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/install-no-args.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nError: \"helm install\" requires at least 1 argument\n```\n\n----------------------------------------\n\nTITLE: Defining an RBAC Role for Pod Access in Kubernetes\nDESCRIPTION: Creates a Role named 'subchart-role' granting 'get', 'list', and 'watch' permissions on pods within the namespace. Requires RBAC API server access and permissions to bind roles to subjects.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-values-files.txt#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: subchart/templates/subdir/role.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: subchart-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\",\"list\",\"watch\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Helm BuildInfo Metadata in Go\nDESCRIPTION: This Go code snippet creates a BuildInfo struct to hold version metadata for a Helm build. It requires the 'version' package with a defined BuildInfo struct, and sets fields such as Version, GitCommit, GitTreeState, and GoVersion. Inputs include build metadata strings, while output is a populated struct for use in version reporting.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/version.txt#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nversion.BuildInfo{Version:\"v4.0\", GitCommit:\"\", GitTreeState:\"\", GoVersion:\"\"}\n```\n\n----------------------------------------\n\nTITLE: Defining a Helm Hook with NetworkPolicy\nDESCRIPTION: A NetworkPolicy object annotated with a Helm pre-install hook. This demonstrates how Helm outputs hook manifests last, showing implementation details of Helm's template rendering order.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/object-order.txt#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: object-order/templates/02-b.yml\n# 6 (implementation detail: currently, 'helm template' outputs hook manifests last; and yes, NetworkPolicy won't make a reasonable hook, this is just a dummy unit test manifest)\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  annotations:\n    \"helm.sh/hook\": pre-install\n  name: sixth\nspec:\n  podSelector: {}\n  policyTypes:\n    - Egress\n    - Ingress\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes ConfigMap for Helm Test Hook - YAML\nDESCRIPTION: Defines a ConfigMap named \"foobar-ywjj-baz-testconfig\" annotated with a Helm test hook. It contains a simple key-value pair with a message. This ConfigMap is intended to provide configuration data to test Pods during Helm chart testing phases.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-name-template.txt#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: \"foobar-ywjj-baz-testconfig\"\n  annotations:\n    \"helm.sh/hook\": test\ndata:\n  message: Hello World\n```\n\n----------------------------------------\n\nTITLE: Get Application URL with Ingress - Helm Template\nDESCRIPTION: This snippet retrieves the application URL when Ingress is enabled. It iterates through the ingress hosts defined in the `values.yaml` file and constructs the URL based on whether TLS is enabled or not, including the specified ingress path.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/chart-with-template-lib-dep/templates/NOTES.txt#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range .Values.ingress.hosts }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ . }}{{ $.Values.ingress.path }}\n{{- end }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Helm Chart Deployment YAML Configuration\nDESCRIPTION: Defines a Helm values YAML file used to set custom parameters for deploying a Kubernetes application. It specifies image details, replica counts, resource limits, and environment variables for the app container.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/ignore/testdata/cargo/a.txt#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nreplicaCount: 3\nimage:\n  repository: my-app\n  tag: latest\nresources:\n  limits:\n    cpu: 500m\n    memory: 256Mi\n  requests:\n    cpu: 250m\n    memory: 128Mi\nenv:\n  - name: ENVIRONMENT\n    value: production\n```\n\n----------------------------------------\n\nTITLE: Defining Sequential NetworkPolicy Objects in Helm Templates\nDESCRIPTION: A series of NetworkPolicy objects with sequential naming that demonstrate manifest ordering within Helm templates. Each policy has empty pod selectors and configures both Egress and Ingress policy types.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/object-order.txt#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: object-order/templates/01-a.yml\n# 1\nkind: NetworkPolicy\napiVersion: networking.k8s.io/v1\nmetadata:\n  name: first\nspec:\n  podSelector: {}\n  policyTypes:\n    - Egress\n    - Ingress\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: object-order/templates/01-a.yml\n# 2\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: second\nspec:\n  podSelector: {}\n  policyTypes:\n    - Egress\n    - Ingress\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: object-order/templates/01-a.yml\n# 3\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: third\nspec:\n  podSelector: {}\n  policyTypes:\n    - Egress\n    - Ingress\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes ConfigMap (YAML)\nDESCRIPTION: Defines a standard Kubernetes ConfigMap resource named `test-configmap`. This resource is used to store configuration data as key-value pairs, specifically containing `foo: bar` in its `data` field. It is intended for deployment on a Kubernetes cluster.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/install-dry-run-with-secret-hidden.txt#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: test-configmap\ndata:\n  foo: bar\n```\n\n----------------------------------------\n\nTITLE: Creating a RoleBinding for Role Assignment in Kubernetes\nDESCRIPTION: Binds the 'subchart-role' Role to the 'subchart-sa' ServiceAccount, enabling assigned permissions. Requires RBAC and correct namespace context.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-values-files.txt#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: subchart/templates/subdir/rolebinding.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: subchart-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: subchart-role\nsubjects:\n- kind: ServiceAccount\n  name: subchart-sa\n  namespace: default\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Kubernetes Secret in YAML\nDESCRIPTION: This YAML snippet defines a Kubernetes Secret resource. It specifies `apiVersion: v1` and `kind: Secret`, and sets the `metadata.name` to `fixture`. This represents a minimal structure for a Secret object, often used as a template or placeholder in systems like Helm.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/get-manifest.txt#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: fixture\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes Role for Pod Access in Helm Subchart\nDESCRIPTION: Creates a Kubernetes Role named 'subchart-role' with permissions to get, list, and watch pods. This RBAC resource is defined within a Helm subchart template located in a subdirectory.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-show-only-glob.txt#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: subchart-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\",\"list\",\"watch\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a ServiceAccount in Kubernetes\nDESCRIPTION: Defines a ServiceAccount named 'subchart-sa' used for identity management within the cluster, essential for pods requiring specific permissions. Dependencies include the Kubernetes API and RBAC permissions.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-values-files.txt#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: subchart/templates/subdir/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: subchart-sa\n```\n\n----------------------------------------\n\nTITLE: values.yaml example for common.container\nDESCRIPTION: This `values.yaml` example sets the image repository, tag, pull policy and resource limits/requests for the container defined using `common.container` template.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/chart-with-template-lib-dep/charts/common/README.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  repository: nginx\n  tag: stable\n  pullPolicy: IfNotPresent\nresources:\n  limits:\n    cpu: 100m\n    memory: 128Mi\n  requests:\n    cpu: 100m\n    memory: 128Mi\n```\n\n----------------------------------------\n\nTITLE: Example Git Log Output\nDESCRIPTION: This is an example of the git log output after a commit has been signed off. The Author and Signed-off-by lines must match for the DCO check to pass.\nSOURCE: https://github.com/helm/helm/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nAuthor: Joe Smith <joe.smith@example.com>\nDate:   Thu Feb 2 11:41:15 2018 -0800\n\n    Update README\n\n    Signed-off-by: Joe Smith <joe.smith@example.com>\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Secret Resource Definition in YAML\nDESCRIPTION: A Kubernetes Secret resource named 'test-secret' with stringData containing a key-value pair of 'foo: bar'. This is part of the 'chart-with-secret' Helm chart template.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/install-dry-run-with-secret.txt#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: chart-with-secret/templates/secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: test-secret\nstringData:\n  foo: bar\n```\n\n----------------------------------------\n\nTITLE: Creating a Helm Test ConfigMap with Hook Annotation\nDESCRIPTION: Defines a ConfigMap named 'release-name-testconfig' containing a message, decorated with 'helm.sh/hook: test' annotation to trigger during testing phases.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-values-files.txt#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: subchart/templates/tests/test-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: \"release-name-testconfig\"\n  annotations:\n    \"helm.sh/hook\": test\ndata:\n  message: Hello World\n```\n\n----------------------------------------\n\nTITLE: Installing Local Helm Chart (Shell)\nDESCRIPTION: This command deploys the Helm chart located at the specified local path './alpine' to the configured Kubernetes cluster. Helm processes the chart's templates using default or provided values and creates the corresponding Kubernetes resources.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/chart/v2/util/testdata/frobnitz/charts/alpine/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm install ./alpine\n```\n\n----------------------------------------\n\nTITLE: Viewing Helm Deployment Status in plaintext\nDESCRIPTION: Output from a Helm deployment command showing the status and metadata of a deployed chart. The output includes the release name, deployment timestamp, namespace, deployment status, revision number, and completion description.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/install-with-values-file.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME: virgil\nLAST DEPLOYED: Fri Sep  2 22:04:05 1977\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nDESCRIPTION: Install complete\nTEST SUITE: None\n```\n\n----------------------------------------\n\nTITLE: Setting Up RBAC Role for Pod Access in Helm Subchart\nDESCRIPTION: Defines a Kubernetes RBAC Role named 'subchart-role' that grants get, list, and watch permissions for pod resources.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm-set.txt#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: subchart-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\",\"list\",\"watch\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Test ConfigMap for Helm Tests\nDESCRIPTION: Defines a ConfigMap for Helm tests with a 'test' hook annotation. This ConfigMap contains a simple message that will be used in the test Pod.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/template-subchart-cm-set.txt#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: \"release-name-testconfig\"\n  annotations:\n    \"helm.sh/hook\": test\ndata:\n  message: Hello World\n```\n\n----------------------------------------\n\nTITLE: Deploy Helm Chart Using Helm CLI\nDESCRIPTION: Shell command to deploy a Helm chart with specific release name and namespace. It automates deployment of Kubernetes resources defined in the Helm chart, enabling scalable application rollout.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/ignore/testdata/cargo/a.txt#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nhelm install my-release my-repo/my-chart --namespace my-namespace --values values.yaml\n```\n\n----------------------------------------\n\nTITLE: Running a MariaDB client pod in Kubernetes\nDESCRIPTION: Command to start a temporary pod with MariaDB client tools to connect to the database. This creates an interactive bash session in the pod.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/action/testdata/charts/chart-with-uncompressed-dependencies/charts/mariadb/templates/NOTES.txt#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl run {{ template \"mariadb.fullname\" . }}-client --rm --tty -i --image  {{ template \"mariadb.image\" . }} --namespace {{ .Release.Namespace }} --command -- bash\n```\n\n----------------------------------------\n\nTITLE: Installing MariaDB Helm Chart (Quick Start)\nDESCRIPTION: Installs the stable/mariadb Helm chart using default configuration values and an automatically generated release name. This is the simplest way to quickly deploy MariaDB.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/action/testdata/charts/chart-with-uncompressed-dependencies/charts/mariadb/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ helm install stable/mariadb\n```\n\n----------------------------------------\n\nTITLE: Displaying Helm Release Status Information\nDESCRIPTION: This shows the output of a Helm command displaying information about a deployed release called 'virgil'. The release was successfully deployed to the default namespace in 1977.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/install-with-values.txt#_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nNAME: virgil\nLAST DEPLOYED: Fri Sep  2 22:04:05 1977\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nDESCRIPTION: Install complete\nTEST SUITE: None\n```\n\n----------------------------------------\n\nTITLE: Installing MariaDB Helm Chart with a Specific Name\nDESCRIPTION: Installs the stable/mariadb Helm chart with a specified release name 'my-release'. This allows for easier identification and management of the specific MariaDB deployment.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/action/testdata/charts/chart-with-uncompressed-dependencies/charts/mariadb/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ helm install --name my-release stable/mariadb\n```\n\n----------------------------------------\n\nTITLE: Using ShellCompDirectiveNoFileComp in Helm\nDESCRIPTION: This snippet shows the ShellCompDirectiveNoFileComp directive being used to indicate that file completion should be suppressed for a command in Helm's shell completion system.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/repo_list_comp.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfoo\nbar\nbaz\n:4\nCompletion ended with directive: ShellCompDirectiveNoFileComp\n```\n\n----------------------------------------\n\nTITLE: Helm Dependency Build Command in Shell\nDESCRIPTION: This code snippet suggests running the Helm CLI command 'helm dependency build' to fetch and update missing chart dependencies. It requires Helm to be installed and configured properly in the environment. The command helps restore required dependencies for a Helm chart by building them into the charts/ directory based on the Chart.yaml file.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/upgrade-with-missing-dependencies.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nhelm dependency build\n```\n\n----------------------------------------\n\nTITLE: Output of common.labels.standard Template\nDESCRIPTION: Shows the resulting YAML output from the common.labels.standard template, including the standard Kubernetes app labels.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/lib-chart/README.md#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\napp.kubernetes.io/name: labelizer\napp.kubernetes.io/managed-by: \"Tiller\"\napp.kubernetes.io/instance: \"release-name\"\nhelm.sh/chart: labelizer-0.1.0\n```\n\n----------------------------------------\n\nTITLE: Helm create command output for 'alpine' chart\nDESCRIPTION: The command `helm create alpine` generates a minimal Helm chart scaffold, including directory structure, sample template files for deploying a pod, and default configurations. This setup allows users to customize the deployment parameters via values.yaml.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/chart-with-template-with-invalid-yaml/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nhelm create alpine\n```\n\n----------------------------------------\n\nTITLE: Monitoring MariaDB deployment status in Kubernetes\nDESCRIPTION: Command to watch the deployment status of MariaDB pods in the specified namespace filtered by release name.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/action/testdata/charts/chart-with-uncompressed-dependencies/charts/mariadb/templates/NOTES.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -w --namespace {{ .Release.Namespace }} -l release={{ .Release.Name }}\n```\n\n----------------------------------------\n\nTITLE: Get Application URL with NodePort - Helm Template\nDESCRIPTION: This snippet retrieves the application URL when the service type is NodePort. It uses `kubectl` commands to get the NodePort and Node IP, then constructs and prints the URL. Requires kubectl to be installed and configured.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/testcharts/chart-with-template-lib-dep/templates/NOTES.txt#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ template \"chart-with-template-lib-dep.fullname\" . }})\n  export NODE_IP=$(kubectl get nodes -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Helm Upgrade Error for Non-existent Release\nDESCRIPTION: Error message shown when attempting to upgrade a Helm release that has never been deployed. The message indicates that the release named \"funny-bunny\" cannot be upgraded because it doesn't exist in the cluster.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/upgrade-with-bad-or-missing-existing-release.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nError: UPGRADE FAILED: \"funny-bunny\" has no deployed releases\n```\n\n----------------------------------------\n\nTITLE: Handling Helm plugin complete call in Shell\nDESCRIPTION: This snippet manages the completion callback for a Helm plugin, processing received arguments, detecting the call type, and determining whether to trigger file completion. It captures the plugin's response to shell completion requests and handles specific directives such as no file completion.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/plugin_args_comp.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nplugin.complete was called\nNamespace: default\nNum args received: 1\nArgs received:\n:4\nCompletion ended with directive: ShellCompDirectiveNoFileComp\n```\n\n----------------------------------------\n\nTITLE: Logging Helm Plugin Completion Call - Shell\nDESCRIPTION: This simple shell command is used to print a message indicating the execution point within a script or function handling Helm plugin shell completion. It serves as a basic marker or debug statement to confirm the entry into the completion logic.\nSOURCE: https://github.com/helm/helm/blob/main/pkg/cmd/testdata/output/plugin_echo_no_directive.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\necho plugin.complete was called\n```"
  }
]