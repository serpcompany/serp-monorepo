[
  {
    "owner": "ciscoheat",
    "repo": "sveltekit-flash-message",
    "content": "TITLE: Form Action with Flash Message Redirect\nDESCRIPTION: Server-side form action that processes a form submission and then redirects with a flash message. It demonstrates the typical pattern for showing success messages after form submissions.\nSOURCE: https://github.com/ciscoheat/sveltekit-flash-message/blob/master/README.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { redirect } from 'sveltekit-flash-message/server';\n\nexport const actions = {\n  default: async ({ request, locals, cookies }) => {\n    const form = await request.formData();\n\n    await api('POST', `/todos/${locals.userid}`, {\n      text: form.get('text')\n    });\n\n    redirect('/', { type: 'success', message: \"That's the entrepreneur spirit!\" }, cookies);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Flash Messages in Svelte Layout Component\nDESCRIPTION: Svelte component code that displays flash messages using the getFlash function. It conditionally renders messages with different styling based on the message type.\nSOURCE: https://github.com/ciscoheat/sveltekit-flash-message/blob/master/README.md#2025-04-08_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { getFlash } from 'sveltekit-flash-message';\n  import { page } from '$app/state';\n\n  const flash = getFlash(page);\n</script>\n\n{#if $flash}\n  {@const bg = $flash.type == 'success' ? '#3D9970' : '#FF4136'}\n  <div style:background-color={bg} class=\"flash\">{$flash.message}</div>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Existing Load Functions with loadFlash\nDESCRIPTION: Example of wrapping an existing load function with loadFlash to add flash message support while maintaining the original functionality.\nSOURCE: https://github.com/ciscoheat/sveltekit-flash-message/blob/master/README.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loadFlash } from 'sveltekit-flash-message/server';\n\nexport const load = loadFlash(async (event) => {\n  const data = { someOther: 'data' };\n  return data;\n});\n```\n\n----------------------------------------\n\nTITLE: Simple Load Function Integration for Flash Messages\nDESCRIPTION: Minimal setup for adding flash message support in a SvelteKit layout server file. This approach is ideal when no existing load functions are present.\nSOURCE: https://github.com/ciscoheat/sveltekit-flash-message/blob/master/README.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport { load } from 'sveltekit-flash-message/server';\n```\n\n----------------------------------------\n\nTITLE: Server Endpoint with Flash Message Redirect\nDESCRIPTION: SvelteKit server endpoint that redirects with a flash message. This pattern is useful for API-like endpoints that need to communicate results to the user interface.\nSOURCE: https://github.com/ciscoheat/sveltekit-flash-message/blob/master/README.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RequestEvent } from '@sveltejs/kit';\nimport { redirect } from 'sveltekit-flash-message/server';\n\nexport const POST = async ({ cookies }) => {\n  redirect('/', { type: 'success', message: 'Endpoint POST successful!' }, cookies);\n};\n```\n\n----------------------------------------\n\nTITLE: Toast Notification Integration with Flash Messages\nDESCRIPTION: Integration of flash messages with a toast notification system. This example uses Svelte's $effect to show toast notifications when flash messages are received and then clears them to prevent duplication.\nSOURCE: https://github.com/ciscoheat/sveltekit-flash-message/blob/master/README.md#2025-04-08_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFlash } from 'sveltekit-flash-message';\nimport { page } from '$app/state';\nimport toast, { Toaster } from 'svelte-french-toast';\n\nconst flash = getFlash(page);\n\n$effect(() => {\n  if (!$flash) return;\n\n  toast($flash.message, {\n    icon: $flash.type == 'success' ? '✅' : '❌'\n  });\n\n  // Clear the flash message to avoid double-toasting.\n  $flash = undefined;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Flash Messages Without Redirecting\nDESCRIPTION: Example of setting a flash message without performing a redirect, useful for displaying validation errors in forms when submission fails.\nSOURCE: https://github.com/ciscoheat/sveltekit-flash-message/blob/master/README.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fail } from '@sveltejs/kit';\nimport { setFlash } from 'sveltekit-flash-message/server';\n\nexport const actions = {\n  default: async ({ request, cookies }) => {\n    const form = await request.formData();\n\n    if (!form.get('text')) {\n      setFlash({ type: 'error', message: 'Please enter text.' }, cookies);\n      return fail(400);\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Client-Side Redirect with Flash Update\nDESCRIPTION: Code demonstrating how to handle redirects after fetch operations while ensuring flash messages are properly displayed. This is useful for client-side navigation after form submissions.\nSOURCE: https://github.com/ciscoheat/sveltekit-flash-message/blob/master/README.md#2025-04-08_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nasync function submitForm(e: Event) {\n  const response = await fetch(new URL('/logout', $page.url), { method: 'POST' });\n  if (response.redirected) {\n    await updateFlash(page, () => goto(response.url, { invalidateAll: true }));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Form Submission with Flash Update\nDESCRIPTION: Example of manually handling form submissions with fetch and updating the flash message afterward to ensure it displays correctly after client-side submissions.\nSOURCE: https://github.com/ciscoheat/sveltekit-flash-message/blob/master/README.md#2025-04-08_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { updateFlash } from 'sveltekit-flash-message';\n  import { page } from '$app/state';\n\n  async function submitForm(e: Event) {\n    const form = e.target as HTMLFormElement;\n    const body = new FormData(e.target as HTMLFormElement);\n\n    await fetch(form.action, { method: 'POST', body });\n    await updateFlash(page);\n  }\n</script>\n\n<form method=\"POST\" action=\"/test\" on:submit|preventDefault={submitForm}>\n  <input type=\"text\" name=\"test\" value=\"TEST\" />\n  <button>Submit with fetch</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Client-Side Flash Message Setting\nDESCRIPTION: Svelte component that demonstrates updating flash messages directly on the client side without server interaction, useful for temporary UI notifications.\nSOURCE: https://github.com/ciscoheat/sveltekit-flash-message/blob/master/README.md#2025-04-08_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { getFlash } from 'sveltekit-flash-message';\n  import { page } from '$app/state';\n\n  const flash = getFlash(page);\n\n  function showMessage() {\n    $flash = { type: 'success', message: 'Updated from other component!' };\n  }\n</script>\n\n<button on:click={showMessage}>Show flash message</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Flash Message Behavior with Options\nDESCRIPTION: Example of configuring flash message behavior using options such as automatic clearing and navigation handling. This provides control over how and when flash messages are displayed and removed.\nSOURCE: https://github.com/ciscoheat/sveltekit-flash-message/blob/master/README.md#2025-04-08_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst flash = getFlash(page, {\n  clearOnNavigate: true,\n  clearAfterMs: undefined,\n  clearArray: false,\n  flashCookieOptions: CookieSerializeOptions\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Flash Message Types in TypeScript\nDESCRIPTION: TypeScript configuration in app.d.ts to add flash message type to the PageData interface. This example defines a flash message with type and message properties.\nSOURCE: https://github.com/ciscoheat/sveltekit-flash-message/blob/master/README.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// See https://svelte.dev/docs/kit/types#app.d.ts\n// for information about these interfaces\ndeclare global {\n  namespace App {\n    // interface Error {}\n    // interface Locals {}\n    interface PageData {\n      flash?: { type: 'success' | 'error'; message: string };\n    }\n    // interface PageState {}\n    // interface Platform {}\n  }\n}\n\nexport {};\n```\n\n----------------------------------------\n\nTITLE: Installing sveltekit-flash-message with Package Managers\nDESCRIPTION: Installation commands for adding the sveltekit-flash-message library to your SvelteKit project using pnpm or npm.\nSOURCE: https://github.com/ciscoheat/sveltekit-flash-message/blob/master/README.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i -D sveltekit-flash-message\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D sveltekit-flash-message\n```\n\n----------------------------------------\n\nTITLE: Configuring Flash Cookie Options on Server in SvelteKit\nDESCRIPTION: Example of setting custom options for the flash cookie on the server side. This shows how to modify properties like sameSite before using loadFlash in a load function.\nSOURCE: https://github.com/ciscoheat/sveltekit-flash-message/blob/master/README.md#2025-04-08_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loadFlash, flashCookieOptions } from 'sveltekit-flash-message/server';\n\nflashCookieOptions.sameSite = 'lax';\n\nexport const load = loadFlash(async (event) => {\n  // ...load function...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Flash Cookie Options on Client in SvelteKit\nDESCRIPTION: Example of setting matching flash cookie options on the client side. This needs to be done in a top-level component to ensure consistency with server-side options.\nSOURCE: https://github.com/ciscoheat/sveltekit-flash-message/blob/master/README.md#2025-04-08_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { initFlash } from 'sveltekit-flash-message';\n\ninitFlash(page, {\n  flashCookieOptions: { sameSite: 'lax' }\n});\n```\n\n----------------------------------------\n\nTITLE: Default Flash Cookie Options in SvelteKit\nDESCRIPTION: The default configuration options for the flash cookie. These values are used unless overridden by custom settings. Note that changing httpOnly to true may break client-side functionality.\nSOURCE: https://github.com/ciscoheat/sveltekit-flash-message/blob/master/README.md#2025-04-08_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  path: '/',\n  maxAge: 120,\n  sameSite: 'strict',\n  httpOnly: false // Setting this to true will most likely break things client-side.\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Flash Options Without Displaying Messages\nDESCRIPTION: Example of using initFlash to set options for flash messages without actually displaying them in the current component. This is useful for configuring behavior for child routes.\nSOURCE: https://github.com/ciscoheat/sveltekit-flash-message/blob/master/README.md#2025-04-08_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { initFlash } from 'sveltekit-flash-message';\nimport { page } from '$app/state';\n\ninitFlash(page, {\n  clearAfterMs: 10000\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating from 0.x to 1.x in SvelteKit Flash Messages\nDESCRIPTION: Code diff showing the migration changes required when upgrading from version 0.x to 1.x. The main change is removing all calls to updateFlash in use:enhance directives.\nSOURCE: https://github.com/ciscoheat/sveltekit-flash-message/blob/master/README.md#2025-04-08_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n<form\n    method=\"POST\"\n-   use:enhance={() =>\n-     ({ update }) =>\n-       updateFlash(page, update)}\n+   use:enhance\n>\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Format follows Keep a Changelog conventions with version numbers, dates, and categorized changes under Added, Changed, Deprecated, Removed, Fixed, and Security headings.\nSOURCE: https://github.com/ciscoheat/sveltekit-flash-message/blob/master/CHANGELOG.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\nHeadlines: Added, Changed, Deprecated, Removed, Fixed, Security\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n```"
  }
]