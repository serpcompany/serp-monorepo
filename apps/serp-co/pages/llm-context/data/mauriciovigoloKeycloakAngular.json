[
  {
    "owner": "mauriciovigolo",
    "repo": "keycloak-angular",
    "content": "TITLE: Implementing a Custom AuthGuard with Keycloak Angular\nDESCRIPTION: Illustrates how to create a custom route guard (`AuthGuard`) by extending the `KeycloakAuthGuard` class provided by `keycloak-angular`. The `isAccessAllowed` method is implemented to check if the user is authenticated (forcing login if not) and verifies if the user possesses the roles required by the route, which are passed via the route's `data` property.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/ngmodule.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { KeycloakAuthGuard, KeycloakService } from 'keycloak-angular';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard extends KeycloakAuthGuard {\n  constructor(\n    protected readonly router: Router,\n    protected readonly keycloak: KeycloakService\n  ) {\n    super(router, keycloak);\n  }\n\n  public async isAccessAllowed(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    // Force the user to log in if currently unauthenticated.\n    if (!this.authenticated) {\n      await this.keycloak.login({\n        redirectUri: window.location.origin + state.url\n      });\n    }\n\n    // Get the roles required from the route.\n    const requiredRoles = route.data.roles;\n\n    // Allow the user to proceed if no additional roles are required to access the route.\n    if (!Array.isArray(requiredRoles) || requiredRoles.length === 0) {\n      return true;\n    }\n\n    // Allow the user to proceed if all the required roles are present.\n    return requiredRoles.every((role) => this.roles.includes(role));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Angular Route Guard with Role Check (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a custom Angular route guard using the new createAuthGuard function from keycloak-angular. The isAccessAllowed function checks if the user is authenticated and possesses a required role specified in the route's data. It uses Angular's inject to get the Router service for potential redirection via UrlTree. Required dependencies include Angular routing and core modules, and keycloak-angular.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/migration-guides/v19.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { inject } from '@angular/core';\nimport { createAuthGuard, AuthGuardData } from 'keycloak-angular';\n\nconst isAccessAllowed = async (\n  route: ActivatedRouteSnapshot,\n  _: RouterStateSnapshot,\n  authData: AuthGuardData\n): Promise<boolean | UrlTree> => {\n  const { authenticated, grantedRoles } = authData;\n\n  const requiredRole = route.data['role'];\n  if (!requiredRole) {\n    return false;\n  }\n\n  const hasRequiredRole = (role: string): boolean =>\n    Object.values(grantedRoles.resourceRoles).some((roles) => roles.includes(role));\n\n  if (authenticated && hasRequiredRole(requiredRole)) {\n    return true;\n  }\n\n  const router = inject(Router);\n  return router.parseUrl('/forbidden');\n};\n\nexport const canActivateAuthRole = createAuthGuard<CanActivateFn>(isAccessAllowed);\n```\n\n----------------------------------------\n\nTITLE: Creating a Role-Based Auth Guard with Keycloak Angular in TypeScript\nDESCRIPTION: Defines a custom Angular route guard `canActivateAuthRole` using `createAuthGuard` from `keycloak-angular`. This guard checks if a user is authenticated and possesses a specific role required by the route, defined in `route.data['role']`. If the user lacks the required role or is not authenticated, they are redirected to the '/forbidden' route.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/README.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ActivatedRouteSnapshot, CanActivateFn, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { inject } from '@angular/core';\nimport { AuthGuardData, createAuthGuard } from 'keycloak-angular';\n\nconst isAccessAllowed = async (\n  route: ActivatedRouteSnapshot,\n  _: RouterStateSnapshot,\n  authData: AuthGuardData\n): Promise<boolean | UrlTree> => {\n  const { authenticated, grantedRoles } = authData;\n\n  const requiredRole = route.data['role'];\n  if (!requiredRole) {\n    return false;\n  }\n\n  const hasRequiredRole = (role: string): boolean =>\n    Object.values(grantedRoles.resourceRoles).some((roles) => roles.includes(role));\n\n  if (authenticated && hasRequiredRole(requiredRole)) {\n    return true;\n  }\n\n  const router = inject(Router);\n  return router.parseUrl('/forbidden');\n};\n\nexport const canActivateAuthRole = createAuthGuard<CanActivateFn>(isAccessAllowed);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Bearer Token Interceptor using Dynamic Condition (TypeScript)\nDESCRIPTION: Shows how to set up Keycloak-Angular's Custom Bearer Token Interceptor with a condition that dynamically determines token inclusion via the 'shouldAddToken' function. The custom async function restricts token addition to requests whose URLs start with '/secure' and where the Keycloak user is authenticated. Requires Angular's provider system, HttpClient, and Keycloak-Angular modules. Inputs are the HTTP request and Keycloak state. Output is secure, context-sensitive authentication of HTTP requests.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/interceptors.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApplicationConfig, provideHttpClient, withInterceptors } from '@angular/core';\nimport { CUSTOM_BEARER_TOKEN_INTERCEPTOR_CONFIG, customBearerTokenInterceptor } from './keycloak.interceptor';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withInterceptors([customBearerTokenInterceptor])),\n    {\n      provide: CUSTOM_BEARER_TOKEN_INTERCEPTOR_CONFIG,\n      useValue: [\n        {\n          shouldAddToken: async (req, _, keycloak) => {\n            return req.url.startsWith('/secure') && keycloak.authenticated;\n          }\n        }\n      ]\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Realm Roles with kaHasRoles\nDESCRIPTION: This example demonstrates how to use the `*kaHasRoles` directive to display content only if the user has the `admin` or `editor` role at the realm level.  The `kaHasRolesCheckRealm` input is set to `true` to specify that the roles should be checked at the realm level.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/directives.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div *kaHasRoles=\"['admin', 'editor']; kaHasRolesCheckRealm: true\">\n  <p>This content is visible to users with 'admin' or 'editor' realm roles.</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Checking Resource Roles with kaHasRoles\nDESCRIPTION: This example demonstrates how to use the `*kaHasRoles` directive to display content only if the user has the `read` or `write` role for the `my-client` resource. The `kaHasRolesResource` input is used to specify the resource (client ID) to validate roles against.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/directives.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div *kaHasRoles=\"['read', 'write']; kaHasRolesResource: 'my-client'\">\n  <p>This content is visible to users with 'read' or 'write' roles for 'my-client'.</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak HttpClient Interceptor in Angular TypeScript\nDESCRIPTION: Illustrates setting up the Keycloak HttpClient interceptor in an Angular application's configuration (`appConfig`). It uses `provideHttpClient` with `withInterceptors` and configures the `INCLUDE_BEARER_TOKEN_INTERCEPTOR_CONFIG` provider with a condition (`urlCondition`) created by `createInterceptorCondition`. This ensures the Bearer token is automatically added only to requests matching the specified URL pattern ('http://localhost:8181').\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/README.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { provideRouter } from '@angular/router';\nimport { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';\nimport { provideHttpClient, withInterceptors } from '@angular/common/http';\nimport {\n  provideKeycloak,\n  createInterceptorCondition,\n  IncludeBearerTokenCondition,\n  INCLUDE_BEARER_TOKEN_INTERCEPTOR_CONFIG,\n  includeBearerTokenInterceptor // Added missing import\n} from 'keycloak-angular';\n\nimport { routes } from './app.routes';\n\nconst urlCondition = createInterceptorCondition<IncludeBearerTokenCondition>({\n  urlPattern: /^(http:\\/\\/localhost:8181)(\\/.*)?$/i,\n  bearerPrefix: 'Bearer'\n});\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideKeycloak({\n      config: {\n        url: 'keycloak-server-url',\n        realm: 'realm-id',\n        clientId: 'client-id'\n      },\n      initOptions: {\n        onLoad: 'check-sso',\n        silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html'\n      }\n    }),\n    {\n      provide: INCLUDE_BEARER_TOKEN_INTERCEPTOR_CONFIG,\n      useValue: [urlCondition] // <-- Note that multiple conditions might be added.\n    },\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes),\n    provideHttpClient(withInterceptors([includeBearerTokenInterceptor]))\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Keycloak Events with Signals in Angular (TypeScript)\nDESCRIPTION: Explains how to react to Keycloak authentication events within an Angular component using the `KEYCLOAK_EVENT_SIGNAL`. The signal is injected, and an Angular `effect` is used to listen for event changes. The component updates its `authenticated` status based on `KeycloakEventType.Ready` and `KeycloakEventType.AuthLogout` events.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/README.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.css']\n})\nexport class MenuComponent {\n  authenticated = false;\n\n  constructor(private readonly keycloak: Keycloak) { // Assuming KeycloakService is injected as 'Keycloak'\n    const keycloakSignal = inject(KEYCLOAK_EVENT_SIGNAL);\n\n    effect(() => {\n      const keycloakEvent = keycloakSignal();\n\n      if (keycloakEvent.type === KeycloakEventType.Ready) {\n        // Assuming typeEventArgs correctly extracts boolean from ReadyArgs\n        this.authenticated = typeEventArgs<ReadyArgs>(keycloakEvent.args); \n      }\n\n      if (keycloakEvent.type === KeycloakEventType.AuthLogout) {\n        this.authenticated = false;\n      }\n    });\n  }\n}\n// Note: Keycloak, KEYCLOAK_EVENT_SIGNAL, effect, KeycloakEventType, \n// typeEventArgs, and ReadyArgs need to be imported from appropriate libraries.\n```\n\n----------------------------------------\n\nTITLE: Handling Keycloak Events with Angular Signals (TypeScript)\nDESCRIPTION: This example shows how to consume Keycloak events using Angular Signals within an Angular component. It injects the KEYCLOAK_EVENT_SIGNAL and uses an Angular effect to react declaratively to changes in the signal. The effect updates the component's authenticated state based on specific Keycloak event types like Ready and AuthLogout, utilizing typeEventArgs for type safety. This requires Angular core modules and keycloak-angular.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/migration-guides/v19.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, effect, inject } from '@angular/core';\nimport { KEYCLOAK_EVENT_SIGNAL, KeycloakEventType, typeEventArgs, ReadyArgs } from 'keycloak-angular';\n\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.css']\n})\nexport class MenuComponent {\n  authenticated = false;\n  private readonly keycloakSignal = inject(KEYCLOAK_EVENT_SIGNAL);\n\n  constructor() {\n    effect(() => {\n      const keycloakEvent = this.keycloakSignal();\n\n      if (keycloakEvent.type === KeycloakEventType.Ready) {\n        this.authenticated = typeEventArgs<ReadyArgs>(keycloakEvent.args);\n      }\n\n      if (keycloakEvent.type === KeycloakEventType.AuthLogout) {\n        this.authenticated = false;\n      }\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Realm and Resource Role Checks with kaHasRoles\nDESCRIPTION: This example demonstrates how to combine realm and resource role checks using the `*kaHasRoles` directive. The content will be displayed if the user has the 'admin' role in the realm or the 'write' role in the 'my-client' resource. The `kaHasRolesCheckRealm` input is set to `true` to enable realm role checking.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/directives.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n<div *kaHasRoles=\"['admin', 'write']; kaHasRolesResource: 'my-client'; kaHasRolesCheckRealm: true\">\n  <p>This content is visible to users with 'admin' in the realm or 'write' in 'my-client'.</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Token Refresh in Keycloak-Angular (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to enable the `withAutoRefreshToken` feature in a Keycloak-Angular application.  It configures the session timeout to 10 minutes and sets the `onInactivityTimeout` action to `'logout'`. It requires `AutoRefreshTokenService` and `UserActivityService` to be provided.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/features.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { provideKeycloak, withAutoRefreshToken, AutoRefreshTokenService, UserActivityService } from 'keycloak-angular';\nimport { ApplicationConfig } from '@angular/core';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideKeycloak({\n      config: {\n        url: 'https://auth-server.example.com',\n        realm: 'my-realm',\n        clientId: 'my-client'\n      },\n      initOptions: {\n        onLoad: 'check-sso',\n        silentCheckSsoRedirectUri: `${window.location.origin}/silent-check-sso.html`\n      },\n      features: [\n        withAutoRefreshToken({\n          sessionTimeout: 600000, // 10 minutes\n          onInactivityTimeout: 'logout'\n        })\n      ],\n      providers: [AutoRefreshTokenService, UserActivityService]\n    })\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Keycloak Configuration with provideKeycloak in Angular (TypeScript)\nDESCRIPTION: This example demonstrates setting up Keycloak at the root of an Angular application using provideKeycloak within the ApplicationConfig. It configures the Keycloak server URL, realm, clientId, and initialization behavior. The onLoad and silentCheckSsoRedirectUri parameters control login flow and SSO capabilities. Requires keycloak-angular and TypeScript setup with compatible Angular version.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/provide.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { provideKeycloak } from 'keycloak-angular';\nimport { ApplicationConfig } from '@angular/core';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideKeycloak({\n      config: {\n        url: 'https://auth-server.example.com',\n        realm: 'my-realm',\n        clientId: 'my-client'\n      },\n      initOptions: {\n        onLoad: 'login-required',\n        silentCheckSsoRedirectUri: `${window.location.origin}/silent-check-sso.html`\n      }\n    })\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Keycloak with provideKeycloak in Angular (TypeScript)\nDESCRIPTION: This snippet demonstrates how to initialize Keycloak at application startup using Angular's provideKeycloak function within the ApplicationConfig. It requires the keycloak-js client and keycloak-angular providers. Key parameters include the Keycloak server url, realm, and clientId, along with initOptions like onLoad and silentCheckSsoRedirectUri. Inputs are the configuration objects, and output is an app-wide initialization of Keycloak for authentication. Additional providers such as provideZoneChangeDetection and provideRouter are included for modular configuration. Requires Angular v16+ with standalone APIs and keycloak-angular v19 or newer.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/migration-guides/v19.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideKeycloak({\n      config: {\n        url: 'keycloak-server-url',\n        realm: 'realm-id',\n        clientId: 'client-id'\n      },\n      initOptions: {\n        onLoad: 'check-sso',\n        silentCheckSsoRedirectUri: `${window.location.origin}/silent-check-sso.html`\n      }\n    }),\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes)\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Keycloak Features with provideKeycloak and AutoRefreshToken in Angular (TypeScript)\nDESCRIPTION: This advanced example configures provideKeycloak with the withAutoRefreshToken feature, allowing automatic token refresh and session management. The features and providers arrays leverage modular Keycloak enhancements like AutoRefreshTokenService and UserActivityService. The sessionTimeout and onInactivityTimeout parameters handle session limits and inactivity. Prerequisites include installing keycloak-angular and configuring the relevant services.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/provide.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { provideKeycloak, withAutoRefreshToken, AutoRefreshTokenService, UserActivityService } from 'keycloak-angular';\n\nexport const appConfig = {\n  providers: [\n    provideKeycloak({\n      config: {\n        url: 'https://auth-server.example.com',\n        realm: 'my-realm',\n        clientId: 'my-client'\n      },\n      initOptions: {\n        onLoad: 'check-sso',\n        silentCheckSsoRedirectUri: `${window.location.origin}/silent-check-sso.html`\n      },\n      features: [\n        withAutoRefreshToken({\n          sessionTimeout: 300000, // 5 minutes\n          onInactivityTimeout: 'logout'\n        })\n      ],\n      providers: [AutoRefreshTokenService, UserActivityService]\n    })\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Bearer Token Interceptor via Angular Providers (TypeScript)\nDESCRIPTION: Illustrates configuring the Bearer Token Interceptor in Angular by providing 'INCLUDE_BEARER_TOKEN_INTERCEPTOR_CONFIG' with an array of IncludeBearerTokenCondition objects. Shows how to limit token addition to requests matching a specific URL pattern and certain HTTP methods using Angular's provider system. Requires Angular's HttpClient and Keycloak-Angular interceptor modules. Inputs include a regular expression for URL and supported HTTP methods. Output is a secure injection of tokens for configured requests only.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/interceptors.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { INCLUDE_BEARER_TOKEN_INTERCEPTOR_CONFIG, includeBearerTokenInterceptor } from './keycloak.interceptor';\nimport { ApplicationConfig, provideHttpClient, withInterceptors } from '@angular/core';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withInterceptors([includeBearerTokenInterceptor])),\n    {\n      provide: INCLUDE_BEARER_TOKEN_INTERCEPTOR_CONFIG,\n      useValue: [\n        {\n          urlPattern: /^https:\\/\\/api\\.myapp\\.com\\/.*$/,\n          httpMethods: ['GET', 'POST'] // Token added only for GET and POST\n        }\n      ]\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Bearer Token Interceptors Declaratively with Keycloak Angular (TypeScript)\nDESCRIPTION: This advanced configuration example shows how to set up a custom HTTP Interceptor to add Bearer tokens only to explicitly defined URLs using provideKeycloak and interceptor condition functions. Dependencies include keycloak-angular, keycloak-js, and Angular's standalone APIs (ApplicationConfig, provideRouter, provideHttpClient). The configuration enforces security by specifying valid URL patterns for Bearer token inclusion using INCLUDE_BEARER_TOKEN_INTERCEPTOR_CONFIG and a regular expression for localhost. Providers must be declared for both Keycloak and interceptor configurations. Inputs are the Keycloak connection and token rules; outputs are secure HTTP requests with Bearer authentication only to intended services. This pattern replaces deprecated ExcludeUrls and must be used for granular control in v19+.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/migration-guides/v19.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { provideKeycloak } from 'keycloak-angular';\nimport {\n  createInterceptorCondition,\n  INCLUDE_BEARER_TOKEN_INTERCEPTOR_CONFIG,\n  includeBearerTokenInterceptor\n} from 'keycloak-angular';\nimport { ApplicationConfig, provideRouter } from '@angular/router';\nimport { provideZoneChangeDetection, provideHttpClient, withInterceptors } from '@angular/core';\n\nconst localhostCondition = createInterceptorCondition<IncludeBearerTokenCondition>({\n  urlPattern: /^(http:\\/\\/localhost:8181)(\\/.*)?$/i // Match URLs starting with http://localhost:8181\n});\n\nexport const provideKeycloakAngular = () =>\n  provideKeycloak({\n    config: {\n      realm: 'keycloak-angular-sandbox',\n      url: 'http://localhost:8080',\n      clientId: 'keycloak-angular'\n    },\n    initOptions: {\n      onLoad: 'check-sso',\n      silentCheckSsoRedirectUri: `${window.location.origin}/silent-check-sso.html`,\n      redirectUri: window.location.origin + '/'\n    },\n    providers: [\n      {\n        provide: INCLUDE_BEARER_TOKEN_INTERCEPTOR_CONFIG,\n        useValue: [localhostCondition] // Specify conditions for adding the Bearer token\n      }\n    ]\n  });\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideKeycloakAngular(),\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes),\n    provideHttpClient(withInterceptors([includeBearerTokenInterceptor])) // Add the configured interceptor\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Fallback Content with kaHasRoles\nDESCRIPTION: This example demonstrates how to provide fallback content for users without the required roles using the `*kaHasRoles` directive.  If the user does not have the 'admin' role for the 'my-client' resource, the content in the `ng-template` with the `#noAccess` reference will be displayed.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/directives.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div *kaHasRoles=\"['admin']; kaHasRolesResource: 'my-client'\">\n  <p>Welcome, Admin!</p>\n</div>\n<ng-template #noAccess>\n  <p>Access Denied</p>\n</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Keycloak Events in Angular\nDESCRIPTION: Explains how to react to Keycloak lifecycle events within an Angular application by subscribing to the `keycloakEvents$` RxJS Subject exposed by the `KeycloakService`. The example shows how to listen for the `OnTokenExpired` event and trigger a token refresh using `keycloakService.updateToken()`.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/ngmodule.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KeycloakEventType, KeycloakService } from 'keycloak-angular';\n// Assuming keycloakService is an injected instance of KeycloakService\n\nkeycloakService.keycloakEvents$.subscribe({\n  next(event) {\n    if (event.type == KeycloakEventType.OnTokenExpired) {\n      keycloakService.updateToken(20);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Keycloak kaHasRoles Directive in an Angular Template (HTML)\nDESCRIPTION: Demonstrates applying the `*kaHasRoles` structural directive within an HTML template. The navigation link to '/books' is conditionally rendered only if the authenticated user possesses the 'view-books' role. If no specific resource is provided, the directive checks against roles associated with the application's client ID in Keycloak.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/README.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<nav class=\"menu\">\n  <div class=\"developer-status\"><strong>Keycloak Events:</strong> {{ keycloakStatus }}</div>\n\n  <div class=\"actions\">\n    <a routerLink=\"/\" class=\"action-item\">Home</a>\n    <a routerLink=\"/books\" class=\"action-item\" *kaHasRoles=\"['view-books']\">My Books</a>\n  </div>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak HttpClient Interceptor Exclusions\nDESCRIPTION: Shows how to customize the Keycloak initialization (`keycloak.init`) to prevent the HttpClient interceptor from adding the `Authorization: Bearer` header to certain requests. This example uses the `shouldAddToken` function to exclude GET requests targeting paths that include `/assets` or `/clients/public`.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/ngmodule.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nkeycloak.init({\n  config: {\n    url: 'http://localhost:8080',\n    realm: 'your-realm',\n    clientId: 'your-client-id'\n  },\n  initOptions: {\n    onLoad: 'check-sso',\n    silentCheckSsoRedirectUri: window.location.origin + '/assets/silent-check-sso.html'\n  },\n  shouldAddToken: (request) => {\n    const { method, url } = request;\n\n    const isGetRequest = 'GET' === method.toUpperCase();\n    const acceptablePaths = ['/assets', '/clients/public'];\n    const isAcceptablePathMatch = acceptablePaths.some((path) => url.includes(path));\n\n    return !(isGetRequest && isAcceptablePathMatch);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Controlling Keycloak Token Updates for Specific Requests\nDESCRIPTION: Demonstrates configuring Keycloak initialization to prevent automatic token updates for specific HTTP requests, useful for background polling. This is achieved by adding a custom header (e.g., `token-update: false`) to the outgoing request and implementing the `shouldUpdateToken` function in `keycloak.init` to check for this header's presence and value.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/ngmodule.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait keycloak.init({\n  config: {\n    url: 'http://localhost:8080',\n    realm: 'your-realm',\n    clientId: 'your-client-id'\n  },\n  initOptions: {\n    onLoad: 'check-sso',\n    silentCheckSsoRedirectUri: window.location.origin + '/assets/silent-check-sso.html'\n  },\n  bearerExcludedUrls: ['/assets', '/clients/public'],\n  shouldUpdateToken(request) {\n    return !request.headers.get('token-update') === 'false';\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Routes with Keycloak Auth Guard in TypeScript\nDESCRIPTION: Demonstrates how to apply the previously defined `canActivateAuthRole` guard to an Angular route configuration. The '/books' route is protected, requiring the user to have the 'view-books' role, which is specified in the `data` property of the route definition.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/README.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Routes } from '@angular/router';\n\nimport { HomeComponent } from './components/home/home.component';\nimport { BooksComponent } from './components/books/books.component';\nimport { canActivateAuthRole } from './guards/auth-role.guard';\n\nexport const routes: Routes = [\n  { path: '', component: HomeComponent },\n  {\n    path: 'books',\n    component: BooksComponent,\n    canActivate: [canActivateAuthRole],\n    data: { role: 'view-books' }\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Injecting and Using Keycloak Client Directly in Angular Components (TypeScript)\nDESCRIPTION: This Angular component example illustrates direct injection of the keycloak-js client using Angular's inject() function, eliminating the need for a service wrapper. The snippet shows usage in a MenuComponent with login and logout methods, requiring keycloak-js and Angular v16+. The Keycloak instance is accessed via inject(Keycloak), allowing direct authentication actions. There are no explicit inputs; outputs are authentication requests via the Keycloak client. This approach is recommended for future-proofing and maintainability.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/migration-guides/v19.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, inject } from '@angular/core';\nimport Keycloak from 'keycloak-js';\n\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.css']\n})\nexport class MenuComponent {\n  private readonly keycloak = inject(Keycloak);\n\n  login() {\n    this.keycloak.login();\n  }\n\n  logout() {\n    this.keycloak.logout();\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Keycloak in Angular\nDESCRIPTION: Demonstrates how to configure and initialize the Keycloak client within an Angular application using the `provideKeycloak` function in the `ApplicationConfig`. It configures Keycloak settings and initialization options, including silent SSO checks.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { provideRouter } from '@angular/router';\nimport { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';\nimport { provideKeycloak } from 'keycloak-angular';\n\nimport { routes } from './app.routes';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideKeycloak({\n      config: {\n        url: 'keycloak-server-url',\n        realm: 'realm-id',\n        clientId: 'client-id'\n      },\n      initOptions: {\n        onLoad: 'check-sso',\n        silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html'\n      }\n    }),\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes)\n  ]\n};\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Keycloak in Angular AppModule (NgModule)\nDESCRIPTION: Demonstrates how to initialize the Keycloak service during Angular application bootstrap using the `APP_INITIALIZER` provider within the `AppModule`. A factory function `initializeKeycloak` configures and initializes the `KeycloakService` with specific realm, client ID, URL, and initialization options like `onLoad` and `silentCheckSsoRedirectUri`.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/ngmodule.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { KeycloakAngularModule, KeycloakService } from 'keycloak-angular';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\nfunction initializeKeycloak(keycloak: KeycloakService) {\n  return () =>\n    keycloak.init({\n      config: {\n        url: 'http://localhost:8080',\n        realm: 'your-realm',\n        clientId: 'your-client-id'\n      },\n      initOptions: {\n        onLoad: 'check-sso',\n        silentCheckSsoRedirectUri: window.location.origin + '/assets/silent-check-sso.html'\n      }\n    });\n}\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [AppRoutingModule, BrowserModule, KeycloakAngularModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initializeKeycloak,\n      multi: true,\n      deps: [KeycloakService]\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Using withAutoRefreshToken feature in Keycloak\nDESCRIPTION: Demonstrates usage of the `withAutoRefreshToken` feature within the `provideKeycloak` configuration. This snippet shows how to configure automatic token refresh, including settings for inactivity timeouts and session timeouts, leveraging Keycloak Angular's features.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/README.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { provideKeycloak, withAutoRefreshToken, AutoRefreshTokenService, UserActivityService } from 'keycloak-angular';\n\nexport const provideKeycloakAngular = () =>\n  provideKeycloak({\n    config: {\n      url: 'keycloak-server-url',\n      realm: 'realm-id',\n      clientId: 'client-id'\n    },\n    initOptions: {\n      onLoad: 'check-sso',\n      silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html'\n    },\n    features: [\n      withAutoRefreshToken({\n        onInactivityTimeout: 'logout',\n        sessionTimeout: 60000\n      })\n    ],\n    providers: [AutoRefreshTokenService, UserActivityService]\n  });\n\nexport const appConfig: ApplicationConfig = {\n  providers: [provideKeycloakAngular(), provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining the CustomBearerTokenCondition Type for Keycloak-Angular (TypeScript)\nDESCRIPTION: Declares a TypeScript type alias 'CustomBearerTokenCondition' for use with Keycloak-Angular's Custom Bearer Token Interceptor. This type merges Base BearerTokenCondition properties with a mandatory 'shouldAddToken' async function for dynamic token-inclusion logic. Dependencies include Keycloak state and Angular's HTTP types. Input includes the request, next handler, and keycloak instance, and output is a promise resolving to a boolean to govern token attachment per request.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/interceptors.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype CustomBearerTokenCondition = Partial<BearerTokenCondition> & {\n  shouldAddToken: (req: HttpRequest<unknown>, next: HttpHandlerFn, keycloak: Keycloak) => Promise<boolean>; // Custom function to determine token inclusion\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the IncludeBearerTokenCondition Type for Keycloak-Angular (TypeScript)\nDESCRIPTION: Declares a TypeScript type alias 'IncludeBearerTokenCondition' for configuring the Bearer Token Interceptor in Keycloak-Angular. This type combines partial options from 'BearerTokenCondition' with a required 'urlPattern' (as RegExp) and optional array of HTTP methods. Dependencies include the definitions for 'BearerTokenCondition' and 'HttpMethod[]'. Inputs define URL patterns and supported methods, and outputs govern conditional authentication token inclusion. Used as part of the interceptor configuration.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/interceptors.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype IncludeBearerTokenCondition = Partial<BearerTokenCondition> & {\n  urlPattern: RegExp; // URL pattern to match\n  httpMethods?: HttpMethod[]; // Optional HTTP methods to match\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Keycloak HasRolesDirective in an Angular Component (TypeScript)\nDESCRIPTION: Shows how to make the `HasRolesDirective` from `keycloak-angular` available within a standalone Angular component (`MenuComponent`). The directive is added to the `imports` array of the `@Component` decorator, allowing its use in the component's template for conditional rendering based on user roles.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/README.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n@Component({\n  selector: 'app-menu',\n  imports: [RouterModule, HasRolesDirective],\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.css']\n})\nexport class MenuComponent {}\n```\n\n----------------------------------------\n\nTITLE: Declaring the BearerTokenCondition Type for Token Interceptor Configuration (TypeScript)\nDESCRIPTION: Defines the 'BearerTokenCondition' type used for configuration of Keycloak-Angular's HTTP interceptors. Provides optional parameters for customizing the bearer token prefix, authorization header name, and logic for determining if the token should be refreshed. Dependencies include Angular HTTP types and the application's token lifecycle. Input parameters allow advanced customization for how and when the Bearer token is attached, with outputs affecting authorization header formation and token refresh behavior.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/interceptors.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype BearerTokenCondition = {\n  bearerPrefix?: string; // Prefix for the token, default is \"Bearer\"\n  authorizationHeaderName?: string; // Header name, default is \"Authorization\"\n  shouldUpdateToken?: (req: HttpRequest<unknown>) => boolean; // Determines if the token should be refreshed\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ProvideKeycloakOptions Type for Keycloak Configuration in TypeScript\nDESCRIPTION: This snippet defines the ProvideKeycloakOptions TypeScript type used to strongly type the options passed to provideKeycloak. It specifies required and optional fields for Keycloak configuration, initialization options, additional Angular providers, and supported features. The type enables type-safe configuration and ensures required parameters are supplied during integration.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/provide.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type ProvideKeycloakOptions = {\n  config: KeycloakConfig; // Keycloak server configuration\n  initOptions?: KeycloakInitOptions; // Optional initialization options\n  providers?: Array<Provider | EnvironmentProviders>; // Additional Angular providers\n  features?: Array<KeycloakFeature>; // Array of Keycloak features\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting provideKeycloak Function Signature in TypeScript\nDESCRIPTION: This snippet defines the exported provideKeycloak function, which accepts ProvideKeycloakOptions and returns EnvironmentProviders for Angular dependency injection. The function is essential for bootstrapping Keycloak in Angular apps, and its parameters detail Keycloak configuration and Angular-specific options. Required dependencies include keycloak-angular and the configured Keycloak server.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/provide.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function provideKeycloak(options: ProvideKeycloakOptions): EnvironmentProviders;\n```\n\n----------------------------------------\n\nTITLE: Creating silent-check-sso.html file\nDESCRIPTION: Provides the HTML code for the `silent-check-sso.html` file, essential for silent SSO. This file is served from the application and handles communication with the Keycloak server in the background using an iframe.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/README.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n  <body>\n    <script>\n      parent.postMessage(location.href, location.origin);\n    </script>\n  </body>\n</html>\n\n```\n\n----------------------------------------\n\nTITLE: Creating Silent Check SSO HTML File for Keycloak\nDESCRIPTION: Provides the necessary HTML structure for the `silent-check-sso.html` file, typically placed in the `assets` directory. This file is used by Keycloak's silent `check-sso` mechanism, running in an iframe to communicate the authentication status back to the main application using `parent.postMessage`.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/docs/ngmodule.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n    <script>\n      parent.postMessage(location.href, location.origin);\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Keycloak and Keycloak-Angular\nDESCRIPTION: Installs the Keycloak Angular library and its peer dependency, the Keycloak client library. This command is executed in a terminal to add the necessary packages to the project.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install keycloak-angular keycloak-js\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Server using npm script - Bash\nDESCRIPTION: Runs an npm script command that starts the Keycloak server using Docker Compose based on the predefined setup. This command abstracts the underlying docker-compose execution to simplify bootstrapping the Keycloak environment. It requires a Docker-compatible container runtime installed and configured on the host system.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/projects/examples/docker/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve:keycloak\n```\n\n----------------------------------------\n\nTITLE: Running Angular Keycloak Showcase using npm Bash\nDESCRIPTION: Executes the pre-configured npm script specifically designed to launch the NgModule example showcase. This command typically starts the Keycloak server (often via Docker) and the Angular development server for the application.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/projects/examples/ngmodule/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run showcase:module\n```\n\n----------------------------------------\n\nTITLE: Starting Express Mock Server - Bash\nDESCRIPTION: This command executes an npm script named 'serve:mockserver' defined in the project's package.json file. It is the standard way to start the mock server application locally for development and testing purposes. The script typically invokes the Node.js runtime to run the Express server.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/projects/examples/mockserver/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run serve:mockserver\n```\n\n----------------------------------------\n\nTITLE: Cloning a Forked Repository - Shell\nDESCRIPTION: This shell command clones a forked repository from GitHub.  Replace `YOUR-USERNAME` with the actual GitHub username. This creates a local copy of the repository on the contributor's machine.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/YOUR-USERNAME/keycloak-angular.git\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies - Shell\nDESCRIPTION: This shell command installs the dependencies required for the project using npm. It reads the `package.json` file and installs all listed packages into the `node_modules` directory.\nSOURCE: https://github.com/mauriciovigolo/keycloak-angular/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```"
  }
]