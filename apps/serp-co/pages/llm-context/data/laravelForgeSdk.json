[
  {
    "owner": "laravel",
    "repo": "forge-sdk",
    "content": "TITLE: Initializing Forge SDK\nDESCRIPTION: This code initializes a new instance of the Forge SDK, requiring an API token for authentication. The token is essential for making requests to the Laravel Forge API.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$forge = new Laravel\\Forge\\Forge(TOKEN_HERE);\n```\n\n----------------------------------------\n\nTITLE: Creating a Server\nDESCRIPTION: This code creates a new server using the Forge API with specified parameters. The parameters define the server's provider, credentials, name, type, size, database, and region. ServerProviders, ServerTypes and InstallableServices enums/constants need to be defined for the code to work.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$server = $forge->createServer([\n    \"provider\"=> ServerProviders::DIGITAL_OCEAN,\n    \"credential_id\"=> 1,\n    \"name\"=> \"test-via-api\",\n    \"type\"=> ServerTypes::APP,\n    \"size\"=> \"01\",\n    \"database\"=> \"test123\",\n    \"database_type\" => InstallableServices::POSTGRES,\n    \"php_version\"=> InstallableServices::PHP_84,\n    \"region\"=> \"ams2\"\n]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Servers\nDESCRIPTION: This code retrieves a list of servers associated with the authenticated Forge account.  The method returns an array of Server objects, each containing information about a server managed by Forge.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$servers = $forge->servers();\n```\n\n----------------------------------------\n\nTITLE: Creating a Site\nDESCRIPTION: This code creates a new site on the specified server. It calls the createSite method with the server ID and an array of site parameters. By default, it waits for the site creation to complete (status installed).\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$forge->createSite(SERVER_ID, [SITE_PARAMETERS]);\n```\n\n----------------------------------------\n\nTITLE: Managing Servers (Multiple calls)\nDESCRIPTION: This section contains multiple calls to methods responsible for server management in Forge. Includes listing, retrieving, creating, updating, deleting, and rebooting servers, as well as managing server access.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$forge->servers();\n$forge->server($serverId);\n$forge->createServer(array $data);\n$forge->updateServer($serverId, array $data);\n$forge->deleteServer($serverId);\n$forge->rebootServer($serverId);\n\n// Server access\n$forge->revokeAccessToServer($serverId);\n$forge->reconnectToServer($serverId);\n$forge->reactivateToServer($serverId);\n```\n\n----------------------------------------\n\nTITLE: Managing Databases with Laravel Forge SDK (PHP)\nDESCRIPTION: These methods enable database management including listing, retrieving, creating, updating, and deleting databases. Additionally, you can sync databases and manage database users.  $databaseId and $userId identify a specific database and user, respectively.  $data is an array containing database/user details.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$forge->databases($serverId);\n$forge->database($serverId, $databaseId);\n$forge->createDatabase($serverId, array $data, $wait = true);\n$forge->updateDatabase($serverId, $databaseId, array $data);\n$forge->deleteDatabase($serverId, $databaseId);\n$forge->syncDatabases($serverId);\n\n// Users\n$forge->databaseUsers($serverId);\n$forge->databaseUser($serverId, $userId);\n$forge->createDatabaseUser($serverId, array $data, $wait = true);\n$forge->updateDatabaseUser($serverId, $userId, array $data);\n$forge->deleteDatabaseUser($serverId, $userId);\n```\n\n----------------------------------------\n\nTITLE: Managing Services (Multiple calls)\nDESCRIPTION: This section contains multiple calls to methods responsible for service management on a server in Forge (MySQL, Postgres, Nginx, Blackfire, Papertrail, OPCache). Includes actions like rebooting and stopping services, installing and removing features, and updating configurations.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// MySQL\n$forge->rebootMysql($serverId);\n$forge->stopMysql($serverId);\n\n// Postgres\n$forge->rebootPostgres($serverId);\n$forge->stopPostgres($serverId);\n\n// Nginx\n$forge->rebootNginx($serverId);\n$forge->stopNginx($serverId);\n$forge->siteNginxFile($serverId, $siteId);\n$forge->updateSiteNginxFile($serverId, $siteId, $content);\n\n// Blackfire\n$forge->installBlackfire($serverId, array $data);\n$forge->removeBlackfire($serverId);\n\n// Papertrail\n$forge->installPapertrail($serverId, array $data);\n$forge->removePapertrail($serverId);\n\n// OPCache\n$forge->enableOPCache($serverId);\n$forge->disableOPCache($serverId);\n```\n\n----------------------------------------\n\nTITLE: Managing Sites (Multiple calls)\nDESCRIPTION: This section demonstrates managing sites on a server, including listing sites, retrieving a specific site, creating a new site, updating a site, refreshing a site token, and deleting a site.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$forge->sites($serverId);\n$forge->site($serverId, $siteId);\n$forge->createSite($serverId, array $data, $wait = true);\n$forge->updateSite($serverId, $siteId, array $data);\n$forge->refreshSiteToken($serverId, $siteId);\n$forge->deleteSite($serverId, $siteId);\n\n// Add Site Aliases\n$forge->addSiteAliases($serverId, $siteId, array $aliases);\n\n// Environment File\n$forge->siteEnvironmentFile($serverId, $siteId);\n$forge->updateSiteEnvironmentFile($serverId, $siteId, $content);\n\n// Site Repositories and Deployments\n$forge->installGitRepositoryOnSite($serverId, $siteId, array $data, $wait = false);\n$forge->updateSiteGitRepository($serverId, $siteId, array $data);\n$forge->destroySiteGitRepository($serverId, $siteId, $wait = false);\n$forge->createSiteDeployKey($serverId, $siteId);\n$forge->destroySiteDeployKey($serverId, $siteId);\n$forge->siteDeploymentScript($serverId, $siteId);\n$forge->updateSiteDeploymentScript($serverId, $siteId, $content);\n$forge->enableQuickDeploy($serverId, $siteId);\n$forge->disableQuickDeploy($serverId, $siteId);\n$forge->deploySite($serverId, $siteId, $wait = false);\n$forge->resetDeploymentState($serverId, $siteId);\n$forge->siteDeploymentLog($serverId, $siteId);\n$forge->deploymentHistory($serverId, $siteId);\n$forge->deploymentHistoryDeployment($serverId, $siteId, $deploymentId);\n$forge->deploymentHistoryOutput($serverId, $siteId, $deploymentId);\n\n// PHP Version\n$forge->changeSitePHPVersion($serverId, $siteId, $version);\n\n// Installing Wordpress\n$forge->installWordPress($serverId, $siteId, array $data);\n$forge->removeWordPress($serverId, $siteId);\n\n// Installing phpMyAdmin\n$forge->installPhpMyAdmin($serverId, $siteId, array $data);\n$forge->removePhpMyAdmin($serverId, $siteId);\n\n// Updating Node balancing Configuration\n$forge->updateNodeBalancingConfiguration($serverId, $siteId, array $data);\n```\n\n----------------------------------------\n\nTITLE: Managing Server Firewall Rules\nDESCRIPTION: This code demonstrates managing firewall rules on a server, including listing rules, retrieving a specific rule, creating a new rule, and deleting a rule. The createFirewallRule method takes a server ID, rule data, and an optional wait parameter.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$forge->firewallRules($serverId);\n$forge->firewallRule($serverId, $ruleId);\n$forge->createFirewallRule($serverId, array $data, $wait = true);\n$forge->deleteFirewallRule($serverId, $ruleId);\n```\n\n----------------------------------------\n\nTITLE: Managing Server SSH Keys\nDESCRIPTION: This code demonstrates managing SSH keys for a server, including listing keys, retrieving a specific key, creating a new key, and deleting a key. The createSSHKey method takes a server ID, key data, and an optional wait parameter.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$forge->keys($serverId);\n$forge->sshKey($serverId, $keyId);\n$forge->createSSHKey($serverId, array $data, $wait = true);\n$forge->deleteSSHKey($serverId, $keyId);\n```\n\n----------------------------------------\n\nTITLE: Managing Site Workers\nDESCRIPTION: This code demonstrates managing workers for a site, including listing workers, retrieving a specific worker, creating a new worker, deleting a worker, and restarting a worker. The createWorker and restartWorker methods take a server ID, site ID, worker data or ID, and an optional wait parameter.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$forge->workers($serverId, $siteId);\n$forge->worker($serverId, $siteId, $workerId);\n$forge->createWorker($serverId, $siteId, array $data, $wait = true);\n$forge->deleteWorker($serverId, $siteId, $workerId);\n$forge->restartWorker($serverId, $siteId, $workerId, $wait = true);\n```\n\n----------------------------------------\n\nTITLE: Managing Backups with Laravel Forge SDK (PHP)\nDESCRIPTION: These methods enable backup configuration management. You can list, create, update, retrieve, delete backup configurations, restore backups, and delete backups.  $backupConfigurationId and $backupId identify a specific backup configuration and backup, respectively.  $data is an array containing backup configuration details.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$forge->backupConfigurations($serverId);\n$forge->createBackupConfiguration($serverId, array $data);\n$forge->updateBackupConfiguration($serverId, $backupConfigurationId, array $data);\n$forge->backupConfiguration($serverId, $backupConfigurationId);\n$forge->deleteBackupConfiguration($serverId, $backupConfigurationId);\n$forge->restoreBackup($serverId, $backupConfigurationId, $backupId);\n$forge->deleteBackup($serverId, $backupConfigurationId, $backupId);\n```\n\n----------------------------------------\n\nTITLE: Managing Site SSL Certificates with Laravel Forge SDK (PHP)\nDESCRIPTION: These methods provide functionalities to manage SSL certificates for a given site. You can list certificates, retrieve a specific certificate, create, delete, get the signing request, install, activate, and obtain Let's Encrypt certificates. $data is an array with certificate details and $certificateId identifies a particular certificate.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$forge->certificates($serverId, $siteId);\n$forge->certificate($serverId, $siteId, $certificateId);\n$forge->createCertificate($serverId, $siteId, array $data, $wait = true);\n$forge->deleteCertificate($serverId, $siteId, $certificateId);\n$forge->getCertificateSigningRequest($serverId, $siteId, $certificateId);\n$forge->installCertificate($serverId, $siteId, $certificateId, array $data, $wait = true);\n$forge->activateCertificate($serverId, $siteId, $certificateId, $wait = true);\n$forge->obtainLetsEncryptCertificate($serverId, $siteId, $data, $wait = true);\n```\n\n----------------------------------------\n\nTITLE: Managing Recipes with Laravel Forge SDK (PHP)\nDESCRIPTION: These methods facilitate recipe management, allowing you to list, retrieve, create, update, delete, and run recipes. $recipeId identifies a specific recipe and $data is an array containing recipe details or parameters for the run.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$forge->recipes();\n$forge->recipe($recipeId);\n$forge->createRecipe(array $data);\n$forge->updateRecipe($recipeId, array $data);\n$forge->deleteRecipe($recipeId);\n$forge->runRecipe($recipeId, array $data);\n```\n\n----------------------------------------\n\nTITLE: Executing Site Commands with Laravel Forge SDK (PHP)\nDESCRIPTION: These methods allow you to execute commands on a specified site and retrieve their history and details.  `executeSiteCommand` executes a new command on the site.  `listCommandHistory` lists the command history for the site.  `getSiteCommand` retrieves details for a single command.  $data is an array containing the command to be executed. $commandId identifies a specific command.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$forge->executeSiteCommand($serverId, $siteId, array $data);\n$forge->listCommandHistory($serverId, $siteId);\n$forge->getSiteCommand($serverId, $siteId, $commandId);\n```\n\n----------------------------------------\n\nTITLE: Managing Site Webhooks with Laravel Forge SDK (PHP)\nDESCRIPTION: These methods allow you to interact with webhooks associated with a specific site on a server. You can list, retrieve, create, and delete webhooks using the Laravel Forge SDK in PHP. The parameters $serverId and $siteId are required to identify the specific site.  $webhookId identifies a particular webhook.  $data is an array containing webhook details.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$forge->webhooks($serverId, $siteId);\n$forge->webhook($serverId, $siteId, $webhookId);\n$forge->createWebhook($serverId, $siteId, array $data);\n$forge->deleteWebhook($serverId, $siteId, $webhookId);\n```\n\n----------------------------------------\n\nTITLE: Managing Server Scheduled Jobs\nDESCRIPTION: This code demonstrates managing scheduled jobs on a server, including listing jobs, retrieving a specific job, creating a new job, and deleting a job. The createJob method takes a server ID, job data, and an optional wait parameter.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$forge->jobs($serverId);\n$forge->job($serverId, $jobId);\n$forge->createJob($serverId, array $data, $wait = true);\n$forge->deleteJob($serverId, $jobId);\n```\n\n----------------------------------------\n\nTITLE: Managing Server Daemons\nDESCRIPTION: This code demonstrates managing daemons on a server, including listing daemons, retrieving a specific daemon, creating a new daemon, restarting a daemon, and deleting a daemon. The createDaemon and restartDaemon methods take a server ID, daemon data or ID, and an optional wait parameter.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$forge->daemons($serverId);\n$forge->daemon($serverId, $daemonId);\n$forge->createDaemon($serverId, array $data, $wait = true);\n$forge->restartDaemon($serverId, $daemonId, $wait = true);\n$forge->deleteDaemon($serverId, $daemonId);\n```\n\n----------------------------------------\n\nTITLE: Server Instance Management\nDESCRIPTION: This section demonstrates management operations that can be performed on a Server instance, such as updating, deleting, and rebooting, as well as managing services like MySQL, Postgres, and Nginx.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$server->update(array $data);\n$server->delete();\n$server->reboot();\n$server->revokeAccess();\n$server->reconnect();\n$server->reactivate();\n$server->rebootMysql();\n$server->stopMysql();\n$server->rebootPostgres();\n$server->stopPostgres();\n$server->rebootNginx();\n$server->stopNginx();\n$server->installBlackfire(array $data);\n$server->removeBlackfire();\n$server->installPapertrail(array $data);\n$server->removePapertrail();\n$server->enableOPCache();\n$server->disableOPCache();\n$server->phpVersions();\n$server->installPHP($version);\n$server->updatePHP($version);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Server\nDESCRIPTION: This code retrieves a specific server by its ID.  The method returns a Server object containing information about the server, or throws an exception if the server is not found.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$server = $forge->server(SERVER_ID_HERE);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authenticated User\nDESCRIPTION: This code retrieves information about the currently authenticated user. It calls the user method on the Forge instance, which returns a User object.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$forge->user();\n```\n\n----------------------------------------\n\nTITLE: Creating a Site without Waiting\nDESCRIPTION: This code creates a new site on the specified server but disables waiting for completion. The third parameter, 'false', prevents the method from polling the Forge API for the site's status.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$forge->createSite(SERVER_ID, [SITE_PARAMETERS], false);\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout and Creating a Site\nDESCRIPTION: This code sets a custom timeout (120 seconds) before creating a new site. If the site's status isn't 'installed' within the timeout, a TimeoutException will be thrown.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$forge->setTimeout(120)->createSite(SERVER_ID, [SITE_PARAMETERS]);\n```\n\n----------------------------------------\n\nTITLE: Managing Site Security Rules\nDESCRIPTION: This code demonstrates managing security rules for a site, including listing rules, retrieving a specific rule, creating a new rule, and deleting a rule.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$forge->securityRules($serverId, $siteId);\n$forge->securityRule($serverId, $siteId, $ruleId);\n$forge->createSecurityRule($serverId, $siteId, array $data);\n$forge->deleteSecurityRule($serverId, $siteId, $ruleId);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Server Events\nDESCRIPTION: This code retrieves events, either for all servers or for a specific server ID.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$forge->events();\n$forge->events($serverId);\n```\n\n----------------------------------------\n\nTITLE: Managing Nginx Templates with Laravel Forge SDK (PHP)\nDESCRIPTION: These methods allow management of Nginx templates. You can list templates, retrieve the default template, retrieve a specific template, create, update, and delete templates.  $templateId identifies a specific template and $data is an array containing template details.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$forge->nginxTemplates($serverId);\n$forge->nginxDefaultTemplate($serverId);\n$forge->nginxTemplate($serverId, $templateId);\n$forge->createNginxTemplate($serverId, array $data);\n$forge->updateNginxTemplate($serverId, $templateId, array $data);\n$forge->deleteNginxTemplate($serverId, $templateId);\n```\n\n----------------------------------------\n\nTITLE: Site Instance Management\nDESCRIPTION: This section demonstrates site management operations that can be performed on a Site instance, such as refreshing the token, deleting the site, managing git repository, managing deploy keys and deployment script, manage quick deploy, and managing PHP version, Wordpress and phpMyAdmin installations.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$site->refreshToken();\n$site->delete();\n$site->installGitRepository(array $data, $wait = false);\n$site->updateGitRepository(array $data);\n$site->destroyGitRepository($wait = false);\n$site->createDeployKey();\n$site->destroyDeployKey();\n$site->getDeploymentScript();\n$site->updateDeploymentScript($content);\n$site->enableQuickDeploy();\n$site->disableQuickDeploy();\n$site->deploySite($wait = false);\n$site->resetDeploymentState();\n$site->siteDeploymentLog();\n$site->getDeploymentHistory();\n$site->getDeploymentHistoryDeployment($deploymentId);\n$site->getDeploymentHistoryOutput($deploymentId);\n$site->installWordPress($data);\n$site->removeWordPress();\n$site->installPhpMyAdmin($data);\n$site->removePhpMyAdmin();\n$site->changePHPVersion($version);\n$site->siteLog();\n$site->deleteSiteLog();\n```\n\n----------------------------------------\n\nTITLE: Managing Certificate Instance (PHP)\nDESCRIPTION: This snippet demonstrates methods that can be called directly on a `Certificate` instance. These are shortcuts for common certificate operations like deletion, getting the signing request, installation, and activation. The `$wait` parameter determines if the operation waits for completion.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$certificate->delete();\n$certificate->getSigningRequest();\n$certificate->install($wait = true);\n$certificate->activate($wait = true);\n```\n\n----------------------------------------\n\nTITLE: Managing Redirects with Laravel Forge SDK (PHP)\nDESCRIPTION: These methods manage redirect rules for a given site. You can list, retrieve, create, and delete redirect rules. $ruleId identifies a specific redirect rule and $data is an array containing redirect rule details.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$forge->redirectRules($serverId, $siteId);\n$forge->redirectRule($serverId, $siteId, $ruleId);\n$forge->createRedirectRule($serverId, $siteId, array $data, $wait = true);\n$forge->deleteRedirectRule($serverId, $siteId, $ruleId);\n```\n\n----------------------------------------\n\nTITLE: Managing BackupConfiguration Instance (PHP)\nDESCRIPTION: This snippet shows how to get extended configuration (including databases), update, delete a `BackupConfiguration`, restore a backup, and delete a backup using a `BackupConfiguration` instance directly. $backupId identifies a specific backup and $data is an array containing backup configuration details.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$extendedConfig = $backupConfig->get(); // Load the databases also\n$backupConfig->update(array $data);\n$backupConfig->delete();\n$backupConfig->restoreBackup($backupId);\n$backupConfig->deleteBackup($backupId);\n```\n\n----------------------------------------\n\nTITLE: Managing Recipe Instance (PHP)\nDESCRIPTION: This snippet illustrates how to update, delete, and run a `Recipe` instance directly. `$data` is an array containing recipe details or parameters for the run.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$recipe->update(array $data);\n$recipe->delete();\n$recipe->run(array $data);\n```\n\n----------------------------------------\n\nTITLE: Managing Database Instance (PHP)\nDESCRIPTION: This snippet demonstrates how to update and delete a `Database` instance directly. `$data` is an array holding the database's updated information.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$database->update(array $data);\n$database->delete();\n```\n\n----------------------------------------\n\nTITLE: Managing Nginx Template Instance (PHP)\nDESCRIPTION: This snippet shows how to update and delete an Nginx template instance directly. `$data` is an array containing updated template details.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$nginxTemplate->update(array $data);\n$nginxTemplate->delete();\n```\n\n----------------------------------------\n\nTITLE: Managing Database User Instance (PHP)\nDESCRIPTION: This snippet shows how to update and delete a `DatabaseUser` instance directly. `$data` contains updated user information.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$databaseUser->update(array $data);\n$databaseUser->delete();\n```\n\n----------------------------------------\n\nTITLE: Deleting a Job Instance\nDESCRIPTION: This code deletes a scheduled job using the delete method on a Job instance.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$job->delete();\n```\n\n----------------------------------------\n\nTITLE: Deleting an SSH Key Instance\nDESCRIPTION: This code deletes an SSH key using the delete method on an SSHKey instance.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$sshKey->delete();\n```\n\n----------------------------------------\n\nTITLE: Deleting a Daemon Instance\nDESCRIPTION: This code deletes a daemon using the delete method on a Daemon instance, restart the dameon specifying a wait time.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$daemon->restart($wait = true);\n$daemon->delete();\n```\n\n----------------------------------------\n\nTITLE: Deleting and Restarting Worker Instance\nDESCRIPTION: This code deletes a worker using the delete method on a Worker instance, restarts the worker specifying a wait time.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$worker->delete();\n$worker->restart($wait = true);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Firewall Rule Instance\nDESCRIPTION: This code deletes a firewall rule using the delete method on a FirewallRule instance.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$rule->delete();\n```\n\n----------------------------------------\n\nTITLE: Deleting Webhook Instance (PHP)\nDESCRIPTION: This snippet shows how to delete a webhook instance directly using the `delete()` method. This simplifies webhook removal after it has been retrieved. It relies on having a `$webhook` instance.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$webhook->delete();\n```\n\n----------------------------------------\n\nTITLE: Deleting a Security Rule Instance\nDESCRIPTION: This code deletes a security rule using the delete method on a SecurityRule instance.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$securityRule->delete();\n```\n\n----------------------------------------\n\nTITLE: Managing Backup Instance (PHP)\nDESCRIPTION: This snippet demonstrates how to delete and restore a `Backup` instance directly.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n$backupConfig->delete();\n$backupConfig->restore();\n```\n\n----------------------------------------\n\nTITLE: Managing RedirectRule Instance (PHP)\nDESCRIPTION: This snippet shows how to delete a `RedirectRule` instance directly.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$redirectRule->delete();\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Forge SDK with Composer\nDESCRIPTION: This command installs the Laravel Forge SDK as a dependency in your project using Composer, a PHP dependency manager. This allows your project to utilize the Forge SDK's functionalities.\nSOURCE: https://github.com/laravel/forge-sdk/blob/3.x/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require laravel/forge-sdk\n```"
  }
]