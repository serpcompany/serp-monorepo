[
  {
    "owner": "ivoa-std",
    "repo": "adql",
    "content": "TITLE: BNF for WITH Clause in ADQL\nDESCRIPTION: Defines the syntax for the WITH clause (common table expressions) in ADQL using Backus-Naur Form (BNF). It specifies how a query expression can be augmented with one or more named subqueries.\nSOURCE: https://github.com/ivoa-std/adql/blob/master/notes/20160501-02-adqltex-updates.txt#_snippet_5\n\nLANGUAGE: BNF\nCODE:\n```\n<query_expression> ::=\n    WITH <with_query> [, ...]\n    <select_query>\n\n<with_query> ::=\n    <query_name>\n    [ (<column_name> [,...]) ] AS (<select_query>)\n\n<query_name> ::= <identifier>\n```\n\n----------------------------------------\n\nTITLE: ADQL WITH Clause Example\nDESCRIPTION: Illustrates the usage of the WITH clause in ADQL to define a common table expression (CTE). The CTE `alpha_subset` selects a subset of data from `alpha_source`, which is then used in the main SELECT query.\nSOURCE: https://github.com/ivoa-std/adql/blob/master/notes/20160501-02-adqltex-updates.txt#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nWITH alpha_subset AS\n    (\n    SELECT\n        *\n    FROM\n        alpha_source\n    WHERE\n        id % 10 = 0\n    )\nSELECT\n    *\nFROM\n    alpha_subset\nWHERE\n    ra BETWEEN 10 AND 20\n```\n\n----------------------------------------\n\nTITLE: DISTANCE BNF Syntax\nDESCRIPTION: This snippet provides the BNF syntax for the DISTANCE function in ADQL. It outlines the two possible forms: one accepting two coordinate values and another accepting four numeric value expressions.\nSOURCE: https://github.com/ivoa-std/adql/blob/master/notes/20160501-02-adqltex-updates.txt#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n<distance_function> ::=\n    DISTANCE <left_paren>\n        <coord_value> <comma>\n        <coord_value>\n        <right_paren>\n  | DISTANCE <left_paren>\n        <numeric_value_expression> <comma>\n        <numeric_value_expression> <comma>\n        <numeric_value_expression> <comma>\n        <numeric_value_expression>\n        <right_paren>\n```\n\n----------------------------------------\n\nTITLE: CAST BNF Syntax\nDESCRIPTION: This snippet describes the Backus-Naur Form (BNF) syntax for the CAST function in ADQL. It shows how CAST is used within numeric value functions and defines the allowed numeric types.\nSOURCE: https://github.com/ivoa-std/adql/blob/master/notes/20160501-02-adqltex-updates.txt#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n<numeric_value_function> ::=\n    <cast_function>\n  | <trig_function>\n  | <math_function>        \n  | ....\n          \n<cast_function> ::=\n  | CAST(<numeric_value_expression> AS <numeric_type>)\n\n<numeric_type> ::= SHORTINT | INTEGER | BIGINT | REAL | DOUBLE\n```\n\n----------------------------------------\n\nTITLE: BNF for OFFSET Clause in ADQL\nDESCRIPTION: Defines the syntax for the OFFSET clause in ADQL using Backus-Naur Form (BNF). It specifies how to skip a certain number of rows from the beginning of the result set.\nSOURCE: https://github.com/ivoa-std/adql/blob/master/notes/20160501-02-adqltex-updates.txt#_snippet_6\n\nLANGUAGE: BNF\nCODE:\n```\n<table_expression> ::=\n    <from_clause>\n  [ <where_clause> ]\n  [ <group_by_clause> ]\n  [ <having_clause> ]\n  [ <order_by_clause> ]\n  [ <offset_clause> ]\n\n<offset_clause> ::= [OFFSET <unsigned_integer>]\n```\n\n----------------------------------------\n\nTITLE: BNF for Unsigned Hexadecimal Literals in ADQL\nDESCRIPTION: Defines the syntax for unsigned hexadecimal literals in ADQL using Backus-Naur Form (BNF). Hexadecimal literals are prefixed with '0x' and can contain decimal digits and letters A-F (case-insensitive).\nSOURCE: https://github.com/ivoa-std/adql/blob/master/notes/20160501-02-adqltex-updates.txt#_snippet_1\n\nLANGUAGE: BNF\nCODE:\n```\n<unsigned_hexadecimal> ::= 0x<hex_digit>...\n\nhex_digit ::= <dec_digit> | a | b | c | d | e | f | A | B | C | D | E | F\n```\n\n----------------------------------------\n\nTITLE: BNF for Boolean Literals in ADQL\nDESCRIPTION: Defines the syntax for boolean literals (TRUE, FALSE, true, false) in ADQL using Backus-Naur Form (BNF). It shows where the `<boolean_value_expression>` is added into the `<value_expression>` and defines what a `<boolean_literal>` consists of.\nSOURCE: https://github.com/ivoa-std/adql/blob/master/notes/20160501-02-adqltex-updates.txt#_snippet_0\n\nLANGUAGE: BNF\nCODE:\n```\n<value_expression> ::= \n    <numeric_value_expression>\n  | <string_value_expression>\n  | <boolean_value_expression>\n  | <geometry_value_expression>\n\n<boolean_value_expression> ::= \n    <boolean_literal>\n  | <boolean_function>\n  | <user_defined_function>\n\n<boolean_literal> ::= TRUE | FALSE | true | false\n```\n\n----------------------------------------\n\nTITLE: INTERSECT BNF Syntax\nDESCRIPTION: This snippet presents the BNF syntax for the INTERSECT operator in ADQL, defining how it combines query terms.\nSOURCE: https://github.com/ivoa-std/adql/blob/master/notes/20160501-02-adqltex-updates.txt#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n<non_join_query_primary> ::=\n    <query_specification>\n  | <left_paren> <non_join_query_expression> <right_paren>\n\n<non_join_query_term> ::=\n    <non_join_query_primary>\n  | <query_term> INTERSECT [ ALL ] <query_expression>\n```\n\n----------------------------------------\n\nTITLE: UNION BNF Syntax\nDESCRIPTION: This snippet illustrates the BNF syntax for the UNION operator in ADQL, showing how it combines query expressions.\nSOURCE: https://github.com/ivoa-std/adql/blob/master/notes/20160501-02-adqltex-updates.txt#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n<non_join_query_expression> ::=\n    <non_join_query_term>\n  | <query_expression> UNION [ ALL ] <query_term>\n  | <query_expression> EXCEPT [ ALL ] <query_term>\n```\n\n----------------------------------------\n\nTITLE: BNF for Numeric Literals including Hexadecimal in ADQL\nDESCRIPTION: Updates the numeric literals BNF to include hexadecimal literals. This BNF defines how signed and unsigned numeric literals, including exact and approximate literals, are constructed, now with the inclusion of hexadecimal values.\nSOURCE: https://github.com/ivoa-std/adql/blob/master/notes/20160501-02-adqltex-updates.txt#_snippet_2\n\nLANGUAGE: BNF\nCODE:\n```\n<signed_numeric_literal> ::= [<sign>] <unsigned_numeric_literal>\n\n<unsigned_numeric_literal> ::= \n    <exact_numeric_literal>\n  | <approximate_numeric_literal>\n              \n<exact_numeric_literal> ::=\n    <unsigned_decimal> [<period> [<unsigned_decimal>]]\n  | <period><unsigned_decimal>\n  | <unsigned_decimal>\n  | <unsigned_hexadecimal>\n\n<approximate_numeric_literal> ::= <mantissa> E <exponent>\n\n<mantissa> ::= <exact_numeric_literal>\n\n<exponent> ::= <signed_decimal>\n\n<signed_decimal> ::= [<sign>] <unsigned_decimal>\n\n<unsigned_decimal> ::= <dec_digit>...\n\n<dec_digit> ::= 0 | 1  | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9\n            \n<sign> ::= <plus_sign> | <minus_sign>\n```\n\n----------------------------------------\n\nTITLE: BNF for Bitwise Expressions in ADQL\nDESCRIPTION: Defines the syntax for bitwise operators (NOT, AND, OR, XOR) in ADQL using Backus-Naur Form (BNF).  It specifies that these operators are applicable only to integer numeric values.\nSOURCE: https://github.com/ivoa-std/adql/blob/master/notes/20160501-02-adqltex-updates.txt#_snippet_3\n\nLANGUAGE: BNF\nCODE:\n```\n<bitwise_expression> ::=\n    <bitwise_not> <integer_expression>\n  | <integer_expression> <bitwise_and> <integer_expression>\n  | <integer_expression> <bitwise_or>  <integer_expression>\n  | <integer_expression> <bitwise_xor> <integer_expression>\n\n<integer_expression> ::= <numeric_expression> # integer return type only\n\n# is this the right place for it ?\n<numeric_value_expression> ::=\n    <term>\n  | <bitwise_expression>\n  | <numeric_value_expression> <plus_sign> <term>\n  | <numeric_value_expression> <minus_sign> <term>\n```\n\n----------------------------------------\n\nTITLE: CAST Feature Definition\nDESCRIPTION: This snippet defines the CAST feature within the ADQL standard, specifying its type and name. It highlights a correction made to the feature name.\nSOURCE: https://github.com/ivoa-std/adql/blob/master/notes/20160501-02-adqltex-updates.txt#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nCAST\ntype: ivo://ivoa.net/std/TAPRegExt#features-adql-type\nname: CAST\n\n    Feature name is wrong\n-   name: IN_UNIT\n+   name: CAST\n```\n\n----------------------------------------\n\nTITLE: Generating Architecture Diagram with Docker\nDESCRIPTION: This command uses Docker to run the `ivoa/ivoatex:1.2` image, mounting the current directory as `/texdata`.  It sets the user to the current user's ID and group ID, and then it runs the `make clean` and `make archdiag.pdf` commands inside the container to generate the architecture diagram.\nSOURCE: https://github.com/ivoa-std/adql/blob/master/notes/20171227-01-ivoatex-fixes.txt#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run \\\n    --rm \\\n    --tty \\\n    --interactive \\\n    --user   \"$(id -u):$(id -g)\" \\\n    --volume \"$(pwd):/texdata\" \\\n    ivoa/ivoatex:1.2\n\n    make clean\n    make archdiag.pdf\n```\n\n----------------------------------------\n\nTITLE: Updating ADQL Document using Make\nDESCRIPTION: These `make` commands update the ADQL document's bibliography, force a PDF build, create an HTML document, and package it for IVOA submission. The commands are executed using the `make` utility, which relies on a Makefile.\nSOURCE: https://github.com/ivoa-std/adql/blob/master/notes/20171227-01-ivoatex-fixes.txt#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake biblio\nmake forcetex\nmake ivoatexDoc.html\nmake package\n```\n\n----------------------------------------\n\nTITLE: Building ADQL Document with Docker (Shell)\nDESCRIPTION: This snippet sources the settings file and runs a Docker container to build the ADQL document. It mounts the current working directory as a volume inside the container and executes build commands. This snippet relies on the `ivoa/ivoatex` Docker image. The environment variable useruid is passed to the container.\nSOURCE: https://github.com/ivoa-std/adql/blob/master/notes/20160501-01-adqltex-build.txt#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n    source \"${HOME:?}/adqltex.settings\"\n    pushd \"${ADQLTEXT_CODE:?}\"\n\n        docker run -it \\\n            -e \"useruid=$(id -u)\" \\\n            -v \"$(pwd):/texdata\" \\\n            'ivoa/ivoatex'\n\n            make clean\n            make biblio\n            make\n\n        exit\n```\n\n----------------------------------------\n\nTITLE: Updating ADQL Source Code (Shell)\nDESCRIPTION: This snippet sources the settings file and updates the ADQL document source code from an SVN repository. It uses `pushd` and `popd` to change the directory to the ADQLTEXT_CODE location and execute `svn update`. The snippet depends on the existence of the settings file and the SVN repository.\nSOURCE: https://github.com/ivoa-std/adql/blob/master/notes/20160501-01-adqltex-build.txt#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n    source \"${HOME:?}/adqltex.settings\"\n    pushd \"${ADQLTEXT_CODE:?}\"\n\n        svn update\n\n    popd\n```\n\n----------------------------------------\n\nTITLE: Initializing ADQL Settings (Shell)\nDESCRIPTION: This snippet checks for the existence of a settings file and creates it if it doesn't exist. It defines environment variables such as VOLUTE_HOME and ADQLTEXT_CODE, which are used in later steps for building the ADQL document. The settings file stores paths necessary for the document build process.\nSOURCE: https://github.com/ivoa-std/adql/blob/master/notes/20160501-01-adqltex-build.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n    if [ ! -e \"${HOME:?}/adqltex.settings\" ]\n    then\n        cat > \"${HOME:?}/adqltex.settings\" << EOF\nVOLUTE_HOME=/var/local/projects/edinburgh/volute/svn\nADQLTEXT_CODE=\\${VOLUTE_HOME:?}/ADQL\nEOF\n    fi\n```\n\n----------------------------------------\n\nTITLE: Spelling Corrections\nDESCRIPTION: This section lists a series of spelling corrections to be made in the text. It provides replacements for misspelled words to ensure consistency and accuracy throughout the document. The commands would be manually executed using a text editor or potentially automated using `sed` or similar tools.\nSOURCE: https://github.com/ivoa-std/adql/blob/master/notes/20171024-01-typo-fixes.txt#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncompliancy ?\n\nAcknowledgments|Acknowledgements\nth|the\nAQDL|ADQL\nconsitent|consistent\nlangauge|language\ncartesian|cartesian\ninsensitiveness|insensitive\ncondtion|condition\ndefinative|definitive\nfunctons|functions\nbondaries|boundaries\nbegining|beginning\nexpresson|expression\nplaceholder|place holder\ninsensitiveness|insensitive\n\nnontrivial|non-trivial\nnonterminal|non-terminal\n\n\nsubqueries\nsubquery\n```\n\n----------------------------------------\n\nTITLE: Extract and Sort Words from LaTeX File (ADQL.tex)\nDESCRIPTION: This shell command extracts all words from the ADQL.tex file, removes non-alphanumeric characters, normalizes spaces, sorts the words alphabetically, counts their occurrences, and saves the results to words.txt. This creates a frequency list of words in the file.\nSOURCE: https://github.com/ivoa-std/adql/blob/master/notes/20171024-01-typo-fixes.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncat ADQL.tex | sed 's|[^a-zA-Z0-9]| |g' | sed 's|  *| |g' | tr ' ' '\\n' | sort | uniq -c > words.txt\n```"
  }
]