[
  {
    "owner": "vala-lang",
    "repo": "vala-docs",
    "content": "TITLE: Implementing Properties in Vala\nDESCRIPTION: Demonstrates how to implement properties in Vala, which provide a more convenient syntax for accessing and modifying object state.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-05-properties.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\nclass Person : Object {\n    private int _age = 32;  // underscore prefix to avoid name clash with property\n\n    /* Property */\n    public int age {\n        get { return _age; }\n        set { _age = value; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Interface Implementations\nDESCRIPTION: Demonstrates how to use a class that implements an interface, including accessing the class directly and through the interface type.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-08-interfaces.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\nvar t = new Test1();\nt.method_1();\n\nITest i = t;\ni.method_1();\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Vala Class with Fields, Constructor, and Method\nDESCRIPTION: Demonstrates how to create a class that inherits from GLib.Object with public and private fields, a constructor, and a method. The class showcases different access modifiers and basic object-oriented features in Vala.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-01-basics.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\npublic class TestClass : GLib.Object {\n\n    /* Fields */\n    public int first_data = 0;\n    private int second_data;\n\n    /* Constructor */\n    public TestClass() {\n        this.second_data = 5;\n    }\n\n    /* Method */\n    public int method_1() {\n        stdout.printf(\"private data: %d\", this.second_data);\n        return this.second_data;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Gtk ColumnView Application in Vala\nDESCRIPTION: A complete Vala application that demonstrates how to use Gtk's ColumnView widget to display tabular data. It defines an Account class as the data model and creates a ColumnView with three columns (name, account type, and balance). The code includes signal handlers for setting up and binding data to each column.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/column-view.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\n// ColumnView.vala\n\npublic class Account : GLib.Object {\n    public string name { get; set; }\n    public string account_type { get; set; }\n    public string balance { get; set; }\n\n    public Account (string name, string account_type, string balance) {\n        Object (\n            name: name,\n            account_type: account_type,\n            balance: balance\n        );\n    }\n}\n\npublic class ColumnViewSample : Gtk.Application {\n    public ColumnViewSample () {\n        Object (application_id: \"com.example.ColumnViewSample\");\n    }\n\n    public override void activate () {\n        var window = new Gtk.ApplicationWindow (this) {\n            title = \"ColumnView Sample\",\n            default_width = 375,\n            default_height = 150\n        };\n\n        var accounts = new GLib.ListStore(typeof (Account));\n        var selection_model = new Gtk.SingleSelection (accounts) {\n            autoselect = true\n        };\n\n        accounts.append (new Account (\"Visa\", \"Card\", \"102.10\"));\n        accounts.append (new Account (\"Mastercard\", \"Card\", \"10.20\"));\n\n        var name_column_factory = new Gtk.SignalListItemFactory ();\n        name_column_factory.setup.connect (on_name_column_setup);\n        name_column_factory.bind.connect (on_name_column_bind);\n\n        var account_type_column_factory = new Gtk.SignalListItemFactory ();\n        account_type_column_factory.setup.connect (on_account_type_column_setup);\n        account_type_column_factory.bind.connect (on_account_type_column_bind);\n\n        var balance_column_factory = new Gtk.SignalListItemFactory ();\n        balance_column_factory.setup.connect (on_balance_column_setup);\n        balance_column_factory.bind.connect (on_balance_column_bind);\n\n        var name_column = new Gtk.ColumnViewColumn (\"Account Name\", name_column_factory);\n        name_column.expand = true;\n\n        var account_type_column = new Gtk.ColumnViewColumn (\"Type\", account_type_column_factory);\n\n        var balance_column = new Gtk.ColumnViewColumn (\"Balance\", balance_column_factory);\n        balance_column.expand = true;\n\n        var column_view = new Gtk.ColumnView (selection_model);\n        column_view.append_column(name_column);\n        column_view.append_column(account_type_column);\n        column_view.append_column(balance_column);\n\n        window.child = column_view;\n        window.present ();\n    }\n\n    private void on_name_column_setup (Gtk.SignalListItemFactory factory, GLib.Object list_item_obj) {\n        var label = new Gtk.Label (\"\");\n        label.halign = Gtk.Align.START;\n        ((Gtk.ListItem) list_item_obj).child = label;\n    }\n\n    private void on_name_column_bind (Gtk.SignalListItemFactory factory, GLib.Object list_item_obj) {\n        var list_item = (Gtk.ListItem) list_item_obj;\n        var item_data = (Account) list_item.item ;\n        var label = (Gtk.Label) list_item.child;\n        label.label = item_data.name;\n    }\n\n    private void on_account_type_column_setup (Gtk.SignalListItemFactory factory, GLib.Object list_item_obj) {\n        var label = new Gtk.Label (\"\");\n        label.halign = Gtk.Align.START;\n        ((Gtk.ListItem) list_item_obj).child = label;\n    }\n\n    private void on_account_type_column_bind (Gtk.SignalListItemFactory factory, GLib.Object list_item_obj) {\n        var list_item = (Gtk.ListItem) list_item_obj;\n        var item_data = (Account) list_item.item;\n        var label = (Gtk.Label) list_item.child;\n        label.label = item_data.account_type;\n    }\n\n    private void on_balance_column_setup (Gtk.SignalListItemFactory factory, GLib.Object list_item_obj) {\n        var label = new Gtk.Label (\"\");\n        label.halign = Gtk.Align.START;\n        ((Gtk.ListItem) list_item_obj).child = label;\n    }\n\n    private void on_balance_column_bind (Gtk.SignalListItemFactory factory, GLib.Object list_item_obj) {\n        var list_item = (Gtk.ListItem) list_item_obj;\n        var item_data = (Account) list_item.item;\n        var label = (Gtk.Label) list_item.child;\n        label.label = item_data.balance;\n    }\n\n    public static int main (string[] args) {\n        var app = new ColumnViewSample ();\n        return app.run (args);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Abstract Classes in Vala\nDESCRIPTION: This snippet demonstrates how to create an abstract class with abstract methods in Vala. The Animal class contains both a concrete method (eat) and an abstract method (say_hello) that must be implemented by subclasses Tiger and Duck.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-07-abstract-classes.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\npublic abstract class Animal : Object {\n\n    public void eat() {\n        stdout.printf(\"*chomp chomp*\\n\");\n    }\n\n    public abstract void say_hello();\n}\n\npublic class Tiger : Animal {\n\n    public override void say_hello() {\n        stdout.printf(\"*roar*\\n\");\n    }\n}\n\npublic class Duck : Animal {\n\n    public override void say_hello() {\n        stdout.printf(\"*quack*\\n\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtual Methods in Vala\nDESCRIPTION: This example shows how to create virtual methods in Vala using the 'virtual' and 'override' keywords. The virtual mechanism ensures that the most specific implementation of a method is called based on the actual object type rather than the reference type.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-09-polymorphism.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\nclass SuperClass : GLib.Object {\n    public virtual void method_1() {\n        stdout.printf(\"SuperClass.method_1()\\n\");\n    }\n}\n\nclass SubClass : SuperClass {\n    public override void method_1() {\n        stdout.printf(\"SubClass.method_1()\\n\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GTK4 ListView with CheckButtons in Vala\nDESCRIPTION: A complete Vala application that demonstrates how to create a GTK4 ListView with CheckButtons. It includes a custom Item class to store data, a ListStore to manage items, and a ListView with a SignalListItemFactory to render items with checkboxes and labels.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/list-view-check-buttons.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\n// ListViewCheckButtons.vala\n\npublic class Item : GLib.Object {\n    public string name { get; set; }\n    public bool checked { get; set; }\n\n    public Item (string name, bool checked) {\n        Object (\n            name: name,\n            checked: checked\n        );\n    }\n}\n\npublic class ListViewCheckButtonsSample : Gtk.Application {\n    public ListViewCheckButtonsSample () {\n        Object (application_id: \"com.example.ListViewCheckButtonsSample\");\n    }\n\n    public override void activate () {\n        var window = new Gtk.ApplicationWindow (this) {\n            title = \"ListView CheckButtons Sample\",\n            default_width = 280,\n            default_height = 200\n        };\n\n        var items = new GLib.ListStore(typeof (Item));\n        var selection_model = new Gtk.SingleSelection (items) {\n            autoselect = true\n        };\n\n        items.append (new Item (\"Item 1\", true));\n        items.append (new Item (\"Item 2\", false));\n\n        var list_view_factory = new Gtk.SignalListItemFactory ();\n        list_view_factory.setup.connect (on_list_view_setup);\n        list_view_factory.bind.connect (on_list_view_bind);\n\n        var list_view = new Gtk.ListView (selection_model, list_view_factory);\n\n        window.child = list_view;\n        window.present ();\n    }\n\n    private void on_list_view_setup (Gtk.SignalListItemFactory factory, GLib.Object list_item_obj) {\n        var vbox = new Gtk.Box (Gtk.Orientation.HORIZONTAL, 0);\n        var checkbox = new Gtk.CheckButton ();\n        var name_label = new Gtk.Label (\"\");\n        name_label.halign = Gtk.Align.START;\n\n        vbox.append (checkbox);\n        vbox.append (name_label);\n        ((Gtk.ListItem) list_item_obj).child = vbox;\n    }\n\n    private void on_list_view_bind (Gtk.SignalListItemFactory factory, GLib.Object list_item_obj) {\n        var list_item = (Gtk.ListItem) list_item_obj;\n        var item_data = (Item) list_item.item;\n        var vbox = (Gtk.Box) list_item.child;\n        var checkbox = (Gtk.CheckButton) vbox.get_first_child ();\n        var name_label = (Gtk.Label) checkbox.get_next_sibling ();\n\n        checkbox.active = item_data.checked;\n        name_label.label = item_data.name;\n    }\n\n    public static int main (string[] args) {\n        var app = new ListViewCheckButtonsSample ();\n        return app.run (args);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Class Inheritance and Access Modifiers in Vala\nDESCRIPTION: The code snippet demonstrates inheritance in Vala where SubClass inherits from SuperClass. The superclass contains a private member, a protected method, and a public static method. The subclass constructor calls the superclass constructor using 'base'. SuperClass is derived from GLib.Object, showcasing a single inheritance model in Vala. Dependency on GLib.Object is notable, with key functionalities such as constructor chaining via 'base' and access restrictions in Vala classes.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-06-inheritance.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nclass SuperClass : GLib.Object {\n\n    private int data;\n\n    public SuperClass(int data) {\n        this.data = data;\n    }\n\n    protected void protected_method() {\n    }\n\n    public static void public_static_method() {\n    }\n}\n\nclass SubClass : SuperClass {\n\n    public SubClass() {\n        base(10);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Class in Vala\nDESCRIPTION: This code snippet defines a generic class `Wrapper` in Vala. The class is parameterized by a type `G`, which is used as the type of the `data` property. This allows instances of the `Wrapper` class to store data of a specific type determined at instantiation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-13-generics.rst#2025-04-21_snippet_0\n\nLANGUAGE: Vala\nCODE:\n```\npublic class Wrapper<G>: GLib.Object {\n    public G data { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Asynchronous Method in Vala\nDESCRIPTION: This snippet demonstrates how to define an asynchronous method in Vala using the `async` keyword. The method `display_jpeg` takes a string argument and performs some operation asynchronously, potentially loading a JPEG image in the background.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-08-asynchronous-methods.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nasync void display_jpeg(string fnam) {\n    // Load JPEG in a background thread and display it when loaded\n    // [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Contract Programming in Vala\nDESCRIPTION: The snippet exemplifies contract programming in Vala by using preconditions (requires) and postconditions (ensures) for a method. It includes conditions for method parameters and the return value to ensure correctness in execution.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-01-assertions-and-contract-programming.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\ndouble method_name(int x, double d)\n        requires (x > 0 && x < 10)\n        requires (d >= 0.0 && d <= 1.0)\n        ensures (result >= 0.0 && result <= 10.0)\n{\n    return d * x;\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Using a Generic Class in Vala\nDESCRIPTION: This code snippet demonstrates how to instantiate and use the generic `Wrapper` class with a specific type (string). It creates an instance of `Wrapper<string>`, assigns a string value to the `data` property, and prints the value to the console. This illustrates the type safety provided by generics in Vala.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-13-generics.rst#2025-04-21_snippet_1\n\nLANGUAGE: Vala\nCODE:\n```\nvoid main () {\n    var w = new Wrapper<string>();\n    w.data = \"test\";\n    stdout.printf(w.data);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal GTK4 Application in Vala\nDESCRIPTION: This Vala code snippet demonstrates how to create a minimal GTK4 application with a window and a clickable button that changes its label on click. Dependencies include GTK4 and proper initialization of the GTK library. The application runs until all top-level windows are closed. Ensure GTK4 is installed before compilation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/minimal-app.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\n// MinimalApp.vala\n\nint main (string[] args) {\n    Gtk.init ();\n\n    var window = new Gtk.Window () {\n        title = \"Minimal GTK4 App\"\n    };\n\n    var button = new Gtk.Button.with_label (\"Click me!\");\n    button.clicked.connect (() => {\n        button.label = \"Thank you\";\n    });\n\n    window.child = button;\n    window.present ();\n\n    while (Gtk.Window.get_toplevels ().get_n_items () > 0) {\n        GLib.MainContext.@default ().iteration (true);\n    }\n\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Console Input/Output in Vala\nDESCRIPTION: This snippet illustrates how to perform console input and output operations in Vala using stdout.printf() for output and stdin.read_line() for input. It also demonstrates string formatting in Vala.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/36-console-input-output.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nstdout.printf (\"Hi!\\n\");\nstdout.printf (\"Please enter your name: \");\nvar name = stdin.read_line ();\nstdout.printf (\"Welcome, %s!\\n\", name);\n```\n\n----------------------------------------\n\nTITLE: Yielding Control to the GLib Main Loop in Vala\nDESCRIPTION: This code shows how to use `Idle.add()` with `fetch_webpage.callback` and `yield` to relinquish control to the GLib main loop in a Vala asynchronous method. This allows the method to resume execution when there are no more events to process, preventing UI freezes.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-08-asynchronous-methods.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\nIdle.add(fetch_webpage.callback);\nyield;\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic GTK4 Application in Vala\nDESCRIPTION: This snippet defines a basic GTK4 application using Vala. It includes a class that extends Gtk.Application, handles application activation, creates a window, and a button that changes its label when clicked. Dependencies include GTK4.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/basic-app.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\n// BasicApp.vala\n\npublic class BasicAppSample : Gtk.Application {\n    public BasicAppSample () {\n        Object (application_id: \"com.example.BasicAppSample\");\n    }\n\n    public override void activate () {\n        var window = new Gtk.ApplicationWindow (this) {\n            title = \"Basic GTK4 App\"\n        };\n\n        var button = new Gtk.Button.with_label (\"Click me!\");\n        button.clicked.connect (() => {\n            button.label = \"Thank you\";\n        });\n\n        window.child = button;\n        window.present ();\n    }\n\n    public static int main (string[] args) {\n        var app = new BasicAppSample ();\n        return app.run (args);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Calculated Properties in Vala\nDESCRIPTION: Shows how to implement properties with custom logic in the getter and setter, allowing for dynamic calculation of values.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-05-properties.rst#2025-04-21_snippet_5\n\nLANGUAGE: vala\nCODE:\n```\nstatic int current_year = 2525;\n\nclass Person : Object {\n    private int year_of_birth = 2493;\n\n    public int age {\n        get { return current_year - year_of_birth; }\n        set { year_of_birth = current_year - value; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Properties in Vala\nDESCRIPTION: Demonstrates how to implement auto-properties in Vala, which provide a concise syntax for standard getter and setter implementations with a default value.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-05-properties.rst#2025-04-21_snippet_4\n\nLANGUAGE: vala\nCODE:\n```\nclass Person : Object {\n    /* Property with standard getter and setter and default value */\n    public int age { get; set; default = 32; }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Asynchronous Method with Callback in Vala\nDESCRIPTION: This snippet illustrates how to call an asynchronous method in Vala using the `.begin()` and `.end()` methods with a callback function. The callback handles the result of the asynchronous operation, including potential exceptions and output parameters. It takes the source object and an `AsyncResult` as arguments.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-08-asynchronous-methods.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\nfetch_webpage.begin(\"http://www.example.com/\", (obj, res) => {\n    try {\n        string text;\n        var status = fetch_webpage.end(res, out text);\n        // Result of call is in 'text' and 'status' ...\n    } catch (IOError e) {\n        // Problem ...\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Async Method with Return Value and Output Parameter in Vala\nDESCRIPTION: This code defines an asynchronous method `fetch_webpage` in Vala that retrieves a webpage. It takes a URL as input, returns an integer status code, and provides the webpage content as an output parameter. The method also declares that it can throw an IOError.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-08-asynchronous-methods.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nasync int fetch_webpage(string url, out string text) throws IOError {\n    // Fetch a webpage asynchronously and when ready return the\n    // HTTP status code and put the page contents in 'text'\n    // [...]\n    text = result;\n    return status;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Interface in Vala\nDESCRIPTION: This code snippet demonstrates how to define an interface in Vala. The interface is a non-instantiable type, and an instance must be created by implementing its abstract methods in a non-abstract class. Vala interfaces are versatile and can act as mixins. This requires understanding of object-oriented programming concepts in Vala.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-07-language-elements.rst#2025-04-21_snippet_8\n\nLANGUAGE: Vala\nCODE:\n```\ninterface InterfaceName : SuperInterfaceName {\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a D-Bus Service and Main Loop Initialization in Vala\nDESCRIPTION: This Vala snippet demonstrates registering a service to D-Bus and initializing a main loop. It handles service acquisition, error management, and executes a main loop to keep the service active. Requires gio-2.0 package for D-Bus interactions.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-14-d-bus-integration.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nvoid on_bus_aquired (DBusConnection conn) {\n    try {\n        // start service and register it as dbus object\n        var service = new DemoService();\n        conn.register_object (\"/org/example/demo\", service);\n    } catch (IOError e) {\n        stderr.printf (\"Could not register service: %s\\n\", e.message);\n    }\n}\n\nvoid main () {\n    // try to register service name in session bus\n    Bus.own_name (BusType.SESSION, \"org.example.DemoService\", /* name to register */\n                  BusNameOwnerFlags.NONE, /* flags */\n                  on_bus_aquired, /* callback function on registration succeeded */\n                  () => {}, /* callback on name register succeeded */\n                  () => stderr.printf (\"Could not acquire name\\n\")); /*callback on name lost */\n\n    // start main loop\n    new MainLoop ().run ();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Async/Yield Support in Vala\nDESCRIPTION: This Vala code showcases the language's built-in support for asynchronous programming using the 'async' and 'yield' keywords. It implements an asynchronous addition operation and demonstrates how to use it in a non-blocking manner. Note that this code requires the gio-2.0 package for compilation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/28-asynchronous-calls.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nclass AsyncDemo {\n\n    static async int adder (int a, int b) {\n        return a + b;\n    }\n\n    static async void start () {\n        int sum = yield adder (4, 5);\n        stdout.printf (\"Addition completed\\n\");\n        stdout.printf (\"Result was: %d\\n\", sum);\n    }\n\n    static void main () {\n        start ();\n\n        /* wait */\n        var loop = new MainLoop (null, false);\n        loop.run ();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Regular Expression Matching in Vala\nDESCRIPTION: This snippet demonstrates how to use a regular expression to match an email pattern using Vala. It shows how to include the case-insensitive flag and print a message when the email is valid. The Vala language is used for demonstrating this operation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/05-00-experimental-features/05-02-regular-expression-literals.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nstring email = \"tux@kernel.org\";\\nif (/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.match(email)) {\\n    stdout.printf(\"Valid email address\\n\");\\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting a Class as a D-Bus Service in Vala\nDESCRIPTION: This Vala code snippet demonstrates how to create a class that serves as a D-Bus service. It includes method implementations and signal emissions, using Vala's D-Bus attributes to manage public properties and methods. Requires gio-2.0 package for compilation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-14-d-bus-integration.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\n[DBus(name = \"org.example.DemoService\")]\npublic class DemoService : Object {\n    /* Private field, not exported via D-Bus */\n    int counter;\n\n    /* Public field, not exported via D-Bus */\n    public int status;\n\n    /* Public property, exported via D-Bus */\n    public int something { get; set; }\n\n    /* Public signal, exported via D-Bus\n     * Can be emitted on the server side and can be connected to on the client side.\n     */\n    public signal void sig1();\n\n    /* Public method, exported via D-Bus */\n    public void some_method() {\n        counter++;\n        stdout.printf(\"heureka! counter = %d\\n\", counter);\n        sig1();  // emit signal\n    }\n\n    /* Public method, exported via D-Bus and showing the sender who is\n       is calling the method (not exported in the D-Bus interface) */\n    public void some_method_sender(string message, GLib.BusName sender) {\n        counter++;\n        stdout.printf(\"heureka! counter = %d, '%s' message from sender %s\\n\",\n                      counter, message, sender);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using If-Else Statements in Vala\nDESCRIPTION: The if-else statement executes different code based on the value of *a*. It checks conditions in sequence and only executes the code block for the first true condition matched, enabling branching logic.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-06-control-structures.rst#2025-04-21_snippet_4\n\nLANGUAGE: vala\nCODE:\n```\nif (a > 0) { stdout.printf(\"a is greater than 0\\n\"); }\nelse if (a < 0) { stdout.printf(\"a is less than 0\\n\"); }\nelse { stdout.printf(\"a is equal to 0\\n\"); }\n```\n\n----------------------------------------\n\nTITLE: Interface with Default Method Implementation\nDESCRIPTION: Shows how to define an interface with both abstract members and default method implementations. Default methods must be declared as virtual and can be used by implementing classes without overriding.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-08-interfaces.rst#2025-04-21_snippet_5\n\nLANGUAGE: vala\nCODE:\n```\npublic interface Callable : GLib.Object {\n   public abstract bool answering { get; protected set; }\n   public abstract void answer ();\n   public virtual bool hang ()\n   {\n      answering = false;\n      return true;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating Signals with Flags in Vala\nDESCRIPTION: This example shows how to annotate signals with various flags such as action, detailed, run, no_recurse, and no_hooks. These flags modify the behavior of the signal.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-04-signals.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\n[Signal (action=true, detailed=true, run=true, no_recurse=true, no_hooks=true)]\npublic signal void sig_1 ();\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Threads in Vala\nDESCRIPTION: The provided snippets demonstrate how to create and manage threads in Vala. The main dependencies include Vala's Thread module. The key functions are 'Thread' creation, 'join' method to synchronize threads, and 'Thread.yield()' for controlling execution flow. It demonstrates basic thread lifecycle management but does not provide event-loop integration, which limits asynchronous operations.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-06-multi-threading.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nvoid thread_func() {\n    stdout.printf(\"child_thread is running.\\n\");\n}\n\nvoid main() {\n    if (!Thread.supported()) {\n        error(\"Cannot run without thread support.\\n\");\n    }\n    var thread = new Thread<void> (\"child_thread\", thread_func);\n    stdout.printf(\"main_thread is running\");\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Error Handling Example in Vala\nDESCRIPTION: A comprehensive example demonstrating defining multiple error domains, throwing, catching, and handling these errors. It includes the use of 'finally' for cleanup processes regardless of whether an error occurred.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-02-error-handling.rst#2025-04-21_snippet_5\n\nLANGUAGE: vala\nCODE:\n```\npublic errordomain ErrorType1 {\n    CODE_1A\n}\n\npublic errordomain ErrorType2 {\n    CODE_2A,\n    CODE_2B\n}\n\npublic class Test : GLib.Object {\n    public static void thrower() throws ErrorType1, ErrorType2 {\n        throw new ErrorType1.CODE_1A(\"Error\");\n    }\n\n    public static void catcher() throws ErrorType2 {\n        try {\n            thrower();\n        } catch (ErrorType1 e) {\n            // Deal with ErrorType1\n        } finally {\n            // Tidy up\n        }\n    }\n\n    public static int main(string[] args) {\n        try {\n            catcher();\n        } catch (ErrorType2 e) {\n            // Deal with ErrorType2\n            if (e is ErrorType2.CODE_2B) {\n                // Deal with this code\n            }\n        }\n        return 0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Delegates and Lambdas in C#\nDESCRIPTION: This snippet illustrates various ways to define and use delegates in C#, including original style, direct method assignment, C# 2.0 anonymous methods, and C# 3.0 lambda expressions with and without type declarations.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/13-delegates-lambdas.rst#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ndelegate void DelegateType(string s);\n\nvoid Method(string s)\n{\n    Console.WriteLine(s);\n}\n\n// Original style\nDelegateType d1 = new DelegateType(Method);\n\n// Direct method assignment\nDelegateType d2 = Method;\n\n// C# 2.0 style\nDelegateType d3 = delegate(string s) => { Console.WriteLine(s); };\n\n// Lambda Expression with types (C# 3.0)\nDelegateType d4 = (string s) => { Console.WriteLine(s); };\n\n// Lambda Expression without types (C# 3.0)\nDelegateType d5 = (s) => { Console.WriteLine(s); };\n```\n\n----------------------------------------\n\nTITLE: Using Virtual Methods with Abstract Classes in Vala\nDESCRIPTION: This snippet shows how to use virtual methods in abstract classes to provide default implementations that derived classes can optionally override. The Caller abstract class defines both abstract methods and a virtual method, while Contact uses the default implementation and ContactCV overrides it.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-07-abstract-classes.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\npublic abstract class Caller : GLib.Object {\n   public abstract string name { get; protected set; }\n   public abstract void update (string new_name);\n   public virtual bool reset ()\n   {\n      name = \"No Name\";\n      return true;\n   }\n}\n\npublic class ContactCV : Caller\n{\n   public override string name { get; protected set; }\n   public override void update (string new_name)\n   {\n     name = \"ContactCV - \" + new_name;\n   }\n   public override bool reset ()\n   {\n      name = \"ContactCV-Name\";\n      stdout.printf (\"CotactCV.reset () implementation!\\n\");\n      return true;\n   }\n}\n\npublic class Contact : Caller {\n   public override string name { get; protected set; }\n   public override void update (string new_name)\n   {\n     name = \"Contact - \" + new_name;\n   }\n\n   public static void main ()\n   {\n      var c = new Contact ();\n      c.update (\"John Strauss\");\n      stdout.printf(@\"Name: $(c.name)\\n\");\n      c.reset ();\n      stdout.printf(@\"Reset Name: $(c.name)\\n\");\n\n      var cv = new ContactCV ();\n      cv.update (\"Xochitl Calva\");\n      stdout.printf(@\"Name: $(cv.name)\\n\");\n      cv.reset ();\n      stdout.printf(@\"Reset Name: $(cv.name)\\n\");\n      stdout.printf(\"END\\n\");\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Calls with Delegates in C#\nDESCRIPTION: This C# code demonstrates asynchronous method invocation using delegates and callbacks. It defines an asynchronous binary operation (addition) and uses BeginInvoke to start the operation, with a callback to handle the result.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/28-asynchronous-calls.rst#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\n\nclass AsyncDemo\n{\n    delegate int BinaryOperator(int a, int b);\n\n    static int Adder(int a, int b)\n    {\n        return a + b;\n    }\n\n    static void Callback(IAsyncResult r)\n    {\n        BinaryOperator adder = (BinaryOperator) r.AsyncState;\n\n        Console.WriteLine(\"Addition completed\");\n        Console.WriteLine(\"Result was: {0}\", adder.EndInvoke(r));\n    }\n\n    static void Main()\n    {\n        BinaryOperator adder = Adder;\n\n        adder.BeginInvoke(4, 5, Callback, adder);\n\n        /* wait */\n        Console.ReadLine();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Gtk Synchronised Widgets in Vala\nDESCRIPTION: A Gtk4 application that creates a SpinButton and Scale widget with synchronized value updates. The class implements a bidirectional value synchronization mechanism between two input widgets.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/synchronising-widgets.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\npublic class SyncSample : Gtk.Application {\n    private Gtk.SpinButton spin_box;\n    private Gtk.Scale slider;\n\n    public SyncSample () {\n        Object (application_id: \"com.example.SyncSample\");\n    }\n\n    public override void activate () {\n        var window = new Gtk.ApplicationWindow (this) {\n            title = \"Enter your age\",\n            default_width = 300,\n            default_height = 20,\n        };\n\n        this.spin_box = new Gtk.SpinButton.with_range (0, 130, 1);\n        this.slider = new Gtk.Scale.with_range (Gtk.Orientation.HORIZONTAL, 0, 130, 1);\n\n        this.spin_box.adjustment.value_changed.connect (() => {\n            slider.adjustment.value = spin_box.adjustment.value;\n        });\n\n        this.slider.adjustment.value_changed.connect (() => {\n            spin_box.adjustment.value = slider.adjustment.value;\n        });\n\n        var hbox = new Gtk.Box (Gtk.Orientation.HORIZONTAL, 5);\n        hbox.homogeneous = true;\n        hbox.append (spin_box);\n        hbox.append (slider);\n\n        window.child = hbox;\n        window.present ();\n    }\n\n    public static int main (string[] args) {\n        var app = new SyncSample ();\n        return app.run (args);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using HashMap in Vala\nDESCRIPTION: This snippet demonstrates the initialization of a HashMap with key-value pairs and shows how to set and get values. It also includes iterations over keys and values, making use of the Gee library for Vala. Key parameters include the use of string keys and integer values.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/gee-samples/03-map-sample.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nusing Gee;\n\nvoid main () {\n\n    var map = new HashMap<string, int> ();\n\n    // Setting values\n    map.set (\"one\", 1);\n    map.set (\"two\", 2);\n    map.set (\"three\", 3);\n    map[\"four\"] = 4;            // same as map.set (\"four\", 4)\n    map[\"five\"] = 5;\n\n    // Getting values\n    int a = map.get (\"four\");\n    int b = map[\"four\"];        // same as map.get (\"four\")\n    assert (a == b);\n\n    // Iteration\n\n    stdout.printf (\"Iterating over entries\\n\");\n    foreach (var entry in map.entries) {\n        stdout.printf (\"%s => %d\\n\", entry.key, entry.value);\n    }\n\n    stdout.printf (\"Iterating over keys only\\n\");\n    foreach (string key in map.keys) {\n        stdout.printf (\"%s\\n\", key);\n    }\n\n    stdout.printf (\"Iterating over values only\\n\");\n    foreach (int value in map.values) {\n        stdout.printf (\"%d\\n\", value);\n    }\n\n    stdout.printf (\"Iterating via 'for' statement\\n\");\n    var it = map.map_iterator ();\n    for (var has_next = it.next (); has_next; has_next = it.next ()) {\n        stdout.printf (\"%d\\n\", it.get_value ();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resuming Asynchronous Method with Idle.add() in Vala\nDESCRIPTION: This code shows how to resume an asynchronous method in Vala from a background thread using `Idle.add()` and the stored callback function. The `(owned)` cast prevents warnings about copying delegates.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-08-asynchronous-methods.rst#2025-04-21_snippet_5\n\nLANGUAGE: vala\nCODE:\n```\nIdle.add((owned) callback);\n```\n\n----------------------------------------\n\nTITLE: Calling Asynchronous Method with Callback Function in Vala\nDESCRIPTION: Shows an example of calling an asynchronous method using the begin method with a callback function.  The callback function will call the end method to retrieve the result when the asynchronous method is finished.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-08-asynchronous-methods.rst#2025-04-21_snippet_10\n\nLANGUAGE: vala\nCODE:\n```\ndisplay_jpeg.begin(\"test.jpg\", (obj, res) => {\n    display_jpeg.end(res);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Switch Statement in Vala\nDESCRIPTION: The switch statement allows execution of code blocks based on the value of *a*. It ensures that only one block runs unless it's an empty case, which allows controlled branching based on variable values.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-06-control-structures.rst#2025-04-21_snippet_5\n\nLANGUAGE: vala\nCODE:\n```\nswitch (a) {\ncase 1:\n    stdout.printf(\"one\\n\");\n    break;\ncase 2:\ncase 3:\n    stdout.printf(\"two or three\\n\");\n    break;\ndefault:\n    stdout.printf(\"unknown\\n\");\n    break;\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing an IOError in Vala\nDESCRIPTION: Demonstrates how to throw an IOError when a specific condition (e.g., file not found) is met. This involves using the 'throw' keyword followed by instantiating an error with a specific code and message.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-02-error-handling.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nif (something_went_wrong) {\n    throw new IOError.FILE_NOT_FOUND(\"Requested file could not be found.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Named Constructors in Vala\nDESCRIPTION: Demonstrates how to define multiple named constructors in a Vala class. Since Vala doesn't support constructor overloading, it uses name extensions to create different constructors with varying parameters.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-02-construction.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\npublic class Button : Object {\n\n    public Button() {\n    }\n\n    public Button.with_label(string label) {\n    }\n\n    public Button.from_stock(string stock_id) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Indexing and Iteration in Vala\nDESCRIPTION: Demonstrates a custom class implementing special method signatures to support indexing, containment checks, string conversion, and iteration\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-05-methods-with-syntax-support.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\npublic class EvenNumbers {\n    public int get(int index) {\n        return index * 2;\n    }\n\n    public bool contains(int i) {\n        return i % 2 == 0;\n    }\n\n    public string to_string() {\n        return \"[This object enumerates even numbers]\";\n    }\n\n    public Iterator iterator() {\n        return new Iterator(this);\n    }\n\n    public class Iterator {\n        private int index;\n        private EvenNumbers even;\n\n        public Iterator(EvenNumbers even) {\n            this.even = even;\n        }\n\n        public bool next() {\n            return true;\n        }\n\n        public int get() {\n            this.index++;\n            return this.even[this.index - 1];\n        }\n    }\n}\n\nvoid main() {\n    var even = new EvenNumbers();\n    stdout.printf(\"%d\\n\", even[5]);   // get()\n    if (4 in even) {                  // contains()\n        stdout.printf(@\"$even\\n\");    // to_string()\n    }\n    foreach (int i in even) {         // iterator()\n        stdout.printf(\"%d\\n\", i);\n        if (i == 20) break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Pointers as Delegates in Vala\nDESCRIPTION: This Vala code snippet shows how C function pointers are implemented as delegates in Vala. It defines a delegate type 'FooFunc' and corresponding functions that use this delegate, demonstrating the Vala syntax for handling function pointers.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/07-00-binding-a-c-function-s-parameter-and-return-types/07-05-function-pointers.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (cname = \"foo_func\", has_target = true)]\npublic delegate void FooFunc (int x);\n\npublic void call_foo (FooFunc f);\npublic void call_foo_later (owned FooFunc f);\npublic unowned FooFunc get_foo ();\npublic FooFunc make_foo ();\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Signals with Lambda Expressions in Vala\nDESCRIPTION: This example demonstrates how to define a signal in a class, connect a handler using lambda expressions, and emit the signal. The handler receives the emitting object as the first parameter followed by any signal-specific parameters.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-04-signals.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\npublic class Test : GLib.Object {\n\n    public signal void sig_1(int a);\n\n    public static int main(string[] args) {\n        Test t1 = new Test();\n\n        t1.sig_1.connect((t, a) => {\n            stdout.printf(\"%d\\n\", a);\n        });\n\n        t1.sig_1(5);\n\n        return 0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Vala Interface\nDESCRIPTION: Demonstrates how to define a basic interface in Vala with abstract properties and methods. The interface requires implementing classes to be GLib.Object subclasses and provide implementations for the data_1 property and method_1 method.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-08-interfaces.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\npublic interface ITest : GLib.Object {\n    public abstract int data_1 { get; set; }\n    public abstract void method_1();\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Main Loop with GTK+ in Vala\nDESCRIPTION: This snippet illustrates how a main loop is automatically created and run using GTK+ in Vala. It integrates with GTK+ by calling Gtk.init and Gtk.main, and demonstrates terminating the loop with Gtk.main_quit. A TimeoutSource is used, similar to GLib’s, to manage callback execution. The code requires GTK+ and GLib. Parameters include timeout duration and argument list for Gtk.init.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-07-the-main-loop.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nvoid main(string[] args) {\n\n    Gtk.init(ref args);\n    var time = new TimeoutSource(2000);\n\n    time.set_callback(() => {\n        stdout.printf(\"Time!\\n\");\n        Gtk.main_quit();\n        return false;\n    });\n\n    time.attach(null);\n\n    Gtk.main();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Indexers in C# using 'this' keyword\nDESCRIPTION: This C# code snippet shows how to implement indexers using the 'this' keyword. It defines a generic SampleCollection class with an indexer that allows access to an internal array. The Main method demonstrates usage of the indexer.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/34-indexers.rst#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nclass SampleCollection<T>\n{\n    private T[] arr = new T[100];\n\n    public T this[int i]\n    {\n        get { return arr[i]; }\n        set { arr[i] = value; }\n    }\n}\n\nclass IndexerDemo\n{\n    static void Main(string[] args)\n    {\n        var stringCollection = new SampleCollection<string>();\n\n        stringCollection[0] = \"Hello, World\";\n        System.Console.WriteLine(stringCollection[0]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Class with GObject-Style Construction in Vala\nDESCRIPTION: This code demonstrates GObject-style construction in Vala. It defines a `Person` class with construct properties `name` and `age`, uses the `Object(...)` call for setting construct properties in constructors, and includes a `construct` block for additional initialization logic. The name property is construct only.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-14-gobject-style-construction.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\npublic class Person : Object {\n\n    /* Construction properties */\n    public string name { get; construct; }\n    public int age { get; construct set; }\n\n    public Person(string name) {\n        Object(name: name);\n    }\n\n    public Person.with_age(string name, int years) {\n        Object(name: name, age: years);\n    }\n\n    construct {\n        // do anything else\n        stdout.printf(\"Welcome %s\\n\", this.name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Method with Varargs in Vala\nDESCRIPTION: This method `method_with_varargs` demonstrates how to define a function that accepts variable-length arguments in Vala. It utilizes `va_list()` to manage the list of arguments. The first argument is fixed, and the method retrieves the variable arguments one by one. Expected input includes an integer followed by any number of arguments of varying types.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-11-variable-length-argument-lists.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nvoid method_with_varargs(int x, ...) {\n       var l = va_list();\n       string s = l.arg();\n       int i = l.arg();\n       stdout.printf(\"%s: %d\\n\", s, i);\n   }\n```\n\n----------------------------------------\n\nTITLE: Defining a Method in Vala\nDESCRIPTION: This snippet defines a basic method named 'method_name' that takes an integer and an Object as parameters, returning an integer. It showcases the method signature and return type in Vala.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-07-language-elements.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nint method_name(int arg1, Object arg2) {\n    return 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Method with Error Handling in Vala\nDESCRIPTION: This snippet shows how to declare a Vala method that may raise an IOError. This involves using the 'throws' keyword followed by the error type. Error handling in Vala requires understanding that the compiler issues a warning if errors are not caught.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-02-error-handling.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nvoid my_method() throws IOError {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Equality Function for ArrayList in Vala\nDESCRIPTION: This snippet shows how to define a custom equality function for comparing Book objects based on their ISBN, and how to use it when creating an ArrayList. It demonstrates the use of the EqualDataFunc delegate to customize the equality comparison.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/gee-samples/05-custom-equality.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nbool same_book (Book a, Book b) {\n    return a.isbn == b.isbn;\n}\n\nvar books = new Gee.ArrayList<Book> ((EqualDataFunc) same_book);\n```\n\n----------------------------------------\n\nTITLE: Storing Callback for Later Execution in Vala\nDESCRIPTION: This snippet demonstrates how to store the callback function from an asynchronous method for later execution in Vala.  The `SourceFunc` type is used to store the callback, which can then be executed later to resume the async method.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-08-asynchronous-methods.rst#2025-04-21_snippet_4\n\nLANGUAGE: vala\nCODE:\n```\nSourceFunc callback = fetch_webpage.callback;\n/* … store 'callback' somewhere … */\nyield;\n```\n\n----------------------------------------\n\nTITLE: Defining Main Entry Point in Vala\nDESCRIPTION: In Vala, the main function can be defined outside of a class. It serves as the entry point for the application.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/04-main-entry-point.rst#2025-04-21_snippet_1\n\nLANGUAGE: Vala\nCODE:\n```\nmain\n```\n\n----------------------------------------\n\nTITLE: Clipboard Interaction with GTK4 in Vala\nDESCRIPTION: This Vala code demonstrates a simple GTK4 application that interacts with the system clipboard.  It creates a window with an entry field.  Typing in the entry field sets the clipboard content, and the application also attempts to read the initial clipboard content. The `on_clipboard_changed` function handles changes in the clipboard content, attempting to read the text and populate the entry field.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/clipboard.rst#2025-04-21_snippet_0\n\nLANGUAGE: Vala\nCODE:\n```\n// Clipboard.vala\n\npublic class ClipboardSample : Gtk.Application {\n    private Gtk.Entry entry;\n    private Gdk.Clipboard clipboard;\n    private Gtk.ApplicationWindow window;\n\n\n    public ClipboardSample () {\n        Object (application_id: \"com.example.ClipboardSample\");\n    }\n\n    public override void activate () {\n        this.window = new Gtk.ApplicationWindow (this) {\n            title = \"Clipboard\",\n            default_width = 300,\n            default_height = 60,\n        };\n\n        this.entry = new Gtk.Entry ();\n        entry.placeholder_text = \"Type here to set the clipboard's content!\";\n\n        this.clipboard = entry.get_clipboard ();\n        this.clipboard.changed.connect (this.on_clipboard_changed);\n\n       // If the user types something ...\n        entry.changed.connect (() => {\n            // Set text to clipboard\n            clipboard.set_text (entry.text);\n        });\n\n        this.window.child = entry;\n        this.window.present ();\n    }\n\n    private void on_clipboard_changed () {\n        clipboard.read_text_async.begin (null, (obj, res) => {\n            try {\n                var content = clipboard.read_text_async.end (res);\n                // Only load text from clipboard when the app starts\n                this.clipboard.changed.disconnect(this.on_clipboard_changed);\n                this.entry.text = content;\n            } catch (GLib.Error err) {\n                stderr.printf (\"Error: %s\", err.message);\n            }\n        });\n    }\n\n    public static int main (string[] args) {\n        var app = new ClipboardSample ();\n        return app.run (args);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying String Characters in Vala\nDESCRIPTION: Example demonstrating why direct character replacement in strings is not allowed in Vala and provides two approaches for string modification: using GLib.StringBuilder or raw pointers.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/faq.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nstring a = \"baer\";\na[1] = 'e';\nstdout.printf (\"%s\\n\", a);\n```\n\nLANGUAGE: vala\nCODE:\n```\nchar* str_ptr = new char[64];\nstr_ptr[0] = 'e';\nstring str = (string) str_ptr;\ndelete str_ptr;\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling in Vala\nDESCRIPTION: This snippet illustrates Vala's approach to error handling using error domains instead of exception classes. It shows how to define an error domain, throw an error, and catch it. Vala uses checked exceptions that must be declared in method signatures.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/22-exceptions.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nerrordomain MyError {\n    FOO,\n    BAR\n}\n\nvoid method () throws MyError {\n    throw new MyError.FOO (\"not enough foo\");\n}\ntry {\n    method ();\n} catch (MyError e) {\n    stderr.printf (\"Error: %s\\n\", e.message);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Domains in Vala\nDESCRIPTION: Defines error domains using the 'errordomain' keyword. Error domains categorize errors, similar to subclasses in Java, and specify potential error codes. This aids in better structuring and handling of error types.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-02-error-handling.rst#2025-04-21_snippet_4\n\nLANGUAGE: vala\nCODE:\n```\nerrordomain IOError {\n    FILE_NOT_FOUND\n}\n```\n\n----------------------------------------\n\nTITLE: Contains Operator in Vala\nDESCRIPTION: This snippet describes the 'in' operator which checks if the right operand contains the left operand. It supports various types, including arrays and strings, performing substring searches for strings.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-05-operators.rst#2025-04-21_snippet_12\n\nLANGUAGE: vala\nCODE:\n```\nin\n\n```\n\n----------------------------------------\n\nTITLE: Parsing Arbitrary String-Double Argument Pairs\nDESCRIPTION: In this example, `method_with_varargs` is modified to demonstrate parsing an arbitrary number of string-double pairs. It checks for null to determine the end of the variable-length argument list and prints each key-value pair to standard output. The expected input is an integer followed by pairs of strings and doubles.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-11-variable-length-argument-lists.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nvoid method_with_varargs(int fixed, ...) {\n       var l = va_list();\n       while (true) {\n           string? key = l.arg();\n           if (key == null) {\n               break;  // end of the list\n           }\n           double val = l.arg();\n           stdout.printf(\"%s: %g\\n\", key, val);\n       }\n   }\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Interface Methods\nDESCRIPTION: Shows how a class can override a default method implementation provided by an interface. The class provides its own implementation of the hang() method, which completely replaces the interface's default implementation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-08-interfaces.rst#2025-04-21_snippet_7\n\nLANGUAGE: vala\nCODE:\n```\npublic class TechPhone : GLib.Object, Callable\n{\n   public bool answering { get; protected set; }\n   public void answer ()\n   {\n     /* answer code implementation */\n   }\n\n   public bool hang ()\n   {\n      answering = false;\n      stdout.printf (\"TechPhone.hang () implementation!\");\n      return false;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ListView in Gtk for Customer Display using Vala\nDESCRIPTION: This code snippet defines a Vala application named 'ListViewSample' leveraging Gtk framework for building a GUI application. It initializes a main window containing a ListView to display customer data. Two subclasses, 'Customer' for customer objects and 'ListViewSample' for the application setup and lifecycle management, are implemented. The application features methods for setting up and binding ListView items, configuring item factories, and handling application activation. Dependencies include Gtk, Glib, and proper application ID setup. The inputs are customer data, while the output is a graphical window showing the customer list organized by first name, last name, and ID.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/list-view.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\n   // ListView.vala\n\n   public class Customer : GLib.Object {\n       public string first_name { get; set; }\n       public string last_name { get; set; }\n       public string id { get; set; }\n   \n       public Customer (string first_name, string last_name, string id) {\n           Object (\n               first_name: first_name,\n               last_name: last_name,\n               id: id\n           );\n       }\n   }\n   \n   public class ListViewSample : Gtk.Application {\n       public ListViewSample () {\n           Object (application_id: \"com.example.ListViewSample\");\n       }\n   \n       public override void activate () {\n           var window = new Gtk.ApplicationWindow (this) {\n               title = \"ListView Sample\",\n               default_width = 240,\n               default_height = 400\n           };\n   \n           var customers = new GLib.ListStore(typeof (Customer));\n           var selection_model = new Gtk.SingleSelection (customers) {\n               autoselect = true\n           };\n   \n           customers.append (new Customer (\"Linus\", \"Legend\", \"1991\"));\n           customers.append (new Customer (\"John\", \"Smith\", \"1992\"));\n           customers.append (new Customer (\"Alice\", \"Key\", \"1993\"));\n           customers.append (new Customer (\"Bob\", \"Key\", \"1994\"));\n           customers.append (new Customer (\"Jane\", \"Doe\", \"1995\"));\n           customers.append (new Customer (\"Gabe\", \"Goode\", \"1996\"));\n   \n           var list_view_factory = new Gtk.SignalListItemFactory ();\n           list_view_factory.setup.connect (on_list_view_setup);\n           list_view_factory.bind.connect (on_list_view_bind);\n\n           var list_view_header_factory = new Gtk.SignalListItemFactory ();\n           list_view_header_factory.setup.connect (on_list_view_header_setup);\n           list_view_header_factory.bind.connect (on_list_view_header_bind);\n   \n           var list_view = new Gtk.ListView (selection_model, list_view_factory);\n           list_view.header_factory = list_view_header_factory;\n   \n           window.child = list_view;\n           window.present ();\n       }\n   \n       private void on_list_view_setup (Gtk.SignalListItemFactory factory, GLib.Object list_item_obj) {\n           var vbox = new Gtk.Box (Gtk.Orientation.VERTICAL, 4);\n           var name_label = new Gtk.Label (\"\");\n           name_label.halign = Gtk.Align.START;\n   \n           var id_label = new Gtk.Label (\"\");\n           id_label.halign = Gtk.Align.START;\n   \n           vbox.append (name_label);\n           vbox.append (id_label);\n           ((Gtk.ListItem) list_item_obj).child = vbox;\n       }\n   \n       private void on_list_view_bind (Gtk.SignalListItemFactory factory, GLib.Object list_item_obj) {\n           var list_item = (Gtk.ListItem) list_item_obj;\n           var item_data = (Customer) list_item.item;\n           var vbox = (Gtk.Box) list_item.child;\n           var name_label = (Gtk.Label) vbox.get_first_child ();\n           var id_label = (Gtk.Label) name_label.get_next_sibling ();\n   \n           name_label.label = @\"$(item_data.first_name) $(item_data.last_name)\";\n           id_label.label = @\"ID: $(item_data.id)\";\n       }\n   \n       private void on_list_view_header_setup (Gtk.SignalListItemFactory factory, GLib.Object list_header_obj) {\n           var header_label = new Gtk.Label (\"\");\n           header_label.halign = Gtk.Align.START;\n           ((Gtk.ListHeader) list_header_obj).child = header_label;\n       }\n   \n       private void on_list_view_header_bind (Gtk.SignalListItemFactory factory, GLib.Object list_header_obj) {\n           var list_header = (Gtk.ListHeader) list_header_obj;\n           var header_label = (Gtk.Label) list_header.child;\n           header_label.label = \"Customers\";\n       }\n   \n       public static int main (string[] args) {\n           var app = new ListViewSample ();\n           return app.run (args);\n       }\n   }\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Running MainLoop in Vala with GLib\nDESCRIPTION: This snippet demonstrates the creation and execution of a MainLoop using GLib's event-driven system in Vala. It initializes a TimeoutSource that stops the loop after a set duration, showcasing how events are managed within a loop. Ensure GLib is included as a dependency. Inputs include defining timeout duration, outputs include console messages and loop termination.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-07-the-main-loop.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nvoid main() {\n\n    var loop = new MainLoop();\n    var time = new TimeoutSource(2000);\n\n    time.set_callback(() => {\n        stdout.printf(\"Time!\\n\");\n        loop.quit();\n        return false;\n    });\n\n    time.attach(loop.get_context());\n\n    loop.run();\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Interface Method Implementation\nDESCRIPTION: Demonstrates how to implement multiple interfaces that have methods with the same name. This feature allows disambiguation between interface methods by using the interface name as a qualifier.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-08-interfaces.rst#2025-04-21_snippet_9\n\nLANGUAGE: vala\nCODE:\n```\ninterface Foo {\n   public abstract int m();\n}\n\ninterface Bar {\n   public abstract string m();\n}\n\nclass Cls: Foo, Bar {\n   public int Foo.m() {\n      return 10;\n   }\n\n   public string Bar.m() {\n      sreturn \"bar\";\n   }\n}\n\nvoid main () {\n   var cls = new Cls ();\n   message (\"%d %s\", ((Foo) cls).m(), ((Bar) cls).m());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic ArrayList in Vala\nDESCRIPTION: This code snippet demonstrates the usage of Gee.ArrayList in Vala. It shows how to create a list, add elements, insert at a specific position, remove elements, iterate through the list, and access elements by index.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/gee-samples/01-list-sample.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nusing Gee;\n\nvoid main () {\n    var list = new ArrayList<int> ();\n    list.add (1);\n    list.add (2);\n    list.add (5);\n    list.add (4);\n    list.insert (2, 3);\n    list.remove_at (3);\n    foreach (int i in list) {\n        stdout.printf (\"%d\\n\", i);\n    }\n    list[2] = 10;                       // same as list.set (2, 10)\n    stdout.printf (\"%d\\n\", list[2]);    // same as list.get (2)\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Nested Symbol Structure in Vala\nDESCRIPTION: Demonstrates how Vala parses nested symbol names like 'Gtk.Orientation.HORIZONTAL' using a hierarchical UnresolvedSymbol structure. The parsing is done inside-out, where child nodes represent parent scopes.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/03-00-the-vala-compiler/03-04-symbol-resolution.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\n(UnresolvedSymbol\n    (UnresolvedSymbol\n        (UnresolvedSymbol(null, \"Gtk\"),\n         \"Orientation\"),\n     \"HORIZONTAL\")\n```\n\n----------------------------------------\n\nTITLE: Vala's Syntactic Sugar for Collection Operations\nDESCRIPTION: Examples of Vala's syntactic sugar for common collection operations and how they map to method calls, including contains(), get(), set(), and iterator methods.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/06-00-adding-vala-friendly-semantics/06-03-collections.rst#2025-04-21_snippet_7\n\nLANGUAGE: vala\nCODE:\n```\nx in a // → a.contains (x)\na[x, y] // → a.get (x, y)\na[x, y] = z // → a.set (x, y, z);\nforeach (var x in a) { /* … */ } // → var x; var i = a.iterator (); while ((x = i.next_value ()) != null) { /* … */ }\nforeach (var x in a) { /* … */ } // → var i = a.iterator (); while (i.next ()) { var x = i.get (); /* … */ }\n```\n\n----------------------------------------\n\nTITLE: Using While Loop in Vala\nDESCRIPTION: The while loop checks if *a* is greater than *b*, decrementing *a* until the condition is no longer true. It is useful for executing a block of code as long as a condition remains true.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-06-control-structures.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nwhile (a > b) { a--; }\n```\n\n----------------------------------------\n\nTITLE: Catching an IOError in Vala\nDESCRIPTION: Illustrates how to catch errors using a try-catch block in Vala. The example handles IOError and retrieves the error message from the exception object. Using 'catch' is necessary to manage exceptions properly.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-02-error-handling.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\ntry {\n    my_method();\n} catch (IOError e) {\n    stdout.printf(\"Error: %s\\n\", e.message);\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Error Codes in Vala\nDESCRIPTION: This snippet shows how to compare error codes using the 'is' operator within a catch block. It handles specific cases of errors selectively and uses GLib.error for additional error messaging.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-02-error-handling.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\nIOChannel channel;\ntry {\n    channel = new IOChannel.file(\"/tmp/my_lock\", \"w\");\n} catch (FileError e) {\n    if(e is FileError.EXIST) {\n        throw e;\n    }\n    GLib.error(\"\", e.message);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Collection Membership Using 'in' Operator in Vala\nDESCRIPTION: Demonstrates how to use the 'in' operator in Vala to check if a collection contains a specific element. This is equivalent to calling the contains() method on the collection, but provides a more readable syntax.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/gee-samples/04-syntactic-sugar.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nif (\"three\" in my_set) {    // same as my_set.contains (\"three\")\n    stdout.printf (\"heureka\\n\");\n}\n```\n\n----------------------------------------\n\nTITLE: Yielding to Another Asynchronous Method with Return and Out Params in Vala\nDESCRIPTION: This code shows how to yield to another asynchronous method that returns a value and also populates an out parameter. The calling method pauses and waits for the called method to complete before resuming. The return value of the called method is assigned to `status` and `text` is populated with the result.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-08-asynchronous-methods.rst#2025-04-21_snippet_8\n\nLANGUAGE: vala\nCODE:\n```\nvar status = yield fetch_webpage(url, out text);\n```\n\n----------------------------------------\n\nTITLE: Implementing a GLib.TypeModule Loader in Vala\nDESCRIPTION: This snippet defines a MyModule class that inherits from TypeModule and implements the necessary load and unload methods. It also includes a main function to demonstrate usage of the plugin loader.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/plugins/01-type-modules.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\n// loader.vala\nclass MyModule : TypeModule\n{\n      [CCode (has_target = false)]\n      private delegate Type PluginInitFunc(TypeModule module);\n\n      private GLib.Module module = null;\n\n      private string name = null;\n\n      public MyModule(string name)\n      {\n               this.name = name;\n      }\n\n      public override bool load()\n      {\n               string path = Module.build_path(null, name);\n               module = Module.open(path, GLib.ModuleFlags.BIND_LAZY);\n               if(null == module) {\n                        error(\"Module not found\");\n               }\n\n               void * plugin_init = null;\n               if(! module.symbol(\"plugin_init\", out plugin_init)) {\n                        error(\"No such symbol\");\n               }\n\n               ((PluginInitFunc) plugin_init)(this);\n\n               return true;\n      }\n\n      public override void unload()\n      {\n               module = null;\n\n               message(\"Library unloaded\");\n      }\n}\n\n// Never unref instance of GTypeModule\n// http://www.lanedo.com/~mitch/module-system-talk-guadec-2006/Module-System-Talk-Guadec-2006.pdf\nstatic TypeModule module = null;\n\nint main()\n{\n      module = new MyModule(\"plugin\");\n      module.load();\n\n      var o = GLib.Object.new(Type.from_name(\"MyClass\"));\n\n      // free last instance, plugin unload\n      o = null;\n\n      return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Owned Reference Property in Vala\nDESCRIPTION: The code correctly defines a property in Vala that returns a newly created object as an owned reference. It appropriately uses the owned keyword, illustrating custom control over object ownership.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-10-ownership.rst#2025-04-21_snippet_7\n\nLANGUAGE: vala\nCODE:\n```\npublic owned Object property { owned get { return new Object(); } }\n```\n\n----------------------------------------\n\nTITLE: GLib Object Instantiation and Usage in Vala\nDESCRIPTION: Shows how to create GLib objects and call their methods in Vala. Demonstrates the basic pattern for object instantiation and method calling.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/08-00-techniques/08-02-using-glib.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\n/* Instantiate with: */\nGLib.Foo foo = new GLib.Foo();\n\n/* Call an object member with: */\nfoo.bar();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Text File Viewer Application in Vala with GTK4\nDESCRIPTION: This snippet defines a TextFileViewerSample class that inherits from Gtk.Application. It creates a window with a toolbar containing an 'Open' button and a text view area. The application allows users to open and view text files.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/text-file-viewer.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\n// TextFileViewer.vala\n\npublic class TextFileViewerSample : Gtk.Application {\n    private Gtk.TextView text_view;\n    private Gtk.ApplicationWindow window;\n\n    public TextFileViewerSample () {\n        Object (application_id: \"com.example.TextFileViewerSample\");\n    }\n\n    public override void activate () {\n        this.window = new Gtk.ApplicationWindow (this) {\n            title = \"Text File Viewer\",\n            default_width = 400,\n            default_height = 300\n        };\n\n        var toolbar = new Gtk.Box (Gtk.Orientation.HORIZONTAL, 0);\n        toolbar.add_css_class (\"toolbar\");\n\n        var open_image = new Gtk.Image.from_icon_name (\"document-open\");\n        var open_label = new Gtk.Label (\"Open\");\n\n        var open_button_box = new Gtk.Box (Gtk.Orientation.HORIZONTAL, 0);\n        open_button_box.append (open_image);\n        open_button_box.append (open_label);\n\n        var open_button = new Gtk.Button ();\n        open_button.child = open_button_box;\n        open_button.clicked.connect(on_open_button_clicked);\n\n        toolbar.append (open_button);\n\n        this.text_view = new Gtk.TextView () {\n            editable = false,\n            cursor_visible = false,\n        };\n\n        var scroll_view = new Gtk.ScrolledWindow () {\n            hscrollbar_policy = Gtk.PolicyType.AUTOMATIC,\n            vscrollbar_policy = Gtk.PolicyType.AUTOMATIC,\n            vexpand = true,\n            valign = Gtk.Align.FILL,\n            child = this.text_view,\n        };\n\n        var vbox = new Gtk.Box (Gtk.Orientation.VERTICAL, 0);\n        vbox.append (toolbar);\n        vbox.append (scroll_view);\n\n        this.window.child = vbox;\n        this.window.present ();\n    }\n\n    private void on_open_button_clicked () {\n        var file_dialog = new Gtk.FileDialog () {\n            title = \"Open File\"\n        };\n\n        file_dialog.open.begin (this.window, null, (obj, res) => {\n            try {\n                var file = file_dialog.open.end (res);\n                uint8[] contents;\n                file.load_contents (null, out contents, null);\n                this.text_view.buffer.text = (string) contents;\n            } catch (Error e) {\n                stderr.printf (\"Error: %s\\n\", e.message);\n            }\n        });\n    }\n\n    public static int main (string[] args) {\n        var app = new TextFileViewerSample ();\n        return app.run (args);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Thread Synchronization using Join in Vala\nDESCRIPTION: This snippet shows how to use the 'join' method to ensure that the main thread waits for a child thread to complete execution. It is dependent on Vala's Thread module, and the 'join' function is essential for blocking the main thread until the child thread finishes. This is crucial for ensuring orderly thread completion.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-06-multi-threading.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nvar thread = new Thread<void> (\"child_thread\", thread_func);\nstdout.printf(\"main_thread is running\");\nthread.join();   // Note\n```\n\n----------------------------------------\n\nTITLE: Implementing Enum Methods in Vala\nDESCRIPTION: Demonstrates how to define a method directly within an enum in Vala. The 'Season' enum includes a 'is_hot()' method that checks if the season is summer.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/16-enums.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nenum Season {\n    SPRING, SUMMER, AUTUMN, WINTER;\n\n    public bool is_hot () {\n        return this == SUMMER;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking with 'is' Operator in Vala\nDESCRIPTION: Demonstrates how to check an object's type at runtime using the 'is' operator. Returns a boolean indicating if the object is of the specified type.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-11-run-time-type-information.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nbool b = object is SomeTypeName;\n```\n\n----------------------------------------\n\nTITLE: Constructor Chaining in Vala Classes\nDESCRIPTION: Illustrates constructor chaining in Vala using the 'this()' syntax. This example shows how to define multiple constructors that call each other to avoid code duplication, including a complete class implementation with a main function demonstrating usage.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-02-construction.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\npublic class Point : Object {\n    public double x;\n    public double y;\n\n    public Point(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public Point.rectangular(double x, double y) {\n        this(x, y);\n    }\n\n    public Point.polar(double radius, double angle) {\n        this.rectangular(radius * Math.cos(angle), radius * Math.sin(angle));\n    }\n}\n\nvoid main() {\n    var p1 = new Point.rectangular(5.7, 1.2);\n    var p2 = new Point.polar(5.7, 1.2);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtual Properties in Vala\nDESCRIPTION: This example shows how to create virtual properties in Vala. Similar to virtual methods, virtual properties allow subclasses to override the implementation of property getters and setters while maintaining polymorphic behavior.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-09-polymorphism.rst#2025-04-21_snippet_4\n\nLANGUAGE: vala\nCODE:\n```\nclass SuperClass : GLib.Object {\n    public virtual string prop_1 {\n        get {\n            return \"SuperClass.prop_1\";\n        }\n    }\n}\n\nclass SubClass : SuperClass {\n    public override string prop_1 {\n        get {\n            return \"SubClass.prop_1\";\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Properties in Vala\nDESCRIPTION: Shows how to use properties in Vala, which allow for more intuitive syntax when accessing or modifying object state.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-05-properties.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\nvar alice = new Person();\nalice.age = alice.age + 1;  // or even shorter:\nalice.age++;\n```\n\n----------------------------------------\n\nTITLE: Using the Base Keyword in Vala Method Overrides\nDESCRIPTION: This snippet demonstrates how to use the 'base' keyword to call the parent class implementation of a method from within an overridden method. This allows extending functionality while preserving the parent behavior.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-09-polymorphism.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\npublic override void method_name() {\n    base.method_name();\n    extra_task();\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Simple Types in Vala\nDESCRIPTION: Demonstrates how to bind simple types like integers, doubles, enums, and other simple types found in the same binding. This approach is also applicable to parented structs that are not directly pointed to.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields/08-01-structs.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\npublic int someInteger;\npublic double someDouble;\npublic SomeEnum someEnum;\npublic SimpleType someSimpleType;\npublic ParentedStruct parentedStruct;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Vala Interface\nDESCRIPTION: Shows how to implement the ITest interface in a class. The implementing class must provide concrete implementations for all abstract members defined in the interface.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-08-interfaces.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\npublic class Test1 : GLib.Object, ITest {\n    public int data_1 { get; set; }\n    public void method_1() {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Vala Library Implementation\nDESCRIPTION: Example of a simple Vala library class with basic methods for demonstration\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/06-00-libraries/06-02-creating-a-library.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\npublic class MyLib : Object {\n\n    public void hello() {\n        stdout.printf(\"Hello World, MyLib\\n\");\n    }\n\n    public int sum(int x, int y) {\n        return x + y;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Control with Locks in Vala\nDESCRIPTION: Demonstrates the use of the 'lock' keyword in Vala for resource control within multi-threaded applications. The class 'Test' comes with methods to increment and decrement a private member 'a'. Locks prevent race conditions by ensuring that changes to 'a' are atomic. Limitation includes locking only on the object members executing the code.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-06-multi-threading.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\npublic class Test : GLib.Object {\n\n    private int a { get; set; }\n\n    public void action_1() {\n        lock (a) {\n            int tmp = a;\n            tmp++;\n            a = tmp;\n        }\n    }\n\n    public void action_2() {\n        lock (a) {\n            int tmp = a;\n            tmp--;\n            a = tmp;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Constructors in Vala\nDESCRIPTION: This snippet demonstrates how to implement multiple constructors in Vala using named constructors. It shows three different constructors: a default constructor, one with an integer parameter named 'with_foo', and one with a string parameter named 'from_bar'.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/11-multiple-constructors.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nclass Foo : Object {\n    public Foo () { }\n    public Foo.with_foo (int foo) { }\n    public Foo.from_bar (string bar) { }\n}\nnew Foo ();\nnew Foo.with_foo (42);\nnew Foo.from_bar (\"hello\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nullability with Out Parameters in Vala\nDESCRIPTION: This code demonstrates how Vala handles nullability with out parameters. It shows a delegate declaration, a function that returns a delegate through an out parameter, and demonstrates that while the returned delegate shouldn't be null, passing null as an out parameter is allowed by Vala.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/05-00-fundamentals-of-binding-a-c-function/05-03-nullability.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\npublic delegate void ComputeFunc (int x);\npublic void get_compute_func (double epsilon, out ComputeFunc func);\n\nComputeFunc f;\nget_compute_func (3.14158, out f);\nf (3); // f should never be a null pointer.\nget_compute_func (2.72, null); // This is perfectly okay according to Vala.\n```\n\n----------------------------------------\n\nTITLE: Null Coalescing Operator in Vala\nDESCRIPTION: This snippet explains the null coalescing operator (??) which returns the left operand if it is not null; otherwise, it returns the right operand. It's useful for providing default values.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-05-operators.rst#2025-04-21_snippet_11\n\nLANGUAGE: vala\nCODE:\n```\n??\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Delegates and Lambdas in Vala\nDESCRIPTION: This snippet demonstrates Vala's approach to delegates and lambda expressions, which is more concise than C#. It shows direct method assignment and lambda expression without type declarations.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/13-delegates-lambdas.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\ndelegate void DelegateType (string s);\n\nvoid method (string s) {\n    stdout.printf (\"%s\\n\", s);\n}\nDelegateType d1 = method;\nDelegateType d2 = (s) => { stdout.printf (\"%s\\n\", s); };\n```\n\n----------------------------------------\n\nTITLE: Mixin Pattern with Static Interface Methods\nDESCRIPTION: Demonstrates a more complex pattern for implementing mixins in Vala using interfaces with static methods. This pattern allows derived classes to override methods while still having access to the default implementation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-08-interfaces.rst#2025-04-21_snippet_8\n\nLANGUAGE: vala\nCODE:\n```\npublic interface Callable : GLib.Object {\n   public abstract bool answering { get; protected set; }\n   public abstract void answer ();\n   public abstract bool hang ();\n   public static bool default_hang (Callable call)\n   {\n      stdout.printf (\"At Callable.hang()\\n\");\n      call.answering = false;\n      return true;\n   }\n}\n\npublic abstract class Caller : GLib.Object, Callable\n{\n   public bool answering { get; protected set; }\n   public void answer ()\n   {\n     stdout.printf (\"At Caller.answer()\\n\");\n     answering = true;\n     hang ();\n   }\n   public virtual bool hang () { return Callable.default_hang (this); }\n}\n\npublic class TechPhone : Caller {\n    public string number { get; set; }\n}\n\npublic class Phone : Caller {\n   public override bool hang () {\n   stdout.printf (\"At Phone.hang()\\n\");\n   return false;\n}\n\n   public static void main ()\n   {\n      var f = (Callable) new Phone ();\n      f.answer ();\n      if (f.hang ())\n         stdout.printf(\"Hand done.\\n\");\n      else\n         stdout.printf(\"Hand Error!\\n\");\n\n      var t = (Callable) new TechPhone ();\n      t.answer ();\n      if (t.hang ())\n         stdout.printf(\"Tech Hand done.\\n\");\n      else\n         stdout.printf(\"Tech Hand Error!\\n\");\n      stdout.printf(\"END\\n\");\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to Properties in Vala\nDESCRIPTION: Shows how to add short (nick) and long (blurb) descriptions to properties using the Description attribute.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-05-properties.rst#2025-04-21_snippet_7\n\nLANGUAGE: vala\nCODE:\n```\n[Description(nick = \"age in years\", blurb = \"This is the person's age in years\")]\npublic int age { get; set; default = 32; }\n```\n\n----------------------------------------\n\nTITLE: Implementing and Using Signals in Vala\nDESCRIPTION: This Vala code snippet shows the equivalent implementation using signals. It demonstrates how to declare a signal, emit it, and connect/disconnect signal handlers. The example includes both a named method and a lambda expression as signal handlers. Vala simplifies the syntax compared to C#.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/14-events.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nclass Foo {\n    public signal void some_event (int i);\n}\n\nclass Demo {\n    static void on_some_event (Foo sender, int i) {\n        stdout.printf (\"Handler A: %d\\n\", i);\n    }\n\n    static void main () {\n        var foo = new Foo ();\n        foo.some_event.connect (on_some_event);\n        foo.some_event.connect ((s, i) => stdout.printf (\"Handler B: %d\\n\", i));\n        foo.some_event (42);\n        foo.some_event.disconnect (on_some_event);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Getter and Setter Methods in Vala\nDESCRIPTION: Shows how to use getter and setter methods to modify an object's property, which can be cumbersome for simple operations.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-05-properties.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nvar alice = new Person();\nalice.set_age(alice.get_age() + 1);\n```\n\n----------------------------------------\n\nTITLE: Defining Weak References in Vala\nDESCRIPTION: This code snippet demonstrates how to use the 'weak' modifier in Vala to break reference cycles in data structures, such as in a doubly-linked list. By marking a reference with 'weak', its existence doesn't contribute to the reference count, thus preventing memory leaks caused by cyclic dependencies. No additional dependencies are required for this implementation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-09-weak-references.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nclass Node {\n    public weak Node prev;\n    public Node next;\n}\n```\n\n----------------------------------------\n\nTITLE: Common Vala Code Attribute Examples\nDESCRIPTION: Examples of commonly used Vala attributes including CCode for bindings in vapi files and DBus for exporting remote interfaces.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-08-code-attributes.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\n[CCode(...)]\n```\n\nLANGUAGE: vala\nCODE:\n```\n[DBus(...)]\n```\n\n----------------------------------------\n\nTITLE: Using Foreach Loop in Vala\nDESCRIPTION: The foreach loop iterates over each integer in an array or iterable collection, printing each value. This is an effective way to process all elements in a collection without needing an explicit index.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-06-control-structures.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\nforeach (int a in int_array) { stdout.printf(\"%d\\n\", a); }\n```\n\n----------------------------------------\n\nTITLE: Initializing a Gee HashMap in Vala\nDESCRIPTION: This Vala code snippet demonstrates the instantiation of a Gee HashMap with custom hash and equal functions. Gee.HashMap maps keys of type `K` to values of type `V`, supporting optional customization of hashing and equality tests. This snippet highlights the instantiation process, which can be customized when default behavior needs to be overridden.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-04-collections.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nvar map = new Gee.HashMap<Foo, Object>(foo_hash, foo_equal);\n```\n\n----------------------------------------\n\nTITLE: Connecting to Property Change Notifications in Vala\nDESCRIPTION: Demonstrates how to connect to the 'notify' signal to receive notifications when any property of an object changes.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-05-properties.rst#2025-04-21_snippet_8\n\nLANGUAGE: vala\nCODE:\n```\nobj.notify.connect((s, p) => {\n    stdout.printf(\"Property '%s' has changed!\\n\", p.name);\n});\n```\n\n----------------------------------------\n\nTITLE: Increment and Decrement Operators in Vala\nDESCRIPTION: This snippet explains increment (++) and decrement (--) operations that perform implicit assignment and take one argument (an identifier). It describes how these operators can be used in prefix or postfix positions.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-05-operators.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\n++, --\n\n```\n\n----------------------------------------\n\nTITLE: Using Anonymous Methods / Closures in Vala\nDESCRIPTION: This snippet showcases how to define and use anonymous methods (lambdas) in Vala, including assigning them to delegate variables and passing them as arguments.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-07-language-elements.rst#2025-04-21_snippet_4\n\nLANGUAGE: vala\nCODE:\n```\n(a) => { stdout.printf(\"%d\\n\", a); }\n\ndelegate void PrintIntFunc(int a);\n\nvoid main() {\n    PrintIntFunc p1 = (a) => { stdout.printf(\"%d\\n\", a); };\n    p1(10);\n\n    PrintIntFunc p2 = (a) => stdout.printf(\"%d\\n\", a);\n    p2(20);\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Vala Class Instance\nDESCRIPTION: Shows how to create an instance of a custom class, set public field values, and call instance methods. This demonstrates basic object instantiation and manipulation in Vala.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-01-basics.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nTestClass t = new TestClass();\nt.first_data = 5;\nt.method_1();\n```\n\n----------------------------------------\n\nTITLE: Disabling Change Notifications for Properties in Vala\nDESCRIPTION: Demonstrates how to disable change notifications for a specific property using the CCode attribute.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-05-properties.rst#2025-04-21_snippet_10\n\nLANGUAGE: vala\nCODE:\n```\npublic class MyObject : Object {\n    [CCode(notify = false)]\n    // notify signal is NOT emitted upon changes in the property\n    public int without_notification { get; set; }\n    // notify signal is emitted upon changes in the property\n    public int with_notification { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Pointer Members and Methods\nDESCRIPTION: Shows syntax for accessing methods and data members through a pointer using the arrow notation. Enables direct interaction with pointer-referenced objects.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-12-pointers.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\no->method_1();\no->data_1;\n```\n\n----------------------------------------\n\nTITLE: Defining a GLib.TypeModule Plugin Class in Vala\nDESCRIPTION: This snippet defines a MyClass that inherits from Object and includes static construct and destruct blocks. It also implements a plugin_init function required for GLib.TypeModule.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/plugins/01-type-modules.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\n// plugin.vala\npublic class MyClass : Object\n{\n        static construct\n        {\n                message(\"MyClass init\");\n        }\n\n        static ~MyClass()\n        {\n                message(\"MyClass deinit\");\n        }\n}\n\n[ModuleInit]\nType plugin_init(GLib.TypeModule type_modul)\n{\n        return typeof(MyClass);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Getter and Setter Methods in Vala\nDESCRIPTION: Demonstrates the traditional way of implementing getter and setter methods for a private field in a Vala class.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-05-properties.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nclass Person : Object {\n    private int age = 32;\n\n    public int get_age() {\n        return this.age;\n    }\n\n    public void set_age(int age) {\n        this.age = age;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the 'is' Operator for Type Checking in Vala\nDESCRIPTION: Example showing how to use the 'is' operator to test if an object is an instance of a specific class or implements an interface.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/faq.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nvar wi = Gtk.Button();\nif (wi is Gtk.Widget)\n    stdout.printf(\"Is a Widget.\\n\");\nif (wi is Gtk.Button)\n    stdout.printf(\"Is a Button.\\n\");\n```\n\n----------------------------------------\n\nTITLE: Performing Regular Expression Replacement in Vala\nDESCRIPTION: This example demonstrates how to replace matched patterns in a string using a regular expression in Vala. It replaces occurrences of 'foo', 'bar', or 'cow' with 'thing' and prints the result. The replacement operation is performed with a specified limit and offset.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/05-00-experimental-features/05-02-regular-expression-literals.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\nvar r = /(foo|bar|cow)/;\\nvar o = r.replace (\"this foo is great\", -1, 0, \"thing\");\\nprint (\"%s\\n\", o);\n```\n\n----------------------------------------\n\nTITLE: Using Varargs for Animation Properties\nDESCRIPTION: This snippet demonstrates how varargs can be used in method calls for animation properties, allowing for a more flexible method call without strict type requirements. The first method call uses named arguments, and the second uses string-value pairs. This simplifies property settings for animations in Vala.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-11-variable-length-argument-lists.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\nactor.animate (AnimationMode.EASE_OUT_BOUNCE, 3000, x: 100.0, y: 200.0, rotation_angle_z: 500.0, opacity: 0);\n```\n\nLANGUAGE: vala\nCODE:\n```\nactor.animate (AnimationMode.EASE_OUT_BOUNCE, 3000, \"x\", 100.0, \"y\", 200.0, \"rotation-angle-z\", 500.0, \"opacity\", 0);\n```\n\n----------------------------------------\n\nTITLE: Text Highlighting in Vala Documentation Comments\nDESCRIPTION: Demonstrates various text formatting options available in Vala documentation comments, including bold, italic, underlined, and block quote styling. The example also shows how these styles can be combined.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/valadoc-guide/03-00-documentation-comment-markup/03-02-formatting.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\n/**\n * ''bold'' //italic// __underlined__ ``block quote``,\n * ''//__bold italic underlined__//'''\n */\n```\n\n----------------------------------------\n\nTITLE: Calling Vala Methods with Arguments\nDESCRIPTION: This code snippet demonstrates how to call the previously defined Vala methods, showcasing the behavior of value-type and reference-type parameters, including 'out' and 'ref' usage.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-03-parameter-directions.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nint a = 1;\nint b;\nint c = 3;\nmethod_1(a, out b, ref c);\n\nObject o = new Object();\nObject p;\nObject q = new Object();\nmethod_2(o, out p, ref q);\n```\n\n----------------------------------------\n\nTITLE: Static Type Casting in Vala\nDESCRIPTION: Demonstrates static type casting from int to float using parenthesis notation. Static casting performs no runtime type checking.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-04-data-types.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nint i = 10;\nfloat j = (float) i;\n```\n\n----------------------------------------\n\nTITLE: Defining Interface Prerequisites\nDESCRIPTION: Shows how to define prerequisites for interfaces, requiring implementing classes to implement other interfaces. This is Vala's approach to interface inheritance.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-08-interfaces.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\npublic interface List : Collection, Traversable {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Vala Methods with Parameters\nDESCRIPTION: This snippet illustrates the definition of Vala methods that use 'out' and 'ref' modifiers for parameters. It highlights the ability to modify arguments and the behavior of value and reference types during method calls.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-03-parameter-directions.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nvoid method_1(int a, out int b, ref int c) { ... }\nvoid method_2(Object o, out Object p, ref Object q) { ... }\n```\n\n----------------------------------------\n\nTITLE: Adding Images and Links in Vala Documentation Comments\nDESCRIPTION: Shows how to include hyperlinks and images in Vala documentation comments. Links can have custom text, and images can include optional alt text. Note that only local images can be used in Vala documentation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/valadoc-guide/03-00-documentation-comment-markup/03-02-formatting.rst#2025-04-21_snippet_4\n\nLANGUAGE: vala\nCODE:\n```\n/**\n * [[https://vala.dev|Vala]] [[https://vala.dev]]\n *\n * {{/assets/logo.png}} {{/assets/logo.png|alt-message}}\n */\n```\n\n----------------------------------------\n\nTITLE: Declaring Nullable and Non-Nullable Objects in Vala\nDESCRIPTION: This snippet shows how to declare not nullable and nullable object references in Vala. The declaration uses the '?' operator to mark an object as nullable.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/05-00-experimental-features/05-03-strict-non-null-mode.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nObject o1 = new Object();     // not nullable\nObject? o2 = new Object();    // nullable\n```\n\n----------------------------------------\n\nTITLE: Initializing Structs in Vala\nDESCRIPTION: This snippet illustrates struct initialization in Vala, which doesn't use the 'new' operator. It shows three methods: default constructor-like syntax, object initializer-like syntax, and a compact initialization syntax. Vala structs must be initialized before use and cannot implement interfaces.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/17-struct-initialization.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nvar p1 = Point ();\nvar p2 = Point () { x = 2, y = 3 };\nPoint p3 = { 2, 3 };\n```\n\n----------------------------------------\n\nTITLE: Compound Assignment Operators in Vala\nDESCRIPTION: This snippet describes compound assignment operators (+=, -=, /=, *=, %=) which perform arithmetic operations between the left and right operands and assign the result to the left operand. The left operand must be an identifier.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-05-operators.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\n+=, -=, /=, *=, %=\n\n```\n\n----------------------------------------\n\nTITLE: Creating GTK+ Demo Window in Vala\nDESCRIPTION: This Vala code creates a basic GTK+ window with a button, similar to the C# version. It demonstrates Vala's syntax for GTK+ programming, including window setup, event handling, and application initialization.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/37-gtk-demo-app.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nusing Gtk;\n\nclass Demo : Window {\n\n    public Demo () {\n        this.title = \"This is a window\";\n        set_default_size (250, 200);\n        set_position (WindowPosition.CENTER);\n\n        this.destroy.connect (Gtk.main_quit);\n\n        var button = new Button.with_label (\"Click\");\n        add (button);\n        show_all ();\n    }\n\n    static void main (string[] args) {\n        Gtk.init (ref args);\n        new Demo ();\n        Gtk.main ();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Rectangular Multi-Dimensional Arrays in Vala\nDESCRIPTION: Illustrates the syntax for declaring rectangular multi-dimensional arrays in Vala, which is currently the only supported type of multi-dimensional array.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/18-multi-dimensional-arrays.rst#2025-04-21_snippet_2\n\nLANGUAGE: Vala\nCODE:\n```\nint[,] rectangularArray;\n```\n\n----------------------------------------\n\nTITLE: Implementing Indexer-like Functionality in Vala using get and set methods\nDESCRIPTION: This Vala code snippet demonstrates how to implement indexer-like functionality using separate get and set methods. It defines a generic SampleCollection class with get and set methods for array access. The main function shows how to use these methods like an indexer.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/34-indexers.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nclass SampleCollection<T> {\n\n    private T[] arr = new T[100];\n\n    public T get (int i) {\n        return arr[i];\n    }\n\n    public void set (int i, T item) {\n        arr[i] = item;\n    }\n}\n\nvoid main (string[] args) {\n    var string_collection = new SampleCollection<string> ();\n\n    string_collection[0] = \"Hello, World\";\n    stdout.printf (\"%s\\n\", string_collection[0]);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Headers in Vala Documentation Comments\nDESCRIPTION: Shows how to create section headers of different levels in Vala documentation comments using equal signs. The number of equal signs on each side determines the header level (from 1 to 4).\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/valadoc-guide/03-00-documentation-comment-markup/03-02-formatting.rst#2025-04-21_snippet_6\n\nLANGUAGE: vala\nCODE:\n```\n/**\n * Short description\n *\n * = header 1 =\n * == header 2 ==\n * === header 3 ===\n * ==== header 4 ====\n */\n```\n\n----------------------------------------\n\nTITLE: Automatic Unowned Property Storage in Vala\nDESCRIPTION: In this snippet, Vala code automatically sets a property's storage as unowned. The unowned modifier ensures that the property does not increase the reference count of the object.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-10-ownership.rst#2025-04-21_snippet_5\n\nLANGUAGE: vala\nCODE:\n```\npublic unowned Object property { get; private set; }\n```\n\n----------------------------------------\n\nTITLE: Implementing Interface Prerequisites in Vala\nDESCRIPTION: Demonstrates interface prerequisites in Vala, which is similar to interface inheritance in C# but allows for class prerequisites as well.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/15-interfaces.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\ninterface IfaceA : Object {\n    public abstract void method_a ();\n}\n\ninterface IfaceB : Object, IfaceA {\n    public abstract void method_b ();\n}\n\nclass Demo : Object, IfaceA, IfaceB {\n    public void method_a () { }\n    public void method_b () { }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Specific Property Change Notifications in Vala\nDESCRIPTION: Shows how to connect to change notifications for a specific property using its string representation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-05-properties.rst#2025-04-21_snippet_9\n\nLANGUAGE: vala\nCODE:\n```\nalice.notify[\"age\"].connect((s, p) => {\n    stdout.printf(\"age has changed\\n\");\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Vala Grammar in BNF\nDESCRIPTION: This extensive BNF (Backus-Naur Form) grammar defines the syntax of the Vala programming language. It covers various language constructs including expressions, declarations, and type definitions.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/03-00-the-vala-compiler/03-02-parser.rst#2025-04-21_snippet_16\n\nLANGUAGE: bnf\nCODE:\n```\n// parse_file\ninput ::= using_directive* namespace_member*\n\n// parse_using_directives\nusing_directive ::= \"using\" symbol [ \",\" symbol ]* \";\"\n\n// parse_symbol_name\nsymbol ::= symbol_part [ \".\" symbol_part ]*\n\nsymbol_part ::= ( \"global::\" identifier ) | identifier\n\nnamespace_member ::= [ attributes ]\n                     ( namespace_declaration |\n                       class_declaration |\n                       interface_declaration |\n                       struct_declaration |\n                       enum_declaration |\n                       errordomain_declaration |\n                       method_declaration |\n                       field_declaration |\n                       constant_declaration )\n\nattributes ::= attribute*\n\nattribute ::= \"[\" identifier [ attribute_arguments ] \"]\"\n\nattribute_arguments ::= \"(\" attribute_argument [ \",\" attribute_argument ]* \")\"\n\nattribute_argument ::= identifier \"=\" expression\n\nexpression ::= lambda_expression | ( conditional_expression [ assignment_operator expression ] )\n\n// get_assignment_operator plus >>=\nassignment_operator ::= \"=\" | \"+=\"| \"-=\" | \"|=\" | \"&=\" | \"^=\" | \"/=\" | \"*=\" | \"%=\" | \"<<=\" | \">>=\" \n\nconditional_expression ::= coalescing_expression [ \"?\" expression \":\" expression ]\n\ncoalescing_expression ::= conditional_or_expression [ \"??\" coalescing_expression ]\n\nconditional_or_expression ::= conditional_and_expression [ \"||\" conditional_and_expression ]\n\nconditional_and_expression ::= in_expression [ \"&&\" in_expression ]\n\nin_expression ::= inclusive_or_expression [ \"in\" inclusive_or_expression ]\n\ninclusive_or_expression ::= exclusive_or_expression [ \"|\" exclusive_or_expression ]\n\nexclusive_or_expression ::= and_expression [ \"^\" and_expression ]\n\nand_expression ::= equality_expression [ \"&\" equality_expression ]\n\nequality_expression ::= relational_expression [ ( \"==\" | \"!=\" ) relational_expression ]*\n\nrelational_expression ::= shift_expression [ ( \"<\" | \"<=\" | \">\" | \">=\" ) shift_expression ) |\n                                             ( \"is\" type ) | ( \"as\" type ) ]*\n\n// parse_type\ntype ::= ( \"void\" [ \"*\" ]* ) | ( [ \"dynamic\" ] [ \"unowned\" ] symbol [ type_arguments ] [ \"*\" ]* [ \"?\" ] array_type* )\n\n// parse_type can_weak\ntype_weak ::= ( \"void\" [ \"*\" ]* ) | ( [ \"dynamic\" ] [ \"unowned\" | \"weak\" ] symbol [ type_arguments ] [ \"*\" ]* [ \"?\" ] array_type* )\n\narray_type ::= \"[\" array_size \"]\" [ \"?\" ]\n\nshift_expression ::= additive_expression [ ( \"<<\" | \">>\" ) additive_expression ]*\n\nadditive_expression ::= multiplicative_expression [ ( \"+\" | \"-\" ) multiplicative_expression ]*\n\nmultiplicative_expression ::= unary_expression [ ( \"*\" | \"/\" | \"%\" ) unary_expression ]*\n\nunary_expression ::= ( unary_operator unary_expression ) |\n                     ( \"(\" ( \"owned\" | \"void\" | \"dynamic\" | \"!\" | type ) \")\" unary_expression ) | \n                     primary_expression\n\n// get_unary_operator\nunary_operator ::= \"+\" | \"-\" | \"!\" | \"~\" | \"++\" | \"--\" | \"*\" | \"&\" | \"(owned)\" | \"(void)\" | \"(dynamic)\" | \"(!)\"\n\nprimary_expression ::= ( literal | initializer | tuple | template | open_regex_literal | this_access | base_access |\n                       object_or_array_creation_expression | yield_expression | sizeof_expression | typeof_expression |\n                       simple_name )\n                       [ member_access | pointer_member_access | method_call | element_access |\n                         post_increment_expression | post_decrement_expression ]*\n\nliteral ::= \"true\" | \"false\" | \"null\" | integer_literal | real_literal | character_literal | regex_literal |\n            string_literal | template_string_literal | verbatim_string_literal\n\ninitializer ::= \"{\" argument [ \",\" argument ]* \"}\"\n\n// parse_argument_list\narguments ::= argument [ \",\" argument ]*\n\nargument ::= \"ref\" expression | \"out\" expression | expression | identifier [ \":\" expression ]\n\ntuple ::= \"(\" expression [ \",\" expression ]* \")\"\n\ntemplate ::= '@\"' [ expression \",\" ]* '\"'\n\n// parse_regex_literal\nopen_regex_literal ::= \"/\" literal\n\nthis_access ::= \"this\"\n\nbase_access ::= \"base\"\n\nobject_or_array_creation_expression ::= \"new\" member ( object_creation_expression | array_creation_expression )\n\nobject_creation_expression ::= \"(\" [ arguments ] \")\" [ object_initializer ]\n\nobject_initializer ::= \"{\" member_initializer [ \",\" member_initializer ] \"}\"\n\nmember_initializer ::= identifier \"=\" expression\n\narray_creation_expression ::= [ \"[\" \"]\" ]* [ \"[\" [ array_size ] \"]\" ] [ initializer ]\n\narray_size ::= expression [ \",\" expression ]*\n\n// parse_member_name\nmember ::= member_part [ \".\" member_part ]*\n\nmember_part ::= ( \"global::\" identifier || identifier ) [ type_arguments ]\n\n// parse_type_argument_list\ntype_arguments ::= \"<\" type [ \",\" type ]* \">\"\n\nyield_expression ::= \"yield\" [ base_access \".\" ] member method_call\n\nmethod_call ::= \"(\" [ arguments ] \")\" [ object_initializer ]\n\nsizeof_expression ::= \"sizeof\" \"(\" type \")\"\n\ntypeof_expression ::= \"typeof\" \"(\" type \")\"\n\nsimple_name ::= ( \"global::\" identifier | identifier ) [ type_arguments ]\n\nlambda_expression ::= lambda_expression_params \"=>\" lambda_expression_body\n\nlambda_expression_params ::= identifier | ( \"(\" [ identifier [ \",\" identifier ]* ] \")\" )\n\nlambda_expression_body ::= expression | block\n\nmember_declaration_modifiers ::= member_declaration_modifier [ \" \" member_declaration_modifier ]*\nmember_declaration_modifier ::= \"async\" | \"class\" | \"extern\" | \"inline\" | \"static\" | \"abstract\" | \"virtual\" | \"override\" | \"new\"\n\nconstructor_declaration ::= [ constructor_declaration_modifiers ] \"construct\" block\n\nconstructor_declaration_modifiers ::= constructor_declaration_modifier [ \" \" constructor_declaration_modifier ]*\nconstructor_declaration_modifier ::= \"async\" | \"class\" | \"extern\" | \"inline\" | \"static\" | \"abstract\" | \"virtual\" | \"override\"\n\ndestructor_declaration ::= [ constructor_declaration_modifiers ] \"~\" \"(\" \")\" block\n\nclass_declaration ::= [ access_modifier ] [ type_declaration_modifiers ] \"class\" symbol [ type_arguments ]\n                      [ \":\" base_types ] \"{\" class_member* \"}\"\n\nbase_types ::= type [ \",\" type ]*\n\nclass_member ::= [ attributes ]\n                 ( class_declaration |\n                   struct_declaration |\n                   enum_declaration |\n                   delegate_declaration |\n                   method_declaration |\n                   signal_declaration |\n                   field_declaration |\n                   constant_declaration |\n                   property_declaration |\n                   constructor_declaration |\n                   destructor_declaration )\n\naccess_modifier ::= \"private\" \"protected\" \"internal\" \"public\"\n\ntype_declaration_modifiers ::= type_declaration_modifier [ \" \" type_declaration_modifier ]*\ntype_declaration_modifier ::= \"abstract\" | \"extern\" | \"static\"\n\nenum_declaration ::= [ access_modifier ] [ type_declaration_modifiers ] \"enum\" symbol\n                     \"{\" enumvalues [ \";\" [ method_declaration | constant_declaration ]* ] \"}\"\n\nenumvalues ::= enumvalue [ \",\" enumvalue ]*\nenumvalue ::= [ attributes ] identifier [ \"=\" expression ]\n\nerrordomain_declaration ::= [ access_modifier ] [ type_declaration_modifiers ] \"errordomain\" symbol\n                            \"{\" errorcodes [ \";\" method_declaration* ] \"}\"\n\nerrorcodes ::= errorcode [ \",\" errorcode ]*\nerrorcode ::= [ attributes ] identifier [ \"=\" expression ]\n\ninterface_declaration ::= [ access_modifier ] [ type_declaration_modifiers ] \"interface\" symbol [ type_parameters ]\n                          [ \":\" base_types ] \"{\" interface_member* \"}\"\n\n// parse_type_parameter_list\ntype_parameters ::= \"<\" identifier [ \",\" identifier ]* \">\"\n\ninterface_member ::= [ attributes ]\n                     ( class_declaration |\n```\n\n----------------------------------------\n\nTITLE: Static Constructor in Vala\nDESCRIPTION: This code shows how to define a static constructor in Vala, which is executed when the class is registered with the type system. This is analogous to static initializer blocks in Java and the `class_init` function in GObject. It is useful for performing class-level initialization tasks.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-14-gobject-style-construction.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\n/* This snippet of code is run when the class\n * is registered with the type system */\n static construct {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Binding C Array Functions in Vala\nDESCRIPTION: This Vala code demonstrates how to bind the C functions that return arrays with non-standard length specifications. It uses CCode attributes to handle array length correctly and creates wrapper functions to manage memory ownership.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/10-00-awkward-situations/10-01-array-lengths.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (cname = \"get_array\")]\nprivate int _get_array ([CCode (array_length = false)] out foo[] a);\n[CCode (cname = \"vala_get_array\")]\npublic foo[] get_array () {\n    foo[] temp;\n    var len = _get_array (out temp);\n    temp.length = len;\n    return (owned) temp;\n}\n\n[CCode (cname = \"array_with_length\", destroy_function = \"\")]\nprivate struct array_with_length {\n    [CCode (array_length_name = \"size\")]\n    foo[] data;\n}\n[CCode (cname = \"get_data\")]\nprivate void _get_data (out array_with_length a);\n[CCode (cname = \"vala_get_data\")]\npublic foo[] get_data () {\n    array_with_length temp;\n    _get_data (out temp);\n    return (owned) a.data;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Namespace in Vala\nDESCRIPTION: This code snippet illustrates the creation of a namespace in Vala and demonstrates how to use a 'using' directive to import it. It emphasizes the use of qualified names in the context of namespaces.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-07-language-elements.rst#2025-04-21_snippet_5\n\nLANGUAGE: vala\nCODE:\n```\nnamespace NameSpaceName {\n    // ...\n}\n\nusing NameSpaceName;\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Passing Callbacks with User Data in Vala\nDESCRIPTION: Examples demonstrating two techniques for passing callbacks with associated data in Vala: using instance methods and using closures.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/faq.rst#2025-04-21_snippet_7\n\nLANGUAGE: vala\nCODE:\n```\nthe_method (some_instance.some_method);\n```\n\nLANGUAGE: vala\nCODE:\n```\nvar some_var = ...;\nthe_method (() => { use some_var });\n```\n\n----------------------------------------\n\nTITLE: Type Inference Examples in Vala\nDESCRIPTION: Shows various examples of using the 'var' keyword for type inference with different types including objects, strings, generic collections, and primitive types.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-04-data-types.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nvar p = new Person();     // same as: Person p = new Person();\nvar s = \"hello\";          // same as: string s = \"hello\";\nvar l = new List<int>();  // same as: List<int> l = new List<int>();\nvar i = 10;               // same as: int i = 10;\n```\n\n----------------------------------------\n\nTITLE: Implementing Vala bindings for C transaction functions with instance destruction handling\nDESCRIPTION: Vala code that binds to the C transaction functions using the [Compact] attribute and the [DestroysInstance] attribute. It shows how to properly handle methods that destroy instances, including using the 'owned' keyword for the static try_commit method.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/05-00-fundamentals-of-binding-a-c-function/05-11-methods-that-destroy-the-instance-reference.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\n[Compact]\n[CCode (cname = \"Transaction\", free_function = \"transaction_abort\")]\npublic class Transaction {\n    public Transaction (Database db);\n    [DestroysInstance]\n    public void commit ();\n    public static bool try_commit (owned Transaction tx);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Arrays in Vala\nDESCRIPTION: Shows the Vala equivalent of the C array declarations. In Vala, fixed-length arrays have the length specified after the variable name, while dynamically-sized arrays use square brackets after the type without specifying a length.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields/08-03-arrays.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\npublic int foo[20];\npublic int[] bar;\n```\n\n----------------------------------------\n\nTITLE: Valid Property Getter Method in Vala\nDESCRIPTION: This example shows a valid property getter in Vala that returns an unowned string, demonstrating correct ownership practices. The method returns a literal string owned by the program module.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-10-ownership.rst#2025-04-21_snippet_4\n\nLANGUAGE: vala\nCODE:\n```\npublic string property {\n    get {\n        return getter_method();   // GOOD: getter_method returns an unowned value\n    }\n}\n\npublic unowned string getter_method() {\n    return \"some text\";\n    // Don't be alarmed that the text is not assigned to any strong variable.\n    // Literal strings in Vala are always owned by the program module itself,\n    // and exist as long as the module is in memory\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Interface in Vala\nDESCRIPTION: Shows how to declare a simple interface in Vala, noting the use of 'public abstract' keywords for method declarations.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/15-interfaces.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\ninterface Foo {\n    public abstract void foo (int i);\n    public abstract int bar (string s, double d);\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Objects with Named Constructors in Vala\nDESCRIPTION: Shows how to instantiate objects using different named constructors in Vala. This demonstrates the proper syntax for using the default constructor and constructors with name extensions.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-02-construction.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nnew Button();\nnew Button.with_label(\"Click me\");\nnew Button.from_stock(Gtk.STOCK_OK);\n```\n\n----------------------------------------\n\nTITLE: Declaring Null-terminated Array in C\nDESCRIPTION: Shows a declaration of a null-terminated array of pointers in C, commonly used for strings or arrays of objects.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields/08-03-arrays.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nFoo **foos;\n```\n\n----------------------------------------\n\nTITLE: Calling a Method with Varargs in Vala's Main Function\nDESCRIPTION: The `main` function shows how to call `method_with_varargs` with a fixed integer and multiple string-double pairs. This illustrates the practical use of variable-length arguments where the last argument passed is implicitly `null` to terminate the varargs list.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-11-variable-length-argument-lists.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\nvoid main() {\n       method_with_varargs(42, \"foo\", 0.75, \"bar\", 0.25, \"baz\", 0.32);\n   }\n```\n\n----------------------------------------\n\nTITLE: Explicit Unowned Property Storage in Vala\nDESCRIPTION: This code demonstrates explicitly setting a Vala property to use unowned storage and providing a getter method. It reinforces that unowned properties do not manage the lifecycle of referenced objects.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-10-ownership.rst#2025-04-21_snippet_6\n\nLANGUAGE: vala\nCODE:\n```\nprivate unowned Object _property;\n\npublic Object property {\n    get { return _property; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Method Hiding with 'new' Modifier in Vala\nDESCRIPTION: This example demonstrates how to use the 'new' modifier to hide an inherited method. The Bar class hides the my_method() from its parent class Foo with a new implementation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-10-method-hiding.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nclass Foo : Object {\n    public void my_method() { }\n}\n\nclass Bar : Foo {\n    public new void my_method() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Weak References in Vala\nDESCRIPTION: Demonstrates the use of the 'weak' keyword in Vala to create weak references, which are used to break reference cycles in automatic reference counting systems.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/27-memory-management.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nweak\n```\n\n----------------------------------------\n\nTITLE: Creating Objects from Type Information in Vala\nDESCRIPTION: Demonstrates how to get type information using typeof() operator and create new instances using Object.new(). This uses the construct {} block for object initialization.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-11-run-time-type-information.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\nType type = typeof(Foo);\nFoo foo = (Foo) Object.new(type);\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-Only Properties in Vala\nDESCRIPTION: Demonstrates how to create read-only properties in Vala by making the setter private or omitting it entirely.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-05-properties.rst#2025-04-21_snippet_6\n\nLANGUAGE: vala\nCODE:\n```\npublic int age { get; private set; default = 32; }\n```\n\nLANGUAGE: vala\nCODE:\n```\nclass Person : Object {\n    private int _age = 32;\n\n    public int age {\n        get { return _age; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: C Array with Constant Length\nDESCRIPTION: Shows a C array declaration where the length is defined by a constant elsewhere in the code.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields/08-03-arrays.rst#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n/* Array length must be FOO_COUNT */\nFoo **foos;\n```\n\n----------------------------------------\n\nTITLE: Opening a File with Return Status in C and Vala\nDESCRIPTION: Shows how to work with out parameters for complex types. The function returns a status code while providing the opened file via an out parameter.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/05-00-fundamentals-of-binding-a-c-function/05-01-out-and-reference-parameters-and-return-values.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nint open_file_and_fd(const char *filename, FILE **file) {\n    FILE *f = fopen(filename, \"r\");\n    if (file)\n    *file = f;\n    return (f == NULL) ? -1 : fileno(f);\n}\n```\n\nLANGUAGE: vala\nCODE:\n```\npublic int open_file_and_fd (string filename, out FileStream file);\n```\n\n----------------------------------------\n\nTITLE: Base Constructor Chain-Up in Vala\nDESCRIPTION: Shows the Vala syntax for calling a base class constructor. The base constructor call is made inside the constructor body rather than using initialization syntax.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/12-constructor-chaining.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nclass Foo : Bar {\n    public Foo () {\n        base (42);\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Casting in Vala\nDESCRIPTION: Example demonstrating how to force cast an object from one type to another using parentheses notation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/faq.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\nGtk.Button btn1 = (Gtk.Button) awidget;\n```\n\n----------------------------------------\n\nTITLE: Implementing Division with Remainder in C and Vala\nDESCRIPTION: Demonstrates how to use an out parameter to return multiple values from a function. The function returns the division result directly while the remainder is returned via an out parameter.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/05-00-fundamentals-of-binding-a-c-function/05-01-out-and-reference-parameters-and-return-values.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint div_and_mod(int a, int b, int *mod) {\n    *mod = a % b;\n    return a / b;\n}\n```\n\nLANGUAGE: vala\nCODE:\n```\npublic int div_and_mod (int a, int b, out int mod);\n```\n\n----------------------------------------\n\nTITLE: Basic Function Pointer with Target in Vala\nDESCRIPTION: Shows the corresponding Vala implementation of a function pointer with target using CCode attributes.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields/08-04-function-pointers.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (cname = \"foo_func\")]\npublic delegate void FooFunc(int a);\n\npublic struct Foo {\n    [CCode (delegate_target_cname = \"callback_context\")]\n    public unowned FooFunc callback;\n}\n```\n\n----------------------------------------\n\nTITLE: Printing Hello World in Vala\nDESCRIPTION: Uses stdout.printf to output a Hello World message to the console, demonstrating basic output in Vala\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/01-00-first-program.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\nstdout.printf(\"Hello, World\\n\");\n```\n\n----------------------------------------\n\nTITLE: Compiling with valac\nDESCRIPTION: The snippet demonstrates how to compile Vala source files using the Vala compiler, valac, with additional flags to specify packages, output binaries, and generate C source files. Dependencies include having the Vala compiler installed. The key parameter is '--pkg' which links the source to a package like libvala. Inputs are source files with .vala extensions, and the output is either a binary or C source files.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-01-source-files-and-compilation.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ valac compiler.vala --pkg libvala\n```\n\n----------------------------------------\n\nTITLE: Defining a Struct in Vala\nDESCRIPTION: This snippet defines a struct named 'Color' with public fields. It demonstrates the initialization syntax for structs in Vala, both with and without type inference.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-07-language-elements.rst#2025-04-21_snippet_6\n\nLANGUAGE: vala\nCODE:\n```\nstruct Color {\n    public double red;\n    public double green;\n    public double blue;\n}\n\nColor c1 = Color();  // or Color c1 = {};\nColor c2 = { 0.5, 0.5, 1.0 };\nColor c3 = Color() {\n    red = 0.5,\n    green = 0.5,\n    blue = 1.0\n};\n\nvar c4 = Color();\nvar c5 = Color() {\n    red = 0.5,\n    green = 0.5,\n    blue = 1.0\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Reflection Capabilities in Vala\nDESCRIPTION: This code snippet illustrates various reflection features in Vala, including getting type information, instantiating objects from types, listing properties and signals of a class, and converting enum values to strings. It defines a class 'Foo' with properties and signals, an enum 'Bar', and demonstrates reflection operations in the main function.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/31-reflection.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nclass Foo : Object {\n    public int hello { get; set; }\n    public int world { get; set; }\n    public int foo_bar { get; set; }\n\n    public signal void action ();\n    public signal void more_action ();\n}\n\nenum Bar {\n    FEE, FIE, FOE, FUM\n}\n\nvoid main () {\n\n    /* Getting type information */\n    Type type = typeof (Foo);\n    stdout.printf (\"%s\\n\", type.name ());\n\n    /* Instantiation from type */\n    Foo foo = (Foo) Object.new (type);\n\n    /* list properties of a class */\n    var obj_class = (ObjectClass) typeof (Foo).class_ref ();\n    var properties = obj_class.list_properties ();\n    foreach (var prop in properties) {\n        stdout.printf (\"%s\\n\", prop.name);\n    }\n\n    /* enum value as string */\n    var enum_class = (EnumClass) typeof (Bar).class_ref ();\n    string name = enum_class.get_value (Bar.FEE).value_name;\n    stdout.printf (\"Enum value as string: %s\\n\", name);\n\n    /* list signals of a class */\n    uint[] ids = Signal.list_ids (typeof (Foo));\n    foreach (uint id in ids) {\n        stdout.printf (\"%s\\n\", Signal.name (id));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the 'method_1' Functionality\nDESCRIPTION: This snippet provides an implementation of the 'method_1' function, demonstrating how the 'out' and 'ref' parameters are used to manipulate variable values during execution.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-03-parameter-directions.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\nvoid method_1(int a, out int b, ref int c) {\n    b = a + c;\n    c = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Binding C Collection with Size Property for foreach Support\nDESCRIPTION: Enhanced Vala class binding that adds a size property, enabling Vala's foreach syntax with the collection. Uses CCode to map the property to the C function.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/06-00-adding-vala-friendly-semantics/06-03-collections.rst#2025-04-21_snippet_4\n\nLANGUAGE: vala\nCODE:\n```\n[Compact]\n[CCode (cname = \"blkid_partlist\")]\npublic class ListOfPartitions {\n    [CCode (cname = \"blkid_partlist_get_partition\")]\n    public unowned Partition get (int index);\n    public int size { [CCode (cname = \"blkid_partlist_numof_partitions\")] get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Pointers in C\nDESCRIPTION: Examples of declaring pointers to different data types in C. This includes pointers to integers, generic pointers, and multiple levels of indirection.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/03-00-using-auto-memory-management/03-01-pointers-in-c.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint *identifier\n```\n\nLANGUAGE: C\nCODE:\n```\nvoid *identifier\n```\n\nLANGUAGE: C\nCODE:\n```\nchar **identifier\n```\n\n----------------------------------------\n\nTITLE: Property Accessors in Vala\nDESCRIPTION: This code snippet illustrates different types of property accessors in Vala, including read-only (get; private set;), write-only (private get; set;), read/write (get; set;), read/write/construct (get; set construct;), and read/construct-only (get; construct;).  These accessors control how properties can be accessed and modified.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-14-gobject-style-construction.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\npublic int a { get; private set; }    // Read\npublic int b { private get; set; }    // Write\npublic int c { get; set; }            // Read / Write\npublic int d { get; set construct; }  // Read / Write / Construct\npublic int e { get; construct; }      // Read / Write-Construct-Only\n```\n\n----------------------------------------\n\nTITLE: Argument Checking with Preconditions in Vala\nDESCRIPTION: This Vala code snippet shows how to use preconditions for argument checking. It uses the 'requires' keyword to specify valid ranges for numeric parameters. In Vala, reference type parameters are implicitly checked for null unless marked as nullable.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/23-argument-checking.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nvoid method (double d, int i, Foo foo)\n     requires (d >= 0.0 && d <= 1.0)\n     requires (i >= 0 && i <= 10)\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Explicit Non-Null Cast in Vala\nDESCRIPTION: This snippet illustrates how to override the non-null constraint using an explicit cast when you are certain that a nullable reference is not null. This allows the assignment of a potentially nullable reference to a non-nullable reference.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/05-00-experimental-features/05-03-strict-non-null-mode.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\no1 = (!) o2;\n```\n\n----------------------------------------\n\nTITLE: Type Symbol Classes in Vala\nDESCRIPTION: Lists the type symbol classes in Vala that inherit from TypeSymbol, representing named types like delegates, enums, and classes.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/03-00-the-vala-compiler/03-02-parser.rst#2025-04-21_snippet_10\n\nLANGUAGE: vala\nCODE:\n```\npublic class Vala.Delegate : TypeSymbol\npublic class Vala.Enum : TypeSymbol\npublic class Vala.ErrorCode : TypeSymbol\npublic class Vala.ErrorDomain : TypeSymbol\npublic abstract class Vala.ObjectTypeSymbol : TypeSymbol\npublic class Vala.Struct : TypeSymbol\n```\n\n----------------------------------------\n\nTITLE: Equivalent Explicit Type Casting with Conditional Operator\nDESCRIPTION: Demonstrates the equivalent type casting operation using an explicit is-check and conditional operator, performing the same null-safe type conversion as the 'as' keyword.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-12-dynamic-type-casting.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nButton b = (widget is Button) ? (Button) widget : null;\n```\n\n----------------------------------------\n\nTITLE: Vala Naming Conventions\nDESCRIPTION: Standard naming conventions for Vala code elements including classes, methods, variables, and constants. Uses a mix of CamelCase for types, lower_case for methods and variables, and UPPER_CASE for constants.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/03-naming-conventions.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nclasses, structs, delegate types: CamelCase\nmethods, properties, signals: lower_case\nlocal variables, fields: lower_case\nconstants, enum values: UPPER_CASE\n```\n\n----------------------------------------\n\nTITLE: Yielding to Another Asynchronous Method in Vala\nDESCRIPTION: This code shows how to yield to another asynchronous method in Vala.  The calling method pauses and waits for the called method to complete before resuming. The return value of the called method is automatically collected.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-08-asynchronous-methods.rst#2025-04-21_snippet_7\n\nLANGUAGE: vala\nCODE:\n```\nyield display_jpeg(fnam);\n```\n\n----------------------------------------\n\nTITLE: Implementing Property-Specific Change Notifications in Vala\nDESCRIPTION: Demonstrates how to connect to change notifications for a specific property in Vala using the notify signal with a property name.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/21-properties.rst#2025-04-21_snippet_4\n\nLANGUAGE: vala\nCODE:\n```\nperson.notify[\"name\"].connect ((sender, property) => {\n    stdout.printf (\"name has changed\\n\");\n});\n```\n\n----------------------------------------\n\nTITLE: Inequality Operators in Vala\nDESCRIPTION: This snippet covers inequality operators (<, >, >=, <=, !=) that evaluate if the left and right operands differ, returning a boolean value based on comparisons for simple value and string types.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-05-operators.rst#2025-04-21_snippet_8\n\nLANGUAGE: vala\nCODE:\n```\n<, >, >=, <=, !=\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Properties in Vala with CCode Attributes\nDESCRIPTION: Vala class declaration showing how to wrap C functions as properties using the CCode attribute. The example demonstrates read-only and read-write properties with explicit C function name mappings.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/06-00-adding-vala-friendly-semantics/06-02-properties.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\npublic class Foo {\n    public int item_count {\n        [CCode (cname = \"foo_item_count\")] get;\n    }\n    public int max_items {\n        [CCode (cname = \"foo_max_items\")] get;\n        [CCode (cname = \"foo_set_max_items\")] set;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Intermediate C Code with valac\nDESCRIPTION: This command is used for generating C source code from Vala source files instead of a binary by using the '-C' switch. This could be useful for debugging or inspection to understand how Vala translates to C. The input consists of .vala files and the output is .c files corresponding to each Vala file.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-01-source-files-and-compilation.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ valac source1.vala source2.vala -C\n```\n\n----------------------------------------\n\nTITLE: Declaring Buffer and String Types in Vala\nDESCRIPTION: Demonstrates the recommended way to declare buffers and strings in Vala, especially when interfacing with C functions that fill buffers. The uint8[] is used for buffers, while unowned string? is used for potentially null string return values.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/07-00-binding-a-c-function-s-parameter-and-return-types/07-04-strings-and-buffers.rst#2025-04-21_snippet_0\n\nLANGUAGE: Vala\nCODE:\n```\nuint8[] buffer;\nunowned string? result;\n```\n\n----------------------------------------\n\nTITLE: Installing Vala on *BSD via Packages\nDESCRIPTION: This command installs the Vala compiler using the pkg package manager, a common tool for installing pre-built software packages on *BSD systems.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/installation-guide.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n\"$ pkg install vala\"\n```\n\n----------------------------------------\n\nTITLE: Vala Generic Type Erasure Example\nDESCRIPTION: This code snippet demonstrates Vala's type erasure feature with generics. A `TestClass` inheriting from `GLib.Object` is defined. The `accept_object_wrapper` function accepts a `Wrapper` parameterized with `Glib.Object`. An instance of `Wrapper<TestClass>` is created and passed to the function, illustrating that a generic type specialized with a subclass can be used where a generic type specialized with a superclass is expected.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-13-generics.rst#2025-04-21_snippet_2\n\nLANGUAGE: Vala\nCODE:\n```\nclass TestClass : GLib.Object {\n}\n\nvoid accept_object_wrapper(Wrapper<Glib.Object> w) {\n}\n\n...\nvar test_wrapper = new Wrapper<TestClass>();\naccept_object_wrapper(test_wrapper);\n...\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Vala Function with Documentation\nDESCRIPTION: This snippet demonstrates how to write a Vala function with documentation comments. It includes a function description, example usage, and output explanation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/valadoc-guide/01-00-quick-start.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\n/**\n * Make Simon say any phrase that you enter.\n *\n * Example:\n * {{{\n * public static void main (string[] args) {\n *    print (simon_says (\"Learn Valadoc!\"));\n * }\n * }}}\n *\n * Will output:<<BR>>\n * Simon says: \"Learn Valadoc!\"\n *\n * @since 1.0.0\n */\npublic string simon_says (string phrase) {\n    return @\"Simon says: \\\"$(phrase)\\\"\";\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Output Binary Name with valac\nDESCRIPTION: This command illustrates how to specify the name of the binary output when multiple Vala source files are compiled together using valac. The '-o' switch allows the user to name the resulting binary. Expected input includes multiple Vala source files, and the output is a single binary file with the specified name.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-01-source-files-and-compilation.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ valac source1.vala source2.vala -o myprogram\n$ ./myprogram\n```\n\n----------------------------------------\n\nTITLE: Implementing External Methods in Vala\nDESCRIPTION: This Vala code shows how to use the CCode attribute to call an external method. It specifies the C name of the function if it differs from the Vala name. The sample_method function is declared as extern and called in the main method.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/30-external-methods.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\npublic class MainClass : Object {\n\n    [CCode (cname = \"SampleMethod\")]\n    public static extern int sample_method (int x);\n\n    static void main () {\n        stdout.printf (\"sample_method () returns %d\\n\", sample_method (5));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Primary CodeNode Class Hierarchy in Vala\nDESCRIPTION: Shows the main CodeNode class hierarchy in Vala. CodeNode is the base class for all nodes in the abstract syntax tree.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/03-00-the-vala-compiler/03-02-parser.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\npublic abstract class Vala.CodeNode\n\npublic class Vala.Attribute : CodeNode\npublic class Vala.CatchClause : CodeNode\npublic abstract class Vala.DataType : CodeNode\npublic abstract class Vala.Expression : CodeNode\npublic class Vala.MemberInitializer : CodeNode\npublic interface Vala.Statement : CodeNode\npublic class Vala.SwitchLabel : CodeNode\npublic abstract class Vala.Symbol : CodeNode\npublic class Vala.UsingDirective : CodeNode\n```\n\n----------------------------------------\n\nTITLE: Postcondition Checking in Vala\nDESCRIPTION: This Vala code snippet demonstrates the use of postconditions to check the return value of a method. It uses the 'ensures' keyword to specify a condition that must be true after the method execution. The 'result' keyword represents the return value.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/23-argument-checking.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\nint square (int i)\n    ensures (result >= 0)\n{\n    return i * i;\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Dynamic Type Casting with 'as' Operator\nDESCRIPTION: Converts a widget to a Button type with runtime type checking, returning null if the cast is not valid. Requires both source and target types to be referenced class types.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-12-dynamic-type-casting.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nButton b = widget as Button;\n```\n\n----------------------------------------\n\nTITLE: Bitwise Operators in Vala\nDESCRIPTION: This snippet details bitwise operations including OR (|), exclusive OR (^), AND (&), and NOT (~). It also mentions the compound assignment versions and the unary nature of the NOT operator.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-05-operators.rst#2025-04-21_snippet_4\n\nLANGUAGE: vala\nCODE:\n```\n|, ^, &, ~, |=, &=, ^=\n\n```\n\n----------------------------------------\n\nTITLE: Binding C Structs in Vala\nDESCRIPTION: This snippet demonstrates how to bind the C struct and function in Vala. It uses the [CCode] attribute to specify the C name and indicates that the struct doesn't have a GType.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/07-00-binding-a-c-function-s-parameter-and-return-types/07-02-structs.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (cname = \"foo\", has_type_id = false)]\npublic struct Foo {\n    public int x;\n    public int y;\n};\nvoid compute_foo(Foo f);\n```\n\n----------------------------------------\n\nTITLE: Grouping Similar Functions in Nested Namespace (XML)\nDESCRIPTION: Example of using metadata to group similar functions into a nested namespace, improving API organization.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/generating-a-vapi-with-gobject-introspection.rst#2025-04-21_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\ncontent_type_* parent=\"GLib.ContentType\" name=\"content_type_(.*)\"\n```\n\n----------------------------------------\n\nTITLE: Bit Shift Operators in Vala\nDESCRIPTION: This snippet outlines bit shift operations (<<, >>) that shift the left operand a number of bits as determined by the right operand.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-05-operators.rst#2025-04-21_snippet_5\n\nLANGUAGE: vala\nCODE:\n```\n<<, >>\n\n```\n\n----------------------------------------\n\nTITLE: Understanding Parameter Ownership Keywords in Vala\nDESCRIPTION: Demonstrates the usage of owned and unowned keywords for parameter ownership in Vala. Parameters are unowned by default unless marked with 'owned', while return values and ref/out parameters are owned by default unless marked with 'unowned'.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/05-00-fundamentals-of-binding-a-c-function/05-02-ownership.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nowned parameter    // Explicitly owned parameter\nunowned return    // Explicitly unowned return value\nref parameter     // Owned by default\nout parameter    // Owned by default\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-Virtual Methods in Vala\nDESCRIPTION: This example demonstrates what happens when methods with the same name are defined in parent and child classes without using the virtual/override mechanism. When a subclass instance is referenced through a superclass variable, the superclass method will be called.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-09-polymorphism.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nclass SuperClass : GLib.Object {\n    public void method_1() {\n        stdout.printf(\"SuperClass.method_1()\\n\");\n    }\n}\n\nclass SubClass : SuperClass {\n    public void method_1() {\n        stdout.printf(\"SubClass.method_1()\\n\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Variadic Functions (XML)\nDESCRIPTION: Example of using metadata to expose variadic functions that are marked as non-introspectable by GObject Introspection.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/generating-a-vapi-with-gobject-introspection.rst#2025-04-21_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\nActor.animate skip=false\n```\n\n----------------------------------------\n\nTITLE: Accessing Struct Properties in Vala\nDESCRIPTION: Shows how to properly declare and access properties of struct type using Object.get() method.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-05-properties.rst#2025-04-21_snippet_11\n\nLANGUAGE: vala\nCODE:\n```\nstruct Color\n{\n    public uint32 argb;\n\n    public Color() { argb = 0x12345678; }\n}\n\nclass Shape: GLib.Object\n{\n    public Color c { get; set; default = Color(); }\n}\n\nint main()\n{\n    Color? c = null;\n    Shape s = new Shape();\n    s.get(\"c\", out c);\n}\n```\n\n----------------------------------------\n\nTITLE: Symbol Classes in Vala\nDESCRIPTION: Lists the symbol classes in Vala that inherit from Symbol, representing named elements in Vala code such as blocks, variables, and type symbols.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/03-00-the-vala-compiler/03-02-parser.rst#2025-04-21_snippet_8\n\nLANGUAGE: vala\nCODE:\n```\npublic class Vala.Block : Symbol, Statement\npublic class Vala.Constructor : Symbol\npublic class Vala.Destructor : Symbol\npublic class Vala.EnumValue : Symbol\npublic class Vala.FormalParameter : Symbol\npublic class Vala.LocalVariable : Symbol\npublic abstract class Vala.Member : Symbol\npublic class Vala.Namespace : Symbol\npublic class Vala.PropertyAccessor : Symbol\npublic class Vala.TypeParameter : Symbol\npublic abstract class Vala.TypeSymbol : Symbol\npublic class Vala.UnresolvedSymbol : Symbol\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Change Notifications in Vala using notify signal\nDESCRIPTION: Shows how to use the built-in 'notify' signal in Vala to handle property change notifications for all properties of an object.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/21-properties.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\nclass Person : Object {\n    public string name { get; set; }\n}\n\nvoid main () {\n    var person = new Person ();\n    person.notify.connect ((sender, property) => {\n        stdout.printf (\"Property '%s' changed\\n\", property.name);\n    });\n    person.name = \"Foo\";\n    person.name = \"Bar\";\n}\n```\n\n----------------------------------------\n\nTITLE: Binding to C Function Pointers with Vala Delegates\nDESCRIPTION: This snippet demonstrates how to create Vala delegates that bind to C function pointer types. It shows both targetless delegates (function pointers) and targeted delegates (closures) with appropriate CCode attributes.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-07-delegates.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (cname = \"compute_func\", has_target = false)]\npublic delegate int ComputeFunc (int a, int b);\n[CCode (cname = \"analyze_func\")]\npublic delegate double AnalyzeFunc (int a, int b);\n```\n\n----------------------------------------\n\nTITLE: Instantiating a GObject Using Object.new in Vala\nDESCRIPTION: This snippet demonstrates the use of `Object.new` for instantiating a GObject in Vala. This method binds to the `g_object_new` function in C and is commonly used, but it bypasses custom constructors defined in Vala classes, which is why the construct {} syntax is preferred.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/06-00-libraries/06-04-abi-and-api-design-choices.rst#2025-04-21_snippet_4\n\nLANGUAGE: vala\nCODE:\n```\n\"void main () {\\n    Object.new (typeof(MyClass));\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Main Method in Vala\nDESCRIPTION: Creates a static main method with string array arguments, serving as the program's entry point. The method is public and returns an integer exit code.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/01-00-first-program.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\npublic static int main(string[] args) {\n```\n\n----------------------------------------\n\nTITLE: Compiling Vala Source with External Library\nDESCRIPTION: This command demonstrates how to compile a Vala source file using an external library specified by its VAPI file. The --pkg option is used to include the library 'foo-1.0'.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/38-bindings.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ valac source.vala --pkg foo-1.0\n```\n\n----------------------------------------\n\nTITLE: Using Vala's Preprocessor Directives\nDESCRIPTION: Example showing how to use Vala's conditional preprocessing directives (#if, #else, #endif) with the -D compiler flag.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/faq.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\nint main (string[] args) {\n#if COND\n  message (\"COND IS DEFINED\");\n#else\n  message (\"COND IS NOT DEFINED\");\n#endif\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Destructor in Vala\nDESCRIPTION: This snippet demonstrates how to define a destructor for a class in Vala. The destructor is called when the object is being destroyed, allowing for cleanup operations or resource release. In this example, it simply prints a message to stdout.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-03-destruction.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nclass Demo : Object {\n    ~Demo() {\n        stdout.printf(\"in destructor\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading File Contents in Vala\nDESCRIPTION: Example of reading a file's contents into a string variable using FileUtils.get_contents method.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/08-00-techniques/08-02-using-glib.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\nstring content;\nFileUtils.get_contents(\"file.vala\", out content);\n```\n\n----------------------------------------\n\nTITLE: Generating VAPI from GIR Using Vapigen\nDESCRIPTION: Basic command line example of using vapigen to generate a VAPI file from a GIR file for a library named 'foo-1.0'.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/upstream-guide.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nvapigen \\\n    --library foo-1.0 \\\n    Foo-1.0.gir\n```\n\n----------------------------------------\n\nTITLE: Using Default Interface Methods\nDESCRIPTION: Demonstrates a class implementing the Callable interface and using its default hang() method. The class only needs to implement the abstract members, while inheriting the default implementation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-08-interfaces.rst#2025-04-21_snippet_6\n\nLANGUAGE: vala\nCODE:\n```\npublic class Phone : GLib.Object, Callable {\n   public bool answering { get; protected set; }\n   public void answer ()\n   {\n     /* answer code implementation */\n   }\n\n   public static void main ()\n   {\n      var f = new Phone ();\n      if (f.hang ())\n         stdout.printf(\"Hand done.\\n\");\n      else\n         stdout.printf(\"Hand Error!\\n\");\n      stdout.printf(\"END\\n\");\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Reference Type Classes in Vala\nDESCRIPTION: Shows the classes that inherit from ReferenceType, representing reference data types in Vala such as arrays, classes, and interfaces.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/03-00-the-vala-compiler/03-02-parser.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\npublic class Vala.ArrayType : ReferenceType\npublic class Vala.ClassType : ReferenceType\npublic class Vala.ErrorType : ReferenceType\npublic class Vala.InterfaceType : ReferenceType\npublic class Vala.NullType : ReferenceType\npublic class Vala.ObjectType : ReferenceType\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Vala CCode Attribute Usage\nDESCRIPTION: This snippet shows the syntax for using the [CCode (...)] attribute in Vala, which is commonly used for bindings. The attribute is built into the Vala compiler and is crucial for interfacing with C libraries or defining D-Bus interfaces.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/20-code-attributes.rst#2025-04-21_snippet_0\n\nLANGUAGE: Vala\nCODE:\n```\n[CCode (...)]\n```\n\n----------------------------------------\n\nTITLE: Implementing and Using Events in C#\nDESCRIPTION: This C# code snippet demonstrates the implementation of a custom event using delegates. It shows how to declare an event, raise it, and connect/disconnect event handlers. The example includes both a named method and a lambda expression as event handlers.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/14-events.rst#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\n\ndelegate void SomeEventHandler(object sender, int i);\n\nclass Foo\n{\n    public event SomeEventHandler SomeEvent;\n\n    public void RaiseSomeEvent(int i)\n    {\n        if (SomeEvent != null) SomeEvent(this, i);\n    }\n}\n\nclass Demo\n{\n    static void OnSomeEvent(object sender, int i)\n    {\n        Console.WriteLine(\"Handler A: \" + i);\n    }\n\n    static void Main()\n    {\n        var foo = new Foo();\n        foo.SomeEvent += OnSomeEvent;\n        foo.SomeEvent += (s, i) => Console.WriteLine(\"Handler B: \" + i);\n        foo.RaiseSomeEvent(42);\n        foo.SomeEvent -= OnSomeEvent;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Class with a Custom Constructor in Vala\nDESCRIPTION: This snippet defines a `MyClass` with a custom constructor that initializes a private string field. Custom constructors can conflict with GObject's standard object creation mechanisms, potentially leading to issues with GObject introspection and bindings.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/06-00-libraries/06-04-abi-and-api-design-choices.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\n\"public class MyClass : Object {\\n    private string value;   \\n\\n    public MyClass (string contents) {\\n        value = contents;\\n    }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Writing Documentation Comments in Vala\nDESCRIPTION: This snippet shows how to write documentation comments in Vala. It uses a multi-line comment structure with '@' tags for parameters and return value.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/08-documentation-comments.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\n/**\n * Documentation comment\n *\n * @param foo ...\n * @param bar ...\n * @return ...\n*/\n```\n\n----------------------------------------\n\nTITLE: Generating VAPI with Dependencies\nDESCRIPTION: Extended vapigen command showing how to specify package dependencies when generating a VAPI file.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/upstream-guide.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nvapigen \\\n    --library foo-1.0 \\\n    --pkg bar-1.0 \\\n    Foo-1.0.gir\n```\n\n----------------------------------------\n\nTITLE: Binding C functions with default parameters in Vala\nDESCRIPTION: This Vala code demonstrates how to bind the extended C function while utilizing Vala's default parameter feature. The CCode attribute specifies the actual C function name to call, while the Vala interface provides optional parameters.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/05-00-fundamentals-of-binding-a-c-function/05-06-default-values-and-changing-an-argument-s-position.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (cname = \"foo_compute_ex\")]\npublic compute (int base_height, Table t = null, opts? opts = null);\n```\n\n----------------------------------------\n\nTITLE: Calling Asynchronous Method without Callback in Vala\nDESCRIPTION: Shows an example of calling an asynchronous method using the begin method without a callback. This will start the method running with the given arguments.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-08-asynchronous-methods.rst#2025-04-21_snippet_9\n\nLANGUAGE: vala\nCODE:\n```\ndisplay_jpeg.begin(\"test.jpg\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Structs in C#\nDESCRIPTION: This snippet shows three ways to initialize a Point struct in C#: default constructor, object initializer syntax, and member-wise assignment. It demonstrates the use of the 'new' keyword for struct instantiation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/17-struct-initialization.rst#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar p1 = new Point();\nvar p2 = new Point() { X = 2, Y = 3 };\nPoint p3;\np3.X = 2;\np3.Y = 3;\n```\n\n----------------------------------------\n\nTITLE: Generating VAPI from GIR with Automake\nDESCRIPTION: Example Makefile section showing how to generate a VAPI file (foo-1.0.vapi) from a GIR file using vapigen with custom dependencies, metadata directories, and distribution settings.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/upstream-guide.rst#2025-04-21_snippet_4\n\nLANGUAGE: make\nCODE:\n```\nif ENABLE_VAPIGEN\n-include $(VAPIGEN_MAKEFILE)\n\nfoo-1.0.vapi: Foo-1.0.gir Foo-1.0-custom.vala foo-1.0.deps\n\nVAPIGEN_VAPIS = foo-1.0.vapi\n\nfoo_1_0_vapi_DEPS = foo-1.0\nfoo_1_0_vapi_METADATADIRS = $(srcdir)\nfoo_1_0_vapi_FILES = Foo-1.0.gir Foo-1.0-custom.vala\n\nvapidir = $(datadir)/vala/vapi\nvapi_DATA = $(VAPIGEN_VAPIS) $(VAPIGEN_VAPIS:.vapi=.deps)\n\nEXTRA_DIST += Foo-1.0.metadata foo-1.0.deps Foo-1.0-custom.vala\nendif\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Custom Exceptions in C#\nDESCRIPTION: This snippet shows how to create a custom exception class in C# and demonstrates its usage. It includes the class definition with multiple constructors and an example of throwing and catching the exception.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/22-exceptions.rst#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Serializable()]\npublic class MyException : System.Exception\n{\n    public MyException() { }\n    public MyException(string message) { }\n    public MyException(string message, System.Exception inner) { }\n    protected MyException(System.Runtime.Serialization.SerializationInfo info,\n                          System.Runtime.Serialization.StreamingContext context) { }\n}\n\nvoid Method()\n{\n    throw new MyException(\"not enough foo\");\n}\ntry {\n    Method();\n} catch (MyException e) {\n    Console.Error.WriteLine(e.Message);\n}\n```\n\n----------------------------------------\n\nTITLE: Value Type Classes in Vala\nDESCRIPTION: Lists the value type classes in Vala that inherit from ValueType, representing value types like booleans, enums, and numeric types.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/03-00-the-vala-compiler/03-02-parser.rst#2025-04-21_snippet_4\n\nLANGUAGE: vala\nCODE:\n```\npublic class Vala.BooleanType : ValueType\npublic class Vala.EnumValueType : ValueType\npublic class Vala.FloatingType : ValueType\npublic class Vala.IntegerType : ValueType\npublic class Vala.StructValueType : ValueType\n```\n\n----------------------------------------\n\nTITLE: Creating and Iterating HashSet in Vala\nDESCRIPTION: Demonstrates creating a HashSet of strings, adding elements with duplicate handling, and iterating through the set using foreach loop\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/gee-samples/02-set-sample.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nusing Gee;\n\nvoid main () {\n    var my_set = new HashSet<string> ();\n    my_set.add (\"one\");\n    my_set.add (\"two\");\n    my_set.add (\"three\");\n    my_set.add (\"two\");         \\/\\/ will not be added because it's a duplicate\n    foreach (string s in my_set) {\n        stdout.printf (\"%s\\n\", s);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Constructors in C#\nDESCRIPTION: This snippet shows how to implement multiple constructors in C# using constructor overloading. It demonstrates three different constructors: a default constructor, one with an integer parameter, and one with a string parameter.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/11-multiple-constructors.rst#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nclass Foo\n{\n    public Foo() { }\n    public Foo(int foo) { }\n    public Foo(string bar) { }\n}\n\nnew Foo();\nnew Foo(42);\nnew Foo(\"hello\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Deterministic Destructors for Resource Management in Vala\nDESCRIPTION: This snippet demonstrates how to use deterministic destructors in Vala to implement the RAII pattern for resource management. It includes the class definition with a destructor and usage example.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/26-resource-disposing.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nclass MyResource : Object {\n    ~MyResource () {\n        // ...\n    }\n}\n/* Usage: */\n{\n    var res = new MyResource ();\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: New Chained Relational Expression Syntax in Vala\nDESCRIPTION: Demonstrates the new experimental syntax for chained relational expressions that allows more concise and readable multiple comparisons.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/05-00-experimental-features/05-01-chained-relational-expressions.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nif (1 < a < 5) {}\n\nif (0 < a < b < c < d < 255) {\n    // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running Vala String Sample\nDESCRIPTION: Terminal commands to compile a Vala source file and execute the resulting binary. Uses the Vala compiler (valac) to compile string-sample.vala and then runs the compiled program.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/string-sample.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ valac string-sample.vala\n$ ./string-sample\n```\n\n----------------------------------------\n\nTITLE: Resuming Asynchronous Method Directly in Vala\nDESCRIPTION: This code shows how to resume an asynchronous method directly by calling the stored callback function, assuming the caller is running in the main thread. The asynchronous method then runs until its next `yield` statement.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-08-asynchronous-methods.rst#2025-04-21_snippet_6\n\nLANGUAGE: vala\nCODE:\n```\ncallback();\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Values for Auto-Implemented Properties in Vala\nDESCRIPTION: Shows how to set a default value for an auto-implemented property in Vala using the 'default' keyword.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/21-properties.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nclass Person : Object {\n    public string name { get; set; default = \"Default Name\"; }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying C Header Files in Vala using CCode Attribute\nDESCRIPTION: This snippet demonstrates how to use the CCode attribute with the cheader_filename parameter to specify C header files for inclusion when generating C code from Vala. It shows the attribute being applied to a namespace, which is the recommended approach for efficiency.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/02-00-getting-started/02-05-include-the-c-header-files.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (cheader_filename = \"libfoo/foo.h\")]\nnamespace Foo {\n    // bindings\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Vala Documentation Project\nDESCRIPTION: This command installs the required Python packages listed in the requirements.txt file for the Vala Documentation project. It uses pip to install the packages for the current user and ensures they are up to date.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install --user --upgrade -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Disabling Change Notifications for Specific Properties in Vala\nDESCRIPTION: Shows how to disable change notifications for a specific property in Vala using the CCode attribute.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/21-properties.rst#2025-04-21_snippet_5\n\nLANGUAGE: vala\nCODE:\n```\nclass MyObject : Object {\n\n    // notify signal is NOT emitted upon changes in the property\n    [CCode (notify = false)]\n    public int without_notification { get; set; }\n\n    // notify signal is emitted upon changes in the property\n    public int with_notification { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizing Assertions in Vala\nDESCRIPTION: This snippet demonstrates an unnecessary use of assertions for null checks in Vala, as the language implicitly handles nullability of parameters not marked with ?. The example illustrates Vala's assert functions like return_if_fail to handle failed conditions gracefully.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-01-assertions-and-contract-programming.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nvoid method_name(Foo foo, Bar bar) {\n    /* Not necessary, Vala does that for you:\n    return_if_fail(foo != null);\n    return_if_fail(bar != null);\n    */\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Assigning Gee Collection Items in Vala\nDESCRIPTION: Demonstrates how to access and assign items in Gee collections using indexers and the 'in' operator for checking containment.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/33-collections.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nmy_map[key] // equivalent to my_map.get (key)\nx in my_collection // equivalent to my_collection.contains (x)\n```\n\n----------------------------------------\n\nTITLE: Using Default Arguments in Vala Methods\nDESCRIPTION: This snippet defines a method 'f' with default parameter values for its last two arguments. It highlights how to invoke the method with various combinations of parameters.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-07-language-elements.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\nvoid f(int x, string s = \"hello\", double z = 0.5) { }\n\nf(2);\nf(2, \"hi\");\nf(2, \"hi\", 0.75);\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Constructor in Vala\nDESCRIPTION: This snippet shows how to implement a static constructor in Vala using the 'static construct' block. This code is guaranteed to run exactly once when the class or any of its subclasses is first instantiated.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/29-static-constructors.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nclass Foo : Object {\n    static construct {\n        stdout.printf (\"Static constructor invoked.\\n\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Constructor Chaining in Vala\nDESCRIPTION: Shows how to implement multiple constructor chaining in Vala using named constructors. Demonstrates the use of this keyword to call another constructor within the same class.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/12-constructor-chaining.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\nclass Foo : Object {\n    public Foo () {\n        this.with_bar (\"bar\");\n    }\n\n    public Foo.with_bar (string bar) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Vala Documentation Website\nDESCRIPTION: This command executes the build-docs script to generate the Vala Documentation website. It assumes the script is in the current directory and has executable permissions.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./build-docs\n```\n\n----------------------------------------\n\nTITLE: Using CCode Attribute in Vala\nDESCRIPTION: The CCode attribute is used to capture differences between C and Vala implementations. It allows for specifying C-specific details while maintaining Vala-friendly syntax.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/06-00-adding-vala-friendly-semantics.rst#2025-04-21_snippet_0\n\nLANGUAGE: Vala\nCODE:\n```\n``CCode``\n```\n\n----------------------------------------\n\nTITLE: Sample Library Usage Code\nDESCRIPTION: Example program demonstrating how to use the created library\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/06-00-libraries/06-02-creating-a-library.rst#2025-04-21_snippet_5\n\nLANGUAGE: vala\nCODE:\n```\nvoid main() {\n    var test = new MyLib();\n    test.hello();\n    int x = 4, y = 5;\n    stdout.printf(\"The sum of %d and %d is %d\\n\", x, y, test.sum(x, y));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Change Notifications in C# using INotifyPropertyChanged\nDESCRIPTION: Demonstrates how to implement the INotifyPropertyChanged interface in C# to provide property change notifications.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/21-properties.rst#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel;\n\nclass Person : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n    private string name;\n\n    public string Name\n    {\n        get { return name; }\n        set\n        {\n            name = value;\n            OnPropertyChanged(\"Name\");\n        }\n    }\n\n    protected void OnPropertyChanged(string name)\n    {\n        if (PropertyChanged != null)\n        {\n            PropertyChanged(this, new PropertyChangedEventArgs(name));\n        }\n    }\n\n    static void Main()\n    {\n        var person = new Person();\n        person.PropertyChanged += (sender, e) =>\n        {\n            System.Console.WriteLine(\"Property '{0}' changed\", e.PropertyName);\n        };\n        person.Name = \"Foo\";\n        person.Name = \"Bar\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding C Bit Patterns to Vala Flags Enum\nDESCRIPTION: This example demonstrates how to convert C bit patterns to a Vala flags enum. It uses the CCode attribute and the Flags attribute to create a flags enum in Vala.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-02-enums-and-flags.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define FOO_READ (1<<0)\n#define FOO_WRITE (1<<1)\n#define FOO_CREATE (1<<2)\n```\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (cname = \"int\", cprefix = \"FOO_\", has_type_id = false)]\n[Flags]\npublic enum Foo {\n    READ,\n    WRITE,\n    CREATE\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Permissions for build-docs Script\nDESCRIPTION: This command changes the permissions of the build-docs script to make it executable. This step may be necessary before running the script to build the documentation website.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x ./build-docs\n```\n\n----------------------------------------\n\nTITLE: Calling Non-Virtual Methods in Vala\nDESCRIPTION: This code demonstrates how non-virtual methods are called based on the reference type rather than the actual object type. When a SubClass object is referenced through a SuperClass variable, the SuperClass version of the method is called.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-09-polymorphism.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nSubClass o1 = new SubClass();\no1.method_1();\nSuperClass o2 = o1;\no2.method_1();\n```\n\n----------------------------------------\n\nTITLE: Basic Type Translations in Vala\nDESCRIPTION: Demonstrates common basic types that can be directly translated between C and Vala. Shows equivalence between different type definitions like uint32_t and u_int32_t that resolve to the same underlying type.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/07-00-binding-a-c-function-s-parameter-and-return-types/07-01-basic-types.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nint\ndouble\nsize_t\n```\n\nLANGUAGE: c\nCODE:\n```\nuint32_t\nu_int32_t\n```\n\n----------------------------------------\n\nTITLE: Declaring Nullable Reference Types in Vala\nDESCRIPTION: Shows how to declare nullable reference type arguments and return values in Vala methods. The '?' syntax is used to indicate that a reference type can be null, as they are non-nullable by default in Vala.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/19-nullable-types.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nFoo? method (Foo? foo, Bar bar) {\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Delegate in Vala\nDESCRIPTION: This code defines a delegate type 'DelegateType' for methods taking an integer as a parameter and not returning a value. It shows how to assign and call a method through the delegate.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-07-language-elements.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\ndelegate void DelegateType(int a);\n\nvoid f1(int a) {\n    stdout.printf(\"%d\\n\", a);\n}\n\nvoid f2(DelegateType d, int a) {\n    d(a);       // Calling a delegate\n}\n\nvoid main() {\n    f2(f1, 5);  // Passing a method as delegate argument to another method\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Lists in Vala Documentation Comments\nDESCRIPTION: Shows how to create different types of lists in Vala documentation comments, including numbered lists, alphabetical lists, and dotted lists. The example also demonstrates nested lists with proper indentation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/valadoc-guide/03-00-documentation-comment-markup/03-02-formatting.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\n/**\n * Short description\n *\n *  1. numbered list\n *  1. numbered list\n *  1. numbered list\n *\n *  # numbered list\n *  # numbered list\n *  # numbered list\n *\n *  i. numbered list\n *  i. numbered list\n *  i. numbered list\n *\n *  I. numbered list\n *  I. numbered list\n *  I. numbered list\n *\n *  a. alphabetical list\n *  a. alphabetical list\n *  a. alphabetical list\n *\n *  A. alphabetical list\n *  A. alphabetical list\n *  A. alphabetical list\n *\n *  * dotted list\n *  * dotted list\n *  * dotted list\n *\n *  A. alphabetical list\n *    a. alphabetical list\n *    a. alphabetical list\n *  A. alphabetical list\n *    a. alphabetical list\n *    a. alphabetical list\n *  A. alphabetical list\n */\n```\n\n----------------------------------------\n\nTITLE: Ternary Conditional Operator in Vala\nDESCRIPTION: This snippet illustrates the ternary conditional operator (? :) that evaluates a condition and returns one of two values based on the truth of the condition.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-05-operators.rst#2025-04-21_snippet_10\n\nLANGUAGE: vala\nCODE:\n```\n?:\n\n```\n\n----------------------------------------\n\nTITLE: Building Internal API Documentation with Make\nDESCRIPTION: Command to generate internal API documentation in Valadoc form from the Vala source code.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmake -C doc internal-api-docs\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Interface in C#\nDESCRIPTION: Demonstrates how to declare a simple interface in C# with two abstract methods.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/15-interfaces.rst#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ninterface IFoo\n{\n    void Foo(int i);\n    int Bar(string s, double d);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Hidden Methods Through Base Class Casting in Vala\nDESCRIPTION: This snippet shows how to access both the new method and the original hidden method. The original method can be accessed by casting the object to the base class type.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-10-method-hiding.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nvoid main() {\n    var bar = new Bar();\n    bar.my_method();\n    (bar as Foo).my_method();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Class in Vala\nDESCRIPTION: This code snippet illustrates how to define a class in Vala, including its inheritance from a superclass and the implementation of interfaces. It sets the groundwork for more complex object-oriented programming concepts.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-07-language-elements.rst#2025-04-21_snippet_7\n\nLANGUAGE: vala\nCODE:\n```\nclass ClassName : SuperClassName, InterfaceName {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Build with Autogen\nDESCRIPTION: Commands to clean the build directory and configure a debug build of the Vala compiler with debugging symbols enabled.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nmake distclean\n./autogen.sh --enable-debug\n```\n\n----------------------------------------\n\nTITLE: Creating a Buggy Vala Program\nDESCRIPTION: A simple Vala program that demonstrates a null reference bug causing a segmentation fault. The program attempts to access a field of a null object reference.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/08-00-techniques/08-01-debugging.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nclass Foo : Object {\n    public int field;\n}\n\nvoid main() {\n    Foo? foo = null;\n    stdout.printf(\"%d\\n\", foo.field);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining duplicate C functions for parameter variations\nDESCRIPTION: This C code snippet shows a common pattern where two similar functions are defined - a basic version and an extended version with additional parameters. This is a typical C workaround for the lack of default parameters.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/05-00-fundamentals-of-binding-a-c-function/05-06-default-values-and-changing-an-argument-s-position.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint foo_compute(Foo *f, int base_height);\nint foo_compute_ex(Foo *f, int base_height, Table *t, struct opts *opts);\n```\n\n----------------------------------------\n\nTITLE: Compiling Vala Gtk Application\nDESCRIPTION: Console command to compile the Vala source code using valac with the Gtk4 package. This compilation step generates an executable from the Vala source file.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/synchronising-widgets.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ valac --pkg gtk4 SyncingWidgets.vala\n```\n\n----------------------------------------\n\nTITLE: Implementing Return-Value-Based Ownership in Vala\nDESCRIPTION: This Vala code shows how to handle a C function where ownership depends on the return value. It uses a ref parameter and conditionally calls a sink function based on the return value.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/10-00-awkward-situations/10-02-dependently-typed-ownership.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (cname = \"\")]\nprivate void _sink_foo (owned Foo f);\n[CCode (cname = \"awkward\")]\nprivate int _awkward (Foo f);\n[CCode (cname = \"vala_awkward\")]\npublic int awkward (ref Foo f) {\n    var ret = _awkward (f);\n    if (ret == 3)\n        _sink_foo ((owned)f);\n    return ret;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Vala to C Symbol Name Translation\nDESCRIPTION: This Vala code snippet illustrates the default symbol name translation rules. It defines a namespace, a class, a constant, and a method, showcasing how Vala identifiers are translated to C.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/02-00-getting-started/02-06-symbol-name-translations.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nvoid main () {\n    Foo.Bar a = new Foo.Bar ();\n    a.test ();\n    var b = Foo.Bar.UNCHANGING;\n}\n\nnamespace Foo {\n    [Compact]\n    class Bar {\n        public const int UNCHANGING = 42;\n        public void test () {\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Vala Indexing Syntax with C Collections\nDESCRIPTION: Example of using the bound collection with Vala's square bracket indexing syntax, which internally calls the get() method.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/06-00-adding-vala-friendly-semantics/06-03-collections.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\nvar partition = partitions [count];\n```\n\n----------------------------------------\n\nTITLE: Building Vala Reference Manual Documentation\nDESCRIPTION: Instructions for rebuilding the Vala Reference Manual documentation. This involves changing to the doc/vala directory and running the make command.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/08-00-documentation.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd doc/vala && make\n```\n\n----------------------------------------\n\nTITLE: Alternative to Method Overloading in Vala\nDESCRIPTION: This snippet demonstrates how Vala handles scenarios where C# would use method overloading. Vala uses different method names for different parameter types and utilizes default argument values for optional parameters.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/10-method-overloading.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nclass Demo : Object {\n\n    public void draw_text (string text) {\n    }\n\n    public void draw_shape (Shape shape) {\n    }\n\n    /* Argument default values, available in Vala, planned for C# 4.0 */\n    void f (int x, string s = \"hello\", double z = 0.5) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Type Information in Vala\nDESCRIPTION: Shows how to get and display the type information of an Object instance using the get_type() method and accessing the type name.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-11-run-time-type-information.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nType type = object.get_type();\nstdout.printf(\"%s\\n\", type.name());\n```\n\n----------------------------------------\n\nTITLE: Defining Posix sync Function in Vala\nDESCRIPTION: This snippet demonstrates how to define the Posix 'sync' system call in Vala using the CCode attribute. It ensures that the Vala function 'Posix.sync()' correctly maps to the C function 'sync()', avoiding namespace-based name mangling.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-06-functions.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (cname = \"sync\")]\nvoid sync();\n```\n\n----------------------------------------\n\nTITLE: Including Compiler Guide Chapters with reStructuredText\nDESCRIPTION: This reStructuredText directive includes all files in the 'compiler-guide' directory as numbered chapters in the documentation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :glob:\n   :maxdepth: 1\n   :numbered:\n\n   compiler-guide/*\n```\n\n----------------------------------------\n\nTITLE: Argument Checking in C#\nDESCRIPTION: This C# code snippet demonstrates manual argument checking in a method. It checks for out-of-range values for numeric parameters and null values for reference types, throwing appropriate exceptions when conditions are not met.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/23-argument-checking.rst#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvoid Method(double d, int i, Foo foo)\n{\n    if (d < 0 || d > 1.0)\n        throw new ArgumentOutOfRangeException();\n    if (i < 0 || i > 10)\n        throw new ArgumentOutOfRangeException();\n    if (foo == null)\n        throw new ArgumentNullException();\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Nullable Structs in Vala and C\nDESCRIPTION: Demonstrates how to return a nullable struct in Vala, which translates to returning a pointer in C. The question mark operator boxes the struct, making it appear heap-allocated.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/05-00-fundamentals-of-binding-a-c-function/05-01-out-and-reference-parameters-and-return-values.rst#2025-04-21_snippet_4\n\nLANGUAGE: vala\nCODE:\n```\npublic Foo? get_foo (int x);\npublic int make_foo (int y, out Foo? f);\n```\n\nLANGUAGE: c\nCODE:\n```\nfoo *get_foo(int x);\nint make_foo(int y, foo **f);\n```\n\n----------------------------------------\n\nTITLE: Implementing GTK4 Entry Completion with Two Cells in Vala\nDESCRIPTION: A complete Vala application that demonstrates how to create a GTK4 Entry widget with auto-completion displaying two columns of data. The application creates an EntryCompletion connected to a ListStore with locations and their countries, showing both pieces of information in the completion dropdown.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/entry-completion-two-cells.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\n// EntryCompletionTwoCells.vala\n\npublic class EntryCompletionTwoCellsSample : Gtk.Application {\n    public EntryCompletionTwoCellsSample () {\n        Object (application_id: \"com.example.EntryCompletionTwoCellsSample\");\n    }\n\n    public override void activate () {\n        // Prepare Gtk.Window\n        var window = new Gtk.ApplicationWindow (this) {\n            title = \"Entry Completion - Two Cells\",\n            default_width = 350,\n            default_height = 70,\n        };\n\n        // The Entry\n        var entry = new Gtk.Entry () {\n            placeholder_text = \"Enter a Location\",\n        };\n\n        // The EntryCompletion\n        Gtk.EntryCompletion completion = new Gtk.EntryCompletion ();\n        entry.set_completion (completion);\n\n        // Create, fill & register a Gtk.ListStore\n        Gtk.ListStore list_store = new Gtk.ListStore (2, typeof (string), typeof (string));\n        completion.set_model (list_store);\n        completion.set_text_column (0);\n\n        var cell = new Gtk.CellRendererText ();\n        completion.pack_start(cell, false);\n        completion.add_attribute(cell, \"text\", 1);\n\n        Gtk.TreeIter iter;\n\n        list_store.append (out iter);\n        list_store.set (iter, 0, \"Burgenland\", 1, \"Austria\");\n        list_store.append (out iter);\n        list_store.set (iter, 0, \"Berlin\", 1, \"Germany\");\n        list_store.append (out iter);\n        list_store.set (iter, 0, \"Lower Austria\", 1, \"Austria\");\n        list_store.append (out iter);\n        list_store.set (iter, 0, \"Upper Austria\", 1, \"Austria\");\n        list_store.append (out iter);\n        list_store.set (iter, 0, \"Salzburg\", 1, \"Austria\");\n        list_store.append (out iter);\n        list_store.set (iter, 0, \"Styria\", 1, \"Austria\");\n        list_store.append (out iter);\n        list_store.set (iter, 0, \"Tehran\", 1, \"Iran\");\n        list_store.append (out iter);\n        list_store.set (iter, 0, \"Vorarlberg\", 1, \"Austria\");\n        list_store.append (out iter);\n        list_store.set (iter, 0, \"Vienna\", 1, \"Austria\");\n\n        window.child = entry;\n        window.present ();\n    }\n\n    public static int main (string[] args) {\n        var app = new EntryCompletionTwoCellsSample ();\n        return app.run (args);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Pointer with Destroy Notification in Vala\nDESCRIPTION: Demonstrates Vala implementation of function pointer with destroy notification using CCode attributes.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields/08-04-function-pointers.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (cname = \"foo_func\")]\npublic delegate void FooFunc(int a);\n\npublic struct Foo {\n    [CCode (delegate_target_cname = \"callback_context\", delegate_target_destroy_notify_cname = \"callback_free\")]\n    public FooFunc callback;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Version Attributes in Vala\nDESCRIPTION: Demonstrates different ways to use the [Version] attribute to mark functions with version-related metadata including experimental status, deprecation, version numbers, and replacement functions.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/02-00-getting-started/02-09-the-version-attribute.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nnamespace Test {\n    [Version (experimental = true)]\n    public void test_function_1 ();\n\n    [Version (deprecated = true)]\n    public void test_function_2 ();\n\n    [Version (deprecated_since = \"2.0\")]\n    public void test_function_3 ();\n\n    [Version (deprecated = true, deprecated_since = \"2.0\", replacement = \"test_function_5\", since = \"1.0\")]\n    public void test_function_4 ();\n\n    [Version (since = \"1.0\")]\n    public void test_function_5 ();\n}\n```\n\n----------------------------------------\n\nTITLE: Binding a pointer-modifying C function in Vala using ReturnsModifiedPointer attribute\nDESCRIPTION: Vala binding that uses the ReturnsModifiedPointer attribute to handle C functions that return a new pointer to the instance. The method signature uses void return type but the attribute ensures proper pointer management.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/05-00-fundamentals-of-binding-a-c-function/05-10-methods-that-change-the-instance-reference.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\n[Compact]\n[CCode (cname = \"Table\")]\npublic class Table {\n    [ReturnsModifiedPointer]\n    public void grow (size_t object_count);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation Structure for Vala Compiler\nDESCRIPTION: ReStructuredText configuration block that sets up the documentation structure for the Vala compiler section. Uses toctree directive to include all files from the '03-00-the-vala-compiler' directory with a maximum depth of 1 level.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/03-00-the-vala-compiler.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :glob:\n   :maxdepth: 1\n\n   03-00-the-vala-compiler/*\n```\n\n----------------------------------------\n\nTITLE: Forbidden Assignment Between Nullable and Non-Nullable Objects in Vala\nDESCRIPTION: This snippet demonstrates an assignment that is prohibited by the compiler due to strict non-null type checking. It illustrates the restriction against assigning a nullable reference to a non-nullable reference.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/05-00-experimental-features/05-03-strict-non-null-mode.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\no1 = o2;\n```\n\n----------------------------------------\n\nTITLE: Implementing External Methods in C#\nDESCRIPTION: This C# code demonstrates how to use the DllImport attribute to call an external method from a shared library. It imports the 'SampleMethod' function from 'libfoo.so' and calls it in the Main method.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/30-external-methods.rst#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Runtime.InteropServices;\n\npublic class MainClass\n{\n    [DllImport(\"libfoo.so\")]\n    public static extern int SampleMethod(int x);\n\n    static void Main()\n    {\n        Console.WriteLine(\"SampleMethod() returns {0}\", SampleMethod(5));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding a Generic Sort Function in C and Vala\nDESCRIPTION: Example of a generic sort function in C and its Vala binding using the CCode attribute with simple_generics. This demonstrates how to apply generics to a single method.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/07-00-binding-a-c-function-s-parameter-and-return-types/07-06-parameters-of-variable-type-generics.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nvoid sort(void **array, int array_length, foo_func compare, void *context);\n```\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (simple_generics = true)]\npublic void sort<T> (T[] array, FooFunc<T> compare);\n```\n\n----------------------------------------\n\nTITLE: Binding a Generic Macro in C to a Function in Vala\nDESCRIPTION: Example of binding a C macro that takes a type name to a generic function in Vala using the generic_type_pos attribute.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/07-00-binding-a-c-function-s-parameter-and-return-types/07-06-parameters-of-variable-type-generics.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define sort(array, type, compare, context) ...\n```\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (generic_type_pos = 1.1)]\npublic void sort<T> (T[] array, FooFunc<T> compare);\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in reStructuredText for Valadoc Guide\nDESCRIPTION: This code snippet defines a table of contents for the Valadoc guide using reStructuredText directives. It sets up a numbered, globbed toctree with a maximum depth of 1, pointing to files within the 'valadoc-guide' directory.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/valadoc-guide.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :glob:\n   :maxdepth: 1\n   :numbered:\n\n   valadoc-guide/*\n```\n\n----------------------------------------\n\nTITLE: Creating Arrays of Structs in Vala\nDESCRIPTION: Examples showing different ways to create arrays of structs in Vala, including using constant arrays, direct initialization, and custom constructors.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/faq.rst#2025-04-21_snippet_6\n\nLANGUAGE: vala\nCODE:\n```\nconst YourStruct[] s = { { value1, value2, ... }, ...};\n```\n\nLANGUAGE: vala\nCODE:\n```\nYourStruct[] s = { YourStruct() { field1=value1, field2=value2, ... }, ...};\n```\n\nLANGUAGE: vala\nCODE:\n```\npublic struct YourStruct {\n  public int field1;\n  public string field2;\n  ...\n  public YourStruct (int field1, string field2, ...) {\n    this.field1 = field1;\n    this.field2 = field2;\n    ...\n  }\n}\n```\n\nLANGUAGE: vala\nCODE:\n```\nYourStruct[] s = { YourStruct (field1, field2, ...), ...};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Retrieval Method in Vala\nDESCRIPTION: This snippet shows an incorrect attempt to return an owned value via a property getter in Vala. The method retrievers a string via a call but duplicates it unnecessarily, causing a potential invalid reference.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-10-ownership.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\npublic string property {\n    get {\n        return getter_method();   // WRONG: for the same reason above.\n    }\n}\n\npublic string getter_method() {\n    return \"some text\"; // \"some text\" is duplicated and returned at this point.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GTK+ Demo Window in C#\nDESCRIPTION: This C# code demonstrates how to create a basic GTK+ window with a button. It initializes the application, sets up the window properties, and handles the button click event.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/37-gtk-demo-app.rst#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Gtk;\n\nclass Demo : Window\n{\n    public Demo() : base(\"This is a window\")\n    {\n        SetDefaultSize(250, 200);\n        SetPosition(WindowPosition.Center);\n\n        DeleteEvent += delegate { Application.Quit(); };\n\n        var button = new Button(\"Click\");\n        Add(button);\n        ShowAll();\n    }\n\n    static void Main()\n    {\n        Application.Init();\n        new Demo();\n        Application.Run();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding User Pointer Functions in C to a Generic Property in Vala\nDESCRIPTION: Example of binding C functions for getting and setting a user pointer to a generic property in a Vala class using simple_generics.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/07-00-binding-a-c-function-s-parameter-and-return-types/07-06-parameters-of-variable-type-generics.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct foo Foo;\nvoid *foo_get_userptr(Foo*);\nvoid foo_set_userptr(Foo*,void*);\n```\n\nLANGUAGE: vala\nCODE:\n```\npublic class Foo<T> {\n    public unowned T? user_data {\n        [CCode (cname = \"foo_get_userptr\", simple_generics = true)] get;\n        [CCode (cname = \"foo_set_userptr\", simple_generics = true)] set;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Reference-Counted C Structures as Vala Compact Classes\nDESCRIPTION: Vala binding code for reference-counted C structures. Shows how to properly define compact classes with reference counting attributes and expose manual reference management methods.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-05-compact-classes.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (cname = \"foo\", ref_function = \"foo_retain\", unref_function = \"foo_release\")]\n[Compact]\npublic class Foo {\n    [CCode (cname = \"foo_new\")]\n    public Foo ();\n    [CCode (cname = \"foo_retain\")]\n    public void @ref ();\n    [CCode (cname = \"foo_release\")]\n    public void unref ();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unowned Reference Method in Vala\nDESCRIPTION: This Vala code snippet demonstrates defining a method that returns an unowned reference. The method creates a new Object and returns it as an unowned reference, allowing the object to be garbage collected when no longer needed.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-10-ownership.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nclass Test {\n    private Object o;\n\n    public unowned Object get_unowned_ref() {\n        this.o = new Object();\n        return this.o;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Valadoc Error Output\nDESCRIPTION: This snippet shows the error message that Valadoc produces when attempting to generate documentation in an existing directory.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/valadoc-guide/01-00-quick-start.rst#2025-04-21_snippet_2\n\nLANGUAGE: output\nCODE:\n```\nerror: File already exists\n```\n\n----------------------------------------\n\nTITLE: Compiling Vala Sources\nDESCRIPTION: Command for compiling multiple Vala source files into a native executable using the Vala compiler (valac).\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/02-compilation.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ valac source1.vala source2.vala -o program\n```\n\n----------------------------------------\n\nTITLE: Running the Compiled Vala GTK4 Application\nDESCRIPTION: This snippet demonstrates how to run the compiled Vala application. It's assumed that the compilation was successful and the executable is named BasicAppSample.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/basic-app.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ./BasicAppSample.vala\n```\n\n----------------------------------------\n\nTITLE: Basic Arithmetic Operators in Vala\nDESCRIPTION: This snippet covers basic arithmetic operations including addition, subtraction, multiplication, division, and modulus, applicable to left and right operands. Additionally, it mentions that the '+' operator can also be used for string concatenation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-05-operators.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\n+, -, /, *, %\n\n```\n\n----------------------------------------\n\nTITLE: Binding a C struct to Vala with constructor and destructor\nDESCRIPTION: The Vala binding for the foo_t struct that maps the C initialization and cleanup functions. It uses CCode attributes to specify the C name, destruction function, and type information.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-04-structs.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (cname = \"foo_t\", destroy_function = \"foo_free\", has_type_id = false)]\npublic struct Foo {\n    int a;\n    int *b; // We can do better later\n    [CCode (cname = \"foo_init\")]\n    public Foo ();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vala on Debian/Ubuntu using APT\nDESCRIPTION: This command installs the Vala compiler on Debian-based systems (like Ubuntu) using the APT package manager. The sudo command elevates privileges to allow software installation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/installation-guide.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n\"$ sudo apt install valac\"\n```\n\n----------------------------------------\n\nTITLE: Assignment Operator in Vala\nDESCRIPTION: This snippet describes the assignment operator which assigns the value of the right operand to the left operand (identifier). The left operand must be an identifier, and the right must result in a value or reference as appropriate.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-05-operators.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\n=\n\n```\n\n----------------------------------------\n\nTITLE: Struct Accept Children Method Implementation in Vala\nDESCRIPTION: Shows how the accept_children method is implemented in the Struct class. This method enables recursive traversal of the code tree by visiting all child nodes.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/03-00-the-vala-compiler/03-02-parser.rst#2025-04-21_snippet_13\n\nLANGUAGE: vala\nCODE:\n```\npublic override void accept_children (CodeVisitor visitor) {\n    if (base_type != null) {\n         base_type.accept (visitor);\n    }\n\n    foreach (TypeParameter p in type_parameters) {\n         p.accept (visitor);\n    }\n\n    foreach (Field f in fields) {\n         f.accept (visitor);\n    }\n\n    foreach (Constant c in constants) {\n         c.accept (visitor);\n    }\n\n    foreach (Method m in methods) {\n         m.accept (visitor);\n    }\n\n    foreach (Property prop in properties) {\n         prop.accept (visitor);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Console Input/Output in C#\nDESCRIPTION: This snippet shows how to use System.Console methods in C# to print messages, read user input, and display formatted output. It demonstrates WriteLine(), Write(), and ReadLine() methods.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/36-console-input-output.rst#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nSystem.Console.WriteLine(\"Hi!\");\nSystem.Console.Write(\"Please enter your name: \");\nvar name = System.Console.ReadLine();\nSystem.Console.WriteLine(\"Welcome, {0}!\", name);\n```\n\n----------------------------------------\n\nTITLE: Binding Null-terminated C Array to Vala\nDESCRIPTION: Demonstrates how to bind a null-terminated C array to Vala using the CCode attribute with array_null_terminated set to true.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields/08-03-arrays.rst#2025-04-21_snippet_5\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (array_null_terminated = true)]\npublic Foo[] foos;\n```\n\n----------------------------------------\n\nTITLE: Defining C Function Pointer Types\nDESCRIPTION: This snippet shows how to define function pointer types in C. It includes a compute_func that takes two integers and returns an int, and an analyze_func that takes two integers plus a void pointer for user data and returns a double.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-07-delegates.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef int(*compute_func)(int a, int b);\ntypedef double(*analyze_func)(int a, int b, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: Using Local Library Package with Valac Compiler\nDESCRIPTION: Shows how to compile Vala code using a local library as a package by specifying the VAPI directory. This example demonstrates using a local version of the Gee library.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/06-00-libraries/06-01-using-libraries.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ valac --vapidir ../gee --pkg gee ...\n```\n\n----------------------------------------\n\nTITLE: Installing Vala on ALT Linux using APT\nDESCRIPTION: This command installs the Vala compiler on ALT Linux using the APT package manager. The command is run with root privileges to allow the package to be installed.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/installation-guide.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n\"# apt-get install vala\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Context Delegates in Vala\nDESCRIPTION: This Vala code snippet demonstrates a workaround for implementing shared context delegates. It uses generic types and CCode attributes to create a structure that mimics the C function's behavior, allowing for shared context between delegates in Vala.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/10-00-awkward-situations/10-05-shared-context-delgates.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (simple_generics = true, has_target = false)]\npublic void X<T> (int a, T context);\n[CCode (simple_generics = true, has_target = false)]\npublic void Y<T> (double a, T context);\n[CCode (simple_generics = true)]\npublic void foo<T> (T context, X<T> x, Y<T> y);\n```\n\n----------------------------------------\n\nTITLE: Compiling the Text File Viewer Application in Vala\nDESCRIPTION: This command compiles the TextFileViewer.vala file using the Vala compiler (valac) with the GTK4 package.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/text-file-viewer.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ valac --pkg gtk4 TextFileViewer.vala\n```\n\n----------------------------------------\n\nTITLE: Using Namespace with Import Statement\nDESCRIPTION: Demonstrates how to import a namespace using the 'using' statement to avoid prefix notation. Shows how to bring the namespace into scope for cleaner function calls.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/02-00-getting-started/02-04-create-a-root-namespace.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\nusing Foo;\n\nvoid main () {\n    library_function ();\n}\n```\n\n----------------------------------------\n\nTITLE: Using For Loop in Vala\nDESCRIPTION: The for loop initializes *a* to 0 and increments *a* until it reaches 10, printing the value of *a* during each iteration. It is typically used for iterating a set number of times.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-06-control-structures.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\nfor (int a = 0; a < 10; a++) { stdout.printf(\"%d\\n\", a); }\n```\n\n----------------------------------------\n\nTITLE: Automating build and link with valac\nDESCRIPTION: This command illustrates how to use valac to automate the build and link process for a Vala project. The `-o` switch creates an object file, `--pkg` specifies package dependencies (e.g., gee-1.0), and a list of Vala source files is provided.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/07-00-tools/07-01-valac.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ valac -o appname --pkg gee-1.0 file_name_1.vala file_name_2.vala\n```\n\n----------------------------------------\n\nTITLE: Using cname Attribute with void Type in Vala\nDESCRIPTION: Example showing the use of cname attribute with void type as a workaround for problematic typedefs in class definitions. Note that this approach works for classes but not for delegates due to C language restrictions on function pointer casting.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/09-00-extra-hints.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\ncname = \"void\"\n```\n\n----------------------------------------\n\nTITLE: Compiling Vala Code with External Library\nDESCRIPTION: This bash command demonstrates how to compile a Vala program that uses an external library. The -X -lfoo option is used to link against the 'foo' library, with -X passing the next option to the C compiler.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/30-external-methods.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ valac demo.vala -X -lfoo\n```\n\n----------------------------------------\n\nTITLE: Binding Singly-Owned C Structures as Vala Compact Classes\nDESCRIPTION: Vala binding code for the singly-owned C structures. Shows how to properly define compact classes with appropriate constructor bindings and memory management attributes.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-05-compact-classes.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (cname = \"Foo\", free_function = \"foo_free\")]\n[Compact]\npublic class Foo {\n    [CCode (cname = \"foo_make\")]\n    public Foo ();\n\n    [CCode (cname = \"foo_dup\")]\n    public Foo dup ();\n}\n\n[CCode (cname = \"struct bar\", free_function = \"bar_close\", has_type_id = false)]\n[Compact]\npublic class Bar {\n    [CCode (cname = \"bar_open\")]\n    public static Bar? open (string filename);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Delegate in C and Vala\nDESCRIPTION: Example of defining a generic delegate in C using a function pointer, and its corresponding Vala binding using the CCode attribute with simple_generics.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/07-00-binding-a-c-function-s-parameter-and-return-types/07-06-parameters-of-variable-type-generics.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef int (*foo_func)(void *a, void *b, void* context);\n```\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (cname = \"foo_func\", simple_generics = true)]\npublic delegate int FooFunc<T> (T a, T b);\n```\n\n----------------------------------------\n\nTITLE: Compiling Mixed Vala and C Source Code\nDESCRIPTION: This bash command shows how to compile a project with mixed Vala and C source code. The Vala compiler can accept both Vala and C source files, allowing for integration of external C methods directly in the compilation process.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/30-external-methods.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ valac demo.vala foo.c\n```\n\n----------------------------------------\n\nTITLE: Setting Up Out-of-Tree Vala Build\nDESCRIPTION: Series of commands demonstrating how to set up an out-of-tree build for Vala, including cloning the repository, creating a build directory, and running configuration scripts.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/09-00-build-system.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nrodney@solaria:~/dev % git clone https://gitlab.gnome.org/GNOME/vala.git\nrodney@solaria:~/dev % ls vala\nfixme           fixme          fixme                  fixme\naclocal.m4      config.log     gobject-introspection  README\nAUTHORS         config.status  INSTALL                stamp-h1\nautogen.sh      config.sub     install-sh             tests\nautom4te.cache  configure      libtool                vala\nccode           configure.ac   ltmain.sh              vala-1.0.pc\nChangeLog       COPYING        MAINTAINERS            vala-1.0.pc.in\ncompile         depcomp        Makefile               vapi\ncompiler        doc            Makefile.am            vapigen\nconfig.guess    gee            Makefile.in            ylwrap\nconfig.h        gen-project    missing\nconfig.h.in     gobject        NEWS\nfixme           fixme          fixme                  fixme\nrodney@solaria:~/dev % mkdir buildvala\nrodney@solaria:~/dev % cd buildvala\nrodney@solaria:~/dev/buildvala % ../vala/autogen.sh --prefix=$HOME/dev/prefix\nrodney@solaria:~/dev/buildvala % make\n```\n\n----------------------------------------\n\nTITLE: Declaring Unowned Struct References\nDESCRIPTION: Shows how to declare unowned references to prevent double-free issues in parent pointers. The unowned keyword in Vala indicates that the destructor should not be called when the reference is overwritten.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields/08-02-pointers-to-structs.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nfoo_t *parent;\n```\n\nLANGUAGE: vala\nCODE:\n```\npublic unowned Foo parent;\n```\n\n----------------------------------------\n\nTITLE: Binding C Constants in Vala\nDESCRIPTION: This snippet shows how to bind to a C-defined constant in Vala code. The constant declaration specifies the type (double) explicitly and marks it as constant, but does not include the value since Vala will use the C identifier.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-01-constants.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\npublic const double CUSTOM_PI;\n```\n\n----------------------------------------\n\nTITLE: Compiling the Vala GTK4 Application\nDESCRIPTION: This snippet shows the command to compile the GTK4 application defined in BasicAppSample.vala using the Vala compiler with the GTK4 package. Ensure GTK4 is installed before compiling.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/basic-app.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ valac --pkg gtk4 BasicAppSample.vala\n```\n\n----------------------------------------\n\nTITLE: Creating Code Blocks in Vala Documentation Comments\nDESCRIPTION: Demonstrates how to include formatted code blocks within Vala documentation comments using triple curly braces. The code block preserves indentation and formatting of the enclosed code.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/valadoc-guide/03-00-documentation-comment-markup/03-02-formatting.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\n/**\n* Short description\n*\n* {{{\n*   static int main (string[] arg) {\n*      return 0;\n*   }\n* }}}\n*\n*/\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Constructor in C#\nDESCRIPTION: This snippet demonstrates how to define a static constructor in C#. The static constructor is called before the first instance is created or any static members are referenced.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/29-static-constructors.rst#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nclass Foo\n{\n    static Foo()\n    {\n        System.Console.WriteLine(\"Static constructor invoked.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Vala Class with Delegate and Method Example\nDESCRIPTION: Example Vala code showing a class with a delegate type and a method that will generate implicit parameters in C.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/05-00-fundamentals-of-binding-a-c-function/05-05-changing-the-position-of-generated-arguments.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\npublic class Foo {\n    public delegate int Transform (double a);\n    public int[] compute (int x, Transform t);\n}\n```\n\n----------------------------------------\n\nTITLE: Differentiating Struct Binding in Vala\nDESCRIPTION: Illustrates the difference between binding a struct directly and binding a pointer to a struct. This distinction is important when creating Vala bindings for C libraries.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields/08-01-structs.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\npublic Foo directStruct;  // For 'foo f;'\npublic Foo* pointerToStruct;  // For 'foo *f;'\n```\n\n----------------------------------------\n\nTITLE: Binding C Collection to Vala Class with get() Method\nDESCRIPTION: Vala class definition that binds a C collection to implement the get() method, which enables square bracket indexing syntax in Vala.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/06-00-adding-vala-friendly-semantics/06-03-collections.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\n[Compact]\n[CCode (cname = \"blkid_partlist\")]\npublic class ListOfPartitions {\n    [CCode (cname = \"blkid_partlist_get_partition\")]\n    public unowned Partition get (int index);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Installed Package with Valac Compiler\nDESCRIPTION: Demonstrates how to compile a Vala program with the gee-1.0 package using the valac compiler. This command enables usage of definitions from gee-1.0.vapi and its dependencies.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/06-00-libraries/06-01-using-libraries.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ valac --pkg gee-1.0 test.vala\n```\n\n----------------------------------------\n\nTITLE: Shared Library Compilation\nDESCRIPTION: Command to compile the C source into a shared library using gcc\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/06-00-libraries/06-02-creating-a-library.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ gcc --shared -fPIC -o libtest.so $(pkg-config --cflags --libs gobject-2.0) test.c\n```\n\n----------------------------------------\n\nTITLE: Defining Main Entry Point in C#\nDESCRIPTION: In C#, the Main method must be defined inside a class. It serves as the entry point for the application.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/04-main-entry-point.rst#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMain\n```\n\n----------------------------------------\n\nTITLE: Mapping C Constant Definitions to Vala Enum\nDESCRIPTION: This example shows how to map a series of C constant definitions to a Vala enum. It uses the CCode attribute to specify the C name and prefix for the enum values.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-02-enums-and-flags.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define BAR_X 1\n#define BAR_Y 2\n#define BAR_Z 3\n```\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (cname = \"int\", cprefix = \"BAR_\", has_type_id = false)]\npublic enum Bar {\n    X,\n    Y,\n    Z\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing GLib Path Functions in Vala\nDESCRIPTION: Demonstrates how to call GLib path manipulation functions using Vala syntax.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/08-00-techniques/08-02-using-glib.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nGLib.Path.get_basename()\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running Vala HashSet Example\nDESCRIPTION: Command-line instructions for compiling a Vala program using the Gee library and executing the resulting binary\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/gee-samples/02-set-sample.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ valac --pkg gee-0.8 gee-set.vala\n$ \\./gee-set\n```\n\n----------------------------------------\n\nTITLE: Multiple Constructor Chaining in C#\nDESCRIPTION: Demonstrates how to chain multiple constructors within the same class in C#. Uses the this keyword to call another constructor in the same class.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/12-constructor-chaining.rst#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nclass Foo\n{\n    public Foo() : this(\"bar\") { }\n    public Foo(string bar) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Documentation Comments in C#\nDESCRIPTION: This snippet demonstrates how to write documentation comments in C#. It shows the XML-style comment structure with tags for summary, parameters, and return value.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/08-documentation-comments.rst#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n/// Documentation comment\n/// </summary>\n/// <param name=\"foo\">...</param>\n/// <param name=\"bar\">...</param>\n/// <returns>...</returns>\n```\n\n----------------------------------------\n\nTITLE: Binding C Array with Length to Vala\nDESCRIPTION: Shows how to bind a C array with an associated length variable to Vala. The CCode attribute is used to specify the name and type of the length variable in C.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields/08-03-arrays.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (array_length_cname = \"foo_count\", array_length_type = \"size_t\")]\npublic int[] foo;\n```\n\n----------------------------------------\n\nTITLE: Creating Object Pointer in Vala\nDESCRIPTION: Demonstrates how to create a pointer to an object instance, giving manual control over memory management. Allows direct memory allocation and responsibility for object destruction.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-12-pointers.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nObject* o = new Object();\n```\n\n----------------------------------------\n\nTITLE: Binding C Structs Passed by Value in Vala\nDESCRIPTION: This Vala code demonstrates how to bind a C struct that's passed by value. It uses the [SimpleType] attribute in addition to [CCode] to indicate that the struct should be passed by value.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/07-00-binding-a-c-function-s-parameter-and-return-types/07-02-structs.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (cname = \"foo\", has_type_id = false)]\n[SimpleType]\npublic struct Foo {\n    public int x;\n    public int y;\n}\nvoid compute_foo(Foo f);\n```\n\n----------------------------------------\n\nTITLE: Annotating C Source Code for GObject Introspection\nDESCRIPTION: Example of C source code with GObject Introspection annotations in GTK-Doc format. This code snippet demonstrates how to annotate function parameters and provide documentation that will be used in generating GIR files.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/generating-a-vapi-with-gobject-introspection.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/**\n * gtk_button_new_from_icon_name:\n * @icon_name: (nullable): an icon name or %NULL\n * @size: (type int): an icon size (#GtkIconSize)\n *\n * Creates a new button containing an icon from the current icon theme.\n *\n * If the icon name isn't known, a \"broken image\" icon will be\n * displayed instead. If the current icon theme is changed, the icon\n * will be updated appropriately.\n *\n * This function is a convenience wrapper around gtk_button_new() and\n * gtk_button_set_image().\n *\n * Returns: a new #GtkButton displaying the themed icon\n *\n * Since: 3.10\n */\nGtkWidget*\ngtk_button_new_from_icon_name (const gchar *icon_name,\n\t\t\t       GtkIconSize  size)\n{\n  GtkWidget *button;\n  GtkWidget *image;\n\n  image = gtk_image_new_from_icon_name (icon_name, size);\n  button =  g_object_new (GTK_TYPE_BUTTON,\n\t\t\t  \"image\", image,\n\t\t\t  NULL);\n\n  return button;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Values for Auto-Implemented Properties in C#\nDESCRIPTION: Demonstrates how to set a default value for an auto-implemented property in C# using a constructor.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/21-properties.rst#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nclass Person\n{\n    public Person()\n    {\n        Name = \"Default Name\";\n    }\n\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding a C struct to Vala with default value and no destructor\nDESCRIPTION: The Vala binding for the bar_t struct that uses the default initializer. It demonstrates how to specify an empty destroy_function to prevent Vala from generating a destructor, and sets a default value using the C macro.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-04-structs.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (cname = \"bar_t\", destroy_function = \"\", default_value = \"BAR_INITIALIZER\", has_type_id = false)]\npublic struct Bar {\n    int x;\n    int y;\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping C Enum to Vala Enum\nDESCRIPTION: This example demonstrates a straight mapping between a C enum and a Vala enum. It shows how to use the CCode attribute to specify the C name and prefix for the enum.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-02-enums-and-flags.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef enum {\n    FOO_A,\n    FOO_B,\n    FOO_C,\n} foo_e;\n```\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (cname = \"foo_e\", cprefix = \"FOO_\", has_type_id = false)]\npublic enum Foo {\n    A,\n    B,\n    C\n}\n```\n\n----------------------------------------\n\nTITLE: Generating VAPI with Custom Vala Code Using vapigen\nDESCRIPTION: Command to generate VAPI bindings from a GIR file with a custom Vala file. The command specifies the library name, package dependencies, metadata directory, and includes both the GIR file and custom Vala file.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/generating-a-vapi-with-gobject-introspection.rst#2025-04-21_snippet_19\n\nLANGUAGE: console\nCODE:\n```\nvapigen \\\n    --library foo-1.0 \\\n    --pkg bar-1.0 \\\n    --metadatadir ./metadata/ \\\n    Foo-1.0.gir \\\n    Foo-1.0-custom.vala\n```\n\n----------------------------------------\n\nTITLE: Traditional Multiple Comparison Syntax in Vala\nDESCRIPTION: Shows the traditional way of writing multiple comparisons using logical AND operators in Vala.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/05-00-experimental-features/05-01-chained-relational-expressions.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nif (1 < a && a < 5) {}\n\nif (0 < a && a < b && b < c && c < d && d < 255) {\n    // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Enum Methods in C# using Extension Methods\nDESCRIPTION: Shows how to achieve similar functionality to Vala's enum methods in C# using extension methods. It defines a 'Season' enum and a separate static class 'SeasonExtensions' with an extension method 'IsHot()'.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/16-enums.rst#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nenum Season { Spring, Summer, Autumn, Winter }\n\nstatic class SeasonExtensions\n{\n    public static bool IsHot(this Season season)\n    {\n        return season == Season.Summer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Async Scope Function Pointer in Vala\nDESCRIPTION: Demonstrates Vala implementation of async scope function pointer using CCode scope attribute.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields/08-04-function-pointers.rst#2025-04-21_snippet_5\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (scope = \"async\", cname = \"start_job\")]\npublic delegate void StartJob (int priority);\n\npublic class ThreadPool {\n    public void queue_job (StartJob j);\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Unowned Reference in Vala\nDESCRIPTION: This snippet shows how an unowned reference method is called and its return value is assigned to a variable. It highlights the importance of expecting a weak reference to safely manage object ownership.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-10-ownership.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nunowned Object o = get_unowned_ref();\n```\n\n----------------------------------------\n\nTITLE: Defining C Function for Collection Indexing\nDESCRIPTION: C function signature for retrieving an item from a collection by index. This is the C function that will be bound to Vala's get() method.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/06-00-adding-vala-friendly-semantics/06-03-collections.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nblkid_partition\nblkid_partlist_get_partition (blkid_partlist ls,\n                               int n);\n```\n\n----------------------------------------\n\nTITLE: Compiling Vala Program with Debug Symbols\nDESCRIPTION: Console command showing how to compile a Vala program with debug symbols (-g) and save temporary C files (--save-temps).\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/08-00-techniques/08-01-debugging.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ valac -g --save-temps debug-demo.vala\n```\n\n----------------------------------------\n\nTITLE: GObject-based Construction in Vala\nDESCRIPTION: Example showing how to chain up to the base constructor using GObject property-based construction instead of the base() syntax.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/faq.rst#2025-04-21_snippet_5\n\nLANGUAGE: vala\nCODE:\n```\nclass MyWindow : Gtk.Window {\n  public MyWindow () {\n    Object (type: Gtk.WindowType.TOPLEVEL);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Generic Type Declaration in Vala\nDESCRIPTION: Shows the verbose way of declaring a complex generic type without using type inference.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-04-data-types.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\nMyFoo<string, MyBar<string, int>> foo = new MyFoo<string, MyBar<string, int>>();\n```\n\n----------------------------------------\n\nTITLE: Using Namespace with Explicit Prefix\nDESCRIPTION: Shows how to use a namespaced function by explicitly referencing the namespace prefix in the code. Demonstrates calling a library function using the full namespace path.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/02-00-getting-started/02-04-create-a-root-namespace.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nvoid main () {\n    Foo.library_function();\n}\n```\n\n----------------------------------------\n\nTITLE: Generated GIR XML for Annotated C Function\nDESCRIPTION: Example of the XML representation in a GIR file for the previously annotated C function. This shows how the annotations and documentation are translated into the GObject Introspection Repository format.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/generating-a-vapi-with-gobject-introspection.rst#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<constructor name=\"new_from_icon_name\"\n            c:identifier=\"gtk_button_new_from_icon_name\"\n            version=\"3.10\">\n<doc xml:space=\"preserve\">Creates a new button containing an icon from the current icon theme.\n\nIf the icon name isn't known, a \"broken image\" icon will be\ndisplayed instead. If the current icon theme is changed, the icon\nwill be updated appropriately.\n\nThis function is a convenience wrapper around gtk_button_new() and\ngtk_button_set_image().</doc>\n<return-value transfer-ownership=\"none\">\n  <doc xml:space=\"preserve\">a new #GtkButton displaying the themed icon</doc>\n  <type name=\"Widget\" c:type=\"GtkWidget*\"/>\n</return-value>\n<parameters>\n  <parameter name=\"icon_name\"\n             transfer-ownership=\"none\"\n             nullable=\"1\"\n             allow-none=\"1\">\n    <doc xml:space=\"preserve\">an icon name or %NULL</doc>\n    <type name=\"utf8\" c:type=\"const gchar*\"/>\n  </parameter>\n  <parameter name=\"size\" transfer-ownership=\"none\">\n    <doc xml:space=\"preserve\">an icon size (#GtkIconSize)</doc>\n    <type name=\"gint\" c:type=\"GtkIconSize\"/>\n  </parameter>\n</parameters>\n</constructor>\n```\n\n----------------------------------------\n\nTITLE: Defining Function Pointers and Related Functions in C\nDESCRIPTION: This C code snippet defines a function pointer type 'foo_func' and several functions that use this type. It demonstrates different ways of passing and managing function pointers with associated context data.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/07-00-binding-a-c-function-s-parameter-and-return-types/07-05-function-pointers.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (*foo_func)(int x, void *context);\n\nvoid call_foo(foo_func f, void *context);\nvoid call_foo_later(foo_func f, void *context, void(*free_context)(void*));\nfoo_func get_foo(void **context);\nfoo_func make_foo(void **context, void(**free_context)(void*));\n```\n\n----------------------------------------\n\nTITLE: Implementing IDisposable for Resource Management in C#\nDESCRIPTION: This snippet shows how to implement the IDisposable interface in C# for proper resource management. It includes the class definition and usage with a 'using' statement.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/26-resource-disposing.rst#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nclass MyResource : IDisposable\n{\n    public void Dispose()\n    {\n        // ...\n    }\n}\n/* Usage: */\nusing (var res = new MyResource()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Do-While Loop in Vala\nDESCRIPTION: The do-while loop guarantees that the body will execute at least once before the condition is tested, decrementing *a* while *a* remains greater than *b*. This can be useful when the initial execution of the loop must occur regardless of the condition.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-06-control-structures.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\ndo { a--; } while (a > b);\n```\n\n----------------------------------------\n\nTITLE: Vala Value Type Reference\nDESCRIPTION: Lists the available value types in Vala, including architecture-independent integer types and differences from C#. Notes the absence of byte, sbyte, and decimal types, and explains the distinction between Vala's char (UCS-4) and C#'s char (UCS-2).\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/06-value-types.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nint8, int16, int32, int64    // signed integers with fixed sizes\nuint8, uint16, uint32, uint64  // unsigned integers with fixed sizes\nint, long                     // architecture dependent sizes\nunichar                       // UCS-4 character type\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation with Valadoc\nDESCRIPTION: This command uses Valadoc to generate documentation for a Vala file. It specifies the package name, version, output directory, and input file.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/valadoc-guide/01-00-quick-start.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nvaladoc --package-name=\"simon-says\" --package-version=1.0.0 -o docs lib.vala\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Structs in C\nDESCRIPTION: This snippet shows how to define a struct and a function that takes a pointer to that struct in C. This is the common way of passing structs in C libraries.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/07-00-binding-a-c-function-s-parameter-and-return-types/07-02-structs.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct foo {\n    int x;\n    int y;\n};\nvoid compute_foo(foo *f);\n```\n\n----------------------------------------\n\nTITLE: Defining a C struct with initialization and cleanup functions\nDESCRIPTION: A typical C struct definition with initialization and cleanup functions. This pattern includes a struct containing primitive data and a pointer, along with functions to initialize and free the struct.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-04-structs.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct {\n    int a;\n    int *b;\n} foo_t;\nvoid foo_init(foo_t*);\nvoid foo_free(foo_t*);\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Comment Structure in Vala\nDESCRIPTION: This snippet demonstrates the standard structure of a documentation comment in Vala, including sections for brief description, detailed description, and taglets. This format is used by Valadoc to generate proper documentation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/valadoc-guide/03-00-documentation-comment-markup.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\n/**\n * [brief description]\n *\n * [long description]\n *\n * [taglets]\n */\n```\n\n----------------------------------------\n\nTITLE: Fixing VAPI Generation with Metadata\nDESCRIPTION: Example of a metadata file used to tweak the VAPI generation process. This XML snippet shows how to mark parameters as out parameters for a specific function in the generated VAPI.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/generating-a-vapi-with-gobject-introspection.rst#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\npoppler_page_get_size.width is_out=\"1\"\npoppler_page_get_size.height is_out=\"1\"\n```\n\n----------------------------------------\n\nTITLE: Array Length Parameter Example in Vala and C\nDESCRIPTION: Demonstrates how Vala transforms array declarations with implicit length parameters into corresponding C code. Shows both parameter and return value cases.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/07-00-binding-a-c-function-s-parameter-and-return-types/07-03-arrays.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nvoid foo (double[] array);\ndouble[] foo (float f);\n```\n\nLANGUAGE: c\nCODE:\n```\nvoid foo(double *array, int array_length);\ndouble *foo(float f, int *array_length);\n```\n\n----------------------------------------\n\nTITLE: Equality Operator in Vala\nDESCRIPTION: This snippet explains the equality operator (==) which evaluates two operands and returns a boolean value indicating whether they are equal. It clarifies the evaluation rules for value types, reference types, and strings.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-05-operators.rst#2025-04-21_snippet_7\n\nLANGUAGE: vala\nCODE:\n```\n==\n\n```\n\n----------------------------------------\n\nTITLE: Ownership Transfer with Owned Keyword in Vala\nDESCRIPTION: This snippet demonstrates the use of the 'owned' keyword in Vala to transfer object ownership between variables. The code shows how ownership of the object referenced by 'bar' is passed to 'foo', with 'bar' set to null.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-10-ownership.rst#2025-04-21_snippet_8\n\nLANGUAGE: vala\nCODE:\n```\nFoo foo = (owned) bar;\n```\n\n----------------------------------------\n\nTITLE: Initializing Vala Hello World Class\nDESCRIPTION: Defines a Vala class named Demo.HelloWorld that inherits from GLib.Object, demonstrating class declaration and namespace usage\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/01-00-first-program.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nclass Demo.HelloWorld : GLib.Object {\n```\n\n----------------------------------------\n\nTITLE: Declaring Nullable Struct Pointers\nDESCRIPTION: Demonstrates how to declare a nullable pointer to a struct type. In Vala, nullable types are indicated with a question mark suffix.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields/08-02-pointers-to-structs.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nfoo_t *myfoo;\n```\n\nLANGUAGE: vala\nCODE:\n```\npublic foo? myfoo;\n```\n\n----------------------------------------\n\nTITLE: Binding C Array with Constant Length to Vala\nDESCRIPTION: Demonstrates how to bind a C array with a constant length to Vala using the CCode attribute with array_length_cexpr to specify the constant expression for the array length.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields/08-03-arrays.rst#2025-04-21_snippet_7\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (array_length_cexpr = \"FOO_COUNT\")]\npublic Foo[] foos;\n```\n\n----------------------------------------\n\nTITLE: Custom List Type Definition in Vala\nDESCRIPTION: Demonstrates defining a new type by inheriting from GLib.List with GLib.Value as the element type.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-04-data-types.rst#2025-04-21_snippet_5\n\nLANGUAGE: vala\nCODE:\n```\npublic class ValueList : GLib.List<GLib.Value> {\n    [CCode (has_construct_function = false)]\n    protected ValueList ();\n    public static GLib.Type get_type ();\n}\n```\n\n----------------------------------------\n\nTITLE: Compound Bit Shift Operators in Vala\nDESCRIPTION: This snippet describes the compound bit shift operators (<<=, >>=) which shift the left operand a specified number of bits according to the right operand and assign the result back to the left operand.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-05-operators.rst#2025-04-21_snippet_6\n\nLANGUAGE: vala\nCODE:\n```\n<<=, >>=\n\n```\n\n----------------------------------------\n\nTITLE: Generating C Header Files with valac\nDESCRIPTION: Demonstrates the use of the '-H' switch with valac to generate a C header file for a Vala project. This can be useful for integrating Vala code with C projects. Required inputs are Vala source files, with outputs being a C header file.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-01-source-files-and-compilation.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ valac hello.vala -C -H hello.h\n```\n\n----------------------------------------\n\nTITLE: Specifying C Header for a Namespace or Type (XML)\nDESCRIPTION: Example of using metadata to specify a C header filename for a namespace or type when it's not possible to amend the GIR generation process.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/generating-a-vapi-with-gobject-introspection.rst#2025-04-21_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\nPnpIds cheader_filename=\"libgnome-desktop/gnome-pnp-ids.h\"\n```\n\n----------------------------------------\n\nTITLE: C Array with Length Variable\nDESCRIPTION: Demonstrates a common C pattern where an array is accompanied by a separate variable to store its length. This is often used for dynamically-sized arrays in C.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields/08-03-arrays.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nint *foo;\nsize_t foo_count;\n```\n\n----------------------------------------\n\nTITLE: Logical Operators in Vala\nDESCRIPTION: This snippet describes logical operations (logical NOT (!), AND (&&), OR (||)) which can be applied to boolean values. It specifies the number of arguments for each operation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-05-operators.rst#2025-04-21_snippet_9\n\nLANGUAGE: vala\nCODE:\n```\n!, &&, ||\n\n```\n\n----------------------------------------\n\nTITLE: Storing Regular Expressions in Vala\nDESCRIPTION: This snippet shows how to store a regular expression in a variable of type 'Regex' in Vala. It illustrates the basic syntax required to assign a regular expression to a variable.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/05-00-experimental-features/05-02-regular-expression-literals.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nRegex regex = /foo/;\n```\n\n----------------------------------------\n\nTITLE: Freeing Pointer Memory\nDESCRIPTION: Illustrates how to manually deallocate memory for a pointer-referenced object using the delete keyword. Essential for preventing memory leaks when using manual memory management.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-12-pointers.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\ndelete o;\n```\n\n----------------------------------------\n\nTITLE: Implicit Object Inheritance in C#\nDESCRIPTION: Demonstrates how C# classes implicitly inherit from System.Object without explicit declaration. All C# classes automatically extend object/System.Object by default.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/09-object-base-class.rst#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nclass Foo\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Arrays in C\nDESCRIPTION: Demonstrates how to declare fixed-length and dynamically-sized arrays in C. The first line shows a fixed-length array of 20 integers, while the second line declares a pointer to an integer, which can be used for dynamically-sized arrays.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields/08-03-arrays.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint foo[20];\nint *bar;\n```\n\n----------------------------------------\n\nTITLE: Implementing Interface Inheritance in C#\nDESCRIPTION: Illustrates interface inheritance in C# with two interfaces and a class implementing the derived interface.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/15-interfaces.rst#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ninterface IfaceA\n{\n    void MethodA();\n}\n\ninterface IfaceB : IfaceA\n{\n    void MethodB();\n}\n\nclass Demo : IfaceB\n{\n    public void MethodA() { }\n    public void MethodB() { }\n}\n```\n\n----------------------------------------\n\nTITLE: CodeVisitor Class Hierarchy in Vala\nDESCRIPTION: Lists all the classes that inherit from CodeVisitor in Vala. These visitor classes are responsible for different aspects of processing the code tree.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/03-00-the-vala-compiler/03-02-parser.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\npublic abstract class Vala.CodeVisitor\npublic class Vala.CodeGenerator : CodeVisitor\npublic class Vala.CodeWriter : CodeVisitor\npublic class Vala.FlowAnalyzer : CodeVisitor\npublic class Vala.GenieParser : CodeVisitor\npublic class Vala.GirParser : CodeVisitor\npublic class Vala.GIdlParser : CodeVisitor\npublic class Vala.Parser : CodeVisitor\npublic class Vala.SemanticAnalyzer : CodeVisitor\npublic class Vala.SymbolResolver : CodeVisitor\n```\n\n----------------------------------------\n\nTITLE: Using Unsafe Code Block in C#\nDESCRIPTION: In C#, unsafe code must be enclosed within an 'unsafe' block to allow the use of pointers and other low-level operations.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/24-unsafe-code-and-pointers.rst#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nunsafe { }\n```\n\n----------------------------------------\n\nTITLE: Marking Return Value as Nullable (XML)\nDESCRIPTION: Example of using metadata to mark a return value as nullable, addressing the difference in nullability assumptions between GIR and Vala.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/generating-a-vapi-with-gobject-introspection.rst#2025-04-21_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\nActor.get_parent nullable\n```\n\n----------------------------------------\n\nTITLE: Async Scope Function Pointer in C\nDESCRIPTION: Shows C implementation of a one-time-use function pointer for thread pool job execution.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields/08-04-function-pointers.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\ntypedef void(*start_job)(int priority, void *context);\n\nvoid threadpool_queue_job(Pool *p, start_job j, void *context);\n```\n\n----------------------------------------\n\nTITLE: Custom Integer Type Definition in Vala\nDESCRIPTION: Shows how to define a new simple type by deriving from uint, equivalent to C typedef.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-04-data-types.rst#2025-04-21_snippet_4\n\nLANGUAGE: vala\nCODE:\n```\n[SimpleType]\npublic struct Integer : uint {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining C Functions for Property Access\nDESCRIPTION: C code defining struct and functions that can be wrapped as properties in Vala. The functions provide getters and setters for items in a Foo struct.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/06-00-adding-vala-friendly-semantics/06-02-properties.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct foo Foo;\nint foo_item_count(Foo f);\nint foo_max_items(Foo f);\nvoid foo_set_max_items(Foo f);\n```\n\n----------------------------------------\n\nTITLE: Defining Comment Types in Vala\nDESCRIPTION: Illustrates three primary comment styles in Vala: single-line comments using '//', multi-line comments using '/* */', and documentation comments using '/** */'\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-03-comments.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\n// Comment continues until end of line\n\n/* Comment lasts between delimiters */\n\n/**\n * Documentation comment\n */\n```\n\n----------------------------------------\n\nTITLE: Defining C Function for Collection Size\nDESCRIPTION: C function signature for retrieving the size of a collection. This function will be bound as a Vala property to enable foreach functionality.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/06-00-adding-vala-friendly-semantics/06-03-collections.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nint\nblkid_partlist_numof_partitions (blkid_partlist ls);\n```\n\n----------------------------------------\n\nTITLE: Defining C Functions for Array Return\nDESCRIPTION: This snippet shows two common C function signatures for returning arrays with length information. The first function returns the length as the return value, while the second uses a struct to contain both the array and its length.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/10-00-awkward-situations/10-01-array-lengths.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint get_array(foo**out_array_p);\n\nstruct {\nfoo *data;\nint size;\n} array_with_length;\nvoid get_data(array_with_length *output);\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running D-Bus Service in Console\nDESCRIPTION: These console commands demonstrate how to compile and execute the Vala D-Bus service using the gio-2.0 package. It converts the Vala source to an executable and runs it.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-14-d-bus-integration.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ valac --pkg gio-2.0 dbus-demo-service.vala\n$ ./dbus-demo-service\n```\n\n----------------------------------------\n\nTITLE: Converting XCB Type to Vala with Integer Rank\nDESCRIPTION: Vala implementation of XCB atom type using SimpleType and IntegerType attributes\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-03-simple-type-structs.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\n[SimpleType]\n[IntegerType (rank = 9)]\n[CCode (cname = \"xcb_atom_t\", has_type_id = false)]\npublic struct AtomT {\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Exit Code from Main Method\nDESCRIPTION: Returns 0 as the program's exit code, indicating successful execution\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/01-00-first-program.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\nreturn 0;\n```\n\n----------------------------------------\n\nTITLE: Marking Method as Virtual Instead of Abstract (XML)\nDESCRIPTION: Example of using metadata to mark a method as virtual instead of abstract, addressing the lack of distinction in GIR.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/generating-a-vapi-with-gobject-introspection.rst#2025-04-21_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\nCompletionProposal.equal#virtual_method virtual\n```\n\n----------------------------------------\n\nTITLE: Mapping C Union to Vala Structure\nDESCRIPTION: Demonstrates how to represent a C union in Vala using CCode attributes to maintain direct field references to the union members.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields/08-05-unions.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\npublic struct Foo {\n    public bool which_one;\n    [CCode (cname = \"data.d\")]\n    public double data_d;\n    [CCode (cname = \"data.i\")]\n    public int data_i;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating VAPI from GIR using vapigen\nDESCRIPTION: Command-line examples for using vapigen to generate a VAPI file from a GIR file. These commands show how to specify the library name, include additional packages, and use metadata directories.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/generating-a-vapi-with-gobject-introspection.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ vapigen --library poppler-glib poppler-glib/poppler-glib.gir\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ../vapigen/vapigen --library clutter-gtk-1.0 --vapidir=. --metadatadir=packages/clutter-gtk-1.0/ packages/clutter-gtk-1.0/clutter-gtk-1.0.gir\n```\n\nLANGUAGE: console\nCODE:\n```\n$ make clutter-gtk-1.0\n```\n\nLANGUAGE: console\nCODE:\n```\n$ vapigen --pkg gtk+-2.0 --pkg gconf-2.0 --library [...]\n```\n\nLANGUAGE: console\nCODE:\n```\nvapigen \\\n    --library foo \\\n    --pkg bar-1.0 \\\n    --metadatadir ./metadata/ \\\n    Foo-1.0.gir\n```\n\n----------------------------------------\n\nTITLE: Using for Loop with Unowned Collections in Vala\nDESCRIPTION: Alternative approach using a for loop to iterate over a collection when the collection is unowned, avoiding Vala's error about duplicating instances.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/06-00-adding-vala-friendly-semantics/06-03-collections.rst#2025-04-21_snippet_6\n\nLANGUAGE: vala\nCODE:\n```\nfor (int count = 0; count < partitions.size; count++) {\n    var partition = partitions [count];\n    /* do something with the partition */\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Object Inheritance in Vala\nDESCRIPTION: Shows how Vala requires explicit inheritance from GLib.Object. Classes not inheriting from Object will be more lightweight but lack features like property change notifications and common base class functionality.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/09-object-base-class.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nclass Foo : Object {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Vala Array Length Parameter Implementation\nDESCRIPTION: Improved Vala implementation using uint8 array with CCode attribute for array length position and default size parameter.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/10-00-awkward-situations/10-03-member-length.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\npublic void foo([CCode (array_length_pos = 2.1)] uint8[] data, size_t size = 1);\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running Vala Code\nDESCRIPTION: This snippet provides the commands needed to compile and run a Vala program that uses the Gee library. The user must have the Vala compiler and the required package installed.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/gee-samples/03-map-sample.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ valac --pkg gee-0.8 gee-map.vala\n$ ./gee-map\n```\n\n----------------------------------------\n\nTITLE: Basic Function Pointer with Target in C\nDESCRIPTION: Demonstrates the C structure definition for a function pointer with a target context pointer.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields/08-04-function-pointers.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef void(*foo_func)(int a, void *userdata);\n\ntypedef struct {\n    foo_func callback;\n    void *callback_context;\n} foo;\n```\n\n----------------------------------------\n\nTITLE: Compiling Vala with target GLib version\nDESCRIPTION: This command demonstrates how to compile a Vala program (`hello.vala`) targeting a specific GLib version.  The `--target-glib auto` option instructs valac to use the latest version of GLib, which might not be compatible with older systems.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/07-00-tools/07-01-valac.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ valac --target-glib auto hello.vala # It will use the latest version of GLib which may not be compatible\n```\n\n----------------------------------------\n\nTITLE: Ownership Based on Return Value in C\nDESCRIPTION: This C function demonstrates ownership depending on the return value. The 'foo' object is freed if the return value is 3.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/10-00-awkward-situations/10-02-dependently-typed-ownership.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n/* foo is freed if return value is 3. */\nint awkward(foo*);\n```\n\n----------------------------------------\n\nTITLE: Combining Signal and Virtual Method in Vala (Vala)\nDESCRIPTION: Example of how Vala combines a signal and a virtual method into a single entity, demonstrating Vala's single scope for methods, virtual methods, signals, and properties.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/generating-a-vapi-with-gobject-introspection.rst#2025-04-21_snippet_7\n\nLANGUAGE: vala\nCODE:\n```\n[HasEmitter]\npublic virtual signal void activate ();\n```\n\n----------------------------------------\n\nTITLE: Vala Verbatim String Literal\nDESCRIPTION: Vala syntax for verbatim string literals using triple quotes. This allows multi-line strings without escape sequences.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/07-verbatim-string-literals.rst#2025-04-21_snippet_1\n\nLANGUAGE: Vala\nCODE:\n```\n\"\"\"verbatim string\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Address-of and Indirection Operators\nDESCRIPTION: Demonstrates Vala's support for C-style address-of (&) and indirection (*) operators. Shows how to obtain memory addresses and retrieve values through pointers.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-12-pointers.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\nint i = 42;\nint* i_ptr = &i;    // address-of\nint j = *i_ptr;     // indirection\n```\n\n----------------------------------------\n\nTITLE: C# Verbatim String Literal\nDESCRIPTION: C# syntax for verbatim string literals using the @ symbol prefix. This allows multi-line strings without escape sequences.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/07-verbatim-string-literals.rst#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n@\"verbatim string\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Ownership Based on Parameter in C\nDESCRIPTION: This C function takes a pointer to 'foo' and a boolean flag indicating whether to free the object when done.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/10-00-awkward-situations/10-02-dependently-typed-ownership.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid somefunc(foo *data, bool free_when_done);\n```\n\n----------------------------------------\n\nTITLE: Function Pointer with Destroy Notification in C\nDESCRIPTION: Shows C structure with function pointer including a destroy notification callback for memory management.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields/08-04-function-pointers.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ntypedef void(*foo_func)(int a, void *userdata);\n\ntypedef struct {\n    foo_func callback;\n    void *callback_context;\n    void(*callback_free)(void*);\n} foo;\n```\n\n----------------------------------------\n\nTITLE: Compiling Vala Program with Custom VAPI\nDESCRIPTION: This command demonstrates how to compile a Vala program using a custom VAPI file. It specifies the directory containing the VAPI file and the package name to use.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/02-00-getting-started/02-01-the-vapi-file.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvalac --vapidir . --pkg libfoo program_using_libfoo.vala\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Ownership in Vala\nDESCRIPTION: This Vala code demonstrates how to implement a C function with conditional ownership. It provides two Vala methods: one that doesn't take ownership and another that does.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/10-00-awkward-situations/10-02-dependently-typed-ownership.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (cname = \"somefunc\")]\nprivate _somefunc(Foo data, bool free_when_done);\n[CCode (cname = \"\")]\nprivate _sink_foo (owned Foo foo);\n[CCode (cname = \"vala_somefunc\")]\npublic somefunc (Foo data) {\n    _somefunc(data, false);\n}\n[CCode (cname = \"vala_somefunc_owned\")]\npublic somefunc_owned (owned Foo data) {\n    _somefunc (data, true);\n    _sink_foo ((owned) foo);\n}\n```\n\n----------------------------------------\n\nTITLE: Data Type Classes in Vala\nDESCRIPTION: Lists the different data type classes in Vala that inherit from DataType. These classes represent various types in the language.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/03-00-the-vala-compiler/03-02-parser.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\npublic class Vala.CType : DataType\npublic class Vala.DelegateType : DataType\npublic class Vala.FieldPrototype : DataType\npublic class Vala.GenericType : DataType\npublic class Vala.InvalidType : DataType\npublic class Vala.MethodType : DataType\npublic class Vala.PointerType : DataType\npublic abstract class Vala.ReferenceType : DataType\npublic class Vala.SignalType : DataType\npublic class Vala.UnresolvedType : DataType\npublic abstract class Vala.ValueType : DataType\npublic class Vala.VoidType : DataType\n```\n\n----------------------------------------\n\nTITLE: Defining Compilation Symbols in C#\nDESCRIPTION: In C#, compilation symbols can be defined using the -define: or -d: compiler options. These are used for conditional compilation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/25-conditional-compilation-directives.rst#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n-define:\n```\n\nLANGUAGE: C#\nCODE:\n```\n-d:\n```\n\n----------------------------------------\n\nTITLE: Working with Arrays as Out Parameters in C and Vala\nDESCRIPTION: Illustrates how Vala simplifies C's array handling with length parameters. The function takes an input array and returns an output array through an out parameter.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/05-00-fundamentals-of-binding-a-c-function/05-01-out-and-reference-parameters-and-return-values.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nvoid do_approximation(int *input_array, int input_length, int **output_array, int *output_length);\n```\n\nLANGUAGE: vala\nCODE:\n```\npublic void do_approximation (int[] input, out int[] output);\n```\n\n----------------------------------------\n\nTITLE: Building Vala Docs Repository Documentation\nDESCRIPTION: Command to rebuild the HTML documentation for the Vala Docs repository. This is executed from the repository's root directory.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/08-00-documentation.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./build-docs\n```\n\n----------------------------------------\n\nTITLE: Raw Memory Access Function Signature in C\nDESCRIPTION: Traditional C function signature pattern for handling raw memory access with data pointer and size parameters.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/10-00-awkward-situations/10-03-member-length.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid foo(void *data, size_t size, size_t nmemb);\n```\n\n----------------------------------------\n\nTITLE: Declaring Nullable Value Types in C#\nDESCRIPTION: Demonstrates how to declare a nullable integer in C#. The '?' syntax is used to make value types nullable.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/19-nullable-types.rst#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nint? i = null;\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in Vala Documentation Comments\nDESCRIPTION: Demonstrates how to create simple tables in Vala documentation comments using double pipe symbols for cell boundaries. The first row with emphasized text becomes the table header.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/valadoc-guide/03-00-documentation-comment-markup/03-02-formatting.rst#2025-04-21_snippet_5\n\nLANGUAGE: vala\nCODE:\n```\n/**\n * Short description\n *\n * || ''headline'' || ''headline'' ||\n * || one cell || one cell ||\n * || one cell || one cell ||\n *\n */\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running Vala Program\nDESCRIPTION: Demonstrates the command-line process of compiling a Vala source file using valac and executing the resulting binary\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/01-00-first-program.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ valac hello.vala\n$ ./hello\n```\n\n----------------------------------------\n\nTITLE: Alternative Binding for User Pointer Functions in Vala\nDESCRIPTION: An alternative way to bind C functions for user pointers in Vala, using generic methods instead of a generic class. This approach is less type-safe but avoids the need for simple_generics on all uses of the class.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/07-00-binding-a-c-function-s-parameter-and-return-types/07-06-parameters-of-variable-type-generics.rst#2025-04-21_snippet_4\n\nLANGUAGE: vala\nCODE:\n```\npublic class Foo {\n   [CCode (simple_generics = true)]\n   public void set_user_ptr<T> (T value);\n   [CCode (simple_generics = true)]\n   public T get_user_ptr<T> ();\n}\n```\n\n----------------------------------------\n\nTITLE: Statement Classes in Vala\nDESCRIPTION: Shows the classes that implement the Statement interface, representing different types of statements in Vala code like loops, conditionals, and declarations.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/03-00-the-vala-compiler/03-02-parser.rst#2025-04-21_snippet_7\n\nLANGUAGE: vala\nCODE:\n```\npublic class Vala.BreakStatement : CodeNode, Statement\npublic class Vala.ContinueStatement : CodeNode, Statement\npublic class Vala.DeclarationStatement : CodeNode, Statement\npublic class Vala.DeleteStatement : CodeNode, Statement\npublic class Vala.DoStatement : CodeNode, Statement\npublic class Vala.EmptyStatement : CodeNode, Statement\npublic class Vala.ExpressionStatement : CodeNode, Statement\npublic class Vala.ForStatement : CodeNode, Statement\npublic class Vala.IfStatement : CodeNode, Statement\npublic class Vala.LockStatement : CodeNode, Statement\npublic class Vala.Loop : CodeNode, Statement\npublic class Vala.ReturnStatement : CodeNode, Statement\npublic class Vala.StatementList : CodeNode, Statement\npublic class Vala.SwitchStatement : CodeNode, Statement\npublic class Vala.ThrowStatement : CodeNode, Statement\npublic class Vala.TryStatement : CodeNode, Statement\npublic class Vala.UnlockStatement : CodeNode, Statement\npublic class Vala.WhileStatement : CodeNode, Statement\npublic class Vala.YieldStatement : CodeNode, Statement\n```\n\n----------------------------------------\n\nTITLE: Defining Compilation Symbols in Vala\nDESCRIPTION: In Vala, compilation symbols are defined using the --define or -D compiler options. These serve a similar purpose to C#'s conditional compilation directives.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/25-conditional-compilation-directives.rst#2025-04-21_snippet_1\n\nLANGUAGE: Vala\nCODE:\n```\n--define\n```\n\nLANGUAGE: Vala\nCODE:\n```\n-D\n```\n\n----------------------------------------\n\nTITLE: Reference Type Pointer Handling\nDESCRIPTION: Explains unique pointer behavior with reference types, showing simplified address-of and indirection syntax. Demonstrates equivalent unowned reference assignment.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-12-pointers.rst#2025-04-21_snippet_4\n\nLANGUAGE: vala\nCODE:\n```\nFoo f = new Foo();\nFoo* f_ptr = f;    // address-of\nFoo g = f_ptr;     // indirection\n\nunowned Foo f_weak = f;  // equivalent to the second line\n```\n\n----------------------------------------\n\nTITLE: Checking ABI Stability with abi-dumper in Console\nDESCRIPTION: This snippet repeats the process of creating an ABI profile, but this time for the new version of the library. It's important to create profiles for both the old and new versions to compare them and identify ABI changes.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/06-00-libraries/06-04-abi-and-api-design-choices.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n\"abi-dumper my_library.so -o ABI-1.dump -lver 1\"\n```\n\n----------------------------------------\n\nTITLE: Basic C Type Declaration Examples\nDESCRIPTION: Examples showing basic C type declarations that demonstrate memory allocation requirements for different data types.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/03-00-using-auto-memory-management/03-02-constants-the-stack-and-the-heap-in-c.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nuint8\ndouble\nfloat\nint a = 128;\n```\n\n----------------------------------------\n\nTITLE: Illustrating potential error when adding to generic list in Python\nDESCRIPTION: This snippet shows a potential issue when working with generics in languages like Python due to GObject Introspection limitations. The `add()` method of a generic list expects a `gpointer` in GI, causing errors when attempting to add a string directly.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/06-00-libraries/06-04-abi-and-api-design-choices.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"list = get_a_list_of_strings ()\\nlist.add ('Hi')\"\n```\n\n----------------------------------------\n\nTITLE: Using Valadoc Command Line Tool in Console\nDESCRIPTION: This snippet demonstrates the basic usage syntax for the Valadoc command line tool. It shows how to invoke Valadoc with options and input files.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/valadoc-guide/02-00-command-line-tool.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nvaladoc [OPTION...] FILE...\n```\n\n----------------------------------------\n\nTITLE: Building GLib.TypeModule Plugin Example in Vala\nDESCRIPTION: This snippet shows the commands to compile the Vala source files and create the necessary executable and shared library.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/plugins/01-type-modules.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ valac -o loader loader.vala --pkg=gmodule-2.0\n$ valac --ccode plugin.vala\n$ gcc -fPIC -shared -o libplugin.so plugin.c $(pkg-config --libs --cflags gobject-2.0 gmodule-2.0)\n```\n\n----------------------------------------\n\nTITLE: Using foreach with Bound Collections in Vala\nDESCRIPTION: Example of using Vala's foreach syntax with a bound collection that has implemented the get() method and size property.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/06-00-adding-vala-friendly-semantics/06-03-collections.rst#2025-04-21_snippet_5\n\nLANGUAGE: vala\nCODE:\n```\nforeach (var partition in partitions) { /* do something with the partition */ }\n```\n\n----------------------------------------\n\nTITLE: Disabling C compiler warnings\nDESCRIPTION: This command shows how to compile a Vala program (`hello.vala`) while disabling warnings from the C compiler.  The `-X -w` options are passed to the C compiler to suppress all warnings, ensuring compatibility.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/07-00-tools/07-01-valac.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ valac -X -w hello.vala # Generated code is compatible, ``-X`` will pass ``-w`` to C compiler to disable all warnings.\n```\n\n----------------------------------------\n\nTITLE: Simplified Generic Type Declaration Using var in Vala\nDESCRIPTION: Demonstrates how type inference simplifies complex generic type declarations.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-04-data-types.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\nvar foo = new MyFoo<string, MyBar<string, int>>();\n```\n\n----------------------------------------\n\nTITLE: Comparing Default Namespaces in C# and Vala\nDESCRIPTION: This snippet compares the primary namespaces in C# and Vala. In C#, the System namespace is the most important but not imported by default. In Vala, the GLib namespace is the most crucial and is implicitly imported by default.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/05-system-namespace.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nC#: most important namespace is `System`, not imported by default\n\nVala: most important namespace is `GLib`, implicitly imported by default\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Vala Code Attribute Syntax\nDESCRIPTION: Shows the basic syntax for code attributes in Vala. Attributes can be simple with just a name or can include parameters with values.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-08-code-attributes.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\n[AttributeName]\n```\n\nLANGUAGE: vala\nCODE:\n```\n[AttributeName(param1 = value1, param2 = value2, ...)]\n```\n\n----------------------------------------\n\nTITLE: Running the Compiled Vala Application\nDESCRIPTION: Command to execute the compiled Vala application. This runs the ColumnView application that was previously compiled.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/column-view.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ./ColumnView.vala\n```\n\n----------------------------------------\n\nTITLE: Configuring Autotools Makefile for Vala Library\nDESCRIPTION: A comprehensive Makefile.am configuration for building a Vala library using Autotools. Includes compiler flags, source definitions, library dependencies, GObject introspection setup, and installation paths. The configuration handles C code generation, header files, VAPI generation, and proper distribution packaging.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/06-00-libraries/06-06-using-autotools.rst#2025-04-21_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nNULL =\n\nAM_CPPFLAGS = \\\n        -DPACKAGE_LOCALE_DIR=\\\"\"$(prefix)/$(DATADIRNAME)/locale\"\\\" \\\n        -DPACKAGE_SRC_DIR=\\\"\"$(srcdir)\"\\\" \\\n        -DPACKAGE_DATA_DIR=\\\"\"$(datadir)\"\\\"\n\nBUILT_SOURCES = gxml.vala.stamp\nCLEANFILES = gxml.vala.stamp\n\nAM_CFLAGS =\\\n         -Wall\\\n         -g \\\n         $(GLIB_CFLAGS) \\\n         $(LIBXML_CFLAGS) \\\n         $(GIO_CFLAGS) \\\n         $(GEE_CFLAGS) \\\n         $(VALA_CFLAGS) \\\n         $(NULL)\n\nlib_LTLIBRARIES = libgxml.la\n\nVALAFLAGS = \\\n    $(top_srcdir)/vapi/config.vapi \\\n    --vapidir=$(top_srcdir)/vapi \\\n    --pkg libxml-2.0 \\\n    --pkg gee-1.0 \\\n    --pkg gobject-2.0 \\\n    --pkg gio-2.0 \\\n    $(NULL)\n\nlibgxml_la_VALASOURCES = \\\n        Attr.vala \\\n        BackedNode.vala \\\n        CDATASection.vala \\\n        CharacterData.vala \\\n        Comment.vala \\\n        Document.vala \\\n        DocumentFragment.vala \\\n        DocumentType.vala \\\n        DomError.vala \\\n        Element.vala \\\n        Entity.vala \\\n        EntityReference.vala \\\n        Implementation.vala \\\n        NamespaceAttr.vala \\\n        NodeList.vala \\\n        NodeType.vala \\\n        Notation.vala \\\n        ProcessingInstruction.vala \\\n        Text.vala \\\n        XNode.vala \\\n        $(NULL)\n\nlibgxml_la_SOURCES = \\\n        gxml.vala.stamp \\\n        $(libgxml_la_VALASOURCES:.vala=.c) \\\n        $(NULL)\n\ngxml-1.0.vapi gxml.vala.stamp GXml-1.0.gir: $(libgxml_la_VALASOURCES)\n     $(VALA_COMPILER) $(VALAFLAGS) -C -H $(top_builddir)/gxml/gxml-dom.h --gir=GXmlDom-1.0.gir  --library gxmldom-1.0 $^\n     @touch $@\n\nlibgxml_la_LDFLAGS =\n\nlibgxml_la_LIBADD = \\\n        $(GLIB_LIBS) \\\n        $(LIBXML_LIBS) \\\n        $(GIO_LIBS) \\\n        $(GEE_LIBS) \\\n        $(VALA_LIBS) \\\n        $(NULL)\n\ninclude_HEADERS = \\\n        gxml.h \\\n        $(NULL)\n\npkgconfigdir = $(libdir)/pkgconfig\npkgconfig_DATA = libgxml-1.0.pc\n\ngxmlincludedir=$(includedir)/libgxml-1.0/gxml\ngxmlinclude_HEADERS= gxml-dom.h\n\nif ENABLE_GI_SYSTEM_INSTALL\ngirdir = $(INTROSPECTION_GIRDIR)\ntypelibsdir = $(INTROSPECTION_TYPELIBDIR)\nelse\ngirdir = $(datadir)/gir-1.0\ntypelibsdir = $(libdir)/girepository-1.0\nendif\n\nINTROSPECTION_GIRS =\nINTROSPECTION_GIRS += GXmlDom-1.0.gir\nINTROSPECTION_COMPILER_ARGS = \\\n    --includedir=. \\\n    --includedir=$(top_builddir)/gxml\n\nGXmlDom-1.0.typelib: $(INTROSPECTION_GIRS)\n        $(INTROSPECTION_COMPILER) $(INTROSPECTION_COMPILER_ARGS)  $< -o $@\n\ngir_DATA = $(INTROSPECTION_GIRS)\ntypelibs_DATA = GXmlDom-1.0.typelib\n\nvapidir = $(VALA_VAPIDIR)\nvapi_DATA=gxmldom-1.0.vapi\n\nCLEANFILES += $(INTROSPECTION_GIRS) $(typelibs_DATA) gxml-1.0.vapi\n\nEXTRA_DIST = \\\n        libgxml-1.0.pc.in \\\n        $(libgxml_la_VALASOURCES) \\\n        $(typelibs_DATA) \\\n        $(INTROSPECTION_GIRS) \\\n        gxml.vala.stamp\n```\n\n----------------------------------------\n\nTITLE: Defining C Union Structure\nDESCRIPTION: Shows a C structure containing a union with multiple data types (double and int) along with a boolean flag.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields/08-05-unions.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct {\n    bool which_one;\n    union {\n        double d;\n        int i;\n    } data;\n} foo_t;\n```\n\n----------------------------------------\n\nTITLE: Running the Compiled GTK4 Application in Vala\nDESCRIPTION: The command runs the previously compiled Minimal GTK4 Application binary. It requires successful compilation to create the executable first.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/minimal-app.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ./MinimalAppSample.vala\n```\n\n----------------------------------------\n\nTITLE: C Structure Definition for Reference-Counted Types\nDESCRIPTION: Example C code pattern for reference-counted structures with retain/release memory management that should be bound as compact classes in Vala.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-05-compact-classes.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct foo Foo;\nFoo *foo_new();\nFoo *foo_retain(Foo*);\nvoid foo_release(Foo*);\n```\n\n----------------------------------------\n\nTITLE: Installing Vala on *BSD via Ports\nDESCRIPTION: This command set first navigates to the vala port directory, then compiles and installs the Vala compiler from source using the 'make' utility.  It also cleans up the build directory after installation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/installation-guide.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n\"$ cd /usr/ports/lang/vala/ && make install clean\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Vala Class with Comments\nDESCRIPTION: Example of how to add documentation comments to a Vala class in a VAPI file. Shows the proper format for documentation comments using C-style multiline comments with an additional asterisk.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/02-00-getting-started/02-08-documentation-and-valadoc-org.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\n/**\n * Brief description of class Foo\n *\n * Long description of class Foo, which can include an example\n */\n[CCode (cname = \"foo\", ref_function = \"foo_retain\", unref_function = \"foo_release\")]\n[Compact]\npublic class Foo {\n    // Details of binding\n}\n```\n\n----------------------------------------\n\nTITLE: Base Constructor Chain-Up in C#\nDESCRIPTION: Demonstrates how to call a base class constructor with parameters in C#. Shows the syntax for chaining to parent class constructor using the base keyword with an argument.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/12-constructor-chaining.rst#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nclass Foo : Bar\n{\n    public Foo() : base(42)\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling the Minimal GTK4 Application in Vala\nDESCRIPTION: These console commands demonstrate compiling the Minimal GTK4 Application using the valac compiler with the GTK4 package. Ensure that Vala and GTK4 are installed and configured on the system before executing these commands.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/minimal-app.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ valac --pkg gtk4 MinimalAppSample.vala\n```\n\n----------------------------------------\n\nTITLE: Specifying Ownership of Struct Fields (XML)\nDESCRIPTION: Example of using metadata to specify ownership of struct fields, which is not supported by GObject Introspection.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/generating-a-vapi-with-gobject-introspection.rst#2025-04-21_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\nDBusAnnotationInfo.*#field unowned=false\n```\n\n----------------------------------------\n\nTITLE: Printing XML Output in Vala\nDESCRIPTION: This snippet demonstrates printing XML output for a struct in Vala. It's part of a larger CodeVisitor implementation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/03-00-the-vala-compiler/03-02-parser.rst#2025-04-21_snippet_15\n\nLANGUAGE: vala\nCODE:\n```\nstdout.printf (\"</vala:struct>\\n\");\n```\n\n----------------------------------------\n\nTITLE: Defining Constants with C Preprocessor Directive\nDESCRIPTION: This snippet demonstrates how constants are defined in C using the #define preprocessor directive. The example shows a mathematical constant (PI) being defined which will be text-substituted by the preprocessor before compilation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-01-constants.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define CUSTOM_PI 3.14159265358979323846\n```\n\n----------------------------------------\n\nTITLE: Defining a C struct with default initializer\nDESCRIPTION: A C struct definition with a macro for default initialization. This pattern defines a simple struct with two integer fields and a macro that provides default values for initialization.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-04-structs.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct {\n    int x;\n    int y;\n} bar_t;\n#define BAR_INITIALIZER {0, 1}\n```\n\n----------------------------------------\n\nTITLE: Running the Compiled GTK4 Vala Application\nDESCRIPTION: Command to run the compiled GTK4 Vala application from the command line.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/list-view-check-buttons.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ./ListViewCheckButtons.vala\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Interfaces\nDESCRIPTION: Demonstrates how to implement multiple interfaces in a class, including prerequisites. All implemented interfaces must be listed in the class declaration.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/03-00-object-oriented-programming/03-08-interfaces.rst#2025-04-21_snippet_4\n\nLANGUAGE: vala\nCODE:\n```\npublic class ListClass : GLib.Object, Collection, List {\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Vala Installation\nDESCRIPTION: This command checks the installed version of the Vala compiler. It prints the version number to the console if Vala is installed correctly.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/installation-guide.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n\"$ valac --version\"\n```\n\n----------------------------------------\n\nTITLE: Generating Local Documentation with Valadoc\nDESCRIPTION: Shell commands for generating local HTML documentation from a VAPI file using Valadoc. Shows how to specify output directory and package name.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/02-00-getting-started/02-08-documentation-and-valadoc-org.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd my_binding_directory\nvaladoc --directory docs --force --package-name mybinding mybinding.vapi\n```\n\n----------------------------------------\n\nTITLE: Converting C Type to Vala SimpleType\nDESCRIPTION: Vala implementation of the C numeric type using SimpleType attribute and inheritance from uint32\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-03-simple-type-structs.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\n[SimpleType]\n[CCode (cname = \"people_inside\", has_type_id = false)]\npublic struct PeopleInside : uint32 {\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Base Type for Non-GObject Types (XML)\nDESCRIPTION: Example of using metadata to specify the base type for non-GObject types, addressing a limitation in GObject Introspection's inheritance handling.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/generating-a-vapi-with-gobject-introspection.rst#2025-04-21_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\nBuffer base_type=\"Gst.MiniObject\"\n```\n\n----------------------------------------\n\nTITLE: XmlGenerator Visit Struct Example in Vala\nDESCRIPTION: Shows a hypothetical implementation of the visit_struct method in an XmlGenerator visitor class, demonstrating how visitors process nodes and traverse the tree.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/03-00-the-vala-compiler/03-02-parser.rst#2025-04-21_snippet_14\n\nLANGUAGE: vala\nCODE:\n```\npublic override void visit_struct (Struct st) {\n    /* Do some processing of this struct. */\n    stdout.printf (\"<vala:struct name=\\\"%s\\\">\\n\", st.name);\n\n    /* recurse through struct's children */\n    st.accept_children (this);\n\n```\n\n----------------------------------------\n\nTITLE: Defining Basic C Numeric Type\nDESCRIPTION: C code showing the definition of a basic numeric type using typedef\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-03-simple-type-structs.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef uint32_t people_inside;\n```\n\n----------------------------------------\n\nTITLE: Compiling Vala with GTK Package\nDESCRIPTION: Command for compiling Vala source with GTK+ 2.0 package dependency using Vala compiler.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/02-compilation.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ valac source.vala --pkg gtk+-2.0 -o program\n```\n\n----------------------------------------\n\nTITLE: Running the Vala Clipboard Example\nDESCRIPTION: This command executes the compiled Vala clipboard example.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/clipboard.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ./Clipboard.vala\n```\n\n----------------------------------------\n\nTITLE: Configuring Vala Build with Custom Compiler Path\nDESCRIPTION: Command to configure Vala build system using a custom valac compiler path and installation prefix. Sets the VALAC environment variable to specify compiler location.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/09-00-build-system.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nVALAC=$HOME/dev/vala-x.y.z/compiler/valac ./configure --prefix=$HOME/prefix\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Linebreaks and Paragraphs in Vala Documentation Comments\nDESCRIPTION: Shows how to format paragraphs and line breaks in Vala documentation comments. The example illustrates that lines without an empty line between them are rendered as a single paragraph, while lines separated by an empty line create separate paragraphs.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/valadoc-guide/03-00-documentation-comment-markup/03-02-formatting.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\n/**\n * First paragraph,\n * still the first paragraph\n *\n * Second paragraph, first line,<<BR>>\n * second paragraph, second line\n */\n```\n\n----------------------------------------\n\nTITLE: Memory Management Function References\nDESCRIPTION: Core C memory management functions used for heap allocation and deallocation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/03-00-using-auto-memory-management/03-02-constants-the-stack-and-the-heap-in-c.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nmalloc\nfree\n```\n\n----------------------------------------\n\nTITLE: Returning Structs with Different Methods in Vala and C\nDESCRIPTION: Shows how returning structs in Vala translates to C. In C, structs are typically returned via out parameters since their memory is allocated by the caller.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/05-00-fundamentals-of-binding-a-c-function/05-01-out-and-reference-parameters-and-return-values.rst#2025-04-21_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\npublic struct Foo { /* … */ }\npublic Foo get_foo (int x);\npublic void get_foo2 (int x, out Foo f);\n```\n\nLANGUAGE: c\nCODE:\n```\nvoid get_foo(int x, foo *ret);\nvoid get_foo2(int x, foo *ret);\n```\n\n----------------------------------------\n\nTITLE: Passing Structs by Value in C\nDESCRIPTION: This C code snippet shows a struct definition and a function that takes the struct by value, rather than by reference. This is less common in C libraries.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/07-00-binding-a-c-function-s-parameter-and-return-types/07-02-structs.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct foo {\n    int x;\n    int y;\n};\nvoid compute_foo(struct foo f);\n```\n\n----------------------------------------\n\nTITLE: Declaring Rectangular Multi-Dimensional Arrays in C#\nDESCRIPTION: Demonstrates the syntax for declaring rectangular multi-dimensional arrays in C# using the [,] notation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/18-multi-dimensional-arrays.rst#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nint[,] rectangularArray;\n```\n\n----------------------------------------\n\nTITLE: Additional Supporting Classes in Vala\nDESCRIPTION: Shows additional supporting classes in Vala that are important for code representation and processing but don't fit the other categories.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/03-00-the-vala-compiler/03-02-parser.rst#2025-04-21_snippet_11\n\nLANGUAGE: vala\nCODE:\n```\npublic class Vala.Comment\npublic class Vala.Scope\npublic class Vala.SourceFile\npublic class Vala.SourceReference\n```\n\n----------------------------------------\n\nTITLE: Shared Library Compilation via C\nDESCRIPTION: Commands for compiling Vala source files to C and creating shared libraries using gcc\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/06-00-libraries/06-02-creating-a-library.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ valac -C ...(source files)\n$ gcc -o my-best-library.so --shared -fPIC ...(compiled C code files)...\n```\n\n----------------------------------------\n\nTITLE: Command Line Syntax Example\nDESCRIPTION: Demonstrates the documentation convention for showing command line instructions using a $ prompt.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$\n```\n\n----------------------------------------\n\nTITLE: Running Nemiver Debugger\nDESCRIPTION: Command to launch the Nemiver graphical debugger with the compiled program.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/08-00-techniques/08-01-debugging.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ nemiver debug-demo\n```\n\n----------------------------------------\n\nTITLE: Struct Accept Method Implementation in Vala\nDESCRIPTION: Shows how the accept method is implemented in the Struct class. This method identifies the node type to the visitor, enabling type-specific processing.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/03-00-the-vala-compiler/03-02-parser.rst#2025-04-21_snippet_12\n\nLANGUAGE: vala\nCODE:\n```\npublic override void accept (CodeVisitor visitor) {\n     visitor.visit_struct (this); /* I am a struct! */\n}\n```\n\n----------------------------------------\n\nTITLE: Code Formatting Example\nDESCRIPTION: Shows how code is formatted in the documentation using monospaced text.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmonospaced text\n```\n\n----------------------------------------\n\nTITLE: Illustrating C pointer ambiguity\nDESCRIPTION: Demonstrates how char* in C can represent various concepts that are more explicitly defined in Vala, such as strings, arrays, or pointers with different purposes.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code.rst#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar*\n```\n\n----------------------------------------\n\nTITLE: Implementing Method Overloading in C#\nDESCRIPTION: This snippet shows how method overloading is implemented in C#. It demonstrates overloading with different parameter types and method chaining for convenience methods with fewer arguments.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/10-method-overloading.rst#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nclass Demo\n{\n    public void Draw(string text) { }\n\n    public void Draw(Shape shape) { }\n\n\n    /* Method overloading + chaining for convenience methods with less arguments */\n\n    void F(int x, string s, double z) { }\n\n    void F(int x, string s)\n    {\n        F(x, s, 0.5);\n    }\n\n    void F(int x)\n    {\n        F(x, \"hello\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Makefile Include for Vapigen\nDESCRIPTION: Makefile snippet showing how to conditionally include the vapigen Makefile based on the ENABLE_VAPIGEN flag.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/upstream-guide.rst#2025-04-21_snippet_3\n\nLANGUAGE: make\nCODE:\n```\nif ENABLE_VAPIGEN\n-include $(VAPIGEN_MAKEFILE)\nendif\n```\n\n----------------------------------------\n\nTITLE: Vala Language Grammar Rules in EBNF\nDESCRIPTION: Comprehensive EBNF grammar rules defining the syntactic structure of Vala language elements including declarations, statements, and expressions. Covers namespace declarations, struct definitions, method declarations, property accessors, and various types of statements.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/03-00-the-vala-compiler/03-02-parser.rst#2025-04-21_snippet_17\n\nLANGUAGE: EBNF\nCODE:\n```\nnamespace_declaration ::= \"namespace\" symbol \"{\" using_directive* namespace_member* \"}\"\n\nstruct_declaration ::= [ access_modifier ] [ type_declaration_modifiers ] \"struct\" symbol [ \":\" base_types ] \"{\" struct_member* \"}\"\n\nstruct_member ::= [ attributes ] ( method_declaration | field_declaration | constant_declaration | property_declaration )\n\ncreation_method_declaration ::= [ access_modifier ] [ constructor_declaration_modifiers ] symbol \"(\" [ parameters ] \")\" [ throws ] [ requires ] [ ensures ] ( \";\" | block )\n\nparameters ::= parameter [ \",\" parameter ]*\n\nparameter ::= [ attributes ] ( \"...\" | ( [ \"params\" ] [ \"out\" | \"ref\" ] type identifier [ \"=\" expression ] ) )\n\nthrows ::= \"throws\" type [ \",\" type ]*\n\nrequires ::= \"requires\" \"(\" expression \")\" [ requires ]\n\nensures ::= \"ensures\" \"(\" expression \")\" [ ensures ]\n\ndelegate_declaration ::= [ access_modifier ] [ delegate_declaration_modifiers ] type symbol [ type_parameters ] \"(\" [ parameters ] \")\" [ throws ] \";\"\n\ndelegate_declaration_modifiers ::= delegate_declaration_modifier [ \" \" delegate_declaration_modifier ]*\ndelegate_declaration_modifier ::= \"async\" | \"class\" | \"extern\" | \"inline\" | \"abstract\" | \"virtual\" | \"override\"\n\nsignal_declaration ::= [ access_modifier ] [ signal_declaration_modifiers ] \"signal\" type identifier \"(\" [ parameters ] \")\" ( \";\" | block )\n\nsignal_declaration_modifiers ::= signal_declaration_modifier [ \" \" signal_declaration_modifier ]*\nsignal_declaration_modifier ::= \"async\" | \"extern\" | \"inline\" | \"abstract\" | \"virtual\" | \"override\" | \"new\"\n\nmethod_declaration ::= [ access_modifier ] [ member_declaration_modifier ] type identifier [ type_parameters ] \"(\" [ parameters ] \")\" [ throws ] [ requires ] [ ensures ] ( \";\" | block )\n\nconstant_declaration ::= [ access_modifier ] [ member_declaration_modifiers ] \"const\" type identifier [ inline_array_type ] [ \"=\" expression ] \";\"\n\ninline_array_type ::= \"[\" integer_literal \"]\"\n\nfield_declaration ::= [ access_modifier ] [ member_declaration_modifiers ] type_weak identifier [ \"=\" expression ] \";\"\n\nproperty_declaration ::= [ access_modifier ] [ property_declaration_modifiers ] type_weak identifier \"{\" property_declaration_part* \"}\"\n\nproperty_declaration_part ::= ( \"default\" \"=\" expression \";\" ) | property_accessor\n\nproperty_accessor ::= [ attributes ] [ access_modifier ] ( property_get_accessor | property_set_construct_accessor )\n\nproperty_get_accessor ::= \"get\" ( \";\" | block )\n\nproperty_set_construct_accessor ::= ( \"set\" \"construct\" | \"construct\" \"set\" ) ( \";\" | block )\n\nproperty_declaration_modifiers ::= property_declaration_modifier [ \" \" property_declaration_modifier ]*\nproperty_declaration_modifier ::= \"class\" | \"static\" | \"extern\" | \"inline\" | \"abstract\" | \"virtual\" | \"override\" | \"new\"\n\nblock ::= \"{\" statement* \"}\"\n\nstatement ::= block | \";\" | if_statement | switch_statement | while_statement | for_statement | foreach_statement | break_statement | continue_statement | return_statement | yield_statement | throw_statement | try_statement | lock_statement | delete_statement | local_variable_declarations | expression_statement\n\nif_statement ::= \"if\" \"(\" expression \")\" embedded_statement [ \"else\" embedded_statement ]\n\nembedded_statement ::= block | embedded_statement_without_block\n\nembedded_statement_without_block ::= \";\" | if_statement | switch_statement | while_statement | for_statement | foreach_statement | break_statement | continue_statement | return_statement | yield_statement | throw_statement | try_statement | lock_statement | delete_statement | expression_statement\n\nswitch_statement ::= \"switch\" \"(\" expression \")\" \"{\" switch_section* \"}\"\n\nswitch_section ::= ( \"case\" | \"default\" ) expression \":\"\n\nwhile_statement ::= \"while\" \"(\" expression \")\" embedded_statement\n\ndo_statement ::= \"do\" embedded_statement \"while\" \"(\" expression \")\" \";\"\n\nfor_statement ::= \"for\" \"(\" [ for_initializer ] \";\" [ expression ] \";\" [ for_iterator ] \")\" embedded_statement\n\nfor_initializer ::= local_variable_declarations | ( statement_expression [ \",\" statement_expression ]* )\n\nfor_iterator ::= statement_expression [ \",\" statement_expression ]*\n\nstatement_expression ::= expression\n\nforeach_statement ::= \"foreach\" \"(\" ( \"var\" | type) identifier \"in\" expression \")\" embedded_statement\n\nbreak_statement ::= \"break\" \";\"\n\ncontinue_statement ::= \"continue\" \";\"\n\nreturn_statement ::= \"return\" [ expression ] \";\"\n\nyield_statement ::= \"yield\" [ expression_statement | \"return\" expression ] \";\"\n\nthrow_statement ::= \"throw\" expression \";\"\n\ntry_statement ::= \"try\" block catch_clause* [ finally_clause ]\n\ncatch_clause ::= \"catch\" [ \"(\" type_weak identifier \")\" ] block\n\nfinally_clause ::= \"finally\" block\n\nlock_statement ::= \"lock\" \"(\" expression \")\" embedded_statement\n\ndelete_statement ::= \"delete\" expression \";\"\n\nlocal_variable_declarations ::= ( \"var\" | type ) local_variable_declaration [ \",\" local_variable_declaration ]*\n\nlocal_variable_declartion ::= local_tuple_declaration | local_variable\n\nlocal_tuple_declaration ::= \"(\" identifier [ \",\" identifier ]* \")\" \"=\" expression\n\nlocal_variable ::= identifier [ inline_array_type ] [ \"=\" expression ]\n\nexpression_statement ::= statement_expression \";\"\n```\n\n----------------------------------------\n\nTITLE: Compiling the Vala Clipboard Example\nDESCRIPTION: This command compiles the Vala clipboard example using the `valac` compiler.  It requires the `gtk4` package to be installed.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/clipboard.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ valac --pkg gtk4 Clipboard.vala\n```\n\n----------------------------------------\n\nTITLE: Running GLib.TypeModule Plugin Example in Vala\nDESCRIPTION: This snippet demonstrates how to run the compiled example and shows the expected output.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/plugins/01-type-modules.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ LD_LIBRARY_PATH=$PWD ./loader\n```\n\nLANGUAGE: output\nCODE:\n```\n** Message: plugin.vala:5: MyClass init\n** Message: plugin.vala:10: MyClass deinit\n** Message: loader.vala:37: Library unloaded\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation with Force Flag\nDESCRIPTION: This command demonstrates how to use the --force flag with Valadoc to overwrite existing documentation files.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/valadoc-guide/01-00-quick-start.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nvaladoc --force --package-name=\"simon-says\" --package-version=1.0.0 -o docs lib.vala\n```\n\n----------------------------------------\n\nTITLE: Checking ABI Stability with abi-dumper in Console\nDESCRIPTION: This snippet demonstrates using `abi-dumper` to create an ABI profile of a shared library. The ABI profile captures the structure of the library's binary interface for a specific version. This profile is used later for ABI comparison.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/06-00-libraries/06-04-abi-and-api-design-choices.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n\"abi-dumper my_library.so -o ABI-0.dump -lver 0\"\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for GUI Programming in reStructuredText\nDESCRIPTION: Creates a table of contents for GUI programming documentation using reStructuredText directives. It includes links to internal documents and external resources for GNOME and elementary OS development.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :glob:\n\n   gui-programming/*\n   GNOME Developer Documenation - Tutorials <https://developer.gnome.org/documentation/tutorials.html>\n   elementary OS - Writing Apps <https://docs.elementary.io/develop/writing-apps/the-basic-setup>\n```\n\n----------------------------------------\n\nTITLE: Installing Vala on MSYS2 (Windows)\nDESCRIPTION: These commands install the GNU Compiler Collection (GCC), pkg-config, and the Vala compiler in the MSYS2 environment on Windows.  These are required for compiling vala programs.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/installation-guide.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n\"$ pacman -S mingw-w64-x86_64-gcc\\n$ pacman -S mingw-w64-x86_64-pkg-config\\n$ pacman -S mingw-w64-x86_64-vala\"\n```\n\n----------------------------------------\n\nTITLE: C# Naming Conventions\nDESCRIPTION: Standard naming conventions for C# code elements including classes, methods, variables, and constants. Uses CamelCase for most elements with some exceptions for local variables and fields.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/03-naming-conventions.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nclasses, structs, delegate types: CamelCase\nmethods, properties, events: CamelCase\nlocal variables, fields: mixedCamelCase (sometimes lower_case)\nconstants, enum values: CamelCase\n```\n\n----------------------------------------\n\nTITLE: C Structure Definitions for Singly-Owned Types\nDESCRIPTION: Example C code patterns for singly-owned structures that should be bound as compact classes in Vala. Shows two patterns: one with explicit pointer notation in function signatures, another with pointer embedded in typedef.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-05-compact-classes.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct foo Foo;\n/* Create a new Foo handle. */\nFoo *foo_make(void);\n/* Make a copy of a Foo. */\nFoo *foo_dup(Foo*);\n/* Free a Foo handle. */\nvoid foo_free(Foo*);\n\ntypedef struct bar *Bar;\n/* Open a new Bar from a file, NULL if an error occurs. */\nBar bar_open(const char *filename);\n/* Dispose of a Bar when finished. */\nvoid bar_close(Bar);\n```\n\n----------------------------------------\n\nTITLE: Header Template for Vala Source Files\nDESCRIPTION: Standard header format for Vala source files, including copyright information, license text, and author details.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/02-00-environment-setup.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\n/* filename.vala\n *\n * Copyright (C) 20yy-20yy  Copyright Holder <email@address>\n *\n * License text.\n *\n * Author:\n * \tProgrammer Name <programmer@email>\n */\n```\n\n----------------------------------------\n\nTITLE: Application Compilation\nDESCRIPTION: Command to compile the application with library linkage\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/06-00-libraries/06-02-creating-a-library.rst#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ valac -X -I. -X -L. -X -ltest -o hello hello.vala test.vapi --basedir ./\n```\n\n----------------------------------------\n\nTITLE: Compiling GTK4 Vala Application\nDESCRIPTION: Command to compile a Vala application that uses GTK4. The --pkg flag is used to specify the required GTK4 package dependency.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/list-view-check-buttons.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ valac --pkg gtk4 ListViewCheckButtons.vala\n```\n\n----------------------------------------\n\nTITLE: Installing Vala on Arch Linux using Pacman\nDESCRIPTION: This command installs the Vala compiler on Arch Linux using the Pacman package manager. Sudo is used to execute the command with administrative privileges.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/installation-guide.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n\"$ sudo pacman -S vala\"\n```\n\n----------------------------------------\n\nTITLE: Including Config Header in Vala Compilation\nDESCRIPTION: Command to include a config.h file during Vala compilation by passing arguments to the C compiler\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/faq.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nvala -X '-include config.h'\n```\n\n----------------------------------------\n\nTITLE: GDB Debugging Session\nDESCRIPTION: Example of a GDB debugging session showing how to run the program and observe the segmentation fault with line number information.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/08-00-techniques/08-01-debugging.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ gdb debug-demo\n(gdb) run\nStarting program: /home/valacoder/debug-demo\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x0804881f in _main () at debug-demo.vala:7\n7           stdout.printf(\"%d\\n\", foo.field);\n(gdb)\n```\n\n----------------------------------------\n\nTITLE: Autotools Vapigen Integration\nDESCRIPTION: Documentation of the VAPIGEN_CHECK macro signature used for autotools integration.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/upstream-guide.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nVAPIGEN_CHECK([VERSION], [API_VERSION], [FOUND-INTROSPECTION], [DEFAULT])\n```\n\n----------------------------------------\n\nTITLE: Vala Version Output\nDESCRIPTION: This output shows an example of the version information that is printed when the `valac --version` command is successful. `x.xx.x` represents the version number of the Vala compiler.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/installation-guide.rst#2025-04-21_snippet_8\n\nLANGUAGE: output\nCODE:\n```\n\"Vala x.xx.x\"\n```\n\n----------------------------------------\n\nTITLE: Compiling a Vala GTK4 Application\nDESCRIPTION: Command to compile a Vala application that uses GTK4 libraries. The valac compiler handles both compilation and linking with the specified GTK4 package.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/entry-completion-two-cells.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ valac --pkg gtk4 EntryCompletionTwoCells.vala\n```\n\n----------------------------------------\n\nTITLE: Compiling a Vala Gtk4 Application\nDESCRIPTION: Command to compile a Vala source file that uses the Gtk4 library. This uses the valac compiler with the gtk4 package dependency.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/column-view.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ valac --pkg gtk4 ColumnView.vala\n```\n\n----------------------------------------\n\nTITLE: Literal Expression Classes in Vala\nDESCRIPTION: Lists the literal expression classes in Vala that inherit from Literal, representing different types of literal values in code.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/03-00-the-vala-compiler/03-02-parser.rst#2025-04-21_snippet_6\n\nLANGUAGE: vala\nCODE:\n```\npublic class Vala.BooleanLiteral : Literal\npublic class Vala.CharacterLiteral : Literal\npublic class Vala.IntegerLiteral : Literal\npublic class Vala.ListLiteral : Literal\npublic class Vala.MapLiteral : Literal\npublic class Vala.NullLiteral : Literal\npublic class Vala.RealLiteral : Literal\npublic class Vala.RegexLiteral : Literal\npublic class Vala.SetLiteral : Literal\npublic class Vala.StringLiteral : Literal\n```\n\n----------------------------------------\n\nTITLE: Debugging with GDB and Fatal Criticals\nDESCRIPTION: Command to run the Vala compiler under GDB with G_DEBUG environment variable set to make criticals fatal for easier debugging.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nG_DEBUG=fatal-criticals gdb --args <em>my_valac_version</em> my_test_program.vala\n```\n\n----------------------------------------\n\nTITLE: Running a Compiled Vala Application\nDESCRIPTION: Command to execute the compiled Vala application. This runs the GTK4 Entry Completion example program.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/entry-completion-two-cells.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ./EntryCompletionTwoCells.vala\n```\n\n----------------------------------------\n\nTITLE: Compiling Vala Program\nDESCRIPTION: Console command showing the basic compilation and execution of the buggy Vala program, resulting in a segmentation fault.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/08-00-techniques/08-01-debugging.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ valac debug-demo.vala\n$ ./debug-demo\nSegmentation fault\n```\n\n----------------------------------------\n\nTITLE: Running Vala Tests with Make\nDESCRIPTION: Instructions for running Vala tests using the 'make check' command, with a prerequisite of having dbus-glib development files installed to avoid invalid test failures.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/07-00-testing.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake check\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Table of Contents for Vala Docs\nDESCRIPTION: Configures a reStructuredText toctree directive to include all documentation files from the programming-language directory with a max depth of 1 level. Uses glob pattern matching to automatically include all files.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :glob:\n\n   programming-language/*\n```\n\n----------------------------------------\n\nTITLE: Method Overloading Limitation in Vala\nDESCRIPTION: This code attempts to illustrate the limitation of method overloading in Vala with two methods having the same name but different parameters, which is not allowed in Vala. It offers an alternative naming strategy for differentiating methods.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/02-00-basics/02-07-language-elements.rst#2025-04-21_snippet_1\n\nLANGUAGE: vala\nCODE:\n```\nvoid draw(string text) { }\nvoid draw(Shape shape) { }  // not possible\n```\n\nLANGUAGE: vala\nCODE:\n```\nvoid draw_text(string text) { }\nvoid draw_shape(Shape shape) { }\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running a Gtk ListView Sample in Vala\nDESCRIPTION: This snippet provides the command line instructions to compile and run a Vala Gtk application. It employs the valac compiler with Gtk library dependencies. Ensure that Gtk is installed on your system and paths are correctly set. The input is a Vala source code file named 'ListView.vala', and one compiled output 'ListView.vala' executable is generated.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/list-view.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n   $ valac --pkg gtk4 ListView.vala\n```\n\nLANGUAGE: console\nCODE:\n```\n   $ ./ListView.vala\n```\n\n----------------------------------------\n\nTITLE: Defining a C function that returns a modified pointer\nDESCRIPTION: C code defining a function that returns a new pointer to a Table instance, similar to how realloc works.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/05-00-fundamentals-of-binding-a-c-function/05-10-methods-that-change-the-instance-reference.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct table Table;\nTable *table_grow(Table *t, size_t object_count);\n```\n\n----------------------------------------\n\nTITLE: Creating Copyright Notice in Vala VAPI Files\nDESCRIPTION: Example of a properly formatted copyright notice for a Vala VAPI binding. The notice includes attribution with the author's name and email, along with placeholder text for the license statement. It demonstrates the use of multi-line comments rather than documentation comments to prevent valadoc from processing the notice.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/02-00-getting-started/02-02-attribution-and-license.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\n/*\n * Copyright (c) 2016 My Name <my_email@my_address.com>\n * \n * This library is free software...[or whichever license is used by the library]\n *\n */\n```\n\n----------------------------------------\n\nTITLE: Including C Headers in GIR Generation (Console)\nDESCRIPTION: Example of using g-ir-scanner to include C header files when generating a GIR file. This ensures the correct header filename is included in the resulting VAPI.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/generating-a-vapi-with-gobject-introspection.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ng-ir-scanner --c-include=example/example.h project_source.c\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running Vala ArrayList Sample\nDESCRIPTION: This bash snippet shows how to compile the Vala code using the Vala compiler (valac) with the required Gee package, and then run the compiled executable.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/gee-samples/01-list-sample.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ valac --pkg gee-0.8 gee-list.vala\n$ ./gee-list\n```\n\n----------------------------------------\n\nTITLE: Library Path Setup and Execution\nDESCRIPTION: Command to run the compiled program with local library path\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/06-00-libraries/06-02-creating-a-library.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ LD_LIBRARY_PATH=$PWD ./hello\n```\n\n----------------------------------------\n\nTITLE: Invoking D-Bus Methods via Console\nDESCRIPTION: These console commands illustrate how to call methods on the registered D-Bus service using dbus-send. It specifies the destination service and object path, demonstrating how to pass parameters like strings.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-14-d-bus-integration.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ dbus-send --type=method_call                   \\\n             --dest=org.example.DemoService       \\\n             /org/example/demo                    \\\n             org.example.DemoService.SomeMethod\n```\n\nLANGUAGE: console\nCODE:\n```\n$ dbus-send --type=method_call                   \\\n             --dest=org.example.DemoService       \\\n             /org/example/demo                    \\\n             org.example.DemoService.SomeMethodSender \\\n             string:'hello world'\n```\n\n----------------------------------------\n\nTITLE: Specifying Delegate Type for GClosure (XML)\nDESCRIPTION: Example of using metadata to specify the delegate type for a GClosure, which is not supported by GObject Introspection.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/generating-a-vapi-with-gobject-introspection.rst#2025-04-21_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\nBindingPool.install_closure.closure type=\"owned BindingActionFunc\"\n```\n\n----------------------------------------\n\nTITLE: Defining XCB Atom Type in C\nDESCRIPTION: C code showing the definition of an XCB atom type using typedef\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-03-simple-type-structs.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ntypedef uint32_t xcb_atom_t;\n```\n\n----------------------------------------\n\nTITLE: Typelib Generation\nDESCRIPTION: Command to compile GIR file into typelib format\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/06-00-libraries/06-02-creating-a-library.rst#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\ng-ir-compiler --output MyLibrary-1.0.typelib MyLibrary-1.0.gir\n```\n\n----------------------------------------\n\nTITLE: Library Header Generation\nDESCRIPTION: Command to generate C header files and VAPI interface from Vala source\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/06-00-libraries/06-02-creating-a-library.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ valac -C -H test.h --library test test.vala --basedir ./\n```\n\n----------------------------------------\n\nTITLE: Renaming Method to Resolve Symbol Conflict (XML)\nDESCRIPTION: Example of using metadata to rename a method to resolve a symbol conflict between a method and a signal with the same name but different signatures.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/generating-a-vapi-with-gobject-introspection.rst#2025-04-21_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\nActor.event#method name=\"emit_event\"\n```\n\n----------------------------------------\n\nTITLE: Installing Vala on Fedora using DNF\nDESCRIPTION: This command installs the Vala compiler on Fedora using the DNF package manager. It uses sudo to gain root privileges, which are necessary for installing software packages.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/installation-guide.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n\"$ sudo dnf install vala\"\n```\n\n----------------------------------------\n\nTITLE: Checking ABI Compliance with abi-compliance-checker in Console\nDESCRIPTION: This snippet uses `abi-compliance-checker` to generate a report that highlights any changes in the ABI between two versions of a shared library. The checker compares the generated ABI profiles to identify potential compatibility issues.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/06-00-libraries/06-04-abi-and-api-design-choices.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n\"abi-compliance-checker -l my_library -old ABI-0.dump -new ABI-1.dump\"\n```\n\n----------------------------------------\n\nTITLE: Specifying File Extensions for C# and Vala Source Files\nDESCRIPTION: This snippet shows the file extensions used for C# and Vala source files. Both languages use the .cs extension, which may lead to confusion when working with projects that involve both languages.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/01-sources-files.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nC#: *.cs\n\nVala: *.cs\n```\n\n----------------------------------------\n\nTITLE: Specifying Generic Type Arguments (XML)\nDESCRIPTION: Example of using metadata to specify generic type arguments for types not supported as generics by GObject Introspection.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/generating-a-vapi-with-gobject-introspection.rst#2025-04-21_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\nform_encode_datalist.form_data_set type_arguments=\"string\"\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Todo Block\nDESCRIPTION: ReStructuredText markup indicating a TODO section with a reference to external Vala ownership documentation\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/03-00-using-auto-memory-management/03-03-the-concept-of-ownership-in-vala.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. todo::\n\n   This section was originally empty.\n   See `<https://wiki.gnome.org/Projects/Vala/ReferenceHandling>`_ for infomation\n   about ownership in Vala\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents in reStructuredText\nDESCRIPTION: This snippet configures a table of contents for the Vala guide using reStructuredText directives. It sets the maximum depth to 1 and uses a glob pattern to include all files in the 'vala-for-csharp-devs' directory.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :glob:\n\n   vala-for-csharp-devs/*\n```\n\n----------------------------------------\n\nTITLE: Selecting libc profile with valac\nDESCRIPTION: This command demonstrates how to compile Vala code using the `libc` profile, which removes the dependency on GLib.  The `--profile=libc` option instructs the `valac` compiler to generate code compatible with a minimal C standard library environment. This is suitable for resource-constrained environments like microcontrollers or for generating very small binaries.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-15-profiles.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ valac --profile=libc somecode.vala\n```\n\n----------------------------------------\n\nTITLE: Generated C Function Signature from Vala Code\nDESCRIPTION: The C function signature that Vala generates for the compute method, showing how implicit parameters are positioned.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/05-00-fundamentals-of-binding-a-c-function/05-05-changing-the-position-of-generated-arguments.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nint *foo_compute(Foo self, int x, foo_transform t, void *t_userdata, int *array_len)\n```\n\n----------------------------------------\n\nTITLE: Structuring Documentation with toctree in RST\nDESCRIPTION: This snippet demonstrates the use of the 'toctree' directive in reStructuredText (RST) to create a table of contents. The ':glob:' option includes all files matching a pattern, and ':maxdepth: 1' limits the table of contents depth to one level.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tooling/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :glob:\n   :maxdepth: 1\n\n   *\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Namespace for Constants (XML)\nDESCRIPTION: Example of using metadata to create a nested namespace for constants, improving organization and readability of the API.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/generating-a-vapi-with-gobject-introspection.rst#2025-04-21_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\nKEY_* skip=false name=\"KEY_(.+)\" parent=\"Clutter.Key\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx TOC Tree for Vala Techniques Documentation\nDESCRIPTION: Sets up a table of contents tree in Sphinx documentation using reStructuredText. Configures glob pattern matching for files in 08-00-techniques directory with max depth of 2 levels.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/08-00-techniques.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :glob:\n   :maxdepth: 2\n\n   08-00-techniques/*\n```\n\n----------------------------------------\n\nTITLE: Generated VAPI Code for Button Class\nDESCRIPTION: Example of the Vala API (VAPI) code generated from the GIR file for the Button class. This shows how the C function is translated into a Vala constructor with appropriate attributes and parameter types.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/generating-a-vapi-with-gobject-introspection.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\n[CCode (cheader_filename = \"gtk/gtk.h\", type_id = \"gtk_button_get_type ()\")]\npublic class Button : Gtk.Bin, Atk.Implementor, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable {\n\t[CCode (has_construct_function = false, type = \"GtkWidget*\")]\n\t[Version (since = \"3.10\")]\n\tpublic Button.from_icon_name (string? icon_name, [CCode (type = \"GtkIconSize\")] Gtk.IconSize size = Gtk.IconSize.BUTTON);\n}\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure\nDESCRIPTION: ReStructuredText markup defining documentation structure for Vala tools documentation with TODO placeholders.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/06-00-other-tools.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nOther Tools\n===========\n\ngen-introspect\n--------------\n\n.. TODO::\n\n   Add information about the gen-introspect tool\n\n   Feel free to help: `Vala Docs Repository <https://github.com/vala-lang/vala-docs>`_.\n\n\nvapigen\n-------\n\n\n.. TODO::\n\n   Add information about the vapigen tool\n\n   Feel free to help: `Vala Docs Repository <https://github.com/vala-lang/vala-docs>`_.\n\n\nvala-gen-introspect\n--------------------\n\n\n.. TODO::\n\n   Add information about the vala-gen-introspect tool\n\n   Feel free to help: `Vala Docs Repository <https://github.com/vala-lang/vala-docs>`_.\n```\n\n----------------------------------------\n\nTITLE: Static Member Initialization Workaround in Vala\nDESCRIPTION: Example showing how to work around a Vala bug related to static member initialization by using a dummy instantiation before accessing static members.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/faq.rst#2025-04-21_snippet_4\n\nLANGUAGE: vala\nCODE:\n```\nclass Statico : Object {\n\n    public static int test_value;\n\n    static construct {\n        test_value = 5;\n    }\n}\n\nvoid main () {\n    new Statico ();   // dummy instantiation\n    stdout.printf (\"%d\\n\", Statico.test_value);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating VAPI from GIR\nDESCRIPTION: Command reference showing the vapigen tool usage for converting GIR files to VAPI format\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/faq.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nvapigen\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for Getting Started in reStructuredText\nDESCRIPTION: Sets up a table of contents (toctree) for the Getting Started section of Vala documentation. It specifies a maximum depth of 2 and uses a glob pattern to include all files within the 02-00-getting-started directory.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/02-00-getting-started.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :glob:\n\n   02-00-getting-started/*\n```\n\n----------------------------------------\n\nTITLE: Compiling C# with GTK# Package\nDESCRIPTION: Command for compiling C# source with GTK# 2.0 package dependency using Mono compiler.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/02-compilation.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ gmcs source.cs -pkg:gtk-sharp-2.0 -out:program.exe\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Table of Contents for Vala Documentation\nDESCRIPTION: This snippet sets up a table of contents using Sphinx's toctree directive. It includes all files from the 'documentation' directory, with a maximum depth of 1 level.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :glob:\n   :maxdepth: 1\n\n   documentation/*\n```\n\n----------------------------------------\n\nTITLE: Specifying Finish Function for Async Methods (XML)\nDESCRIPTION: Example of using metadata to specify the finish function for asynchronous methods, which is not supported by GObject Introspection.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/generating-a-vapi-with-gobject-introspection.rst#2025-04-21_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\nService.lookupv finish_name=\"secret_service_lookup_finish\"\n```\n\n----------------------------------------\n\nTITLE: GIR File Generation\nDESCRIPTION: Command to generate GObject Introspection Repository file\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/06-00-libraries/06-02-creating-a-library.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ valac -C test.vala --library test --gir Test-1.0.gir\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for C Function Binding in reStructuredText\nDESCRIPTION: This snippet creates a table of contents using the toctree directive in reStructuredText. It sets the maximum depth to 2 and uses a glob pattern to include all files in the '07-00-binding-a-c-function-s-parameter-and-return-types' directory.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/07-00-binding-a-c-function-s-parameter-and-return-types.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :glob:\n\n   07-00-binding-a-c-function-s-parameter-and-return-types/*\n```\n\n----------------------------------------\n\nTITLE: Program Output\nDESCRIPTION: Expected output from running the example program\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/06-00-libraries/06-02-creating-a-library.rst#2025-04-21_snippet_8\n\nLANGUAGE: output\nCODE:\n```\nHello World, MyLib\nThe sum of 4 and 5 is 9\n```\n\n----------------------------------------\n\nTITLE: Incorrect Property Return in Vala\nDESCRIPTION: This example demonstrates a Vala property setter intended to return a new object, which is incorrect because properties have unowned return values. It highlights that a new object will be deleted when the getter's scope ends, resulting in an invalid reference.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features/04-10-ownership.rst#2025-04-21_snippet_2\n\nLANGUAGE: vala\nCODE:\n```\npublic Object property {\n    get {\n        return new Object();   // WRONG: property returns an unowned reference,\n                               // the newly created object will be deleted when\n                               // the getter scope ends the caller of the\n                               // getter ends up receiving an invalid reference\n                               // to a deleted object.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation Tree Structure\nDESCRIPTION: Sets up a reStructuredText table of contents tree configuration that recursively includes all files in the 04-00-advanced-features directory with a maximum depth of 2 levels.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/04-00-advanced-features.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :glob:\n   :maxdepth: 2\n\n   04-00-advanced-features/*\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Document Structure\nDESCRIPTION: Basic restructuredtext document structure showing a title, description and toctree directive for organizing documentation about C function binding.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/05-00-fundamentals-of-binding-a-c-function.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nFundamentals of Binding a C Function\n====================================\n\nA function signature comprises the parameters of the function and any return value.\n\n.. toctree::\n   :maxdepth: 2\n   :glob:\n\n   05-00-fundamentals-of-binding-a-c-function/*\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Namespace in Vala\nDESCRIPTION: Demonstrates the basic structure for creating a root namespace in Vala to contain library bindings. Shows how to define a namespace called 'Foo' that will contain all library bindings.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/02-00-getting-started/02-04-create-a-root-namespace.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\nnamespace Foo {\n    // bindings\n}\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Table of Contents Configuration\nDESCRIPTION: RST directive configuration for organizing tool documentation using toctree with glob pattern matching and depth control.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/07-00-tools.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :glob:\n   :maxdepth: 2\n\n   07-00-tools/*\n```\n\n----------------------------------------\n\nTITLE: Command Reference for vala-gen-introspect\nDESCRIPTION: Command line tool reference for extracting GObject library metadata. This tool is considered legacy as GObjectIntrospection is now the recommended approach.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/07-00-tools/07-04-vala-gen-introspect.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvala-gen-introspect\n```\n\n----------------------------------------\n\nTITLE: Installing Valadoc from Source\nDESCRIPTION: Shell commands for downloading, building and installing Valadoc from source code using git and make.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/02-00-getting-started/02-08-documentation-and-valadoc-org.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git://git.gnome.org/valadoc\ncd valadoc\n./autogen.sh\nmake\nmake install\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure for Vala Bindings\nDESCRIPTION: Configures Sphinx documentation to include all binding-related files using a toctree directive. Sets max depth to 1 and uses glob pattern to include all files in the bindings directory.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :glob:\n   :maxdepth: 1\n\n   bindings/*\n```\n\n----------------------------------------\n\nTITLE: Running the Compiled Text File Viewer Application\nDESCRIPTION: This command runs the compiled TextFileViewer application.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/text-file-viewer.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ./TextFileViewer.vala\n```\n\n----------------------------------------\n\nTITLE: Compiling C# Sources\nDESCRIPTION: Commands for compiling C# source files using both Windows (csc) and Mono (gmcs) compilers into an executable program.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/02-compilation.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> csc source1.cs source2.cs /out:program.exe\n$ gmcs source1.cs source2.cs -out:program.exe\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx toctree for Vala plugins documentation\nDESCRIPTION: This code snippet uses Sphinx's toctree directive to generate a table of contents that includes all files within the plugins directory. The glob option enables wildcard pattern matching, while maxdepth limits the hierarchy depth to 1 level.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/plugins.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :glob:\n   :maxdepth: 1\n\n   plugins/*\n```\n\n----------------------------------------\n\nTITLE: Basic Library Compilation Commands\nDESCRIPTION: Commands for compiling Vala source files into object files and creating libraries using ar\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/programming-language/main/06-00-libraries/06-02-creating-a-library.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ valac -c ...(source files)\n$ ar cx ...(object files)\n```\n\n----------------------------------------\n\nTITLE: Running Compiled Vala Gtk Application\nDESCRIPTION: Console command to execute the compiled Vala Gtk application. This step runs the previously compiled binary.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/tutorials/gui-programming/gtk4-samples/synchronising-widgets.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ./SyncingWidgets.vala\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for Vala Documentation\nDESCRIPTION: This snippet defines the table of contents for the Vala documentation using reStructuredText syntax. It specifies hidden pages and their corresponding titles.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :hidden:\n\n   Home <self>\n   About <about>\n   Installation Guide <installation-guide>\n   Tutorials <tutorials/index>\n   Tooling <tooling/index>\n   Contributor Guide <contributor-guide/index>\n   Developer Guides <developer-guides/index>\n   FAQ <faq>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Table of Contents for Vala Developer Guides\nDESCRIPTION: This ReStructuredText code configures a table of contents for Vala developer guides using Sphinx. It sets the maximum depth to 2 and includes all files in the current directory.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :glob:\n   :maxdepth: 2\n\n   *\n```\n\n----------------------------------------\n\nTITLE: Expression Classes in Vala\nDESCRIPTION: Shows the classes that inherit from Expression, representing different types of expressions in Vala code such as assignments, method calls, and object creation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/03-00-the-vala-compiler/03-02-parser.rst#2025-04-21_snippet_5\n\nLANGUAGE: vala\nCODE:\n```\npublic class Vala.AddressofExpression : Expression\npublic class Vala.ArrayCreationExpression : Expression\npublic class Vala.Assignment : Expression\npublic class Vala.BaseAccess : Expression\npublic class Vala.BinaryExpression : Expression\npublic class Vala.CastExpression : Expression\npublic class Vala.ConditionalExpression : Expression\npublic class Vala.ElementAccess : Expression\npublic class Vala.InitializerList : Expression\npublic class Vala.LambdaExpression : Expression\npublic abstract class Vala.Literal : Expression\npublic class Vala.MemberAccess : Expression\npublic class Vala.MethodCall : Expression\npublic class Vala.NamedArgument : Expression\npublic class Vala.ObjectCreationExpression : Expression\npublic class Vala.PointerIndirection : Expression\npublic class Vala.PostfixExpression : Expression\npublic class Vala.ReferenceTransferExpression : Expression\npublic class Vala.SizeofExpression : Expression\npublic class Vala.SliceExpression : Expression\npublic class Vala.Template : Expression\npublic class Vala.Tuple : Expression\npublic class Vala.TypeCheck : Expression\npublic class Vala.TypeofExpression : Expression\npublic class Vala.UnaryExpression : Expression\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents in reStructuredText for Vala Documentation\nDESCRIPTION: This snippet sets up a table of contents using reStructuredText directives. It configures the depth of the table to 2 levels and uses a glob pattern to include all files in the '10-00-awkward-situations' directory.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/10-00-awkward-situations.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :glob:\n\n   10-00-awkward-situations/*\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies for Sphinx Documentation\nDESCRIPTION: This requirements file defines the Python packages needed to build the Vala documentation. It specifies Sphinx 6.2 as the documentation generator, furo theme for styling, and several extensions including sphinx-tabs for tabbed content, sphinxext-opengraph for social media preview, sphinx-copybutton for code copying functionality, and pygments for syntax highlighting.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsphinx==6.2\nfuro\nsphinx-tabs\nsphinxext-opengraph\nsphinx-copybutton\npygments\n```\n\n----------------------------------------\n\nTITLE: Documenting a Simple Function with Brief Description in Vala\nDESCRIPTION: This snippet demonstrates how to write a brief description for a Vala function. The description is enclosed in a multi-line comment block and succinctly explains the function's purpose. The function itself is a simple boolean method that always returns true.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/valadoc-guide/03-00-documentation-comment-markup/03-01-brief-description.rst#2025-04-21_snippet_0\n\nLANGUAGE: vala\nCODE:\n```\n/**\n * This function returns true\n *\n */\npublic bool always_true () {\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining C Function with Shared Context Delegates\nDESCRIPTION: This C code snippet defines a function 'foo' that takes a context pointer and two function pointers (delegates) that share the same context. This pattern is common in C APIs but doesn't have a direct equivalent in Vala.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/10-00-awkward-situations/10-05-shared-context-delgates.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid foo(void *context, void(*x)(int a, void *context), void(*y)(double a, void *context));\n```\n\n----------------------------------------\n\nTITLE: Defining C functions for transaction management with explicit memory handling\nDESCRIPTION: C code defining transaction-related functions including a creation function, abort and commit functions that destroy the transaction instance. The try_commit function returns a boolean result while destroying the instance.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/05-00-fundamentals-of-binding-a-c-function/05-11-methods-that-destroy-the-instance-reference.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct transaction Transaction;\nTransaction begin_tx(Database *db);\nvoid transaction_abort(Transaction *tx);\nvoid transaction_commit(Transaction *tx);\nbool transaction_try_commit(Transaction *tx);\n```\n\n----------------------------------------\n\nTITLE: Configuring Vim for Easier CCode Attribute Insertion in Vala\nDESCRIPTION: This Vim configuration adds a keyboard shortcut (F8) to quickly insert a [CCode] attribute with the current word as the cname. This is useful when renaming functions in Vala bindings.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/bindings/writing-a-vapi-manually/01-00-prerequisites.rst#2025-04-21_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:noremap <F8> \"gyiwO[CCode (cname = \"<ESC>\"gpa\")]<ESC>\n```\n\n----------------------------------------\n\nTITLE: Member Classes in Vala\nDESCRIPTION: Shows the classes that inherit from Member, representing class, struct, or interface members in Vala such as fields, methods, and properties.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/contributor-guide/compiler-guide/03-00-the-vala-compiler/03-02-parser.rst#2025-04-21_snippet_9\n\nLANGUAGE: vala\nCODE:\n```\npublic interface Vala.Lockable\n\npublic class Vala.Constant : Member, Lockable\npublic class Vala.Field : Member, Lockable\npublic class Vala.Method : Member\npublic class Vala.Property : Member, Lockable\npublic class Vala.Signal : Member, Lockable\n```\n\n----------------------------------------\n\nTITLE: Declaring Jagged Multi-Dimensional Arrays in C#\nDESCRIPTION: Shows the syntax for declaring jagged multi-dimensional arrays in C# using the [][] notation.\nSOURCE: https://github.com/vala-lang/vala-docs/blob/main/source/developer-guides/documentation/vala-for-csharp-devs/18-multi-dimensional-arrays.rst#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nint[][] jaggedArray;\n```"
  }
]