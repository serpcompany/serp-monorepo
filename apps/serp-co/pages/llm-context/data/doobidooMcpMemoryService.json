[
  {
    "owner": "doobidoo",
    "repo": "mcp-memory-service",
    "content": "TITLE: Docker Setup for MCP Memory Service\nDESCRIPTION: Commands to create directories for persistent storage and deploy the MCP Memory Service using Docker Compose.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Create directories for persistent storage\nmkdir -p ./data/chroma_db ./data/backups\n\n# Build and start the service\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Installing and Running MCP Memory Service\nDESCRIPTION: Basic installation steps using UV package manager to set up and run the memory service. Includes cloning the repository, creating a virtual environment, installing dependencies, and starting the service.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install UV if not already installed\npip install uv\n\n# Clone and install\ngit clone https://github.com/doobidoo/mcp-memory-service.git\ncd mcp-memory-service\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\\\Scripts\\\\activate\nuv pip install -r requirements.txt\nuv pip install -e .\n\n# Run the service\nuv run memory\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment using venv, with platform-specific activation commands for Windows and macOS/Linux.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Using venv (recommended)\npython -m venv venv\n\n# On Windows\nvenv\\Scripts\\activate\n\n# On macOS/Linux\nsource venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Building and Running MCP Memory Service with Docker\nDESCRIPTION: Commands for building the Docker image, creating required directories for persistent storage, and running the container with default settings.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/technical/docker-deployment.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Build the Docker image\ndocker build -t mcp-memory-service .\n\n# Create directories for persistent storage\nmkdir -p ./data/chroma_db ./data/backups\n\n# Run with default settings\ndocker run -d -p 8000:8000 --name memory-service \\\n  -v ./data/chroma_db:/app/chroma_db \\\n  -v ./data/backups:/app/backups \\\n  mcp-memory-service\n```\n\n----------------------------------------\n\nTITLE: Visualizing MCP Memory Service Cloudflare Architecture with Mermaid Flowchart\nDESCRIPTION: A mermaid flowchart diagram visualizing the architecture of the new MCP Memory Service design using Cloudflare services. It shows the relationships between the MCP Client, Cloudflare Worker (acting as MCP Server), D1 Database for vectors and metadata storage, Workers AI for embeddings, and R2 Storage for backups.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/MCP_Cloudflare_Design.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    subgraph Client\n        A[MCP Client]\n    end\n\n    subgraph Cloudflare\n        B[Cloudflare Worker (MCP Server)]\n        C[D1 Database (Vectors + Metadata)]\n        D[Workers AI (Embeddings)]\n        E[R2 Storage (Backups)]\n    end\n\n    A -- SSE --> B\n    B -- SQL --> C\n    B -- API Call --> D\n    B -- Backup Export --> E\n```\n\n----------------------------------------\n\nTITLE: Deploying MCP Memory Service with Docker Compose\nDESCRIPTION: Commands for creating data directories and starting the service using Docker Compose for simplified deployment.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/technical/docker-deployment.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create data directories\nmkdir -p ./data/chroma_db ./data/backups\n\n# Start the service\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Setting Up Virtual Environment on Apple Silicon\nDESCRIPTION: Comprehensive commands for setting up MCP Memory Service on Apple Silicon Macs using a virtual environment, including uninstalling conflicting packages, creating a virtual environment, and installing dependencies.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# requirements: 1-homebrew 2-python installation (brew install python)\n# for Apple Silicon Macs, make sure to first uninstall pytorch, torch, torchvision if you have any of them installed\nbrew uninstall pytorch torchvision\n\n# create and activate a virtual environment (first, make sure to delete the .venv folder if you git clone)\ncd /path/to/your/cloned/project/\npython -m venv .venv\nsource .venv/bin/activate\n\n# install uv in the virtual environment (as the command that handles the project in JSON is uv, and it is more compatible with the\n# project than python/python3/rye/etc.)\npip install uv\n\n# make sure to give the JSON config the full PATH to the uv for Claude desktop.  \"PATH_TO_YOUR_CLONED_PROJECT/.venv/bin/uv\"\n\n# Then install Pytorch manually\npip install torch torchvision torchaudio\n\n# Then install other dependencies without PyTorch\npip install -r requirements.txt --no-deps\n\n# Finally install the package\npip install -e .\n\n#Then check if the server runs\nmemory\n```\n\n----------------------------------------\n\nTITLE: Running Memory Server Script in Python\nDESCRIPTION: Executes the main script to start the memory service server.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/scripts.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/run_memory_server.py\n```\n\n----------------------------------------\n\nTITLE: Specifying Core Dependencies for MCP Memory Service\nDESCRIPTION: This snippet defines the core dependencies required for the MCP Memory Service project. It includes specific versions of chromadb, tokenizers, websockets, and mcp.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Core dependencies\nchromadb==0.5.23\ntokenizers==0.20.3\nwebsockets>=11.0.3\nmcp>=1.0.0,<2.0.0\n```\n\n----------------------------------------\n\nTITLE: Executing ChromaDB Memory Migration via Command Line\nDESCRIPTION: Bash commands for running the memory migration script. Demonstrates both local-to-remote and remote-to-local migration scenarios with appropriate parameters.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/technical/memory-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Local to Remote Migration\npython scripts/mcp-migration.py \\\n    --source-type local \\\n    --source-config /path/to/local/chroma \\\n    --target-type remote \\\n    --target-config '{\"host\": \"remote-host\", \"port\": 8000}'\n\n# Remote to Local Migration\npython scripts/mcp-migration.py \\\n    --source-type remote \\\n    --source-config '{\"host\": \"remote-host\", \"port\": 8000}' \\\n    --target-type local \\\n    --target-config /path/to/local/chroma\n```\n\n----------------------------------------\n\nTITLE: Running MCP Memory Server Command\nDESCRIPTION: Command to start the memory server for development and testing.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/technical/development.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/run_memory_server.py\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure for MCP Memory Service\nDESCRIPTION: An overview of the MCP memory service project structure, showing the organization of core components, helper scripts, configuration files, and test suite. This structure follows Python best practices with separate modules for different functionalities.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmcp-memory-service/\n├── src/mcp_memory_service/      # Core package code\n│   ├── __init__.py\n│   ├── config.py                # Configuration utilities\n│   ├── models/                  # Data models\n│   ├── storage/                 # Storage implementations\n│   ├── utils/                   # Utility functions\n│   └── server.py                # Main MCP server\n├── scripts/                     # Helper scripts\n│   ├── convert_to_uv.py         # Script to migrate to UV\n│   └── install_uv.py            # UV installation helper\n├── .uv/                         # UV configuration\n├── memory_wrapper.py            # Windows wrapper script\n├── memory_wrapper_uv.py         # UV-based wrapper script\n├── uv_wrapper.py                # UV wrapper script\n├── install.py                   # Enhanced installation script\n└── tests/                       # Test suite\n```\n\n----------------------------------------\n\nTITLE: Setting Up Data Persistence with Docker Volumes\nDESCRIPTION: Command for running the Docker container with mounted volumes to local directories for data persistence of ChromaDB files and backups.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/technical/docker-deployment.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 8000:8000 --name memory-service \\\n  -v /path/on/host/chroma_db:/app/chroma_db \\\n  -v /path/on/host/backups:/app/backups \\\n  mcp-memory-service\n```\n\n----------------------------------------\n\nTITLE: ChromaDB Migration Python Implementation\nDESCRIPTION: Python code examples showing how to programmatically execute both local-to-remote and remote-to-local migrations using the migrate_memories function.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/migration.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom scripts.mcp_migration import migrate_memories\n\n# Local to Remote Migration\nmigrate_memories(\n    source_type='local',\n    source_config='/path/to/local/chroma',\n    target_type='remote',\n    target_config={'host': 'remote-host', 'port': 8000}\n)\n\n# Remote to Local Migration\nmigrate_memories(\n    source_type='remote',\n    source_config={'host': 'remote-host', 'port': 8000},\n    target_type='local',\n    target_config='/path/to/local/chroma'\n)\n```\n\n----------------------------------------\n\nTITLE: Installing UV Package Manager on Windows\nDESCRIPTION: Command to install the UV package manager using pip\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/windows-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install uv\n```\n\n----------------------------------------\n\nTITLE: Configuring Source/Target for ChromaDB Migration in JSON\nDESCRIPTION: JSON configuration for specifying source or target ChromaDB instances in the migration process. Supports both local and remote types with appropriate configuration parameters.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/technical/memory-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"local|remote\",\n    \"config\": {\n        \"path\": \"/path/to/chroma\",  // for local\n        \"host\": \"remote-host\",      // for remote\n        \"port\": 8000               // for remote\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatic Memory Migration in Python\nDESCRIPTION: Python code showing how to programmatically use the migrate_memories function. Includes examples for both local-to-remote and remote-to-local migrations with appropriate configuration parameters.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/technical/memory-migration.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom scripts.mcp_migration import migrate_memories\n\n# Local to Remote Migration\nmigrate_memories(\n    source_type='local',\n    source_config='/path/to/local/chroma',\n    target_type='remote',\n    target_config={'host': 'remote-host', 'port': 8000}\n)\n\n# Remote to Local Migration\nmigrate_memories(\n    source_type='remote',\n    source_config={'host': 'remote-host', 'port': 8000},\n    target_type='local',\n    target_config='/path/to/local/chroma'\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Tag Migration Script\nDESCRIPTION: Command to run the migration script which creates a backup, performs validation, requests confirmation, executes the migration, and verifies the results.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/technical/tag-storage.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/migrate_tags.py\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for MCP Memory Service Configuration\nDESCRIPTION: A list of environment variables to configure the MCP memory service, including paths, thresholds, and hardware-specific settings. These variables control behavior such as backup intervals, optimization thresholds, and hardware acceleration options.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nCHROMA_DB_PATH: Path to ChromaDB storage\nBACKUP_PATH: Path for backups\nAUTO_BACKUP_INTERVAL: Backup interval in hours (default: 24)\nMAX_MEMORIES_BEFORE_OPTIMIZE: Threshold for auto-optimization (default: 10000)\nSIMILARITY_THRESHOLD: Default similarity threshold (default: 0.7)\nMAX_RESULTS_PER_QUERY: Maximum results per query (default: 10)\nBACKUP_RETENTION_DAYS: Number of days to keep backups (default: 7)\nLOG_LEVEL: Logging level (default: INFO)\n\n# Hardware-specific environment variables\nPYTORCH_ENABLE_MPS_FALLBACK: Enable MPS fallback for Apple Silicon (default: 1)\nMCP_MEMORY_USE_ONNX: Use ONNX Runtime for CPU-only deployments (default: 0)\nMCP_MEMORY_USE_DIRECTML: Use DirectML for Windows acceleration (default: 0)\nMCP_MEMORY_MODEL_NAME: Override the default embedding model\nMCP_MEMORY_BATCH_SIZE: Override the default batch size\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Docker Container Issues\nDESCRIPTION: Commands for viewing container logs and accessing an interactive shell for debugging problems with the memory service container.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/technical/docker-deployment.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs memory-service\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it memory-service bash\n```\n\nLANGUAGE: bash\nCODE:\n```\n# On host machine\nchmod -R 777 ./data/chroma_db ./data/backups\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude Desktop Integration with Docker\nDESCRIPTION: JSON configuration for integrating the Docker-deployed MCP Memory Service with Claude Desktop by updating the claude_desktop_config.json file.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/technical/docker-deployment.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"memory\": {\n    \"command\": \"docker\",\n    \"args\": [\n      \"run\",\n      \"--rm\",\n      \"-p\", \"8000:8000\",\n      \"-v\", \"/path/to/data/chroma_db:/app/chroma_db\",\n      \"-v\", \"/path/to/data/backups:/app/backups\",\n      \"-e\", \"MCP_MEMORY_CHROMA_PATH=/app/chroma_db\",\n      \"-e\", \"MCP_MEMORY_BACKUPS_PATH=/app/backups\",\n      \"mcp-memory-service\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Memory Migration Script in Python\nDESCRIPTION: Runs a script to handle migration of memory data in the service.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/scripts.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/memory-migration.py\n```\n\n----------------------------------------\n\nTITLE: SQL Schema for Cloudflare D1 Memory Database\nDESCRIPTION: SQL schema for initializing the Cloudflare D1 database used in the serverless implementation. Creates a memories table with fields for content, embeddings, tags, and metadata, along with an index on creation timestamp.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS memories (\n  id TEXT PRIMARY KEY,\n  content TEXT NOT NULL,\n  embedding TEXT NOT NULL,\n  tags TEXT,\n  memory_type TEXT,\n  metadata TEXT,\n  created_at INTEGER\n);\nCREATE INDEX IF NOT EXISTS idx_created_at ON memories(created_at);\n```\n\n----------------------------------------\n\nTITLE: Virtual Environment Setup Command\nDESCRIPTION: Command to create a Python virtual environment for isolated installation.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/technical/development.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\n```\n\n----------------------------------------\n\nTITLE: Manual PyTorch Installation for Windows\nDESCRIPTION: Commands for manually installing PyTorch and dependencies on Windows, addressing platform-specific wheel availability issues.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# First install PyTorch with the appropriate index URL\npip install torch==2.1.0 torchvision==2.1.0 torchaudio==2.1.0 --index-url https://download.pytorch.org/whl/cu118\n\n# Then install other dependencies without PyTorch\npip install -r requirements.txt --no-deps\npip install \"mcp>=1.0.0,<2.0.0\"\n\n# Finally install the package\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude to Use Cloudflare Memory Service\nDESCRIPTION: JSON configuration for connecting Claude to the Cloudflare-based memory service implementation. This setup uses Server-Sent Events (SSE) for communication and requires replacing the worker subdomain with your actual deployment.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": [\n    {\n      \"name\": \"cloudflare-memory\",\n      \"url\": \"https://your-worker-subdomain.workers.dev/mcp\",\n      \"type\": \"sse\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Environment Script in Python\nDESCRIPTION: Runs a script to verify the installation environment and dependencies.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/scripts.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/verify_environment.py\n```\n\n----------------------------------------\n\nTITLE: Debug and Verification Tools for PyTorch Installation\nDESCRIPTION: This code snippet provides a set of commands to run various debug and verification tools. These scripts help in verifying the environment, exporting diagnostics, checking PyTorch installation on Windows, and testing the memory server and basic operations.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n# Enhanced environment verification\npython scripts/verify_environment_enhanced.py\n\n# Export detailed diagnostics\npython scripts/verify_environment_enhanced.py --export\n\n# Windows-specific PyTorch verification\npython scripts/verify_pytorch_windows.py\n\n# Test the memory server directly\npython scripts/run_memory_server.py\n\n# Test basic operations\npython src/chroma_test_isolated.py\n```\n\n----------------------------------------\n\nTITLE: Windows Installation Script Execution\nDESCRIPTION: Command to run the Windows-specific installation script\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/windows-setup.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/install_windows.py\n```\n\n----------------------------------------\n\nTITLE: Docker Container Configuration for Memory Service\nDESCRIPTION: Docker commands for building and running the memory service container with proper volume mounts for data persistence. Includes examples for both interactive and detached modes.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Build the Docker image\ndocker build -t mcp-memory-service .\n\n# Example with proper macOS paths:\ndocker run -it \\\n  -v $HOME/mcp-memory/chroma_db:/app/chroma_db \\\n  -v $HOME/mcp-memory/backups:/app/backups \\\n  mcp-memory-service\n\n# For production use, you might want to run it in detached mode:\ndocker run -d \\\n  -v $HOME/mcp-memory/chroma_db:/app/chroma_db \\\n  -v $HOME/mcp-memory/backups:/app/backups \\\n  --name mcp-memory \\\n  mcp-memory-service\n```\n\n----------------------------------------\n\nTITLE: Enabling GPU Acceleration for MCP Memory Service\nDESCRIPTION: Docker command to run the container with access to NVIDIA GPUs for performance enhancement in machine learning operations.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/technical/docker-deployment.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 8000:8000 --name memory-service \\\n  --gpus all \\\n  -v ./data/chroma_db:/app/chroma_db \\\n  -v ./data/backups:/app/backups \\\n  mcp-memory-service\n```\n\n----------------------------------------\n\nTITLE: VPS Deployment Docker Configuration\nDESCRIPTION: Docker deployment configuration for VPS environments with resource constraints and persistent storage setup. Includes directory creation and container runtime settings.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/doobidoo/mcp-memory-service.git\ncd mcp-memory-service\n\n# Create directories for persistent storage\nmkdir -p ./data/chroma_db ./data/backups\n\n# Add resource constraints appropriate for your VPS\ndocker build -t mcp-memory-service .\ndocker run -d \\\n  --name mcp-memory \\\n  --restart unless-stopped \\\n  --memory=4g \\\n  --cpus=2 \\\n  -p 8000:8000 \\\n  -v $(pwd)/data/chroma_db:/app/chroma_db \\\n  -v $(pwd)/data/backups:/app/backups \\\n  -e MCP_MEMORY_CHROMA_PATH=/app/chroma_db \\\n  -e MCP_MEMORY_BACKUPS_PATH=/app/backups \\\n  -e MCP_MEMORY_MODEL_NAME=paraphrase-MiniLM-L6-v2 \\\n  -e MCP_MEMORY_BATCH_SIZE=4 \\\n  mcp-memory-service\n```\n\n----------------------------------------\n\nTITLE: Verifying Environment Setup for ChromaDB Migration\nDESCRIPTION: Script to verify the environment configuration including Python version, required packages, ChromaDB paths and network connectivity.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/migration.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/verify_environment.py\n```\n\n----------------------------------------\n\nTITLE: ChromaDB Migration Command Line Usage\nDESCRIPTION: Command line examples for executing both local-to-remote and remote-to-local migrations using the mcp-migration.py script.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/migration.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Local to Remote Migration\npython scripts/mcp-migration.py \\\n    --source-type local \\\n    --source-config /path/to/local/chroma \\\n    --target-type remote \\\n    --target-config '{\"host\": \"remote-host\", \"port\": 8000}'\n\n# Remote to Local Migration\npython scripts/mcp-migration.py \\\n    --source-type remote \\\n    --source-config '{\"host\": \"remote-host\", \"port\": 8000}' \\\n    --target-type local \\\n    --target-config /path/to/local/chroma\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests for Tag Storage\nDESCRIPTION: Command to execute integration tests that verify the functionality of tag storage before proceeding with migration.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/technical/tag-storage.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython tests/test_tag_storage.py\n```\n\n----------------------------------------\n\nTITLE: Smithery Integration Configuration\nDESCRIPTION: JSON configuration for integrating the memory service with Claude Desktop through Smithery, specifying Docker container settings and environment variables.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"memory\": {\n    \"command\": \"docker\",\n    \"args\": [\n      \"run\",\n      \"-i\",\n      \"--rm\",\n      \"-v\", \"$HOME/mcp-memory/chroma_db:/app/chroma_db\",\n      \"-v\", \"$HOME/mcp-memory/backups:/app/backups\",\n      \"mcp-memory-service\"\n    ],\n    \"env\": {\n      \"MCP_MEMORY_CHROMA_PATH\": \"/app/chroma_db\",\n      \"MCP_MEMORY_BACKUPS_PATH\": \"/app/backups\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Repairing Memories Script in Python\nDESCRIPTION: Executes a script to repair corrupted or invalid memories in the service.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/scripts.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/repair_memories.py\n```\n\n----------------------------------------\n\nTITLE: Checking Python Architecture on Apple Silicon\nDESCRIPTION: Commands to verify Python version and architecture on Apple Silicon Macs, ensuring the correct ARM64 build is being used.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npython --version\npython -c \"import platform; print(platform.machine())\"\n# Should output \"arm64\"\n```\n\n----------------------------------------\n\nTITLE: Claude Desktop Configuration JSON\nDESCRIPTION: Configuration settings for Claude Desktop including memory service paths and environment variables\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/windows-setup.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"memory\": {\n    \"command\": \"python\",\n    \"args\": [\n      \"C:\\\\path\\\\to\\\\mcp-memory-service\\\\memory_wrapper.py\"\n    ],\n    \"env\": {\n      \"MCP_MEMORY_CHROMA_PATH\": \"C:\\\\Users\\\\YourUsername\\\\AppData\\\\Local\\\\mcp-memory\\\\chroma_db\",\n      \"MCP_MEMORY_BACKUPS_PATH\": \"C:\\\\Users\\\\YourUsername\\\\AppData\\\\Local\\\\mcp-memory\\\\backups\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific Installation Script\nDESCRIPTION: Command to run the Windows-specific installation script for MCP Memory Service, which handles platform-specific dependencies.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/install_windows.py\n```\n\n----------------------------------------\n\nTITLE: Local to Remote ChromaDB Configuration\nDESCRIPTION: JSON configuration for migrating ChromaDB data from local environment to remote server, specifying source and target details.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/migration.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"source_type\": \"local\",\n    \"source_config\": \"/path/to/local/chroma\",\n    \"target_type\": \"remote\",\n    \"target_config\": {\n        \"host\": \"remote-host\",\n        \"port\": 8000\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual PyTorch Installation Command\nDESCRIPTION: Command to manually install PyTorch with CUDA support using a specific index URL\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/windows-setup.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install torch==2.1.0 torchvision==2.1.0 torchaudio==2.1.0 --index-url https://download.pytorch.org/whl/cu118\n```\n\n----------------------------------------\n\nTITLE: Remote to Local ChromaDB Configuration\nDESCRIPTION: JSON configuration for migrating ChromaDB data from remote server to local environment, specifying source and target details.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/migration.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"source_type\": \"remote\",\n    \"source_config\": {\n        \"host\": \"remote-host\",\n        \"port\": 8000\n    },\n    \"target_type\": \"local\",\n    \"target_config\": \"/path/to/local/chroma\"\n}\n```\n\n----------------------------------------\n\nTITLE: Windows Debugging Commands\nDESCRIPTION: Collection of commands for verifying installations and testing the memory server\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/windows-setup.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Verify PyTorch installation\npython scripts/verify_pytorch_windows.py\n\n# Check environment compatibility\npython scripts/verify_environment_enhanced.py\n\n# Test the memory server\npython scripts/run_memory_server.py\n```\n\n----------------------------------------\n\nTITLE: Migrating Memory from Remote to Local in MCP Memory Service using Bash\nDESCRIPTION: This command shows how to use the mcp-migration.py script to migrate memory from a remote ChromaDB instance to a local one. It specifies the source and target configurations.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/mcp-migration.py --source-type remote --source-config '{\"host\": \"remote-host\", \"port\": 8000}' --target-type local --target-config /path/to/local/chroma\n```\n\n----------------------------------------\n\nTITLE: Listing Memory Collections Script in Python\nDESCRIPTION: Runs a script to list all available memory collections in the service.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/scripts.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/list-collections.py\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific Claude Desktop Configuration\nDESCRIPTION: JSON configuration for Claude Desktop on Windows, using a wrapper script and Windows-specific file paths for the chroma database and backups.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"memory\": {\n    \"command\": \"python\",\n    \"args\": [\n      \"C:\\\\path\\\\to\\\\mcp-memory-service\\\\memory_wrapper.py\"\n    ],\n    \"env\": {\n      \"MCP_MEMORY_CHROMA_PATH\": \"C:\\\\Users\\\\YourUsername\\\\AppData\\\\Local\\\\mcp-memory\\\\chroma_db\",\n      \"MCP_MEMORY_BACKUPS_PATH\": \"C:\\\\Users\\\\YourUsername\\\\AppData\\\\Local\\\\mcp-memory\\\\backups\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Memory from Local to Remote in MCP Memory Service using Bash\nDESCRIPTION: This command demonstrates how to use the mcp-migration.py script to migrate memory from a local ChromaDB instance to a remote one. It specifies the source and target configurations.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/mcp-migration.py --source-type local --source-config /path/to/local/chroma --target-type remote --target-config '{\"host\": \"remote-host\", \"port\": 8000}'\n```\n\n----------------------------------------\n\nTITLE: Testing Installation Script in Python\nDESCRIPTION: Executes a script to test the installation and basic functionality of the service.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/scripts.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/test_installation.py\n```\n\n----------------------------------------\n\nTITLE: Docker Configuration for Claude Desktop\nDESCRIPTION: JSON configuration for Claude Desktop to use the MCP Memory Service Docker container, specifying the Docker run command with volume mounts and environment variables.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"memory\": {\n    \"command\": \"docker\",\n    \"args\": [\n      \"run\",\n      \"--rm\",\n      \"-p\", \"8000:8000\",\n      \"-v\", \"/path/to/data/chroma_db:/app/chroma_db\",\n      \"-v\", \"/path/to/data/backups:/app/backups\",\n      \"-e\", \"MCP_MEMORY_CHROMA_PATH=/app/chroma_db\",\n      \"-e\", \"MCP_MEMORY_BACKUPS_PATH=/app/backups\",\n      \"mcp-memory-service\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Recursion Issues on Windows\nDESCRIPTION: Command to run a script that fixes potential recursion issues in sitecustomize.py on Windows installations.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/fix_sitecustomize.py\n```\n\n----------------------------------------\n\nTITLE: Validating Memories Script in Python\nDESCRIPTION: Runs a script to validate the integrity of stored memories in the service.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/scripts.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/validate_memories.py\n```\n\n----------------------------------------\n\nTITLE: Sitecustomize Fix Script Execution\nDESCRIPTION: Command to run the script that fixes recursion errors through sitecustomize\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/windows-setup.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/fix_sitecustomize.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Dependencies for ChromaDB and Sentence Transformers\nDESCRIPTION: Requirements file specifying necessary Python packages for ChromaDB functionality. Includes commented version constraints for chromadb, sentence-transformers, and urllib3 to ensure compatibility and prevent SSL cipher issues.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/scripts/requirements-migration.txt#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n# chromadb==0.4.13  # Keep your working version\n# sentence-transformers==2.2.2\n# urllib3<2.0.0  # Add this to fix the SSL cipher issue\nchromadb\nsentence-transformers\nurllib3\n```\n\n----------------------------------------\n\nTITLE: Running Test Commands for MCP Memory Service\nDESCRIPTION: Commands to run all tests or a specific test in the project.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/technical/development.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/test_memory_ops.py::test_store_memory -v\n```\n\n----------------------------------------\n\nTITLE: Fixing Site Customization for MCP Memory Service in Bash\nDESCRIPTION: This command runs a script to fix recursion issues related to site customization. It enhances platform support for the MCP Memory Service.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/fix_sitecustomize.py\n```\n\n----------------------------------------\n\nTITLE: Running MCP Memory Service with Custom Configuration\nDESCRIPTION: Example of running the Docker container with custom environment variables to configure the service behavior including logging level, query results limits, and similarity threshold.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/technical/docker-deployment.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 8000:8000 --name memory-service \\\n  -v ./data/chroma_db:/app/chroma_db \\\n  -v ./data/backups:/app/backups \\\n  -e MCP_MEMORY_CHROMA_PATH=/app/chroma_db \\\n  -e MCP_MEMORY_BACKUPS_PATH=/app/backups \\\n  -e LOG_LEVEL=DEBUG \\\n  -e MAX_RESULTS_PER_QUERY=20 \\\n  -e SIMILARITY_THRESHOLD=0.8 \\\n  mcp-memory-service\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up MCP Memory Service\nDESCRIPTION: Series of commands to clone the repository, create a virtual environment, and install dependencies using UV\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/windows-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/doobidoo/mcp-memory-service.git\ncd mcp-memory-service\nuv venv\n.venv\\Scripts\\activate\nuv pip install -r requirements.txt\nuv pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Fix for Python Recursion Errors\nDESCRIPTION: Command to execute a script that fixes recursion errors in the Python environment.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/technical/development.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/fix_sitecustomize.py\n```\n\n----------------------------------------\n\nTITLE: Running Initial Validation Script in MCP Memory Service\nDESCRIPTION: Command to execute the validation script before migration to generate a report of the current state of memories and tags.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/technical/tag-storage.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/validate_memories.py\n```\n\n----------------------------------------\n\nTITLE: Verifying PyTorch on Windows Script in Python\nDESCRIPTION: Executes a script to verify PyTorch installation specifically on Windows systems.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/scripts.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/verify_pytorch_windows.py\n```\n\n----------------------------------------\n\nTITLE: Interacting with MCP Servers using vibe-tools\nDESCRIPTION: Commands for searching the MCP Marketplace for available servers and executing MCP server tools using natural language queries. Requires ANTHROPIC_API_KEY or OPENROUTER_API_KEY.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/vibe-tools.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nvibe-tools mcp search \"<query>\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nvibe-tools mcp run \"<query>\" --provider=openrouter\n```\n\n----------------------------------------\n\nTITLE: Storing a Memory in Cloudflare Memory Service\nDESCRIPTION: This command stores a new memory in the Cloudflare Memory Service. It sends a POST request with JSON data containing the memory content and associated metadata tags.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://your-worker-subdomain.workers.dev/mcp \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"method\":\"store_memory\",\"arguments\":{\"content\":\"This is a test memory\",\"metadata\":{\"tags\":[\"test\"]}}}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Memories from Cloudflare Memory Service\nDESCRIPTION: This command retrieves memories from the Cloudflare Memory Service based on a query. It sends a POST request that searches for memories matching 'test memory' and limits the results to 5 entries.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://your-worker-subdomain.workers.dev/mcp \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"method\":\"retrieve_memory\",\"arguments\":{\"query\":\"test memory\",\"n_results\":5}}'\n```\n\n----------------------------------------\n\nTITLE: MCP Migration Script in Python\nDESCRIPTION: Executes a script to handle migration of MCP-related data.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/scripts.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/mcp-migration.py\n```\n\n----------------------------------------\n\nTITLE: Listing Available Tools with Cloudflare Memory Service\nDESCRIPTION: This command lists all available tools in the deployed Cloudflare Memory Service. It sends a GET request to the worker's endpoint for listing tools.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://your-worker-subdomain.workers.dev/list_tools\n```\n\n----------------------------------------\n\nTITLE: Standard UV Configuration for Claude Desktop\nDESCRIPTION: JSON configuration for Claude Desktop using UV as the package manager, including directory paths and environment variables for the memory service.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"memory\": {\n    \"command\": \"uv\",\n    \"args\": [\n      \"--directory\",\n      \"your_mcp_memory_service_directory\",\n      \"run\",\n      \"memory\"\n    ],\n    \"env\": {\n      \"MCP_MEMORY_CHROMA_PATH\": \"your_chroma_db_path\",\n      \"MCP_MEMORY_BACKUPS_PATH\": \"your_backups_path\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Post-Migration Validation\nDESCRIPTION: Command to run the validation script after migration to confirm successful migration of tags.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/technical/tag-storage.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/validate_memories.py\n```\n\n----------------------------------------\n\nTITLE: Standard Claude Desktop Configuration\nDESCRIPTION: JSON configuration for Claude Desktop to use the MCP Memory Service with the uv command, specifying directory, command, arguments, and environment variables.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"memory\": {\n    \"command\": \"uv\",\n    \"args\": [\n      \"--directory\",\n      \"/path/to/mcp-memory-service\",\n      \"run\",\n      \"memory\"\n    ],\n    \"env\": {\n      \"MCP_MEMORY_CHROMA_PATH\": \"/path/to/chroma_db\",\n      \"MCP_MEMORY_BACKUPS_PATH\": \"/path/to/backups\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of PyTorch and Dependencies on macOS Intel\nDESCRIPTION: This code block provides a step-by-step manual installation process for PyTorch and related packages on macOS Intel, including uninstalling conflicting packages and installing specific versions known to work reliably.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n# Uninstall conflicting packages\npip uninstall -y torch torchvision torchaudio sentence-transformers\n\n# Install the specific versions known to work reliably on Intel macOS\npip install torch==1.13.1 torchvision==0.14.1 torchaudio==0.13.1\npip install sentence-transformers==2.2.2\n\n# Install the package with --no-deps\npip install --no-deps .\n\n# Install remaining dependencies\npip install chromadb==0.5.23 tokenizers==0.20.3 mcp>=1.0.0,<2.0.0 websockets>=11.0.3\n```\n\n----------------------------------------\n\nTITLE: Setting Smaller Batch Size for Memory Issues\nDESCRIPTION: Command to set a smaller batch size to address out-of-memory errors or performance issues.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nexport MCP_MEMORY_BATCH_SIZE=4\n```\n\n----------------------------------------\n\nTITLE: Rollback Process for Tag Migration\nDESCRIPTION: Command to execute the rollback process if issues are detected after migration. This reverts changes made during the migration process.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/technical/tag-storage.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/migrate_tags.py --rollback\n```\n\n----------------------------------------\n\nTITLE: Using Smaller Embedding Model\nDESCRIPTION: Command to use a smaller embedding model to reduce memory usage and improve performance.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nexport MCP_MEMORY_MODEL_NAME=paraphrase-MiniLM-L3-v2\n```\n\n----------------------------------------\n\nTITLE: General PyTorch Verification Script in Python\nDESCRIPTION: Runs a script for general verification of PyTorch installation.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/scripts.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/verify_torch.py\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Memory Service for Windows\nDESCRIPTION: JSON configuration for the MCP memory service on Windows, specifying paths to the wrapper script and data storage locations. This configuration ensures PyTorch is properly installed and the memory server runs with appropriate settings.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"memory\": {\n    \"command\": \"python\",\n    \"args\": [\n      \"C:\\\\\\\\path\\\\\\\\to\\\\\\\\mcp-memory-service\\\\\\\\memory_wrapper.py\"\n    ],\n    \"env\": {\n      \"MCP_MEMORY_CHROMA_PATH\": \"C:\\\\\\\\Users\\\\\\\\YourUsername\\\\\\\\AppData\\\\\\\\Local\\\\\\\\mcp-memory\\\\\\\\chroma_db\",\n      \"MCP_MEMORY_BACKUPS_PATH\": \"C:\\\\\\\\Users\\\\\\\\YourUsername\\\\\\\\AppData\\\\\\\\Local\\\\\\\\mcp-memory\\\\\\\\backups\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Installation for Intel-based Macs\nDESCRIPTION: Commands for manually installing compatible versions of PyTorch and dependencies on Intel-based Macs, addressing known dependency conflicts.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# First remove existing packages\npip uninstall -y torch torchvision torchaudio sentence-transformers\n\n# Install compatible versions for Intel macOS\npip install torch==1.13.1 torchvision==0.14.1 torchaudio==0.13.1\npip install sentence-transformers==2.2.2\n\n# Install remaining dependencies\npip install --no-deps .\npip install chromadb==0.5.23 tokenizers==0.20.3 mcp>=1.0.0,<2.0.0\n```\n\n----------------------------------------\n\nTITLE: Checking CUDA Availability on Linux\nDESCRIPTION: Command to check CUDA availability on Linux systems with NVIDIA GPUs.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnvidia-smi  # Check CUDA availability\n```\n\n----------------------------------------\n\nTITLE: Verifying Installation\nDESCRIPTION: Command to verify the MCP Memory Service installation using the enhanced environment verification script.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/verify_environment_enhanced.py\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Version of Problematic Dependency\nDESCRIPTION: Command to install a specific version of a problematic dependency (tokenizers) to resolve compatibility issues.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\npip install tokenizers==0.13.3\n```\n\n----------------------------------------\n\nTITLE: Setting ROCm Environment for AMD GPUs\nDESCRIPTION: Commands to set the ROCm environment variable before installation for AMD GPU support and run the installation script.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nexport MCP_MEMORY_USE_ROCM=1\npython install.py\n```\n\n----------------------------------------\n\nTITLE: Generating Implementation Plans with vibe-tools\nDESCRIPTION: Command for generating focused implementation plans that identify relevant files, extract content, and create detailed implementation steps. Uses multiple AI models and supports customization of providers and models.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/vibe-tools.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvibe-tools plan \"<query>\"\n```\n\n----------------------------------------\n\nTITLE: Installing PyTorch and Dependencies on macOS Intel\nDESCRIPTION: This snippet shows the recommended installation command using the updated script that automatically detects macOS Intel and installs the correct package versions.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\npython install.py\n```\n\n----------------------------------------\n\nTITLE: Analyzing Repository Context with vibe-tools\nDESCRIPTION: Command for getting context-aware answers about a repository. Supports analyzing specific subdirectories or remote GitHub repositories without local cloning.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/vibe-tools.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvibe-tools repo \"<your question>\" [--subdir=<path>] [--from-github=<username/repo>]\n```\n\n----------------------------------------\n\nTITLE: Retrieving ClickUp Task Information with vibe-tools\nDESCRIPTION: Command for retrieving detailed information about a ClickUp task including its description, comments, status, assignees, and metadata.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/vibe-tools.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nvibe-tools clickup task <task_id>\n```\n\n----------------------------------------\n\nTITLE: Using Direct Model Queries with vibe-tools\nDESCRIPTION: Command syntax for asking direct questions to AI models using different providers and models. This requires specifying both the provider and model, but generally provides less context than other commands.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/vibe-tools.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvibe-tools ask \"<your question>\" --provider <provider> --model <model>\n```\n\n----------------------------------------\n\nTITLE: Retrieving GitHub Information with vibe-tools\nDESCRIPTION: Commands for retrieving information about GitHub pull requests and issues, either listing the most recent ones or retrieving details about a specific item by number.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/vibe-tools.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nvibe-tools github pr [number]\n```\n\nLANGUAGE: bash\nCODE:\n```\nvibe-tools github issue [number]\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Docker Image for MCP Memory Service\nDESCRIPTION: Dockerfile and commands for building a custom image that extends the base MCP Memory Service with additional dependencies and configuration.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/technical/docker-deployment.md#2025-04-22_snippet_8\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM mcp-memory-service:latest\n\n# Install additional packages\nRUN python -m uv pip install pandas scikit-learn\n\n# Copy custom configuration\nCOPY my_config.json /app/config.json\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t custom-memory-service -f Dockerfile.custom .\ndocker run -d -p 8000:8000 custom-memory-service\n```\n\n----------------------------------------\n\nTITLE: PyTorch Installation for Windows\nDESCRIPTION: Command for installing PyTorch on Windows with the correct CUDA version using specific index URL.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/technical/development.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install torch==2.1.0 torchvision==2.1.0 torchaudio==2.1.0 --index-url https://download.pytorch.org/whl/cu118\n```\n\n----------------------------------------\n\nTITLE: Limiting Container Resources for MCP Memory Service\nDESCRIPTION: Docker command that demonstrates how to restrict memory and CPU usage for the container to optimize resource allocation.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/technical/docker-deployment.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 8000:8000 --name memory-service \\\n  --memory=2g \\\n  --cpus=2 \\\n  -v ./data/chroma_db:/app/chroma_db \\\n  -v ./data/backups:/app/backups \\\n  mcp-memory-service\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation with vibe-tools\nDESCRIPTION: Command for generating comprehensive documentation for a repository with options for output file specification.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/vibe-tools.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nvibe-tools doc [options]\n```\n\n----------------------------------------\n\nTITLE: Analyzing YouTube Videos with vibe-tools\nDESCRIPTION: Command for analyzing YouTube videos to generate various types of reports including summaries, transcripts, plans, or reviews. Requires a GEMINI_API_KEY to be set in the environment.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/vibe-tools.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nvibe-tools youtube \"<youtube-url>\" [question] [--type=<summary|transcript|plan|review|custom>]\n```\n\n----------------------------------------\n\nTITLE: Running Installation Script\nDESCRIPTION: Command to run the main installation script for MCP Memory Service.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython install.py\n```\n\n----------------------------------------\n\nTITLE: Browser Automation with Stagehand via vibe-tools\nDESCRIPTION: Commands for browser automation including opening URLs, executing actions, observing elements, and extracting data from webpages using natural language instructions.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/vibe-tools.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nvibe-tools browser open <url> [options]\n```\n\nLANGUAGE: bash\nCODE:\n```\nvibe-tools browser act \"<instruction>\" --url=<url | 'current'> [options]\n```\n\nLANGUAGE: bash\nCODE:\n```\nvibe-tools browser observe \"<instruction>\" --url=<url> [options]\n```\n\nLANGUAGE: bash\nCODE:\n```\nvibe-tools browser extract \"<instruction>\" --url=<url> [options]\n```\n\n----------------------------------------\n\nTITLE: Memory Optimization Environment Variables\nDESCRIPTION: Commands to set environment variables for optimizing memory usage\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/windows-setup.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nset MCP_MEMORY_BATCH_SIZE=4\nset MCP_MEMORY_MODEL_NAME=paraphrase-MiniLM-L3-v2\n```\n\n----------------------------------------\n\nTITLE: Executing Xcode Build Command with Options\nDESCRIPTION: Command syntax for building an Xcode project with optional parameters for build path and destination simulator.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/vibe-tools.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nvibe-tools xcode build [buildPath=<path>] [destination=<destination>]\n```\n\n----------------------------------------\n\nTITLE: Executing Xcode Run Command with Options\nDESCRIPTION: Command syntax for building and running an Xcode project on a simulator with optional destination parameter.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/vibe-tools.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nvibe-tools xcode run [destination=<destination>]\n```\n\n----------------------------------------\n\nTITLE: Executing Xcode Lint Command\nDESCRIPTION: Command syntax for running static analysis on an Xcode project to identify and fix code issues.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/vibe-tools.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nvibe-tools xcode lint\n```\n\n----------------------------------------\n\nTITLE: Cloning MCP Memory Service Repository\nDESCRIPTION: Commands to clone the MCP Memory Service repository from GitHub and navigate to the project directory.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/doobidoo/mcp-memory-service.git\ncd mcp-memory-service\n```\n\n----------------------------------------\n\nTITLE: Commenting Platform-Specific Dependency Recommendations\nDESCRIPTION: This snippet provides commented-out dependency recommendations for various platforms including macOS (Intel and Apple Silicon), Windows (NVIDIA GPU and DirectML), Linux with CUDA, and a CPU-only fallback. These are handled by install.py and should not be manually uncommented.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/requirements.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# Platform-specific recommendations (DO NOT UNCOMMENT - handled by install.py)\n\n# For macOS with Intel CPUs:\n# torch==2.0.1\n# torchvision==2.0.1\n# torchaudio==2.0.1\n# sentence-transformers==2.2.2\n\n# For macOS with Apple Silicon:\n# torch>=2.0.0\n# torchvision>=0.15.0\n# torchaudio>=2.0.0\n# sentence-transformers>=2.2.2\n\n# For Windows with NVIDIA GPU:\n# pip install torch==2.1.0 torchvision==2.1.0 torchaudio==2.1.0 --index-url=https://download.pytorch.org/whl/cu118\n# sentence-transformers>=2.2.2\n\n# For Windows with DirectML:\n# torch==2.1.0\n# torchvision==2.1.0\n# torchaudio==2.1.0\n# torch-directml>=0.2.0\n# sentence-transformers>=2.2.2\n\n# For Linux with CUDA:\n# torch>=2.0.0\n# torchvision>=0.15.0\n# torchaudio>=2.0.0\n# sentence-transformers>=2.2.2\n\n# For CPU-only fallback (all platforms):\n# torch==1.13.1\n# torchvision==0.14.1\n# torchaudio==0.13.1\n# sentence-transformers==2.2.2\n# onnxruntime>=1.15.0\n```\n\n----------------------------------------\n\nTITLE: Checking ROCm Availability for AMD GPUs on Linux\nDESCRIPTION: Command to check ROCm availability on Linux systems with AMD GPUs.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nrocminfo  # Check ROCm availability\n```\n\n----------------------------------------\n\nTITLE: Forcing CPU-Only Mode\nDESCRIPTION: Command to force CPU-only mode when experiencing GPU-related issues on any platform.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nexport MCP_MEMORY_FORCE_CPU=1\n```\n\n----------------------------------------\n\nTITLE: Enabling MPS Acceleration on Apple Silicon\nDESCRIPTION: Command to enable MPS fallback for improved performance on Apple Silicon Macs.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nexport PYTORCH_ENABLE_MPS_FALLBACK=1\n```\n\n----------------------------------------\n\nTITLE: Setting MPS Fallback for Apple Silicon\nDESCRIPTION: Command to set the MPS fallback environment variable to address GPU acceleration issues on Apple Silicon Macs.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nexport PYTORCH_ENABLE_MPS_FALLBACK=1\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with No-Deps Flag\nDESCRIPTION: Command to install dependencies without their dependencies to avoid version conflicts.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/guides/installation.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt --no-deps\n```\n\n----------------------------------------\n\nTITLE: Performing Web Searches with vibe-tools\nDESCRIPTION: Command for getting answers from the web using providers that support web search functionality. Best used with complete sentences including context and goals rather than just keywords.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/vibe-tools.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvibe-tools web \"<your question>\"\n```\n\n----------------------------------------\n\nTITLE: Environment and Installation Commands\nDESCRIPTION: Commands for verifying environment setup, Windows installation, and building the package.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/technical/development.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/verify_environment_enhanced.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/install_windows.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npython -m build\n```\n\n----------------------------------------\n\nTITLE: Verifying Environment for MCP Memory Service in Bash\nDESCRIPTION: This command runs a script to verify the environment compatibility for the MCP Memory Service. It checks for necessary dependencies and configurations.\nSOURCE: https://github.com/doobidoo/mcp-memory-service/blob/main/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython scripts/verify_environment.py\n```"
  }
]