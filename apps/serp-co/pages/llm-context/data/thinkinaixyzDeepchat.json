[
  {
    "owner": "thinkinaixyz",
    "repo": "deepchat",
    "content": "TITLE: DeepChat Start Chat Example - Complete Example\nDESCRIPTION: This example shows the complete usage of the start chat deeplink, specifying the model, message, and system prompt. The `msg` parameter contains the initial query, the `model` parameter is set to 'deepseek-coder', and the `system` parameter sets the system prompt for code analysis.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/deeplinks.md#_snippet_3\n\nLANGUAGE: URL\nCODE:\n```\ndeepchat://start?msg=帮我分析这段代码&model=deepseek-coder&system=你是一个代码分析专家\n```\n\n----------------------------------------\n\nTITLE: Stream Completions Method Definition in BaseLLMProvider (TypeScript)\nDESCRIPTION: Defines the abstract `streamCompletions` method in the `BaseLLMProvider` class. This method enables streaming responses from an LLM. It takes chat messages, a model ID, temperature, and maximum tokens as input and returns an `AsyncGenerator` that yields `LLMResponseStream` objects.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/llm-provider-interface.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nabstract streamCompletions(\n  messages: ChatMessage[],\n  modelId: string,\n  temperature?: number,\n  maxTokens?: number\n): AsyncGenerator<LLMResponseStream>\n```\n\n----------------------------------------\n\nTITLE: Completions Method Definition in BaseLLMProvider (TypeScript)\nDESCRIPTION: Defines the abstract `completions` method in the `BaseLLMProvider` class. This method provides a synchronous way to get a full response from an LLM. It accepts chat messages, a model ID, temperature, and maximum tokens as input and returns a promise that resolves to an `LLMResponse` object.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/llm-provider-interface.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nabstract completions(\n  messages: ChatMessage[],\n  modelId: string,\n  temperature?: number,\n  maxTokens?: number\n): Promise<LLMResponse>\n```\n\n----------------------------------------\n\nTITLE: Generating MCP Config Code (Base64 Encoding) in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to generate the `code` parameter for the MCP install deeplink by encoding a JSON configuration object using base64. The `js-base64` library is used for encoding.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/deeplinks.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { encode } from 'js-base64';\n\nconst config = {\n  \"mcpServers\": {\n    \"browser-use-mcp-server\": {\n      \"url\": \"http://localhost:8000/sse\"\n    }\n  }\n}\nconst code =encode(JSON.stringify(config))\n```\n\n----------------------------------------\n\nTITLE: MCP Client Class - TypeScript\nDESCRIPTION: The McpClient class encapsulates the communication with a single MCP server. It handles connecting, disconnecting, calling tools, and listing available tools.  It supports different transport mechanisms.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/mcp-presenter-architecture.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclassDiagram\n    class McpClient {\n        +serverName: string\n        +serverConfig: Record<string, unknown>\n        -client: Client | null\n        -transport: Transport | null\n        -isConnected: boolean\n        -npmRegistry: string | null\n        +connect()\n        +disconnect()\n        +callTool()\n        +listTools()\n        +readResource()\n        +isServerRunning()\n    }\n```\n\n----------------------------------------\n\nTITLE: Model Storage (JSON)\nDESCRIPTION: This JSON snippet defines the structure for storing model-specific configurations in a separate file (models_openai.json). It includes information about available models, such as their ID, name, maximum token limit, vision capabilities, and function call support. It also allows for the storage of custom model configurations.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/config-presenter-architecture.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"models\": [\n    {\n      \"id\": \"gpt-4\",\n      \"name\": \"GPT-4\",\n      \"maxTokens\": 8192,\n      \"vision\": false,\n      \"functionCall\": true\n    }\n  ],\n  \"custom_models\": [\n    {\n      \"id\": \"gpt-4-custom\",\n      \"name\": \"GPT-4 Custom\",\n      \"maxTokens\": 8192\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Add Custom Model in Typescript\nDESCRIPTION: This code snippet demonstrates how to add a custom model to a specific LLM provider using the `addCustomModel()` method. It takes the provider ID ('openai' in this case) and a MODEL_META object as parameters, allowing for the addition of custom models with configurable properties.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/config-presenter-design.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconfigPresenter.addCustomModel('openai', {\n  id: 'gpt-4-custom',\n  name: 'GPT-4 Custom',\n  maxTokens: 8192\n  // ...其他属性\n})\n```\n\n----------------------------------------\n\nTITLE: DeepChat Complete MCP Configuration JSON Example - stdio\nDESCRIPTION: This is a complete JSON configuration example for the MCP service, showing a stdio configuration with `command`, `args`, `env`, `descriptions`, `icons`, `type`, and `autoApprove` attributes.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/deeplinks.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"mcp-filesystem-server\",\n      \"args\": [\n        \"/Users/username/Desktop\",\n      ],\n      \"env\": {},\n      \"descriptions\": \"filesystem mcp server\",\n      \"icons\": \"📁\",\n      \"type\" :\"stdio\",\n      \"autoApprove\": [\"all\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable MCP Functionality in Typescript\nDESCRIPTION: This code snippet shows how to enable the MCP (Model Control Protocol) functionality using the `setMcpEnabled()` method. The method takes a boolean value (true in this case) to enable the feature. Asynchronous operation uses `await` keyword.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/config-presenter-design.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait configPresenter.setMcpEnabled(true)\n```\n\n----------------------------------------\n\nTITLE: Configuration Presenter Interface (IConfigPresenter) - TypeScript\nDESCRIPTION: This interface defines the contract for the configuration presenter, which is responsible for managing and persisting the MCP server configurations. It provides methods for getting, setting, adding, removing, and toggling MCP server settings.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/mcp-presenter-architecture.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclassDiagram\n    class IConfigPresenter {\n        <<Interface>>\n        +getMcpServers()\n        +setMcpServers()\n        +getMcpDefaultServers()\n        +addMcpDefaultServer()\n        +removeMcpDefaultServer()\n        +toggleMcpDefaultServer()\n        +setMcpEnabled()\n        +getMcpEnabled()\n        +addMcpServer()\n        +removeMcpServer()\n        +updateMcpServer()\n        +resetToDefaultServers()\n        +getLanguage()\n        // ... other config methods\n    }\n```\n\n----------------------------------------\n\nTITLE: MCPServerConfig Interface Definition (TypeScript)\nDESCRIPTION: Defines the structure of the MCPServerConfig interface used for configuring MCP servers. It includes properties for command, arguments, environment variables, server type, base URL, auto-approved permissions, icons, descriptions, disable flag, and custom headers.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/mcp-presenter-design.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MCPServerConfig {\n  command?: string // 可执行命令 (stdio 类型)\n  args?: string[] // 命令行参数\n  env?: Record<string, string> // 环境变量\n  type?: 'stdio' | 'sse' | 'http' | 'inmemory' // 服务器类型\n  baseUrl?: string // 用于 SSE/HTTP 类型的服务器 URL\n  autoApprove?: string[] // 自动批准的权限列表 ('all', 'read', 'write', 或具体工具名)\n  icons?: string // 服务器图标 (emoji 或 URL)\n  descriptions?: string // 服务器描述\n  disable?: boolean // 是否禁用该服务器 (UI 层面)\n  customHeaders?: Record<string, string> // 用于 SSE/HTTP 的自定义请求头 (包含 Authorization)\n}\n```\n\n----------------------------------------\n\nTITLE: MCP Configuration Helper Class - TypeScript\nDESCRIPTION: The McpConfHelper class manages the configuration settings for the MCP servers using electron-store. It provides methods for getting, setting, adding, removing, and toggling MCP server configurations.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/mcp-presenter-architecture.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclassDiagram\n    class McpConfHelper {\n        -mcpStore: ElectronStore<IMcpSettings>\n        +getMcpServers()\n        +setMcpServers()\n        +getMcpDefaultServers()\n        +addMcpDefaultServer()\n        +removeMcpDefaultServer()\n        +toggleMcpDefaultServer()\n        +setMcpEnabled()\n        +getMcpEnabled()\n        +addMcpServer()\n        +removeMcpServer()\n        +updateMcpServer()\n        +resetToDefaultServers()\n        +onUpgrade()\n    }\n```\n\n----------------------------------------\n\nTITLE: LLM Tool Calling Sequence Diagram (OpenAI Example)\nDESCRIPTION: This sequence diagram describes the process of calling an LLM tool, specifically using the OpenAI format. It covers fetching and converting tool definitions, generating tool call requests, converting and executing the tool call, and handling the results.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/mcp-presenter-architecture.md#_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant LLM Provider\n    participant McpPresenter\n    participant ToolManager\n    participant McpClient\n    participant MCP Server\n\n    Note over LLM Provider, McpPresenter: 1. 获取和转换工具定义 (按需)\n    LLM Provider->>McpPresenter: getAllToolDefinitions()\n    McpPresenter->>ToolManager: getAllToolDefinitions()\n    ToolManager->>ServerManager: getRunningClients()\n    ServerManager-->>ToolManager: List<McpClient>\n    loop For each client\n        ToolManager->>McpClient: listTools()\n        McpClient-->>ToolManager: Raw Tool List\n    end\n    ToolManager->>ToolManager: 处理冲突, 缓存定义和映射\n    ToolManager-->>McpPresenter: Processed MCPToolDefinition[]\n    McpPresenter->>McpPresenter: mcpToolsToOpenAITools(definitions)\n    McpPresenter-->>LLM Provider: OpenAI Tool Format\n\n    Note over LLM Provider, McpPresenter: 2. LLM 生成工具调用请求\n    LLM Provider->>LLM Provider: LLM decides to call tool(s)\n    LLM Provider->>LLM Provider: Generates tool_calls (OpenAI Format)\n\n    Note over LLM Provider, McpPresenter: 3. 转换并执行工具调用\n    loop For each tool_call from LLM\n        LLM Provider->>McpPresenter: openAIToolsToMcpTool(tool_call)\n        McpPresenter-->>LLM Provider: Standard MCPToolCall\n        LLM Provider->>McpPresenter: callTool(mcpToolCall)\n        McpPresenter->>ToolManager: callTool(mcpToolCall)\n        ToolManager->>ToolManager: Lookup target client & original name\n        ToolManager->>ToolManager: checkToolPermission()\n        alt Permission Denied\n            ToolManager-->>McpPresenter: Error Response\n        else Permission Granted\n            ToolManager->>McpClient: callTool(originalToolName, args)\n            McpClient->>MCP Server: Execute Tool\n            MCP Server-->>McpClient: Raw Result\n            McpClient-->>ToolManager: ToolCallResult\n            ToolManager-->>McpPresenter: MCPToolResponse (triggers event)\n        end\n        McpPresenter-->>LLM Provider: Formatted Response (Success or Error)\n    end\n\n    Note over LLM Provider: 4. 处理结果并继续\n    LLM Provider->>LLM Provider: Add tool response(s) to context\n    LLM Provider->>LLM Provider: Generate next response or further calls\n\n```\n\n----------------------------------------\n\nTITLE: Main Configuration Storage (JSON)\nDESCRIPTION: This JSON snippet shows the structure of the main configuration file (app-settings.json). It stores settings such as language, provider configurations (including API keys and enablement status), model statuses, proxy mode, and sync enablement. Sensitive information like API keys should be handled securely.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/config-presenter-architecture.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"language\": \"en-US\",\n  \"providers\": [\n    {\n      \"id\": \"openai\",\n      \"name\": \"OpenAI\",\n      \"apiKey\": \"sk-...\",\n      \"enable\": true\n    }\n  ],\n  \"model_status_openai_gpt-4\": true,\n  \"proxyMode\": \"system\",\n  \"syncEnabled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: DeepChat Complete MCP Configuration JSON Example - sse\nDESCRIPTION: This is a complete JSON configuration example for the MCP service, showing an sse configuration with `url`, `type`, `icons`, and `autoApprove` attributes.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/deeplinks.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"browser-use-mcp-server\": {\n      \"url\": \"http://localhost:8000/sse\",\n      \"type\":\"sse\",\n      \"icons\": \"🏠\",\n      \"autoApprove\": [\"all\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DeepChat Minimal MCP Configuration JSON Example - sse\nDESCRIPTION: This is a minimal JSON configuration example for the MCP service. It includes the `url` attribute but does not contain the `command` attribute, defaulting to an sse configuration.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/deeplinks.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"browser-use-mcp-server\": {\n      \"url\": \"http://localhost:8000/sse\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Version information JSON format\nDESCRIPTION: This JSON structure represents the format of the version information file.  It includes fields for the version number, release date, release notes, GitHub URL, and download URL.  Release notes support Markdown formatting.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/build/VERSION-README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.0.5\",\n  \"releaseDate\": \"2023-06-01\",\n  \"releaseNotes\": \"版本更新说明\",\n  \"githubUrl\": \"https://github.com/ThinkInAIXYZ/deepchat/releases/tag/v0.0.5\",\n  \"downloadUrl\": \"https://deepchat.thinkinai.xyz/#/download\"\n}\n```\n\n----------------------------------------\n\nTITLE: DeepChat Minimal MCP Configuration JSON Example - stdio\nDESCRIPTION: This is a minimal JSON configuration example for the MCP service that includes the `command` attribute but does not contain the `url` attribute, which identifies it as an stdio configuration.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/deeplinks.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"mcp-filesystem-server\",\n      \"args\": [\n        \"/Users/username/Desktop\",\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DeepChat Install MCP Deeplink Example (SSE)\nDESCRIPTION: This example showcases a deep link for installing an MCP configuration for SSE, with the base64 encoded JSON configuration passed within the `code` parameter.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/deeplinks.md#_snippet_12\n\nLANGUAGE: URL\nCODE:\n```\ndeepchat://mcp/install?code=eyJtY3BTZXJ2ZXJzIjp7ImJyb3dzZXItdXNlLW1jcC1zZXJ2ZXIiOnsidXJsIjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NzZSJ9fX0=\n```\n\n----------------------------------------\n\nTITLE: Get Language Setting in Typescript\nDESCRIPTION: This code snippet demonstrates how to retrieve the current language setting using the `getLanguage()` method of the ConfigPresenter. It assumes that `configPresenter` is an instance of ConfigPresenter and retrieves language settings.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/config-presenter-design.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst language = configPresenter.getLanguage()\n```\n\n----------------------------------------\n\nTITLE: DeepChat Install MCP Deeplink Example (Stdio)\nDESCRIPTION: This example shows a deep link for installing an MCP configuration for stdio, with the base64 encoded JSON configuration embedded in the `code` parameter.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/deeplinks.md#_snippet_11\n\nLANGUAGE: URL\nCODE:\n```\ndeepchat://mcp/install?code=eyJtY3BTZXJ2ZXJzIjp7ImZpbGVzeXN0ZW0iOnsiY29tbWFuZCI6Im1jcC1maWxlc3lzdGVtLXNlcnZlciIsImFyZ3MiOlsiL1VzZXJzL3VzZXJuYW1lL0Rlc2t0b3AiXX19fQ==\n```\n\n----------------------------------------\n\nTITLE: DeepChat Start Chat Deeplink Example (Encoded Chinese)\nDESCRIPTION: This example demonstrates a chat deeplink with URI encoded Chinese characters for both the message and system prompt. The message is \"%E5%A4%A9%E6%B0%94%E4%B8%8D%E9%94%99\" and the system prompt is \"%E4%BD%A0%E6%98%AF%E4%B8%80%E4%B8%AA%E9%A2%84%E6%8A%A5%E5%91%98%2C%E8%AF%B7%E4%BD%A0%E7%A4%BC%E8%B2%8C%E8%80%8C%E4%B8%93%E4%B8%9A%E5%9B%9E%E7%AD%94%E7%94%A8%E6%88%B7%E9%97%AE%E9%A2%98\". The model is set to 'deepseek-chat'.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/deeplinks.md#_snippet_10\n\nLANGUAGE: URL\nCODE:\n```\ndeepchat://start?msg=%E5%A4%A9%E6%B0%94%E4%B8%8D%E9%94%99&system=%E4%BD%A0%E6%98%AF%E4%B8%80%E4%B8%AA%E9%A2%84%E6%8A%A5%E5%91%98%2C%E8%AF%B7%E4%BD%A0%E7%A4%BC%E8%B2%8C%E8%80%8C%E4%B8%93%E4%B8%9A%E5%9B%9E%E7%AD%94%E7%94%A8%E6%88%B7%E9%97%AE%E9%A2%98&model=deepseek-chat\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies using npm and pip\nDESCRIPTION: These commands install the necessary dependencies for the DeepChat project using npm and pip. It addresses potential distutils errors and provides specific installation commands for the 'sharp' package based on the operating system and architecture.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n$ npm run installRuntime\n# if got err: No module named 'distutils'\n$ pip install setuptools\n# for windows x64\n$ npm install --cpu=x64 --os=win32 sharp\n# for mac apple silicon\n$ npm install --cpu=arm64 --os=darwin sharp\n# for mac intel\n$ npm install --cpu=x64 --os=darwin sharp\n# for linux x64\n$ npm install --cpu=x64 --os=linux sharp\n```\n\n----------------------------------------\n\nTITLE: DeepChat Start Chat Example - Initial Message\nDESCRIPTION: This example demonstrates how to specify an initial message in the start chat deeplink. The `msg` parameter is set to a Chinese sentence requesting the generation of an article about artificial intelligence.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/deeplinks.md#_snippet_2\n\nLANGUAGE: URL\nCODE:\n```\ndeepchat://start?msg=帮我写一篇关于人工智能的文章\n```\n\n----------------------------------------\n\nTITLE: MCP Initialization Sequence Diagram\nDESCRIPTION: This sequence diagram illustrates the initialization process of the MCP Presenter, including the creation of ServerManager and ToolManager instances, fetching configurations, testing npm registry speed, and starting default MCP servers.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/mcp-presenter-architecture.md#_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant AppStartup\n    participant McpPresenter\n    participant ServerManager\n    participant IConfigPresenter\n    participant McpClient\n\n    AppStartup->>McpPresenter: constructor(configPresenter)\n    McpPresenter->>ServerManager: constructor(configPresenter)\n    McpPresenter->>ToolManager: constructor(configPresenter, serverManager)\n    AppStartup->>McpPresenter: initialize()\n    McpPresenter->>IConfigPresenter: getMcpServers()\n    McpPresenter->>IConfigPresenter: getMcpDefaultServers()\n    McpPresenter->>ServerManager: testNpmRegistrySpeed()\n    ServerManager-->>McpPresenter: (registry selected)\n    loop For each defaultServerName\n        McpPresenter->>ServerManager: startServer(defaultServerName)\n        ServerManager->>IConfigPresenter: getMcpServers() (to get config)\n        ServerManager->>McpClient: new McpClient(name, config, npmRegistry)\n        ServerManager->>McpClient: connect()\n        McpClient->>McpClient: Establish Transport (stdio/sse/http/inmemory)\n        McpClient->>MCP Server: Connect Request\n        MCP Server-->>McpClient: Connected\n        McpClient-->>ServerManager: Connected (triggers status event)\n        ServerManager-->>McpPresenter: Success / Error\n    end\n```\n\n----------------------------------------\n\nTITLE: DeepChat Start Chat Example - Basic Usage\nDESCRIPTION: This example demonstrates the basic usage of the start chat deeplink, opening a conversation with GPT-3.5. The model parameter is set to 'gpt-3.5-turbo'.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/deeplinks.md#_snippet_1\n\nLANGUAGE: URL\nCODE:\n```\ndeepchat://start?model=gpt-3.5-turbo\n```\n\n----------------------------------------\n\nTITLE: Server Manager Class - TypeScript\nDESCRIPTION: The ServerManager class is responsible for managing the lifecycle of MCP servers, including starting, stopping, and configuring them. It also handles npm registry speed testing and provides methods for retrieving server information.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/mcp-presenter-architecture.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclassDiagram\n    class ServerManager {\n        -clients: Map<string, McpClient>\n        -configPresenter: IConfigPresenter\n        -npmRegistry: string | null\n        +testNpmRegistrySpeed()\n        +getNpmRegistry()\n        +startServer()\n        +stopServer()\n        +getRunningClients()\n        +getDefaultServerNames()\n        +getDefaultClients()\n        +getClient()\n        +isServerRunning()\n    }\n```\n\n----------------------------------------\n\nTITLE: Tool Manager Class - TypeScript\nDESCRIPTION: The ToolManager class is responsible for managing MCP tools, including retrieving tool definitions, handling name collisions, caching, and checking permissions. It interacts with the ServerManager to get a list of running MCP clients.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/mcp-presenter-architecture.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclassDiagram\n    class ToolManager {\n        -configPresenter: IConfigPresenter\n        -serverManager: ServerManager\n        -cachedToolDefinitions: MCPToolDefinition[] | null\n        -toolNameToTargetMap: Map<string, object> | null\n        +getAllToolDefinitions()\n        +callTool()\n        +checkToolPermission()\n        +handleServerListUpdate()\n        +getRunningClients()\n    }\n```\n\n----------------------------------------\n\nTITLE: MCP Presenter Class (McpPresenter) - TypeScript\nDESCRIPTION: This class implements the IMCPPresenter interface and acts as a coordinator, handling LLM adaptation and delegating tasks to the ServerManager and ToolManager. It manages the lifecycle of MCP servers and tools within the DeepChat application.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/mcp-presenter-architecture.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclassDiagram\n    class McpPresenter {\n        -serverManager: ServerManager\n        -toolManager: ToolManager\n        -configPresenter: IConfigPresenter\n        +initialize()\n        +getMcpServers()\n        +getMcpClients()\n        +startServer()\n        +stopServer()\n        +callTool()\n        +getAllToolDefinitions()\n        +mcpToolsToOpenAITools()\n        +openAIToolsToMcpTool()\n        +mcpToolsToAnthropicTools()\n        +anthropicToolUseToMcpTool()\n        +mcpToolsToGeminiTools()\n        +geminiFunctionCallToMcpTool()\n        +addMcpServer()\n        +removeMcpServer()\n        +updateMcpServer()\n        +getMcpDefaultServers()\n        +addMcpDefaultServer()\n        +removeMcpDefaultServer()\n        +toggleMcpDefaultServer()\n        +getMcpEnabled()\n        +setMcpEnabled()\n        +resetToDefaultServers()\n    }\n```\n\n----------------------------------------\n\nTITLE: MCP Presenter Interface (IMCPPresenter) - TypeScript\nDESCRIPTION: This interface defines the public API for the MCP Presenter, outlining the methods for managing MCP servers and clients, calling tools, converting tool formats, and handling MCP settings. It serves as a contract for the McpPresenter implementation.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/mcp-presenter-architecture.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclassDiagram\n    class IMCPPresenter {\n        <<Interface>>\n        +getMcpServers()\n        +getMcpClients()\n        +startServer()\n        +stopServer()\n        +callTool()\n        +getAllToolDefinitions()\n        +mcpToolsToOpenAITools()\n        +openAIToolsToMcpTool()\n        +mcpToolsToAnthropicTools()\n        +anthropicToolUseToMcpTool()\n        +mcpToolsToGeminiTools()\n        +geminiFunctionCallToMcpTool()\n        +addMcpServer()\n        +removeMcpServer()\n        +updateMcpServer()\n        +getMcpDefaultServers()\n        +addMcpDefaultServer()\n        +removeMcpDefaultServer()\n        +toggleMcpDefaultServer()\n        +getMcpEnabled()\n        +setMcpEnabled()\n        +resetToDefaultServers()\n    }\n```\n\n----------------------------------------\n\nTITLE: Generating version files\nDESCRIPTION: This command uses the `generate-version-files.mjs` script to generate version files for various platforms. It takes version, notes, and date as arguments.  Version is mandatory and follows the X.Y.Z format.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/build/VERSION-README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode generate-version-files.mjs  --version=0.0.6 --notes=\"版本更新说明\"  --date=\"2023-06-15\"\n```\n\n----------------------------------------\n\nTITLE: Component Interaction (Mermaid)\nDESCRIPTION: This flowchart illustrates the interactions between different components of the ConfigPresenter.  It depicts how the Renderer interacts with the ConfigPresenter, which in turn interacts with the main configuration store, model store, McpConfHelper, and event bus. The event bus notifies other Presenters and the Renderer of configuration changes.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/config-presenter-architecture.md#_snippet_5\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A[Renderer] -->|调用| B[ConfigPresenter]\n    B -->|读取/写入| C[主配置存储]\n    B -->|管理| D[模型存储]\n    B -->|委托| E[McpConfHelper]\n    B -->|触发| F[事件总线]\n    F -->|通知| G[其他Presenter]\n    F -->|通知| A\n```\n\n----------------------------------------\n\nTITLE: Class Diagram - ConfigPresenter Architecture (Mermaid)\nDESCRIPTION: This diagram illustrates the class relationships within the ConfigPresenter architecture. It shows the IConfigPresenter interface, the ConfigPresenter class, ElectronStore, McpConfHelper, and eventBus, along with their respective methods and attributes. The diagram visualizes the dependencies between these components and how they interact with each other.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/config-presenter-architecture.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\nclassDiagram\n    class IConfigPresenter {\n        <<interface>>\n        +getSetting()\n        +setSetting()\n        +getProviders()\n        +setProviders()\n        +getModelStatus()\n        +setModelStatus()\n        +getMcpServers()\n        +setMcpServers()\n    }\n\n    class ConfigPresenter {\n        -store: ElectronStore~IAppSettings~\n        -providersModelStores: Map~string, ElectronStore~IModelStore~~\n        -mcpConfHelper: McpConfHelper\n        +constructor()\n        +migrateModelData()\n    }\n\n    class ElectronStore~T~ {\n        +get()\n        +set()\n        +delete()\n    }\n\n    class McpConfHelper {\n        +getMcpServers()\n        +setMcpServers()\n        +onUpgrade()\n    }\n\n    class eventBus {\n        +emit()\n        +on()\n    }\n\n    IConfigPresenter <|.. ConfigPresenter\n    ConfigPresenter *-- ElectronStore~IAppSettings~\n    ConfigPresenter *-- \"1\" McpConfHelper\n    ConfigPresenter *-- \"*\" ElectronStore~IModelStore~\n    ConfigPresenter ..> eventBus\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram - MCP Enablement (Mermaid)\nDESCRIPTION: This diagram illustrates the sequence of actions involved when enabling MCP functionality. The Renderer calls the ConfigPresenter, which then delegates the task to the McpConfHelper. The ConfigPresenter then emits an event to notify other components of the change.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/config-presenter-architecture.md#_snippet_2\n\nLANGUAGE: Mermaid\nCODE:\n```\nsequenceDiagram\n    participant Renderer\n    participant ConfigPresenter\n    participant ElectronStore\n    participant McpConfHelper\n\n    Renderer->>ConfigPresenter: setMcpEnabled(true)\n    ConfigPresenter->>McpConfHelper: setMcpEnabled(true)\n    McpConfHelper-->>ConfigPresenter: Promise~void~\n    ConfigPresenter->>eventBus: emit('mcp-enabled-changed', true)\n    ConfigPresenter-->>Renderer: Promise~void~\n```\n\n----------------------------------------\n\nTITLE: Cloning the DeepChat Repository\nDESCRIPTION: This snippet demonstrates how to clone the DeepChat repository from GitHub using `git clone`.  It assumes Git is installed and configured. The command copies the repository to the local machine.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/CONTRIBUTING.zh.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/yourusername/deepchat.git\ncd deepchat\n```\n\n----------------------------------------\n\nTITLE: DeepChat Start Chat Deeplink URL Format\nDESCRIPTION: This deeplink is used to quickly start a new chat session. It supports specifying the model and an initial message. The `msg` parameter sets the initial chat message, `system` sets the system prompt, and `model` specifies the model ID or name.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/deeplinks.md#_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\ndeepchat://start?msg={query}&system={systemPrompt}&model={modelId|modelName}\n```\n\n----------------------------------------\n\nTITLE: Build for specific architectures using npm\nDESCRIPTION: These commands build the DeepChat application for specific architectures (x64 and arm64) on Windows, macOS, and Linux using npm. It allows developers to create optimized builds for different hardware platforms.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Specify architecture packaging\n$ npm run build:win:x64\n$ npm run build:win:arm64\n$ npm run build:mac:x64\n$ npm run build:mac:arm64\n$ npm run build:linux:x64\n$ npm run build:linux:arm64\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: This snippet installs project dependencies using `yarn install`. Yarn is a package manager for Node.js projects.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/CONTRIBUTING.zh.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Building the application with npm\nDESCRIPTION: These commands are used to build the DeepChat application for different operating systems (Windows, macOS, Linux) using npm scripts. Specific architectures can also be targeted by specifying the CPU architecture.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/README.zh.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Windows\n$ npm run build:win\n\n# macOS\n$ npm run build:mac\n\n# Linux\n$ npm run build:linux\n\n# 指定架构打包\n$ npm run build:win:x64\n$ npm run build:win:arm64\n$ npm run build:mac:x64\n$ npm run build:mac:arm64\n$ npm run build:linux:x64\n$ npm run build:linux:arm64\n```\n\n----------------------------------------\n\nTITLE: Starting Development\nDESCRIPTION: This command starts the development server for the DeepChat project using npm. It initializes the development environment for debugging and testing purposes.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/README.jp.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Build for Linux using npm\nDESCRIPTION: This command builds the DeepChat application for Linux using npm. It compiles the application into a package or executable file that can be distributed and run on Linux systems.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# For Linux\n$ npm run build:linux\n```\n\n----------------------------------------\n\nTITLE: Starting Development with npm\nDESCRIPTION: This command starts the development environment for the DeepChat application. It likely uses a script defined in the package.json to run a development server with hot-reloading and other development-related features.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/README.zh.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Build for macOS using npm\nDESCRIPTION: This command builds the DeepChat application for macOS using npm. It compiles the application into a package or application bundle that can be distributed and run on macOS systems.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# For macOS\n$ npm run build:mac\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew Package Manager (Bash)\nDESCRIPTION: This command installs the Homebrew package manager on macOS. Homebrew simplifies the installation of software on macOS.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Build for Windows using npm\nDESCRIPTION: This command builds the DeepChat application for Windows using npm.  It compiles the application into an executable file that can be distributed and run on Windows systems.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# For Windows\n$ npm run build:win\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies (Ubuntu/Debian)\nDESCRIPTION: This snippet demonstrates how to install essential build dependencies on Ubuntu/Debian systems using `apt-get`. It includes `build-essential` for compilation tools and `git` for version control.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/CONTRIBUTING.zh.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Ubuntu/Debian\nsudo apt-get install build-essential git\n```\n\n----------------------------------------\n\nTITLE: Building the Project\nDESCRIPTION: These commands build the DeepChat project for various operating systems using npm. Each command targets a specific platform (Windows, macOS, Linux) and generates the corresponding distribution files.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/README.jp.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Windowsの場合\n$ npm run build:win\n\n# macOSの場合\n$ npm run build:mac\n\n# Linuxの場合\n$ npm run build:linux\n\n# アーキテクチャを指定してパッケージング\n$ npm run build:win:x64\n$ npm run build:win:arm64\n$ npm run build:mac:x64\n$ npm run build:mac:arm64\n$ npm run build:linux:x64\n$ npm run build:linux:arm64\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: These npm commands are used to install project dependencies, including runtime dependencies and platform-specific sharp package. The commands handle potential errors related to missing distutils and specify CPU architecture and OS for the sharp package.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/README.zh.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n$ npm run installRuntime\n# 如果出现错误：No module named 'distutils'\n$ pip install setuptools\n# 对于Windows x64\n$ npm install --cpu=x64 --os=win32 sharp\n# 对于Mac Apple Silicon\n$ npm install --cpu=arm64 --os=darwin sharp\n# 对于Mac Intel\n$ npm install --cpu=x64 --os=darwin sharp\n# 对于Linux x64\n$ npm install --cpu=x64 --os=linux sharp\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: These commands install the necessary dependencies for the DeepChat project using npm and pip. It handles potential errors related to the 'distutils' module and provides architecture-specific installations for the 'sharp' package.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/README.jp.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n$ npm run installRuntime\n# エラーが出た場合: No module named 'distutils'\n$ pip install setuptools\n# Windows x64の場合\n$ npm install --cpu=x64 --os=win32 sharp\n# Mac Apple Siliconの場合\n$ npm install --cpu=arm64 --os=darwin sharp\n# Mac Intelの場合\n$ npm install --cpu=x64 --os=darwin sharp\n# Linux x64の場合\n$ npm install --cpu=x64 --os=linux sharp\n```\n\n----------------------------------------\n\nTITLE: Start Development using npm\nDESCRIPTION: This command starts the development server for the DeepChat project using npm. It typically runs the application in a development environment with hot reloading and debugging capabilities.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram - Setting Retrieval (Mermaid)\nDESCRIPTION: This diagram demonstrates the sequence of actions involved in retrieving a setting from the ConfigPresenter. It shows the interaction between the Renderer, ConfigPresenter, and ElectronStore. The Renderer requests a setting, the ConfigPresenter retrieves it from the ElectronStore, and the value is returned to the Renderer.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/config-presenter-architecture.md#_snippet_1\n\nLANGUAGE: Mermaid\nCODE:\n```\nsequenceDiagram\n    participant Renderer\n    participant ConfigPresenter\n    participant ElectronStore\n    participant McpConfHelper\n\n    Renderer->>ConfigPresenter: getSetting('language')\n    ConfigPresenter->>ElectronStore: get('language')\n    ElectronStore-->>ConfigPresenter: 'en-US'\n    ConfigPresenter-->>Renderer: 'en-US'\n```\n\n----------------------------------------\n\nTITLE: Building Deepchat Docker Image\nDESCRIPTION: These commands build a Docker image and then runs it to create a deployable Deepchat package. The first command builds the Docker image using the Dockerfile.build.linux file in the current directory and tags it as deepchat-builder. The second command runs the container, removes it after execution, and mounts the current working directory to /app/dist inside the container, storing the build artifacts.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/linux-build-guide.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 构建Docker镜像\ndocker build -t deepchat-builder -f Dockerfile.build.linux .\n\n# 运行构建\ndocker run --rm -v $(pwd):/app/dist deepchat-builder\n```\n\n----------------------------------------\n\nTITLE: DeepChat Install MCP Deeplink URL Format\nDESCRIPTION: This deeplink is used to install Model Control Protocol (MCP) service configuration. The `code` parameter contains the base64 encoded JSON string of the MCP service configuration.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/deeplinks.md#_snippet_4\n\nLANGUAGE: URL\nCODE:\n```\ndeepchat://mcp/install?code={base64Encode(JSON.stringify(jsonConfig))}\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies (Bash)\nDESCRIPTION: This command installs the project's dependencies using Yarn, a package manager for Node.js. This is crucial for setting up the project environment with all necessary libraries and tools.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Running Prettier for Code Formatting (Bash)\nDESCRIPTION: This command runs Prettier to automatically format the code according to predefined style rules.  This ensures consistency in code formatting throughout the project.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn format\n```\n\n----------------------------------------\n\nTITLE: Running Prettier Code Formatting\nDESCRIPTION: This snippet runs Prettier to format code automatically. Prettier helps maintain a consistent code style throughout the project.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/CONTRIBUTING.zh.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn format\n```\n\n----------------------------------------\n\nTITLE: Running ESLint for JavaScript/TypeScript Linting (Bash)\nDESCRIPTION: This command runs ESLint to check the JavaScript/TypeScript code for stylistic and potential errors. It helps maintain a consistent code style and catch common mistakes.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Running ESLint Code Checks\nDESCRIPTION: This snippet executes ESLint to perform code checks on JavaScript/TypeScript files. ESLint ensures code quality and adherence to coding standards.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/CONTRIBUTING.zh.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Refactored Event Flow Diagram\nDESCRIPTION: This diagram depicts the proposed event flow after refactoring, with clear event sources and improved separation of concerns. It shows how `ConfigPresenter` triggers configuration related events that `Presenter` and `Settings` react to.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/event-system-design.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nConfigPresenter                  Presenter(Main)                  Settings(Renderer)\n     |                                 |                                |\n     |                                |\n     |--- config:model-list-changed--->|                                |\n     |                                 |--- config:model-list-changed-->|\n     |                                 |                                |--- refreshProviderModels()\n     |                                 |                                |\n     |                                 |                                |\n     |--- model:status-changed-------->|                                |\n     |                                 |--- model:status-changed------->|\n     |                                 |                                |--- updateLocalModelStatus()\n     |                                 |                                |\n     |--- config:provider-changed----->|                                |\n     |                                 |--- config:provider-changed---->|\n     |                                 |                                |--- refreshAllModels()\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server (Bash)\nDESCRIPTION: This command starts the development server using Yarn.  This allows developers to run and test the application locally.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: This snippet starts the development server using `yarn dev`. It assumes Yarn is installed and configured.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/CONTRIBUTING.zh.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Cloning the DeepChat Repository (Bash)\nDESCRIPTION: This command clones the DeepChat repository from GitHub to your local machine and then navigates into the newly created directory.  The repository URL is provided as an example and should be replaced with the actual repository URL.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/yourusername/deepchat.git\ncd deepchat\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools (Bash)\nDESCRIPTION: This command installs the Xcode Command Line Tools on macOS. These tools are necessary for compiling software and are often required for development environments.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools (macOS)\nDESCRIPTION: This snippet shows how to install Xcode Command Line Tools on macOS using `xcode-select`. It is required for building software on macOS.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/CONTRIBUTING.zh.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Current Event Flow Diagram\nDESCRIPTION: This diagram illustrates the current event flow, highlighting the multiple sources of the `provider-models-updated` event and the resulting complexity.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/event-system-design.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nBaseLLMProvider                ConfigPresenter                  Presenter(Main)                  Settings(Renderer)\n     |                              |                                 |                                |\n     |--- provider-models-updated-->|                                 |                                |\n     |                              |--- provider-models-updated----->|                                |\n     |                              |                                 |--- provider-models-updated---->|\n     |                              |                                 |                                |--- refreshProviderModels()\n     |                              |                                 |                                |\n     |--- model-status-changed----->|                                 |                                |\n     |                              |--- model-status-changed-------->|                                |\n     |                              |                                 |--- model-status-changed------->|\n     |                              |                                 |                                |--- updateLocalModelStatus()\n     |                              |                                 |                                |\n     |                              |--- provider-setting-changed---->|                                |\n     |                              |                                 |--- provider-setting-changed--->|\n     |                              |                                 |                                |--- refreshAllModels()\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on Ubuntu/Debian (Bash)\nDESCRIPTION: This command installs essential build dependencies, including the GNU compiler collection (gcc) and Git, on Ubuntu/Debian-based Linux distributions. These dependencies are necessary for compiling software from source.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install build-essential git\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on Fedora (Bash)\nDESCRIPTION: This command installs essential build dependencies, including development tools and Git, on Fedora-based Linux distributions. These dependencies are necessary for compiling software from source.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf groupinstall \"Development Tools\"\nsudo dnf install git\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies (Fedora)\nDESCRIPTION: This snippet shows how to install development tools and Git on Fedora systems using `dnf`.  It uses `dnf groupinstall` to install a group of packages suitable for development, followed by a specific Git installation.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/CONTRIBUTING.zh.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Fedora\nsudo dnf groupinstall \"Development Tools\"\nsudo dnf install git\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew Package Manager (macOS)\nDESCRIPTION: This snippet demonstrates how to install the Homebrew package manager on macOS using a `curl` command that pipes the installation script to `bash`.  Homebrew simplifies installing other command-line tools and libraries.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/CONTRIBUTING.zh.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: ConfigPresenter Class Diagram\nDESCRIPTION: This diagram visualizes the structure of the ConfigPresenter class, illustrating its attributes such as store (ElectronStore for app settings), providersModelStores (a map of ElectronStores for each LLM provider), userDataPath, currentAppVersion, and McpConfHelper. It also shows the key methods for managing settings, providers, model status, and MCP servers.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/config-presenter-design.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    class ConfigPresenter {\n        -store: ElectronStore<IAppSettings>\n        -providersModelStores: Map<string, ElectronStore<IModelStore>>\n        -userDataPath: string\n        -currentAppVersion: string\n        -mcpConfHelper: McpConfHelper\n        +getSetting()\n        +setSetting()\n        +getProviders()\n        +setProviders()\n        +getModelStatus()\n        +setModelStatus()\n        +getMcpServers()\n        +setMcpServers()\n    }\n```\n\n----------------------------------------\n\nTITLE: Data Migration Sequence Diagram\nDESCRIPTION: This diagram illustrates the data migration process performed by ConfigPresenter. It checks the current version and migrates data from older versions by performing filesystem operations and updating the version in the ElectronStore.\nSOURCE: https://github.com/thinkinaixyz/deepchat/blob/dev/docs/config-presenter-design.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant ConfigPresenter\n    participant ElectronStore\n    participant FileSystem\n\n    ConfigPresenter->>ElectronStore: 检查版本号\n    alt 版本不一致\n        ConfigPresenter->>FileSystem: 迁移旧数据\n        ConfigPresenter->>ElectronStore: 更新版本号\n    end\n```"
  }
]