[
  {
    "owner": "mercadopago",
    "repo": "devsite-docs.git",
    "content": "TITLE: Initializing Ticket Payment Form with Complete Payer Data in React for Mexico\nDESCRIPTION: React implementation to pre-populate all payer fields for ticket payments in Mexico. Includes personal information, identification, email, and full address details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/initialize-data-on-the-bricks.en.md#2025-04-18_snippet_9\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst initialization = {\n ...,\n payer: {\n   firstName: '<PAYER_FIRST_NAME_HERE>',\n   lastName: '<PAYER_LAST_NAME_HERE>',\n   identification: {\n    \"type\": \"<PAYER_DOC_TYPE_HERE>\",\n    \"number\": \"<PAYER_DOC_NUMBER_HERE>\",\n   },\n   email: '<PAYER_EMAIL_HERE>',\n   address: {\n     zipCode: '<PAYER_ZIP_CODE_HERE>',\n     federalUnit: '<PAYER_FED_UNIT_HERE>',\n     city: '<PAYER_CITY_HERE>',\n     neighborhood: '<PAYER_NEIGHBORHOOD_HERE>',\n     streetName: '<PAYER_STREET_NAME_HERE>',\n     streetNumber: '<PAYER_STREET_NUMBER_HERE>',\n     complement: '<PAYER_COMPLEMENT_HERE>',\n   }\n },\n};\n```\n\n----------------------------------------\n\nTITLE: Processing Card Payments with Python using MercadoPago SDK\nDESCRIPTION: This Python code demonstrates how to create a payment using MercadoPago's SDK. It initializes the SDK with an access token, sets an idempotency key, and creates a payment with transaction amount, token, description, installments, payment method, and payer information including identification details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-cards.en.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n    \"transaction_amount\": float(request.POST.get(\"transaction_amount\")),\n    \"token\": request.POST.get(\"token\"),\n    \"description\": request.POST.get(\"description\"),\n    \"installments\": int(request.POST.get(\"installments\")),\n    \"payment_method_id\": request.POST.get(\"payment_method_id\"),\n    \"payer\": {\n        \"email\": request.POST.get(\"cardholderEmail\"),\n        \"identification\": {\n            \"type\": request.POST.get(\"identificationType\"), \n            \"number\": request.POST.get(\"identificationNumber\")\n        }\n        \"first_name\": request.POST.get(\"cardholderName\")\n    }\n}\n\npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n\nprint(payment)\n```\n\n----------------------------------------\n\nTITLE: Creating Preferences in MercadoPago SDK using PHP\nDESCRIPTION: This snippet demonstrates the creation of a payment preference using the MercadoPago SDK in PHP. It defines item details and payment method settings as dependencies and requires a PreferenceClient instance. The input is an associative array defining the preference configuration, and the output is a preference object.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/preferences.en.md#2025-04-18_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n  $client = new PreferenceClient();\n  $preference = $client->create([\n    \"external_reference\" => \"teste\",\n    \"items\"=> array(\n      array(\n        \"id\" => \"4567\",\n        \"title\" => \"Dummy Title\",\n        \"description\" => \"Dummy description\",\n        \"picture_url\" => \"http://www.myapp.com/myimage.jpg\",\n        \"category_id\" => \"eletronico\",\n        \"quantity\" => 1,\n        \"currency_id\" => \"BRL\",\n        \"unit_price\" => 100\n      )\n    ),\n    \"payment_methods\" => [\n    \"default_payment_method_id\" => \"master\",\n    \"excluded_payment_types\" => array(\n      array(\n        \"id\" => \"ticket\"\n      )\n    ),\n    \"installments\"  => 12,\n    \"default_installments\" => 1\n  ]);\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK with Ruby\nDESCRIPTION: This Ruby code snippet initializes the Mercado Pago SDK and sets the access token. The access token is used to authenticate calls to the Mercado Pago API which is necessary for creating preferences.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/default-rendering.en.md#2025-04-18_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# Mercado Pago SDK\nrequire 'mercadopago'\n# Add Your credentials\nsdk = Mercadopago::SDK.new('PROD_ACCESS_TOKEN')\n```\n\n----------------------------------------\n\nTITLE: Processing Card Payments with Ruby using MercadoPago SDK\nDESCRIPTION: This Ruby code demonstrates how to create a payment using MercadoPago's SDK. It configures the SDK with an access token and idempotency key, then creates a payment with transaction details including amount, token, description, installments, payment method, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-cards.en.md#2025-04-18_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_data = {\n  transaction_amount: params[:transactionAmount].to_f,\n  token: params[:token],\n  description: params[:description],\n  installments: params[:installments].to_i,\n  payment_method_id: params[:paymentMethodId],\n  payer: {\n    email: params[:cardholderEmail],\n    identification: {\n      type: params[:identificationType],\n      number: params[:identificationNumber]\n    },\n    first_name: params[:cardholderName]\n  }\n}\n\npayment_response = sdk.payment.create(payment_data, custom_request_options)\npayment = payment_response[:response]\n\nputs payment\n```\n\n----------------------------------------\n\nTITLE: Creating Customer and Card in Mercado Pago\nDESCRIPTION: Code examples in multiple languages showing how to create a customer profile and associate a payment card using Mercado Pago's API. Each example initializes the SDK with an access token, creates a customer with an email address, and then adds a payment card using a previously generated token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/create-customer-and-card.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n  \n  $client_customer = new CustomerClient();\n  $customer = $client_customer->create([\"email\" => \"my.user@example.com\"]);\n  $client = new CustomerCardClient();\n  $customer_card = $client->create($customer->id, [\"token\" => \"your_card_token\"]);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'YOUR_ACCESS_TOKEN' });\nconst customer = new Customer(client);\n\nconst body = {\n  email: \"my.user@example.com\"\n};\n\ncustomer.create({ body: body }).then((result) => {\n  const customerCard = new CustomerCard(client);\n\n  const body = {\n    token : result.token,\n  };\n\n  customerCard.create({ customerId: 'customer_id', body })\n     .then((result) => console.log(result));\n})\n```\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nCustomerClient customerClient = new CustomerClient();\nCustomerCardClient customerCardClient = new CustomerCardClient();\n\nCustomerRequest customerRequest = CustomerRequest.builder()\n   .email(\"john@test.com\")\n   .build();\nCustomer customer = customerClient.create(customerRequest);\n\nCustomerCardIssuer issuer = CustomerCardIssuer.builder()\n   .id(\"3245612\")\n   .build();\n\nCustomerCardCreateRequest cardCreateRequest = CustomerCardCreateRequest.builder()\n   .token(\"9b2d63e00d66a8c721607214cedaecda\")\n   .issuer(issuer)\n   .paymentMethodId(\"debit_card\")\n   .build();\n\ncustomerCardClient.create(customer.getId(), cardCreateRequest);\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustomer_request = {\n  email: 'john@yourdomain.com'\n}\ncustomer_response = sdk.customer.create(customer_request)\ncustomer = customer_response[:response]\n\ncard_request = {\n  token: '9b2d63e00d66a8c721607214cedaecda',\n  payment_method_id: 'visa'\n}\ncard_response = sdk.card.create(customer['id'], card_request)\ncard = card_response[:response]\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar customerRequest = new CustomerRequest\n{\n    Email = \"test_payer_12345@testuser.com\",\n};\nvar customerClient = new CustomerClient();\nCustomer customer = await customerClient.CreateAsync(customerRequest);\n\nvar cardRequest = new CustomerCardCreateRequest\n{\n    Token = \"9b2d63e00d66a8c721607214cedaecda\"\n};\nCustomerCard card = await customerClient.CreateCardAsync(customer.Id, cardRequest);\n```\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\ncustomer_data = {\n  \"email\": \"test_payer_12345@testuser.com\"\n}\ncustomer_response = sdk.customer().create(customer_data)\ncustomer = customer_response[\"response\"]\n\ncard_data = {\n  \"token\": \"9b2d63e00d66a8c721607214cedaecda\",\n  \"payment_method_id\": \"visa\"\n}\ncard_response = sdk.card().create(customer[\"id\"], card_data)\ncard = card_response[\"response\"]\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/customercard\"\n)\n\nfunc main() {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tcustomerClient := customer.NewClient(cfg)\n\tcustomerCardClient := customercard.NewClient(cfg)\n\n\tcustomerRequest := customer.Request{Email: \"{{EMAIL}}\"}\n\n\tcustomerResource, err := customerClient.Create(context.Background(), customerRequest)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tcardRequest := customercard.Request{Token: \"{{CARD_TOKEN}}\"}\n\n\tcardResource, err := customerCardClient.Create(context.Background(), customerResource.ID, cardRequest)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(cardResource)\n}\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n  'https://api.mercadopago.com/v1/customers/CUSTOMER_ID/cards' \\\n  -d '{\"token\": \"9b2d63e00d66a8c721607214cedaecda\", \"payment_method_id\": \"visa\"}'\n```\n\n----------------------------------------\n\nTITLE: Processing Payment with Ruby\nDESCRIPTION: Ruby implementation for processing credit card payments with Mercado Pago. Creates a payment request with transaction details, payment method, and customer identification information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.en.md#2025-04-18_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\npayment_data = {\ntransaction_amount: params[:transactionAmount].to_f,\ntoken: params[:token],\ndescription: params[:description],\ninstallments: params[:installments].to_i,\npayment_method_id: params[:paymentMethodId],\npayer: {\nemail: params[:email],\nidentification: {\ntype: params[:identificationType],\nnumber: params[:identificationNumber]\n}\n}\n}\n\npayment_response = sdk.payment.create(payment_data)\npayment = payment_response[:response]\n\nputs payment\n```\n\n----------------------------------------\n\nTITLE: Creating Payment in Python with Mercado Pago SDK\nDESCRIPTION: This snippet demonstrates how to create a payment using the Mercado Pago SDK in Python. It requires `payment_data` and `request_options` to execute the payment creation process and retrieve the payment response, which contains details such as payment status and information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-external-mpi.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npayment_response = sdk.payment().create(payment_data,\\n                                        request_options)\\n\\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Modifying DIAN Tax Rate in JSON\nDESCRIPTION: This code demonstrates how to modify the tax rate for the Dirección de Impuestos y Aduanas Nacionales (DIAN) in Colombia using the 'taxes' attribute in the preference JSON.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"taxes\": [\n\t{\n\t\t\"type\": \"IVA\",\n\t\t\"value\": 16\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Getting Payment Methods from Card Number in Mercado Pago\nDESCRIPTION: This code obtains payment method details when a user enters a card number. It listens for 'binChange' events on the card number field, retrieves payment methods using the BIN (first digits of the card), and updates form elements accordingly. It also includes helper functions to manage placeholder elements and update PCI field settings.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.es.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n    const paymentMethodElement = document.getElementById('paymentMethodId');\n    const issuerElement = document.getElementById('form-checkout__issuer');\n    const installmentsElement = document.getElementById('form-checkout__installments');\n\n    const issuerPlaceholder = \"Banco emisor\";\n    const installmentsPlaceholder = \"Cuotas\";\n\n    let currentBin;\n    cardNumberElement.on('binChange', async (data) => {\n      const { bin } = data;\n      try {\n        if (!bin && paymentMethodElement.value) {\n          clearSelectsAndSetPlaceholders();\n          paymentMethodElement.value = \"\";\n        }\n\n        if (bin && bin !== currentBin) {\n          const { results } = await mp.getPaymentMethods({ bin });\n          const paymentMethod = results[0];\n\n          paymentMethodElement.value = paymentMethod.id;\n          updatePCIFieldsSettings(paymentMethod);\n          updateIssuer(paymentMethod, bin);\n          updateInstallments(paymentMethod, bin);\n        }\n\n        currentBin = bin;\n      } catch (e) {\n        console.error('error getting payment methods: ', e)\n      }\n    });\n\n    function clearSelectsAndSetPlaceholders() {\n      clearHTMLSelectChildrenFrom(issuerElement);\n      createSelectElementPlaceholder(issuerElement, issuerPlaceholder);\n\n      clearHTMLSelectChildrenFrom(installmentsElement);\n      createSelectElementPlaceholder(installmentsElement, installmentsPlaceholder);\n    }\n\n    function clearHTMLSelectChildrenFrom(element) {\n      const currOptions = [...element.children];\n      currOptions.forEach(child => child.remove());\n    }\n\n    function createSelectElementPlaceholder(element, placeholder) {\n      const optionElement = document.createElement('option');\n      optionElement.textContent = placeholder;\n      optionElement.setAttribute('selected', \"\");\n      optionElement.setAttribute('disabled', \"\");\n\n      element.appendChild(optionElement);\n    }\n\n    // Este paso mejora las validaciones de cardNumber y securityCode\n    function updatePCIFieldsSettings(paymentMethod) {\n      const { settings } = paymentMethod;\n\n      const cardNumberSettings = settings[0].card_number;\n      cardNumberElement.update({\n        settings: cardNumberSettings\n      });\n\n      const securityCodeSettings = settings[0].security_code;\n      securityCodeElement.update({\n        settings: securityCodeSettings\n      });\n    }\n```\n\n----------------------------------------\n\nTITLE: X-Signature Header Example\nDESCRIPTION: Example of the x-signature header format sent by Mercado Pago containing timestamp and validation hash\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.es.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nts=1704908010,v1=618c85345248dd820d5fd456117c2ab2ef8eda45a0282ff693eac24131a5e839\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with Mercado Pago API (Multiple Languages)\nDESCRIPTION: This code snippet demonstrates how to create a payment using Mercado Pago's API or SDKs in various programming languages. It includes setting up the client, specifying payment details, and handling the response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['<TRANSACTION_AMOUNT>'],\n    \"payment_method_id\" => $_POST['<PAYMENT_METHOD_ID>'],\n    \"payer\" => [\n      \"email\" => $_POST['<EMAIL>']\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, Payments } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<YOUR_ACCESS_TOKEN>' });\nconst payments = new Payments(client);\n\npayments.create({\nbody: {\n\t\ttransaction_amount: '<TRANSACTION_AMOUNT>',\n\t\tpayment_method_id: '<PAYMENT_METHOD_ID>',\n\t\tpayer: {\n\t\t\temail: '<EMAIL>'\n\t\t\t}\n},\n\trequestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n\t.then((result) => console.log(result))\n\t.catch((error) => console.log(error));\n```\n\nLANGUAGE: java\nCODE:\n```\nPaymentCreateRequest paymentCreateRequest = PaymentCreateRequest.builder()\n          .transactionAmount(new BigDecimal(\"<TRANSACTION_AMOUNT>\"))\n          .paymentMethodId(\"<PAYMENT_METHOD_ID>\")\n          .payer(\n              PaymentPayerRequest.builder()\n                  .email(\"<EMAIL>\").build()\n          ).build();\n\nMap<String, String> customHeaders = new HashMap<>();\ncustomHeaders.put(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n\nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders).build();\n\nPaymentClient client = new PaymentClient();\nclient.create(paymentCreateRequest, requestOptions);\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\npayment_request = {\ntransaction_amount: 100,\ndescription: 'Product title',\npayment_method_id: 'oxxo',\npayer: {\nemail: 'test_user_82045343@testuser.com',\n}\n}\n\npayment_response = sdk.payment.create(payment_request)\npayment = payment_response[:response]\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar request = new PaymentCreateRequest\n{\nTransactionAmount = 100,\nDescription = \"Product Title\",\nPaymentMethodId = \"oxxo\",\nPayer = new PaymentPayerRequest\n{\nEmail = \"test_user_82045343@testuser.com\",\n},\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\n```\n\nLANGUAGE: python\nCODE:\n```\nimport market\nsdk = Mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\npayment_data = {\n\"transaction_amount\": 100,\n\"description\": \"Product title\",\n\"payment_method_id\": \"oxxo\",\n\"payer\": {\n\"email\": \"test_user_82045343@testuser.com\"\n}\n}\n\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n```\n\nLANGUAGE: go\nCODE:\n```\naccessToken := \"{{ACCESS_TOKEN}}\"\n\n\ncfg, err := config.New(accessToken)\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nclient := paymentmethod.NewClient(cfg)\n\n\nresources, err := client.List(context.Background())\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nfor _, v := range resources {\n   fmt.Println(v)\n}\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n--header 'X-Idempotency-Key: <SOME_UNIQUE_VALUE>' \\\n--data-raw '{\n  \"transaction_amount\": 100,\n  \"description\": \"Titulo del producto\",\n  \"payment_method_id\": \"oxxo\",\n  \"payer\": { \"email\": \"test_user_12345@testuser.com\" }\n}'\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment in Go with MercadoPago SDK\nDESCRIPTION: This snippet demonstrates how to create a payment and then capture it using the MercadoPago Go SDK. It initializes the SDK with the access token, creates a payment client, creates a payment with capture set to false, and then captures the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.en.md#2025-04-18_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/payment\"\n)\n\nfunc main() {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := payment.NewClient(cfg)\n\n\t// Create payment.\n\trequest := payment.Request{\n\t\tTransactionAmount: 105.1,\n\t\tPayer: &payment.PayerRequest{\n\t\t\tEmail: \"{{EMAIL}}\",\n\t\t},\n\t\tToken:        \"{{CARD_TOKEN}}\",\n\t\tInstallments: 1,\n\t\tCapture:      false,\n\t}\n\n\tresource, err := client.Create(context.Background(), request)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\t// Capture.\n\tresource, err = client.Capture(context.Background(), resource.ID)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Configuring MercadoPago.js SDK in JavaScript\nDESCRIPTION: This JavaScript snippet shows the steps to load and configure the MercadoPago.js SDK asynchronously in a Node.js environment. `loadMercadoPago` is invoked to initialize the SDK with the given public key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.en.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loadMercadoPago } from \\\"@mercadopago/sdk-js\\\";\n\nawait loadMercadoPago();\nconst mp = new window.MercadoPago(\\\"YOUR_PUBLIC_KEY\\\");\n```\n\n----------------------------------------\n\nTITLE: Processing Payment with Node.js\nDESCRIPTION: Node.js implementation for processing credit card payments with Mercado Pago. This code handles the payment request with necessary parameters like transaction amount, token, installments, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.en.md#2025-04-18_snippet_10\n\nLANGUAGE: node\nCODE:\n```\nvar Mercadopago = require('mercadopago');\nMercadopago.configurations.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nvar payment_data = {\ntransaction_amount: Number(req.body.transactionAmount),\ntoken: req.body.token,\ndescription: req.body.description,\ninstallments: Number(req.body.installments),\npayment_method_id: req.body.paymentMethodId,\nissuer_id: req.body.issuer,\npayer: {\nemail: req.body.email,\nidentification: {\ntype: req.body.identificationType,\nnumber: req.body.identificationNumber\n}\n}\n};\n\nMercadopago.payment.save(payment_data)\n.then(function(response) {\nres.status(response.status).json({\nstatus: response.body.status,\nstatus_detail: response.body.status_detail,\nid: response.body.id\n});\n})\n.catch(function(error) {\nconsole.error(error)\n});\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment Value with C#\nDESCRIPTION: This code demonstrates how to capture a partial amount from a previously authorized payment using C#. It captures 75 units of currency from the original authorized amount.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar client = new PaymentClient();\nPayment payment = await client.CaptureAsync(paymentId, 75);\n```\n\n----------------------------------------\n\nTITLE: Listing Payment Methods\nDESCRIPTION: This Go snippet demonstrates how to list payment methods using the Mercado Pago API.  It initializes a new client with an access token and retrieves a list of available payment methods. It requires the MercadoPago Go SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_41\n\nLANGUAGE: go\nCODE:\n```\naccessToken := \"{{ACCESS_TOKEN}}\"\n\n\ncfg, err := config.New(accessToken)\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nclient := paymentmethod.NewClient(cfg)\n\n\nresources, err := client.List(context.Background())\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nfor _, v := range resources {\n   fmt.Println(v)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Identifying Card Issuer Bank with JavaScript\nDESCRIPTION: Functions to identify and update the card issuing bank based on the payment method and card BIN. This code helps avoid data processing conflicts between different issuers and allows for displaying appropriate installment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.en.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function updateIssuer(paymentMethod, bin) {\nconst { additional_info_needed, issuer } = paymentMethod;\nlet issuerOptions = [issuer];\n\nif (additional_info_needed.includes('issuer_id')) {\nissuerOptions = await getIssuers(paymentMethod, bin);\n}\n\ncreateSelectOptions(issuerElement, issuerOptions);\n}\n\nasync function getIssuers(paymentMethod, bin) {\ntry {\nconst { id: paymentMethodId } = paymentMethod;\nreturn await mp.getIssuers({ paymentMethodId, bin });\n} catch (e) {\nconsole.error('error getting issuers: ', e)\n}\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with 3DS in Mercado Pago Node.js SDK\nDESCRIPTION: This Node.js code snippet explains how to process a payment in Mercado Pago using 3DS authentication results. Users must configure the MercadoPago SDK with their access token. The main parameters involve transaction amount, card token, payment method data including a valid authentication section.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-external-mpi.en.md#2025-04-18_snippet_3\n\nLANGUAGE: Node\nCODE:\n```\nimport { MercadoPagoConfig, Payment } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ENV_ACCESS_TOKEN>' });\nconst payment = new Payment(client);\n\nconst body = {\n  transaction_amount: <TRANSACTION_AMOUNT>,\n  token: '<CARD_TOKEN>',\n  description:  '<DESCRIPTION>',\n  installments: <INSTALLMENTS_NUMBER>,\n  payment_method_id: '<PAYMENT_METHOD_ID>',\n  issuer_id: '<ISSUER_ID>',\n  payer: {\n    email: '<BUYER_EMAIL>',\n  },\n  payment_method: {\n    type: 'credit_card',\n    data: {\n      authentication: {\n        type: 'external_threeds',\n        cryptogram: '<<String>>',\n        three_ds_server_trans_id: '<<String>>',\n        eci: '<<String>>',\n        ds_trans_id: '<<String>>',\n        acs_trans_id: '<<String>>',\n        three_ds_version: '<<String>>',\n        authentication_status: '<<String>>',\n      }\n    }\n  }\n}\npayment.create({ body: body, requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' } }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago API in Node.js\nDESCRIPTION: This Node.js snippet demonstrates how to create a payment using the Mercado Pago API. It initializes the MercadoPagoConfig with an access token, creates a Payment instance, and then uses it to create a payment with specified transaction details. The result is logged to the console.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-cards.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nconst mercadopago = require('mercadopago');\nimport { MercadoPagoConfig, Payment } from '@src/index';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>', options: { timeout: 5000 } });\n\nconst payment = new Payment(client);\n\npayment\n  .create({\n    body: {\n      transaction_amount: 100,\n      token: '<TOKEN>',\n      description: '<DESCRIPTION>',\n      installments: 1,\n      payment_method_id: '<PAYMENT_METHOD_ID>',\n      issuer_id: 310,\n      payer: {\n        email: '<EMAIL>',\n        identification: {\n          number: '12345678909',\n          type: 'CPF',\n        },\n      },\n    },\n  }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment using MercadoPago API - C#\nDESCRIPTION: This C# example illustrates creating a payment request using the MercadoPago SDK. It initializes the access token and constructs a PaymentCreateRequest object with transaction parameters and payer details before sending the request asynchronously.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.es.md#2025-04-18_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"<ENV_ACCESS_TOKEN>\";\n\nvar request = new PaymentCreateRequest\n{\n   TransactionAmount = 105,\n   Description = \"<DESCRIPCIÓN>\",\n   PaymentMethodId = \"bolbradesco\",\n   Payer = new PaymentPayerRequest\n   {\n       Email = \"<EMAIL>\",\n       FirstName = \"<NOMBRE>\",\n       LastName = \"<APELLIDO>\",\n       Identification = new IdentificationRequest\n       {\n           Type = \"CPF\",\n           Number = \"<NUMERO DE CPF>\",\n       },\n       Address = new  PaymentPayerAddressRequest\n       {\n           ZipCode = \"<CÓDIGO POSTAL>\",\n           StreetName = \"<CALLE XXX>\",\n           City = \"<CIUDAD>\",\n           StreetNumber = \"<NÚMERO>\",\n           Neighborhood = \"<BAIRRO>\",\n           FederalUnit = \"<SIGLA DE ESTADO>\",\n\n       }\n   },\n};\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\n\n```\n\n----------------------------------------\n\nTITLE: Processing Card Payments with Node.js using MercadoPago SDK\nDESCRIPTION: This Node.js code demonstrates how to create a payment using MercadoPago's SDK. It initializes the client with an access token and timeout configuration, then creates a payment with transaction amount, description, payment method ID and payer email.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-cards.en.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nvar mercadopago = require('mercadopago');\nimport { MercadoPagoConfig, Payment } from '@src/index';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>', options: { timeout: 5000 } });\n\nconst payment = new Payment(client);\n\npayment.create({ body: {\n transaction_amount: 100,\n description: '<DESCRIPTION>',\n payment_method_id: '<PAYMENT_METHOD_ID>',\n payer: {\n email: '<EMAIL>'\n},\n} }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Rendering MercadoPago Wallet Component in React\nDESCRIPTION: This React code snippet shows how to render the MercadoPago Wallet component with the preference ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-checkout.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Wallet initialization={{ preferenceId: '<PREFERENCE_ID>' }} />\n```\n\n----------------------------------------\n\nTITLE: Initializing MercadoPago CardForm for MLM Region (Mexico)\nDESCRIPTION: This code initializes a MercadoPago payment form specifically for Mexico (MLM region). Unlike other regions, it doesn't include identification type and number fields, only requiring email for the payer information in addition to standard card fields.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-cardform.en.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst cardForm = mp.cardForm({\namount: \"100.5\",\niframe: true,\nform: {\nid: \"form-checkout\",\ncardNumber: {\nid: \"form-checkout__cardNumber\",\nplaceholder: \"Card Number\",\n},\nexpirationDate: {\nid: \"form-checkout__expirationDate\",\nplaceholder: \"MM/YY\",\n},\nsecurityCode: {\nid: \"form-checkout__securityCode\",\nplaceholder: \"Security Code\",\n},\ncardholderName: {\nid: \"form-checkout__cardholderName\",\nplaceholder: \"Cardholder\",\n},\nissuer: {\nid: \"form-checkout__issuer\",\nplaceholder: \"Issuing bank\",\n},\ninstallments: {\nid: \"form-checkout__installments\",\nplaceholder: \"Installments\",\n},\ncardholderEmail: {\nid: \"form-checkout__cardholderEmail\",\nplaceholder: \"Email\",\n},\n},\ncallbacks: {\nonFormMounted: error => {\nif (error) return console.warn(\"Form Mounted handling error: \", error);\nconsole.log(\"Form mounted\");\n},\nonSubmit: event => {\nevent.preventDefault();\n\nconst {\npaymentMethodId: payment_method_id,\nissuerId: issuer_id,\ncardholderEmail: email,\namount,\ntoken,\ninstallments,\nidentificationNumber,\nidentificationType,\n} = cardForm.getCardFormData();\n\nfetch(\"/process_payment\", {\nmethod: \"POST\",\nheaders: {\n\"Content-Type\": \"application/json\",\n},\nbody: JSON.stringify({\ntoken,\nissuer_id,\npayment_method_id,\ntransaction_amount: Number(amount),\ninstallments: Number(installments),\ndescription: \"Product Description\",\npayer: {\nemail,\nidentification: {\ntype: identificationType,\nnumber: identificationNumber,\n},\n},\n}),\n});\n},\nonFetching: (resource) => {\nconsole.log(\"Fetching resource: \", resource);\n\n// Animate progress bar\nconst progressBar = document.querySelector(\".progress-bar\");\nprogressBar.removeAttribute(\"value\");\n\nreturn() => {\nprogressBar.setAttribute(\"value\", \"0\");\n};\n}\n},\n});\n```\n\n----------------------------------------\n\nTITLE: Creating PSE Payment with Mercado Pago in Python\nDESCRIPTION: Python implementation for creating a PSE payment using Mercado Pago SDK. The code initializes the SDK with access token, sets an idempotency key, and creates a payment request with all required transaction and payer details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pse-avanza.en.md#2025-04-18_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'X-Idempotency-Key': '<SOME_UNIQUE_VALUE>'\n}\n \nbody = {\n    \"transaction_amount\": 5000,\n    \"description\": \"Product description\",\n    \"payment_method_id\": \"pse\",\n    \"callback_url\": \"https://your-site.com\",\n    \"notification_url\": \"https://your-site.com\",\n    \"additional_info\": {\n        \"ip_address\": \"127.0.0.1\"\n    },\n    \"transaction_details\": {\n        \"financial_institution\": request.POST.get(\"financialInstitution\")\n    },\n    \"payer\": {\n        \"email\": request.POST.get(\"email\"),\n        \"entity_type\": \"individual\",\n        \"first_name\": request.POST.get(\"firstName\"),\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK with C#\nDESCRIPTION: This C# code snippet initializes the Mercado Pago SDK and sets the access token. Setting the access token allows authenticated calls to be made to the Mercado Pago API to create preferences.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/default-rendering.en.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// Mercado Pago SDK\n using MercadoPago.Config;\n // Add Your credentials\nMercadoPagoConfig.AccessToken = \"PROD_ACCESS_TOKEN\";\n```\n\n----------------------------------------\n\nTITLE: Updating Payment with Mercado Pago SDK in Java\nDESCRIPTION: This snippet demonstrates how to update the data of a specific payment using its ID by calling the capture method of the PaymentClient. It is important to ensure that the required permissions and parameters are set before executing this operation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/create-payments.en.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nPaymentClient client = new PaymentClient();\n\nLong paymentId = 123456789L;\nclient.capture(paymentId);\n```\n\n----------------------------------------\n\nTITLE: Creating Customer and Card with MercadoPago SDK in Node.js\nDESCRIPTION: This Node.js snippet depicts the process of creating a customer and associating a card using the MercadoPago Node SDK. The process is initiated with the MercadoPago configuration requiring an access token followed by invoking 'customer.create()' and 'customerCard.create()' methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/create-customer-and-card.en.md#2025-04-18_snippet_1\n\nLANGUAGE: Node.js\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'YOUR_ACCESS_TOKEN' });\nconst customer = new Customer(client);\n\nconst body = {\n  email: \"my.user@example.com\"\n};\n\ncustomer.create({ body: body }).then((result) => {\n  const customerCard = new CustomerCard(client);\n\n  const body = {\n    token : result.token,\n  };\n\n  customerCard.create({ customerId: 'customer_id', body })\n     .then((result) => console.log(result));\n})\n\n```\n\n----------------------------------------\n\nTITLE: Payment Response JSON with External Resource URL for Redirection\nDESCRIPTION: JSON response example showing the payment creation result, which includes the critical external_resource_url field used for redirecting the customer to the Mercado Pago payment page with Fintoc widget.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-simplified.es.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n   …\n        \"data\": {\n            \"reference_id\": \"82512912106\",\n            \"external_reference_id\": \"pi_2nGAKKSDoWG8ALR8_sec_Vfwt2rhBdjxYLhVpWupimnnp\",\n            // URL a la que hacer la redirección\n            \"external_resource_url\": \"https://mercadopago.cl/banktransfer...\" \n        }\n   …\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference\nDESCRIPTION: Examples of creating a payment preference using Mercado Pago SDK in different programming languages. This includes setting up item details like title, quantity, and price.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-checkout.en.md#2025-04-18_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$client = new PreferenceClient();\n$preference = $client->create([\n  \"items\"=> array(\n    array(\n      \"title\" => \"Meu produto\",\n      \"quantity\" => 1,\n      \"currency_id\" => \"BRL\",\n      \"unit_price\" => 100\n    )\n  )\n]);\n?>\n```\n\nLANGUAGE: Node.js\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>', options: { timeout: 5000 } });\n\nconst preference = new Preference(client);\n\npreference.create({ body: {\nitems: [\n {\n  id: '<ID>',\n  title: '<title>',\n  quantity: 1,\n  unit_price: 100\n }\n],\n} }).then(console.log).catch(console.log);\n```\n\nLANGUAGE: Java\nCODE:\n```\n PreferenceItemRequest itemRequest =\n       PreferenceItemRequest.builder()\n           .id(\"1234\")\n           .title(\"Games\")\n           .description(\"PS5\")\n           .pictureUrl(\"http://picture.com/PS5\")\n           .categoryId(\"games\")\n           .quantity(2)\n           .currencyId(\"BRL\")\n           .unitPrice(new BigDecimal(\"4000\"))\n           .build();\n   List<PreferenceItemRequest> items = new ArrayList<>();\n   items.add(itemRequest);\nPreferenceRequest preferenceRequest = PreferenceRequest.builder()\n.items(items).build();\nPreferenceClient client = new PreferenceClient();\nPreference preference = client.create(request);\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n# Create a preference request\npreference_data = {\n  items: [\n    {\n      title: 'My Item',\n      unit_price: 75.56,\n      quantity: 1\n    }\n  ]\n}\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n\n# This value replaces the String \"<%= @preference_id %>\" in your HTML\n@preference_id = preference['id']\n```\n\nLANGUAGE: C#\nCODE:\n```\n// Create the preference request object\nvar request = new PreferenceRequest\n{\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"My Item\",\n            Quantity = 1,\n            CurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\n            UnitPrice = 75.56m,\n        },\n    },\n};\n\n// Create the preference using the client\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\nLANGUAGE: Python\nCODE:\n```\n# Create a preference item\npreference_data = {\n    \"items\": [\n        {\n            \"title\": \"My Item\",\n            \"quantity\": 1,\n            \"unit_price\": 75.76\n        }\n    ]\n}\n\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with Credit Card via Mercado Pago API using PSP/Messaging Model\nDESCRIPTION: This curl request demonstrates how to create a payment using Mercado Pago's API with the PSP/Messaging model for credit cards. It includes all required headers like platform ID and authorization token, as well as a comprehensive request body with transaction details, payer information, and additional data for enhanced processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/credit-card-psp.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'x-platform-id: {{PLATFORM_ID provided by the Partners team}}' \\\n--header 'Authorization: Bearer {{ACCESS_TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"transaction_amount\": 100,\n    \"installments\": 1,\n    \"statement_descriptor\": \"Seller\\'s store\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": {{ID of your Mercado Pago account related to your platform}},\n    \"payment_method_id\": \"{{payment_method_id}}\",\n    \"token\":  \"{{card_token_id}}\",\n    \"external_reference\": \"Platform identifier\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"description\": \"[Product type][Product code][Product description][Producer code][URL]\",\n    \"payer\": {\n        \"first_name\": \"Name. Example: John\",\n        \"last_name\": \"Last name. Example: Jones\",\n        \"email\": \"Example: test_user_1677282230@testuser.com\",\n        \"identification\": {\n            \"type\": \"Document type. Example: CPF\",\n            \"number\": \"Document number. Example: 19119119100\"\n        },\n        \"address\": {\n            \"zip_code\": \"Zip code. Example: 06233-200\",\n            \"street_name\": \"Street name. Example: Av. das Nações Unidas\",\n            \"street_number\": \"Number. Example: 3003\",\n            \"neighborhood\": \"Neighborhood. Example: Bonfim\",\n            \"city\": \"City. Example: Osasco\",\n            \"federal_unit\": \"Federal unit. Example: SP\"\n        }\n    },\n    \"additional_info\": {\n        \"referral_url\": \"Referral URL. Example: www.sellertest123.com\",\n        \"drop_shipping\": true,\n        \"delivery_promise\": \"2023-11-20\",\n        \"contrated_plan\": \"premium\",\n        \"items\": [\n            {\n                \"id\": \"1941\",\n                \"title\": \"Seller\\'s product\",\n                \"description\": \"Description of the seller\\'s product\",\n                \"picture_url\": null,\n                \"category_id\": \"Category. Example: electronics\",\n                \"quantity\": 1,\n                \"unit_price\": 100.00\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Name. Example: John\",\n            \"last_name\": \"Last name. Example: Jones\",\n            \"is_prime_user\": \"1\",\n            \"is_first_purchase_online\": \"1\",\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"Area code. Example: 11\",\n                \"number\": \"Number. Example: 987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"Zip code. Example: 06233-200\",\n                \"street_name\": \"Street name. Example: Av. das Nações Unidas\",\n                \"street_number\": \"Number. Example: 3003\"\n            },\n            \"registration_date\": \"2013-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"0\",\n            \"pick_up_on_seller\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"Zip code. Example: 95630000\",\n                \"street_name\": \"Street name. Example: São Luiz\",\n                \"street_number\": \"Number. Example: 15\",\n                \"floor\": \"Floor (if it\\'s an apartment). Example: Second\",\n                \"apartment\": \"Apartment number (if it\\'s an apartment). Example: 93\"\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Payment Brick in React\nDESCRIPTION: This snippet demonstrates how to integrate the Payment Brick using the Mercado Pago SDK in a React application. It initializes the SDK, configures payment options, and renders the Payment component with customization.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/react-cho-bricks.en.md#2025-04-18_snippet_0\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport React from 'react';\nimport { Payment, initMercadoPago } from '@mercadopago/sdk-react'\n\ninitMercadoPago('<YOUR_PUBLIC_KEY>');\n\nconst App = () => {\n const initialization = {\n   amount: '<PAYMENT_AMOUT>'\n };\n const customization = {\n   paymentMethods: {\n     atm: 'all',\n     ticket: 'all',\n     bankTransfer: 'all',\n     creditCard: 'all',\n     debitCard: 'all',\n     mercadoPago: 'all',\n   },\n };\n\n return (\n   <Payment\n     initialization={initialization}\n     customization={customization}\n     onSubmit={async (param) => {\n       console.log(param);\n     }}\n   />\n );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with PagoEfectivo\nDESCRIPTION: This Node.js snippet demonstrates how to create a payment using the Mercado Pago API. It uses the Payments class from the mercadopago library to send a request with transaction details, payment method, and payer information. It requires the MercadoPagoConfig and Payments classes from the mercadopago library and sets a custom header for idempotency.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_36\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, Payments } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<YOUR_ACCESS_TOKEN>' });\nconst payments = new Payments(client);\n\npayments.create({\nbody: {\n\t\ttransaction_amount: '<TRANSACTION_AMOUNT>',\n\t\tpayment_method_id: '<PAYMENT_METHOD_ID>',\n\t\tpayer: {\n\t\t\temail: '<EMAIL>'\n\t\t\t}\n},\n\trequestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n\t.then((result) => console.log(result))\n\t.catch((error) => console.log(error));\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago Library in JavaScript\nDESCRIPTION: Initialize the Mercado Pago library and create a bricks builder instance in JavaScript. This setup is required to use Checkout Bricks.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/common-initialization.en.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mp = new MercadoPago('YOUR_PUBLIC_KEY');\nconst bricksBuilder = mp.bricks();\n```\n\n----------------------------------------\n\nTITLE: Initialize Mercado Pago SDK\nDESCRIPTION: This code initializes the Mercado Pago SDK using an ACCESS_TOKEN. The ACCESS_TOKEN should be obtained from the user's credentials in their Mercado Pago account.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.en.md#2025-04-18_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport mercadopago\n\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n```\n\n----------------------------------------\n\nTITLE: Using Auxiliary Methods in Mercado Pago React SDK\nDESCRIPTION: This snippet shows how to use various auxiliary methods provided by the Mercado Pago React SDK. It includes examples of fetching identification types, payment methods, issuers, and installment options. These methods are useful for gathering necessary information during the payment process.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/react-core-methods.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport {\n getIdentificationTypes,\n getPaymentMethods,\n getIssuers,\n getInstallments,\n} from '@mercadopago/sdk-react'\n\n\nconst identificationTypes = await getIdentificationTypes()\nconst paymentMethods = await getPaymentMethods({ bin: '50314332' })\nconst issuers = await getIssuers({ paymentMethodId: 'master', bin: '50314332' })\nconst installments = await getInstallments({\n amount: '1000',\n locale: 'pt-BR',\n bin: '50314332',\n processingMode: 'aggregator'\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying the 3DS Challenge in an Iframe (JavaScript)\nDESCRIPTION: This JavaScript function `doChallenge` dynamically creates an iframe, a form, and a hidden input field to post the 3DS challenge request. It retrieves the `external_resource_url` and `creq` values from the payment object. The form is then submitted to the `external_resource_url` within the iframe.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-bigmerchants.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction doChallenge(payment) {\n  try {\n    const {\n      status,\n      status_detail,\n      three_ds_info: { creq, external_resource_url },\n    } = payment;\n    if (status === \"pending\" && status_detail === \"pending_challenge\") {\n      var iframe = document.createElement(\"iframe\");\n      iframe.name = \"myframe\";\n      iframe.id = \"myframe\";\n      document.body.appendChild(iframe);\n\n      var idocument = iframe.contentWindow.document;\n\n      var myform = idocument.createElement(\"form\");\n      myform.name = \"myform\";\n      myform.setAttribute(\"target\", \"myframe\");\n      myform.setAttribute(\"method\", \"post\");\n      myform.setAttribute(\"action\", external_resource_url);\n\n      var hiddenField = idocument.createElement(\"input\");\n      hiddenField.setAttribute(\"type\", \"hidden\");\n      hiddenField.setAttribute(\"name\", \"creq\");\n      hiddenField.setAttribute(\"value\", creq);\n      myform.appendChild(hiddenField);\n      iframe.appendChild(myform);\n\n      myform.submit();\n    }\n  } catch (error) {\n    console.log(error);\n    alert(\"Error doing Challenge, try again later.\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MercadoPago Payment Brick in React\nDESCRIPTION: Example implementation of MercadoPago's Payment Brick component in a React application. Shows initialization with a public key and configuration of payment methods including ATM, tickets, bank transfers, credit/debit cards, and MercadoPago wallet.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/react-cho-bricks.es.md#2025-04-18_snippet_0\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport React from 'react';\nimport { Payment, initMercadoPago } from '@mercadopago/sdk-react'\n\ninitMercadoPago('<YOUR_PUBLIC_KEY>');\n\nconst App = () => {\n const initialization = {\n   amount: '<PAYMENT_AMOUT>'\n };\n const customization = {\n   paymentMethods: {\n     atm: 'all',\n     ticket: 'all',\n     bankTransfer: 'all',\n     creditCard: 'all',\n     debitCard: 'all',\n     mercadoPago: 'all',\n   },\n };\n\n return (\n   <Payment\n     initialization={initialization}\n     customization={customization}\n     onSubmit={async (param) => {\n       console.log(param);\n     }}\n   />\n );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Making an In-Person Payment Request with Mercado Pago API\nDESCRIPTION: This curl command shows how to make a POST request to Mercado Pago's Secure Payments API for processing an in-person payment using an MPOST device. It includes encrypted card data and device-specific information in the request body.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/secure_payments/integration.es.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl - X POST\\ -\n  H 'X-Caller-Scopes: payments'\\ -\n  H 'accept: application/json'\\ -\n  H 'Authorization: Bearer YOUR_ACCESS_TOKEN'\\ -\n  -H 'X-Caller-Scopes: payments'\\ -\n  -d '{\n\"binary_mode\": true,\n\"capture\": true,\n\"card_present\":\n{\n  \"card_data_entry_mode\": \"2\",\n  \"card_sequence_number\": \"02\",\n  \"track2\": \"107547ee4bad13deb793c8f04ddc4a70c88913e2680856c38f8f48b4a5ab64c213d0512428a73f6d\",\n  \"ksn\": \"0d040b76543210e001f8\",\n  \"icc_related_data\": \"5010414D45524943414E204558505245535382025C008408A0000000250108018E180000000000000000420141035E035F0300000000000000008F01C9950502000080009A032011199B02E8009C010091005F201041454950532032332F56455220322E305F24032412315F25031711015F2A0209865F300202015F3401029F02060000000033009F03060000000000009F0608A0000000250108019F0702FF009F090200019F0D05FC50ECA8009F0E0500000000009F0F05FC78FCF8009F100706020103A400009F160F4D45524348414E54303030303030319F1A0200769F1C085445524D303030319F1E0830373030303034319F26087F490A8F139D58BA9F2701809F3303E0F0E89F34034103029F3501229F360204019F37049325DA479F4104000000019F4502DAC1\",\n  \"fallback_indicator\": false,\n  \"poi\": \"8701012007000041\",\n  \"poi_signature\": \"0c074a2b [APP_PRO2]:aa6d737ff3faef73b9c96b868a83e6f11e959950095b8045a02a9467\",\n  \"poi_type\": \"GERTEC_MP35P\",\n  \"trx_id\": \"1754288142011191155248701012007000041\",\n  \"tag\": \"chip\",\n  \"has_chip\": \"true\",\n  \"app_version\": \"1.2.1\"\n},\n\"cardholder\":\n{\n  \"name\": \"AEIPS 23/VER 2.0\"\n},\n\"security_code\": \"0000\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Integrating Mercado Pago SDK with React\nDESCRIPTION: Step-by-step guide to installing and using the Mercado Pago SDK in a React application, including component setup and payment button rendering\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/add-sdk-and-initialize.en.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-app my-mercadopago-app\nnpm install @mercadopago/sdk-react\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Wallet } from '@mercadopago/sdk-react';\n\nconst App = () => {\n  return (\n    <div>\n      <h1>MercadoPago Checkout</h1>\n      <Wallet initialization={{ preferenceId: 'YOUR_PREFERENCE_ID' }} />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating SPEI Transfer Payment with Mercado Pago in Ruby\nDESCRIPTION: Ruby implementation for creating a SPEI transfer payment using Mercado Pago SDK. It initializes the SDK with an access token, sets up payment data with transaction amount, description, payment method (clabe), and payer information, then creates the payment and retrieves the payment link.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.en.md#2025-04-18_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ACCESS_TOKEN')\n\npayment_data = {\n\n  transaction_amount: 5000,\n  description: \"description\",\n  payment_method_id: \"clabe\",\n  payer: {\n    type: \"customer\",\n    email: params[: email],\n    entity_type: \"individual\",\n    first_name: params[: payerFirstName]\n    last_name: params[: payerLastName]\n  }\n}\n\npayment_response = sdk.payment.create(payment_data)\npayment = payment_response[: response]\npayment_link = payment.transaction_details.external_resource_url;\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with 3DS in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to create a payment with 3DS enabled using the Mercado Pago SDK. It sets the access token, creates a payment client, and sends a payment creation request with the `three_d_secure_mode` set to `optional`. It requires the Mercado Pago PHP SDK and uses the `PaymentClient` to create the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-bigmerchants.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => <TRANSACTION_AMOUNT>,\n    \"token\" => \"CARD_TOKEN\",\n    \"description\" => \"<DESCRIPTION>\",\n    \"installments\" => <INSTALLMENTS_NUMBER>,\n    \"payment_method_id\" => \"<PAYMENT_METHOD_ID>\",\n    \"issuer_id\" => \"<ISSUER_ID>\",\n    \"payer\" => [\n      \"email\" => $_POST['email']\n    ],\n    \"three_d_secure_mode\" => \"optional\"\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago API in PHP\nDESCRIPTION: This PHP snippet demonstrates how to create a payment using the Mercado Pago API. It initializes the Mercado Pago configuration with an access token, creates a payment client, sets the X-Idempotency-Key in the request options, and sends a payment creation request with transaction details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-cards.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\Client\\Common\\RequestOptions;\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['<TRANSACTION_AMOUNT>'],\n    \"token\" => $_POST['<TOKEN>'],\n    \"description\" => $_POST['<DESCRIPTION>'],\n    \"installments\" => $_POST['<INSTALLMENTS>'],\n    \"payment_method_id\" => $_POST['<PAYMENT_METHOD_ID'],\n    \"issuer_id\" => $_POST['<ISSUER>'],\n    \"payer\" => [\n      \"email\" => $_POST['<EMAIL>'],\n      \"identification\" => [\n        \"type\" => $_POST['<IDENTIFICATION_TYPE'],\n        \"number\" => $_POST['<NUMBER>']\n      ]\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago API in Java (MLM)\nDESCRIPTION: This Java snippet (specific to MLM) shows how to create a payment using the Mercado Pago API. It sets custom headers including the X-Idempotency-Key, configures the access token, builds a PaymentCreateRequest with transaction details, and then uses the PaymentClient to create the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-cards.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest paymentCreateRequest =\n   PaymentCreateRequest.builder()\n       .transactionAmount(request.getTransactionAmount())\n       .token(request.getToken())\n       .description(request.getDescription())\n       .installments(request.getInstallments())\n       .paymentMethodId(request.getPaymentMethodId())\n       .payer(\n           PaymentPayerRequest.builder()\n               .email(request.getPayer().getEmail())\n               .firstName(request.getPayer().getFirstName())\n               .identification(\n                   IdentificationRequest.builder()\n                       .number(request.getPayer().getIdentification().getNumber())\n                       .build())\n               .build())\n       .build();\n\nclient.create(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Creating Checkout Pro Application in Mercado Pago\nDESCRIPTION: This markdown snippet provides step-by-step instructions for creating a Checkout Pro application in Mercado Pago's developer panel. It includes details on selecting the appropriate payment solution, integration type, and accepting necessary agreements.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/create-application.es.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Crear aplicación\n\n[TXTSNIPPET][/guides/snippets/applications/create-application]\n4. Ante la pregunta por el tipo de solución de pago a integrar, selecciona **Pagos online**, que es el tipo de solución correspondiente a tiendas virtuales. \n5. Como estás creando una aplicación para Checkout Pro, deberás indicar que **no** estás utilizando una [plataforma de e-commerce](/developers/es/docs#platform-list), ya que esta solución es para integrarse en sitios de desarrollo propio. \n6. Luego, elige **CheckoutPro** como el producto que estás integrando.\n7. En \"Modelo de integración\", opcionalmente puedes seleccionar el modelo de integración según tu modelo de negocio. \n8. Acepta la ----[mlb]---- [Declaración de Privacidad](https://www.mercadopago.com.br/privacidade) ------------ ----[mla, mlm, mlu, mco, mlc, mpe]---- [Declaración de Privacidad](https://www.mercadopago.com/privacidad) ------------ y los [Términos y condiciones](/developers/es/docs/resources/legal/terms-and-conditions) y haz clic en **Crear aplicación**.\n\n![create-application-2](/images/cow/create-application-2-es.png)\n\nEn [Tus integraciones](/developers/panel/app) podrás consultar el listado de todas tus aplicaciones creadas y acceder a los [detalles de la aplicación](/developers/es/docs/checkout-pro/more-resources/application-details) de cada una de ellas. \n\n> NOTE\n>\n> Nota\n>\n> Si lo deseas, puedes editar o eliminar una aplicación. En este último caso, debes tener en cuenta que tu tienda perderá la capacidad de recibir pagos a través de la integración con Mercado Pago asociada a esa aplicación. Para más información, consulta los [Detalles de la aplicación](/developers/es/docs/checkout-pro/more-resources/application-details).\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago SDK in Java\nDESCRIPTION: This snippet initializes a payment creation request using the Mercado Pago SDK. It sets custom headers, payment details, payer information, shipment details, and executes the payment creation. Required dependencies include Mercado Pago SDK and handling BigDecimal for monetary values.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/create-payments.en.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nList<PaymentItemRequest> items = new ArrayList<>();\n\nPaymentItemRequest item =\n   PaymentItemRequest.builder()\n       .id(\"PR0001\")\n       .title(\"Point Mini\")\n       .description(\"Producto Point para cobros con tarjetas mediante bluetooth\")\n       .pictureUrl(\n           \"https://http2.mlstatic.com/resources/frontend/statics/growth-sellers-landings/device-mlb-point-i_medium@2x.png\")\n       .categoryId(\"electronics\")\n       .quantity(1)\n       .unitPrice(new BigDecimal(\"58.8\"))\n       .build();\n\nitems.add(item);\n\nPaymentCreateRequest createRequest =\n   PaymentCreateRequest.builder()\n       .additionalInfo(\n           PaymentAdditionalInfoRequest.builder()\n               .items(items)\n               .payer(\n                   PaymentAdditionalInfoPayerRequest.builder()\n                       .firstName(\"Test\")\n                       .lastName(\"Test\")\n                       .phone(\n                           PhoneRequest.builder().areaCode(\"11\").number(\"987654321\").build())\n                       .build())\n               .shipments(\n                   PaymentShipmentsRequest.builder()\n                       .receiverAddress(\n                           PaymentReceiverAddressRequest.builder()\n                               .zipCode(\"12312-123\")\n                               .stateName(\"Rio de Janeiro\")\n                               .cityName(\"Buzios\")\n                               .streetName(\"Av das Nacoes Unidas\")\n                               .streetNumber(\"3003\")\n                               .build())\n                       .build())\n               .build())\n       .description(\"Payment for product\")\n       .externalReference(\"MP0001\")\n       .installments(1)\n       .order(PaymentOrderRequest.builder().type(\"mercadolibre\").build())\n       .payer(PaymentPayerRequest.builder().entityType(\"individual\").type(\"customer\").build())\n       .paymentMethodId(\"visa\")\n       .transactionAmount(new BigDecimal(\"58.8\"))\n       .build();\n\nclient.create(createRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Create Mercado Pago Payment with Boleto in C#\nDESCRIPTION: This code snippet demonstrates creating a payment using the Mercado Pago SDK in C#. It sets the access token, creates a `PaymentCreateRequest` object with payment details like transaction amount, description, payment method (bolbradesco), and payer information including identification.  A `PaymentClient` is used to send the payment creation request asynchronously.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = 105,\n    Description = \"Título del producto\",\n    PaymentMethodId = \"bolbradesco\",\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"test@test.com\",\n        FirstName = \"Test\",\n        LastName = \"User\",\n        Identification = new IdentificationRequest\n        {\n            Type = \"DNI\",\n            Number = \"19119119\",\n        },\n    },\n};\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK in Node.js\nDESCRIPTION: This Node.js code snippet initializes the Mercado Pago SDK with the access token. It imports the `MercadoPagoConfig` class and creates a new instance with your access token. Replace `'YOUR_ACCESS_TOKEN'` with your actual access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-development-environment.es.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n\"// SDK de Mercado Pago\nimport { MercadoPagoConfig, Preference } from 'mercadopago';\n// Agrega credenciales\nconst client = new MercadoPagoConfig({ accessToken: 'YOUR_ACCESS_TOKEN' });\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Status Screen Brick in JavaScript\nDESCRIPTION: JavaScript code for initializing and configuring the Status Screen Brick. It sets up the payment ID, defines callback functions for ready and error states, and creates the brick controller.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/status-screen-brick/default-rendering.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst renderStatusScreenBrick = async (bricksBuilder) => {\n const settings = {\n   initialization: {\n     paymentId: '<PAYMENT_ID>', // payment id to show\n   },\n   callbacks: {\n     onReady: () => {\n       /*\n         Callback called when Brick is ready.\n         Here you can hide loadings from your site, for example.\n       */\n     },\n     onError: (error) => {\n       // callback called for all Brick error cases\n       console.error(error);\n     },\n   },\n  };\n  window.statusScreenBrickController = await bricksBuilder.create(\n   'statusScreen',\n   'statusScreenBrick_container',\n   settings,\n  );  \n};\nrenderStatusScreenBrick(bricksBuilder);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago SDK in Node.js\nDESCRIPTION: This code snippet shows how to create a payment using the Mercado Pago SDK in Node.js. It configures the Mercado Pago client, sets up the payment data, and sends the request to create a payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/payment-submission.en.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mercadopago = require('mercadopago');\nimport { MercadoPagoConfig, Payment } from '@src/index';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>', options: { timeout: 5000 } });\n\nconst payment = new Payment(client);\n\npayment\n  .create({\n    body: {\n      transaction_amount: 100,\n      token: '<TOKEN>',\n      description: '<DESCRIPTION>',\n      installments: 1,\n      payment_method_id: '<PAYMENT_METHOD_ID>',\n      issuer_id: 310,\n      payer: {\n        email: '<EMAIL>',\n        identification: {\n          number: '12345678909',\n          type: 'CPF',\n        },\n      },\n    },\n  }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creating Open Finance Payment with Python SDK\nDESCRIPTION: Python implementation for creating an Open Finance payment via Mercado Pago's SDK. Shows the necessary parameters and structure for the payment request with Open Finance configuration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/advanced-openFinance.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsdk = mercadopago.SDK(\"access_token\")\n\npayment_data = {\n    \"transaction_amount\": 100,\n    \"description\": \"description\",\n    \"payment_method_id\": \"pix\",\n    \"payer\": {\n        \"email\": \"test@test.com\"\n        \"identification\": {\n            \"number\": \"12345678909\",\n            \"type\": \"CPF\"\n       }\n    },\n    \"point_of_interaction\": {\n        \"linked_to\": \"openfinance\"\n    }\n}\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods in Mercado Pago Java\nDESCRIPTION: This Java snippet illustrates the configuration of payment methods for a Mercado Pago preference, including excluded payment methods and types, with a specified number of installments. Java specific constructs like List and the PreferenceClient are used. It requires the Mercado Pago Java SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nPreferenceClient client = new PreferenceClient();\n//...\nList<PreferencePaymentMethodRequest> excludedPaymentMethods = new ArrayList<>();\nexcludedPaymentMethods.add(PreferencePaymentMethodRequest.builder().id(\"master\").build());\nexcludedPaymentMethods.add(PreferencePaymentMethodRequest.builder().id(\"amex\").build());\n\nList<PreferencePaymentTypeRequest> excludedPaymentTypes = new ArrayList<>();\nexcludedPaymentTypes.add(PreferencePaymentTypeRequest.builder().id(\"ticket\").build());\n\nPreferencePaymentMethodsRequest paymentMethods =\n   PreferencePaymentMethodsRequest.builder()\n       .excludedPaymentMethods(excludedPaymentMethods)\n       .excludedPaymentTypes(excludedPaymentTypes)\n       .installments(12)\n       .build();\n\nPreferenceRequest request = PreferenceRequest.builder().paymentMethods(paymentMethods).build();\n\nclient.create(request);\n//...\n```\n\n----------------------------------------\n\nTITLE: Making a Payment Request with Mercado Pago API using cURL\nDESCRIPTION: This cURL snippet shows how to initiate a payment request using the Mercado Pago API for government and public services. It includes headers for content type and authentication, as well as payload information like transaction amount, payment method, and payer details. This code requires an ACCESS_TOKEN for authorization and utilizes JSON payload to define transaction details, including additional information about items and payer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/goverments-public-services.en.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}} \\\n--data-raw '{\n    \"transaction_amount\": 150.00,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"debvisa\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Pedido01\",\n    \"description\": \"PEDIDO NOVO\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"payer\": {\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"12345678909\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"title\": \"Serviço\",\n                \"event_date\": \"2019-12-25T19:30:00.000-03:00\",\n                \"description\": \"Descrição de serviço\",\n                \"category_id\": \"service\",\n                \"quantity\": 1,\n                \"unit_price\": 150\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_prime_user\": true,\n            \"is_first_purchase_online\": true,\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"206233-2002\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"230032\"\n            },\n            \"authentication_type\": \"Facebook\",\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Card Fields\nDESCRIPTION: JavaScript code to initialize and mount secure card input fields using MercadoPago's field creation API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.en.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst cardNumberElement = mp.fields.create('cardNumber', {\nplaceholder: \"Card Number\"\n}).mount('form-checkout__cardNumber');\nconst expirationDateElement = mp.fields.create('expirationDate', {\nplaceholder: \"MM/YY\",\n}).mount('form-checkout__expirationDate');\nconst securityCodeElement = mp.fields.create('securityCode', {\nplaceholder: \"Security Code\"\n}).mount('form-checkout__securityCode');\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK in Java\nDESCRIPTION: This Java code snippet initializes the Mercado Pago SDK by setting the access token.  It uses the `MercadoPagoConfig` class to set the access token, which is required for authenticating API requests. Replace `PROD_ACCESS_TOKEN` with your actual production access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-development-environment.es.md#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n\"// SDK de Mercado Pago\nimport com.mercadopago.MercadoPagoConfig;\n// Agrega credenciales\nMercadoPagoConfig.setAccessToken(\\\"PROD_ACCESS_TOKEN\\\");\"\n```\n\n----------------------------------------\n\nTITLE: Creating Payments with MercadoPago Node.js SDK\nDESCRIPTION: This snippet demonstrates how to create a new payment using the MercadoPago Node.js SDK. It requires setting up a client with an access token and providing payment details including amount, description, payment method, and payer email.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/create-payments.en.md#2025-04-18_snippet_0\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'ACCESS_TOKEN' });\nconst payment = new Payment(client);\n\npayment.create({ body: {\n\ttransaction_amount: 12.34,\n\tdescription: '<DESCRIPTION>',\n\tpayment_method_id: '<PAYMENT_METHOD_ID>',\n\tpayer: {\n\t\temail: '<EMAIL>'\n\t},\n} }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creating Preference for Wallet Purchase in Go\nDESCRIPTION: This Go snippet creates a preference for Mercado Pago Wallet, specifying the `purpose` as `wallet_purchase`. It utilizes the Mercado Pago Go SDK. The code initializes a configuration, creates a preference client, defines the item details within a `preference.Request`, and then calls the `Create` method to create the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mp-wallet.en.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/preference\"\n)\n\ncfg, err := config.New(\"{{ACCESS_TOKEN}}\")\nif err != nil {\n    fmt.Println(err)\n}\n\nclient := preference.NewClient(cfg)\n\nrequest := preference.Request{\t\n\tItems: []preference.ItemRequest{\n\t\t{\n\t\t\tTitle:       \"My product\",\n\t\t\tUnitPrice:   100,\n\t\t\tQuantity:    1,\n\t\t},\n\t},\n\tPurpose: \"wallet_purchase\",\n}\n\nresource, err := client.Create(context.Background(), request)\nif err != nil {\n\tfmt.Println(err)\n\treturn\n}\n\nfmt.Println(resource)\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with MercadoPago SDK in Java\nDESCRIPTION: This snippet demonstrates how to create a payment using the MercadoPago SDK in Java. It sets custom headers, initializes the payment client, and constructs the payment request with item details, payer information, and shipping details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/create-payments.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nList<PaymentItemRequest> items = new ArrayList<>();\n\nPaymentItemRequest item =\n   PaymentItemRequest.builder()\n       .id(\"PR0001\")\n       .title(\"Point Mini\")\n       .description(\"Producto Point para cobros com cartões mediante bluetooth\")\n       .pictureUrl(\n           \"https://http2.mlstatic.com/resources/frontend/statics/growth-sellers-landings/device-mlb-point-i_medium@2x.png\")\n       .categoryId(\"electronics\")\n       .quantity(1)\n       .unitPrice(new BigDecimal(\"58.8\"))\n       .build();\n\nitems.add(item);\n\nPaymentCreateRequest createRequest =\n   PaymentCreateRequest.builder()\n       .additionalInfo(\n           PaymentAdditionalInfoRequest.builder()\n               .items(items)\n               .payer(\n                   PaymentAdditionalInfoPayerRequest.builder()\n                       .firstName(\"Test\")\n                       .lastName(\"Test\")\n                       .phone(\n                           PhoneRequest.builder().areaCode(\"11\").number(\"987654321\").build())\n                       .build())\n               .shipments(\n                   PaymentShipmentsRequest.builder()\n                       .receiverAddress(\n                           PaymentReceiverAddressRequest.builder()\n                               .zipCode(\"12312-123\")\n                               .stateName(\"Rio de Janeiro\")\n                               .cityName(\"Buzios\")\n                               .streetName(\"Av das Nacoes Unidas\")\n                               .streetNumber(\"3003\")\n                               .build())\n                       .build())\n               .build())\n       .description(\"Payment for product\")\n       .externalReference(\"MP0001\")\n       .installments(1)\n       .order(PaymentOrderRequest.builder().type(\"mercadolibre\").build())\n       .payer(PaymentPayerRequest.builder().entityType(\"individual\").type(\"customer\").build())\n       .paymentMethodId(\"visa\")\n       .transactionAmount(new BigDecimal(\"58.8\"))\n       .build();\n\nclient.create(createRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Criando preferência de pagamento com Node.js no Mercado Pago\nDESCRIPTION: Este snippet mostra como criar uma preferência de pagamento usando o SDK do Mercado Pago em Node.js. Ele configura um item com título, quantidade e preço unitário.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-preferences.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst preference = new Preference(client);\n\npreference.create({\n  body: {\n    items: [\n      {\n        title: 'Meu produto',\n        quantity: 1,\n        unit_price: 2000\n      }\n    ],\n  }\n})\n.then(console.log)\n.catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago Integration in JavaScript and React\nDESCRIPTION: This snippet shows how to initialize the Mercado Pago integration by setting the public key. Examples are provided for both JavaScript using MercadoPago object and React by importing specific modules. Required parameters include 'YOUR_PUBLIC_KEY'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-checkout.en.md#2025-04-18_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mp = new MercadoPago('YOUR_PUBLIC_KEY');\nconst bricksBuilder = mp.bricks();\n```\n\n----------------------------------------\n\nTITLE: Creating Secure Card Token in Mercado Pago\nDESCRIPTION: This function creates a secure token representing the card data for payment processing. It handles form submission, captures cardholder information, and uses Mercado Pago's fields API to generate a token ID that will be sent to the server. The token is valid for 7 days and can only be used once.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst formElement = document.getElementById('form-checkout');\nformElement.addEventListener('submit', createCardToken);\n\nasync function createCardToken(event) {\n  try {\n    const tokenElement = document.getElementById('token');\n    if (!tokenElement.value) {\n      event.preventDefault();\n      const token = await mp.fields.createCardToken({\n        cardholderName: document.getElementById('form-checkout__cardholderName').value,\n        identificationType: document.getElementById('form-checkout__identificationType').value,\n        identificationNumber: document.getElementById('form-checkout__identificationNumber').value,\n      });\n      tokenElement.value = token.id;\n      formElement.requestSubmit();\n    }\n  } catch (e) {\n    console.error('error creating card token: ', e)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PSE Payment in Java with Mercado Pago\nDESCRIPTION: Java implementation for processing PSE payments with Mercado Pago SDK. The code builds a complex payment request using builder pattern for each component, including payer information, transaction details, and idempotency key for safe transaction processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pse.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n        Map<String, String> customHeaders = Map.of(\"X-Idempotency-Key\", \"...\");\n        MPRequestOptions requestOptions = MPRequestOptions.builder().customHeaders(customHeaders).build();\n\n        PaymentClient client = new PaymentClient();\n\n        IdentificationRequest identification = IdentificationRequest.builder()\n                .type(request.getIdentificationType())\n                .number(request.getIdentificationNumber())\n                .build();\n\n        PaymentPayerAddressRequest address = PaymentPayerAddressRequest.builder()\n                .zipCode(request.getZipCode())\n                .streetName(request.getStreetName())\n                .streetNumber(request.getStretNumber())\n                .neighborhood(request.getNeighborhood())\n                .city(request.getCity())\n                .federalUnit(request.getFederalUnit())\n                .build();\n\n        PaymentPayerPhoneRequest phone = PaymentPayerPhoneRequest.builder()\n                .areaCode(request.getPhoneAreaCode())\n                .number(request.getPhoneNumber())\n                .build();\n\n        PaymentPayerRequest payer = PaymentPayerRequest.builder()\n                .email(request.getEmail())\n                .entityType(\"individual\")\n                .firstName(\"firstName\")\n                .lastName(\"lastName\")\n                .identification(identification)\n                .address(address)\n                .phone(phone)\n                .build();\n\n        PaymentAdditionalInfoRequest additionalInfo = PaymentAdditionalInfoRequest.builder()\n                .ipAddress(\"127.0.0.1\")\n                .build();\n\n        PaymentTransactionDetailsRequest transactionDetails = PaymentTransactionDetailsRequest.builder()\n                .financialInstitution(request.getFinancialInstitution())\n                .build();\n\n        PaymentCreateRequest paymentCreateRequest = PaymentCreateRequest.builder()\n                .transactionAmount(new BigDecimal(5000))\n                .description(\"Product description\")\n                .paymentMethodId(\"pse\")\n                .additionalInfo(additionalInfo)\n                .transactionDetails(transactionDetails)\n                .callbackUrl(\"https://your-site.com\")\n                .notificationUrl(\"https://your-site.com\")\n                .payer(payer)\n                .build();\n\n        client.create(paymentCreateRequest);\n```\n\n----------------------------------------\n\nTITLE: Creating Customers with Mercado Pago PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a new customer using the Mercado Pago CustomerClient. It includes customer details such as contact information, identification, address, and other metadata.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/customers.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new CustomerClient();\n  $body = [\n    'email' => 'test_user_123243148932@testuser.com',\n    'first_name' => 'Jhon',\n    'last_name' => 'Doe',\n    'phone' => [\n        'area_code' => '55',\n        'number' => '991234567'\n    ],\n    'identification' => [\n        'type' => 'CPF',\n        'number' => '12345678900'\n    ],\n    'default_address' => 'Home',\n    'address' => [\n        'id' => '123123',\n        'zip_code' => '01234567',\n        'street_name' => 'Rua Exemplo',\n        'street_number' => 123,\n        'city' => []\n    ],\n    'date_registered' => '2023-09-07T11:37:30.000-04:00',\n    'description' => 'Description del user',\n    'default_card' => 'None'\n  ];\n\n  $client->create($body);\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Methods with Mercado Pago SDKs\nDESCRIPTION: Code examples for fetching available payment methods using Mercado Pago's SDKs in different programming languages. Each implementation shows how to configure the SDK with access token and make a GET request to the payment methods endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n  $client = new PaymentMethodClient();\n  $payment_method = $client->get();\n\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, PaymentMethods } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst paymentMethods = new PaymentMethods(client);\n\npaymentMethods.get().then((result) => console.log(result))\n  .catch((error) => console.log(error));\n```\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nPaymentMethodClient client = new PaymentMethodClient();\nclient.list();\n\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\npayment_methods_response = sdk.payment_methods.get()\npayment_methods = payment_methods_response[:response]\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.PaymentMethod;\nusing MercadoPago.Config;\nusing MercadoPago.Resource;\nusing MercadoPago.Resource.PaymentMethod;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar client = new PaymentMethodClient();\nResourcesList<PaymentMethod> paymentMethods = await client.ListAsync();\n\n```\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\npayment_methods_response = sdk.payment_methods().list_all()\npayment_methods = payment_methods_response[\"response\"]\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/payment_methods' \\\n```\n\n----------------------------------------\n\nTITLE: Updating Payment Amount with React Component\nDESCRIPTION: Implementation of Payment Brick in React with a button to update the payment amount. Uses the usePaymentBrick hook to access the update method and demonstrates integration with the Payment component.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/update-data.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { Payment, usePaymentBrick } from \"@mercadopago/sdk-react\";\nconst App = () => {\n  const { update } = usePaymentBrick();\n  const customization = {\n    paymentMethods: {\n      creditCard: \"all\",\n      debitCard: \"all\",\n    },\n  };\n  return (\n    <>\n      <button type=\"button\" onClick={() => update({ amount: 95 })}>\n        Update amount\n      </button>\n      <Payment\n        initialization={{ amount: 100 }}\n        customization={customization}\n        onSubmit={async (param) => {\n          console.log(param);\n        }}\n      />\n    </>\n  );\n};\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference with Mercado Pago SDK in Java\nDESCRIPTION: This snippet demonstrates how to create a new payment preference using the Mercado Pago SDK. It initializes a PreferenceClient, constructs a PreferenceRequest with items and tracking information, and sends a create request. Dependencies include the Mercado Pago SDK and related classes for handling preferences.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/preferences.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nPreferenceClient client = new PreferenceClient();\n\nList<PreferenceItemRequest> items = new ArrayList<>();\nPreferenceItemRequest item =\n   PreferenceItemRequest.builder()\n       .title(\"Dummy Title\")\n       .description(\"Dummy description\")\n       .pictureUrl(\"http://www.myapp.com/myimage.jpg\")\n       .quantity(1)\n       .currencyId(\"US\")\n       .unitPrice(new BigDecimal(\"10\"))\n       .build();\nitems.add(item);\n\nList<PreferenceTrackRequest> tracks = new ArrayList<>();\nPreferenceTrackRequest googleTrack = PreferenceTrackRequest.builder().type(\"google_ad\").build();\n\ntracks.add(googleTrack);\n\nPreferenceRequest request = PreferenceRequest.builder().items(items).tracks(tracks).build();\n\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Processing Payment with Python\nDESCRIPTION: Python implementation for processing credit card payments with Mercado Pago. Creates a payment request with transaction amount, token, and payer identification details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.en.md#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport market\nsdk = Mercadopago.SDK(\"ACCESS_TOKEN\")\n\npayment_data = {\n\"transaction_amount\": float(request.POST.get(\"transaction_amount\")),\n\"token\": request.POST.get(\"token\"),\n\"description\": request.POST.get(\"description\"),\n\"installments\": int(request.POST.get(\"installments\")),\n\"payment_method_id\": request.POST.get(\"payment_method_id\"),\n\"payer\": {\n\"email\": request.POST.get(\"email\"),\n\"identification\": {\n\"type\": request.POST.get(\"type\"), \n\"number\": request.POST.get(\"number\")\n}\n}\n}\n\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n\nprint(payment)\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with 3DS Optional Mode - Java\nDESCRIPTION: This Java snippet shows how to create a payment with `threeDSecureMode` set to \"optional\". This instructs Mercado Pago to decide if a 3DS challenge is needed based on risk. It requires the Mercado Pago Java SDK and an access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.es.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"<ENV_ACCESS_TOKEN>\");\n    PaymentClient client = new PaymentClient();\n    PaymentCreateRequest createRequest =\n        PaymentCreateRequest.builder()\n            .transactionAmount(new BigDecimal(<TRANSACTION_AMOUNT>))\n            .token(\"<CARD_TOKEN>\")\n            .description(\"<DESCRIPTION>\")\n            .installments(<INSTALLLMENTS_NUMBER>)\n            .paymentMethodId(\"<PAYMENT_METHOD_ID>\")\n            .payer(\n               PaymentPayerRequest.builder()\n                 .email(\"<BUYER_EMAIL>\")\n                 .build()\n            )\n            .threeDSecureMode(\"optional\")\n            .build();\n    client.create(createRequest);\n\n```\n\n----------------------------------------\n\nTITLE: Creating Payment using MercadoPago API - Curl\nDESCRIPTION: This cURL command demonstrates how to create a payment request with MercadoPago API. It includes the necessary headers for authorization and idempotency, and the JSON body with transaction and payer details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.es.md#2025-04-18_snippet_18\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n--header 'X-Idempotency-Key: <SOME_UNIQUE_VALUE>' \\\n--header 'X-Product-Id: <SOME_UNIQUE_VALUE>' \\\n--data-raw '{\n   \"transaction_amount\": 100,\n   \"description\": \"Titulo do produto\",\n   \"payment_method_id\": \"bolbradesco\",\n   \"payer\": {\n       \"email\": \"test_user_12345@testuser.com\",\n       \"first_name\": \"Test\",\n       \"last_name\": \"User\",\n       \"identification\": {\n           \"type\": \"CPF\",\n           \"number\": \"01234567890\"\n       }\n       \"address\": {\n           \"zip_code\": \"88000000\",\n           \"street_name\": \"Nombre de calle\",\n           \"street_number\": \"123\",\n           \"neighborhood\": \"Barrio\",\n           \"city\": \"Ciudad\",\n           \"federal_unit\": \"UF\"\n       }\n   }\n}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Checkout with Preference ID in JavaScript\nDESCRIPTION: This JavaScript code initializes the MercadoPago checkout using the preference ID and specifies the container for rendering the wallet button.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-checkout.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nmp.bricks().create(\"wallet\", \"wallet_container\", {\n   initialization: {\n       preferenceId: \"<PREFERENCE_ID>\",\n   },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago API in Ruby\nDESCRIPTION: This Ruby snippet demonstrates creating a payment using the Mercado Pago API. It initializes the SDK with an access token, sets custom headers with the X-Idempotency-Key, constructs the payment data from the request parameters, and then creates the payment using the SDK. The payment response is then printed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-cards.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_data = {\n  transaction_amount: params[:transactionAmount].to_f,\n  token: params[:token],\n  description: params[:description],\n  installments: params[:installments].to_i,\n  payment_method_id: params[:paymentMethodId],\n  payer: {\n    email: params[:cardholderEmail],\n    identification: {----[mla, mlb, mlu, mlc, mpe, mco]----\n      type: params[:identificationType],------------\n      number: params[:identificationNumber]\n    },\n    first_name: params[:cardholderName]\n  }\n}\n\npayment_response = sdk.payment.create(payment_data, custom_request_options)\npayment = payment_response[:response]\n\nputs payment\n```\n\n----------------------------------------\n\nTITLE: Creating Card Payment with Mercado Pago PHP SDK\nDESCRIPTION: Uses the Mercado Pago PHP SDK to create a card payment. Includes setting the access token, creating a payment client, and sending the payment request with transaction details and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-cardform.en.md#2025-04-18_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\Client\\Common\\RequestOptions;\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['<TRANSACTION_AMOUNT>'],\n    \"token\" => $_POST['<TOKEN>'],\n    \"description\" => $_POST['<DESCRIPTION>'],\n    \"installments\" => $_POST['<INSTALLMENTS>'],\n    \"payment_method_id\" => $_POST['<PAYMENT_METHOD_ID'],\n    \"issuer_id\" => $_POST['<ISSUER>'],\n    \"payer\" => [\n      \"email\" => $_POST['<EMAIL>'],\n      \"identification\" => [\n        \"type\" => $_POST['<IDENTIFICATION_TYPE'],\n        \"number\" => $_POST['<NUMBER>']\n      ]\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Criando Pagamento com Efecty usando Node.js\nDESCRIPTION: Código Node.js para criar um pagamento via Efecty usando o SDK do Mercado Pago. Utiliza Promises para gerenciar a resposta ou erro da API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MercadoPagoConfig, Payments } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<YOUR_ACCESS_TOKEN>' });\nconst payments = new Payments(client);\n\npayments.create({\nbody: {\n\t\ttransaction_amount: '<TRANSACTION_AMOUNT>',\n\t\tpayment_method_id: '<PAYMENT_METHOD_ID>',\n\t\tpayer: {\n\t\t\temail: '<EMAIL>'\n\t\t\t}\n},\n\trequestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n\t.then((result) => console.log(result))\n\t.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Initializing Wallet Checkout\nDESCRIPTION: Initializes the wallet checkout using the preference ID and container element.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-mp-wallet.en.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmp.bricks().create(\"wallet\", \"wallet_container\", {\n  initialization: {\n    preferenceId: \"<PREFERENCE_ID>\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK and Creating Card Token in React\nDESCRIPTION: This snippet demonstrates how to initialize the Mercado Pago SDK, use Secure Fields components for card information input, and create a card token. It includes the setup of CardNumber, SecurityCode, and ExpirationDate fields, along with a function to generate the card token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/react-core-methods.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport React from 'react';\nimport {\n  initMercadoPago,\n  createCardToken,\n  CardNumber,\n  SecurityCode,\n  ExpirationDate,\n} from '@mercadopago/sdk-react';\n\ninitMercadoPago('YOUR-PUBLIC-KEY');\n\nconst App = () => {\n const cardToken = async () => {\n   const response = await createCardToken({\n     cardholderName: '<CARD_HOLDER_NAME>',\n     identificationType: '<BUYER_IDENTIFICATION_TYPE>',\n     identificationNumber: '<BUYER_IDENTIFICATION_NUMBER>',\n   })\n   console.log('Card Token Response = ', response)\n }\n return (\n   <>\n     <CardNumber placeholder='Card Number'/>\n     <SecurityCode placeholder='Security Code' />\n     <ExpirationDate placeholder='Expiration Date' mode='short'/>\n     <button onClick={() => cardToken()}>Pay</button>\n   </>\n );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Request using cURL for Mercado Pago API\nDESCRIPTION: This cURL command shows how to send a POST request to the Mercado Pago API to create a payment. It includes necessary headers for authorization and content type, as well as the JSON body containing payment details, payer information, and additional fields needed for the transaction.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pse.en.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n-H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n-H 'Content-Type: application/json' \\\n--data '{\n    \"transaction_amount\": 5000,\n    \"description\": \"Product description\",\n    \"payment_method_id\": \"pse\",\n    \"callback_url\": \"http://www.your-site.com\",\n    \"notification_url\": \"http://www.your-site.com\",\n    \"payer\": {\n        \"email\": \"test_user_19549678@testuser.com\",\n        \"entity_type\": \"individual\",\n        \"first_name\": \"first name\",\n        \"last_name\": \"last_name\",\n        \"identification\": {\n            \"type\": \"type\",\n            \"number\": \"number\"\n        }, \n        \"address\": {\n          \"zip_code\": \"111\",\n          \"street_name\": \"street name\",\n          \"street_number\": \"street number\",\n          \"neighborhood\": \"neighborhood\",\n          \"city\": \"city\",\n          \"federal_unit\": \"federal unit\"\n        },\n        \"phone\": {\n          \"area_code\": \"area code\",\n          \"number\": \"number\"\n        }\n    },\n    \"additional_info\": {\n        \"ip_address\": \"127.0.0.1\"\n    },\n    \"transaction_details\": {\n        \"financial_institution\": \"1009\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Request with 3DS in Java\nDESCRIPTION: This Java snippet demonstrates initializing the Mercado Pago SDK and creating a payment request including the 3DS mode. The code sets up required parameters such as transaction amount and card token for the payment process.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"<ENV_ACCESS_TOKEN>\");\nPaymentClient client = new PaymentClient();\nPaymentCreateRequest createRequest =\n    PaymentCreateRequest.builder()\n        .transactionAmount(new BigDecimal(<TRANSACTION_AMOUNT>))\n        .token(\"<CARD_TOKEN>\")\n        .description(\"<DESCRIPTION>\")\n        .installments(<INSTALLLMENTS_NUMBER>)\n        .paymentMethodId(\"<PAYMENT_METHOD_ID>\")\n        .payer(\n           PaymentPayerRequest.builder()\n             .email(\"<BUYER_EMAIL>\")\n             .build()\n        )\n        .threeDSecureMode(\"optional\")\n        .build();\nclient.create(createRequest);\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with Mercado Pago SDK\nDESCRIPTION: This snippet demonstrates how to create a new payment using the Mercado Pago SDK. It initializes a MercadoPagoConfig with an access token, then uses the Payment class to create a payment with specified transaction amount, description, payment method ID, and payer email. Replace placeholders with actual values.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/create-payments.es.md#2025-04-18_snippet_0\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'ACCESS_TOKEN' });\nconst payment = new Payment(client);\n\npayment.create({ body: {\n\ttransaction_amount: 12.34,\n\tdescription: '<DESCRIPTION>',\n\tpayment_method_id: '<PAYMENT_METHOD_ID>',\n\tpayer: {\n\t\temail: '<EMAIL>'\n\t},\n} }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Setting Expiration Date for Boleto Payments in Multiple Languages\nDESCRIPTION: Code examples demonstrating how to set the expiration date for boleto payments using the ISO 8601 format across different programming languages. The date must be between 1 and 30 days from issuance.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n===\nThe date uses the ISO 8601 format: yyyy-MM-dd'T'HH:mm:ssz\n===\n$payment->date_of_expiration = \"2020-05-30T23:59:59.000-04:00\";\n```\n\nLANGUAGE: node\nCODE:\n```\n===\nThe date uses the ISO 8601 format: yyyy-MM-dd'T'HH:mm:ssz\n===\ndate_of_expiration: \"2020-05-30T23:59:59.000-04:00\",\n```\n\nLANGUAGE: java\nCODE:\n```\n===\nThe date uses the ISO 8601 format: yyyy-MM-dd'T'HH:mm:ssz\n===\npayment.setDateOfExpiration(\"2020-05-30T23:59:59.000-04:00\")\n```\n\nLANGUAGE: ruby\nCODE:\n```\n===\nThe date uses the ISO 8601 format: yyyy-MM-dd'T'HH:mm:ssz\n===\ndate_of_expiration: '2020-05-30T23:59:59.000-04:00',\n```\n\nLANGUAGE: csharp\nCODE:\n```\n===\nThe date uses the ISO 8601 format: yyyy-MM-dd'T'HH:mm:ssz\n===\npaymentCreateRequest.DateOfExpiration = DateTime.Parse(\"2020-05-30T23:59:59.000-04:00\");\n```\n\nLANGUAGE: python\nCODE:\n```\n===\nThe date uses the ISO 8601 format: yyyy-MM-dd'T'HH:mm:ssz\n===\n\n\"date_of_expiration\": \"2020-05-30T23:59:59.000-04:00\"\n```\n\nLANGUAGE: curl\nCODE:\n```\n===\nThe date uses the ISO 8601 format: yyyy-MM-dd'T'HH:mm:ssz\n===\n\"date_of_expiration\": \"2020-05-30T23:59:59.000-04:00\",\n```\n\n----------------------------------------\n\nTITLE: Hiding Form Title in Card Payment Brick (React JSX)\nDESCRIPTION: This snippet shows how to hide the form title and accepted card flags in the Card Payment Brick using React JSX. It sets the 'hideFormTitle' property to true in the customization object.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/hide-element.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n   hideFormTitle: true\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Preferences - JSON\nDESCRIPTION: This JSON snippet represents a complete payment preference configuration for MercadoPago, including item details, payer information, and various payment methods settings. It allows for flexibility in payment processing, especially for high-value transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"items\": [\n        {\n            \"id\": \"item-ID-1234\",\n            \"title\": \"My product\",\n            \"currency_id\": \"BRL\",\n            \"picture_url\": \"https://www.mercadopago.com/org-img/MP3/home/logomp3.gif\",\n            \"description\": \"Item description\",\n            \"category_id\": \"art\",\n            \"quantity\": 1,\n            \"unit_price\": 75.76\n        }\n    ],\n    \"payer\": {\n        \"name\": \"<PAYER_NAME_HERE>\",\n        \"surname\": \"<PAYER_SURNAME_HERE>\",\n        \"email\": \"<PAYER_EMAIL_HERE>\",\n        \"phone\": {\n            \"area_code\": \"<PAYER_AREA_CODE_HERE>\",\n            \"number\": \"<PAYER_PHONE_NUMBER_HERE>\"\n        },\n        \"identification\": {\n            \"type\": \"<PAYER_DOC_TYPE_HERE>\",\n            \"number\": \"<PAYER_DOC_NUMBER_HERE>\"\n        },\n        \"address\": {\n            \"street_name\": \"Street\",\n            \"street_number\": 123,\n            \"zip_code\": \"<PAYER_ZIP_CODE_HERE>\"\n        }\n    },\n    \"back_urls\": {\n        \"success\": \"https://www.success.com\",\n        \"failure\": \"http://www.failure.com\",\n        \"pending\": \"http://www.pending.com\"\n    },\n    \"auto_return\": \"approved\",\n    \"payment_methods\": {\n        \"excluded_payment_methods\": [\n            {\n                \"id\": \"master\"\n            }\n        ],\n        \"excluded_payment_types\": [\n            {\n                \"id\": \"ticket\"\n            }\n        ],\n        \"installments\": 12\n    },\n    \"notification_url\": \"https://www.your-site.com/ipn\",\n    \"statement_descriptor\": \"MYBUSINESS\",\n    \"external_reference\": \"Reference_1234\",\n    \"expires\": true,\n    \"expiration_date_from\": \"2016-02-01T12:00:00.000-04:00\",\n    \"expiration_date_to\": \"2016-02-28T12:00:00.000-04:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mercado Pago SDK\nDESCRIPTION: Instructions for installing the Mercado Pago SDK using package managers like Composer, npm, Maven, gem, NuGet, and pip. Each language has its own installation command.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-checkout.en.md#2025-04-18_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nphp composer.phar require \"mercadopago/dx-php\"\n```\n\nLANGUAGE: Node.js\nCODE:\n```\nnpm install Mercadopago\n```\n\nLANGUAGE: Java\nCODE:\n```\n<dependency>\n<groupId>com.mercadopago</groupId>\n<artifactId>sdk-java</artifactId>\n<version>2.1.7</version>\n</dependency>\n```\n\nLANGUAGE: Ruby\nCODE:\n```\ngem install Mercadopago-sdk\n```\n\nLANGUAGE: C#\nCODE:\n```\nnuget install Mercadopago-sdk\n```\n\nLANGUAGE: Python\nCODE:\n```\npip3 install MercadoPago\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Bancário Payment with MercadoPago PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a Boleto Bancário payment using the MercadoPago PHP SDK. It includes setting up the client, configuring request options, and sending payment details to the API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse MercadoPago\\Client\\Payment\\PaymentClient;\nuse MercadoPago\\Client\\Common\\RequestOptions;\nuse MercadoPago\\MercadoPagoConfig;\n\nMercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n$client = new PaymentClient();\n$request_options = new RequestOptions();\n$request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n$payment = $client->create([\n  \"transaction_amount\" => (float) $_POST['<TRANSACTION_AMOUNT>'],\n  \"payment_method_id\" => $_POST['<PAYMENT_METHOD_ID>'],\n  \"payer\" => [\n    \"email\" => $_POST['<EMAIL>'],\n    \"first_name\" => $_POST['<NOME>'],\n    \"last_name\" => $_POST['<SOBRENOME>'],\n    \"identification\" => [\n      \"type\" =>  $_POST['<TIPO DE DOCUMENTO>'],\n      \"number\" => $_POST['<NUMERO>']\n    ],\n    \"address\" => [\n      \"zip_code\" => $_POST['<CEP>'],\n      \"city\" => $_POST['<CIDADE>'],\n      \"street_name\" => $_POST['<RUA>'],\n      \"street_number\" => $_POST['<NÚMERO>'],\n      \"neighborhood\" => $_POST['<BAIRRO>'],\n      \"federal_unit\" => $_POST['<SIGLA DO ESTADO>']\n    ]\n  ]\n], $request_options);\necho implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating a Preference with Mercado Pago SDK in Python\nDESCRIPTION: This snippet demonstrates how to create a basic preference using the Mercado Pago SDK. It initializes the SDK with access token credentials and constructs a preference data object containing item details such as title, quantity, and unit price. The created preference is stored in a variable after making a call to create the preference through the SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/preferences.en.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Mercado Pago SDK\nimport mercadopago\n# Add Your credentials\nsdk = mercadopago.SDK(\"PROD_ACCESS_TOKEN\")\n# Create a preference item\npreference_data = {\n    \"items\": [\n        {\n            \"title\": \"My Item\",\n            \"quantity\": 1,\n            \"unit_price\": 75.76\n        }\n    ]\n}\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with MercadoPago - cURL\nDESCRIPTION: This cURL snippet demonstrates how to send a POST request to the MercadoPago API for creating a payment. The request includes various payment parameters along with headers for authorization and content type.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.en.md#2025-04-18_snippet_20\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'Authorization: <ENV_ACCESS_TOKEN>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"payer\": {\n        \"email\": \"<BUYER_EMAIL>\"\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"quantity\": <ITEM_QUANTITY>,\n                \"category_id\": <CATEGORY_ID>,\n                \"title\": <ITEM_TITLE>,\n                \"unit_price\": <TRANSACTION_AMOUNT>\n            }\n        ]\n    },\n    \"payment_method_id\": <PAYMENT_METHOD_ID>,\n    \"marketplace\": \"NONE\",\n    \"installments\": <INSTALLLMENTS_NUMBER>,\n    \"transaction_amount\": <TRANSACTION_AMOUNT>,\n    \"description\": \"<DESCRIPTION>\",\n    \"token\": \"CARD_TOKEN\",\n    \"three_d_secure_mode\": \"optional\",\n    \"capture\": true,\n    \"binary_mode\": false\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago SDK in Ruby\nDESCRIPTION: This code snippet shows how to create a payment using the Mercado Pago SDK in Ruby. It sets up the SDK, configures custom headers with an idempotency key, and sends the payment data to the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/payment-submission.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_data = {\n  transaction_amount: params[:transactionAmount].to_f,\n  token: params[:token],\n  installments: params[:installments].to_i,\n  payment_method_id: params[:paymentMethodId],\n  payer: {\n    email: params[:cardholderEmail],\n    identification: {\n      type: params[:identificationType],\n      number: params[:identificationNumber]\n    }\n  }\n}\n\npayment_response = sdk.payment.create(payment_data, custom_request_options)\npayment = payment_response[:response]\n\nputs payment\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with MercadoPago Java SDK\nDESCRIPTION: Demonstrates how to create a payment with detailed item information, payer details, and shipping address using the PaymentClient\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/create-payments.es.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nList<PaymentItemRequest> items = new ArrayList<>();\n\nPaymentItemRequest item =\n   PaymentItemRequest.builder()\n       .id(\"PR0001\")\n       .title(\"Point Mini\")\n       .description(\"Producto Point para cobros con tarjetas mediante bluetooth\")\n       .pictureUrl(\n           \"https://http2.mlstatic.com/resources/frontend/statics/growth-sellers-landings/device-mlb-point-i_medium@2x.png\")\n       .categoryId(\"electronics\")\n       .quantity(1)\n       .unitPrice(new BigDecimal(\"58.8\"))\n       .build();\n\nitems.add(item);\n\nPaymentCreateRequest createRequest =\n   PaymentCreateRequest.builder()\n       .additionalInfo(\n           PaymentAdditionalInfoRequest.builder()\n               .items(items)\n               .payer(\n                   PaymentAdditionalInfoPayerRequest.builder()\n                       .firstName(\"Test\")\n                       .lastName(\"Test\")\n                       .phone(\n                           PhoneRequest.builder().areaCode(\"11\").number(\"987654321\").build())\n                       .build())\n               .shipments(\n                   PaymentShipmentsRequest.builder()\n                       .receiverAddress(\n                           PaymentReceiverAddressRequest.builder()\n                               .zipCode(\"12312-123\")\n                               .stateName(\"Rio de Janeiro\")\n                               .cityName(\"Buzios\")\n                               .streetName(\"Av das Nacoes Unidas\")\n                               .streetNumber(\"3003\")\n                               .build())\n                       .build())\n               .build())\n       .description(\"Payment for product\")\n       .externalReference(\"MP0001\")\n       .installments(1)\n       .order(PaymentOrderRequest.builder().type(\"mercadolibre\").build())\n       .payer(PaymentPayerRequest.builder().entityType(\"individual\").type(\"customer\").build())\n       .paymentMethodId(\"visa\")\n       .transactionAmount(new BigDecimal(\"58.8\"))\n       .build();\n\nclient.create(createRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Configuring MercadoPago Credentials\nDESCRIPTION: Initialize MercadoPago instance with public key credentials for secure payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.en.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  const mp = new MercadoPago(\"YOUR_PUBLIC_KEY\");\n</script>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loadMercadoPago } from \"@mercadopago/sdk-js\";\n\nawait loadMercadoPago();\nconst mp = new window.MercadoPago(\"YOUR_PUBLIC_KEY\");\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Industry-Specific Data using MercadoPago API\nDESCRIPTION: Example of a POST request to create a payment for an entertainment ticket purchase. Demonstrates how to structure the request with additional industry-specific data including buyer information, item details, and shipping preferences.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--data-raw '{\n    \"transaction_amount\": 12.34,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"master\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Pedido 01\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"description\": \"PEDIDO NOVO - INGRESSO\",\n    \"payer\": {\n        \"first_name\": \"Nome\",\n        \"last_name\": \"Sobrenome\",\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"19119119100\"\n        },\n        \"address\": {\n            \"zip_code\": \"06233200\",\n            \"street_name\": \"Av. das Nações Unidas\",\n            \"street_number\": \"3003\",\n            \"neighborhood\": \"Bonfim\",\n            \"city\": \"Osasco\",\n            \"federal_unit\": \"SP\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"1941\",\n                \"title\": \"25/08/2022 | Pista Inteira5 lote - GREEN VALLEY GRAMADO 2022\",\n                \"description\": \"25/08/2022 | Pista Inteira5 lote - GREEN VALLEY GRAMADO 2022\",\n                \"picture_url\": null,\n                \"category_id\": \"Tickets\",\n                \"quantity\": 1,\n                \"unit_price\": 100.00,\n                \"event_date\": \"2019-12-25T19:30:00.000-03:00\"\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_prime_user\": \"1\",\n            \"is_first_purchase_online\": \"1\",\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"06233-200\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"3003\"\n            },\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"0\",\n            \"pick_up_on_seller\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"06233-200\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"3003\",\n                \"floor\": \"\",\n                \"apartment\": \"\"\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Installing Mercado Pago SDK Python\nDESCRIPTION: This snippet shows how to install the Mercado Pago SDK for Python 3.x using pip. Requires Python 3.x installed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip3 install mercadopago\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with 3DS (Optional) using PHP\nDESCRIPTION: This PHP code snippet demonstrates how to create a payment using the Mercado Pago API with the `three_d_secure_mode` set to `optional`.  It uses the PaymentClient to create a payment with parameters such as transaction amount, token, description, installments, payment method ID, issuer ID, payer information, and the 3DS mode. The code requires the MercadoPago PHP SDK and sets the access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\MercadoPagoConfig;\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['transactionAmount'],\n    \"token\" => $_POST['token'],\n    \"description\" => $_POST['description'],\n    \"installments\" => $_POST['installments'],\n    \"payment_method_id\" => $_POST['paymentMethodId'],\n    \"issuer_id\" => $_POST['issuer'],\n    \"payer\" => [\n      \"email\" => $_POST['email'],\n      \"identification\" => [\n        \"type\" => $_POST['identificationType'],\n        \"number\" => $_POST['number']\n      ]\n    ],\n    \"three_d_secure_mode\" => \"optional\"\n  ], $request_options);\n  echo implode($payment);\n?>\n\n```\n\n----------------------------------------\n\nTITLE: Creating Customer and Card with MercadoPago SDK in Go\nDESCRIPTION: The Go snippet demonstrates how to create a customer and associate a card using MercadoPago's SDK. It involves setting up a configuration with an access token, then creating both a customer and card leveraging 'customerClient' and 'customerCardClient'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/create-customer-and-card.en.md#2025-04-18_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/customercard\"\n)\n\nfunc main() {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tcustomerClient := customer.NewClient(cfg)\n\tcustomerCardClient := customercard.NewClient(cfg)\n\n\tcustomerRequest := customer.Request{Email: \"{{EMAIL}}\"}\n\n\tcustomerResource, err := customerClient.Create(context.Background(), customerRequest)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tcardRequest := customercard.Request{Token: \"{{CARD_TOKEN}}\"}\n\n\tcardResource, err := customerCardClient.Create(context.Background(), customerResource.ID, cardRequest)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(cardResource)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Order with Mercado Pago API using cURL\nDESCRIPTION: This cURL request is used to create an order in the Mercado Pago system, utilizing the QR Buyer model. It includes the necessary headers such as Authorization and X-Idempotency-Key, and sends the order details as JSON data. Ensure you replace USER_ID, EXTERNAL_STORE_ID, EXTERNAL_POS_ID, and ACCESS_TOKEN with actual values.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/hidden-qr-buyer-part-b.en.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST \\\n 'https://api.mercadopago.com/instore/qr/buyer/collectors/USER_ID/stores/EXTERNAL_STORE_ID/pos/EXTERNAL_POS_ID/orders' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: 92022242-f08a-11e9-81b4-2a2a12' \\\n--data-raw ' {\\n    \"external_reference\" : \"order-id-1234\",\\n   \"total_amount\": 100.0,\\n    \"items\": [\\n        {\\n            \"sku_number\": \"KS955RUR\",\\n            \"category\": \"FOOD\",\\n            \"title\": \"Item1\",\\n            \"description\": \"Item1 Mercado Pago\",\\n            \"unit_price\": 20,\\n            \"quantity\": 5,\\n            \"unit_measure\": \"unit\",\\n            \"total_amount\": 100\\n        }\\n   ],\\n   \"title\": \"Title\",\\n    \"description\": \"Mercado Pago\",\\n \"scan_timestamp\": 1581356798,\\n\"payment_token\":\"PAYMENT_TOKEN\"\\n   }'\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Form for Saved Cards in Mercado Pago\nDESCRIPTION: HTML and JavaScript code for creating a payment form that displays saved cards and captures the security code. The form includes a select element for choosing a saved card and a field for entering the CVV.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/receive-payments-with-saved-cards.es.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    #form-checkout {\n      display: flex;\n      flex-direction: column;\n      max-width: 600px;\n    }\n\n    .container {\n      height: 18px;\n      display: inline-block;\n      border: 1px solid rgb(118, 118, 118);\n      border-radius: 2px;\n      padding: 1px 2px;\n    }\n  </style>\n  <form id=\"form-checkout\" method=\"POST\" action=\"/process_payment\">\n    <select type=\"text\" id=\"form-checkout__cardId\"></select>\n    <div id=\"form-checkout__securityCode-container\" class=\"container\"></div>\n    <input name=\"token\" id=\"token\" hidden>\n    <button>Enviar</button>\n  </form>\n\n<script>\n    const mp = new MercadoPago('TEST-2bf9f710-6a6e-47c8-a207-79f5e73b464c');\n\n    const securityCodeElement = mp.fields.create('securityCode', {\n      placeholder: \"CVV\"\n    }).mount('form-checkout__securityCode-container');\n\n    const customerCards = [{\n      \"id\": \"3502275482333\",\n      \"last_four_digits\": \"9999\",\n      \"payment_method\": {\n        \"name\": \"amex\",\n      },\n      \"security_code\": {\n        \"length\": 4,\n      }\n    }];\n\n    function appendCardToSelect() {\n      const selectElement = document.getElementById('form-checkout__cardId');\n      const tmpFragment = document.createDocumentFragment();\n      customerCards.forEach(({ id, last_four_digits, payment_method }) => {\n        const optionElement = document.createElement('option');\n        optionElement.setAttribute('value', id)\n        optionElement.textContent = `${payment_method.name} ended in ${last_four_digits}`\n        tmpFragment.appendChild(optionElement);\n      })\n      selectElement.appendChild(tmpFragment)\n    }\n\n    appendCardToSelect();\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Complete Webhook Signature Validation in JavaScript\nDESCRIPTION: Full implementation of webhook signature validation in JavaScript, extracting signature components from headers and comparing the computed signature with the received one.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.es.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Obtain the x-signature value from the header\nconst xSignature = headers['x-signature']; // Assuming headers is an object containing request headers\nconst xRequestId = headers['x-request-id']; // Assuming headers is an object containing request headers\n\n// Obtain Query params related to the request URL\nconst urlParams = new URLSearchParams(window.location.search);\nconst dataID = urlParams.get('data.id');\n\n// Separating the x-signature into parts\nconst parts = xSignature.split(',');\n\n// Initializing variables to store ts and hash\nlet ts;\nlet hash;\n\n// Iterate over the values to obtain ts and v1\nparts.forEach(part => {\n    // Split each part into key and value\n    const [key, value] = part.split('=');\n    if (key && value) {\n        const trimmedKey = key.trim();\n        const trimmedValue = value.trim();\n        if (trimmedKey === 'ts') {\n            ts = trimmedValue;\n        } else if (trimmedKey === 'v1') {\n            hash = trimmedValue;\n        }\n    }\n});\n\n// Obtain the secret key for the user/application from Mercadopago developers site\nconst secret = 'your_secret_key_here';\n\n// Generate the manifest string\nconst manifest = `id:${dataID};request-id:${xRequestId};ts:${ts};`;\n\n// Create an HMAC signature\nconst hmac = crypto.createHmac('sha256', secret);\nhmac.update(manifest);\n\n// Obtain the hash result as a hexadecimal string\nconst sha = hmac.digest('hex');\n\nif (sha === hash) {\n    // HMAC verification passed\n    console.log(\"HMAC verification passed\");\n} else {\n    // HMAC verification failed\n    console.log(\"HMAC verification failed\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Mercado Pago SDK (MLA, MLB, MLU, MPE, MLM)\nDESCRIPTION: This code snippet demonstrates how to create a basic Mercado Pago preference using the Python SDK. It configures credentials, defines an item with its title, quantity, and unit price, and then creates the preference using the SDK's preference().create() method. The response includes the created preference details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/preferences.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"# SDK do Mercado Pago\nimport mercadopago\n# Configure as credenciais\nsdk = mercadopago.SDK(\"PROD_ACCESS_TOKEN\")\n# Crie um item na preferência\npreference_data = {\n    \"items\": [\n        {\n            \"title\": \"My Item\",\n            \"quantity\": 1,\n            \"unit_price\": 75.76\n        }\n    ]\n}\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\"\n```\n\n----------------------------------------\n\nTITLE: Creating PSE Payment with Mercado Pago in Java\nDESCRIPTION: Java implementation for creating a PSE payment using Mercado Pago SDK. This implementation builds objects for identification, address, phone, payer, and other required information before creating the payment request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pse-avanza.en.md#2025-04-18_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n        Map<String, String> customHeaders = Map.of(\"X-Idempotency-Key\", \"...\");\n        MPRequestOptions requestOptions = MPRequestOptions.builder().customHeaders(customHeaders).build();\n\n        PaymentClient client = new PaymentClient();\n\n        IdentificationRequest identification = IdentificationRequest.builder()\n                .type(request.getIdentificationType())\n                .number(request.getIdentificationNumber())\n                .build();\n\n        PaymentPayerAddressRequest address = PaymentPayerAddressRequest.builder()\n                .zipCode(request.getZipCode())\n                .streetName(request.getStreetName())\n                .streetNumber(request.getStretNumber())\n                .neighborhood(request.getNeighborhood())\n                .city(request.getCity())\n                .federalUnit(request.getFederalUnit())\n                .build();\n\n        PaymentPayerPhoneRequest phone = PaymentPayerPhoneRequest.builder()\n                .areaCode(request.getPhoneAreaCode())\n                .number(request.getPhoneNumber())\n                .build();\n\n        PaymentPayerRequest payer = PaymentPayerRequest.builder()\n                .email(request.getEmail())\n                .entityType(\"individual\")\n                .firstName(\"firstName\")\n                .lastName(\"lastName\")\n                .identification(identification)\n                .address(address)\n                .phone(phone)\n                .build();\n\n        PaymentAdditionalInfoRequest additionalInfo = PaymentAdditionalInfoRequest.builder()\n                .ipAddress(\"127.0.0.1\")\n                .build();\n\n        PaymentTransactionDetailsRequest transactionDetails = PaymentTransactionDetailsRequest.builder()\n                .financialInstitution(request.getFinancialInstitution())\n                .build();\n\n        PaymentCreateRequest paymentCreateRequest = PaymentCreateRequest.builder()\n                .transactionAmount(new BigDecimal(5000))\n                .description(\"Product description\")\n                .paymentMethodId(\"pse\")\n                .additionalInfo(additionalInfo)\n                .transactionDetails(transactionDetails)\n                .callbackUrl(\"https://your-site.com\")\n                .notificationUrl(\"https://your-site.com\")\n                .payer(payer)\n                .build();\n\n        client.create(paymentCreateRequest);\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with Reserved Values in Python\nDESCRIPTION: Uses Mercado Pago's Python SDK to create a payment with capture=False. Sets up payment data with transaction amount, token, and other required parameters to reserve the value without immediate capture.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/make-value-reserve.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\npayment_data = {\n    \"transaction_amount\": 100,\n    \"token\": 'ff8080814c11e237014c1ff593b57b4d',\n    \"description\": \"Title of what you are paying for\",\n    \"installments\": 1,\n    \"payment_method_id\": \"visa\",\n    \"payer\": {\n        \"email\": \"test_user_19653727@testuser.com\"\n    },\n    \"capture\": False\n}\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Initializing Web Tokenize Checkout with MercadoPago in HTML\nDESCRIPTION: This snippet demonstrates embedding a Web Tokenize Checkout form using the MercadoPago library in HTML. It initializes the checkout with specified parameters like total amount and back URL, and sets a container for rendering the payment button with a custom label.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-clientside.en.md#2025-04-18_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=tokenizer-container>\n<script>\n// Agrega credenciales de SDK \nconst mp = new MercadoPago('PUBLIC_KEY', {locale: 'es-AR'});\n \n// Inicializa el Web Tokenize Checkout\nmp.checkout({\n  tokenizer: {\n    totalAmount: 4000,\n    backUrl: 'https://www.mi-sitio.com/procesar-pago'\n  },\n render: {\n    container: '.tokenizer-container', // Indica dónde se mostrará el botón\n    label: 'Pagar' // Cambia el texto del botón de pago (opcional)\n }\n});\n</script>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Back URLs and Auto Return in Mercado Pago with PHP\nDESCRIPTION: This code snippet demonstrates how to set the `back_urls` and `auto_return` attributes in PHP using the Mercado Pago SDK. The `back_urls` array defines the URLs for successful, failed, and pending payments, while `auto_return` enables automatic redirection for approved payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/redirection.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$preference = new MercadoPago\\Preference();\n//...\n$preference->back_urls = array(\n    \"success\" => \"https://www.seu-site/success\",\n    \"failure\" => \"http://www.seu-site/failure\",\n    \"pending\" => \"http://www.seu-site/pending\"\n);\n$preference->auto_return = \"approved\";\n// ...\n?>\n```\n\n----------------------------------------\n\nTITLE: Calculating Available Installments in Mercado Pago\nDESCRIPTION: This code fetches and displays available installment options for a payment. It calls the Mercado Pago API with the transaction amount, card BIN, and payment type to retrieve installment options. The function then creates dropdown options showing installment plans available for the customer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.es.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n    async function updateInstallments(paymentMethod, bin) {\n      try {\n        const installments = await mp.getInstallments({\n          amount: document.getElementById('transactionAmount').value,\n          bin,\n          paymentTypeId: 'credit_card'\n        });\n        const installmentOptions = installments[0].payer_costs;\n        const installmentOptionsKeys = { label: 'recommended_message', value: 'installments' };\n        createSelectOptions(installmentsElement, installmentOptions, installmentOptionsKeys);\n      } catch (error) {\n        console.error('error getting installments: ', e)\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Rendering Wallet Brick in JavaScript\nDESCRIPTION: This snippet demonstrates how to render the Wallet Brick using an async function that utilizes a 'bricksBuilder'. It sets up initialization parameters, including a preference ID, and customization options such as theme and styling.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nconst renderWalletBrick = async (bricksBuilder) => {\n    await bricksBuilder.create(\"wallet\", \"walletBrick_container\", {\n        initialization: {\n            preferenceId: \"<PREFERENCE_ID>\",\n        },\n        customization: {\n            theme: \"default\",\n            customStyle: {\n                valueProp: \"practicality\",\n                valuePropColor: \"white\",\n            },\n        },\n    });\n};\n\nrenderWalletBrick(bricksBuilder);\n```\n\n----------------------------------------\n\nTITLE: Initializing Card Payment Form with JavaScript Callbacks using MercadoPago.js\nDESCRIPTION: This JavaScript snippet provides a complete setup to initialize the CardForm, linking HTML input fields to MercadoPago attributes. It features callbacks for managing form mount events, submitting the form for payment, and shows how to handle REST API requests for processing orders.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.en.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst cardForm = mp.cardForm({\n    amount: \\\"100.5\\\",\n    iframe: true,\n    form: {\n        id: \\\"form-checkout\\\",\n        cardNumber: {\n            id: \\\"form-checkout__cardNumber\\\",\n            placeholder: \\\"Card number\\\",\n        },\n        expirationDate: {\n            id: \\\"form-checkout__expirationDate\\\",\n            placeholder: \\\"MM/YY\\\",\n        },\n        securityCode: {\n            id: \\\"form-checkout__securityCode\\\",\n            placeholder: \\\"Security code\\\",\n        },\n        cardholderName: {\n            id: \\\"form-checkout__cardholderName\\\",\n            placeholder: \\\"Cardholder name\\\",\n        },\n        issuer: {\n            id: \\\"form-checkout__issuer\\\",\n            placeholder: \\\"Issuing bank\\\",\n        },\n        installments: {\n            id: \\\"form-checkout__installments\\\",\n            placeholder: \\\"Installments\\\",\n        },\n        identificationType: {\n            id: \\\"form-checkout__identificationType\\\",\n            placeholder: \\\"Document type\\\",\n        },\n        identificationNumber: {\n            id: \\\"form-checkout__identificationNumber\\\",\n            placeholder: \\\"Document number\\\",\n        },\n        cardholderEmail: {\n            id: \\\"form-checkout__cardholderEmail\\\",\n            placeholder: \\\"Email\\\",\n        },\n    },\n    callbacks: {\n        onFormMounted: error => {\n            if (error) return console.warn(\\\"Form Mounted handling error: \\\", error);\n            console.log(\\\"Form mounted\\\");\n        },\n        onSubmit: event => {\n            event.preventDefault();\n\n            const {\n                paymentMethodId: payment_method_id,\n                issuerId: issuer_id,\n                cardholderEmail: email,\n                amount,\n                token,\n                installments,\n                identificationNumber,\n                identificationType,\n            } = cardForm.getCardFormData();\n\n            fetch(\\\"/process_order\\\", {\n                method: \\\"POST\\\",\n                headers: {\n                    \\\"Content-Type\\\": \\\"application/json\\\",\n                },\n                body: JSON.stringify({\n                    total_amount: amount, // should be a string in the format ..0.00\n                    description: description,\n                    payer: {\n                        email,\n                        identification: {\n                            type: identificationType,\n                            number: identificationNumber\n                        }\n                    },\n                    transactions: [\n                        {\n                            amount, // should be a string in the format ..0.00\n                            payment_method: {\n                                token,\n                                id: payment_method_id,\n                                type: type, // should be “credit_card” ou “debit_card”,\n                                installments: Number(installments)\n                            }\n                        }\n                    ]\n                }),\n            });\n        },\n        onFetching: (resource) => {\n            console.log(\\\"Fetching resource: \\\", resource);\n\n            // Animate progress bar\n            const progressBar = document.querySelector(\\\".progress-bar\\\");\n            progressBar.removeAttribute(\\\"value\\\");\n\n            return () => {\n                progressBar.setAttribute(\\\"value\\\", \\\"0\\\");\n            };\n        }\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Card Payment Brick in Vanilla JavaScript\nDESCRIPTION: Configuration for rendering Card Payment Brick with initialization, callbacks for submission, error handling, and readiness\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/default-rendering.es.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst renderCardPaymentBrick = async (bricksBuilder) => {\n const settings = {\n   initialization: {\n     amount: 100, // monto total a pagar\n   },\n   callbacks: {\n     onReady: () => {\n       /*\n         Callback llamado cuando Brick está listo.\n         Aquí puedes ocultar cargamentos de su sitio, por ejemplo.\n       */\n     },\n     onSubmit: (formData) => {\n       // callback llamado al hacer clic en el botón enviar datos\n       return new Promise((resolve, reject) => {\n         fetch('/process_payment', {\n           method: 'POST',\n           headers: {\n             'Content-Type': 'application/json',\n           },\n           body: JSON.stringify(formData),\n         })\n           .then((response) => response.json())\n           .then((response) => {\n             // recibir el resultado del pago\n             resolve();\n           })\n           .catch((error) => {\n             // manejar la respuesta de error al intentar crear el pago\n             reject();\n           });\n       });\n     },\n     onError: (error) => {\n       // callback llamado para todos los casos de error de Brick\n       console.error(error);\n     },\n   },\n  };\n  window.cardPaymentBrickController = await bricksBuilder.create(\n   'cardPayment',\n   'cardPaymentBrick_container',\n   settings,\n  );  \n};\n renderCardPaymentBrick(bricksBuilder);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago API in C#\nDESCRIPTION: This C# snippet demonstrates how to create a payment using the Mercado Pago API. It sets the access token, adds the X-Idempotency-Key to the request headers, creates a PaymentCreateRequest object with payment details extracted from the Request, and then uses the PaymentClient to create the payment asynchronously. The payment status is then printed to the console.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-cards.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n\nvar paymentRequest = new PaymentCreateRequest\n{\n    TransactionAmount = decimal.Parse(Request[\"transactionAmount\"]),\n    Token = Request[\"token\"],\n    Description = Request[\"description\"],\n    Installments = int.Parse(Request[\"installments\"]),\n    PaymentMethodId = Request[\"paymentMethodId\"],\n    Payer = new PaymentPayerRequest\n    {\n        Email = Request[\"cardholderEmail\"],\n        Identification = new IdentificationRequest\n        {----[mla, mlb, mlu, mlc, mpe, mco]----\n            Type = Request[\"identificationType\"],------------\n            Number = Request[\"identificationNumber\"],\n        },\n        FirstName = Request[\"cardholderName\"]\n    },\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest, requestOptions);\n\nConsole.WriteLine(payment.Status);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference in PHP\nDESCRIPTION: Create a Mercado Pago payment preference using PHP with a single product item\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/default-rendering.en.md#2025-04-18_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$client = new PreferenceClient();\n$preference = $client->create([\n  \"items\"=> array(\n    array(\n      \"title\" => \"My product\",\n      \"quantity\" => 1,\n      \"unit_price\" => 25\n    )\n  )\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with MercadoPago - Node.js\nDESCRIPTION: This Node.js snippet shows how to create a payment through the MercadoPago API. It uses the SDK to initialize a client with the access token and constructs a payment request with necessary details including the 3D Secure mode.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.en.md#2025-04-18_snippet_14\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, Payment } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: 'YOUR_ACCESS_TOKEN' });\nconst payment = new Payment(client);\n\nconst body = {\ntransaction_amount: req.transaction_amount,\n  token: req.token,\n  description: req.description,\n  installments: req.installments,\n  payment_method_id: req.paymentMethodId,\n  issuer_id: req.issuer,\n  payer: {\n    email: req.email,\n    identification: {\n      type: req.identificationType,\n      number: req.number\n    }\n  },\n  three_d_secure_mode: 'optional' \n};\n\npayment.create({ body: body, requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' } }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Reserve in Java\nDESCRIPTION: This Java snippet demonstrates how to set up a reserve authorization request using the MercadoPago SDK. It includes setting the access token, defining custom headers for idempotency, and building a payment request with necessary details like transaction amount, token, and payer info while setting capture to false.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/make-value-reserve.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest request =\nPaymentCreateRequest.builder()\n.transactionAmount(new BigDecimal(\"100\"))\n.token(\"ff8080814c11e237014c1ff593b57b4d\")\n.description(\"Product Title\")\n.installments(1)\n.paymentMethodId(\"visa\")\n.payer(PaymentPayerRequest.builder().email(\"test_user_19653727@testuser.com\").build())\n.capture(false)\n.build();\n\nclient.create(request, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Creating Full Refund Using Mercado Pago SDK in Java\nDESCRIPTION: This snippet demonstrates how to create a full refund with the Mercado Pago SDK. It requires a valid payment ID and the amount to be refunded. The refund is processed by calling the 'refund' method on an instance of 'PaymentRefundClient'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/refunds.en.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nPaymentRefundClient client = new PaymentRefundClient();\n\nLong paymentId = 123456789L;\nBigDecimal amount = new BigDecimal(\"5\");\nclient.refund(paymentId, amount);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago PHP SDK\nDESCRIPTION: This snippet demonstrates how to create a payment using the Mercado Pago PHP SDK. It initializes a `$createRequest` array with the payment details like transaction amount, description, payment method, and payer information. The `PaymentClient` and `RequestOptions` are used to send the request to the Mercado Pago API, including a unique idempotency key in the custom headers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/create-payments.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $createRequest = [\n    \"transaction_amount\" => 100,\n    \"description\" => \"description\",\n    \"payment_method_id\" => \"pix\",\n      \"payer\" => [\n        \"email\" => \"test_user_24634097@testuser.com\",\n      ]\n  ];\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $client->create($createRequest, $request_options);\n?>\n```\n\n----------------------------------------\n\nTITLE: Configuring Wallet Brick with React\nDESCRIPTION: This code snippet shows how to configure the Wallet Brick using React. It defines `initialization` and `customization` objects, and includes callback functions for `onSubmit`, `onError`, and `onReady` events.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst initialization = {\n  preferenceId: '<PREFERENCE_ID>',\n}\n\nconst customization = {\n  texts: {\n   valueProp: 'smart_option',\n  },\n}\n\nconst onSubmit = async (formData) => {\n // callback chamado ao clicar no Wallet Brick\n // isso é possível porque o Brick é um botão \n};\n\nconst onError = async (error) => {\n // callback chamado para todos os casos de erro do Brick\n console.log(error);\n};\n\nconst onReady = async () => {\n // Callback chamado quando o Brick estiver pronto.\n // Aqui você pode ocultar loadings do seu site, por exemplo.  \n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Payment Methods with Python SDK\nDESCRIPTION: Code to fetch all available payment methods using Mercado Pago's Python SDK. This implementation initializes the SDK with an access token and then requests all payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\npayment_methods_response = sdk.payment_methods().list_all()\npayment_methods = payment_methods_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with MercadoPago SDK in Ruby\nDESCRIPTION: This code snippet demonstrates how to create a payment using the MercadoPago SDK in Ruby. It includes setting up the SDK with an access token, defining custom headers with an idempotency key, and creating a payment request with specific details such as token, installments, transaction amount, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ruby/create-payments.en.md#2025-04-18_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_request = {\n  token: 'ff8080814c11e237014c1ff593b57b4d',\n  installments: 1,\n  transaction_amount: 100,\n  payer: {\n    type: 'customer',\n    id: '123456789-jxOV430go9fx2e'\n  }\n}\npayment_response = sdk.payment.create(payment_request, custom_request_options)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with 3DS Optional Mode - PHP\nDESCRIPTION: This PHP snippet demonstrates how to create a payment with the `three_d_secure_mode` set to \"optional\". This allows Mercado Pago to determine whether a 3DS challenge is required based on the transaction's risk profile. It requires the Mercado Pago PHP SDK and an access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => <TRANSACTION_AMOUNT>,\n    \"token\" => \"CARD_TOKEN\",\n    \"description\" => \"<DESCRIPTION>\",\n    \"installments\" => <INSTALLMENTS_NUMBER>,\n    \"payment_method_id\" => \"<PAYMENT_METHOD_ID>\",\n    \"issuer_id\" => \"<ISSUER_ID>\",\n    \"payer\" => [\n      \"email\" => $_POST['email']\n    ],\n    \"three_d_secure_mode\" => \"optional\"\n  ], $request_options);\n  echo implode($payment);\n?>\n\n```\n\n----------------------------------------\n\nTITLE: Updating Payment Information with MercadoPago Node.js SDK\nDESCRIPTION: This snippet shows how to update a payment by capturing it with a specific transaction amount. It requires an access token, payment ID, and uses an idempotency key to prevent duplicate operations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/create-payments.en.md#2025-04-18_snippet_3\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst payment = new Payment(client);\n\npayment.capture({\n\tid: '<PAYMENT_ID>',\n\ttransaction_amount: 100,\n\trequestOptions: {\n\t\tidempotencyKey: '<IDEMPOTENCY_KEY>'\n\t}\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Configure Public Key JavaScript\nDESCRIPTION: This snippet initializes the MercadoPago object with your public key, which is required for authenticating API requests. It also includes placeholders for subsequent steps in the payment creation process.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/secure-fields-core.en.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n <script>\nconst mp = new MercadoPago('YOUR_PUBLIC_KEY');\n// Add Step #createPCIFields\n ----[mla, mlb, mlu, mlc, mpe, mco]----\n// Add Step #getIdentificationTypes------------\n// Add Step #getPaymentMethods\n// Add Step #getIssuers\n// Add Step #getInstallments\n// Add Step #createCardToken\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Customer and Card with MercadoPago SDK in DotNet\nDESCRIPTION: This snippet illustrates how to create a new customer and associate a card with that customer using the MercadoPago SDK. It initializes the access token, sets up the customer details, and executes the creation request. Required dependencies include the MercadoPago SDK and the appropriate access token for authentication.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/customers.en.md#2025-04-18_snippet_0\n\nLANGUAGE: dotnet\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar customerRequest = new CustomerRequest\n{\n    Email = \"test_payer_12345@testuser.com\",\n};\nvar customerClient = new CustomerClient();\nCustomer customer = await customerClient.CreateAsync(customerRequest);\n\nvar cardRequest = new CustomerCardCreateRequest\n{\n    Token = \"9b2d63e00d66a8c721607214cedaecda\"\n};\nCustomerCard card = await customerClient.CreateCardAsync(customer.Id, cardRequest);\n```\n\n----------------------------------------\n\nTITLE: Updating Brick Data After Initialization\nDESCRIPTION: Demonstrates how to properly update initialization data for a Brick by using the unmount function to avoid duplication or rendering errors when changing preferences or configuration values.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/possible-errors.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\n//First render\nconst renderPaymentBrick = async (bricksBuilder) => {\n      const settings = {\n        initialization: {\n          amount: 100,\n          preferenceId: \"<YOUR_FIRST_PREFERENCE_ID>\"\n        },\n...\nwindow.paymentBrickController = await bricksBuilder.create(\n   \"payment\",\n   \"paymentBrick_container\",\n   settings\n );\n\n    };\n\nawait renderPaymentBrick(bricksBuilder);\n\n//Second render\nwindow.paymentBrickController.unmount()\n\nconst secondRenderPaymentBrick = async (bricksBuilder) => {\n      const settings = {\n        initialization: {\n          amount: 100,\n          preferenceId: \"<YOUR_SECOND_PREFERENCE_ID>\"\n        },\n...\nwindow.paymentBrickController = await bricksBuilder.create(\n   \"payment\",\n   \"paymentBrick_container\",\n   settings\n );\n\n    };\n\nawait secondRenderPaymentBrick(bricksBuilder);\n\n...\n\n// Brick Container\n<div id=\"paymentBrick_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Defining Checkout Preferences Attributes - JSON\nDESCRIPTION: This JSON snippet outlines the structure for configuring various attributes for Checkout Pro preferences, such as item details, payer information, payment method exclusions, and back URLs. It includes specifications for managing payment options and tracking, thereby allowing businesses to customize their transaction processes effectively.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/preferences-intro.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"items\": [\n        {\n            \"id\": \"item-ID-1234\",\n            \"title\": \"My product\",\n            \"currency_id\": \"BRL\",\n            \"picture_url\": \"https://www.mercadopago.com/org-img/MP3/home/logomp3.gif\",\n            \"description\": \"Item description\",\n            \"category_id\": \"art\",\n            \"quantity\": 1,\n            \"unit_price\": 75.76\n        }\n    ],\n    \"payer\": {\n        \"name\": \"Juan\",\n        \"surname\": \"Lopez\",\n        \"email\": \"user@email.com\",\n        \"phone\": {\n            \"area_code\": \"11\",\n            \"number\": \"4444-4444\"\n        },\n        \"identification\": {\n            \"type\": \"DNI\",\n            \"number\": \"12345678\"\n        },\n        \"address\": {\n            \"street_name\": \"Street\",\n            \"street_number\": 123,\n            \"zip_code\": \"5700\"\n        }\n    },\n    \"back_urls\": {\n        \"success\": \"https://www.success.com\",\n        \"failure\": \"https://www.failure.com\",\n        \"pending\": \"https://www.pending.com\"\n    },\n    \"auto_return\": \"approved\",\n    \"payment_methods\": {\n        \"excluded_payment_methods\": [\n            {\n                \"id\": \"master\"\n            }\n        ],\n        \"excluded_payment_types\": [\n            {\n                \"id\": \"ticket\"\n            }\n        ],\n        \"installments\": 12\n    },\n    \"notification_url\": \"https://www.your-site.com/ipn\",\n    \"statement_descriptor\": \"MYBUSINESS\",\n    \"external_reference\": \"Reference_1234\",\n    \"expires\": true,\n    \"expiration_date_from\": \"2016-02-01T12:00:00.000-04:00\",\n    \"expiration_date_to\": \"2016-02-28T12:00:00.000-04:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK with Access Token\nDESCRIPTION: Code snippets to initialize the Mercado Pago SDK with the production access token for different programming languages.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-checkout.es.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// SDK de Mercado Pago\nrequire __DIR__ .  '/vendor/autoload.php';\n// Agrega credenciales\nMercadoPago\\SDK::setAccessToken('PROD_ACCESS_TOKEN');\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\n// SDK de Mercado Pago\nimport { MercadoPagoConfig } from 'mercadopago';\n// Agrega credenciales\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\n```\n\nLANGUAGE: java\nCODE:\n```\n// SDK de Mercado Pago\nimport com.mercadopago.MercadoPagoConfig;\n// Agrega credenciales\nMercadoPagoConfig.setAccessToken(\"PROD_ACCESS_TOKEN\");\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# SDK de Mercado Pago\nrequire 'mercadopago'\n# Agrega credenciales\nsdk = Mercadopago::SDK.new('PROD_ACCESS_TOKEN')\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// SDK de Mercado Pago\n using MercadoPago.Config;\n // Agrega credenciales\nMercadoPagoConfig.AccessToken = \"PROD_ACCESS_TOKEN\";\n```\n\nLANGUAGE: python\nCODE:\n```\n# SDK de Mercado Pago\nimport mercadopago\n# Agrega credenciales\nsdk = mercadopago.SDK(\"PROD_ACCESS_TOKEN\")\n```\n\n----------------------------------------\n\nTITLE: Include MercadoPago.js SDK using HTML\nDESCRIPTION: This snippet demonstrates how to include the MercadoPago.js SDK in an HTML page using a CDN.  It is added before the closing </body> tag. It uses a script tag with the `src` attribute pointing to the MercadoPago.js SDK CDN URL.  It is the first step in integrating Mercado Pago's checkout functionality into a webpage.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/add-sdk-and-initialize.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Minha Integração com Checkout Pro</title>\n</head>\n<body>\n\n  <!-- Conteúdo da sua página -->\n\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n\n  <script>\n    // Seu código JavaScript irá aqui\n  </script>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Preferences - C#\nDESCRIPTION: This C# snippet demonstrates how to configure payment methods in a MercadoPago preference request, detailing excluded payment methods and types, along with the number of installments to be presented to users. This configuration is crucial for payment governance in an application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar paymentMethods = new PreferencePaymentMethodsRequest\n{\n    ExcludedPaymentMethods = new List<PreferencePaymentMethodRequest>\n    {\n        new PreferencePaymentMethodRequest\n        {\n            Id = \"master\",\n        },\n    },\n    ExcludedPaymentTypes = new List<PreferencePaymentTypeRequest>\n    {\n        new PreferencePaymentTypeRequest\n        {\n            Id = \"ticket\",\n        },\n    },\n    Installments = 12,\n};\n\nvar request = new PreferenceRequest\n{\n    // ...\n    PaymentMethods = paymentMethods,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Reserve in Node.js\nDESCRIPTION: This Node.js snippet illustrates using the MercadoPago SDK to carry out a reserve payment authorization. It includes initializing the client with an access token, setting the request options, and sending a payment create request with details such as transaction amount and capture flag set to false.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/make-value-reserve.en.md#2025-04-18_snippet_2\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, Payment } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: 'YOUR_ACCESS_TOKEN' });\nconst payment = new Payment(client);\n\nconst body = {\ntransaction_amount: 100,\ntoken: '123456',\ndescription: 'My product',\ninstallments: 1,\npayment_method_id: 'visa',\npayer: {\nemail: 'my.user@example.com',\n},\ncapture: false\n};\n\npayment.create({ body: body, requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' } }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Initializing Boleto/Lottery Payment Forms with Complete Payer Data in React\nDESCRIPTION: React implementation to pre-populate all payer fields for boleto bancário and lottery payments in Brazil. Includes personal information, identification, email, and full address details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/initialize-data-on-the-bricks.en.md#2025-04-18_snippet_5\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst initialization = {\n ...,\n payer: {\n   firstName: '<PAYER_FIRST_NAME_HERE>',\n   lastName: '<PAYER_LAST_NAME_HERE>',\n   identification: {\n    \"type\": \"<PAYER_DOC_TYPE_HERE>\",\n    \"number\": \"<PAYER_DOC_NUMBER_HERE>\",\n   },\n   email: '<PAYER_EMAIL_HERE>',\n   address: {\n     zipCode: '<PAYER_ZIP_CODE_HERE>',\n     federalUnit: '<PAYER_FED_UNIT_HERE>',\n     city: '<PAYER_CITY_HERE>',\n     neighborhood: '<PAYER_NEIGHBORHOOD_HERE>',\n     streetName: '<PAYER_STREET_NAME_HERE>',\n     streetNumber: '<PAYER_STREET_NUMBER_HERE>',\n     complement: '<PAYER_COMPLEMENT_HERE>',\n   }\n },\n};\n```\n\n----------------------------------------\n\nTITLE: Create Partial Refund with Mercado Pago Python SDK\nDESCRIPTION: This snippet demonstrates how to create a partial refund for a payment using the Mercado Pago Python SDK. It initializes the SDK, defines a `refund_object` with the refund amount, and calls `refund().create()` with the payment ID and the refund object.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/refunds.en.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsdk = mercadopago.SDK('YOUR_ACCESS_TOKEN')\n \nrefund_object = {\n   'amount': 0.0\n}\n \nsdk.refund().create('payment_id', refund_object)\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with MercadoPago - Python\nDESCRIPTION: This Python snippet demonstrates how to create a payment with MercadoPago using the SDK. The payment details are gathered from POST request parameters, and 3D Secure mode is enabled as optional.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.en.md#2025-04-18_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n \npayment_data = {\n   \"transaction_amount\": float(request.POST.get(\"transaction_amount\")),\n   \"token\": request.POST.get(\"token\"),\n   \"description\": request.POST.get(\"description\"),\n   \"installments\": int(request.POST.get(\"installments\")),\n   \"payment_method_id\": request.POST.get(\"payment_method_id\"),\n   \"payer\": {\n       \"email\": request.POST.get(\"email\"),\n       \"identification\": {\n           \"type\": request.POST.get(\"type\"), \n           \"number\": request.POST.get(\"number\")\n       }\n   }\n   \"three_d_secure_mode\": \"optional\"\n}\n \npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n \nprint(payment)\n```\n\n----------------------------------------\n\nTITLE: Creating a Customer and Card with MercadoPago SDK in Ruby\nDESCRIPTION: This snippet demonstrates how to create a customer and associate a card with them using the MercadoPago SDK. It initializes the SDK, creates a customer with an email, and then adds a card to the customer's account.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ruby/customers.en.md#2025-04-18_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustomer_request = {\n  email: 'john@yourdomain.com'\n}\ncustomer_response = sdk.customer.create(customer_request)\ncustomer = customer_response[:response]\n\ncard_request = {\n  token: '9b2d63e00d66a8c721607214cedaecda',\n  issuer_id: '3245612',\n  payment_method_id: 'debit_card'\n}\ncard_response = sdk.card.create(customer['id'], card_request)\ncard = card_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet Container\nDESCRIPTION: Adds HTML container element for rendering the Mercado Pago wallet button.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-mp-wallet.en.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"wallet_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with MercadoPago SDK in Python\nDESCRIPTION: This snippet demonstrates how to create a payment using the MercadoPago SDK in Python. It requires the 'mercadopago' library, which should be installed beforehand. The core of the code includes initializing the SDK with an access token, setting a unique x-idempotency-key to avoid duplicate payments, and providing necessary payment data such as transaction amount, token, and payer details. It outputs the response of the payment creation request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/create-payments.en.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n    \"transaction_amount\": 100,\n    \"token\": 'ff8080814c11e237014c1ff593b57b4d',\n    \"installments\": 1,\n    \"payer\": {\n        \"type\": \"customer\",\n        \"id\": \"123456789-jxOV430go9fx2e\"\n    }\n}\n\npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n\n```\n\n----------------------------------------\n\nTITLE: Processing Payment with cURL\nDESCRIPTION: cURL command for processing credit card payments with Mercado Pago API. This example shows how to send a POST request directly to the payments endpoint with transaction details, token, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.en.md#2025-04-18_snippet_15\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n-H 'accept: application/json' \\\n-H 'content-type: application/json' \\\n-H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n'https://api.mercadopago.com/v1/payments' \\\n-d '{\n\"transaction_amount\": 100,\n\"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n\"description\": \"Blue shirt\",\n\"installations\": 1,\n\"payment_method_id\": \"visa\",\n\"issuer_id\": 310,\n\"payer\": {\n\"email\": \"test@test.com\"\n}\n}'\n```\n\n----------------------------------------\n\nTITLE: Integrate Mercado Pago Wallet component in React\nDESCRIPTION: This snippet demonstrates how to integrate the Mercado Pago `Wallet` component in a React application to render the payment button. It imports the `Wallet` component from `@mercadopago/sdk-react` and uses it within the `App` component, passing the `preferenceId` for initialization. This setup allows for displaying the Mercado Pago payment button within a React application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/add-sdk-and-initialize.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Wallet } from '@mercadopago/sdk-react';\n\nconst App = () => {\n  return (\n    <div>\n      <h1>MercadoPago Checkout</h1>\n      <Wallet initialization={{ preferenceId: 'YOUR_PREFERENCE_ID' }} />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Shipping Information\nDESCRIPTION: Example of configuring shipping information including costs, mode, description and receiver's address details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/add-confirmation-step.en.md#2025-04-18_snippet_3\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n  // ...\n  initialization: {\n    shipping: {\n      costs: 5, // optional\n      shippingMode: \"<SHIPPING_MODE>\",\n      description: \"<SHIPPING_DESCRIPTION>\", // optional\n      receiverAddress: {\n        streetName: \"<STREET_NAME>\",\n        streetNumber: \"<STREET_NUMBER>\",\n        neighborhood: \"<PAYER_NEIGHBORHOOD>\", // optional\n        city: \"<PAYER_CITY>\", // optional\n        federalUnit: \"<PAYER_FED_UNIT>\", // optional\n        zipCode: \"<ZIP_CODE>\",\n      additionalInformation: \"<ADDITIONAL_INFORMATION>\", // optional    \n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with 3DS in Java\nDESCRIPTION: This Java code snippet demonstrates how to create a payment with 3DS enabled using the Mercado Pago SDK. It sets the access token, creates a payment client, and sends a payment creation request with the `threeDSecureMode` set to `optional`. It requires the Mercado Pago Java SDK and uses the `PaymentClient` and `PaymentCreateRequest` to create the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-bigmerchants.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"<ENV_ACCESS_TOKEN>\");\n    PaymentClient client = new PaymentClient();\n    PaymentCreateRequest createRequest =\n        PaymentCreateRequest.builder()\n            .transactionAmount(new BigDecimal(<TRANSACTION_AMOUNT>))\n            .token(\"<CARD_TOKEN>\")\n            .description(\"<DESCRIPTION>\")\n            .installments(<INSTALLLMENTS_NUMBER>)\n            .paymentMethodId(\"<PAYMENT_METHOD_ID>\")\n            .payer(\n               PaymentPayerRequest.builder()\n                 .email(\"<BUYER_EMAIL>\")\n                 .build()\n            )\n            .threeDSecureMode(\"optional\")\n            .build();\n    client.create(createRequest);\n```\n\n----------------------------------------\n\nTITLE: Configuring MercadoPago Credentials\nDESCRIPTION: This JavaScript snippet demonstrates importing and initializing the MercadoPago library, ensuring secure payment transactions by setting up necessary credentials using a public key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-cardform.en.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loadMercadoPago } from \\\"@mercadopago/sdk-js\\\";\n\nawait loadMercadoPago();\nconst mp = new window.MercadoPago(\\\"YOUR_PUBLIC_KEY\\\");\n\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference in Ruby\nDESCRIPTION: This Ruby example illustrates how to build a payment preference object and send it to Mercado Pago to get a response containing the preference ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.en.md#2025-04-18_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n# Create a preference object\npreference_data = {\n  # the purpose: 'wallet_purchase', allows only logged payments\n  # to allow guest payments you can omit this property\n  purpose: 'wallet_purchase',\n  items: [\n    {\n      title: 'Meu produto',\n      unit_price: 75,\n      quantity: 1\n    }\n  ]\n}\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n\n# This value is the preferenceId you will use in the HTML on Brick startup\n@preference_id = preference['id']\n```\n\n----------------------------------------\n\nTITLE: Adding a Card to a Customer with Python\nDESCRIPTION: This Python code demonstrates how to add a card to a customer using the Mercado Pago Python SDK. It retrieves the customer information first, then creates a card by providing the token and payment method ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\ncustomer_response = sdk.customer().get(\"247711297-jxOV430go9fx2e\")\ncustomer = customer_response[\"response\"]\n\ncard_data = {\n  \"token\": \"9b2d63e00d66a8c721607214cedaecda\",\n  \"payment_method_id\": \"debit_card\"\n}\ncard_response = sdk.card().create(customer[\"id\"], card_data)\ncard = card_response[\"response\"]\n\nprint(card)\n```\n\n----------------------------------------\n\nTITLE: Instalando a biblioteca Mercado Pago via npm para React\nDESCRIPTION: Instala o SDK React do Mercado Pago usando o npm. Isso permite a integração das funcionalidades do Mercado Pago em aplicações React.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/common-initialization.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-react\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods in Node.js\nDESCRIPTION: JavaScript/Node.js implementation for setting payment method preferences, excluding specific payment methods and types, and limiting installments\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/payment-methods.en.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar preference = {}\npreference = {\n//...\n\"payment_methods\": {\n\"excluded_payment_methods\": [\n{\n\"id\": \"master\"\n}\n],\n\"excluded_payment_types\": [\n{\n\"id\": \"ticket\"\n}\n],\n\"installations\": 12\n\t}\n//...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference for Installments without Credit Card\nDESCRIPTION: This code snippet demonstrates how to create a payment preference for installment payments without a credit card using Mercado Pago's SDK. It sets up a preference object with an item, specifies the purpose as 'onboarding_credits', and saves or creates the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/installments-without-card.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// Cria um objeto de preferência\n$preference = new MercadoPago\\Preference();\n\n// Cria um item na preferência\n$item = new MercadoPago\\Item();\n$item->title = 'Meu produto';\n$item->quantity = 1;\n$item->unit_price = 75;\n$preference->items = array($item);\n$preference->purpose = 'onboarding_credits';\n$preference->save();\n?>\n```\n\nLANGUAGE: Node.js\nCODE:\n```\n// Cria um objeto de preferência\nlet preference = {\n  items: [\n    {\n      title: 'Meu produto',\n      unit_price: 100,\n      quantity: 1,\n    }\n  ],\n  purpose: 'onboarding_credits'\n};\n\nmercadopago.preferences.create(preference)\n.then(function(response){\n  global.id = response.body.id;\n}).catch(function(error){\n  console.log(error);\n});\n```\n\nLANGUAGE: Java\nCODE:\n```\n// Cria um objeto de preferência\nPreferenceClient client = new PreferenceClient();\n\n// Cria um item na preferência\nPreferenceItemRequest item =\n   PreferenceItemRequest.builder()\n       .title(\"Meu produto\")\n       .quantity(1)\n       .unitPrice(new BigDecimal(\"75\"))\n       .build();\n\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nList<PreferenceItemRequest> items = new ArrayList<>();\nitems.add(item);\n\nPreferenceRequest request =\n   PreferenceRequest.builder().items(items).purpose(\"onboarding_credits\").build();\n\nclient.create(request);\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n# Cria um objeto de preferência\npreference_data = {\n  items: [\n    {\n      title: 'Meu produto',\n      unit_price: 100,\n      quantity: 1\n    }\n  ],\n  purpose: 'onboarding_credits'\n}\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago Checkout Bricks in Python\nDESCRIPTION: This Python code implements payment creation using Mercado Pago's Checkout Bricks.  It retrieves payment information from the request, constructs a payment data dictionary (including transaction amount, token, installments, payment method ID, and payer details), and then calls the Mercado Pago SDK to create the payment.  The resulting payment object is printed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-serverside.es.md#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\npayment_data = {\n   \"transaction_amount\": float(request.POST.get(\"transaction_amount\")),\n   \"token\": request.POST.get(\"token\"),\n   \"installments\": int(request.POST.get(\"installments\")),\n   \"payment_method_id\": request.POST.get(\"payment_method_id\"),\n   \"payer\": {\n       \"email\": request.POST[\"payer\"].get(\"email\"),\n       \"identification\": {\n           \"type\": request.POST[\"payer\"][\"identification\"].get(\"type\"),\n           \"number\": request.POST[\"payer\"][\"identification\"].get(\"number\")\n       }\n   }\n}\n\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n\nprint(payment)\n\n```\n\n----------------------------------------\n\nTITLE: Obtaining Client Credentials Token using PHP in Mercado Pago API\nDESCRIPTION: This PHP code demonstrates how to obtain a Client Credentials token using the OAuthClient. It requires client secret and client ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/creation.es.md#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new OauthClient();\n   $request = new OAuthCreateRequest();\n     $request->client_secret = \"CLIENT_SECRET\";\n     $request->client_id = \"CLIENT_ID\";\n\n  $client->create($request);\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK and Using Secure Fields in React\nDESCRIPTION: This snippet demonstrates how to initialize the Mercado Pago SDK, use Secure Fields components (CardNumber, SecurityCode, ExpirationDate), and create a card token in a React application. It includes a basic form structure and a function to generate the card token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/react-core-methods.en.md#2025-04-18_snippet_0\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport React from 'react';\nimport {\n  initMercadoPago,\n  createCardToken,\n  CardNumber,\n  SecurityCode,\n  ExpirationDate,\n} from '@mercadopago/sdk-react';\n\ninitMercadoPago('YOUR-PUBLIC-KEY');\n\nconst App = () => {\n const cardToken = async () => {\n   const response = await createCardToken({\n     cardholderName: '<CARD_HOLDER_NAME>',\n     identificationType: '<BUYER_IDENTIFICATION_TYPE>',\n     identificationNumber: '<BUYER_IDENTIFICATION_NUMBER>',\n   })\n   console.log('Card Token Response = ', response)\n }\n return (\n   <>\n     <CardNumber placeholder='Card Number'/>\n     <SecurityCode placeholder='Security Code' />\n     <ExpirationDate placeholder='Expiration Date' mode='short'/>\n     <button onClick={() => cardToken()}>Pay</button>\n   </>\n );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Initializing Status Screen Brick with JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to initialize the Status Screen Brick using the `bricksBuilder.create` method. It configures the `paymentId` for the payment to be displayed, defines callbacks for `onReady` and `onError` events, and assigns the controller to `window.statusScreenBrickController`. The `renderStatusScreenBrick` function encapsulates the initialization logic.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/status-screen-brick/default-rendering.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst renderStatusScreenBrick = async (bricksBuilder) => {\n const settings = {\n   initialization: {\n     paymentId: '<PAYMENT_ID>', // id do pagamento a ser mostrado\n   },\n   callbacks: {\n     onReady: () => {\n       /*\n         Callback chamado quando o Brick estiver pronto.\n         Aqui você pode ocultar loadings do seu site, por exemplo.\n       */\n     },\n     onError: (error) => {\n       // callback chamado para todos os casos de erro do Brick\n       console.error(error);\n     },\n   },\n  };\n  window.statusScreenBrickController = await bricksBuilder.create(\n   'statusScreen',\n   'statusScreenBrick_container',\n   settings,\n  );  \n};\nrenderStatusScreenBrick(bricksBuilder);\n```\n\n----------------------------------------\n\nTITLE: Creating Pix Payments with PHP SDK\nDESCRIPTION: PHP implementation for creating Pix payments using Mercado Pago's SDK. It sets up a payment client with the required access token, includes idempotency key for safe transaction processing, and submits payment details including transaction amount, payment method, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pix.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\Client\\Common\\RequestOptions;\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n \"transaction_amount\" => (float) $_POST['<TRANSACTION_AMOUNT>'],\n    \"payment_method_id\" => $_POST['<PAYMENT_METHOD_ID>'],\n    \"payer\" => [\n      \"email\" => $_POST['<EMAIL>']\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Customer with Mercado Pago Python SDK\nDESCRIPTION: This snippet demonstrates how to create a customer and a card using the Mercado Pago Python SDK. It initializes the SDK with an access token and then calls the `customer().create()` and `card().create()` methods with relevant customer and card data. The response contains the created customer and card objects.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/customers.es.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\n\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\ncustomer_data = {\n  \"email\": \"test_payer_12345@testuser.com\"\n}\ncustomer_response = sdk.customer().create(customer_data)\ncustomer = customer_response[\"response\"]\n\ncard_data = {\n  \"token\": \"9b2d63e00d66a8c721607214cedaecda\",\n  \"issuer_id\": \"3245612\",\n  \"payment_method_id\": \"debit_card\"\n}\ncard_response = sdk.card().create(customer[\"id\"], card_data)\ncard = card_response[\"response\"]\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Preference Request in Mercado Pago SDK - C#\nDESCRIPTION: This snippet demonstrates how to create a preference request using the Mercado Pago SDK in C#. It includes setting up the SDK, defining the preference item details (title, quantity, currency, unit price), and sending the request to create the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/preferences.en.md#2025-04-18_snippet_0\n\nLANGUAGE: dotnet\nCODE:\n```\n// Mercado Pago SDK\nusing MercadoPago.Config;\nusing MercadoPago.Client.Preference;\nusing MercadoPago.Resource.Preference;\n// Add Your credentials\nMercadoPagoConfig.AccessToken = \"PROD_ACCESS_TOKEN\";\n// Create the preference request object\nvar request = new PreferenceRequest\n{\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"My Item\",\n            Quantity = 1,\n            CurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\n            UnitPrice = 75.56m,\n        },\n    },\n};\n// Create the preference using the client\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Creating Pix Payments with Node.js SDK\nDESCRIPTION: Node.js implementation for creating Pix payments with Mercado Pago. This snippet shows how to use the payment.create method with transaction details, including the payment amount, description, and payer email. It also includes the idempotency key to prevent duplicate transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pix.es.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\npayment.create({ body: {\n\ttransaction_amount: 12.34,\n\tdescription: '<DESCRIPTION>',\n\tpayment_method_id: 'pix',\n\tpayer: {\n\t\temail: '<EMAIL>'\n\t}}, requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' } \n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Go HTTP Server with HMAC Verification\nDESCRIPTION: Implements an HTTP server in Go that verifies HMAC signatures from incoming requests. Processes x-signature headers, extracts query parameters, and performs HMAC verification using SHA-256. Includes parsing of timestamp and hash values from the signature.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"crypto/hmac\"\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// Obtain the x-signature value from the header\n\t\txSignature := r.Header.Get(\"x-signature\")\n\t\txRequestId := r.Header.Get(\"x-request-id\")\n\n\t\t// Obtain Query params related to the request URL\n\t\tqueryParams := r.URL.Query()\n\n\t\t// Extract the \"data.id\" from the query params\n\t\tdataID := queryParams.Get(\"data.id\")\n\n\t\t// Separating the x-signature into parts\n\t\tparts := strings.Split(xSignature, \",\")\n\n\t\t// Initializing variables to store ts and hash\n\t\tvar ts, hash string\n\n\t\t// Iterate over the values to obtain ts and v1\n\t\tfor _, part := range parts {\n\t\t\t// Split each part into key and value\n\t\t\tkeyValue := strings.SplitN(part, \"=\", 2)\n\t\t\tif len(keyValue) == 2 {\n\t\t\t\tkey := strings.TrimSpace(keyValue[0])\n\t\t\t\tvalue := strings.TrimSpace(keyValue[1])\n\t\t\t\tif key == \"ts\" {\n\t\t\t\t\tts = value\n\t\t\t\t} else if key == \"v1\" {\n\t\t\t\t\thash = value\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Get secret key/token for specific user/application from Mercadopago developers site\n\t\tsecret := \"your_secret_key_here\"\n\n\t\t// Generate the manifest string\n\t\tmanifest := fmt.Sprintf(\"id:%v;request-id:%v;ts:%v;\", dataID, xRequestId, ts)\n\n\t\t// Create an HMAC signature defining the hash type and the key as a byte array\n\t\thmac := hmac.New(sha256.New, []byte(secret))\n\t\thmac.Write([]byte(manifest))\n\n\t\t// Obtain the hash result as a hexadecimal string\n\t\tsha := hex.EncodeToString(hmac.Sum(nil))\n\nif sha == hash {\n    // HMAC verification passed\n    fmt.Println(\"HMAC verification passed\")\n} else {\n    // HMAC verification failed\n    fmt.Println(\"HMAC verification failed\")\n}\n\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Preference with MercadoPago Node.js SDK\nDESCRIPTION: Initializes the MercadoPago client and updates an existing payment preference using its ID. This example shows how to update the items list with new values.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/preferences.en.md#2025-04-18_snippet_3\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token', options: { timeout: 5000 } });\n\nconst preference = new Preference(client);\n\npreference.update({\n\tid: '123456789',\n\tupdatePreferenceRequest: {\n\t\titems: [\n\t\t\t{\n\t\t\t\tid: '1234',\n\t\t\t\ttitle: 'Dummy Title',\n\t\t\t\tquantity: 1,\n\t\t\t\tunit_price: 100\n\t\t\t}\n\t\t],\n\t}\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creating Direct Sales Payment Request with Mercado Pago API\nDESCRIPTION: Comprehensive cURL request demonstrating how to submit a payment for a direct sales transaction with detailed buyer, item, and shipping information\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/direct-sale.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}} \\\n--data-raw '{\n    \"transaction_amount\": 1500.00,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"debvisa\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Pedido01\",\n    \"description\": \"PEDIDO NOVO\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"payer\": {\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"12345678909\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"title\": \"Direct sale\",\n                \"description\": \"Gold ring\",\n                \"category_id\": \"jewelry\",\n                \"quantity\": 1,\n                \"unit_price\": 1500\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_prime_user\": true,\n            \"is_first_purchase_online\": true,\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"206233-2002\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"230032\"\n            },\n            \"authentication_type\": \"Facebook\",\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"local_pickup\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"306233-2003\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"3003\",\n                \"floor\": \"5\",\n                \"apartment\": \"502\",\n                \"state_name\": \"DF\",\n                \"city_name\": \"Bogota\"\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Preference Object for Checkout Pro\nDESCRIPTION: Code examples to create a preference object with product details for Checkout Pro integration in different programming languages.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-checkout.es.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$client = new PreferenceClient();\n$preference = $client->create([\n  \"items\"=> array(\n    array(\n      \"title\" => \"Meu produto\",\n      \"quantity\" => 1,\n      \"currency_id\" => \"BRL\",\n      \"unit_price\" => 100\n    )\n  )\n]);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>', options: { timeout: 5000 } });\n\nconst preference = new Preference(client);\n\npreference.create({ body: {\nitems: [\n {\n  id: '<ID>',\n  title: '<title>',\n  quantity: 1,\n  unit_price: 100\n }\n],\n} }).then(console.log).catch(console.log);\n```\n\nLANGUAGE: java\nCODE:\n```\n PreferenceItemRequest itemRequest =\n       PreferenceItemRequest.builder()\n           .id(\"1234\")\n           .title(\"Games\")\n           .description(\"PS5\")\n           .pictureUrl(\"http://picture.com/PS5\")\n           .categoryId(\"games\")\n           .quantity(2)\n           .currencyId(\"BRL\")\n           .unitPrice(new BigDecimal(\"4000\"))\n           .build();\n   List<PreferenceItemRequest> items = new ArrayList<>();\n   items.add(itemRequest);\nPreferenceRequest preferenceRequest = PreferenceRequest.builder()\n.items(items).build();\nPreferenceClient client = new PreferenceClient();\nPreference preference = client.create(request);\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Crea un objeto de preferencia\npreference_data = {\n  items: [\n    {\n      title: 'Mi producto',\n      unit_price: 75.56,\n      quantity: 1\n    }\n  ]\n}\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n\n# Este valor reemplazará el string \"<%= @preference_id %>\" en tu HTML\n@preference_id = preference['id']\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Crea el objeto de request de la preference\nvar request = new PreferenceRequest\n{\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"Mi producto\",\n            Quantity = 1,\n            CurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\n            UnitPrice = 75.56m,\n        },\n    },\n};\n\n// Crea la preferencia usando el client\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\nLANGUAGE: python\nCODE:\n```\n# Crea un ítem en la preferencia\npreference_data = {\n    \"items\": [\n        {\n            \"title\": \"Mi producto\",\n            \"quantity\": 1,\n            \"unit_price\": 75.76,\n        }\n    ]\n}\n\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Credentials - JavaScript\nDESCRIPTION: This snippet shows how to load the MercadoPago SDK in a JavaScript module and initialize it with your public key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pix.en.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loadMercadoPago } from \"@mercadopago/sdk-js\";\n\nawait loadMercadoPago();\nconst mp = new window.MercadoPago(\"YOUR_PUBLIC_KEY\");\n\n```\n\n----------------------------------------\n\nTITLE: Setting Back URLs and Auto Return in Python\nDESCRIPTION: This Python snippet demonstrates setting the `back_urls` and `auto_return` keys within a `preference_data` dictionary. It defines URLs for success, failure, and pending cases and sets automatic return on approval. A Mercado Pago Python SDK is assumed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_26\n\nLANGUAGE: python\nCODE:\n```\npreference_data = {\n    \"back_urls\": {\n        \"success\": \"https://www.tu-sitio/success\",\n        \"failure\": \"https://www.tu-sitio/failure\",\n        \"pending\": \"https://www.tu-sitio/pendings\"\n    },\n    \"auto_return\": \"approved\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with PagoEfectivo\nDESCRIPTION: This C# snippet demonstrates how to create a payment using the Mercado Pago API. It uses the PaymentClient to send a POST request with transaction details, payment method, and payer information. It requires the MercadoPago C# SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar request = new PaymentCreateRequest\n{\nTransactionAmount = 5000,\nDescription = \"Product Title\",\nPaymentMethodId = \"paypayment_atm\",\nPayer = new PaymentPayerRequest\n{\nEmail = \"test_user_42972582@testuser.com\",\n},\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\n\n```\n\n----------------------------------------\n\nTITLE: Payment Response Example (JSON)\nDESCRIPTION: This JSON snippet provides an example of the response received after creating a payment.  It shows the structure of the response, including the payment ID, status (pending), and details such as the external resource URL for the buyer to complete the payment. The key fields are id, status, status_detail and transaction_details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n[\n{\n...,\n\"id\": 5466310457,\n\"status\": \"pending\",\n\"status_detail\": \"pending_waiting_payment\",\n...,\n\n\"order\": {},\n\"external_reference\": null,\n\"transaction_amount\": 100,\n\"transaction_amount_refunded\": 0,\n\"coupon_amount\": 0,\n\"differential_pricing_id\": null,\n\"deduction_schema\": null,\n\"transaction_details\": {\n\"payment_method_reference_id\": \"123457986\",\n\"verification_code\": \"24308767\",\n\"net_received_amount\": 0,\n\"total_paid_amount\": 100,\n\"overpaid_amount\": 0,\n\"external_resource_url\": \"https://www.mercadopago.com/mpe/payments/sandbox/atm/helper?payment_id=24308766&payment_method_reference_id=24308767&caller_id=537490079&hash=c96a61b0-10f4-40f6-afff-82fc0f0923da\",\n\"installment_amount\": 0,\n\"financial_institution\": \"PagoEfectivo\",\n\"payable_deferral_period\": null,\n\"acquirer_reference\": null\n}\n}\n]\n\n```\n\n----------------------------------------\n\nTITLE: Getting Payment Methods with PHP SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve available payment methods using the Mercado Pago PHP SDK. It initializes a PaymentMethodClient and calls the `get()` method to fetch the payment methods.  No parameters are passed to the `get()` method in this basic example.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/payment-methods.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new PaymentMethodClient();\n  $client->get();\n?>\n```\n\n----------------------------------------\n\nTITLE: Configuring MercadoPago Credentials with JavaScript\nDESCRIPTION: Code to initialize MercadoPago in a JavaScript module after importing the SDK. This approach loads the MercadoPago SDK asynchronously and creates an instance with your public key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.es.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loadMercadoPago } from \"@mercadopago/sdk-js\";\n\nawait loadMercadoPago();\nconst mp = new window.MercadoPago(\"YOUR_PUBLIC_KEY\");\n```\n\n----------------------------------------\n\nTITLE: Creating Card Payment with MercadoPago Python SDK\nDESCRIPTION: Example showing how to process card payments using MercadoPago's Python SDK. Demonstrates setting up the SDK, configuring request options, and creating a payment with transaction details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.es.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n   \"transaction_amount\": float(request.POST.get(\"transaction_amount\")),\n   \"token\": request.POST.get(\"token\"),\n   \"description\": request.POST.get(\"description\"),\n   \"installments\": int(request.POST.get(\"installments\")),\n   \"payment_method_id\": request.POST.get(\"payment_method_id\"),\n   \"payer\": {\n       \"email\": request.POST.get(\"email\"),\n       \"identification\": {\n           \"type\": request.POST.get(\"type\"),\n           \"number\": request.POST.get(\"number\")\n       }\n   }\n}\n \npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n \nprint(payment)\n```\n\n----------------------------------------\n\nTITLE: Reserving Payment Values with Mercado Pago in PHP\nDESCRIPTION: Creates a payment with 'capture=false' to reserve the value on the card without completing the transaction. The amount is held but not captured, allowing for later confirmation or cancellation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/make-value-reserve.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => 100.0,\n    \"token\" => \"123456\",\n    \"description\" => \"My product\",\n    \"installments\" => 1,\n    \"payment_method_id\" => \"visa\",\n    \"payer\" => [\n      \"email\" => \"my.user@example.com\",\n    ],\n    \"capture\" => false\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Node.js Payment Processing with Mercado Pago\nDESCRIPTION: Server-side Node.js implementation for creating a payment with comprehensive payer information using Mercado Pago Node.js SDK\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pse-avanza.es.md#2025-04-18_snippet_2\n\nLANGUAGE: node\nCODE:\n```\nimport { Payment, MercadoPagoConfig } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\nconst payment = new Payment(client);\n\nconst requestOptions = {\n\tidempotencyKey: '<IDEMPOTENCY_KEY>',\n};\n\nconst body = {\n  transaction_amount: 5000,\n  description: 'Product description',\n  payment_method_id: 'pse',\n  payer: {\n    email: req.body.email,\n    // Additional payer details...\n  }\n};\n\npayment.create({body, requestOptions})\n  .then(function (response) {\n    console.info(response)\n  })\n  .catch(function (error) {\n    console.error(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Processing PSE Payment with PHP SDK\nDESCRIPTION: Example of PSE payment processing using Mercado Pago's PHP SDK. This code configures payment details including transaction amount, financial institution, payer information, and callback URLs. It demonstrates how to properly structure the payment request with all required fields.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pse.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse MercadoPago\\Client\\Common\\RequestOptions;\nuse MercadoPago\\Client\\Payment\\PaymentClient;\nuse MercadoPago\\MercadoPagoConfig;\n\nMercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n$client = new PaymentClient();\n$request_options = new RequestOptions();\n$request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n$client = new PaymentClient();\n$createRequest = [\n  \"transaction_amount\" => 5000,\n  \"description\" => \"Product description\",\n  \"payment_method_id\" => \"pse\",\n  \"callback_url\" => \"http://www.your-site.com\",\n  \"notification_url\" => \"http://www.your-site.com\",\n  \"additional_info\" => [\n    \"ip_address\" => \"127.0.0.1\"\n  ],\n  \"transaction_details\" => [\n    \"financial_institution\" => $_POST['financialInstitution']\n  ],\n  \"payer\" => [\n    \"email\" => $_POST['email'],\n    \"entity_type\" => \"individual\",\n    \"first_name\" => $_POST['firstName'],\n    \"last_name\" => $_POST['lastName'],\n    \"identification\" => [\n        \"type\" => $_POST['identificationType'],\n        \"number\" => $_POST['identificationNumber']\n    ],\n    \"address\" => [\n        \"zip_code\" => $_POST['zipCode'],\n        \"street_name\" => $_POST['streetName'],\n        \"street_number\" => $_POST['streetNumber'],\n        \"neighborhood\" => $_POST['neighborhood'],\n        \"city\" => $_POST['city'],\n        \"federal_unit\" => $_POST['federalUnit']\n    ],\n    \"phone\" => [\n        \"area_code\" => $_POST['phoneAreaCode'],\n        \"number\" => $_POST['phoneNumber']\n    ],\n  ],\n];\n\n$payment = $client->create($createRequest, $request_options);\nprint_r($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Card Details with Mercado Pago SDK in PHP\nDESCRIPTION: Gets detailed information about a specific card associated with a customer using the CustomerCardClient. The function requires both the customer ID and the card ID to retrieve the stored card information. This allows access to specific payment method details when needed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/cards.en.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new CustomerCardClient();\n  $client->get(\"448870796-7ZjwhKGxILixxN\", \"8987269652\");\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating SPEI Transfer Payment with Mercado Pago in C#\nDESCRIPTION: C# implementation for creating a SPEI transfer payment using Mercado Pago SDK. It sets the access token, initializes a PaymentClient, configures payer and payment objects with required parameters, and asynchronously creates the payment. Returns a payment link for the user to complete the transfer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.en.md#2025-04-18_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ACCESS_TOKEN\";\n\nvar client = new PaymentClient();\n\nvar payer = new PaymentPayerRequest() {\n    Type = \"customer\",\n    Email = request.Email,\n    EntityType = \"individual\",\n    FirstName = request.PayerFirstName,\n    LastName = request.PayerLastName\n};\n\nvar paymentCreateRequest = new PaymentCreateRequest() {\n  TransactionAmount = 5000,\n    Description = \"description\",\n    PaymentMethodId = \"clabe\",\n    AdditionalInfo = additionalInfo,\n    CallbackUrl = \"https://your-site.com\",\n    Payer = payer\n};\n\nvar payment = await client.CreateAsync(paymentCreateRequest);\nvar paymentLink = payment.TransactionDetails.externalResourceUrl;\n```\n\n----------------------------------------\n\nTITLE: React Component for Payment Brick\nDESCRIPTION: This React code shows how to include the Payment Brick in a React component.  It imports the `Payment` component from the `@mercadopago/sdk-react` library and configures it with the `initialization`, `customization`, and callback props.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/default-rendering.en.md#2025-04-18_snippet_4\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { Payment } from '@mercadopago/sdk-react';\n\n<Payment\n   initialization={initialization}\n   customization={customization}\n   onSubmit={onSubmit}\n   onReady={onReady}\n   onError={onError}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Wallet Brick with Mercado Pago SDK\nDESCRIPTION: This HTML/JavaScript code snippet demonstrates how to render the Mercado Pago Wallet Brick on a webpage. It initializes the MercadoPago SDK with a public key, creates a Wallet Brick instance, and configures it with a preference ID and callback functions for ready, submit, and error events.  The `walletBrickController.unmount()` method allows the brick instance to be eliminated and recreated.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-onsubmit.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Bricks</title>\n  </head>\n  <body>\n    <div id=\"walletBrick_container\"></div>\n    <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n    <script>\n      const mp = new MercadoPago('YOUR_PUBLIC_KEY');\n      const bricksBuilder = mp.bricks();\n      const renderWalletBrick = async (bricksBuilder) => {\n        const settings = {\n          initialization: {\n             preferenceId: '<PREFERENCE_ID>', // preferenceId generated in backend\n          },\n          callbacks: {\n            onReady: () => {\n              /*\n                Callback called when Brick is ready.\n                Here you can hide loadings from your site, for example.\n              */\n            },\n            onSubmit: ({ selectedPaymentMethod, formData }) => {\n              // callback called when clicking Wallet Brick\n              // this is possible because the brick is a button\n            },\n            onError: (error) => {\n              // callback called for all Brick error cases\n              console.error(error);\n            },\n          },\n        };\n        window.walletBrickController = await bricksBuilder.create(\n          'wallet',\n          'walletBrick_container',\n          settings\n        );\n      };\n      renderWalletBrick(bricksBuilder);\n    </script>\n  </body>\n</html>\n\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Notification URL - C#\nDESCRIPTION: This code snippet demonstrates creating a payment with a specified notification URL using the Mercado Pago C# SDK. It initializes the MercadoPagoConfig, constructs a PaymentCreateRequest with payment details including the NotificationUrl, and then uses a PaymentClient to create the payment asynchronously. Payment status updates will be sent to the URL provided in NotificationUrl.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.en.md#2025-04-18_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\n\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\n\nvar paymentRequest = new PaymentCreateRequest\n{\n   TransactionAmount = decimal.Parse(Request[\"transactionAmount\"]),\n   Token = Request[\"token\"],\n   Description = Request[\"description\"],\n   Installments = int.Parse(Request[\"installments\"]),\n   PaymentMethodId = Request[\"paymentMethodId\"],\n   NotificationUrl = \"http://requestbin.fullcontact.com/1ogudgk1\",\n\n\n   Payer = new PaymentPayerRequest\n   {\n       Email = Request[\"email\"],\n       Identification = new IdentificationRequest\n       {\n           Type = Request[\"docType\"],\n           Number = Request[\"docNumber\"],\n       },\n   },\n};\n\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest);\n\n\nConsole.WriteLine(payment.Status);\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Brick Initialization with Review Step\nDESCRIPTION: Complete initialization configuration for Payment Brick including review step settings, items, shipping, billing, discounts and callbacks. The settings object contains all necessary parameters to enable and customize the confirmation step functionality.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/add-confirmation-step.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n  initialization: {\n    amount: 23.14,\n    items: {\n      totalItemsAmount: 33.14,\n      itemsList: [\n        {\n          units: 1,\n          value: 3.14,\n          name: \"<NAME>\",\n          description: \"<DESCRIPTION>\", // optional\n          imageURL: \"<IMAGE_URL>\", // optional\n        },\n        {\n          units: 3,\n          value: 10,\n          name: \"<NAME>\",\n          description: \"<DESCRIPTION>\", // optional\n          imageURL: \"<IMAGE_URL>\", // optional\n        },\n      ],\n    },\n    shipping: { // optional\n      costs: 5, // optional\n      shippingMode: \"<SHIPPING_MODE>\",\n      description: \"<SHIPPING_DESCRIPTION>\", // optional\n      receiverAddress: {\n        streetName: \"<STREET_NAME>\",\n        streetNumber: \"<STREET_NUMBER>\",\n        complement: \"<COMPLEMENT>\",\n        neighborhood: \"<PAYER_NEIGHBORHOOD>\", // optional\n        city: \"<PAYER_CITY>\", // optional\n        federalUnit: \"<PAYER_FED_UNIT>\", // optional\n        zipCode: \"<ZIP_CODE>\",\n        additionalInformation: \"<ADDITIONAL_INFORMATION>\", // opcional\n      },\n    },\n    payer: { // optional\n      email: \"<EMAIL>\",\n    },\n    billing: { // optional\n      firstName: \"<FIRST_NAME>\", // optional\n      lastName: \"<LAST_NAME>\", // optional\n      taxRegime: \"<TAX_REGIME>\", // optional\n      taxIdentificationNumber: \"<TAX_IDENTIFICATION_NUMBER>\",\n      identification: { // optional\n        type: \"<IDENTIFICATION_TYPE>\",\n        number: \"<IDENTIFICATION_NUMBER>\",\n      },\n      billingAddress: { // optional\n        streetName: \"<STREET_NAME>\",\n        streetNumber: \"<STREET_NUMBER>\",\n        neighborhood: \"<PAYER_NEIGHBORHOOD>\", // optional\n        city: \"<PAYER_CITY>\", // optional\n        federalUnit: \"<FED_UNIT>\", // optional\n        zipCode: \"<ZIP_CODE>\",\n      },\n    },\n    discounts: { // optional\n      totalDiscountsAmount: 15,\n      discountsList: [\n        {\n          name: \"<DISCOUNT_NAME>\",\n          value: 5,\n        },\n        {\n          name: \"<DISCOUNT_NAME_2>\",\n          value: 10,\n        },\n      ],\n    },\n  },\n  customization: {\n    enableReviewStep: true,\n    reviewCardsOrder: [\"payment_method\", \"shipping\", \"billing\"], // optional\n    paymentMethods: {\n      ticket: \"all\",\n      atm: \"all\",\n      creditCard: \"all\",\n      debitCard: \"all\",\n      mercadoPago: \"all\",\n    },\n  },\n  callbacks: {\n    onReady: () => {},\n    onSubmit: ({ selectedPaymentMethod, formData }) => {\n      return new Promise((resolve, reject) => {\n        fetch(\"/process_payment\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(formData),\n        })\n          .then((response) => response.json())\n          .then((response) => resolve(response))\n          .catch((error) => reject());\n      });\n    },\n    onError: (error) => console.error(error),\n    onClickEditShippingData: () => {}, // optional\n    onClickEditBillingData: () => {}, // optional\n    onRenderNextStep: (currentStep) => {}, // optional\n    onRenderPreviousStep: (currentStep) => {}, // optional\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating SPEI Transfer Payment with Mercado Pago in Python\nDESCRIPTION: Python implementation for creating a SPEI transfer payment using Mercado Pago SDK. It initializes the SDK with an access token, sets up payment data including transaction amount, description, payment method (clabe), and payer information, then creates the payment and extracts the payment link.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.en.md#2025-04-18_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n \npayment_data = {\n   \"transaction_amount\": 5000,\n   \"description\": \"description\",\n   \"payment_method_id\": \"clabe\",\n   \"payer\": {\n       \"type\": \"customer\",\n       \"email\": request.POST.get(\"email\"),\n       \"entity_type\": \"individual\",\n       \"first_name\": request.POST.get(\"first_name\"),\n       \"last_name\": request.POST.get(\"last_name\"),\n   }\n}\n \npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\nPayment_link = payment.transaction_details.external_resource_url\n```\n\n----------------------------------------\n\nTITLE: Handling Card Payment Methods\nDESCRIPTION: JavaScript code to handle card BIN detection and dynamically update payment method options, issuer, and installments based on the card number entered.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.en.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst paymentMethodElement = document.getElementById('paymentMethodId');\nconst issuerElement = document.getElementById('form-checkout__issuer');\nconst installmentsElement = document.getElementById('form-checkout__installments');\n\nconst issuerPlaceholder = \"Issuing bank\";\nconst installmentsPlaceholder = \"Installments\";\n\nlet currentBin;\ncardNumberElement.on('binChange', async(data) => {\nconst { bin } = date;\ntry {\nif (!bin && paymentMethodElement.value) {\nclearSelectsAndSetPlaceholders();\npaymentMethodElement.value = \"\";\n}\n\nif (bin && bin !== currentBin) {\nconst { results } = await mp.getPaymentMethods({ bin });\nconst paymentMethod = results[0];\n\npaymentMethodElement.value = paymentMethod.id;\nupdatePCIFieldsSettings(paymentMethod);\nupdateIssuer(paymentMethod, bin);\nupdateInstallments(paymentMethod, bin);\n}\n\ncurrentBin = bin;\n} catch (e) {\nconsole.error('error getting payment methods: ', e)\n}\n});\n\nfunction clearSelectsAndSetPlaceholders() {\nclearHTMLSelectChildrenFrom(issuerElement);\ncreateSelectElementPlaceholder(issuerElement, issuerPlaceholder);\n\nclearHTMLSelectChildrenFrom(installmentsElement);\ncreateSelectElementPlaceholder(installmentsElement, installmentsPlaceholder);\n}\n\nfunction clearHTMLSelectChildrenFrom(element) {\nconst currOptions = [...element.children];\ncurrOptions.forEach(child => child.remove());\n}\n\nfunction createSelectElementPlaceholder(element, placeholder) {\nconst optionElement = document.createElement('option');\noptionElement.textContent = placeholder;\noptionElement.setAttribute('selected', \"\");\noptionElement.setAttribute('disabled', \"\");\n\nelement.appendChild(optionElement);\n}\n\nfunction updatePCIFieldsSettings(paymentMethod) {\nconst { settings } = paymentMethod;\n\nconst cardNumberSettings = settings[0].card_number;\ncardNumberElement.update({\nsettings: cardNumberSettings\n});\n\nconst securityCodeSettings = settings[0].security_code;\nsecurityCodeElement.update({\nsettings: securityCodeSettings\n});\n}\n```\n\n----------------------------------------\n\nTITLE: Including MercadoPago.js V1 SDK in HTML\nDESCRIPTION: The code snippet shows how to include the MercadoPago.js V1 SDK in the HTML of your application. This is the first step required to implement Mercado Pago payment processing on your frontend.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/mp-js-v1.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script src=\"https://secure.mlstatic.com/sdk/javascript/v1/mercadopago.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Saving Card Reference with Mercado Pago SDK in Java\nDESCRIPTION: This Java code snippet demonstrates how to save the reference of a customer's card securely using the Mercado Pago SDK. It requires the customer ID and a card token. The method 'create' is invoked on 'CustomerCardClient', which interacts with the server to store the card reference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/cards.en.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nCustomerCardClient client = new CustomerCardClient();\n\nString customerId = \"448870796-7ZjwhKGxILixxN\";\n\nCustomerCardCreateRequest request = CustomerCardCreateRequest.builder()\n   .token(\"9b2d63e00d66a8c721607214ceda233a\")\n   .build();\n\nclient.create(customerId, request);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Payment Methods with Node.js SDK\nDESCRIPTION: Code to fetch all available payment methods using Mercado Pago's Node.js SDK. This implementation configures the client with an access token and then makes a GET request to retrieve payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, PaymentMethods } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst paymentMethods = new PaymentMethods(client);\n\npaymentMethods.get().then((result) => console.log(result))\n  .catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Cancelling Payment with MercadoPago SDK in Java\nDESCRIPTION: The snippet demonstrates how to use the MercadoPago SDK to cancel a payment using its unique payment ID. It requires setting the access token and using the PaymentClient class to perform the cancellation. The method 'cancel' accepts a payment ID and returns a Payment object, which encapsulates the details of the cancelled transaction. Ensure that the correct payment ID and a valid access token are provided.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/cancellation.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\nPayment payment = client.cancel(\"<PAYMENT_ID>\");\n```\n\n----------------------------------------\n\nTITLE: Initialize Mercado Pago Checkout with JavaScript\nDESCRIPTION: This snippet initializes the Mercado Pago Checkout process using the MercadoPago.js SDK. It configures the public key and preference ID, creates a checkout instance, and renders the payment button within a specified container. It is essential for setting up the client-side checkout experience after including the SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/add-sdk-and-initialize.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n<script>\n  // Configure sua chave pública do Mercado Pago\n  const publicKey = 'YOUR_PUBLIC_KEY';  \n  // Configure o ID de preferência que você deve receber do seu backend\n  const preferenceId = 'YOUR_PREFERENCE_ID';\n  \n  // Inicializa o SDK do Mercado Pago\n  const mp = new MercadoPago(publicKey);\n  \n  // Cria o botão de pagamento\n  const checkout = mp.checkout({\n    preference: {\n      id: preferenceId\n    },\n    render: {\n      container: '#wallet_container', // Use o ID do seu div existente\n      label: 'Pagar com Mercado Pago'\n    }\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Updating Merchant Orders with Java SDK\nDESCRIPTION: The snippet demonstrates how to update an existing merchant order by specifying its ID and providing the updated details. This includes item information and payer updates, allowing for dynamic modification of order details post-creation. It is crucial for maintaining accurate order records.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/orders.en.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nMerchantOrderClient client = new MerchantOrderClient();\n\nLong orderId = 123456789L;\n\nList<MerchantOrderItemRequest> items = new ArrayList<>();\n\nMerchantOrderItemRequest item =\n   MerchantOrderItemRequest.builder()\n       .id(\"item id\")\n       .categoryId(\"item category\")\n       .currencyId(\"BRL\")\n       .description(\"item description\")\n       .pictureUrl(\"item picture\")\n       .quantity(1)\n       .unitPrice(new BigDecimal(\"5\"))\n       .title(\"item title\")\n       .build();\n\nitems.add(item);\n\nMerchantOrderUpdateRequest updateRequest =\n   MerchantOrderUpdateRequest.builder()\n       .externalReference(\"default\")\n       .payer(MerchantOrderPayerRequest.builder().id(123L).nickname(\"JOHN\").build())\n       .siteId(\"MLA\")\n       .items(items)\n       .build();\n\nclient.update(orderId, updateRequest);\n```\n\n----------------------------------------\n\nTITLE: Configurar URLs de retorno en Node.js para Checkout Pro\nDESCRIPTION: Ejemplo de cómo configurar las URLs de retorno y auto_return en Node.js para la preferencia de pago de Checkout Pro. Define URLs para escenarios de éxito, fallo y pendiente.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-return-urls.es.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar preference = {}\npreference = {\n  // ...\n  \"back_urls\": {\n        \"success\": \"https://www.tu-sitio/success\",\n        \"failure\": \"http://www.tu-sitio/failure\",\n        \"pending\": \"http://www.tu-sitio/pending\"\n    },\n    \"auto_return\": \"approved\",\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Partial Refund Using PaymentRefundClient in PHP\nDESCRIPTION: This code snippet shows how to create a partial refund using the PaymentRefundClient SDK. It requires the `PaymentRefundClient` library and takes two parameters: the payment ID and the amount to be refunded. Ensure the amount does not exceed the original transaction value.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/refunds.en.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n $refund_client = new PaymentRefundClient();\n $refund_client->refund(123456789, 100);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference in C#\nDESCRIPTION: Create a Mercado Pago payment preference using C# with wallet purchase purpose and a product item\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/default-rendering.en.md#2025-04-18_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nvar request = new PreferenceRequest\n{\n    Purpose = 'wallet_purchase',\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"Meu produto\",\n            Quantity = 1,\n            CurrencyId = \"BRL\",\n            UnitPrice = 75.56m,\n        },\n    },\n};\n\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Preferences JSON\nDESCRIPTION: This JSON snippet shows an example of a complete payment preference configuration for the Mercado Pago Payment Brick. It includes details about items, payer information, URLs for success/failure/pending scenarios, payment method customizations, notification URLs, and expiration settings.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"items\": [\n        {\n            \"id\": \"item-ID-1234\",\n            \"title\": \"Meu produto\",\n            \"currency_id\": \"BRL\",\n            \"picture_url\": \"https://www.mercadopago.com/org-img/MP3/home/logomp3.gif\",\n            \"description\": \"Descrição do Item\",\n            \"category_id\": \"art\",\n            \"quantity\": 1,\n            \"unit_price\": 75.76\n        }\n    ],\n    \"payer\": {\n        \"name\": \"<PAYER_NAME_HERE>\",\n        \"surname\": \"<PAYER_SURNAME_HERE>\",\n        \"email\": \"<PAYER_EMAIL_HERE>\",\n        \"phone\": {\n            \"area_code\": \"<PAYER_AREA_CODE_HERE>\",\n            \"number\": \"<PAYER_PHONE_NUMBER_HERE>\"\n        },\n        \"identification\": {\n            \"type\": \"<PAYER_DOC_TYPE_HERE>\",\n            \"number\": \"<PAYER_DOC_NUMBER_HERE>\"\n        },\n        \"address\": {\n            \"street_name\": \"Street\",\n            \"street_number\": 123,\n            \"zip_code\": \"<PAYER_ZIP_CODE_HERE>\"\n        }\n    },\n    \"back_urls\": {\n        \"success\": \"https://www.success.com\",\n        \"failure\": \"http://www.failure.com\",\n        \"pending\": \"http://www.pending.com\"\n    },\n    \"auto_return\": \"approved\",\n    \"payment_methods\": {\n        \"excluded_payment_methods\": [\n            {\n                \"id\": \"master\"\n            }\n        ],\n        \"excluded_payment_types\": [\n            {\n                \"id\": \"ticket\"\n            }\n        ],\n        \"installments\": 12\n    },\n    \"notification_url\": \"https://www.your-site.com/ipn\",\n    \"statement_descriptor\": \"MEUNEGOCIO\",\n    \"external_reference\": \"Reference_1234\",\n    \"expires\": true,\n    \"expiration_date_from\": \"2016-02-01T12:00:00.000-04:00\",\n    \"expiration_date_to\": \"2016-02-28T12:00:00.000-04:00\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference - Multi-language Implementation\nDESCRIPTION: Examples showing how to create a payment preference object across different programming languages using Mercado Pago's SDK. The preference includes basic item details like title, quantity, and unit price.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-preferences.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$client = new PreferenceClient();\n$preference = $client->create([\n  \"items\"=> array(\n    array(\n      \"title\" => \"Mi producto\",\n      \"quantity\" => 1,\n      \"unit_price\" => 2000\n    )\n  )\n]);\n\necho $preference\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nconst preference = new Preference(client);\n\npreference.create({\n  body: {\n    items: [\n      {\n        title: 'Mi producto',\n        quantity: 1,\n        unit_price: 2000\n      }\n    ],\n  }\n})\n.then(console.log)\n.catch(console.log);\n```\n\nLANGUAGE: java\nCODE:\n```\nPreferenceItemRequest itemRequest =\n       PreferenceItemRequest.builder()\n           .id(\"1234\")\n           .title(\"Games\")\n           .description(\"PS5\")\n           .pictureUrl(\"http://picture.com/PS5\")\n           .categoryId(\"games\")\n           .quantity(2)\n           .currencyId(\"BRL\")\n           .unitPrice(new BigDecimal(\"4000\"))\n           .build();\n   List<PreferenceItemRequest> items = new ArrayList<>();\n   items.add(itemRequest);\nPreferenceRequest preferenceRequest = PreferenceRequest.builder()\n.items(items).build();\nPreferenceClient client = new PreferenceClient();\nPreference preference = client.create(request);\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Crea un objeto de preferencia\npreference_data = {\n  items: [\n    {\n      title: 'Mi producto',\n      unit_price: 75.56,\n      quantity: 1\n    }\n  ]\n}\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n\n# Este valor reemplazará el string \"<%= @preference_id %>\" en tu HTML\n@preference_id = preference['id']\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Crea el objeto de request de la preference\nvar request = new PreferenceRequest\n{\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"Mi producto\",\n            Quantity = 1,\n            CurrencyId = \"ARS\",\n            UnitPrice = 75.56m,\n        },\n    },\n};\n\n// Crea la preferencia usando el client\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\nLANGUAGE: python\nCODE:\n```\n# Crea un ítem en la preferencia\npreference_data = {\n    \"items\": [\n        {\n            \"title\": \"Mi producto\",\n            \"quantity\": 1,\n            \"unit_price\": 75.76,\n        }\n    ]\n}\n\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\nLANGUAGE: go\nCODE:\n```\nclient := preference.NewClient(cfg)\n\nrequest := preference.Request{\n\tItems: []preference.ItemRequest{\n\t\t{\n\t\t\tTitle:       \"My product\",\n\t\t\tQuantity:    1,\n\t\t\tUnitPrice:   75.76,\n\t\t},\n\t},\n}\n\nresource, err := client.Create(context.Background(), request)\nif err != nil {\n\tfmt.Println(err)\n\treturn\n}\n\nfmt.Println(resource)\n```\n\n----------------------------------------\n\nTITLE: PHP Webhook Signature Validation\nDESCRIPTION: PHP implementation for validating Mercado Pago webhook signatures using HMAC-SHA256, including header parsing and signature comparison.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.en.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Obtain the x-signature value from the header\n$xSignature = $_SERVER['HTTP_X_SIGNATURE'];\n$xRequestId = $_SERVER['HTTP_X_REQUEST_ID'];\n\n// Obtain Query params related to the request URL\n$queryParams = $_GET;\n\n// Extract the \"data.id\" from the query params\n$dataID = isset($queryParams['data.id']) ? $queryParams['data.id'] : '';\n\n// Separating the x-signature into parts\n$parts = explode(',', $xSignature);\n\n// Initializing variables to store ts and hash\n$ts = null;\n$hash = null;\n\n// Iterate over the values to obtain ts and v1\nforeach ($parts as $part) {\n    // Split each part into key and value\n    $keyValue = explode('=', $part, 2);\n    if (count($keyValue) == 2) {\n        $key = trim($keyValue[0]);\n        $value = trim($keyValue[1]);\n        if ($key === \"ts\") {\n            $ts = $value;\n        } elseif ($key === \"v1\") {\n            $hash = $value;\n        }\n    }\n}\n\n// Obtain the secret key for the user/application from Mercadopago developers site\n$secret = \"your_secret_key_here\";\n\n// Generate the manifest string\n$manifest = \"id:$dataID;request-id:$xRequestId;ts:$ts;\";\n\n// Create an HMAC signature defining the hash type and the key as a byte array\n$sha = hash_hmac('sha256', $manifest, $secret);\nif ($sha === $hash) {\n    // HMAC verification passed\n    echo \"HMAC verification passed\";\n} else {\n    // HMAC verification failed\n    echo \"HMAC verification failed\";\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Configuring MercadoPago Credentials\nDESCRIPTION: JavaScript code to initialize the MercadoPago object with your public key. This is the first step in the payment integration process and is required for secure payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.es.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mp = new MercadoPago('YOUR_PUBLIC_KEY');\n```\n\n----------------------------------------\n\nTITLE: Setting Integrator and Platform IDs in Python for Mercado Pago SDK\nDESCRIPTION: This code snippet illustrates how to set the platform ID and integrator ID using the Mercado Pago Python SDK. It allows developers to identify their integrations for metrics and benefits.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/metrics/integration-metrics.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nfrom mercadopago.config import RequestOptions\nrequest_options = RequestOptions(\n    integrator_id=\"INTEGRATOR_ID\",\n    platform_id=\"PLATFORM_ID\"\n)\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\", request_options=request_options)\n```\n\n----------------------------------------\n\nTITLE: Get Payment by ID - API Request\nDESCRIPTION: API request to retrieve information about a specific payment using its ID. Requires an access token for authentication.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/retrieving-payments.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -G -X GET \\\n-H \"accept: application/json\" \\\n\"https://api.mercadopago.com/v1/payments/<payment_id>\" \\\n-d \"access_token=ACCESS_TOKEN\" \\\n-d \"status=approved\" \\\n-d \"offset=0\" \\\n-d \"limit=10\"`\n```\n\n----------------------------------------\n\nTITLE: Initial Subscription Payment Request JSON\nDESCRIPTION: Example of the initial subscription payment request payload structure showing required fields for first-time payments including subscription details, payment information, and point of interaction data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/subscription-messaging.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"payer\": {...},\n    \"transaction_amount\": 20,\n    \"description\": \"...\",\n    \"token\": \"....\",\n    \"statement_descriptor\": \"PRUEBA\",\n    \"issuer_id\": ...,\n    \"payment_method_id\": \"...\",\n    \"amounts\": {...},\n    \"installments\": 1,\n    \"pos_id\": \"....\",\n    \"external_reference\": \"...\",\n    \"point_of_interaction\": {\n        \"type\": \"SUBSCRIPTIONS\",\n        \"transaction_data\": {\n            \"first_time_use\": true,\n            \"subscription_id\": \"COLLECTORPADRE-SUBSCRIPCION_ID\",\n            \"subscription_sequence\": {\n                \"number\": 1,\n                \"total\": 12\n            },\n            \"invoice_period\": {\n                \"period\": 1,\n                \"type\": \"monthly\"\n            },\n            \"payment_reference\": {\n                \"id\": \"20792195335\"\n            },\n            \"user_present\": true/false,\n            \"billing_date\": \"2024-03-16\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Customer with MercadoPago SDK in PHP\nDESCRIPTION: This code demonstrates how to create a new customer using MercadoPago's CustomerClient. It includes detailed customer information such as email, name, phone, identification, address, and additional metadata.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/customers.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new CustomerClient();\n  $body = [\n    'email' => 'test_user_123243148932@testuser.com',\n    'first_name' => 'Jhon',\n    'last_name' => 'Doe',\n    'phone' => [\n        'area_code' => '55',\n        'number' => '991234567'\n    ],\n    'identification' => [\n        'type' => 'CPF',\n        'number' => '12345678900'\n    ],\n    'default_address' => 'Home',\n    'address' => [\n        'id' => '123123',\n        'zip_code' => '01234567',\n        'street_name' => 'Rua Exemplo',\n        'street_number' => 123,\n        'city' => []\n    ],\n    'date_registered' => '2023-09-07T11:37:30.000-04:00',\n    'description' => 'Description del user',\n    'default_card' => 'None'\n  ];\n\n  $client->create($body);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating a Customer with MercadoPago SDK in Node.js\nDESCRIPTION: This snippet demonstrates how to create a new customer using MercadoPago's SDK. It initializes the MercadoPago client with an access token and sets customer details including email, name, phone, identification, address, and other fields.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/customers.es.md#2025-04-18_snippet_0\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerClient = new Customer(client);\n\nconst body = {\n\temail: 'jhon@doe.com',\n\tfirst_name: 'Jhon',\n\tlast_name: 'Doe',\n\tphone: {\n\t\tarea_code: '55',\n\t\tnumber: '991234567'\n\t},\n\tidentification: {\n\t\ttype: 'CPF',\n\t\tnumber: '12345678900'\n\t},\n\tdefault_address: 'Home',\n\taddress: {\n\t\tid: '123123',\n\t\tzip_code: '01234567',\n\t\tstreet_name: 'Rua Exemplo',\n\t\tstreet_number: '123',\n\t\tcity: {}\n\t},\n\tdate_registered: '2021-10-20T11:37:30.000-04:00',\n\tdescription: 'Description del user',\n\tdefault_card: 'None'\n};\n\ncustomerClient.create({ body: body }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Hiding Form Title and Flags in Card Payment Brick\nDESCRIPTION: This snippet demonstrates how to hide the title line and accepted flags in the Card Payment Form Brick. It uses the customization.hideFormTitle property set to true.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/hide-element.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n   ...,\n   customization: {\n       visual: {\n           hideFormTitle: true\n       }\n   }\n}\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n   hideFormTitle: true\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Consultando Meios de Pagamento com MercadoPago SDK em Node.js\nDESCRIPTION: Este código demonstra como usar o SDK do MercadoPago para obter uma lista de todos os meios de pagamento disponíveis. É necessário configurar o cliente com um token de acesso válido e então utilizar o método 'get()' da classe PaymentMethod.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/payment-methods.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\n\nconst paymentMethod = new PaymentMethod(client);\n\npaymentMethod.get().then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK with Node.js\nDESCRIPTION: This Node.js code snippet initializes the Mercado Pago SDK and configures the access token. The access token is essential for authenticating requests to the Mercado Pago API and facilitating the creation of preferences.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/default-rendering.en.md#2025-04-18_snippet_6\n\nLANGUAGE: node\nCODE:\n```\n// Mercado Pago SDK\nconst mercadopago = require ('mercadopago');\n// Add Your credentials\nmercadopago.configure({\n  access_token: 'PROD_ACCESS_TOKEN'\n});\n```\n\n----------------------------------------\n\nTITLE: Associating Facebook Ads with a Preference in Mercado Pago SDK - C#\nDESCRIPTION: This snippet demonstrates how to associate a Facebook pixel with a preference in the Mercado Pago SDK. It includes defining the tracking details including pixel ID and integrates it within the preference request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/preferences.en.md#2025-04-18_snippet_2\n\nLANGUAGE: dotnet\nCODE:\n```\n// Associate your Facebook pixel\nvar tracks = new List<PreferenceTrackRequest>\n{\n    new PreferenceTrackRequest\n    {\n        Type = \"facebook_ad\",\n        Values = new PreferenceTrackValuesRequest\n        {\n            PixelId = \"PIXEL_ID\",\n        },\n    },\n};\nvar request = new PreferenceRequest\n{\n    // ...\n    Tracks = tracks,\n};\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Creating Total Refund in PHP\nDESCRIPTION: Method to process a full refund for a specific payment using Mercado Pago SDK. Requires payment ID as input parameter.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/refunds.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n $refund_client = new PaymentRefundClient();\n $refund_client->refundTotal(123456789);\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating Payment Amount - JavaScript\nDESCRIPTION: This snippet demonstrates how to call the update method from the Payment Brick Controller to update the payment amount. It initializes the amount variable and passes it to the update method. The validation ensures that the new amount is acceptable based on business rules.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/update-data.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet amount = 95;\npaymentBrickController.update({ amount });\n```\n\n----------------------------------------\n\nTITLE: Performing Payment with Application Fee in Checkout API (Curl)\nDESCRIPTION: This Curl command performs a payment through the Checkout API with an application fee specified. It targets the /payments endpoint and includes headers for authentication and content type, requiring an OAuth access token. The payload contains details like payment description, installments, a card token, payer email, payment method, transaction amount, and application fee. This setup is required to designate the marketplace's fee for each payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/integrate-marketplace.en.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'accept: application/json' \\\n--header 'content-type: application/json' \\\n--header 'Authorization: Bearer {{oauth_access_token}}' \\\n--data-raw '{\n \"description\": \"Test payment 3\",\n \"installments\": 1,\n \"token\": \"{{card_token}}\",\n \"payer\": {\n \"email\": \"{{payer_email}}\"\n },\n \"payment_method_id\": \"master\",\n \"transaction_amount\": 25,\n \"application_fee\": 10\n}'\n```\n\n----------------------------------------\n\nTITLE: Integrating the Payment Form with MercadoPago.js - JavaScript\nDESCRIPTION: This JavaScript snippet initializes the CardForm functionality of the MercadoPago.js library, linking form field identifiers to their respective attributes. The snippet also handles form submission and processes payment data securely.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/secure-fields-card.en.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Step #3\nconst cardForm = mp.cardForm({\n   amount: '100.5',\n   iframe: true,\n   form: {\n     id: 'form-checkout',\n     cardholderName: {\n       id: 'form-checkout__cardholderName',\n       placeholder: \"Card Holder\",\n     },\n     cardholderEmail: {\n       id: 'form-checkout__cardholderEmail',\n       placeholder: 'E-mail'\n     },\n     cardNumber: {\n       id: 'form-checkout__cardNumber-container',\n       placeholder: 'Card Number',\n     },\n     securityCode: {\n       id: 'form-checkout__securityCode-container',\n       placeholder: 'CVV'\n     },\n     installments: {\n       id: 'form-checkout__installments',\n       placeholder: 'Installments'\n     },\n     expirationDate: {\n       id: 'form-checkout__expirationDate-container',\n       placeholder: 'Expiration Date (MM/YYYY)',\n     },----[mla, mlb, mlu, mlc, mpe, mco]----\n     identificationType: {\n       id: 'form-checkout__identificationType',\n       placeholder: 'Document type'\n     },------------\n     identificationNumber: {\n       id: 'form-checkout__identificationNumber',\n       placeholder: 'Document value'\n     },\n     issuer: {\n       id: 'form-checkout__issuer',\n       placeholder: 'Issuer'\n     }\n   },\n   callbacks: {\n     onFormMounted: function (error) {\n       if (error) return console.log('Callback para tratar o erro: montando o cardForm ', error)\n     },\n     onSubmit: function (event) {\n       event.preventDefault();\n \n       const {\n         paymentMethodId: payment_method_id,\n         issuerId: issuer_id,\n         cardholderEmail: email,\n         amount,\n         token,\n         installments,\n         identificationNumber----[mla, mlb, mlu, mlc, mpe, mco]----,\n         identificationType------------\n       } = cardForm.getCardFormData();\n \n        fetch('/process_payment', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            token,\n            issuer_id,\n            payment_method_id,\n            transaction_amount: Number(amount),\n            installments: Number(installments),\n            description: 'product description',\n            payer: {\n              email,\n              identification: {----[mla, mlb, mlu, mlc, mpe, mco]----\n                type: identificationType,------------\n                number: identificationNumber\n             }\n           }\n         })\n       })\n     },\n     onFetching: function (resource) {\n       console.log('fetching... ', resource)\n       const progressBar = document.querySelector('.progress-bar')\n       progressBar.removeAttribute('value')\n \n       return () => {\n         progressBar.setAttribute('value', '0')\n       }\n     }\n   }\n });\n```\n\n----------------------------------------\n\nTITLE: Creating PagoEfectivo Payment with Mercado Pago SDK (Ruby)\nDESCRIPTION: This Ruby code snippet shows how to create a PagoEfectivo payment using the Mercado Pago SDK. It initializes the SDK with an access token, sets up the payment request with necessary details, and creates the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\npayment_request = {\n  transaction_amount: 100,\n  description: 'Título do produto',\n  payment_method_id: 'pagoefectivo_atm',\n  payer: {\n    email: 'test_user_42972582@testuser.com'\n  }\n}\n\npayment_response = sdk.payment.create(payment_request)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with 3DS (Optional) using Python\nDESCRIPTION: This Python code snippet demonstrates creating a payment with the `three_d_secure_mode` set to `optional` using the Mercado Pago API. It initializes the MercadoPago SDK, constructs a payment data dictionary with transaction details and payer information extracted from the request, and then uses the `payment().create` method to submit the payment request. The MercadoPago Python SDK is required.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.pt.md#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n \npayment_data = {\n   \"transaction_amount\": float(request.POST.get(\"transaction_amount\")),\n   \"token\": request.POST.get(\"token\"),\n   \"description\": request.POST.get(\"description\"),\n   \"installments\": int(request.POST.get(\"installments\")),\n   \"payment_method_id\": request.POST.get(\"payment_method_id\")),\n   \"payer\": {\n       \"email\": request.POST.get(\"email\")),\n       \"identification\": {\n           \"type\": request.POST.get(\"type\"), \n           \"number\": request.POST.get(\"number\")\n       }\n   }\n   \"three_d_secure_mode\": \"optional\"\n}\n \npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n \nprint(payment)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Back URLs in Mercado Pago SDK - PHP\nDESCRIPTION: This PHP snippet demonstrates how to configure back URLs using the Mercado Pago SDK to handle user redirection after a transaction, based on its status. Dependencies: MercadoPago PHP SDK. Key parameters: success, failure, pending URLs, and auto_return for specifying automatic redirection.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/redirection.en.md#2025-04-18_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\\n$preference = new MercadoPago\\\\Preference();\\n//...\\n$preference->back_urls = array(\\n    \\\"success\\\" => \\\"https://www.seu-site/success\\\",\\n    \\\"failure\\\" => \\\"http://www.seu-site/failure\\\",\\n    \\\"pending\\\" => \\\"http://www.seu-site/pending\\\"\\n);\\n$preference->auto_return = \\\"approved\\\";\\n// ...\\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Installment Options in Mercado Pago\nDESCRIPTION: This function fetches available installment options for the payment. It calls the Mercado Pago API with the transaction amount, card BIN, and payment type to retrieve installment options and populates the installments dropdown menu.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nasync function updateInstallments(paymentMethod, bin) {\n  try {\n    const installments = await mp.getInstallments({\n      amount: document.getElementById('transactionAmount').value,\n      bin,\n      paymentTypeId: 'credit_card'\n    });\n    const installmentOptions = installments[0].payer_costs;\n    const installmentOptionsKeys = { label: 'recommended_message', value: 'installments' };\n    createSelectOptions(installmentsElement, installmentOptions, installmentOptionsKeys);\n  } catch (error) {\n    console.error('error getting installments: ', e)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Pix Payments with Mercado Pago SDKs\nDESCRIPTION: Code examples for creating Pix payments using Mercado Pago's SDKs in different programming languages. Each example shows how to send a POST request to the /v1/payments endpoint with the required parameters including transaction amount, payment method, and payer email, along with the mandatory X-Idempotency-Key header.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pix.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\Client\\Common\\RequestOptions;\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n \"transaction_amount\" => (float) $_POST['<TRANSACTION_AMOUNT>'],\n    \"payment_method_id\" => $_POST['<PAYMENT_METHOD_ID>'],\n    \"payer\" => [\n      \"email\" => $_POST['<EMAIL>']\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\npayment.create({ body: {\n\ttransaction_amount: 12.34,\n\tdescription: '<DESCRIPTION>',\n\tpayment_method_id: 'pix',\n\tpayer: {\n\t\temail: '<EMAIL>'\n\t}}, requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' } \n}).then(console.log).catch(console.log);\n```\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest paymentCreateRequest =\n   PaymentCreateRequest.builder()\n       .transactionAmount(new BigDecimal(\"100\"))\n       .paymentMethodId(\"pix\")\n       .payer(\n           PaymentPayerRequest.builder()\n               .email(\"PAYER_EMAIL_HERE\")\n               .build())\n       .build();\n\nclient.create(paymentCreateRequest, requestOptions);\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_request = {\n  transaction_amount: 100,\n  payment_method_id: 'pix',\n  payer: {\n    email: 'PAYER_EMAIL_HERE',\n  }\n}\n\npayment_response = sdk.payment.create(payment_request, custom_request_options)\npayment = payment_response[:response]\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = 105,\n    PaymentMethodId = \"pix\",\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"PAYER_EMAIL_HERE\",\n    },\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request, requestOptions);\n\n```\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n    \"transaction_amount\": 100,\n    \"payment_method_id\": \"pix\",\n    \"payer\": {\n        \"email\": \"PAYER_EMAIL_HERE\",\n    }\n}\n\npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n    'https://api.mercadopago.com/v1/payments' \\\n    -d '{\n      \"transaction_amount\": 100,\n      \"payment_method_id\": \"pix\",\n      \"payer\": {\n        \"email\": \"PAYER_EMAIL_HERE\"\n      }\n    }'\n```\n\n----------------------------------------\n\nTITLE: Creating a Merchant Order in PHP\nDESCRIPTION: Creates a new merchant order with item details, payer information, and application ID using Mercado Pago SDK\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/orders.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new MerchantOrderClient();\n\n  $item = [\n    \"id\" => \"item id\",\n    \"category_id\" => \"item category\",\n    \"currency_id\" => \"BRL\",\n    \"description\" => \"item description\",\n    \"picture_url\" => \"item picture\",\n    \"quantity\" => 1,\n    \"unit_price\" => \"5\",\n    \"title\" => \"item title\"\n  ];\n\n  $createRequest = [\n    \"external_reference\" => \"default\",\n    \"preference_id\" => \"Preference identification\",\n    \"payer\" => [\n        \"id\" => 123,\n        \"nickname\" => \"JOHN\"\n    ],\n    \"site_id\" => \"MLA\",\n    \"items\" => $items,\n    \"application_id\" => \"10000000000000000\"\n  ];\n\n  $client->create(createRequest);\n?>\n```\n\n----------------------------------------\n\nTITLE: Installing Mercado Pago SDK\nDESCRIPTION: Instructions for installing the Mercado Pago SDK using package managers for different programming languages.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-checkout.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp composer.phar require \"mercadopago/dx-php\"\n```\n\nLANGUAGE: node\nCODE:\n```\nnpm install mercadopago\n```\n\nLANGUAGE: java\nCODE:\n```\n<dependency>\n   <groupId>com.mercadopago</groupId>\n   <artifactId>sdk-java</artifactId>\n   <version>2.1.7</version>\n</dependency>\n```\n\nLANGUAGE: ruby\nCODE:\n```\ngem install mercadopago-sdk\n```\n\nLANGUAGE: csharp\nCODE:\n```\nnuget install mercadopago-sdk\n```\n\nLANGUAGE: python\nCODE:\n```\npip3 install mercadopago\n```\n\n----------------------------------------\n\nTITLE: Getting Payment Methods in Kotlin\nDESCRIPTION: Demonstrates how to fetch payment methods using MPManager.paymentMethodsTools in Kotlin. The response is handled through success and error callbacks, allowing for rendering payment methods in a recycler view.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/get-payment-methods.es.md#2025-04-18_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nMPManager.paymentMethodsTools.getPaymentMethods { response ->\n   response\n       .doIfSuccess { result ->\n           // Puedes renderizar la lista de payment methods en un recycler view\n       }.doIfError { exception ->\n           // Manejo del error\n       }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Cash Payments with Rapipago/Pago Fácil in Java\nDESCRIPTION: Java implementation for creating cash payments using Mercado Pago's Payment Client. Shows how to build a payment request with transaction amount, payment method, payer information, and idempotency key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_26\n\nLANGUAGE: java\nCODE:\n```\nPaymentCreateRequest paymentCreateRequest = PaymentCreateRequest.builder()\n          .transactionAmount(new BigDecimal(\"<TRANSACTION_AMOUNT>\"))\n          .paymentMethodId(\"<PAYMENT_METHOD_ID>\")\n          .payer(\n              PaymentPayerRequest.builder()\n                  .email(\"<EMAIL>\").build()\n          ).build();\n\nMap<String, String> customHeaders = new HashMap<>();\ncustomHeaders.put(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n\nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders).build();\n\nPaymentClient client = new PaymentClient();\nclient.create(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Configuring Card Payment Brick in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure and initialize the Card Payment Brick using JavaScript. It sets up the initialization parameters, defines callback functions for various events, and creates the brick instance.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/default-rendering.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nconst renderCardPaymentBrick = async (bricksBuilder) => {\n const settings = {\n   initialization: {\n     amount: 100, // total amount to be paid\n   },\n   callbacks: {\n     onReady: () => {\n       /*\n         Callback called when Brick is ready.\n         Here you can hide loadings from your site, for example.\n       */\n     },\n     onSubmit: (formData) => {\n       // callback called when clicking on the submit data button\n       return new Promise((resolve, reject) => {\n         fetch('/process_payment', {\n           method: 'POST',\n           headers: {\n             'Content-Type': 'application/json',\n           },\n           body: JSON.stringify(formData),\n         })\n           .then((response) => response.json())\n           .then((response) => {\n             // receive payment result\n             resolve();\n           })\n           .catch((error) => {\n             // handle error response when trying to create payment\n             reject();\n           });\n       });\n     },\n     onError: (error) => {\n       // callback called for all Brick error cases\n       console.error(error);\n     },\n   },\n  };\n  window.cardPaymentBrickController = await bricksBuilder.create(\n   'cardPayment',\n   'cardPaymentBrick_container',\n   settings,\n  );  \n};\nrenderCardPaymentBrick(bricksBuilder);\n```\n\n----------------------------------------\n\nTITLE: Listing Customer Cards with Python\nDESCRIPTION: Retrieves the list of customer cards using the Python SDK. It calls the `list_all` method on the `card` resource with the customer ID to retrieve the cards.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/get-cards-list.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncards_response = sdk.card().list_all(customer_id)\ncards = cards_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Customer and Card with MercadoPago SDK in PHP\nDESCRIPTION: This PHP snippet demonstrates how to create a customer and associate a card using the MercadoPago PHP SDK. It utilizes an access token for authentication and requires the 'CustomerClient' for creating a customer based on an email and 'CustomerCardClient' for linking a card with a token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/create-customer-and-card.en.md#2025-04-18_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n  \n  $client_customer = new CustomerClient();\n  $customer = $client_customer->create([\"email\" => \"my.user@example.com\"]);\n  $client = new CustomerCardClient();\n  $customer_card = $client->create($customer->id, [\"token\" => \"your_card_token\"]);\n?>\n\n```\n\n----------------------------------------\n\nTITLE: Installing Mercado Pago SDK JS via HTML Script Tag or NPM\nDESCRIPTION: Instructions for installing the Mercado Pago frontend SDK using either an HTML script tag or through npm package manager. Both methods allow integration of the SDK into your application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/mp-js-v2.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Tourism Item Details via API using curl\nDESCRIPTION: This snippet demonstrates how to create a Mercado Pago checkout preference specifically tailored for tourism-related items using a curl request. It includes detailed item descriptions with passenger and route information. This configuration highlights specific fields relevant to the tourism sector such as departure and arrival dates, company, and passenger details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/industry-data/additional-info.en.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/checkout/preferences' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--data-raw '{ \n    \"auto_return\": \"approved\",\n    \"back_urls\": {\n        \"failure\": \"https://www.mercadopago.com/home/failure\",\n        \"pending\": \"https://www.mercadopago.com/home/pending\",\n        \"success\": \"https://www.mercadopago.com/home/success\"\n    },\n    \"notification_url\": \"https://webhook.site/xyz\",\n    \"expires\": false,\n    \"external_reference\": \"order-123\",\n    \"date_of_expiration\": \"2025-03-12T12:58:41.425-04:00\",\n    \"items\": [\n        {\n            \"id\": \"1234\",\n            \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n            \"title\": \"Service\",\n            \"description\": \"Service description\",\n            \"category_id\": \"Travels\",\n            \"category_descriptor\":{\n             \"passenger\": {\n                 \"first_name\": \"[FAKER][NAME][FIRST_NAME]\",\n                  \"last_name\": \"[FAKER][NAME][LAST_NAME]\",\n                   \"type\": \"[FAKER][IDENTIFICATION][TYPE]\",\n                   \"number\": 12345678\n              },\n              \"route\": {\n            \t \"departure\": \"[FAKER][ADDRESS][CITY]\",\n            \t \"destination\": \"Londres\",\n            \t \"departure_date_time\": \"2022-03-12T12:58:41.425-04:00\",\n            \t \"arrival_date_time\": \"2022-03-14T12:58:41.425-04:00\",\n            \t \"company\": \"Company\"\n            }\n},\n            \"quantity\": 1,\n            \"unit_price\": 150\n        }\n    ],\n    \"payer\": {\n        \"phone\": {\n            \"area_code\": \"11\",\n            \"number\": \"[FAKER][PHONE_NUMBER][CELL_PHONE]\"\n        },\n        \"address\": {\n            \"zip_code\": \"[FAKER][ADDRESS][ZIP_CODE]\",\n            \"street_name\": \"[FAKER][ADDRESS][STREET_NAME]\",\n            \"street_number\": 1000\n        },\n        \"identification\": {\n          \"identification_type\": \"[FAKER][IDENTIFICATION][TYPE]\",\n          \"identification_number\": \"12345678\"\n        },\n        \"email\": \"john@yourdomain.com\",\n        \"name\": \"[FAKER][NAME][FIRST_NAME]\",\n        \"surname\": \"[FAKER][NAME][LAST_NAME]\",\n        \"date_created\": \"\",\n        \"authentication_type\": \"Facebook\",\n        \"registration date\": \"2015-06-02T12:58:41.425-04:00\",\n        \"is_prime_user\": false,\n        \"is_first_purchase_online\": false,\n        \"last_purchase\": \"2020-01-02T12:58:41.425-04:00\"\n    },\n    \"payment_methods\": {\n        \"excluded_payment_methods\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"default_installments\": null,\n        \"default_payment_method_id\": null,\n        \"excluded_payment_types\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"installments\": null\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago API in Python\nDESCRIPTION: This Python snippet demonstrates creating a payment using the Mercado Pago API. It initializes the SDK with an access token, sets custom headers with the X-Idempotency-Key, constructs the payment data from the request parameters, and then creates the payment using the SDK. The payment response is then printed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-cards.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n    \"transaction_amount\": float(request.POST.get(\"transaction_amount\")),\n    \"token\": request.POST.get(\"token\"),\n    \"description\": request.POST.get(\"description\"),\n    \"installments\": int(request.POST.get(\"installments\")),\n    \"payment_method_id\": request.POST.get(\"payment_method_id\"),\n    \"payer\": {\n        \"email\": request.POST.get(\"cardholderEmail\"),\n        \"identification\": {----[mla, mlb, mlu, mlc, mpe, mco]----\n            \"type\": request.POST.get(\"identificationType\"), ------------\n            \"number\": request.POST.get(\"identificationNumber\")\n        }\n        \"first_name\": request.POST.get(\"cardholderName\")\n    }\n}\n\npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n\nprint(payment)\n```\n\n----------------------------------------\n\nTITLE: Adding New Cards to a Customer in Mercado Pago with Ruby\nDESCRIPTION: Ruby code for adding a new card to a Mercado Pago customer. Uses the SDK to retrieve a customer by ID and associate a new payment card using a token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.es.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustomer_response = sdk.customer.get('247711297-jxOV430go9fx2e')\ncustomer = customer_response[:response]\n\ncard_request = {\n  token: '9b2d63e00d66a8c721607214cedaecda',\n  payment_method_id: 'debit_card'\n}\ncard_response = sdk.card.create(customer['id'], card_request)\ncard = card_response[:response]\n\nputs card\n```\n\n----------------------------------------\n\nTITLE: Creating Pix Refunds with Custom Headers in Java\nDESCRIPTION: Java implementation that demonstrates how to create a refund with the X-Render-In-Process-Refunds header. It configures the MercadoPago client with an access token, sets up custom headers, and processes a partial refund of 20 monetary units.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentRefundClient client = new PaymentRefundClient();\n\nMap<String, String> customHeaders = new HashMap<>();\ncustomHeaders.put(\"X-Render-In-Process-Refunds\", \"true\");\n\nMPRequestOptions requestOptions = MPRequestOptions.builder()\n   .customHeaders(customHeaders)\n   .build();\n\nPaymentRefund refund = client.refund(paymentId, new BigDecimal(20), requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer Cards Using .NET SDK\nDESCRIPTION: This snippet demonstrates how to utilize the MercadoPago SDK in .NET to retrieve a list of customer cards by their customer ID. It requires the 'CustomerClient' class to be instantiated and the 'ListCardsAsync' method to be called with the customer ID as a parameter. The output is a 'ResourcesList<CustomerCard>' object containing the card details. Currently, this method handles asynchronous operations and expects valid customer IDs.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/cards.en.md#2025-04-18_snippet_0\n\nLANGUAGE: dotnet\nCODE:\n```\nvar customerClient = new CustomerClient();\nResourcesList<CustomerCard> customerCards = await customerClient.ListCardsAsync(\"CUSTOMER_ID\");\n```\n\n----------------------------------------\n\nTITLE: Fetching Payment Methods with MPManager - Kotlin\nDESCRIPTION: Demonstrates how to retrieve payment methods using MPManager's PaymentMethodsTools in Kotlin. The method returns payment methods as an ENUM called PaymentMethod and provides success and error handling callbacks.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/get-payment-methods.en.md#2025-04-18_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nMPManager.paymentMethodsTools.getPaymentMethods { response ->\n   response\n       .doIfSuccess { result ->\n           // You can render the list of payment methods in a recycler view\n       }.doIfError { exception ->\n           // Error management\n       }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Webhook Validation in Python\nDESCRIPTION: A partial Python implementation for validating Mercado Pago webhook notifications by extracting the signature from headers, creating a manifest string, and preparing to compute the HMAC signature.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.en.md#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport hashlib\nimport hmac\nimport urllib.parse\n\n# Obtain the x-signature value from the header\nxSignature = request.headers.get(\"x-signature\")\nxRequestId = request.headers.get(\"x-request-id\")\n\n# Obtain Query params related to the request URL\nqueryParams = urllib.parse.parse_qs(request.url.query)\n\n# Extract the \"data.id\" from the query params\ndataID = queryParams.get(\"data.id\", [\"\"])[0]\n\n# Separating the x-signature into parts\nparts = xSignature.split(\",\")\n\n# Initializing variables to store ts and hash\nts = None\nhash = None\n\n# Iterate over the values to obtain ts and v1\nfor part in parts:\n    # Split each part into key and value\n    keyValue = part.split(\"=\", 1)\n    if len(keyValue) == 2:\n        key = keyValue[0].strip()\n        value = keyValue[1].strip()\n        if key == \"ts\":\n            ts = value\n        elif key == \"v1\":\n            hash = value\n\n# Obtain the secret key for the user/application from Mercadopago developers site\nsecret = \"your_secret_key_here\"\n\n# Generate the manifest string\nmanifest = f\"id:{dataID};request-id:{xRequestId};ts:{ts};\"\n\n# Create an HMAC signature defining the hash type and the key as a byte array\nhmac_obj = hmac.new(secret.encode(), msg=manifest.encode(), digestmod=hashlib.sha256)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Payment Methods with PHP SDK\nDESCRIPTION: Code to fetch all available payment methods using Mercado Pago's PHP SDK. This request requires an access token and returns a list of all payment methods that can be integrated.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n  $client = new PaymentMethodClient();\n  $payment_method = $client->get();\n\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing MercadoPago CardForm for MLA, MLU, MPE, MCO, MLB Regions\nDESCRIPTION: This code initializes a MercadoPago payment form for countries in the MLA, MLU, MPE, MCO, and MLB regions. It configures form fields, sets up callbacks for form mounting, submission handling, and resource fetching. When submitted, it collects payment data and sends it to a payment processing endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-cardform.en.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst cardForm = mp.cardForm({\namount: \"100.5\",\niframe: true,\nform: {\nid: \"form-checkout\",\ncardNumber: {\nid: \"form-checkout__cardNumber\",\nplaceholder: \"Card Number\",\n},\nexpirationDate: {\nid: \"form-checkout__expirationDate\",\nplaceholder: \"MM/YY\",\n},\nsecurityCode: {\nid: \"form-checkout__securityCode\",\nplaceholder: \"Security Code\",\n},\ncardholderName: {\nid: \"form-checkout__cardholderName\",\nplaceholder: \"Cardholder\",\n},\nissuer: {\nid: \"form-checkout__issuer\",\nplaceholder: \"Issuing bank\",\n},\ninstallments: {\nid: \"form-checkout__installments\",\nplaceholder: \"Installments\",\n},\nidentificationType: {\nid: \"form-checkout__identificationType\",\nplaceholder: \"Document type\",\n},\nidentificationNumber: {\nid: \"form-checkout__identificationNumber\",\nplaceholder: \"Document number\",\n},\ncardholderEmail: {\nid: \"form-checkout__cardholderEmail\",\nplaceholder: \"Email\",\n},\n},\ncallbacks: {\nonFormMounted: error => {\nif (error) return console.warn(\"Form Mounted handling error: \", error);\nconsole.log(\"Form mounted\");\n},\nonSubmit: event => {\nevent.preventDefault();\n\nconst {\npaymentMethodId: payment_method_id,\nissuerId: issuer_id,\ncardholderEmail: email,\namount,\ntoken,\ninstallments,\nidentificationNumber,\nidentificationType,\n} = cardForm.getCardFormData();\n\nfetch(\"/process_payment\", {\nmethod: \"POST\",\nheaders: {\n\"Content-Type\": \"application/json\",\n},\nbody: JSON.stringify({\ntoken,\nissuer_id,\npayment_method_id,\ntransaction_amount: Number(amount),\ninstallments: Number(installments),\ndescription: \"Product Description\",\npayer: {\nemail,\nidentification: {\ntype: identificationType,\nnumber: identificationNumber,\n},\n},\n}),\n});\n},\nonFetching: (resource) => {\nconsole.log(\"Fetching resource: \", resource);\n\n// Animate progress bar\nconst progressBar = document.querySelector(\".progress-bar\");\nprogressBar.removeAttribute(\"value\");\n\nreturn() => {\nprogressBar.setAttribute(\"value\", \"0\");\n};\n}\n},\n});\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Payment with Mercado Pago SDK in Node.js\nDESCRIPTION: This code snippet demonstrates how to cancel a specific purchase in Mercado Pago using the payment ID. It initializes the Mercado Pago client with an access token, creates a Payment instance, and calls the cancel method with the payment ID and idempotency key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/cancellation.en.md#2025-04-18_snippet_0\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'ACCESS_TOKEN' });\nconst payment = new Payment(client);\n\npayment.cancel({\n\tid: '<PAYMENT_ID>',\n\trequestOptions: {\n\t\tidempotencyKey: '<IDEMPOTENCY_KEY>'\n\t},\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Python\nDESCRIPTION: This Python snippet shows how to create a payment using the Mercado Pago Python SDK. It initializes the SDK with the access token, defines custom headers including 'X-Card-Validation', and creates a payment request with the provided parameters such as token, payment method, payer details, description and transaction amount. The request is then sent using the SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/integration.es.md#2025-04-18_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'X-Card-Validation': 'card_validation'\n}\n\npayment_data = {\n   \"transaction_amount\": float(request.POST.get(\"transaction_amount\")),\n   \"token\": request.POST.get(\"token\"),\n   \"description\": request.POST.get(\"description\"),\n   \"payment_method_id\": request.POST.get(\"payment_method_id\"),\n   \"payer\": {\n       \"email\": request.POST.get(\"email\"),\n       \"type\": request.POST.get(\"type\")\n   }\n}\n \npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n \nprint(payment)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Installments with JavaScript\nDESCRIPTION: Function to fetch and display available installment options for a credit card payment. It uses the payment method and card BIN to get installment information based on the transaction amount.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.en.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nasync function updateInstallments(paymentMethod, bin) {\ntry {\nconst installments = await mp.getInstallments({\namount: document.getElementById('transactionAmount').value,\nbin,\npaymentTypeId: 'credit_card'\n});\nconst installmentOptions = installments[0].payer_costs;\nconst installmentOptionsKeys = { label: 'recommended_message', value: 'installments' };\ncreateSelectOptions(installmentsElement, installmentOptions, installmentOptionsKeys);\n} catch(error) {\nconsole.error('error getting installments: ', e)\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Card Payments with Java for Multiple Countries using MercadoPago SDK\nDESCRIPTION: This Java code for Argentina, Brazil, Peru, Colombia, Uruguay, and Chile shows how to create a payment using MercadoPago's SDK. It implements an idempotency key and sends all required payment details including the identification type, which is required in these countries.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-cards.en.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest paymentCreateRequest =\n   PaymentCreateRequest.builder()\n       .transactionAmount(request.getTransactionAmount())\n       .token(request.getToken())\n       .description(request.getDescription())\n       .installments(request.getInstallments())\n       .paymentMethodId(request.getPaymentMethodId())\n       .payer(\n           PaymentPayerRequest.builder()\n               .email(request.getPayer().getEmail())\n               .firstName(request.getPayer().getFirstName())\n               .identification(\n                   IdentificationRequest.builder()\n                       .type(request.getPayer().getIdentification().getType())\n                       .number(request.getPayer().getIdentification().getNumber())\n                       .build())\n               .build())\n       .build();\n\nclient.create(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Item Preference in Python\nDESCRIPTION: Shows how to create a payment preference with multiple items using the Mercado Pago Python SDK, configuring item details like title, quantity, and unit price\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/preference-multiple-items.en.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Create items in preference\npreference_data = {\n\"items\": [\n{\n\"title\": \"My product\",\n\"quantity\": 1,\n\"unit_price\": 75.56\n},\n{\n\"title\": \"My product2\",\n\"quantity\": 2,\n\"unit_price\": 96.56\n}\n]\n}\n\n# Create the preference\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Cash Payment with Node.js in MercadoPago\nDESCRIPTION: Complete Node.js implementation using MercadoPago SDK for creating a payment with cash methods. Includes transaction amount, payment method ID, and payer email with idempotency key for preventing duplicate payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_22\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, Payments } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<YOUR_ACCESS_TOKEN>' });\nconst payments = new Payments(client);\n\npayments.create({\nbody: {\n\t\ttransaction_amount: '<TRANSACTION_AMOUNT>',\n\t\tpayment_method_id: '<PAYMENT_METHOD_ID>',\n\t\tpayer: {\n\t\t\temail: '<EMAIL>'\n\t\t\t}\n},\n\trequestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n\t.then((result) => console.log(result))\n\t.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Token - Node.js Implementation\nDESCRIPTION: Node.js implementation for refreshing Mercado Pago access tokens using the OAuth client. Requires configuration with access token and timeout, plus client credentials and refresh token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/renewal.en.md#2025-04-18_snippet_2\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token', options: { timeout: 5000 } });\n\nconst oauth = new OAuth(client);\n\noauth.refresh({\n\t'client_secret': 'your-client-secret',\n\t'client_id': 'your-client-id',\n\t'refresh_token': 'refresh-token'\n}).then((result) => console.log(result))\n\t.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Listing Payment Methods using C# SDK\nDESCRIPTION: This C# snippet uses the Mercado Pago SDK to asynchronously retrieve a list of available payment methods. It initializes the SDK by setting the `AccessToken` property of the `MercadoPagoConfig` class.  A `PaymentMethodClient` is instantiated, and its `ListAsync()` method is called to retrieve the payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/consult-payment-methods.en.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.PaymentMethod;\nusing MercadoPago.Config;\nusing MercadoPago.Resource;\nusing MercadoPago.Resource.PaymentMethod;\n \nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n \nvar client = new PaymentMethodClient();\nResourcesList<PaymentMethod> paymentMethods = await client.ListAsync();\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with MercadoPago - Ruby\nDESCRIPTION: This Ruby snippet showcases the creation of a payment using MercadoPago's SDK, providing transaction details in a hash format. The 3D Secure mode is specified as optional in the payment data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.en.md#2025-04-18_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n \npayment_data = {\n transaction_amount: params[:transactionAmount].to_f,\n token: params[:token],\n description: params[:description],\n installments: params[:installments].to_i,\n payment_method_id: params[:paymentMethodId],\n payer: {\n   email: params[:email],\n   identification: {\n     type: params[:identificationType],\n     number: params[:identificationNumber]\n   }\n three_d_secure_mode: \"optional\",\n }\n}\n \npayment_response = sdk.payment.create(payment_data)\npayment = payment_response[:response]\n \nputs payment\n```\n\n----------------------------------------\n\nTITLE: Processing First Subscription Payment - Node.js\nDESCRIPTION: Implements first-time subscription payment processing using MercadoPago Node.js SDK. Handles customer card listing and payment creation with subscription details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/subscription-messaging.en.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Payment, MercadoPagoConfig } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ENV_ACCESS_TOKEN>' });\nconst customerClient = new Customer(client);\n\ncustomerClient.listCards({ customerId: '<CUSTOMER_ID>' })\n    .then((result) => {\n\n        const payment = new Payment(client);\n\n        const body = {\n            transaction_amount: req.transaction_amount,\n            token: req.token,\n            description: req.description,\n            installments: req.installments,\n            payment_method_id: req.payment_method_id,\n            payer: {\n                id: req.id,\n                type: req.type\n            },\n            point_of_interaction: {\n                type: req.type,\n                transaction_data: {\n                    first_time_use: req.first_time_use,\n                    subscription_id: req.subscription_id,\n                    subscription_sequence: {\n                        number: req.number,\n                        total: req.total\n                    },\n                    invoice_period: {\n                        period: req.period,\n                        type: req.type\n                    },\n                    billing_date: req.billing_date\n                }\n            }\n\n        };\n\n        payment.create({ body: body }).then((result) => console.log(result));\n    });\n```\n\n----------------------------------------\n\nTITLE: Setting Back URLs for Redirection\nDESCRIPTION: This Python code snippet demonstrates how to configure back URLs and auto-return settings in a Mercado Pago preference. It defines a dictionary `preference_data` that includes the `back_urls` settings for success, failure, and pending scenarios.  It also sets the `auto_return` key to \"approved\".\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.pt.md#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\npreference_data = {\n    \"back_urls\": {\n        \"success\": \"https://www.tu-sitio/success\",\n        \"failure\": \"http://www.tu-sitio/failure\",\n        \"pending\": \"http://www.tu-sitio/pendings\"\n    },\n    \"auto_return\": \"approved\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Item Preference in Java\nDESCRIPTION: This Java code demonstrates creating a preference with multiple items using MercadoPago's SDK. It creates a PreferenceClient, adds two items with different details to a list, and then creates a preference request with these items.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n// Crea un objeto preferencia\nPreferenceClient client = new PreferenceClient();\n// Crea ítems en la preferencia\nList<PreferenceItemRequest> items = new ArrayList<>();\n\nPreferenceItemRequest item1 =\n   PreferenceItemRequest.builder()\n       .id(\"1234\")\n       .title(\"Produto 1\")\n       .quantity(2)\n       .currencyId(\"BRL\")\n       .unitPrice(new BigDecimal(\"100\"))\n       .build();   \nPreferenceItemRequest item2 =\n   PreferenceItemRequest.builder()\n       .id(\"12\")\n       .title(\"Produto 2\")\n       .quantity(1)\n       .currencyId(\"BRL\")\n       .unitPrice(new BigDecimal(\"100\"))\n       .build();\n\nitems.add(item1);\nitems.add(item2);\n\nPreferenceRequest request = PreferenceRequest.builder().items(items).build();\n// Guardar y postear la preferencia\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Updating Card Payment Amount in React\nDESCRIPTION: This React component shows how to update the payment amount using the CardPayment component from the @mercadopago/sdk-react package. It includes a button to trigger the update and the CardPayment component with initial amount and onSubmit handler.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/update-data.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { CardPayment, useCardPaymentBrick } from \"@mercadopago/sdk-react\";\nconst App = () => {\n  const { update } = useCardPaymentBrick();\n  return (\n    <>\n      <button type=\"button\" onClick={() => update({ amount: 95 })}>\n        Update amount\n      </button>\n      <CardPayment\n        initialization={{ amount: 100 }}\n        onSubmit={async (param) => {\n          console.log(param);\n        }}\n      />\n    </>\n  );\n};\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Installing Mercado Pago SDK\nDESCRIPTION: Commands for installing Mercado Pago SDK using different package managers across various programming languages. Each command installs the official SDK for server-side integration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-development-environment.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp composer.phar require \"mercadopago/dx-php\"\n```\n\nLANGUAGE: node\nCODE:\n```\nnpm install mercadopago\n```\n\nLANGUAGE: java\nCODE:\n```\n<dependency>\n   <groupId>com.mercadopago</groupId>\n   <artifactId>sdk-java</artifactId>\n   <version>2.1.7</version>\n</dependency>\n```\n\nLANGUAGE: ruby\nCODE:\n```\ngem install mercadopago-sdk\n```\n\nLANGUAGE: csharp\nCODE:\n```\nnuget install mercadopago-sdk\n```\n\nLANGUAGE: python\nCODE:\n```\npip3 install mercadopago\n```\n\nLANGUAGE: go\nCODE:\n```\ngo get -u github.com/mercadopago/sdk-go\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with 3DS Optional Mode - Go\nDESCRIPTION: This Go snippet illustrates creating a payment with `ThreeDSecureMode` set to \"optional\".  Mercado Pago determines if a 3DS challenge is required. The snippet uses the Mercado Pago Go SDK and requires an access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.es.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/payment\"\n)\n\nfunc main() {\n\taccessToken := \"<ENV_ACCESS_TOKEN>\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := payment.NewClient(cfg)\n\n\trequest := payment.Request{\n\t\tTransactionAmount:<TRANSACTION_AMOUNT>,\n\t\tPayer: &payment.PayerRequest{\n\t\t\tEmail: \"<BUYER_EMAIL>\",\n\t\t},\n\t\tToken:        \"<CARD_TOKEN>\",\n\t\tInstallments: <INSTALLLMENTS_NUMBER>,\n\t\tDescription: \"<DESCRIPTION>\",\n\t\tThreeDSecureMode: \"optional\",\n\t}\n\n\tresource, err := client.Create(context.Background(), request)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(resource)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating OAuth Access Token with Client Credentials\nDESCRIPTION: Curl request to obtain an Access Token using Client ID and Client Secret for Mercado Pago API authentication. Required for accessing Mercado Pago resources securely.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/interoperable-accepting-flow-configuration.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/oauth/token' \\\n--header 'Content-Type: application/json' \\\n--data '{\n\"client_id\": \"{CLIENT_ID}\",\n\"client_secret\": \"{CLIENT_SECRET}\",\n\"grant_type\": \"client_credentials\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Customer and Card with MercadoPago SDK in C#\nDESCRIPTION: This C# snippet defines the process of creating a customer and associating a card using the MercadoPago SDK. This involves initializing an access token and utilizing the 'CustomerClient' for customer creation and 'CreateCardAsync' for card association.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/create-customer-and-card.en.md#2025-04-18_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar customerRequest = new CustomerRequest\n{\nEmail = \"test_payer_12345@testuser.com\",\n};\nvar customerClient = new CustomerClient();\nCustomer customer = await customerClient.CreateAsync(customerRequest);\n\nvar cardRequest = new CustomerCardCreateRequest\n{\nToken = \"9b2d63e00d66a8c721607214cedaecda\"\n};\nCustomerCard card = await customerClient.CreateCardAsync(customer.Id, cardRequest);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods in C# for Mercado Pago\nDESCRIPTION: C# implementation for excluding specific payment methods and types in Mercado Pago Checkout Pro, with a maximum of 12 installments\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/payment-methods.es.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar paymentMethods = new PreferencePaymentMethodsRequest\n{\n    ExcludedPaymentMethods = new List<PreferencePaymentMethodRequest>\n    {\n        new PreferencePaymentMethodRequest\n        {\n            Id = \"master\",\n        },\n    },\n    ExcludedPaymentTypes = new List<PreferencePaymentTypeRequest>\n    {\n        new PreferencePaymentTypeRequest\n        {\n            Id = \"ticket\",\n        },\n    },\n    Installments = 12,\n};\n\nvar request = new PreferenceRequest\n{\n    // ...\n    PaymentMethods = paymentMethods,\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing MercadoPagoDevicesSDK in iOS (Objective-C)\nDESCRIPTION: This Objective-C code initializes the MercadoPagoDevicesSDK in the AppDelegate of an iOS application. It's recommended to execute this in the didFinishLaunchingWithOptions event.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.en.md#2025-04-18_snippet_3\n\nLANGUAGE: objective-c\nCODE:\n```\n@import 'MercadoPagoDevicesSDK';\n...\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    ...\n    [[MercadoPagoDevicesSDK shared] execute];\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Open Finance Pix Payment with Mercado Pago SDK\nDESCRIPTION: This code snippet demonstrates how to create an Open Finance Pix payment using Mercado Pago's SDK in various programming languages. It sets up the payment details, including the transaction amount, description, payment method, payer information, and the Open Finance mode.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-openfinance.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nMercadoPago\\SDK::setAccessToken(\"access_token\");\n$payment = new MercadoPago\\Payment();\n$payment->transaction_amount = 100;\n$payment->description = \"Título do produto\";\n$payment->payment_method_id = \"pix\";\n$payment->payer = array(\n    \"email\" => \"test@test.com\",\n    \"first_name\" => \"Test\",\n    \"last_name\" => \"User\",\n    \"identification\" => array(\n        \"type\" => \"CPF\",\n        \"number\" => \"19119119100\"\n    ),\n);\n$payment->point_of_interaction = array(\n\"linked_to\" => \"openfinance\"\n);\n$payment->save();\n```\n\nLANGUAGE: node\nCODE:\n```\nmercadopago.configurations.setAccessToken(\"access_token\");\nvar payment = {\n    transaction_amount: 100,\n    description: 'description',\n    payment_method_id: 'pix',\n    payer: {\n        email: 'test@test.com'\n    },\n    point_of_interaction: {\n        linked_to: \"openfinance\"\n    }\n};\nmercadopago.payment.create(payment).then(function (data) {\n    console.log(data.response);\n}).catch(function (error) {\n    console.log(error);\n});\n```\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"access_token\");\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest createRequest =\nPaymentCreateRequest.builder()\n    .transactionAmount(new BigDecimal(100))\n    .description(\"description\")\n    .paymentMethodId(\"pix\")\n    .pointOfInteraction(\n        PaymentPointOfInteractionRequest.builder().linkedTo(\"openfinance\").build())\n    .payer(PaymentPayerRequest.builder().email(\"test@test.com\").build())\n    .build();\n\nPayment payment = client.create(createRequest);\n```\n\nLANGUAGE: ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('access_token')\n\npayment_request = {\n    transaction_amount: 100,\n    description: 'description',\n    payment_method_id: 'pix',\n    payer: {\n        email: 'test@test.com'\n    },\n    point_of_interaction: {\n        linked_to: \"openfinance\"\n    }\n}\npayment_response = sdk.payment.create(payment_request)\npayment = payment_response[:response]\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"access_token\";\n\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = 100,\n    Description = \"description\",\n    PaymentMethodId = \"pix\",\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"test@test.com\"\n    },\n    PointOfInteraction = new PaymentPointOfInteractionRequest\n    {\n        LinkedTo = \"openfinance\"\n    }\n};\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\n```\n\nLANGUAGE: python\nCODE:\n```\nsdk = mercadopago.SDK(\"access_token\")\n\npayment_data = {\n    \"transaction_amount\": 100,\n    \"description\": \"description\",\n    \"payment_method_id\": \"pix\",\n    \"payer\": {\n        \"email\": \"test@test.com\"\n    },\n    \"point_of_interaction\": {\n        \"linked_to\": \"openfinance\"\n    }\n}\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'Authorization: Bearer TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"transaction_amount\": 1000,\n    \"description\": \"Teste Pix Open Finance\",\n    \"payment_method_id\": \"pix\",\n    \"payer\": {\n        \"email\": \"test_user_19734329@testuser.com\"\n    },\n    \"point_of_interaction\": {\n        \"linked_to\": \"openfinance\"\n    },\n    \"callback_url\": \"https://example.com\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Example Notification - JSON\nDESCRIPTION: This JSON snippet provides an example of a notification sent by Mercado Pago for a payment event.  It includes key attributes such as the notification ID, the type of event (payment), the date the notification was created, the seller's user ID, the API version, the action performed (payment created), and the ID of the related payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.en.md#2025-04-18_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n \"id\": 12345,\n \"live_mode\": true,\n \"type\": \"payment\",\n \"date_created\": \"2015-03-25T10:04:58.396-04:00\",\n \"user_id\": 44444,\n \"api_version\": \"v1\",\n \"action\": \"payment.created\",\n \"data\": {\n     \"id\": \"999999999\"\n }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Capturing Total Reserved Amount in MercadoPago - Ruby\nDESCRIPTION: This Ruby snippet captures the full payment amount reserved in a transaction using the 'mercadopago' SDK. It configures the SDK with the access token and sets custom request headers to execute the capture operation for a specific payment ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/capture-authorized-payment.en.md#2025-04-18_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\nrequest = {\n  capture: true\n}\n\npayment_response = sdk.payment.update(payment_id, request, custom_request_options)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Get Specific Refund with Mercado Pago Python SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a specific refund for a payment using the Mercado Pago Python SDK. It initializes the SDK, then calls the `refund().list_all()` method with the payment ID. The refund information is stored in the `refunds` variable.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/refunds.en.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrefunds_response = sdk.refund().list_all(payment_id)\nrefunds = refunds_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Multiple Items - PHP\nDESCRIPTION: This PHP snippet shows how to create a MercadoPago preference with multiple items. It initializes the MercadoPago SDK, creates item objects, sets their properties like title, quantity, and unit price, and then adds them to the preference before saving.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  # Criar um objeto preferência\n  $preference = new MercadoPago\\Preference();\n  # Cria itens na preferência\n  $item1 = new MercadoPago\\Item\n  $item1->title = \"Item de Teste 1\";\n  $item1->quantity = 2;\n  $item1->unit_price = 11.96;\n\n  $item2= new MercadoPago\\Item\n  $item2->title = \"Item de Teste 2\";\n  $item2->quantity = 1;\n  $item2->unit_price = 11.96;\n\n  $preference->items = array($item1,$item2);\n  # Salvar e postar a preferência\n  $preference->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with MercadoPago - PHP\nDESCRIPTION: This PHP snippet demonstrates how to create a payment using the MercadoPago API with 3D Secure mode set as optional. It utilizes the PaymentClient to create a payment request, passing in transaction details and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.en.md#2025-04-18_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\MercadoPagoConfig;\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['transactionAmount'],\n    \"token\" => $_POST['token'],\n    \"description\" => $_POST['description'],\n    \"installments\" => $_POST['installments'],\n    \"payment_method_id\" => $_POST['paymentMethodId'],\n    \"issuer_id\" => $_POST['issuer'],\n    \"payer\" => [\n      \"email\" => $_POST['email'],\n      \"identification\" => [\n        \"type\" => $_POST['identificationType'],\n        \"number\" => $_POST['number']\n      ]\n    ],\n    \"three_d_secure_mode\" => \"optional\"\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Sub-merchant Data in Java\nDESCRIPTION: This Java code demonstrates creating a payment with sub-merchant information using the Mercado Pago SDK. It constructs a `PaymentCreateRequest` with details like transaction amount, payment method, and includes the `forwardData` with the `subMerchant` details.  An idempotency key is added via `MPRequestOptions` to ensure the request is processed only once.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subcredenciadores-payfacs/integration-update.es.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.mercadopago;\n\nimport com.mercadopago.client.MercadoPagoClient;\nimport com.mercadopago.client.common.IdentificationRequest;\nimport com.mercadopago.client.common.SubMerchant;\nimport com.mercadopago.client.payment.*;\nimport com.mercadopago.core.MPRequestOptions;\nimport com.mercadopago.exceptions.MPApiException;\nimport com.mercadopago.exceptions.MPException;\nimport com.mercadopago.net.Headers;\nimport com.mercadopago.resources.payment.Payment;\n\nimport java.math.BigDecimal;\nimport java.util.HashMap;\nimport java.util.UUID;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        HashMap<String, String> headers = new HashMap<>();\n        headers.put(Headers.IDEMPOTENCY_KEY, UUID.randomUUID().toString());\n        MPRequestOptions requestOptions = MPRequestOptions\n            .builder()\n            .customHeaders(headers)\n            .accessToken(\"YOUR_ACCESS_TOKEN\").build();\n\n        PaymentClient client = new PaymentClient();\n        PaymentCreateRequest createRequest = PaymentCreateRequest.builder()\n            .transactionAmount(new BigDecimal(100))\n            .description(\"test_card\")\n            .paymentMethodId(\"visa\")\n            .token(\"c83cff0fe27a67ae53054fe8716b18bc\")\n            .installments(1)\n            .forwardData(PaymentForwardDataRequest.builder()\n                .subMerchant(SubMerchant.builder()\n                    .subMerchantId(\"345678\")\n                    .mcc(\"1234\")\n                    .country(\"BR\")\n                    .addressDoorNumber(\"123\")\n                    .zip(\"12345678\")\n                    .documentNumber(\"12345678901\")\n                    .city(\"Sao Paulo\")\n                    .addressStreet(\"Street\")\n                    .legalName(\"Business\")\n                    .regionCodeIso(\"SP\")\n                    .regionCode(\"SP\")\n                    .documentType(\"CPF\")\n                    .phone(\"1234567890\")\n                    .url(\"www.nomedofacilitador.com.br\").build()).build())\n            .payer(PaymentPayerRequest.builder()\n                .email(\"test_user_61213998@testuser.com\").build()).build();\n\n        try {\n            Payment payment = client.create(createRequest, requestOptions);\n            System.out.println(payment.getId());\n        } catch (MPApiException ex) {\n            System.out.printf(\n                \"MercadoPago Error. Status: %s, Content: %s%n\",\n                ex.getApiResponse().getStatusCode(), ex.getApiResponse().getContent());\n        } catch (MPException ex) {\n            ex.printStackTrace();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Launch Payment with Config Defined (new)\nDESCRIPTION: This snippet demonstrates how to initiate a payment flow using the `PaymentConfigBuilder` to define a configuration. It shows how to set the amount, payment method, metadata, success callback, and error callback and then launch the payment using the configured object.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/start-payment-flow.es.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = new PaymentConfigBuilder();\nconfig.setAmount(10.0);\nconfig.setPaymentMethod(\"credit\");\nconfig.setMetadata(encodeURIComponent({\"attr\":\"123\"}));\nconfig.setCallbackSuccess(\"congrats.html\");\nconfig.setCallbackError(\"error.html\");\n\nlaunchPayment(config);\n```\n\n----------------------------------------\n\nTITLE: Reserving Payment Values with Mercado Pago in Java\nDESCRIPTION: Creates a payment with 'capture=false' to reserve the value on the card without completing the transaction. This Java implementation configures a PaymentCreateRequest with the necessary parameters to authorize but not capture the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/make-value-reserve.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest request =\nPaymentCreateRequest.builder()\n.transactionAmount(new BigDecimal(\"100\"))\n.token(\"ff8080814c11e237014c1ff593b57b4d\")\n.description(\"Product Title\")\n.installments(1)\n.paymentMethodId(\"visa\")\n.payer(PaymentPayerRequest.builder().email(\"test_user_19653727@testuser.com\").build())\n.capture(false)\n.build();\n\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Creating PSE Payment in PHP with Mercado Pago\nDESCRIPTION: PHP implementation for processing PSE payments with Mercado Pago SDK. This code handles the creation of a payment request with all required fields including transaction amount, payer information, financial institution, and callback URLs.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pse.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse MercadoPago\\Client\\Common\\RequestOptions;\nuse MercadoPago\\Client\\Payment\\PaymentClient;\nuse MercadoPago\\MercadoPagoConfig;\n\nMercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n$client = new PaymentClient();\n$request_options = new RequestOptions();\n$request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n$client = new PaymentClient();\n$createRequest = [\n  \"transaction_amount\" => 5000,\n  \"description\" => \"Product description\",\n  \"payment_method_id\" => \"pse\",\n  \"callback_url\" => \"http://www.your-site.com\",\n  \"notification_url\" => \"http://www.your-site.com\",\n  \"additional_info\" => [\n    \"ip_address\" => \"127.0.0.1\"\n  ],\n  \"transaction_details\" => [\n    \"financial_institution\" => $_POST['financialInstitution']\n  ],\n  \"payer\" => [\n    \"email\" => $_POST['email'],\n    \"entity_type\" => \"individual\",\n    \"first_name\" => $_POST['firstName'],\n    \"last_name\" => $_POST['lastName'],\n    \"identification\" => [\n        \"type\" => $_POST['identificationType'],\n        \"number\" => $_POST['identificationNumber']\n    ],\n    \"address\" => [\n        \"zip_code\" => $_POST['zipCode'],\n        \"street_name\" => $_POST['streetName'],\n        \"street_number\" => $_POST['streetNumber'],\n        \"neighborhood\" => $_POST['neighborhood'],\n        \"city\" => $_POST['city'],\n        \"federal_unit\" => $_POST['federalUnit']\n    ],\n    \"phone\" => [\n        \"area_code\" => $_POST['phoneAreaCode'],\n        \"number\" => $_POST['phoneNumber']\n    ],\n  ],\n];\n\n$payment = $client->create($createRequest, $request_options);\nprint_r($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Capturing Security Code with Mercado Pago JavaScript SDK\nDESCRIPTION: JavaScript implementation for capturing the security code from a saved card and creating a token. This script handles the form submission and generates a token that will be used for payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/receive-payments-with-saved-cards.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n const formElement = document.getElementById('form-checkout');\n    formElement.addEventListener('submit', e => createCardToken(e));\n    const createCardToken = async (event) => {\n      try {\n        const tokenElement = document.getElementById('token');\n        if (!tokenElement.value) {\n          event.preventDefault();\n          const token = await mp.fields.createCardToken({\n            cardId: document.getElementById('form-checkout__cardId').value\n          });\n          tokenElement.value = token.id;\n          console.log(tokenElement);\n        }\n      } catch (e) {\n        console.error('error creating card token: ', e)\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: 3DS Challenge Completion Event Handler\nDESCRIPTION: JavaScript event listener to handle Challenge completion and redirect to confirmation page.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.en.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener(\"message\", (e) => {\n     if (e.data.status === \"COMPLETE\") {\n         window.open(\"congrats.html\");\n     }\n});\n```\n\n----------------------------------------\n\nTITLE: Get Payment Methods with Mercado Pago SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of available payment methods using the Mercado Pago C# SDK. It initializes the access token, creates a PaymentMethodClient, and then calls the ListAsync method to obtain the payment methods. The paymentMethods variable then contains a ResourcesList of PaymentMethod objects.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/payment-methods.en.md#2025-04-18_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing MercadoPago.Client.PaymentMethod;\nusing MercadoPago.Config;\nusing MercadoPago.Resource;\nusing MercadoPago.Resource.PaymentMethod;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar client = new PaymentMethodClient();\nResourcesList<PaymentMethod> paymentMethods = await client.ListAsync();\n\n```\n\n----------------------------------------\n\nTITLE: Setting Notification URL with MercadoPago SDK in Java\nDESCRIPTION: Demonstrates setting up a payment with notification URL using the MercadoPago SDK in Java. Requires MercadoPago SDK and valid access token. Inputs include transaction amount, token, and payer's identification details. Output: printed payment status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.en.md#2025-04-18_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nMercadoPago.SDK.setAccessToken(\"YOUR_ACCESS_TOKEN\");\\n\\n\\nPayment payment = new Payment();\\npayment.setTransactionAmount(Float.valueOf(request.getParameter(\"transactionAmount\")))\\n      .setToken(request.getParameter(\"token\"))\\n      .setDescription(request.getParameter(\"description\"))\\n      .setInstallments(Integer.valueOf(request.getParameter(\"installments\")))\\n      .setPaymentMethodId(request.getParameter(\"paymentMethodId\"))\\n      .setNotificationUrl(\"http://requestbin.fullcontact.com/1ogudgk1\");\\n\\n\\nIdentification identification = new Identification();----[mla, mlb, mlu, mlc, mpe, mco]----\\nidentification.setType(request.getParameter(\"docType\"))\\n             .setNumber(request.getParameter(\"docNumber\"));------------ ----[mlm]----\\nidentification.setNumber(request.getParameter(\"docNumber\"));------------\\n\\n\\nPayer payer = new Payer();\\npayer.setEmail(request.getParameter(\"email\"))\\n    .setIdentification(identification);\\n   \\npayment.setPayer(payer);\\n\\n\\npayment.save();\\n\\n\\nSystem.out.println(payment.getStatus());\\n\\n\n```\n\n----------------------------------------\n\nTITLE: Creating PCI Fields with Secure Fields\nDESCRIPTION: Demonstrates how to create PCI compliant fields using Secure Fields in Mercado Pago SDK V2. It showcases creating and mounting card number, expiration date, and security code fields into designated divs.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.en.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n\n  const cardNumberElement = mp.fields.create('cardNumber', {\n  placeholder: \"Card Number\"\n}).mount('cardNumber');\n\nconst expirationDateElement = mp.fields.create('expirationDate', {\n  placeholder: \"MM/YY\",\n}).mount('expirationDate');\n\nconst securityCodeElement = mp.fields.create('securityCode', {\n  placeholder: \"Security Code\"\n}).mount('securityCode');\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment Brick in JavaScript\nDESCRIPTION: This code demonstrates how to initialize the Payment Brick using the MercadoPago SDK. It includes configuration for amount, payer email, styling, and callback functions for handling submission and errors.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/cardform-clientside.en.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mp = new MercadoPago('YOUR_PUBLIC_KEY');\nconst bricksBuilder = mp.bricks();\nconst renderPaymentBrick = async (bricksBuilder) => {\n   const settings = {\n       initialization: {\n           amount: 100, //valor do processamento a ser realizado\n           payer: {\n           email: '<PAYER_EMAIL_HERE>',\n       },\n       },\n       style: {\n           theme: 'default' // | 'dark' | 'bootstrap' | 'flat'\n       },\n       callbacks: {\n           onReady: () => {\n           // callback chamado quando o Brick estiver pronto\n           },\n           onSubmit: ({paymentType, formData}) => {\n           // callback chamado o usuário clicar no botão de submissão dos dados\n           // ejemplo de envío de los datos recolectados por el Brick a su servidor\n           return new Promise((resolve, reject) => {\n               fetch(\"/processar-pago\", {\n                   method: \"POST\",\n                   headers: {\n                       \"Content-Type\": \"application/json\",\n                   },\n                   body: JSON.stringify(formData)\n               })\n               .then((response) => {\n                   // receber o resultado do pagamento\n                   resolve();\n               })\n               .catch((error) => {\n                   // lidar com a resposta de erro ao tentar criar o pagamento\n                   reject();\n               })\n               });\n           },\n           onError: (error) => {\n           // callback chamado para todos os casos de erro do Brick\n           },\n       },\n   };\n   window.cardPaymentBrickController = await bricksBuilder.create('payment', 'paymentBrick_container', settings);\n};\nrenderPaymentBrick(bricksBuilder);\n```\n\n----------------------------------------\n\nTITLE: Processing Payments with MercadoPago in Node.js\nDESCRIPTION: This Node.js snippet illustrates the configuration of the MercadoPago SDK and how to create a payment using provided payment data. It employs promises for handling the payment response, logging the status. Requires the mercadopago package.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.en.md#2025-04-18_snippet_2\n\nLANGUAGE: node\nCODE:\n```\nvar mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(config.access_token);\n\nvar payment_data = {\n  transaction_amount: 100,\n  token: token,\n  description: 'Blue shirt',\n  installments: installments,\n  payment_method_id: payment_method_id,\n  issuer_id: issuer_id,\n  payer: {\n    email: 'john@yourdomain.com'\n  }\n};\n\n// Save and do the payment POST\nmercadopago.payment.save(payment_data).then(function (data) {\n  // ...    \n  // Shows payment stauts\n  Console.log(data.status);\n}).catch(function (error) {\n  // ...\n});\n\n```\n\n----------------------------------------\n\nTITLE: Handling Successful Card Validation Responses in JSON\nDESCRIPTION: This JSON code snippet demonstrates the structure of a successful Zero Dollar Auth validation API response, specifying key fields such as status, id, and payment details. The critical parameter, 'status', indicates approval or rejection, affecting subsequent transactional operations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/api-responses.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 0000000000,\n    \"version\": null,\n    \"date_created\": \"2023-01-12T11:36:19.497-04:00\",\n    \"date_approved\": \"2023-01-12T11:36:20.345-04:00\",\n    \"date_last_updated\": \"2023-01-12T11:36:20.345-04:00\",\n    \"date_of_expiration\": null,\n    \"money_release_date\": \"2023-01-12T11:36:20.345-04:00\",\n    \"operation_type\": \"card_validation\",\n    \"issuer_id\": \"205\",\n    \"payment_method_id\": \"master\",\n    \"payment_type_id\": \"credit_card\",\n    \"status\": \"approved\",\n    \"status_detail\": \"accredited\",\n    \"transaction_amount\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Create Full Refund with Mercado Pago Node.js SDK\nDESCRIPTION: This snippet demonstrates how to create a full refund for a payment using the Mercado Pago Node.js SDK. It initializes the `MercadoPagoConfig` with an access token and then uses the `PaymentRefund` class to create the refund, specifying the payment ID and the refund amount. The `amount` property is set to 100.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/refunds.en.md#2025-04-18_snippet_0\n\nLANGUAGE: node.js\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token', options: { timeout: 5000 } });\n\nconst refund = new PaymentRefund(client);\n\nrefund.create({\n\tpayment_id: '123456789',\n\tbody: {\n\t\tamount: 100\n\t}\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago API in Python\nDESCRIPTION: This Python code shows how to create a payment using the Mercado Pago API. It defines the payment data including transaction amount, token, description, installments, payment method ID, issuer ID, and payer email.  The payment is created using the SDK, and the payment object from the response is extracted.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-serverside.es.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npayment_data = {\n    \"transaction_amount\": 100,\n    \"token\": token,\n    \"description\": \"Blue shirt\",\n    \"installments\": installments,\n    \"payment_method_id\": payment_method_id,\n    \"issuer_id\": issuer_id,\n    \"payer\": {\n        \"email\": \"john@yourdomain.com\"\n    }\n}\n\n# Guarda y postea el pago\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Payment Methods with PHP\nDESCRIPTION: Code to obtain a list of all available payment methods using the MercadoPago PHP SDK. This request requires your access token and uses the PaymentMethodClient to fetch payment method data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n  $client = new PaymentMethodClient();\n  $payment_method = $client->get();\n\n?>\n```\n\n----------------------------------------\n\nTITLE: Processing Mercado Pago Notifications Across Multiple Programming Languages\nDESCRIPTION: Code examples showing how to handle Mercado Pago notifications and retrieve data for different notification types (payment, plan, subscription, invoice, point_integration_wh). Each example configures the SDK with an access token, processes the notification type, and retrieves the corresponding resource data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.en.md#2025-04-18_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nMercadoPago.SDK.setAccessToken(\"ENV_ACCESS_TOKEN\");\nswitch (type) {\n    case \"payment\":\n        Payment payment = Payment.findById(data.id);\n        break;\n    case \"plan\":\n        Plan plan = Plan.findById(data.id);\n        break;\n    case \"subscription\":\n        Subscription subscription = Subscription.findById(data.id);\n        break;\n    case \"invoice\":\n        Invoice invoice = Invoice.findById(data.id);\n        break;\n    case \"point_integration_wh\":\n        // POST contiene la informaciòn relacionada a la notificaciòn.\n        break;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmercadopago.configurations.setAccessToken('ENV_ACCESS_TOKEN');\nswitch (type) {\n  case 'payment':\n    const payment = await mercadopago.payment.findById(data.id);\n    break;\n  case 'plan':\n    const plan = await mercadopago.plans.get(data.id);\n    break;\n  case 'subscription':\n    const subscription = await mercadopago.subscriptions.get(data.id);\n    break;\n  case 'invoice':\n    const invoice = await mercadopago.invoices.get(data.id);\n    break;\n  case 'point_integration_wh':\n    // Contiene la informaciòn relacionada a la notificaciòn.\n    break;\n}\n```\n\nLANGUAGE: ruby\nCODE:\n```\nMercadoPago::SDK.configure(access_token: 'ENV_ACCESS_TOKEN')\ncase payload['type']\nwhen 'payment'\n  payment = MercadoPago::Payment.search(id: payload['data']['id'])\nwhen 'plan'\n  plan = MercadoPago::Plan.search(id: payload['data']['id'])\nwhen 'subscription'\n  subscription = MercadoPago::Subscription.search(id: payload['data']['id'])\nwhen 'invoice'\n  invoice = MercadoPago::Invoice.search(id: payload['data']['id'])\nwhen 'point_integration_wh'\n  # Contiene la informaciòn relacionada a la notificaciòn.\nend\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\nswitch (type)\n{\n    case \"payment\":\n        Payment payment = await Payment.FindByIdAsync(payload[\"data\"][\"id\"].ToString());\n        break;\n    case \"plan\":\n        Plan plan = await Plan.FindByIdAsync(payload[\"data\"][\"id\"].ToString());\n        break;\n    case \"subscription\":\n        Subscription subscription = await Subscription.FindByIdAsync(payload[\"data\"][\"id\"].ToString());\n        break;\n    case \"invoice\":\n        Invoice invoice = await Invoice.FindByIdAsync(payload[\"data\"][\"id\"].ToString());\n        break;\n    case \"point_integration_wh\":\n        // Contiene la informaciòn relacionada a la notificaciòn.\n        break;\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\nnotification_type = data[\"type\"]\nif notification_type == \"payment\":\n    payment = sdk.payment().get(payload[\"data\"][\"id\"])\nelif notification_type == \"plan\":\n    plan = sdk.preapproval().get(payload[\"data\"][\"id\"]) \nelif notification_type == \"subscription\":\n    subscription = sdk.preapproval().get(payload[\"data\"][\"id\"])\nelif notification_type == \"invoice\":\n    invoice = sdk.invoice().get(payload[\"data\"][\"id\"])\nelif notification_type == \"point_integration_wh\":\n    # Contiene la informaciòn relacionada a la notificaciòn.\nelse:\n    return\n```\n\nLANGUAGE: golang\nCODE:\n```\naccessToken := \"{{ACCESS_TOKEN}}\"\ncfg, err := config.New(accessToken)\nif err != nil {\n\tfmt.Println(err)\n\treturn\n}\nclient := customer.NewClient(cfg)\nswitch req.Type {\ncase \"payment\":\n\tclient := payment.NewClient(cfg)\n\tresource, err = client.Get(context.Background(), resource.ID)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\ncase \"plan\":\n    client := preapprovalplan.NewClient(cfg)\n    resource, err := client.Get(context.Background(), preApprovalPlanID)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\ncase \"invoice\":\n\tclient := invoice.NewClient(cfg)\n\tresource, err := client.Get(context.Background(), req.Data.ID)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\ncase \"point_integration_wh\":\n\t// Contiene la informaciòn relacionada a la notificaciòn.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Items in Node.js\nDESCRIPTION: This Node.js snippet shows how to create a Mercado Pago preference with multiple items. It defines a preference object with an array of items, each having properties like title, quantity, currency_id, and unit_price.  It then uses the mercadopago SDK to create the preference and handle the response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/preference-multiple-items.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\n// Configura sua preferência\nvar preference = {\n  items: [\n      { title: 'Meu produto',\n      quantity: 1,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 75.56 },\n\t{ title: 'Meu produto 2’,\n      quantity: 2,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 96.56 }\n    ]\n};\n// Cria um botão de pagamento no seu site\nmercadopago.preferences.create(preference)\n.then(function(preference){\n  // Este valor substituirá o string \"$$init_point$$\" no seu HTML\n  global.init_point = preference.body.init_point;\n}).catch(function(error){\n  console.log(error);\n});\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago Payment Form for MLA/MLU/MPE/MCO/MLB regions\nDESCRIPTION: This code demonstrates how to initialize a Mercado Pago card form with all required fields for Argentina, Uruguay, Peru, Colombia, and Brazil regions. It configures form fields, handles submission with token generation, and implements callbacks for form mounting, submission, and resource fetching. The card token expires in 7 days and can only be used once.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.en.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst cardForm = mp.cardForm({\namount: \"100.5\",\niframe: true,\nform: {\nid: \"form-checkout\",\ncardNumber: {\nid: \"form-checkout__cardNumber\",\nplaceholder: \"Card Number\",\n},\nexpirationDate: {\nid: \"form-checkout__expirationDate\",\nplaceholder: \"MM/YY\",\n},\nsecurityCode: {\nid: \"form-checkout__securityCode\",\nplaceholder: \"Security Code\",\n},\ncardholderName: {\nid: \"form-checkout__cardholderName\",\nplaceholder: \"Cardholder\",\n},\nissuer: {\nid: \"form-checkout__issuer\",\nplaceholder: \"Issuing bank\",\n},\ninstallments: {\nid: \"form-checkout__installments\",\nplaceholder: \"Installments\",\n},\nidentificationType: {\nid: \"form-checkout__identificationType\",\nplaceholder: \"Document type\",\n},\nidentificationNumber: {\nid: \"form-checkout__identificationNumber\",\nplaceholder: \"Document number\",\n},\ncardholderEmail: {\nid: \"form-checkout__cardholderEmail\",\nplaceholder: \"Email\",\n},\n},\ncallbacks: {\nonFormMounted: error => {\nif (error) return console.warn(\"Form Mounted handling error: \", error);\nconsole.log(\"Form mounted\");\n},\nonSubmit: event => {\nevent.preventDefault();\n\nconst {\npaymentMethodId: payment_method_id,\nissuerId: issuer_id,\ncardholderEmail: email,\namount,\ntoken,\ninstallments,\nidentificationNumber,\nidentificationType,\n} = cardForm.getCardFormData();\n\nfetch(\"/process_payment\", {\nmethod: \"POST\",\nheaders: {\n\"Content-Type\": \"application/json\",\n},\nbody: JSON.stringify({\ntoken,\nissuer_id,\npayment_method_id,\ntransaction_amount: Number(amount),\ninstallments: Number(installments),\ndescription: \"Product Description\",\npayer: {\nemail,\nidentification: {\ntype: identificationType,\nnumber: identificationNumber,\n},\n},\n}),\n});\n},\nonFetching: (resource) => {\nconsole.log(\"Fetching resource: \", resource);\n\n// Animate progress bar\nconst progressBar = document.querySelector(\".progress-bar\");\nprogressBar.removeAttribute(\"value\");\n\nreturn() => {\nprogressBar.setAttribute(\"value\", \"0\");\n};\n}\n},\n});\n```\n\n----------------------------------------\n\nTITLE: Receiving Notifications - PHP\nDESCRIPTION: This PHP code demonstrates how to handle incoming notifications from Mercado Pago. It retrieves the notification type and ID from the POST request, and then uses the MercadoPago SDK to find the corresponding resource (payment, plan, subscription, or invoice) by its ID. This enables processing of the notification and updating local data accordingly.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.en.md#2025-04-18_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\n MercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n switch($_POST[\"type\"]) {\n     case \"payment\":\n         $payment = MercadoPago\\Payment::find_by_id($_POST[\"data\"][\"id\"]));\n         break;\n     case \"plan\":\n         $plan = MercadoPago\\Plan::find_by_id($_POST[\"data\"][\"id\"]));\n         break;\n     case \"subscription\":\n         $plan = MercadoPago\\Subscription::find_by_id($_POST[\"data\"][\"id\"]));\n         break;\n     case \"invoice\":\n         $plan = MercadoPago\\Invoice::find_by_id($_POST[\"data\"][\"id\"]));\n         break;\n     case \"point_integration_wh\":\n         // $_POST contiene la informaciòn relacionada a la notificaciòn.\n         break;\n }\n?>\n\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Multiple Items\nDESCRIPTION: This code snippet demonstrates how to create a MercadoPago preference object with multiple items in Node.js. It configures the preference with an array of items, each having a title, quantity, currency, and unit price.  It then uses the MercadoPago API to create the preference and handle the response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\n// Configura sua preferência\nvar preference = {\n  items: [\n      { title: 'Meu produto',\n      quantity: 1,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 75.56 },\n\t{ title: 'Meu produto 2’,\n      quantity: 2,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 96.56 }\n    ]\n};\n// Cria um botão de pagamento no seu site\nmercadopago.preferences.create(preference)\n.then(function(preference){\n  // Este valor substituirá o string \"$$init_point$$\" no seu HTML\n  global.init_point = preference.body.init_point;\n}).catch(function(error){\n  console.log(error);\n});\n\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Payment Status\nDESCRIPTION: This JavaScript code snippet fetches the updated payment status from the server and displays it on the confirmation page. It retrieves the payment ID from local storage and makes an API call to `/get_payment/{id}`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener(\"DOMContentLoaded\", async function (e) {\n init();\n});\n\nasync function init() {\n const id = localStorage.getItem(\"paymentId\");\n\n try {\n   const response = await fetch(\"/get_payment/\" + id, {\n     method: \"GET\",\n   });\n   const result = await response.json();\n   if (result.status != 200) throw new Error(\"error getting payment\");\n   document.getElementById(\"congrats-div\").innerHTML =\n     \"Pagamento \" + result.data.id + \" -> Status: \" + result.data.status;\n } catch (error) {\n   alert(\"Unexpected error\\n\" + JSON.stringify(error));\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with 3DS (Optional) using C#\nDESCRIPTION: This C# code snippet shows how to create a payment with the `three_d_secure_mode` set to `optional` using the Mercado Pago API.  It creates a PaymentCreateRequest object, populating it with transaction details and payer information, and then uses the PaymentClient to submit the payment request asynchronously. The MercadoPago C# SDK is required.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.pt.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n \nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n \nvar paymentRequest = new PaymentCreateRequest\n{\n   TransactionAmount = decimal.Parse(Request[\"transactionAmount\"]),\n   Token = Request[\"token\"],\n   Description = Request[\"description\"],\n   Installments = int.Parse(Request[\"installments\"]),\n   PaymentMethodId = Request[\"paymentMethodId\"],\n   Payer = new PaymentPayerRequest\n   {\n       Email = Request[\"email\"],\n       Identification = new IdentificationRequest\n       {\n           Type = Request[\"identificationType\"],\n           Number = Request[\"identificationNumber\"],\n       },\n   },\nThreeDSecureMode = \"optional\",\n};\n \nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest);\n \nConsole.WriteLine(payment.Status);\n\n```\n\n----------------------------------------\n\nTITLE: Creating Payment using MercadoPago API - Java\nDESCRIPTION: This Java snippet demonstrates how to create a new payment request using the MercadoPago library. It builds the payment request with payer and transaction details, specifying the payment method and amount.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.es.md#2025-04-18_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nPaymentCreateRequest paymentCreateRequest = PaymentCreateRequest.builder()\n    .transactionAmount(new BigDecimal(\"<TRANSACTION_AMOUNT>\"))\n    .paymentMethodId(\"bolbradesco\")\n    .payer(PaymentPayerRequest.builder()\n        .email(\"<EMAIL>\")\n        .firstName(\"<NAME>\")\n        .lastName(\"<LASTNAME>\")\n        .identification(IdentificationRequest.builder()\n            .type(\"CPF\")\n            .number(\"<NUMERO>\")\n            .build())\n        .address(PaymentPayerAddressRequest.builder()\n            .streetName(\"<RUA XXX>\")\n            .streetNumber(\"123\")\n            .zipCode(\"<CEP>\")\n            .federalUnit(\"<SIGLA DO ESTADO>\")\n            .city(\"<CIDADE>\")\n            .neighborhood(\"<BAIRRO>\")\n            .build())\n        .build())\n    .build();\n\n```\n\n----------------------------------------\n\nTITLE: Integrating MercadoPago Wallet Brick with HTML\nDESCRIPTION: This snippet demonstrates how to integrate the MercadoPago Wallet Brick into an HTML page.  It initializes the Brick with a preference ID and defines callbacks for ready, submit, and error events. Replace `YOUR_PUBLIC_KEY` and `<PREFERENCE_ID>` with your actual public key and preference ID respectively.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-startup.es.md#2025-04-18_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Bricks</title>\n  </head>\n  <body>\n    <div id=\"walletBrick_container\"></div>\n    <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n    <script>\n      const mp = new MercadoPago('YOUR_PUBLIC_KEY');\n      const bricksBuilder = mp.bricks();\n      const renderWalletBrick = async (bricksBuilder) => {\n        const settings = {\n          initialization: {\n             preferenceId: '<PREFERENCE_ID>', // preferenciaId generado en backend\n          },\n          callbacks: {\n            onReady: () => {\n              /*\n                Callback llamado cuando el Brick está listo.\n                Aquí puedes ocultar loading de su sitio, por ejemplo.\n              */\n            },\n            onSubmit: () => {\n              // callback llamado al hacer clic en Wallet Brick\n              // esto es posible porque el Brick es un botón\n            },\n            onError: (error) => {\n              // callback llamado para todos los casos de error de Brick\n              console.error(error);\n            },\n          },\n        };\n        window.walletBrickController = await bricksBuilder.create(\n          'wallet',\n          'walletBrick_container',\n          settings\n        );\n      };\n      renderWalletBrick(bricksBuilder);\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Form for Saved Cards with HTML and JavaScript\nDESCRIPTION: HTML and JavaScript code for rendering a payment form that allows customers to select from their saved cards and enter the security code. This includes styling and form setup.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/receive-payments-with-saved-cards.en.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    #form-checkout {\n      display: flex;\n      flex-direction: column;\n      max-width: 600px;\n    }\n\n    .container {\n      height: 18px;\n      display: inline-block;\n      border: 1px solid rgb(118, 118, 118);\n      border-radius: 2px;\n      padding: 1px 2px;\n    }\n  </style>\n  <form id=\"form-checkout\" method=\"POST\" action=\"/process_payment\">\n    <select type=\"text\" id=\"form-checkout__cardId\"></select>\n    <div id=\"form-checkout__securityCode-container\" class=\"container\"></div>\n    <input name=\"token\" id=\"token\" hidden>\n    <button>Enviar</button>\n  </form>\n\n<script>\n    const mp = new MercadoPago('TEST-2bf9f710-6a6e-47c8-a207-79f5e73b464c');\n\n    const securityCodeElement = mp.fields.create('securityCode', {\n      placeholder: \"CVV\"\n    }).mount('form-checkout__securityCode-container');\n\n    const customerCards = [{\n      \"id\": \"3502275482333\",\n      \"last_four_digits\": \"9999\",\n      \"payment_method\": {\n        \"name\": \"amex\",\n      },\n      \"security_code\": {\n        \"length\": 4,\n      }\n    }];\n\n    function appendCardToSelect() {\n      const selectElement = document.getElementById('form-checkout__cardId');\n      const tmpFragment = document.createDocumentFragment();\n      customerCards.forEach(({ id, last_four_digits, payment_method }) => {\n        const optionElement = document.createElement('option');\n        optionElement.setAttribute('value', id)\n        optionElement.textContent = `${payment_method.name} ended in ${last_four_digits}`\n        tmpFragment.appendChild(optionElement);\n      })\n      selectElement.appendChild(tmpFragment)\n    }\n\n    appendCardToSelect();\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment in Node.js\nDESCRIPTION: Implements partial payment capture using MercadoPago Node.js SDK. Sets up configuration and captures payment with specified amount, includes error handling.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(config.access_token);\n\nlet captureInfo = {id: 123, transaction_amount: 5}\n\nmercadopago.payment.capturePartial(captureInfo, mercadopago, (error, response) => {\n    if (error){\n        console.log(error);\n    }else{\n        console.log(response)\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Pix Payment with C# SDK\nDESCRIPTION: C# implementation for creating a Pix payment using Mercado Pago's SDK. It configures the access token, creates request options with an idempotency key header, and builds a payment request with transaction amount, payment method ID, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pix.en.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = 105,\n    PaymentMethodId = \"pix\",\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"PAYER_EMAIL_HERE\",\n    },\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request, requestOptions);\n\n```\n\n----------------------------------------\n\nTITLE: Complete Payment Implementation with Mercado Pago SDK V2\nDESCRIPTION: Full implementation example showing how to create a card token and submit the payment form. It demonstrates setting up event listeners, creating the token with cardholder details, and appending it to the form before submission.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ndoSubmit = false;\ndocument.getElementById('paymentForm').addEventListener('submit', getCardToken);\n\nasync function getCardToken(event) {\n    event.preventDefault();\n    if (!doSubmit) {\n        let $form = document.getElementById('paymentForm');\n        const token = await mp.fields.createCardToken({\n            cardholderName: document.getElementById('cardholderName').value,\n            identificationType: document.getElementById('docType').value,\n            identificationNumber: document.getElementById('docNumber').value,\n        })\n        setCardTokenAndPay(token.id)\n    }\n};\n\nfunction setCardTokenAndPay(token) {\n    let form = document.getElementById('paymentForm');\n    let card = document.createElement('input');\n    card.setAttribute('name', 'token');\n    card.setAttribute('type', 'hidden');\n    card.setAttribute('value', token);\n    form.appendChild(card);\n    doSubmit = true;\n    form.submit();\n};\n```\n\n----------------------------------------\n\nTITLE: Hiding Payment Button in Card Payment Brick (JavaScript)\nDESCRIPTION: This code demonstrates how to hide the default payment button in the Card Payment Brick using JavaScript. It sets the 'hidePaymentButton' property to true and includes callbacks for ready and error states.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/hide-element.es.md#2025-04-18_snippet_2\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n    ...,\n    callbacks: {\n        onReady: () => {\n            // callback llamado cuando el ladrillo está listo\n        },\n        onError: (error) => { \n            // callback llamado para todos los casos de error de Brick\n        },\n    },\n    customization: {\n        visual: {\n            hidePaymentButton: true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onBinChange Callback in React\nDESCRIPTION: This snippet shows how to implement the `onBinChange` callback within a React component, specifically when using the `<Card>` component. The callback function logs the bin number to the console whenever it changes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/additional-callbacks.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\n<Card\n ...,\n onBinChange={bin => {\n   console.log(bin);\n }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Card Payment Brick in React\nDESCRIPTION: This snippet demonstrates how to render the Card Payment Brick using the React component. It imports the CardPayment component and passes the necessary props for initialization and callbacks.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/default-rendering.en.md#2025-04-18_snippet_3\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { CardPayment } from '@mercadopago/sdk-react';\n\n\n<CardPayment\n   initialization={initialization}\n   onSubmit={onSubmit}\n   onReady={onReady}\n   onError={onError}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Java SDK in Mercado Pago\nDESCRIPTION: Java code example showing how to create a payment using Mercado Pago's Java SDK. The snippet configures a payment request with transaction details, token, installments, payment method, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n       .installments(request.getInstallments())\n       .paymentMethodId(request.getPaymentMethodId())\n       .payer(\n           PaymentPayerRequest.builder()\n               .email(request.getPayer().getEmail())\n               .firstName(request.getPayer().getFirstName())\n               .identification(\n                   IdentificationRequest.builder()\n                       .type(request.getPayer().getIdentification().getType())\n                       .number(request.getPayer().getIdentification().getNumber())\n                       .build())\n               .build())\n       .build();\n\nclient.create(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Creating Customer and Card with MercadoPago SDK in Java\nDESCRIPTION: In this Java snippet, the MercadoPago SDK facilitates the creation of a customer and card association using a secure access token. The objects 'CustomerRequest' and 'CustomerCardCreateRequest' are utilized to form the specified customer and card details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/create-customer-and-card.en.md#2025-04-18_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nCustomerClient customerClient = new CustomerClient();\nCustomerCardClient customerCardClient = new CustomerCardClient();\n\nCustomerRequest customerRequest = CustomerRequest.builder()\n.email(\"john@test.com\")\n.build();\nCustomer customer = customerClient.create(customerRequest);\n\nCustomerCardIssuer issuer = CustomerCardIssuer.builder()\n.id(\"3245612\")\n.build();\n\nCustomerCardCreateRequest cardCreateRequest = CustomerCardCreateRequest.builder()\n.token(\"9b2d63e00d66a8c721607214cedaecda\")\n.issuer(issuer)\n.paymentMethodId(\"debit_card\")\n.build();\n\ncustomerCardClient.create(customer.getId(), cardCreateRequest);\n\n```\n\n----------------------------------------\n\nTITLE: Create HTML Container for Payment Button\nDESCRIPTION: This snippet creates an HTML container element where the Mercado Pago payment button will be rendered.  The `id` attribute (`wallet_container`) is used to reference this container in the JavaScript initialization code. This container is crucial for displaying the payment button on the webpage.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/add-sdk-and-initialize.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Container para o botão de pagamento -->\n<div id=\"wallet_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with 3DS (Optional) using Go\nDESCRIPTION: This Go code snippet demonstrates creating a payment using the Mercado Pago API. It initializes the MercadoPago SDK, constructs a payment request object with transaction details and payer information extracted from the HTTP request, and then uses the `client.Create` method to submit the payment request. It requires the MercadoPago Go SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.pt.md#2025-04-18_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/payment\"\n)\n\nfunc processPayment(r *http.Request) {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := payment.NewClient(cfg)\n\n\trequest := payment.Request{\n\t\tTransactionAmount: r.FormValue(\"transactionAmount\"),\n\t\tToken: r.FormValue(\"token\"),\n            Description: r.FormValue(\"description\"),\n\t\tPaymentMethodID:   r.FormValue(\"paymentMethodId\"),\n\t\tPayer: &payment.PayerRequest{\n\t\t\tEmail: r.FormValue(\"email\"),\n\t\t\tIdentification: &payment.IdentificationRequest{\n\t\t\t\tType: r.FormValue(\"type\"),\n\t\t\t\tNumber: r.FormValue(\"number\"),\n\t\t\t},\n\t\t},\n\t}\n\n\tresource, err := client.Create(context.Background(), request)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tfmt.Println(resource)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Reserve in PHP\nDESCRIPTION: This PHP snippet uses the MercadoPago SDK to perform a reserve authorization. It sets the access token, creates a payment client, and sends a POST request with the payment data including transaction amount, token, payer information, and capture=false to hold the funds pending capture. A unique idempotency key is also included in the custom headers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/make-value-reserve.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => 100,\n    \"token\" => \"123456\",\n    \"description\" => \"My product\",\n    \"installments\" => 1,\n    \"payment_method_id\" => \"visa\",\n    \"payer\" => [\n      \"email\" => \"my.user@example.com\",\n    ],\n    \"capture\" => false\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Setting Back URLs and Auto Return in Node.js\nDESCRIPTION: This Node.js snippet shows how to define the `back_urls` and `auto_return` properties within a preference object. It sets the URLs for success, failure, and pending payment outcomes, and enables automatic return upon approval.  No specific dependencies are listed in the provided context, but a Mercado Pago SDK is assumed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar preference = {}\npreference = {\n  // ...\n  \"back_urls\": {\n        \"success\": \"https://www.tu-sitio/success\",\n        \"failure\": \"http://www.tu-sitio/failure\",\n        \"pending\": \"http://www.tu-sitio/pending\"\n    },\n    \"auto_return\": \"approved\",\n  // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating PagoEfectivo Payment with Mercado Pago SDK (Python)\nDESCRIPTION: This Python code snippet shows how to create a PagoEfectivo payment using the Mercado Pago SDK. It initializes the SDK with an access token, prepares the payment data, and creates the payment using the SDK's payment method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\npayment_data = {\n    \"transaction_amount\": 100,\n    \"description\": \"Título do produto\",\n    \"payment_method_id\": \"pagoefectivo_atm\",\n    \"payer\": {\n        \"email\": \"test_user_42972582@testuser.com\"\n    }\n}\n\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Yape Payment with Mercado Pago SDK\nDESCRIPTION: This code demonstrates how to create a Yape payment using Mercado Pago's SDK. It includes setting up the client, preparing the payment request with necessary details like amount, description, and payer information, and then sending the request to create the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.en.md#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest createRequest =\n    PaymentCreateRequest.builder()\n        .description(\"Titulo del producto\")\n        .installments(1)\n        .payer(PaymentPayerRequest.builder()\n            .email(\"test_user_123@testuser.com\")\n            .build())\n        .paymentMethodId(\"yape\")\n        .token(\"ff8080814c11e237014c1ff593b57b4d\")\n        .transactionAmount(new BigDecimal(\"5000\"))\n        .build();\n\nclient.create(createRequest);\n```\n\nLANGUAGE: php\nCODE:\n```\nMercadoPagoConfig::setAccessToken(\"ENV_ACCESS_TOKEN\");\n    \n$client = new PaymentClient();\n\n$createRequest = [\n  \"description\" => \"Titulo del producto\",\n  \"installments\" => 1,\n  \"payer\" => [\n     \"email\" => \"test_user_123@testuser.com\",\n  ],\n  \"payment_method_id\" => \"yape\",\n  \"token\" => \"ff8080814c11e237014c1ff593b57b4d\",\n  \"transaction_amount\" => 5000,\n];\n\n    $client->create($createRequest, $request_options);\n```\n\nLANGUAGE: node\nCODE:\n```\nconst mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(config.access_token);\n\nvar payment = req.body;\n\nvar payment_data = {\n  token: '<ff8080814c11e237014c1ff593b57b4d>',\n  transaction_amount: 5000,\n  installments: 1,\n  description: 'Titulo del producto',\n  payment_method_id: 'yape',\n  payer: {\n    email: payment.email,\n  }\n};\n\nvar payment = mercadopago.payment.save(payment_data)\n  .then(function (response) {\n    res.status(response.status).json({\n      status: response.body.status,\n      status_detail: response.body.status_detail,\n      id: respose.body.id,\n    });\n  })\n  .catch(function (error) {\n    res.status(error.status).send(error);\n});\n\nvar payment_link = payment.transaction_details.external_resource_url;\n```\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n\t'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n\t\"description\": \"Titulo del producto\",\n\t\"installments\": 1,\n\t\"payer\": {\n\t\t\"email\": \"test_user_123@testuser.com\",\n\t},\n\t\"payment_method_id\": \"yape\",\n\t\"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n\t\"transaction_amount\": 5000\n}\n\npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n```\n\nLANGUAGE: dotnet\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\n\nvar paymentPayerRequest = new PaymentPayerRequest\n{\n    Email = \"test_user_123@testuser.com\",\n};\n\nvar request = new PaymentCreateRequest\n{\n    Description = \"Titulo del producto\",\n    Installments = 1,\n    Payer = paymentPayerRequest,\n    PaymentMethodId = \"yape\",\n    TransactionAmount = (decimal?)5000,\n    Token = \"ff8080814c11e237014c1ff593b57b4d\"\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request, requestOptions);\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_object = {\n  description: 'Titulo del producto',\n  installments: 1,\n  payer: {\n    email: 'test_user_123@testuser.com',\n  },\n  payment_method_id: 'yape',\n  token: 'ff8080814c11e237014c1ff593b57b4d',\n  transaction_amount: 5000\n}\n\npayment_response = sdk.payment.create(payment_request, custom_request_options)\npayment_response[:response]\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/payment\"\n)\n\nfunc main() {\n\taccessToken := \"ENV_ACCESS_TOKEN\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := payment.NewClient(cfg)\n\n\trequest := payment.Request{\n\t\tTransactionAmount: 5000,\n            Description: \"Titulo del producto\",\n\t\tPaymentMethodID:   \"yape\",\n\t\tPayer: &payment.PayerRequest{\n\t\t\tEmail: \"test_user_123@testuser.com\",\n\t\t},\n\t\tToken:        \"ff8080814c11e237014c1ff593b57b4d\",\n\t\tInstallments: 1,\n\t}\n\n\tresource, err := client.Create(context.Background(), request)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Authorization: Bearer <ACCESS_TOKEN>' \\\n--header 'Content-Type: application/json' \\\n--header 'x-idempotency-key: <IDEMPOTENCY_KEY>' \\\n--data-raw '{\n   \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n   \"transaction_amount\": 5000,\n   \"description\": \"Título del producto\",\n   \"installments\": 1,\n   \"payment_method_id\": \"yape\",\n   \"payer\": {\n    \"email\": \"test_user_1295925766@testuser.com\"\n   }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Card Token in Mercado Pago SDK V2\nDESCRIPTION: Example of how to create a card token using the Mercado Pago SDK V2. The createCardToken method receives an object with cardholder information and returns a promise with the token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nasync function createCardToken(){\n    const token = await mp.fields.createCardToken({\n        cardholderName,\n        identificationType, \n        identificationNumber, \n    });\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference with Node.js SDK\nDESCRIPTION: Implements payment preference creation using Node.js SDK with wallet purchase purpose. Defines product details and handles response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-mp-wallet.en.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nlet preference = {\nitems: [\n{\ntitle: 'My product',\nunit_price: 100,\nquantity: 1,\n}\n],\npurpose: 'wallet_purchase'\n};\n\nMercadopago.preferences.create(preference)\n.then(function(response){\nglobal.id = response.body.id;\n}).catch(function(error){\nconsole.log(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Payment Information with Mercado Pago SDK in Java\nDESCRIPTION: This snippet illustrates how to retrieve all information about a payment using its payment ID. It initializes a payment client and calls the get method of the client to fetch the payment details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/create-payments.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nPaymentClient client = new PaymentClient();\n\nLong paymentId = 123456789L;\nclient.get(paymentId);\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Customer Cards with Mercado Pago\nDESCRIPTION: This snippet retrieves all card data associated with a specific customer using the Mercado Pago Java SDK.  It utilizes the `CustomerCardClient` to fetch a list of cards by providing the `customerId`.  The method `listAll` returns all cards associated with this customer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/cards.es.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nCustomerCardClient client = new CustomerCardClient();\n\nString customerId = \"448870796-7ZjwhKGxILixxN\";\nclient.listAll(customerId);\n```\n\n----------------------------------------\n\nTITLE: Including and Configuring MercadoPago.js Library - HTML\nDESCRIPTION: This snippet demonstrates how to include and configure the MercadoPago.js library in a webpage using a script tag. It initializes a MercadoPago instance with a public key for secure payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/secure-fields-card.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <!-- Add step #2 -->\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n  <script>\n      const mp = new MercadoPago('YOUR_PUBLIC_KEY');\n      // Add step #3\n  </script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Methods - Python\nDESCRIPTION: This code snippet retrieves a list of available payment methods using the Mercado Pago SDK. It initializes the SDK with an access token and then calls the `payment_methods().list_all()` method to fetch the list of payment methods. The response includes the details of each payment method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/payment-methods.en.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\npayment_methods_response = sdk.payment_methods().list_all()\npayment_methods = payment_methods_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Searching Customers by Email in Go\nDESCRIPTION: Go implementation for searching a customer by email using Mercado Pago's SDK. It initializes the configuration with an access token, creates a customer client, defines a search request with email filter, and processes the search results.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/search-customers.en.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/customer\"\n)\n\nfunc main() {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := customer.NewClient(cfg)\n\n\trequest := customer.SearchRequest{\n\t\tFilters: map[string]string{\n\t\t\t\"email\": \"{{EMAIL}}\",\n\t\t},\n\t}\n\n\tresource, err := client.Search(context.Background(), request)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfor _, v := range resources.Results {\n\t\tfmt.Println(v)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Get Issuers JavaScript\nDESCRIPTION: This snippet retrieves the card issuers based on the payment method ID and BIN, and populates the `issuer` select element in the form with these options. It also calls the `getInstallments` function to retrieve the available installment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/secure-fields-core.en.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Step #getIssuers\nconst getIssuers = async (bin) => {\n    try {\n      const paymentMethodId = document.getElementById('paymentMethodId').value;\n      const issuerElement = document.getElementById('form-checkout__issuer');\n      const issuers = await mp.getIssuers({ paymentMethodId, bin });\n      createSelectOptions(issuerElement, issuers);\n      getInstallments(bin);\n    } catch (e) {\n      console.error('error getting issuers: ', e)\n    }\n  };\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Intent with Redelcom API using cURL\nDESCRIPTION: This cURL command demonstrates how to create a payment intent by making a POST request to the Redelcom API. It includes the necessary headers and a JSON payload with transaction details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/api-create-payment-intent.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n 'https://api-dev.redelcom.cl:20010/v2/pago' \\\n--header 'X-Authentication: clientId;secret' \\\n--header 'Content-Type: application/json' \\\n--data '{\n\n\n   \"amount\": 6900,\n   \"description\": \"Compra de prueba\",\n   \"paymentType\": \"EFECTIVO\",\n   \"products\": [{\n       \"description\": \"PIZZA MEDIANA\",\n       \"id\": \"1845\",\n       \"iva_exempt\": false,\n       \"quantity\": 10,\n       \"unit_price\": 300\n   }],\n   \"rdcDTE\": true,\n   \"requestTip\": true,\n   \"responseCallback\": \"https://eom2h2tqm3g6y7l.m.pipedream.net\",\n   \"terminalId\": \"3127\",\n   \"userTransactionId\": \"345565\"\n\n\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Pix Payment with Python SDK\nDESCRIPTION: Python implementation for creating a Pix payment using Mercado Pago's SDK. It initializes the SDK with an access token, sets custom headers with an idempotency key, and creates a payment request with transaction amount, payment method ID, and payer email.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pix.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n    \"transaction_amount\": 100,\n    \"payment_method_id\": \"pix\",\n    \"payer\": {\n        \"email\": \"PAYER_EMAIL_HERE\",\n    }\n}\n\npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods Customization in React\nDESCRIPTION: This React snippet shows how to customize payment methods using the Mercado Pago Brick within a React component.  It demonstrates excluding specific payment methods and types, setting the maximum installments available, and configuring interest-free installment options.  The `customization` object is intended to be used when initializing the payment brick within a React application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/brand-brick/payment-methods.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n    paymentMethods: {\n        excludedPaymentMethods: [\"master\"], // optional string[]. default []. options [\"master\", \"visa\", \"amex\", \"naranja\", \"maestro\", \"cabal\", \"cencosud\", \"cordobesa\", \"argencard\", \"diners\", \"tarshop\", \"cmr\", \"rapipago\", \"pagofacil\", \"mercadopago\"]\n         excludedPaymentTypes: [\"ticket\"], // optional string[]. default []. optional string[]. default []. options [\"credit_card\", \"debit_card\", \"ticket\", \"account_money\", \"mercado_credito\"]\n      maxInstallments: 12, // optional number. min 2 max 12\n      interestFreeInstallments: false, // optional boolean\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an Order with Mercado Pago QR Code API in curl\nDESCRIPTION: This snippet demonstrates how to create an order for payment using a POST request to the Mercado Pago API. It requires a valid access token and point of sale ID provided by the support team, along with item details in the request body.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/interoperable-accepting-flow-test.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n  'https://api.mercadopago.com/mpmobile/beta/instore/qr/{point_of_sale_id}?access_token={access_token_seller}' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\\n   \"items\":[\\n      {\\n         \"title\":\"Hamburguesa Doble\",\\n         \"unit_price\":550.25,\\n         \"quantity\":1\\n      }\\n   ]\\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Secure Fields and Card Token Creation with Mercado Pago SDK-React\nDESCRIPTION: This snippet demonstrates how to use Mercado Pago's SDK-React to implement Secure Fields for card information input and create a card token. It includes the initialization of MercadoPago, the use of CardNumber, SecurityCode, and ExpirationDate components, and a function to create a card token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/react-core-methods.es.md#2025-04-18_snippet_0\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport React from 'react';\nimport {\n  initMercadoPago,\n  createCardToken,\n  CardNumber,\n  SecurityCode,\n  ExpirationDate,\n} from '@mercadopago/sdk-react';\n\ninitMercadoPago('YOUR-PUBLIC-KEY');\n\nconst App = () => {\n const cardToken = async () => {\n   const response = await createCardToken({\n     cardholderName: '<CARD_HOLDER_NAME>',\n     identificationType: '<BUYER_IDENTIFICATION_TYPE>',\n     identificationNumber: '<BUYER_IDENTIFICATION_NUMBER>',\n   })\n   console.log('Card Token Response = ', response)\n }\n return (\n   <>\n     <CardNumber placeholder='Card Number'/>\n     <SecurityCode placeholder='Security Code' />\n     <ExpirationDate placeholder='Expiration Date' mode='short'/>\n     <button onClick={() => cardToken()}>Pay</button>\n   </>\n );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer Cards with Mercado Pago SDK in Java\nDESCRIPTION: This snippet illustrates how to retrieve all stored card data for a specific customer using their customer ID with the Mercado Pago SDK in Java. By calling 'listAll' on 'CustomerCardClient', it fetches all card entries associated with the given customer ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/cards.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nCustomerCardClient client = new CustomerCardClient();\n\nString customerId = \"448870796-7ZjwhKGxILixxN\";\nclient.listAll(customerId);\n```\n\n----------------------------------------\n\nTITLE: Setting Notification URL with MercadoPago SDK in Python\nDESCRIPTION: Python snippet to set up a payment with notification URL using MercadoPago SDK. Requires configuration with access token and dependencies. Inputs: payment details retrieved from request. Outputs: the payment response printed to the console.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.en.md#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\\n\\n\\npayment_data = {\\n   \"transaction_amount\": float(request.POST.get(\"transaction_amount\")),\\n   \"token\": request.POST.get(\"token\"),\\n   \"description\": request.POST.get(\"description\"),\\n   \"installments\": int(request.POST.get(\"installments\")),\\n   \"payment_method_id\": request.POST.get(\"payment_method_id\"),\\n   \"notification_url\" =  \"http://requestbin.fullcontact.com/1ogudgk1\",\\n   \"payer\": {\\n       \"email\": request.POST.get(\"email\"),\\n       \"identification\": {----[mla, mlb, mlu, mlc, mpe, mco]----\\n           \"type\": request.POST.get(\"type\"), ------------\\n           \"number\": request.POST.get(\"number\")\\n       }\\n   }\\n}\\n\\n\\npayment_response = sdk.payment().create(payment_data)\\npayment = payment_response[\"response\"]\\n\\n\\nprint(payment)\\n\n```\n\n----------------------------------------\n\nTITLE: Submitting Credit Card Payments with Mercado Pago via curl\nDESCRIPTION: This code snippet demonstrates how to perform a credit card payment transaction using Mercado Pago's API with a POST request. Dependencies include a valid Mercado Pago account and access token. Key parameters include transaction amount, payment method ID, and tokenized card details. The input requires buyer and product information, while the output is the system response from the API. Ensure JSON structure validity, and handle errors appropriately.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/credit-card-general.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'x-platform-id: {{PLATFORM_ID provided by the Partners team}}' \\\n--header 'Authorization: Bearer {{ACCESS_TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"transaction_amount\": 100,\n    \"installments\": 1,\n    \"statement_descriptor\": \"Seller's store\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": {{ID of your Mercado Pago account related to your platform}},\n    \"payment_method_id\": \"{{payment_method_id}}\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Platform identifier\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"description\": \"Seller's product description\",\n    \"payer\": {\n        \"first_name\": \"Name. Example: John\",\n        \"last_name\": \"Last name. Example: Jones\",\n        \"email\": \"Example: test_user_1677281619@testuser.com\",\n        \"identification\": {\n            \"type\": \"Document type. Example: CPF\",\n            \"number\": \"Document number. Example: 19119119100\"\n        },\n        \"address\": {\n            \"zip_code\": \"Zip code. Example: 06233-200\",\n            \"street_name\": \"Stree name. Example: Av. das Nações Unidas\",\n            \"street_number\": \"Number. Example: 3003\",\n            \"neighborhood\": \"Neighborhood. Example: Bonfim\",\n            \"city\": \"City. Example: Osasco\",\n            \"federal_unit\": \"Federal unit. Example: SP\"\n        }\n    },\n    \"additional_info\": {\n        \"referral_url\": \"Referral URL. Example: www.sellertest123.com\",\n        \"drop_shipping\": true,\n        \"delivery_promise\": \"2022-11-20\",\n        \"contrated_plan\": \"premium\",\n        \"items\": [\n            {\n                \"id\": \"1941\",\n                \"title\": \"Seller's product\",\n                \"description\": \"Description of the seller's product\",\n                \"picture_url\": null,\n                \"category_id\": \"Category. Example: electronics\",\n                \"quantity\": 1,\n                \"unit_price\": 100.00\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Name. Example: John\",\n            \"last_name\": \"Last name. Example: Jones\",\n            \"is_prime_user\": \"1\",\n            \"is_first_purchase_online\": \"1\",\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"Area code. Example: 11\",\n                \"number\": \"Number. Example: 987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"Zip code. Example: 06233-200\",\n                \"street_name\": \"Street name. Example: Av. das Nações Unidas\",\n                \"street_number\": \"Number. Example: 3003\"\n            },\n            \"registration_date\": \"2013-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"0\",\n            \"pick_up_on_seller\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"Zip code. Example: 95630000\",\n                \"street_name\": \"Street name. Example: ão Luiz\",\n                \"street_number\": \"Number. Example: 15\",\n                \"floor\": \"Floor (if it's an apartment). Example: Second\",\n                \"apartment\": \"Apartment number (if it's an apartment). Example: 93\"\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Test Deep Link with Expo Go (Android)\nDESCRIPTION: This command demonstrates how to test deep links using Expo Go in the terminal for Android.  It uses the `npx uri-scheme open` command to simulate opening a deep link on a connected device.  Replace the URL with the appropriate scheme, host, and path.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-expo-go.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n// URL local do dispositivo de teste\nnpx uri-scheme open exp://192.168.0.7:19000/--/checkout/congrats --android\n// Nota: Não é necessário passar o scheme nestes testes\n```\n\n----------------------------------------\n\nTITLE: Creating PagoEfectivo Payment with PHP SDK\nDESCRIPTION: Creates a payment using PagoEfectivo through Mercado Pago PHP SDK. Requires transaction amount, payment method ID, and payer email. Includes idempotency key header for safe retries.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.es.md#2025-04-18_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['<TRANSACTION_AMOUNT>'],\n    \"payment_method_id\" => $_POST['<PAYMENT_METHOD_ID>'],\n    \"payer\" => [\n      \"email\" => $_POST['<EMAIL>']\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Update Payment Preference\nDESCRIPTION: This code updates an existing payment preference with new data. It modifies the item details and uses the `preference().update()` method to send the updated data to the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.es.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef index(req, **kwargs):\n        preference_data = {\n            \"items\": [\n                {\n                    \"title\": \"Test Modified\",\n                    \"quantity\": 1,\n                    \"currency_id\": \"USD\",\n                    \"unit_price\": 20.4\n                }\n            ]\n        }\n\n        preference = sdk.preference().update(id, preference_data)\n\n        return json.dumps(preference_response[\"response\"], indent=4)\n```\n\n----------------------------------------\n\nTITLE: Creating Merchant Order with Mercado Pago API in Java\nDESCRIPTION: This code snippet demonstrates how to create a merchant order using the Mercado Pago Java SDK. It initializes the MerchantOrderClient, creates a list of items to be included in the order, sets the necessary details like external reference, preference ID, payer information, site ID, application ID, and finally, calls the create method of the MerchantOrderClient.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/orders.es.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n```java\n\nMerchantOrderClient client = new MerchantOrderClient();\n\nList<MerchantOrderItemRequest> items = new ArrayList<>();\n\nMerchantOrderItemRequest item =\n   MerchantOrderItemRequest.builder()\n       .id(\"item id\")\n       .categoryId(\"item category\")\n       .currencyId(\"BRL\")\n       .description(\"item description\")\n       .pictureUrl(\"item picture\")\n       .quantity(1)\n       .unitPrice(new BigDecimal(\"5\"))\n       .title(\"item title\")\n       .build();\n\nitems.add(item);\n\nMerchantOrderCreateRequest createRequest =\n   MerchantOrderCreateRequest.builder()\n       .externalReference(\"default\")\n       .preferenceId(\"Preference identification\")\n       .payer(MerchantOrderPayerRequest.builder().id(123L).nickname(\"JOHN\").build())\n       .siteId(\"MLA\")\n       .items(items)\n       .applicationId(\"10000000000000000\")\n       .build();\n\nclient.create(createRequest);\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Payment Button Click (JavaScript)\nDESCRIPTION: This JavaScript function handles the custom payment button click. It retrieves form data using the Brick's getFormData method, then sends it to a server endpoint for processing. It also includes basic error handling.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/hide-element.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createPayment(){\n    window.cardPaymentBrickController.getFormData()\n        .then((cardFormData) => {\n            console.log('cardFormData received, creating payment...');\n            fetch(\"/process_payment\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify(cardFormData),\n            })\n        })\n        .catch((error) => {\n            // tratamento de erros ao chamar getFormData()\n        });\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing SmartPOS SDK in Java Application Class\nDESCRIPTION: This Java snippet demonstrates how to create a class that extends Android's Application class and initialize the SmartPOS SDK with the required configuration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/first-steps.en.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class MainApplication extends Application {\n\n @Override\n public void onCreate() {\n   super.onCreate();\n   MPConfig config = new MPConfigBuilder(this, \"123456789\")\n     .withBluetoothConfig()\n     .withBluetoothUIConfig()\n     .build();\n   MPManager.INSTANCE.initialize(this, config);\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving User Confirmation Webhook for Wallet Connect in Mercado Pago\nDESCRIPTION: This example shows the payload sent by Mercado Pago when a user confirms a connection with your application. Use this data to retrieve the agreement_code and external_flow_id needed for payment token creation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/notifications.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\n{\n  \"id\": \"22abcd1235ed497f945f755fcaba3c6c\",\n  \"type\": \"wallet_connect\",\n  \"entity\": \"agreement\",\n  \"action\": \"status.updated\",\n  \"date\": \"2021-09-30T23:24:44Z\",\n  \"model_version\": 1,\n  \"version\": 0,\n  \"data\": {\n    \"id\": \"22abcd1235ed497f945f755fcaba3c6c\",\n    \"status\": \"confirmed_by_user\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Fintoc Payment in Node.js\nDESCRIPTION: Implements Fintoc payment creation using Mercado Pago's Node.js SDK. Handles payment configuration and response processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-simplified.en.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(config.access_token);\n\nvar payment = req.body;\n\nvar payment_data = {\n  transaction_amount: 5000,\n  callback_url: 'https://www.your-site.com',\n  point_of_interaction: {\n   type: 'CHECKOUT',\n   sub_type: 'INTER_PSP'\n  },\n  description: 'Product title',\n  payment_method_id: 'fintoc',\n  payer: {\n    email: payment.email,\n  }\n};\n\nvar payment = mercadopago.payment.save(payment_data)\n  .then(function (response) {\n    res.status(response.status).json({\n      status: response.body.status,\n      status_detail: response.body.status_detail,\n      id: respose.body.id,\n    });\n  })\n  .catch(function (error) {\n    res.status(error.status).send(error);\n});\n\nvar payment_link = payment.transaction_details.external_resource_url;\n\n```\n\n----------------------------------------\n\nTITLE: Creating SPEI Transfer Payment with Mercado Pago using cURL\nDESCRIPTION: cURL implementation for creating a SPEI transfer payment by sending a POST request to Mercado Pago's API. It requires an authorization bearer token and includes JSON data with transaction amount, description, payment method (clabe), and payer information including email and name.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.en.md#2025-04-18_snippet_18\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n-H 'Content-Type: application/json' \\\n--d '{\n    \"transaction_amount\": 5000,\n    \"description\": \"Título del producto\",\n    \"payment_method_id\": \"clabe\",\n    \"payer\": {\n        \"email\": \"test_user_19549678@testuser.com\",\n        \"entity_type\": \"individual\",\n        \"first_name\": \"John\",\n        \"last_name\": \"Doe\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Generating Public and Private Keys with OpenSSL\nDESCRIPTION: This command generates a public-private key pair using OpenSSL. The private key is saved to `mpprivate.pem`, and the corresponding public key is saved to `mppublic.pem`. This command is designed to be executed within a Linux or MacOS terminal environment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/encryption.es.md#2025-04-18_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nopenssl genpkey -algorithm ed25519 -out mpprivate.pem && \nopenssl pkey -in mpprivate.pem -pubout -out mppublic.pem\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago SDK in C#\nDESCRIPTION: This code snippet demonstrates how to create a payment using the Mercado Pago SDK in C#. It configures the SDK, sets up custom headers with an idempotency key, and sends the payment data to the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/payment-submission.en.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n\nvar paymentRequest = new PaymentCreateRequest\n{\n    TransactionAmount = decimal.Parse(Request[\"transaction_amount\"]),\n    Token = Request[\"token\"],\n    Installments = int.Parse(Request[\"installments\"]),\n    PaymentMethodId = Request[\"payment_method_id\"],\n    Payer = new PaymentPayerRequest\n    {\n        Email = Request[\"payer\"][\"email\"],\n        Identification = new IdentificationRequest\n        {\n            Type = Request[\"payer\"][\"identification\"][\"type\"],\n            Number = Request[\"payer\"][\"identification\"][\"number\"],\n        },\n    },\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest, requestOptions);\n\nConsole.WriteLine(payment.Status);\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Payment with MercadoPago SDK in PHP\nDESCRIPTION: This snippet demonstrates how to cancel a specific purchase using the payment ID. It uses the PaymentClient class and sets a custom idempotency header to ensure the operation is not accidentally repeated.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/cancellation.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $client->cancel('123456789', $request_options);\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment Brick with Saved Cards in React\nDESCRIPTION: React implementation example showing how to configure Payment Brick initialization with customerId and cardsIds to enable saved cards functionality. The configuration identifies the customer and specifies their saved card IDs.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/customers-cards.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst initialization = {\n ...,\n payer: {\n   ...,\n   customerId: '209277402-FqRqgEc3XItrxs',\n   cardsIds: [ '1518023392627', '1518023332143' ]\n },\n};\n```\n\n----------------------------------------\n\nTITLE: Processing Card Payments with PHP using MercadoPago SDK\nDESCRIPTION: This PHP code demonstrates how to create a payment using MercadoPago's SDK. It configures an access token, sets an idempotency key for safe transaction processing, and sends payment details including transaction amount, token, description, installments, payment method, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-cards.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\Client\\Common\\RequestOptions;\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['<TRANSACTION_AMOUNT>'],\n    \"token\" => $_POST['<TOKEN>'],\n    \"description\" => $_POST['<DESCRIPTION>'],\n    \"installments\" => $_POST['<INSTALLMENTS>'],\n    \"payment_method_id\" => $_POST['<PAYMENT_METHOD_ID'],\n    \"issuer_id\" => $_POST['<ISSUER>'],\n    \"payer\" => [\n      \"email\" => $_POST['<EMAIL>'],\n      \"identification\" => [\n        \"type\" => $_POST['<IDENTIFICATION_TYPE'],\n        \"number\" => $_POST['<NUMBER>']\n      ]\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Fintoc Payment with MercadoPago Python SDK\nDESCRIPTION: Illustrates creating a Fintoc payment using the MercadoPago Python SDK, including setting up the payment data and handling the API request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-advanced.en.md#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"YOUR_ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n    \"description\": \"Titulo del producto\",\n    \"payer\": {\n        \"email\": \"test_user_123@testuser.com\",\n    },\n    \"payment_method_id\": \"fintoc\",\n    \"transaction_amount\": 5000,\n    \"callback_url\": \"https://www.your-site.com\",\n    \"point_of_interaction\": {\n        \"type\": \"CHECKOUT\",\n        \"sub_type\": \"INTER_PSP\"\n    },\n}\n\npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Mercado Pago SDK\nDESCRIPTION: Instructions for including Mercado Pago SDK in the project either via HTML script tag or NPM installation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-mp-wallet.en.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n```\n\n----------------------------------------\n\nTITLE: Creando preferencia con atributo purpose para Cuenta de Mercado Pago en Node.js\nDESCRIPTION: Este código crea una preferencia de pago con el atributo 'purpose' configurado para 'wallet_purchase' usando Node.js, habilitando el modo Cuenta de Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-mp-wallet.es.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Crea un objeto de preferencia\nlet preference = {\n  items: [\n    {\n      title: 'Mi producto',\n      unit_price: 100,\n      quantity: 1,\n    }\n  ],\n  purpose: 'wallet_purchase'\n};\n\nmercadopago.preferences.create(preference)\n.then(function(response){\n  global.id = response.body.id;\n}).catch(function(error){\n  console.log(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment Brick with Saved Cards in JavaScript\nDESCRIPTION: Configuration example showing how to pass customerId and cardsIds to Payment Brick settings to enable saved cards functionality. The customerId identifies the buyer and cardsIds array contains the IDs of their saved cards.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/customers-cards.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsettings = {\n   initialization: {\n       ...,\n       payer: {\n           ...,\n           customerId: '209277402-FqRqgEc3XItrxs',\n           cardsIds: [ '1518023392627', '1518023332143' ]\n       },\n   },\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago API in Node.js\nDESCRIPTION: This Node.js code shows how to create a payment using the Mercado Pago API. It requires the 'mercadopago' library, sets the access token, defines the payment data including transaction amount, token, description, installments, payment method ID, issuer ID, and payer email. The payment is then saved, and the status is logged.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-serverside.es.md#2025-04-18_snippet_2\n\nLANGUAGE: node\nCODE:\n```\nvar mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(config.access_token);\n\nvar payment_data = {\n  transaction_amount: 100,\n  token: token,\n  description: 'Blue shirt',\n  installments: installments,\n  payment_method_id: payment_method_id,\n  issuer_id: issuer_id,\n  payer: {\n    email: 'john@yourdomain.com'\n  }\n};\n\n// Guarda y postea el pago\nmercadopago.payment.save(payment_data).then(function (data) {\n  // ...    \n  // Imprime el estado del pago\n  Console.log(data.status);\n}).catch(function (error) {\n  // ...\n});\n\n```\n\n----------------------------------------\n\nTITLE: Inicializando SDK de Mercado Pago con clave pública en JavaScript\nDESCRIPTION: Este código JavaScript inicializa el SDK de Mercado Pago con la clave pública del usuario para habilitar las operaciones de pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-mp-wallet.es.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  const mp = new MercadoPago(\"YOUR_PUBLIC_KEY\");\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Auxiliary Methods from Mercado Pago SDK-React\nDESCRIPTION: This code snippet shows how to use various auxiliary methods provided by the Mercado Pago SDK-React. It includes examples of fetching identification types, payment methods, issuers, and installments options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/react-core-methods.es.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport {\n getIdentificationTypes,\n getPaymentMethods,\n getIssuers,\n getInstallments,\n} from '@mercadopago/sdk-react'\n\n\nconst identificationTypes = await getIdentificationTypes()\nconst paymentMethods = await getPaymentMethods({ bin: '50314332' })\nconst issuers = await getIssuers({ paymentMethodId: 'master', bin: '50314332' })\nconst installments = await getInstallments({\n amount: '1000',\n locale: 'pt-BR',\n bin: '50314332',\n processingMode: 'aggregator'\n})\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment in Node.js with MercadoPago SDK\nDESCRIPTION: This snippet illustrates how to capture a partial amount from a reserved payment using the MercadoPago Node.js SDK. It sets the access token, prepares the capture information, and calls the capturePartial method with a callback to handle the response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.en.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar Mercadopago = require('mercadopago');\nMercadopago.configurations.setAccessToken(config.access_token);\n\nlet captureInfo = {id: 123, transaction_amount: 5}\n\nMercadopago.payment.capturePartial(captureInfo, Mercadopago, (error, response) => {\nif (error){\nconsole.log(error);\n}else{\nconsole.log(response)\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Checkout Bricks in Multiple Languages\nDESCRIPTION: Demonstrates how to create a payment using Mercado Pago Checkout Bricks SDK, including setting transaction details, payer information, and handling the payment response across different programming languages.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  require_once 'vendor/autoload.php';\n  MercadoPago\\SDK::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n  $payment = new MercadoPago\\Payment();\n  $payment->transaction_amount = (float)$_POST['transactionAmount'];\n  $payment->token = $_POST['token'];\n  $payment->installments = (int)$_POST['installments'];\n  $payment->payment_method_id = $_POST['paymentMethodId'];\n  $payment->issuer_id = (int)$_POST['issuer'];\n  $payer = new MercadoPago\\Payer();\n  $payer->email = $parsed_body['payer']['email'];\n  $payer->identification = array(\n     \"type\" => $parsed_body['payer']['identification']['type'],\n     \"number\" => $parsed_body['payer']['identification']['number']\n   );\n  $payment->payer = $payer;\n  $payment->save();\n  $response = array(\n      'status' => $payment->status,\n      'status_detail' => $payment->status_detail,\n      'id' => $payment->id\n  );\n  echo json_encode($response);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nvar mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nmercadopago.payment.save(req.body)\n  .then(function(response) {\n    const { status, status_detail, id } = response.body;\n    res.status(response.status).json({ status, status_detail, id });\n  })\n  .catch(function(error) {\n    console.error(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Creando pagos con PagoEfectivo usando Mercado Pago SDK en Java\nDESCRIPTION: Código Java para crear un pago con PagoEfectivo utilizando el SDK de Mercado Pago. Muestra cómo configurar headers personalizados para idempotencia, establecer el token de acceso y construir la solicitud de pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mpe.es.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\nPaymentCreateRequest paymentCreateRequest =\n   PaymentCreateRequest.builder()\n       .transactionAmount(new BigDecimal(\"100\"))\n       .description(\"Product title\")\n       .paymentMethodId(\"pagoefectivo_atm\")\n       .payer(\n          PaymentPayerRequest.builder()\n              .email(\"test@test.com\").build()\n       )\n\t.metadata(\n          Map.of(\"payment_mode\", \"online\")\n       )\n      .build();\nclient.create(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Creating Card Payment with Mercado Pago Node.js SDK\nDESCRIPTION: Demonstrates how to create a card payment using the Mercado Pago Node.js SDK. Sets up the client with an access token and sends a payment request with transaction details and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-cardform.en.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Payment, MercadoPagoConfig } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\n\npayment.create({\n    body: { \n        transaction_amount: req.transaction_amount,\n        token: req.token,\n        description: req.description,\n        installments: req.installments,\n        payment_method_id: req.paymentMethodId,\n        issuer_id: req.issuer,\n            payer: {\n            email: req.email,\n            identification: {\n        type: req.identificationType,\n        number: req.number\n    }}},\n    requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n.then((result) => console.log(result))\n.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Payment Methods with C#\nDESCRIPTION: Code to obtain a list of all available payment methods using the MercadoPago C# SDK. This implementation configures the access token and creates a PaymentMethodClient to fetch and list payment methods asynchronously.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.es.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.PaymentMethod;\nusing MercadoPago.Config;\nusing MercadoPago.Resource;\nusing MercadoPago.Resource.PaymentMethod;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar client = new PaymentMethodClient();\nResourcesList<PaymentMethod> paymentMethods = await client.ListAsync();\n\n```\n\n----------------------------------------\n\nTITLE: Adding MercadoPago Card Payment Form HTML\nDESCRIPTION: These HTML snippets show how to implement a structured form to collect cardholder information for payment transactions using MercadoPago.js. The form facilitates the capture of several data fields essential for processing payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-cardform.en.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  #form-checkout {\n    display: flex;\n    flex-direction: column;\n    max-width: 600px;\n  }\n\n  .container {\n    height: 18px;\n    display: inline-block;\n    border: 1px solid rgb(118, 118, 118);\n    border-radius: 2px;\n    padding: 1px 2px;\n  }\n</style>\n<form id=\\\"form-checkout\\\">\n  <div id=\\\"form-checkout__cardNumber\\\" class=\\\"container\\\"></div>\n  <div id=\\\"form-checkout__expirationDate\\\" class=\\\"container\\\"></div>\n  <div id=\\\"form-checkout__securityCode\\\" class=\\\"container\\\"></div>\n  <input type=\\\"text\\\" id=\\\"form-checkout__cardholderName\\\" />\n  <select id=\\\"form-checkout__issuer\\\"></select>\n  <select id=\\\"form-checkout__installments\\\"></select>\n  <select id=\\\"form-checkout__identificationType\\\"></select>\n  <input type=\\\"text\\\" id=\\\"form-checkout__identificationNumber\\\" />\n  <input type=\\\"email\\\" id=\\\"form-checkout__cardholderEmail\\\" />\n\n  <button type=\\\"submit\\\" id=\\\"form-checkout__submit\\\">Pay</button>\n  <progress value=\\\"0\\\" class=\\\"progress-bar\\\">Loading...</progress>\n</form>\n\n```\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  #form-checkout {\n    display: flex;\n    flex-direction: column;\n    max-width: 600px;\n  }\n\n  .container {\n    height: 18px;\n    display: inline-block;\n    border: 1px solid rgb(118, 118, 118);\n    border-radius: 2px;\n    padding: 1px 2px;\n  }\n</style>\n<form id=\\\"form-checkout\\\">\n  <div id=\\\"form-checkout__cardNumber\\\" class=\\\"container\\\"></div>\n  <div id=\\\"form-checkout__expirationDate\\\" class=\\\"container\\\"></div>\n  <div id=\\\"form-checkout__securityCode\\\" class=\\\"container\\\"></div>\n  <input type=\\\"text\\\" id=\\\"form-checkout__cardholderName\\\" />\n  <select id=\\\"form-checkout__issuer\\\"></select>\n  <select id=\\\"form-checkout__installments\\\"></select>\n  <input type=\\\"email\\\" id=\\\"form-checkout__cardholderEmail\\\" />\n\n  <button type=\\\"submit\\\" id=\\\"form-checkout__submit\\\">Pay</button>\n  <progress value=\\\"0\\\" class=\\\"progress-bar\\\">Loading...</progress>\n</form>\n\n```\n\n----------------------------------------\n\nTITLE: Processing Payment with PHP\nDESCRIPTION: PHP implementation for processing a credit card payment with Mercado Pago. This code receives form data including token, amount, and payer information, then sends a payment request to Mercado Pago's API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.en.md#2025-04-18_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once 'vendor/autoload.php';\n\nMercadoPago\\SDK::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n$payment = new MercadoPago\\Payment();\n$payment->transaction_amount = (float)$_POST['transactionAmount'];\n$payment->token = $_POST['token'];\n$payment->description = $_POST['description'];\n$payment->installments = (int)$_POST['installments'];\n$payment->payment_method_id = $_POST['paymentMethodId'];\n$payment->issuer_id = (int)$_POST['issuer'];\n\n$payer = new MercadoPago\\Payer();\n$payer->email = $_POST['email'];\n$payer->identification = array(\n\"type\" => $_POST['identificationType'],\n\"number\" => $_POST['identificationNumber']\n);\n$payment->payer = $payer;\n\n$payment->save();\n\n$response = array(\n'status' => $payment->status,\n'status_detail' => $payment->status_detail,\n'id' => $payment->id\n);\necho json_encode($response);\n\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Customer in Mercado Pago Node.js SDK\nDESCRIPTION: Demonstrates how to create a new customer with comprehensive personal and contact information using Mercado Pago's SDK. Requires an access token for authentication and supports detailed customer profile creation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/customers.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerClient = new Customer(client);\n\nconst body = {\n\temail: 'jhon@doe.com',\n\tfirst_name: 'Jhon',\n\tlast_name: 'Doe',\n\tphone: {\n\t\tarea_code: '55',\n\t\tnumber: '991234567'\n\t},\n\tidentification: {\n\t\ttype: 'CPF',\n\t\tnumber: '12345678900'\n\t},\n\tdefault_address: 'Home',\n\taddress: {\n\t\tid: '123123',\n\t\tzip_code: '01234567',\n\t\tstreet_name: 'Rua Exemplo',\n\t\tstreet_number: '123',\n\t\tcity: {}\n\t},\n\tdate_registered: '2021-10-20T11:37:30.000-04:00',\n\tdescription: 'Description del user',\n\tdefault_card: 'None'\n};\n\ncustomerClient.create({ body: body }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Describing Successful Payment Response in JSON\nDESCRIPTION: This snippet provides the JSON structure of a successful payment request response. It includes transaction details such as amounts, descriptions, and identifiers. The response is accompanied by status code 200.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/get-payment-information-returns.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Json\nCODE:\n```\n{\n  \"id\": 10267812,\n  \"wallet_payment\": {\n    \"transaction_amount\": 125.98,\n    \"description\": \"Payment for the purchase of furniture\",\n    \"external_reference\": \"Payment_seller_123\"\n  },\n  \"payments\": [\n    {\n      \"id\": 3870106238,\n      \"status_detail\": \"approved_id\",\n      \"payment_method_id\": \"credit_card_id\",\n      \"transaction_amount\": 700.5,\n      \"installments\": 1,\n      \"description\": \"Payment for the purchase of furniture\",\n      \"capture\": true,\n      \"external_reference\": \"payment_123\"\n    }\n  ],\n  \"disbursements\": {\n    \"collector_id\": \"collectorId\"\n  },\n  \"payer\": {\n    \"id\": 8879\n  },\n  \"site_id\": \"MLB\",\n  \"date_created\": \"2018-10-20T09:34:20.518-04:00\",\n  \"date_last_updated\": \"2018-10-20T09:34:20.518-04:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Fintoc Payment with MercadoPago Java SDK\nDESCRIPTION: Illustrates how to create a Fintoc payment using the MercadoPago Java SDK, including setting up the payment request and handling the client creation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-advanced.en.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest createRequest =\n    PaymentCreateRequest.builder()\n        .description(\"Product title\")\n        .paymentMethodId(\"fintoc\")\n        .payer(PaymentPayerRequest.builder()\n            .email(\"test_user_123@testuser.com\")\n            .build())\n        .transactionAmount(new BigDecimal(\"5000\"))\n        .callbackUrl(\"https://www.your-site.com\")\n        .pointOfInteraction(PaymentPointOfInteractionRequest\n        .builder().type(\"CHECKOUT\").subType(\"INTER_PSP\").build())\n        .build();\n\nclient.create(createRequest);\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Preference with Mercado Pago SDK in Python\nDESCRIPTION: This snippet demonstrates how to create a payment preference using the Mercado Pago SDK in Python. The key dependency is the 'sdk' library from Mercado Pago. It requires a preference object with items listed, including title, quantity, and unit price (which must be an integer). The code outputs a response that includes the created preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-checkout.en.md#2025-04-18_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# Create a preference object\npreference_data = {\n    \"items\": [\n        {\n            \"title\": \"My Item\",\n            \"quantity\": 1,\n            \"unit_price\": 75\n            \n        }\n    ]\n}\n\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Cash Payments with Rapipago/Pago Fácil in Python\nDESCRIPTION: Python implementation for creating cash payments using Mercado Pago's SDK. This example shows how to configure the payment data with transaction amount, description, payment method, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nimport market\nsdk = Mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\npayment_data = {\n\"transaction_amount\": 100,\n\"description\": \"Product title\",\n\"payment_method_id\": \"rapipago\",\n\"payer\": {\n\"email\": \"test_user_19653727@testuser.com\"\n}\n}\n\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference with PHP SDK\nDESCRIPTION: Creates a payment preference object with wallet purchase purpose using PHP SDK. Sets up product details including title, quantity and price.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-mp-wallet.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Create a preference object\n$preference = new MercadoPago\\Preference();\n\n// Create an item in the preference\n$item = new MercadoPago\\Item();\n$item->title = 'My product';\n$item->quantity = 1;\n$item->unit_price = 75;\n$preference->items = array($item);\n$preference->purpose = 'wallet_purchase';\n$preference->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Fetching Updated Payment Status\nDESCRIPTION: Asynchronous function to retrieve and display the updated payment status after 3DS challenge\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.es.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener(\"DOMContentLoaded\", async function (e) {\n init();\n});\n\nasync function init() {\n const id = localStorage.getItem(\"paymentId\");\n\n try {\n   const response = await fetch(\"/get_payment/\" + id, {\n     method: \"GET\",\n   });\n   const result = await response.json();\n   if (result.status != 200) throw new Error(\"error getting payment\");\n   document.getElementById(\"congrats-div\").innerHTML =\n     \"Pagamento \" + result.data.id + \" -> Status: \" + result.data.status;\n } catch (error) {\n   alert(\"Unexpected error\\n\" + JSON.stringify(error));\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Item Preference in Java\nDESCRIPTION: Illustrates creating a payment preference with multiple items using the Mercado Pago Java SDK, with detailed item configuration including ID, title, quantity, currency, and unit price\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/preference-multiple-items.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Create a preference object\nPreferenceClient client = new PreferenceClient();\n// Create items in preference\nPreferenceClient client = new PreferenceClient();\n\nList<PreferenceItemRequest> items = new ArrayList<>();\n\nPreferenceItemRequest item1 =\nPreferenceItemRequest.builder()\n.id(\"1234\")\n.title(\"Product 1\")\n.quantity(2)\n.currencyId(\"BRL\")\n.unitPrice(new BigDecimal(\"100\"))\n.build();\nPreferenceItemRequest item2 =\nPreferenceItemRequest.builder()\n.id(\"12\")\n.title(\"Product 2\")\n.quantity(1)\n.currencyId(\"BRL\")\n.unitPrice(new BigDecimal(\"100\"))\n.build();\n\nitems.add(item1);\nitems.add(item2);\n\nPreferenceRequest request = PreferenceRequest.builder().items(items).build();\n// Save and post the preference\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Request in Python with Mercado Pago SDK\nDESCRIPTION: This Python snippet demonstrates creating a payment request using the Mercado Pago SDK. It prepares the payment details, payer information, and transaction parameters before calling the API to create the payment. The Mercado Pago Python SDK is required for this code to function correctly.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pse.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'X-Idempotency-Key': '<SOME_UNIQUE_VALUE>'\n}\n \nbody = {\n    \"transaction_amount\": 5000,\n    \"description\": \"Product description\",\n    \"payment_method_id\": \"pse\",\n    \"callback_url\": \"https://your-site.com\",\n    \"notification_url\": \"https://your-site.com\",\n    \"additional_info\": {\n        \"ip_address\": \"127.0.0.1\"\n    },\n    \"transaction_details\": {\n        \"financial_institution\": request.POST.get(\"financialInstitution\")\n    },\n    \"payer\": {\n        \"email\": request.POST.get(\"email\"),\n        \"entity_type\": \"individual\",\n        \"first_name\": request.POST.get(\"firstName\"),\n        \"last_name\": request.POST.get(\"lastName\"),\n        \"identification\": {\n            \"type\": request.POST.get(\"identificationType\"), \n            \"number\": request.POST.get(\"identificationNumber\")\n        },\n        \"address\": {\n            \"zip_code\": request.POST.get(\"zipCode\"),\n            \"street_name\": request.POST.get(\"streetName\"),\n            \"street_number\": request.POST.get(\"streetNumber\"),\n            \"neighborhood\": request.POST.get(\"neighborhood\"),\n            \"city\": request.POST.get(\"city\"),\n            \"federal_unit\": request.POST.get(\"federalUnit\")\n        },\n        \"phone\": {\n            \"area_code\": request.POST.get(\"phoneAreaCode\"),\n            \"number\": request.POST.get(\"phoneNumber\")\n        }\n    }\n}\n \npayment_response = sdk.payment().create(body, request_options)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Loading the Payment Brick with MercadoPago SDK\nDESCRIPTION: This JavaScript snippet initializes the MercadoPago instance using a public key and sets up a payment Brick with specific configurations such as transaction amount and styling options. It also includes callbacks for handling different payment states.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-clientside.en.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst mp = new MercadoPago('YOUR_PUBLIC_KEY');\nconst bricksBuilder = mp.bricks();\nconst renderPaymentBrick = async (bricksBuilder) => {\n   const settings = {\n       initialization: {\n           amount: 100, //valor do processamento a ser realizado\n           payer: {\n           email: '<PAYER_EMAIL_HERE>',\n       },\n       },\n       style: {\n           theme: 'default' // | 'dark' | 'bootstrap' | 'flat'\n       },\n       callbacks: {\n           onReady: () => {\n           // callback chamado quando o Brick estiver pronto\n           },\n           onSubmit: ({paymentType, formData}) => {\n           // callback chamado o usuário clicar no botão de submissão dos dados\n           // ejemplo de envío de los datos recolectados por el Brick a seu servidor\n           return new Promise((resolve, reject) => {\n               fetch(\"/processar-pago\", {\n                   method: \"POST\",\n                   headers: {\n                       \"Content-Type\": \"application/json\",\n                   },\n                   body: JSON.stringify(formData)\n               })\n               .then((response) => {\n                   // receber o resultado do pagamento\n                   resolve();\n               })\n               .catch((error) => {\n                   // lidar com a resposta de erro ao tentar criar o pagamento\n                   reject();\n               })\n               });\n           },\n           onError: (error) => {\n           // callback chamado para todos os casos de erro do Brick\n           },\n       },\n   };\n   window.cardPaymentBrickController = await bricksBuilder.create('payment', 'paymentBrick_container', settings);\n};\nrenderPaymentBrick(bricksBuilder);\n```\n\n----------------------------------------\n\nTITLE: Processing Payment Response in Mercado Pago Checkout Bricks\nDESCRIPTION: This JSON snippet demonstrates the structure of a successful payment response in Mercado Pago Checkout Bricks. It includes key information such as payment status, approval date, payment method, and payer details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-cards.pt.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status\": \"approved\",\n    \"status_detail\": \"accredited\",\n    \"id\": 3055677,\n    \"date_approved\": \"2019-02-23T00:01:10.000-04:00\",\n    \"payer\": {\n        ...\n    },\n    \"payment_method_id\": \"visa\",\n    \"payment_type_id\": \"credit_card\",\n    \"refunds\": [],\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payments with Saved Cards Using Mercado Pago API\nDESCRIPTION: Code samples in multiple languages for creating a payment using a previously saved card. This uses the customer ID and the token generated from capturing the security code.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/receive-payments-with-saved-cards.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $customer_client = new CustomerClient();\n  $cards = $client->list(\"customer_id\");\n  \n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => 100.0,\n    \"token\" => $cards[0]-> token,\n    \"description\" => \"My product\",\n    \"installments\" => 1,\n    \"payment_method_id\" => \"visa\",\n    \"payer\" => [\n      \"type\" => \"customer\",\n      \"id\" => \"1234\"\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerClient = new Customer(client);\n\ncustomerClient.listCards({ customerId: '<CUSTOMER_ID>' })\n\t.then((result) => {\n\n  const payment = new Payment(client);\n\n  const body = {\n    transaction_amount: 100,\n    token: result[0].token,\n    description: 'My product',\n    installments: 1,\n    payment_method_id: 'visa',\n    payer: {\n      type: 'customer',\n      id: '123'\n  }\n};\n\n  payment.create({ body: body }).then((result) => console.log(result));\n});\n```\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest request = PaymentCreateRequest.builder()\n   .transactionAmount(new BigDecimal(\"100\"))\n   .installments(1)\n   .token(\"ff8080814c11e237014c1ff593b57b4d\")\n   .payer(PaymentPayerRequest.builder()\n       .type(\"customer\")\n       .id(\"247711297-jxOV430go9fx2e\")\n       .build())\n   .build();\n\nclient.create(request);\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\npayment_request = {\n  token: 'ff8080814c11e237014c1ff593b57b4d',\n  installments: 1,\n  transaction_amount: 100,\n  payer: {\n    type: 'customer',\n    id: '123456789-jxOV430go9fx2e'\n  }\n}\npayment_response = sdk.payment.create(payment_request)\npayment = payment_response[:response]\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = 100,\n    Token = \"ff8080814c11e237014c1ff593b57b4d\",\n    Installments = 1,\n    Payer = new PaymentPayerRequest\n    {\n        Type = \"customer\",\n        Email = \"test_payer_12345@testuser.com\",\n    },\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\n```\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\npayment_data = {\n    \"transaction_amount\": 100,\n    \"token\": 'ff8080814c11e237014c1ff593b57b4d',\n    \"installments\": 1,\n    \"payer\": {\n        \"type\": \"customer\",\n        \"id\": \"123456789-jxOV430go9fx2e\"\n    }\n}\n\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n```\n\nLANGUAGE: go\nCODE:\n```\naccessToken := \"{{ACCESS_TOKEN}}\"\n\n\ncfg, err := config.New(accessToken)\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nclient := payment.NewClient(cfg)\n\n\nrequest := payment.Request{\n   TransactionAmount: 100,\n   Token: \"ff8080814c11e237014c1ff593b57b4d\",\n   Description: \"My product\",\n   Installments: 1,\n   PaymentMethodID:  \"master\",\n   Payer: &payment.PayerRequest{\n      Email: \"test_user_12345@testuser.com\",\n      Identification: &payment.IdentificationRequest{\n         Type: \"CPF\",\n         Number: \"01234567890\",\n      },\n   },\n}\n\n\nresource, err := client.Create(context.Background(), request)\nif err != nil {\n   fmt.Println(err)\n}\n\n\nfmt.Println(resource)\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n  'https://api.mercadopago.com/v1/payments' \\\n  -d '{\n  transaction_amount: 100,\n  token: \"ff8080814c11e237014c1ff593b57b4d\",\n  installments: 1,\n  payer: {\n      type: \"customer\",\n    id: \"123456789-jxOV430go9fx2e\"\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Adding New Cards to a Customer in Python\nDESCRIPTION: Python implementation for adding a new payment card to an existing MercadoPago customer. This code initializes the MercadoPago SDK, fetches a customer, and then creates a new card with token and payment method data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport market\nsdk = Mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\ncustomer_response = sdk.customer().get(\"247711297-jxOV430go9fx2e\")\ncustomer = customer_response[\"response\"]\n\ncard_data = {\n\"token\": \"9b2d63e00d66a8c721607214cedaecda\",\n\"payment_method_id\": \"debit_card\"\n}\ncard_response = sdk.card().create(customer[\"id\"], card_data)\ncard = card_response[\"response\"]\n\nprint(card)\n```\n\n----------------------------------------\n\nTITLE: Creating Preference for Wallet Purchase in Python\nDESCRIPTION: This Python snippet shows creating a Mercado Pago preference, setting `purpose` to `wallet_purchase`. It uses the Mercado Pago Python SDK. The code creates a dictionary containing item details and the purpose, then creates the preference using the `sdk.preference().create()` method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mp-wallet.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npreference_data = {\n\"items\": [\n{\n\"title\": \"My product\",\n\"unit_price\": 100,\n\"quantity\": 1\n}\n],\n\"purpose\": \"wallet_purchase\"\n}\n\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Preference on Submit using Wallet Brick\nDESCRIPTION: This JavaScript code snippet demonstrates how to create a preference when the Wallet Brick is submitted. It defines an `onSubmit` callback function that sends a POST request to `/create_preference` with the form data. It then handles the response, resolving the promise with the preference ID or rejecting it if an error occurs.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/create-preference-submit.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nconst renderWalletBrick = async (bricksBuilder) => {\n  const settings = {\n    callbacks: {\n      onSubmit: (formData) => {\n        // callback chamado ao clicar no Wallet Brick\n        // isso é possível porque o Brick é um botão\n        // neste momento de submit, você deve criar a preferência\n        const yourRequestBodyHere = {\n          items: [\n            {\n              id: '202809963',\n              title: 'Dummy title',\n              description: 'Dummy description',\n              quantity: 1,\n              unit_price: 10,\n            },\n          ],\n          purpose: 'wallet_purchase',\n        };\n        return new Promise((resolve, reject) => {\n          fetch('/create_preference', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(formData),\n          })\n            .then((response) => response.json())\n            .then((response) => {\n              // resolver a promise com o ID da preferência\n              resolve(response.preference_id);\n            })\n            .catch((error) => {\n              // lidar com a resposta de erro ao tentar criar a preferência\n              reject();\n            });\n        });\n      },\n    },\n  };\n  window.walletBrickController = await bricksBuilder.create(\n    'wallet',\n    'walletBrick_container',\n    settings,\n  );\n\n};\nrenderWalletBrick(bricksBuilder);\n```\n\n----------------------------------------\n\nTITLE: Processing IVA in Online Payments via Mercado Pago API\nDESCRIPTION: This code demonstrates how to send a payment request that includes IVA tax information for online transactions in Colombia. It shows how to structure the request with transaction_amount, net_amount, and taxes fields to properly handle the 19% general IVA rate.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/iva-colombia.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n        -H 'accept: application/json' \\\n        -H 'content-type: application/json' \\\n        -H 'Authorization: Bearer ACCESS_TOKEN' \\\n        'https://api.mercadopago.com/v1/payments' \\\n        -d '{\n                \"transaction_amount\": 10000,\n                \"net_amount\": 9500,\n                \"taxes\":[{\n                        \"value\": 500,\n                        \"type\": \"IVA\"\n                }],\n                \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n                \"description\": \"Title of what you are paying for\",\n                \"installments\": 1,\n                \"payment_method_id\": \"visa\",\n                \"payer\": {\n                        \"email\": \"test_user_19653727@testuser.com\"\n                }\n            }'\n```\n\n----------------------------------------\n\nTITLE: Customer and Card API Response Format\nDESCRIPTION: Example JSON response from the Mercado Pago API after successfully creating a customer and associating a card. The response includes customer details like ID and email, as well as card information including expiration date and masked card numbers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/create-customer-and-card.es.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"123456789-jxOV430go9fx2e\",\n    \"email\": \"test_payer_12345@testuser.com\",\n    ...\n    \"default_card\": \"1490022319978\",\n    \"default_address\": null,\n    \"cards\": [{\n        \"id\": \"1490022319978\",\n        \"expiration_month\": 12,\n        \"expiration_year\": 2020,\n        \"first_six_digits\": \"415231\",\n        \"last_four_digits\": \"0001\",\n        ...\n    }],\n    \"addresses\": [],\n    \"live_mode\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Access Token for C# Integration\nDESCRIPTION: This C# snippet configures the Mercado Pago client with the access token and asynchronously lists all payment methods available through the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.PaymentMethod;\nusing MercadoPago.Config;\nusing MercadoPago.Resource;\nusing MercadoPago.Resource.PaymentMethod;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar client = new PaymentMethodClient();\nResourcesList<PaymentMethod> paymentMethods = await client.ListAsync();\n```\n\n----------------------------------------\n\nTITLE: Cancel Open Payment Intent\nDESCRIPTION: This cURL command demonstrates how to cancel a payment intent with the status `open` using the Mercado Pago Point Integration API. It uses a DELETE request to the specified endpoint, including the device ID and payment intent ID, and requires an access token for authentication. A successful cancellation will return a JSON response containing the ID of the cancelled payment intent.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/payment-processing.en.md#2025-04-18_snippet_13\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request DELETE 'https://api.mercadopago.com/point/integration-api/devices/{deviceid}/payment-intents/{paymentintentid}' \\\n--h 'Authorization: Bearer YOUR_ACCESS_TOKEN' \n```\n\n----------------------------------------\n\nTITLE: Setting Integration Identifiers in MercadoPago PHP SDK\nDESCRIPTION: Demonstrates how to set platform, integrator, and corporation IDs using the MercadoPago PHP SDK. Replace the placeholder values with actual identification codes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integration-identification.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nMercadoPago\\SDK::setPlatformId(\"PLATFORM_ID\");\nMercadoPago\\SDK::setIntegratorId(\"INTEGRATOR_ID\");\nMercadoPago\\SDK::setCorporationId(\"CORPORATION_ID\");\n```\n\n----------------------------------------\n\nTITLE: Custom Payment Button Implementation\nDESCRIPTION: Example of implementing a custom payment button with form data handling and payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/hide-element.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\" onclick=\"createPayment();\">Custom Payment Button</button>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createPayment(){\n    window.paymentBrickController.getFormData()\n        .then(({ formData }) => {\n            console.log('formData received, creating payment...');\n            fetch(\"/process_payment\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify(formData),\n            })\n        })\n        .catch((error) => {\n            // tratamento de erros ao chamar getFormData()\n        });\n};\n```\n\n----------------------------------------\n\nTITLE: Creando pago con boleto bancario en Python\nDESCRIPTION: Implementación en Python para crear un pago con boleto bancario usando el SDK de Mercado Pago. Incluye datos del pagador con identificación CPF y dirección completa.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mlb.es.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n    \"transaction_amount\": 100,\n    \"description\": \"Título do produto\",\n    \"payment_method_id\": \"bolbradesco\",\n    \"payer\": {\n        \"email\": \"test@test.com\",\n        \"first_name\": \"Test\",\n        \"last_name\": \"User\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"191191191-00\"\n        },\n        \"address\": {\n            \"zip_code\": \"06233-200\",\n            \"street_name\": \"Av. das Nações Unidas\",\n            \"street_number\": \"3003\",\n            \"neighborhood\": \"Bonfim\",\n            \"city\": \"Osasco\",\n            \"federal_unit\": \"SP\"\n        }\n    }\n}\n\npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Bancário Payment with Discounts, Fines, and Interest in Ruby\nDESCRIPTION: This Ruby code snippet shows how to create a boleto bancário payment with discounts, fines, and interest using the Mercado Pago SDK. It configures the payment details, payer information, and payment rules for discounts, fines, and interest.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative 'mercadopago'\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\npayment_data = {\n  description: 'Titulo do produto',\n  date_of_expiration: '2022-12-24T15:37:48.000-03:00',\n  payment_method_id: 'bolbradesco',\n  transaction_amount: 100,\n  payer: {\n    first_name: 'Test',\n    last_name: 'User',\n    email: 'test_user_123456@testuser.com',\n    identification: {\n      type: 'CPF',\n      number: '19119119100'\n    }\n  },\n  payment_method: {\n    data: {\n      rules: {\n        discounts: [\n          {\n            value: 5,\n            type: 'fixed',\n            limit_date: '2022-12-10'\n          }\n        ],\n        fine: {\n          value: 2,\n          type: 'percentage'\n        },\n        interest: {\n          value: 0.03,\n          type: 'percentage'\n        }\n      }\n    }\n  }\n};\nresult = sdk.payment.create(payment_data)\nputs result[:response][\"transaction_details\"][\"external_resource_url\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Efecty Payments with Mercado Pago SDKs\nDESCRIPTION: Code samples demonstrating how to create a payment with Efecty in Colombia using different Mercado Pago SDKs. Each implementation includes required parameters like transaction amount, payment method ID, and payer email, along with idempotency key for safe request handling.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['<TRANSACTION_AMOUNT>'],\n    \"payment_method_id\" => $_POST['<PAYMENT_METHOD_ID>'],\n    \"payer\" => [\n      \"email\" => $_POST['<EMAIL>']\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, Payments } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<YOUR_ACCESS_TOKEN>' });\nconst payments = new Payments(client);\n\npayments.create({\nbody: {\n\t\ttransaction_amount: '<TRANSACTION_AMOUNT>',\n\t\tpayment_method_id: '<PAYMENT_METHOD_ID>',\n\t\tpayer: {\n\t\t\temail: '<EMAIL>'\n\t\t\t}\n},\n\trequestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n\t.then((result) => console.log(result))\n\t.catch((error) => console.log(error));\n```\n\nLANGUAGE: java\nCODE:\n```\nPaymentCreateRequest paymentCreateRequest = PaymentCreateRequest.builder()\n          .transactionAmount(new BigDecimal(\"<TRANSACTION_AMOUNT>\"))\n          .paymentMethodId(\"<PAYMENT_METHOD_ID>\")\n          .payer(\n              PaymentPayerRequest.builder()\n                  .email(\"<EMAIL>\").build()\n          ).build();\n\nMap<String, String> customHeaders = new HashMap<>();\ncustomHeaders.put(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n\nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders).build();\n\nPaymentClient client = new PaymentClient();\nclient.create(paymentCreateRequest, requestOptions);\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\npayment_request = {\ntransaction_amount: 5000,\ndescription: 'Product title',\npayment_method_id: 'effect',\npayer: {\nemail: 'test_user_19549678@testuser.com',\n}\n}\n\npayment_response = sdk.payment.create(payment_request)\npayment = payment_response[:response]\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar request = new PaymentCreateRequest\n{\nTransactionAmount = 5000,\nDescription = \"Product Title\",\nPaymentMethodId = \"effect\",\nPayer = new PaymentPayerRequest\n{\nEmail = \"test_user_19549678@testuser.com\",\n},\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\n```\n\nLANGUAGE: python\nCODE:\n```\nimport market\nsdk = Mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\npayment_data = {\n\"transaction_amount\": 5000,\n\"description\": \"Product title\",\n\"payment_method_id\": \"effect\",\n\"payer\": {\n\"email\": \"test_user_19549678@testuser.com\"\n}\n}\n\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n```\n\nLANGUAGE: go\nCODE:\n```\naccessToken := \"{{ACCESS_TOKEN}}\"\n\n\ncfg, err := config.New(accessToken)\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nclient := paymentmethod.NewClient(cfg)\n\n\nresources, err := client.List(context.Background())\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nfor _, v := range resources {\n   fmt.Println(v)\n}\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n--header 'X-Idempotency-Key: <SOME_UNIQUE_VALUE>' \\\n--data-raw '{\n  \"transaction_amount\": 10000,\n  \"description\": \"Titulo del producto\",\n  \"payment_method_id\": \"efecty\",\n  \"payer\": { \"email\": \"test_user_12345@testuser.com\" }\n}'\n```\n\n----------------------------------------\n\nTITLE: Processing PSE Payment with Ruby SDK\nDESCRIPTION: Ruby implementation for PSE payment processing using Mercado Pago's SDK. This example demonstrates how to configure payment details including transaction amount, payment method, payer information, and required transaction fields for PSE payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pse.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\nrequest_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\nbody = {\n  transaction_amount: 5000,\n  description: \"Product description\",\n  payment_method_id: \"pse\",\n  callback_url: \"https://your-site.com\",\n  notification_url: \"https://your-site.com\",\n  additional_info: {\n    ip_address: \"127.0.0.1\"\n  },\n  transaction_details: {\n    financial_institution: params[:financialInstitution]\n  },\n  payer: {\n    email: params[:email],\n    entity_type: \"individual\",\n    first_name: params[:firstName],\n    last_name: params[:lastName],\n    identification: {\n      type: params[:identificationType],\n      number: params[:identificationNumber]\n    }\n    address: {\n      zip_code: params[:zipCode],\n      street_name: params[:streetName],\n      street_number: params[:streetNumber],\n      neighborhood: params[:neighborhood],\n\n\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Bancário Payment with Java\nDESCRIPTION: This Java code snippet demonstrates how to create a boleto bancário payment using Mercado Pago's SDK. It builds a PaymentCreateRequest object with transaction details, payer information, and address data for processing the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nPaymentCreateRequest paymentCreateRequest = PaymentCreateRequest.builder()\n    .transactionAmount(new BigDecimal(\"<TRANSACTION_AMOUNT>\"))\n    .paymentMethodId(\"bolbradesco\")\n    .payer(PaymentPayerRequest.builder()\n        .email(\"<EMAIL>\")\n        .firstName(\"<NAME>\")\n        .lastName(\"<LASTNAME>\")\n        .identification(IdentificationRequest.builder()\n            .type(\"CPF\")\n            .number(\"<NUMERO>\")\n            .build())\n        .address(PaymentPayerAddressRequest.builder()\n            .streetName(\"<RUA XXX>\")\n            .streetNumber(\"123\")\n            .zipCode(\"<CEP>\")\n            .federalUnit(\"<SIGLA DO ESTADO>\")\n            .city(\"<CIDADE>\")\n            .neighborhood(\"<BAIRRO>\")\n            .build())\n        .build())\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Warning Message in Markdown\nDESCRIPTION: A warning message emphasizing the importance of installing the Mercado Pago SDK before creating a preference. It includes a link to the SDK installation guide.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/create-preference.es.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> WARNING\n>\n> Importante\n>\n> Recuerda que debes instalar el SDK de Mercado Pago antes de crear una preferencia, así que asegúrate de que la instalación de los SDKs de Mercado Pago haya sido completada. Accede a [SDKs](https://www.mercadopago[FAKER][URL][DOMAIN]/developers/es/guides/sdks) para obtener instrucciones.\n```\n\n----------------------------------------\n\nTITLE: Processing Card Payments with C# using MercadoPago SDK\nDESCRIPTION: This C# code demonstrates how to create a payment using MercadoPago's SDK. It sets up the access token, adds an idempotency key as a custom header, and creates a payment request with transaction amount, token, description, installments, payment method ID, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-cards.en.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n\nvar paymentRequest = new PaymentCreateRequest\n{\n    TransactionAmount = decimal.Parse(Request[\"transactionAmount\"]),\n    Token = Request[\"token\"],\n    Description = Request[\"description\"],\n    Installments = int.Parse(Request[\"installments\"]),\n    PaymentMethodId = Request[\"paymentMethodId\"],\n    Payer = new PaymentPayerRequest\n    {\n        Email = Request[\"cardholderEmail\"],\n        Identification = new IdentificationRequest\n        {\n            Type = Request[\"identificationType\"],\n            Number = Request[\"identificationNumber\"],\n        },\n        FirstName = Request[\"cardholderName\"]\n    },\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest, requestOptions);\n\nConsole.WriteLine(payment.Status);\n```\n\n----------------------------------------\n\nTITLE: Configuring MercadoPago Credentials with JavaScript Modules\nDESCRIPTION: JavaScript code for loading and initializing the MercadoPago SDK with public key credentials using ES modules. This is for projects using modern JavaScript module systems.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loadMercadoPago } from \"@mercadopago/sdk-js\";\n\nawait loadMercadoPago();\nconst mp = new window.MercadoPago(\"YOUR_PUBLIC_KEY\");\n\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago API in Java (MLA, MLB, MPE, MCO, MLU, MLC)\nDESCRIPTION: This Java snippet (specific to MLA, MLB, MPE, MCO, MLU, MLC) shows how to create a payment using the Mercado Pago API. It sets custom headers including the X-Idempotency-Key, configures the access token, builds a PaymentCreateRequest with transaction details, including the payer's identification type and number, and then uses the PaymentClient to create the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-cards.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest paymentCreateRequest =\n   PaymentCreateRequest.builder()\n       .transactionAmount(request.getTransactionAmount())\n       .token(request.getToken())\n       .description(request.getDescription())\n       .installments(request.getInstallments())\n       .paymentMethodId(request.getPaymentMethodId())\n       .payer(\n           PaymentPayerRequest.builder()\n               .email(request.getPayer().getEmail())\n               .firstName(request.getPayer().getFirstName())\n               .identification(\n                   IdentificationRequest.builder()\n                       .type(request.getPayer().getIdentification().getType())\n                       .number(request.getPayer().getIdentification().getNumber())\n                       .build())\n               .build())\n       .build();\n\nclient.create(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Scheduling Automatic Reports with MercadoPago API (curl)\nDESCRIPTION: This curl command demonstrates how to schedule automatic reports by creating an event. It specifies the frequency, description, structure ID, and notifier ID for the report generation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.en.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/events' \\\n--header 'Authorization: Bearer {{TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"type\": \"frequency\",\n    \"data\": {\n        \"period\": \"daily\",\n        \"value\": 0,\n        \"hour\": 0\n    },\n    \"description\": \"event test\",\n    \"structure_id\": {{structure_id}},\n    \"notifiers\": [      \n       {{notifier_id}}\n    ],\n    \"status\": \"ACTIVE\",\n    \"version\": 0\n}'\n```\n\n----------------------------------------\n\nTITLE: Searching Orders with MercadoPago SDK - Node.js\nDESCRIPTION: This Node.js snippet illustrates how to search for orders using specific filters or date ranges with the MercadoPago SDK. Necessary dependencies include 'MercadoPagoConfig' and 'MerchantOrder', and an access token is needed. The key parameter is 'application_id' used to filter the search. The function returns searched order details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/orders.en.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: '' });\n\nconst merchantOrder = new MerchantOrder(client);\n\nmerchantOrder.search({\n options: { application_id: '<APPLICATION_ID>' } }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creating Card Payment with Mercado Pago cURL\nDESCRIPTION: Demonstrates how to create a card payment using a cURL request to the Mercado Pago API. Includes setting the necessary headers, authorization token, and sending the payment request with transaction and payer details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-cardform.en.md#2025-04-18_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H 'accept: application/json' \\\n-H 'content-type: application/json' \\\n-H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n-H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n'https://api.mercadopago.com/v1/payments' \\\n-d '{\n\"transaction_amount\": 100,\n\"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n\"description\": \"Blue shirt\",\n\"installations\": 1,\n\"payment_method_id\": \"visa\",\n\"issuer_id\": 310,\n\"payer\": {\n\"email\": \"PAYER_EMAIL\"\n}\n}'\n```\n\n----------------------------------------\n\nTITLE: Searching Payment Preferences with MercadoPago Node.js SDK\nDESCRIPTION: This code shows how to search for preferences using specific filters with MercadoPago's Node.js SDK. It includes options for filtering by sponsor ID, external reference, site ID, and marketplace type.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/preferences.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token', options: { timeout: 5000 } });\n\nconst preference = new Preference(client);\n\npreference.search({ options: {\n  sponsor_id: '0',\n  external_reference: '',\n  site_id: 'MLA',\n  marketplace: 'NONE'\n},\n}).then((result) => console.log(result))\n  .catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Installing MercadoPago SDK via npm\nDESCRIPTION: Installs the MercadoPago SDK using npm for Node.js projects.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-advanced.en.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n```\n\n----------------------------------------\n\nTITLE: Initializing PSE Checkout Form in JavaScript\nDESCRIPTION: Self-executing function that initializes the PSE checkout form by setting up document type elements and updating select options. It handles errors gracefully if identification types cannot be retrieved.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pse-avanza.en.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n(function initCheckout() {\n    try {\n        const docTypeElement = document.getElementById('form-checkout__identificationType');\n        setPse();\n        updateSelectOptions('natural')\n    }catch(e) {\n        return console.error('Error getting identificationTypes: ', e);\n    }\n })();\n```\n\n----------------------------------------\n\nTITLE: Setting Back URLs and Auto Return - Ruby\nDESCRIPTION: This Ruby snippet illustrates the configuration of `back_urls` and `auto_return` within a payment preference data structure. It sets the URLs for success, failure, and pending scenarios, along with enabling automatic return upon approval.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\n# ...\npreference_data = {\n  # ...\n  back_urls = {\n    success: 'https://www.tu-sitio/success',\n    failure: 'https://www.tu-sitio/failure',\n    pending: 'https://www.tu-sitio/pendings'\n  },\n  auto_return: 'approved'\n  # ...\n}\n# ...\n```\n\n----------------------------------------\n\nTITLE: Processing First Subscription Payment - Python\nDESCRIPTION: Implements first-time subscription payment processing using MercadoPago Python SDK. Handles payment data construction with subscription details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/subscription-messaging.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n   \"transaction_amount\": float(request.POST.get(\"transaction_amount\")),\n   \"token\": request.POST.get(\"token\"),\n   \"description\": request.POST.get(\"description\"),\n   \"payment_method_id\": request.POST.get(\"payment_method_id\"),\n   \"payer\": {\n       \"id\": request.POST.get(\"id\"),\n       \"type\": request.POST.get(\"type\")\n   },\n    \"point_of_interaction\": {\n         \"type\": request.POST.get(\"type\"),\n         \"transaction_data\": {\n              \"first_time_use\": bool(request.POST.get(\"first_time_use\")),\n              \"subscription_id\": request.POST.get(\"subscription_id\"),\n              \"subscription_sequence\": {\n                \"number\": int(request.POST.get(\"number\")),\n                \"total\": int(request.POST.get(\"total\"))\n              },\n              \"invoice_period\": {\n                \"period\": int(request.POST.get(\"period\")),\n                \"type\": request.POST.get(\"type\")\n              },\n              \"billing_date\": request.POST.get(\"billing_date\")\n         }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Customer with Java SDK\nDESCRIPTION: This snippet demonstrates how to create a new customer using the CustomerClient from the Mercado Pago SDK. It builds a CustomerRequest with various parameters such as email, name, phone, and address, and then invokes the create method on the client.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/customers.es.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nCustomerClient client = new CustomerClient();\n\nCustomerRequest customerRequest =\n   CustomerRequest.builder()\n       .email(\"jhon@doe.com\")\n       .firstName(\"Jhon\")\n       .lastName(\"Doe\")\n       .phone(PhoneRequest.builder().areaCode(\"55\").number(\"991234567\").build())\n       .identification(\n           IdentificationRequest.builder().type(\"CPF\").number(\"12345678900\").build())\n       .defaultAddress(\"Home\")\n       .address(\n           CustomerAddressRequest.builder()\n               .id(\"123123\")\n               .zipCode(\"01234567\")\n               .streetName(\"Rua Exemplo\")\n               .streetNumber(123)\n               .build())\n       .dateRegistred(OffsetDateTime.of(2000, 1, 18, 0, 0, 0, 0, ZoneOffset.UTC))\n       .description(\"Description del user\")\n       .defaultCard(\"None\")\n       .build();\n\nclient.create(customerRequest);\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Multiple Items\nDESCRIPTION: This code snippet demonstrates how to create a MercadoPago preference object and add multiple items to it. The items are added as a list, defining their title, quantity, and unit price. This is essential for handling shopping carts or orders with multiple products.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  # Criar um objeto preferência\n  $preference = new MercadoPago\\Preference();\n  # Cria itens na preferência\n  $item1 = new MercadoPago\\Item\n  $item1->title = \"Item de Teste 1\";\n  $item1->quantity = 2;\n  $item1->unit_price = 11.96;\n\n  $item2= new MercadoPago\\Item\n  $item2->title = \"Item de Teste 2\";\n  $item2->quantity = 1;\n  $item2->unit_price = 11.96;\n\n  $preference->items = array($item1,$item2);\n  # Salvar e postar a preferência\n  $preference->save();\n?>\n\n```\n\n----------------------------------------\n\nTITLE: Including Sponsor ID in Mercado Pago Payment Requests using cURL\nDESCRIPTION: This snippet demonstrates how to include the sponsor_id field in payment requests. The sponsor_id should contain the Mercado Pago account ID of the platform that the merchant belongs to, and is required for all transactions by merchants on partner platforms.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/what-is-sponsor-id.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\n\"sponsor_id\": \"(MP Account ID of the platform)\"\n```\n\n----------------------------------------\n\nTITLE: Obtaining Access Token with Authorization Code in Node.js\nDESCRIPTION: This Node.js code demonstrates how to create an OAuth request to obtain an Access Token using the Authorization code flow. It uses the MercadoPagoConfig and OAuth classes to send the client secret, client ID, authorization code, and redirect URI to the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/creation.en.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token', options: { timeout: 5000 } }); \n\nconst oauth = new OAuth(client);\n\noauth.create({\n\t'client_secret': 'your-client-secret',\n\t'client_id': 'your-client-id',\n\t'code': 'return-of-getAuthorizationURL-function',\n\t'redirect_uri': 'redirect-uri'\n}).then((result) => console.log(result))\n\t.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Get Payment Methods with Mercado Pago SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of available payment methods using the Mercado Pago Java SDK. It instantiates a `PaymentMethodClient` and calls the `list()` method to fetch the payment methods. No parameters are required for this call.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/payment-methods.en.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nPaymentMethodClient client = new PaymentMethodClient();\nclient.list();\n\n```\n\n----------------------------------------\n\nTITLE: Complete Webhook Signature Validation in Python\nDESCRIPTION: Full implementation of webhook signature validation in Python, extracting signature components from headers and comparing the computed signature with the received one.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.es.md#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport hashlib\nimport hmac\nimport urllib.parse\n\n# Obtain the x-signature value from the header\nxSignature = request.headers.get(\"x-signature\")\nxRequestId = request.headers.get(\"x-request-id\")\n\n# Obtain Query params related to the request URL\nqueryParams = urllib.parse.parse_qs(request.url.query)\n\n# Extract the \"data.id\" from the query params\ndataID = queryParams.get(\"data.id\", [\"\"])[0]\n\n# Separating the x-signature into parts\nparts = xSignature.split(\",\")\n\n# Initializing variables to store ts and hash\nts = None\nhash = None\n\n# Iterate over the values to obtain ts and v1\nfor part in parts:\n    # Split each part into key and value\n    keyValue = part.split(\"=\", 1)\n    if len(keyValue) == 2:\n        key = keyValue[0].strip()\n        value = keyValue[1].strip()\n        if key == \"ts\":\n            ts = value\n        elif key == \"v1\":\n            hash = value\n\n# Obtain the secret key for the user/application from Mercadopago developers site\nsecret = \"your_secret_key_here\"\n\n# Generate the manifest string\nmanifest = f\"id:{dataID};request-id:{xRequestId};ts:{ts};\"\n\n# Create an HMAC signature defining the hash type and the key as a byte array\nhmac_obj = hmac.new(secret.encode(), msg=manifest.encode(), digestmod=hashlib.sha256)\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference with Mercado Pago SDK in Python\nDESCRIPTION: This snippet demonstrates how to create a payment preference using the Mercado Pago SDK in Python. It initializes the SDK with an access token and defines a preference data structure containing item details. The primary output is the response that contains the created preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/preferences.es.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# SDK de Mercado Pago\nimport mercadopago\n# Agrega credenciales\nsdk = mercadopago.SDK(\"PROD_ACCESS_TOKEN\")\n# Crea un ítem en la preferencia\npreference_data = {\n    \"items\": [\n        {\n            \"title\": \"Mi producto\",\n            \"quantity\": 1,\n            \"unit_price\": 75.76,\n        }\n    ]\n}\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference in Java\nDESCRIPTION: Demonstrates creating a payment preference with item details, currency, and tracking information using the Mercado Pago SDK. Initializes a preference with a single item and Google Ad tracking.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/preferences.es.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nPreferenceClient client = new PreferenceClient();\n\nList<PreferenceItemRequest> items = new ArrayList<>();\nPreferenceItemRequest item =\n   PreferenceItemRequest.builder()\n       .title(\"Dummy Title\")\n       .description(\"Dummy description\")\n       .pictureUrl(\"http://www.myapp.com/myimage.jpg\")\n       .quantity(1)\n       .currencyId(\"US\")\n       .unitPrice(new BigDecimal(\"10\"))\n       .build();\nitems.add(item);\n\nList<PreferenceTrackRequest> tracks = new ArrayList<>();\nPreferenceTrackRequest googleTrack = PreferenceTrackRequest.builder().type(\"google_ad\").build();\n\ntracks.add(googleTrack);\n\nPreferenceRequest request = PreferenceRequest.builder().items(items).tracks(tracks).build();\n\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Inicializando a biblioteca Mercado Pago para Checkout Bricks em JavaScript\nDESCRIPTION: Inicializa a biblioteca Mercado Pago para utilizar Checkout Bricks em JavaScript. Requer a substituição de 'YOUR_PUBLIC_KEY' pela chave pública real do Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/common-initialization.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mp = new MercadoPago('YOUR_PUBLIC_KEY');\nconst bricksBuilder = mp.bricks();\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Item Preference in Node.js\nDESCRIPTION: This code demonstrates how to create a preference with multiple items using Node.js. It shows setting up the preference object and creating it using the Mercado Pago SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_14\n\nLANGUAGE: node\nCODE:\n```\n// Set your preference\nvar preference = {\n  items: [\n      { title: 'Mi producto',\n      quantity: 1,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 75.56 },\n\t{ title: 'Mi producto 2',\n      quantity: 2,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 96.56 }\n    ]\n};\n// Create the preference\nmercadopago.preferences.create(preference)\n.then(function(preference){\n  // This value replaces \"$$init_point$$\" string in your HTML\n  global.init_point = preference.body.init_point;\n}).catch(function(error){\n  console.log(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with 3DS in Node.js\nDESCRIPTION: This Node.js code snippet demonstrates how to create a payment with 3DS enabled using the Mercado Pago SDK. It initializes the MercadoPagoConfig, creates a Payment instance, and sends a payment creation request with the `three_d_secure_mode` set to `optional`. It requires the Mercado Pago Node.js SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-bigmerchants.en.md#2025-04-18_snippet_3\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, Payment } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ENV_ACCESS_TOKEN>' });\nconst payment = new Payment(client);\n\nconst body = {\n  transaction_amount: <TRANSACTION_AMOUNT>,\n  token: '<CARD_TOKEN>',\n  description:  '<DESCRIPTION>',\n  installments: <INSTALLMENTS_NUMBER>,\n  payment_method_id: '<PAYMENT_METHOD_ID>',\n  issuer_id: '<ISSUER_ID>',\n  payer: {\n    email: '<BUYER_EMAIL>',\n  },\n  three_d_secure_mode: 'optional'\n}\npayment.create({ body: body, requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' } }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Executing Payment Request with MercadoPago API in CURL\nDESCRIPTION: This code snippet demonstrates how to perform a payment operation with the MercadoPago API using a CURL command. It requires headers for 'Content-Type', 'X-Idempotency-Key', 'Authorization', and optionally 'X-Meli-Session-Id'. The JSON payload should include transaction details, payment method, payer information, and additional metadata. The operation returns a payment response from the API, which requires valid authentication tokens and network connectivity.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/applications-online-platforms.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}} \\\n--data-raw '{\n    \"transaction_amount\": 150.00,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"debvisa\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Pedido01\",\n    \"description\": \"PEDIDO NOVO\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"payer\": {\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"12345678909\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"title\": \"Serviço\",\n                \"category_id\": \"games\",\n                \"quantity\": 1,\n                \"unit_price\": 150\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_prime_user\": true,\n            \"is_first_purchase_online\": true,\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"206233-2002\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"230032\"\n            },\n            \"authentication_type\": \"Facebook\",\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Adding Device ID Header to Payment Request\nDESCRIPTION: Shows how to include the Device ID in the payment request by adding it to the X-meli-session-id HTTP header. This header is required when creating a payment to improve security validation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.en.md#2025-04-18_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nX-meli-session-id: device_id\n```\n\n----------------------------------------\n\nTITLE: Creating Card Token with Mercado Pago SDK JS\nDESCRIPTION: Frontend JavaScript function to generate a card token securely by capturing card details and preventing sensitive information transmission\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/integration.en.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst formElement = document.getElementById('form-checkout');\n    formElement.addEventListener('submit', createCardToken);\n\n    async function createCardToken(event) {\n      try {\n        const tokenElement = document.getElementById('token');\n        if (!tokenElement.value) {\n          event.preventDefault();\n          const token = await mp.fields.createCardToken({\n            cardholderName: document.getElementById('form-checkout__cardholderName').value,\n            identificationType: document.getElementById('form-checkout__identificationType').value,\n            identificationNumber: document.getElementById('form-checkout__identificationNumber').value,\n          });\n          tokenElement.value = token.id;\n          formElement.requestSubmit();\n        }\n      } catch (e) {\n        console.error('error creating card token: ', e)\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating PSE Payment with Mercado Pago in PHP\nDESCRIPTION: PHP implementation for creating a PSE payment using Mercado Pago SDK. The code sets up the necessary client, creates a payment request with transaction details, payer information, and financial institution data, then submits it to the API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pse-avanza.en.md#2025-04-18_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse MercadoPago\\Client\\Common\\RequestOptions;\nuse MercadoPago\\Client\\Payment\\PaymentClient;\nuse MercadoPago\\MercadoPagoConfig;\n\nMercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n$client = new PaymentClient();\n$request_options = new RequestOptions();\n$request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n$client = new PaymentClient();\n$createRequest = [\n  \"transaction_amount\" => 5000,\n  \"description\" => \"Product description\",\n  \"payment_method_id\" => \"pse\",\n  \"callback_url\" => \"http://www.your-site.com\",\n  \"notification_url\" => \"http://www.your-site.com\",\n  \"additional_info\" => [\n    \"ip_address\" => \"127.0.0.1\"\n  ],\n  \"transaction_details\" => [\n    \"financial_institution\" => $_POST['financialInstitution']\n  ],\n  \"payer\" => [\n    \"email\" => $_POST['email'],\n    \"entity_type\" => \"individual\",\n    \"first_name\" => $_POST['firstName'],\n    \"last_name\" => $_POST['lastName'],\n    \"identification\" => [\n        \"type\" => $_POST['identificationType'],\n        \"number\" => $_POST['identificationNumber']\n    ],\n    \"address\" => [\n        \"zip_code\" => $_POST['zipCode'],\n        \"street_name\" => $_POST['streetName'],\n        \"street_number\" => $_POST['streetNumber'],\n        \"neighborhood\" => $_POST['neighborhood'],\n        \"city\" => $_POST['city'],\n        \"federal_unit\" => $_POST['federalUnit']\n    ],\n    \"phone\" => [\n        \"area_code\" => $_POST['phoneAreaCode'],\n        \"number\" => $_POST['phoneNumber']\n    ],\n  ],\n];\n\n$payment = $client->create($createRequest, $request_options);\nprint_r($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with 3DS (Optional) using Java\nDESCRIPTION: This Java code snippet shows how to create a payment with the `three_d_secure_mode` set to `optional` using the Mercado Pago API. It utilizes the PaymentClient and PaymentCreateRequest classes to build and submit the payment request, including transaction details, payer information, and the 3DS mode. The MercadoPago Java SDK is required.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest paymentCreateRequest =\n   PaymentCreateRequest.builder()\n       .transactionAmount(request.getTransactionAmount())\n       .token(request.getToken())\n       .description(request.getDescription())\n       .installments(request.getInstallments())\n       .paymentMethodId(request.getPaymentMethodId())\n       .payer(\n           PaymentPayerRequest.builder()\n               .email(request.getPayer().getEmail())\n               .firstName(request.getPayer().getFirstName())\n               .identification(\n                   IdentificationRequest.builder()\n                       .type(request.getPayer().getIdentification().getType())\n                       .number(request.getPayer().getIdentification().getNumber())\n                       .build())\n               .build())\n       .threeDSecureMode(\"optional\")\n       .build();\n\nclient.create(paymentCreateRequest);\n\n```\n\n----------------------------------------\n\nTITLE: Searching Customers with MercadoPago SDK in DotNet\nDESCRIPTION: This snippet demonstrates how to search for existing customers by their email address using the MercadoPago SDK. It constructs a search request with the necessary filters and retrieves the results, which are then stored in a list. The key dependency is the MercadoPago SDK for executing the search functionality.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/customers.en.md#2025-04-18_snippet_1\n\nLANGUAGE: dotnet\nCODE:\n```\nvar searchRequest = new SearchRequest\n{\n    Filters = new Dictionary<string, object>\n    {\n        [\"email\"] = \"test_payer_12345@testuser.com\",\n    },\n};\nResultsResourcesPage<Customer> results = await customerClient.SearchAsync(searchRequest);\nIList<Customer> customers = results.Results;\n```\n\n----------------------------------------\n\nTITLE: Searching for Customer with Java SDK\nDESCRIPTION: This snippet shows how to search for customers using the Mercado Pago SDK's search functionality. It sets up a filters map and constructs an MPSearchRequest to fetch customers based on the specified criteria and then performs the search.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/customers.es.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nCustomerClient client = new CustomerClient();\n\nMap<String, Object> filters = new HashMap<>();\nfilters.put(\"email\", \"test_payer_12345@testuser.com\");\n\nMPSearchRequest searchRequest =\n   MPSearchRequest.builder().offset(0).limit(0).filters(filters).build();\n\nclient.search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Transaction with Platform ID in Mercado Pago API\nDESCRIPTION: This cURL request demonstrates how to create a payment transaction through Mercado Pago's API including the platform ID in the header. The request includes complete payment details such as transaction amount, payment method, payer information, and additional data like shipping details and item information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/pi-transactions-via-checkout-transparente.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'x-platform-id: {{PLATFORM_ID proporcionado por el equipo de Partners}}' \\\n--header 'Authorization: Bearer {{ACCESS_TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"transaction_amount\": 100,\n    \"installments\": 1,\n    \"statement_descriptor\": \"Tienda del vendedor\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": {{ID de su cuenta Mercado Pago referente a su plataforma}},\n    \"payment_method_id\": \"{{payment_method_id}}\",\n    \"token\": {{card_token_id}},\n    \"external_reference\": \"Identificador de la plataforma\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"description\": \"Descripción del producto del vendedor\",\n    \"payer\": {\n        \"first_name\": \"Nombre. Ejemplo: John\",\n        \"last_name\": \"Apellido. Ejemplo: Jones\",\n        \"email\": \"test_user_1677272335@testuser.com\",\n        \"identification\": {\n            \"type\": \"Tipo de documento\",\n            \"number\": \"Número del documento. Ejemplo: 19119119100\"\n        },\n        \"address\": {\n            \"zip_code\": \"Código postal\",\n            \"street_name\": \"Nombre de la calle. Ejemplo: Av. das Naciones\",\n            \"street_number\": \"Número. Ejemplo: 3003\",\n            \"neighborhood\": \"Barrio. Ejemplo: Bonfim\",\n            \"city\": \"Ciudad. Ejemplo: Rio\",\n            \"federal_unit\": \"Estado. Ejemplo: RJ\"\n        }\n    },\n    \"additional_info\": {\n        \"referral_url\": \"URL de referencia. Ejemplo: www.sellertest123.com\",\n        \"drop_shipping\": true,\n        \"delivery_promise\": \"2022-11-20\",\n        \"contrated_plan\": \"premium\",\n        \"items\": [\n            {\n                \"id\": \"1941\",\n                \"title\": \"Produto do seller\",\n                \"description\": \"Descripción del producto del vendedor\",\n                \"picture_url\": null,\n                \"category_id\": \"Categoría. Ejemplo: electronics\",\n                \"quantity\": 1,\n                \"unit_price\": 100.00\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nombre. Ejemplo: John\",\n            \"last_name\": \"Apellido. Ejemplo: Jones\",\n            \"is_prime_user\": \"1\",\n            \"is_first_purchase_online\": \"1\",\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"Código de área. Ejemplo: 11\",\n                \"number\": \"Teléfono. Ejemplo: 987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"CEP. Ejemplo: 06233-200\",\n                \"street_name\": \"Nombre de la calle. Ejemplo: Av. das Nações Unidas\",\n                \"street_number\": \"Número. Ejemplo: 3003\"\n            },\n            \"registration_date\": \"2013-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"0\",\n            \"pick_up_on_seller\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"Código postal. Ejemplo: 95630000\",\n                \"street_name\": \"Nombre de la calle. Ejemplo: São Luiz\",\n                \"street_number\": \"Número. Ejemplo: 15\",\n                \"floor\": \"Piso (si es un apartamento). Ejemplo: Segundo\",\n                \"apartment\": \"Número del apartamento (si es un apartamento). Ejemplo: 93\"\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Updating Card Payment Amount using React\nDESCRIPTION: This snippet shows how to update the payment amount in Card Payment Brick using React. It imports necessary components from @mercadopago/sdk-react, uses the useCardPaymentBrick hook, and provides a button to trigger the update function.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/update-data.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { CardPayment, useCardPaymentBrick } from \"@mercadopago/sdk-react\";\nconst App = () => {\n  const { update } = useCardPaymentBrick();\n  return (\n    <>\n      <button type=\"button\" onClick={() => update({ amount: 95 })}>\n        Update amount\n      </button>\n      <CardPayment\n        initialization={{ amount: 100 }}\n        onSubmit={async (param) => {\n          console.log(param);\n        }}\n      />\n    </>\n  );\n};\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Python Webhook Signature Validation\nDESCRIPTION: Python implementation for validating Mercado Pago webhook signatures using HMAC-SHA256, including header parsing and signature comparison.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.en.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport hashlib\nimport hmac\nimport urllib.parse\n\n# Obtain the x-signature value from the header\nxSignature = request.headers.get(\"x-signature\")\nxRequestId = request.headers.get(\"x-request-id\")\n\n# Obtain Query params related to the request URL\nqueryParams = urllib.parse.parse_qs(request.url.query)\n\n# Extract the \"data.id\" from the query params\ndataID = queryParams.get(\"data.id\", [\"\"])[0]\n\n# Separating the x-signature into parts\nparts = xSignature.split(\",\")\n\n# Initializing variables to store ts and hash\nts = None\nhash = None\n\n# Iterate over the values to obtain ts and v1\nfor part in parts:\n    # Split each part into key and value\n    keyValue = part.split(\"=\", 1)\n    if len(keyValue) == 2:\n        key = keyValue[0].strip()\n        value = keyValue[1].strip()\n        if key == \"ts\":\n            ts = value\n        elif key == \"v1\":\n            hash = value\n\n# Obtain the secret key for the user/application from Mercadopago developers site\nsecret = \"your_secret_key_here\"\n\n# Generate the manifest string\nmanifest = f\"id:{dataID};request-id:{xRequestId};ts:{ts};\"\n\n# Create an HMAC signature defining the hash type and the key as a byte array\nhmac_obj = hmac.new(secret.encode(), msg=manifest.encode(), digestmod=hashlib.sha256)\n```\n\n----------------------------------------\n\nTITLE: Creating Card Payment with Mercado Pago C# SDK\nDESCRIPTION: Shows how to create a card payment using the Mercado Pago C# SDK. Configures the access token, sets up custom headers, and creates a payment request with transaction details and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-cardform.en.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n \nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n \nvar paymentRequest = new PaymentCreateRequest\n{\nTransactionAmount = decimal.Parse(Request[\"transactionAmount\"]),\nToken = Request[\"token\"],\nDescription = Request[\"description\"],\nInstallments = int.Parse(Request[\"installments\"]),\nPaymentMethodId = Request[\"paymentMethodId\"],\nPayer = new PaymentPayerRequest\n{\nEmail = Request[\"email\"],\nIdentification = new IdentificationRequest\n{\nType = Request[\"identificationType\"],\nNumber = Request[\"identificationNumber\"],\n},\n},\n};\n \nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentReques, requestOptions);\n \nConsole.WriteLine(payment.Status);\n```\n\n----------------------------------------\n\nTITLE: Creating Card Payment with MercadoPago Ruby SDK\nDESCRIPTION: Example of creating a card payment using the MercadoPago Ruby SDK. Includes setting up custom headers for idempotency and handling payment data including transaction amount, token, installments and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.es.md#2025-04-18_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_data = {\n transaction_amount: params[:transactionAmount].to_f,\n token: params[:token],\n description: params[:description],\n installments: params[:installments].to_i,\n payment_method_id: params[:paymentMethodId],\n payer: {\n   email: params[:email],\n   identification: {\n     type: params[:identificationType],\n     number: params[:identificationNumber]\n   }\n }\n}\n \npayment_response = sdk.payment.create(payment_data, custom_request_options)\npayment = payment_response[:response]\n \nputs payment\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Methods with MercadoPago SDK in Ruby\nDESCRIPTION: This code snippet demonstrates how to initialize the MercadoPago SDK and retrieve a list of available payment methods. It requires setting up the SDK with an access token and then calling the payment_methods.get() method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ruby/payment-methods.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\npayment_methods_response = sdk.payment_methods.get()\npayment_methods = payment_methods_response[:response]\n\n```\n\n----------------------------------------\n\nTITLE: Implementing onBinChange Callback in React\nDESCRIPTION: Example of how to implement the onBinChange callback in a React component using the Payment component. The callback receives the bin parameter and logs it to the console when the card number changes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/additional-callbacks.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\n<Payment\n ...,\n onBinChange={bin => {\n   console.log(bin);\n }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding a Card to a Customer with Ruby\nDESCRIPTION: This Ruby code demonstrates how to add a new card to an existing customer using Mercado Pago's Ruby SDK. It retrieves the customer first, then creates a card request with the token and payment method information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustomer_response = sdk.customer.get('247711297-jxOV430go9fx2e')\ncustomer = customer_response[:response]\n\ncard_request = {\n  token: '9b2d63e00d66a8c721607214cedaecda',\n  payment_method_id: 'debit_card'\n}\ncard_response = sdk.card.create(customer['id'], card_request)\ncard = card_response[:response]\n\nputs card\n```\n\n----------------------------------------\n\nTITLE: Capturing Security Code and Creating Card Token with JavaScript\nDESCRIPTION: JavaScript code for capturing the security code from the form and creating a card token. This token will be used to process the payment without storing sensitive card data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/receive-payments-with-saved-cards.en.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n const formElement = document.getElementById('form-checkout');\n    formElement.addEventListener('submit', e => createCardToken(e));\n    const createCardToken = async (event) => {\n      try {\n        const tokenElement = document.getElementById('token');\n        if (!tokenElement.value) {\n          event.preventDefault();\n          const token = await mp.fields.createCardToken({\n            cardId: document.getElementById('form-checkout__cardId').value\n          });\n          tokenElement.value = token.id;\n          console.log(tokenElement);\n        }\n      } catch (e) {\n        console.error('error creating card token: ', e)\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: React Component for Card Payment Brick\nDESCRIPTION: React implementation of Card Payment Brick with initialization, submission, error handling, and readiness callbacks\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/default-rendering.es.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst initialization = {\n amount: 100,\n};\n\nconst onSubmit = async (formData) => {\n // callback llamado al hacer clic en el botón enviar datos\n return new Promise((resolve, reject) => {\n   fetch('/process_payment', {\n     method: 'POST',\n     headers: {\n       'Content-Type': 'application/json',\n     },\n     body: JSON.stringify(formData),\n   })\n     .then((response) => response.json())\n     .then((response) => {\n       // recibir el resultado del pago\n       resolve();\n     })\n     .catch((error) => {\n       // manejar la respuesta de error al intentar crear el pago\n       reject();\n     });\n });\n};\n\nconst onError = async (error) => {\n // callback llamado para todos los casos de error de Brick\n console.log(error);\n};\n\nconst onReady = async () => {\n /*\n   Callback llamado cuando Brick está listo.\n   Aquí puedes ocultar cargamentos de su sitio, por ejemplo.\n */\n};\n```\n\n----------------------------------------\n\nTITLE: Create Mercado Pago Payment with Boleto in Python\nDESCRIPTION: This code snippet demonstrates creating a payment using the Mercado Pago SDK in Python. It initializes the SDK with the access token and defines `payment_data` with transaction amount, description, payment method (bolbradesco), and payer information.  The `sdk.payment().create` method then sends the payment creation request and the response is processed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\npayment_data = {\n    \"transaction_amount\": 100,\n    \"description\": \"Título del producto\",\n    \"payment_method_id\": \"bolbradesco\",\n    \"payer\": {\n        \"email\": \"test@test.com\",\n        \"first_name\": \"Test\",\n        \"last_name\": \"User\",\n        \"identification\": {\n            \"type\": \"DNI\",\n            \"number\": \"19119119\"\n        },\n        \"address\": {\n            \"zip_code\": \"1264\",\n            \"street_name\": \"Av. Caseros\",\n            \"street_number\": \"3039\",\n            \"neighborhood\": \"Parque Patricios\",\n            \"city\": \"Buenos Aires\",\n            \"federal_unit\": \"BA\"\n        }\n    }\n}\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Agreement Creation\nDESCRIPTION: The JSON example shows the structure of the response received upon successful creation of an agreement with Mercado Pago's API. It returns 'agreement_id', which uniquely identifies the agreement, and 'agreement_uri', which is the URL to obtain the payer's approval. This snippet demonstrates the expected output format and essential parameters returned from the API call.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/create-agreement.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"agreement_id\": \"22abcd1235ed497f945f755fcaba3c6c\",\n  \"agreement_uri\": \"https://wwww.mercadopago.com.ar/v1/wallet_agreement/22abcd1235ed497f945f755fcaba3c6c\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SPEI Transfer Payment with Mercado Pago in PHP\nDESCRIPTION: PHP implementation for creating a SPEI transfer payment using Mercado Pago SDK. It requires setting an access token, creating a payment with transaction amount, description, and payment method (clabe), and setting up payer information. The response includes payment status, link, and ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.en.md#2025-04-18_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire '../vendor/autoload.php';\n\nMercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n$payment = new MercadoPago\\Payment();\n$payment->transaction_amount = 5000;\n$payment->description = \"Título del producto\";\n$payment->payment_method_id = \"clabe\";\n\n$payer = new MercadoPago\\Payer();\n$payer->email = $_POST['email'];\n$payer->first_name = $_POST['payerFirstName']\n$payer->last_name = $_POST['payerLastName']\n$payer->entity_type = \"individual\";\n\n$payment->payer = $payer;\n\n$payment->save();\n\n$response = array(\n    'status' => $payment->status,\n    'payment_link' => $payment->transaction_details->external_resource_url,\n    'id' => $payment->id\n);\necho json_encode($response);\n\n?>\n```\n\n----------------------------------------\n\nTITLE: Searching Payments with MercadoPago SDK in Java\nDESCRIPTION: This snippet illustrates how to search for payments processed in the last twelve months using the MercadoPago SDK in Java. It defines filter criteria such as sort order and external reference before executing the search request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/create-payments.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nPaymentClient client = new PaymentClient();\n\nMap<String, Object> filters = new HashMap<>();\nfilters.put(\"sort\", \"date_created\");\nfilters.put(\"criteria\", \"desc\");\nfilters.put(\"external_reference\", \"ID_REF\");\n\nMPSearchRequest searchRequest =\n   MPSearchRequest.builder().offset(0).limit(0).filters(filters).build();\n\nclient.search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment with 3DS in Mercado Pago JavaScript SDK\nDESCRIPTION: Demonstrates how to create a payment request with 3DS authentication mode, setting the three_d_secure_mode to 'optional' to enable 3DS verification flow\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/how-to-integrate-3ds.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nconst paymentData = {\n...req.body,\nthree_d_secure_mode: 'optional'\n};\n\nmercadopago.payment.save(paymentData)\n  .then(function(response) {\n    const { status, status_detail, id } = response.body;\n    res.status(response.status).json({ status, status_detail, id });\n  })\n  .catch(function(error) {\n    console.error(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Processing SPEI Bank Transfer Payments with Ruby\nDESCRIPTION: Ruby implementation for processing SPEI bank transfers with Mercado Pago SDK. This code creates a payment with transaction details and payer information, then retrieves the payment response and external resource URL for the customer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.pt.md#2025-04-18_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ACCESS_TOKEN')\n\npayment_data = {\n\n  transaction_amount: 5000,\n  description: \"description\",\n  payment_method_id: \"clabe\",\n  payer: {\n    type: \"customer\",\n    email: params[: email],\n    entity_type: \"individual\",\n    first_name: params[: payerFirstName]\n    last_name: params[: payerLastName]\n  }\n}\n\npayment_response = sdk.payment.create(payment_data)\npayment = payment_response[: response]\npayment_link = payment.transaction_details.external_resource_url;\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth Token for Vendor Authorization in PHP\nDESCRIPTION: This code demonstrates how to create an OAuth token needed to operate an app on behalf of a vendor using the MercadoPago OauthClient. It initializes the client and sets up a request with client credentials, authorization code, and redirect URI to obtain the token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/oauth.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new OauthClient();\n   $request = new OAuthCreateRequest();\n     $request->client_secret = \"CLIENT_SECRET\";\n     $request->client_id = \"CLIENT_ID\";\n     $request->code = \"CODE\";\n     $request->redirect_uri = \"REDIRECT_URI\";\n\n  $client->create($request);\n?>\n```\n\n----------------------------------------\n\nTITLE: Searching Customers with MercadoPago SDK in Node.js\nDESCRIPTION: This example shows how to search for customers using the MercadoPago SDK in Node.js. The search is performed based on an email address. It requires the MercadoPagoConfig and Customer classes and outputs the search results from the SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/customers.en.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerClient = new Customer(client);\n\ncustomerClient.search({ options: { email: '<EMAIL>' } }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment with MercadoPago SDK (C#)\nDESCRIPTION: This C# snippet initializes a payment using the MercadoPago SDK. It sets the access token, defines payment parameters like transaction amount, token, description, installments, payment method ID, issuer ID, and payer email. It then creates the payment asynchronously and prints its status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.es.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n// ...\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n// ...\nvar paymentRequest = new PaymentCreateRequest\n{\n    TransactionAmount = 100,\n    Token = token,\n    Description = \"Blue shirt\",\n    Installments = installments,\n    PaymentMethodId = payment_method_id,\n    IssuerId = issuer_id,\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"john@yourdomain.com\",\n    },\n};\n// Create the payment\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest);\n// ...\n// Shows payment status\nConsole.WriteLine(payment.Status);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Canceling Payments in Mercado Pago with C#\nDESCRIPTION: Code to cancel a payment using the Mercado Pago C# SDK. This requires setting the access token and using a payment client to asynchronously cancel a payment by its ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/cancel-reserve.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar client = new PaymentClient();\nPayment payment = await client.CancelAsync(paymentId);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Payment Methods with Node.js\nDESCRIPTION: Code to obtain a list of all available payment methods using the MercadoPago Node.js SDK. This implementation creates a client with your access token and uses the PaymentMethods class to fetch the data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.es.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, PaymentMethods } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst paymentMethods = new PaymentMethods(client);\n\npaymentMethods.get().then((result) => console.log(result))\n  .catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Notification URL - Go\nDESCRIPTION: This snippet shows how to create a payment with a notification URL using the Mercado Pago Go SDK. It initializes the SDK with an access token, configures a payment request with transaction details and the notification URL, and then uses the `client.Create` method to create the payment. Payment status updates are sent to the provided notification URL.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.en.md#2025-04-18_snippet_18\n\nLANGUAGE: go\nCODE:\n```\naccessToken := \"{{ACCESS_TOKEN}}\"\n\n\ncfg, err := config.New(accessToken)\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nclient := payment.NewClient(cfg)\n\n\nrequest := payment.Request{\n   TransactionAmount: <transactionAmount>,\n   Token: <token>,\n   Description: <description>,\n   Installments: <installments>,\n   PaymentMethodID:   <paymentMethodId>,\n   NotificationURL: \"https:/mysite.com/notifications/new\",\n   Payer: &payment.PayerRequest{\n      Email: <email>,\n      Identification: &payment.IdentificationRequest{\n         Type: <type>,\n         Number: <number>,\n      },\n   },\n}\n\n\nresource, err := client.Create(context.Background(), request)\nif err != nil {\nfmt.Println(err)\n}\n\n\nfmt.Println(resource)\n\n```\n\n----------------------------------------\n\nTITLE: Adding New Cards to a Customer in Node.js\nDESCRIPTION: Node.js implementation for adding a new payment card to an existing MercadoPago customer. The code first gets a customer by ID and then creates a new card associated with that customer using the MercadoPago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.en.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerClient = new Customer(client);\n\nconst customer = customerClient.get({ customerId: '<CUSTOMER_ID>' })\n\t.then((result) => {\n\n  const cardClient = new CustomerCard(client);\n\n  const body = {\n       token : result.token,\n       payment_method: 'debit_card' \n  };\n\ncardClient.create({ customerId: customer, body: body })\n.then(console.log).catch(console.log);\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Customer Card from Mercado Pago with Node.js\nDESCRIPTION: Removes a card reference associated with a customer's account. Requires both the customer ID and the specific card ID to delete the stored card information from Mercado Pago's servers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/cards.en.md#2025-04-18_snippet_3\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerCard = new CustomerCard(client);\n\ncustomerCard.remove({ customerId: '<CUSTOMER_ID>', cardId: '<CARD_ID>' }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Updating a Customer with MercadoPago SDK in PHP\nDESCRIPTION: This snippet demonstrates how to update an existing customer's information using MercadoPago's CustomerClient. It allows modification of personal details, contact information, address, and other metadata for a specified customer ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/customers.en.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new CustomerClient();\n  $customerRequest = [\n    'email' => 'jhon@doe.com',\n    'first_name' => 'Jhon',\n    'last_name' => 'Doe',\n    'phone' => [\n        'area_code' => '55',\n        'number' => '991234567'\n    ],\n    'identification' => [\n        'type' => 'CPF',\n        'number' => '12345678900'\n    ],\n    'default_address' => 'Home',\n    'address' => [\n        'id' => '123123',\n        'zip_code' => '01234567',\n        'street_name' => 'Rua Exemplo',\n        'street_number' => 123,\n        'city' => []\n    ],\n    'date_registered' => '2023-09-07T11:37:30.000-04:00',\n    'description' => 'Description del user',\n    'default_card' => 'None'\n  ];\n\n  $client->update('247711297-jxOV430go9fx2e', $customerRequest)\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing PaymentFlow for Payment Processing in Android\nDESCRIPTION: Shows how to initialize and launch a payment flow using PaymentFlow class with success and error callback handling. Includes setting up payment amount, description, callback URIs and payment method configuration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/payment-flow-legacy-support.es.md#2025-04-18_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval paymentFlow = MPManager.paymentFlow\n\nval amount = \"2.0\"\nval description = \"Payment description\"\nval intentSuccess = paymentFlow.buildCallbackUri(\n   callback = \"mercadopago://smart_integrations/payment_result\",\n   methodCallback = \"success\",\n   metadata = hashMapOf(\"message\" to \"testSuccess\"),\n   appID = \"demo.app\"\n)\nval intentError = paymentFlow.buildCallbackUri(\n   callback = \"mercadopago://smart_integrations/payment_result\",\n   methodCallback = \"error\",\n   metadata = hashMapOf(\"message\" to \"testError\"),\n   appID = \"demo.app\"\n)\n\nval paymentFlowData = PaymentFlowData(\n   amount = amount,\n   description = description,\n   intentSuccess = intentSuccess,\n   intentError = intentError,\n   paymentMethod = PaymentMethod.CREDIT_CARD.name,\n   installments = 6\n)\npaymentFlow.launchPaymentFlowActivity(\n   paymentFlowData = paymentFlowData,\n   context = context\n) { response ->\n   response.doIfSuccess { message ->\n       // Manejo de éxito utilizando un mensaje\n   }.doIfError { error ->\n       // Manejo del error\n   }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal PaymentFlow paymentFlow = MPManager.INSTANCE.getPaymentFlow();\n\nfinal HashMap<String, String> successMetadata = new HashMap<>();\nsuccessMetadata.put(\"success\", \"testSuccess\");\n\nfinal HashMap<String, String> errorMetadata = new HashMap<>();\nsuccessMetadata.put(\"message\", \"testError\");\n\nfinal String amount = \"2.0\";\nfinal String description = \"Payment description\";\nfinal Uri intentSuccess = paymentFlow.buildCallbackUri(\n   \"mercadopago://smart_integrations/payment_result\",\n   \"success\",\n   successMetadata,\n   \"demo.app\"\n);\nfinal Uri intentError = paymentFlow.buildCallbackUri(\n   \"mercadopago://smart_integrations/payment_result\",\n   \"error\",\n   errorMetadata,\n   \"demo.app\"\n);\n\nfinal PaymentFlowData paymentFlowData = new PaymentFlowData(\n   amount,\n   description,\n   intentSuccess,\n   intentError,\n   PaymentMethod.CREDIT_CARD.name(),\n   6\n);\n\nfinal Function1<MPResponse<String>, Unit> callback = (final MPResponse<String> response) -> {\n if (response.getStatus() == ResponseStatus.SUCCESS) {\n   // Manejo de éxito utilizando un mensaje\n } else {\n   // Manejo del error\n }\n return Unit.INSTANCE;\n};\n\npaymentFlow.launchPaymentFlowActivity(paymentFlowData, context, callback);\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Preferences - Python\nDESCRIPTION: This Python code snippet outlines how to set up payment methods for a MercadoPago preference configuration. It includes exclusion of specific payment methods and types, as well as defining installment options for transactions, ideal for Python applications interfacing with payment services.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n#...\npreference_data = {\n    \"excluded_payment_methods\": [\n        { \"id\": \"master\" }\n    ],\n    \"excluded_payment_types\": [\n        { \"id\": \"ticket\" }\n    ],\n    \"installments\": 12\n}\n#...\n```\n\n----------------------------------------\n\nTITLE: Searching Payments with Mercado Pago PHP SDK\nDESCRIPTION: This snippet demonstrates how to search for payments using the Mercado Pago PHP SDK. It creates an `MPSearchRequest` with parameters for sorting, criteria, and external reference. The `PaymentClient` is used to execute the search request, along with `RequestOptions` that contains the idempotency key.  The search is limited to payments made within the last twelve months from the search date.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/create-payments.en.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $searchRequest = new MPSearchRequest(0, 0, [\n    \"sort\" => \"date_created\", \n    \"criteria\" => \"desc\", \n    \"external_reference\" => \"ID_REF\"\n  ]);\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $client->search($searchRequest, $request_options);\n?>\n```\n\n----------------------------------------\n\nTITLE: Get Identification Types JavaScript\nDESCRIPTION: This snippet retrieves the available document types from the Mercado Pago API and populates the `identificationType` select element in the form with these options. It uses an asynchronous function and a helper function to create the select options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/secure-fields-core.en.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Step #getIdentificationTypes\n \n// Helper function to append option elements to a select input\nfunction createSelectOptions(elem, options, labelsAndKeys = { label : \"name\", value : \"id\"}){\n  const {label, value} = labelsAndKeys;\n \n  elem.options.length = 0;\n \n  const tempOptions = document.createDocumentFragment();\n \n  options.forEach( option => {\n      const optValue = option[value];\n      const optLabel = option[label];\n \n      const opt = document.createElement('option');\n      opt.value = optValue;\n      opt.textContent = optLabel;\n \n      tempOptions.appendChild(opt);\n  });\n \n  elem.appendChild(tempOptions);\n}\n \n// Get Identification Types\n(async function getIdentificationTypes () {\n  try {\n      const identificationTypes = await mp.getIdentificationTypes();\n      const identificationTypeElement = document.getElementById('form-checkout__identificationType');\n \n      createSelectOptions(identificationTypeElement, identificationTypes)\n  }catch(e) {\n      return console.error('Error getting identificationTypes: ', e);\n  }\n})()\n```\n\n----------------------------------------\n\nTITLE: Creating Pix Payments with C# SDK\nDESCRIPTION: C# implementation for creating Pix payments through Mercado Pago's SDK. It configures the access token, adds an idempotency key to the request headers, and creates a payment request with transaction amount, payment method, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pix.es.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = 105,\n    PaymentMethodId = \"pix\",\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"PAYER_EMAIL_HERE\",\n    },\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request, requestOptions);\n\n```\n\n----------------------------------------\n\nTITLE: HMAC Signature Generation in Node.js\nDESCRIPTION: This Node.js code snippet uses the `crypto` module to generate an HMAC signature. It creates an HMAC object with the SHA256 algorithm, updates it with the signature template parsed string, and then digests it into a hexadecimal string. The `secret` variable should be replaced with the actual secret key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/notifications.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst crypto = require('crypto');\nconst cyphedSignature = crypto\n    .createHmac('sha256', secret)\n    .update(signatureTemplateParsed)\n    .digest('hex'); \n```\n\n----------------------------------------\n\nTITLE: Bad Request Error Response (Invalid Payer Token)\nDESCRIPTION: This JSON response represents a 'Bad Request' error (status code 400), indicating that the `payer_token` sent in the request is invalid. It includes a specific error message related to the invalid payer token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/coupon-validation-responses.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"bad_request\",\n  \"message\": \"Invalid payer token.\",\n  \"status\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Device Information in Objective-C\nDESCRIPTION: Shows methods to obtain device information in Objective-C using MercadoPagoDevicesSDK. Available formats include JSON object, JSON string, and Dictionary.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.en.md#2025-04-18_snippet_11\n\nLANGUAGE: objective-c\nCODE:\n```\n[[[MercadoPagoDevicesSDK] shared] getInfoAsJson] // Returns a JSON Library Data Object\n[[[MercadoPagoDevicesSDK] shared] getInfoAsJsonString] // Returns a JSON String\n[[[MercadoPagoDevicesSDK] shared] getInfoAsDictionary] // Returns a Dictionary<String,Any>\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Items in C#\nDESCRIPTION: This C# snippet shows how to create a Mercado Pago preference with multiple items. It creates a PreferenceRequest object and populates its Items property with a list of PreferenceItemRequest objects, each having properties like Title, Quantity, CurrencyId, and UnitPrice.  It then uses the PreferenceClient to create the preference asynchronously.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/preference-multiple-items.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Cria o request com múltiplos itens\nvar request = new PreferenceRequest\n{\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"Meu produto 1\",\n            Quantity = 1,\n            CurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\n            UnitPrice = 75.56m,\n        },\n        new PreferenceItemRequest\n        {\n            Title = \"Meu produto 2\",\n            Quantity = 2,\n            CurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\n            UnitPrice = 96.56m,\n        },\n        // ...\n    },\n};\n\n// Cria um objeto client\nvar client = new PreferenceClient();\n\n// Cria a preferência\nPreference preference = await client.CreateAsync(request);\n\n```\n\n----------------------------------------\n\nTITLE: Available Countries Configuration\nDESCRIPTION: This snippet lists the available countries where the Mercado Pago integration with Tiendanube is supported.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/nuvemshop/landing.es.md#2025-04-18_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"available_countries: mlb, mla, mlm, mlu, mco, mlc, mpe\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK with Python\nDESCRIPTION: This Python code snippet initializes the Mercado Pago SDK. Note that the configuration and setting of the access token typically happen separately in Python.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/default-rendering.en.md#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Mercado Pago SDK\nimport mercadopago\n```\n\n----------------------------------------\n\nTITLE: Configuring Shipping Cost in JSON\nDESCRIPTION: This code demonstrates how to display the shipping cost separately from the total amount at the time of payment by adding the 'shipments' item to the preference JSON.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"shipments\":{\n        \"cost\": 1000,\n        \"mode\": \"not_specified\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Customers in Mercado Pago Node.js SDK\nDESCRIPTION: Demonstrates how to search for customers using email as a search parameter in Mercado Pago's SDK. Allows retrieving customer information based on specified search criteria.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/customers.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerClient = new Customer(client);\n\ncustomerClient.search({ options: { email: '<EMAIL>' } }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirection URLs in MercadoPago Preference with Node.js\nDESCRIPTION: This Node.js snippet demonstrates how to add back URLs and auto-return settings to a MercadoPago preference. It sets up redirections for different payment outcomes (success, failure, pending) and enables automatic redirection for approved payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar preference = {}\npreference = {\n  // ...\n  \"back_urls\": {\n        \"success\": \"https://www.tu-sitio/success\",\n        \"failure\": \"http://www.tu-sitio/failure\",\n        \"pending\": \"http://www.tu-sitio/pending\"\n    },\n    \"auto_return\": \"approved\",\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Total Capture Response Structure\nDESCRIPTION: This JSON response shows what to expect after successfully capturing a payment. The status will be 'approved' with status_detail 'accredited' and captured set to true.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"status\": \"approved\",\n  \"status_detail\": \"accredited\",\n  ...\n  \"captured\": true,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Including MercadoPago.js SDK with HTML/JavaScript\nDESCRIPTION: Demonstrates how to include the Mercado Pago SDK via CDN and initialize the checkout process with a payment preference\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/add-sdk-and-initialize.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My integration with Checkout Pro</title>\n</head>\n<body>\n\n  <!-- Your page content -->\n\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n\n  <script>\n    // Your JavaScript code will go here\n  </script>\n\n</body>\n</html>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Configure your Mercado Pago public key\nconst publicKey = 'YOUR_PUBLIC_KEY';  \n// Set the preference ID you should receive from your backend\nconst preferenceId = 'YOUR_PREFERENCE_ID';\n\n// Initialize the Mercado Pago SDK\nconst mp = new MercadoPago(publicKey);\n\n// Create the payment button\nconst checkout = mp.checkout({\n  preference: {\n    id: preferenceId\n  },\n  render: {\n    container: '#wallet_container', // Use the ID of your existing div\n    label: 'Pay with Mercado Pago'\n  }\n});\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- Container for the payment button -->\n<div id=\"wallet_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Creating Preference for Onboarding Credits with PHP\nDESCRIPTION: This PHP snippet demonstrates how to create a Mercado Pago preference for onboarding credits. It initializes a `Preference` object, adds an item, sets the `purpose` to `onboarding_credits`, and saves the preference. This allows customers to pay in installments without a credit card.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Crea un objeto de preferencia\n$preference = new MercadoPago\\Preference();\n\n// Crea un ítem en la preferencia\n$item = new MercadoPago\\Item();\n$item->title = 'Mi producto';\n$item->quantity = 1;\n$item->unit_price = 75;\n$preference->items = array($item);\n$preference->purpose = 'onboarding_credits';\n$preference->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Configuring Brick Callbacks in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the onError, onReady, and onSubmit callbacks during Brick initialization in JavaScript. The onError callback logs any errors that occur, onReady is triggered when the brick is ready, and onSubmit is triggered when the button is clicked.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/additional-callbacks.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n   ...,\n   callbacks: {\n       onError: (error) => {\n           // triggered when an error happens\n           console.log(error);\n       },\n       onReady: () => {\n           // triggered when brick is ready\n       },\n       onSubmit: () => {\n           // triggered when the button is clicked\n       },\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Item Preference in PHP\nDESCRIPTION: This PHP code demonstrates how to create a preference with multiple items using MercadoPago's SDK. It creates two items with different quantities and prices, adds them to a preference object, and saves the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  # Crear un objeto preferencia\n  $preference = new MercadoPago\\Preference();\n  # Crea ítems en la preferencia\n  $item1 = new MercadoPago\\Item\n  $item1->title = \"Item de Prueba 1\";\n  $item1->quantity = 2;\n  $item1->unit_price = 11.96;\n\n  $item2= new MercadoPago\\Item\n  $item2->title = \"Item de Prueba 2\";\n  $item2->quantity = 1;\n  $item2->unit_price = 11.96;\n\n  $preference->items = array($item1,$item2);\n  # Guardar y postear la preferencia\n  $preference->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing Boleto/Lottery Payment Forms with Complete Payer Data in Javascript\nDESCRIPTION: Configuration to pre-populate all payer fields for boleto bancário and lottery payments in Brazil. Includes personal information, identification, email, and full address details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/initialize-data-on-the-bricks.en.md#2025-04-18_snippet_4\n\nLANGUAGE: Javascript\nCODE:\n```\nsettings = {\n  ...,\n  initialization: {\n ...,\n payer: {\n   firstName: '<PAYER_FIRST_NAME_HERE>',\n   lastName: '<PAYER_LAST_NAME_HERE>',\n   identification: {\n    \"type\": \"<PAYER_DOC_TYPE_HERE>\",\n    \"number\": \"<PAYER_DOC_NUMBER_HERE>\",\n   },\n   email: '<PAYER_EMAIL_HERE>',\n   address: {\n     zipCode: '<PAYER_ZIP_CODE_HERE>',\n     federalUnit: '<PAYER_FED_UNIT_HERE>',\n     city: '<PAYER_CITY_HERE>',\n     neighborhood: '<PAYER_NEIGHBORHOOD_HERE>',\n     streetName: '<PAYER_STREET_NAME_HERE>',\n     streetNumber: '<PAYER_STREET_NUMBER_HERE>',\n     complement: '<PAYER_COMPLEMENT_HERE>',\n   }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Open Finance Payment with Python SDK\nDESCRIPTION: This code illustrates how to create an Open Finance payment using Mercado Pago's Python SDK. It configures the payment with the necessary parameters including transaction amount, Pix as the payment method, and the Open Finance indicator.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/advanced-openFinance.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsdk = mercadopago.SDK(\"access_token\")\n\npayment_data = {\n    \"transaction_amount\": 100,\n    \"description\": \"description\",\n    \"payment_method_id\": \"pix\",\n    \"payer\": {\n        \"email\": \"test@test.com\"\n        \"identification\": {\n            \"number\": \"12345678909\",\n            \"type\": \"CPF\"\n       }\n    },\n    \"point_of_interaction\": {\n        \"linked_to\": \"openfinance\"\n    }\n}\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Adding a New Card Using MercadoPago with Ruby\nDESCRIPTION: This Ruby snippet provides a method to add a new card to a Mercado Pago customer's profile. The code requires the 'mercadopago' gem and uses an SDK object initialized with an access token. Input data includes a token, issuer ID, and payment method ID. Outputs the card data to the console.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.en.md#2025-04-18_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustomer_response = sdk.customer.get('247711297-jxOV430go9fx2e')\ncustomer = customer_response[:response]\n\ncard_request = {\n  token: '9b2d63e00d66a8c721607214cedaecda',\n  issuer_id: '3245612',\n  payment_method_id: 'debit_card'\n}\ncard_response = sdk.card.create(customer['id'], card_request)\ncard = card_response[:response]\n\nputs card\n\n```\n\n----------------------------------------\n\nTITLE: Creating MercadoPago Preference with Multiple Items using cURL\nDESCRIPTION: This cURL command shows how to create a MercadoPago preference with multiple items by making a direct API call. It sends a POST request to the MercadoPago preferences endpoint with authorization and a JSON payload containing two products with different properties.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_19\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n  'https://api.mercadopago.com/checkout/preferences' \\\n  -H 'Content-Type: application/json' \\\n  -H 'cache-control: no-cache' \\\n  -H 'Authorization: Bearer PROD_ACCESS_TOKEN' \\\n  -d '{\n\t\"items\": [\n\t{\n\t\t\"id_product\":1,\n\t\t\"quantity\":1,\n\t\t\"unit_price\": 234.33,\n\t\t\"titulo\":\"Mi producto\"\n\t},\n\t{\n\t\t\"id_product\":2,\n\t\t\"quantity\":2,\n\t\t\"unit_price\": 255.33,\n\t\t\"titulo\":\"Mi producto 2\"\n\t}\n]\n}'\n```\n\n----------------------------------------\n\nTITLE: Obteniendo información del dispositivo en Java (Android)\nDESCRIPTION: Métodos disponibles en Java para obtener la información del dispositivo en diferentes formatos, como objeto Device, Map o String JSON.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.es.md#2025-04-18_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nDevice device = DeviceSDK.getInstance().getInfo() // devuelve un objeto Device, serializable\nMap deviceMap = DeviceSDK.getInstance().getInfoAsMap()  // devuelve un Map<String, Object>\nString jsonString = DeviceSDK.getInstance().getInfoAsJsonString() // devuelve un String de tipo Json\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Preference by ID in Java\nDESCRIPTION: Shows how to retrieve detailed payment information for a specific preference using its unique identifier. Requires a valid preference ID from the Mercado Pago system.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/preferences.es.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nPreferenceClient client = new PreferenceClient();\n\nString preferenceId = \"202809963-a2201f8d-11cb-443f-adf6-de5a42eed67d\";\nclient.get(preferenceId);\n```\n\n----------------------------------------\n\nTITLE: Proper Container Rendering for Bricks in JavaScript\nDESCRIPTION: Example demonstrating the correct approach to rendering a Brick component by ensuring the container ID exists in the DOM before initializing the Brick. This helps avoid the 'Container Not Found' error.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/possible-errors.es.md#2025-04-18_snippet_1\n\nLANGUAGE: Javascript\nCODE:\n```\nconst renderPaymentBrick = async (bricksBuilder) => {\n const settings = { ... };\n window.paymentBrickController = await bricksBuilder.create(\n   \"payment\",\n   \"paymentBrick_container\",\n   settings\n );\n};\n\nawait renderPaymentBrick(bricksBuilder);\n\n...\n\n<div id=\"paymentBrick_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Notification URL - Python\nDESCRIPTION: This code snippet creates a payment with a notification URL using the Mercado Pago Python SDK. It initializes the SDK with an access token, constructs the payment data including transaction details and the notification URL, and uses the `payment().create()` method to initiate the payment. Payment status updates are pushed to the configured notification URL.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.en.md#2025-04-18_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\n\npayment_data = {\n   \"transaction_amount\": float(request.POST.get(\"transaction_amount\")),\n   \"token\": request.POST.get(\"token\")),\n   \"description\": request.POST.get(\"description\")),\n   \"installments\": int(request.POST.get(\"installments\")),\n   \"payment_method_id\": request.POST.get(\"payment_method_id\")),\n   \"notification_url\" =  \"http://requestbin.fullcontact.com/1ogudgk1\",\n   \"payer\": {\n       \"email\": request.POST.get(\"email\")),\n       \"identification\": {----[mla, mlb, mlu, mlc, mpe, mco]----\n           \"type\": request.POST.get(\"type\")), ------------\n           \"number\": request.POST.get(\"number\")\n       }\n   }\n}\n\n\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n\n\nprint(payment)\n\n```\n\n----------------------------------------\n\nTITLE: Validating integration with Mercado Pago Payments API\nDESCRIPTION: This code snippet demonstrates how to validate the Zero Dollar Auth integration by sending a POST request to the Mercado Pago's /v1/payments endpoint. It includes essential parameters such as the card token, payment method, payer details, description, and a zero transaction amount. The request includes headers for content type, card validation, and authorization.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/integration-test.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n      'https://api.mercadopago.com/v1/payments'\\\n      Content-Type: application/json\n      X-Card-Validation: card_validation\n      Authorization: Bearer {{access_token}}\n{\n    \"token\": \"{{card_token}}\",\n    \"payment_method_id\": \"master\",\n    \"payer\": {\n        \"email\": \"{{payer_email}}\",\n        \"type\" : \"guest\"\n    },\n    \"description\": \"validação de cartão com valor zero dollar master crédito sem cvv\",\n    \"transaction_amount\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PSE Payment with Python SDK in Mercado Pago\nDESCRIPTION: Python implementation for creating a PSE bank transfer payment. This snippet shows how to structure the payment request body with payer information, transaction details, and additional parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pse-avanza.es.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n    \"additional_info\": {\n        \"ip_address\": \"127.0.0.1\"\n    },\n    \"transaction_details\": {\n        \"financial_institution\": request.POST.get(\"financialInstitution\")\n    },\n    \"payer\": {\n        \"email\": request.POST.get(\"email\"),\n        \"entity_type\": \"individual\",\n        \"first_name\": request.POST.get(\"firstName\"),\n        \"last_name\": request.POST.get(\"lastName\"),\n        \"identification\": {\n            \"type\": request.POST.get(\"identificationType\"), \n            \"number\": request.POST.get(\"identificationNumber\")\n        },\n        \"address\": {\n            \"zip_code\": request.POST.get(\"zipCode\"),\n            \"street_name\": request.POST.get(\"streetName\"),\n            \"street_number\": request.POST.get(\"streetNumber\"),\n            \"neighborhood\": request.POST.get(\"neighborhood\"),\n            \"city\": request.POST.get(\"city\"),\n            \"federal_unit\": request.POST.get(\"federalUnit\")\n        },\n        \"phone\": {\n            \"area_code\": request.POST.get(\"phoneAreaCode\"),\n            \"number\": request.POST.get(\"phoneNumber\")\n        }\n    }\n}\n \npayment_response = sdk.payment().create(body, request_options)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Cancelling Payments using MercadoPago SDK in Python\nDESCRIPTION: This code snippet demonstrates how to cancel a specific payment by setting its status to \"cancelled\" using the MercadoPago SDK for Python. The snippet requires an instance of the SDK initialized with a valid access token. The payment ID and updated status are sent to the SDK's update method of the payment object. The input required is the `payment_id` and `payment_data` dictionary with the status changed to \"cancelled\". The output will be the response from the MercadoPago API, accessed via `payment_response[\"response\"]`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/cancellations.en.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n \npayment_data = {\n   \"status\": \"cancelled\"\n}\n \npayment_response = sdk.payment().update(payment_id, payment_data)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Methods in .NET with Mercado Pago SDK\nDESCRIPTION: Demonstrates how to list available payment methods using the Mercado Pago SDK. Requires setting the access token and creating a PaymentMethodClient to retrieve the list of payment methods asynchronously.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/payment-methods.es.md#2025-04-18_snippet_0\n\nLANGUAGE: dotnet\nCODE:\n```\nusing MercadoPago.Client.PaymentMethod;\nusing MercadoPago.Config;\nusing MercadoPago.Resource;\nusing MercadoPago.Resource.PaymentMethod;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar client = new PaymentMethodClient();\nResourcesList<PaymentMethod> paymentMethods = await client.ListAsync();\n```\n\n----------------------------------------\n\nTITLE: Adding New Cards to a Customer in PHP\nDESCRIPTION: PHP implementation for adding a new payment card to an existing MercadoPago customer. This code retrieves a customer by ID and then creates a new card for that customer using a card token and payment method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n  \n  $customer_client = new CustomerClient();\n  $customer = $customer_client->get(\"1234\");\n\n  $card_client = new CustomerCardClient();\n  \n  $customer_card = $client->create($customer->id, [\n    \"token\" => \"your_card_token\",\n    \"payment_method_id\" => \"debit_card\"\n  ]);\n\n  echo implode($customer_card);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with MercadoPago SDK (Python)\nDESCRIPTION: This Python snippet creates a payment using data from the POST request and the MercadoPago SDK.  It retrieves parameters, creates payer details and calls the create function.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.es.md#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\npayment_data = {\n   \"transaction_amount\": float(request.POST.get(\"transaction_amount\")),\n   \"token\": request.POST.get(\"token\"),\n   \"installments\": int(request.POST.get(\"installments\")),\n   \"payment_method_id\": request.POST.get(\"payment_method_id\"),\n   \"payer\": {\n       \"email\": request.POST[\"payer\"].get(\"email\"),\n       \"identification\": {\n           \"type\": request.POST[\"payer\"][\"identification\"].get(\"type\"),\n           \"number\": request.POST[\"payer\"][\"identification\"].get(\"number\")\n       }\n   }\n}\n\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n\nprint(payment)\n\n```\n\n----------------------------------------\n\nTITLE: HMAC Signature Verification in Python\nDESCRIPTION: This Python code snippet verifies the HMAC signature of a Mercado Pago notification. It extracts parameters from the query string and `x-signature` header, constructs a manifest string, generates an HMAC signature using the secret key, and compares it against the provided signature. The code requires the `hmac` and `hashlib` libraries.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/notifications.en.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Extract the \"data.id\" from the query params\ndataID = queryParams.get(\"data.id\", [\"\"])[0]\n\n# Separating the x-signature into parts\nparts = xSignature.split(\",\")\n\n# Initializing variables to store ts and hash\nts = None\nhash = None\n\n# Iterate over the values to obtain ts and v1\nfor part in parts:\n    # Split each part into key and value\n    keyValue = part.split(\"=\", 1)\n    if len(keyValue) == 2:\n        key = keyValue[0].strip()\n        value = keyValue[1].strip()\n        if key == \"ts\":\n            ts = value\n        elif key == \"v1\":\n            hash = value\n\n# Obtain the secret key for the user/application from Mercadopago developers site\nsecret = \"your_secret_key_here\"\n\n# Generate the manifest string\nmanifest = f\"id:{dataID};request-id:{xRequestId};ts:{ts};\"\n\n# Create an HMAC signature defining the hash type and the key as a byte array\nhmac_obj = hmac.new(secret.encode(), msg=manifest.encode(), digestmod=hashlib.sha256)\n\n# Obtain the hash result as a hexadecimal string\nsha = hmac_obj.hexdigest()\nif sha == hash:\n    # HMAC verification passed\n    print(\"HMAC verification passed\")\nelse:\n    # HMAC verification failed\n    print(\"HMAC verification failed\")\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with MercadoPago SDK in .NET\nDESCRIPTION: This snippet demonstrates how to create a payment using the MercadoPago SDK in a .NET application. It initializes the payment request with necessary details such as the transaction amount, token, installments, and payer information. The `PaymentClient` is then used to send the request asynchronously. Ensure that the `MercadoPagoConfig.AccessToken` is set with a valid access token before making the request. Inputs include transaction amount, token, installments, and payer details. The output is an instance of `Payment` indicating the payment status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/create-payments.en.md#2025-04-18_snippet_0\n\nLANGUAGE: dotnet\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = 100,\n    Token = \"ff8080814c11e237014c1ff593b57b4d\",\n    Installments = 1,\n    Payer = new PaymentPayerRequest\n    {\n        Type = \"customer\",\n        Email = \"test_payer_12345@testuser.com\",\n    },\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Processing Payment with Java\nDESCRIPTION: Java implementation for processing credit card payments with Mercado Pago. Uses the PaymentClient to create a payment request with transaction details and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.en.md#2025-04-18_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest paymentCreateRequest =\nPaymentCreateRequest.builder()\n.transactionAmount(request.getTransactionAmount())\n.token(request.getToken())\n.description(request.getDescription())\n.installments(request.getInstallments())\n.paymentMethodId(request.getPaymentMethodId())\n.payer(\nPaymentPayerRequest.builder()\n.email(request.getPayer().getEmail())\n.firstName(request.getPayer().getFirstName())\n.identification(\nIdentificationRequest.builder()\n.type(request.getPayer().getIdentification().getType())\n.number(request.getPayer().getIdentification().getNumber())\n.build())\n.build())\n.build();\n\nclient.create(paymentCreateRequest);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Python SDK in Mercado Pago\nDESCRIPTION: Python implementation for creating payments with Mercado Pago's SDK. This snippet initializes the SDK, sets request options with an idempotency key, configures the payment data including transaction details and payer information, and creates the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n   \"transaction_amount\": float(request.POST.get(\"transaction_amount\")),\n   \"token\": request.POST.get(\"token\"),\n   \"description\": request.POST.get(\"description\"),\n   \"installments\": int(request.POST.get(\"installments\")),\n   \"payment_method_id\": request.POST.get(\"payment_method_id\"),\n   \"payer\": {\n       \"email\": request.POST.get(\"email\"),\n       \"identification\": {\n           \"type\": request.POST.get(\"type\"), \n           \"number\": request.POST.get(\"number\")\n       }\n   }\n}\n \npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n \nprint(payment)\n```\n\n----------------------------------------\n\nTITLE: Reserving Payment Values with Mercado Pago using cURL\nDESCRIPTION: Creates a payment with 'capture=false' to reserve the value on the card without completing the transaction. This cURL request demonstrates how to directly call the Mercado Pago API to create a payment with authorization but without capture.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/make-value-reserve.en.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n    'https://api.mercadopago.com/v1/payments' \\\n    -d '\n{\n   \"transaction_amount\":100,\n   \"token\":\"ff8080814c11e237014c1ff593b57b4d\",\n   \"description\":\"Product title\",\n   \"installments\":1,\n   \"payment_method_id\":\"visa\",\n   \"payer\":{\n      \"email\":\"test_user_3931694@testuser.com\"\n   },\n   \"capture\":false\n}'\n```\n\n----------------------------------------\n\nTITLE: Canceling Payments in Mercado Pago with PHP\nDESCRIPTION: Code to cancel a payment using the Mercado Pago PHP SDK. This requires setting the access token and creating a payment client with an idempotency key to prevent duplicate operations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/cancel-reserve.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->cancel($payment_id, $request_options);\n  echo $payment->status;\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing Card Payment Form with Pre-filled Fields in React\nDESCRIPTION: React implementation to pre-populate document and email fields in a card payment form. This object configuration initializes the Brick with payer identification and email data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/initialize-data-on-the-bricks.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst initialization = {\n ...,\n payer: {\n   ...,\n   email: '<PAYER_EMAIL_HERE>',\n   identification: {\n     type: 'string',\n     number: 'string',\n   },\n },\n};\n```\n\n----------------------------------------\n\nTITLE: Get Payment Data\nDESCRIPTION: This function retrieves payment details using the payment ID from kwargs. It checks the status of the request and returns the JSON response if successful.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.en.md#2025-04-18_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nimport mercadopago\n    \ndef index(req, **kwargs):\n    sdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\n    payment_info = sdk.payment().get(kwargs[\"id\"])\n\n    if payment_info[\"status\"] == 200:\n        return json.dumps(payment_info[\"response\"], indent=4)\n    else:\n        return None\n```\n\n----------------------------------------\n\nTITLE: Creating PagoEfectivo Payment with Node.js SDK\nDESCRIPTION: Implements payment creation using PagoEfectivo through Mercado Pago Node.js SDK. Handles transaction amount, payment method, and payer information with promise-based response handling.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.es.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MercadoPagoConfig, Payments } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<YOUR_ACCESS_TOKEN>' });\nconst payments = new Payments(client);\n\npayments.create({\nbody: {\n\t\ttransaction_amount: '<TRANSACTION_AMOUNT>',\n\t\tpayment_method_id: '<PAYMENT_METHOD_ID>',\n\t\tpayer: {\n\t\t\temail: '<EMAIL>'\n\t\t\t}\n},\n\trequestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n\t.then((result) => console.log(result))\n\t.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with 3DS in Mercado Pago PHP SDK\nDESCRIPTION: This PHP code snippet demonstrates how to create a payment in Mercado Pago using the data received from external 3DS authentication. Dependencies include MercadoPago SDK and setting an access token. Key parameters include transaction amount, card token, and payment method data, which must include authentication details from the 3DS process.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-external-mpi.en.md#2025-04-18_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => <TRANSACTION_AMOUNT>,\n    \"token\" => \"CARD_TOKEN\",\n    \"description\" => \"<DESCRIPTION>\",\n    \"installments\" => <INSTALLMENTS_NUMBER>,\n    \"payment_method_id\" => \"<PAYMENT_METHOD_ID>\",\n    \"issuer_id\" => \"<ISSUER_ID>\",\n    \"payer\" => [\n      \"email\" => $_POST['email']\n    ],\n    \"payment_method\" => [\n      \"type\" => 'credit_card',\n      \"data\" => [\n        \"authentication\"  => [\n        \"type\" => 'external_threeds',\n        \"cryptogram\" => '<<String>>',\n        \"three_ds_server_trans_id\" => '<<String>>',\n        \"eci\" => '<<String>>',\n        \"ds_trans_id\" => '<<String>>',\n        \"acs_trans_id\" => '<<String>>',\n        \"three_ds_version\" => '<<String>>',\n        \"authentication_status\" => '<<String>>',\n      ]\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Card Payment with MercadoPago REST API\nDESCRIPTION: Direct REST API implementation for creating card payments using cURL. Shows required headers and JSON payload structure for the payment request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.es.md#2025-04-18_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n   -H 'accept: application/json' \\\n   -H 'content-type: application/json' \\\n   -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n   -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n   'https://api.mercadopago.com/v1/payments' \\\n   -d '{\n         \"transaction_amount\": 100,\n         \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n         \"description\": \"Blue shirt\",\n         \"installments\": 1,\n         \"payment_method_id\": \"visa\",\n         \"issuer_id\": 310,\n         \"payer\": {\n           \"email\": \"PAYER_EMAIL\"\n         }\n   }'\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago SDK - C#\nDESCRIPTION: This C# snippet demonstrates how to set up and create a payment request using the Mercado Pago SDK. It initializes the necessary request options, constructs the payer's details, and creates a payment asynchronously. Key dependencies include the Mercado Pago SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pse.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(Headers.IDEMPOTENCY_KEY, \"YOUR_IDEMPOTENCY_KEY\");\n\nvar identification = new IdentificationRequest() {\n  Type = request.IdentificationType,\n    Number = request.IdentificationNumber\n};\n\nvar address = new PaymentPayerAddressRequest() {\n    ZipCode = request.ZipCode,\n    StreetName = request.StreetName,\n    StreetNumber = request.StreetNumber,\n    Neighborhood = request.Neighborhood,\n    City = request.City,\n    FederalUnit = request.FederalUnit\n};\n\nvar phone = new PaymentPayerPhoneRequest() {\n    AreaCode = request.PhoneAreaCode,\n    Number = request.PhoneNumber\n};\n\nvar payer = new PaymentPayerRequest() {\n    Email = request.Email,\n    EntityType = \"individual\",\n    FirstName = firstName,\n    LastName = lastName,\n    Identification = identification,\n    Address = address,\n    Phone = phone\n};\n\nvar additionalInfo = new PaymentAdditionalInfoRequest() {\n  IpAddress = \"127.0.0.1\"\n};\n\nvar transactionDetails = new PaymentTransactionDetailsRequest() {\n  FinancialInstitution = request.FinancialInstitution\n};\n\nvar paymentCreateRequest = new PaymentCreateRequest() {\n    TransactionAmount = 5000,\n    Description = \"Product description\",\n    PaymentMethodId = \"pse\",\n    AdditionalInfo = additionalInfo,\n    TransactionDetails = transactionDetails,\n    CallbackUrl = \"https://your-site.com\",\n    NotificationUrl = \"https://your-site.com\",\n    Payer = payer\n};\n\nvar client = new PaymentClient();\nvar payment = await client.CreateAsync(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with MercadoPago API in Node.js\nDESCRIPTION: Illustrates the process of creating a payment using MercadoPago in a Node.js environment. It involves setting up the MercadoPago client and using the Payment object to create a transaction. The example includes detailed sub_merchant data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subcredenciadores-payfacs/integration-update.en.md#2025-04-18_snippet_1\n\nLANGUAGE: nodejs\nCODE:\n```\n/**\n * Mercado Pago Payment Capture.\n *\n * @see {@link https://www.mercadopago.com/developers/en/reference/payments/_payments/post Documentation}.\n */\n\nimport MercadoPago, { Payment } from '@src/index';\n\nconst client = new MercadoPago({\n  accessToken: 'YOUR_ACCESS_TOKEN'\n});\n\nconst payment = new Payment(client);\n\npayment.create({\n  body: {\n    transaction_amount: 100,\n    description: 'Test',\n    payment_method_id: 'visa',\n    installments: 12,\n    token: '010466403607c1efc03205b75bd2f18e',\n    payer: {\n      email: 'test@testuser.com'\n    },\n    forward_data: {\n      sub_merchant: {\n        sub_merchant_id: '1234',\n        mcc: '12345',\n        country: 'BRA',\n        address_door_number: 123,\n        zip: '9876678',\n        document_number: '234567876543',\n        city: 'São Paulo',\n        address_street: 'Rua TESTE',\n        legal_name: 'legal',\n        region_code_iso: 'BR',\n        document_type: 'CNPJ',\n        phone: '123456789',\n        url: 'www.nomedofacilitador.com.br'\n      }\n    }\n  },\n  requestOptions: {\n    idempotencyKey: '234rw8ujdsfjawadfsa'\n  }\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Form with HTML and MercadoPago.js\nDESCRIPTION: This HTML form snippet captures buyer's personal details necessary for payment processing through MercadoPago.js. It includes fields for first name, last name, email, document type, and document number, with specific configurations for transaction amount and product description. Integrating this form with server-side processing, such as the '/process_payment' action endpoint, is required.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n\n  <form id=\"form-checkout\" action=\"/process_payment\" method=\"post\">\n    <div>\n      <div>\n        <label for=\"payerFirstName\">Nombre</label>\n        <input id=\"form-checkout__payerFirstName\" name=\"payerFirstName\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"payerLastName\">Apellido</label>\n        <input id=\"form-checkout__payerLastName\" name=\"payerLastName\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"email\">E-mail</label>\n        <input id=\"form-checkout__email\" name=\"email\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"identificationType\">Tipo de documento</label>\n        <select id=\"form-checkout__identificationType\" name=\"identificationType\" type=\"text\"></select>\n      </div>\n      <div>\n        <label for=\"identificationNumber\">Número del documento</label>\n        <input id=\"form-checkout__identificationNumber\" name=\"identificationNumber\" type=\"text\">\n      </div>\n    </div>\n\n    <div>\n      <div>\n        <input type=\"hidden\" name=\"transactionAmount\" id=\"transactionAmount\" value=\"100\">\n        <input type=\"hidden\" name=\"description\" id=\"description\" value=\"Nome do Produto\">\n        <br>\n        <button type=\"submit\">Pagar</button>\n      </div>\n    </div>\n  </form>\n\n```\n\n----------------------------------------\n\nTITLE: Saving Customer Card in Mercado Pago with Node.js\nDESCRIPTION: Creates a reference to a customer's card in Mercado Pago's servers. Requires an access token, customer ID, and a valid card token. This stores card data securely for future transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/cards.en.md#2025-04-18_snippet_0\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerCard = new CustomerCard(client);\n\ncustomerCard.create({ customerId: '<CUSTOMER_ID>', body: {\n\ttoken: '<TOKEN>',\n} }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Listing Customer Cards with Curl\nDESCRIPTION: Retrieves the list of customer cards using a curl command. It sends a GET request to the specified endpoint with the customer ID and an authorization header containing the access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/get-cards-list.en.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n'https://api.mercadopago.com/v1/customers/CUSTOMER_ID/cards' \\\n```\n\n----------------------------------------\n\nTITLE: Searching Payments with MercadoPago Node.js SDK\nDESCRIPTION: This snippet shows how to search for payments made in the last twelve months using the MercadoPago Node.js SDK. It allows sorting, filtering by criteria, and searching by external reference ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/create-payments.en.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\n\nconst payment = new Payment(client);\n\npayment.search({ options: {\n\tcriteria: 'desc',\n      sort: 'date_created',\n      external_reference: 'ID_REF'\n} })\n.then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creando un pago con Fintoc en PHP\nDESCRIPTION: Este snippet muestra cómo crear un pago usando Fintoc como método de pago en PHP. Configura el cliente de Mercado Pago, define los detalles del pago y realiza la solicitud.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-simplified.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nMercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n    \n$client = new PaymentClient();\n\n$createRequest = [\n  \"description\" => \"Titulo del producto\",\n  \"payer\" => [\n     \"email\" => \"test_user_123@testuser.com\",\n  ],\n  \"payment_method_id\" => \"fintoc\",\n  \"transaction_amount\" => 5000,\n  \"callback_url\" => \"https://www.your-site.com\",\n  \"point_of_interaction\" => [\n    \"type\" => \"CHECKOUT\",\n    \"sub_type\" => \"INTER_PSP\"\n  ]\n];\n\n    $client->create($createRequest, $request_options);\n```\n\n----------------------------------------\n\nTITLE: Render Status Screen Brick for Challenge Flow in JavaScript\nDESCRIPTION: This code snippet details how to render a Status Screen Brick using the BricksBuilder object. It configures the screen for displaying 3DS Challenge prompted by card issuing banks. It initializes the screen with payment ID and additional 3DS info like 'externalResourceURL' and 'creq'. It handles errors via callbacks but requires 'bricksBuilder' to be instantiated.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/how-to-integrate-3ds.en.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst renderStatusScreenBrick = async (bricksBuilder) => {\n const settings = {\n   initialization: {\n     paymentId: \"<PAYMENT_ID>\", // payment id to be displayed\n     additionalInfo: {\n       externalResourceURL: \"<EXTERNAL_RESOURCE_URL>\",\n       creq: \"<C_REQ>\",\n     },\n   },\n   callbacks: {\n     onReady: () => {},\n     onError: (error) => {\n       console.error(error);\n     },\n   },\n };\n window.statusScreenBrickController = await bricksBuilder.create(\n   \"statusScreen\",\n   \"statusScreenBrick_container\",\n   settings\n );\n};\nrenderStatusScreenBrick(bricksBuilder);\n```\n\n----------------------------------------\n\nTITLE: Creating Pix Payments with Java SDK\nDESCRIPTION: Java implementation for creating Pix payments using Mercado Pago's SDK. It demonstrates setting up custom headers with an idempotency key, configuring the access token, and creating a payment request with transaction amount, payment method, and payer details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pix.es.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest paymentCreateRequest =\n   PaymentCreateRequest.builder()\n       .transactionAmount(new BigDecimal(\"100\"))\n       .paymentMethodId(\"pix\")\n       .payer(\n           PaymentPayerRequest.builder()\n               .email(\"PAYER_EMAIL_HERE\")\n               .build())\n       .build();\n\nclient.create(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Processing Card Payments with Java for MLM using MercadoPago SDK\nDESCRIPTION: This Java code for Mexico shows how to create a payment using MercadoPago's SDK. It sets up an idempotency key as a custom header, configures the access token, and creates a payment with transaction details, token, description, installments, payment method, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-cards.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest paymentCreateRequest =\n   PaymentCreateRequest.builder()\n       .transactionAmount(request.getTransactionAmount())\n       .token(request.getToken())\n       .description(request.getDescription())\n       .installments(request.getInstallments())\n       .paymentMethodId(request.getPaymentMethodId())\n       .payer(\n           PaymentPayerRequest.builder()\n               .email(request.getPayer().getEmail())\n               .firstName(request.getPayer().getFirstName())\n               .identification(\n                   IdentificationRequest.builder()\n                       .number(request.getPayer().getIdentification().getNumber())\n                       .build())\n               .build())\n       .build();\n\nclient.create(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Embedding Mercado Pago Payment Button\nDESCRIPTION: This code snippet embeds a Mercado Pago payment button into your website. It includes a script tag that loads the Mercado Pago web payment checkout JavaScript library and configures it with your preference ID.  The `data-preference-id` attribute should be replaced with your actual preference ID obtained from Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/payment-link/share-website.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com.ar/integrations/v1/web-payment-checkout.js\"\ndata-preference-id=\"1273324264-f92cada3-65b7-4a53-a55b-af7cfb015eb6\" data-source=\"button\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Extracting Signature from Header for HMAC Validation - Python\nDESCRIPTION: This Python snippet demonstrates how to access the x-signature and x-request-id from notification headers, parse the x-signature to extract timestamp and hash values, and validate these against a generated HMAC using the specified secret key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport hashlib\nimport hmac\nimport urllib.parse\n\n# Obtain the x-signature value from the header\nxSignature = request.headers.get(\"x-signature\")\nxRequestId = request.headers.get(\"x-request-id\")\n\n# Obtain Query params related to the request URL\nqueryParams = urllib.parse.parse_qs(request.url.query)\n\n# Extract the \"data.id\" from the query params\ndataID = queryParams.get(\"data.id\", [\"\"])[0]\n\n# Separating the x-signature into parts\nparts = xSignature.split(\",\")\n\n# Initializing variables to store ts and hash\nts = None\nhash = None\n\n# Iterate over the values to obtain ts and v1\nfor part in parts:\n    # Split each part into key and value\n    keyValue = part.split(\"=\", 1)\n    if len(keyValue) == 2:\n        key = keyValue[0].strip()\n        value = keyValue[1].strip()\n        if key == \"ts\":\n            ts = value\n        elif key == \"v1\":\n            hash = value\n\n# Obtain the secret key for the user/application from Mercadopago developers site\nsecret = \"your_secret_key_here\"\n\n# Generate the manifest string\nmanifest = f\"id:{dataID};request-id:{xRequestId};ts:{ts};\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Status Screen Brick in React\nDESCRIPTION: React JSX code for initializing the Status Screen Brick component. It defines the initialization object with payment ID and callback functions for error handling and ready state.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/status-screen-brick/default-rendering.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst initialization = {\n paymentId: '<PAYMENT_ID>', // payment id to show\n};\nconst onError = async (error) => {\n // callback called for all Brick error cases\n console.log(error);\n};\nconst onReady = async () => {\n /*\n   Callback called when Brick is ready.\n   Here you can hide loadings from your site, for example.\n */\n};\n```\n\n----------------------------------------\n\nTITLE: Adding a Card to a Customer with cURL\nDESCRIPTION: This cURL example demonstrates how to add a card to a customer using direct API calls. It includes two requests: one to get existing cards and another to add a new card by providing the token, issuer information, and payment method ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n  -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n  'https://api.mercadopago.com/v1/customers/CUSTOMER_ID/cards' \\\n\ncurl -X POST \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/customers/CUSTOMER_ID/cards' \\\n    -d '{\"token\": \"9b2d63e00d66a8c721607214cedaecda\", \"issuer\": {\"id\": \"3245612\"}, \"payment_method_id\":\"debit_card\"}'\n```\n\n----------------------------------------\n\nTITLE: Creating MercadoPago Preference with Multiple Items in Java\nDESCRIPTION: This Java example shows how to create a MercadoPago preference with multiple items. It initializes a PreferenceClient, creates two product items with different properties, adds them to a list, and then creates and submits the preference request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n// Crea un objeto preferencia\nPreferenceClient client = new PreferenceClient();\n// Crea ítems en la preferencia\nList<PreferenceItemRequest> items = new ArrayList<>();\n\nPreferenceItemRequest item1 =\n   PreferenceItemRequest.builder()\n       .id(\"1234\")\n       .title(\"Produto 1\")\n       .quantity(2)\n       .currencyId(\"BRL\")\n       .unitPrice(new BigDecimal(\"100\"))\n       .build();   \nPreferenceItemRequest item2 =\n   PreferenceItemRequest.builder()\n       .id(\"12\")\n       .title(\"Produto 2\")\n       .quantity(1)\n       .currencyId(\"BRL\")\n       .unitPrice(new BigDecimal(\"100\"))\n       .build();\n\nitems.add(item1);\nitems.add(item2);\n\nPreferenceRequest request = PreferenceRequest.builder().items(items).build();\n// Guardar y postear la preferencia\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Installing Mercado Pago SDK with Maven\nDESCRIPTION: This XML snippet demonstrates how to add the Mercado Pago SDK as a dependency to a Java project using Maven. Maven is a build automation tool primarily used for Java projects.  Adding this dependency to your `pom.xml` file and running `mvn install` will download and include the Mercado Pago SDK in your project.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-development-environment.es.md#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n\"<dependency>\n   <groupId>com.mercadopago</groupId>\n   <artifactId>sdk-java</artifactId>\n   <version>2.1.7</version>\n</dependency>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Money Transfer Payment with Email\nDESCRIPTION: API request example for creating a money transfer payment using recipient's email address.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/money-transfer.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n$ curl https://api.mercadopago.com/v1/payments \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Cache-Control: no-cache' \\\n  -H 'Authorization: Bearer ACCESS_TOKEN' \\\n  -d '\n  {\n\t\"transaction_amount\": 100,\n\t\"operation_type\": \"money_transfer\",\n\t\"description\": \"Title of what you are paying for\",\n\t\"installments\": 1,\n\t\"marketplace\": \"NONE\",\n\t\"payment_method_id\": \"account_money\",\n\t\"collector\": {\n\t\t\"email\": \"test_user_50345633@testuser.com\"\n\t},\n\t\"external_reference\": \"Reference_1234\",\n\t\"notification_url\": \"https://www.your-site.com/webhooks\",\n}'\n```\n\n----------------------------------------\n\nTITLE: Incluindo a biblioteca Mercado Pago via tag script HTML\nDESCRIPTION: Adiciona a biblioteca JavaScript do Mercado Pago ao projeto usando uma tag script HTML. Isso permite o acesso às funcionalidades do Mercado Pago no frontend com segurança.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/common-initialization.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n// O código JS pode ser incluído em uma tag < script > ou um arquivo JS separado.\n<script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n```\n\n----------------------------------------\n\nTITLE: Verifying HMAC signature in Go\nDESCRIPTION: This Go snippet showcases how to verify an HMAC signature for Mercado Pago notifications within a HTTP handler. It extracts the x-signature and x-request-id from the header, retrieves 'data.id' from the query parameters, parses the x-signature to obtain the timestamp and hash, then constructs a manifest string. It then generates an HMAC SHA256 signature using the secret and compares the generated signature with the provided hash.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.es.md#2025-04-18_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n\"import (\n\t\\\"crypto/hmac\\\"\n\t\\\"crypto/sha256\\\"\n\t\\\"encoding/hex\\\"\n\t\\\"fmt\\\"\n\t\\\"net/http\\\"\n\t\\\"strings\\\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\\\"/\\\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// Obtain the x-signature value from the header\n\t\txSignature := r.Header.Get(\\\"x-signature\\\")\n\t\txRequestId := r.Header.Get(\\\"x-request-id\\\")\n\n\t\t// Obtain Query params related to the request URL\n\t\tqueryParams := r.URL.Query()\n\n\t\t// Extract the \\\"data.id\\\" from the query params\n\t\tdataID := queryParams.Get(\\\"data.id\\\")\n\n\t\t// Separating the x-signature into parts\n\t\tparts := strings.Split(xSignature, \\\",\\\")\n\n\t\t// Initializing variables to store ts and hash\n\t\tvar ts, hash string\n\n\t\t// Iterate over the values to obtain ts and v1\n\t\tfor _, part := range parts {\n\t\t\t// Split each part into key and value\n\t\t\tkeyValue := strings.SplitN(part, \\\"=\\\", 2)\n\t\t\tif len(keyValue) == 2 {\n\t\t\t\tkey := strings.TrimSpace(keyValue[0])\n\t\t\t\tvalue := strings.TrimSpace(keyValue[1])\n\t\t\t\tif key == \\\"ts\\\" {\n\t\t\t\t\tts = value\n\t\t\t\t} else if key == \\\"v1\\\" {\n\t\t\t\t\thash = value\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Get secret key/token for specific user/application from Mercadopago developers site\n\t\tsecret := \\\"your_secret_key_here\\\"\n\n\t\t// Generate the manifest string\n\t\tmanifest := fmt.Sprintf(\\\"id:%v;request-id:%v;ts:%v;\\\", dataID, xRequestId, ts)\n\n\t\t// Create an HMAC signature defining the hash type and the key as a byte array\n\t\thmac := hmac.New(sha256.New, []byte(secret))\n\t\thmac.Write([]byte(manifest))\n\n\t\t// Obtain the hash result as a hexadecimal string\n\t\tsha := hex.EncodeToString(hmac.Sum(nil))\n\nif sha == hash {\n    // HMAC verification passed\n    fmt.Println(\\\"HMAC verification passed\\\")\n} else {\n    // HMAC verification failed\n    fmt.Println(\\\"HMAC verification failed\\\")\n}\n\n\t})\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with C# SDK in Mercado Pago\nDESCRIPTION: C# implementation for processing payments with Mercado Pago's SDK. This code configures the SDK with an access token, sets custom headers with idempotency key, creates a payment request with transaction details, and processes the payment asynchronously.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.en.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n \nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n \nvar paymentRequest = new PaymentCreateRequest\n{\n   TransactionAmount = decimal.Parse(Request[\"transactionAmount\"]),\n   Token = Request[\"token\"],\n   Description = Request[\"description\"],\n   Installments = int.Parse(Request[\"installments\"]),\n   PaymentMethodId = Request[\"paymentMethodId\"],\n   Payer = new PaymentPayerRequest\n   {\n       Email = Request[\"email\"],\n       Identification = new IdentificationRequest\n       {\n           Type = Request[\"identificationType\"],\n           Number = Request[\"identificationNumber\"],\n       },\n   },\n};\n \nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest, requestOptions);\n \nConsole.WriteLine(payment.Status);\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkout Pro Redirect Mode with React\nDESCRIPTION: React component implementation of Checkout Pro wallet using redirect mode to open in a new page.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/opening-schema.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react\nCODE:\n```\n<Wallet initialization={{ preferenceId: '<PREFERENCE_ID>', redirectMode: 'blank' }} />\n```\n\n----------------------------------------\n\nTITLE: Updating Customer with MercadoPago SDK in Node.js\nDESCRIPTION: This code example details how to update customer information using the MercadoPago SDK in Node.js. Dependencies include the MercadoPagoConfig and Customer classes and an access token. The input encompasses various updated customer details, and the snippet outputs the update response from the SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/customers.en.md#2025-04-18_snippet_3\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerClient = new Customer(client);\n\nconst customerRequest = {\n\temail: 'jhon@doe.com',\n\tfirst_name: 'Jhon',\n\tlast_name: 'Doe',\n\tphone: {\n\t\tarea_code: '55',\n\t\tnumber: '991234567'\n\t},\n\tidentification: {\n\t\ttype: 'CPF',\n\t\tnumber: '12345678900'\n\t},\n\tdefault_address: 'Home',\n\taddress: {\n\t\tid: '123123',\n\t\tzip_code: '01234567',\n\t\tstreet_name: 'Rua Exemplo',\n\t\tstreet_number: '123',\n\t\tcity: {}\n\t},\n\tdate_registered: '2021-10-20T11:37:30.000-04:00',\n\tdescription: 'Description del user',\n\tdefault_card: 'None'\n};\n\ncustomerClient.update({ customerId: '247711297-jxOV430go9fx2e', body: customerRequest,\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Request - Multiple Languages\nDESCRIPTION: Code examples for creating a payment request using Mercado Pago's API across different programming languages. Includes transaction amount, payment method, and payer information with proper idempotency key handling.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['<TRANSACTION_AMOUNT>'],\n    \"payment_method_id\" => $_POST['<PAYMENT_METHOD_ID>'],\n    \"payer\" => [\n      \"email\" => $_POST['<EMAIL>']\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, Payments } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<YOUR_ACCESS_TOKEN>' });\nconst payments = new Payments(client);\n\npayments.create({\nbody: {\n\t\ttransaction_amount: '<TRANSACTION_AMOUNT>',\n\t\tpayment_method_id: '<PAYMENT_METHOD_ID>',\n\t\tpayer: {\n\t\t\temail: '<EMAIL>'\n\t\t\t}\n},\n\trequestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n\t.then((result) => console.log(result))\n\t.catch((error) => console.log(error));\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n{\n...,\n\"id\": 5466310457,\n\"status\": \"pending\",\n\"status_detail\": \"pending_waiting_payment\",\n...,\n\"transaction_details\": {\n\"payment_method_reference_id\": \"24308188\",\n\"verification_code\": \"24308188\",\n\"net_received_amount\": 0,\n\"total_paid_amount\": 100,\n\"overpaid_amount\": 0,\n\"external_resource_url\": \"https://www.mercadopago.com/mlu/payments/sandbox/ticket/helper?payment_id=1234&payment_method_reference_id=12345678&caller_id=1234&hash=aaaaaa-bbb-cccc-dddd-eeeeeeee\",\n\"installment_amount\": 0,\n\"financial_institution\": \"\",\n\"payable_deferral_period\": null,\n\"acquirer_reference\": null\n}\n}\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment with MercadoPago SDK (Java)\nDESCRIPTION: This Java snippet initializes a payment using the MercadoPago SDK. It sets the access token, defines payment parameters such as transaction amount, token, description, installments, payment method ID, issuer ID, and payer email. It then saves the payment and prints its status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.es.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMercadoPago.SDK.setAccessToken(\"ENV_ACCESS_TOKEN\");\n//...\nPayment payment = new Payment();\npayment.setTransactionAmount(100f)\n       .setToken(token)\n       .setDescription(\"Blue shirt\")\n       .setInstallments(installments)\n       .setPaymentMethodId(payment_method_id)\n       .setIssuerId(issuer_id)\n       .setPayer(new Payer()\n         .setEmail(\"john@yourdomain.com\"));\n// Save and create the payment\npayment.save();\n//...\n// Shows payment stauts\nSystem.out.println(payment.getStatus());\n//...\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference in Multiple Languages\nDESCRIPTION: Examples of creating a payment preference object using Mercado Pago SDK across different programming languages. The code demonstrates setting up basic item details including title, quantity, and unit price.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-preferences.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$client = new PreferenceClient();\n$preference = $client->create([\n  \"items\"=> array(\n    array(\n      \"title\" => \"My product\",\n      \"quantity\" => 1,\n      \"unit_price\" => 2000\n    )\n  )\n]);\n\necho $preference\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nconst preference = new Preference(client);\n\npreference.create({\n  body: {\n    items: [\n      {\n        title: 'My product',\n        quantity: 1,\n        unit_price: 2000\n      }\n    ],\n  }\n})\n.then(console.log)\n.catch(console.log);\n```\n\nLANGUAGE: java\nCODE:\n```\nPreferenceItemRequest itemRequest =\n       PreferenceItemRequest.builder()\n           .id(\"1234\")\n           .title(\"Games\")\n           .description(\"PS5\")\n           .pictureUrl(\"http://picture.com/PS5\")\n           .categoryId(\"games\")\n           .quantity(2)\n           .currencyId(\"BRL\")\n           .unitPrice(new BigDecimal(\"4000\"))\n           .build();\n   List<PreferenceItemRequest> items = new ArrayList<>();\n   items.add(itemRequest);\nPreferenceRequest preferenceRequest = PreferenceRequest.builder()\n.items(items).build();\nPreferenceClient client = new PreferenceClient();\nPreference preference = client.create(request);\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Create a preference object\npreference_data = {\n  items: [\n    {\n      title: 'My product',\n      unit_price: 75.56,\n      quantity: 1\n    }\n  ]\n}\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n\n# This value will replace the string \"<%= @preference_id %>\" in your HTML\n@preference_id = preference['id']\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Create the preference request object\nvar request = new PreferenceRequest\n{\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"My product\",\n            Quantity = 1,\n            CurrencyId = \"ARS\",\n            UnitPrice = 75.56m,\n        },\n    },\n};\n\n// Create the preference using the client\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\nLANGUAGE: python\nCODE:\n```\n# Create an item in the preference\npreference_data = {\n    \"items\": [\n        {\n            \"title\": \"My product\",\n            \"quantity\": 1,\n            \"unit_price\": 75.76,\n        }\n    ]\n}\n\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\nLANGUAGE: go\nCODE:\n```\nclient := preference.NewClient(cfg)\n\nrequest := preference.Request{\n\tItems: []preference.ItemRequest{\n\t\t{\n\t\t\tTitle:       \"My product\",\n\t\t\tQuantity:    1,\n\t\t\tUnitPrice:   75.76,\n\t\t},\n\t},\n}\n\nresource, err := client.Create(context.Background(), request)\nif err != nil {\n\tfmt.Println(err)\n\treturn\n}\n\nfmt.Println(resource)\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with Reserved Values in Go\nDESCRIPTION: Implements a payment with capture=false using Mercado Pago's Go SDK. Creates a payment request with transaction amount, token, payment method, and payer information to reserve value without immediate capture.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/make-value-reserve.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\naccessToken := \"{{ACCESS_TOKEN}}\"\n\n\ncfg, err := config.New(accessToken)\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nclient := payment.NewClient(cfg)\n\n\nrequest := payment.Request{\n   TransactionAmount: 100,\n   Token: \"ff8080814c11e237014c1ff593b57b4d\",\n   Description: \"My product\",\n   Installments: 1,\n   PaymentMethodID:  \"visa\",\n      Payer: &payment.PayerRequest{\n      Email: \"test_user_12345@testuser.com\",\n      Identification: &payment.IdentificationRequest{\n         Type: \"CPF\",\n         Number: \"01234567890\",\n      },\n   },\n   Capture: false,\n}\n\n\nresource, err := client.Create(context.Background(), request)\nif err != nil {\n   fmt.Println(err)\n}\n\n\nfmt.Println(resource)\n```\n\n----------------------------------------\n\nTITLE: Validating Mercado Pago Notification Signature in Python\nDESCRIPTION: This Python code snippet validates a Mercado Pago notification signature. It retrieves the x-signature and x-request-id headers, extracts the data.id query parameter from the URL, parses the x-signature header, calculates an HMAC-SHA256 hash using a secret key, and compares the calculated hash to the extracted hash.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/notifications.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport hashlib\nimport hmac\nimport urllib.parse\n\n# Obtain the x-signature value from the header\nxSignature = request.headers.get(\"x-signature\")\nxRequestId = request.headers.get(\"x-request-id\")\n\n# Obtain Query params related to the request URL\nqueryParams = urllib.parse.parse_qs(request.url.query)\n\n# Extract the \"data.id\" from the query params\ndataID = queryParams.get(\"data.id\", [\"\"])[0]\n\n# Separating the x-signature into parts\nparts = xSignature.split(\",\")\n\n# Initializing variables to store ts and hash\nts = None\nhash = None\n\n# Iterate over the values to obtain ts and v1\nfor part in parts:\n    # Split each part into key and value\n    keyValue = part.split(\"=\", 1)\n    if len(keyValue) == 2:\n        key = keyValue[0].strip()\n        value = keyValue[1].strip()\n        if key == \"ts\":\n            ts = value\n        elif key == \"v1\":\n            hash = value\n\n# Obtain the secret key for the user/application from Mercadopago developers site\nsecret = \"your_secret_key_here\"\n\n# Generate the manifest string\nmanifest = f\"id:{dataID};request-id:{xRequestId};ts:{ts};\"\n\n# Create an HMAC signature defining the hash type and the key as a byte array\nhmac_obj = hmac.new(secret.encode(), msg=manifest.encode(), digestmod=hashlib.sha256)\n\n```\n\n----------------------------------------\n\nTITLE: Searching Preferences using Filters - Java\nDESCRIPTION: This snippet shows how to search for payment preferences with specific filters using the Mercado Pago Java SDK. It involves setting up a `MPSearchRequest` with various filter parameters like `sponsor_id` and `marketplace`, and requesting the data through `PreferenceClient.search()`. Dependencies include the Mercado Pago SDK. It can limit results with `limit` and `offset` parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/preferences.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n\nPreferenceClient client = new PreferenceClient();\n\nMap<String, Object> filters = new HashMap<>();\nfilters.put(\"sponsor_id\", \"undefined\");\nfilters.put(\"external_reference\", \"undefined\");\nfilters.put(\"site_id\", \"undefined\");\nfilters.put(\"marketplace\", \"undefined\");\n\nMPSearchRequest searchRequest =\n   MPSearchRequest.builder().limit(0).offset(0).filters(filters).build();\n\nclient.search(searchRequest);\n\n```\n\n----------------------------------------\n\nTITLE: Creating PagoEfectivo Payment with Mercado Pago SDK (Java)\nDESCRIPTION: This Java code snippet demonstrates how to create a PagoEfectivo payment using the Mercado Pago SDK. It builds the payment request, sets custom headers for idempotency, and uses the PaymentClient to create the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_32\n\nLANGUAGE: java\nCODE:\n```\nPaymentCreateRequest paymentCreateRequest = PaymentCreateRequest.builder()\n          .transactionAmount(new BigDecimal(\"<TRANSACTION_AMOUNT>\"))\n          .paymentMethodId(\"<PAYMENT_METHOD_ID>\")\n          .payer(\n              PaymentPayerRequest.builder()\n                  .email(\"<EMAIL>\").build()\n          ).build();\n\nMap<String, String> customHeaders = new HashMap<>();\ncustomHeaders.put(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n\nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders).build();\n\nPaymentClient client = new PaymentClient();\nclient.create(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Obtaining Access Token using PHP in Mercado Pago API\nDESCRIPTION: This PHP code demonstrates how to obtain an Access Token using the OAuthClient. It requires client secret, client ID, authorization code, and redirect URI.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/creation.es.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new OauthClient();\n   $request = new OAuthCreateRequest();\n     $request->client_secret = \"CLIENT_SECRET\";\n     $request->client_id = \"CLIENT_ID\";\n     $request->code = \"CODE\";\n     $request->redirect_uri = \"REDIRECT_URI\";\n\n  $client->create($request);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Bancário Payment with Go\nDESCRIPTION: This Go code snippet demonstrates how to create a boleto bancário payment using Mercado Pago's SDK. It configures the client with an access token, creates a payment request with transaction details and payer information, and sends the request to create the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_12\n\nLANGUAGE: go\nCODE:\n```\naccessToken := \"{{ACCESS_TOKEN}}\"\n\n\ncfg, err := config.New(accessToken)\nif err != nil {\n  fmt.Println(err)\n  return\n}\n\nclient := payment.NewClient(cfg)\n\n\nrequest := payment.Request{\n   TransactionAmount: 105,\n   PaymentMethodID:   \"bolbradesco\",\n   Payer: &payment.PayerRequest{\n      Email:     \"{{EMAIL}}\",\n      FirstName: \"{{NOME}}\",\n      LastName:  \"{{SOBRENOME}}\",\n      Identification: &payment.IdentificationRequest{\n         Type:   \"{{TIPO DO DOCUMENTO}}\",\n         Number: \"{{NUMERO}}\",\n      },\n      Address: &payment.AddressRequest{\n         ZipCode:      \"06233-200\",\n         City:         \"Osasco\",\n         Neighborhood: \"Bonfim\",\n         StreetName:   \"Av. das Nações Unidas\",\n         StreetNumber: \"3003\",\n         FederalUnit:  \"SP\",\n      },\n   },\n}\n\n\nresource, err := client.Create(context.Background(), request)\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nfmt.Println(resource)\n```\n\n----------------------------------------\n\nTITLE: Configuring Item Details for MercadoPago Payments\nDESCRIPTION: This code snippet shows how to set up item details for MercadoPago payments. It includes information such as item ID, title, quantity, currency, and unit price. The code is available in multiple programming languages.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.en.md#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $item = new MercadoPago\\Item();\n  $item->id = \"1234\";\n  $item->title = \"Heavy Duty Plastic Table\";\n  $item->quantity = 7;\n  $item->currency_id = \"[FAKER][CURRENCY][ACRONYM]\";\n  $item->unit_price = 75.56;\n  // ...\n?>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nitems: [\n    {\n      id: '1234',\n      title: 'Lightweight Paper Table',\n      quantity: 3,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 55.41\n    }\n  ]// ...\n```\n\nLANGUAGE: java\nCODE:\n```\n// ...\nItem item = new Item();\nitem.setId(\"1234\")\n    .setTitle(\"Lightweight Paper Table\")\n    .setQuantity(3)\n    .setCurrencyId(\"[FAKER][CURRENCY][ACRONYM]\")\n    .setUnitPrice((float) 55.41);\n// ...\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# ...\nitem = {\n  id: \"1234\",\n  title: \"Lightweight Paper Table\",\n  quantity: 3,\n  currency_id: \"[FAKER][CURRENCY][ACRONYM]\",\n  unit_price: 55.41\n}# ...\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// ...\nvar request = new PreferenceRequest\n{\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Id = \"1234\",\n            Title = \"Lightweight Paper Table\",\n            Quantity = 3,\n            CurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\n            UnitPrice = 55.41m,\n        }\n    },\n};\n// ...\n```\n\nLANGUAGE: python\nCODE:\n```\n# ...\npreference_data = {\n    \"items\": [\n        {\n            \"id\": '1234',\n            \"title\": 'Lightweight Paper Table',\n            \"quantity\": 3,\n            \"currency_id\": '[FAKER][CURRENCY][ACRONYM]',\n            \"unit_price\": 55.41\n        }\n    ]\n    # ...\n}\n# ...\n```\n\n----------------------------------------\n\nTITLE: Adding a Card to a Customer with Java\nDESCRIPTION: This Java implementation adds a new card to a customer using Mercado Pago's Java SDK. It first retrieves the customer by ID, then constructs a card creation request with the card token, issuer information, and payment method ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nCustomerClient customerClient = new CustomerClient();\nCustomerCardClient customerCardClient = new CustomerCardClient();\n\nCustomer customer = customerClient.get(\"247711297-jxOV430go9fx2e\");\n\nCustomerCardIssuer issuer = CustomerCardIssuer.builder()\n   .id(\"3245612\")\n   .build();\n\nCustomerCardCreateRequest cardCreateRequest = CustomerCardCreateRequest.builder()\n   .token(\"9b2d63e00d66a8c721607214cedaecda\")\n   .issuer(issuer)\n   .paymentMethodId(\"debit_card\")\n   .build();\n\ncustomerCardClient.create(customer.getId(), cardCreateRequest);\n```\n\n----------------------------------------\n\nTITLE: Setting Back URLs and Auto Return in Mercado Pago with Python\nDESCRIPTION: This code snippet demonstrates how to set the `back_urls` and `auto_return` attributes in Python. The `back_urls` dictionary defines the URLs for successful, failed, and pending payments, and `auto_return` enables automatic redirection for approved payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/redirection.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npreference_data = {\n    \"back_urls\": {\n        \"success\": \"https://www.tu-sitio/success\",\n        \"failure\": \"https://www.tu-sitio/failure\",\n        \"pending\": \"https://www.tu-sitio/pendings\"\n    },\n    \"auto_return\": \"approved\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating HMAC Signature in Python\nDESCRIPTION: Code snippet demonstrating how to generate an HMAC-SHA256 signature in Python using the hmac and hashlib modules.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.es.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport hashlib, hmac, binascii\n\ncyphedSignature = binascii.hexlify(hmac_sha256(secret.encode(), signedTemplate.encode()))\n```\n\n----------------------------------------\n\nTITLE: Payment Response Structure\nDESCRIPTION: Example of a successful payment response from Mercado Pago's API showing all payment details, transaction information, and card data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.en.md#2025-04-18_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 3637181430,\n    \"date_created\": \"2018-04-17T09:26:39.000-04:00\",\n    \"date_approved\": \"2018-04-17T09:26:40.000-04:00\",\n    \"date_last_updated\": \"2018-04-17T09:26:40.000-04:00\",\n    \"date_of_expiration\": null,\n    \"money_release_date\": \"2018-04-29T09:26:40.000-04:00\",\n    \"operation_type\": \"regular_payment\",\n    \"issuer_id\": \"160\",\n    \"payment_method_id\": \"visa\",\n    \"payment_type_id\": \"credit_card\",\n    \"status\": \"approved\",\n    \"status_detail\": \"accredited\",\n    \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n    \"description\": \"Title of what you are paying for\",\n    \"live_mode\": true,\n    \"sponsor_id\": null,\n    \"authorization_code\": \"1234567\",\n    \"money_release_schema\": null,\n    \"counter_currency\": {\n        \"currency_id\": \"USD\",\n        \"rate\": 18.22539135,\n        \"amount\": 4.99,\n        \"amount_refunded\": 0\n    },\n    \"collector_id\": 307467332,\n    \"payer\": {\n        \"type\": \"guest\",\n        \"id\": null,\n        \"email\": \"test_user_33759716@testuser.com\",\n        \"identification\": {\n            \"type\": \"RFC\",\n            \"number\": \"800825569\"\n        },\n        \"phone\": {\n            \"area_code\": \"01\",\n            \"number\": \"1111-1111\",\n            \"extension\": \"\"\n        },\n        \"first_name\": \"Test\",\n        \"last_name\": \"Test\",\n        \"entity_type\": null\n    },\n    \"metadata\": {\n        \"key2\": \"value2\",\n        \"key1\": \"value1\"\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"item-ID-1234\",\n                \"title\": \"Title of what you are paying for\",\n                \"description\": \"Item description\",\n                \"picture_url\": \"https://www.mercadopago.com/org-img/MP3/home/logomp3.gif\",\n                \"category_id\": \"others\",\n                \"quantity\": \"1\",\n                \"unit_price\": \"100\"\n            }\n        ],\n        \"payer\": {\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"4444-4444\"\n            },\n            \"address\": {\n                \"zip_code\": \"5700\",\n                \"street_name\": \"Street\",\n                \"street_number\": \"123\"\n            },\n            \"first_name\": \"user-name\",\n            \"last_name\": \"user-surname\"\n        },\n        \"shipments\": {\n            \"receiver_address\": {\n                \"zip_code\": \"5700\",\n                \"street_name\": \"Street\",\n                \"street_number\": \"123\",\n                \"floor\": \"4\",\n                \"apartment\": \"C\"\n            }\n        }\n    },\n    \"order\": {},\n    \"external_reference\": \"Reference_1234\",\n    \"transaction_amount\": 100,\n    \"transaction_amount_refunded\": 0,\n    \"coupon_amount\": 0,\n    \"differential_pricing_id\": null,\n    \"deduction_schema\": null,\n    \"transaction_details\": {\n        \"net_received_amount\": 90.96,\n        \"total_paid_amount\": 100,\n        \"overpaid_amount\": 0,\n        \"external_resource_url\": null,\n        \"installment_amount\": 100,\n        \"financial_institution\": null,\n        \"payment_method_reference_id\": \"1234567\",\n        \"payable_deferral_period\": null,\n        \"acquirer_reference\": null\n    },\n    \"fee_details\": [\n        {\n            \"type\": \"mercadopago_fee\",\n            \"amount\": 9.04,\n            \"fee_payer\": \"collector\"\n        }\n    ],\n    \"captured\": true,\n    \"binary_mode\": false,\n    \"call_for_authorize_id\": null,\n    \"statement_descriptor\": \"MERCADOPAGO\",\n    \"installments\": 1,\n    \"card\": {\n        \"id\": null,\n        \"first_six_digits\": \"494133\",\n        \"last_four_digits\": \"9283\",\n        \"expiration_month\": 12,\n        \"expiration_year\": 2020,\n        \"date_created\": \"2018-04-17T09:26:39.000-04:00\",\n        \"date_last_updated\": \"2018-04-17T09:26:39.000-04:00\",\n        \"cardholder\": {\n            \"name\": \"APRO\",\n            \"identification\": {\n                \"number\": null,\n                \"type\": null\n            }\n        }\n    },\n    \"notification_url\": \"https://www.your-site.com/webhooks\",\n    \"refunds\": [],\n    \"processing_mode\": \"aggregator\",\n    \"merchant_account_id\": null,\n    \"acquirer\": null,\n    \"merchant_number\": null,\n    \"acquirer_reconciliation\": []\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Webhook Signature Validation\nDESCRIPTION: JavaScript implementation for validating Mercado Pago webhook signatures using HMAC-SHA256, including header parsing and signature comparison.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.en.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Obtain the x-signature value from the header\nconst xSignature = headers['x-signature']; // Assuming headers is an object containing request headers\nconst xRequestId = headers['x-request-id']; // Assuming headers is an object containing request headers\n\n// Obtain Query params related to the request URL\nconst urlParams = new URLSearchParams(window.location.search);\nconst dataID = urlParams.get('data.id');\n\n// Separating the x-signature into parts\nconst parts = xSignature.split(',');\n\n// Initializing variables to store ts and hash\nlet ts;\nlet hash;\n\n// Iterate over the values to obtain ts and v1\nparts.forEach(part => {\n    // Split each part into key and value\n    const [key, value] = part.split('=');\n    if (key && value) {\n        const trimmedKey = key.trim();\n        const trimmedValue = value.trim();\n        if (trimmedKey === 'ts') {\n            ts = trimmedValue;\n        } else if (trimmedKey === 'v1') {\n            hash = trimmedValue;\n        }\n    }\n});\n\n// Obtain the secret key for the user/application from Mercadopago developers site\nconst secret = 'your_secret_key_here';\n\n// Generate the manifest string\nconst manifest = `id:${dataID};request-id:${xRequestId};ts:${ts};`;\n\n// Create an HMAC signature\nconst hmac = crypto.createHmac('sha256', secret);\nhmac.update(manifest);\n\n// Obtain the hash result as a hexadecimal string\nconst sha = hmac.digest('hex');\n\nif (sha === hash) {\n    // HMAC verification passed\n    console.log(\"HMAC verification passed\");\n} else {\n    // HMAC verification failed\n    console.log(\"HMAC verification failed\");\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Report Python\nDESCRIPTION: This Python snippet shows how to download a settlement report from MercadoPago using the Requests library and a GET request. An authorization header with a bearer token is required.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\nresponse = requests.get('https://api.mercadopago.com/v1/account/settlement_report/:file_name', headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Setting Return URLs in C# for Mercado Pago Checkout Pro\nDESCRIPTION: This C# code snippet shows how to set up return URLs and auto-return behavior for a Mercado Pago Checkout Pro preference. It creates a PreferenceRequest object with a nested PreferenceBackUrlsRequest to define URLs for different payment outcomes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-return-urls.en.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar request = new PreferenceRequest\n{\n    // ...\n    BackUrls = new PreferenceBackUrlsRequest\n    {\n        Success = \"https://www.tu-sitio/success\",\n        Failure = \"http://www.tu-sitio/failure\",\n        Pending = \"http://www.tu-sitio/pendings\",\n    },\n    AutoReturn = \"approved\",\n};\n```\n\n----------------------------------------\n\nTITLE: Launching Print with Simple HTML - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to launch the printer with a simple HTML string instead of a file path. The 'callbackResult' function includes error handling for the print operation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/point-smart-printer.es.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlaunchPrint(\"<html><head>...</head><body>...</body></html>\",      \n    callbackResult);\n\nfunction callbackResult(result, error) {\n   if (result == 'success') {\n       // Escribe el código con éxito aquí\n   } else {\n       //'error' tiene información de error detallada, como \"outOfPaper\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Pix Refunds with MercadoPago API in Python\nDESCRIPTION: Python implementation for refunding a payment using the MercadoPago SDK. This example shows how to set up custom headers including X-Render-In-Process-Refunds to better handle transactions in contingency status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsdk = mercadopago.SDK('YOUR_ACCESS_TOKEN')\n\nrefund_object = {\n   'amount': 20\n}\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n   'content-type': 'application/json',\n   'X-Render-In-Process-Refunds': 'true'\n}\n\nsdk.refund().create('payment_id', refund_object, request_options)\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Multiple Items - Java\nDESCRIPTION: This Java snippet shows how to create a MercadoPago preference with multiple items. It uses the PreferenceClient to create a preference request and builds item requests for each item, setting properties such as id, title, quantity, currency, and unit price.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n// Cria um objeto preferência\nPreferenceClient client = new PreferenceClient();\n// Cria itens na preferência\nPreferenceClient client = new PreferenceClient();\n\nList<PreferenceItemRequest> items = new ArrayList<>();\n\nPreferenceItemRequest item1 =\n   PreferenceItemRequest.builder()\n       .id(\"1234\")\n       .title(\"Produto 1\")\n       .quantity(2)\n       .currencyId(\"BRL\")\n       .unitPrice(new BigDecimal(\"100\"))\n       .build();   \nPreferenceItemRequest item2 =\n   PreferenceItemRequest.builder()\n       .id(\"12\")\n       .title(\"Produto 2\")\n       .quantity(1)\n       .currencyId(\"BRL\")\n       .unitPrice(new BigDecimal(\"100\"))\n       .build();\n\nitems.add(item1);\nitems.add(item2);\n\nPreferenceRequest request = PreferenceRequest.builder().items(items).build();\n// Salvar e postar a preferência\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Create Mercado Pago Payment with Boleto in Ruby\nDESCRIPTION: This code snippet demonstrates creating a payment using the Mercado Pago SDK in Ruby. It initializes the SDK with an access token and defines a `payment_request` hash with payment details, including transaction amount, description, payment method (bolbradesco), and payer information. The `sdk.payment.create` method sends the request, and the response is stored in the `payment` variable.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\npayment_request = {\n  transaction_amount: 100,\n  description: 'Título del producto',\n  payment_method_id: 'bolbradesco',\n  payer: {\n    email: 'test@test.com',\n    first_name: 'Test',\n    last_name: 'User',\n    identification: {\n      type: 'DNI',\n      number: '19119119',\n    },\n    address: {\n      zip_code: '1264',\n      street_name: 'Av. Caseros',\n      street_number: '3039',\n      neighborhood: 'Parque Patricios',\n      city: 'Buenos Aires',\n      federal_unit: 'BA'\n    }\n  }\n}\npayment_response = sdk.payment.create(payment_request)\npayment = payment_response[:response]\n\n```\n\n----------------------------------------\n\nTITLE: Reserving Payment Values with Mercado Pago in Python\nDESCRIPTION: Creates a payment with 'capture=false' to reserve the value on the card without completing the transaction. This Python implementation uses the Mercado Pago SDK to create a payment with the capture parameter set to False.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/make-value-reserve.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport market\nsdk = Mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\npayment_data = {\n\"transaction_amount\": 100,\n\"token\": 'ff8080814c11e237014c1ff593b57b4d',\n\"description\": \"Title of what you are paying for\",\n\"installations\": 1,\n\"payment_method_id\": \"visa\",\n\"payer\": {\n\"email\": \"test_user_19653727@testuser.com\"\n},\n\"capture\": False\n}\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Card Payment Brick in HTML\nDESCRIPTION: This snippet replaces the Web Tokenize Checkout container with a new container designated for the Card Payment Brick, which is part of the updated checkout system.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-clientside.en.md#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"paymentBrick_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Items in Java\nDESCRIPTION: This Java snippet demonstrates how to create a Mercado Pago preference with multiple items. It utilizes the MercadoPago Java SDK to create a preference request with a list of items, each defined with properties like id, title, quantity, currencyId, and unitPrice.  The preference is then created using the PreferenceClient.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/preference-multiple-items.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Cria um objeto preferência\nPreferenceClient client = new PreferenceClient();\n// Cria itens na preferência\nPreferenceClient client = new PreferenceClient();\n\nList<PreferenceItemRequest> items = new ArrayList<>();\n\nPreferenceItemRequest item1 =\n   PreferenceItemRequest.builder()\n       .id(\"1234\")\n       .title(\"Produto 1\")\n       .quantity(2)\n       .currencyId(\"BRL\")\n       .unitPrice(new BigDecimal(\"100\"))\n       .build();   \nPreferenceItemRequest item2 =\n   PreferenceItemRequest.builder()\n       .id(\"12\")\n       .title(\"Produto 2\")\n       .quantity(1)\n       .currencyId(\"BRL\")\n       .unitPrice(new BigDecimal(\"100\"))\n       .build();\n\nitems.add(item1);\nitems.add(item2);\n\nPreferenceRequest request = PreferenceRequest.builder().items(items).build();\n// Salvar e postar a preferência\nclient.create(request);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Installments in Card Payment Brick using JavaScript\nDESCRIPTION: This snippet demonstrates how to set minimum and maximum installment values for the Card Payment Brick component using JavaScript. The configuration is done through the 'customization.paymentMethods' object within the settings.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/max-and-min-installments.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n        paymentMethods: {\n            minInstallments: number,\n            maxInstallments: number,\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Fintoc Payment with MercadoPago Go SDK\nDESCRIPTION: Demonstrates how to create a Fintoc payment using the MercadoPago Go SDK, including setting up the client, payment request, and handling the API response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-advanced.en.md#2025-04-18_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/payment\"\n)\n\nfunc main() {\n\taccessToken := \"YOUR_ACCESS_TOKEN\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := payment.NewClient(cfg)\n\n\trequest := payment.Request{\n\t\tTransactionAmount: 5000,\n    Description: \"Product title\",\n\t\tPaymentMethodID:   \"fintoc\",\n\t\tPayer: &payment.PayerRequest{\n\t\t\tEmail: \"test_user_123@testuser.com\",\n\t\t},\n\t\tCallbackURL: \"https://www.your-site.com\",\n    PointOfInteraction: &payment.PointOfInteraction{\n    Type: \"CHECKOUT\",\n    SubType: \"INTER_PSP\",\n    }\n\t}\n\n\tresource, err := client.Create(context.Background(), request)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Secure Card Token with JavaScript\nDESCRIPTION: Function to create a secure card token from card information. The token is valid for 7 days, can be used only once, and enhances security during payment processing by avoiding direct transmission of card data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.en.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst formElement = document.getElementById('form-checkout');\nformElement.addEventListener('submit', createCardToken);\n\nasync function createCardToken(event) {\ntry {\nconst tokenElement = document.getElementById('token');\nif (!tokenElement.value) {\nevent.preventDefault();\nconst token = await mp.fields.createCardToken({\ncardholderName: document.getElementById('form-checkout__cardholderName').value,\nidentificationType: document.getElementById('form-checkout__identificationType').value,\nidentificationNumber: document.getElementById('form-checkout__identificationNumber').value,\n});\ntokenElement.value = token.id;\nformElement.requestSubmit();\n}\n} catch (e) {\nconsole.error('error creating card token: ', e)\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with 3DS (Optional) using Ruby\nDESCRIPTION: This Ruby code snippet demonstrates creating a payment with the `three_d_secure_mode` set to `optional` using the Mercado Pago API.  It initializes the MercadoPago SDK, constructs a payment data hash with transaction details and payer information, and then uses the `payment.create` method to submit the payment request. The MercadoPago Ruby SDK and an access token are required.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n \npayment_data = {\n transaction_amount: params[:transactionAmount].to_f,\n token: params[:token],\n description: params[:description],\n installments: params[:installments].to_i,\n payment_method_id: params[:paymentMethodId],\n payer: {\n   email: params[:email],\n   identification: {\n     type: params[:identificationType],\n     number: params[:identificationNumber]\n   }\n three_d_secure_mode: \"optional\",\n }\n}\n \npayment_response = sdk.payment.create(payment_data)\npayment = payment_response[:response]\n \nputs payment\n\n```\n\n----------------------------------------\n\nTITLE: Example of a Mercado Pago Webhook Notification\nDESCRIPTION: This is an example of a complete webhook notification from Mercado Pago, showing the query parameters, headers, and body content that is sent to your server for a payment event.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.en.md#2025-04-18_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /test?data.id=123456&type=payment HTTP/1.1\nHost: prueba.requestcatcher.com\nAccept: */*\nAccept-Encoding: *\nConnection: keep-alive\nContent-Length: 177\nContent-Type: application/json\nNewrelic: eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkFwcCIsImFjIjoiOTg5NTg2IiwiYXAiOiI5NjA2MzYwOTQiLCJ0eCI6IjU3ZjI4YzNjOWE2ODNlZDYiLCJ0ciI6IjY0NjA0OTM3OWI1ZjA3MzMyZDdhZmQxMjEyM2I5YWE4IiwicHIiOjAuNzk3ODc0LCJzYSI6ZmFsc2UsInRpIjoxNzQyNTA1NjM4Njg0LCJ0ayI6IjE3MDk3MDcifX0=\nTraceparent: 00-646049379b5f07332d7afd12123b9aa8-e7f77a41f687aecd-00\nTracestate: 1709707@nr=0-0-989586-960636094-e7f77a41f687aecd-57f28c3c9a683ed6-0-0.797874-1742505638684\nUser-Agent: restclient-node/4.15.3\nX-Request-Id: bb56a2f1-6aae-46ac-982e-9dcd3581d08e\nX-Rest-Pool-Name: /services/webhooks.js\nX-Retry: 0\nX-Signature: ts=1742505638683,v1=ced36ab6d33566bb1e16c125819b8d840d6b8ef136b0b9127c76064466f5229b\nX-Socket-Timeout: 22000\n{\"action\":\"payment.updated\",\"api_version\":\"v1\",\"data\":{\"id\":\"123456\"},\"date_created\":\"2021-11-01T02:02:02Z\",\"id\":\"123456\",\"live_mode\":false,\"type\":\"payment\",\"user_id\":724484980}\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Preferences - Node.js\nDESCRIPTION: This Node.js code snippet initializes a preference object for MercadoPago and configures it to exclude certain payment methods and types, setting the installment option as well. It's essential for backend integration with MercadoPago services.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_2\n\nLANGUAGE: node\nCODE:\n```\nvar preference = {}\npreference = {\n//...\n\"payment_methods\": {\n    \"excluded_payment_methods\": [\n        {\n            \"id\": \"master\"\n        }\n    ],\n    \"excluded_payment_types\": [\n        {\n            \"id\": \"ticket\"\n        }\n    ],\n    \"installments\": 12\n\t}\n//...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Customer using Mercado Pago .NET SDK\nDESCRIPTION: This snippet demonstrates how to create a new customer using the Mercado Pago .NET SDK. It initializes a `CustomerRequest` object with the customer's email and then uses the `CustomerClient` to create the customer and subsequently a card associated with the customer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/customers.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: dotnet\nCODE:\n```\n```dotnet\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar customerRequest = new CustomerRequest\n{\n    Email = \"test_payer_12345@testuser.com\",\n};\nvar customerClient = new CustomerClient();\nCustomer customer = await customerClient.CreateAsync(customerRequest);\n\nvar cardRequest = new CustomerCardCreateRequest\n{\n    Token = \"9b2d63e00d66a8c721607214cedaecda\"\n};\nCustomerCard card = await customerClient.CreateCardAsync(customer.Id, cardRequest);\n\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Brick Callbacks in React\nDESCRIPTION: This snippet demonstrates how to configure the onError, onReady, and onSubmit callbacks during Brick initialization in React. The onError callback logs any errors that occur, onReady is triggered when the brick is ready, and onSubmit is triggered when the button is clicked. These callbacks allow the integrator to respond to different events during the Brick's lifecycle.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/additional-callbacks.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\n<Wallet\n    ...,\n  onError={(error) => {\n        // triggered when an error happens\n        console.log(error)\n    }}\n  onReady={() => {\n        // triggered when brick is ready\n    }}\n    onSubmit={() => {\n        // triggered when the button is clicked\n    }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago API in PHP\nDESCRIPTION: This PHP snippet demonstrates how to create a payment using the Mercado Pago API. It sets the access token, creates a new payment object, defines the transaction amount, token, description, installments, payment method ID, issuer ID, and payer information. The payment is then saved, and the status is printed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-serverside.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    require_once 'vendor/autoload.php';\n\n    MercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n    //...\n    $payment = new MercadoPago\\Payment();\n    $payment->transaction_amount = 100;\n    $payment->token = $token;\n    $payment->description = \"Blue shirt\";\n    $payment->installments = $installments;\n    $payment->payment_method_id = $payment_method_id;\n    $payment->issuer_id = $issuer_id;\n    $payment->payer = array(\n    \"email\" => \"john@yourdomain.com\"\n    );\n    // Guarda y postea el pago\n    $payment->save();\n    //...\n    // Imprime el estado del pago\n    echo $payment->status;\n    //...\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Open Finance Payment with C# SDK\nDESCRIPTION: This code demonstrates how to create an Open Finance payment using Mercado Pago's C# SDK. It sets up the payment with transaction amount, description, payment method as Pix, and configures the point of interaction to use Open Finance.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/advanced-openFinance.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"access_token\";\n\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = 100,\n    Description = \"description\",\n    PaymentMethodId = \"pix\",\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"test@test.com\"\n        Identification: {\n            number: \"12345678909\",\n            type: \"CPF\"\n       }\n    },\n    PointOfInteraction = new PaymentPointOfInteractionRequest\n    {\n        LinkedTo = \"openfinance\"\n    }\n};\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Go Webhook Signature Verification for HTTP Requests\nDESCRIPTION: Implements a comprehensive webhook signature validation handler in Go. Extracts signature components from request headers, generates HMAC signature, and compares with received hash to authenticate webhook events.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.en.md#2025-04-18_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// Obtain the x-signature value from the header\n\t\txSignature := r.Header.Get(\"x-signature\")\n\t\txRequestId := r.Header.Get(\"x-request-id\")\n\n\t\t// Obtain Query params related to the request URL\n\t\tqueryParams := r.URL.Query()\n\n\t\t// Extract the \"data.id\" from the query params\n\t\tdataID := queryParams.Get(\"data.id\")\n\n\t\t// Separating the x-signature into parts\n\t\tparts := strings.Split(xSignature, \",\")\n\n\t\t// Initializing variables to store ts and hash\n\t\tvar ts, hash string\n\n\t\t// Iterate over the values to obtain ts and v1\n\t\tfor _, part := range parts {\n\t\t\t// Split each part into key and value\n\t\t\tkeyValue := strings.SplitN(part, \"=\", 2)\n\t\t\tif len(keyValue) == 2 {\n\t\t\t\tkey := strings.TrimSpace(keyValue[0])\n\t\t\t\tvalue := strings.TrimSpace(keyValue[1])\n\t\t\t\tif key == \"ts\" {\n\t\t\t\t\tts = value\n\t\t\t\t} else if key == \"v1\" {\n\t\t\t\t\thash = value\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Get secret key/token for specific user/application from Mercadopago developers site\n\t\tsecret := \"your_secret_key_here\"\n\n\t\t// Generate the manifest string\n\t\tmanifest := fmt.Sprintf(\"id:%v;request-id:%v;ts:%v;\", dataID, xRequestId, ts)\n\n\t\t// Create an HMAC signature defining the hash type and the key as a byte array\n\t\thmac := hmac.New(sha256.New, []byte(secret))\n\t\thmac.Write([]byte(manifest))\n\n\t\t// Obtain the hash result as a hexadecimal string\n\t\tsha := hex.EncodeToString(hmac.Sum(nil))\n\n\t\tif sha == hash {\n\t\t\t// HMAC verification passed\n\t\t\tfmt.Println(\"HMAC verification passed\")\n\t\t} else {\n\t\t\t// HMAC verification failed\n\t\t\tfmt.Println(\"HMAC verification failed\")\n\t\t}\n\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Yape Token with MercadoPago.js\nDESCRIPTION: JavaScript function that captures OTP and phone number values from the form, creates a Yape token using the MercadoPago.js SDK. This token is required for payment creation and is for one-time use only.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n(async function handleYape () {\n  const otp = docment.getElementById(\"form-checkout__payerOTP\").value;\n  const phoneNumber = docment.getElementById(\"form-checkout__payerPhone\").value;\n  const yapeOptions = {\n    otp,\n    phoneNumber\n  };\n  const yape = mp.yape(yapeOptions);\n  const yapeToken = await yape.create();\n  return yapeToken;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding New Cards to a Customer in Go\nDESCRIPTION: Go implementation for adding a new payment card to an existing MercadoPago customer. This code creates a configuration with an access token, initializes a client, and sends a card creation request for a specific customer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.en.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\naccessToken := \"{{ACCESS_TOKEN}}\"\n\n\n  cfg, err := config.New(accessToken)\n  if err != nil {\n      fmt.Println(err)\n      return\n  }\n\n\n  client := customercard.NewClient(cfg)\n\n\n  request := customercard.Request{Token: \"{{CARD_TOKEN}}\"}\n\n\n  resource, err := client.Create(context.Background(), \"{{CUSTOMER_ID}}\", request)\n  if err != nil {\n      fmt.Println(err)\n      return\n  }\n\n\n  fmt.Println(resource)\n```\n\n----------------------------------------\n\nTITLE: Making an Online Payment Request with Mercado Pago Secure Payments API\nDESCRIPTION: This cURL request demonstrates how to make an online payment using the Mercado Pago Secure Payments API. It includes card details, payer information, and transaction details. Replace 'YOUR_ACCESS_TOKEN' with your actual access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/secure_payments/integration.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n  -H 'X-Caller-Scopes: payments' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n  -d '{\n    \"binary_mode\": true,\n    \"capture\": true,\n    \"card\": {\n      \"card_number\": \"4688163623817035\",\n      \"security_code\": \"438\",\n      \"expiration_month\": \"08\",\n      \"expiration_year\": \"2024\",\n      \"cardholder\": {\n        \"identification\": {\n          \"number\": \"123456\",\n          \"type\": \"DNI\"\n        },\n        \"name\": \"APRO\"\n      },\n      \"device\": {\n        \"fingerprint\": {}\n      },\n      \"require_esc\": false\n    },\n    \"description\": \"Lorem ipsum.\",\n    \"installments\": 1,\n    \"issuer_id\": \"303\",\n    \"payer\": {\n      \"first_name\": \"APRO\",\n      \"last_name\": \"APRO\",\n      \"address\": {},\n      \"identification\": {\n        \"number\": \"123456\",\n        \"type\": \"DNI\"\n      },\n      \"email\": \"test@testuser.com\"\n    },\n    \"payment_method_id\": \"visa\",\n    \"statement_descriptor\": \"Lorem ipsum.\",\n    \"transaction_amount\": 9000,\n    \"additional_info\": {\n      \"items\": [\n        {\n          \"id\": \"ItemID1234\",\n          \"title\": \"Nombre del servicio\",\n          \"description\": \"Descripción del servicio\",\n          \"category_id\": \"travels\",\n          \"quantity\": 1,\n          \"unit_price\": 1234.56\n        }\n      ],\n      \"payer\": {\n        \"first_name\": \"Carlos\",\n        \"last_name\": \"Perez\",\n        \"is_prime_user\": \"1\",\n        \"is_first_purchase_online\": \"1\",\n        \"last_purchase\": \"2022-11-25T19:30:00.000-03:00\",\n        \"phone\": {\n          \"area_code\": \"57\",\n          \"number\": \"13123772\"\n        },\n        \"address\": {\n          \"zip_code\": \"11001\",\n          \"street_name\": \"Calle Falsa\",\n          \"street_number\": \"52\"\n        },\n        \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n      }\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Creating Customer and Associating Card with Mercado Pago\nDESCRIPTION: This snippet demonstrates how to create a customer and associate a card with them using Mercado Pago's SDK. It requires an access token and card token. The process involves creating a customer with an email and then associating a card token with that customer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.en.md#2025-04-18_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n  \n  $client_customer = new CustomerClient();\n  $customer = $client_customer->create([\"email\" => \"my.user@example.com\"]);\n  $client = new CustomerCardClient();\n  $customer_card = $client->create($customer->id, [\"token\" => \"your_card_token\"]);\n?>\n```\n\n----------------------------------------\n\nTITLE: Generating Yape Token via SDK\nDESCRIPTION: JavaScript function using MercadoPago SDK to create a Yape token with OTP and phone number data, which will be used for payment creation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.en.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n(async function handleYape () {\n  const otp = docment.getElementById(\"form-checkout__payerOTP\").value;\n  const phoneNumber = docment.getElementById(\"form-checkout__payerPhone\").value;\n  const yapeOptions = {\n    otp,\n    phoneNumber\n  };\n  const yape = mp.yape(yapeOptions);\n  const yapeToken = await yape.create();\n  return yapeToken;\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Customer in Mercado Pago Node.js SDK\nDESCRIPTION: Demonstrates how to retrieve a specific customer's details by using their unique customer ID in Mercado Pago's SDK. Requires the customer's unique identifier to fetch comprehensive customer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/customers.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerClient = new Customer(client);\n\ncustomerClient.get({ customerId: '<CUSTOMER_ID>' }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creating Pix Payment with Ruby SDK\nDESCRIPTION: Ruby implementation for creating a Pix payment using Mercado Pago's SDK. It initializes the SDK with an access token, configures custom headers with an idempotency key, and creates a payment request with transaction amount, payment method ID, and payer email.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pix.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_request = {\n  transaction_amount: 100,\n  payment_method_id: 'pix',\n  payer: {\n    email: 'PAYER_EMAIL_HERE',\n  }\n}\n\npayment_response = sdk.payment.create(payment_request, custom_request_options)\npayment = payment_response[:response]\n\n```\n\n----------------------------------------\n\nTITLE: Setting Language While Initializing Bricks in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set the language when initializing a Mercado Pago Brick using JavaScript. The locale parameter defines the language to be used for the Brick interface.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/select-language.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n    ...,\n    locale: 'en',\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Secure Card Token in Mercado Pago\nDESCRIPTION: This code creates a secure token representing the card data for payment processing. The token is generated when the form is submitted, using cardholder information and identification details. The token is valid for 7 days and can only be used once, enhancing security in the payment flow.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.es.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n    const formElement = document.getElementById('form-checkout');\n    formElement.addEventListener('submit', createCardToken);\n\n    async function createCardToken(event) {\n      try {\n        const tokenElement = document.getElementById('token');\n        if (!tokenElement.value) {\n          event.preventDefault();\n          const token = await mp.fields.createCardToken({\n            cardholderName: document.getElementById('form-checkout__cardholderName').value,\n            identificationType: document.getElementById('form-checkout__identificationType').value,\n            identificationNumber: document.getElementById('form-checkout__identificationNumber').value,\n          });\n          tokenElement.value = token.id;\n          formElement.requestSubmit();\n        }\n      } catch (e) {\n        console.error('error creating card token: ', e)\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Displaying Payment Status Table in Markdown\nDESCRIPTION: A markdown table showing different payment statuses (PENDING, APPROVED, REJECTED) and suggested messages to display to users for each status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/advanced-openFinance.pt.md#2025-04-18_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| Status   | Cenário                                    | Mensagem sugerida                    |\n|----------|--------------------------------------------|--------------------------------------|\n| PENDING  | Cenários em que o pagamento está pendente. | Seu pagamento está sendo processado. |\n| APPROVED | Cenários em que o pagamento está aprovado. |      Seu pagamento foi aprovado.     |\n| REJECTED |  Cenários em que o pagamento é rejeitado.  |     Seu pagamento foi rejeitado.     |\n```\n\n----------------------------------------\n\nTITLE: Updated Payment Processing with MercadoPago in PHP\nDESCRIPTION: This updated PHP snippet incorporates parsing POST request data to dynamically set payment parameters. It creates the payment object and returns a JSON response with payment status details. Requires the MercadoPago SDK from Composer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.en.md#2025-04-18_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  require_once 'vendor/autoload.php';\n  MercadoPago\\SDK::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n  $payment = new MercadoPago\\Payment();\n  $payment->transaction_amount = (float)$_POST['transactionAmount'];\n  $payment->token = $_POST['token'];\n  $payment->installments = (int)$_POST['installments'];\n  $payment->payment_method_id = $_POST['paymentMethodId'];\n  $payment->issuer_id = (int)$_POST['issuer'];\n  $payer = new MercadoPago\\Payer();\n  $payer->email = $parsed_body['payer']['email'];\n  $payer->identification = array(\n     \"type\" => $parsed_body['payer']['identification']['type'],\n     \"number\" => $parsed_body['payer']['identification']['number']\n   );\n  $payment->payer = $payer;\n  $payment->save();\n  $response = array(\n      'status' => $payment->status,\n      'status_detail' => $payment->status_detail,\n      'id' => $payment->id\n  );\n  echo json_encode($response);\n?>\n```\n\n----------------------------------------\n\nTITLE: Listing Payment Methods with Mercado Pago SDK (Go)\nDESCRIPTION: This Go code snippet demonstrates how to list available payment methods using the Mercado Pago SDK. It configures the SDK with an access token, creates a payment method client, and retrieves the list of payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_36\n\nLANGUAGE: go\nCODE:\n```\naccessToken := \"{{ACCESS_TOKEN}}\"\n\n\ncfg, err := config.New(accessToken)\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nclient := paymentmethod.NewClient(cfg)\n\n\nresources, err := client.List(context.Background())\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nfor _, v := range resources {\n   fmt.Println(v)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PSE Payment with Mercado Pago in C#\nDESCRIPTION: C# implementation for creating a PSE payment using Mercado Pago SDK. This code sets up all required objects for identification, address, phone, payer details and transaction information before submitting the payment request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pse-avanza.en.md#2025-04-18_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(Headers.IDEMPOTENCY_KEY, \"YOUR_IDEMPOTENCY_KEY\");\n\nvar identification = new IdentificationRequest() {\n  Type = request.IdentificationType,\n    Number = request.IdentificationNumber\n};\n\nvar address = new PaymentPayerAddressRequest() {\n    ZipCode = request.ZipCode,\n    StreetName = request.StreetName,\n    StreetNumber = request.StreetNumber,\n    Neighborhood = request.Neighborhood,\n    City = request.City,\n    FederalUnit = request.FederalUnit\n};\n\nvar phone = new PaymentPayerPhoneRequest() {\n    AreaCode = request.PhoneAreaCode,\n    Number = request.PhoneNumber\n};\n\nvar payer = new PaymentPayerRequest() {\n    Email = request.Email,\n    EntityType = \"individual\",\n    FirstName = firstName,\n    LastName = lastName,\n    Identification = identification,\n    Address = address,\n    Phone = phone\n};\n\nvar additionalInfo = new PaymentAdditionalInfoRequest() {\n  IpAddress = \"127.0.0.1\"\n};\n\nvar transactionDetails = new PaymentTransactionDetailsRequest() {\n  FinancialInstitution = request.FinancialInstitution\n};\n\nvar paymentCreateRequest = new PaymentCreateRequest() {\n    TransactionAmount = 5000,\n    Description = \"Product description\",\n    PaymentMethodId = \"pse\",\n    AdditionalInfo = additionalInfo,\n    TransactionDetails = transactionDetails,\n    CallbackUrl = \"https://your-site.com\",\n    NotificationUrl = \"https://your-site.com\",\n    Payer = payer\n};\n\nvar client = new PaymentClient();\nvar payment = await client.CreateAsync(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Creating Open Finance Payment with Ruby SDK\nDESCRIPTION: Ruby implementation for creating an Open Finance payment via Mercado Pago. Shows how to structure the payment request with the linked_to parameter set to 'openfinance'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/advanced-openFinance.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('access_token')\n\npayment_request = {\n    transaction_amount: 100,\n    description: 'description',\n    payment_method_id: 'pix',\n    payer: {\n        email: 'test@test.com'\n        identification: {\n            number: '12345678909',\n            type: 'CPF'\n       }\n    },\n    point_of_interaction: {\n        linked_to: \"openfinance\"\n    }\n}\npayment_response = sdk.payment.create(payment_request)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Verifying HMAC Signatures in Go HTTP Server\nDESCRIPTION: This Go snippet sets up an HTTP server that verifies HMAC signatures. Dependencies include Go's crypto/hmac, crypto/sha256, encoding/hex, fmt, and net/http packages. It extracts necessary headers and query parameters to construct a manifest string, then generates an HMAC signature using a predefined secret key. The generated signature is compared with the received signature to ensure it matches, confirming the request's integrity. Proper receipt and response to requests are critical, and unverified requests should be treated cautiously.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/notifications.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"crypto/hmac\"\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// Obtain the x-signature value from the header\n\t\txSignature := r.Header.Get(\"x-signature\")\n\t\txRequestId := r.Header.Get(\"x-request-id\")\n\n\t\t// Obtain Query params related to the request URL\n\t\tqueryParams := r.URL.Query()\n\n\t\t// Extract the \"data.id\" from the query params\n\t\tdataID := queryParams.Get(\"data.id\")\n\n\t\t// Separating the x-signature into parts\n\t\tparts := strings.Split(xSignature, \",\")\n\n\t\t// Initializing variables to store ts and hash\n\t\tvar ts, hash string\n\n\t\t// Iterate over the values to obtain ts and v1\n\t\tfor _, part := range parts {\n\t\t\t// Split each part into key and value\n\t\t\tkeyValue := strings.SplitN(part, \"=\", 2)\n\t\t\tif len(keyValue) == 2 {\n\t\t\t\tkey := strings.TrimSpace(keyValue[0])\n\t\t\t\tvalue := strings.TrimSpace(keyValue[1])\n\t\t\t\tif key == \"ts\" {\n\t\t\t\t\tts = value\n\t\t\t\t} else if key == \"v1\" {\n\t\t\t\t\thash = value\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Get secret key/token for specific user/application from Mercadopago developers site\n\t\tsecret := \"your_secret_key_here\"\n\n\t\t// Generate the manifest string\n\t\tmanifest := fmt.Sprintf(\"id:%v;request-id:%v;ts:%v;\", dataID, xRequestId, ts)\n\n\t\t// Create an HMAC signature defining the hash type and the key as a byte array\n\t\thmac := hmac.New(sha256.New, []byte(secret))\n\t\thmac.Write([]byte(manifest))\n\n\t\t// Obtain the hash result as a hexadecimal string\n\t\tsha := hex.EncodeToString(hmac.Sum(nil))\n\nif sha == hash {\n    // HMAC verification passed\n    fmt.Println(\"HMAC verification passed\")\n} else {\n    // HMAC verification failed\n    fmt.Println(\"HMAC verification failed\")\n}\n\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Item Preference in Node.js\nDESCRIPTION: Shows how to create a payment preference with multiple items using the Mercado Pago Node.js SDK, including item configuration with title, quantity, currency, and unit price\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/preference-multiple-items.en.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Set your preference\nvar preference = {\nitems: [\n{ title: 'My product',\nquantity: 1,\ncurrency_id: '[FAKER][CURRENCY][ACRONYM]',\nunit_price: 75.56 },\n\t{ title: 'My Product 2',\nquantity: 2,\ncurrency_id: '[FAKER][CURRENCY][ACRONYM]',\nunit_price: 96.56 }\n]\n};\n// Create a payment button on your website\nMercadopago.preferences.create(preference)\n.then(function(preference){\n// This value will replace the string \"$$init_point$$\" in your HTML\nglobal.init_point = preference.body.init_point;\n}).catch(function(error){\nconsole.log(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with PagoEfectivo\nDESCRIPTION: This Ruby snippet demonstrates how to create a payment using the Mercado Pago API. It uses the SDK to send a POST request with transaction details, payment method, and payer information. It requires the MercadoPago Ruby SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\npayment_request = {\ntransaction_amount: 100,\ndescription: 'Product title',\npayment_method_id: 'pagoefectivo_atm',\npayer: {\nemail: 'test_user_42972582@testuser.com'\n}\n}\n\npayment_response = sdk.payment.create(payment_request)\npayment = payment_response[:response]\n\n```\n\n----------------------------------------\n\nTITLE: Creating Cash Payments with Rapipago/Pago Fácil in Node.js\nDESCRIPTION: Node.js implementation for creating cash payments using Mercado Pago's Payments SDK. This snippet shows how to configure the payment with transaction amount, payment method ID, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_25\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, Payments } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<YOUR_ACCESS_TOKEN>' });\nconst payments = new Payments(client);\n\npayments.create({\nbody: {\n\t\ttransaction_amount: '<TRANSACTION_AMOUNT>',\n\t\tpayment_method_id: '<PAYMENT_METHOD_ID>',\n\t\tpayer: {\n\t\t\temail: '<EMAIL>'\n\t\t\t}\n},\n\trequestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n\t.then((result) => console.log(result))\n\t.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Processing Payments with MercadoPago in Ruby\nDESCRIPTION: This snippet provides a Ruby implementation to initialize the MercadoPago SDK, set payment parameters, and create the payment. The payer's email and identification are included, and it requires the mercadopago gem.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\npayment_object = {\n   transaction_amount: 100,\n   token: token,\n   description: 'Blue shirt',\n   installments: installments,\n   payment_method_id: payment_method_id,\n   issuer_id: issuer_id,\n   payer: {\n      email: 'john@yourdomain.com'\n  }\n}\npayment_response = sdk.payment.create(payment_object)\npayment = payment_response[:response]\n\n```\n\n----------------------------------------\n\nTITLE: Create Full Refund with Mercado Pago Python SDK\nDESCRIPTION: This snippet demonstrates how to create a full refund for a payment using the Mercado Pago Python SDK. It initializes the SDK with an access token and calls the `refund().create()` method with the payment ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/refunds.en.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsdk = mercadopago.SDK('YOUR_ACCESS_TOKEN')\n \nsdk.refund().create('payment_id')\n```\n\n----------------------------------------\n\nTITLE: Creating Card Payment with Mercado Pago Python SDK\nDESCRIPTION: Demonstrates creating a card payment using the Mercado Pago Python SDK. Initializes the SDK with an access token, sets up custom headers, and sends a payment request with transaction and payer details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-cardform.en.md#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport market\nsdk = Mercadopago.SDK(\"ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n\"transaction_amount\": float(request.POST.get(\"transaction_amount\")),\n\"token\": request.POST.get(\"token\"),\n\"description\": request.POST.get(\"description\"),\n\"installments\": int(request.POST.get(\"installments\")),\n\"payment_method_id\": request.POST.get(\"payment_method_id\"),\n\"payer\": {\n\"email\": request.POST.get(\"email\"),\n\"identification\": {\n\"type\": request.POST.get(\"type\"), \n\"number\": request.POST.get(\"number\")\n}\n}\n}\n \npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n \nprint(payment)\n```\n\n----------------------------------------\n\nTITLE: Configuring Card Payment Brick in React\nDESCRIPTION: This snippet shows how to set up the Card Payment Brick configuration using React. It defines the initialization parameters and callback functions that will be passed to the CardPayment component.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/default-rendering.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst initialization = {\n amount: 100,\n};\n\n\nconst onSubmit = async (formData) => {\n // callback called when clicking on the submit data button\n return new Promise((resolve, reject) => {\n   fetch('/process_payment', {\n     method: 'POST',\n     headers: {\n       'Content-Type': 'application/json',\n     },\n     body: JSON.stringify(formData),\n   })\n     .then((response) => response.json())\n     .then((response) => {\n       // receive payment result\n       resolve();\n     })\n     .catch((error) => {\n       // handle error response when trying to create payment\n       reject();\n     });\n });\n};\n\n\nconst onError = async (error) => {\n // callback called for all Brick error cases\n console.log(error);\n};\n\n\nconst onReady = async () => {\n /*\n   Callback called when Brick is ready.\n   Here you can hide loadings from your site, for example.\n */\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Cash Payment with Ruby in MercadoPago\nDESCRIPTION: Ruby implementation for creating a payment request using MercadoPago's Ruby SDK. Sets transaction amount, description, payment method (OXXO), and payer email to process a cash payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\npayment_request = {\n  transaction_amount: 100,\n  description: 'Título do produto',\n  payment_method_id: 'oxxo',\n  payer: {\n    email: 'test_user_82045343@testuser.com',\n  }\n}\n\npayment_response = sdk.payment.create(payment_request)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Complete Webhook Validation in PHP\nDESCRIPTION: A complete PHP implementation for validating Mercado Pago webhook notifications by extracting the signature from headers, creating a manifest string, and comparing the computed HMAC with the received hash.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.en.md#2025-04-18_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Obtain the x-signature value from the header\n$xSignature = $_SERVER['HTTP_X_SIGNATURE'];\n$xRequestId = $_SERVER['HTTP_X_REQUEST_ID'];\n\n// Obtain Query params related to the request URL\n$queryParams = $_GET;\n\n// Extract the \"data.id\" from the query params\n$dataID = isset($queryParams['data.id']) ? $queryParams['data.id'] : '';\n\n// Separating the x-signature into parts\n$parts = explode(',', $xSignature);\n\n// Initializing variables to store ts and hash\n$ts = null;\n$hash = null;\n\n// Iterate over the values to obtain ts and v1\nforeach ($parts as $part) {\n    // Split each part into key and value\n    $keyValue = explode('=', $part, 2);\n    if (count($keyValue) == 2) {\n        $key = trim($keyValue[0]);\n        $value = trim($keyValue[1]);\n        if ($key === \"ts\") {\n            $ts = $value;\n        } elseif ($key === \"v1\") {\n            $hash = $value;\n        }\n    }\n}\n\n// Obtain the secret key for the user/application from Mercadopago developers site\n$secret = \"your_secret_key_here\";\n\n// Generate the manifest string\n$manifest = \"id:$dataID;request-id:$xRequestId;ts:$ts;\";\n\n// Create an HMAC signature defining the hash type and the key as a byte array\n$sha = hash_hmac('sha256', $manifest, $secret);\nif ($sha === $hash) {\n    // HMAC verification passed\n    echo \"HMAC verification passed\";\n} else {\n    // HMAC verification failed\n    echo \"HMAC verification failed\";\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Configuring Installment Options in React\nDESCRIPTION: React configuration object for defining payment installment ranges in MercadoPago's Payment Brick component. Specifies minimum and maximum allowed installment values.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/max-and-min-installments.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n  paymentMethods: {\n   minInstallments: number,\n   maxInstallments: number,\n },\n};\n```\n\n----------------------------------------\n\nTITLE: Validating Payment Integration with Mercado Pago API using CURL\nDESCRIPTION: This snippet demonstrates how to send a POST request to the Mercado Pago API to validate a payment using the generated card token. It specifies required headers and parameters, including the card token and payer details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/integration-test.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n      'https://api.mercadopago.com/v1/payments'\\\n      Content-Type: application/json\\\n      X-Card-Validation: card_validation\\\n      Authorization: Bearer {{access_token}}\\\n{\\\n    \"token\": \"{{card_token}}\",\\\n    \"payment_method_id\": \"master\",\\\n    \"payer\": {\\\n        \"email\": \"{{example_email}}\",\\\n        \"type\" : \"guest\"\\\n    },\\\n    \"description\": \"validação de cartão com valor zero dollar master crédito sem cvv\",\\\n    \"transaction_amount\": 0\\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Merchant Order with Mercado Pago PHP SDK\nDESCRIPTION: This code snippet demonstrates how to create a merchant order using the Mercado Pago PHP SDK.  It initializes a MerchantOrderClient, defines item details and create request parameters including external reference, preference ID, payer information, site ID, items, and application ID, and then calls the create method on the client. This requires the Mercado Pago PHP SDK to be installed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/orders.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new MerchantOrderClient();\n\n  $item = [\n    \"id\" => \"item id\",\n    \"category_id\" => \"item category\",\n    \"currency_id\" => \"BRL\",\n    \"description\" => \"item description\",\n    \"picture_url\" => \"item picture\",\n    \"quantity\" => 1,\n    \"unit_price\" => \"5\",\n    \"title\" => \"item title\"\n  ];\n\n  $createRequest = [\n    \"external_reference\" => \"default\",\n    \"preference_id\" => \"Preference identification\",\n    \"payer\" => [\n        \"id\" => 123,\n        \"nickname\" => \"JOHN\"\n    ],\n    \"site_id\" => \"MLA\",\n    \"items\" => $items,\n    \"application_id\" => \"10000000000000000\"\n  ];\n\n  $client->create(createRequest);\n?>\n```\n\n----------------------------------------\n\nTITLE: Generating HMAC Signature in Node.js\nDESCRIPTION: A Node.js code snippet that demonstrates how to create an HMAC SHA-256 signature in hexadecimal format using the crypto module to validate Mercado Pago webhook notifications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.en.md#2025-04-18_snippet_4\n\nLANGUAGE: node\nCODE:\n```\nconst crypto = require('crypto');\nconst cyphedSignature = crypto\n    .createHmac('sha256', secret)\n    .update(signatureTemplateParsed)\n    .digest('hex'); \n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment Amount in Java with Mercado Pago SDK\nDESCRIPTION: This snippet shows how to capture a partial amount of 75 from a previously reserved payment using Java. It configures the access token, initializes a PaymentClient, and calls the capture method with the payment ID and the amount to capture.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.es.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n\nLong paymentId = 123456789L;\n\nPaymentClient client = new PaymentClient();\nclient.capture(paymentId, new BigDecimal(\"75\"));\n```\n\n----------------------------------------\n\nTITLE: Complete Boleto Bancário Payment Creation with Expiration Date\nDESCRIPTION: Complete API request to create a Boleto Bancário payment with a custom expiration date. The request includes all necessary parameters like transaction amount, payer information, and additional details required for payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/bank-slip.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'x-platform-id: {{PLATFORM_ID fornecido pelo time de Partners}}' \\\n--header 'Authorization: Bearer {{ACCESS_TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"transaction_amount\": 100,\n    \"installments\": 1,\n    \"statement_descriptor\": \"Loja do vendedor\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": {{ID da sua conta Mercado Pago referente à sua plataforma}},\n    \"payment_method_id\": \"bolbradesco\",\n    \"date_of_expiration\": \"2023-02-28T22:59:59.000-04:00\",\n    \"external_reference\": \"Identificador da plataforma\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"description\": \"Descrição do produto do vendedor\",\n    \"payer\": {\n        \"first_name\": \"Nome. Exemplo: João\",\n        \"last_name\": \"Sobrenome. Exemplo: Silva\",\n        \"email\": \"Exemplo: test_user_{{$timestamp}}@testuser.com\",\n        \"identification\": {\n            \"type\": \"Tipo de documento. Exemplo: CPF\",\n            \"number\": \"Número do documento. Exemplo: 19119119100\"\n        },\n        \"address\": {\n            \"zip_code\": \"CEP. Exemplo: 06233-200\",\n            \"street_name\": \"Nome da rua. Exemplo: São Luiz\",\n            \"street_number\": \"Número. Exemplo: 15\",\n            \"neighborhood\": \"Bairro. Exemplo: Bonfim\",\n            \"city\": \"Cidade. Exemplo: Osasco\",\n            \"federal_unit\": \"UF. Exemplo: SP\"\n        }\n    },\n    \"additional_info\": {\n        \"referral_url\": \"URL de referência. Ejemplo: www.sellertest123.com\",\n        \"drop_shipping\": true,\n        \"delivery_promise\": \"2022-11-20\",\n        \"contrated_plan\": \"premium\",\n        \"items\": [\n            {\n                \"id\": \"1941\",\n                \"title\": \"Produto do vendedor\",\n                \"description\": \"Descrição do produto do vendedor\",\n                \"picture_url\": null,\n                \"category_id\": \"Categoria. Exemplo: electronics\",\n                \"quantity\": 1,\n                \"unit_price\": 100.00\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome. Exemplo: João\",\n            \"last_name\": \"Sobrenome. Exemplo: Silva\",\n            \"is_prime_user\": \"1\",\n            \"is_first_purchase_online\": \"1\",\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"Código de área. Exemplo: 11\",\n                \"number\": \"Número do telefone. Exemplo: 987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"Código de área. Exemplo: 06233-200\",\n                \"street_name\": \"Nome da rua. Exemplo: Av. das Nações Unidas\",\n                \"street_number\": \"Número. Exemplo: 3003\"\n            },\n            \"registration_date\": \"2013-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"0\",\n            \"pick_up_on_seller\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"Código de área. Exemplo: 95630000\",\n                \"street_name\": \"Nome da rua. Exemplo: São Luiz\",\n                \"street_number\": \"Número. Exemplo: 15\",\n                \"floor\": \"Andar (caso seja apartamento). Exemplo: Segundo\",\n                \"apartment\": \"Número do apartamento (caso seja apartamento). Exemplo: 93\"\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Preference with Mercado Pago SDK in Java\nDESCRIPTION: This snippet shows how to retrieve a payment preference by its ID using the Mercado Pago SDK. It creates an instance of PreferenceClient and uses the client to call the get method with the preference ID. Necessary dependencies include the SDK’s client and preference classes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/preferences.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nPreferenceClient client = new PreferenceClient();\n\nString preferenceId = \"202809963-a2201f8d-11cb-443f-adf6-de5a42eed67d\";\nclient.get(preferenceId);\n```\n\n----------------------------------------\n\nTITLE: Loading and Configuring Checkout Bricks with JavaScript\nDESCRIPTION: This JavaScript snippet initializes and configures the Checkout Bricks for the card payment process using MercadoPago. It requires setting up an initialization object with payer details, styling options, and callback functions for events such as submission and error handling.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-clientside.en.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mp = new MercadoPago('YOUR_PUBLIC_KEY');\nconst bricksBuilder = mp.bricks();\nconst renderPaymentBrick = async (bricksBuilder) => {\n   const settings = {\n       initialization: {\n           amount: 100, //valor do processamento a ser realizado\n           payer: {\n           email: '<PAYER_EMAIL_HERE>m',\n       },\n       },\n       style: {\n           theme: 'default' // | 'dark' | 'bootstrap' | 'flat'\n       },\n       callbacks: {\n           onReady: () => {\n           // callback chamado quando o Brick estiver pronto\n           },\n           onSubmit: ({paymentType, formData}) => {\n           // callback chamado o usuário clicar no botão de submissão dos dados\n           // ejemplo de envío de los datos recolectados por el Brick a seu servidor\n           return new Promise((resolve, reject) => {\n               fetch(\"/processar-pago\", {\n                   method: \"POST\",\n                   headers: {\n                       \"Content-Type\": \"application/json\",\n                   },\n                   body: JSON.stringify(formData)\n               })\n               .then((response) => {\n                   // receber o resultado do pagamento\n                   resolve();\n               })\n               .catch((error) => {\n                   // lidar com a resposta de erro ao tentar criar o pagamento\n                   reject();\n               })\n               });\n           },\n           onError: (error) => {\n           // callback chamado para todos os casos de erro do Brick\n           },\n       },\n   };\n   window.cardPaymentBrickController = await bricksBuilder.create('payment', 'paymentBrick_container', settings);\n};\nrenderPaymentBrick(bricksBuilder);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Notification URL - Java\nDESCRIPTION: This snippet creates a payment with a notification URL using the Mercado Pago Java SDK. It initializes the SDK with an access token, creates a Payment object, sets the payment parameters (including the notificationUrl), and then saves the payment.  The notification URL will receive updates regarding the payment's status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.en.md#2025-04-18_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nMercadoPago.SDK.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n\nPayment payment = new Payment();\npayment.setTransactionAmount(Float.valueOf(request.getParameter(\"transactionAmount\")))\n      .setToken(request.getParameter(\"token\"))\n      .setDescription(request.getParameter(\"description\"))\n      .setInstallments(Integer.valueOf(request.getParameter(\"installments\")))\n      .setPaymentMethodId(request.getParameter(\"paymentMethodId\"))\n      .setNotificationUrl(\"http://requestbin.fullcontact.com/1ogudgk1\");\n\n\nIdentification identification = new Identification();----[mla, mlb, mlu, mlc, mpe, mco]----\nidentification.setType(request.getParameter(\"docType\"))\n             .setNumber(request.getParameter(\"docNumber\"));------------ ----[mlm]----\nidentification.setNumber(request.getParameter(\"docNumber\"));------------\n\n\nPayer payer = new Payer();\npayer.setEmail(request.getParameter(\"email\"))\n    .setIdentification(identification);\n   \npayment.setPayer(payer);\n\n\npayment.save();\n\n\nSystem.out.println(payment.getStatus());\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Bancário Payment with MercadoPago Go SDK\nDESCRIPTION: This Go code snippet shows how to create a Boleto Bancário payment using the MercadoPago Go SDK. It configures the client, builds the payment request, and sends it to the API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_20\n\nLANGUAGE: go\nCODE:\n```\naccessToken := \"{{ACCESS_TOKEN}}\"\n\n\ncfg, err := config.New(accessToken)\nif err != nil {\n  fmt.Println(err)\n  return\n}\n\nclient := payment.NewClient(cfg)\n\n\nrequest := payment.Request{\n   TransactionAmount: 105,\n   PaymentMethodID:   \"bolbradesco\",\n   Payer: &payment.PayerRequest{\n      Email:     \"{{EMAIL}}\",\n      FirstName: \"{{NOME}}\",\n      LastName:  \"{{SOBRENOME}}\",\n      Identification: &payment.IdentificationRequest{\n         Type:   \"{{TIPO DO DOCUMENTO}}\",\n         Number: \"{{NUMERO}}\",\n      },\n      Address: &payment.AddressRequest{\n         ZipCode:      \"06233-200\",\n         City:         \"Osasco\",\n         Neighborhood: \"Bonfim\",\n         StreetName:   \"Av. das Nações Unidas\",\n         StreetNumber: \"3003\",\n         FederalUnit:  \"SP\",\n      },\n   },\n}\n\n\nresource, err := client.Create(context.Background(), request)\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nfmt.Println(resource)\n```\n\n----------------------------------------\n\nTITLE: Processing Pix Refunds with MercadoPago API in Go\nDESCRIPTION: Go implementation for creating a payment refund using the MercadoPago SDK. This snippet configures a client with an access token and creates a refund for a specific payment ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/refund\"\n)\n\nfunc main() {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := refund.NewClient(cfg)\n\n\tresource, err := client.Create(context.Background(), <PAYMENT_ID>)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Individual Payment Details using Mercado Pago API\nDESCRIPTION: This curl command demonstrates how to query individual payment details using the payment ID. It sends a GET request to the /v1/payments/{id} endpoint with the Authorization header containing the access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/shopify/how-tos-change-endpoint.en.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n      'https://api.mercadopago.com/v1/payments/56789012345' \\\n      -H 'Authorization: Bearer {{AccessToken}}'\n```\n\n----------------------------------------\n\nTITLE: Configuring MercadoPago.js Credentials in HTML and JS\nDESCRIPTION: This snippet demonstrates how to configure the MercadoPago.js SDK in HTML by initializing it with a public key. This key is necessary for identifying the integration in your MercadoPago account.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.en.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  const mp = new MercadoPago(\\\"YOUR_PUBLIC_KEY\\\");\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initialize Mercado Pago SDK\nDESCRIPTION: This code snippet initializes the Mercado Pago SDK with your access token. The ACCESS_TOKEN is required for authenticating your requests with the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.es.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\n\n    sdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Return URLs in Python for Mercado Pago Checkout Pro\nDESCRIPTION: This Python code snippet demonstrates how to set up return URLs and auto-return behavior for a Mercado Pago Checkout Pro preference. It defines a dictionary with URLs for success, failure, and pending payment scenarios.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-return-urls.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npreference_data = {\n    \"back_urls\": {\n        \"success\": \"https://www.tu-sitio/success\",\n        \"failure\": \"https://www.tu-sitio/failure\",\n        \"pending\": \"https://www.tu-sitio/pendings\"\n    },\n    \"auto_return\": \"approved\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onBinChange Callback in React JSX\nDESCRIPTION: Here, the onBinChange callback is applied to a Card component in React. It logs the card's bin number every time it changes, allowing for real-time data handling during user input.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/additional-callbacks.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\n<Card\n ..., \n onBinChange={bin => {\n   console.log(bin);\n }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Generating Authentication Token with Postman Pre-script\nDESCRIPTION: Postman pre-request script that generates an X-Authentication token by encrypting the request path and body using HMAC-SHA256 with the provided secret key. The token is required for authenticating API requests to Redelcom's system.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/api-configure-credentials.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// get path with query params\nconst path = pm.request.url.getPath().replace(\"/redelcom\",\"\");\nlet queryParam;\nlet httpPath = path;\nif (pm.request.url.query != \"\") {\n    pm.request.url.query.all().forEach((param) => queryParam = param.key + \"=\" +  param.value);\n    httpPath +=  \"?\" + queryParam;\n}\nconsole.log(\"httpPath: \" + httpPath);\n// execute algorithm\nconst SECRET_KEY = pm.collectionVariables.get(\"secret\");\nconst body = pm.request.body\nconst message = httpPath + \",\" + body;\nconsole.log(\"message: \" + message);\nconst token = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA256(message, SECRET_KEY));\nconsole.log(\"token: \" + token);\npm.environment.set(\"X-Authentication\", pm.collectionVariables.get(\"clientId\") + \";\" + token);\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago Card Form (MLC)\nDESCRIPTION: This JavaScript code snippet initializes the Mercado Pago card form with specific configurations for the MLC region.  It defines the form's structure, including the ID and placeholder for each input field (card number, expiration date, etc.). The `amount` parameter must be an integer in this case. The `onSubmit` callback captures the card form data, including the token, and sends it to the `/process_payment` endpoint for payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.es.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n\n    const cardForm = mp.cardForm({\n      amount: \"100\", // El valor debe ser un número entero.\n      iframe: true,\n      form: {\n        id: \"form-checkout\",\n        cardNumber: {\n          id: \"form-checkout__cardNumber\",\n          placeholder: \"Numero de tarjeta\",\n        },\n        expirationDate: {\n          id: \"form-checkout__expirationDate\",\n          placeholder: \"MM/YY\",\n        },\n        securityCode: {\n          id: \"form-checkout__securityCode\",\n          placeholder: \"Código de seguridad\",\n        },\n        cardholderName: {\n          id: \"form-checkout__cardholderName\",\n          placeholder: \"Titular de la tarjeta\",\n        },\n        issuer: {\n          id: \"form-checkout__issuer\",\n          placeholder: \"Banco emisor\",\n        },\n        installments: {\n          id: \"form-checkout__installments\",\n          placeholder: \"Cuotas\",\n        },        \n        identificationType: {\n          id: \"form-checkout__identificationType\",\n          placeholder: \"Tipo de documento\",\n        },\n        identificationNumber: {\n          id: \"form-checkout__identificationNumber\",\n          placeholder: \"Número del documento\",\n        },\n        cardholderEmail: {\n          id: \"form-checkout__cardholderEmail\",\n          placeholder: \"E-mail\",\n        },\n      },\n      callbacks: {\n        onFormMounted: error => {\n          if (error) return console.warn(\"Form Mounted handling error: \", error);\n          console.log(\"Form mounted\");\n        },\n        onSubmit: event => {\n          event.preventDefault();\n\n          const {\n            paymentMethodId: payment_method_id,\n            issuerId: issuer_id,\n            cardholderEmail: email,\n            amount,\n            token,\n            installments,\n            identificationNumber,\n            identificationType,\n          } = cardForm.getCardFormData();\n\n          fetch(\"/process_payment\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              token,\n              issuer_id,\n              payment_method_id,\n              transaction_amount: Number(amount),\n              installments: Number(installments),\n              description: \"Descripción del producto\",\n              payer: {\n                email,\n                identification: {\n                  type: identificationType,\n                  number: identificationNumber,\n                },\n              },\n            }),\n          });\n        },\n        onFetching: (resource) => {\n          console.log(\"Fetching resource: \", resource);\n\n          // Animate progress bar\n          const progressBar = document.querySelector(\".progress-bar\");\n          progressBar.removeAttribute(\"value\");\n\n          return () => {\n            progressBar.setAttribute(\"value\", \"0\");\n          };\n        }\n      },\n    });\n```\n```\n\n----------------------------------------\n\nTITLE: Complete PIX Payment API Request for Mercado Pago\nDESCRIPTION: Full API request example for creating a PIX payment with Mercado Pago, including transaction details, payer information, custom expiration date, and additional information like shipping details and item metadata.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/pix.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'x-platform-id: {{PLATFORM_ID fornecido pelo time de Partners}}' \\\n--header 'Authorization: Bearer {{ACCESS_TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"transaction_amount\": 100,\n    \"installments\": 1,\n    \"statement_descriptor\": \"Loja do seller\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": {{ID da sua conta Mercado Pago referente à sua plataforma}},\n    \"payment_method_id\": \"pix\",\n    \"date_of_expiration\": \"2023-02-28T22:59:59.000-04:00\",\n    \"external_reference\": \"Identificador da plataforma\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"description\": \"Descrição do produto do seller\",\n    \"payer\": {\n        \"first_name\": \"Nome. Exemplo: João\",\n        \"last_name\": \"Sobrenome. Exemplo: Silva\",\n        \"email\": \"Exemplo: test_user_{{$timestamp}}@testuser.com\",\n        \"identification\": {\n            \"type\": \"Tipo de documento. Exemplo: CPF\",\n            \"number\": \"Número. Exemplo: 19119119100\"\n        },\n        \"address\": {\n            \"zip_code\": \"CEP. Exemplo: 06233-200\",\n            \"street_name\": \"Nome da rua. Exemplo: Av. das Nações Unidas\",\n            \"street_number\": \"Número. Exemplo: 3003\",\n            \"neighborhood\": \"Bairro. Exemplo: Bonfim\",\n            \"city\": \"Cidade. Exemplo: Osasco\",\n            \"federal_unit\": \"UF. Exemplo: SP\"\n        }\n    },\n    \"additional_info\": {\n        \"referral_url\": \"URL de referência. Exemplo: www.sellertest123.com\",\n        \"drop_shipping\": true,\n        \"delivery_promise\": \"2022-11-20\",\n        \"contrated_plan\": \"premium\",\n        \"items\": [\n            {\n                \"id\": \"1941\",\n                \"title\": \"Produto do seller\",\n                \"description\": \"Descrição Produto do seller\",\n                \"picture_url\": null,\n                \"category_id\": \"Categoria. Exemplo: electronics\",\n                \"quantity\": 1,\n                \"unit_price\": 100.00\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome. Exemplo: João\",\n            \"last_name\": \"Sobrenome. Exemplo: Silva\",\n            \"is_prime_user\": \"1\",\n            \"is_first_purchase_online\": \"1\",\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"Código de área. Exemplo: 11\",\n                \"number\": \"Número. Exemplo: 987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"CEP. Exemplo: 06233-200\",\n                \"street_name\": \"Rua. Exemplo: Av. das Nações Unidas\",\n                \"street_number\": \"Número. Exemplo: 3003\"\n            },\n            \"registration_date\": \"2013-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"0\",\n            \"pick_up_on_seller\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"CEP. Exemplo: 95630000\",\n                \"street_name\": \"Nome da rua. Exemplo. São Luiz\",\n                \"street_number\": \"Número. Exemplo: 15\",\n                \"floor\": \"Andar (caso seja apartamento). Exemplo: Segundo\",\n                \"apartment\": \"Número do apartamento (caso seja apartamento). Exemplo: 93\"\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Smart Device Information in Kotlin\nDESCRIPTION: Demonstrates how to use MPManager's smartInformationTools to get device and integration details using Kotlin's coroutine-based response handling\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/get-information.en.md#2025-04-18_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval informationTools = MPManager.smartInformationTools\\n\\ninformationTools.getInformation { response ->\\n   response.doIfSuccess { smartInformation ->\\n       // Manage information on the device and integration\\n       val deviceSerialNumber = smartInformation.smartDevice.serialNumber\\n       val brandName = smartInformation.smartDevice.brandName\\n       val modelName = smartInformation.smartDevice.modelName\\n       val paymentModuleVersion = smartInformation.smartDevice.paymentModuleVersion\\n\\n       val sdkVersion = smartInformation.integration.nativeSdkVersion\\n   }.doIfError { error ->\\n       // Manage error in information request \\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Brick Theme in Settings Object with JavaScript\nDESCRIPTION: This snippet demonstrates how to set a theme when rendering a specific Brick by including theme configuration in the settings object. This approach only affects the individual Brick being rendered.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/set-theme.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n        visual: {\n            style: {\n                theme: 'dark' | 'default' | 'bootstrap' | 'flat'\n           }\n        }\n    }    \n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment in C# with MercadoPago SDK\nDESCRIPTION: This snippet shows how to capture a partial amount from a reserved payment using the MercadoPago C# SDK. It sets the access token, creates a PaymentClient, and calls the CaptureAsync method with the payment ID and the new transaction amount.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.en.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar client = new PaymentClient();\nPayment payment = await client.CaptureAsync(paymentId, 75);\n```\n\n----------------------------------------\n\nTITLE: Creating Fintoc Payment in Java\nDESCRIPTION: Sets up Fintoc payment using Mercado Pago's Java SDK. Configures payment details using builder pattern.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-simplified.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest createRequest =\n    PaymentCreateRequest.builder()\n        .description(\"Product title\")\n        .paymentMethodId(\"fintoc\")\n        .payer(PaymentPayerRequest.builder()\n            .email(\"test_user_123@testuser.com\")\n            .build())\n        .transactionAmount(new BigDecimal(\"5000\"))\n        .callbackUrl(\"https://www.your-site.com\")\n        .pointOfInteraction(PaymentPointOfInteractionRequest\n        .builder().type(\"CHECKOUT\").subType(\"INTER_PSP\").build())\n        .build();\n\nclient.create(createRequest);\n\n```\n\n----------------------------------------\n\nTITLE: Creating Preference in Java\nDESCRIPTION: This Java snippet creates a Mercado Pago preference with item details and sets the `purpose` to `wallet_purchase` to allow only logged-in payments. It uses the Mercado Pago Java SDK to create a `PreferenceRequest` and then utilizes the `PreferenceClient` to create the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-onsubmit.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// Cria um objeto de preferência\nPreferenceClient client = new PreferenceClient();\n \n// Cria um item na preferência\nList<PreferenceItemRequest> items = new ArrayList<>();\nPreferenceItemRequest item =\n   PreferenceItemRequest.builder()\n       .title(\"Meu produto\")\n       .quantity(1)\n       .unitPrice(new BigDecimal(\"100\"))\n       .build();\nitems.add(item);\n \nPreferenceRequest request = PreferenceRequest.builder()\n  // o .purpose('wallet_purchase') permite apenas pagamentos logados\n  // para permitir pagamentos como guest, você pode omitir essa linha\n  .purpose('wallet_purchase')\n  .items(items).build();\n \nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Searching Customers with MercadoPago SDK in Ruby\nDESCRIPTION: This snippet shows how to search for customers using the MercadoPago SDK in Ruby. It uses the customer.search method with a filter for the customer's email.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ruby/customers.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ncustomers_response = sdk.customer.search(filters: { email: 'test_payer_12345@testuser.com' })\ncustomers = customers_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment with MercadoPago SDK (Node.js)\nDESCRIPTION: This Node.js snippet initializes a payment using the MercadoPago SDK. It sets the access token, defines payment parameters like transaction amount, token, description, installments, payment method ID, issuer ID, and payer email. It then saves the payment using a promise and logs the payment status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.es.md#2025-04-18_snippet_2\n\nLANGUAGE: node.js\nCODE:\n```\nvar mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(config.access_token);\n\nvar payment_data = {\n  transaction_amount: 100,\n  token: token,\n  description: 'Blue shirt',\n  installments: installments,\n  payment_method_id: payment_method_id,\n  issuer_id: issuer_id,\n  payer: {\n    email: 'john@yourdomain.com'\n  }\n};\n\n// Save and do the payment POST\nmercadopago.payment.save(payment_data).then(function (data) {\n  // ...    \n  // Shows payment stauts\n  Console.log(data.status);\n}).catch(function (error) {\n  // ...\n});\n\n```\n\n----------------------------------------\n\nTITLE: Requesting Authorization Code via OAuth URL\nDESCRIPTION: This snippet demonstrates how to construct a URL to redirect users for OAuth authorization in different Mercado Pago regions. It uses curl to show this URL construction, involving client_id and redirect_uri parameters. The primary dependency is the Mercado Pago OAuth flow, necessitating proper configuration of the redirect URI for authorization code reception.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/configuration.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\nhttps://auth.mercadopago.com.ar/authorization?client_id=<APP_ID>&response_type=code&platform_id=mp&redirect_uri=<REDIRECT_URI>\n```\n\nLANGUAGE: curl\nCODE:\n```\nhttps://auth.mercadopago.com.br/authorization?client_id=<APP_ID>&response_type=code&platform_id=mp&redirect_uri=<REDIRECT_URI>\n```\n\nLANGUAGE: curl\nCODE:\n```\nhttps://auth.mercadopago.com.mx/authorization?client_id=<APP_ID>&response_type=code&platform_id=mp&redirect_uri=<REDIRECT_URI>\n```\n\nLANGUAGE: curl\nCODE:\n```\nhttps://auth.mercadopago.cl/authorization?client_id=<APP_ID>&response_type=code&platform_id=mp&redirect_uri=<REDIRECT_URI>\n```\n\nLANGUAGE: curl\nCODE:\n```\nhttps://auth.mercadopago.com.co/authorization?client_id=<APP_ID>&response_type=code&platform_id=mp&redirect_uri=<REDIRECT_URI>\n```\n\nLANGUAGE: curl\nCODE:\n```\nhttps://auth.mercadopago.com.uy/authorization?client_id=<APP_ID>&response_type=code&platform_id=mp&redirect_uri=<REDIRECT_URI>\n```\n\nLANGUAGE: curl\nCODE:\n```\nhttps://auth.mercadopago.com.pe/authorization?client_id=<APP_ID>&response_type=code&platform_id=mp&redirect_uri=<REDIRECT_URI>\n```\n\n----------------------------------------\n\nTITLE: Criando pagamento PagoEfectivo ATM com cURL\nDESCRIPTION: Exemplo de requisição cURL para criar um pagamento PagoEfectivo ATM através da API do Mercado Pago. Inclui os headers necessários para autenticação, idempotência e os parâmetros para processamento do pagamento.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mpe.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n    'https://api.mercadopago.com/v1/payments' \\\n    -d '{\n      \"transaction_amount\": 100,\n      \"description\": \"Product title\",\n      \"payment_method_id\": \"pagoefectivo_atm\",\n      \"payer\": {\n        \"email\": \"PAYER_EMAIL_HERE\",\n      },\n\"metadata\": {\n        \"payment_mode\": \"online\",\n      }\n    }'\n```\n\n----------------------------------------\n\nTITLE: Getting Document Types\nDESCRIPTION: Async function to fetch and populate available document types from MercadoPago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.en.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n(async function getIdentificationTypes() {\ntry {\nconst identificationTypes = await mp.getIdentificationTypes();\nconst identificationTypeElement = document.getElementById('form-checkout__identificationType');\n\ncreateSelectOptions(identificationTypeElement, identificationTypes);\n} catch (e) {\nreturn console.error('Error getting identificationTypes: ', e);\n}\n})();\n\nfunction createSelectOptions(elem, options, labelsAndKeys = { label: \"name\", value: \"id\" }) {\nconst { label, value } = labelsAndKeys;\n\nelem.options.length = 0;\n\nconst tempOptions = document.createDocumentFragment();\n\noptions.forEach(option => {\nconst optValue = option[value];\nconst optLabel = option[label];\n\nconst opt = document.createElement('option');\nopt.value = optValue;\nopt.textContent = optLabel;\n\ntempOptions.appendChild(opt);\n});\n\nelem.appendChild(tempOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: Process Payment with Discount Coupon in Mercado Pago\nDESCRIPTION: This snippet demonstrates how to process a payment with a discount coupon using the Mercado Pago API. The `coupon_code` is included in the request body, and other payment details, such as `transaction_amount`, `description`, `payment_method_id`, and `payer` information are also required.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/discount-campaigns.en.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n-H 'accept: application/json' \\\n-H 'content-type: application/json' \\\n-H 'Authorization: Bearer ACCESS_TOKEN' \\\nhttps://api.mercadopago.com/v1/payments \\\n-d '{\n    \"transaction_amount\": 299.99,\n    \"description\": \"Title of what you are paying for\",\n    \"token\": \"ff8080814d71d513014d8d42173452f7\",\n    \"installments\": 1,\n    \"payment_method_id\": \"master\",\n    \"payer\": {\n        \"email\": \"test_user_99525168@testuser.com\"\n    },\n    \"coupon_code\": \"TESTMP\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Creando pagos con PagoEfectivo usando Mercado Pago SDK en C#\nDESCRIPTION: Código C# para crear un pago con PagoEfectivo utilizando el SDK de Mercado Pago. Configura el token de acceso, establece opciones personalizadas para la solicitud con idempotencia, y crea una nueva solicitud de pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mpe.es.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\n \nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = 100,\n    Description = \"Product title\",\n    PaymentMethodId = \"pagoefectivo_atm\",\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"test@test.com\",\n    },\n    Metadata = new Dictionary<string, object>\n    {\n\t[\"payment_mode\"] = \"online\",\n    }\n};\n \nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: PHP HMAC Signature Verification\nDESCRIPTION: This PHP snippet authenticates Mercado Pago Webhook notifications using an HMAC SHA256 hash verification method. It extracts required parameters (timestamp, hash, secret), creates a manifest string, and generates a signature for validation against the received signature. It ensures the received notification is genuine.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/notifications.en.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Obtain the x-signature value from the header\n$xSignature = $_SERVER['HTTP_X_SIGNATURE'];\n$xRequestId = $_SERVER['HTTP_X_REQUEST_ID'];\n\n// Obtain Query params related to the request URL\n$queryParams = $_GET;\n\n// Extract the \"data.id\" from the query params\n$dataID = isset($queryParams['data.id']) ? $queryParams['data.id'] : '';\n\n// Separating the x-signature into parts\n$parts = explode(',', $xSignature);\n\n// Initializing variables to store ts and hash\n$ts = null;\n$hash = null;\n\n// Iterate over the values to obtain ts and v1\nforeach ($parts as $part) {\n    // Split each part into key and value\n    $keyValue = explode('=', $part, 2);\n    if (count($keyValue) == 2) {\n        $key = trim($keyValue[0]);\n        $value = trim($keyValue[1]);\n        if ($key === \"ts\") {\n            $ts = $value;\n        } elseif ($key === \"v1\") {\n            $hash = $value;\n        }\n    }\n}\n\n// Obtain the secret key for the user/application from Mercadopago developers site\n$secret = \"your_secret_key_here\";\n\n// Generate the manifest string\n$manifest = \"id:$dataID;request-id:$xRequestId;ts:$ts;\";\n\n// Create an HMAC signature defining the hash type and the key as a byte array\n$sha = hash_hmac('sha256', $manifest, $secret);\nif ($sha === $hash) {\n    // HMAC verification passed\n    echo \"HMAC verification passed\";\n} else {\n    // HMAC verification failed\n    echo \"HMAC verification failed\";\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Information with MercadoPago SDK in DotNet\nDESCRIPTION: This code snippet covers the process of updating the details of an existing customer using the MercadoPago SDK. It includes setting up phone, identification, and address requests, along with customer information. A key dependency is the MercadoPago SDK, and the Access Token is required for authentication during the update request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/customers.en.md#2025-04-18_snippet_2\n\nLANGUAGE: dotnet\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\nvar phoneRequest = new PhoneRequest\n{\n  AreaCode = \"[FAKER][PHONE_NUMBER][AREA_CODE]\",\n  Number = \"001234567\"\n};\n\nvar identificationRequest = new IdentificationRequest\n{\n  Type = \"[FAKER][IDENTIFICATION][TYPE]\",\n  Number = \"12341234\"\n};\n\nvar addressRequest = new AddressRequest\n{\n  ZipCode = \"[FAKER][ADDRESS][ZIP_CODE]\",\n  StreetName = \"[FAKER][ADDRESS][STREET_NAME]\",\n  StreetNumber = \"2\"\n};\n\nvar customerRequest = new CustomerRequest\n{\n    Email = \"test_payer_12345@testuser.com\",\n    FirstName = \"john\",\n    LastName = \"wagner\",\n    DefaultAddress = \"home\",\n    Description = \"Informações do cliente\",\n    DefaultCard = \"None\",\n    Phone = phoneRequest,\n    Identification = identificationRequest,\n    Address = addressRequest\n};\nvar customerClient = new CustomerClient();\nCustomer customer = await customerClient.Update(customerRequest);\n```\n\n----------------------------------------\n\nTITLE: Payment Capture Response Structure\nDESCRIPTION: Example of the JSON response structure when a payment is successfully captured. The response includes status information and confirmation that the payment has been captured.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n...\n\"status\": \"approved\",\n\"status_detail\": \"accredited\",\n...\n\"captured\": true,\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Preference for Wallet Purchase in Node.js\nDESCRIPTION: This Node.js snippet illustrates creating a preference with the `purpose` attribute set to `wallet_purchase` using the Mercado Pago SDK. This configuration allows for wallet payments. The code requires the Mercado Pago Node.js SDK and uses the `Preference` class to create the preference object.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mp-wallet.en.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\n\nconst preference = new Preference(client);\n\npreference.create({ \n  body: {\n    items: [\n      {\n        id: '<ID>',\n        title: '<title>',\n        quantity: 1,\n        unit_price: 100\n      }\n    ],\n    purpose: \"wallet_purchase\",\n  }\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Obtaining Access Token using cURL in Mercado Pago API\nDESCRIPTION: This cURL command shows how to obtain an Access Token by making a POST request to the Mercado Pago API. It includes client ID, client secret, authorization code, and other required parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/creation.es.md#2025-04-18_snippet_5\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    'https://api.mercadopago.com/oauth/token'\\\n    -H 'Content-Type: application/json' \\\n    -d '{\n  \"client_id\": \"client_id\",\n  \"client_secret\": \"client_secret\",\n  \"code\": \"TG-XXXXXXXX-241983636\",\n  \"grant_type\": \"authorization_code\",\n  \"redirect_uri\": \"https://www.redirect-url.com\",\n  \"refresh_token\": \"TG-XXXXXXXX-241983636\",\n  \"test_token\": \"false\"\n}'\n```\n\n----------------------------------------\n\nTITLE: React Integration with MercadoPago Initialization\nDESCRIPTION: Uses React to initialize Mercado Pago by importing required components and setting your public key. This is essential for later rendering the checkout button with the Wallet component.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-checkout.en.md#2025-04-18_snippet_7\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { initMercadoPago, Wallet } from '@mercadopago/sdk-react'\ninitMercadoPago('YOUR_PUBLIC_KEY');\n```\n\n----------------------------------------\n\nTITLE: Making API Request to Process Payments with Discounts in Mercado Pago\nDESCRIPTION: This curl request demonstrates how to create a payment with a discount through Mercado Pago's advanced payments API. It includes the transaction amount, description, external reference, discount details (including amount, description, and details like discount type and cap), and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/process-payments-with-discounts.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n'https://api.mercadopago.com/v1/advanced_payments' \\\n--header 'Authorization: <YOUR_ACCESS_TOKEN>' \\\n--data '{\n    \"wallet_payment\": {\n        \"transaction_amount\": 550,\n        \"description\": \"Descripción del pago\",\n        \"external_reference\": \"Pago_123\",\n        \"discount\": {\n            \"amount\": 55.0,\n            \"description\": \"Pruebas wc\",\n            \"detail\": {\n                \"value\": 10.0,\n                \"type\": \"percent\",\n                \"cap\": 5000\n            }\n        }\n    },\n    \"payer\": {\n        \"token\": \"PAYER_TOKEN\",\n        \"type_token\": \"wallet-token\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Banks for Money Out Transfer\nDESCRIPTION: GET request to obtain the list of available banks for money transfers using Mercado Pago's Open Banking API. Requires an Access Token for authentication.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.en.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request GET \\\n  --url https://api.mercadopago.com/open-banking/payments/v1/banks \\\n  --header 'Authorization: Bearer <ENV_ACCESS_TOKEN>'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Information Using curl\nDESCRIPTION: This curl command is used to send a GET request to the Mercado Pago API endpoint to retrieve detailed information about a specific payment, identified by the ADVANCED_PAYMENT_ID. The command includes an Authorization header that requires a valid access token. It does not handle errors or responses, which must be managed by additional application logic.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/get-payment-information.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n    'https://api.mercadopago.com/v1/advanced_payments/ADVANCED_PAYMENT_ID' \\\n      -H 'Authorization: Bearer YOUR_ACCESS_TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Creating Merchant Order in Java\nDESCRIPTION: Create a merchant order with item details, payer information, and application ID using Mercado Pago SDK. Allows setting up order with specific item properties and metadata.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/orders.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nMerchantOrderClient client = new MerchantOrderClient();\n\nList<MerchantOrderItemRequest> items = new ArrayList<>();\n\nMerchantOrderItemRequest item =\n   MerchantOrderItemRequest.builder()\n       .id(\"item id\")\n       .categoryId(\"item category\")\n       .currencyId(\"BRL\")\n       .description(\"item description\")\n       .pictureUrl(\"item picture\")\n       .quantity(1)\n       .unitPrice(new BigDecimal(\"5\"))\n       .title(\"item title\")\n       .build();\n\nitems.add(item);\n\nMerchantOrderCreateRequest createRequest =\n   MerchantOrderCreateRequest.builder()\n       .externalReference(\"default\")\n       .preferenceId(\"Preference identification\")\n       .payer(MerchantOrderPayerRequest.builder().id(123L).nickname(\"JOHN\").build())\n       .siteId(\"MLA\")\n       .items(items)\n       .applicationId(\"10000000000000000\")\n       .build();\n\nclient.create(createRequest);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference with Java SDK\nDESCRIPTION: Creates payment preference using Java SDK with wallet purchase purpose. Configures product details and builds preference request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-mp-wallet.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nPreferenceClient client = new PreferenceClient();\n\nPreferenceItemRequest item =\nPreferenceItemRequest.builder()\n.title(\"My product\")\n.quantity(1)\n.unitPrice(new BigDecimal(\"75\"))\n.build();\n\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nList<PreferenceItemRequest> items = new ArrayList<>();\nitems.add(item);\n\nPreferenceRequest request =\nPreferenceRequest.builder().items(items).purpose(\"wallet_purchase\").build();\n\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Submitting Documentation for Chargeback using Mercado Pago API (cURL)\nDESCRIPTION: This snippet demonstrates how to submit documentation for a chargeback dispute. It sends a POST request to the Mercado Pago API endpoint for chargeback documentation, including file attachments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/chargebacks-management/manage-chargeback.en.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST  \\\n-F 'files[]=@/path/to/file/file1.png' \\\n-F 'files[]=@/path/to/file/file2.pdf' \\\n-H 'Authorization: Bearer {{access_token}}'\nhttps://api.mercadopago.com/v1/chargebacks/{id}/documentation\n```\n\n----------------------------------------\n\nTITLE: Excluding Payment Methods Java\nDESCRIPTION: This Java snippet demonstrates how to construct a `PreferenceRequest` to exclude payment methods and types using the Mercado Pago SDK. It utilizes builders to create lists of excluded payment methods and types, and configures the number of installments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nPreferenceClient client = new PreferenceClient();\n//...\nList<PreferencePaymentMethodRequest> excludedPaymentMethods = new ArrayList<>();\nexcludedPaymentMethods.add(PreferencePaymentMethodRequest.builder().id(\"master\").build());\nexcludedPaymentMethods.add(PreferencePaymentMethodRequest.builder().id(\"amex\").build());\n\nList<PreferencePaymentTypeRequest> excludedPaymentTypes = new ArrayList<>();\nexcludedPaymentTypes.add(PreferencePaymentTypeRequest.builder().id(\"ticket\").build());\n\nPreferencePaymentMethodsRequest paymentMethods =\n   PreferencePaymentMethodsRequest.builder()\n       .excludedPaymentMethods(excludedPaymentMethods)\n       .excludedPaymentTypes(excludedPaymentTypes)\n       .installments(12)\n       .build();\n\nPreferenceRequest request = PreferenceRequest.builder().paymentMethods(paymentMethods).build();\n\nclient.create(request);\n//...\n\n```\n\n----------------------------------------\n\nTITLE: Creating Card Payment with Mercado Pago Go SDK\nDESCRIPTION: Shows how to create a card payment using the Mercado Pago Go SDK. Sets up the configuration with an access token, creates a payment client, and sends a payment request with transaction and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-cardform.en.md#2025-04-18_snippet_13\n\nLANGUAGE: go\nCODE:\n```\naccessToken := \"{{ACCESS_TOKEN}}\"\n\n\ncfg, err := config.New(accessToken)\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nclient := payment.NewClient(cfg)\n\n\nrequest := payment.Request{\n   TransactionAmount: <transaction_amount>,\n   Token: <token>,\n   Description: <description>,\n   PaymentMethodID:   <paymentMethodId>,\n   Payer: &payment.PayerRequest{\n      Email: <email>,\n      Identification: &payment.IdentificationRequest{\n         Type: <type>,\n         Number: <number>,\n      },\n   },\n}\n\n\nresource, err := client.Create(context.Background(), request)\nif err != nil {\n   fmt.Println(err)\n}\n\n\nfmt.Println(resource)\n```\n\n----------------------------------------\n\nTITLE: Getting a Merchant Order with Mercado Pago PHP SDK\nDESCRIPTION: This code snippet retrieves a specific merchant order using the Mercado Pago PHP SDK. It initializes a MerchantOrderClient and calls the get method with an order ID to fetch order details.  The Mercado Pago PHP SDK must be installed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/orders.en.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new MerchantOrderClient();\n  $client->get(123456789);\n?>\n```\n\n----------------------------------------\n\nTITLE: Setting Back URLs and Auto Return in Preference - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to set the `back_urls` property within a payment preference object to define URLs for redirecting users upon success, failure, or pending payment statuses.  It also configures `auto_return` to 'approved', enabling automatic redirection for successful payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar preference = {}\npreference = {\n  // ...\n  \"back_urls\": {\n        \"success\": \"https://www.seu-site/success\",\n        \"failure\": \"http://www.seu-site/failure\",\n        \"pending\": \"http://www.seu-site/pending\"\n    },\n    \"auto_return\": \"approved\",\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Back URLs and Auto Return in Mercado Pago with Node.js\nDESCRIPTION: This code snippet demonstrates how to set the `back_urls` and `auto_return` attributes in Node.js. The `back_urls` object defines the URLs for successful, failed, and pending payments, while `auto_return` enables automatic redirection for approved payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/redirection.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nvar preference = {}\npreference = {\n  // ...\n  \"back_urls\": {\n        \"success\": \"https://www.seu-site/success\",\n        \"failure\": \"http://www.seu-site/failure\",\n        \"pending\": \"http://www.seu-site/pending\"\n    },\n    \"auto_return\": \"approved\",\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Customer Card from Mercado Pago with Node.js\nDESCRIPTION: Gets detailed information about a specific card associated with a customer. Requires both the customer ID and the specific card ID to retrieve the card reference information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/cards.en.md#2025-04-18_snippet_2\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerCard = new CustomerCard(client);\n\ncustomerCard.get({ customerId: '<CUSTOMER_ID>', cardId : '<CARD_ID>' }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods in Java\nDESCRIPTION: Java implementation for setting payment method preferences, excluding specific payment methods and types, and limiting installments\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/payment-methods.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nPreferenceClient client = new PreferenceClient();\n//...\nList<PreferencePaymentMethodRequest> excludedPaymentMethods = new ArrayList<>();\nexcludedPaymentMethods.add(PreferencePaymentMethodRequest.builder().id(\"master\").build());\nexcludedPaymentMethods.add(PreferencePaymentMethodRequest.builder().id(\"amex\").build());\n\nList<PreferencePaymentTypeRequest> excludedPaymentTypes = new ArrayList<>();\nexcludedPaymentTypes.add(PreferencePaymentTypeRequest.builder().id(\"ticket\").build());\n\nPreferencePaymentMethodsRequest paymentMethods =\nPreferencePaymentMethodsRequest.builder()\n.excludedPaymentMethods(excludedPaymentMethods)\n.excludedPaymentTypes(excludedPaymentTypes)\n.installments(12)\n.build();\n\nPreferenceRequest request = PreferenceRequest.builder().paymentMethods(paymentMethods).build();\n\nclient.create(request);\n//...\n```\n\n----------------------------------------\n\nTITLE: Inicializando Card Payment Brick con email del pagador en React\nDESCRIPTION: Este snippet demuestra cómo configurar el objeto de inicialización para el Card Payment Brick en React, incluyendo el email del pagador.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/initialize-data-on-the-bricks.es.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst initialization = {\n ...,\n payer: {\n   ...,\n   email: '<PAYER_EMAIL_HERE>',\n },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Back URLs in Preference - Java\nDESCRIPTION: This Java snippet demonstrates setting up back URLs for payment redirection within a Mercado Pago preference. It uses the builder pattern to define success, pending, and failure URLs, and includes setting up the preference request itself. Requires the MercadoPago SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nPreferenceBackUrlsRequest backUrls =\n// ...\nPreferenceBackUrlsRequest.builder()\n       .success(\"https://www.seu-site/success\")\n       .pending(\"https://www.seu-site/pending\")\n       .failure(\"https://www.seu-site/failure\")\n       .build();\n\nPreferenceRequest request = PreferenceRequest.builder().backUrls(backUrls).build();\n// ...\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Data in Ruby using MercadoPago SDK\nDESCRIPTION: Example of updating customer information such as email, name, phone, identification, and address details using the MercadoPago Ruby SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/modify-customer.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustomer_request = {\nemail: 'user@user.com',\nfirst_name: 'john',\nlast_name: 'wagner',\ndefault_address: 'Home',\nphone: {\narea_code: '[FAKER][PHONE_NUMBER][AREA_CODE]',\nnumber: '001234567'\n},\nidentification: {\ntype: '[FAKER][IDENTIFICATION][TYPE]',\nnumber: '12341234'\n},\naddress: {\nzip_code: '[FAKER][ADDRESS][ZIP_CODE]',\nstreet_name: '[FAKER][ADDRESS][STREET_NAME]',\nstreet_number: '2'\n},\ndescription: 'Customer Information',\ndefault_card: 'None'\n}\ncustomer_response = sdk.customer.update(customer_id ,customer_request)\ncustomer = customer_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Mercado Pago Payment using Ruby SDK\nDESCRIPTION: This code snippet demonstrates how to cancel a specific Mercado Pago payment using the Ruby SDK. It initializes the SDK with an access token, sets the payment status to 'cancelled', and updates the payment using its ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ruby/cancellations.en.md#2025-04-18_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\npayment_data = {\n   \"status\": \"cancelled\"\n}\npayment = sdk.payment.update(\"payment_id\", payment_data)\n```\n\n----------------------------------------\n\nTITLE: Error Response for Invalid Money Transfer Configuration\nDESCRIPTION: This is the error response returned when the API requirements for money transfers are not met, such as missing the 'money_transfer' scope, using incorrect payment methods, or missing required operation types.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/money-transfer.es.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"badrequest\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Content for Other Regions\nDESCRIPTION: Configuration object for customizing text content in Brick for other regions (MLA, MLB, MPE, MCO, MLU, MLC). Similar structure but without review confirmation section.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/change-texts.en.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n  customization: {\n    visual: {\n      texts: {\n        formTitle: \"string\",\n        emailSectionTitle: \"string\",\n        installmentsSectionTitle: \"string\",\n        cardholderName: {\n          label: \"string\",\n          placeholder: \"string\",\n        },\n        email: {\n          label: \"string\",\n          placeholder: \"string\",\n        },\n        cardholderIdentification: {\n          label: \"string\",\n        },\n        cardNumber: {\n          label: \"string\",\n          placeholder: \"string\",\n        },\n        expirationDate: {\n          label: \"string\",\n          placeholder: \"string\",\n        },\n        securityCode: {\n          label: \"string\",\n          placeholder: \"string\",\n        },\n        entityType: {\n          placeholder: \"string\",\n          label: \"string\",\n        },\n        financialInstitution: {\n          placeholder: \"string\",\n          label: \"string\",\n        },\n        selectInstallments: \"string\",\n        selectIssuerBank: \"string\",\n        formSubmit: \"string\",\n        paymentMethods: {\n          newCreditCardTitle: \"string\",\n          creditCardTitle: \"string\",\n          creditCardValueProp: \" string\",\n          newDebitCardTitle: \"string\",\n          debitCardTitle: \"string\",\n          debitCardValueProp: \"string\",\n          ticketTitle: \"string\",\n          ticketValueProp: \"string\",\n        },\n      },\n    },\n  },\n};\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n  visual: {\n    texts: {\n      formTitle: \"string\",\n      emailSectionTitle: \"string\",\n      installmentsSectionTitle: \"string\",\n      cardholderName: {\n        label: \"string\",\n        placeholder: \"string\",\n      },\n      email: {\n        label: \"string\",\n        placeholder: \"string\",\n      },\n      cardholderIdentification: {\n        label: \"string\",\n      },\n      cardNumber: {\n        label: \"string\",\n        placeholder: \"string\",\n      },\n      expirationDate: {\n        label: \"string\",\n        placeholder: \"string\",\n      },\n      securityCode: {\n        label: \"string\",\n        placeholder: \"string\",\n      },\n      entityType: {\n        placeholder: \"string\",\n        label: \"string\",\n      },\n      financialInstitution: {\n        placeholder: \"string\",\n        label: \"string\",\n      },\n      selectInstallments: \"string\",\n      selectIssuerBank: \"string\",\n      formSubmit: \"string\",\n      paymentMethods: {\n        newCreditCardTitle: \"string\",\n        creditCardTitle: \"string\",\n        creditCardValueProp: \"string\",\n        newDebitCardTitle: \"string\",\n        debitCardTitle: \"string\",\n        debitCardValueProp: \"string\",\n        ticketTitle: \"string\",\n        ticketValueProp: \"string\",\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods in Mercado Pago PHP\nDESCRIPTION: This PHP snippet initializes a Mercado Pago preference object and sets up payment methods while excluding certain payment types and methods. It specifies the number of installments allowed. Dependencies needed include the Mercado Pago PHP SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$preference = new MercadoPago\\Preference();\n// ...\n$preference->payment_methods = array(\n  \"excluded_payment_methods\" => array(\n    array(\"id\" => \"master\")\n  ),\n  \"excluded_payment_types\" => array(\n    array(\"id\" => \"ticket\")\n  ),\n  \"installments\" => 12\n);\n// ...\n?>\n```\n\n----------------------------------------\n\nTITLE: Creando un pago con Fintoc en C#\nDESCRIPTION: Este snippet demuestra cómo crear un pago utilizando Fintoc como método de pago en C#. Configura el cliente de Mercado Pago, define los detalles del pago y ejecuta la solicitud de forma asíncrona.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-simplified.es.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\"\n\nvar paymentPayerRequest = new PaymentPayerRequest\n{\n    Email = \"test_user_123@testuser.com\",\n};\n\nvar paymentPointOfInteractionRequest = new PaymentPointOfInteraction\n{\n    Type = \"CHECKOUT\",\n    SubType = \"INTER_PSP\"\n};\n\nvar request = new PaymentCreateRequest\n{\n    Description = \"Titulo del producto\",\n    Payer = paymentPayerRequest,\n    PaymentMethodId = \"fintoc\",\n    TransactionAmount = (decimal?)5000,\n    CallbackUrl = \"https://www.your-site.com\",\n    PointOfInteraction = paymentPointOfInteractionRequest\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Implementando código de seguridad en la página de Checkout\nDESCRIPTION: Script para implementar la generación del Device ID específicamente en la página de Checkout. Este es el primer paso para usar el Device ID en la web y prevenir compras fraudulentas.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.es.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Access Token for Mercado Pago in Python\nDESCRIPTION: This snippet configures the Mercado Pago SDK with the access token and retrieves the list of payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport market\nsdk = Mercadopago.SDK(\"ACCESS_TOKEN\")\n\npayment_methods_response = sdk.payment_methods().list_all()\npayment_methods = payment_methods_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Button Visual Properties in React\nDESCRIPTION: This React snippet shows how to customize the visual properties of the Wallet button, specifically setting the background color to black and adjusting the border radius.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-appearance.es.md#2025-04-18_snippet_5\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n     buttonBackground: 'black',\n     borderRadius: '6px',\n },\n}\n```\n\n----------------------------------------\n\nTITLE: Refunding with Mercado Pago in Go\nDESCRIPTION: This Go snippet illustrates how to set up the Mercado Pago client, create a refund request, and handle the potential errors when making the request. It demonstrates basic error handling.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.es.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/refund\"\n)\n\nfunc main() {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := refund.NewClient(cfg)\n\n\tresource, err := client.Create(context.Background(), <PAYMENT_ID>)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Web Tokenize Checkout V1 Form\nDESCRIPTION: This HTML form snippet is used to integrate the Web Tokenize Checkout V1, allowing payment processing by embedding MercadoPago's script. Important details include specifying the data-public-key and transaction amount.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-clientside.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"https://www.mi-sitio.com/procesar-pago\" method=\"POST\">\n <script\n   src=\"https://www.mercadopago.com.ar/integrations/v1/web-tokenize-checkout.js\"\n   data-public-key=\"ENV_PUBLIC_KEY\"\n   data-transaction-amount=\"100.00\">\n </script>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Card Payment Brick with Saved Cards in JavaScript\nDESCRIPTION: This JavaScript code snippet sets up a Brick for processing payments using saved cards. It configures payer information like customer ID and card IDs, and handles events such as form submission and error occurrences. This requires dependencies including MercadoPago SDK and a server-endpoint for processing payment data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-clientside.en.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mp = new MercadoPago('YOUR_PUBLIC_KEY');\nconst bricksBuilder = mp.bricks();\nconst renderCardPaymentBrick = async (bricksBuilder) => {\n   const settings = {\n       initialization: {\n           amount: 100, //valor do processamento a ser realizado\n           payer: {\n           customer_id: \"209277402-FqRqgEc3XItrxs\",\n\tcard_ids: [“1518023392627”,”1518023332143”]\n       },\n       },\n       style: {\n           theme: 'default' // | 'dark' | 'bootstrap' | 'flat'\n       },\n       callbacks: {\n           onReady: () => {\n           // callback chamado quando o Brick estiver pronto\n           },\n           onSubmit: ({paymentType, formData}) => {\n           // callback chamado o usuário clicar no botão de submissão dos dados\n           // ejemplo de envío de los datos recollectados por o Brick a seu servidor\n           return new Promise((resolve, reject) => {\n               fetch(\"/processar-pago\", {\n                   method: \"POST\",\n                   headers: {\n                       \"Content-Type\": \"application/json\",\n                   },\n                   body: JSON.stringify(formData)\n               })\n               .then((response) => {\n                   // receber o resultado do pagamento\n                   resolve();\n               })\n               .catch((error) => {\n                   // lidar com a resposta de erro ao tentar criar o pagamento\n                   reject();\n               })\n               });\n           },\n           onError: (error) => {\n           // callback chamado para todos os casos de erro do Brick\n           },\n       },\n   };\n   window.cardPaymentBrickController = await bricksBuilder.create('cardPayment', 'cardPaymentBrick_container', settings);\n};\nrenderCardPaymentBrick(bricksBuilder);\n```\n\n----------------------------------------\n\nTITLE: Successful Payment Response with Discount in Mercado Pago\nDESCRIPTION: This JSON response shows a successful payment transaction with an applied discount. It includes payment details, transaction status, payer information, and details about the applied discount including the discount amount and token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/process-payments-with-discounts.es.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1234567,\n  \"status\": \"approved\",\n  \"marketplace\": null,\n  \"sponsor_id\": null,\n  \"payments\": [\n    {\n      \"id\": \"PAYMENT-ID\",\n      \"status\": \"approved\",\n      \"status_detail\": \"accredited\",\n      \"payment_type_id\": \"account_money\",\n      \"payment_method_id\": \"account_money\",\n      \"token\": null,\n      \"transaction_amount\": 500,\n      \"installments\": 1,\n      \"processing_mode\": \"aggregator\",\n      \"issuer_id\": null,\n      \"coupon_amount\": 10.0,\n      \"campaign_id\": \"CAMPAIGN-ID\",\n      \"coupon_code\": null,\n      \"description\": \"Payment Wallet\",\n      \"external_reference\": null,\n      \"statement_descriptor\": null,\n      \"date_of_expiration\": null,\n      \"merchant_account_id\": null,\n      \"payment_method_option_id\": null,\n      \"additional_info\": null,\n      \"transaction_details\": null,\n      \"net_amount\": null,\n      \"taxes\": null\n    }\n  ],\n  \"disbursements\": null,\n  \"payer\": {\n    \"id\": \"PAYER-ID\",\n    \"email\": \"PAYER-EMAIL\",\n    \"address\": null,\n    \"identification\": null,\n    \"first_name\": null,\n    \"last_name\": null,\n    \"phone\": null,\n    \"token\": \"PAYER-TOKEN\",\n    \"external_payer_id\": \"EXTERNAL-PAYER-ID\"\n  },\n  \"external_reference\": null,\n  \"description\": null,\n  \"binary_mode\": true,\n  \"capture\": true,\n  \"date_created\": \"2023-07-24T14:30:45.574-04:00\",\n  \"date_last_updated\": \"2023-07-24T14:30:46.517-04:00\",\n  \"metadata\": null,\n  \"additional_info\": null,\n  \"wallet_payment\": {\n    \"transaction_amount\": 550,\n    \"description\": \"Payment Wallet\",\n    \"external_reference\": null,\n    \"subscription_data\": null,\n    \"user_present\": null,\n    \"discount\": {\n      \"amount\": 50.0,\n      \"description\": \"wallet connect test\",\n      \"detail\": {\n        \"value\": 10.0,\n        \"type\": \"percent\",\n        \"cap\": 100000.0\n      }\n    },\n    \"payment_preference\": {\n      \"active\": true,\n      \"user_id\": 1431302201,\n      \"payment_method\": [\n        {\n          \"priority\": 1,\n          \"payment_method\": \"account_money\"\n        }\n      ]\n    }\n  },\n  \"pos_id\": null,\n  \"store_id\": null,\n  \"wallet_connect_discount\": {\n    \"amount\": 10.0,\n    \"token\": \"DISCOUNT-TOKEN\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MercadoPago SDK\nDESCRIPTION: Code snippets showing how to import the MercadoPago SDK either via CDN or npm install.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n```\n\n----------------------------------------\n\nTITLE: Processing Pix Refunds with MercadoPago API in .NET\nDESCRIPTION: C# .NET implementation for refunding a payment using the MercadoPago SDK. This example shows how to set up request options with the X-Render-In-Process-Refunds header to properly handle refunds that may be in contingency status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: dotnet\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\nPaymentRefundClient client = new PaymentRefundClient();\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"X-Render-In-Process-Refunds\", \"true\");\n\nvar refund = client.Refund(paymentId, 20, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Refreshing OAuth Token with MercadoPago SDK in Node.js\nDESCRIPTION: This code snippet shows how to refresh an expired OAuth token for continuing to operate an application on behalf of a provider. It initializes a MercadoPago client with an access token and timeout configuration, then uses the OAuth module to refresh a token using client credentials and a refresh token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/oauth.es.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token', options: { timeout: 5000 } });\n\nconst oauth = new OAuth(client);\n\noauth.refresh({\n\t'client_secret': 'your-client-secret',\n\t'client_id': 'your-client-id',\n\t'refresh_token': 'refresh-token'\n}).then((result) => console.log(result))\n\t.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Creating Partial Refund with Mercado Pago SDK\nDESCRIPTION: Shows how to create a partial refund by configuring the SDK with an access token and using the Refund object to save the refund for a specific payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/refunds.es.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMercadoPago.SDK.configure(\"YOUR_ACCESS_TOKEN\");\n \nRefund refund = new Refund();\nrefund.setPaymentId(\"payment_id\");\nrefund.save();\n```\n\n----------------------------------------\n\nTITLE: Creating Mercado Pago Preference in Java\nDESCRIPTION: This Java code snippet demonstrates how to create a Mercado Pago preference with a single item and sets the `purpose` to `wallet_purchase`, restricting payments to registered users. It uses the MercadoPago SDK to create a preference client and request with a single item.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-onsubmit.es.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n\"// Crear un objeto de preferencia\\nPreferenceClient client = new PreferenceClient();\\n \\n// Crear un elemento en la preferencia\\nList<PreferenceItemRequest> items = new ArrayList<>();\\nPreferenceItemRequest item =\\n   PreferenceItemRequest.builder()\\n       .title(\\\"Mi producto\\\")\\n       .quantity(1)\\n       .unitPrice(new BigDecimal(\\\"100\\\"))\\n       .build();\\nitems.add(item);\\n \\nPreferenceRequest request = PreferenceRequest.builder()\\n  // el .purpose('wallet_purchase') solo permite pagos registrados\\n  // para permitir pagos de invitados, puedes omitir esta propiedad\\n  .purpose('wallet_purchase')\\n  .items(items).build();\\n \\nclient.create(request);\"\n```\n\n----------------------------------------\n\nTITLE: Partial Capture Response Structure\nDESCRIPTION: This JSON response shows what to expect after successfully capturing a partial payment. The status will be 'approved' with status_detail 'accredited', transaction_amount showing the captured amount, and captured set to true.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"status\": \"approved\",\n  \"status_detail\": \"accredited\",\n  ...\n  \"transaction_amount\": 75,\n  ...\n  \"captured\": true,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Partial Refund with Mercadopago SDK in Ruby\nDESCRIPTION: This snippet shows how to create a partial refund using the Mercadopago SDK in Ruby. It initializes the SDK, prepares refund data with the amount, and calls the create method on the refund object with the payment ID and refund data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ruby/refunds.en.md#2025-04-18_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\ndata = {\n amount: 0.0\n}\n\nrefund = sdk.refund.create('payment_id', refund_data: data)\n```\n\n----------------------------------------\n\nTITLE: Creating MercadoPago Preference with Multiple Items in Ruby\nDESCRIPTION: This Ruby code demonstrates how to create a MercadoPago preference with multiple products. It initializes the SDK with an access token, defines preference data with two items having different properties, and then creates the preference using the SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n# Create preference data with items\npreference_data = {\n  items: [\n    {\n      title: 'Mi producto 1',\n      quantity: 1,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 75.56\n    },\n    {\n      title: 'Mi producto 2',\n      quantity: 2,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 96.56\n    }\n  ]\n}\n\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Create Payment Preference\nDESCRIPTION: This code creates a new payment preference. It defines the items to be included in the preference and uses the `preference().create()` method to send the data to the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.es.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef index(req, **kwargs):\n        preference_data = {\n            \"items\": [\n                {\n                    \"title\": \"Test\",\n                    \"quantity\": 1,\n                    \"currency_id\": \"USD\",\n                    \"unit_price\": 10.4\n                }\n            ]\n        }\n\n        preference_response = sdk.preference().create(preference_data)\n\n        return json.dumps(preference_response[\"response\"], indent=4)\n```\n\n----------------------------------------\n\nTITLE: Setting Mercado Pago Credentials in C#\nDESCRIPTION: This C# example shows how to set the access token for the Mercado Pago SDK configuration to ensure proper payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.en.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// Mercado Pago SDK\n using MercadoPago.Config;\n // Add Your credentials\nMercadoPagoConfig.AccessToken = \"PROD_ACCESS_TOKEN\";\n```\n\n----------------------------------------\n\nTITLE: Creating Merchant Orders with Java SDK\nDESCRIPTION: This snippet demonstrates how to create a merchant order by initializing necessary requests, specifying item details, payer information, and application ID. The created order can be associated with a payment preference for URL generation. Key parameters include items, externalReference, preferenceId, and payer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/orders.en.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nMerchantOrderClient client = new MerchantOrderClient();\n\nList<MerchantOrderItemRequest> items = new ArrayList<>();\n\nMerchantOrderItemRequest item =\n   MerchantOrderItemRequest.builder()\n       .id(\"item id\")\n       .categoryId(\"item category\")\n       .currencyId(\"BRL\")\n       .description(\"item description\")\n       .pictureUrl(\"item picture\")\n       .quantity(1)\n       .unitPrice(new BigDecimal(\"5\"))\n       .title(\"item title\")\n       .build();\n\nitems.add(item);\n\nMerchantOrderCreateRequest createRequest =\n   MerchantOrderCreateRequest.builder()\n       .externalReference(\"default\")\n       .preferenceId(\"Preference identification\")\n       .payer(MerchantOrderPayerRequest.builder().id(123L).nickname(\"JOHN\").build())\n       .siteId(\"MLA\")\n       .items(items)\n       .applicationId(\"10000000000000000\")\n       .build();\n\nclient.create(createRequest);\n```\n\n----------------------------------------\n\nTITLE: Setting Integration Identifiers in MercadoPago C# SDK\nDESCRIPTION: Shows how to set platform, integrator, and corporation IDs using the MercadoPago C# SDK. Replace the placeholder values with actual identification codes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integration-identification.es.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.PlatformId    = \"PLATFORM_ID\";\nMercadoPagoConfig.IntegratorId  = \"INTEGRATOR_ID\";\nMercadoPagoConfig.CorporationId = \"CORPORATION_ID\";\n```\n\n----------------------------------------\n\nTITLE: Creating Yape Payment in .NET\nDESCRIPTION: .NET implementation for creating a Yape payment using MercadoPago SDK with token, transaction amount, and payer details\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.pt.md#2025-04-18_snippet_10\n\nLANGUAGE: dotnet\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\n\nvar paymentPayerRequest = new PaymentPayerRequest\n{\n    Email = \"test_user_123@testuser.com\",\n};\n\nvar request = new PaymentCreateRequest\n{\n    Description = \"Titulo del producto\",\n    Installments = 1,\n    Payer = paymentPayerRequest,\n    PaymentMethodId = \"yape\",\n    TransactionAmount = (decimal?)5000,\n    Token = \"ff8080814c11e237014c1ff593b57b4d\"\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Creating and Verifying HMAC in Go\nDESCRIPTION: This Go snippet sets up an HTTP handler to receive requests, extract the HMAC signature, and verify it using a secret key. It manages header values and query parameters effectively while demonstrating HMAC generation and validation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/notifications.es.md#2025-04-18_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"crypto/hmac\"\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// Obtain the x-signature value from the header\n\t\txSignature := r.Header.Get(\"x-signature\")\n\t\txRequestId := r.Header.Get(\"x-request-id\")\n\n\t\t// Obtain Query params related to the request URL\n\t\tqueryParams := r.URL.Query()\n\n\t\t// Extract the \"data.id\" from the query params\n\t\tdataID := queryParams.Get(\"data.id\")\n\n\t\t// Separating the x-signature into parts\n\t\tparts := strings.Split(xSignature, \",\")\n\n\t\t// Initializing variables to store ts and hash\n\t\tvar ts, hash string\n\n\t\t// Iterate over the values to obtain ts and v1\n\t\tfor _, part := range parts {\n\t\t\t// Split each part into key and value\n\t\t\tkeyValue := strings.SplitN(part, \"=\", 2)\n\t\t\tif len(keyValue) == 2 {\n\t\t\t\tkey := strings.TrimSpace(keyValue[0])\n\t\t\t\tvalue := strings.TrimSpace(keyValue[1])\n\t\t\t\tif key == \"ts\" {\n\t\t\t\t\tts = value\n\t\t\t\t} else if key == \"v1\" {\n\t\t\t\t\thash = value\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Get secret key/token for specific user/application from Mercadopago developers site\n\t\tsecret := \"your_secret_key_here\"\n\n\t\t// Generate the manifest string\n\t\tmanifest := fmt.Sprintf(\"id:%v;request-id:%v;ts:%v;\", dataID, xRequestId, ts)\n\n\t\t// Create an HMAC signature defining the hash type and the key as a byte array\n\t\thmac := hmac.New(sha256.New, []byte(secret))\n\t\thmac.Write([]byte(manifest))\n\n\t\t// Obtain the hash result as a hexadecimal string\n\t\tsha := hex.EncodeToString(hmac.Sum(nil))\n\n\tif sha == hash {\n\t    // HMAC verification passed\n\t    fmt.Println(\"HMAC verification passed\")\n\t} else {\n\t    // HMAC verification failed\n\t    fmt.Println(\"HMAC verification failed\")\n\t}\n\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK with PHP\nDESCRIPTION: This code snippet initializes the Mercado Pago SDK in PHP by including the autoload file and setting the access token. The access token is essential for authenticating API requests.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// SDK do Mercado Pago\nrequire __DIR__ .  '/vendor/autoload.php';\n// Adicione as credenciais\nMercadoPago\\SDK::setAccessToken('PROD_ACCESS_TOKEN');\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK in React\nDESCRIPTION: This code snippet initializes the Mercado Pago SDK with a public key. The public key is used to identify the account being integrated when connecting to Mercado Pago services.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/react-installation.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { initMercadoPago } from '@mercadopago/sdk-react'\ninitMercadoPago('YOUR_PUBLIC_KEY');\n```\n\n----------------------------------------\n\nTITLE: Setting Report Generation Frequency - JSON\nDESCRIPTION: JSON object defining the frequency for scheduled report generation. It specifies the type (monthly, weekly, daily), the value (day of month or week), and the hour for report generation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"hour\": 0, \"type\": \"monthly\", \"value\": 1}\n```\n\n----------------------------------------\n\nTITLE: Capturing Total Payment Amount in Mercado Pago\nDESCRIPTION: Code examples for capturing the full amount of an authorized payment in Mercado Pago. Each example demonstrates how to use the respective SDK to capture a payment that was previously authorized but not captured.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $client->capture($payment_id, $request_options);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, Payment } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: 'YOUR_ACCESS_TOKEN' });\nconst payment = new Payment(client);\n\npayment.capture({\nid: '<PAYMENT_ID>',\ntransaction_amount: 12.34,\nrequestOptions: {\nidempotencyKey: '<IDEMPOTENCY_KEY>'\n}\n}).then(console.log).catch(console.log);\n```\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n\nLong paymentId = 123456789L;\n\nPaymentClient client = new PaymentClient();\nclient.capture(paymentId);\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\nrequest = {\ncapture: true\n}\n\npayment_response = sdk.payment.update(payment_id, request)\npayment = payment_response[:response]\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar client = new PaymentClient();\nPayment payment = await client.CaptureAsync(paymentId);\n```\n\nLANGUAGE: python\nCODE:\n```\nimport market\nsdk = Mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\npayment_data = { \"capture\": True }\npayment_response = sdk.payment().update(payment_id, payment_data)\npayment = payment_response[\"response\"]\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/payment\"\n)\n\nfunc main() {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := payment.NewClient(cfg)\n\n\t// Create payment.\n\trequest := payment.Request{\n\t\tTransactionAmount: 105.1,\n\t\tPayer: &payment.PayerRequest{\n\t\t\tEmail: \"{{EMAIL}}\",\n\t\t},\n\t\tToken:        \"{{CARD_TOKEN}}\",\n\t\tInstallments: 1,\n\t\tCapture:      false,\n\t}\n\n\tresource, err := client.Create(context.Background(), request)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\t// Capture.\n\tresource, err = client.Capture(context.Background(), resource.ID)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PUT \\\n'https://api.mercadopago.com/v1/payments/PAYMENT_ID' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n-H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n-d '{\"capture\": true}'\n```\n\n----------------------------------------\n\nTITLE: Modifying DIAN Tax Rate - JSON\nDESCRIPTION: This snippet shows how to modify the DIAN tax rate for a Mercado Pago preference. It defines the 'type' as 'IVA' and sets the 'value' to 16, which overrides the default 19% tax rate. It allows specifying a custom tax value.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"taxes\": [\n  {\n    \"type\": \"IVA\",\n    \"value\": 16\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating MercadoPago Preference with Multiple Items in Python\nDESCRIPTION: This Python snippet demonstrates how to create a MercadoPago preference with multiple items. It defines preference data containing two products with different titles, quantities, and prices, then creates the preference using the SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# Crea ítems en la preferencia\npreference_data = {\n    \"items\": [\n        {\n            \"title\": \"Mi producto\",\n            \"quantity\": 1,\n            \"unit_price\": 75.56\n        },\n        {\n            \"title\": \"Mi producto2\",\n            \"quantity\": 2,\n            \"unit_price\": 96.56\n        }\n    ]\n}\n\n# Crea la preferencia\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Reserving Payment Values with Mercado Pago in Go\nDESCRIPTION: Creates a payment with 'capture=false' to reserve the value on the card without completing the transaction. This Go implementation initializes a payment client and creates a request with the capture field set to false.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/make-value-reserve.en.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\naccessToken := \"{{ACCESS_TOKEN}}\"\n\n\ncfg, err := config.New(accessToken)\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nclient := payment.NewClient(cfg)\n\n\nrequest := payment.Request{\n   TransactionAmount: 100,\n   Token: \"ff8080814c11e237014c1ff593b57b4d\",\n   Description: \"My product\",\n   Installments: 1,\n   PaymentMethodID:  \"visa\",\n      Payer: &payment.PayerRequest{\n      Email: \"test_user_12345@testuser.com\",\n      Identification: &payment.IdentificationRequest{\n         Type: \"CPF\",\n         Number: \"01234567890\",\n      },\n   },\n   Capture: false,\n}\n\n\nresource, err := client.Create(context.Background(), request)\nif err != nil {\n   fmt.Println(err)\n}\n\n\nfmt.Println(resource)\n```\n\n----------------------------------------\n\nTITLE: Creating Full Refund with Mercadopago SDK in Ruby\nDESCRIPTION: This snippet demonstrates how to create a full refund using the Mercadopago SDK in Ruby. It initializes the SDK with an access token and calls the create method on the refund object with the payment ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ruby/refunds.en.md#2025-04-18_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\nsdk.refund.create(\"payment_id\")\n```\n\n----------------------------------------\n\nTITLE: Response Format for Reserved Values Payment\nDESCRIPTION: Shows the JSON response format when a payment is successfully authorized but pending capture. The response includes status fields indicating the payment is authorized but not yet captured.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/make-value-reserve.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": PAYMENT_ID,\n  ...\n  \"status\": \"authorized\",\n  \"status_detail\": \"pending_capture\",\n  ...\n  \"captured\": false,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mercado Pago Preference in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to create a Mercado Pago preference with a single item and sets the `purpose` to `wallet_purchase`, restricting payments to registered users. The preference object is created, an item is added with title, quantity and unit price, and the preference is saved.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-onsubmit.es.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\\n// Crear un objeto de preferencia\\n$preference = new MercadoPago\\Preference();\\n \\n// Crear un elemento en la preferencia\\n$item = new MercadoPago\\Item();\\n$item->title = 'Mi producto';\\n$item->quantity = 1;\\n$item->unit_price = 75.56;\\n$preference->items = array($item);\\n \\n// el $preference->purpose = 'wallet_purchase'; solo permite pagos registrados\\n// para permitir pagos de invitados, puedes omitir esta propiedad\\n$preference->purpose = 'wallet_purchase';\\n$preference->save();\\n?>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago SDK - Python\nDESCRIPTION: This Python snippet shows how to initialize a payment request using the Mercado Pago SDK. It sets the access token, request options, constructs the request body with payer and transaction details, and handles the payment creation process. Dependencies include the 'mercadopago' package.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pse.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'X-Idempotency-Key': '<SOME_UNIQUE_VALUE>'\n}\n \nbody = {\n    \"transaction_amount\": 5000,\n    \"description\": \"Product description\",\n    \"payment_method_id\": \"pse\",\n    \"callback_url\": \"https://your-site.com\",\n    \"notification_url\": \"https://your-site.com\",\n    \"additional_info\": {\n        \"ip_address\": \"127.0.0.1\"\n    },\n    \"transaction_details\": {\n        \"financial_institution\": request.POST.get(\"financialInstitution\")\n    },\n    \"payer\": {\n        \"email\": request.POST.get(\"email\"),\n        \"entity_type\": \"individual\",\n        \"first_name\": request.POST.get(\"firstName\"),\n        \"last_name\": request.POST.get(\"lastName\"),\n        \"identification\": {\n            \"type\": request.POST.get(\"identificationType\"), \n            \"number\": request.POST.get(\"identificationNumber\")\n        },\n        \"address\": {\n            \"zip_code\": request.POST.get(\"zipCode\"),\n            \"street_name\": request.POST.get(\"streetName\"),\n            \"street_number\": request.POST.get(\"streetNumber\"),\n            \"neighborhood\": request.POST.get(\"neighborhood\"),\n            \"city\": request.POST.get(\"city\"),\n            \"federal_unit\": request.POST.get(\"federalUnit\")\n        },\n        \"phone\": {\n            \"area_code\": request.POST.get(\"phoneAreaCode\"),\n            \"number\": request.POST.get(\"phoneNumber\")\n        }\n    }\n}\n \npayment_response = sdk.payment().create(body, request_options)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Preference for Installments without Card in Node.js\nDESCRIPTION: Node.js code snippet for creating a preference object with Mercado Pago SDK to enable installment payments without a card. It sets up an item and specifies the purpose as 'onboarding_credits'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/installments-without-card.en.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a preference object\nlet preference = {\nitems: [\n{\ntitle: 'My product',\nunit_price: 100,\nquantity: 1,\n}\n],\npurpose: 'onboarding_credits'\n};\n\nMercadopago.preferences.create(preference)\n.then(function(response){\nglobal.id = response.body.id;\n}).catch(function(error){\nconsole.log(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with MercadoPago - Go\nDESCRIPTION: This Go snippet shows how to create a payment request to MercadoPago by initializing a client and using a function to handle the HTTP request. The transaction and payer details are included, as well as setting the 3D Secure mode to optional.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.en.md#2025-04-18_snippet_19\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/payment\"\n)\n\nfunc processPayment(r *http.Request) {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := payment.NewClient(cfg)\n\n\trequest := payment.Request{\n\t\tTransactionAmount: r.FormValue(\"transactionAmount\"),\n\t\tToken: r.FormValue(\"token\"),\n            Description: r.FormValue(\"description\"),\n\t\tPaymentMethodID:   r.FormValue(\"paymentMethodId\"),\n\t\tPayer: &payment.PayerRequest{\n\t\t\tEmail: r.FormValue(\"email\"),\n\t\t\tIdentification: &payment.IdentificationRequest{\n\t\t\t\tType: r.FormValue(\"type\"),\n\t\t\t\tNumber: r.FormValue(\"number\"),\n\t\t\t},\n\t\t},\n\t}\n\n\tresource, err := client.Create(context.Background(), request)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Terminal ID with Redelcom API using cURL\nDESCRIPTION: This cURL command performs a GET request to retrieve the terminal ID based on its serial number. It requires authentication headers and the terminal's serial number as a query parameter.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/api-get-terminal.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n'https://api-dev.redelcom.cl:20010/v2/terminal?serialNumber={terminalCode}' \\\n--header 'X-Authentication: clientId;secret'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Information by ID with MercadoPago SDK in Java\nDESCRIPTION: This snippet demonstrates how to retrieve payment information based on the payment ID using the MercadoPago SDK in Java. It initializes the payment client and executes a query with the specified payment ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/create-payments.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nPaymentClient client = new PaymentClient();\n\nLong paymentId = 123456789L;\nclient.get(paymentId);\n```\n\n----------------------------------------\n\nTITLE: Adding Card Payment Form in HTML for Mexico\nDESCRIPTION: A variant of the typical payment form for specific regions, lacking certain optional inputs like identification type and number. It provides card number, expiration date, security code sections, and identification by issuer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.en.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n  <style>\n    #form-checkout {\n      display: flex;\n      flex-direction: column;\n      max-width: 600px;\n    }\n\n    .container {\n      height: 18px;\n      display: inline-block;\n      border: 1px solid rgb(118, 118, 118);\n      border-radius: 2px;\n      padding: 1px 2px;\n    }\n  </style>\n  <form id=\"form-checkout\">\n    <div id=\"form-checkout__cardNumber\" class=\"container\"></div>\n    <div id=\"form-checkout__expirationDate\" class=\"container\"></div>\n    <div id=\"form-checkout__securityCode\" class=\"container\"></div>\n    <input type=\"text\" id=\"form-checkout__cardholderName\" />\n    <select id=\"form-checkout__issuer\"></select>\n    <select id=\"form-checkout__installments\"></select>\n    <input type=\"email\" id=\"form-checkout__cardholderEmail\" />\n\n    <button type=\"submit\" id=\"form-checkout__submit\">Pay</button>\n    <progress value=\"0\" class=\"progress-bar\">Loading...</progress>\n  </form>\n```\n\n----------------------------------------\n\nTITLE: Creating Preference Object in Node.js\nDESCRIPTION: This code snippet shows how to create a preference object in Node.js using the Mercado Pago SDK. It defines a preference with an item and sets the preference purpose to 'wallet_purchase', restricting payments to logged-in users. It then uses `mercadopago.preferences.create` to create the preference and logs the preference ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-startup.en.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\n// Create a preference object\nlet preference = {\n  // the \"purpose\": \"wallet_purchase\" allows only logged payments\n  // to allow guest payments, you can omit this property\n  \"purpose\": \"wallet_purchase\",\n  \"items\": [\n    {\n      \"id\": \"item-ID-1234\",\n      \"title\": \"My product\",\n      \"quantity\": 1,\n      \"unit_price\": 75.76\n    }\n  ]\n};\n \nmercadopago.preferences.create(preference)\n  .then(function (response) {\n    // This value is the preferenceId that will be sent to Brick on startup\n    const preferenceId = response.body.id;\n  }).catch(function (error) {\n    console.log(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Payment Method in React\nDESCRIPTION: React configuration object for setting a default payment method in Payment Brick. Demonstrates the customization structure for visual settings with defaultPaymentOption properties.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/default-payment-method.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n   defaultPaymentOption: {\n     walletForm: true,\n     // creditCardForm: true,\n     // debitCardForm: true,\n     // savedCardForm: 'card id sent in the initialization',\n     // ticketForm: true,\n   },\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Creando pago con boleto bancario en Ruby\nDESCRIPTION: Implementación en Ruby para crear un pago con boleto bancario utilizando el SDK de Mercado Pago. Incluye configuración de headers personalizados, datos del pagador y dirección completa.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mlb.es.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_request = {\n  transaction_amount: 100,\n  description: 'Título do produto',\n  payment_method_id: 'bolbradesco',\n  payer: {\n    email: 'test@test.com',\n    first_name: 'Test',\n    last_name: 'User',\n    identification: {\n      type: 'CPF',\n      number: '19119119100',\n    },\n    address: {\n      zip_code: '06233200',\n      street_name: 'Av. das Nações Unidas',\n      street_number: '3003',\n      neighborhood: 'Bonfim',\n      city: 'Osasco',\n      federal_unit: 'SP'\n    }\n  }\n}\n\npayment_response = sdk.payment.create(payment_request, custom_request_options)\npayment = payment_response[:response]\n\n```\n\n----------------------------------------\n\nTITLE: Implementing CardNumber Secure Field with Mercado Pago React SDK\nDESCRIPTION: This snippet demonstrates how to initialize Mercado Pago SDK and use the CardNumber secure field component in a React application. It requires the public key for initialization and imports necessary components from the SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/react-secure-fields.en.md#2025-04-18_snippet_0\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { initMercadoPago, CardNumber } from '@mercadopago/sdk-react'\n\ninitMercadoPago('<YOUR_PUBLIC_KEY>');\n\nconst App = () => {\n return (\n   <CardNumber />\n );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creando preferencia de pago con Checkout Básico de Mercado Pago (cURL)\nDESCRIPTION: Este snippet muestra cómo crear una preferencia de pago utilizando la API de Mercado Pago. Incluye detalles del ítem, información del pagador, URLs de retorno, y configuraciones de métodos de pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.es.md#2025-04-18_snippet_5\n\nLANGUAGE: curl\nCODE:\n```\n$ curl https://api.mercadopago.com/checkout/preferences \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer <ACCESS_TOKEN>' \\\n  -d '\n{\n\t\"items\": [\n\t\t{\n\t\t\t\"id\": \"item-ID-1234\",\n\t\t\t\"title\": \"Title of what you are paying for. It will be displayed in the payment process.\",\n\t\t\t\"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n\t\t\t\"picture_url\": \"https://www.mercadopago.com/org-img/MP3/home/logomp3.gif\",\n\t\t\t\"description\": \"Item description\",\n\t\t\t\"category_id\": \"others\",\n\t\t\t\"quantity\": 1,\n\t\t\t\"unit_price\": 100\n\t\t}\n\t],\n\t\"payer\": {\n\t\t\"name\": \"user-name\",\n\t\t\"surname\": \"test_user_88271050@testuser.com\",\n\t\t\"email\": \"user@email.com\",\n\t\t\"phone\": {\n\t\t\t\"area_code\": \"11\",\n\t\t\t\"number\": \"4444-4444\"\n\t\t},\n\t\t\"identification\": {\n\t\t\t\"type\": \"DNI\",\n\t\t\t\"number\": \"12345678\"\n\t\t},\n\t\t\"address\": {\n\t\t\t\"street_name\": \"Street\",\n\t\t\t\"street_number\": 123,\n\t\t\t\"zip_code\": \"5700\"\n\t\t}\n\t},\n\t\"back_urls\": {\n\t\t\"success\": \"https://www.success.com\",\n\t\t\"failure\": \"http://www.failure.com\",\n\t\t\"pending\": \"http://www.pending.com\"\n\t},\n\t\"auto_return\": \"approved\",\n\t\"payment_methods\": {\n\t\t\"excluded_payment_methods\": [\n\t\t\t{\n\t\t\t\t\"id\": \"master\"\n\t\t\t}\n\t\t],\n\t\t\"excluded_payment_types\": [\n\t\t\t{\n\t\t\t\t\"id\": \"ticket\"\n\t\t\t}\n\t\t]\n\t},\n\t\"shipments\": {\n\t\t\"receiver_address\": {\n\t\t\t\"zip_code\": \"5700\",\n\t\t\t\"street_number\": 123,\n\t\t\t\"street_name\": \"Street\",\n\t\t\t\"floor\": 4,\n\t\t\t\"apartment\": \"C\"\n\t\t}\n\t},\n\t\"notification_url\": \"https://www.your-site.com/ipn\",\n\t\"external_reference\": \"Reference_1234\",\n\t\"counter_currency\": {\n\t\t\"currency_id\": \"USD\"\n\t}\n}\n'\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Multiple Items\nDESCRIPTION: This Java snippet illustrates how to create a Mercado Pago preference object and add multiple items using the MercadoPago SDK. It constructs a list of `PreferenceItemRequest` objects, each representing an item with its ID, title, quantity, currency, and unit price. The preference is then created using the `PreferenceClient`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Cria um objeto preferência\nPreferenceClient client = new PreferenceClient();\n// Cria itens na preferência\nPreferenceClient client = new PreferenceClient();\n\nList<PreferenceItemRequest> items = new ArrayList<>();\n\nPreferenceItemRequest item1 =\n   PreferenceItemRequest.builder()\n       .id(\"1234\")\n       .title(\"Produto 1\")\n       .quantity(2)\n       .currencyId(\"BRL\")\n       .unitPrice(new BigDecimal(\"100\"))\n       .build();   \nPreferenceItemRequest item2 =\n   PreferenceItemRequest.builder()\n       .id(\"12\")\n       .title(\"Produto 2\")\n       .quantity(1)\n       .currencyId(\"BRL\")\n       .unitPrice(new BigDecimal(\"100\"))\n       .build();\n\nitems.add(item1);\nitems.add(item2);\n\nPreferenceRequest request = PreferenceRequest.builder().items(items).build();\n// Salvar e postar a preferência\nclient.create(request);\n\n```\n\n----------------------------------------\n\nTITLE: Creating Event/Ticket Payment with Credit Card via Mercado Pago API\nDESCRIPTION: This cURL request demonstrates how to create a payment for an event or ticket using Mercado Pago's API. It includes transaction details, customer information, event specifics, and shipping information. The request requires authorization via an access token and includes platform identification for partners.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/credit-card-events.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'x-platform-id: {{PLATFORM_ID fornecido pelo time de Partners}}' \\\n--header 'Authorization: Bearer {{ACCESS_TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"transaction_amount\": 120.34,\n    \"installments\": 1,\n    \"statement_descriptor\": \"Loja do vendedor\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": {{ID da sua conta Mercado Pago referente à sua plataforma}},\n    \"payment_method_id\": \"{{payment_method_id}}\",\n    \"token\":  \"{{card_token_id}}\",\n    \"external_reference\": \"Identificador da plataforma\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"description\": \"Data (no formato dd/mm/aaaa) | Nome do evento\",\n    \"payer\": {\n        \"first_name\": \"Nome. Exemplo: João\",\n        \"last_name\": \"Sobrenome. Exemplo: Silva\",\n        \"email\": \"Exemplo: test_user_1677281849@testuser.com\",\n        \"identification\": {\n            \"type\": \"Tipo de documento. Exemplo: CPF\",\n            \"number\": \"Número do documento. Exemplo: 19119119100\"\n        },\n        \"address\": {\n            \"zip_code\": \"CEP. Exemplo: 06233-200\",\n            \"street_name\": \"Nome da rua. Exemplo: Av. das Nações Unidas\",\n            \"street_number\": \"Número. Exemplo: 3003\",\n            \"neighborhood\": \"Bairro. Exemplo: Bonfim\",\n            \"city\": \"Cidade. Exemplo: Osasco\",\n            \"federal_unit\": \"UF. Exemplo: SP\"\n        }\n    },\n    \"additional_info\": {\n        \"referral_url\": \"URL de referência. Exemplo: www.sellertest123.com\",\n        \"drop_shipping\": false,\n        \"delivery_promise\": \"2022-11-20\",\n        \"contrated_plan\": \"premium\",\n        \"items\": [\n            {\n                \"id\": \"1941\",\n                \"title\": \"Data (no formato dd/mm/aaaa) | Nome do evento\",\n                \"description\": \"Data (no formato dd/mm/aaaa) | Nome do evento\",\n                \"picture_url\": null,\n                \"category_id\": \"Categoria. Exemplo: tickets\",\n                \"quantity\": 1,\n                \"unit_price\": 120.34,\n                \"event_date\": \"2019-12-25T19:30:00.000-03:00\"\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome. Exemplo: João\",\n            \"last_name\": \"Sobrenome. Exemplo: Silva\",\n            \"is_prime_user\": \"1\",\n            \"is_first_purchase_online\": \"1\",\n            \"last_purchase\": \"2020-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"Código da área. Exemplo: 11\",\n                \"number\": \"Número. Exemplo: 987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"CEP. Exemplo: 06233-200\",\n                \"street_name\": \"Rua. Exemplo: Av. das Nações Unidas\",\n                \"street_number\": \"Número. Exemplo: 3003\"\n            },\n            \"registration_date\": \"2013-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"0\",\n            \"pick_up_on_seller\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"Código de área. Exemplo: 95630000\",\n                \"street_name\": \"Nome da rua. Exemplo: São Luiz\",\n                \"street_number\": \"Número. Exemplo: 15\",\n                \"floor\": \"Andar (caso seja apartamento). Exemplo: Segundo\",\n                \"apartment\": \"Número do apartamento (caso seja apartamento). Exemplo: 93\"\n            }\n        }\n    }  \n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Transaction with Mercado Pago API using cURL\nDESCRIPTION: This cURL command demonstrates how to make a POST request to the Mercado Pago API for creating a payment transaction. It shows how to include necessary headers such as platform ID and authorization token, and provides a detailed JSON body that specifies transaction details including amounts, payer information, and item descriptions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/pi-transactions-via-checkout-transparente.en.md#2025-04-18_snippet_0\n\nLANGUAGE: cURL\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'x-platform-id: {{PLATFORM_ID provided by the Partners team}}' \\\n--header 'Authorization: Bearer {{ACCESS_TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\\n    \"transaction_amount\": 100,\\n    \"installments\": 1,\\n    \"statement_descriptor\": \"Seller's store\",\\n    \"capture\": true,\\n    \"binary_mode\": false,\\n    \"sponsor_id\": {{ID of your Mercado Pago account related to your platform.}},\\n    \"payment_method_id\": \"{{payment_method_id}}\",\\n    \"token\": {{card_token_id}},\\n    \"external_reference\": \"Platform identifier\",\\n    \"notification_url\": \"{{notification_url}}\",\\n    \"description\": \"Seller's product description\",\\n    \"payer\": {\\n        \"first_name\": \"Name. Example: John\",\\n        \"last_name\": \"Last name. Example: Jones\",\\n        \"email\": \"test_user_1677272335@testuser.com\",\\n        \"identification\": {\\n            \"type\": \"Type. Example: CPF\",\\n            \"number\": \"Document number. Example: 19119119100\"\\n        },\\n        \"address\": {\\n            \"zip_code\": \"Zip code. Example: 06233-200\",\\n            \"street_name\": \"Street name. Example: Av. das Nações Unidas\",\\n            \"street_number\": \"Street number. Example: 3003\",\\n            \"neighborhood\": \"Neighborhood. Example: Bonfim\",\\n            \"city\": \"City. Example: Osasco\",\\n            \"federal_unit\": \"Federal unit. Example: SP\"\\n        }\\n    },\\n    \"additional_info\": {\\n        \"referral_url\": \"Referral URL. Example: www.sellertest123.com\",\\n        \"drop_shipping\": true,\\n        \"delivery_promise\": \"2022-11-20\",\\n        \"contrated_plan\": \"premium\",\\n        \"items\": [\\n            {\\n                \"id\": \"1941\",\\n                \"title\": \"Seller's product\",\\n                \"description\": \"Description of the seller's product\",\\n                \"picture_url\": null,\\n                \"category_id\": \"Category. Example: electronics\",\\n                \"quantity\": 1,\\n                \"unit_price\": 100.00\\n            }\\n        ],\\n        \"payer\": {\\n            \"first_name\": \"Name. Example: John\",\\n            \"last_name\": \"Last name. Example: Jones\",\\n            \"is_prime_user\": \"1\",\\n            \"is_first_purchase_online\": \"1\",\\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\\n            \"phone\": {\\n                \"area_code\": \"Area code. Example: 11\",\\n                \"number\": \"Phone number. Example: 987654321\"\\n            },\\n            \"address\": {\\n                \"zip_code\": \"Zip code. Example: 06233-200\",\\n                \"street_name\": \"Street name. Example: Av. das Nações Unidas\",\\n                \"street_number\": \"Number. Example: 3003\"\\n            },\\n            \"registration_date\": \"2013-08-06T09:25:04.000-03:00\"\\n        },\\n        \"shipments\": {\\n            \"express_shipment\": \"0\",\\n            \"pick_up_on_seller\": \"1\",\\n            \"receiver_address\": {\\n                \"zip_code\": \"Zip code. Example: 95630000\",\\n                \"street_name\": \"Street name. Example: São Luiz\",\\n                \"street_number\": \"Street number. Example: 15\",\\n                \"floor\": \"Floor (if it's an apartment). Example: Second\",\\n                \"apartment\": \"Apartment number (if it's an apartment). Example: 93\"\\n            }\\n        }\\n    }\\n}'\n```\n\n----------------------------------------\n\nTITLE: Sending Payment Request with Idempotency Key - Curl\nDESCRIPTION: This snippet demonstrates how to send a POST request to the MercadoPago API to create a payment. It includes headers for authorization and idempotency, as well as a JSON body that specifies the payment details. The unique `X-Idempotency-Key` header is essential to avoid duplicate payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/idempotency.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'X-Idempotency-Key: IDEMPOTENCY_KEY' \\\n    -H 'Authorization: Bearer ACCESS_TOKEN' \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    'https://api.mercadopago.com/v1/advanced_payments' \\\n    -d '{\\\n        \"wallet_payment\":{\\\n           \"transaction_amount\":700.50,\\\n           \"description\":\"Payment Description\",\\\n           \"external_reference\":\"Pago_123\"     \\\n        },\\\n       \"payer\":{\\\n           \"token\":\"PAYER_TOKEN\",\\\n           \"type_token\": \"wallet-token\"\\\n        }\\\n      }'\\\n\n```\n\n----------------------------------------\n\nTITLE: Validating Mercado Pago Notification Signature in Javascript\nDESCRIPTION: This JavaScript code snippet validates a Mercado Pago notification signature. It retrieves the `x-signature` and `x-request-id` headers, extracts the `data.id` query parameter from the URL, parses the `x-signature` header to get the timestamp (`ts`) and hash values, and constructs a manifest string. It then computes the HMAC-SHA256 hash of the manifest using a secret key and compares it against the extracted hash.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/notifications.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Obtain the x-signature value from the header\nconst xSignature = headers['x-signature']; // Assuming headers is an object containing request headers\nconst xRequestId = headers['x-request-id']; // Assuming headers is an object containing request headers\n\n// Obtain Query params related to the request URL\nconst urlParams = new URLSearchParams(window.location.search);\nconst dataID = urlParams.get('data.id');\n\n// Separating the x-signature into parts\nconst parts = xSignature.split(',');\n\n// Initializing variables to store ts and hash\nlet ts;\nlet hash;\n\n// Iterate over the values to obtain ts and v1\nparts.forEach(part => {\n    // Split each part into key and value\n    const [key, value] = part.split('=');\n    if (key && value) {\n        const trimmedKey = key.trim();\n        const trimmedValue = value.trim();\n        if (trimmedKey === 'ts') {\n            ts = trimmedValue;\n        } else if (trimmedKey === 'v1') {\n            hash = trimmedValue;\n        }\n    }\n});\n\n// Obtain the secret key for the user/application from Mercadopago developers site\nconst secret = 'your_secret_key_here';\n\n// Generate the manifest string\nconst manifest = `id:${dataID};request-id:${xRequestId};ts:${ts};`;\n\n// Create an HMAC signature\nconst hmac = crypto.createHmac('sha256', secret);\nhmac.update(manifest);\n\n// Obtain the hash result as a hexadecimal string\nconst sha = hmac.digest('hex');\n\nif (sha === hash) {\n    // HMAC verification passed\n    console.log(\"HMAC verification passed\");\n} else {\n    // HMAC verification failed\n    console.log(\"HMAC verification failed\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Fintoc Payment with MercadoPago PHP SDK\nDESCRIPTION: Demonstrates how to create a Fintoc payment using the MercadoPago PHP SDK, including setting up the payment details and handling the response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-advanced.en.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nMercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n    \n$client = new PaymentClient();\n\n$createRequest = [\n  \"description\" => \"Product title\",\n  \"payer\" => [\n     \"email\" => \"test_user_123@testuser.com\",\n  ],\n  \"payment_method_id\" => \"fintoc\",\n  \"transaction_amount\" => 5000,\n  \"callback_url\" => \"https://www.your-site.com\",\n  \"point_of_interaction\" => [\n    \"type\" => \"CHECKOUT\",\n    \"sub_type\" => \"INTER_PSP\"\n  ]\n];\n\n    $client->create($createRequest, $request_options);\n```\n\n----------------------------------------\n\nTITLE: Capturing Total Payment Value with Node.js\nDESCRIPTION: This snippet shows how to capture the total value of a previously authorized payment using the Mercado Pago Node.js SDK. It requires the payment ID, transaction amount, and an idempotency key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, Payment } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: 'YOUR_ACCESS_TOKEN' });\nconst payment = new Payment(client);\n\npayment.capture({\nid: '<PAYMENT_ID>',\ntransaction_amount: 12.34,\nrequestOptions: {\nidempotencyKey: '<IDEMPOTENCY_KEY>'\n}\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Processing Online Payments with IVA Tax via MercadoPago API\nDESCRIPTION: Example of how to create a payment with explicit IVA tax information through MercadoPago's payments API. Shows how to specify transaction_amount, net_amount, and taxes fields to properly handle Colombian VAT.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/iva-colombia.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n        -H 'accept: application/json' \\\n        -H 'content-type: application/json' \\\n        -H 'Authorization: Bearer ACCESS_TOKEN' \\\n        'https://api.mercadopago.com/v1/payments' \\\n        -d '{\n                \"transaction_amount\": 10000,\n                \"net_amount\": 9500,\n                \"taxes\":[{\n                        \"value\": 500,\n                        \"type\": \"IVA\"\n                }],\n                \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n                \"description\": \"Title of what you are paying for\",\n                \"installments\": 1,\n                \"payment_method_id\": \"visa\",\n                \"payer\": {\n                        \"email\": \"test_user_19653727@testuser.com\"\n                }\n            }'\n```\n\n----------------------------------------\n\nTITLE: Creando variable HTML personalizada para el Device ID\nDESCRIPTION: Código HTML para crear una variable personalizada mediante un input oculto que almacenará el ID del dispositivo, proporcionando una alternativa al uso de variables JavaScript.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.es.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"hidden\" id=\"deviceId\">\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago Python SDK\nDESCRIPTION: This snippet demonstrates how to create a payment using the Mercado Pago Python SDK. It requires the mercadopago package. It constructs a payment request with transaction details like amount, token, and payer information.  The request is sent to the Mercado Pago API using the payment().create method, with custom headers including the idempotency key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.es.md#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n   \"transaction_amount\": float(request.POST.get(\"transaction_amount\")),\n   \"token\": request.POST.get(\"token\"),\n   \"description\": request.POST.get(\"description\"),\n   \"installments\": int(request.POST.get(\"installments\")),\n   \"payment_method_id\": request.POST.get(\"payment_method_id\"),\n   \"payer\": {\n       \"email\": request.POST.get(\"email\"),\n       \"identification\": {\n           \"type\": request.POST.get(\"type\"), \n           \"number\": request.POST.get(\"number\")\n       }\n   }\n}\n \npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n \nprint(payment)\n\n```\n\n----------------------------------------\n\nTITLE: Refreshing OAuth Token in Node.js\nDESCRIPTION: This snippet showcases how to refresh an existing OAuth token using the MercadoPago SDK. It sets up a client similar to the creation snippet and specifies parameters like client secret, client ID, and refresh token to refresh the token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/oauth.en.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token', options: { timeout: 5000 } });\n\nconst oauth = new OAuth(client);\n\noauth.refresh({\n\t'client_secret': 'your-client-secret',\n\t'client_id': 'your-client-id',\n\t'refresh_token': 'refresh-token'\n}).then((result) => console.log(result))\n\t.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Credit Card via Mercado Pago API\nDESCRIPTION: This curl command creates a payment with a credit card using the Mercado Pago API. It requires setting specific headers, including authentication tokens, platform ID, and content type. The request body includes information about the transaction, payer, and additional details such as item descriptions and shipment information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/credit-card-events.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'x-platform-id: {{PLATFORM_ID provided by the Partners team}}' \\\n--header 'Authorization: Bearer {{ACCESS_TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{ \n    \"transaction_amount\": 120.34,\n    \"installments\": 1,\n    \"statement_descriptor\": \"Seller's store\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": {{ID of your Mercado Pago account related to your platform}},\n    \"payment_method_id\": \"{{payment_method_id}}\",\n    \"token\":  \"{{card_token_id}}\",\n    \"external_reference\": \"Platform identifier\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"description\": \"Date (in the format dd/mm/yyyy) | Event name\",\n    \"payer\": {\n        \"first_name\": \"Name. Example: John\",\n        \"last_name\": \"Last name. Example: Jones\",\n        \"email\": \"Example: test_user_1677281849@testuser.com\",\n        \"identification\": {\n            \"type\": \"Document type. Example: CPF\",\n            \"number\": \"Document number. Example: 19119119100\"\n        },\n        \"address\": {\n            \"zip_code\": \"Zip code. Example: 06233-200\",\n            \"street_name\": \"Street name. Example: Av. das Nações Unidas\",\n            \"street_number\": \"Number. Example: 3003\",\n            \"neighborhood\": \"Neighborhood. Example: Bonfim\",\n            \"city\": \"City. Example: Osasco\",\n            \"federal_unit\": \"Federal unit. Example: SP\"\n        }\n    },\n    \"additional_info\": {\n        \"referral_url\": \"Referral URL. Example: www.sellertest123.com\",\n        \"drop_shipping\": false,\n        \"delivery_promise\": \"2022-11-20\",\n        \"contrated_plan\": \"premium\",\n        \"items\": [\n            {\n                \"id\": \"1941\",\n                \"title\": \"Date (in the format dd/mm/yyyy) | Event name\",\n                \"description\": \"Date (in the format dd/mm/yyyy) | Event name\",\n                \"picture_url\": null,\n                \"category_id\": \"Category. Example: tickets\",\n                \"quantity\": 1,\n                \"unit_price\": 120.34,\n                \"event_date\": \"2019-12-25T19:30:00.000-03:00\"\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Name. Example: John\",\n            \"last_name\": \"Last name. Example: Jones\",\n            \"is_prime_user\": \"1\",\n            \"is_first_purchase_online\": \"1\",\n            \"last_purchase\": \"2020-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"Area code. Example: 11\",\n                \"number\": \"Phone number. Example: 987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"Zip code. Example: 06233-200\",\n                \"street_name\": \"Street name. Example: Av. das Nações Unidas\",\n                \"street_number\": \"Number. Example: 3003\"\n            },\n            \"registration_date\": \"2013-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"0\",\n            \"pick_up_on_seller\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"Zip code. Example: 95630000\",\n                \"street_name\": \"Street name. Example: São Luiz\",\n                \"street_number\": \"Number. Example: 15\",\n                \"floor\": \"Floor (in case it is an apartment). Example: Second\",\n                \"apartment\": \"Apartment number (in case it is an apartment). Example: 93\"\n            }\n        }\n    }  \n}'\n```\n\n----------------------------------------\n\nTITLE: Validating Bluetooth Status Using MPManager (Java)\nDESCRIPTION: This Java snippet provides an example of how to check the current Bluetooth status on a Smart POS device using the getCurrentState method of the BluetoothIgnitor class. The result is processed in a callback, determining if Bluetooth is activated or deactivated.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/manage-status.en.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nfinal BluetoothIgnitor bluetoothIgnitor = MPManager.INSTANCE.getBluetooth().getIgnitor();\n\nfinal Function1<MPResponse<Boolean>, Unit> callback = (final MPResponse<Boolean> response) -> {\n if (response.getStatus() == ResponseStatus.SUCCESS) {\n   if (!response.getData()) {\n     // Bluetooth is activated\n     // Perform additional actions if necessary\n   } else {\n     // Bluetooth is deactivated\n     // Perform additional actions if necessary\n   }\n } else {\n   // Manage the error case if necessary\n }\n return Unit.INSTANCE;\n};\n\nbluetoothIgnitor.getCurrentState(callback);\n\n```\n\n----------------------------------------\n\nTITLE: Querying Payment Methods with MercadoPago SDK in Ruby\nDESCRIPTION: This code snippet demonstrates how to use the MercadoPago SDK to retrieve available payment methods. It initializes the SDK with an access token and then calls the payment_methods.get() method to fetch the payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ruby/payment-methods.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\npayment_methods_response = sdk.payment_methods.get()\npayment_methods = payment_methods_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Searching Preferences in MercadoPago SDK using PHP\nDESCRIPTION: This snippet searches for payment preferences using the MercadoPago SDK in PHP. It requires a PreferenceClient instance and a MPSearchRequest with filters like sponsor_id and site_id. No outputs are shown, but it would typically return a list of matching preferences.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/preferences.en.md#2025-04-18_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n  $client = new PreferenceClient();\n\n  $search_request = new MPSearchRequest(1, 0, [\n    \"sponsor_id\" => \"0\",\n    \"external_reference\" => \"\",\n    \"site_id\" => \"MLA\",\n    \"marketplace\" => \"NONE\"\n  ]);\n  $client->search($search_request);\n?>\n```\n\n----------------------------------------\n\nTITLE: Sending Payment Request to Mercado Pago API using cURL\nDESCRIPTION: This cURL command sends a payment request to the Mercado Pago API with transaction details including amount, installments, payer details, and item information. Proper authentication is required through headers. Ensure the use of valid 'ACCESS_TOKEN' and other placeholder variables.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/direct-sale.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}}' \\\n--data-raw '{\\n    \"transaction_amount\": 1500.00,\\n    \"installments\": 1,\\n    \"statement_descriptor\": \"LOJA 123\",\\n    \"capture\": true,\\n    \"binary_mode\": false,\\n    \"sponsor_id\": null,\\n    \"application_fee\": null,\\n    \"payment_method_id\": \"debvisa\",\\n    \"token\": \"{{card_token_id}}\",\\n    \"external_reference\": \"Pedido01\",\\n    \"description\": \"PEDIDO NOVO\",\\n    \"notification_url\": \"{{notification_url}}\",\\n    \"metadata\": {\\n        \"order_number\": \"order_01\"\\n    },\\n    \"payer\": {\\n        \"email\": \"test_user_123456789@testuser.com\",\\n        \"identification\": {\\n            \"type\": \"CPF\",\\n            \"number\": \"12345678909\"\\n        }\\n    },\\n    \"additional_info\": {\\n        \"items\": [\\n            {\\n                \"id\": \"1234\",\\n                \"title\": \"Direct sale\",\\n                \"description\": \"Gold ring\",\\n                \"category_id\": \"jewelry\",\\n                \"quantity\": 1,\\n                \"unit_price\": 1500\\n            }\\n        ],\\n        \"payer\": {\\n            \"first_name\": \"Nome\",\\n            \"last_name\": \"Sobrenome\",\\n            \"is_prime_user\": true,\\n            \"is_first_purchase_online\": true,\\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\\n            \"phone\": {\\n                \"area_code\": \"11\",\\n                \"number\": \"987654321\"\\n            },\\n            \"address\": {\\n                \"zip_code\": \"206233-2002\",\\n                \"street_name\": \"Av. das Nações Unidas\",\\n                \"street_number\": \"230032\"\\n            },\\n            \"authentication_type\": \"Facebook\",\\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\\n        },\\n        \"shipments\": {\\n            \"local_pickup\": \"1\",\\n            \"receiver_address\": {\\n                \"zip_code\": \"306233-2003\",\\n                \"street_name\": \"Av. das Nações Unidas\",\\n                \"street_number\": \"3003\",\\n                \"floor\": \"5\",\\n                \"apartment\": \"502\",\\n                \"state_name\": \"DF\",\\n                \"city_name\": \"Bogota\"\\n            }\\n        }\\n    }\\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with MercadoPago SDK in Ruby\nDESCRIPTION: This code snippet demonstrates how to create a payment using the MercadoPago SDK in Ruby. It includes setting up the SDK with an access token, defining custom headers with an idempotency key, and creating a payment request with specific parameters such as token, installments, transaction amount, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ruby/create-payments.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_request = {\n  token: 'ff8080814c11e237014c1ff593b57b4d',\n  installments: 1,\n  transaction_amount: 100,\n  payer: {\n    type: 'customer',\n    id: '123456789-jxOV430go9fx2e'\n  }\n}\npayment_response = sdk.payment.create(payment_request, custom_request_options)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Creating a Subscription Associated to a Plan via API Request\nDESCRIPTION: This curl command creates a subscription associated with a pre-existing plan using the Mercado Pago API. It uses the `preapproval_plan_id` from the previously created plan and includes details such as the payer's email, card token, and auto-recurring billing information. The subscription must be created with `card_token_id` and status `authorized`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/subscriptions-associated-plan.en.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n      'https://api.mercadopago.com/preapproval' \\\n      -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n      -H 'Content-Type: application/json' \\ \n      -d '{\n  \"preapproval_plan_id\": \"2c938084726fca480172750000000000\",\n  \"reason\": \"Yoga classes\",\n  \"external_reference\": \"YG-1234\",\n  \"payer_email\": \"test_user@testuser.com\",\n  \"card_token_id\": \"e3ed6f098462036dd2cbabe314b9de2a\",\n  \"auto_recurring\": {\n    \"frequency\": 1,\n    \"frequency_type\": \"months\",\n    \"start_date\": \"2020-06-02T13:07:14.260Z\",\n    \"end_date\": \"2022-07-20T15:59:52.581Z\",\n    \"transaction_amount\": 10,\n    \"currency_id\": \"ARS\"\n  },\n  \"back_url\": \"https://www.mercadopago.com.ar\",\n  \"status\": \"authorized\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment in Java with MercadoPago SDK\nDESCRIPTION: This code snippet shows how to capture a partial amount from a reserved payment using the MercadoPago Java SDK. It sets the access token, creates a PaymentClient, and calls the capture method with the payment ID and the new transaction amount.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.en.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n\nLong paymentId = 123456789L;\n\nPaymentClient client = new PaymentClient();\nclient.capture(paymentId, new BigDecimal(\"75\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Back URLs in Java\nDESCRIPTION: This code snippet demonstrates how to create a PreferenceBackUrlsRequest for payment preferences and set back URLs in Java using the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/redirection.es.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nPreferenceBackUrlsRequest backUrls =\n// ...\n   PreferenceBackUrlsRequest.builder()\n       .success(\"https://www.seu-site/success\")\n       .pending(\"https://www.seu-site/pending\")\n       .failure(\"https://www.seu-site/failure\")\n       .build();\n\nPreferenceRequest request = PreferenceRequest.builder().backUrls(backUrls).build();\n// ...\n```\n\n----------------------------------------\n\nTITLE: Criando pagamento PagoEfectivo ATM com Node.js\nDESCRIPTION: Implementação em Node.js para criar um pagamento via PagoEfectivo ATM usando o SDK do Mercado Pago. O código inclui a configuração do token de acesso e cabeçalho de idempotência para transações seguras.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mpe.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Payment, MercadoPagoConfig } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\n\npayment.create({\n    body: { \n        transaction_amount: req.transaction_amount,\n        token: req.token,\n        description: req.description,\n        installments: req.installments,\n        payment_method_id: req.paymentMethodId,\n        issuer_id: req.issuer,\n            payer: {\n            email: req.email,\n            identification: {\n        type: req.identificationType,\n        number: req.number\n    }}},\n    requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n.then((result) => console.log(result))\n.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Saving Customer Card with Mercado Pago SDK in Java\nDESCRIPTION: This snippet shows how to securely save a customer card reference in Mercado Pago's servers using the CustomerCardClient. It requires a valid customer ID and a token representing the card.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/cards.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nCustomerCardClient client = new CustomerCardClient();\n\nString customerId = \"448870796-7ZjwhKGxILixxN\";\n\nCustomerCardCreateRequest request = CustomerCardCreateRequest.builder()\n   .token(\"9b2d63e00d66a8c721607214ceda233a\")\n   .build();\n\nclient.create(customerId, request);\n```\n\n----------------------------------------\n\nTITLE: Updating Preference with Preference ID - Java\nDESCRIPTION: This code updates an existing payment preference using the Mercado Pago Java SDK. It modifies the preference by creating a list of new `PreferenceItemRequest` objects and updates using `PreferenceClient.update()`. Dependencies include the Mercado Pago SDK and BigDecimal. Key parameters are the `preferenceId` and updated item details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/preferences.en.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n\nPreferenceClient client = new PreferenceClient();\n\nString preferenceId = \"202809963-a2201f8d-11cb-443f-adf6-de5a42eed67d\";\n\nList<PreferenceItemRequest> items = new ArrayList<>();\nPreferenceItemRequest item =\n   PreferenceItemRequest.builder()\n       .id(\"202809963-a2201f8d-11cb-443f-adf6-de5a42eed67d\")\n       .title(\"Dummy Title\")\n       .description(\"Dummy description\")\n       .pictureUrl(\"http://www.myapp.com/myimage.jpg\")\n       .quantity(1)\n       .currencyId(\"US\")\n       .unitPrice(new BigDecimal(\"10\"))\n       .build();\nitems.add(item);\n\nPreferenceRequest request = PreferenceRequest.builder().items(items).build();\n\nclient.update(preferenceId, request);\n\n```\n\n----------------------------------------\n\nTITLE: Creating Preference for Onboarding Credits with Java\nDESCRIPTION: This Java snippet illustrates creating a Mercado Pago preference for onboarding credits. It uses the `PreferenceClient` to create a preference with an item and sets the `purpose` to `onboarding_credits`. This allows customers to pay in installments without a credit card, leveraging the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// Crea un objeto de preferencia\nPreferenceClient client = new PreferenceClient();\n\n// Crea un ítem en la preferencia\nPreferenceItemRequest item =\n   PreferenceItemRequest.builder()\n       .title(\"Mi producto\")\n       .quantity(1)\n       .unitPrice(new BigDecimal(\"75\"))\n       .build();\n\nList<PreferenceItemRequest> items = new ArrayList<>();\nitems.add(item);\n\nPreferenceRequest request =\n   PreferenceRequest.builder().items(items).purpose(\"onboarding_credits\").build();\n\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Bancário Payment with Discounts, Fines, and Interest in Java\nDESCRIPTION: This Java code snippet demonstrates how to create a boleto bancário payment with discounts, fines, and interest using the Mercado Pago SDK. It sets up the payment details, payer information, and payment rules for discounts, fines, and interest.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\nPaymentClient client = new PaymentClient();\nLocalDateTime dateOfExpiration = LocalDateTime.of(2022, 12, 24, 23, 59, 59);\nPaymentCreateRequest createRequest =\n    PaymentCreateRequest.builder()\n        .description(\"Título do produto\")\n        .dateOfExpiration(OffsetDateTime.of(dateOfExpiration, ZoneOffset.UTC))\n        .paymentMethodId(\"bolbradesco\")\n        .transactionAmount(new BigDecimal(\"100\"))\n        .payer(PaymentPayerRequest.builder()\n            .firstName(\"Test\")\n            .lastName(\"User\")\n            .email(\"test_user_123456@testuser.com\")\n            .identification(IdentificationRequest.builder()\n                .type(\"CPF\")\n                .number(\"19119119100\")\n                .build())\n            .build())\n        .paymentMethod(PaymentMethodRequest.builder()\n            .data(PaymentDataRequest.builder()\n                .rules(PaymentRulesRequest.builder()\n                     .discounts(Collections.singletonList(\n                          PaymentDiscountRequest.builder()\n                               .value(new BigDecimal(\"5\"))\n                               .type(\"fixed\")\n                               .limitDate(LocalDate.of(2022, 12, 10))\n                               .build()))\n                     .fine(PaymentFeeRequest.builder()\n                          .value(new BigDecimal(\"2\"))\n                          .type(\"percentage\")\n                          .build())\n                     .interest(PaymentFeeRequest.builder()\n                          .value(new BigDecimal(\"0.03\"))\n                          .type(\"percentage\")\n                          .build())\n                     .build())\n                 .build())\n             .build())\n         .build();\nPayment payment = client.create(createRequest);\nSystem.out.printf(\"URL boleto: %s\", payment.getTransactionDetails().getExternalResourceUrl());\n```\n\n----------------------------------------\n\nTITLE: HMAC Signature Generation in Python\nDESCRIPTION: This Python code snippet generates an HMAC signature using the `hmac` and `hashlib` modules. It encodes both the secret key and the signed template to bytes and then calculates the HMAC-SHA256 signature. The result is converted to a hexadecimal representation using `binascii.hexlify`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/notifications.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport hashlib, hmac, binascii\n\ncyphedSignature = binascii.hexlify(hmac_sha256(secret.encode(), signedTemplate.encode()))\n```\n\n----------------------------------------\n\nTITLE: Agregando el Código de Seguridad de Mercado Pago\nDESCRIPTION: Agrega el script de seguridad de Mercado Pago a tu sitio web para capturar el Device ID. Se recomienda añadirlo especialmente en la página de checkout, aunque también es útil en otras secciones.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-chopro.es.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"home\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Open Finance Payment with cURL\nDESCRIPTION: Direct API request example using cURL to create an Open Finance payment. Includes the complete JSON payload with all required fields including bank information for the Open Finance transaction.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/advanced-openFinance.en.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{access_token}}' \\\n--data-raw '{\n\"callback_url\": \"https://example.com/\",\n\"payment_method_id\": \"pix\",\n\"transaction_amount\": 5,\n\"external_reference\": \"my_order_id_123\",\n\"description\": \"Online Open Finance Payment\",\n\"date_of_expiration\": \"2023-08-01T12:44:41.000-03:00\",\n\"payer\": {\n   \"first_name\": \"Carlos\",\n   \"last_name\": \"Silva\",\n   \"email\": \"test_user_58128038@testuser.com\",\n   \"identification\": {\n       \"number\": \"12345678909\",\n       \"type\": \"CPF\"\n   }\n},\n\"point_of_interaction\": {\n   \"linked_to\": \"openfinance\",\n   \"transaction_data\": {\n       \"bank_info\": {\n           \"origin_bank_id\": \"908c846f-b4b5-4307-901e-b8882ef7ce99\"\n       }\n   }\n}\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Payment using MercadoPago API - Ruby\nDESCRIPTION: This Ruby script shows how to create a payment using the MercadoPago SDK. It initializes the SDK with an access token, sets custom headers for the request, and builds the payment request object with transaction and payer details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.es.md#2025-04-18_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_request = {\n  transaction_amount: 100,\n  description: 'Título del producto',\n  payment_method_id: 'bolbradesco',\n  payer: {\n    email: 'PAYER_EMAIL',\n    first_name: 'Test',\n    last_name: 'User',\n    identification: {\n      type: 'DNI',\n      number: '19119119',\n    },\n    address: {\n      zip_code: '1264',\n      street_name: 'Av. Caseros',\n      street_number: '3039',\n      neighborhood: 'Parque Patricios',\n      city: 'Buenos Aires',\n      federal_unit: 'BA'\n    }\n  }\n}\n\npayment_response = sdk.payment.create(payment_request, custom_request_options)\npayment = payment_response[:response]\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with Electro Industry Data using cURL\nDESCRIPTION: This cURL command creates a payment request to the Mercado Pago API, incorporating detailed information about the transaction, payer, items, and shipments relevant to the electro industry. The request includes headers for content type, idempotency, authorization, and session ID. The data includes transaction amount, installments, payment method, token, and additional information about the payer, items, and shipment details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/electro.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}}' \\\n--data-raw '{ \n    \"transaction_amount\": 150.00, \n    \"installments\": 1, \n    \"statement_descriptor\": \"LOJA 123\", \n    \"capture\": true, \n    \"binary_mode\": false, \n    \"sponsor_id\": null, \n    \"application_fee\": null, \n    \"payment_method_id\": \"debvisa\", \n    \"token\": \"{{card_token_id}}\", \n    \"external_reference\": \"Pedido01\", \n    \"description\": \"PEDIDO NOVO\", \n    \"notification_url\": \"{{notification_url}}\", \n    \"metadata\": { \n        \"order_number\": \"order_01\" \n    }, \n    \"payer\": { \n        \"email\": \"test_user_123456789@testuser.com\", \n        \"identification\": { \n            \"type\": \"CPF\", \n            \"number\": \"12345678909\" \n        } \n    }, \n    \"additional_info\": { \n        \"items\": [ \n            { \n                \"id\": \"1234\", \n                \"title\": \"Product\", \n                \"description\": \"Product description\", \n                \"warranty\": true, \n                \"category_id\": \"kitchen\", \n                \"quantity\": 1, \n                \"unit_price\": 150 \n            } \n        ], \n        \"payer\": { \n            \"first_name\": \"Name\", \n            \"last_name\": \"Surname\", \n            \"is_prime_user\": true, \n            \"is_first_purchase_online\": true, \n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\", \n            \"phone\": { \n                \"area_code\": \"11\", \n                \"number\": \"987654321\" \n            }, \n            \"address\": { \n                \"zip_code\": \"206233-2002\", \n                \"street_name\": \"Av. das Nações Unidas\", \n                \"street_number\": \"230032\" \n            }, \n            \"authentication_type\": \"Facebook\", \n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\" \n        }, \n        \"shipments\": { \n            \"express_shipment\": \"1\", \n            \"local_pickup\": \"1\", \n            \"receiver_address\": { \n                \"zip_code\": \"306233-2003\", \n                \"street_name\": \"Av. das Nações Unidas\", \n                \"street_number\": \"3003\", \n                \"floor\": \"5\", \n                \"apartment\": \"502\",\n                \"state_name\":\"SP\",\n                \"city_name\":\"Osasco\" \n            } \n        } \n    } \n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with cURL\nDESCRIPTION: cURL command example for creating a payment with Mercado Pago API. It sends a POST request with authorization headers, idempotency key, and payment details including transaction amount, token, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n   -H 'accept: application/json' \\\n   -H 'content-type: application/json' \\\n   -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n   -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n   'https://api.mercadopago.com/v1/payments' \\\n   -d '{\n         \"transaction_amount\": 100,\n         \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n         \"description\": \"Blue shirt\",\n         \"installments\": 1,\n         \"payment_method_id\": \"visa\",\n         \"issuer_id\": 310,\n         \"payer\": {\n           \"email\": \"PAYER_EMAIL\"\n         }\n   }'\n```\n\n----------------------------------------\n\nTITLE: Creating Preference Mercado Pago .NET\nDESCRIPTION: This C# code snippet demonstrates how to create a preference using the Mercado Pago SDK. It configures the access token, creates a preference request with item details (title, quantity, currency, and unit price), and then uses the `PreferenceClient` to create the preference asynchronously. It is specific to mlc and mco regions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/preferences.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// SDK do Mercado Pago\nusing MercadoPago.Config;\nusing MercadoPago.Client.Preference;\nusing MercadoPago.Resource.Preference;\n// Configure as credenciais\nMercadoPagoConfig.AccessToken = \"PROD_ACCESS_TOKEN\";\n// Crie o objeto de request da preferência\nvar request = new PreferenceRequest\n{\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"Meu produto\",\n            Quantity = 1,\n            CurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\n            UnitPrice = 75m,\n        },\n    },\n};\n// Crie a preferência usando o client\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Obtaining Access Token using Java in Mercado Pago API\nDESCRIPTION: This Java code snippet shows how to create a credential using the OauthClient. It requires an authorization code.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/creation.es.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nOauthClient client = new OauthClient();\n\nString authorizationCode = \"TG-XXXXXXXX-241983636\";\nclient.createCredential(authorizationCode, null);\n```\n\n----------------------------------------\n\nTITLE: Get Payment Intent Status (MLA, MLB)\nDESCRIPTION: This code snippet shows how to retrieve the status of a payment intent via the Mercado Pago Point Integration API, specifically for MLA and MLB regions.  It uses a GET request with the payment intent ID and requires an access token for authentication. The expected response is a JSON object containing the details and status of the specified payment intent.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/payment-processing.en.md#2025-04-18_snippet_9\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request GET 'https://api.mercadopago.com/point/integration-api/payment-intents/\n{paymentintentid}' \\\n--h 'Authorization: Bearer YOUR_ACCESS_TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Successful Payment with Discount Response in Mercado Pago API\nDESCRIPTION: JSON response received when a payment with discount is successfully processed. It includes the payment ID, status, transaction details, and discount information. The response confirms the payment was approved and shows the applied discount amount and terms.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/process-payments-with-discounts.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1234567,\n  \"status\": \"approved\",\n  \"marketplace\": null,\n  \"sponsor_id\": null,\n  \"payments\": [\n    {\n      \"id\": \"PAYMENT-ID\",\n      \"status\": \"approved\",\n      \"status_detail\": \"accredited\",\n      \"payment_type_id\": \"account_money\",\n      \"payment_method_id\": \"account_money\",\n      \"token\": null,\n      \"transaction_amount\": 500,\n      \"installments\": 1,\n      \"processing_mode\": \"aggregator\",\n      \"issuer_id\": null,\n      \"coupon_amount\": 10.0,\n      \"campaign_id\": \"CAMPAIGN-ID\",\n      \"coupon_code\": null,\n      \"description\": \"Payment Wallet\",\n      \"external_reference\": null,\n      \"statement_descriptor\": null,\n      \"date_of_expiration\": null,\n      \"merchant_account_id\": null,\n      \"payment_method_option_id\": null,\n      \"additional_info\": null,\n      \"transaction_details\": null,\n      \"net_amount\": null,\n      \"taxes\": null\n    }\n  ],\n  \"disbursements\": null,\n  \"payer\": {\n    \"id\": \"PAYER-ID\",\n    \"email\": \"PAYER-EMAIL\",\n    \"address\": null,\n    \"identification\": null,\n    \"first_name\": null,\n    \"last_name\": null,\n    \"phone\": null,\n    \"token\": \"PAYER-TOKEN\",\n    \"external_payer_id\": \"EXTERNAL-PAYER-ID\"\n  },\n  \"external_reference\": null,\n  \"description\": null,\n  \"binary_mode\": true,\n  \"capture\": true,\n  \"date_created\": \"2023-07-24T14:30:45.574-04:00\",\n  \"date_last_updated\": \"2023-07-24T14:30:46.517-04:00\",\n  \"metadata\": null,\n  \"additional_info\": null,\n  \"wallet_payment\": {\n    \"transaction_amount\": 550,\n    \"description\": \"Payment Wallet\",\n    \"external_reference\": null,\n    \"subscription_data\": null,\n    \"user_present\": null,\n    \"discount\": {\n      \"amount\": 50.0,\n      \"description\": \"wallet connect test\",\n      \"detail\": {\n        \"value\": 10.0,\n        \"type\": \"percent\",\n        \"cap\": 100000.0\n      }\n    },\n    \"payment_preference\": {\n      \"active\": true,\n      \"user_id\": 1431302201,\n      \"payment_method\": [\n        {\n          \"priority\": 1,\n          \"payment_method\": \"account_money\"\n        }\n      ]\n    }\n  },\n  \"pos_id\": null,\n  \"store_id\": null,\n  \"wallet_connect_discount\": {\n    \"amount\": 10.0,\n    \"token\": \"DISCOUNT-TOKEN\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Yape Payment in Java\nDESCRIPTION: Java implementation for creating a Yape payment using MercadoPago SDK with token, transaction amount, and payer details\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest createRequest =\n    PaymentCreateRequest.builder()\n        .description(\"Titulo del producto\")\n        .installments(1)\n        .payer(PaymentPayerRequest.builder()\n            .email(\"test_user_123@testuser.com\")\n            .build())\n        .paymentMethodId(\"yape\")\n        .token(\"ff8080814c11e237014c1ff593b57b4d\")\n        .transactionAmount(new BigDecimal(\"5000\"))\n        .build();\n\nclient.create(createRequest);\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Bancário Payment with MercadoPago Java SDK\nDESCRIPTION: This Java code demonstrates how to create a Boleto Bancário payment using the MercadoPago Java SDK. It builds the payment request object with necessary details and sends it to the API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nPaymentCreateRequest paymentCreateRequest = PaymentCreateRequest.builder()\n    .transactionAmount(new BigDecimal(\"<TRANSACTION_AMOUNT>\"))\n    .paymentMethodId(\"bolbradesco\")\n    .payer(PaymentPayerRequest.builder()\n        .email(\"<EMAIL>\")\n        .firstName(\"<NAME>\")\n        .lastName(\"<LASTNAME>\")\n        .identification(IdentificationRequest.builder()\n            .type(\"CPF\")\n            .number(\"<NUMERO>\")\n            .build())\n        .address(PaymentPayerAddressRequest.builder()\n            .streetName(\"<RUA XXX>\")\n            .streetNumber(\"123\")\n            .zipCode(\"<CEP>\")\n            .federalUnit(\"<SIGLA DO ESTADO>\")\n            .city(\"<CIDADE>\")\n            .neighborhood(\"<BAIRRO>\")\n            .build())\n        .build())\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Creating Card Payment with Mercado Pago Java SDK\nDESCRIPTION: Shows how to create a card payment using the Mercado Pago Java SDK. Includes setting up custom headers, configuring the access token, and creating a payment request with transaction and payer details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-cardform.en.md#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest paymentCreateRequest =\nPaymentCreateRequest.builder()\n.transactionAmount(request.getTransactionAmount())\n.token(request.getToken())\n.description(request.getDescription())\n.installments(request.getInstallments())\n.paymentMethodId(request.getPaymentMethodId())\n.payer(\nPaymentPayerRequest.builder()\n.email(request.getPayer().getEmail())\n.firstName(request.getPayer().getFirstName())\n.identification(\nIdentificationRequest.builder()\n.type(request.getPayer().getIdentification().getType())\n.number(request.getPayer().getIdentification().getNumber())\n.build())\n.build())\n.build();\n\nclient.create(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Reserved Amount in MercadoPago - CSharp\nDESCRIPTION: This CSharp code snippet captures a partial amount from a reserved payment on MercadoPago, leveraging the SDK. It requires setting access token and invoking the 'CaptureAsync' method with a specific transaction amount.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/capture-authorized-payment.en.md#2025-04-18_snippet_11\n\nLANGUAGE: CSharp\nCODE:\n```\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar client = new PaymentClient();\nPayment payment = await client.CaptureAsync(paymentId, 75);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Reserve in Python\nDESCRIPTION: This Python snippet shows how to perform reserve payment authorization using MercadoPago's SDK. It sets the access token and custom request options, prepares the payment data including transaction amount and idempotency key, and sends the request with capture=false.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/make-value-reserve.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport market\nsdk = Mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n\"transaction_amount\": 100,\n\"token\": 'ff8080814c11e237014c1ff593b57b4d',\n\"description\": \"Title of what you are paying for\",\n\"installations\": 1,\n\"payment_method_id\": \"visa\",\n\"payer\": {\n\"email\": \"test_user_19653727@testuser.com\"\n},\n\"capture\": False\n}\npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Search for Payments\nDESCRIPTION: This function searches for payments based on given filters within the 'sdk.payment().search' method. Filters can include ID and external reference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.en.md#2025-04-18_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef index(req, **kwargs):\n    filters = {\n        \"id\": None,\n        \"external_reference\": None\n    }\n\n    payments_search = sdk.payment().search(filters=filters)\n\n    return json.dumps(payments_search[\"response\"], indent=4)\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Token using MercadoPago SDK in Node.js\nDESCRIPTION: This Node.js snippet demonstrates how to refresh an Access Token using the MercadoPago SDK. It creates a new MercadoPagoConfig instance, initializes an OAuth object, and calls the refresh method with the client secret, client ID, and refresh token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/renewal.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token', options: { timeout: 5000 } });\n\nconst oauth = new OAuth(client);\n\noauth.refresh({\n\t'client_secret': 'your-client-secret',\n\t'client_id': 'your-client-id',\n\t'refresh_token': 'refresh-token'\n}).then((result) => console.log(result))\n\t.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Listing Customer Cards with Node.js\nDESCRIPTION: Retrieves the list of customer cards using the MercadoPagoConfig and CustomerCard classes.  It initializes the client with an access token and then calls the list method with the customer ID to retrieve the cards.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/get-cards-list.en.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerCard = new CustomerCard(client);\n\ncustomerCard.list({ customerId: '<CUSTOMER_UD>' }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Embedding Mercado Pago 120x240 Banner for Brazil (MLB)\nDESCRIPTION: HTML code to embed a 120x240 pixel Mercado Pago banner for Brazil, showcasing 6 interest-free installment payment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/seis.en.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/PSJ/120x240_banner_psj_6x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"120\" height=\"240\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with MercadoPago SDK (Java)\nDESCRIPTION: This Java snippet creates a payment using data from a PaymentCreateRequest object and the MercadoPago SDK.  It retrieves parameters, builds a request, and creates a payment using the client.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.es.md#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest paymentCreateRequest =\n  PaymentCreateRequest.builder()\n      .transactionAmount(request.getTransactionAmount())\n      .token(request.getToken())\n      .installments(request.getInstallments())\n      .paymentMethodId(request.getPaymentMethodId())\n      .payer(\n          PaymentPayerRequest.builder()\n              .email(request.getPayer().getEmail())\n              .identification(\n                  IdentificationRequest.builder()\n                      .type(request.getPayer().getIdentification().getType())\n                      .number(request.getPayer().getIdentification().getNumber())\n                      .build())\n              .build())\n      .build();\n\nclient.create(paymentCreateRequest);\n\n```\n\n----------------------------------------\n\nTITLE: Processing SPEI Bank Transfer Payments with Node.js\nDESCRIPTION: Node.js implementation for processing SPEI bank transfers with Mercado Pago SDK. This code creates a payment with transaction details and payer information, then returns the payment status, status details, and ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.pt.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(config.access_token);\n \nvar payment = req.body;\n\nvar payment_data = {\n \ttransaction_amount: 5000,\n \tdescription: 'Título del producto',\n \tpayment_method_id: 'clabe',\n \tpayer: {\n \t\tentity_type: 'individual',\n \t\temail: payment.email,\n \t\tfirst_name: payment.payerFirstName,\n    last_name: payment.payerLastName\n \t}\n};\n\nvar payment = mercadopago.payment.save(payment_data)\n \t.then(function(response) {\n \t\tres.status(response.status).json({\n \t\t\tstatus: response.body.status,\n \t\t\tstatus_detail: response.body.status_detail,\n \t\t\tid: response.body.id,\n \t\t});\n \t})\n \t.catch(function(error) {\n \t\tres.status(error.status).send(error);\n \t});\n\nvar payment_link = payment.transaction_details.external_resource_url;\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods Customization in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to configure payment methods customization options for the Mercado Pago Brick. It shows how to exclude specific payment methods and payment types, set the maximum number of installments, and enable or disable interest-free installments. The `settings` object is passed as the third parameter to the `create()` method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/brand-brick/payment-methods.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    customization: {\n      paymentMethods: {\n        excludedPaymentMethods: [\"master\"], // optional string[]. default []. options [\"master\", \"visa\", \"amex\", \"naranja\", \"maestro\", \"cabal\", \"cencosud\", \"cordobesa\", \"argencard\", \"diners\", \"tarshop\", \"cmr\", \"rapipago\", \"pagofacil\", \"mercadopago\"]\n        excludedPaymentTypes: [\"ticket\"], // optional string[]. default []. options [\"credit_card\", \"debit_card\", \"ticket\"]\n        maxInstallments: 12, // optional number. min 2 max 12\n        interestFreeInstallments: false, // optional boolean\n     },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago API in Java\nDESCRIPTION: This Java snippet illustrates how to create a payment using the Mercado Pago API. It sets the access token, creates a new payment object, sets the transaction amount, token, description, installments, payment method ID, issuer ID, and payer email. The payment is saved, and the status is printed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-serverside.es.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMercadoPago.SDK.setAccessToken(\"ENV_ACCESS_TOKEN\");\n//...\nPayment payment = new Payment();\npayment.setTransactionAmount(100f)\n       .setToken(token)\n       .setDescription(\"Blue shirt\")\n       .setInstallments(installments)\n       .setPaymentMethodId(payment_method_id)\n       .setIssuerId(issuer_id)\n       .setPayer(new Payer()\n         .setEmail(\"john@yourdomain.com\"));\n// Guarda y postea el pago\npayment.save();\n//...\n// Imprime el estado del pago\nSystem.out.println(payment.getStatus());\n//...\n```\n\n----------------------------------------\n\nTITLE: Adding a New Card Using MercadoPago with C#\nDESCRIPTION: This C# snippet illustrates adding a new card to a Mercado Pago customer profile. It requires MercadoPagoConfig to be properly configured with an access token. The code shows creating a card using a token and logs the resulting card ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.en.md#2025-04-18_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar customerClient = new CustomerClient();\nCustomer customer = await customerClient.GetAsync(\"247711297-jxOV430go9fx2e\");\n\nvar cardRequest = new CustomerCardCreateRequest\n{\n    Token = \"9b2d63e00d66a8c721607214cedaecda\",\n};\nCustomerCard card = await customerClient.CreateCardAsync(customer.Id, cardRequest);\n\nConsole.WriteLine(card.Id);\n\n```\n\n----------------------------------------\n\nTITLE: Cancel Payment\nDESCRIPTION: This code cancels a pending payment using its ID. It uses the `payment().update()` method to update the payment status to \"cancelled\". This operation is only applicable to pending payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.es.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef index(req, **kwargs):\n        payment_cancel = sdk.payment().update(kwargs[\"id\"], { \"status\": \"cancelled\" })\n\n        # Show result\n        return json.dumps(payment_cancel[\"response\"], indent=4)\n```\n\n----------------------------------------\n\nTITLE: Canceling Scheduled Report Generation Java\nDESCRIPTION: Java code illustrating the cancellation of a scheduled report via DELETE request. It configures the HTTPS connection for bearer token authorization and manages the response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report/schedule\");\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\nconnection.setRequestMethod(\"DELETE\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\n----------------------------------------\n\nTITLE: Creating PSE Payment with cURL\nDESCRIPTION: This cURL command shows how to create a PSE payment by sending a POST request to the MercadoPago API. It includes all necessary headers and a JSON payload with payment details and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pse-avanza.en.md#2025-04-18_snippet_18\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n-H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n-H 'Content-Type: application/json' \\\n--d '{\n    \"transaction_amount\": 5000,\n    \"description\": \"Product description\",\n    \"payment_method_id\": \"pse\",\n    \"callback_url\": \"http://www.your-site.com\",\n    \"notification_url\": \"http://www.your-site.com\",\n    \"payer\": {\n        \"email\": \"test_user_19549678@testuser.com\",\n        \"entity_type\": \"individual\",\n        \"first_name\": \"first name\",\n        \"last_name\": \"last_name\",\n        \"identification\": {\n            \"type\": \"type\",\n            \"number\": \"number\"\n        }, \n        \"address\": {\n          \"zip_code\": \"111\",\n          \"street_name\": \"street name\",\n          \"street_number\": \"street number\",\n          \"neighborhood\": \"neighborhood\",\n          \"city\": \"city\",\n          \"federal_unit\": \"federal unit\"\n        },\n        \"phone\": {\n          \"area_code\": \"area code\",\n          \"number\": \"number\"\n        }\n    },\n    \"additional_info\": {\n        \"ip_address\": \"127.0.0.1\"\n    },\n    \"transaction_details\": {\n        \"financial_institution\": \"1009\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creando un pago con Fintoc en Java\nDESCRIPTION: Este snippet ilustra cómo crear un pago con Fintoc como método de pago en Java. Configura el cliente de Mercado Pago, define los detalles del pago y ejecuta la solicitud.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-simplified.es.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest createRequest =\n    PaymentCreateRequest.builder()\n        .description(\"Titulo del producto\")\n        .paymentMethodId(\"fintoc\")\n        .payer(PaymentPayerRequest.builder()\n            .email(\"test_user_123@testuser.com\")\n            .build())\n        .transactionAmount(new BigDecimal(\"5000\"))\n        .callbackUrl(\"https://www.your-site.com\")\n        .pointOfInteraction(PaymentPointOfInteractionRequest\n        .builder().type(\"CHECKOUT\").subType(\"INTER_PSP\").build())\n        .build();\n\nclient.create(createRequest);\n```\n\n----------------------------------------\n\nTITLE: Searching Customers with Mercado Pago PHP SDK\nDESCRIPTION: This snippet shows how to search for customers by email using the Mercado Pago CustomerClient. It utilizes the MPSearchRequest object to define search parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/customers.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new CustomerClient();\n  $search_request = new MPSearchRequest(0, 0, [\"email\" => \"test_payer_12345@testuser.com\"]);\n  $client->search($search_request);\n?>\n```\n\n----------------------------------------\n\nTITLE: Setting Payment Expiration Date in Java\nDESCRIPTION: This Java snippet provides a method for setting the date of expiration for payments. The date must comply with ISO 8601 formatting.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_23\n\nLANGUAGE: java\nCODE:\n```\npayment.setDateOfExpiration(\"2020-05-30T23:59:59.000-04:00\")\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment Amount in Mercado Pago\nDESCRIPTION: Code examples for capturing a partial amount of an authorized payment in Mercado Pago. This functionality allows merchants to capture an amount lower than what was initially reserved, which is only available for specific card brands.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.en.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nMercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n$payment = MercadoPago\\Payment::find_by_id($payment_id);\n$payment->transaction_amount = 75;\n$payment->capture = true;\n$payment->update();\n?>\n```\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n\nLong paymentId = 123456789L;\n\nPaymentClient client = new PaymentClient();\nclient.capture(paymentId, new BigDecimal(\"75\"));\n```\n\nLANGUAGE: node\nCODE:\n```\nvar Mercadopago = require('mercadopago');\nMercadopago.configurations.setAccessToken(config.access_token);\n\nlet captureInfo = {id: 123, transaction_amount: 5}\n\nMercadopago.payment.capturePartial(captureInfo, Mercadopago, (error, response) => {\nif (error){\nconsole.log(error);\n}else{\nconsole.log(response)\n}\n});\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\nrequest = {\ntransaction_amount: 75,\ncapture: true\n}\n\npayment_response = sdk.payment.update(payment_id, request)\npayment = payment_response[:response]\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar client = new PaymentClient();\nPayment payment = await client.CaptureAsync(paymentId, 75);\n```\n\nLANGUAGE: python\nCODE:\n```\nimport market\nsdk = Mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\npayment_data = {\n\"transaction_amount\": 75,\n\"capture\": True\n}\n\npayment_response = sdk.payment().update(payment_id, payment_data)\npayment = payment_response[\"response\"]\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/payment\"\n)\n\nfunc main() {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := payment.NewClient(cfg)\n\n\t// Create payment.\n\trequest := payment.Request{\n\t\tTransactionAmount: 105.1,\n\t\tPayer: &payment.PayerRequest{\n\t\t\tEmail: \"{{EMAIL}}\",\n\t\t},\n\t\tToken:        \"{{CARD_TOKEN}}\",\n\t\tInstallments: 1,\n\t\tCapture:      false,\n\t}\n\n\tresource, err := client.Create(context.Background(), request)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\t// Capture.\n\tresource, err = client.Capture(context.Background(), resource.ID)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PUT \\\n'https://api.mercadopago.com/v1/payments/PAYMENT_ID' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n-H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n-d '{\n\"transaction_amount\": 75,\n\"capture\": true\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Bancário Payment with Python\nDESCRIPTION: This Python code snippet shows how to create a boleto bancário payment using Mercado Pago's SDK. It initializes the SDK with an access token, sets up custom headers with an idempotency key, and sends a payment request with transaction and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n    \"transaction_amount\": 100,\n    \"description\": \"Título del producto\",\n    \"payment_method_id\": \"bolbradesco\",\n    \"payer\": {\n        \"email\": \"PAYER_EMAIL\",\n        \"first_name\": \"Test\",\n        \"last_name\": \"User\",\n        \"identification\": {\n            \"type\": \"DNI\",\n            \"number\": \"19119119\"\n        },\n        \"address\": {\n            \"zip_code\": \"1264\",\n            \"street_name\": \"Av. Caseros\",\n            \"street_number\": \"3039\",\n            \"neighborhood\": \"Parque Patricios\",\n            \"city\": \"Buenos Aires\",\n            \"federal_unit\": \"BA\"\n        }\n    }\n}\n\npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Bancário Payment with MercadoPago C# SDK\nDESCRIPTION: This C# code example shows how to create a Boleto Bancário payment using the MercadoPago C# SDK. It configures the SDK, builds the payment request object, and sends it to the API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"<ENV_ACCESS_TOKEN>\";\n\nvar request = new PaymentCreateRequest\n{\n   TransactionAmount = 105,\n   Description = \"<DESCRIPCIÓN>\",\n   PaymentMethodId = \"bolbradesco\",\n   Payer = new PaymentPayerRequest\n   {\n       Email = \"<EMAIL>\",\n       FirstName = \"<NOMBRE>\",\n       LastName = \"<APELLIDO>\",\n       Identification = new IdentificationRequest\n       {\n           Type = \"CPF\",\n           Number = \"<NUMERO DE CPF>\",\n       },\n       Address = new  PaymentPayerAddressRequest\n       {\n           ZipCode = \"<CÓDIGO POSTAL>\",\n           StreetName = \"<CALLE XXX>\",\n           City = \"<CIUDAD>\",\n           StreetNumber = \"<NÚMERO>\",\n           Neighborhood = \"<BARRIO>\",\n           FederalUnit = \"<SIGLA DE ESTADO>\",\n\n       }\n   },\n};\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Capturing Total Reserved Amount in MercadoPago - CSharp\nDESCRIPTION: This CSharp snippet captures the entire reserved payment amount in MercadoPago, utilizing the 'mercadopago' SDK. The code requires setting the access token, configuring request headers, and invoking the 'CaptureAsync' method on the 'PaymentClient' with the payment ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/capture-authorized-payment.en.md#2025-04-18_snippet_4\n\nLANGUAGE: CSharp\nCODE:\n```\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n\nvar client = new PaymentClient();\nPayment payment = await client.CaptureAsync(paymentId, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Creating SPEI Transfer Payment with PHP\nDESCRIPTION: Creates a SPEI bank transfer payment using MercadoPago PHP SDK. The snippet initializes a payment with transaction amount, description, and payer details, then returns payment status, link, and ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.es.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire '../vendor/autoload.php';\n\nMercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n$payment = new MercadoPago\\Payment();\n$payment->transaction_amount = 5000;\n$payment->description = \"Título del producto\";\n$payment->payment_method_id = \"clabe\";\n\n$payer = new MercadoPago\\Payer();\n$payer->email = $_POST['email'];\n$payer->first_name = $_POST['payerFirstName']\n$payer->last_name = $_POST['payerLastName']\n$payer->entity_type = \"individual\";\n\n$payment->payer = $payer;\n\n$payment->save();\n\n$response = array(\n    'status' => $payment->status,\n    'payment_link' => $payment->transaction_details->external_resource_url,\n    'id' => $payment->id\n);\necho json_encode($response);\n\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with 3DS in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to create a payment with 3DS enabled using the Mercado Pago SDK.  It initializes the SDK, sets up the payment request parameters with `three_d_secure_mode` as 'optional', and then uses the SDK to create the payment. Requires the Mercado Pago Ruby SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-bigmerchants.en.md#2025-04-18_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('<ENV_ACCESS_TOKEN>')\npayment_request = {\n  token: '<CARD_TOKEN>',\n  installments: <INSTALLLMENTS_NUMBER>,\n  transaction_amount: <TRANSACTION_AMOUNT>,\n  description: '<DESCRIPTION>',\n  payer: {\n    email: '<BUYER_EMAIL>',\n  },\n  three_d_secure_mode: 'optional'\n}\npayment_response = sdk.payment.create(payment_request)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Setting Preference Validity Period in JSON\nDESCRIPTION: This JSON snippet shows how to configure the validity of payment preferences by using expiration attributes. It helps in defining the active period for the payment preference. Correctly formatted ISO 8601 dates are used.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"expires\": true,\n\"expiration_date_from\": \"2017-02-01T12:00:00.000-04:00\",\n\"expiration_date_to\": \"2017-02-28T12:00:00.000-04:00\"\n```\n\n----------------------------------------\n\nTITLE: Canceling Payment Transaction with Mercado Pago SDK\nDESCRIPTION: Cancels a specific payment by its unique identifier using the PaymentClient. Requires setting the access token beforehand. Returns the updated Payment object after cancellation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/cancellation.es.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\nPayment payment = client.cancel(\"<PAYMENT_ID>\");\n```\n\n----------------------------------------\n\nTITLE: Creating Partial Refund with Mercado Pago SDK in Python\nDESCRIPTION: This snippet demonstrates how to create a partial refund for a given payment ID using the Mercado Pago SDK for Python. It initializes the SDK, defines a `refund_object` with the `amount` to be refunded, and then calls the `create` method on the `refund` object, passing the payment ID and the refund object as arguments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/refunds.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsdk = mercadopago.SDK('YOUR_ACCESS_TOKEN')\n \nrefund_object = {\n   'amount': 0.0\n}\n \nsdk.refund().create('payment_id', refund_object)\n```\n\n----------------------------------------\n\nTITLE: Creating SPEI Transfer Payment with Mercado Pago in Node.js\nDESCRIPTION: Node.js implementation for creating a SPEI transfer payment using Mercado Pago SDK. It sets up a payment with transaction amount, description, and payment method (clabe), along with payer information. The response includes payment status, details, and ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.en.md#2025-04-18_snippet_13\n\nLANGUAGE: node\nCODE:\n```\nconst mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(config.access_token);\n \nvar payment = req.body;\n\nvar payment_data = {\n \ttransaction_amount: 5000,\n \tdescription: 'Título del producto',\n \tpayment_method_id: 'clabe',\n \tpayer: {\n \t\tentity_type: 'individual',\n \t\temail: payment.email,\n \t\tfirst_name: payment.payerFirstName,\n    last_name: payment.payerLastName\n \t}\n};\n\nvar payment = mercadopago.payment.save(payment_data)\n \t.then(function(response) {\n \t\tres.status(response.status).json({\n \t\t\tstatus: response.body.status,\n \t\t\tstatus_detail: response.body.status_detail,\n \t\t\tid: response.body.id,\n \t\t});\n \t})\n \t.catch(function(error) {\n \t\tres.status(error.status).send(error);\n \t});\n\nvar payment_link = payment.transaction_details.external_resource_url;\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkout Pro Redirect Mode with Javascript\nDESCRIPTION: Implementation of Checkout Pro wallet in redirect mode to open in a new page using the 'blank' redirectMode property.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/opening-schema.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmp.bricks().create(\"wallet\", \"wallet_container\", {\n   initialization: {\n       preferenceId: \"<PREFERENCE_ID>\",\n       redirectMode: \"blank\"\n   },\n});\n```\n\n----------------------------------------\n\nTITLE: Creando Pagos con Efecty en C# usando MercadoPago SDK\nDESCRIPTION: Código C# para crear un pago con Efecty utilizando el SDK de MercadoPago. Configura opciones de solicitud con encabezados personalizados para la idempotencia y crea la solicitud de pago con los datos requeridos.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mco.es.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\n \nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = 100,\n    Description = \"Product title\",\n    PaymentMethodId = 'efecty',\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"test@test.com\",\n    },\n    Metadata = new Dictionary<string, object>\n    {\n\t[\"payment_mode\"] = \"online\",\n    }\n};\n \nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Sub-merchant Data in Node.js\nDESCRIPTION: This Node.js code snippet demonstrates how to create a payment with the required sub-merchant data using the Mercado Pago SDK.  It initializes the Mercado Pago client and then creates a new payment with the `forward_data.sub_merchant` property populated with the necessary details, including error handling.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subcredenciadores-payfacs/integration-update.es.md#2025-04-18_snippet_1\n\nLANGUAGE: nodejs\nCODE:\n```\n/**\n * Mercado Pago Payment Capture.\n *\n * @see {@link https://www.mercadopago.com/developers/en/reference/payments/_payments/post Documentation}.\n */\n\nimport MercadoPago, { Payment } from '@src/index';\n\nconst client = new MercadoPago({\n  accessToken: 'YOUR_ACCESS_TOKEN'\n});\n\nconst payment = new Payment(client);\n\npayment.create({\n  body: {\n    transaction_amount: 100,\n    description: 'Test',\n    payment_method_id: 'visa',\n    installments: 12,\n    token: '010466403607c1efc03205b75bd2f18e',\n    payer: {\n      email: 'test@testuser.com'\n    },\n    forward_data: {\n      sub_merchant: {\n        sub_merchant_id: '1234',\n        mcc: '12345',\n        country: 'BRA',\n        address_door_number: 123,\n        zip: '9876678',\n        document_number: '234567876543',\n        city: 'São Paulo',\n        address_street: 'Rua TESTE',\n        legal_name: 'legal',\n        region_code_iso: 'BR',\n        document_type: 'CNPJ',\n        phone: '123456789',\n        url: 'www.nomedofacilitador.com.br'\n      }\n    }\n  },\n  requestOptions: {\n    idempotencyKey: '234rw8ujdsfjawadfsa'\n  }\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Additional Data Using Controller Method\nDESCRIPTION: Example of using the getAdditionalData method to retrieve additional payment information after form submission\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/additional-data.en.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// variable where the Brick controller is saved\npaymentBrickController.getAdditionalData()\n        .then((additionalData) => {\n            console.log(\"Additional data:\", additionalData);\n        })\n        .catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Creando Pagos con Efecty en Ruby usando MercadoPago SDK\nDESCRIPTION: Implementación en Ruby para procesar pagos con Efecty mediante el SDK de MercadoPago. Configura encabezados personalizados para la idempotencia y construye la solicitud de pago con los parámetros necesarios.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mco.es.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_request = {\n  transaction_amount: 100,\n  description: 'Product title',\n  payment_method_id: 'efecty',\n  payer: {\n    email: 'test@test.com',\n  },\n  metadata: {\n    payment_mode: 'online',\n  }\n}\npayment_response = sdk.payment.create(payment_request, custom_request_options)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Searching Customers by Email in Ruby\nDESCRIPTION: Ruby implementation for searching a customer by email using Mercado Pago's SDK. It uses the customer module to search with an email filter and extracts the response data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/search-customers.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ncustomers_response = sdk.customer.search(filters: { email: 'test_payer_12345@testuser.com' })\ncustomers = customers_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Deactivating Automatic Settlement Report Generation with Mercado Pago API\nDESCRIPTION: This code snippet shows how to deactivate automatic generation of settlement reports using the Mercado Pago API. It sends a DELETE request to the /v1/account/settlement_report/schedule endpoint with appropriate headers. The response includes details of the deactivated report schedule.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.es.md#2025-04-18_snippet_21\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X DELETE \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/schedule'\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$response = Requests::delete('https://api.mercadopago.com/v1/account/settlement_report/schedule', $headers);\n```\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report/schedule\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"DELETE\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\nresponse = requests.delete('https://api.mercadopago.com/v1/account/settlement_report/schedule', headers=headers)\n```\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report/schedule',\n    method: 'DELETE',\n    headers: headers\n};\n\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\n\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Refunding with Mercado Pago via CURL\nDESCRIPTION: This CURL command demonstrates how to execute a refund request directly via the API, including required headers like authorization, content type, and custom headers for processing refunds.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.es.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments/{payment_id}/refunds \\n\\\n-H 'X-Render-In-Process-Refunds: true' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n-H 'X-Idempotency-Key: {idempotency_key}' \\\n--data-raw '{\n    \"amount\": 20\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing onBinChange Callback in Javascript\nDESCRIPTION: Example of how to configure the onBinChange callback in vanilla JavaScript to detect card bin changes. The callback receives the bin parameter and is triggered whenever the card number input changes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/additional-callbacks.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n   ...,\n   callbacks: {\n       ...\n       onBinChange: (bin) => {\n           // callback called whenever card bin is changed\n           console.log(bin);\n       },\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment in PHP\nDESCRIPTION: Updates a payment to capture a partial amount using MercadoPago PHP SDK. Sets the access token, finds payment by ID, updates transaction amount and captures the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n  MercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n  $payment = MercadoPago\\Payment::find_by_id($payment_id);\n  $payment->transaction_amount = 75;\n  $payment->capture = true;\n  $payment->update();\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing DeviceSDK in Android (Java)\nDESCRIPTION: This Java code initializes the DeviceSDK in the MainApplication class of an Android application. It sets up the SDK to collect device information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.en.md#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport com.mercadolibre.android.device.sdk.DeviceSDK;\nDeviceSDK.getInstance().execute(this);\n```\n\n----------------------------------------\n\nTITLE: Processing Payments with Mercado Pago in PHP\nDESCRIPTION: This PHP snippet initializes the Mercado Pago SDK and processes a payment by setting various parameters such as transaction amount, token, and payer details. It requires the Mercado Pago PHP SDK as a dependency. The script captures payment status and prints it for logging purposes. It expects inputs via POST requests and outputs payment status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-serverside.en.md#2025-04-18_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n    require_once 'vendor/autoload.php';\n\n    MercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n    //...\n    $payment = new MercadoPago\\Payment();\n    $payment->transaction_amount = 100;\n    $payment->token = $token;\n    $payment->description = \"Blue shirt\";\n    $payment->installments = $installments;\n    $payment->payment_method_id = $payment_method_id;\n    $payment->issuer_id = $issuer_id;\n    $payment->payer = array(\n    \"email\" => \"john@yourdomain.com\"\n    );\n    // Guarda y postea el pago\n    $payment->save();\n    //...\n    // Imprime el estado del pago\n    echo $payment->status;\n    //...\n?>\n```\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n  require_once 'vendor/autoload.php';\n  MercadoPago\\SDK::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n  $payment = new MercadoPago\\Payment();\n  $payment->transaction_amount = (float)$_POST['transactionAmount'];\n  $payment->token = $_POST['token'];\n  $payment->installments = (int)$_POST['installments'];\n  $payment->payment_method_id = $_POST['paymentMethodId'];\n  $payment->issuer_id = (int)$_POST['issuer'];\n  $payer = new MercadoPago\\Payer();\n  $payer->email = $parsed_body['payer']['email'];\n  $payer->identification = array(\n     \"type\" => $parsed_body['payer']['identification']['type'],\n     \"number\" => $parsed_body['payer']['identification']['number']\n   );\n  $payment->payer = $payer;\n  $payment->save();\n  $response = array(\n      'status' => $payment->status,\n      'status_detail' => $payment->status_detail,\n      'id' => $payment->id\n  );\n  echo json_encode($response);\n\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating Payment Amount in Payment Brick using JavaScript and React\nDESCRIPTION: Examples showing how to update the payment amount in Payment Brick using both vanilla JavaScript and React component approach. The JavaScript example directly uses the controller while the React example utilizes the usePaymentBrick hook to update the amount value. Both methods demonstrate setting the payment amount to 95.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/update-data.es.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet amount = 95;\npaymentBrickController.update({ amount });\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { Payment, usePaymentBrick } from \"@mercadopago/sdk-react\";\nconst App = () => {\n  const { update } = usePaymentBrick();\n  const customization = {\n    paymentMethods: {\n      creditCard: \"all\",\n      debitCard: \"all\",\n    },\n  };\n  return (\n    <>\n      <button type=\"button\" onClick={() => update({ amount: 95 })}>\n        Update amount\n      </button>\n      <Payment\n        initialization={{ amount: 100 }}\n        customization={customization}\n        onSubmit={async (param) => {\n          console.log(param);\n        }}\n      />\n    </>\n  );\n};\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Preference for Onboarding Credits with C#\nDESCRIPTION: This C# snippet shows how to create a Mercado Pago preference for onboarding credits. It defines a `PreferenceRequest` object with item details and sets the `Purpose` to `onboarding_credits`. It then uses a `PreferenceClient` to asynchronously create the preference. This allows customers to pay in installments without a credit card.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// Crea el objeto de request de la preferencia\nvar request = new PreferenceRequest\n{\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"Mi producto\",\n            Quantity = 1,\n            CurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\n            UnitPrice = 75m,\n        },\n    },\n    Purpose = \"onboarding_credits\",\n};\n// Crea la preferencia\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Creating PagoEfectivo Payment with Mercado Pago SDK (Node.js)\nDESCRIPTION: This Node.js code snippet shows how to create a PagoEfectivo payment using the Mercado Pago SDK. It configures the client with an access token, sets up the payment details, and includes an idempotency key for the request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_31\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, Payments } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<YOUR_ACCESS_TOKEN>' });\nconst payments = new Payments(client);\n\npayments.create({\nbody: {\n\t\ttransaction_amount: '<TRANSACTION_AMOUNT>',\n\t\tpayment_method_id: '<PAYMENT_METHOD_ID>',\n\t\tpayer: {\n\t\t\temail: '<EMAIL>'\n\t\t\t}\n},\n\trequestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n\t.then((result) => console.log(result))\n\t.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Item Preference in PHP\nDESCRIPTION: This snippet shows how to create a preference with multiple items using PHP. It demonstrates creating item objects and adding them to the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  # Create a preference object\n  $preference = new MercadoPago\\Preference();\n  # Create items in the preference\n  $item1 = new MercadoPago\\Item\n  $item1->title = \"Item de Prueba 1\";\n  $item1->quantity = 2;\n  $item1->unit_price = 11.96;\n\n  $item2= new MercadoPago\\Item\n  $item2->title = \"Item de Prueba 2\";\n  $item2->quantity = 1;\n  $item2->unit_price = 11.96;\n\n  $preference->items = array($item1,$item2);\n  # Save and post the preference\n  $preference->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Customer Cards from Mercado Pago with Node.js\nDESCRIPTION: Fetches all card references associated with a specific customer using their customer ID. Returns a list of cards that have been saved for the customer's account.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/cards.en.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerCard = new CustomerCard(client);\n\ncustomerCard.list({ customerId: '<CUSTOMER_UD>' }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Consultar configuración de reportes con Java\nDESCRIPTION: Realiza una solicitud GET a la API de Mercado Pago utilizando Java para obtener la configuración actual de los reportes de liquidación.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.es.md#2025-04-18_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n URL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report/config\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"GET\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\n----------------------------------------\n\nTITLE: Cash Payment Response Structure in JSON\nDESCRIPTION: Example JSON response structure returned when a cash payment is successfully created. The response includes payment ID, pending status, transaction details, and the external resource URL for the payment instructions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n[\n{\n...,\n\"id\": 5466310457,\n\"status\": \"pending\",\n\"status_detail\": \"pending_waiting_payment\",\n...,\n\"transaction_details\": {\n\"net_received_amount\": 0,\n\"total_paid_amount\": 100,\n\"overpaid_amount\": 0,\n\"external_resource_url\": \"https://www.mercadopago.com/mla/payments/ticket/helper?payment_id=123456789&payment_method_reference_id= 123456789&caller_id=123456\",\n\"installment_amount\": 0,\n\"financial_institution\": null,\n\"payment_method_reference_id\": \"1234567890\"\n}\n}\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Checkout JavaScript\nDESCRIPTION: Client-side script to initialize checkout process, set PSE configuration, and handle document type selection\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pse-avanza.es.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(function initCheckout() {\n    try {\n        const docTypeElement = document.getElementById('form-checkout__identificationType');\n        setPse();\n        updateSelectOptions('natural')\n    }catch(e) {\n        return console.error('Error getting identificationTypes: ', e);\n    }\n })();\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference in Java\nDESCRIPTION: Create a Mercado Pago payment preference using Java with wallet purchase purpose and a product item\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/default-rendering.en.md#2025-04-18_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nPreferenceClient client = new PreferenceClient();\n\nList<PreferenceItemRequest> items = new ArrayList<>();\nPreferenceItemRequest item =\n   PreferenceItemRequest.builder()\n       .title(\"Meu produto\")\n       .quantity(1)\n       .unitPrice(new BigDecimal(\"100\"))\n       .build();\nitems.add(item);\n\nPreferenceRequest request = PreferenceRequest.builder()\n  .purpose('wallet_purchase')\n  .items(items).build();\n\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago Node.js SDK\nDESCRIPTION: This snippet demonstrates how to create a payment using the Mercado Pago Node.js SDK. It depends on the mercadopago package. It constructs a payment request object with transaction details like amount, token, and payer information, and sends it to the Mercado Pago API using the create method, also setting the idempotency key in request options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.es.md#2025-04-18_snippet_4\n\nLANGUAGE: node\nCODE:\n```\nimport { Payment, MercadoPagoConfig } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\n\npayment.create({\n    body: { \n        transaction_amount: req.transaction_amount,\n        token: req.token,\n        description: req.description,\n        installments: req.installments,\n        payment_method_id: req.paymentMethodId,\n        issuer_id: req.issuer,\n            payer: {\n            email: req.email,\n            identification: {\n        type: req.identificationType,\n        number: req.number\n    }}},\n    requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n.then((result) => console.log(result))\n.catch((error) => console.log(error));\n\n```\n\n----------------------------------------\n\nTITLE: Creating Pix Payment with cURL\nDESCRIPTION: cURL command for creating a Pix payment by directly calling Mercado Pago's API. It includes authorization headers with an access token, an idempotency key to prevent duplicate transactions, and a JSON payload with transaction amount, payment method ID, and payer email.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pix.en.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n    'https://api.mercadopago.com/v1/payments' \\\n    -d '{\n      \"transaction_amount\": 100,\n      \"payment_method_id\": \"pix\",\n      \"payer\": {\n        \"email\": \"PAYER_EMAIL_HERE\"\n      }\n    }'\n```\n\n----------------------------------------\n\nTITLE: Implementing PSE Payment with MercadoPago in Node.js\nDESCRIPTION: This Node.js code creates a PSE payment using MercadoPago SDK. It sets up the payment with transaction amount, payer details, and additional information required for PSE transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-migrate-pse.en.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Payment, MercadoPagoConfig } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\nconst payment = new Payment(client);\n\npayment.create({\n      body: {\n \ttransaction_amount: 5000,\n \tdescription: 'Product description',\n \tpayment_method_id: 'pse',\n \tpayer: {\n \t\tentity_type: 'individual',\n \t\temail: req.body.email,\n \t\tidentification: {\n \t\t\ttype: req.body.identificationType,\n \t\t\tnumber: req.body.identificationNumber\n \t\t}\n            address: {\n                 zip_code: req.body.zipCode,\n                 street_name: req.body.streetName,\n                 street_number: req.body.streetNumber,\n                 neighborhood: req.body.neighborhood,\n                 city: req.body.city,\n                 Federal_unit: req.body.federalUnit\n           },\n           phone: {\n                 area_code: req.body.phoneAreaCode,\n                 number: req.body.phoneNumber\n           }\n \t},\n \tadditional_info: {\n \t\tip_address: '127.0.0.1'\n \t},\n \ttransaction_details: {\n \t\tfinancial_institution: req.body.financialInstitution\n \t},\n \tcallback_url: 'http://www.your-site.com'\n   }\n}).then(function(response) {\n \t\tres.status(response.status).json({\n \t\t\tstatus: response.body.status,\n \t\t\tstatus_detail: response.body.status_detail,\n \t\t\tid: response.body.id,\n \t\t});\n \t})\n \t.catch(function(error) {\n \t\tres.status(error.status).send(error);\n \t});\n```\n\n----------------------------------------\n\nTITLE: Making an In-Person Payment Request with Mercado Pago Secure Payments API\nDESCRIPTION: This cURL request shows how to make an in-person payment using an MPOST device with the Mercado Pago Secure Payments API. It includes encrypted card information and device details. Replace 'YOUR_ACCESS_TOKEN' with your actual access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/secure_payments/integration.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl - X POST\\ -\n  H 'X-Caller-Scopes: payments'\\ -\n  H 'accept: application/json'\\ -\n  H 'Authorization: Bearer YOUR_ACCESS_TOKEN'\\ -\n  -H 'X-Caller-Scopes: payments'\\ -\n  -d '{\n\"binary_mode\": true,\n\"capture\": true,\n\"card_present\":\n{\n  \"card_data_entry_mode\": \"2\",\n  \"card_sequence_number\": \"02\",\n  \"track2\": \"107547ee4bad13deb793c8f04ddc4a70c88913e2680856c38f8f48b4a5ab64c213d0512428a73f6d\",\n  \"ksn\": \"0d040b76543210e001f8\",\n  \"icc_related_data\": \"5010414D45524943414E204558505245535382025C008408A0000000250108018E180000000000000000420141035E035F0300000000000000008F01C9950502000080009A032011199B02E8009C010091005F201041454950532032332F56455220322E305F24032412315F25031711015F2A0209865F300202015F3401029F02060000000033009F03060000000000009F0608A0000000250108019F0702FF009F090200019F0D05FC50ECA8009F0E0500000000009F0F05FC78FCF8009F100706020103A400009F160F4D45524348414E54303030303030319F1A0200769F1C085445524D303030319F1E0830373030303034319F26087F490A8F139D58BA9F2701809F3303E0F0E89F34034103029F3501229F360204019F37049325DA479F4104000000019F4502DAC1\",\n  \"fallback_indicator\": false,\n  \"poi\": \"8701012007000041\",\n  \"poi_signature\": \"0c074a2b [APP_PRO2]:aa6d737ff3faef73b9c96b868a83e6f11e959950095b8045a02a9467\",\n  \"poi_type\": \"GERTEC_MP35P\",\n  \"trx_id\": \"1754288142011191155248701012007000041\",\n  \"tag\": \"chip\",\n  \"has_chip\": \"true\",\n  \"app_version\": \"1.2.1\"\n},\n\"cardholder\":\n{\n  \"name\": \"AEIPS 23/VER 2.0\"\n},\n\"security_code\": \"0000\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Adding New Cards to a Customer in Mercado Pago with Go\nDESCRIPTION: Go implementation for adding a new card to a Mercado Pago customer. Uses the SDK to create a card with a token for a specific customer ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.es.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\naccessToken := \"{{ACCESS_TOKEN}}\"\n\n\n  cfg, err := config.New(accessToken)\n  if err != nil {\n      fmt.Println(err)\n      return\n  }\n\n\n  client := customercard.NewClient(cfg)\n\n\n  request := customercard.Request{Token: \"{{CARD_TOKEN}}\"}\n\n\n  resource, err := client.Create(context.Background(), \"{{CUSTOMER_ID}}\", request)\n  if err != nil {\n      fmt.Println(err)\n      return\n  }\n\n\n  fmt.Println(resource)\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment Amount in Python with Mercado Pago SDK\nDESCRIPTION: This snippet shows how to capture a partial amount of 75 from a previously reserved payment using Python. It initializes the Mercado Pago SDK, creates a payment data dictionary with the transaction amount and capture flag, and updates the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.es.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\npayment_data = {\n    \"transaction_amount\": 75,\n    \"capture\": True\n}\n\npayment_response = sdk.payment().update(payment_id, payment_data)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Processing Pix Refunds with MercadoPago API in PHP\nDESCRIPTION: PHP implementation for refunding a payment using the MercadoPago SDK. This snippet creates a PaymentRefundClient instance, authorizes with an access token, and processes a partial refund of 20 units of the currency.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentRefundClient;\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n  \n  $client = new PaymentRefundClient();\n  $refund = $client->refund($payment_id, 20);\n  echo $refund->id;\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with Detailed Information in Mercado Pago API\nDESCRIPTION: This curl request demonstrates how to create a payment with Mercado Pago API, including detailed transaction data, payer information, and additional metadata for the tourism sector with passenger and route information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data.en.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'Cookie: JSESSIONID=node01vge5if1qe3pv1w1y0c6ix92a123941.node0' \\\n--data-raw '{\n    \"transaction_amount\": 150.00,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"visa\",\n    \"token\": \"<CARD_TOKEN>\",\n    \"external_reference\": \"Pedido 01\",\n    \"notification_url\": \"https://webhook.site/3e2ba8af-41c8-41c4-9a47-bf65877f5e7c\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"description\": \"PEDIDO NOVO\",\n    \"payer\": {\n        \"first_name\": \"Nome\",\n        \"last_name\": \"Sobrenome\",\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"12345678909\"\n        },\n        \"address\": {\n            \"zip_code\": \"06233-200\",\n            \"street_name\": \"Av. das Nações Unidas\",\n            \"street_number\": \"3003\",\n            \"neighborhood\": \"Bonfim\",\n            \"city\": \"Osasco\",\n            \"federal_unit\": \"SP\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [ \n        {\n            \"id\": \"1234\",\n            \"title\": \"Serviço\",\n            \"description\": \"Descrição de serviço\",\n            \"category_id\": \"travels\",\n            \"category_descriptor\":{\n                \"passenger\": {\n                    \"first_name\": \"Nome\",\n                    \"last_name\": \"Sobrenome\"\n                },\n                \"route\": {\n                    \"departure\": \"Osasco\",\n                    \"destination\": \"Sao Paulo\",\n                    \"departure_date_time\": \"2022-03-12T12:58:41.425-04:00\",\n                    \"arrival_date_time\": \"2022-03-14T12:58:41.425-04:00\",\n                    \"company\": \"Companhia\"\n                }\n            },\n            \"quantity\": 1,\n            \"unit_price\": 150\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_prime_user\": \"1\",\n            \"is_first_purchase_online\": \"1\",\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"06233-200\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"3003\"\n            },\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"0\",\n            \"pick_up_on_seller\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"06233-200\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"3003\",\n                \"floor\": \"\",\n                \"apartment\": \"\"\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods in Payment Brick using React\nDESCRIPTION: This React code sample shows how to customize the payment methods available in Payment Brick by configuring the paymentMethods object. The example demonstrates enabling all credit card options in a React implementation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/manage-payment-methods.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n paymentMethods: {\n   ...,\n   creditCard: 'all'\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago Checkout Bricks in Node.js\nDESCRIPTION: This Node.js code snippet shows how to integrate Checkout Bricks for payment processing. It requires the 'mercadopago' library, sets the access token, and saves the payment using the data from the request body.  The status, status detail, and ID from the response are sent back as a JSON response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-serverside.es.md#2025-04-18_snippet_7\n\nLANGUAGE: node\nCODE:\n```\nvar mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nmercadopago.payment.save(req.body)\n  .then(function(response) {\n    const { status, status_detail, id } = response.body;\n    res.status(response.status).json({ status, status_detail, id });\n  })\n  .catch(function(error) {\n    console.error(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Get Payment by ID - PHP Implementation\nDESCRIPTION: PHP implementation to retrieve payment information using the MercadoPago SDK. Requires the mercadopago.php library and an environment access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/retrieving-payments.en.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\trequire ('mercadopago.php');\n\n\t$mp = new MP (\"ENV_ACCESS_TOKEN\");\n\n\t$payment = $mp->get(\n\t\t\"/v1/payments/\". $paymentId\n\t);\n?>\n```\n\n----------------------------------------\n\nTITLE: SPEI Bank Transfer Payment Response Example\nDESCRIPTION: Sample JSON response from the Mercado Pago API after creating a SPEI bank transfer payment. It includes payment ID, status, and the important external_resource_url field that contains the payment instructions URL.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.pt.md#2025-04-18_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 51096146182,\n    \"version\": null,\n    \"date_created\": \"2023-05-10T13:43:14.586-04:00\",\n    ...\n    \"payment_method_id\": \"clabe\",\n    \"payment_type_id\": \"bank_transfer\",\n    \"payment_method\": {\n        \"id\": \"clabe\",\n        \"type\": \"bank_transfer\",\n        \"data\": {\n            \"reference_id\": \"6410293433784980810\",\n            \"external_reference_id\": \"1009\",\n            \"external_resource_url\": \"https://www.mercadopago.com.mx/payments/51096146182/ticket?caller_id=34728475&hash=f3a8630a-f06a-48e4-b2a6-f95750af7346\"\n        }\n    },\n    \"status\": \"pending\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PagoEfectivo Payment with Mercado Pago API (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to create a PagoEfectivo payment using the Mercado Pago API. It sets up the payment client, includes the necessary headers for idempotency, and sends a POST request with the required payment details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['<TRANSACTION_AMOUNT>'],\n    \"payment_method_id\" => $_POST['<PAYMENT_METHOD_ID>'],\n    \"payer\" => [\n      \"email\" => $_POST['<EMAIL>']\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Sample PSE Payment Response Structure\nDESCRIPTION: JSON response returned after creating a PSE payment. It shows important fields including status, external_resource_url for redirecting the buyer to complete the payment, and transaction details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-migrate-pse.en.md#2025-04-18_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1312147735,\n     ..., \n    \"operation_type\": \"regular_payment\",\n    \"payment_method_id\": \"pse\",\n    \"payment_type_id\": \"bank_transfer\",\n    \"payment_method\": {\n        \"id\": \"pse\",\n        \"type\": \"bank_transfer\"\n    },\n    \"status\": \"pending\",\n    \"status_detail\": \"pending_waiting_transfer\",\n     ...\n    \"description\": \"Título del producto\",\n     ... \n    \"callback_url\": \"http://www.your-site.com\",\n    \"installments\": 1,\n    \"transaction_details\": {\n     ...\n        \"total_paid_amount\": 5000,\n     ...\n        \"external_resource_url\": \"https://www.mercadopago.com.co/sandbox/payments/1312147735/bank_transfer?caller_id=1148920820&hash=f41dd14f-b3a6-4ac4-9b78-5cfeb5a35e77\",\n     ...\n        \"financial_institution\": \"1009\",\n     ...\n        \"bank_transfer_id\": 129229,\n        \"transaction_id\": \"10022214\"\n    }, \n}\n```\n\n----------------------------------------\n\nTITLE: Sending Payment Capture Request using curl\nDESCRIPTION: This snippet demonstrates how to send a POST request to the Wallet Connect API to capture a payment. It includes necessary headers and a JSON body with required payment details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/capture-payment.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    'https://api.mercadopago.com/v1/advanced_payments' \\\n    -H 'X-Idempotency-Key: IDEMPOTENCY_KEY' \\\n    -H 'X-Meli-Session-Id: DEVICE_ID' \\\n    -H 'Authorization: Bearer ACCESS_TOKEN' \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -d '{\\n         \"wallet_payment\": {\\n          \"transaction_amount\": 700.50,\\n          \"description\": \"Descrição do pagamento\",\\n          \"external_reference\": \"Pago_123\"\\n          \"forward_data\": {\\n             \"sub_merchant\": {\\n                \"sub_merchant_id\": 123123,\\n                \"mcc\": \"5462\",\\n                \"country\": \"BRA\",\\n                \"address_door_number\": 1,\\n                \"zip\": \"2222222\",\\n                \"document_number\": \"222222222222222\",\\n                \"city\": \"SÃO PAULO\",\\n                \"address_street\": \"RUA A\",\\n                \"legal_name\": \"LOJINHA DO ZÉ\",\\n                \"region_code_iso\": \"BR-MG\",\\n                \"region_code\": \"BR\",\\n                \"document_type\": \"CNPJ\",\\n                \"phone\": \"123123123\",\\n                \"url\": \"www.nomedofacilitador.com.br\"\\n               }\\n            }\\n         },\\n         \"payer\": {\\n            \"token\": \"PAYER_TOKEN\",\\n              \"type_token\": \"wallet-token\"\\n         },\\n         \"binary_mode\": true\\n      }'\\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Methods using MercadoPago SDK C#\nDESCRIPTION: This C# code snippet demonstrates fetching payment methods using the MercadoPago SDK. It sets the access token and retrieves a list of payment methods asynchronously. Useful for integrating payment options with C# applications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pse-avanza.en.md#2025-04-18_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nusing MercadoPago.Client.PaymentMethod;\nusing MercadoPago.Config;\nusing MercadoPago.Resource;\nusing MercadoPago.Resource.PaymentMethod;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar client = new PaymentMethodClient();\nResourcesList<PaymentMethod> paymentMethods = await client.ListAsync();\n```\n\n----------------------------------------\n\nTITLE: Listing Payment Methods with Go in MercadoPago\nDESCRIPTION: Go implementation for listing available payment methods using MercadoPago's Go SDK. Configures the client with an access token and retrieves all payment methods available for the merchant.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_27\n\nLANGUAGE: go\nCODE:\n```\naccessToken := \"{{ACCESS_TOKEN}}\"\n\n\ncfg, err := config.New(accessToken)\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nclient := paymentmethod.NewClient(cfg)\n\n\nresources, err := client.List(context.Background())\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nfor _, v := range resources {\n   fmt.Println(v)\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Deep Link Handler Implementation\nDESCRIPTION: Complete implementation of deep link handling for iOS including manual Safari View Controller dismissal\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-expo-go.es.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n\tStatusBar\n} from \"expo-status-bar\";\nimport {\n\tStyleSheet,\n\tButton,\n\tView,\n\tLinking,\n\tPlatform\n} from \"react-native\";\nimport {\n\topenBrowserAsync\n} from \"expo-web-browser\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport {\n\tuseEffect\n} from \"react\";\nexport default function App() {\n\tuseEffect(() => {\n\t\tLinking.addEventListener(\"url\", (event) => {\n\t\t\tconst {\n\t\t\t\turl\n\t\t\t} = event;\n\t\t\tif (url !== null && url.includes(\"myapp://\")) {\n\t\t\t\tPlatform.OS === \"ios\" && WebBrowser.dismissBrowser();\n\t\t\t}\n\t\t});\n\t}, []);\n\tconst url = \"https://url-to-open.com\";\n\treturn ( <\n\t\tView style = {\n\t\t\tstyles.container\n\t\t} >\n\t\t<\n\t\tButton title = \"Open Browser\"\n\t\tonPress = {\n\t\t\t() => openBrowserAsync(url)\n\t\t}\n\t\t/> <\n\t\tStatusBar style = \"auto\" / > < /View>\n\t);\n}\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tbackgroundColor: \"#fff\",\n\t\talignItems: \"center\",\n\t\tjustifyContent: \"center\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Mercado Pago SDK - Java\nDESCRIPTION: This code snippet demonstrates how to create a payment preference using the Mercado Pago Java SDK. It constructs and configures a `PreferenceRequest` object consisting of item and tracking information, then submits it using the `PreferenceClient.create()` method. Dependencies: Mercado Pago Java SDK, BigDecimal. Key parameters include item details like title, description, and price.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/preferences.en.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n\nPreferenceClient client = new PreferenceClient();\n\nList<PreferenceItemRequest> items = new ArrayList<>();\nPreferenceItemRequest item =\n   PreferenceItemRequest.builder()\n       .title(\"Dummy Title\")\n       .description(\"Dummy description\")\n       .pictureUrl(\"http://www.myapp.com/myimage.jpg\")\n       .quantity(1)\n       .currencyId(\"US\")\n       .unitPrice(new BigDecimal(\"10\"))\n       .build();\nitems.add(item);\n\nList<PreferenceTrackRequest> tracks = new ArrayList<>();\nPreferenceTrackRequest googleTrack = PreferenceTrackRequest.builder().type(\"google_ad\").build();\n\ntracks.add(googleTrack);\n\nPreferenceRequest request = PreferenceRequest.builder().items(items).tracks(tracks).build();\n\nclient.create(request);\n\n```\n\n----------------------------------------\n\nTITLE: Obtaining Identification Types in JavaScript\nDESCRIPTION: This JavaScript function asynchronously retrieves identification types from the Mercado Pago API and automatically populates a select element in the payment form.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.pt.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n(async function getIdentificationTypes() {\ntry {\nconst identificationTypes = await mp.getIdentificationTypes();\nconst identificationTypeElement = document.getElementById('form-checkout__identificationType');\n\ncreateSelectOptions(identificationTypeElement, identificationTypes);\n} catch (e) {\nreturn console.error('Error getting identificationTypes: ', e);\n}\n})();\n\nfunction createSelectOptions(elem, options, labelsAndKeys = { label: \"name\", value: \"id\" }) {\nconst { label, value } = labelsAndKeys;\n\nelem.options.length = 0;\n\nconst tempOptions = document.createDocumentFragment();\n\noptions.forEach(option => {\nconst optValue = option[value];\nconst optLabel = option[label];\n\nconst opt = document.createElement('option');\nopt.value = optValue;\nopt.textContent = optLabel;\n\ntempOptions.appendChild(opt);\n});\n\nelem.appendChild(tempOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: Example Webhook Notification from Mercado Pago\nDESCRIPTION: Complete webhook notification example showing the query parameters, headers, and body sent by Mercado Pago for a payment update event.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.es.md#2025-04-18_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /test?data.id=123456&type=payment HTTP/1.1\nHost: prueba.requestcatcher.com\nAccept: */*\nAccept-Encoding: *\nConnection: keep-alive\nContent-Length: 177\nContent-Type: application/json\nNewrelic: eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkFwcCIsImFjIjoiOTg5NTg2IiwiYXAiOiI5NjA2MzYwOTQiLCJ0eCI6IjU3ZjI4YzNjOWE2ODNlZDYiLCJ0ciI6IjY0NjA0OTM3OWI1ZjA3MzMyZDdhZmQxMjEyM2I5YWE4IiwicHIiOjAuNzk3ODc0LCJzYSI6ZmFsc2UsInRpIjoxNzQyNTA1NjM4Njg0LCJ0ayI6IjE3MDk3MDcifX0=\nTraceparent: 00-646049379b5f07332d7afd12123b9aa8-e7f77a41f687aecd-00\nTracestate: 1709707@nr=0-0-989586-960636094-e7f77a41f687aecd-57f28c3c9a683ed6-0-0.797874-1742505638684\nUser-Agent: restclient-node/4.15.3\nX-Request-Id: bb56a2f1-6aae-46ac-982e-9dcd3581d08e\nX-Rest-Pool-Name: /services/webhooks.js\nX-Retry: 0\nX-Signature: ts=1742505638683,v1=ced36ab6d33566bb1e16c125819b8d840d6b8ef136b0b9127c76064466f5229b\nX-Socket-Timeout: 22000\n{\"action\":\"payment.updated\",\"api_version\":\"v1\",\"data\":{\"id\":\"123456\"},\"date_created\":\"2021-11-01T02:02:02Z\",\"id\":\"123456\",\"live_mode\":false,\"type\":\"payment\",\"user_id\":724484980}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect URLs in React\nDESCRIPTION: Shows how to define custom back URLs for error and return scenarios in Mercado Pago Status Screen Brick using React component configuration\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/status-screen-brick/configure-redirect-urls.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n backUrls: {\n   error: '<http://<your_domain>/error>',\n   return: '<http://<your_domain>/homepage>',\n },\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Token using OAuthClient in PHP\nDESCRIPTION: This PHP snippet demonstrates how to refresh an Access Token using the OAuthClient class. It creates a new OAuthRefreshRequest with the client secret, client ID, and refresh token, then calls the refresh method on the OAuthClient instance.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/renewal.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new OauthClient();\n  $request = new OAuthRefreshRequest();\n    $request->client_secret = \"CLIENT_SECRET\";\n    $request->client_id = \"CLIENT_ID\";\n    $request->refresh_token = \"REFRESH_TOKEN\";\n\n  $client->refresh($request);\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Customer Cards with Mercado Pago SDK in PHP\nDESCRIPTION: Lists all cards associated with a specific customer using the CustomerCardClient. The function requires the customer's unique identifier to retrieve their stored payment methods. This allows merchants to display available payment options to returning customers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/cards.en.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new CustomerCardClient();\n  $client->list(\"448870796-7ZjwhKGxILixxN\");\n?>\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Customer and Card Creation in MercadoPago\nDESCRIPTION: This JSON represents the response received after successfully creating a customer and associating a card. It contains customer details including ID, email, default card, and card-specific information such as expiration date and partial card numbers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/create-customer-and-card.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"123456789-jxOV430go9fx2e\",\n    \"email\": \"test_payer_12345@testuser.com\",\n    ...\n    \"default_card\": \"1490022319978\",\n    \"default_address\": null,\n    \"cards\": [{\n        \"id\": \"1490022319978\",\n        \"expiration_month\": 12,\n        \"expiration_year\": 2020,\n        \"first_six_digits\": \"415231\",\n        \"last_four_digits\": \"0001\",\n        ...\n    }],\n    \"addresses\": [],\n    \"live_mode\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Wallet Purchase Preference - JSON\nDESCRIPTION: This snippet illustrates a complete Mercado Pago preference structure with the 'purpose' attribute set to 'wallet_purchase'. It also includes item details like title, quantity, and unit price, demonstrating how to create a preference for wallet-only payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"purpose\": \"wallet_purchase\",\n    \"items\": [\n        {\n            \"title\": \"Meu produto\",\n            \"quantity\": 1,\n            \"unit_price\": 75.76\n        }\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Customer and Card with MercadoPago SDK in Ruby\nDESCRIPTION: This snippet demonstrates how to create a customer and associate a card using the MercadoPago SDK in Ruby. It initializes the SDK, creates a customer with an email, and then adds a card to the customer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ruby/customers.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustomer_request = {\n  email: 'john@yourdomain.com'\n}\ncustomer_response = sdk.customer.create(customer_request)\ncustomer = customer_response[:response]\n\ncard_request = {\n  token: '9b2d63e00d66a8c721607214cedaecda',\n  issuer_id: '3245612',\n  payment_method_id: 'debit_card'\n}\ncard_response = sdk.card.create(customer['id'], card_request)\ncard = card_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Customer Search API Response Format\nDESCRIPTION: Sample JSON response from the customer search API. It includes pagination information and detailed customer data with fields like address, cards, registration dates, email, ID, and contact information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/search-customers.en.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"paging\": {\n        \"limit\": 10,\n        \"offset\": 0,\n        \"total\": 1\n    },\n    \"results\": [\n        {\n            \"address\": {\n                \"id\": null,\n                \"street_name\": null,\n                \"street_number\": null,\n                \"zip_code\": null\n            },\n            \"addresses\": [],\n            \"cards\": [\n                {\n                    ...\n                }\n            ],\n            \"date_created\": \"2017-05-05T00:00:00.000-04:00\",\n            \"date_last_updated\": \"2017-05-05T09:23:25.021-04:00\",\n            \"date_registered\": null,\n            \"default_address\": null,\n            \"default_card\": \"1493990563105\",\n            \"description\": null,\n            \"email\": \"test_payer_12345@testuser.com\",\n            \"first_name\": null,\n            \"id\": \"123456789-jxOV430go9fx2e\",\n            \"identification\": {\n                \"number\": null,\n                \"type\": null\n            },\n            \"last_name\": null,\n            \"live_mode\": false,\n            \"metadata\": {},\n            \"phone\": {\n                \"area_code\": null,\n                \"number\": null\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Web Tokenize Checkout with saved cards\nDESCRIPTION: This snippet shows how to initialize the Web Tokenize Checkout with saved cards functionality. It includes the customer ID and card IDs to be used for payment.  It requires the MercadoPago SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-clientside.es.md#2025-04-18_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n\"<script>\\n  mp.checkout({\\n    tokenizer: {\\n        totalAmount: 4000,\\n        backUrl: 'https://www.mi-sitio.com/process',\\n        savedCards: {\\n            cardIds: '1518023392627,1518023332143' // IDs de las tarjetas\\n            customerId: '209277402-FqRqgEc3XItrxs' // Tu customer ID\\n        }\\n    },\\n    render: {\\n        container: ‘.tokenizer-container’,\n```\n\n----------------------------------------\n\nTITLE: Integrating Payment Brick using React\nDESCRIPTION: This code snippet demonstrates how to integrate the Payment Brick from Checkout Bricks using React. It initializes MercadoPago, sets up payment configuration, and renders the Payment component with customization options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/react-cho-bricks.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport React from 'react';\nimport { Payment, initMercadoPago } from '@mercadopago/sdk-react'\n\ninitMercadoPago('<YOUR_PUBLIC_KEY>');\n\nconst App = () => {\n const initialization = {\n   amount: '<PAYMENT_AMOUT>'\n };\n const customization = {\n   paymentMethods: {\n     atm: 'all',\n     ticket: 'all',\n     bankTransfer: 'all',\n     creditCard: 'all',\n     debitCard: 'all',\n     mercadoPago: 'all',\n   },\n };\n\n return (\n   <Payment\n     initialization={initialization}\n     customization={customization}\n     onSubmit={async (param) => {\n       console.log(param);\n     }}\n   />\n );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Items in Ruby\nDESCRIPTION: This Ruby snippet shows how to create a Mercado Pago preference with multiple items. It initializes the MercadoPago SDK, defines a preference_data hash containing an array of item hashes with properties like title, quantity, currency_id, and unit_price.  It then uses the SDK to create the preference and retrieves the response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/preference-multiple-items.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n# Create preference data with items\npreference_data = {\n  items: [\n    {\n      title: 'Meu produto 1',\n      quantity: 1,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 75.56\n    },\n    {\n      title: 'Meu produto 2',\n      quantity: 2,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 96.56\n    }\n  ]\n}\n\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n\n```\n\n----------------------------------------\n\nTITLE: Launch Payment Flow with Amount\nDESCRIPTION: This snippet demonstrates how to initiate a basic payment flow with a specified amount. It uses the `launchPaymentFlow` function with only the amount parameter. No custom callbacks are configured.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/start-payment-flow.es.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n launchPaymentFlow(20.0)\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with MercadoPago Java\nDESCRIPTION: This snippet demonstrates how to create a preference object with MercadoPago using Java. It sets the 'purpose' to 'wallet_purchase', which only allows registered payments.  The code utilizes the MercadoPago Java SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-startup.es.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Crear un objeto de preferencia\nPreferenceClient client = new PreferenceClient();\n \n// Crear un elemento en la preferencia\nList<PreferenceItemRequest> items = new ArrayList<>();\nPreferenceItemRequest item =\n   PreferenceItemRequest.builder()\n       .title(\"Mi producto\")\n       .quantity(1)\n       .unitPrice(new BigDecimal(\"100\"))\n       .build();\nitems.add(item);\n \nPreferenceRequest request = PreferenceRequest.builder()\n  // el .purpose('wallet_purchase') solo permite pagos registrados\n  // para permitir pagos de invitados, puedes omitir esta propiedad\n  .purpose('wallet_purchase')\n  .items(items).build();\n \nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Creating a Payroll Payment Transfer\nDESCRIPTION: API request to create a money transfer specifically for payroll purposes, using the 'payroll' concept_id. This identifies the transaction as a salary payment which may have different regulatory implications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/money-transfer.es.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n$ curl https://api.mercadopago.com/v1/payments \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Cache-Control: no-cache' \\\n  -H 'Authorization: Bearer ACCESS_TOKEN' \\\n  -d '\n  {\n\t\"transaction_amount\": 100,\n\t\"operation_type\": \"money_transfer\",\n\t\"concept_id\": \"payroll\",\n\t\"description\": \"Title of what you are paying for\",\n\t\"installments\": 1,\n\t\"marketplace\": \"NONE\",\n\t\"payment_method_id\": \"account_money\",\n\t\"collector\": {\n\t\t\"id\": \"399606359\"\n\t},\n\t\"external_reference\": \"Reference_1234\",\n\t\"notification_url\": \"https://www.your-site.com/webhooks\",\n}'\n```\n\n----------------------------------------\n\nTITLE: Searching for Customers using Mercado Pago .NET SDK\nDESCRIPTION: This snippet demonstrates how to search for existing customers using the Mercado Pago .NET SDK. It creates a `SearchRequest` object with a filter for the customer's email and then uses the `CustomerClient` to perform the search and retrieve a list of matching customers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/customers.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: dotnet\nCODE:\n```\n```dotnet\n\nvar searchRequest = new SearchRequest\n{\n    Filters = new Dictionary<string, object>\n    {\n        [\"email\"] = \"test_payer_12345@testuser.com\",\n    },\n};\nResultsResourcesPage<Customer> results = await customerClient.SearchAsync(searchRequest);\nIList<Customer> customers = results.Results;\n\n```\n```\n\n----------------------------------------\n\nTITLE: Making an Online Payment Request with Mercado Pago API\nDESCRIPTION: This curl command demonstrates how to make a POST request to Mercado Pago's Secure Payments API for processing an online payment. It includes card details, payer information, and transaction details in the request body.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/secure_payments/integration.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n  -H 'X-Caller-Scopes: payments' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n  -d '{\n    \"binary_mode\": true,\n    \"capture\": true,\n    \"card\": {\n      \"card_number\": \"4688163623817035\",\n      \"security_code\": \"438\",\n      \"expiration_month\": \"08\",\n      \"expiration_year\": \"2024\",\n      \"cardholder\": {\n        \"identification\": {\n          \"number\": \"123456\",\n          \"type\": \"DNI\"\n        },\n        \"name\": \"APRO\"\n      },\n      \"device\": {\n        \"fingerprint\": {}\n      },\n      \"require_esc\": false\n    },\n    \"description\": \"Lorem ipsum.\",\n    \"installments\": 1,\n    \"issuer_id\": \"303\",\n    \"payer\": {\n      \"first_name\": \"APRO\",\n      \"last_name\": \"APRO\",\n      \"address\": {},\n      \"identification\": {\n        \"number\": \"123456\",\n        \"type\": \"DNI\"\n      },\n      \"email\": \"test@testuser.com\"\n    },\n    \"payment_method_id\": \"visa\",\n    \"statement_descriptor\": \"Lorem ipsum.\",\n    \"transaction_amount\": 9000,\n    \"additional_info\": {\n      \"items\": [\n        {\n          \"id\": \"ItemID1234\",\n          \"title\": \"Nombre del servicio\",\n          \"description\": \"Descripción del servicio\",\n          \"category_id\": \"travels\",\n          \"quantity\": 1,\n          \"unit_price\": 1234.56\n        }\n      ],\n      \"payer\": {\n        \"first_name\": \"Carlos\",\n        \"last_name\": \"Perez\",\n        \"is_prime_user\": \"1\",\n        \"is_first_purchase_online\": \"1\",\n        \"last_purchase\": \"2022-11-25T19:30:00.000-03:00\",\n        \"phone\": {\n          \"area_code\": \"57\",\n          \"number\": \"13123772\"\n        },\n        \"address\": {\n          \"zip_code\": \"11001\",\n          \"street_name\": \"Calle Falsa\",\n          \"street_number\": \"52\"\n        },\n        \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n      }\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Canceling a MercadoPago Payment Reservation in Python\nDESCRIPTION: This code snippet shows how to cancel a payment reservation in MercadoPago using Python. It uses the MercadoPago SDK, requires an access token, and a payment ID. The code prepares payment data with cancelled status and updates the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/cancel-reserve.es.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\npayment_data = {\n  \"status\": \"cancelled\"\n}\n\npayment_response = sdk.payment().update(payment_id, payment_data)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Capturing Total Reserved Amount in MercadoPago - PHP\nDESCRIPTION: This PHP code snippet demonstrates how to capture the total reserved amount of a transaction in MercadoPago. It requires the 'mercadopago/sdk' library and an access token. The code sets up a payment client, configures request options, and executes a payment capture using the unique payment ID and request parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/capture-authorized-payment.en.md#2025-04-18_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $client->capture($payment_id, $request_options);\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieve Checkout Preference\nDESCRIPTION: This function retrieves an existing checkout preference using a preference ID. It requires an initialized SDK instance and formats the output in JSON.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.en.md#2025-04-18_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef index(req, **kwargs):\n    preference_response = sdk.preference().get(\"PREFERENCE_ID\")\n\n    return json.dumps(preference_response[\"response\"], indent=4)\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference in Node.js\nDESCRIPTION: Create a Mercado Pago payment preference using Node.js with wallet purchase purpose and a product item\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/default-rendering.en.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nlet preference = {\n  \"purpose\": \"wallet_purchase\",\n  \"items\": [\n    {\n      \"id\": \"item-ID-1234\",\n      \"title\": \"Meu produto\",\n      \"quantity\": 1,\n      \"unit_price\": 75.76\n    }\n  ]\n};\n\nmercadopago.preferences.create(preference)\n  .then(function (response) {\n    const preferenceId = response.body.id;\n  }).catch(function (error) {\n    console.log(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Ruby SDK in Mercado Pago\nDESCRIPTION: Ruby implementation for creating payments using Mercado Pago's SDK. This snippet initializes the SDK with an access token, sets custom headers including idempotency key, configures payment data, and processes the payment request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_data = {\n transaction_amount: params[:transactionAmount].to_f,\n token: params[:token],\n description: params[:description],\n installments: params[:installments].to_i,\n payment_method_id: params[:paymentMethodId],\n payer: {\n   email: params[:email],\n   identification: {\n     type: params[:identificationType],\n     number: params[:identificationNumber]\n   }\n }\n}\n \npayment_response = sdk.payment.create(payment_data, custom_request_options)\npayment = payment_response[:response]\n \nputs payment\n```\n\n----------------------------------------\n\nTITLE: Creando un pago con Fintoc en Node.js\nDESCRIPTION: Este snippet demuestra cómo crear un pago utilizando Fintoc como método de pago en Node.js. Configura el SDK de Mercado Pago, define los detalles del pago y procesa la respuesta.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-simplified.es.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(config.access_token);\n\nvar payment = req.body;\n\nvar payment_data = {\n  transaction_amount: 5000,\n  callback_url: 'https://www.your-site.com',\n  point_of_interaction: {\n   type: 'CHECKOUT',\n   sub_type: 'INTER_PSP'\n  },\n  description: 'Titulo del producto',\n  payment_method_id: 'fintoc',\n  payer: {\n    email: payment.email,\n  }\n};\n\nvar payment = mercadopago.payment.save(payment_data)\n  .then(function (response) {\n    res.status(response.status).json({\n      status: response.body.status,\n      status_detail: response.body.status_detail,\n      id: respose.body.id,\n    });\n  })\n  .catch(function (error) {\n    res.status(error.status).send(error);\n});\n\nvar payment_link = payment.transaction_details.external_resource_url;\n```\n\n----------------------------------------\n\nTITLE: Associating Google Ads Tag with Checkout Pro in C#\nDESCRIPTION: This C# snippet explains how to set up Google Ads conversion tracking for a Mercado Pago preference. With key components like PreferenceTrackRequest, it requests conversion ID and label for setup, demonstrating asynchronous preference creation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.en.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// Associate your Google ads tag\nvar tracks = new List<PreferenceTrackRequest>\n{\nnew PreferenceTrackRequest\n{\nType = \"facebook_ad\",\nValues = new PreferenceTrackValuesRequest\n{\nConversionId = \"CONVERSION_ID\",\nConversionLabel = \"CONVERSION_LABEL\",\n},\n},\n};\n\nvar request = new PreferenceRequest\n{\n// ...\ntracks = tracks,\n};\n\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Implementing POS Money Loading Function in Android\nDESCRIPTION: Android implementation of the shareRDCPass function that handles money loading to POS terminals. Includes parameters for transaction amount, payment type, and balance reload flag.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-load-money.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: android\nCODE:\n```\npublic void shareRDCPass(String total, String intent, Boolean esCarga) { \n\ttry { \n\t\tIntent sharingIntent = new Intent(intent); \n\t\tsharingIntent.setClassName(\"redelcom.cl.rdcpass\", \"redelcom.cl.rdcpass.MainActivity\");  \n\t\tsharingIntent.putExtra(\"packageName\", getPackageName()); \n\t\tsharingIntent.putExtra(\"className\", getClass().toString().split(\" \")[1]); \n\t\tsharingIntent.putExtra(Intent.EXTRA_TEXT, total); \n\t\tif (esCarga){ \n\t\t\tsharingIntent.putExtra(\"recargaSaldo\", true); \n\t\t\tsharingIntent.putExtra(\"payment_type\", \"TARJETA\"); \n\t\t} \n\t\tstartActivity(sharingIntent); \n\t} catch (Exception e) { \n\t\te.printStackTrace(); \n\t} \n}\n```\n\n----------------------------------------\n\nTITLE: MercadoPago API Response for Partial Payment Capture\nDESCRIPTION: This JSON snippet shows a sample response from the MercadoPago API after capturing a partial payment. It includes key information such as the payment status, status detail, captured amount, and capture flag.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.en.md#2025-04-18_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n...\n\"status\": \"approved\",\n\"status_detail\": \"accredited\",\n...\n\"transaction_amount\": 75,\n...\n\"captured\": true,\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling Payment using MercadoPago SDK in C#\nDESCRIPTION: This code snippet demonstrates how to cancel a payment using the MercadoPago C# SDK. It initializes the MercadoPagoConfig with an access token, creates a PaymentClient instance, and then calls the Cancel method, passing the payment ID to cancel the specific payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/cancellations.es.md#2025-04-18_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n          \nvar client = new MercadoPago.Client.Payment.PaymentClient();\nclient.Cancel(payment_id);\n```\n\n----------------------------------------\n\nTITLE: Obtaining Access Token via OAuth\nDESCRIPTION: This code snippet demonstrates how to obtain an Access Token using the OAuth 2.0 client credentials grant type. It sends a POST request to the Mercado Pago API endpoint with the client ID, client secret, and grant type. The response will contain the Access Token, which is used to authenticate requests to Mercado Pago's APIs.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/interoperable-accepting-flow-configuration.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/oauth/token' \\\n--header 'Content-Type: application/json' \\\n--data '{\n\"client_id\": \"{CLIENT_ID}\",\n\"client_secret\": \"{CLIENT_SECRET}\",\n\"grant_type\": \"client_credentials\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Refreshing OAuth Token for Vendor Authorization in PHP\nDESCRIPTION: This code demonstrates how to refresh an existing OAuth token using the MercadoPago OauthClient. It creates a refresh request with client credentials and the existing refresh token to obtain a new access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/oauth.en.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new OauthClient();\n  $request = new OAuthRefreshRequest();\n    $request->client_secret = \"CLIENT_SECRET\";\n    $request->client_id = \"CLIENT_ID\";\n    $request->refresh_token = \"REFRESH_TOKEN\";\n\n  $client->refresh($request);\n?>\n```\n\n----------------------------------------\n\nTITLE: Using Additional Data in React Card Component\nDESCRIPTION: This snippet shows how to implement the onSubmit callback with additionalData in a React Card component. It demonstrates logging both cardFormData and additionalData.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/additional-data.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\n<Card\n initialization={initialization}\n customization={customization}\n onSubmit={async (cardFormData, additionalData) => {\n   console.log(cardFormData, additionalData);\n }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Capturing Total Payment Value with Ruby\nDESCRIPTION: This snippet shows how to capture the total value of a previously authorized payment using the Mercado Pago Ruby SDK. It updates the payment to set the capture flag to true.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\nrequest = {\n  capture: true\n}\n\npayment_response = sdk.payment.update(payment_id, request)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Bancário Payment with Ruby\nDESCRIPTION: This Ruby code snippet shows how to create a boleto bancário payment using Mercado Pago's SDK. It sets up the SDK with an access token, configures custom headers with an idempotency key, and sends a payment request with transaction and payer details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_request = {\n  transaction_amount: 100,\n  description: 'Título del producto',\n  payment_method_id: 'bolbradesco',\n  payer: {\n    email: 'PAYER_EMAIL',\n    first_name: 'Test',\n    last_name: 'User',\n    identification: {\n      type: 'DNI',\n      number: '19119119',\n    },\n    address: {\n      zip_code: '1264',\n      street_name: 'Av. Caseros',\n      street_number: '3039',\n      neighborhood: 'Parque Patricios',\n      city: 'Buenos Aires',\n      federal_unit: 'BA'\n    }\n  }\n}\n\npayment_response = sdk.payment.create(payment_request, custom_request_options)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Extracting Signature from Header for HMAC Validation - JavaScript\nDESCRIPTION: This JavaScript snippet illustrates how to retrieve the x-signature and x-request-id from request headers, parse the x-signature to obtain the timestamp and hash values, and compare them against a calculated HMAC using the provided secret key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Obtain the x-signature value from the header\nconst xSignature = headers['x-signature']; // Assuming headers is an object containing request headers\nconst xRequestId = headers['x-request-id']; // Assuming headers is an object containing request headers\n\n// Obtain Query params related to the request URL\nconst urlParams = new URLSearchParams(window.location.search);\nconst dataID = urlParams.get('data.id');\n\n// Separating the x-signature into parts\nconst parts = xSignature.split(',');\n\n// Initializing variables to store ts and hash\nlet ts;\nlet hash;\n\n// Iterate over the values to obtain ts and v1\nparts.forEach(part => {\n    // Split each part into key and value\n    const [key, value] = part.split('=');\n    if (key && value) {\n        const trimmedKey = key.trim();\n        const trimmedValue = value.trim();\n        if (trimmedKey === 'ts') {\n            ts = trimmedValue;\n        } else if (trimmedKey === 'v1') {\n            hash = trimmedValue;\n        }\n    }\n});\n\n// Obtain the secret key for the user/application from Mercadopago developers site\nconst secret = 'your_secret_key_here';\n\n// Generate the manifest string\nconst manifest = `id:${dataID};request-id:${xRequestId};ts:${ts};`;\n\n// Create an HMAC signature\nconst hmac = crypto.createHmac('sha256', secret);\nhmac.update(manifest);\n\n// Obtain the hash result as a hexadecimal string\nconst sha = hmac.digest('hex');\n\nif (sha === hash) {\n    // HMAC verification passed\n    console.log(\"HMAC verification passed\");\n} else {\n    // HMAC verification failed\n    console.log(\"HMAC verification failed\");\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Deep Links with react-native-inappbrowser-reborn in React Native\nDESCRIPTION: This JavaScript code demonstrates how to handle incoming Deep Links in a React Native application using react-native-inappbrowser-reborn. It listens for URL events, closes the InAppBrowser when a specific URL pattern is detected, and navigates to a specific screen.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-cli.en.md#2025-04-18_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n\tuseEffect\n} from 'react';\nimport React from 'react';\nimport MainStack from './navigation/MainStack';\nimport {\n\tLinking\n} from 'react-native';\nimport InAppBrowser from 'react-native-inappbrowser-reborn';\nimport * as RootNavigation from './RootNavigation';\n\nfunction App(): JSX.Element {\n\tuseEffect(() => {\n\t\tLinking.addEventListener('url', event => {\n\t\t\tconst {\n\t\t\t\turl\n\t\t\t} = event;\n\t\t\tif (url !== null && url.includes('myapp://')) {\n\t\t\t\tInAppBrowser.close();\n\t\t\t\tRootNavigation.navigate('Congrats');\n\t\t\t}\n\t\t});\n\t}, []);\n\treturn <MainStack / > ;\n}\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Brick Button Style in JavaScript\nDESCRIPTION: This snippet demonstrates how to customize the appearance of the Wallet Brick button using JavaScript. It sets the theme to dark and adjusts various style properties such as color, border radius, and padding.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-appearance.es.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n        theme:'dark',\n        customStyle: {\n            valueProp: 'practicality',\n            valuePropColor: 'black',\n            borderRadius: '10px',\n            verticalPadding: '10px',\n            horizontalPadding: '10px',\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Criando preferência de pagamento com C# no Mercado Pago\nDESCRIPTION: Este snippet mostra como criar uma preferência de pagamento usando o SDK do Mercado Pago em C#. Ele configura um item com título, quantidade, moeda e preço unitário, e cria a preferência de forma assíncrona.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-preferences.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Cria o objeto de request da preference\nvar request = new PreferenceRequest\n{\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"Meu produto\",\n            Quantity = 1,\n            CurrencyId = \"ARS\",\n            UnitPrice = 75.56m,\n        },\n    },\n};\n\n// Cria a preferência usando o client\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Consulting Chargeback by Payment ID using Mercado Pago API (cURL)\nDESCRIPTION: This snippet shows how to retrieve chargeback information using the payment ID. It sends a GET request to the Mercado Pago API endpoint for searching chargebacks.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/chargebacks-management/manage-chargeback.en.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/chargebacks/search?payment_id={payment_id}' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{access_token}}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Saved Cards from Customer Account in Multiple Languages\nDESCRIPTION: Code examples showing how to retrieve a customer's saved cards using Mercado Pago's API across different programming languages. This is the first step in implementing a payment flow with saved cards.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/receive-payments-with-saved-cards.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $customer_client = new CustomerClient();\n  $cards = $client->list(\"customer_id\");\n  echo implode ($cards);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerCard = new CustomerCard(client);\n\ncustomerCard.list({ customerId: '<CUSTOMER_UD>' }).then(console.log).catch(console.log);\n```\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nCustomerClient customerClient = new CustomerClient();\n\nCustomer customer = customerClient.get(\"247711297-jxOV430go9fx2e\");\ncustomerClient.listCards(customer.getId());\n```\n\nLANGUAGE: ruby\nCODE:\n```\ncards_response = sdk.card.list(customer_id)\ncards = cards_response[:response]\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar customerClient = new CustomerClient();\nResourcesList<CustomerCard> customerCards = await customerClient.ListCardsAsync(\"CUSTOMER_ID\");\n```\n\nLANGUAGE: python\nCODE:\n```\ncards_response = sdk.card().list_all(customer_id)\ncards = cards_response[\"response\"]\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/customercard\"\n)\n\nfunc main() {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := customercard.NewClient(cfg)\n\n\tresources, err := client.List(context.Background(), \"<CUSTOMER_ID>\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfor _, v := range resources {\n\t\tfmt.Println(v)\n\t}\n}\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n'https://api.mercadopago.com/v1/customers/CUSTOMER_ID/cards' \\\n```\n\n----------------------------------------\n\nTITLE: Complete Python Implementation\nDESCRIPTION: Partial Python implementation for validating Mercado Pago webhook notifications using HMAC\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.es.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport hashlib\nimport hmac\nimport urllib.parse\n\n# Obtain the x-signature value from the header\nxSignature = request.headers.get(\"x-signature\")\nxRequestId = request.headers.get(\"x-request-id\")\n\n# Obtain Query params related to the request URL\nqueryParams = urllib.parse.parse_qs(request.url.query)\n\n# Extract the \"data.id\" from the query params\ndataID = queryParams.get(\"data.id\", [\"\"])[0]\n```\n\n----------------------------------------\n\nTITLE: Signing HTTP Request with Ed25519 in Go\nDESCRIPTION: This Go code snippet demonstrates how to read a private key from a file, sign a request body using the Ed25519 algorithm, encode the signature to base64, and add it to the 'x-signature' header of an HTTP request. It uses the 'crypto/ed25519', 'encoding/base64', 'fmt', 'io/ioutil', and 'net/http' packages.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/encryption.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n    \"bytes\"\n    \"crypto/ed25519\"\n    \"encoding/base64\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n)\n\nfunc main() {\n    // Path to the file storing the private key\n    privateKeyFile := \"private.key\"\n\n    // Read the private key from the file\n    privateKeyBytes, err := ioutil.ReadFile(privateKeyFile)\n    if err != nil {\n        fmt.Println(\"Error reading private key:\", err)\n        return\n    }\n\n    // Convert the private key bytes to a PrivateKey\n    privateKey := ed25519.PrivateKey(privateKeyBytes)\n\n    // Define your request body\n    requestBody := []byte(`{\"key\": \"value\"}`)\n\n    // Sign the request body with the private key\n    signature := ed25519.Sign(privateKey, requestBody)\n\n    // Encode the signature to base64\n    signatureBase64 := base64.StdEncoding.EncodeToString(signature)\n\n    // Create a new HTTP request\n    req, err := http.NewRequest(\"POST\", \"https://example.com/api/endpoint\", bytes.NewBuffer(requestBody))\n    if err != nil {\n        fmt.Println(\"Error creating request:\", err)\n        return\n    }\n\n    // Add the x-signature header with the base64 encoded signature\n    req.Header.Set(\"x-signature\", signatureBase64)\n\n    // Send the request\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        fmt.Println(\"Error sending request:\", err)\n        return\n    }\n    defer resp.Body.Close()\n\n    // Read the response body\n    responseBody, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        fmt.Println(\"Error reading response body:\", err)\n        return\n    }\n\n    // Print the response body\n    fmt.Println(\"Response:\", string(responseBody))\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Supplier Payment\nDESCRIPTION: API request example for creating a supplier payment with concept_id.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/money-transfer.en.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n$ curl https://api.mercadopago.com/v1/payments \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Cache-Control: no-cache' \\\n  -H 'Authorization: Bearer ACCESS_TOKEN' \\\n  -d '\n  {\n\t\"transaction_amount\": 100,\n\t\"operation_type\": \"money_transfer\",\n\t\"concept_id\": \"supply\",\n\t\"description\": \"Title of what you are paying for\",\n\t\"installments\": 1,\n\t\"marketplace\": \"NONE\",\n\t\"payment_method_id\": \"account_money\",\n\t\"collector\": {\n\t\t\"id\": \"399606359\"\n\t},\n\t\"external_reference\": \"Reference_1234\",\n\t\"notification_url\": \"https://www.your-site.com/webhooks\",\n}'\n```\n\n----------------------------------------\n\nTITLE: Opening URL with SFSafariViewController in UIKit\nDESCRIPTION: This UIKit code snippet illustrates how to present a SFSafariViewController when a button is tapped. It sets up a UIButton in a view, configures its appearance, and attaches an action to open the Safari view controller with the specified URL.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/swift.en.md#2025-04-18_snippet_2\n\nLANGUAGE: UIKit\nCODE:\n```\nimport SafariServices\nimport UIKit\n\nclass ViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        let button = UIButton()\n        button.setTitle(\"Open Preference\", for: .normal)\n        button.backgroundColor = .systemBlue\n        view.addSubview(button)\n        button.frame = CGRect(x: 100, y: 100, width: 200, height: 50)\n        button.layer.cornerRadius = 25\n        button.addTarget(self, action: #selector(openSafariViewController)  , for: .touchDown)\n    }\n    \n    @objc func openSafariViewController(_ sender: Any) {\n        if let url = URL(string: \"YOUR-URL-PREFERENCE\") {\n            let safariViewController = SFSafariViewController(url: url)\n            present(safariViewController, animated: true, completion: nil)\n        }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Integrator and Platform IDs in Ruby SDK\nDESCRIPTION: Code for setting platform and integrator identification in Mercado Pago Ruby SDK. Creates request options with platform and integrator IDs and initializes the SDK with these options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/metrics/integration-metrics.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequest_options = Mercadopago::RequestOptions.new()\nrequest_options.platform_id = 'PLATFORM_ID'\nrequest_options.integrator_id = 'INTEGRATOR_ID'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN', request_options: request_options)\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with 3DS in Python\nDESCRIPTION: This Python code snippet demonstrates how to create a payment with 3DS enabled using the Mercado Pago SDK. It initializes the SDK, sets up the payment data with `three_d_secure_mode` as 'optional', and then uses the SDK to create the payment. Requires the Mercado Pago Python SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-bigmerchants.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"<ENV_ACCESS_TOKEN>\")\npayment_data = {\n    \"transaction_amount\": <TRANSACTION_AMOUNT>,\n    \"token\": \"<CARD_TOKEN>\",\n    \"description\": \"<DESCRIPTION>\",\n    \"installments\": <INSTALLMENTS_NUMBER>,\n    \"payer\": {\n        \"email\": \"<BUYER_EMAIL>\",\n    },\n    \"three_d_secure_mode\": \"optional\"\n}\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Partial Refund with Mercado Pago SDK\nDESCRIPTION: Method to create a partial refund for a payment by configuring the SDK and saving a new refund object. Requires access token and payment ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/refunds.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMercadoPago.SDK.configure(\"YOUR_ACCESS_TOKEN\");\n\nRefund refund = new Refund();\nrefund.setPaymentId(\"payment_id\");\nrefund.save();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Payment Methods with cURL\nDESCRIPTION: Direct API request to obtain a list of all available payment methods using cURL. This implementation sends a GET request to the Mercado Pago API endpoint with your access token for authorization.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.es.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/payment_methods' \\\n```\n\n----------------------------------------\n\nTITLE: Sending Payment Data - Mercado Pago API - curl\nDESCRIPTION: This curl command sends a payment request to the Mercado Pago API for gambling transactions. It includes headers for authorization and idempotency, and a JSON payload with payment details, items, and buyer information. It requires an access token and the buyer's identification data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/gambling.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}}' \\\n--data-raw '{\\\n    \"transaction_amount\": 150.00,\\\n    \"installments\": 1,\\\n    \"statement_descriptor\": \"LOJA 123\",\\\n    \"capture\": true,\\\n    \"binary_mode\": false,\\\n    \"sponsor_id\": null,\\\n    \"application_fee\": null,\\\n    \"payment_method_id\": \"debvisa\",\\\n    \"token\": \"{{card_token_id}}\",\\\n    \"external_reference\": \"Ticket01\",\\\n    \"description\": \"Lottery\",\\\n    \"notification_url\": \"{{notification_url}}\",\\\n    \"metadata\": {\\\n        \"order_number\": \"order_01\"\\\n    },\\\n    \"payer\": {\\\n        \"email\": \"test_user_123456789@testuser.com\",\\\n        \"identification\": {\\\n            \"type\": \"CPF\",\\\n            \"number\": \"12345678909\"\\\n        }\\\n    },\\\n    \"additional_info\": {\\\n        \"items\": [\\\n            {\\\n                \"id\": \"1234\",\\\n                \"title\": \"Serviço\",\\\n                \"warranty\": true,\\\n                \"category_id\": \"lottery\",\\\n                \"quantity\": 1,\\\n                \"unit_price\": 150\\\n            }\\\n        ],\\\n        \"payer\": {\\\n            \"first_name\": \"Nome\",\\\n            \"last_name\": \"Sobrenome\",\\\n            \"is_prime_user\": true,\\\n            \"is_first_purchase_online\": true,\\\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\\\n            \"phone\": {\\\n                \"area_code\": \"11\",\\\n                \"number\": \"987654321\"\\\n            },\\\n            \"address\": {\\\n                \"zip_code\": \"206233-2002\",\\\n                \"street_name\": \"Av. das Nações Unidas\",\\\n                \"street_number\": \"230032\"\\\n            },\\\n            \"authentication_type\": \"Facebook\",\\\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\\\n        }\\\n    }\\\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Card Token with Mercado Pago SDK V2\nDESCRIPTION: In the updated V2 version, the createCardToken method returns a promise and requires an object with cardholder details. This asynchronous method improves error handling and integrates seamlessly with modern JavaScript features such as async/await.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.en.md#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nasync function createCardToken(){\n    const token = await mp.fields.createCardToken({\n        cardholderName,\n        identificationType,\n        identificationNumber,\n    });\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Back URLs and Auto Return in Preference - PHP\nDESCRIPTION: This PHP snippet demonstrates how to set the `back_urls` attribute to define redirection URLs for success, failure, and pending payment statuses. It also shows how to set the `auto_return` attribute to 'approved' for automatic redirection upon successful payments. Requires the MercadoPago SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$preference = new MercadoPago\\Preference();\n//...\n$preference->back_urls = array(\n    \"success\" => \"https://www.seu-site/success\",\n    \"failure\" => \"http://www.seu-site/failure\",\n    \"pending\" => \"http://www.seu-site/pending\"\n);\n$preference->auto_return = \"approved\";\n// ...\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Settlement Report Configuration - Node.js Implementation\nDESCRIPTION: Node.js implementation using the request library to create a new settlement report configuration via MercadoPago's API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.es.md#2025-04-18_snippet_8\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar dataString = '{\n            \"file_name_prefix\": \"settlement-report-USER_ID\",\n            \"show_fee_prevision\": false,\n            \"show_chargeback_cancel\": true,\n            \"coupon_detailed\": true,\n            \"include_withdraw\": true,\n            \"shipping_detail\": true,\n            \"refund_detailed\": true,\n            \"display_timezone\": \"GMT-04\",\n            \"notification_email_list\": [\n                \"example@email.com\",\n                \"john@example.com\"\n            ],\n            \"frequency\": {\n                \"hour\": 0,\n                \"type\": \"monthly\",\n                \"value\": 1\n            },\n            \"columns\": [\n                {\n                    \"key\": \"TRANSACTION_DATE\"\n                },\n                {\n                    \"key\": \"SOURCE_ID\"\n                },\n                {\n                    \"key\": \"EXTERNAL_REFERENCE\"\n                }\n            ]\n    }';\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report/config',\n    method: 'POST',\n    headers: headers,\n    body: dataString\n};\n\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\n\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirection URLs in MercadoPago Preference with Python\nDESCRIPTION: This Python snippet shows how to add back URLs and auto-return settings to a MercadoPago preference. It defines URLs for different payment outcomes (success, failure, pending) and enables automatic redirection for approved payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_26\n\nLANGUAGE: python\nCODE:\n```\npreference_data = {\n    \"back_urls\": {\n        \"success\": \"https://www.tu-sitio/success\",\n        \"failure\": \"https://www.tu-sitio/failure\",\n        \"pending\": \"https://www.tu-sitio/pendings\"\n    },\n    \"auto_return\": \"approved\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Methods with Java SDK\nDESCRIPTION: This Java snippet initializes the Mercado Pago SDK with an access token and retrieves a list of payment methods using the `PaymentMethodClient` class. The `MercadoPagoConfig.setAccessToken()` method sets the access token. A `PaymentMethodClient` instance is created, and its `list()` method is called to retrieve the payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/consult-payment-methods.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n \nPaymentMethodClient client = new PaymentMethodClient();\nclient.list();\n```\n\n----------------------------------------\n\nTITLE: Creating Settlement Report Configuration via API\nDESCRIPTION: Makes a POST request to create new settlement report configuration settings. Allows specification of file naming, report details, and scheduling preferences. Returns the created configuration upon success.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/config' \\\n    -d '{\n            \"file_name_prefix\": \"bank-report-USER_ID\",\n            \"include_withdrawal_at_end\": false,\n            \"detailed\": true,\n            \"execute_after_withdrawal\": true,\n            \"extended\": true,\n            \"frequency\": {\n                \"hour\": 0,\n                \"type\": \"monthly\",\n                \"value\": 1\n            }\n    }'\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$data = '{\n            \"file_name_prefix\": \"settlement-report-USER_ID\",\n            \"show_fee_prevision\": false,\n            \"show_chargeback_cancel\": true,\n            \"detailed\": true,\n            \"coupon_detailed\": true,\n            \"shipping_detail\": true,\n            \"refund_detailed\": true,\n            \"extended\": false,\n            \"frequency\": {\n                \"hour\": 0,\n                \"type\": \"monthly\",\n                \"value\": 1\n            }\n        }';\n$response = Requests::post('https://api.mercadopago.com/v1/account/settlement_report/config', $headers, $data);\n```\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report/config\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"POST\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nconnection.setDoOutput(true);\n\nString body = \"{\n                    \\\"file_name_prefix\\\": \\\"settlement-report-USER_ID\\\",\n                    \\\"show_fee_prevision\\\": false,\n                    \\\"show_chargeback_cancel\\\": true,\n                    \\\"detailed\\\": true,\n                    \\\"coupon_detailed\\\": true,\n                    \\\"shipping_detail\\\": true,\n                    \\\"refund_detailed\\\": true,\n                    \\\"extended\\\": false,\n                    \\\"frequency\\\": {\n                        \\\"hour\\\": 0,\n                        \\\"type\\\": \\\"monthly\\\",\n                        \\\"value\\\": 1\n                    }\n                }\";\n\ntry(OutputStream os = connection.getOutputStream()) {\n    byte[] input = body.getBytes(\"utf-8\");\n    os.write(input, 0, input.length);\n}\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\ndata = '{  \n            \"file_name_prefix\": \"settlement-report-USER_ID\",\n            \"show_fee_prevision\": false,\n            \"show_chargeback_cancel\": true,\n            \"detailed\": true,\n            \"coupon_detailed\": true,\n            \"shipping_detail\": true,\n            \"refund_detailed\": true,\n            \"extended\": false,\n            \"frequency\": {\n                \"hour\": 0,\n                \"type\": \"monthly\",\n                \"value\": 1\n            }\n        }'\n\nresponse = requests.post('https://api.mercadopago.com/v1/account/settlement_report/config', headers=headers, data=data)\n```\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar dataString = '{\n            \"file_name_prefix\": \"settlement-report-USER_ID\",\n            \"show_fee_prevision\": false,\n            \"show_chargeback_cancel\": true,\n            \"detailed\": true,\n            \"coupon_detailed\": true,\n            \"shipping_detail\": true,\n            \"refund_detailed\": true,\n            \"extended\": false,\n            \"frequency\": {\n                \"hour\": 0,\n                \"type\": \"monthly\",\n                \"value\": 1\n            }\n    }';\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report/config',\n    method: 'POST',\n    headers: headers,\n    body: dataString\n};\n\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\n\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with PHP\nDESCRIPTION: This PHP snippet creates a preference object using the Mercado Pago SDK. It defines a single item with a title, quantity, and unit price and uses the `PreferenceClient` to create the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.pt.md#2025-04-18_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$client = new PreferenceClient();\n$preference = $client->create([\n  \"items\"=> array(\n    array(\n      \"title\" => \"Meu produto\",\n      \"quantity\" => 1,\n      \"unit_price\" => 25\n    )\n  )\n]);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating a Subscription Plan with Curl\nDESCRIPTION: This code snippet demonstrates how to create a subscription plan using a curl command with the Mercado Pago API.  It requires a valid access token for authorization and sends a JSON payload with details like reason, auto-recurring settings (frequency, billing day), transaction amount, currency, allowed payment methods, and a back URL. The API endpoint for creating a plan is `/preapproval_plan`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/subscriptions-associated-plan.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n\n      'https://api.mercadopago.com/preapproval_plan' \\\n      -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n      -H 'Content-Type: application/json' \\\n      -d '{\n  \"reason\": \"Yoga classes\",\n  \"auto_recurring\": {\n    \"frequency\": 1,\n    \"frequency_type\": \"months\",\n    \"repetitions\": 12,\n    \"billing_day\": 10,\n    \"billing_day_proportional\": true,\n    \"free_trial\": {\n      \"frequency\": 1,\n      \"frequency_type\": \"months\"\n    },\n    \"transaction_amount\": 10,\n    \"currency_id\": \"ARS\"\n  },\n  \"payment_methods_allowed\": {\n    \"payment_types\": [\n      {}\n    ],\n    \"payment_methods\": [\n      {}\n    ]\n  },\n  \"back_url\": \"https://www.yoursite.com\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Adding New Cards to a Customer in Mercado Pago with C#\nDESCRIPTION: C# implementation for adding a new card to a Mercado Pago customer. Retrieves a customer and creates a card association with the specified token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.es.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar customerClient = new CustomerClient();\nCustomer customer = await customerClient.GetAsync(\"247711297-jxOV430go9fx2e\");\n\nvar cardRequest = new CustomerCardCreateRequest\n{\n    Token = \"9b2d63e00d66a8c721607214cedaecda\",\n};\nCustomerCard card = await customerClient.CreateCardAsync(customer.Id, cardRequest);\n\nConsole.WriteLine(card.Id);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with 3DS Optional Mode - Node.js\nDESCRIPTION: This Node.js snippet demonstrates how to create a payment with `three_d_secure_mode` set to \"optional\". Mercado Pago decides if a 3DS challenge is needed based on risk. It utilizes the Mercado Pago Node.js SDK and requires an access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.es.md#2025-04-18_snippet_3\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, Payment } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ENV_ACCESS_TOKEN>' });\nconst payment = new Payment(client);\n\nconst body = {\n  transaction_amount: <TRANSACTION_AMOUNT>,\n  token: '<CARD_TOKEN>',\n  description:  '<DESCRIPTION>',\n  installments: <INSTALLMENTS_NUMBER>,\n  payment_method_id: '<PAYMENT_METHOD_ID>',\n  issuer_id: '<ISSUER_ID>',\n  payer: {\n    email: '<BUYER_EMAIL>',\n  },\n  three_d_secure_mode: 'optional'\n}\npayment.create({ body: body, requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' } }).then(console.log).catch(console.log);\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Request with 3DS in C#\nDESCRIPTION: In this C# code snippet, the Mercado Pago SDK is used to create a payment request while integrating 3DS authentication. It outlines how to set the access token and specify parameters for the transaction and payer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.en.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\nMercadoPagoConfig.AccessToken = \"<ENV_ACCESS_TOKEN>\";\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = <TRANSACTION_AMOUNT>,\n    Token = \"<CARD_TOKEN>\",\n    Description = \"<DESCRIPTION>\",\n    Installments = <INSTALLLMENTS_NUMBER>,\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"<BUYER_EMAIL>\",\n    },\n    ThreeDSecureMode = \"optional\",\n};\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Creating Preference Object with cURL\nDESCRIPTION: This cURL command creates a preference object by sending a POST request to the Mercado Pago API. It sets the `purpose` to \"wallet_purchase\", enabling only logged-in payments.  It includes an item with a title, quantity, and unit price. The `Authorization` header requires a valid access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-startup.en.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n'https://api.mercadopago.com/checkout/preferences' \\\n-H 'Content-Type: application/json' \\\n-H 'cache-control: no-cache' \\\n-H 'Authorization: Bearer **PROD_ACCESS_TOKEN**' \\\n-d '{\n  \"purpose\": \"wallet_purchase\",\n  \"items\": [\n      {\n          \"title\": \"My product\",\n          \"quantity\": 1,\n          \"unit_price\": 75.76\n      }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Preference Configuration JSON (MCO)\nDESCRIPTION: This JSON snippet defines a Mercado Pago preference configuration for Colombia (MCO). It includes item details, payer information with a date of creation, back URLs, payment method exclusions, shipment details, taxes, and expiration settings. It provides specific configurations relevant to the Colombian market.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"items\": [\n\t\t{\n\t\t\t\"id\": \"item-ID-1234\",\n\t\t\t\"title\": \"Title of what you are paying for. It will be displayed in the payment process.\",\n\t\t\t\"currency_id\": \"COP\",\n\t\t\t\"picture_url\": \"https://www.mercadopago.com/org-img/MP3/home/logomp3.gif\",\n\t\t\t\"description\": \"Item description\",\n\t\t\t\"category_id\": \"art\", // Available categories at https://api.mercadopago.com/item_categories\n\t\t\t\"quantity\": 1,\n\t\t\t\"unit_price\": 100\n\t\t}\n\t],\n\t\"payer\": {\n\t\t\"name\": \"user-name\",\n\t\t\"surname\": \"user-surname\",\n\t\t\"email\": \"user@email.com\",\n\t\t\"date_created\": \"2015-06-02T12:58:41.425-04:00\",\n\t\t\"phone\": {\n\t\t\t\"area_code\": \"11\",\n\t\t\t\"number\": \"4444-4444\"\n\t\t},\n\t\t\"identification\": {\n\t\t\t\"type\": \"RUT\", // Available ID types at https://api.mercadopago.com/v1/identification_types\n\t\t\t\"number\": \"12345678\"\n\t\t},\n\t\t\"address\": {\n\t\t\t\"street_name\": \"Street\",\n\t\t\t\"street_number\": 123,\n\t\t\t\"zip_code\": \"5700\"\n\t\t}\n\t},\n\t\"back_urls\": {\n\t\t\"success\": \"https://www.success.com\",\n\t\t\"failure\": \"http://www.failure.com\",\n\t\t\"pending\": \"http://www.pending.com\"\n\t},\n\t\"auto_return\": \"approved\",\n\t\"payment_methods\": {\n\t\t\"excluded_payment_methods\": [\n\t\t\t{\n\t\t\t\t\"id\": \"master\"\n\t\t\t}\n\t\t],\n\t\t\"excluded_payment_types\": [\n\t\t\t{\n\t\t\t\t\"id\": \"ticket\"\n\t\t\t}\n\t\t],\n\t\t\"installments\": 12,\n\t\t\"default_payment_method_id\": null,\n\t\t\"default_installments\": null\n\t},\n\t\"shipments\": {\n\t\t\"receiver_address\": {\n\t\t\t\"zip_code\": \"5700\",\n\t\t\t\"street_number\": 123,\n\t\t\t\"street_name\": \"Street\",\n\t\t\t\"floor\": 4,\n\t\t\t\"apartment\": \"C\"\n\t\t}\n\t},\n\t\"notification_url\": \"https://www.your-site.com/ipn\",\n\t\"statement_descriptor\": \"MINEGOCIO\",\n\t\"external_reference\": \"Reference_1234\",\n\t\"expires\": true,\n\t\"expiration_date_from\": \"2016-02-01T12:00:00.000-04:00\",\n\t\"expiration_date_to\": \"2016-02-28T12:00:00.000-04:00\",\n\t\"taxes\": [\n\t\t{\n\t\t\t\"type\": \"IVA\",\n\t\t\t\"value\": 16\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Deactivating Automatic Report Generation using PHP\nDESCRIPTION: This PHP code snippet uses the Requests library to send a DELETE request to deactivate the report generation through the Mercado Pago API. It sets the appropriate headers for authorization.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.es.md#2025-04-18_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\\ninclude('vendor/rmccue/requests/library/Requests.php');\\nRequests::register_autoloader();\\n$headers = array(\\n    'accept' => 'application/json',\\n    'content-type' => 'application/json',\\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\\n);\\n$response = Requests::delete('https://api.mercadopago.com/v1/account/release_report/schedule', $headers);\n```\n\n----------------------------------------\n\nTITLE: Getting Payment Methods with MercadoPago SDK in Node.js\nDESCRIPTION: This code demonstrates how to initialize the MercadoPago client with an access token and use the PaymentMethod module to fetch all available payment methods. The result is logged to the console, and any errors are caught and logged.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/payment-methods.en.md#2025-04-18_snippet_0\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\n\nconst paymentMethod = new PaymentMethod(client);\n\npaymentMethod.get().then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Ruby SDK\nDESCRIPTION: Ruby implementation for processing payments with Mercado Pago SDK. It sets up custom headers for idempotency, prepares payment data with transaction details and payer information, and then creates the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_data = {\n transaction_amount: params[:transactionAmount].to_f,\n token: params[:token],\n description: params[:description],\n installments: params[:installments].to_i,\n payment_method_id: params[:paymentMethodId],\n payer: {\n   email: params[:email],\n   identification: {\n     type: params[:identificationType],\n     number: params[:identificationNumber]\n   }\n }\n}\n \npayment_response = sdk.payment.create(payment_data, custom_request_options)\npayment = payment_response[:response]\n \nputs payment\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Reserved Amount in MercadoPago - Java\nDESCRIPTION: This Java sample captures partial funds reserved on a MercadoPago transaction through the SDK. It requires setting up a payment client, configuring access token, and executing a capture operation with the desired amount, assuming that 'mercadopago.sdk' is available.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/capture-authorized-payment.en.md#2025-04-18_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n\nLong paymentId = 123456789L;\n\nPaymentClient client = new PaymentClient();\nclient.capture(paymentId, new BigDecimal(\"75\"));\n```\n\n----------------------------------------\n\nTITLE: Executing POST Request for Subscription in MercadoPago with cURL\nDESCRIPTION: This code snippet demonstrates how to send a POST request to the MercadoPago API to create a subscription with an authorized payment. The request includes details such as frequency, transaction amount, and payer information. Dependencies include a valid MercadoPago API token. The request expects the subscription attributes in JSON format and returns a confirmation of the subscription with its status set to 'authorized'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/subscription-no-associated-plan-authorized-payments.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n      'https://api.mercadopago.com/preapproval'\\\n       -H 'Content-Type: application/json' \\\n       -H 'Authorization: Bearer TEST-2151****' \\ \n       -H 'X-scope: stage' \\\n       --data-raw '{\n            \"back_url\": \"https://www.google.com\",\n            \"reason\": \"Test Subscription\",\n            \"auto_recurring\": {\n                \"frequency\": 1,\n                \"frequency_type\": \"months\",\n                \"start_date\": \"2020-06-02T13:07:14.260Z\",\n                \"end_date\": \"2022-07-20T15:59:52.581Z\",\n                \"transaction_amount\": 10,\n                \"currency_id\": \"ARS\"\n            },\n            \"payer_email\": \"test_user+1020927396@testuser.com\",\n            \"card_token_id\": \"{{CARD_TOKEN}}\",\n            \"status\": \"authorized\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Setting Integrator and Platform IDs in C# SDK\nDESCRIPTION: Code for setting platform and integrator identification in Mercado Pago C# SDK. Replace PLATFORM_ID and INTEGRATOR_ID with your actual values to identify your integration and work with metrics.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/metrics/integration-metrics.en.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.PlatformId = \"PLATFORM_ID\";\nMercadoPagoConfig.IntegratorId = \"INTEGRATOR_ID\";\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment Value with PHP\nDESCRIPTION: This code demonstrates how to capture a partial amount from a previously authorized payment using PHP. It specifies the transaction_amount to capture only a portion of the reserved amount.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n  MercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n  $payment = MercadoPago\\Payment::find_by_id($payment_id);\n  $payment->transaction_amount = 75;\n  $payment->capture = true;\n  $payment->update();\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Request with 3DS in Ruby\nDESCRIPTION: This Ruby snippet demonstrates the use of the Mercado Pago SDK to create a payment request with 3DS authentication. It sets up the payment request parameters including transaction amount and payer email.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.en.md#2025-04-18_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('<ENV_ACCESS_TOKEN>')\npayment_request = {\n  token: '<CARD_TOKEN>',\n  installments: <INSTALLLMENTS_NUMBER>,\n  transaction_amount: <TRANSACTION_AMOUNT>,\n  description: '<DESCRIPTION>',\n  payer: {\n    email: '<BUYER_EMAIL>',\n  },\n  three_d_secure_mode: 'optional'\n}\npayment_response = sdk.payment.create(payment_request)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preferences with Platform ID in Mercado Pago Checkout Pro\nDESCRIPTION: This snippet demonstrates how to create a payment preference using Mercado Pago's Checkout Pro API with a platform ID. The request includes authentication headers, platform identification, and a complete payment preference configuration with items, back URLs, notification URLs, and shipping information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/pi-transactions-via-checkout-pro.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadolibre.com/checkout/preferences' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{ACCESS_TOKEN}}' \\\n--header 'x-platform-id: {{PLATFORM_ID provided by the Partners team}}' \\\n--data-raw '{\n    \"auto_return\": \"all\",\n    \"back_urls\": {\n        \"success\": \"https://httpbin.org/get?status=pago\",\n        \"failure\": \"https://httpbin.org/get?status=recusado\",\n        \"pending\": \"https://httpbin.org/get?status=pendente\"\n    },\n    \"redirect_urls\": {\n        \"failure\": \"https://httpbin.org/get?status=redirectrecusado\",\n        \"pending\": \"https://httpbin.org/get?status=redirectpendente\",\n        \"success\": \"https://httpbin.org/get?status=redirectsuccess\"\n    },\n    \"notification_url\": \"https://webhook.site/d69d1102-b677-44f6-ae6d-104a7e813b93\",\n    \"expires\": false,\n    \"external_reference\": \"Order - Test\",\n    \"date_of_expiration\": \"2022-04-01T22:59:00.000-04:00\",\n    \"sponsor_id\": <CUST_ID>,\n    \"items\": [\n        {\n            \"id\": \"1234\",\n            \"currency_id\": \"Currency. Example: BRL\",\n            \"title\": \"Produto\",\n            \"category_id\": \"Category. Example: entertainment\",\n            \"quantity\": 1,\n            \"unit_price\": 4\n        },\n        {\n            \"id\": \"1234\",\n            \"currency_id\": \"Currency. Example: BRL\",\n            \"title\": \"Freight\",\n            \"category_id\": \"Category. Example: entertainment\",\n            \"quantity\": 1,\n            \"unit_price\": 1\n        }\n    ],\n    \"payment_methods\": {\n        \"default_installments\": null,\n        \"default_payment_method_id\": null,\n        \"excluded_payment_types\": [],\n        \"installments\": null\n    },\n    \"shipments\": {\n        \"receiver_address\": {\n            \"zip_code\": \"Zip code. Example: 95630000\",\n            \"street_name\": \"Street name. Example: Av. das Nações Unidas\",\n            \"street_number\": \"Street number. Example: 3003\"\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing HMAC Verification for Mercado Pago Webhooks in Go\nDESCRIPTION: This Go code implements a HTTP handler for verifying Mercado Pago webhook notifications using HMAC. It extracts necessary information from the request headers and query parameters, generates the HMAC signature, and compares it with the provided hash.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.en.md#2025-04-18_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"crypto/hmac\"\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// Obtain the x-signature value from the header\n\t\txSignature := r.Header.Get(\"x-signature\")\n\t\txRequestId := r.Header.Get(\"x-request-id\")\n\n\t\t// Obtain Query params related to the request URL\n\t\tqueryParams := r.URL.Query()\n\n\t\t// Extract the \"data.id\" from the query params\n\t\tdataID := queryParams.Get(\"data.id\")\n\n\t\t// Separating the x-signature into parts\n\t\tparts := strings.Split(xSignature, \",\")\n\n\t\t// Initializing variables to store ts and hash\n\t\tvar ts, hash string\n\n\t\t// Iterate over the values to obtain ts and v1\n\t\tfor _, part := range parts {\n\t\t\t// Split each part into key and value\n\t\t\tkeyValue := strings.SplitN(part, \"=\", 2)\n\t\t\tif len(keyValue) == 2 {\n\t\t\t\tkey := strings.TrimSpace(keyValue[0])\n\t\t\t\tvalue := strings.TrimSpace(keyValue[1])\n\t\t\t\tif key == \"ts\" {\n\t\t\t\t\tts = value\n\t\t\t\t} else if key == \"v1\" {\n\t\t\t\t\thash = value\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Get secret key/token for specific user/application from Mercadopago developers site\n\t\tsecret := \"your_secret_key_here\"\n\n\t\t// Generate the manifest string\n\t\tmanifest := fmt.Sprintf(\"id:%v;request-id:%v;ts:%v;\", dataID, xRequestId, ts)\n\n\t\t// Create an HMAC signature defining the hash type and the key as a byte array\n\t\thmac := hmac.New(sha256.New, []byte(secret))\n\t\thmac.Write([]byte(manifest))\n\n\t\t// Obtain the hash result as a hexadecimal string\n\t\tsha := hex.EncodeToString(hmac.Sum(nil))\n\nif sha == hash {\n    // HMAC verification passed\n    fmt.Println(\"HMAC verification passed\")\n} else {\n    // HMAC verification failed\n    fmt.Println(\"HMAC verification failed\")\n}\n\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Merchant Order with Mercado Pago API in Java\nDESCRIPTION: This code snippet demonstrates how to update an existing merchant order using the Mercado Pago Java SDK. It initializes the MerchantOrderClient, specifies the order ID, creates a list of items, and uses the MerchantOrderUpdateRequest to set the updated details, such as external reference, payer information, and site ID. Finally, it calls the update method of the MerchantOrderClient with the order ID and the update request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/orders.es.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n```java\n\nMerchantOrderClient client = new MerchantOrderClient();\n\nLong orderId = 123456789L;\n\nList<MerchantOrderItemRequest> items = new ArrayList<>();\n\nMerchantOrderItemRequest item =\n   MerchantOrderItemRequest.builder()\n       .id(\"item id\")\n       .categoryId(\"item category\")\n       .currencyId(\"BRL\")\n       .description(\"item description\")\n       .pictureUrl(\"item picture\")\n       .quantity(1)\n       .unitPrice(new BigDecimal(\"5\"))\n       .title(\"item title\")\n       .build();\n\nitems.add(item);\n\nMerchantOrderUpdateRequest updateRequest =\n   MerchantOrderUpdateRequest.builder()\n       .externalReference(\"default\")\n       .payer(MerchantOrderPayerRequest.builder().id(123L).nickname(\"JOHN\").build())\n       .siteId(\"MLA\")\n       .items(items)\n       .build();\n\nclient.update(orderId, updateRequest);\n```\n```\n\n----------------------------------------\n\nTITLE: Capturando Información del Dispositivo en Java para Android\nDESCRIPTION: Métodos disponibles en Java para obtener la información del dispositivo en diferentes formatos: objeto Device, Map o string JSON.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.es.md#2025-04-18_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nDevice device = DeviceSDK.getInstance().getInfo() // devuelve un objeto Device, serializable\nMap deviceMap = DeviceSDK.getInstance().getInfoAsMap()  // devuelve un Map<String, Object>\nString jsonString = DeviceSDK.getInstance().getInfoAsJsonString() // devuelve un String de tipo Json\n```\n\n----------------------------------------\n\nTITLE: Payment Methods Customization with React\nDESCRIPTION: This code snippet shows how to customize payment methods in React. It demonstrates how to exclude payment methods and payment types, set the maximum installments, and configure interest-free installments. The `customization` object is used to configure the payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/brand-brick/payment-methods.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n    paymentMethods: {\n        excludedPaymentMethods: [\"master\"], // optional string[]. default []. options [\"master\", \"visa\", \"amex\", \"naranja\", \"maestro\", \"cabal\", \"cencosud\", \"cordobesa\", \"argencard\", \"diners\", \"tarshop\", \"cmr\", \"rapipago\", \"pagofacil\", \"mercadopago\"]\n         excludedPaymentTypes: [\"ticket\"], // optional string[]. default []. optional string[]. default []. options [\"credit_card\", \"debit_card\", \"ticket\", \"account_money\", \"mercado_credito\"]\n      maxInstallments: 12, // optional number. min 2 max 12\n      interestFreeInstallments: false, // optional boolean\n    },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Refund Accredited Payment\nDESCRIPTION: This function creates a refund for an accredited payment using the payment ID. It returns the refund operation result in JSON format.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.en.md#2025-04-18_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndef index(req, **kwargs):\n    payment_refund = sdk.refund().create(kwargs[\"id\"])\n\n    # Show result\n    return json.dumps(payment_refund[\"response\"], indent=4)\n```\n\n----------------------------------------\n\nTITLE: Configurando Data de Vencimento em C#\nDESCRIPTION: Código C# para definir a data de vencimento de um pagamento em dinheiro usando o formato ISO 8601. A data deve estar entre 1 e 30 dias a partir da emissão.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_51\n\nLANGUAGE: csharp\nCODE:\n```\n===\nA data usa o formato ISO 8601: yyyy-MM-dd'T'HH:mm:ssz\n===\n\npaymentCreateRequest.DateOfExpiration = DateTime.Parse(\"2020-05-30T23:59:59.000-04:00\");\n```\n\n----------------------------------------\n\nTITLE: Updating Payment with MercadoPago SDK in Java\nDESCRIPTION: This snippet shows how to update a payment using the MercadoPago SDK in Java. It captures the payment by ID to update its status or details as needed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/create-payments.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nPaymentClient client = new PaymentClient();\n\nLong paymentId = 123456789L;\nclient.capture(paymentId);\n```\n\n----------------------------------------\n\nTITLE: Listing All Refunds for a Payment Using Mercado Pago SDK in Java\nDESCRIPTION: This snippet provides functionality to list all refunds associated with a specific payment using the Mercado Pago SDK. The 'list' method from 'PaymentRefundClient' is utilized, requiring just the payment ID to fetch the refunds.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/refunds.en.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nPaymentRefundClient client = new PaymentRefundClient();\n\nLong paymentId = 123456789L;\nclient.list(paymentId);\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Notification Channel Check - JSON\nDESCRIPTION: This JSON object represents a sample response when checking the enabled notification channels, providing information such as an ID, creation date, update date, and enabled channels.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/notifications-pdv.en.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1234567890,\n  \"created_at\": \"0001-01-01T00:00:00Z\",\n  \"updated_at\": \"0002-02-02T00:00:00Z\",\n  \"notification_url_enabled\": true,\n  \"event_channel_devices\": [\n    \"email\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MercadoPago.js Library in HTML\nDESCRIPTION: This snippet demonstrates how to import the MercadoPago.js library into your HTML file to enable card payment functionalities. As a prerequisite, include the script source in the HTML file's body section. This sets up the environment for capturing card data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Install MercadoPago SDK via npm\nDESCRIPTION: This command installs the MercadoPago SDK using npm. This is an alternative way to include the MercadoPago library in your project, typically used in more complex JavaScript environments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n```\n\n----------------------------------------\n\nTITLE: Making a Payment API Request for Utilities Industry in cURL\nDESCRIPTION: This cURL command demonstrates how to make a POST request to the Mercado Pago payments API, including additional information specific to the utilities industry. It includes details about the transaction, payer, and additional information such as item details and payer's personal information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/utilities.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}} \\\n--data-raw '{\n    \"transaction_amount\": 150.00,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"debvisa\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Pedido01\",\n    \"description\": \"PEDIDO NOVO\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"payer\": {\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"12345678909\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"title\": \"Serviço\",\n                \"category_id\": \"service\",\n                \"quantity\": 1,\n                \"unit_price\": 150\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_prime_user\": true,\n            \"is_first_purchase_online\": true,\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"206233-2002\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"3003\"\n            },\n            \"authentication_type\": \"Facebook\",\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Handling onSubmit Callback with Additional Data in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the onSubmit callback in Payment Brick settings, including handling of the optional additionalData parameter. It shows logging the additional data and sending the collected card form data to a server.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/additional-data.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n ...,\n callbacks: {\n   onSubmit: (cardFormData, additionalData) => {\n     // callback chamado após o usuário clicar no botão de submissão dos dados\n     // o parâmetro additionalData é opcional, você pode removê-lo se quiser     \n     console.log(additionalData);\n     // exemplo de envio dos dados coletados pelo Brick para seu servidor\n     return new Promise((resolve, reject) => {\n       fetch(\"/process_payment\", {\n         method: \"POST\",\n         headers: {\n             \"Content-Type\": \"application/json\",\n         },\n         body: JSON.stringify(cardFormData)\n       })\n       .then((response) => {\n         // receber o resultado do pagamento\n         resolve();\n       })\n       .catch((error) => {\n         // lidar com a resposta de erro ao tentar criar o pagamento\n         reject();\n       })\n     });\n   },\n },\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Customer Cards with MercadoPago SDK in Ruby\nDESCRIPTION: Demonstrates how to retrieve a customer's card information using their customer ID with the MercadoPago SDK. Uses the card.list method to fetch card details and stores the response data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ruby/cards.en.md#2025-04-18_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ncards_response = sdk.card.list(customer_id)\ncards = cards_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Search Payments - API Request\nDESCRIPTION: Direct API request for searching payments with pagination parameters and bearer token authentication.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/retrieving-payments.en.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl -G -X GET \\\n-H \"accept: application/json\" \\\n-H 'Authorization: Bearer ACCESS_TOKEN' \\\n\"https://api.mercadopago.com/v1/payments/search\" \\\n-d \"status=approved\" \\\n-d \"offset=0\" \\\n-d \"limit=10\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Brick onReady Callback in React\nDESCRIPTION: Demonstrates implementing the onReady callback for a Mercado Pago Brand component in a React application, allowing custom actions when the component is ready\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/brand-brick/callbacks.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { Brand } from '@mercadopago/sdk-react';\nconst onReady = async () => {\n  /*\n    Callback chamado quando o Brick estiver pronto.\n    Aqui você pode ocultar loadings do seu site, por exemplo.\n  */\n};\n\n<Brand\n   onReady={onReady}\n/>\n```\n\n----------------------------------------\n\nTITLE: Consulting Payment Methods using PaymentMethodClient in PHP\nDESCRIPTION: This snippet demonstrates how to use the PaymentMethodClient class to retrieve a list of available payment methods. The snippet requires an initialized client instance and makes a call to the get method to obtain the payment methods. No parameters are required for this call, and it returns a list of payment method details as specified by the Mercado Pago API. Ensure to have the necessary SDK installed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/payment-methods.en.md#2025-04-18_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n  $client = new PaymentMethodClient();\n  $client->get();\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Transaction in PHP with MercadoPago SDK\nDESCRIPTION: PHP implementation for creating a payment transaction with detailed payer information, including address, identification, and contact details\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-migrate-pse.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse MercadoPago\\Client\\Payment\\PaymentClient;\nuse MercadoPago\\MercadoPagoConfig;\n\nMercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n$client = new PaymentClient();\n$payment = $client->create([\n  \"transaction_amount\" => 5000,\n  \"description\" => \"Product description\",\n  \"payment_method_id\" => \"pse\",\n  \"additional_info\" => [\n    \"ip_address\" => \"127.0.0.1\"\n  ],\n  \"transaction_details\" => [\n    \"financial_institution\" => $_POST['financialInstitution']\n  ],\n  \"callback_url\" => \"http://www.your-site.com\",\n  \"email\" => $_POST['email'],\n  \"identification\" => [\n       \"type\" => $_POST['identificationType'],\n       \"number\" => $_POST['identificationNumber']\n  ],\n  \"address\" => [\n        \"zip_code\" => $_POST['zipCode'],\n        \"street_name\": $_POST['streetName'],\n        \"street_number\": $_POST['streetNumber'],\n        \"neighborhood\": $_POST['neighborhood'],\n        \"city\": $_POST['city'],\n        \"federal_unit\": $_POST['federalUnit']\n  ],\n  \"phone\" => [\n       \"area_code\" => $_POST['phoneAreaCode'],\n       \"number\" => $_POST['phoneNumber']\n  ],\n  \"entity_type\" => \"individual\";\n]);\n\necho implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Python SDK\nDESCRIPTION: Python implementation for creating payments with Mercado Pago SDK. It initializes the SDK with an access token, sets up custom headers for idempotency, prepares payment data with transaction details, and creates the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n   \"transaction_amount\": float(request.POST.get(\"transaction_amount\")),\n   \"token\": request.POST.get(\"token\"),\n   \"description\": request.POST.get(\"description\"),\n   \"installments\": int(request.POST.get(\"installments\")),\n   \"payment_method_id\": request.POST.get(\"payment_method_id\"),\n   \"payer\": {\n       \"email\": request.POST.get(\"email\"),\n       \"identification\": {\n           \"type\": request.POST.get(\"type\"),\n           \"number\": request.POST.get(\"number\")\n       }\n   }\n}\n \npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n \nprint(payment)\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth Token with MercadoPago SDK in Node.js\nDESCRIPTION: This code snippet demonstrates how to create an OAuth token for operating an application on behalf of a provider. It initializes a MercadoPago client with an access token and timeout configuration, then uses the OAuth module to create a token using client credentials, authorization code, and a redirect URI.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/oauth.es.md#2025-04-18_snippet_0\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token', options: { timeout: 5000 } }); \n\nconst oauth = new OAuth(client);\n\noauth.create({\n\t'client_secret': 'your-client-secret',\n\t'client_id': 'your-client-id',\n\t'code': 'return-of-getAuthorizationURL-function',\n\t'redirect_uri': 'redirect-uri'\n}).then((result) => console.log(result))\n\t.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Configuring Card-Free Payment Method in WooCommerce\nDESCRIPTION: Step-by-step configuration guide for enabling Mercado Pago's credit line payment option in WooCommerce admin panel with region-specific variations\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/woocommerce/mercado-credits.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n1. Navigate to WooCommerce Payments Settings\n2. Click \"Configure\" on Card-Free Payment Option\n3. Enable payment method toggle\n4. Set checkout title\n5. Configure currency conversion\n6. Select promotional banner text\n7. Save changes\n```\n\n----------------------------------------\n\nTITLE: Fetching and Posting Cards Using MercadoPago with cURL\nDESCRIPTION: This snippet shows how to use cURL to send GET and POST requests to the Mercado Pago API for managing customer cards. It requires a valid access token for authorization. The POST request adds a new card using provided card attributes, and the GET request retrieves existing cards.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.en.md#2025-04-18_snippet_21\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n  -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n  'https://api.mercadopago.com/v1/customers/CUSTOMER_ID/cards' \\\n\ncurl -X POST \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/customers/CUSTOMER_ID/cards' \\\n    -d '{\"token\": \"9b2d63e00d66a8c721607214cedaecda\", \"issuer\": {\"id\": \"3245612\"}, \"payment_method_id\":\"debit_card\"}'\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Multiple Items - Python\nDESCRIPTION: This Python snippet demonstrates creating a Mercado Pago preference with multiple items.  It creates a dictionary containing an array of items, where each item has properties like title, quantity, and unit price, and then sends this data to the Mercado Pago SDK to create the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# Cria itens na preferência\npreference_data = {\n    \"items\": [\n        {\n            \"title\": \"Mi producto\",\n            \"quantity\": 1,\n            \"unit_price\": 75.56\n        },\n        {\n            \"title\": \"Mi producto2\",\n            \"quantity\": 2,\n            \"unit_price\": 96.56\n        }\n    ]\n}\n\n# Cria a preferência\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with wallet_purchase in Python\nDESCRIPTION: This Python code snippet creates a preference with the `wallet_purchase` purpose using the Mercado Pago Python SDK. It defines a `preference_data` dictionary containing item details and sets the `purpose` to `wallet_purchase`. This setting enforces that only logged in users can make payments. The SDK's `preference().create()` method is used to create the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-onsubmit.en.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Create an item in the preference\npreference_data = {\n  # o \"purpose\": \"wallet_purchase\", allow only logged payments\n  # to allow guest payments you can omit this property\n    \"purpose\": \"wallet_purchase\",\n    \"items\": [\n        {\n            \"title\": \"My item\",\n            \"quantity\": 1,\n            \"unit_price\": 75.76\n        }\n    ]\n}\n \npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n\n```\n\n----------------------------------------\n\nTITLE: Creating Yape Payment with Mercado Pago API\nDESCRIPTION: This code demonstrates how to create a Yape payment using Mercado Pago's API. It includes setting the access token, creating a payment client, and sending a payment request with required parameters such as token, transaction amount, description, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.es.md#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest createRequest =\n    PaymentCreateRequest.builder()\n        .description(\"Titulo del producto\")\n        .installments(1)\n        .payer(PaymentPayerRequest.builder()\n            .email(\"test_user_123@testuser.com\")\n            .build())\n        .paymentMethodId(\"yape\")\n        .token(\"ff8080814c11e237014c1ff593b57b4d\")\n        .transactionAmount(new BigDecimal(\"5000\"))\n        .build();\n\nclient.create(createRequest);\n```\n\nLANGUAGE: php\nCODE:\n```\nMercadoPagoConfig::setAccessToken(\"ENV_ACCESS_TOKEN\");\n    \n$client = new PaymentClient();\n\n$createRequest = [\n  \"description\" => \"Titulo del producto\",\n  \"installments\" => 1,\n  \"payer\" => [\n     \"email\" => \"test_user_123@testuser.com\",\n  ],\n  \"payment_method_id\" => \"yape\",\n  \"token\" => \"ff8080814c11e237014c1ff593b57b4d\",\n  \"transaction_amount\" => 5000,\n];\n\n    $client->create($createRequest, $request_options);\n```\n\nLANGUAGE: node\nCODE:\n```\nconst mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(config.access_token);\n\nvar payment = req.body;\n\nvar payment_data = {\n  token: '<ff8080814c11e237014c1ff593b57b4d>',\n  transaction_amount: 5000,\n  installments: 1,\n  description: 'Titulo del producto',\n  payment_method_id: 'yape',\n  payer: {\n    email: payment.email,\n  }\n};\n\nvar payment = mercadopago.payment.save(payment_data)\n  .then(function (response) {\n    res.status(response.status).json({\n      status: response.body.status,\n      status_detail: response.body.status_detail,\n      id: respose.body.id,\n    });\n  })\n  .catch(function (error) {\n    res.status(error.status).send(error);\n});\n\nvar payment_link = payment.transaction_details.external_resource_url;\n```\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n\t'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n\t\"description\": \"Titulo del producto\",\n\t\"installments\": 1,\n\t\"payer\": {\n\t\t\"email\": \"test_user_123@testuser.com\",\n\t},\n\t\"payment_method_id\": \"yape\",\n\t\"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n\t\"transaction_amount\": 5000\n}\n\npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n```\n\nLANGUAGE: dotnet\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\n\nvar paymentPayerRequest = new PaymentPayerRequest\n{\n    Email = \"test_user_123@testuser.com\",\n};\n\nvar request = new PaymentCreateRequest\n{\n    Description = \"Titulo del producto\",\n    Installments = 1,\n    Payer = paymentPayerRequest,\n    PaymentMethodId = \"yape\",\n    TransactionAmount = (decimal?)5000,\n    Token = \"ff8080814c11e237014c1ff593b57b4d\"\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request, requestOptions);\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_object = {\n  description: 'Titulo del producto',\n  installments: 1,\n  payer: {\n    email: 'test_user_123@testuser.com',\n  },\n  payment_method_id: 'yape',\n  token: 'ff8080814c11e237014c1ff593b57b4d',\n  transaction_amount: 5000\n}\n\npayment_response = sdk.payment.create(payment_request, custom_request_options)\npayment_response[:response]\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/payment\"\n)\n\nfunc main() {\n\taccessToken := \"ENV_ACCESS_TOKEN\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := payment.NewClient(cfg)\n\n\trequest := payment.Request{\n\t\tTransactionAmount: 5000,\n            Description: \"Titulo del producto\",\n\t\tPaymentMethodID:   \"yape\",\n\t\tPayer: &payment.PayerRequest{\n\t\t\tEmail: \"test_user_123@testuser.com\",\n\t\t},\n\t\tToken:        \"ff8080814c11e237014c1ff593b57b4d\",\n\t\tInstallments: 1,\n\t}\n\n\tresource, err := client.Create(context.Background(), request)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Authorization: Bearer <ACCESS_TOKEN>' \\\n--header 'Content-Type: application/json' \\\n--header 'x-idempotency-key: <IDEMPOTENCY_KEY>' \\\n--data-raw '{\n   \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n   \"transaction_amount\": 5000,\n   \"description\": \"Título del producto\",\n   \"installments\": 1,\n   \"payment_method_id\": \"yape\",\n   \"payer\": {\n    \"email\": \"test_user_1295925766@testuser.com\"\n   }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Pix Charge with Expiration Date\nDESCRIPTION: API request to create a simple Pix charge with debtor information and expiration date using Mercado Pago Pix API\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/pix-payments/create-charge.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request PUT 'https://pix-api.mercadopago.com/cobv/1655996626' \\\n--header 'Authorization: Bearer TOKEN' \\\n--header 'Content-Type: application/json' \\\n--cert PATH_TO_mTLS --key PATH_TO_KEY \\\n--data-raw '{\n  \"calendario\": {\n    \"dataDeVencimento\": \"2022-12-31\"\n  },\n  \"devedor\": {\n    \"cpf\": \"12345678909\",\n    \"nome\": \"Francisco da Silva\"\n  },\n  \"valor\": {\n    \"original\": \"123.45\"\n  },\n  \"chave\": \"CHAVE_PIX_COBRADOR\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Associating Facebook Ads with Preferences in PHP\nDESCRIPTION: This snippet shows how to associate a Facebook pixel with a payment preference to track ad conversions in PHP. It requires a MercadoPago\\Preference instance with the pixel_id being a critical parameter. The tracking details are saved with the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/preferences.en.md#2025-04-18_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n  // Create a preference object\n  $preference = new MercadoPago\\Preference();\n  // Associate your Facebook Pixel\n  $preference->tracks = array(\n    array(\n      'type' => 'facebook_ad',\n      'values'=> array(\n        'pixel_id' => 'PIXEL_ID'\n      )\n    )\n  );\n  // ...\n  // Save and post the preference\n  $preference->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Card Token V1 with MercadoPago.js\nDESCRIPTION: This snippet shows how to create a card token using the `createToken` method in Mercado Pago's JavaScript SDK V1. It takes the form and a callback function as parameters. The callback function `setCardTokenAndPay` is executed after the token is successfully created.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.es.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.Mercadopago.createToken($form, setCardTokenAndPay);\n```\n\n----------------------------------------\n\nTITLE: Generating a Payment Method - cURL\nDESCRIPTION: This cURL command demonstrates how to generate a payment method using Spreedly. It securely submits the payment card details without directly handling them on the server. The command includes authentication and the required data structure for the credit card.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/spreedly/spreedly.es.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\n$ curl https://core.spreedly.com/v1/payment_methods.json \\\n-u 'C7cRfNJGODKh4Iu5Ox3PToKjniY:4UIuWybmdythfNGPqAqyQnYha6s451ri0fYAo4p3drZUi7q2Jf4b7HKg8etDtoKJ' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\\n\\t\"payment_method\": {\\n\\t\\t\"credit_card\": {\\n\\t\\t\\t\"first_name\": \"TEST\\\",\\n\\t\\t\\t\"last_name\": \"TEST\\\",\\n\\t\\t\\t\"number\": \"CARD NUMBER\\\",\\n\\t\\t\\t\"verification_value\": CVV,\\n\\t\\t\\t\"month\": \"CARD EXPIRATION MONTH\\\",\\n\\t\\t\\t\"year\": \"CARD EXPIRATION YEAR\"\\n\\t\\t},\\n\\t\\t\"email\": \"[FAKER][INTERNET][FREE_EMAIL]\"\\n\\t}\\n\\t}\\n'\n```\n\n----------------------------------------\n\nTITLE: Mercado Pago Payment Response Example (JSON)\nDESCRIPTION: This JSON snippet shows an example response from the Mercado Pago API after creating a payment. It includes important details such as the payment status, transaction details, and the external resource URL for completing the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n[\n{\n...,\n\"id\": 5466310457,\n\"status\": \"pending\",\n\"status_detail\": \"pending_waiting_payment\",\n...,\n\"transaction_details\": {\n\"payment_method_reference_id\": \"24304329\",\n\"verification_code\": \"882430432923032000100001\",\n\"net_received_amount\": 0,\n\"total_paid_amount\": 100,\n\"overpaid_amount\": 0,\n\"external_resource_url\": \"https://www.mercadopago.com/mlm/payments/sandbox/ticket/helper?payment_id=1234&payment_method_reference_id=12345678&caller_id=1234&hash=aaaaaa-bbb-cccc-dddd-eeeeeeee\",\n\"installment_amount\": 0,\n\"financial_institution\": \"\",\n\"payable_deferral_period\": null,\n}\n}\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Refund Using Mercado Pago SDK in Java\nDESCRIPTION: This snippet demonstrates how to retrieve a specific refund for a payment using the Mercado Pago SDK. The 'get' method of 'PaymentRefundClient' is invoked with the payment ID and the refund ID, facilitating access to the refund data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/refunds.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nPaymentRefundClient client = new PaymentRefundClient();\n\nLong paymentId = 123456789L;\nLong refundId = 1234L;\nclient.get(paymentId, refundId);\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment Amount in Node.js with Mercado Pago SDK\nDESCRIPTION: This snippet demonstrates how to capture a partial amount of 5 from a previously reserved payment using Node.js. It configures the Mercado Pago SDK with an access token and calls the capturePartial method with the payment ID and amount information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.es.md#2025-04-18_snippet_2\n\nLANGUAGE: node\nCODE:\n```\nvar mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(config.access_token);\n\nlet captureInfo = {id: 123, transaction_amount: 5}\n\nmercadopago.payment.capturePartial(captureInfo, mercadopago, (error, response) => {\n    if (error){\n        console.log(error);\n    }else{\n        console.log(response)\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Card to a Customer with Node.js\nDESCRIPTION: This Node.js example shows how to add a new card to an existing customer using Mercado Pago's SDK. It first retrieves the customer information and then creates a new card using the customer ID, token, and payment method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerClient = new Customer(client);\n\nconst customer = customerClient.get({ customerId: '<CUSTOMER_ID>' })\n\t.then((result) => {\n\n  const cardClient = new CustomerCard(client);\n\n  const body = {\n       token : result.token,\n       payment_method: 'debit_card' \n  };\n\ncardClient.create({ customerId: customer, body: body })\n.then(console.log).catch(console.log);\n});\n```\n\n----------------------------------------\n\nTITLE: Get Payment Methods with Mercado Pago SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of available payment methods using the Mercado Pago SDK in Python. It initializes the SDK with an access token and then calls the `payment_methods().list_all()` method to obtain the payment methods. The response is stored in the `payment_methods` variable.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/payment-methods.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\npayment_methods_response = sdk.payment_methods().list_all()\npayment_methods = payment_methods_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Payment Intent Response for Mexico (MLM)\nDESCRIPTION: This JSON response shows the structure of the data returned when creating a payment intent for Mexico. It includes the basic fields such as ID, device ID, amount, and additional information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/payment-processing.en.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"7d8c70b6-2ac8-4c57-a441-c319088ca3ca\",\n  \"device_id\": \"PAX_A910__SMARTPOS123456789075\",\n  \"amount\": 1500,\n  \"additional_info\": {\n      \"external_reference\": \"4561ads-das4das4-das4754-das456\",\n      \"print_on_terminal\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago API in C#\nDESCRIPTION: This C# snippet creates a payment using the Mercado Pago API. It sets the access token, creates a payment request object with transaction amount, token, description, installments, payment method ID, issuer ID, and payer email.  A PaymentClient is used to create the payment asynchronously, and the payment status is printed to the console.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-serverside.es.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n// ...\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n// ...\nvar paymentRequest = new PaymentCreateRequest\n{\n    TransactionAmount = 100,\n    Token = token,\n    Description = \"Blue shirt\",\n    Installments = installments,\n    PaymentMethodId = payment_method_id,\n    IssuerId = issuer_id,\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"john@yourdomain.com\",\n    },\n};\n// Crea el pago\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest);\n// ...\n// Imprime el estado del pago\nConsole.WriteLine(payment.Status);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Initializing PSE Payment Form with Entity and ID Data in Javascript for Colombia\nDESCRIPTION: Configuration to pre-populate entity type, identification, and email fields for PSE payments in Colombia. Includes entity type set to 'individual' and identification details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/initialize-data-on-the-bricks.en.md#2025-04-18_snippet_14\n\nLANGUAGE: Javascript\nCODE:\n```\nsettings = {\n  ...,\n  initialization: {\n    ...,\n    payer: {\n      email: '<PAYER_EMAIL>',\n      entityType: 'individual',\n      identification: {\n        type: '<PAYER_IDENTIFICATION_TYPE>',\n        number: '<PAYER_IDENTIFICATION_NUMBER>'\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Mercado Pago Payment Response in JSON\nDESCRIPTION: This JSON response structure shows a successful payment with status \"approved\". It includes important fields like payment ID, date, payment method details, and refund information that are returned after a transaction is processed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-cards.es.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status\": \"approved\",\n    \"status_detail\": \"accredited\",\n    \"id\": 3055677,\n    \"date_approved\": \"2019-02-23T00:01:10.000-04:00\",\n    \"payer\": {\n        ...\n    },\n    \"payment_method_id\": \"visa\",\n    \"payment_type_id\": \"credit_card\",\n    \"refunds\": [],\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Request with Multiple SDK Examples\nDESCRIPTION: Code examples showing how to create a payment request using Mercado Pago's SDK in different programming languages. Each implementation includes setting up the client, configuring idempotency keys, and sending payment details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mlu.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\Client\\Common\\RequestOptions;\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['transactionAmount'],\n    \"token\" => $_POST['token'],\n    \"description\" => $_POST['description'],\n    \"installments\" => $_POST['installments'],\n    \"payment_method_id\" => $_POST['paymentMethodId'],\n    \"issuer_id\" => $_POST['issuer'],\n    \"payer\" => [\n      \"email\" => $_POST['email'],\n      \"first_name\" => $_POST['payerFirstName'],\n      \"last_name\" => $_POST['payerLastName'],\n      \"identification\" => [\n        \"type\" => $_POST['identificationType'],\n        \"number\" => $_POST['number']\n      ]\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\nLANGUAGE: nodejs\nCODE:\n```\nimport { Payment, MercadoPagoConfig } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\n\npayment.create({\n    body: { \n        transaction_amount: req.transaction_amount,\n        token: req.token,\n        description: req.description,\n        installments: req.installments,\n        payment_method_id: req.paymentMethodId,\n        issuer_id: req.issuer,\n            payer: {\n            email: req.email,\n            identification: {\n        type: req.identificationType,\n        number: req.number\n    }}},\n    requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n.then((result) => console.log(result))\n.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Associating Facebook Ads Pixel with Checkout Pro in PHP\nDESCRIPTION: This PHP snippet demonstrates how to integrate a Facebook Ads pixel with a Mercado Pago preference for ad conversion tracking. It requires MercadoPago\\Preference class and the Facebook pixel ID as dependencies. The input is the pixel ID, and the preference is saved with the associated tracking info.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Create a preference object\n$preference = new MercadoPago\\Preference();\n\n// Associate your Facebook pixel\n$preference->tracks = array(\narray(\n'type' => 'facebook_ad',\n'values'=> array(\n'pixel_id' => 'PIXEL_ID'\n)\n)\n);\n\n// ...\n// Save and post the preference\n$preference->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Zero Dollar Auth Payment in PHP\nDESCRIPTION: PHP implementation for creating a zero dollar authentication payment using Mercado Pago SDK, handling payment creation with custom headers\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/integration.en.md#2025-04-18_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\MercadoPagoConfig;\n\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Card-Validation: card_validation\"]);\n\n  $payment = $client->create([\n    \"token\" => $_POST['token'],\n    \"payment_method_id\" => $_POST['paymentMethodId'],\n    \"payer\" => [\n      \"email\" => $_POST['email'],\n      \"type\" => $_POST['type']\n    ],\n    \"description\" => $_POST['description'],\n    \"transaction_amount\" => (float) $_POST['transactionAmount']\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Implementing HMAC Verification in a Go HTTP Server\nDESCRIPTION: This Go implementation creates an HTTP server that verifies the authenticity of incoming requests using HMAC-SHA256. It extracts signature components from headers, constructs a manifest string based on request data, and compares the calculated hash with the received hash.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"crypto/hmac\"\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// Obtain the x-signature value from the header\n\t\txSignature := r.Header.Get(\"x-signature\")\n\t\txRequestId := r.Header.Get(\"x-request-id\")\n\n\t\t// Obtain Query params related to the request URL\n\t\tqueryParams := r.URL.Query()\n\n\t\t// Extract the \"data.id\" from the query params\n\t\tdataID := queryParams.Get(\"data.id\")\n\n\t\t// Separating the x-signature into parts\n\t\tparts := strings.Split(xSignature, \",\")\n\n\t\t// Initializing variables to store ts and hash\n\t\tvar ts, hash string\n\n\t\t// Iterate over the values to obtain ts and v1\n\t\tfor _, part := range parts {\n\t\t\t// Split each part into key and value\n\t\t\tkeyValue := strings.SplitN(part, \"=\", 2)\n\t\t\tif len(keyValue) == 2 {\n\t\t\t\tkey := strings.TrimSpace(keyValue[0])\n\t\t\t\tvalue := strings.TrimSpace(keyValue[1])\n\t\t\t\tif key == \"ts\" {\n\t\t\t\t\tts = value\n\t\t\t\t} else if key == \"v1\" {\n\t\t\t\t\thash = value\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Get secret key/token for specific user/application from Mercadopago developers site\n\t\tsecret := \"your_secret_key_here\"\n\n\t\t// Generate the manifest string\n\t\tmanifest := fmt.Sprintf(\"id:%v;request-id:%v;ts:%v;\", dataID, xRequestId, ts)\n\n\t\t// Create an HMAC signature defining the hash type and the key as a byte array\n\t\thmac := hmac.New(sha256.New, []byte(secret))\n\t\thmac.Write([]byte(manifest))\n\n\t\t// Obtain the hash result as a hexadecimal string\n\t\tsha := hex.EncodeToString(hmac.Sum(nil))\n\nif sha == hash {\n    // HMAC verification passed\n    fmt.Println(\"HMAC verification passed\")\n} else {\n    // HMAC verification failed\n    fmt.Println(\"HMAC verification failed\")\n}\n\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Generating QR Data Response from Order Creation - JSON\nDESCRIPTION: This snippet illustrates the typical JSON response containing the `qr_data` attribute upon successful order creation through the Mercado Pago API. The `qr_data` is crucial for generating a QR code for customer payment. The response structure adheres to the EMVCo standard.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/qr-dynamic-integration.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"qr_data\": \"00020101021243650016COM.MERCADOLIBRE02013063638f1192a-5fd1-4180-a180-8bcae3556bc35204000053039865802BR5925IZABEL AAAA DE MELO6007BARUERI62070503***63040B6D\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Wallet Brick in React JSX\nDESCRIPTION: This snippet provides a React component for rendering the Wallet Brick. It defines initialization and customization properties and includes callbacks for handling submission, errors, and readiness.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst initialization = {\n  preferenceId: '<PREFERENCE_ID>',\n}\n\nconst customization = {\n  texts: {\n   valueProp: 'smart_option',\n  },\n}\n\nconst onSubmit = async (formData) => {\n // callback called when clicking on Wallet Brick\n // this is possible because Brick is a button\n};\n\nconst onError = async (error) => {\n // callback called for all Brick error cases\n console.log(error);\n};\n\nconst onReady = async () => {\n // Callback called when Brick is ready.\n // Here, you can hide loadings on your website, for example.  \n};\n```\n\n----------------------------------------\n\nTITLE: Creating Refund Intent for Point Device via API (curl)\nDESCRIPTION: This snippet demonstrates how to create a refund intent for a Point device using the API. It requires the device ID and payment ID to be refunded.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/refund-processing.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/point/integration-api/devices/{deviceid}/refund' \\\n--h 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--data-raw '{\n    \"payment_id\": \"93921210001\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum and Maximum Installments in JavaScript\nDESCRIPTION: This snippet defines a settings object that includes customization options for payment methods, specifically setting minimum and maximum installments for card payments. The 'minInstallments' and 'maxInstallments' properties must be provided as numbers. Ensure proper handling of these values to control the number of allowed installments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/max-and-min-installments.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\\n    customization: {\n        paymentMethods: {\n            minInstallments: number,\n            maxInstallments: number,\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configurando textos personalizados en Brick con JavaScript\nDESCRIPTION: Configura los textos personalizados para mensajes de error y retorno utilizando la propiedad customization.visual.texts. Se pueden personalizar etiquetas para errores generales, errores de tarjeta y botón de retorno.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/status-screen-brick/change-texts.es.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    customization: {\n        visual: {\n            texts: {\n                ctaGeneralErrorLabel: \"\",\n                ctaCardErrorLabel: \"\",\n                ctaReturnLabel: \"\",\n            },\n        },\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods in PHP for Mercado Pago\nDESCRIPTION: PHP implementation for excluding specific payment methods and types in Mercado Pago Checkout Pro, with a maximum of 12 installments\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/payment-methods.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$preference = new MercadoPago\\Preference();\n// ...\n$preference->payment_methods = array(\n  \"excluded_payment_methods\" => array(\n    array(\"id\" => \"master\")\n  ),\n  \"excluded_payment_types\" => array(\n    array(\"id\" => \"ticket\")\n  ),\n  \"installments\" => 12\n);\n// ...\n?>\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods in Python for Mercado Pago\nDESCRIPTION: Python implementation for excluding specific payment methods and types in Mercado Pago Checkout Pro, with a maximum of 12 installments\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/payment-methods.es.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n#...\npreference_data = {\n    \"excluded_payment_methods\": [\n        { \"id\": \"master\" }\n    ],\n    \"excluded_payment_types\": [\n        { \"id\": \"ticket\" }\n    ],\n    \"installments\": 12\n}\n#...\n```\n\n----------------------------------------\n\nTITLE: Excluding Payment Methods C#\nDESCRIPTION: This C# snippet demonstrates setting payment method exclusions using the Mercado Pago SDK. It creates instances of `PreferencePaymentMethodRequest` and `PreferencePaymentTypeRequest`, adds them to lists, and then sets these lists within a `PreferencePaymentMethodsRequest` object.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar paymentMethods = new PreferencePaymentMethodsRequest\n{\n    ExcludedPaymentMethods = new List<PreferencePaymentMethodRequest>\n    {\n        new PreferencePaymentMethodRequest\n        {\n            Id = \"master\",\n        },\n    },\n    ExcludedPaymentTypes = new List<PreferencePaymentTypeRequest>\n    {\n        new PreferencePaymentTypeRequest\n        {\n            Id = \"ticket\",\n        },\n    },\n    Installments = 12,\n};\n\nvar request = new PreferenceRequest\n{\n    // ...\n    PaymentMethods = paymentMethods,\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Subscription with Curl\nDESCRIPTION: This code snippet shows how to create a subscription using a curl command with the Mercado Pago API. It uses the `/preapproval` endpoint and requires a `preapproval_plan_id` (the ID of the previously created plan), a reason, external reference, payer's email, card token ID, auto-recurring settings (frequency, start/end dates), transaction amount, currency, back URL, and a status of \"authorized\".  It also needs a valid access token for authorization.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/subscriptions-associated-plan.es.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n      'https://api.mercadopago.com/preapproval' \\\n      -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n      -H 'Content-Type: application/json' \\\n      -d '{\n  \"preapproval_plan_id\": \"2c938084726fca480172750000000000\",\n  \"reason\": \"Yoga classes\",\n  \"external_reference\": \"YG-1234\",\n  \"payer_email\": \"test_user@testuser.com\",\n  \"card_token_id\": \"e3ed6f098462036dd2cbabe314b9de2a\",\n  \"auto_recurring\": {\n    \"frequency\": 1,\n    \"frequency_type\": \"months\",\n    \"start_date\": \"2020-06-02T13:07:14.260Z\",\n    \"end_date\": \"2022-07-20T15:59:52.581Z\",\n    \"transaction_amount\": 10,\n    \"currency_id\": \"ARS\"\n  },\n  \"back_url\": \"https://www.mercadopago.com.ar\",\n  \"status\": \"authorized\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Submitting Chargeback Documentation via Mercado Pago API\nDESCRIPTION: cURL request to submit documentation for a chargeback dispute. Supports multiple file uploads in .jpg, .png, or .pdf formats with a combined size limit of 10MB. Requires an ACCESS_TOKEN for authentication.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/chargebacks/how-to-manage.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST  \\\n-F 'files[]=@/path/to/file/file1.png' \\\n-F 'files[]=@/path/to/file/file2.pdf' \\\n-H 'Authorization: Bearer <ACCESS_TOKEN>' \\\nhttps://api.mercadopago.com/v1/chargebacks/ID/documentation\n```\n\n----------------------------------------\n\nTITLE: Creating Preference in PHP\nDESCRIPTION: This PHP snippet demonstrates how to create a Mercado Pago preference on the server-side using the PHP SDK. It creates a preference object, adds an item to the preference, and sets the `purpose` to `wallet_purchase`, allowing only logged-in payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-onsubmit.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Cria um objeto de preferência\n$preference = new MercadoPago\\Preference();\n \n// Cria um item na preferência\n$item = new MercadoPago\\Item();\n$item->title = 'Meu produto';\n$item->quantity = 1;\n$item->unit_price = 75.56;\n$preference->items = array($item);\n \n// o $preference->purpose = 'wallet_purchase'; permite apenas pagamentos logados\n// para permitir pagamentos como guest, você pode omitir essa propriedade\n$preference->purpose = 'wallet_purchase';\n$preference->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing Card Payment Brick with Saved Cards\nDESCRIPTION: This JavaScript code initializes the Card Payment Brick using saved cards. It initializes MercadoPago, creates a Brick builder, and then defines settings including the amount, customer ID, and card IDs. The onSubmit callback handles the submission of the payment form data to the server.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-clientside.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<script>\n   const mp = new MercadoPago('YOUR_PUBLIC_KEY');\nconst bricksBuilder = mp.bricks();\nconst renderCardPaymentBrick = async (bricksBuilder) => {\n   const settings = {\n       initialization: {\n           amount: 100, //valor do processamento a ser realizado\n           payer: {\n           customer_id: \"209277402-FqRqgEc3XItrxs\",\n\tcard_ids: [“1518023392627”,”1518023332143”]\n       },\n       },\n       style: {\n           theme: 'default' // | 'dark' | 'bootstrap' | 'flat'\n       },\n       callbacks: {\n           onReady: () => {\n           // callback chamado quando o Brick estiver pronto\n           },\n           onSubmit: ({paymentType, formData}) => {\n           // callback chamado o usuário clicar no botão de submissão dos dados\n           // ejemplo de envío de los datos recolectados por el Brick a su servidor\n           return new Promise((resolve, reject) => {\n               fetch(\"/processar-pago\", {\n                   method: \"POST\",\n                   headers: {\n                       \"Content-Type\": \"application/json\",\n                   },\n                   body: JSON.stringify(formData)\n               })\n               .then((response) => {\n                   // receber o resultado do pagamento\n                   resolve();\n               })\n               .catch((error) => {\n                   // lidar com a resposta de erro ao tentar criar o pagamento\n                   reject();\n               })\n               });\n           },\n           onError: (error) => {\n           // callback chamado para todos os casos de erro do Brick\n           },\n       },\n   };\n   window.cardPaymentBrickController = await bricksBuilder.create('cardPayment', 'cardPaymentBrick_container', settings);\n};\nrenderCardPaymentBrick(bricksBuilder);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Payment Methods with Java SDK\nDESCRIPTION: Code to fetch all available payment methods using Mercado Pago's Java SDK. This implementation sets the access token and creates a client to list payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nPaymentMethodClient client = new PaymentMethodClient();\nclient.list();\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Status Screen Brick with React\nDESCRIPTION: This React code snippet demonstrates how to configure the Status Screen Brick using React components. It defines the `initialization` object with the `paymentId`, and asynchronous callback functions `onError` and `onReady` for handling errors and readiness events respectively. These configurations are then passed as props to the `<StatusScreen>` component during rendering.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/status-screen-brick/default-rendering.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst initialization = {\n paymentId: '<PAYMENT_ID>', // id do pagamento a ser mostrado\n};\nconst onError = async (error) => {\n // callback chamado para todos os casos de erro do Brick\n console.log(error);\n};\nconst onReady = async () => {\n /*\n   Callback chamado quando o Brick estiver pronto.\n   Aqui você pode ocultar loadings do seu site, por exemplo.\n */\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Integrator and Platform IDs in PHP SDK\nDESCRIPTION: Code for setting platform and integrator identification in Mercado Pago PHP SDK. Replace PLATFORM_ID and INTEGRATOR_ID with your actual values to identify your integration and work with metrics.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/metrics/integration-metrics.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nMercadoPago\\SDK::setPlatformId(\"PLATFORM_ID\");\nMercadoPago\\SDK::setIntegratorId(\"INTEGRATOR_ID\");\n```\n\n----------------------------------------\n\nTITLE: Searching Customers by Email with cURL\nDESCRIPTION: cURL command for searching a customer by email using Mercado Pago's REST API. It sends a GET request to the customers/search endpoint with authorization header and email parameter.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/search-customers.en.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n'https://api.mercadopago.com/v1/customers/search' \\\n-d '{\n\"email\": \"test_user_19653727@testuser.com\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Reserve in C#\nDESCRIPTION: This C# snippet demonstrates how to perform reserve authorization using MercadoPago's API. It configures the SDK with an access token, prepares a payment create request with payment details, and sets capture to false to ensure the transaction amount is reserved.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/make-value-reserve.en.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n\nvar paymentRequest = new PaymentCreateRequest\n{\nTransactionAmount = 100,\nToken = \"ff8080814c11e237014c1ff593b57b4d\",\nDescription = \"Product Title\",\nInstallments = 1,\nPaymentMethodId = \"visa\",\nPayer = new PaymentPayerRequest\n{\nEmail = \"test_user_19653727@testuser.com\",\n},\ncapture = false,\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Creating Pix Payment with PHP SDK\nDESCRIPTION: PHP implementation for creating a Pix payment using Mercado Pago's SDK. It sets up the payment client, adds the required idempotency key header, and sends the payment request with transaction amount, payment method, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pix.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\Client\\Common\\RequestOptions;\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n \"transaction_amount\" => (float) $_POST['<TRANSACTION_AMOUNT>'],\n    \"payment_method_id\" => $_POST['<PAYMENT_METHOD_ID>'],\n    \"payer\" => [\n      \"email\" => $_POST['<EMAIL>']\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Searching Payments with MercadoPago Java SDK\nDESCRIPTION: Shows how to search for payments using filters like sorting, date, and external reference with the PaymentClient\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/create-payments.es.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nPaymentClient client = new PaymentClient();\n\nMap<String, Object> filters = new HashMap<>();\nfilters.put(\"sort\", \"date_created\");\nfilters.put(\"criteria\", \"desc\");\nfilters.put(\"external_reference\", \"ID_REF\");\n\nMPSearchRequest searchRequest =\n   MPSearchRequest.builder().offset(0).limit(0).filters(filters).build();\n\nclient.search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Implementing Payment Submission with Additional Data - Other Countries\nDESCRIPTION: Example of implementing the onSubmit callback for payment processing in other Latin American countries, with similar functionality to Brazil but referring to 'Cuenta Mercado Pago' instead of 'Conta Mercado Pago'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/additional-data.en.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n  ...,\n  callbacks: {\n    onSubmit: ({ selectedPaymentMethod, formData }, additionalData) => {\n      // callback called after the user clicks the submit button for the data\n      // the additionalData parameter is optional, so you can remove it if you want\n      console.log(additionalData);\n      // example of sending the data collected by Brick to your server\n      return new Promise((resolve, reject) => {\n        const url = \"<YOUR-BACKEND-URL-HERE>\";\n\n        if (selectedPaymentMethod === \"wallet_purchase\") {\n          // wallet_purchase (Cuenta Mercado Pago) does not need to be sent by the backend\n          resolve();\n        }\n\n        fetch(url, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(formData),\n        })\n          .then((response) => response.json())\n          .then((response) => {\n            // receive the payment result\n            resolve();\n          })\n          .catch((error) => {\n            // handle the error response when trying to create the payment\n            reject();\n          });\n      });\n    },\n  },\n};\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\n<Payment\n initialization={initialization}\n customization={customization}\n onSubmit={async ({ selectedPaymentMethod, formData }, additionalData) => {\n   console.log({ selectedPaymentMethod, formData }, additionalData);\n }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Customer by ID with MercadoPago SDK in Node.js\nDESCRIPTION: This snippet illustrates how to retrieve a specific customer by their ID using MercadoPago's SDK. It configures the client and calls the get method with the customer's unique identifier.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/customers.es.md#2025-04-18_snippet_2\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerClient = new Customer(client);\n\ncustomerClient.get({ customerId: '<CUSTOMER_ID>' }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Setting Payment Expiration Date in Java\nDESCRIPTION: Code to set the expiration date for a cash payment in Java. The date uses ISO 8601 format and must be between 1 and 30 days from the payment issue date.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_16\n\nLANGUAGE: java\nCODE:\n```\npayment.setDateOfExpiration(\"2020-05-30T23:59:59.000-04:00\")\n```\n\n----------------------------------------\n\nTITLE: Creating Fintoc Payment with MercadoPago cURL\nDESCRIPTION: Shows how to create a Fintoc payment using a cURL request to the MercadoPago API, including setting up the payment details in the request body.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-advanced.en.md#2025-04-18_snippet_10\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer ' \\\n--data-raw '{\n    \"transaction_amount\": 2000,\n    \"payment_method_id\": \"fintoc\",\n    \"description\": \"description\",\n    \"callback_url\": \"https://www.your-site.com\",\n    \"point_of_interaction\": {\n      \"type\": \"CHECKOUT\",\n      \"sub_type\": \"INTER_PSP\"\n    },\n    \"payer\": {\n        \"email\": \"mail@mail.com.br\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Setting Wallet Purchase Purpose - JSON\nDESCRIPTION: This snippet demonstrates how to set the 'purpose' attribute to 'wallet_purchase' in a Mercado Pago preference. This configuration restricts payments to only registered Mercado Pago users, allowing them to pay with card, available balance, and other options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"purpose\": \"wallet_purchase\"\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Data in Java using MercadoPago SDK\nDESCRIPTION: Example of updating customer information such as email, name, phone, identification, and address details using the MercadoPago Java SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/modify-customer.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nCustomerClient client = new CustomerClient();\n\nCustomerRequest request = CustomerRequest.builder()\n.email(\"user@user.com\")\n.firstName(\"John\")\n.lastName(\"Wagner\")\n.defaultAddress(\"House\")\n.phone(PhoneRequest.builder()\n.areaCode(\"11\")\n.number(\"001234567\")\n.build())\n.identification(IdentificationRequest.builder()\n.type(\"CPF\")\n.number(\"12341234\")\n.build())\n.description(\"Customer Information\")\n.defaultCard(\"None\")\n.address(CustomerAddressRequest.builder()\n.zipCode(\"52\")\n.streetName(\"United Nations Avenue\")\n.streetNumber(2)\n.build())\n.build();\n\nclient.update(\"247711297-jxOV430go9fx2e\", request);\n```\n\n----------------------------------------\n\nTITLE: Setting Cash Payment Expiration Date in JSON\nDESCRIPTION: This snippet shows how to set an expiration date for cash payments using the 'date_of_expiration' field in ISO 8601 format.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"date_of_expiration\": \"2020-05-30T23:59:59.000-04:00\"\n```\n\n----------------------------------------\n\nTITLE: Creating PSE Payment Request in PHP with MercadoPago\nDESCRIPTION: This PHP snippet demonstrates how to create a PSE payment request using MercadoPago. It includes setting up transaction details, payer information, and additional data required for PSE payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-migrate-pse.en.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n\"additional_info\" => [\n  \"ip_address\" => \"127.0.0.1\"\n],\n\"transaction_details\" => [\n  \"financial_institution\" => $_POST['financialInstitution']\n],\n\"callback_url\" => \"http://www.your-site.com\",\n\"email\" => $_POST['email'],\n\"identification\" => [\n     \"type\" => $_POST['identificationType'],\n     \"number\" => $_POST['identificationNumber']\n],\n\"address\" => [\n      \"zip_code\" => $_POST['zipCode'],\n      \"street_name\": $_POST['streetName'],\n      \"street_number\": $_POST['streetNumber'],\n      \"neighborhood\": $_POST['neighborhood'],\n      \"city\": $_POST['city'],\n      \"federal_unit\": $_POST['federalUnit']\n],\n\n\"phone\" => [\n     \"area_code\" => $_POST['phoneAreaCode'],\n     \"number\" => $_POST['phoneNumber']\n],\n\"entity_type\" => \"individual\";\n]);\n\necho implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing DeviceSDK in Java for Android\nDESCRIPTION: Initializes the DeviceSDK in the Android application's MainApplication class. This setup is necessary to capture device information for security validation in Android applications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.en.md#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nimport com.mercadolibre.android.device.sdk.DeviceSDK;\n\n\nDeviceSDK.getInstance().execute(this);\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Information with MercadoPago SDK in Ruby\nDESCRIPTION: This snippet demonstrates how to update customer information using the MercadoPago SDK in Ruby. It includes updating various customer details such as email, name, address, phone, and identification.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ruby/customers.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustomer_request = {\n  email: 'user@user.com',\n  first_name: 'john',\n  last_name: 'wagner',\n  default_address: 'Casa',\n  phone: {\n    area_code: '[FAKER][PHONE_NUMBER][AREA_CODE]',\n    number: '001234567'\n  },\n  identification: {\n    type: '[FAKER][IDENTIFICATION][TYPE]',\n    number: '12341234'\n  },\n  address: {\n    zip_code: '[FAKER][ADDRESS][ZIP_CODE]',\n    street_name: '[FAKER][ADDRESS][STREET_NAME]',\n    street_number: '2'\n  },\n  description: 'Informações do cliente',\n  default_card: 'None'\n}\ncustomer_response = sdk.customer.update(customer_id ,customer_request)\ncustomer = customer_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Customizing CSS Variables in JavaScript for Mercado Pago\nDESCRIPTION: This code snippet demonstrates how to customize CSS variables within the Mercado Pago Brick settings using JavaScript. The `customVariables` object within the `customization.visual.style` allows developers to override default CSS values.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/modify-variables.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\n```Javascript\nconst settings = {\n    ...,\n    customization: {\n        visual: {\n            style: {\n                customVariables: {\n                    textPrimaryColor: 'string',\n                    textSecondaryColor: 'string',\n                    ...,\n                },\n            },\n        }\n        ...,\n    },\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Auxiliary Callbacks in React for Mercado Pago Wallet\nDESCRIPTION: This snippet shows how to use the Wallet component in React with auxiliary callbacks. It sets the preference ID and redirect mode as initialization props, and includes onReady, onError, and onSubmit as component props.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/auxiliary-callbacks.en.md#2025-04-18_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Wallet\n  initialization={{ preferenceId: '<PREFERENCE_ID>', redirectMode: 'self' }}\n  onReady={() => {}}\n  onError={() => {}}\n  onSubmit={() => {}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Binary Mode in Mercado Pago Checkout Preferences (JSON)\nDESCRIPTION: This code snippet shows how to set the binary_mode parameter to true in the JSON payload when making a request to the /checkout/preferences endpoint. This enables instantaneous payment approval or decline, bypassing pending or in-process states.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/binary-mode.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"binary_mode\": true\n```\n\n----------------------------------------\n\nTITLE: Creating Preference Object in C#\nDESCRIPTION: This code snippet creates a preference request object in C#, setting the `Purpose` to \"wallet_purchase\" to allow only logged-in payments. It includes an item with a title, quantity, currency ID, and unit price. To allow guest payments, the `Purpose` property can be omitted.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-startup.en.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Create the preference request object\nvar request = new PreferenceRequest\n{\n  // o Purpose = 'wallet_purchase', allow only logged payments\n  // to allow guest payments you can omit this property\n    Purpose = \"wallet_purchase\",\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"My product\",\n            Quantity = 1,\n            CurrencyId = \"BRL\",\n            UnitPrice = 75.56,\n        },\n    },\n};\n \n// Create the preference using the client\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: POST Request for OAuth Access Token in Mercado Pago\nDESCRIPTION: This cURL snippet demonstrates how to send a POST request to the Mercado Pago OAuth endpoint to obtain an Access Token. Required dependencies include the Client ID and Client Secret obtained from your Mercado Pago integration credentials. The request outputs an Access Token, which is necessary for authorized API interactions. Ensure to renew the token every 6 hours as it expires.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/interoperable-accepting-flow-configuration.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/oauth/token' \\\n--header 'Content-Type: application/json' \\\n--data '{\n \"client_id\": \"{CLIENT_ID}\",\n \"client_secret\": \"{CLIENT_SECRET}\",\n \"grant_type\": \"client_credentials\"\n }'\n```\n\n----------------------------------------\n\nTITLE: Saving Customer Card with Mercado Pago\nDESCRIPTION: This snippet demonstrates how to save a customer's card reference securely using the Mercado Pago Java SDK. It creates a `CustomerCardCreateRequest` with the card token and sends it to the Mercado Pago server using the `CustomerCardClient`. The `customerId` is used to associate the card with a specific customer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/cards.es.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nCustomerCardClient client = new CustomerCardClient();\n\nString customerId = \"448870796-7ZjwhKGxILixxN\";\n\nCustomerCardCreateRequest request = CustomerCardCreateRequest.builder()\n   .token(\"9b2d63e00d66a8c721607214ceda233a\")\n   .build();\n\nclient.create(customerId, request);\n```\n\n----------------------------------------\n\nTITLE: Listing Refunds for a Payment\nDESCRIPTION: Shows how to retrieve a list of all refunds associated with a specific payment using PaymentRefundClient. Requires the payment ID as a parameter.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/refunds.es.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nPaymentRefundClient client = new PaymentRefundClient();\n\nLong paymentId = 123456789L;\nclient.list(paymentId);\n```\n\n----------------------------------------\n\nTITLE: Setting Integrator and Platform IDs in Python SDK\nDESCRIPTION: Code for setting platform and integrator identification in Mercado Pago Python SDK. Creates request options with platform and integrator IDs and initializes the SDK with these options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/metrics/integration-metrics.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport market\nfrom Mercadopago.config import RequestOptions\nrequest_options = RequestOptions(\nintegrator_id=\"INTEGRATOR_ID\",\nplatform_id=\"PLATFORM_ID\"\n)\nsdk = Mercadopago.SDK(\"ENV_ACCESS_TOKEN\", request_options=request_options)\n```\n\n----------------------------------------\n\nTITLE: JSON Response Example for In-Process Pix Refunds\nDESCRIPTION: Example JSON response when using the X-Render-In-Process-Refunds header. The response includes details like refund ID, payment ID, amount, status showing 'in_process', e2e_id, and other relevant information about the refund.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.en.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n \"id\": 1150873004,\n \"payment_id\": 23443394602,\n \"amount\": 20,\n \"metadata\": {},\n \"source\": {\n     \"id\": \"475845652\",\n     \"name\": \"Test Test\",\n     \"type\": \"collector\"\n },\n \"date_created\": \"2022-06-24T16:09:03.944-04:00\",\n \"unique_sequence_number\": null,\n \"refund_mode\": \"standard\",\n \"adjustment_amount\": 0,\n \"status\": \"in_process\",\n \"reason\": \"1\",\n \"labels\": [\n     \"hidden\",\n     \"contingency\"\n ],\n \"amount_refunded_to_payer\": 20,\n \"e2e_id\": \"D00000000202312220000abcdefghijklm\",\n \"partition_details\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Processing SPEI Bank Transfer Payments with Python\nDESCRIPTION: Python implementation for processing SPEI bank transfers with Mercado Pago SDK. This code creates a payment with transaction amount, payment method, and payer information, then retrieves the payment response and external resource URL.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.pt.md#2025-04-18_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n \npayment_data = {\n   \"transaction_amount\": 5000,\n   \"description\": \"description\",\n   \"payment_method_id\": \"clabe\",\n   \"payer\": {\n       \"type\": \"customer\",\n       \"email\": request.POST.get(\"email\"),\n       \"entity_type\": \"individual\",\n       \"first_name\": request.POST.get(\"first_name\"),\n       \"last_name\": request.POST.get(\"last_name\"),\n   }\n}\n \npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\nPayment_link = payment.transaction_details.external_resource_url\n```\n\n----------------------------------------\n\nTITLE: Getting Installments Amount in Java\nDESCRIPTION: Retrieve installment details for a specific amount using Java with MPManager's PaymentInstallmentTools\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/get-list-installments.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal PaymentInstallmentTools paymentInstallmentTools = MPManager.INSTANCE.getPaymentInstallmentTools();\n\nfinal Function1<MPResponse<List<InstallmentAmount>>, Unit> callback = (final MPResponse<List<InstallmentAmount>> response) -> {\n if (response.getStatus() == ResponseStatus.SUCCESS) {\n   // Successfully manage the list of installments\n } else {\n   // Manage the error in the installment request \n }\n return Unit.INSTANCE;\n};\nfinal String amount = \"11.0\";\n\npaymentInstallmentTools.getInstallmentsAmount(callback, amount);\n```\n\n----------------------------------------\n\nTITLE: Setting Shipment Cost in JSON\nDESCRIPTION: This JSON snippet demonstrates how to set the shipment cost within the 'shipments' object. The 'cost' attribute specifies the shipment value, and the 'mode' attribute is set to 'not_specified'. This configuration allows the shipment cost to be displayed separately during the checkout process.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/shipping-cost.es.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"shipments\":{\n        \"cost\": 1000,\n        \"mode\": \"not_specified\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest Intent Filter\nDESCRIPTION: XML configuration for AndroidManifest.xml to handle text-based intents in the Android app.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/cross-platform-ionic.en.md#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter> \n\t<action android:name=\"android.intent.action.SEND\" /> \n\t<category android:name=\"android.intent.category.DEFAULT\" /> \n\t<data android:mimeType=\"text/*\" /> \n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Error Response for Missing Counter Currency in Mercado Pago Cross Border\nDESCRIPTION: This snippet shows the error response returned when the counter_currency parameter is not included in the payment request. The API returns a 400 status with details about the missing parameter.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"missing counter_currency\",\n    \"error\": \"invalid_counter_currency\",\n    \"status\": 400,\n    \"cause\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Preference Object in PHP\nDESCRIPTION: This code snippet demonstrates how to create a preference object in PHP using the Mercado Pago SDK. It initializes a preference with an item, sets the unit price and quantity, and sets the preference purpose to 'wallet_purchase', allowing only logged-in payments. To allow guest payments, the `purpose` property can be omitted.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-startup.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Create a preference object\n$preference = new MercadoPago\\Preference();\n \n// Create an item in the preference\n$item = new MercadoPago\\Item();\n$item->title = 'My product';\n$item->quantity = 1;\n$item->unit_price = 75.56;\n$preference->items = array($item);\n \n// o $preference->purpose = 'wallet_purchase'; allows only logged payments\n// to allow guest payments, you can omit this property\n$preference->purpose = 'wallet_purchase';\n$preference->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Criando preferência de pagamento com Java no Mercado Pago\nDESCRIPTION: Este snippet ilustra como criar uma preferência de pagamento usando o SDK do Mercado Pago em Java. Ele configura um item com vários atributos, incluindo ID, título, descrição, URL da imagem, categoria, quantidade, moeda e preço unitário.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-preferences.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nPreferenceItemRequest itemRequest =\n       PreferenceItemRequest.builder()\n           .id(\"1234\")\n           .title(\"Games\")\n           .description(\"PS5\")\n           .pictureUrl(\"http://picture.com/PS5\")\n           .categoryId(\"games\")\n           .quantity(2)\n           .currencyId(\"BRL\")\n           .unitPrice(new BigDecimal(\"4000\"))\n           .build();\n   List<PreferenceItemRequest> items = new ArrayList<>();\n   items.add(itemRequest);\nPreferenceRequest preferenceRequest = PreferenceRequest.builder()\n.items(items).build();\nPreferenceClient client = new PreferenceClient();\nPreference preference = client.create(request);\n```\n\n----------------------------------------\n\nTITLE: Creating Total Refund with Mercado Pago SDK\nDESCRIPTION: Method to perform a complete refund for a specific payment using PaymentRefundClient. Requires payment ID and refund amount as parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/refunds.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nPaymentRefundClient client = new PaymentRefundClient();\n\nLong paymentId = 123456789L;\nBigDecimal amount = new BigDecimal(\"5\");\nclient.refund(paymentId, amount);\n```\n\n----------------------------------------\n\nTITLE: Creating Pix Payment with Java SDK\nDESCRIPTION: Java implementation for creating a Pix payment using Mercado Pago's SDK. It configures custom headers with an idempotency key, sets the access token, and creates a payment request with transaction amount, payment method ID, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pix.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest paymentCreateRequest =\n   PaymentCreateRequest.builder()\n       .transactionAmount(new BigDecimal(\"100\"))\n       .paymentMethodId(\"pix\")\n       .payer(\n           PaymentPayerRequest.builder()\n               .email(\"PAYER_EMAIL_HERE\")\n               .build())\n       .build();\n\nclient.create(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Android Device SDK Implementation\nDESCRIPTION: Java implementation for initializing and using the Mercado Pago Devices SDK in Android applications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-chopro.en.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport com.mercadolibre.android.device.sdk.DeviceSDK;\nDeviceSDK.getInstance().execute(this);\n```\n\n----------------------------------------\n\nTITLE: Listing Customer Cards with C#\nDESCRIPTION: Retrieves the list of customer cards asynchronously using the CustomerClient.  It calls the ListCardsAsync method with the customer ID to retrieve a list of CustomerCard objects.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/get-cards-list.en.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar customerClient = new CustomerClient();\nResourcesList<CustomerCard> customerCards = await customerClient.ListCardsAsync(\"CUSTOMER_ID\");\n```\n\n----------------------------------------\n\nTITLE: Refunding with Mercado Pago in Python\nDESCRIPTION: This Python snippet demonstrates how to create a refund request to Mercado Pago's SDK. It sets up the SDK with an access token, defines the refund object with the amount, and includes custom headers for the request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.es.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsdk = mercadopago.SDK('YOUR_ACCESS_TOKEN')\n\nrefund_object = {\n   'amount': 20\n}\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n   'content-type': 'application/json',\n   'X-Render-In-Process-Refunds': 'true'\n}\n\nsdk.refund().create('payment_id', refund_object, request_options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Back URLs in PHP\nDESCRIPTION: This snippet shows how to set the back URLs and auto return parameter for a payment preference using the Mercado Pago PHP SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/redirection.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$preference = new MercadoPago\\Preference();\n//...\n$preference->back_urls = array(\n    \"success\" => \"https://www.tu-sitio/success\",\n    \"failure\" => \"http://www.tu-sitio/failure\",\n    \"pending\" => \"http://www.tu-sitio/pending\"\n);\n$preference->auto_return = \"approved\";\n// ...\n?>\n```\n\n----------------------------------------\n\nTITLE: Example Payment Intent Response (MLA)\nDESCRIPTION: This JSON snippet illustrates a sample response for a payment intent request within the MLA region. Key attributes include `state`, `id`, `device_id`, `amount`, `payment` details (id), and `additional_info` such as the `ticket_number`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/payment-processing.en.md#2025-04-18_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"state\": \"FINISHED\",\n    \"id\": \"0aa0519d-d985-4e83-b62d-dda123456789\",\n    \"device_id\": \"INGENICO_MOVE2500_ING-ARG-14123456\",\n    \"amount\": 600,\n    \"payment\": {\n        \"id\": \"11123456789\"\n    },\n    \"additional_info\": {\n        \"ticket_number\": \"123456789123456789\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Specific Refund with Mercado Pago Node.js SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a specific refund for a payment using the Mercado Pago Node.js SDK. It initializes the `MercadoPagoConfig` with an access token and then uses the `PaymentRefund` class to get the refund, specifying the payment ID and the refund ID. Placeholders `<PAYMENT_ID>` and `<REFUND_ID>` should be replaced with actual values.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/refunds.en.md#2025-04-18_snippet_2\n\nLANGUAGE: node.js\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token', options: { timeout: 5000 } });\n\nconst refund = new PaymentRefund(client);\n\nrefund.get({\n\tpayment_id: '<PAYMENT_ID>',\n\trefund_id: '<REFUND_ID>'\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Searching Customers by Email in C#\nDESCRIPTION: C# implementation for searching a customer by email using Mercado Pago's SDK. It creates a SearchRequest with email filter, performs an asynchronous search, and retrieves the list of matching customers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/search-customers.en.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar searchRequest = new SearchRequest\n{\nFilters = new Dictionary<string, object>\n{\n[\"email\"] = \"test_payer_12345@testuser.com\",\n},\n};\nResultsResourcesPage<Customer> results = await customerClient.SearchAsync(searchRequest);\nIList<Customer> customers = results.Results;\n```\n\n----------------------------------------\n\nTITLE: Creating Cash Payment with Java in MercadoPago\nDESCRIPTION: Java implementation for creating a payment request using MercadoPago's Java SDK. Sets transaction amount, payment method, and payer information with a custom idempotency key header to prevent duplicate transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nPaymentCreateRequest paymentCreateRequest = PaymentCreateRequest.builder()\n          .transactionAmount(new BigDecimal(\"<TRANSACTION_AMOUNT>\"))\n          .paymentMethodId(\"<PAYMENT_METHOD_ID>\")\n          .payer(\n              PaymentPayerRequest.builder()\n                  .email(\"<EMAIL>\").build()\n          ).build();\n\nMap<String, String> customHeaders = new HashMap<>();\ncustomHeaders.put(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n\nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders).build();\n\nPaymentClient client = new PaymentClient();\nclient.create(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Setting Back URLs in Mercado Pago with Java\nDESCRIPTION: This code snippet demonstrates how to set the `back_urls` attribute in Java using the Mercado Pago SDK. It utilizes the `PreferenceBackUrlsRequest` and `PreferenceRequest` classes to define the success, pending, and failure URLs.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/redirection.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nPreferenceBackUrlsRequest backUrls =\n// ...\nPreferenceBackUrlsRequest.builder()\n       .success(\"https://www.seu-site/success\")\n       .pending(\"https://www.seu-site/pending\")\n       .failure(\"https://www.seu-site/failure\")\n       .build();\n\nPreferenceRequest request = PreferenceRequest.builder().backUrls(backUrls).build();\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating Cash Payments with Rapipago/Pago Fácil in C#\nDESCRIPTION: C# implementation for creating cash payments using Mercado Pago's Payment Client. This example shows how to configure a payment request with transaction amount, description, payment method, and payer email.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar request = new PaymentCreateRequest\n{\nTransactionAmount = 100,\nDescription = \"Product Title\",\nPaymentMethodId = \"rapipago\",\nPayer = new PaymentPayerRequest\n{\nEmail = \"test_user_19653727@testuser.com\",\n},\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Associating Facebook Ads Pixel with Mercado Pago Preference\nDESCRIPTION: This snippet demonstrates how to associate a Facebook Ads pixel with a Mercado Pago preference using the Python SDK. It adds a 'tracks' array to the preference data, specifying the 'facebook_ad' type and including the pixel ID. Replace `PIXEL_ID` with your actual Facebook Pixel ID.  This allows tracking conversions in Facebook Ads originating from Mercado Pago transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/preferences.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"# Associar seu pixel do Facebook\npreference_data = {\n    # ...\n    \"tracks\": [\n        {\n            \"type\": \"facebook_ad\",\n            \"values\": {\n                \"pixel_id\": \"PIXEL_ID\"\n            }\n        }\n    ]\n}\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\"\n```\n\n----------------------------------------\n\nTITLE: Complete API Request for Creating Boleto Bancario Payment\nDESCRIPTION: A comprehensive example of creating a Boleto Bancario payment with a custom expiration date using the Mercado Pago API. The request includes all required headers, transaction details, payer information, and additional data needed for processing the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/bank-slip.es.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'x-platform-id: {{PLATFORM_ID proporcionado por el equipo de Partners}}' \\\n--header 'Authorization: Bearer {{ACCESS_TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"transaction_amount\": 100,\n    \"installments\": 1,\n    \"statement_descriptor\": \"Tienda del vendedor\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": {{ID de su cuenta Mercado Pago referente a su plataforma}},\n    \"payment_method_id\": \"bolbradesco\",\n    \"date_of_expiration\": \"2023-02-28T22:59:59.000-04:00\",\n    \"external_reference\": \"Identificador de la plataforma\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"description\": \"Descripción del producto del vendedor\",\n    \"payer\": {\n        \"first_name\": \"Nombre. Ejemplo: John\",\n        \"last_name\": \"Apellido. Ejemplo: Jones\",\n        \"email\": \"Ejemplo: test_user_{{$timestamp}}@testuser.com\",\n        \"identification\": {\n            \"type\": \"Tipo de documento.\",\n            \"number\": \"Número del documento. Ejemplo: 19119119100\"\n        },\n        \"address\": {\n            \"zip_code\": \"Código postal. Ejemplo: 06233-200\",\n            \"street_name\": \"Nombre de la calle. Ejemplo: Av. das Nações Unidas\",\n            \"street_number\": \"Número de la calle. Ejemplo: 3003\",\n            \"neighborhood\": \"Barrio. Ejemplo: Bonfim\",\n            \"city\": \"Ciudad. Ejemplo: Osasco\",\n            \"federal_unit\": \"UF. Ejemplo: SP\"\n        }\n    },\n    \"additional_info\": {\n        \"referral_url\": \"URL de referencia. Ejemplo: www.sellertest123.com\",\n        \"drop_shipping\": true,\n        \"delivery_promise\": \"2022-11-20\",\n        \"contrated_plan\": \"premium\",\n        \"items\": [\n            {\n                \"id\": \"1941\",\n                \"title\": \"Producto del vendedor\",\n                \"description\": \"Descripción del producto del vendedor\",\n                \"picture_url\": null,\n                \"category_id\": \"Categoría. Ejemplo: electronics\",\n                \"quantity\": 1,\n                \"unit_price\": 100.00\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nombre. Ejemplo: John\",\n            \"last_name\": \"Apellido. Ejemplo: Jones\",\n            \"is_prime_user\": \"1\",\n            \"is_first_purchase_online\": \"1\",\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"Código de área. Ejemplo: 11\",\n                \"number\": \"Número del teléfono. Ejemplo: 987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"Código postal. Ejemplo: 06233-200\",\n                \"street_name\": \"Nombre de la calle. Ejemplo: Av. das Nações Unidas\",\n                \"street_number\": \"Número. Ejemplo: 3003\"\n            },\n            \"registration_date\": \"2013-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"0\",\n            \"pick_up_on_seller\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"Código postal. Ejemplo: 95630000\",\n                \"street_name\": \"Nombre de la calle. Ejemplo: São Luiz\",\n                \"street_number\": \"Número. Ejemplo: 15\",\n                \"floor\": \"Piso (si es un apartamento). Ejemplo: Segundo\",\n                \"apartment\": \"Número del apartamento (si es un apartamento). Ejemplo: 93\"\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Incorporando código de seguridad de Mercado Pago para Device ID\nDESCRIPTION: Script para agregar el código de seguridad de Mercado Pago a una página web, permitiendo la recolección del Device ID. Este fragmento debe colocarse en la sección de la página donde se desea implementar.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.es.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"home\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Marketplace Integration for Checkout Bricks in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize Checkout Bricks with marketplace functionality. The configuration includes setting the transaction amount, preference ID, and enabling the marketplace feature by setting the marketplace parameter to true.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-wallet-credits.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n  initialization : {\n    amount: 100,\n    preferenceId: \"<PREFERENCE_ID>\",\n    marketplace: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Additional Retail Data using cURL\nDESCRIPTION: This cURL command demonstrates how to create a payment request to Mercado Pago with detailed information about the items being purchased, the payer, and the shipping details. It includes specific fields relevant to the retail industry, such as item descriptions, buyer authentication type, and shipping address information. This helps improve payment approval rates.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/retail.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}} \\\n--data-raw '{ \n    \"transaction_amount\": 150.00,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"debvisa\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Pedido01\",\n    \"description\": \"PEDIDO NOVO\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"payer\": {\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"12345678909\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"title\": \"Serviço\",\n                \"picture_url\": \"{{picture_url}}\",\n                \"description\": \"Descrição de serviço\",\n                \"category_id\": \"pantry\",\n                \"quantity\": 1,\n                \"unit_price\": 150\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_prime_user\": true,\n            \"is_first_purchase_online\": true,\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"206233-2002\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"3003\"\n            },\n            \"authentication_type\": \"Facebook\",\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"306233-2003\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"3003\",\n                \"floor\": \"5\",\n                \"apartment\": \"502\",\n                \"state_name\": \"DF\",\n                \"city_name\": \"Bogota\"\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment using cURL\nDESCRIPTION: Makes direct API call to capture partial payment amount using cURL. Sends PUT request with authorization token and payment details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_25\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PUT \\\n  'https://api.mercadopago.com/v1/payments/PAYMENT_ID' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n  -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n  -d '{\n          \"transaction_amount\": 75,\n          \"capture\": true\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Pix Payment with Node.js SDK\nDESCRIPTION: Node.js implementation for creating a Pix payment using Mercado Pago's SDK. It sends a request with transaction amount, description, payment method ID set to 'pix', and the payer's email, along with an idempotency key to prevent duplicate transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pix.en.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\npayment.create({ body: {\n\ttransaction_amount: 12.34,\n\tdescription: '<DESCRIPTION>',\n\tpayment_method_id: 'pix',\n\tpayer: {\n\t\temail: '<EMAIL>'\n\t}}, requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' } \n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Request with 3DS in Node.js\nDESCRIPTION: This Node.js snippet illustrates how to utilize the Mercado Pago SDK to create a payment request that incorporates the 3DS functionality. It defines the body of the request with necessary payment details and handles request options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.en.md#2025-04-18_snippet_3\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, Payment } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ENV_ACCESS_TOKEN>' });\nconst payment = new Payment(client);\n\nconst body = {\n  transaction_amount: <TRANSACTION_AMOUNT>,\n  token: '<CARD_TOKEN>',\n  description:  '<DESCRIPTION>',\n  installments: <INSTALLMENTS_NUMBER>,\n  payment_method_id: '<PAYMENT_METHOD_ID>',\n  issuer_id: '<ISSUER_ID>',\n  payer: {\n    email: '<BUYER_EMAIL>',\n  },\n  three_d_secure_mode: 'optional'\n}\npayment.create({ body: body, requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' } }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Processing Payments with SDK (Kotlin)\nDESCRIPTION: Demonstrates how to use the SDK to process payments, including building callback URIs and launching the payment flow activity in Kotlin.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/first-steps.es.md#2025-04-18_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval paymentFlow = MPManager.paymentFlow\n\nval uriSuccess = paymentFlow.buildCallbackUri(\n   \"mercadopago://launcher_native_app\",\n   \"success\",\n   hashMapOf(\"attr\" to \"123\"),\n   \"demo_app\"\n)\n\nval uriError = paymentFlow.buildCallbackUri(\n   \"mercadopago://launcher_native_app\",\n   \"error\",\n   hashMapOf(\"attr\" to \"456\"),\n   \"demo_app\"\n)\n\npaymentFlow.launchPaymentFlowActivity(\n   amount,\n   description,\n   uriSuccess,\n   uriError,\n   context,\n   lastPaymentMethodSelected\n) { response ->\n   response.doIfError { error ->\n       error.message?.let { errorMessage -> setLayoutError(errorMessage) }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Making API Requests with mTLS Certificate Authentication\nDESCRIPTION: This curl command shows how to make API requests using the mTLS certificate and key file for authentication. It demonstrates sending a GET request to an API endpoint with proper authorization header and certificate paths.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/pix-payments/certificate-creation.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request GET \"API_ENDPOINT\" \\\n--header \"Authorization: Bearer TOKEN\" --cert PATH_TO_mTLS --key PATH_TO_KEY\n```\n\n----------------------------------------\n\nTITLE: Response for Setting Up Email Notification (JSON)\nDESCRIPTION: This JSON response is returned after successfully setting up email notification. It includes the notifier ID and other details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": {{notifier_id}},\n    \"type\": \"email\",\n    \"data\": {\n        \"recipients\": [\n            \"test@mercadolibre.com\"\n        ]\n    },\n    \"description\": null,\n    \"version\": 0,\n    \"status\": \"ACTIVE\",\n    \"is_pii_data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Methods using cURL\nDESCRIPTION: This cURL command demonstrates a REST API request to fetch payment methods. It requires an authorization header with a bearer token and sends the request to the /v1/payment_methods endpoint. Returns available payment methods as JSON.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pse-avanza.en.md#2025-04-18_snippet_6\n\nLANGUAGE: cURL\nCODE:\n```\ncurl -X GET \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/payment_methods'\n```\n\n----------------------------------------\n\nTITLE: Obtaining Client Credentials Token using Node.js in Mercado Pago API\nDESCRIPTION: This Node.js code shows how to obtain a Client Credentials token using the OAuth class. It requires client secret and client ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/creation.es.md#2025-04-18_snippet_7\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token', options: { timeout: 5000 } }); \n\nconst oauth = new OAuth(client);\n\noauth.create({\n\t'client_secret': 'your-client-secret',\n\t'client_id': 'your-client-id',\n}).then((result) => console.log(result))\n\t.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Successful Payment Response (200 OK)\nDESCRIPTION: This JSON snippet represents a successful response (HTTP status code 200) from the Mercado Pago API when using an idempotency key. It includes details about the payment, such as the ID, status, transaction amount, and associated information like payer and disbursements. The response indicates that the payment was processed successfully.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/idempotency-returns.es.md#2025-04-18_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"id\":10458724,\n   \"status\":\"approved\",\n   \"wallet_payment\":{\n      \"transaction_amount\":700.50,\n      \"description\":Payment for the purchase of furniture,\n      \"external_reference\":\"Pago_123”\n   },\n   \"payments\":[\n      {\n         \"id\":3870106238,\n         \"status\":”approved”,\n         \"status_detail\":”accredited”,\n         \"payment_type_id\":\"credit_card\",\n         \"payment_method_id\":\"visa\",\n         \"transaction_amount\":700.50,\n         \"installments\":1,\n         \"description\":\"Payment Google\",\n         \"capture\":true,\n         \"external_reference\":\"Pago_123”\n      }\n   ],\n   \"disbursements\": [\n       {\n         \"collector_id\": \"ID_COLLECTOR\"\n       }\n   ],\n   \"payer\":{\n      \"id\":786547\n   },\n   \"site_id\": \"MLM\",\n   \"binary_mode\":true,\n   \"date_created\":\"2018-10-20T09:34:20.518-04:00\",\n   \"date_last_updated\":\"2018-10-20T09:34:20.518-04:00\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Preference with MercadoPago Node.js SDK\nDESCRIPTION: This code demonstrates how to create a payment preference using MercadoPago's Node.js SDK. It initializes a client with an access token and creates a preference with a single item, specifying the item ID, title, quantity, and price.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/preferences.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token', options: { timeout: 5000 } });\n\nconst preference = new Preference(client);\n\npreference.create({ body: {\n\titems: [\n\t\t{\n\t\t\tid: '<ID>',\n\t\t\ttitle: '<title>',\n\t\t\tquantity: 1,\n\t\t\tunit_price: 100\n\t\t}\n\t],\n} }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Validating Webhook Signature in Java\nDESCRIPTION: This code snippet demonstrates how to validate the signature of a Mercado Pago webhook notification using the BCrypt algorithm in Java. It combines the transaction_id, encryption password, and generation_date to verify the authenticity of the notification.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/generate.en.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nBCrypt.checkpw(transaction_id + '-' + password_for_encryption + '-' + generation_date, payload_signature)\n```\n\n----------------------------------------\n\nTITLE: Creating SPEI Transfer Payment with Mercado Pago in Java\nDESCRIPTION: Java implementation for creating a SPEI transfer payment using Mercado Pago SDK. It configures a PaymentClient with access token, sets up payer and payment request objects with required fields, and creates the payment. Returns a payment link for the user to complete the transaction.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.en.md#2025-04-18_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  PaymentClient client = new PaymentClient();\n\n  PaymentPayerRequest payer =\n  \tPaymentPayerRequest.builder()\n  \t.type(\"customer\")\n  \t.email(request.getEmail())\n    .firstName(request.getPayerFirstName())\n    .lastName(request.getPayerLastName())\n  \t.entityType(\"individual\")\n  \t.build();\n\n  PaymentCreateRequest paymentCreateRequest = PaymentCreateRequest.builder()\n  \t.transactionAmount(new BigDecimal(5000))\n  \t.description(\"description\")\n  \t.paymentMethodId(\"clabe\")\n  \t.payer(payer)\n  \t.build();\n\n  Payment payment = client.create(paymentCreateRequest);\n  String paymentLink = payment.transactionDetails.externalResourceUrl;\n```\n\n----------------------------------------\n\nTITLE: Creating PSE Payment with cURL in Mercado Pago\nDESCRIPTION: cURL command for making a PSE bank transfer payment request. This example demonstrates a complete payment request with all required fields including transaction details, payer information, and callback URLs.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pse-avanza.es.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n-H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n-H 'Content-Type: application/json' \\\n--d '{\n    \"transaction_amount\": 5000,\n    \"description\": \"Product description\",\n    \"payment_method_id\": \"pse\",\n    \"callback_url\": \"http://www.your-site.com\",\n    \"notification_url\": \"http://www.your-site.com\",\n    \"payer\": {\n        \"email\": \"test_user_19549678@testuser.com\",\n        \"entity_type\": \"individual\",\n        \"first_name\": \"first name\",\n        \"last_name\": \"last_name\",\n        \"identification\": {\n            \"type\": \"type\",\n            \"number\": \"number\"\n        }, \n        \"address\": {\n          \"zip_code\": \"111\",\n          \"street_name\": \"street name\",\n          \"street_number\": \"street number\",\n          \"neighborhood\": \"neighborhood\",\n          \"city\": \"city\",\n          \"federal_unit\": \"federal unit\"\n        },\n        \"phone\": {\n          \"area_code\": \"area code\",\n          \"number\": \"number\"\n        }\n    },\n    \"additional_info\": {\n        \"ip_address\": \"127.0.0.1\"\n    },\n    \"transaction_details\": {\n        \"financial_institution\": \"1009\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Associating Facebook Pixel with Checkout Pro Preference in C#\nDESCRIPTION: This C# code snippet shows how to associate a Facebook Pixel ID with a Checkout Pro preference. The 'PIXEL_ID' should be replaced with the actual Facebook Pixel identifier.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Associe seu pixel do Facebook\nvar tracks = new List<PreferenceTrackRequest>\n{\n    new PreferenceTrackRequest\n    {\n        Type = \"facebook_ad\",\n        Values = new PreferenceTrackValuesRequest\n        {\n            PixelId = \"PIXEL_ID\",\n        },\n    },\n};\n\nvar request = new PreferenceRequest\n{\n    // ...\n    Tracks = tracks,\n};\n\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Testing Phone Numbers and OTP Combinations for Yape Integration\nDESCRIPTION: Table of test phone numbers and OTP codes to simulate different payment response scenarios. Each combination produces a specific payment status response that helps verify proper integration handling of various payment outcomes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.en.md#2025-04-18_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Phone Number   | OTP     | Expected status in `payments`          |\n|----------------|---------|---------------------------------------|\n| 111111111      | 123456  | `approved`                            |\n| 111111112      | 123456  | `cc_rejected_call_for_authorize`      |\n| 111111113      | 123456  | `cc_amount_rate_limit_exceeded`       |\n| 111111114      | 123456  | `cc_unsupported_unsupported`          |\n| 111111115      | 123456  | `cc_rejected_card_type_not_allowed`   |\n| 111111116      | 123456  | `cc_rejected_max_attempts`            |\n| 111111117      | 123456  | `cc_rejected_bad_filled_security_code`|\n| 111111118      | 123456  | `cc_rejected_form_error`              |\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment Value with Go\nDESCRIPTION: This code demonstrates how to create and then capture a payment using Go. It shows both the payment creation with capture set to false and the subsequent capture operation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_15\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/payment\"\n)\n\nfunc main() {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := payment.NewClient(cfg)\n\n\t// Create payment.\n\trequest := payment.Request{\n\t\tTransactionAmount: 105.1,\n\t\tPayer: &payment.PayerRequest{\n\t\t\tEmail: \"{{EMAIL}}\",\n\t\t},\n\t\tToken:        \"{{CARD_TOKEN}}\",\n\t\tInstallments: 1,\n\t\tCapture:      false,\n\t}\n\n\tresource, err := client.Create(context.Background(), request)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\t// Capture.\n\tresource, err = client.Capture(context.Background(), resource.ID)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Back URLs in Java\nDESCRIPTION: This Java snippet demonstrates how to set up `backUrls` using the `PreferenceBackUrlsRequest` builder. It defines success, pending, and failure URLs and then uses these to build a `PreferenceRequest`.  The code uses builder patterns, likely from a Mercado Pago Java SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nPreferenceBackUrlsRequest backUrls =\n// ...\n   PreferenceBackUrlsRequest.builder()\n       .success(\"https://www.seu-site/success\")\n       .pending(\"https://www.seu-site/pending\")\n       .failure(\"https://www.seu-site/failure\")\n       .build();\n\nPreferenceRequest request = PreferenceRequest.builder().backUrls(backUrls).build();\n// ...\n\n```\n\n----------------------------------------\n\nTITLE: Notification Response Handling API Endpoints\nDESCRIPTION: Collection of API endpoints for different notification types across multiple Mercado Pago regions (MPE, MCO, MLU, MLC, MLM, MLB, MLA). Used to retrieve detailed information for various event types after receiving a webhook notification.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"payment\": \"https://api.mercadopago.com/v1/payments/[ID]\",\n  \"subscription_preapproval\": \"https://api.mercadopago.com/preapproval/search\",\n  \"subscription_preapproval_plan\": \"https://api.mercadopago.com/preapproval_plan/search\",\n  \"subscription_authorized_payment\": \"https://api.mercadopago.com/authorized_payments/[ID]\",\n  \"topic_claims_integration_wh\": \"https://api.mercadopago.com/post-purchase/v1/claims/[claim_id]\",\n  \"topic_merchant_order_wh\": \"https://api.mercadopago.com/merchant_orders/[ID]\",\n  \"topic_chargebacks_wh\": \"https://api.mercadopago.com/v1/chargebacks/[ID]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Processing First Subscription Payment - PHP\nDESCRIPTION: Creates a first-time subscription payment using MercadoPago PHP SDK. Includes configuration for subscription parameters like sequence, billing period, and customer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/subscription-messaging.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse MercadoPago\\Client\\Payment\\PaymentClient;\nuse MercadoPago\\MercadoPagoConfig;\n\n\nMercadoPagoConfig::setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n$customer_client = new CustomerClient();\n$cards = $client->list(\"customer_id\");\n\n$client = new PaymentClient();\n$request_options = new RequestOptions();\n$request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n$payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['transactionAmount'],\n    \"token\" => $_POST['token'],\n    \"description\" => $_POST['description'],\n    \"installments\" => (int) $_POST['installments'],\n    \"payment_method_id\" => $_POST['paymentMethodId'],\n    \"payer\" => [\n        \"id\" => $_POST['id'],\n        \"type\" => $_POST['type']\n    ],\n    \"point_of_interaction\" => [\n    \"type\"  => $_POST['type'],\n    \"transaction_data\"  => [\n        \"first_time_use\"  => $_POST['first_time_use'],\n        \"subscription_id\"  => \"COLLECTORPADRE-SUBSCRIPCION_ID\",\n        \"subscription_sequence\" => [\n            \"number\"  => (int) $_POST['number'],\n            \"total\"  => (int) $_POST['total']\n        ],\n        \"invoice_period\"  => [\n            \"period\"  => (int) $_POST['period'],\n            \"type\" => $_POST['type']\n        ],\n        \"billing_date\" => $_POST['billing_date'],\n    ]\n]\n\n], $request_options);\necho implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Canceling Payments in Mercado Pago with cURL\nDESCRIPTION: Direct API call to cancel a payment using cURL. This requires sending a PUT request to the Mercado Pago API with the payment ID, access token, and a JSON payload setting the status to 'cancelled'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/cancel-reserve.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PUT \\\n  'https://api.mercadopago.com/v1/payments/PAYMENT_ID' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n  -d '{\"status\": \"cancelled\"}'\n```\n\n----------------------------------------\n\nTITLE: Getting Merchant Order Details with Mercado Pago API in Java\nDESCRIPTION: This code snippet shows how to retrieve the details of a merchant order using the Mercado Pago Java SDK. It initializes the MerchantOrderClient, specifies the order ID, and calls the get method of the MerchantOrderClient to fetch the order details based on the provided ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/orders.es.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n```java\n\nMerchantOrderClient client = new MerchantOrderClient();\n\nLong orderId = 123456789L;\nclient.get(orderId);\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling OAuth in Android Manifest\nDESCRIPTION: This code snippet illustrates the configuration of OAuth in the Android Manifest. It is necessary for secure information retrieval regarding the seller's account within Main Apps integration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/migrate-via-main-apps.es.md#2025-04-18_snippet_1\n\nLANGUAGE: manifest\nCODE:\n```\n<meta-data\nname='com.mercadolibre.android.sdk.OAUTH_ENABLED'\nvalue='true'>\n</meta-data>\n```\n\n----------------------------------------\n\nTITLE: Associating Facebook Ads with a Preference in Python\nDESCRIPTION: This snippet illustrates how to associate a Facebook Pixel with a created preference for conversion tracking. The preference data is modified to include a 'tracks' section where the pixel ID needs to be replaced with a valid identifier. The preference is then created using the modified data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/preferences.en.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n===\nAdd the following code in the preference and replace the <code>pixel_id</code> value with its identifier.\n===\n# Associate your Facebook Pixel\npreference_data = {\n    # ...\n    \"tracks\": [\n        {\n            \"type\": \"facebook_ad\",\n            \"values\": {\n                \"pixel_id\": \"PIXEL_ID\"\n            }\n        }\n    ]\n}\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Pending Payment Subscription with Mercado Pago API\nDESCRIPTION: Demonstrates how to create a subscription with pending payment status using curl. Requires specifying subscription details like reason, payer email, recurring frequency, and transaction amount. The `status` parameter must be set to `pending`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/subscription-no-associated-plan-pending-payments.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/preapproval' \\\n--header 'Authorization: Bearer YOU_ACCESS_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"reason\": \"Yoga classes\",\n    \"external_reference\": \"YG-1234\",\n    \"payer_email\": \"test_user_75650838@testuser.com\",\n    \"auto_recurring\": {\n        \"frequency\": 1,\n        \"frequency_type\": \"months\",\n        \"end_date\": \"2023-07-20T15:59:52.581Z\",\n        \"transaction_amount\": 10,\n        \"currency_id\": \"BRL\"\n    },\n    \"back_url\": \"https://www.yoursite.com\",\n    \"status\": \"pending\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Processing Payments with MercadoPago API in C#\nDESCRIPTION: Demonstrates using the MercadoPago API within a C# environment. The code snippet shows how to create a payment request, including sub_merchant details, and handles asynchronous processing with proper error handling.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subcredenciadores-payfacs/integration-update.en.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Config;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = 105,\n    Description = \"Título do produto\",\n    PaymentMethodId = \"visa\",\n    Token = \"879a958bbed52608607ae70bed919e13\",\n    Installments = 3,\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"test_user_24634097@testuser.com\",\n    },\n    PaymentForwardDataRequest = new PaymentForwardDataRequest\n    {\n        SubMerchant = new SubMerchant\n        {\n            SubMerchantId = \"1234\",\n            MCC = \"123\",\n            Country = \"BRA\",\n            AddressDoorNumber = \"1\",\n            Zip = \"22222222\",\n            DocumentNumber = \"22222222222222\",\n            City = \"Sao Paulo\",\n            AddressStreet = \"Rua A\",\n            LegalName = \"Legal Name\",\n            RegionCodeIso = \"BR\",\n            RegionCode = \"BR-SC\",\n            DocumentType = \"CNPJ\",\n            Phone = \"123456789\",\n            Url = \"www.nomedofacilitador.com.br\",\n        },\n    },\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\nConsole.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(payment));\n```\n\n----------------------------------------\n\nTITLE: Cancelling Payment in MercadoPago SDK - .NET\nDESCRIPTION: This snippet demonstrates how to cancel a payment using the MercadoPago SDK in .NET. It requires the MercadoPago SDK to be added as a dependency and uses an access token for authentication. The key parameters include the access token and payment ID and the expected outcome is a successful cancellation of the specified payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/cancellations.en.md#2025-04-18_snippet_0\n\nLANGUAGE: dotnet\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\nvar client = new MercadoPago.Client.Payment.PaymentClient();\nclient.Cancel(payment_id);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Notification URL - Ruby\nDESCRIPTION: This code configures a payment with a notification URL using the Mercado Pago Ruby SDK. It initializes the SDK with an access token, prepares the payment data including the notification URL, and calls the `create` method to create the payment. Status updates for the payment will be sent to the configured notification URL.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.en.md#2025-04-18_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\n\npayment_data = {\n transaction_amount: params[:transactionAmount].to_f,\n token: params[:token],\n description: params[:description],\n installments: params[:installments].to_i,\n payment_method_id: params[:paymentMethodId],\n notification_url: \"http://requestbin.fullcontact.com/1ogudgk1\",\n payer: {\n   email: params[:email],\n   identification: {----[mla, mlb, mlu, mlc, mpe, mco]----\n     type: params[:docType],------------\n     number: params[:docNumber]\n   }\n }\n}\n\n\npayment_response = sdk.payment.create(payment_data)\npayment = payment_response[:response]\n\n\nputs payment\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Buscando Pagamentos com cURL\nDESCRIPTION: Este snippet demonstra como usar a API de Busca de Pagamentos do Mercado Pago para recuperar uma lista de pagamentos. Inclui parâmetros para filtrar por status, offset e limit.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/retrieving-payments.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl -G -X GET \\\n-H \"accept: application/json\" \\\n\"https://api.mercadopago.com/v1/payments/search\" \\\n-d \"access_token=ACCESS_TOKEN\" \\\n-d \"status=approved\" \\\n-d \"offset=0\" \\\n-d \"limit=10\"\n```\n\n----------------------------------------\n\nTITLE: Displaying OAuth API Actions Table in Markdown\nDESCRIPTION: This markdown snippet creates a table showing the available OAuth actions for MercadoPago's API. It includes the action name and its description, with a focus on token creation and refresh.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/apis-map.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Action|Description|\n|---|---|\n|[Create and refresh token](https://www.mercadopago[FAKER][URL][DOMAIN]/developers/en/reference/oauth/_oauth_token/post) | To create or refresh the necessary token to operate your application in the name of a seller. |\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago API using cURL (MLA, MLB, MPE, MCO, MLU, MLC)\nDESCRIPTION: This cURL snippet (specific to MLA, MLB, MPE, MCO, MLU, MLC) demonstrates how to create a payment using the Mercado Pago API. It sends a POST request to the /v1/payments endpoint with JSON data containing transaction details, including the X-Idempotency-Key in the headers and payer identification with both 'number' and 'type' fields.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-cards.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n    -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n    'https://api.mercadopago.com/v1/payments' \\\n    -d '{\n          \"transaction_amount\": 100,\n          \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n          \"description\": \"Blue shirt\",\n          \"installments\": 1,\n          \"payment_method_id\": \"visa\",\n          \"issuer_id\": 310,\n          \"payer\": {\n            \"email\": \"PAYER_EMAIL_HERE\",\n            \"identification\": {\n                \"number\": 19119119100,\n                \"type\": \"CPF\"\n            }\n          }\n    }'\n```\n\n----------------------------------------\n\nTITLE: Finished Payment Intent Status Notification - JSON\nDESCRIPTION: This JSON object represents the 'FINISHED' state of a payment intent, indicating a successful transaction. It includes important payment details like amount, caller ID, client ID, and additional information such as external references and ticket numbers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/notifications-pdv.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"amount\": 100,\n\"caller_id\": 09876543,\n\"client_id\": 1234567890,\n\"created_at\": \"2021-11-29 17:10:37\",\n\"id\": \"abcdef123-8ab5-4139-9aa3-abcd123\",\n\"payment\": {\n  \"id\": 123456789,\n  \"state\": \"approved\",\n  \"type\": \"credit_card\"\n},\n\"state\": \"FINISHED\",\n\"additional_info\": {\n  \"external_reference\": \"information\",\n  \"ticket_number\": \"39SHDKKDJ\"\n}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"amount\": 100,\n\"caller_id\": 09876543,\n\"client_id\": 1234567890,\n\"created_at\": \"2021-11-29 17:10:37\",\n\"id\": \"abcdef123-8ab5-4139-9aa3-abcd123\",\n\"payment\": {\n  \"id\": 123456789,\n  \"state\": \"approved\",\n  \"type\": \"credit_card\"\n},\n\"state\": \"FINISHED\",\n\"additional_info\": {\n  \"external_reference\": \"information\"\n}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n \"amount\": 100,\n \"caller_id\": 09876543,\n \"client_id\": 1234567890,\n \"created_at\": \"2021-11-29 17:10:37\",\n \"id\": \"abcdef123-8ab5-4139-9aa3-abcd123\",\n \"payment\": {\n   \"id\": 123456789,\n   \"state\": \"approved\",\n   \"type\": \"credit_card\"\n },\n \"state\": \"FINISHED\",\n \"additional_info\": {\n   \"external_reference\": \"information\"\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Access Token for PHP Integration\nDESCRIPTION: This PHP snippet demonstrates how to set an access token for accessing payment methods using the Mercado Pago SDK. It initializes the SDK and retrieves available payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nMercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n$payment_methods = MercadoPago::get(\"/v1/payment_methods\");\n\n?>\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment in Python\nDESCRIPTION: Updates payment to capture partial amount using MercadoPago Python SDK. Initializes SDK and updates payment with new transaction amount.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\npayment_data = {\n    \"transaction_amount\": 75,\n    \"capture\": True\n}\n\npayment_response = sdk.payment().update(payment_id, payment_data)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Parsing Payment Response with PaymentFlow in Java\nDESCRIPTION: This Java snippet illustrates how to obtain and parse the payment response using the `parseResponse` function of the `PaymentFlow` class. It retrieves the result URI from the intent's data, parses this URI using `paymentFlow.parseResponse()`, and then checks if the `PaymentReference` is empty to determine if the transaction was successful or an error occurred.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/payment-flow-legacy-support.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nfinal PaymentFlow paymentFlow = MPManager.INSTANCE.getPaymentFlow();\n\nfinal Uri resultUri = getIntent().getData();\nfinal PaymentResponse response = paymentFlow.parseResponse(resultUri);\n\nif (!response.getPaymentReference().isEmpty()) {\n // Gerenciamento de pagamento com um resultado de sucesso\n} else {\n // Gerenciamento de pagamento com um resultado de erro\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Bank Transfer Transaction\nDESCRIPTION: POST request to process a money transfer to a specific bank account. Requires detailed transaction parameters including source and destination account information, access token, and idempotency key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    'https://api.mercadopago.com/v1/transaction-intents/process'\\\n    -H 'Content-Type: application/json' \\\n       -H 'X-Idempotency-Key: {{idempotency_key}}' \\\n       -H 'x-Signature: true' \\\n       -H 'x-enforce-signature: false' \\\n       -H 'Authorization: Bearer TEST-7434*********159-03141*********cee51edf8*********f94f589-1*********' \\\n    -d '{\n  \"external_reference\": \"MP0001\",\n  \"point_of_interaction\": \"{\\\"type\\\":\\\"PSP_TRANSFER\\\"}\",\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://exemplo.com.br/notification\"\n    }\n  },\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": 100\n        }\n      ]\n    },\n    \"to\": {\n      \"accounts\": [\n        {\n          \"type\": \"current\",\n          \"amount\": 100,\n          \"bank_id\": \"99999004\",\n          \"branch\": \"0001\",\n          \"holder\": \"Jonh Doe\",\n          \"provider_id\": \"spi\",\n          \"currency_id\": \"BRL\",\n          \"number\": \"10266732\",\n          \"owner\": {\n            \"identification\": {\n              \"type\": \"CPF\",\n              \"number\": \"1234567890\"\n            }\n          }\n        }\n      ]\n    },\n    \"total_amount\": 100\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Capturing Total Payment Value with C#\nDESCRIPTION: This code demonstrates how to capture the total value of a previously authorized payment using C#. It utilizes the PaymentClient from the Mercado Pago SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar client = new PaymentClient();\nPayment payment = await client.CaptureAsync(paymentId);\n```\n\n----------------------------------------\n\nTITLE: Adding Mercado Pago Security Script to HTML\nDESCRIPTION: This code snippet shows how to add the Mercado Pago security script to your website.  It uses the `view` attribute to specify the section of your website to which the script is being added (e.g., checkout). The script generates the Device ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/device-id.es.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\"></script>\n```\n\n----------------------------------------\n\nTITLE: Obtaining Client Credentials Token using cURL in Mercado Pago API\nDESCRIPTION: This cURL command demonstrates how to obtain a Client Credentials token by making a POST request to the Mercado Pago API. It includes client ID, client secret, and the grant type.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/creation.es.md#2025-04-18_snippet_8\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    'https://api.mercadopago.com/oauth/token'\\\n    -H 'Content-Type: application/json' \\\n    -d '{\n  \"client_id\": \"client_id\",\n  \"client_secret\": \"client_secret\",\n  \"grant_type\": \"client_credentials\",\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Proportional Billing for Subscriptions\nDESCRIPTION: Send a POST request to set up proportional billing for subscriptions by specifying the billing day and enabling proportional billing\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/payment-methods.es.md#2025-04-18_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /preapproval_plan\n{\n  \"billing_day\": 15,\n  \"billing_day_proportional\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirection URLs in MercadoPago Preference with Java\nDESCRIPTION: This Java code shows how to set up back URLs for a MercadoPago preference. It creates a PreferenceBackUrlsRequest with URLs for success, pending, and failure states, then adds it to the preference request builder.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nPreferenceBackUrlsRequest backUrls =\n// ...\n   PreferenceBackUrlsRequest.builder()\n       .success(\"https://www.seu-site/success\")\n       .pending(\"https://www.seu-site/pending\")\n       .failure(\"https://www.seu-site/failure\")\n       .build();\n\nPreferenceRequest request = PreferenceRequest.builder().backUrls(backUrls).build();\n// ...\n```\n\n----------------------------------------\n\nTITLE: Processing Payments with Mercado Pago in C#\nDESCRIPTION: The C# example outlines setting up a payment using Mercado Pago SDK with details such as amount, token, and payer information. It's designed for asynchronous processing and requires Mercado Pago's C# SDK, including relevant client and data class imports. Inputs are typically received from structured requests and results are logged with payment status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-serverside.en.md#2025-04-18_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n// ...\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n// ...\nvar paymentRequest = new PaymentCreateRequest\n{\n    TransactionAmount = 100,\n    Token = token,\n    Description = \"Blue shirt\",\n    Installments = installments,\n    PaymentMethodId = payment_method_id,\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"john@yourdomain.com\",\n    },\n};\n// Crea el pago\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest);\n// ...\n// Imprime el estado del pago\nConsole.WriteLine(payment.Status);\n// ...\n```\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\nvar paymentRequest = new PaymentCreateRequest\n{\n   TransactionAmount = decimal.Parse(Request[\"transactionAmount\"]),\n   Token = Request[\"token\"],\n   Installments = int.Parse(Request[\"installments\"]),\n   PaymentMethodId = Request[\"paymentMethodId\"],\n   Payer = new PaymentPayerRequest\n   {\n       Email = Request[\"payer\"][\"email\"],\n       Identification = new IdentificationRequest\n       {\n           Type = Request[\"payer\"][\"identification\"][\"type\"],\n           Number = Request[\"payer\"][\"identification\"][\"number\"],\n       },\n   },\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest);\n\nConsole.WriteLine(payment.Status);\n\n```\n\n----------------------------------------\n\nTITLE: Mercado Pago API JSON Response for POS Activation\nDESCRIPTION: This snippet shows the expected JSON response after successfully setting a Point device to POS mode. The response confirms the 'operating_mode' as 'PDV'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/configure-devices-pdv.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"operating_mode\": \"PDV\"\n}\n```\n\n----------------------------------------\n\nTITLE: Successful payment response from Mercado Pago API\nDESCRIPTION: This JSON response is returned when a payment is successfully processed. It includes the order ID, status, payment details, and transaction information with a processed status and accredited status detail.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"01JAQD7X1BXGY2Q59VYKRV90W8\",\n    \"type\": \"online\",\n    \"processing_mode\": \"automatic\",\n    \"external_reference\": \"ext_ref_1234\",\n    \"total_amount\": \"200.00\",\n    \"country_code\": \"BRA\",\n    \"status\": \"processed\",\n    \"status_detail\": \"accredited\",\n    \"capture_mode\": \"automatic\",\n    \"created_date\": \"2024-10-21T11:26:19.17922368Z\",\n    \"last_updated_date\": \"2024-10-21T11:26:20.923603158Z\",\n    \"integration_data\": {\n        \"application_id\": \"874202490252970\"\n    },\n    \"payer\": {\n        \"email\": \"{{EMAIL}}\"\n    },\n    \"transactions\": {\n        \"payments\": [\n            {\n                \"id\": \"pay_01JAQD7X1BXGY2Q59VYP036JDN\",\n                \"amount\": \"200.00\",\n                \"reference_id\": \"0001hyhhbz\",\n                \"status\": \"processed\",\n                \"status_detail\": \"accredited\",\n                \"payment_method\": {\n                    \"id\": \"master\",\n                    \"type\": \"credit_card\",\n                    \"token\": \"e607133fe7acf46ff35cd5f7810f7eb2\",\n                    \"installments\": 1\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Fintoc Widget with Mercado Pago\nDESCRIPTION: This code snippet initializes the Fintoc widget using the `mp.fintoc()` method provided by the Mercado Pago SDK. This initialization is a prerequisite for opening and using the Fintoc payment widget. It assumes that the `mp` object is already available in the scope, representing the Mercado Pago SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-advanced.en.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n const fintoc = mp.fintoc();\n```\n\n----------------------------------------\n\nTITLE: Setting Pix Payment Expiration Date\nDESCRIPTION: Example of setting a custom expiration date for a Pix payment using the ISO 8601 format.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/pix.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\n\"date_of_expiration\": \"2023-01-28T22:59:59.000-04:00\"\n```\n\n----------------------------------------\n\nTITLE: Processing Payments with Mercado Pago in Python\nDESCRIPTION: Python integration involves using the Mercado Pago SDK to process payments via detailed transaction and payer information. Importing the 'mercadopago' library is necessary. The script prepares payment data from request inputs and logs the payment response, particularly for extracting execution status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-serverside.en.md#2025-04-18_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\npayment_data = {\n    \"transaction_amount\": 100,\n    \"token\": token,\n    \"description\": \"Blue shirt\",\n    \"installments\": installments,\n    \"payment_method_id\": payment_method_id,\n    \"issuer_id\": issuer_id,\n    \"payer\": {\n        \"email\": \"john@yourdomain.com\"\n    }\n}\n\n# Guarda y postea el pago\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n```\n\nLANGUAGE: Python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\npayment_data = {\n   \"transaction_amount\": float(request.POST.get(\"transaction_amount\")),\n   \"token\": request.POST.get(\"token\"),\n   \"installments\": int(request.POST.get(\"installments\")),\n   \"payment_method_id\": request.POST.get(\"payment_method_id\"),\n   \"payer\": {\n       \"email\": request.POST[\"payer\"].get(\"email\"),\n       \"identification\": {\n           \"type\": request.POST[\"payer\"][\"identification\"].get(\"type\"),\n           \"number\": request.POST[\"payer\"][\"identification\"].get(\"number\")\n       }\n   }\n}\n\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n\nprint(payment)\n```\n\n----------------------------------------\n\nTITLE: Associating Facebook Ads to Preference .NET\nDESCRIPTION: This C# code snippet shows how to associate a Facebook Ads pixel to a Mercado Pago preference using the SDK. It creates a `PreferenceTrackRequest` with the type set to \"facebook_ad\" and includes the `PixelId` in the `PreferenceTrackValuesRequest`. This track is then added to the preference request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/preferences.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// Associe seu pixel do Facebook\nvar tracks = new List<PreferenceTrackRequest>\n{\n    new PreferenceTrackRequest\n    {\n        Type = \"facebook_ad\",\n        Values = new PreferenceTrackValuesRequest\n        {\n            PixelId = \"PIXEL_ID\",\n        },\n    },\n};\nvar request = new PreferenceRequest\n{\n    // ...\n    Tracks = tracks,\n};\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Deactivating Automatic Report Generation using Java\nDESCRIPTION: This Java snippet establishes an HTTPS connection to the Mercado Pago API to deactivate report generation, specifying the DELETE request method and necessary headers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.es.md#2025-04-18_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/release_report/schedule\");\\n\\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\\n\\nconnection.setRequestMethod(\"DELETE\");\\nconnection.setRequestProperty(\"Accept\", \"application/json\");\\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\\n\\nSystem.out.println(connection.getResponseCode());\\nSystem.out.println(connection.getResponseMessage());\\nSystem.out.println(connection.getInputStream());\n```\n\n----------------------------------------\n\nTITLE: Excluindo pagamento com cartão de débito no Card Payment Brick\nDESCRIPTION: Este snippet demonstra como configurar o Card Payment Brick para excluir pagamentos com cartão de débito. A configuração é feita através da propriedade customization.paymentMethods.types.excluded.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/configure-payment-methods.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nsettings = {\n  ...,\n  customization: {\n    paymentMethods: {\n      types:{\n        excluded: ['debit_card']\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Payment Method Details JSON Response\nDESCRIPTION: This JSON snippet illustrates the structure of a successful payment response from Mercado Pago. It includes details about the payment status, payment method, and associated rules like discounts, fines, and interests.  The `external_resource_url` provides a link to the payment ticket.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 123456789,\n  \"status\": \"pending\",\n  \"status_detail\": \"pending_waiting_payment\",\n  \"payment_method\": {\n    \"id\": \"bolbradesco\",\n    \"type\": \"ticket\",\n    \"data\": {\n      \"rules\": {\n        \"discounts\": [\n          {\n            \"value\": 1,\n            \"type\": \"fixed\",\n            \"limit_date\": \"2022-12-12\"\n          }\n        ],\n        \"fine\": {\n          \"value\": 2,\n          \"type\": \"percentage\"\n        },\n        \"interest\": {\n          \"value\": 0.03,\n          \"type\": \"percentage\"\n        }\n      }\n    }\n  },\n  \"transaction_details\": {\n    \"net_received_amount\": 0,\n    \"total_paid_amount\": 100,\n    \"overpaid_amount\": 0,\n    \"external_resource_url\": \"https://www.mercadopago.com.br/payments/123456789/ticket?caller_id=123456&hash=e10c4695-49a0-475e-8adc-29a8055b9167\",\n    \"installment_amount\": 0,\n    \"financial_institution\": null,\n    \"payment_method_reference_id\": \"1234567890\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Transaction Info Response (MLC)\nDESCRIPTION: This JSON snippet shows a sample response from the Mercado Pago API when querying transaction information in Chile (MLC). It includes details such as creation date, external reference, ID, status, and transaction specifics.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_date\": \"2021-01-01T00:00:00.000Z\",\n  \"external_reference\": \"123456\",\n  \"id\": \"0d5020ed\",\n  \"last_updated_date\": \"2021-01-01T00:00:00.000Z\",\n  \"point_of_interaction\": {\n    \"type\": \"{\\\"type\\\":\\\"PSP_TRANSFER\\\"}\"\n  },\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://example.cl/notification\"\n    }\n  },\n  \"status\": \"approved\",\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": \"100,00\"\n        }\n      ]\n    },\n    \"paid_amount\": 100,\n    \"payer\": {\n      \"id\": 123456543\n    },\n    \"refunded_amount\": 1,\n    \"to\": {\n      \"accounts\": [\n        {\n          \"amount\": \"100,00\",\n          \"origin_id\": \"01AAAM001A1AY43FBR8WCM9CES\",\n          \"status_details\": [\n            {}\n          ],\n          \"owner\": {\n            \"identification\": {\n              \"number\": \"1234567890\",\n              \"type\": \"RUT\"\n            }\n          },\n          \"bank_id\": \"0000014\",\n          \"type\": \"checking_account\",\n          \"number\": \"123456\"\n        }\n      ]\n    },\n    \"total_amount\": 100,\n    \"statement_descriptor\": \"test\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting PIX Payment Expiration Date in Mercado Pago\nDESCRIPTION: Example of setting the date_of_expiration field for a PIX payment in ISO 8601 format. By default, PIX payments expire after 24 hours, but this can be customized with a recommended minimum of 30 minutes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/pix.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\n\"date_of_expiration\": \"2023-01-28T22:59:59.000-04:00\"\n```\n\n----------------------------------------\n\nTITLE: Get Payment Methods (V2)\nDESCRIPTION: JavaScript code demonstrating how to retrieve payment methods using Mercado Pago SDK V2 using async/await. The `getPaymentMethods()` method is called with an object containing the bin, and the results are accessed using the `results` property from the resolved promise.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getPaymentMethods(data) {\n    const { bin } = data\n    const { results } = await mp.getPaymentMethods({ bin });\n        // O id do payment estará em results[0].id\n    …\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Total Payment Value with Python\nDESCRIPTION: This snippet shows how to capture the total value of a previously authorized payment using the Mercado Pago Python SDK. It updates the payment to set the capture flag to true.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\npayment_data = { \"capture\": True }\npayment_response = sdk.payment().update(payment_id, payment_data)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Payment Form (MLM, MLA, MPE, MCO, MLU, MLC)\nDESCRIPTION: HTML form for capturing payer information in Spanish-speaking regions. Includes fields for name, surname, email, document type, and document number, along with hidden fields for transaction amount and description.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n  <form id=\"form-checkout\" action=\"/process_payment\" method=\"post\">\n    <div>\n      <div>\n        <label for=\"payerFirstName\">Nombre</label>\n        <input id=\"form-checkout__payerFirstName\" name=\"payerFirstName\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"payerLastName\">Appelido</label>\n        <input id=\"form-checkout__payerLastName\" name=\"payerLastName\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"email\">E-mail</label>\n        <input id=\"form-checkout__email\" name=\"email\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"identificationType\">Tipo de documento</label>\n        <select id=\"form-checkout__identificationType\" name=\"identificationType\" type=\"text\"></select>\n      </div>\n      <div>\n        <label for=\"identificationNumber\">Número del documento</label>\n        <input id=\"form-checkout__identificationNumber\" name=\"identificationNumber\" type=\"text\">\n      </div>\n    </div>\n\n    <div>\n      <div>\n        <input type=\"hidden\" name=\"transactionAmount\" id=\"transactionAmount\" value=\"100\">\n        <input type=\"hidden\" name=\"description\" id=\"description\" value=\"Nome do Produto\">\n        <br>\n        <button type=\"submit\">Pagar</button>\n      </div>\n    </div>\n  </form>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Link Button for SPEI Transfers\nDESCRIPTION: HTML anchor element that creates a button redirecting users to complete their SPEI bank transfer payment. The link targets a MercadoPago URL where users can view payment instructions and complete the transaction.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.es.md#2025-04-18_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://www.mercadopago.com.mx/payments/51096146182/ticket?caller_id=34728475&hash=f3a8630a-f06a-48e4-b2a6-f95750af7346\" target=\"_blank\">Pagar con Transferencias SPEI</a>\n```\n\n----------------------------------------\n\nTITLE: PGP Public Key for Secure Card Data Migration\nDESCRIPTION: Public PGP key provided by Mercado Pago for encrypting card data files before uploading to their SFTP server during the migration process. This key ensures secure transfer of sensitive payment information in compliance with PCI regulations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/pci-migration-pgp.en.md#2025-04-18_snippet_0\n\nLANGUAGE: pgp\nCODE:\n```\n===\nMigration key\n===\n-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQINBGMp/zABEAD2EDijQyA42FsQ/84C4VJ0gW8jWmXZqdZrmcZ/oALJOHZaybig\ns/edgdmfe07NR0VZSxKJJ3gvqjr0UFWfqwDUw49a6ez85EowX73rAoIqTMQPMCA3\na5kkkG4UhFDBIAclpzD1IqfInhIBsAxMwgAo1YTkgS/XPG9ih16qszkCUHB6ccAX\nSRyIoYW4dDHkaOQVLFruSEwVZLZAkTgOvwMXmSTfcf0O8pq6L1iarvor2azg/Lk+\nVmya3K3aIAm0mzyiSJf61+7FQ7EoBuNpFi7j5K3KwEmo+0yu2erQkvrJ/WaYnylL\nfOK4D7yMOxbe52IwvR+zO/r0ncKdHL2MIQEGDrM/Gvan4mQ/FpS5kTW+2tx+P1AR\nuj28Ql/tZkLndY5DK6SI7j1frXII4mXer/dZgT9l0vdH+NzAWb4QcbbQmm+Q7lCo\nTfmkzIrSGMlNeMFuAj2LWKoj80opxcv9y2dC7UF8TI4jgIVISasM+wF4B8RX9Pvu\nVK+1fdZkgD16h/b9/gk0CbNI+gQtEBx/3E4BPisCTNgYbCGMkYcV3Ah6ROSuQ6i0\nqvG29jZSZqIPmD3m+biIEusb51q+I5BlZrhX+MFf/CvgLQ06Sg18sYkzVK44tGbp\nsgd0hjk4sFY9Ptb8GYUBHO56xx0zI3YE7tXN+QbP5H0GfY+PMPg++lmybQARAQAB\ntDBhbGx1Z2F0b3IgPG1wLnNlY3JldG1hbmFnZW1lbnRAbWVyY2Fkb2xpYnJlLmNv\nbT6JAlEEEwEIADsWIQQlKxogEAPOMTjssJeQ+ppb6oJkKAUCYyn/MAIbAwULCQgH\nAgIiAgYVCgkICwIEFgIDAQIeBwIXgAAKCRCQ+ppb6oJkKI3oEACDNIBxHg79MRH/\nNoFFjFxMkX4Pd/FdCLIk2GlPEhHo2+3gsZ0D3xZEk0qX0/zmrwKHuinLD/mX72pc\nwh30VX731edRBTxoAU+n6HY7WrHZm5yZptAU11QDPO1LQGBFs8f1+xTZ3CuY6QF9\n0a8M4j4+h68LGy1X1PulSHYPlEubudizeB4pFexu/1DuZojsJXDEAqdr4B470ZAq\n4QedEiGth1cprHhJia5jJ6Wjn6mtTALWt8v7GmBgLSF0BcgN1D85Qm08Fsk5k/Ef\niZz7DBOhe93gKUo3QZMjsMINLfKp5US6vCWb7efhqGJkG4L18n17tgvhdIPS1nB/\nGvcjDpA+X6NolT011mG3CbL0ncplmTNVObSd7bp8SvGiRDt/LQ9kNTPyUyhnlOwc\n7ml44dOZ4eXoKv3ooDoHpbTbRql3gnjd3ZOENv95uZOz0thE1pAtQXgHjZfzsTeJ\nxPIKa++6UyscmD6U10SO2t7NlzZc111nEhc/uC8/PHmGcM4WXjLqqNJJV1ullXUs\n7tMX+TQKve8nx/5JY3KhlicZfu2qshSb5OInrTYBxhbLxuyuuXUebB/05G9OArcL\nVauSkLYgcv705UFHi0D3Amlb/GobP22YQGctBeap1dfE26r9M+gfSASrb2qBdXRW\nvTuatWquL/sMyGd5woBtQQS4LwtEObkCDQRjKf8wARAA1CLE+wWnxDOjXQ1JSdvi\n1QxA/y7K4/KGTHJoyFFWAXmc7IJkGZaRnwz+GLPGfs9X25sEltaf4PBOpZvrLVId\neQhweQy9yW1TZnhal0LoND5jm48MdTE4/H+t/vWO0SmVqm5veyelYmSgYxvF43ae\nPWgRBOErGsUVy46dYLjd2rAh/0O3QZ6BjJB4ykgIycg9TEnMAgWXQ8qz+zVEmxhc\n1AbybdqkLnza8rt88d+Pk+WN4RVz3uImevB84ZhRjmF4QnKC1+x0AVTETHVp4shP\n7l7sJLwR9zIBHABz4S/YdcfRgZbEVrGAjr58FCbOTaG8sfbaDJsVaVz8HPCMcMSl\nDPbxFaYi/EBcqO9cGehKoXoMWO5IcNJ+gS/Aj1vh/mxaDjw1jjYoest/A445DfAV\nJnvs4x9cLF5KPlm4qplLmOpVg/yroryvWqdzEBz+NK176G2nOALY3NG/DsGQVVN0\nqVuIvZUGVZDaHxMy6StwfC5BpGdGZmCZt0P+oiUU/bByUDBRGkLL+ZnnKwmAbdII\nOkP6Q+OpuxucQA+I1AVYF0xT1clz0bLJ19OC4DM6ZvinJSSbBwe77cMHr2/8Uunr\n/yjOADv9DHNvHd0q66uCoCaykUHy6QDHq7xneVZJR0CT3AQA4+vAKbxvsZzLuvJc\nx02I+ANN9UN996ufVtTotVcAEQEAAYkCNgQYAQgAIBYhBCUrGiAQA84xOOywl5D6\nmlvqgmQoBQJjKf8wAhsMAAoJEJD6mlvqgmQoEIQP/3SwoaUlv4aSjPgr9uZX1C4+\nNjh5w3mTzzA8vf0hTC2XmzSK0KsghJITyeZ7wkm+PIwyR/dCeU53v5g2S1JUd3Wh\nkigKkySgPFEcRil3PDN1RbIF4gjHQTPc1vXLROEiYiuaFUO6ZFKgVk2B3KSI5YH6\n50Ha05C6r2rcxTaBYCBOzESAoD2um6OBGL2O6t//meQ+iVal7ffU0dFens29XYot\nyOedPHPAjcCIUBvYmoQQTA5SuOCTEb1WmpPkfTjhA/gWCyh/5WsyZ/P/avyz7hQ0\nrYYffsTQMuN83SATelon6evClY19QlokeljM6y7dpvovArOicJNnuaA9UIuU451c\ni5lb3gKwSF7vCm+RdXkfCdiQbbAqZqwv21SaWRvBgER6zR/rhI7BFQ4bdPhjzcfn\nCOLpc8kdpQP4SYg+b2K8s1XPEIdTRJuMJfGx6q10e8pqGYpGnBj+dvi0HkjzmFxe\nFmOb2+jSs+yh6/JteQQWttZdABwdjoOktKM0OhVgrXrVpFxnODcVtC7WneUjkpvg\nDZADqKS7pkKqpNQWb5Tv4SZmIk3ZYpttvu6JeuV+x7BPqcHTo7eGOV7VsMKZtr+6\niQAEkudX5oY4RK9l10D1jXFYb1d4FA8ah/zUSpyH3BI9A6B86gM/LLrj5TY6pu2I\nrt+/GYfDo9OZVgr6eupH\n=e+ov\n\n-----END PGP PUBLIC KEY BLOCK-----\n```\n\n----------------------------------------\n\nTITLE: Initializing Card Payment Brick with Identification in React\nDESCRIPTION: This React code snippet shows how to set up the initialization object for the Card Payment Brick, including the payer's identification details. The payer document field will be pre-filled when valid information is provided.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/initialize-data-on-the-bricks.en.md#2025-04-18_snippet_3\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst initialization = {\n ...,\n payer: {\n   ...,\n   identification: {\n     type: 'string',\n     number: 'string',\n   },\n },\n};\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Payment Intent Status\nDESCRIPTION: This JSON object represents a typical response from the payment intent status query. It includes transaction details, payment method information, and formatted data for printing receipts.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/api-query-payment-intent.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"ESTADO\": \"APROBADO\",\n   \"TOTAL\": \"46900\",\n   \"PROPINA\": \"0\",\n   \"MEDIO_PAGO\": \"DEBITO\",\n   \"CODAUT\": \"231403\",\n   \"FECHA&HORA\": \"20230905&214300\",\n   \"MENSAJE_VISOR\": \"APROBADO (00)\",\n   \"DATOS_ADQUIRENCIA_CLIENTE\": {\n       \"RETAILER_ID\": \"61000010\",\n       \"FECHA&HORA\": \"20230905&214300\",\n       \"TERMINAL\": \"102\",\n       \"NUM_TARJETA\": \"********5706\",\n       \"TOTAL\": \"46900\",\n       \"PROPINA\": \"0\",\n       \"NUM_OPER\": \"00000108\",\n       \"COD_AUTO\": \"231403\",\n       \"NUM_UNICO\": \"255207\",\n       \"TIPO_TARJETA\": \"DEBITO\",\n       \"TIPO_LECTURA\": \"C-DB\"\n   },\n   \"DATOS_ADQUIRENCIA_CLIENTE_IMPRIMIR\": \"{s}61000010 -    2.62.03          TARJETA DE DEBITO{/s}{br}{s}05/09/2023    21:43:00                      102{/s}{br}{s}********5706    {s} C-DB{br}{s}MONTO COMPRA                             $46.900{/s}{br}{s}TOTAL                                   $ 46.900{/s}{br}{s}NUM OPER    00000108       COD AUTO       231403{/s}{br}{s}NUMERO UNICO                              255207{/s}{br}{center}{s}ACEPTO PAGAR SEGUN CONTRATO CON EMISOR{/s}\",\n   \"DATOS_ADQUIRENCIA_COMERCIO\": {\n       \"RETAILER_ID\": \"61000010\",\n       \"FECHA&HORA\": \"20230905&214300\",\n       \"TERMINAL\": \"102\",\n       \"NUM_TARJETA\": \"********5706\",\n       \"TOTAL\": \"46900\",\n       \"PROPINA\": \"0\",\n       \"NUM_OPER\": \"00000108\",\n       \"COD_AUTO\": \"231403\",\n       \"NUM_UNICO\": \"255207\"\n   },\n   \"DATOS_ADQUIRENCIA_COMERCIO_IMPRIMIR\": \"{center}COMPROBANTE DE VENTA{br}{center}TARJETA DE DEBITO{br}{br}{center}{s}REDELCOM{/s}{br}{center}{s}COYANCURA 2241, SANTIAGO{/s}{br}{center}{s}61000010 - 2.62.03{/s}{br}{br}{s}FECHA         HORA                     TERMINAL{/s}{br}{s}05/09/2023    21:43:00                      102{/s}{br}{br}{s}NUMERO DE TARJETA   NUM DE CUENTA    C-DB{/s}{br}{s}********5706          {/s}{br}{s}MONTO COMPRA                             $46.900{/s}{br}{s}PROPINA                                       $0{/s}{br}{s}TOTAL                                   $ 46.900{/s}{br}{s}NUMERO DE OPERACION    :                00000108{/s}{br}{s}CODIGO DE AUTORIZACION :                  231403{/s}{br}{s}NUMERO UNICO :                            255207{/s}{br}{center}{s}ORIGINAL COMERCIO{/s}{br}{center}{s}ACEPTO PAGAR SEGUN CONTRATO CON EMISOR{/s}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creando un pago con Fintoc en Python\nDESCRIPTION: Este snippet ilustra cómo crear un pago con Fintoc como método de pago en Python. Configura el SDK de Mercado Pago, define los detalles del pago y procesa la solicitud.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-simplified.es.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"YOUR_ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n    \"description\": \"Titulo del producto\",\n    \"payer\": {\n        \"email\": \"test_user_123@testuser.com\",\n    },\n    \"payment_method_id\": \"fintoc\",\n    \"transaction_amount\": 5000,\n    \"callback_url\": \"https://www.your-site.com\",\n    \"point_of_interaction\": {\n        \"type\": \"CHECKOUT\",\n        \"sub_type\": \"INTER_PSP\"\n    },\n}\n\npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Back URLs in Java\nDESCRIPTION: This Java code snippet demonstrates how to configure back URLs for a MercadoPago preference. It uses a PreferenceBackUrlsRequest builder to set success, pending, and failure URLs.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nPreferenceBackUrlsRequest backUrls =\n// ...\n   PreferenceBackUrlsRequest.builder()\n       .success(\"https://www.seu-site/success\")\n       .pending(\"https://www.seu-site/pending\")\n       .failure(\"https://www.seu-site/failure\")\n       .build();\n\nPreferenceRequest request = PreferenceRequest.builder().backUrls(backUrls).build();\n// ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Refund Details\nDESCRIPTION: Demonstrates how to fetch details of a specific refund for a given payment using PaymentRefundClient. Requires both payment ID and refund ID as parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/refunds.es.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nPaymentRefundClient client = new PaymentRefundClient();\n\nLong paymentId = 123456789L;\nLong refundId = 1234L;\nclient.get(paymentId, refundId);\n```\n\n----------------------------------------\n\nTITLE: Creating Apparel Industry Preferences with MercadoPago API\nDESCRIPTION: API request example for creating preferences with apparel industry specific fields including detailed item information, buyer data, and shipping details. Includes additional fields like picture_url and authentication_type specific to apparel purchases.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/industry-data/additional-info.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/checkout/preferences' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--data-raw '{\n    \"auto_return\": \"approved\",\n    \"back_urls\": {\n        \"failure\": \"https://www.mercadopago.com/home/failure\",\n        \"pending\": \"https://www.mercadopago.com/home/pending\",\n        \"success\": \"https://www.mercadopago.com/home/success\"\n    },\n    \"notification_url\": \"https://webhook.site/xyz\",\n    \"expires\": false,\n    \"external_reference\": \"order-123\",\n    \"date_of_expiration\": \"2025-03-12T12:58:41.425-04:00\",\n    \"items\": [\n        {\n            \"id\": \"1234\",\n            \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n            \"title\": \"Product\",\n            \"picture_url\": \"\",\n            \"description\": \"Product Description\",\n            \"type\": \"test\",\n            \"category_id\": \"fashion\",\n            \"quantity\": 1,\n            \"unit_price\": 150\n        }\n    ],\n    \"payer\": {\n        \"phone\": {\n            \"area_code\": \"11\",\n            \"number\": \"[FAKER][PHONE_NUMBER][CELL_PHONE]\"\n        },\n        \"address\": {\n            \"zip_code\": \"[FAKER][ADDRESS][ZIP_CODE]\",\n            \"street_name\": \"[FAKER][ADDRESS][STREET_NAME]\",\n            \"street_number\": 1000\n        },\n        \"identification\": {\n          \"identification_type\": \"[FAKER][IDENTIFICATION][TYPE]\",\n          \"identification_number\": \"12345678\"\n        },\n        \"email\": \"john@yourdomain.com\",\n        \"first_name\": \"[FAKER][NAME][FIRST_NAME]\",\n        \"last_name\": \"[FAKER][NAME][LAST_NAME]\",\n        \"date_created\": \"\",\n        \"authentication_type\": \"Facebook\",\n        \"registration date\": \"2015-06-02T12:58:41.425-04:00\",\n        \"is_prime_user\": false,\n        \"is_first_purchase_online\": false,\n        \"last_purchase\": \"2020-01-02T12:58:41.425-04:00\"\n    },\n    \"payment_methods\": {\n        \"excluded_payment_methods\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"default_installments\": null,\n        \"default_payment_method_id\": null,\n        \"excluded_payment_types\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"installments\": null\n    },\n    \"shipments\": {\n        \"mode\": \"not_specified\",\n        \"receiver_address\": {\n            \"zip_code\": \"[FAKER][ADDRESS][ZIP_CODE]\",\n            \"street_name\": \"[FAKER][ADDRESS][STREET_NAME]\",\n            \"city_name\": \"[FAKER][ADDRESS][CITY]\",\n            \"state_name\": \"[FAKER][ADDRESS][STATE]\",\n            \"street_number\": 1000\n        },\n        \"express_shipment\": false\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Canceling Payments in Mercado Pago with Java\nDESCRIPTION: Code to cancel a payment using the Mercado Pago Java SDK. This requires setting the access token and creating a payment client to cancel a payment by its ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/cancel-reserve.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n\nLong paymentId = 123456789L;\n\nPaymentClient client = new PaymentClient();\nclient.cancel(paymentId);\n```\n\n----------------------------------------\n\nTITLE: Initiating Payment Request to Mercado Pago API using curl\nDESCRIPTION: This code snippet demonstrates how to make a POST request to the Mercado Pago API to initiate a transaction. It requires the Access Token for authorization and sends transaction details in JSON format, including parameters like transaction amount, payer information, and additional info such as shipper details. The curl command is executable in a shell environment, making it crucial for server-side payment integrations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/si-transactions-via-checkout-transparente.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'Authorization: Bearer {{ACCESS_TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"transaction_amount\": 100,\n    \"installments\": 1,\n    \"statement_descriptor\": \"Seller's store\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": \"{{ID of your Mercado Pago account related to your platform}}\",\n    \"payment_method_id\": \"master\",\n    \"token\": \"{{CARD_TOKEN_ID}}\",\n    \"external_reference\": \"Platform identifier\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"description\": \"Seller's product description\",\n    \"payer\": {\n        \"first_name\": \"Name. Example: John\",\n        \"last_name\": \"Last name. Example: Jones\",\n        \"email\": \"Example: test_user_1677270314@testuser.com\",\n        \"identification\": {\n            \"type\": \"Document type. Example: CPF\",\n            \"number\": \"Document number. Example: 19119119100\"\n        },\n        \"address\": {\n            \"zip_code\": \"Zip code. Example: 06233-200\",\n            \"street_name\": \"Street name. Example: Av. das Nações Unidas\",\n            \"street_number\": \"Number. Example: 3003\",\n            \"neighborhood\": \"Neighborhood. Example: Bonfim\",\n            \"city\": \"City. Example: Osasco\",\n            \"federal_unit\": \"Federal unit. Example: SP\"\n        }\n    },\n    \"additional_info\": {\n        \"referral_url\": \"Referral URL. Example: www.sellertest123.com\",\n        \"drop_shipping\": true,\n        \"delivery_promise\": \"2022-11-20\",\n        \"contrated_plan\": \"premium\",\n        \"items\": [\n            {\n                \"id\": \"1941\",\n                \"title\": \"Seller's product\",\n                \"description\": \"Description of the seller's product\",\n                \"picture_url\": null,\n                \"category_id\": \"Category. Example: electronics\",\n                \"quantity\": 1,\n                \"unit_price\": 100.00\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Name. Example: John\",\n            \"last_name\": \"Last name. Example: Jones\",\n            \"is_prime_user\": \"1\",\n            \"is_first_purchase_online\": \"1\",\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"Area code. Example: 11\",\n                \"number\": \"Telephone number. Example: 987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"Zip code. Example: 06233-200\",\n                \"street_name\": \"Street name. Example: Av. das Nações Unidas\",\n                \"street_number\": \"Number. Example: 3003\"\n            },\n            \"registration_date\": \"2013-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"0\",\n            \"pick_up_on_seller\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"Zip code. Example: 95630000\",\n                \"street_name\": \"Street name. Example: São Luiz\",\n                \"street_number\": \"Street number. Example: 15\",\n                \"floor\": \"Floor (in case it is an apartment). Example: Second\",\n                \"apartment\": \"Apartment number (in case it is an apartment). Example: 93\"\n            }\n        }\n    }\n }'\n```\n\n----------------------------------------\n\nTITLE: Canceling a MercadoPago Payment Reservation in Go\nDESCRIPTION: This code snippet demonstrates how to cancel a payment reservation in MercadoPago using Go. It requires the MercadoPago SDK, an access token, and a payment ID. The code sets up the configuration, initializes a new payment client and calls the Cancel method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/cancel-reserve.es.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/payment\"\n)\n\nfunc main() {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\n\tclient := payment.NewClient(cfg)\n\n\tresource, err := client.Cancel(context.Background(), <PAYMENT_ID>)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\n----------------------------------------\n\nTITLE: Zero Dollar Auth with cURL\nDESCRIPTION: cURL command for implementing Zero Dollar Auth functionality with Mercado Pago to validate credit or debit cards without charging the customer. This implementation uses a special header and zero transaction amount.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Card-Validation: card_validation' \\\n--data-raw '{\n    \"token\": \"TOKEN\",\n    \"payment_method_id\": \"master\",\n    \"payer\": {\n        \"id\": \"{{customer_id}}\",\n        \"type\" : \"customer\",\n    },\n    \"description\": \"validação de cartão com valor zero dollar\",\n    \"transaction_amount\": 0\n}'\n```\n\n----------------------------------------\n\nTITLE: HMAC Signature Verification in Go\nDESCRIPTION: This Go code snippet implements HMAC signature verification for Mercado Pago notifications within an HTTP handler. It retrieves signature parameters from the request headers and query parameters, constructs a manifest string, and uses the `crypto/hmac` and `crypto/sha256` packages to generate and compare the HMAC signature.  The code expects `x-signature` and `x-request-id` headers, and a `data.id` query parameter.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/notifications.en.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"crypto/hmac\"\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// Obtain the x-signature value from the header\n\t\txSignature := r.Header.Get(\"x-signature\")\n\t\txRequestId := r.Header.Get(\"x-request-id\")\n\n\t\t// Obtain Query params related to the request URL\n\t\tqueryParams := r.URL.Query()\n\n\t\t// Extract the \"data.id\" from the query params\n\t\tdataID := queryParams.Get(\"data.id\")\n\n\t\t// Separating the x-signature into parts\n\t\tparts := strings.Split(xSignature, \",\")\n\n\t\t// Initializing variables to store ts and hash\n\t\tvar ts, hash string\n\n\t\t// Iterate over the values to obtain ts and v1\n\t\tfor _, part := range parts {\n\t\t\t// Split each part into key and value\n\t\t\tkeyValue := strings.SplitN(part, \"=\", 2)\n\t\t\tif len(keyValue) == 2 {\n\t\t\t\tkey := strings.TrimSpace(keyValue[0])\n\t\t\t\tvalue := strings.TrimSpace(keyValue[1])\n\t\t\t\tif key == \"ts\" {\n\t\t\t\t\tts = value\n\t\t\t\t} else if key == \"v1\" {\n\t\t\t\t\thash = value\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Get secret key/token for specific user/application from Mercadopago developers site\n\t\tsecret := \"your_secret_key_here\"\n\n\t\t// Generate the manifest string\n\t\tmanifest := fmt.Sprintf(\"id:%v;request-id:%v;ts:%v;\", dataID, xRequestId, ts)\n\n\t\t// Create an HMAC signature defining the hash type and the key as a byte array\n\t\thmac := hmac.New(sha256.New, []byte(secret))\n\t\thmac.Write([]byte(manifest))\n\n\t\t// Obtain the hash result as a hexadecimal string\n\t\tsha := hex.EncodeToString(hmac.Sum(nil))\n\nif sha == hash {\n    // HMAC verification passed\n    fmt.Println(\"HMAC verification passed\")\n} else {\n    // HMAC verification failed\n    fmt.Println(\"HMAC verification failed\")\n}\n\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Payments with SmartPOS SDK in Java\nDESCRIPTION: This Java snippet demonstrates how to use the SmartPOS SDK for processing payments. It shows how to build callback URIs and launch the payment flow activity.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/first-steps.en.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nPaymentFlow paymentFlow = MPManager.INSTANCE.getPaymentFlow();\n\nHashMap<String, String> metadata = new HashMap<>();\n\nUri uriSuccess = paymentFlow.buildCallbackUri(\n \"mercadopago://launcher_native_app\",\n \"success\",\n metadata,\n \"demo_app\"\n);\n\nUri uriError = paymentFlow.buildCallbackUri(\n \"mercadopago://launcher_native_app\",\n \"error\",\n metadata,\n \"demo_app\"\n);\n\nFunction1<MPResponse, Unit> callback = (MPResponse response) -> {\n return;\n};\n\npaymentFlow.launchPaymentFlowActivity(\n \"1\",\n \"My Payment Description\",\n uriSuccess,\n uriError,\n getApplicationContext(),\n \"credit\",\n callback\n);\n```\n\n----------------------------------------\n\nTITLE: Searching Customers by Email in Node.js\nDESCRIPTION: Node.js implementation for searching a customer by email using Mercado Pago's SDK. It imports the necessary objects, configures the client with an access token, and performs the search operation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/search-customers.en.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nimport { Customer, MercadoPagoConfig } from '@src/index';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\nconst customer = new Customer(client);\n\ncustomer.search({ options: { email: '<EMAIL>' } }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Listing Customer Cards with Go\nDESCRIPTION: Retrieves the list of customer cards using the Go SDK. It initializes a new client with the access token, and calls the List method with the context and customer ID to retrieve the cards.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/get-cards-list.en.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/customercard\"\n)\n\nfunc main() {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := customercard.NewClient(cfg)\n\n\tresources, err := client.List(context.Background(), \"<CUSTOMER_ID>\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfor _, v := range resources {\n\t\tfmt.Println(v)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Mercado Pago Security Script in HTML\nDESCRIPTION: This snippet shows how to add the Mercado Pago security script to a webpage to collect the Device ID. It's recommended to add this to the checkout page and other relevant pages.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"home\"></script>\n```\n\n----------------------------------------\n\nTITLE: Updating Event Configuration via PUT Request in curl\nDESCRIPTION: This snippet illustrates how to modify an existing event configuration using a PUT request. It includes mandatory parameters such as type, data (period, value, hour), description, structure_id, and notifiers. The request updates the event frequency and associated details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/modifications.en.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request PUT 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/events/{{event_id}}' \\\n--header 'Authorization: Bearer {{TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"type\": \"frequency\",\n    \"data\": {\n        \"period\": \"daily\",\n        \"value\": 0,\n        \"hour\": 0\n    },\n    \"description\": \"test event\",\n    \"structure_id\": {{structure_id}},\n    \"notifiers\": [{{notifier_id}}],\n    \"status\": \"ACTIVE\",\n    \"version\": 0\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating PagoEfectivo Payment Request\nDESCRIPTION: Code examples showing how to create a payment request for PagoEfectivo using different SDK implementations. Includes required parameters like transaction amount, payment method ID, and payer information. Requires API access token and idempotency key header.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mpe.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\Client\\Common\\RequestOptions;\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['transactionAmount'],\n    \"token\" => $_POST['token'],\n    \"description\" => $_POST['description'],\n    \"installments\" => $_POST['installments'],\n    \"payment_method_id\" => $_POST['paymentMethodId'],\n    \"issuer_id\" => $_POST['issuer'],\n    \"payer\" => [\n      \"email\" => $_POST['email'],\n      \"first_name\" => $_POST['payerFirstName'],\n      \"last_name\" => $_POST['payerLastName'],\n      \"identification\" => [\n        \"type\" => $_POST['identificationType'],\n        \"number\" => $_POST['number']\n      ]\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nimport { Payment, MercadoPagoConfig } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\n\npayment.create({\n    body: { \n        transaction_amount: req.transaction_amount,\n        token: req.token,\n        description: req.description,\n        installments: req.installments,\n        payment_method_id: req.paymentMethodId,\n        issuer_id: req.issuer,\n            payer: {\n            email: req.email,\n            identification: {\n        type: req.identificationType,\n        number: req.number\n    }}},\n    requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n.then((result) => console.log(result))\n.catch((error) => console.log(error));\n```\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\nPaymentCreateRequest paymentCreateRequest =\n   PaymentCreateRequest.builder()\n       .transactionAmount(new BigDecimal(\"100\"))\n       .description(\"Product title\")\n       .paymentMethodId(\"pagoefectivo_atm\")\n       .payer(\n          PaymentPayerRequest.builder()\n              .email(\"test@test.com\").build()\n       )\n\t.metadata(\n          Map.of(\"payment_mode\", \"online\")\n       )\n      .build();\nclient.create(paymentCreateRequest, requestOptions);\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_request = {\n  transaction_amount: 100,\n  description: 'Product title',\n  payment_method_id: 'pagoefectivo_atm',\n  payer: {\n    email: 'test@test.com',\n  },\n  metadata: {\n    payment_mode: 'online',\n  }\n}\npayment_response = sdk.payment.create(payment_request, custom_request_options)\npayment = payment_response[:response]\n```\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n    \"transaction_amount\": 100,\n    \"description\": \"Product title\",\n    \"payment_method_id\": \"pagoefectivo_atm\",\n    \"payer\": {\n        \"email\": \"test@test.com\",\n    },\n    \"metadata\": {\n        \"payment_mode\": \"online\",\n    }\n}\npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n    'https://api.mercadopago.com/v1/payments' \\\n    -d '{\n      \"transaction_amount\": 100,\n      \"description\": \"Product title\",\n      \"payment_method_id\": \"pagoefectivo_atm\",\n      \"payer\": {\n        \"email\": \"PAYER_EMAIL_HERE\",\n      },\n\"metadata\": {\n        \"payment_mode\": \"online\",\n      }\n    }'\n```\n\n----------------------------------------\n\nTITLE: Creating Customer and Card with MercadoPago SDK in Python\nDESCRIPTION: The Python snippet uses the MercadoPago SDK to create a customer and associate a card using an access token. It wraps customer and card data in dictionaries, followed by invoking the 'create' methods respectively.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/create-customer-and-card.en.md#2025-04-18_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport market\nsdk = Mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\ncustomer_data = {\n\"email\": \"test_payer_12345@testuser.com\"\n}\ncustomer_response = sdk.customer().create(customer_data)\ncustomer = customer_response[\"response\"]\n\ncard_data = {\n\"token\": \"9b2d63e00d66a8c721607214cedaecda\",\n\"payment_method_id\": \"visa\"\n}\ncard_response = sdk.card().create(customer[\"id\"], card_data)\ncard = card_response[\"response\"]\n\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth Token in PHP\nDESCRIPTION: Initializes a new OAuth token for a Mercado Pago application using client credentials and authorization code. Requires client secret, client ID, authorization code, and redirect URI.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/oauth.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new OauthClient();\n   $request = new OAuthCreateRequest();\n     $request->client_secret = \"CLIENT_SECRET\";\n     $request->client_id = \"CLIENT_ID\";\n     $request->code = \"CODE\";\n     $request->redirect_uri = \"REDIRECT_URI\";\n\n  $client->create($request);\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating SFTP Notifier via PUT Request in curl\nDESCRIPTION: This snippet illustrates how to modify an existing SFTP notifier using a PUT request. It includes mandatory parameters such as type, data (ip, port, password, protocol, username, remote_dir), and description. The request updates the SFTP notification settings.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/modifications.en.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request PUT 'https://api.mercadopago.com/v1/reports/notifiers/{{notifier_id}}?type=ftp' \\\n--header 'Authorization: Bearer {{TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"type\": \"ftp\",\n    \"data\": {\n        \"ip\": \"test.files.com\",\n        \"port\": 22,\n        \"password\": \"test\",\n        \"protocol\": \"SFTP\",\n        \"username\": \"test@mercadolibre.com\",\n        \"remote_dir\": \"/\"\n    },\n    \"description\": \"test notifier sftp\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Install MercadoPago.js SDK using React\nDESCRIPTION: This snippet shows the command used to install the MercadoPago.js SDK in a React project using npm. It adds the `@mercadopago/sdk-react` package to the project's dependencies. This step is essential for using the Mercado Pago components in a React application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/add-sdk-and-initialize.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @mercadopago/sdk-react\n```\n\n----------------------------------------\n\nTITLE: Personalizando la Variable de Salida del Device ID\nDESCRIPTION: Personaliza el nombre de la variable que almacenará el Device ID utilizando el atributo output en el script de seguridad de Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-chopro.es.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\" output=\"deviceId\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Yape Payment in PHP\nDESCRIPTION: PHP implementation for creating a Yape payment using MercadoPago SDK with token, transaction amount, and payer details\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nMercadoPagoConfig::setAccessToken(\"ENV_ACCESS_TOKEN\");\n    \n$client = new PaymentClient();\n\n$createRequest = [\n  \"description\" => \"Titulo del producto\",\n  \"installments\" => 1,\n  \"payer\" => [\n     \"email\" => \"test_user_123@testuser.com\",\n  ],\n  \"payment_method_id\" => \"yape\",\n  \"token\" => \"ff8080814c11e237014c1ff593b57b4d\",\n  \"transaction_amount\" => 5000,\n];\n\n$client->create($createRequest, $request_options);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Charges with MercadoPago API\nDESCRIPTION: Implementation for creating payment charges using a generated card token and customer ID. Includes transaction amount, installments, and payer information configuration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.en.md#2025-04-18_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $customer_client = new CustomerClient();\n  $cards = $client->list(\"customer_id\");\n  \n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => 100.0,\n    \"token\" => $cards[0]-> token,\n    \"description\" => \"My product\",\n    \"installments\" => 1,\n    \"payment_method_id\" => \"visa\",\n    \"issuer_id\" => \"123\",\n    \"payer\" => [\n      \"type\" => \"customer\",\n      \"id\" => \"1234\"\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerClient = new Customer(client);\n\ncustomerClient.listCards({ customerId: '<CUSTOMER_ID>' })\n\t.then((result) => {\n\n  const payment = new Payment(client);\n\n  const body = {\n    transaction_amount: 100,\n    token: result[0].token,\n    description: 'My product',\n    installments: 1,\n    payment_method_id: 'visa',\n    issuer_id: 123,\n    payer: {\n      type: 'customer',\n      id: '123'\n  }\n};\n\n  payment.create({ body: body }).then((result) => console.log(result));\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Intent Filter in AndroidManifest.xml\nDESCRIPTION: This XML snippet configures an intent filter in the `AndroidManifest.xml` file of the Android application. It specifies that the activity should be able to handle intents with the `android.intent.action.SEND` action, belong to the `android.intent.category.DEFAULT` category, and accept data with the MIME type `text/*`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/cross-platform-flutter.en.md#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n\"<intent-filter> \n\t<action android:name=\\\"android.intent.action.SEND\\\" /> \n\t<category android:name=\\\"android.intent.category.DEFAULT\\\" /> \n\t<data android:mimeType=\\\"text/*\\\" /> \n</intent-filter>\n\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Payment Brick with JavaScript and HTML\nDESCRIPTION: This JavaScript code snippet demonstrates how to render the Payment Brick using the Mercado Pago bricksBuilder.create method. It initializes settings with amount, preference ID, payment methods, and callback functions for onReady, onSubmit, and onError events. The HTML code provides the container where the Payment Brick will be rendered.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/default-rendering.en.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst renderPaymentBrick = async (bricksBuilder) => {\n const settings = {\n   initialization: {\n     /*\n      \"amount\" is the total amount to be paid by all means of payment with the exception of the Mercado Pago Account and Installment without a credit card, which have their processing value determined in the backend through the \"preferenceId\"\n     */\n     amount: 100,\n     preferenceId: \"<PREFERENCE_ID>\",\n   },\n   customization: {\n     paymentMethods: {\n       ticket: \"all\",\n       creditCard: \"all\",\n       prepaidCard: \"all\",\n       debitCard: \"all\",\n       mercadoPago: \"all\",\n     },\n   },\n   callbacks: {\n     onReady: () => {\n       /*\n        Callback called when Brick is ready.\n        Here you can hide loadings from your site, for example.\n       */\n     },\n     onSubmit: ({ selectedPaymentMethod, formData }) => {\n       // callback called when clicking the submit data button\n       return new Promise((resolve, reject) => {\n         fetch(\"/process_payment\", {\n           method: \"POST\",\n           headers: {\n             \"Content-Type\": \"application/json\",\n           },\n           body: JSON.stringify(formData),\n         })\n           .then((response) => response.json())\n           .then((response) => {\n             // receive payment result\n             resolve();\n           })\n           .catch((error) => {\n             // handle error response when trying to create payment\n             reject();\n           });\n       });\n     },\n     onError: (error) => {\n       // callback called for all Brick error cases\n       console.error(error);\n     },\n   },\n };\n window.paymentBrickController = await bricksBuilder.create(\n   \"payment\",\n   \"paymentBrick_container\",\n   settings\n );\n};\nrenderPaymentBrick(bricksBuilder);\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with Reserved Values in Java\nDESCRIPTION: Implements a payment with capture=false using Mercado Pago's Java SDK. Sets up a payment request with transaction amount, token, and other required parameters to reserve the value without immediate capture.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/make-value-reserve.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest request =\n   PaymentCreateRequest.builder()\n       .transactionAmount(new BigDecimal(\"100\"))\n       .token(\"ff8080814c11e237014c1ff593b57b4d\")\n       .description(\"Título do produto\")\n       .installments(1)\n       .paymentMethodId(\"visa\")\n       .payer(PaymentPayerRequest.builder().email(\"test_user_19653727@testuser.com\").build())\n       .capture(false)\n       .build();\n\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Form for Pix\nDESCRIPTION: Implements a comprehensive HTML form for collecting customer payment information, including personal details and transaction data\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pix.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form id=\"form-checkout\" action=\"/process_payment\" method=\"post\">\n  <div>\n    <div>\n      <label for=\"payerFirstName\">Nome</label>\n      <input id=\"form-checkout__payerFirstName\" name=\"payerFirstName\" type=\"text\">\n    </div>\n    <div>\n      <label for=\"payerLastName\">Sobrenome</label>\n      <input id=\"form-checkout__payerLastName\" name=\"payerLastName\" type=\"text\">\n    </div>\n    <div>\n      <label for=\"email\">E-mail</label>\n      <input id=\"form-checkout__email\" name=\"email\" type=\"text\">\n    </div>\n    <div>\n      <label for=\"identificationType\">Tipo de documento</label>\n      <select id=\"form-checkout__identificationType\" name=\"identificationType\" type=\"text\"></select>\n    </div>\n    <div>\n      <label for=\"identificationNumber\">Número do documento</label>\n      <input id=\"form-checkout__identificationNumber\" name=\"identificationNumber\" type=\"text\">\n    </div>\n  </div>\n\n  <div>\n    <div>\n      <input type=\"hidden\" name=\"transactionAmount\" id=\"transactionAmount\" value=\"100\">\n      <input type=\"hidden\" name=\"description\" id=\"description\" value=\"Nome do Produto\">\n      <br>\n      <button type=\"submit\">Pagar</button>\n    </div>\n  </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Data Using getAdditionalData Method in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the getAdditionalData method to access additional data when not using the native submit button of the Brick. It includes error handling and logging of the retrieved data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/additional-data.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: Javascript\nCODE:\n```\n// variável onde o controller do Brick está salvo\ncardPaymentBrickController.getAdditionalData()\n        .then((additionalData) => {\n            console.log(\"Additional data:\", additionalData);\n        })\n        .catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Creating Product Checkout Preferences with cURL\nDESCRIPTION: This snippet demonstrates sending a POST request to the Mercado Pago API using cURL to establish checkout preferences. It includes JSON data about the transaction, such as item and buyer details, back URLs for different transaction outcomes, payment method preferences, and expiration settings. Proper Mercado Pago API access token is required. The operation results in setting up a transaction preference within the API for further actions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/industry-data/additional-info.en.md#2025-04-18_snippet_9\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/checkout/preferences' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--data-raw '{\n    \"auto_return\": \"approved\",\n    \"back_urls\": {\n        \"failure\": \"https://www.mercadopago.com/home/failure\",\n        \"pending\": \"https://www.mercadopago.com/home/pending\",\n        \"success\": \"https://www.mercadopago.com/home/success\"\n    },\n    \"notification_url\": \"https://webhook.site/xyz\",\n    \"expires\": false,\n    \"external_reference\": \"order-123\",\n    \"date_of_expiration\": \"2025-03-12T12:58:41.425-04:00\",\n    \"items\": [\n        {\n            \"id\": \"1234\",\n            \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n            \"title\": \"Product\",\n            \"picture_url\": \"\",\n            \"category_id\": \"others\",\n            \"quantity\": 1,\n            \"unit_price\": 150\n            \n        }\n    ],\n    \"payer\": {\n        \"phone\": {\n            \"area_code\": \"11\",\n            \"number\": \"[FAKER][PHONE_NUMBER][CELL_PHONE]\"\n        },\n        \"address\": {\n            \"zip_code\": \"[FAKER][ADDRESS][ZIP_CODE]\",\n            \"street_name\": \"[FAKER][ADDRESS][STREET_NAME]\",\n            \"street_number\": 1000\n        },\n        \"identification\": {\n          \"identification_type\": \"[FAKER][IDENTIFICATION][TYPE]\",\n          \"identification_number\": \"12345678\"\n        },\n        \"email\": \"john@yourdomain.com\",\n        \"name\": \"[FAKER][NAME][FIRST_NAME]\",\n        \"surname\": \"[FAKER][NAME][LAST_NAME]\",\n        \"date_created\": \"\",\n        \"authentication_type\": \"Facebook\",\n        \"registration date\": \"2015-06-02T12:58:41.425-04:00\",\n        \"is_prime_user\": false,\n        \"is_first_purchase_online\": false,\n        \"last_purchase\": \"2020-01-02T12:58:41.425-04:00\"\n    },\n    \"payment_methods\": {\n        \"excluded_payment_methods\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"default_installments\": null,\n        \"default_payment_method_id\": null,\n        \"excluded_payment_types\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"installments\": null\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Fetching Document Types with MercadoPago.js\nDESCRIPTION: JavaScript function that retrieves available identification types from MercadoPago API and populates the form's document type dropdown. Uses an IIFE for immediate execution and includes error handling.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n    (async function getIdentificationTypes() {\n      try {\n        const identificationTypes = await mp.getIdentificationTypes();\n        const identificationTypeElement = document.getElementById('form-checkout__identificationType');\n\n        createSelectOptions(identificationTypeElement, identificationTypes);\n      } catch (e) {\n        return console.error('Error getting identificationTypes: ', e);\n      }\n    })();\n\n    function createSelectOptions(elem, options, labelsAndKeys = { label: \"name\", value: \"id\" }) {\n      const { label, value } = labelsAndKeys;\n\n      elem.options.length = 0;\n\n      const tempOptions = document.createDocumentFragment();\n\n      options.forEach(option => {\n        const optValue = option[value];\n        const optLabel = option[label];\n\n        const opt = document.createElement('option');\n        opt.value = optValue;\n        opt.textContent = optLabel;\n\n        tempOptions.appendChild(opt);\n      });\n\n      elem.appendChild(tempOptions);\n    }\n```\n\n----------------------------------------\n\nTITLE: Listing Payment Methods in Go\nDESCRIPTION: Go implementation for listing available payment methods using Mercado Pago's client. This example demonstrates how to create a new payment method client with configuration and list all available payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_29\n\nLANGUAGE: go\nCODE:\n```\naccessToken := \"{{ACCESS_TOKEN}}\"\n\n\ncfg, err := config.New(accessToken)\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nclient := paymentmethod.NewClient(cfg)\n\n\nresources, err := client.List(context.Background())\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nfor _, v := range resources {\n   fmt.Println(v)\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Money Out Transaction Request with cURL - Mexico Example\nDESCRIPTION: This cURL command sends a POST request to the MercadoPago API to process a money out transaction in Mexico, using the specified Access Token, targeting a particular bank account. Parameters include transaction amount, bank identification, notification URL, and account holder information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.en.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\\n  --url https://api.mercadopago.com/v1/transaction-intents/process \\\n  --header 'Authorization: Bearer TEST-6133*********794-11121*********edd13abd8*********82868e9-1*********' \\\n  --header 'content-type: application/json' \\\n  --header 'x-enforce-signature: false' \\\n  --data '{\n  \"external_reference\": \"12345\",\n  \"point_of_interaction\": {\n    \"type\": \"PSP_TRANSFER\"\n  },\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://example.mx/notification\"\n    }\n  },\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": 25\n        }\n      ]\n    },\n    \"to\": {\n      \"total_amount\": 25,\n      \"accounts\": [\n        {\n          \"amount\": 25,\n          \"bank_id\": \"646\",\n          \"number\": \"646180110400000007\",\n          \"holder\": \"JUAN JOSE MARIA\",\n          \"type\": \"savings_account\",\n          \"description\": \"envio de 25\"\n        }\n      ]\n    },\n    \"total_amount\": 25\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Exemplo de Resposta JSON para Pagamento com Efecty\nDESCRIPTION: Exemplo de resposta JSON após a criação de um pagamento via Efecty, mostrando o status pendente e a URL externa para instruções de pagamento que pode ser usada para redirecionamento.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n[\n {\n    ...,\n    \"id\": 5466310457,\n    \"status\": \"pending\",\n    \"status_detail\": \"pending_waiting_payment\",\n    ...,\n    \"transaction_details\": {\n        \"payment_method_reference_id\": \"24308386\",\n        \"verification_code\": \"24308386\",\n        \"net_received_amount\": 0,\n        \"total_paid_amount\": 5000,\n        \"overpaid_amount\": 0,\n        \"external_resource_url\": \"https://www.mercadopago.com/mco/payments/sandbox/ticket/helper?payment_id=1234&payment_method_reference_id=12345678&caller_id=1234&hash=aaaaaa-bbb-cccc-dddd-eeeeeeee\",\n        \"installment_amount\": 0,\n        \"financial_institution\": \"\",\n        \"payable_deferral_period\": null,\n        \"acquirer_reference\": null\n   }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago Go SDK\nDESCRIPTION: This snippet demonstrates how to create a payment using the Mercado Pago Go SDK. It requires the MercadoPago Go SDK. It creates a payment request object with transaction details, including transaction amount, token, payment method ID, and payer information, and then sends the payment creation request to the Mercado Pago API using the client.Create method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.es.md#2025-04-18_snippet_9\n\nLANGUAGE: go\nCODE:\n```\naccessToken := \"{{ACCESS_TOKEN}}\"\n\n\ncfg, err := config.New(accessToken)\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nclient := payment.NewClient(cfg)\n\n\nrequest := payment.Request{\n   TransactionAmount: <transaction_amount>,\n   Token: <token>,\n   Description: <description>,\n   PaymentMethodID:   <paymentMethodId>,\n   Payer: &payment.PayerRequest{\n      Email: <email>,\n      Identification: &payment.IdentificationRequest{\n         Type: <type>,\n         Number: <number>,\n      },\n   },\n}\n\n\nresource, err := client.Create(context.Background(), request)\nif err != nil {\n   fmt.Println(err)\n}\n\n\nfmt.Println(resource)\n\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Bancário Payment with Discounts, Fines, and Interest using cURL\nDESCRIPTION: This cURL command demonstrates how to create a boleto bancário payment with discounts, fines, and interest using the Mercado Pago API. It includes the payment details, payer information, and payment rules for discounts, fines, and interest in the request body.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"transaction_amount\": 100,\n    \"date_of_expiration\": \"2022-12-24T15:37:48.000-03:00\",\n    \"payment_method_id\": \"bolbradesco\",\n    \"description\": \"Titulo do produto\",\n    \"payer\": {\n        \"first_name\": \"Test\",\n        \"last_name\": \"User\",\n        \"email\": \"test_user_123456@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"19119119100\"\n        }\n    },\n    \"payment_method\": {\n        \"data\": {\n            \"rules\": {\n                \"discounts\": [\n                    {\n                        \"value\": 5,\n                        \"type\": \"fixed\",\n                        \"limit_date\": \"2022-12-10\"\n                    }\n                ],\n                \"fine\": {\n                    \"value\": 2,\n                    \"type\": \"percentage\"\n                },\n                \"interest\": {\n                    \"value\": 0.03,\n                    \"type\": \"percentage\"\n                }\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creando Pagos con Efecty en Java usando MercadoPago SDK\nDESCRIPTION: Código Java que ilustra cómo crear un pago con Efecty utilizando el SDK de MercadoPago. Incluye la configuración de encabezados personalizados para la idempotencia y la creación de la solicitud de pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mco.es.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\nPaymentCreateRequest paymentCreateRequest =\n   PaymentCreateRequest.builder()\n       .transactionAmount(new BigDecimal(\"100\"))\n       .description(\"Product title\")\n       .paymentMethodId(\"efecty\")\n       .payer(\n          PaymentPayerRequest.builder()\n              .email(\"test@test.com\").build()\n       )\n\t.metadata(\n          Map.of(\"payment_mode\", \"online\")\n       )\n      .build();\nclient.create(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Processing Pix Refunds with MercadoPago API in Java\nDESCRIPTION: Java implementation for refunding a payment with the MercadoPago SDK. This example demonstrates setting up a client with custom headers including the X-Render-In-Process-Refunds header to handle in-process refunds properly.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentRefundClient client = new PaymentRefundClient();\n\nMap<String, String> customHeaders = new HashMap<>();\ncustomHeaders.put(\"X-Render-In-Process-Refunds\", \"true\");\n\nMPRequestOptions requestOptions = MPRequestOptions.builder()\n   .customHeaders(customHeaders)\n   .build();\n\nPaymentRefund refund = client.refund(paymentId, new BigDecimal(20), requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Brick Appearance - JavaScript\nDESCRIPTION: This code snippet demonstrates how to set customization properties for the Wallet Brick component using JavaScript. It includes settings for theme, value proposition, and styles such as border radius and padding.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/change-appearance.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n        theme:'dark',\n        customStyle: {\n            valueProp: 'practicality',\n            valuePropColor: 'black',\n            borderRadius: '10px',\n            verticalPadding: '10px',\n            horizontalPadding: '10px',\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with C#\nDESCRIPTION: This C# snippet creates a preference object using the Mercado Pago SDK.  It defines the `Purpose` as `wallet_purchase` and contains a product `Item` with a title, quantity, currency and unit price.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.pt.md#2025-04-18_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n// Cria o objeto de request da preferência\nvar request = new PreferenceRequest\n{\n  // o Purpose = 'wallet_purchase', permite apenas pagamentos logados\n  // para permitir pagamentos como guest, você pode omitir essa propriedade\n    Purpose = \"wallet_purchase\",\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"Meu produto\",\n            Quantity = 1,\n            CurrencyId = \"BRL\",\n            UnitPrice = 75,\n        },\n    },\n};\n \n// Cria a preferência usando o client\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment with MercadoPago SDK (PHP)\nDESCRIPTION: This PHP snippet initializes a payment using the MercadoPago SDK. It sets the access token, defines payment parameters like transaction amount, token, description, installments, payment method ID, issuer ID, and payer email. It then saves the payment and prints its status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php  \n    require_once 'vendor/autoload.php';\n\n    MercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n    //...\n    $payment = new MercadoPago\\Payment();\n    $payment->transaction_amount = 100;\n    $payment->token = $token;\n    $payment->description = \"Blue shirt\";\n    $payment->installments = $installments;\n    $payment->payment_method_id = $payment_method_id;\n    $payment->issuer_id = $issuer_id;\n    $payment->payer = array(\n    \"email\" => \"john@yourdomain.com\"\n    );\n    // Guarda y postea el pago\n    $payment->save();\n    //...\n    // Imprime el estado del pago\n    echo $payment->status;\n    //...\n?>\n```\n\n----------------------------------------\n\nTITLE: Response for Manually Generating Reports (JSON)\nDESCRIPTION: This JSON response shows the result of manually generating an on-demand report. It includes the status code, request ID, and a message field.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.en.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status_code\": 201,\n    \"request_id\": {{statement_id}},\n    \"message\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Criando pagamento PagoEfectivo ATM com Ruby\nDESCRIPTION: Código Ruby para integrar pagamentos via PagoEfectivo ATM com o SDK do Mercado Pago. Inclui configuração de headers personalizados para idempotência e os parâmetros necessários para o processamento da transação.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mpe.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_request = {\n  transaction_amount: 100,\n  description: 'Product title',\n  payment_method_id: 'pagoefectivo_atm',\n  payer: {\n    email: 'test@test.com',\n  },\n  metadata: {\n    payment_mode: 'online',\n  }\n}\npayment_response = sdk.payment.create(payment_request, custom_request_options)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Setting Access Token for Mercado Pago in Ruby\nDESCRIPTION: This snippet initializes the Mercado Pago SDK with the access token and retrieves the available payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\npayment_methods_response = sdk.payment_methods.get()\npayment_methods = payment_methods_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Generating HMAC Signature in Python\nDESCRIPTION: A Python code snippet that demonstrates how to create an HMAC SHA-256 signature in hexadecimal format using hashlib, hmac, and binascii modules to validate Mercado Pago webhook notifications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.en.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport hashlib, hmac, binascii\n\ncyphedSignature = binascii.hexlify(hmac_sha256(secret.encode(), signedTemplate.encode()))\n```\n\n----------------------------------------\n\nTITLE: Processing Pix Refunds in Go\nDESCRIPTION: Go implementation for creating a refund using the MercadoPago SDK. This code initializes the configuration with an access token, creates a refund client, and processes a refund for a specific payment ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.en.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/refund\"\n)\n\nfunc main() {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := refund.NewClient(cfg)\n\n\tresource, err := client.Create(context.Background(), <PAYMENT_ID>)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\n----------------------------------------\n\nTITLE: Criando pagamento PagoEfectivo ATM com PHP\nDESCRIPTION: Código PHP para criar um pagamento com método PagoEfectivo ATM utilizando o SDK do Mercado Pago. Inclui a configuração do cabeçalho de idempotência e os parâmetros necessários para o processamento do pagamento.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mpe.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\Client\\Common\\RequestOptions;\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['transactionAmount'],\n    \"token\" => $_POST['token'],\n    \"description\" => $_POST['description'],\n    \"installments\" => $_POST['installments'],\n    \"payment_method_id\" => $_POST['paymentMethodId'],\n    \"issuer_id\" => $_POST['issuer'],\n    \"payer\" => [\n      \"email\" => $_POST['email'],\n      \"first_name\" => $_POST['payerFirstName'],\n      \"last_name\" => $_POST['payerLastName'],\n      \"identification\" => [\n        \"type\" => $_POST['identificationType'],\n        \"number\" => $_POST['number']\n      ]\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with Idempotency Key in Mercado Pago API\nDESCRIPTION: This curl request demonstrates how to create a payment using Mercado Pago's API with an idempotency key to prevent duplicate transactions. The request includes the necessary headers for authentication and idempotency, along with payment details such as amount, description, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/idempotency.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'X-Idempotency-Key: IDEMPOTENCY_KEY' \\\n    -H 'Authorization: Bearer ACCESS_TOKEN'\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    'https://api.mercadopago.com/v1/advanced_payments' \\\n    -d '{\n        \"wallet_payment\":{\n           \"transaction_amount\":700.50,\n           \"description\":\"Payment Description\",\n           \"external_reference\":\"Pago_123\"     \n        },\n       \"payer\":{\n           \"token\":\"PAYER_TOKEN\",\n           \"type_token\": \"wallet-token\"\n        }\n      }'\n```\n\n----------------------------------------\n\nTITLE: Customizing Device ID Variable Name in HTML\nDESCRIPTION: This code snippet demonstrates how to customize the JavaScript variable name for the Device ID. By adding the `output` attribute to the security script, you can specify a different variable name (e.g., `deviceId`) instead of the default `MP_DEVICE_SESSION_ID`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/device-id.es.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n  <script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\" output=\"deviceId\"></script>\n```\n\n----------------------------------------\n\nTITLE: Process Payment with All Buyer Discount in Mercado Pago\nDESCRIPTION: This snippet demonstrates how to process a payment with a discount campaign applied to all buyers using the Mercado Pago API. It includes the `campaign_id` and `coupon_amount` from the discount campaign. This API call creates a payment with the discount applied.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/discount-campaigns.en.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST -H 'accept: application/json' \n-H 'content-type: application/json' \\\n-H 'Authorization: Bearer ACCESS_TOKEN' \\\nhttps://api.mercadopago.com/v1/payments \\\n-d '{\n    \"transaction_amount\": 299.99,\n    \"description\": \"Title of what you are paying for\",\n    \"payment_method_id\": \"master\",\n    \"payer\":{\n        \"email\": \"test_user_85556797@testuser.com\"\n    },\n    \"campaign_id\": 1118,\n    \"coupon_amount\": 30\n}'\n```\n\n----------------------------------------\n\nTITLE: Searching Merchant Orders in Java\nDESCRIPTION: Search and filter merchant orders using various parameters like status, preference ID, application ID, payer ID, and site ID. Supports flexible query configuration with Mercado Pago SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/orders.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMerchantOrderClient client = new MerchantOrderClient();\n\nMap<String, Object> filters = new HashMap<>();\nfilters.put(\"status\", \"closed\");\nfilters.put(\"preference_id\", \"12123adfasdf123u4u\");\nfilters.put(\"application_id\", \"10000000000000000\");\nfilters.put(\"payer_id\", \"123\");\nfilters.put(\"external_reference\", \"default\");\nfilters.put(\"site_id\", \"MLA\");\n\nMPSearchRequest searchRequest =\n   MPSearchRequest.builder().limit(0).offset(0).filters(filters).build();\n\nclient.search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Payment Response Example (JSON)\nDESCRIPTION: This JSON snippet illustrates the structure of a successful payment response from the Mercado Pago API. It includes details such as payment ID, dates, status, amounts, payer information, metadata, additional information, transaction details, fee details, card information, and notification URL.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.en.md#2025-04-18_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 3637181430,\n    \"date_created\": \"2018-04-17T09:26:39.000-04:00\",\n    \"date_approved\": \"2018-04-17T09:26:40.000-04:00\",\n    \"date_last_updated\": \"2018-04-17T09:26:40.000-04:00\",\n    \"date_of_expiration\": null,\n    \"money_release_date\": \"2018-04-29T09:26:40.000-04:00\",\n    \"operation_type\": \"regular_payment\",\n    \"issuer_id\": \"160\",\n    \"payment_method_id\": \"visa\",\n    \"payment_type_id\": \"credit_card\",\n    \"status\": \"approved\",\n    \"status_detail\": \"accredited\",\n    \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n    \"description\": \"Title of what you are paying for\",\n    \"live_mode\": true,\n    \"sponsor_id\": null,\n    \"authorization_code\": \"1234567\",\n    \"money_release_schema\": null,\n    \"counter_currency\": {\n        \"currency_id\": \"USD\",\n        \"rate\": 18.22539135,\n        \"amount\": 4.99,\n        \"amount_refunded\": 0\n    },\n    \"collector_id\": 307467332,\n    \"payer\": {\n        \"type\": \"guest\",\n        \"id\": null,\n        \"email\": \"test_user_33759716@testuser.com\",\n        \"identification\": {\n            \"type\": \"RFC\",\n            \"number\": \"800825569\"\n        },\n        \"phone\": {\n            \"area_code\": \"01\",\n            \"number\": \"1111-1111\",\n            \"extension\": \"\"\n        },\n        \"first_name\": \"Test\",\n        \"last_name\": \"Test\",\n        \"entity_type\": null\n    },\n    \"metadata\": {\n        \"key2\": \"value2\",\n        \"key1\": \"value1\"\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"item-ID-1234\",\n                \"title\": \"Title of what you are paying for\",\n                \"description\": \"Item description\",\n                \"picture_url\": \"https://www.mercadopago.com/org-img/MP3/home/logomp3.gif\",\n                \"category_id\": \"others\",\n                \"quantity\": \"1\",\n                \"unit_price\": \"100\"\n            }\n        ],\n        \"payer\": {\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"4444-4444\"\n            },\n            \"address\": {\n                \"zip_code\": \"5700\",\n                \"street_name\": \"Street\",\n                \"street_number\": \"123\"\n            },\n            \"first_name\": \"user-name\",\n            \"last_name\": \"user-surname\"\n        },\n        \"shipments\": {\n            \"receiver_address\": {\n                \"zip_code\": \"5700\",\n                \"street_name\": \"Street\",\n                \"street_number\": \"123\",\n                \"floor\": \"4\",\n                \"apartment\": \"C\"\n            }\n        }\n    },\n    \"order\": {},\n    \"external_reference\": \"Reference_1234\",\n    \"transaction_amount\": 100,\n    \"transaction_amount_refunded\": 0,\n    \"coupon_amount\": 0,\n    \"differential_pricing_id\": null,\n    \"deduction_schema\": null,\n    \"transaction_details\": {\n        \"net_received_amount\": 90.96,\n        \"total_paid_amount\": 100,\n        \"overpaid_amount\": 0,\n        \"external_resource_url\": null,\n        \"installment_amount\": 100,\n        \"financial_institution\": null,\n        \"payment_method_reference_id\": \"1234567\",\n        \"payable_deferral_period\": null,\n        \"acquirer_reference\": null\n    },\n    \"fee_details\": [\n        {\n            \"type\": \"mercadopago_fee\",\n            \"amount\": 9.04,\n            \"fee_payer\": \"collector\"\n        }\n    ],\n    \"captured\": true,\n    \"binary_mode\": false,\n    \"call_for_authorize_id\": null,\n    \"statement_descriptor\": \"MERCADOPAGO\",\n    \"installments\": 1,\n    \"card\": {\n        \"id\": null,\n        \"first_six_digits\": \"494133\",\n        \"last_four_digits\": \"9283\",\n        \"expiration_month\": 12,\n        \"expiration_year\": 2020,\n        \"date_created\": \"2018-04-17T09:26:39.000-04:00\",\n        \"date_last_updated\": \"2018-04-17T09:26:39.000-04:00\",\n        \"cardholder\": {\n            \"name\": \"APRO\",\n            \"identification\": {\n                \"number\": null,\n                \"type\": null\n            }\n        }\n    },\n    \"notification_url\": \"https://www.your-site.com/webhooks\",\n    \"refunds\": [],\n    \"processing_mode\": \"aggregator\",\n    \"merchant_account_id\": null,\n    \"acquirer\": null,\n    \"merchant_number\": null,\n    \"acquirer_reconciliation\": []\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Back URLs and Auto Return in Mercado Pago with C#\nDESCRIPTION: This code snippet demonstrates how to set the `BackUrls` and `AutoReturn` properties in C# using the Mercado Pago SDK. `BackUrls` is an instance of `PreferenceBackUrlsRequest` which sets the success, failure, and pending URLs. `AutoReturn` enables automatic redirection for approved payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/redirection.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar request = new PreferenceRequest\n{\n    // ...\n    BackUrls = new PreferenceBackUrlsRequest\n    {\n        Success = \"https://www.tu-sitio/success\",\n        Failure = \"http://www.tu-sitio/failure\",\n        Pending = \"http://www.tu-sitio/pendings\",\n    },\n    AutoReturn = \"approved\",\n};\n```\n\n----------------------------------------\n\nTITLE: Including Sponsor ID in Mercado Pago Payment Requests\nDESCRIPTION: This snippet shows how to include the Sponsor ID in a payment request. The sponsor_id field should contain the Mercado Pago account ID of the platform partner.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/what-is-sponsor-id.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\n\"sponsor_id\": \"(ID Conta MP da plataforma)\"\n```\n\n----------------------------------------\n\nTITLE: Create Payment Request with cURL for Mercado Pago\nDESCRIPTION: This cURL command demonstrates how to create a payment request to Mercado Pago's API, including headers for content type, idempotency, authorization, and session ID. The request body contains details about the transaction, payer, items, shipping information, and metadata.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/home-and-deco.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}} \\\n--data-raw '{ \n    \"transaction_amount\": 150.00,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"debvisa\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Pedido01\",\n    \"description\": \"PEDIDO NOVO\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"payer\": {\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"12345678909\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"title\": \"Serviço\",\n                \"warranty\": true,\n                \"description\": \"Descrição de serviço\",\n                \"category_id\": \"kitchen\",\n                \"quantity\": 1,\n                \"unit_price\": 150\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_prime_user\": true,\n            \"is_first_purchase_online\": true,\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"206233-2002\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"3003\"\n            },\n            \"authentication_type\": \"Facebook\",\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"306233-2003\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"3003\",\n                \"floor\": \"5\",\n                \"apartment\": \"502\",\n                \"state_name\":\"SP\",\n                \"city_name\":\"Osasco\"\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Inicializando SDK do Mercado Pago em Swift\nDESCRIPTION: Código Swift para inicializar o SDK do Mercado Pago para coleta de Device ID em aplicações iOS.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-chopro.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport MercadoPagoDevicesSDK\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        MercadoPagoDevicesSDK.shared.execute()\n        return true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Counter Currency for Cross Border Payments in JSON\nDESCRIPTION: This snippet shows the required JSON structure to add to payment preferences or payments for Cross Border transactions. It specifies USD as the counter currency.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.es.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"counter_currency\": {\n\t\"currency_id\": \"USD\"\n}\n```\n\n----------------------------------------\n\nTITLE: Consultando status de pagamento com Redelcom API usando cURL\nDESCRIPTION: Este snippet demonstra como fazer uma solicitação GET para a API Redelcom para verificar o status de uma intenção de pagamento. Substitua {rdcTransactionId} pelo ID da transação real e use suas próprias credenciais para X-Authentication.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/api-query-payment-intent.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n'https://api-dev.redelcom.cl:20010/v2/pago?rdcTransactionId={rdcTransactionId}' \\\n--header 'X-Authentication: clientId;secret'\n```\n\n----------------------------------------\n\nTITLE: Criando pagamento PagoEfectivo ATM com Python\nDESCRIPTION: Código Python para criar um pagamento via PagoEfectivo ATM usando o SDK do Mercado Pago. Inclui a configuração de cabeçalhos personalizados para idempotência e os parâmetros necessários para a criação do pagamento.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mpe.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n    \"transaction_amount\": 100,\n    \"description\": \"Product title\",\n    \"payment_method_id\": \"pagoefectivo_atm\",\n    \"payer\": {\n        \"email\": \"test@test.com\",\n    },\n    \"metadata\": {\n        \"payment_mode\": \"online\",\n    }\n}\npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: MercadoPago Customer Card API Response Format\nDESCRIPTION: Sample JSON response from the MercadoPago API when a new card is successfully added to a customer. The response includes card details such as ID, expiration date, payment method, security code format, issuer details, and cardholder information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.en.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"1493990563105\",\n    \"expiration_month\": 12,\n    \"expiration_year\": 2020,\n    \"first_six_digits\": \"503175\",\n    \"last_four_digits\": \"0604\",\n    \"payment_method\": {\n        \"id\": \"master\",\n        \"name\": \"master\",\n        \"payment_type_id\": \"credit_card\",\n        \"thumbnail\": \"http://img.mlstatic.com/org-img/MP3/API/logos/master.gif\",\n        \"secure_thumbnail\": \"https://www.mercadopago.com/org-img/MP3/API/logos/master.gif\"\n    },\n    \"security_code\": {\n        \"length\": 3,\n        \"card_location\": \"back\"\n    },\n    \"issuer\": {\n        \"id\": 3,\n        \"name\": \"Mastercard\"\n    },\n    \"cardholder\": {\n        \"name\": \"Card holdername\",\n\n        \"identification\": {\n            \"number\": \"12345678\",\n            \"type\": \"DNI\"\n        }\n\n    },\n    \"date_created\": \"2017-05-05T09:22:30.893-04:00\",\n    \"date_last_updated\": \"2017-05-05T09:22:30.893-04:00\",\n    \"customer_id\": \"255276729-yLOTNHQjpDWw1X\",\n    \"user_id\": \"255276729\",\n    \"live_mode\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for Customers with MercadoPago SDK in Ruby\nDESCRIPTION: This snippet shows how to search for customers using the MercadoPago SDK. It uses the customer.search method with a filter to find customers by email address.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ruby/customers.en.md#2025-04-18_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ncustomers_response = sdk.customer.search(filters: { email: 'test_payer_12345@testuser.com' })\ncustomers = customers_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Exemplo de Notificação de Contestação em JSON no Mercado Pago\nDESCRIPTION: Este snippet mostra o formato JSON de uma notificação de contestação enviada pelo Mercado Pago. Inclui informações como ações realizadas, versão da API, ID da aplicação, dados da contestação, e outros metadados relevantes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/chargebacks-management/chargebacks-notifications.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"actions\":[\n      \"changed_case_status\",\n   ],\n   \"api_version\":\"v1\",\n   \"application_id\":9007201037432480,\n   \"data\":{\n      \"checkout\":\"PRO\",\n      \"date_updated\":\"0001-01-01T00:00:00Z\",\n      \"id\":233000061680860000,\n      \"payment_id\":81968653106,\n      \"product_id\":\"C00A2J8RF4DI8BCIMFU0\",\n      \"site_id\":\"MLA\",\n      \"transaction_intent_id\":\"\"\n   },\n   \"date_created\":\"2024-07-03T19:34:28-04:00\",\n   \"id\":114411153595,\n   \"live_mode\":true,\n   \"type\":\"topic_chargebacks_wh\",\n   \"user_id\":634060442,\n   \"version\":1720035618\n}\n```\n\n----------------------------------------\n\nTITLE: Using the onReady Callback in React Component\nDESCRIPTION: This React JSX snippet shows how to use the 'onReady' callback in a component by importing 'Brand' from the '@mercadopago/sdk-react' package. It demonstrates the function setup to control UI loading states effectively when Brick is ready.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/brand-brick/callbacks.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { Brand } from '@mercadopago/sdk-react';\nconst onReady = async () => {\n  /*\n    Callback called when Brick is ready.\n    Here you can hide loadings on your site, for example.\n  */\n};\n\n<Brand\n   onReady={onReady}/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment by ID with Mercado Pago SDK\nDESCRIPTION: This snippet demonstrates how to retrieve the details of a payment using its ID with the Mercado Pago SDK. It initializes the MercadoPagoConfig with the access token and uses the Payment class to fetch the payment details by its ID. Replace `<PAYMENT_ID>` with the actual payment ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/create-payments.es.md#2025-04-18_snippet_2\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst payment = new Payment(client);\n\npayment.get({\n\tid: '<PAYMENT_ID>',\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Loading the Card Payment Brick with Saved Cards\nDESCRIPTION: This JavaScript snippet initializes a specific Card Payment Brick setup for users with saved cards, allowing the tokenization process and ensuring seamless payment execution by specifying customer and card IDs.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-clientside.en.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst mp = new MercadoPago('YOUR_PUBLIC_KEY');\nconst bricksBuilder = mp.bricks();\nconst renderCardPaymentBrick = async (bricksBuilder) => {\n   const settings = {\n       initialization: {\n           amount: 100, //valor do processamento a ser realizado\n           payer: {\n           customer_id: \"209277402-FqRqgEc3XItrxs\",\n\tcard_ids: [“1518023392627”,”1518023332143”]\n       },\n       },\n       style: {\n           theme: 'default' // | 'dark' | 'bootstrap' | 'flat'\n       },\n       callbacks: {\n           onReady: () => {\n           // callback chamado quando o Brick estiver pronto\n           },\n           onSubmit: ({paymentType, formData}) => {\n           // callback chamado o usuário clicar no botão de submissão dos dados\n           // ejemplo de envío de los dados recolectados por el Brick a seu servidor\n           return new Promise((resolve, reject) => {\n               fetch(\"/processar-pago\", {\n                   method: \"POST\",\n                   headers: {\n                       \"Content-Type\": \"application/json\",\n                   },\n                   body: JSON.stringify(formData)\n               })\n               .then((response) => {\n                   // receber o resultado do pagamento\n                   resolve();\n               })\n               .catch((error) => {\n                   // lidar com a resposta de erro ao tentar criar o pagamento\n                   reject();\n               })\n               });\n           },\n           onError: (error) => {\n           // callback chamado para todos os casos de erro do Brick\n           },\n       },\n   };\n   window.cardPaymentBrickController = await bricksBuilder.create('cardPayment', 'cardPaymentBrick_container', settings);\n};\nrenderCardPaymentBrick(bricksBuilder);\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Receiver in PHP\nDESCRIPTION: PHP script for a Webhook receiver to handle different types of notifications from MercadoPago. It differentiates notifications by type, such as payment, plan, subscription, and invoice. Necessary dependencies include MercadoPago SDK. Limitations: POST data must be valid.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.en.md#2025-04-18_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n MercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\\n switch($_POST[\"type\"]) {\\n     case \"payment\":\\n         $payment = MercadoPago\\Payment::find_by_id($_POST[\"data\"][\"id\"]);\\n         break;\\n     case \"plan\":\\n         $plan = MercadoPago\\Plan::find_by_id($_POST[\"data\"][\"id\"]);\\n         break;\\n     case \"subscription\":\\n         $plan = MercadoPago\\Subscription::find_by_id($_POST[\"data\"][\"id\"]);\\n         break;\\n     case \"invoice\":\\n         $plan = MercadoPago\\Invoice::find_by_id($_POST[\"data\"][\"id\"]);\\n         break;\\n     case \"point_integration_wh\":\\n         // $_POST contiene la informaciòn relacionada a la notificaciòn.\\n         break;\\n }\\n?>\n```\n\n----------------------------------------\n\nTITLE: Setting Payment Expiration Date in PHP\nDESCRIPTION: Code to set the expiration date for a cash payment in PHP. The date uses ISO 8601 format and must be between 1 and 30 days from the payment issue date.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$payment->date_of_expiration = \"2020-05-30T23:59:59.000-04:00\";\n```\n\n----------------------------------------\n\nTITLE: Parsing Payment Response with PaymentFlow in Kotlin\nDESCRIPTION: This snippet shows how to use the `parseResponse` function of the `PaymentFlow` class to receive the payment flow result.  It extracts the data from the intent, parses it into a `PaymentResponse` object, and then checks the `paymentReference` to determine if the payment was successful or resulted in an error.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/payment-flow-legacy-support.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nintent.data?.let { data ->\n   val response = paymentFlow.parseResponse(data)\n   if (response.paymentReference.isNotEmpty()) {\n       // Gerenciamento de pagamento com um resultado de sucesso\n   } else {\n       // Gerenciamento de pagamento com um resultado de erro\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Cash Payments with Rapipago/Pago Fácil in PHP\nDESCRIPTION: PHP implementation for creating cash payments with Rapipago or Pago Fácil using Mercado Pago's Payment Client. Includes required transaction amount, payment method ID, and payer email.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['<TRANSACTION_AMOUNT>'],\n    \"payment_method_id\" => $_POST['<PAYMENT_METHOD_ID>'],\n    \"payer\" => [\n      \"email\" => $_POST['<EMAIL>']\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with MercadoPago API (cURL)\nDESCRIPTION: This cURL command creates a payment using the MercadoPago API. It sends a POST request to the payments endpoint with payment details in JSON format, including transaction amount, token, description, installments, payment method ID, issuer ID, and payer email.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.es.md#2025-04-18_snippet_12\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/payments' \\\n    -d '{\n          \"transaction_amount\": 100,\n          \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n          \"description\": \"Blue shirt\",\n          \"installments\": 1,\n          \"payment_method_id\": \"visa\",\n          \"issuer_id\": 310,\n          \"payer\": {\n            \"email\": \"test@test.com\"\n          }\n    }'\n\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Reserve with Curl\nDESCRIPTION: This Curl command demonstrates how to make a reserve authorization request using MercadoPago's REST API. It sends a POST request with a JSON payload containing all necessary payment details. Key aspects include setting the capture flag to false and passing the idempotency key header.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/make-value-reserve.en.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n-H 'accept: application/json' \\\n-H 'content-type: application/json' \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n-H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n'https://api.mercadopago.com/v1/payments' \\\n-d '{\n\"transaction_amount\": 100,\n\"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n\"description\": \"Product title\",\n\"installations\": 1,\n\"payment_method_id\": \"visa\",\n\"payer\": {\n\"email\": \"test_user_19653727@testuser.com\"\n},\n\"capture\": \"false\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Adding Pix Copy and Paste Field in HTML\nDESCRIPTION: HTML code snippet for adding a copy and paste option for the Pix payment code. This allows users to copy the payment code directly to their internet banking app instead of scanning the QR code.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pix.en.md#2025-04-18_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<label for=\"copy\">Copy Hash:</label>\n<input type=\"text\" id=\"copiar\" value={qr_code} readonly/>\n```\n\n----------------------------------------\n\nTITLE: Creating Card Payment with Mercado Pago C# SDK\nDESCRIPTION: Shows how to create a card payment using the Mercado Pago C# SDK. Includes setting up the client with an access token, configuring custom headers, and sending a payment request with transaction details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.en.md#2025-04-18_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n \nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n \nvar paymentRequest = new PaymentCreateRequest\n{\nTransactionAmount = decimal.Parse(Request[\"transactionAmount\"]),\nToken = Request[\"token\"],\nDescription = Request[\"description\"],\nInstallments = int.Parse(Request[\"installments\"]),\nPaymentMethodId = Request[\"paymentMethodId\"],\nPayer = new PaymentPayerRequest\n{\nEmail = Request[\"email\"],\nIdentification = new IdentificationRequest\n{\nType = Request[\"identificationType\"],\nNumber = Request[\"identificationNumber\"],\n},\n},\n};\n \nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentReques, requestOptions);\n \nConsole.WriteLine(payment.Status);\n```\n\n----------------------------------------\n\nTITLE: Pix Payment API Response Example\nDESCRIPTION: Example of a response from the Mercado Pago API when creating a Pix payment. The response includes the payment status, transaction details, and most importantly, the QR code data needed for the customer to complete the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pix.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...,\n  \"id\": 5466310457,\n  \"status\": \"pending\",\n  \"status_detail\": \"pending_waiting_transfer\",\n  ...,\n  \"transaction_details\": {\n      \"net_received_amount\": 0,\n      \"total_paid_amount\": 100,\n      \"overpaid_amount\": 0,\n      \"external_resource_url\": null,\n      \"installment_amount\": 0,\n      \"financial_institution\": null\n  },\n  \"point_of_interaction\": {\n      \"type\": \"PIX\",\n      \"sub_type\": null,\n      \"application_data\": {\n        \"name\": \"NAME_SDK\",\n        \"version\": \"VERSION_NUMBER\"\n      },\n      \"transaction_data\": {\n        \"qr_code_base64\": \"iVBORw0KGgoAAAANSUhEUgAABRQAAAUUCAYAAACu5p7oAAAABGdBTUEAALGPC/xhBQAAAAFzUkdCAK7OHOkAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAIABJREFUeJzs2luO3LiWQNFmI+Y/Zd6vRt36KGNXi7ZOBtcagHD4kNLeiLX33v8DAAAAABD879sDAAAAAAA/h6AIAAAAAGSCIgAAAACQCYoAAAAAQCYoAgAAAACZoAgAAAAAZIIiAAAAAJAJigAAAABAJigCAAAAAJmgCAAAAABkgiIAAAAAkAmKAAAAAEAmKAIAAAAAmaAIAAAAAGSCIgAAAACQCYoAAAAAQCYoAgAAAACZoAgAAAAAZIIiAAAAAJAJigAAAABAJigCA...\",\n        \"qr_code\": \"00020126600014br.gov.bcb.pix0117john@yourdomain.com0217additional data520400005303986540510.005802BR5913Maria Silva6008Brasilia62070503***6304E2CA\",\n        \"ticket_url\": \"https://www.mercadopago.com.br/payments/123456789/ticket?caller_id=123456&hash=123e4567-e89b-12d3-a456-426655440000\"\n      }\n  }\n  ...,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Back URLs and Auto Return - Python\nDESCRIPTION: This Python snippet demonstrates how to configure the `back_urls` and `auto_return` parameters within a dictionary representing the payment preference data. It sets URLs for successful, failed, and pending payments and configures automatic redirection for approved payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_27\n\nLANGUAGE: python\nCODE:\n```\npreference_data = {\n    \"back_urls\": {\n        \"success\": \"https://www.tu-sitio/success\",\n        \"failure\": \"https://www.tu-sitio/failure\",\n        \"pending\": \"https://www.tu-sitio/pendings\"\n    },\n    \"auto_return\": \"approved\"\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Payments with MercadoPago in Python\nDESCRIPTION: This Python snippet details how to utilize the MercadoPago SDK to create a payment, passing relevant payment information and handling the response. It requires the mercadopago package to be installed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npayment_data = {\n    \"transaction_amount\": 100,\n    \"token\": token,\n    \"description\": \"Blue shirt\",\n    \"installments\": installments,\n    \"payment_method_id\": payment_method_id,\n    \"issuer_id\": issuer_id,\n    \"payer\": {\n        \"email\": \"john@yourdomain.com\"\n    }\n}\n\n# Save and create the payment\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n\n```\n\n----------------------------------------\n\nTITLE: Capturing Total Reserved Amount in MercadoPago - Node.js\nDESCRIPTION: This Node.js example demonstrates capturing the full amount on MercadoPago using the 'mercadopago' package. It sets up a payment client with access token and idempotency key, and processes the capture request asynchronously.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/capture-authorized-payment.en.md#2025-04-18_snippet_2\n\nLANGUAGE: Node\nCODE:\n```\nimport { MercadoPagoConfig, Payment } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: 'YOUR_ACCESS_TOKEN' });\nconst payment = new Payment(client);\n\npayment.capture({\nid: '<PAYMENT_ID>',\ntransaction_amount: 12.34,\nrequestOptions: {\nidempotencyKey: '<IDEMPOTENCY_KEY>'\n}\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Capturing Device Information in iOS (Swift)\nDESCRIPTION: These Swift functions demonstrate different ways to obtain device information using the MercadoPagoDevicesSDK. They return the data in various formats such as Codable Object, JSON, or Dictionary.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.en.md#2025-04-18_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nMercadoPagoDevicesSDK.shared.getInfo() // Returns a Codable Device Object\nMercadoPagoDevicesSDK.shared.getInfoAsJson() // Returns a JSON Library Data Object\nMercadoPagoDevicesSDK.shared.getInfoAsJsonString() // Returns a JSON String\nMercadoPagoDevicesSDK.shared.getInfoAsDictionary() // Returns a Dictionary<String,Any>\n```\n\n----------------------------------------\n\nTITLE: Getting Payment Methods with cURL\nDESCRIPTION: This cURL command retrieves a list of payment methods from the Mercado Pago API. It sends a GET request to the `/v1/payment_methods` endpoint with the `Authorization` header set to `Bearer ENV_ACCESS_TOKEN`. Replace `ENV_ACCESS_TOKEN` with your actual access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/consult-payment-methods.en.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/payment_methods' \\\n```\n\n----------------------------------------\n\nTITLE: Processing Payments with Mercado Pago using cURL\nDESCRIPTION: cURL can be used to interact with the Mercado Pago API directly, sending raw HTTP requests for payment processing. The example requires an active access token for authorization. Inputs for transactions and payment details are structured in JSON and sent in the request body, with an expected output of payment status details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-serverside.en.md#2025-04-18_snippet_6\n\nLANGUAGE: cURL\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/payments' \\\n    -d '{\n          \"transaction_amount\": 100,\n          \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n          \"description\": \"Blue shirt\",\n          \"installments\": 1,\n          \"payment_method_id\": \"visa\",\n          \"issuer_id\": 310,\n          \"payer\": {\n            \"email\": \"test@test.com\"\n          }\n    }'\n```\n\n----------------------------------------\n\nTITLE: Initializing Card Payment Form with Pre-filled Fields in Javascript\nDESCRIPTION: Configuration to pre-populate document and email fields in a card payment form. This allows you to initialize the Brick with payer identification and email data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/initialize-data-on-the-bricks.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nsettings = {\n  ...,\n  initialization: {\n    ...,\n    payer: {\n      ...,\n      email: '<PAYER_EMAIL_HERE>',\n      identification: {\n          type: 'string',\n          number: 'string',\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Card Token with MercadoPago API\nDESCRIPTION: Code to generate a card token using a card_id. This process tokenizes an existing card for secure payment processing. Includes error handling and API response management.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.en.md#2025-04-18_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse MercadoPago\\Client\\CardToken\\CardTokenClient;\nuse MercadoPago\\Exceptions\\MPApiException;\nuse MercadoPago\\MercadoPagoConfig;\n\nrequire_once 'vendor/autoload.php';\n\nMercadoPagoConfig::setAccessToken(\"<ACCESS_TOKEN>\");\n\n$client = new CardTokenClient();\n\ntry {\n    $request = [\n        \"card_id\" => \"cardId\"\n    ];\n\n    $card_token = $client->create($request);\n    var_dump($card_token);\n} catch (MPApiException $e) {\n    echo \"Status code: \" . $e->getApiResponse()->getStatusCode() . \"\\n\";\n    echo \"Content: \";\n    var_dump($e->getApiResponse()->getContent());\n    echo \"\\n\";\n} catch (\\Exception $e) {\n    echo $e->getMessage();\n}\n```\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, CardToken } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\nconst cardToken = new CardToken(client);\n\nconst body = {\n\tcard_id : '<CARD_ID>'\n};\n\ncardToken.create({ body }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Card Information with Mercado Pago SDK in Java\nDESCRIPTION: This Java code demonstrates retrieving specific card information tied to a customer using the customer ID and card ID. The 'get' method of 'CustomerCardClient' is used to access detailed card reference information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/cards.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nCustomerCardClient client = new CustomerCardClient();\n\nString customerId = \"448870796-7ZjwhKGxILixxN\";\nString cardId = \"8987269652\";\nclient.get(customerId, cardId);\n```\n\n----------------------------------------\n\nTITLE: Creating Open Finance Payment with Node.js SDK\nDESCRIPTION: Implementation example for creating an Open Finance payment using Mercado Pago's Node.js SDK. Includes transaction details, payer information, and the point_of_interaction parameter required for Open Finance.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/advanced-openFinance.en.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nmercadopago.configurations.setAccessToken(\"access_token\");\nvar payment = {\n    transaction_amount: 100,\n    description: 'description',\n    payment_method_id: 'pix',\n    payer: {\n        email: 'test@test.com'\n        identification: {\n            number: '12345678909',\n            type: 'CPF'\n       }\n    },\n    point_of_interaction: {\n        linked_to: \"openfinance\"\n    }\n};\nmercadopago.payment.create(payment).then(function (data) {\n    console.log(data.response);\n}).catch(function (error) {\n    console.log(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MercadoPago Credentials in JavaScript\nDESCRIPTION: Initializes the MercadoPago object with the public key for secure payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-advanced.en.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mp = new MercadoPago('YOUR_PUBLIC_KEY');\n```\n\n----------------------------------------\n\nTITLE: Updating Report Structure via PUT Request in curl\nDESCRIPTION: This snippet demonstrates how to modify an existing report structure using a PUT request. It includes mandatory parameters such as display_timezone, name, file_format, and columns. The request updates various aspects of the report structure including timezone, name, file format specifications, and column definitions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/modifications.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request PUT 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/structures/{{structure_id}}' \\\n--header 'Authorization: Bearer {{TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n\n    \"display_timezone\": \"GMT-05\",\n    \"name\": \"Structure 2 marketplace\",\n    \"file_format\": {\n        \"prefix\": \"mkp-\",\n        \"column_separator\": \";\",\n        \"decimal_separator\": \".\"\n    },\n    \"columns\": [\n        {\n            \"key\": \"COLLECTOR\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"COLLECTOR_NICKNAME\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"PAYMENT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"STATUS_DESCRIPTION\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"STATUS_DETAIL\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"PURCHASE_ORDER\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"PAYMENT_METHOD_TYPE\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"TRANSACTION_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"DATE_CREATED\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"DATE_APPROVED\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"MARKETPLACE_FEE_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"MERCADOPAGO_FEE_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"TOTAL_PAID_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"NET_RECEIVED_AMOUNT\",\n            \"alias\": \"\"\n        }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Transaction with Platform ID in Mercado Pago API\nDESCRIPTION: This curl command demonstrates how to make a POST request to Mercado Pago's payments API with a platform ID. The request includes comprehensive transaction details including payment method, payer information, product details, and shipping information. The x-platform-id header must be included to identify your platform.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/pi-transactions-via-checkout-transparente.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'x-platform-id: {{PLATFORM_ID fornecido pelo time de Partners}}' \\\n--header 'Authorization: Bearer {{ACCESS_TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"transaction_amount\": 100,\n    \"installments\": 1,\n    \"statement_descriptor\": \"Loja do vendedor\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": {{ID da sua conta Mercado Pago referente à sua plataforma}},\n    \"payment_method_id\": \"{{payment_method_id}}\",\n    \"token\": {{card_token_id}},\n    \"external_reference\": \"Identificador da plataforma\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"description\": \"Descrição do produto do vendedor\",\n    \"payer\": {\n        \"first_name\": \"Nome. Exemplo: João\",\n        \"last_name\": \"Sobrenome. Exemplo: Silva\",\n        \"email\": \"test_user_1677272335@testuser.com\",\n        \"identification\": {\n            \"type\": \"Tipo. Exemplo: CPF\",\n            \"number\": \"Número do documento. Exemplo: 19119119100\"\n        },\n        \"address\": {\n            \"zip_code\": \"CEP. Exemplo: 06233-200\",\n            \"street_name\": \"Rua. Exemplo: Av. das Nações Unidas\",\n            \"street_number\": \"Número. Exemplo: 3003\",\n            \"neighborhood\": \"Bairro. Exemplo: Bonfim\",\n            \"city\": \"Cidade. Exemplo: Osasco\",\n            \"federal_unit\": \"UF. Exemplo: SP\"\n        }\n    },\n    \"additional_info\": {\n        \"referral_url\": \"URL de referência. Exemplo: www.sellertest123.com\",\n        \"drop_shipping\": true,\n        \"delivery_promise\": \"2022-11-20\",\n        \"contrated_plan\": \"premium\",\n        \"items\": [\n            {\n                \"id\": \"1941\",\n                \"title\": \"Produto do seller\",\n                \"description\": \"Descrição do produto do vendedor\",\n                \"picture_url\": null,\n                \"category_id\": \"Categoria. Exemplo: electronics\",\n                \"quantity\": 1,\n                \"unit_price\": 100.00\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome. Exemplo: João\",\n            \"last_name\": \"Sobrenome. Exemplo: Silva\",\n            \"is_prime_user\": \"1\",\n            \"is_first_purchase_online\": \"1\",\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"Exemplo: 11\",\n                \"number\": \"Exemplo: 987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"CEP. Exemplo: 06233-200\",\n                \"street_name\": \"Nome da rua. Exemplo: Av. das Nações Unidas\",\n                \"street_number\": \"Número. Exemplo: 3003\"\n            },\n            \"registration_date\": \"2013-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"0\",\n            \"pick_up_on_seller\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"CEP. Exemplo: 95630000\",\n                \"street_name\": \"Nome da rua. Exemplo: São Luiz\",\n                \"street_number\": \"Número. Exemplo: 15\",\n                \"floor\": \"Andar (caso seja apartamento). Exemplo: Segundo\",\n                \"apartment\": \"Número do apartamento (caso seja apartamento). Exemplo: 93\"\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Customer Card with Mercado Pago\nDESCRIPTION: This snippet retrieves the information of a specific customer card using the Mercado Pago Java SDK. It calls the `get` method of the `CustomerCardClient`, providing both the `customerId` and the `cardId` to identify the specific card to retrieve.  This will fetch the details of the specified card from the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/cards.es.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nCustomerCardClient client = new CustomerCardClient();\n\nString customerId = \"448870796-7ZjwhKGxILixxN\";\nString cardId = \"8987269652\";\nclient.get(customerId, cardId);\n```\n\n----------------------------------------\n\nTITLE: Creating Mercado Pago Preference in Ruby\nDESCRIPTION: This code snippet demonstrates how to create a preference using the Mercado Pago SDK in Ruby. It sets up preference data including item details and payer information, then uses the SDK to create the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ruby/preferences.en.md#2025-04-18_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npreference_data = {\n  items: [\n    {\n      title: 'Blue shirt',\n      quantity: 10,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: [FAKER][COMMERCE][PRICE]\n    }\n  ],\n  payer: {\n    email: 'john@yourdomain.com'\n  }\n}\n\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Creating Cash Payments with Rapipago/Pago Fácil using cURL\nDESCRIPTION: cURL command for creating cash payments via Mercado Pago's API. This example shows how to send a POST request with authorization token, idempotency key, and payment information including transaction amount and payment method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_30\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n--header 'X-Idempotency-Key: <SOME_UNIQUE_VALUE>' \\\n--data-raw '{\n  \"transaction_amount\": 100,\n  \"description\": \"Titulo del producto\",\n  \"payment_method_id\": \"rapipago\",\n  \"payer\": { \"email\": \"test_user_12345@testuser.com\" }\n}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK in PHP\nDESCRIPTION: This PHP code snippet initializes the Mercado Pago SDK by setting the access token.  It uses the `MercadoPagoConfig` class to set the access token, which is required for authenticating API requests. Replace `PROD_ACCESS_TOKEN` with your actual production access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-development-environment.es.md#2025-04-18_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\n// SDK de Mercado Pago\nuse MercadoPago\\MercadoPagoConfig;\n// Agrega credenciales\nMercadoPagoConfig::setAccessToken(\\\"PROD_ACCESS_TOKEN\\\");\n?>\"\n```\n\n----------------------------------------\n\nTITLE: Internal Server Error Response\nDESCRIPTION: This JSON snippet represents an internal server error response from the Mercado Pago API.  This indicates a problem on the server side during the processing of the refund request. The message \"Invalid splitter id\" is a placeholder and the underlying cause may vary.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/refund-full-amount.es.md#2025-04-18_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"status\": \"500\",\n   \"error\":  \"internal_server_error\",\n   \"message\": \"Invalid splitter id.\",\n   \"cause\": [\n    {\n      \"code\":\"500000\",\n      \"message\": \"Internal server error\",\n      \"data\": null\n    }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Payment Methods with Python\nDESCRIPTION: Code to obtain a list of all available payment methods using the MercadoPago Python SDK. This implementation initializes the SDK with your access token and uses the payment_methods resource to list all available options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.es.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\npayment_methods_response = sdk.payment_methods().list_all()\npayment_methods = payment_methods_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Complete JavaScript Implementation\nDESCRIPTION: Full JavaScript implementation for validating Mercado Pago webhook notifications using HMAC\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.es.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Obtain the x-signature value from the header\nconst xSignature = headers['x-signature']; // Assuming headers is an object containing request headers\nconst xRequestId = headers['x-request-id']; // Assuming headers is an object containing request headers\n\n// Obtain Query params related to the request URL\nconst urlParams = new URLSearchParams(window.location.search);\nconst dataID = urlParams.get('data.id');\n\n// Separating the x-signature into parts\nconst parts = xSignature.split(',');\n\n// Initializing variables to store ts and hash\nlet ts;\nlet hash;\n\n// Iterate over the values to obtain ts and v1\nparts.forEach(part => {\n    // Split each part into key and value\n    const [key, value] = part.split('=');\n    if (key && value) {\n        const trimmedKey = key.trim();\n        const trimmedValue = value.trim();\n        if (trimmedKey === 'ts') {\n            ts = trimmedValue;\n        } else if (trimmedKey === 'v1') {\n            hash = trimmedValue;\n        }\n    }\n});\n\n// Obtain the secret key for the user/application from Mercadopago developers site\nconst secret = 'your_secret_key_here';\n\n// Generate the manifest string\nconst manifest = `id:${dataID};request-id:${xRequestId};ts:${ts};`;\n\n// Create an HMAC signature\nconst hmac = crypto.createHmac('sha256', secret);\nhmac.update(manifest);\n\n// Obtain the hash result as a hexadecimal string\nconst sha = hmac.digest('hex');\n\nif (sha === hash) {\n    // HMAC verification passed\n    console.log(\"HMAC verification passed\");\n} else {\n    // HMAC verification failed\n    console.log(\"HMAC verification failed\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Preference for Installments without Card in PHP\nDESCRIPTION: PHP code snippet for creating a preference object with Mercado Pago SDK to enable installment payments without a card. It sets up an item and specifies the purpose as 'onboarding_credits'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/installments-without-card.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Create a preference object\n$preference = new MercadoPago\\Preference();\n\n// Create an item in the preference\n$item = new MercadoPago\\Item();\n$item->title = 'My product';\n$item->quantity = 1;\n$item->unit_price = 75;\n$preference->items = array($item);\n$preference->purpose = 'onboarding_credits';\n$preference->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK with Java\nDESCRIPTION: This Java code snippet initializes the Mercado Pago SDK and sets the access token. The access token is required for authenticating calls to the Mercado Pago API, which is needed to generate preferences.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/default-rendering.en.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// Mercado Pago SDK\nimport com.mercadopago.MercadoPagoConfig;\n// Add Your credentials\nMercadoPagoConfig.setAccessToken(\"PROD_ACCESS_TOKEN\");\n```\n\n----------------------------------------\n\nTITLE: Integrating Mercado Pago Payment Button in HTML\nDESCRIPTION: This snippet shows how to add a Mercado Pago payment button to a website by embedding the web-payment-checkout.js script. The script includes a data-preference-id attribute that links to a specific payment configuration and a data-source attribute set to 'button'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/payment-link/share-website.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com.ar/integrations/v1/web-payment-checkout.js\"\ndata-preference-id=\"1273324264-f92cada3-65b7-4a53-a55b-af7cfb015eb6\" data-source=\"button\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding a New Card Using MercadoPago with Python\nDESCRIPTION: This Python snippet involves using the MercadoPago SDK to add a card to a customer's profile. Ensure the 'mercadopago' package is installed. Input details needed are a token, issuer ID, and payment method. The card data response is printed to the console.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.en.md#2025-04-18_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\ncustomer_response = sdk.customer().get(\"247711297-jxOV430go9fx2e\")\ncustomer = customer_response[\"response\"]\n\ncard_data = {\n  \"token\": \"9b2d63e00d66a8c721607214cedaecda\",\n  \"issuer_id\": \"3245612\",\n  \"payment_method_id\": \"debit_card\"\n}\ncard_response = sdk.card().create(customer[\"id\"], card_data)\ncard = card_response[\"response\"]\n\nprint(card)\n\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Bancário Payment with Discounts, Fines, and Interest in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to create a boleto bancário payment with discounts, fines, and interest using the Mercado Pago SDK. It sets up the payment details, payer information, and payment rules for discounts, fines, and interest.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nrequire_once 'vendor/autoload.php';\nMercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n$payment = new MercadoPago\\Payment();\n$payment->description = \"Titulo do produto\";\n$payment->date_of_expiration = \"2022-12-24T22:59:59.000-04:00\";\n$payment->payment_method_id = \"bolbradesco\";\n$payment->transaction_amount = 100;\n$payer = new MercadoPago\\Payer();\n$payer->first_name = \"Test\";\n$payer->last_name = \"user\";\n$payer->email = \"test_user_123456@testuser.com\";\n$payer->identification = array(\n  \"type\" => \"CPF\",\n  \"number\" => \"19119119100\"\n);\n$payment->payer = $payer;\n$payment->payment_method = array(\n  \"data\" => array(\n    \"rules\" => array(\n      \"discounts\" => array(\n        array(\n         \"value\" => 5,\n         \"type\" => \"fixed\",\n         \"limit_date\" => \"2022-12-10\"\n        )\n      ),\n      \"fine\" => array(\n        \"value\" => 2,\n        \"type\" => \"percentage\"\n      ),\n      \"interest\" => array(\n        \"value\" => 0.03,\n        \"type\" => \"percentage\"\n      )\n    )\n  )\n);\n$payment->save();\necho 'URL Boleto: ' . $payment->transaction_details->external_resource_url;\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with cURL in Mercado Pago API\nDESCRIPTION: cURL command for creating a payment directly with Mercado Pago's API. This request includes authorization headers, idempotency key, and a JSON payload with transaction details, payment method, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.en.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n   -H 'accept: application/json' \\\n   -H 'content-type: application/json' \\\n   -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n   -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n   'https://api.mercadopago.com/v1/payments' \\\n   -d '{\n         \"transaction_amount\": 100,\n         \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n         \"description\": \"Blue shirt\",\n         \"installments\": 1,\n         \"payment_method_id\": \"visa\",\n         \"issuer_id\": 310,\n         \"payer\": {\n           \"email\": \"PAYER_EMAIL\"\n         }\n   }'\n```\n\n----------------------------------------\n\nTITLE: Getting Payment Data from URL Callback (Error)\nDESCRIPTION: This code snippet demonstrates how to retrieve error data from the URL query string after a failed payment using URL callback. It uses the `URLSearchParams` API to parse the query string and extract the `error_status` and `metadata` parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/callback-handling.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet urlQueryString = window.location.search;\nlet urlParams = new URLSearchParams(urlQueryString);\n// Obtendo erro de dados de pagamento a partir de dados de evento\nlet errorStatus = urlParams.get('error_status');\nlet metadata = urlParams.get('metadata');\n\t\n/**  \n* Escreva o código aqui...\n**/ \t\n```\n\n----------------------------------------\n\nTITLE: Creando pago con boleto bancario en PHP\nDESCRIPTION: Código PHP para crear un pago con boleto bancario utilizando el SDK de Mercado Pago. Incluye la configuración de headers de idempotencia y todos los parámetros necesarios para la solicitud.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mlb.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\Client\\Common\\RequestOptions;\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['transactionAmount'],\n    \"token\" => $_POST['token'],\n    \"description\" => $_POST['description'],\n    \"installments\" => $_POST['installments'],\n    \"payment_method_id\" => $_POST['paymentMethodId'],\n    \"issuer_id\" => $_POST['issuer'],\n    \"payer\" => [\n      \"email\" => $_POST['email'],\n      \"first_name\" => $_POST['payerFirstName'],\n      \"last_name\" => $_POST['payerLastName'],\n      \"identification\" => [\n        \"type\" => $_POST['identificationType'],\n        \"number\" => $_POST['number']\n      ]\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Payment Methods with C# SDK\nDESCRIPTION: Code to fetch all available payment methods using Mercado Pago's C# SDK. This implementation configures the access token, creates a client, and asynchronously lists payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.PaymentMethod;\nusing MercadoPago.Config;\nusing MercadoPago.Resource;\nusing MercadoPago.Resource.PaymentMethod;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar client = new PaymentMethodClient();\nResourcesList<PaymentMethod> paymentMethods = await client.ListAsync();\n\n```\n\n----------------------------------------\n\nTITLE: Zero Dollar Auth with cURL in Mercado Pago\nDESCRIPTION: cURL command for implementing Zero Dollar Auth in Mercado Pago to validate credit/debit cards without actual charges. This request includes a special X-Card-Validation header and sets the transaction amount to zero.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.en.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Card-Validation: card_validation' \\\n--data-raw '{\n    \"token\": \"TOKEN\",\n    \"payment_method_id\": \"master\",\n    \"payer\": {\n        \"id\": \"{{customer_id}}\",\n        \"type\" : \"customer\",\n    },\n    \"description\": \"validação de cartão com valor zero dollar\",\n    \"transaction_amount\": 0\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with wallet_purchase in Java\nDESCRIPTION: This Java code snippet demonstrates how to create a preference with the `wallet_purchase` purpose using the Mercado Pago Java SDK. The code constructs a `PreferenceRequest` object, including an item and setting the `purpose` to `wallet_purchase` to allow only logged payments.  A `PreferenceClient` is used to create the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-onsubmit.en.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// Create a preference object\nPreferenceClient client = new PreferenceClient();\n \n// Create an item in the preference\nList<PreferenceItemRequest> items = new ArrayList<>();\nPreferenceItemRequest item =\n   PreferenceItemRequest.builder()\n       .title(\"My product\")\n       .quantity(1)\n       .unitPrice(new BigDecimal(\"100\"))\n       .build();\nitems.add(item);\n \nPreferenceRequest request = PreferenceRequest.builder()\n  // the .purpose('wallet_purchase') only allows logged payments\n  // to allow guest payments you can omit this line\n  .purpose('wallet_purchase')\n  .items(items).build();\n \nclient.create(request);\n\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Intent for Brazil (MLB) with cURL\nDESCRIPTION: This cURL command demonstrates how to create a payment intent for a Point device in Brazil. It includes additional fields such as description, payment type, and installment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/payment-processing.en.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/point/integration-api/devices/{deviceid}/payment-intents' \\\n--h 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--data-raw '{\n    \"amount\": 1500,\n    \"description\": \"this is an example\",\n    \"payment\": {\n      \"installments\": 1,\n      \"type\": \"credit_card\"\n     },\n    \"additional_info\": {\n        \"external_reference\": \"4561ads-das4das4-das4754-das456\",\n        \"print_on_terminal\": true\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing onBinChange Callback in Javascript\nDESCRIPTION: Demonstrates how to configure the onBinChange callback in vanilla JavaScript to capture card bin changes during Brick execution. The callback is triggered whenever the card bin is updated.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/additional-callbacks.es.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n   ...,\n   callbacks: {\n       ...\n       onBinChange: (bin) => {\n           // callback llamado cada vez que se cambia el bin de la tarjeta\n           console.log(bin);\n       },\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: Create Checkout Preference\nDESCRIPTION: This function creates a new checkout preference. It requires a dictionary with preference data, including items with title, quantity, currency ID, and unit price.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.en.md#2025-04-18_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef index(req, **kwargs):\n    preference_data = {\n        \"items\": [\n            {\n                \"title\": \"Test\",\n                \"quantity\": 1,\n                \"currency_id\": \"USD\",\n                \"unit_price\": 10.4\n            }\n        ]\n    }\n\n    preference_response = sdk.preference().create(preference_data)\n\n    return json.dumps(preference_response[\"response\"], indent=4)\n```\n\n----------------------------------------\n\nTITLE: Setting PLATFORM_ID in HTTP Request Headers for Mercado Pago\nDESCRIPTION: Example of how to include the PLATFORM_ID in the HTTP request header using the x-platform-id field. This identifier must be provided by the Mercado Pago Partners team after solution approval.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/what-is-platform-id.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\n--header 'x-platform-id: (PLATFORM_ID fornecido pelo time de Partners)'\n```\n\n----------------------------------------\n\nTITLE: Making API Payment Request with cURL\nDESCRIPTION: This cURL command makes a POST request to the Mercado Pago API to create a payment. It includes the required headers and the request body in JSON format. Dependencies include having cURL installed and access to the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pse.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\ \n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\ \n-H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\ \n-H 'Content-Type: application/json' \\ \n--data '{\n    \"transaction_amount\": 5000,\n    \"description\": \"Product description\",\n    \"payment_method_id\": \"pse\",\n    \"callback_url\": \"http://www.your-site.com\",\n    \"notification_url\": \"http://www.your-site.com\",\n    \"payer\": {\n        \"email\": \"test_user_19549678@testuser.com\",\n        \"entity_type\": \"individual\",\n        \"first_name\": \"first name\",\n        \"last_name\": \"last_name\",\n        \"identification\": {\n            \"type\": \"type\",\n            \"number\": \"number\"\n        }, \n        \"address\": {\n          \"zip_code\": \"111\",\n          \"street_name\": \"street name\",\n          \"street_number\": \"street number\",\n          \"neighborhood\": \"neighborhood\",\n          \"city\": \"city\",\n          \"federal_unit\": \"federal unit\"\n        },\n        \"phone\": {\n          \"area_code\": \"area code\",\n          \"number\": \"number\"\n        }\n    },\n    \"additional_info\": {\n        \"ip_address\": \"127.0.0.1\"\n    },\n    \"transaction_details\": {\n        \"financial_institution\": \"1009\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Pix Refunds with Custom Headers in Python\nDESCRIPTION: Python implementation showing how to create a refund with the X-Render-In-Process-Refunds custom header. The code configures the SDK with an access token, sets up the refund object with an amount of 20, and applies custom headers to the request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.en.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsdk = mercadopago.SDK('YOUR_ACCESS_TOKEN')\n\nrefund_object = {\n   'amount': 20\n}\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n   'content-type': 'application/json',\n   'X-Render-In-Process-Refunds': 'true'\n}\n\nsdk.refund().create('payment_id', refund_object, request_options)\n```\n\n----------------------------------------\n\nTITLE: Using Wallet in React from Mercado Pago SDK\nDESCRIPTION: This snippet shows how to use the @mercadopago/sdk-react package to render the Wallet component with defined initialization and event handlers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.en.md#2025-04-18_snippet_4\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { Wallet } from '@mercadopago/sdk-react';\n\n\n<Wallet\n   initialization={initialization}\n   customization={customization}\n   onSubmit={onSubmit}\n   onReady={onReady}\n   onError={onError}\n/>\n```\n\n----------------------------------------\n\nTITLE: Cancelling Payments in Java\nDESCRIPTION: This Java snippet shows how to cancel a payment using the MercadoPago Java SDK. It sets the access token, prepares custom headers, and calls the cancel method on the PaymentClient class.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/cancel-reserve.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nLong paymentId = 123456789L;\n\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nPaymentClient client = new PaymentClient();\nclient.cancel(paymentId, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Refreshing OAuth Token in PHP\nDESCRIPTION: Refreshes an existing OAuth token for a Mercado Pago application using client credentials and a refresh token. Requires client secret, client ID, and the current refresh token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/oauth.es.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new OauthClient();\n  $request = new OAuthRefreshRequest();\n    $request->client_secret = \"CLIENT_SECRET\";\n    $request->client_id = \"CLIENT_ID\";\n    $request->refresh_token = \"REFRESH_TOKEN\";\n\n  $client->refresh($request);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with wallet_purchase in Node.js\nDESCRIPTION: This Node.js code snippet shows how to create a preference with the `wallet_purchase` purpose using the Mercado Pago Node.js SDK. It defines a preference object with an item and sets the `purpose` to `wallet_purchase`, enforcing logged-in payments.  The code then uses the `mercadopago.preferences.create` method to create the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-onsubmit.en.md#2025-04-18_snippet_2\n\nLANGUAGE: node\nCODE:\n```\n// Create a preference object\nlet preference = {\n  // the \"purpose\": \"wallet_purchase\" allows only logged payments\n  // to allow guest payments, you can omit this property\n  \"purpose\": \"wallet_purchase\",\n  \"items\": [\n    {\n      \"id\": \"item-ID-1234\",\n      \"title\": \"My product\",\n      \"quantity\": 1,\n      \"unit_price\": 75.76\n    }\n  ]\n};\n \nmercadopago.preferences.create(preference)\n  .then(function (response) {\n    // This value is the preferenceId that will be sent to Brick on startup\n    const preferenceId = response.body.id;\n  }).catch(function (error) {\n    console.log(error);\n  });\n\n```\n\n----------------------------------------\n\nTITLE: Creating PagoEfectivo Payment with Java SDK\nDESCRIPTION: Creates a payment using PagoEfectivo through Mercado Pago Java SDK. Uses builder pattern for request construction and includes custom headers for idempotency.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.es.md#2025-04-18_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nPaymentCreateRequest paymentCreateRequest = PaymentCreateRequest.builder()\n          .transactionAmount(new BigDecimal(\"<TRANSACTION_AMOUNT>\"))\n          .paymentMethodId(\"<PAYMENT_METHOD_ID>\")\n          .payer(\n              PaymentPayerRequest.builder()\n                  .email(\"<EMAIL>\").build()\n          ).build();\n\nMap<String, String> customHeaders = new HashMap<>();\ncustomHeaders.put(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n\nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders).build();\n\nPaymentClient client = new PaymentClient();\nclient.create(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Printing with External Bluetooth Printer - Basic Implementation\nDESCRIPTION: Demonstrates how to use the BluetoothPrinter class to print to an external printer. Handles different print results including success, device selection needs, and error cases.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/print-external-printer.en.md#2025-04-18_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval bluetoothPrinter = MPManager.bluetooth.printer\n\nbluetoothPrinter.print(dataToPrint) { response ->\n   response\n       .doIfSuccess { printerResult ->\n           // Manage successful print case\n           when (printerResult) {\n               BluetoothPrinterResult.SUCCESS -> {\n                   // Successful print\n                   // ... Perform additional actions if necessary\n               }\n\n               BluetoothPrinterResult.NEED_SELECTION_DEVICE -> {\n                   // More than one paired device, specific address is required\n                   // ... Perform additional actions if necessary\n               }\n\n               else -> { // Other success cases }\n               }\n           }\n       }.doIfError { error ->\n           // Manage the error case if necessary\n       }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal BluetoothPrinter bluetoothPrinter = MPManager.INSTANCE.getBluetooth().getPrinter();\n\nfinal Function1<MPResponse<BluetoothPrinterResult>, Unit> callback =\n   (final MPResponse<BluetoothPrinterResult> response) -> {\n     if (response.getStatus() == ResponseStatus.SUCCESS) {\n       // Perform additional actions if necessary\n     } else {\n       //Manage the error case if necessary\n     }\n     return Unit.INSTANCE;\n   };\n\nbluetoothPrinter.print(dataToPrint, callback);\n```\n\n----------------------------------------\n\nTITLE: Validating Mercado Pago Notification Signature in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to validate the authenticity of a Mercado Pago notification by checking its signature. It extracts the x-signature header and request ID, gets the 'data.id' query parameter, parses the x-signature, computes an HMAC-SHA256 hash using a secret key and compares it against the received hash.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/notifications.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Obtain the x-signature value from the header\n$xSignature = $_SERVER['HTTP_X_SIGNATURE'];\n$xRequestId = $_SERVER['HTTP_X_REQUEST_ID'];\n\n// Obtain Query params related to the request URL\n$queryParams = $_GET;\n\n// Extract the \"data.id\" from the query params\n$dataID = isset($queryParams['data.id']) ? $queryParams['data.id'] : '';\n\n// Separating the x-signature into parts\n$parts = explode(',', $xSignature);\n\n// Initializing variables to store ts and hash\n$ts = null;\n$hash = null;\n\n// Iterate over the values to obtain ts and v1\nforeach ($parts as $part) {\n    // Split each part into key and value\n    $keyValue = explode('=', $part, 2);\n    if (count($keyValue) == 2) {\n        $key = trim($keyValue[0]);\n        $value = trim($keyValue[1]);\n        if ($key === \"ts\") {\n            $ts = $value;\n        } elseif ($key === \"v1\") {\n            $hash = $value;\n        }\n    }\n}\n\n// Obtain the secret key for the user/application from Mercadopago developers site\n$secret = \"your_secret_key_here\";\n\n// Generate the manifest string\n$manifest = \"id:$dataID;request-id:$xRequestId;ts:$ts;\";\n\n// Create an HMAC signature defining the hash type and the key as a byte array\n$sha = hash_hmac('sha256', $manifest, $secret);\nif ($sha === $hash) {\n    // HMAC verification passed\n    echo \"HMAC verification passed\";\n} else {\n    // HMAC verification failed\n    echo \"HMAC verification failed\";\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Token using cURL\nDESCRIPTION: This cURL command demonstrates how to refresh an Access Token by making a POST request to the MercadoPago OAuth token endpoint. It includes the client ID, client secret, grant type, and refresh token in the request body.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/renewal.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n'https://api.mercadopago.com/oauth/token'\\\n-H 'Content-Type: application/json' \\\n-d '{\n \"client_id\": \"client_id\",\n \"client_secret\": \"client_secret\",\n \"grant_type\": \"refresh-token\",\n \"refresh_token\": \"TG-XXXXXXXX-241983636\",\n}'\n```\n\n----------------------------------------\n\nTITLE: Creando pago con boleto bancario en C#\nDESCRIPTION: Código C# para crear un pago con boleto bancario utilizando el SDK de Mercado Pago. Configura los headers de idempotencia y construye la solicitud con los datos del pagador.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mlb.es.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = 105,\n    Description = \"Título do produto\",\n    PaymentMethodId = \"bolbradesco\",\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"test@test.com\",\n        FirstName = \"Test\",\n        LastName = \"User\",\n        Identification = new IdentificationRequest\n        {\n            Type = \"CPF\",\n            Number = \"191191191-00\",\n        },\n    },\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request, requestOptions);\n\n```\n\n----------------------------------------\n\nTITLE: Handling Challenge Completion Event\nDESCRIPTION: This JavaScript code snippet listens for a message event from the iframe to detect when the 3DS challenge is complete. Upon completion, it redirects the user to a confirmation page (`congrats.html`).\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener(\"message\", (e) => {\n     if (e.data.status === \"COMPLETE\") {\n         window.open(\"congrats.html\");\n     }\n});\n```\n\n----------------------------------------\n\nTITLE: Creando pago con boleto bancario en Node.js\nDESCRIPTION: Implementación en Node.js para crear un pago con boleto bancario utilizando el SDK de Mercado Pago. Incluye configuración de idempotencia y manejo de promesas para la respuesta.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mlb.es.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nimport { Payment, MercadoPagoConfig } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\n\npayment.create({\n    body: { \n        transaction_amount: req.transaction_amount,\n        token: req.token,\n        description: req.description,\n        installments: req.installments,\n        payment_method_id: req.paymentMethodId,\n        issuer_id: req.issuer,\n            payer: {\n            email: req.email,\n            identification: {\n        type: req.identificationType,\n        number: req.number\n    }}},\n    requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n.then((result) => console.log(result))\n.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Transaction Information Response (MLC)\nDESCRIPTION: This JSON snippet represents a successful response from the Mercado Pago API when retrieving transaction information. It includes various details about the transaction, such as creation and update dates, external reference, ID, point of interaction, seller configuration, status, and transaction details. This response is specific to the MLC region.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.es.md#2025-04-18_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_date\": \"2021-01-01T00:00:00.000Z\",\n  \"external_reference\": \"123456\",\n  \"id\": \"0d5020ed\",\n  \"last_updated_date\": \"2021-01-01T00:00:00.000Z\",\n  \"point_of_interaction\": {\n    \"type\": \"{\\\"type\\\":\\\"PSP_TRANSFER\\\"}\"\n  },\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://example.cl/notification\"\n    }\n  },\n  \"status\": \"approved\",\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": \"100,00\"\n        }\n      ]\n    },\n    \"paid_amount\": 100,\n    \"payer\": {\n      \"id\": 123456543\n    },\n    \"refunded_amount\": 1,\n    \"to\": {\n      \"accounts\": [\n        {\n          \"amount\": \"100,00\",\n          \"origin_id\": \"01AAAM001A1AY43FBR8WCM9CES\",\n          \"status_details\": [\n            {}\n          ],\n          \"owner\": {\n            \"identification\": {\n              \"number\": \"1234567890\",\n              \"type\": \"RUT\"\n            }\n          },\n          \"bank_id\": \"0000014\",\n          \"type\": \"checking_account\",\n          \"number\": \"123456\"\n        }\n      ]\n    },\n    \"total_amount\": 100,\n    \"statement_descriptor\": \"test\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SDK in Application Class (Kotlin)\nDESCRIPTION: Creates a class inheriting from Android's Application class and initializes the SDK with necessary configurations in Kotlin.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/first-steps.es.md#2025-04-18_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainApplication : Application() {\n   override fun onCreate() {\n       super.onCreate()\n       val config = MPConfigBuilder(this, \"123456789\")\n           .withBluetoothConfig()\n           .withBluetoothUIConfig()\n           .build()\n       MPManager.initialize(this, config)\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Error: Invalid Payment User\nDESCRIPTION: Triggered when attempting to pay using the same user being charged. Requires using a different payer email for the transaction.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/vtex/common-errors.es.md#2025-04-18_snippet_2\n\nLANGUAGE: error-code\nCODE:\n```\ninvalid_users\n```\n\n----------------------------------------\n\nTITLE: Canceling a MercadoPago Payment Reservation in C#\nDESCRIPTION: This code snippet demonstrates how to cancel a payment reservation in MercadoPago using C#. It requires the MercadoPago SDK, an access token, and a payment ID. The code initializes the configuration, creates a PaymentClient and calls the CancelAsync method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/cancel-reserve.es.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar client = new PaymentClient();\nPayment payment = await client.CancelAsync(paymentId);\n```\n\n----------------------------------------\n\nTITLE: Hiding Payment Button in Payment Brick\nDESCRIPTION: Configuration to hide the default payment button and implementing callbacks for form handling. Shows implementation in both JavaScript and React.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/hide-element.en.md#2025-04-18_snippet_1\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n    ...,\n    callbacks: {\n        onReady: () => {\n            // callback called when brick is ready\n        },\n        onError: (error) => { \n            // callback called for all Brick error cases\n        },\n    },\n    customization: {\n        visual: {\n            hidePaymentButton: true\n        }\n    }\n}\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n   hidePaymentButton: true\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Open Finance Payment with cURL\nDESCRIPTION: This cURL request demonstrates how to create an Open Finance payment by directly calling Mercado Pago's API. It includes all required parameters such as payment method, transaction amount, payer information, and Open Finance configuration with an optional bank origin identifier.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/advanced-openFinance.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{access_token}}' \\\n--data-raw '{\n\"callback_url\": \"https://example.com/\",\n\"payment_method_id\": \"pix\",\n\"transaction_amount\": 5,\n\"external_reference\": \"my_order_id_123\",\n\"description\": \"Online Open Finance Payment\",\n\"date_of_expiration\": \"2023-08-01T12:44:41.000-03:00\",\n\"payer\": {\n   \"first_name\": \"Carlos\",\n   \"last_name\": \"Silva\",\n   \"email\": \"test_user_58128038@testuser.com\",\n   \"identification\": {\n       \"number\": \"12345678909\",\n       \"type\": \"CPF\"\n   }\n},\n\"point_of_interaction\": {\n   \"linked_to\": \"openfinance\",\n   \"transaction_data\": {\n       \"bank_info\": {\n           \"origin_bank_id\": \"908c846f-b4b5-4307-901e-b8882ef7ce99\"\n       }\n   }\n}\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring SFTP Upload Details in JSON\nDESCRIPTION: JSON object containing SFTP server credentials and settings for uploading generated reports to an external server.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ \"server\": \"sftp.myserver.com\", \"password\": \"mypassword\", \"remote_dir\": \"/myfolder\", \"port\": 22, \"username\": \"myusername\" }\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference in C#\nDESCRIPTION: This C# snippet demonstrates the creation of a payment preference request, including item details and purpose settings, before sending it to the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.en.md#2025-04-18_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n// Create the preference request object\nvar request = new PreferenceRequest\n{\n  // the Purpose = 'wallet_purchase', allows only logged payments.\n  // to allow guest payments you can omit this property\n    Purpose = 'wallet_purchase',\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"Meu produto\",\n            Quantity = 1,\n            CurrencyId = \"BRL\",\n            UnitPrice = 75,\n        },\n    },\n};\n\n// Create the preference using the client\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Creando un pago con Fintoc en Go\nDESCRIPTION: Este snippet muestra cómo crear un pago usando Fintoc como método de pago en Go. Configura el cliente de Mercado Pago, define los detalles del pago y ejecuta la solicitud.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-simplified.es.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/payment\"\n)\n\nfunc main() {\n\taccessToken := \"YOUR_ACCESS_TOKEN\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := payment.NewClient(cfg)\n\n\trequest := payment.Request{\n\t\tTransactionAmount: 5000,\n    Description: \"Titulo del producto\",\n\t\tPaymentMethodID:   \"fintoc\",\n\t\tPayer: &payment.PayerRequest{\n\t\t\tEmail: \"test_user_123@testuser.com\",\n\t\t},\n\t\tCallbackURL: \"https://www.your-site.com\",\n    PointOfInteraction: &payment.PointOfInteraction{\n    Type: \"CHECKOUT\",\n    SubType: \"INTER_PSP\",\n    }\n\t}\n\n\tresource, err := client.Create(context.Background(), request)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\n----------------------------------------\n\nTITLE: Gradle configuration for AndroidX\nDESCRIPTION: This Groovy snippet details the configuration needed for the android/build.gradle file when using AndroidX, specifying various versions and removing the support library property.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-cli.en.md#2025-04-18_snippet_3\n\nLANGUAGE: Groovy\nCODE:\n```\nbuildscript {\n  ext {\n    buildToolsVersion = \"30.0.2\"\n    minSdkVersion = 21\n    compileSdkVersion = 30\n    targetSdkVersion = 30\n    ndkVersion = \"21.4.7075529\"\n    // Remove 'supportLibVersion' property and put specific versions for AndroidX libraries\n    androidXAnnotation = \"1.2.0\"\n    androidXBrowser = \"1.3.0\"\n    // Put here other AndroidX dependencies\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing In-Person Payments with IVA Tax - Mercado Pago POS API\nDESCRIPTION: API request showing how to create a point-of-sale order with IVA tax calculation. Demonstrates the structure for sending item details and tax information for in-store transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/iva-colombia.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PUT \\\n    'https://api.mercadopago.com/instore/qr/seller/collectors/{user_id}/stores/{external_store_id}/pos/{external_pos_id}/orders' \\\n    -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n  \"external_reference\": 12345,\n  \"title\": \"Product order\",\n  \"notification_url\": \"www.yourserver.com\",\n  \"total_amount\": 6000,\n  \"items\": [\n    {\n      \"sku_number\": \"A123K9191938\",\n      \"category\": \"marketplace\",\n      \"title\": \"Item 1\",\n      \"description\": \"Item\",\n      \"unit_price\": 3000,\n      \"quantity\": 2,\n      \"unit_measure\": \"unit\",\n      \"total_amount\": 6000\n    }\n  ],\n  \"taxes\": [\n    {\n      \"value\": 1140,\n      \"type\": \"IVA\"\n    }\n  ],\n  \"sponsor\": {\n    \"id\": 446566691\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Initiating Payment with MercadoPago using cURL\nDESCRIPTION: This cURL command is used to initiate a payment request to MercadoPago’s API. It requires headers for content type, idempotency, authorization, and session ID, along with a detailed JSON request body. Key parameters include the transaction amount, payment method, payer information, and additional info about items and shipments. The expected output is a response from MercadoPago confirming the payment transaction. Ensure that the appropriate header values and dynamic data such as token and URLs are correctly supplied.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/apparel.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}} \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}}' \\\n--data-raw '{\n    \"transaction_amount\": 150.00,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"debvisa\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Pedido01\",\n    \"description\": \"PEDIDO NOVO\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"payer\": {\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"12345678909\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"title\": \"Serviço\",\n                \"type\": \"my_items_type\",\n                \"picture_url\": \"{{url_image}}\",\n                \"description\": \"Descrição de serviço\",\n                \"category_id\": \"fashion\",\n                \"quantity\": 1,\n                \"unit_price\": 150\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_prime_user\": true,\n            \"is_first_purchase_online\": true,\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"206233-2002\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"3003\"\n            },\n            \"authentication_type\": \"Facebook\",\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": true,\n            \"receiver_address\": {\n                \"zip_code\": \"306233-2003\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"3003\",\n                \"floor\": \"5\",\n                \"apartment\": \"502\",\n                \"state_name\":\"SP\",\n                \"city_name\":\"Osasco\"\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Validating Coupon Before Payment with cURL\nDESCRIPTION: This cURL command is used to validate a coupon before proceeding with a payment. It requires parameters such as Authorization, x-payer-token, and id to check the coupon's validity and retrieve discount details. The input must include a valid access token and payer token, while the expected output is a response detailing whether the coupon is valid and any applicable discounts.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/create-discount-promise-with-coupon.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n'https://api.mercadopago.com/v2/wallet_connect/coupons' \\\n--header 'Authorization: <Bearer YOUR_ACCESS_TOKEN>' \\\n--header 'x-payer-token: <PAYER_TOKEN>' \\\n--header 'Content-Type: application/json' \\\n-d '{\\n    \"id\": \"<COUPON>\"\\n }'\n```\n\n----------------------------------------\n\nTITLE: Creating Settlement Report Configuration - Java Implementation\nDESCRIPTION: Java implementation using HttpsURLConnection to create a new settlement report configuration via MercadoPago's API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.es.md#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report/config\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"POST\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nconnection.setDoOutput(true);\n\nString body = \"{\n                    \\\"file_name_prefix\\\": \\\"settlement-report-USER_ID\\\",\n                    \\\"show_fee_prevision\\\": false,\n                    \\\"show_chargeback_cancel\\\": true,\n                    \\\"coupon_detailed\\\": true,\n                    \\\"include_withdraw\\\": true,\n                    \\\"shipping_detail\\\": true,\n                    \\\"refund_detailed\\\": true,\n                    \\\"display_timezone\\\": \\\"GMT-04\\\",\n                    \\\"notification_email_list\\\": [\n                        \\\"example@email.com\\\",\n                        \\\"john@example.com\\\",\n                    ],\n                    \\\"frequency\\\": {\n                        \\\"hour\\\": 0,\n                        \\\"type\\\": \\\"monthly\\\",\n                        \\\"value\\\": 1\n                    },\n                    \\\"columns\\\": [\n                        { \\\"key\\\": \\\"TRANSACTION_DATE\\\" },\n                        { \\\"key\\\": \\\"SOURCE_ID\\\" },\n                        { \\\"key\\\": \\\"EXTERNAL_REFERENCE\\\" },\n                    ]\n                }\";\n\ntry(OutputStream os = connection.getOutputStream()) {\n    byte[] input = body.getBytes(\"utf-8\");\n    os.write(input, 0, input.length);\n}\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\n----------------------------------------\n\nTITLE: Implementing Security Script in HTML\nDESCRIPTION: Code for adding Mercado Pago's security script to prevent fraud on different website sections. Requires specifying the view parameter for the relevant page type.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.en.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"home\"></script>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Methods with Mercado Pago SDK\nDESCRIPTION: Code snippets in multiple languages to fetch available payment methods using the Mercado Pago API. Each example demonstrates how to retrieve a list of all payment methods using the respective SDK by sending a GET request to the /v1/payment_methods endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nMercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n$payment_methods = MercadoPago::get(\"/v1/payment_methods\");\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nvar Mercadopago = require('mercadopago');\nMercadopago.configurations.setAccessToken(config.access_token);\nvar response = await Mercadopago.payment_methods.listAll();\nvar payment_methods = response.body;\n```\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\nPaymentMethodClient client = new PaymentMethodClient();\nclient.list();\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\npayment_methods_response = sdk.payment_methods.get()\npayment_methods = payment_methods_response[:response]\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.PaymentMethod;\nusing MercadoPago.Config;\nusing MercadoPago.Resource;\nusing MercadoPago.Resource.PaymentMethod;\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\nvar client = new PaymentMethodClient();\nResourcesList<PaymentMethod> paymentMethods = await client.ListAsync();\n```\n\nLANGUAGE: python\nCODE:\n```\nimport market\nsdk = Mercadopago.SDK(\"ACCESS_TOKEN\")\npayment_methods_response = sdk.payment_methods().list_all()\npayment_methods = payment_methods_response[\"response\"]\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n-H 'accept: application/json' \\\n-H 'content-type: application/json' \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n'https://api.mercadopago.com/v1/payment_methods' \\\n```\n\n----------------------------------------\n\nTITLE: Adding a Card to a Customer with Go\nDESCRIPTION: This Go code demonstrates how to add a new card to a customer using the Mercado Pago Go SDK. It creates a new configuration with the access token, initializes a customer card client, and creates a card request with the token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\naccessToken := \"{{ACCESS_TOKEN}}\"\n\n\n  cfg, err := config.New(accessToken)\n  if err != nil {\n      fmt.Println(err)\n      return\n  }\n\n\n  client := customercard.NewClient(cfg)\n\n\n  request := customercard.Request{Token: \"{{CARD_TOKEN}}\"}\n\n\n  resource, err := client.Create(context.Background(), \"{{CUSTOMER_ID}}\", request)\n  if err != nil {\n      fmt.Println(err)\n      return\n  }\n\n\n  fmt.Println(resource)\n```\n\n----------------------------------------\n\nTITLE: Creating Pix Refunds with Custom Headers using cURL\nDESCRIPTION: cURL command for creating a refund with the X-Render-In-Process-Refunds header. The command makes a POST request to the MercadoPago API, includes authorization via access token, and requests a refund of 20 monetary units for a specific payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.en.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments/{payment_id}/refunds \\\n\n-H 'X-Render-In-Process-Refunds: true' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n-H 'X-Idempotency-Key: {idempotency_key}' \\\n--data-raw '{\n    \"amount\": 20\n}'\n```\n\n----------------------------------------\n\nTITLE: Adding a Card to a Customer with C#\nDESCRIPTION: This C# example shows how to add a card to a customer using Mercado Pago's .NET SDK. It retrieves the customer by ID, creates a card request with the token, and associates the card with the customer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar customerClient = new CustomerClient();\nCustomer customer = await customerClient.GetAsync(\"247711297-jxOV430go9fx2e\");\n\nvar cardRequest = new CustomerCardCreateRequest\n{\n    Token = \"9b2d63e00d66a8c721607214cedaecda\",\n};\nCustomerCard card = await customerClient.CreateCardAsync(customer.Id, cardRequest);\n\nConsole.WriteLine(card.Id);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Release Report Configuration with MercadoPago API\nDESCRIPTION: This code snippet demonstrates how to create a new release report configuration using the MercadoPago API. It sends a POST request with custom report settings including file name prefix, withdrawal options, timezone, notification emails, frequency, and columns.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.en.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/release_report/config' \\\n    -d '{\n            \"file_name_prefix\": \"release-report-USER_ID\",\n            \"include_withdrawal_at_end\": true,\n            \"execute_after_withdrawal\": false,\n            \"display_timezone\": \"GMT-04\",\n            \"notification_email_list\": [\n                \"example@email.com\",\n                \"john@example.com\"\n            ],\n            \"frequency\": {\n                \"hour\": 0,\n                \"type\": \"monthly\",\n                \"value\": 1\n            },\n            \"columns\": [\n                {\n                    \"key\": \"DATE\"\n                },\n                {\n                    \"key\": \"SOURCE_ID\"\n                },\n                {\n                    \"key\": \"EXTERNAL_REFERENCE\"\n                }\n            ]\n    }'\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$data = '{\n            \"file_name_prefix\": \"release-report-USER_ID\",\n            \"include_withdrawal_at_end\": true,\n            \"execute_after_withdrawal\": false,\n            \"display_timezone\": \"GMT-04\",\n            \"notification_email_list\": [\n                \"example@email.com\",\n                \"john@example.com\"\n            ],\n            \"frequency\": {\n                \"hour\": 0,\n                \"type\": \"monthly\",\n                \"value\": 1\n            },\n            \"columns\": [\n                {\n                    \"key\": \"DATE\"\n                },\n                {\n                    \"key\": \"SOURCE_ID\"\n                },\n                {\n                    \"key\": \"EXTERNAL_REFERENCE\"\n                }\n            ]\n    }';\n$response = Requests::post('https://api.mercadopago.com/v1/account/release_report/config', $headers, $data);\n```\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/release_report/config\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"POST\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nconnection.setDoOutput(true);\n\nString body = \"{\n                \\\"file_name_prefix\\\": \\\"release-report-USER_ID\\\",\n                \\\"include_withdrawal_at_end\\\": true,\n                \\\"execute_after_withdrawal\\\": false,\n                \\\"display_timezone\\\": \\\"GMT-04\\\",\n                \\\"notification_email_list\\\": [\n                    \\\"example@email.com\\\",\n                    \\\"john@example.com\\\",\n                ],\n                \\\"frequency\\\": {\n                    \\\"hour\\\": 0,\n                    \\\"type\\\": \\\"monthly\\\",\n                    \\\"value\\\": 1\n                },\n                \\\"columns\\\": [\n                    { \\\"key\\\": \\\"DATE\\\" },\n                    { \\\"key\\\": \\\"SOURCE_ID\\\" },\n                    { \\\"key\\\": \\\"EXTERNAL_REFERENCE\\\" },\n                ]\n            }\";\n\ntry(OutputStream os = connection.getOutputStream()) {\n    byte[] input = body.getBytes(\"utf-8\");\n    os.write(input, 0, input.length);\n}\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\ndata = '{  \n            \"file_name_prefix\": \"release-report-USER_ID\",\n            \"include_withdrawal_at_end\": true,\n            \"execute_after_withdrawal\": false,\n            \"display_timezone\": \"GMT-04\",\n            \"notification_email_list\": [\n                \"example@email.com\",\n                \"john@example.com\"\n            ],\n            \"frequency\": {\n                \"hour\": 0,\n                \"type\": \"monthly\",\n                \"value\": 1\n            },\n            \"columns\": [\n                {\n                    \"key\": \"DATE\"\n                },\n                {\n                    \"key\": \"SOURCE_ID\"\n                },\n                {\n                    \"key\": \"EXTERNAL_REFERENCE\"\n                }\n            ]\n        }'\n\nresponse = requests.post('https://api.mercadopago.com/v1/account/release_report/config', headers=headers, data=data)\n```\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar dataString = '{\n            \"file_name_prefix\": \"release-report-USER_ID\",\n            \"include_withdrawal_at_end\": true,\n            \"execute_after_withdrawal\": false,\n            \"display_timezone\": \"GMT-04\",\n            \"notification_email_list\": [\n                \"example@email.com\",\n                \"john@example.com\"\n            ],\n            \"frequency\": {\n                \"hour\": 0,\n                \"type\": \"monthly\",\n                \"value\": 1\n            },\n            \"columns\": [\n                {\n                    \"key\": \"DATE\"\n                },\n                {\n                    \"key\": \"SOURCE_ID\"\n                },\n                {\n                    \"key\": \"EXTERNAL_REFERENCE\"\n                }\n            ]\n    }';\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/release_report/config',\n    method: 'POST',\n    headers: headers,\n    body: dataString\n};\n\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\n\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Getting Paired Printer Devices using BluetoothDiscoverDevices in Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to retrieve a list of paired Bluetooth printer devices using the `getPairedPrinterDevices` function of the `BluetoothDiscoverDevices` class. It accesses the `BluetoothDiscoverDevices` instance through the `MPManager` object and provides a callback to handle both success and error outcomes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/manage-connections.es.md#2025-04-18_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval bluetoothDiscoverDevices = MPManager.bluetooth.discover\n\nbluetoothDiscoverDevices.getPairedPrinterDevices { result ->\n   result\n       .doIfSuccess { printers ->\n           // Trabajar con la lista de dispositivos emparejados\n       }\n       .doIfError { error ->\n           // Manejar el caso de error si es necesario\n       }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MercadoPago Public Key\nDESCRIPTION: Initialize MercadoPago SDK with a public key for secure payment integration, supporting both HTML and JavaScript implementations\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pix.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  const mp = new MercadoPago(\"YOUR_PUBLIC_KEY\");\n</script>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loadMercadoPago } from \"@mercadopago/sdk-js\";\n\nawait loadMercadoPago();\nconst mp = new window.MercadoPago(\"YOUR_PUBLIC_KEY\");\n```\n\n----------------------------------------\n\nTITLE: Creating Customer and Card with MercadoPago SDK in Ruby\nDESCRIPTION: This Ruby example describes the use of the MercadoPago SDK to facilitate customer and card creation. The process involves setting up an SDK instance with an access token, followed by requesting the customer and card creation with a specified email and token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/create-customer-and-card.en.md#2025-04-18_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustomer_request = {\nemail: 'john@yourdomain.com'\n}\ncustomer_response = sdk.customer.create(customer_request)\ncustomer = customer_response[:response]\n\ncard_request = {\ntoken: '9b2d63e00d66a8c721607214cedaecda',\npayment_method_id: 'visa'\n}\ncard_response = sdk.card.create(customer['id'], card_request)\ncard = card_response[:response]\n\n```\n\n----------------------------------------\n\nTITLE: Processing Payments with SDK (Java)\nDESCRIPTION: Demonstrates how to use the SDK to process payments, including building callback URIs and launching the payment flow activity in Java.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/first-steps.es.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nPaymentFlow paymentFlow = MPManager.INSTANCE.getPaymentFlow();\n\nHashMap<String, String> metadata = new HashMap<>();\n\nUri uriSuccess = paymentFlow.buildCallbackUri(\n \"mercadopago://launcher_native_app\",\n \"success\",\n metadata,\n \"demo_app\"\n);\n\nUri uriError = paymentFlow.buildCallbackUri(\n \"mercadopago://launcher_native_app\",\n \"error\",\n metadata,\n \"demo_app\"\n);\n\nFunction1<MPResponse, Unit> callback = (MPResponse response) -> {\n return;\n};\n\npaymentFlow.launchPaymentFlowActivity(\n \"1\",\n \"My Payment Description\",\n uriSuccess,\n uriError,\n getApplicationContext(),\n \"credit\",\n callback\n);\n```\n\n----------------------------------------\n\nTITLE: Excluding Payment Methods Ruby\nDESCRIPTION: This Ruby snippet configures payment method exclusions for a Mercado Pago preference. It defines a `preference_data` hash that includes `excluded_payment_methods`, `excluded_payment_types`, and `installments` within the `payment_methods` key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n#...\npreference_data = {\n  # ...\n  payment_methods: {\n    excluded_payment_methods: [\n      { id: 'master' }\n    ],\n    excluded_payment_types: [\n      { id: 'ticket' }\n    ],\n    installments: 12\n  }\n  # ...\n}\n#...\n\n```\n\n----------------------------------------\n\nTITLE: Incluindo o MercadoPago.js via Script HTML\nDESCRIPTION: Adiciona o SDK do Mercado Pago versão 2 diretamente no HTML da aplicação através de uma tag script.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/mp-js-v2.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Details by ID with MercadoPago Java SDK\nDESCRIPTION: Demonstrates retrieving complete payment information using a specific payment ID through the PaymentClient\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/create-payments.es.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nPaymentClient client = new PaymentClient();\n\nLong paymentId = 123456789L;\nclient.get(paymentId);\n```\n\n----------------------------------------\n\nTITLE: Creating Mercado Pago Preference in PHP\nDESCRIPTION: This PHP code snippet uses the PreferenceClient to create a preference. It sets up an item with a title, quantity, and unit price. The preference is created without the 'wallet_purchase' purpose, allowing for guest payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.en.md#2025-04-18_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$client = new PreferenceClient();\n$preference = $client->create([\n  \"items\"=> array(\n    array(\n      \"title\" => \"My product\",\n      \"quantity\" => 1,\n      \"unit_price\" => 25 // item unit price, must be an integer.\n    )\n  )\n]);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Pix Payment with Mercado Pago API\nDESCRIPTION: Complete cURL request to create a Pix payment with Mercado Pago's API. The request includes transaction details, custom expiration date, payer information, and additional data for the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/pix.en.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'x-platform-id: {{PLATFORM_ID provided by the Partners team}}' \\\n--header 'Authorization: Bearer {{ACCESS_TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"transaction_amount\": 100,\n    \"installments\": 1,\n    \"statement_descriptor\": \"Seller\\'s store\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": {{ID of your Mercado Pago account related to your platform}},\n    \"payment_method_id\": \"pix\",\n    \"date_of_expiration\": \"2023-02-28T22:59:59.000-04:00\",\n    \"external_reference\": \"Platform identifier\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"description\": \"Seller\\'s product description\",\n    \"payer\": {\n        \"first_name\": \"Name. Example: John\",\n        \"last_name\": \"Last name. Example: Jones\",\n        \"email\": \"Example: test_user_{{$timestamp}}@testuser.com\",\n        \"identification\": {\n            \"type\": \"Document type. Example: CPF\",\n            \"number\": \"Number. Example: 19119119100\"\n        },\n        \"address\": {\n            \"zip_code\": \"Zip code. Example: 06233-200\",\n            \"street_name\": \"Street name. Example: Av. das Nações Unidas\",\n            \"street_number\": \"Number. Example: 3003\",\n            \"neighborhood\": \"Neighborhood. Example: Bonfim\",\n            \"city\": \"City. Example: Osasco\",\n            \"federal_unit\": \"Federal unit. Example: SP\"\n        }\n    },\n    \"additional_info\": {\n        \"referral_url\": \"Referral URL. Example: www.sellertest123.com\",\n        \"drop_shipping\": true,\n        \"delivery_promise\": \"2022-11-20\",\n        \"contrated_plan\": \"premium\",\n        \"items\": [\n            {\n                \"id\": \"1941\",\n                \"title\": \"Seller\\'s product\",\n                \"description\": \"Description of the seller\\'s product\",\n                \"picture_url\": null,\n                \"category_id\": \"electronics\",\n                \"quantity\": 1,\n                \"unit_price\": 100.00\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Name. Example: John\",\n            \"last_name\": \"Last name. Example: Jones\",\n            \"is_prime_user\": \"1\",\n            \"is_first_purchase_online\": \"1\",\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"Area code. Example: 11\",\n                \"number\": \"Number. Example: 987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"Zip code. Example: 06233-200\",\n                \"street_name\": \"Street name. Example: Av. das Nações Unidas\",\n                \"street_number\": \"Number. Example: 3003\"\n            },\n            \"registration_date\": \"2013-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"0\",\n            \"pick_up_on_seller\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"Zip code. Example: 95630000\",\n                \"street_name\": \"Street name. Example: São Luiz\",\n                \"street_number\": \"Number. Example: 15\",\n                \"floor\": \"Floor (in case it is an apartment). Example: Second\",\n                \"apartment\": \"Apartment number (in case it is an apartment). Example: 93\"\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Preference Mercado Pago .NET\nDESCRIPTION: This C# code snippet demonstrates how to create a preference using the Mercado Pago SDK. It configures the access token, creates a preference request with item details (title, quantity, currency, and unit price), and then uses the `PreferenceClient` to create the preference asynchronously. It is specific to mla, mlb, mlu, mpe, and mlm regions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/preferences.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// SDK do Mercado Pago\nusing MercadoPago.Config;\nusing MercadoPago.Client.Preference;\nusing MercadoPago.Resource.Preference;\n// Configure as credenciais\nMercadoPagoConfig.AccessToken = \"PROD_ACCESS_TOKEN\";\n// Crie o objeto de request da preferência\nvar request = new PreferenceRequest\n{\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"Meu produto\",\n            Quantity = 1,\n            CurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\n            UnitPrice = 75.56m,\n        },\n    },\n};\n// Crie a preferência usando o client\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Creating Card Payment with Mercado Pago cURL Request\nDESCRIPTION: Demonstrates how to create a card payment using a cURL request to the Mercado Pago API. Includes setting up headers and sending a POST request with payment details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.en.md#2025-04-18_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H 'accept: application/json' \\\n-H 'content-type: application/json' \\\n-H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n-H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n'https://api.mercadopago.com/v1/payments' \\\n-d '{\n\"transaction_amount\": 100,\n\"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n\"description\": \"Blue shirt\",\n\"installations\": 1,\n\"payment_method_id\": \"visa\",\n\"issuer_id\": 310,\n\"payer\": {\n\"email\": \"PAYER_EMAIL\"\n}\n}'\n```\n\n----------------------------------------\n\nTITLE: Customizing Device ID Variable Output\nDESCRIPTION: Specify a custom variable name for the Device ID using the 'output' attribute to control how the device identification is stored\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/device-id.en.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\" output=\"deviceId\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Full Refund Using MercadoPago SDK in C#\nDESCRIPTION: This snippet demonstrates how to create a full refund for a payment using the MercadoPago SDK. It initializes the SDK with an access token and uses the PaymentRefundClient to perform the refund operation. The expected input is a payment ID, and it returns a confirmation of the refund.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/refunds.en.md#2025-04-18_snippet_0\n\nLANGUAGE: dotnet\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n \nvar client = new MercadoPago.Client.Payment.PaymentRefundClient();\nclient.Refund(payment_id);\n```\n\n----------------------------------------\n\nTITLE: Integrating Facebook Pixel ID with Checkout Pro Preference in Python\nDESCRIPTION: This code snippet shows how to associate a Facebook pixel ID with a Checkout Pro preference using Python. It allows tracking of ad conversions from Facebook campaigns.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.es.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Asocia tu píxel de Facebook\npreference_data = {\n    # ...\n    \"tracks\": [\n        {\n            \"type\": \"facebook_ad\",\n            \"values\": {\n                \"pixel_id\": \"PIXEL_ID\"\n            }\n        }\n    ]\n}\n\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Excluding Payment Methods Python\nDESCRIPTION: This Python snippet shows how to configure payment method exclusions within a dictionary for Mercado Pago preferences. It sets the `excluded_payment_methods` and `excluded_payment_types` keys with lists containing dictionaries that specify the IDs of the methods and types to exclude.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n#...\npreference_data = {\n    \"excluded_payment_methods\": [\n        { \"id\": \"master\" }\n    ],\n    \"excluded_payment_types\": [\n        { \"id\": \"ticket\" }\n    ],\n    \"installments\": 12\n}\n#...\n\n```\n\n----------------------------------------\n\nTITLE: Creating Authenticated Payment with Mercado Pago API using cURL\nDESCRIPTION: This snippet shows how to create an authenticated payment using the Mercado Pago API with a cURL command. It includes the full request structure with headers and payment data in JSON format.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-external-mpi.en.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'x-idempotency-key: {IDEMPOTENCY_KEY} \\\n--header 'Authorization: Bearer {ACCESS_TOKEN}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n   \"description\": \"{PAYMENT_DESCRIPTION}\",\n   \"installments\": 1,\n   \"payer\": {\n       \"first_name\": \"{FIRST_NAME}\",\n       \"last_name\": \"{LAST_NAME}\",\n       \"address\": {},\n       \"identification\": {\n           \"number\": \"{IDENTIFICATION_NUMBER}\",\n           \"type\": \"{IDENTIFICATION_TYPE}\"\n       },\n       \"email\": \"{EMAIL}\"\n   },\n   \"payment_method_id\": \"{PAYMENT_METHOD_ID}\",\n   \"token\": \"{CARD_TOKEN}\"\n   \"payment_method\": {\n      \"type\": \"credit_card\",\n      \"data\": {\n         \"authentication\": {\n            \"type\": \"external_threeds\",\n            \"cryptogram\": \"<<String>>\",\n            \"three_ds_server_trans_id\": \"<<String>>\",\n            \"eci\": \"<<String>>\",\n            \"ds_trans_id\": \"<<String>>\",\n            \"acs_trans_id\": \"<<String>>\",\n            \"three_ds_version\": \"<<String>>\",\n            \"authentication_status\": \"<<String>>\"\n         }\n      }\n   },\n   \"statement_descriptor\": \"{STATEMENT_DESCRIPTOR}\",\n   \"transaction_amount\": {AMOUNT}\n}'\n```\n\n----------------------------------------\n\nTITLE: iOS Device SDK Implementation\nDESCRIPTION: Swift implementation for initializing and using the Mercado Pago Devices SDK in iOS applications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-chopro.en.md#2025-04-18_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport MercadoPagoDevicesSDK\n...\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        ...        \n        MercadoPagoDevicesSDK.shared.execute()\n        ...\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Response for Payer Token\nDESCRIPTION: The JSON snippet shows the expected response format from the API, containing a 'payer_token' field. The payer token is a critical component used for subsequent transactions and integrations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/create-payer-token.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"payer_token\": \"abcdef1e23f4567d8e9123eb6591ff68df74c57930551ed980239f4538a7e530\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Back URLs in Mercado Pago SDK - C#\nDESCRIPTION: Shows how to configure back URLs in a C# environment using Mercado Pago SDK for redirecting after payment processing, with auto_return handling for automatic redirection for approved payments. The main parameters include URLs for success, failure, and pending statuses, and the auto_return attribute.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/redirection.en.md#2025-04-18_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvar request = new PreferenceRequest\\n{\\n    // ...\\n    BackUrls = new PreferenceBackUrlsRequest\\n    {\\n        Success = \\\"https://www.tu-sitio/success\\\",\\n        Failure = \\\"http://www.tu-sitio/failure\\\",\\n        Pending = \\\"http://www.tu-sitio/pendings\\\",\\n    },\\n    AutoReturn = \\\"approved\\\",\\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Payment Button\nDESCRIPTION: Example of implementing a custom payment button with HTML markup and JavaScript handler function using getFormData() to process payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/hide-element.en.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\" onclick=\"createPayment();\">Custom Payment Button</button>\n```\n\nLANGUAGE: Javascript\nCODE:\n```\nfunction createPayment(){\n    window.paymentBrickController.getFormData()\n        .then(({ formData }) => {\n            console.log('formData received, creating payment...');\n            fetch(\"/process_payment\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify(formData),\n            })\n        })\n        .catch((error) => {\n            // error handling when calling getFormData()\n        });\n};\n```\n\n----------------------------------------\n\nTITLE: Creating SPEI Transfer Payment with Node.js\nDESCRIPTION: Creates a SPEI bank transfer payment using MercadoPago Node.js SDK. The code takes payment information from a request, creates a payment with transaction amount, description, and payer details, then returns payment status and link.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.es.md#2025-04-18_snippet_6\n\nLANGUAGE: node\nCODE:\n```\nconst mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(config.access_token);\n \nvar payment = req.body;\n\nvar payment_data = {\n \ttransaction_amount: 5000,\n \tdescription: 'Título del producto',\n \tpayment_method_id: 'clabe',\n \tpayer: {\n \t\tentity_type: 'individual',\n \t\temail: payment.email,\n \t\tfirst_name: payment.payerFirstName,\n    last_name: payment.payerLastName\n \t}\n};\n\nvar payment = mercadopago.payment.save(payment_data)\n \t.then(function(response) {\n \t\tres.status(response.status).json({\n \t\t\tstatus: response.body.status,\n \t\t\tstatus_detail: response.body.status_detail,\n \t\t\tid: response.body.id,\n \t\t});\n \t})\n \t.catch(function(error) {\n \t\tres.status(error.status).send(error);\n \t});\n\nvar payment_link = payment.transaction_details.external_resource_url;\n```\n\n----------------------------------------\n\nTITLE: Pre-selecting Financial Institution URL Format\nDESCRIPTION: Example URL showing how to pre-fill the buyer's name and financial institution by adding query parameters to the external_resource_url, making the payment process more convenient for users.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-simplified.en.md#2025-04-18_snippet_5\n\nLANGUAGE: external_resource_url\nCODE:\n```\nhttps://www.mercadopago.cl/sandbox/payments/1319503224/bank_transfer/fintoc?caller_id=[…]b96-ab4bcf820559&username=JohnDoe&instutuion_id=cl_banco_estado\n```\n\n----------------------------------------\n\nTITLE: Setting Back URLs for Redirection\nDESCRIPTION: This PHP code snippet shows how to set up back URLs in a Mercado Pago preference to redirect the buyer to a specified website based on the payment status. It sets the `success`, `failure`, and `pending` URLs, and also enables automatic return for approved payments using `auto_return`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$preference = new MercadoPago\\Preference();\n//...\n$preference->back_urls = array(\n    \"success\" => \"https://www.seu-site/success\",\n    \"failure\" => \"http://www.seu-site/failure\",\n    \"pending\" => \"http://www.seu-site/pending\"\n);\n$preference->auto_return = \"approved\";\n// ...\n?>\n\n```\n\n----------------------------------------\n\nTITLE: Create Payment for Custom Checkout\nDESCRIPTION: The code demonstrates creating a payment with the SDK. Requires properly formatted payment_data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.en.md#2025-04-18_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nsdk.payment().create(payment_data)\n```\n\n----------------------------------------\n\nTITLE: Setting Access Token for Mercado Pago in Node.js\nDESCRIPTION: This snippet configures the Mercado Pago SDK with the access token and retrieves the list of payment methods asynchronously.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.en.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nvar Mercadopago = require('mercadopago');\nMercadopago.configurations.setAccessToken(config.access_token);\n\nvar response = await Mercadopago.payment_methods.listAll();\nvar payment_methods = response.body;\n```\n\n----------------------------------------\n\nTITLE: Pending Coupon Validation Response\nDESCRIPTION: This JSON response confirms that the coupon is ready for use and awaiting application in a payment.  It provides details of the discount and legal terms associated with the coupon. The response includes a status code of 200 (Success).\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/coupon-validation-responses.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"status\": \"pending\",\n    \"description\": \"Descrição do cupom, como exibido para os clientes em interfaces, faturas ou recibos.\",\n    \"legal_terms\": \"URL dos termos e condições para fins legais.\",\n    \"details\": {\n       \"value\": 10.0,\n       \"type\": \"percent\",\n       \"cap\": 1000.0,\n       \"min_payment_amount\": 100.0,\n       \"max_payment_amount\": 10000.0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Discount Promise Creation - Pre-added Coupon Option\nDESCRIPTION: Process for creating a discount promise with a user-entered coupon, involving coupon validation and pre-payment coupon addition\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/discounts-intro.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* **Option 1: [with pre-added coupon](/developers/en/docs/wallet-connect/discounts/create-discount-promise-preadd-coupon)**\n    * This option involves making a request with a coupon that the user has already entered, allowing discounts to be applied in a personalized and targeted manner. To implement it, two steps are required.\n        * **[Validate the coupon before making the payment](/developers/en/docs/wallet-connect/discounts/create-discount-promise-preadd-coupon#bookmark_validate_coupon_before_making_payment)** - this step refers to the verification of the validity of the coupon already entered by the user.\n        * **[Add the coupon before proceeding to payment](/developers/en/docs/wallet-connect/discounts/create-discount-promise-preadd-coupon#bookmark_add_coupon_before_proceeding_with_payment)** - involves inserting the coupon into the system before starting the payment process.\n```\n\n----------------------------------------\n\nTITLE: Adding New Cards to a Customer in Mercado Pago with cURL\nDESCRIPTION: cURL commands to first retrieve customer cards and then add a new card to a customer in Mercado Pago. Demonstrates the direct API calls for getting and creating card resources.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.es.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n  -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n  'https://api.mercadopago.com/v1/customers/CUSTOMER_ID/cards' \\\n\ncurl -X POST \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/customers/CUSTOMER_ID/cards' \\\n    -d '{\"token\": \"9b2d63e00d66a8c721607214cedaecda\", \"issuer\": {\"id\": \"3245612\"}, \"payment_method_id\":\"debit_card\"}'\n```\n\n----------------------------------------\n\nTITLE: Rendering Brand Brick with React\nDESCRIPTION: This React code snippet shows how to render the Brand Brick using the `@mercadopago/sdk-react` library. It imports the `Brand` component and renders it within a React component. This assumes that the necessary Mercado Pago React SDK is installed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/brand-brick/default-rendering.es.md#2025-04-18_snippet_2\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { Brand } from '@mercadopago/sdk-react';\n\n<Brand />\n```\n\n----------------------------------------\n\nTITLE: Obtaining Order Data via API Reference\nDESCRIPTION: Retrieve current order data for a Point of Sale (POS) using the Mercado Pago API's get order endpoint. This curl command allows developers to fetch detailed order information for reconciliation and tracking purposes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/qr-advanced-integration.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl [Mercado Pago Get Order API Endpoint]\n```\n\n----------------------------------------\n\nTITLE: Activating Automatic Settlement Report Generation with Python\nDESCRIPTION: Python implementation using the requests library to enable automatic generation of settlement reports. This code sets up the required headers and makes a POST request to the scheduling endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.en.md#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\nresponse = requests.post('https://api.mercadopago.com/v1/account/settlement_report/schedule', headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Setting Payment Expiration Date in Ruby\nDESCRIPTION: In this Ruby example, the snippet illustrates how to specify the expiration date for payments. The date should follow the ISO 8601 standard.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\ndate_of_expiration: '2020-05-30T23:59:59.000-04:00',\n```\n\n----------------------------------------\n\nTITLE: Listing Checkout Pro API Endpoints\nDESCRIPTION: This Markdown snippet lists the various API endpoints available for Checkout Pro, including preferences, document types, payment methods, payments, cards, orders, and OAuth.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/apiref-map.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# APIs map\n\nThe following actions are available for **Checkout Pro**.\n\n[TXTSNIPPET][/guides/snippets/test-integration/apiref-preferences]\n\n[TXTSNIPPET][/guides/snippets/test-integration/apiref-documenttypes]\n\n[TXTSNIPPET][/guides/snippets/test-integration/apiref-paymentmethods]\n\n[TXTSNIPPET][/guides/snippets/test-integration/apiref-payments]\n\n[TXTSNIPPET][/guides/snippets/test-integration/apiref-cards]\n\n[TXTSNIPPET][/guides/snippets/test-integration/apiref-orders]\n\n[TXTSNIPPET][/guides/snippets/test-integration/apiref-oauth]\n```\n\n----------------------------------------\n\nTITLE: Processing First Subscription Payment - C#\nDESCRIPTION: Creates a first-time subscription payment using MercadoPago C# SDK. Implements payment request creation with subscription parameters and custom headers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/subscription-messaging.en.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = decimal.Parse(Request[\"transactionAmount\"]),\n    Token = Request[\"token\"],\n    Description = Request[\"description\"],\n    PaymentMethodId = Request[\"paymentMethodId\"],\n    Installments = Request[\"installments\"],\n    Payer = new PaymentPayerRequest\n    {\n       Id = Request[\"id\"],\n       Type = Request[\"type\"]\n   },\n    PointOfInteraction = new PointOfInteractionRequest\n    {\n         Type = Request[\"type\"],\n         TransactionData = new TransactionDataRequest\n         {\n              FirstTimeUse = Request[\"firstTimeUse\"],\n              SubscriptionId = Request[\"subscriptionId\"],\n              SubscriptionSequence = new SubscriptionSequenceRequest\n              {\n                Number = Request[\"number\"],\n                Total = Request[\"total\"]\n              },\n              InvoicePeriod = new InvoicePeriodRequest\n              {\n                Period = Request[\"period\"],\n                Type = Request[\"type\"]\n              },\n              BillingDate = Request[\"billingDate\"]\n         }\n    }\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Creating MercadoPago Preference with Multiple Items in C#\nDESCRIPTION: This C# example shows how to create a MercadoPago preference with multiple products. It creates a PreferenceRequest with a list of item requests, each containing product details, and then uses a PreferenceClient to create the preference asynchronously.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\n// Crea el request con múltiples ítems\nvar request = new PreferenceRequest\n{\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"Mi producto 1\",\n            Quantity = 1,\n            CurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\n            UnitPrice = 75.56m,\n        },\n        new PreferenceItemRequest\n        {\n            Title = \"Mi producto 2\",\n            Quantity = 2,\n            CurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\n            UnitPrice = 96.56m,\n        },\n        // ...\n    },\n};\n\n// Crea un objeto client\nvar client = new PreferenceClient();\n\n// Crea la preferencia\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Data in Python using MercadoPago SDK\nDESCRIPTION: Example of updating customer information such as email, name, phone, identification, and address details using the MercadoPago Python SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/modify-customer.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport market\nsdk = Mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\ncustomer_data = {\n\"email\": 'user@user.com',\n\"first_name\": 'john',\n\"last_name\": 'wagner',\n\"default_address\": 'Home',\n\"phone\": {\n\"area_code\": '[FAKER][PHONE_NUMBER][AREA_CODE]',\n\"number\": '001234567'\n},\n\"identification\": {\n\"type\": '[FAKER][IDENTIFICATION][TYPE]',\n\"number\": '12341234'\n},\n\"address\": {\n\"zip_code\": '[FAKER][ADDRESS][ZIP_CODE]',\n\"street_name\": '[FAKER][ADDRESS][STREET_NAME]',\n\"street_number\": '2'\n},\n\"description\": 'Customer Information',\n\"default_card\": 'None'\n}\ncustomer_response = sdk.customer().update(customer_id, customer_data)\ncustomer = customer_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Boleto Payment Form with Required Fields\nDESCRIPTION: This HTML snippet provides a form for Boleto payment processing, capturing both typical personal details and additional address information essential for Boleto transactions. The form includes fields such as zip code, street name, street number, neighborhood, city, and federal unit, and ensures correct input by the buyer to guarantee payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n\n <form id=\"form-checkout\" action=\"/process_payment\" method=\"post\">\n   <div>\n       <h1>Payer Request</h1>\n     <div>\n       <label for=\"payerFirstName\">Nome</label>\n       <input id=\"form-checkout__payerFirstName\" name=\"payerFirstName\" type=\"text\">\n     </div>\n     <div>\n       <label for=\"payerLastName\">Sobrenome</label>\n       <input id=\"form-checkout__payerLastName\" name=\"payerLastName\" type=\"text\">\n     </div>\n     <div>\n       <label for=\"email\">E-mail</label>\n       <input id=\"form-checkout__email\" name=\"email\" type=\"text\">\n     </div>\n     <div>\n       <label for=\"identificationType\">Tipo de documento</label>\n       <input id=\"form-checkout__identificationType\" name=\"identificationType\" type=\"text\"></input>\n     </div>\n     <div>\n       <label for=\"identificationNumber\">Número do documento</label>\n       <input id=\"form-checkout__identificationNumber\" name=\"identificationNumber\" type=\"text\">\n     </div>\n     <div>\n       <label for=\"zip_code\"> CEP: </label>\n       <input id=\"form-checkout__zip_code\" name=\"zip_code\" type=\"text\">\n     </div>\n     <div>\n       <label for=\"street_name\"> Rua: </label>\n       <input id=\"form-checkout__street_name\" name=\"street_name\" type=\"text\">\n     </div>\n     <div>\n       <label for=\"street_number\"> Número: </label>\n       <input id=\"form-checkout__street_number\" name=\"street_number\" type=\"text\">\n     </div>\n     <div>\n       <label for=\"neighborhood\"> Bairro: </label>\n       <input id=\"form-checkout__neighborhood\" name=\"neighborhood\" type=\"text\">\n     </div>\n     <div>\n       <label for=\"city\"> Cidade: </label>\n       <input id=\"form-checkout__city\" name=\"city\" type=\"text\">\n     </div>\n     <div>\n       <label for=\"federal_unit\"> Estado: </label>\n       <input id=\"form-checkout__federal_unit\" name=\"federal_unit\" type=\"text\">\n     </div>\n   </div>\n   <div>\n     <div>\n       <input type=\"hidden\" name=\"transactionAmount\" id=\"transactionAmount\" value=\"100\">\n       <input type=\"hidden\" name=\"description\" id=\"description\" value=\"Nome do Produto\">\n       <br>\n       <button type=\"submit\">Pagar</button>\n     </div>\n   </div>\n </form>\n\n```\n\n----------------------------------------\n\nTITLE: Processing First Subscription Payment - Java\nDESCRIPTION: Creates a first-time subscription payment using MercadoPago Java SDK. Implements builder pattern for constructing payment request with subscription details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/subscription-messaging.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> customHeaders = new HashMap<>();\ncustomHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest request = PaymentCreateRequest.builder()\n        .transactionAmount(request.getTransactionAmount())\n        .installments(request.getInstallments())\n        .token(request.getToken())\n        .payer(PaymentPayerRequest.builder()\n                        .id(request.getPayer().getId())\n                        .type(request.getPayer().getType())\n                        .build())\n        .pointOfInteraction(PointOfInteraction.builder()\n                .type(request.getPointOfInteraction().getType())\n                .transactionData(TransactionData.builder()\n                        .firstTimeUse(request.getTransactionData().getFirstTimeUse())\n                        .subscriptionId(request.getTransactionData().getSubscriptionId())\n                        .subscriptionSequence(SubscriptionSequence.builder()\n                                .number(request.getTransactionData().getSubscriptionSequence().getNumber())\n                                .total(request.getTransactionData().getSubscriptionSequence().getTotal())\n                                .build())\n                        .invoicePeriod(InvoicePeriod.builder()\n                                .period(request.getTransactionData().getInvoicePeriod().getPeriod())\n                                .type(request.getTransactionData().getInvoicePeriod().getType())\n                                .build())\n                        .billingDate(request.getTransactionData().getBillingDate())\n                        .build())\n                .build())\n        .build();\n\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Payment Reserve in Mercado Pago\nDESCRIPTION: These code snippets demonstrate how to cancel a reserved payment in Mercado Pago across multiple programming languages. Each example shows how to use the Mercado Pago SDK to cancel a payment, which is useful when a payment is not approved or a buyer withdraws from a purchase.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/cancel-reserve.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->cancel($payment_id, $request_options);\n  echo $payment->status;\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, Payment } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: 'YOUR_ACCESS_TOKEN' });\nconst payment = new Payment(client);\n\npayment.cancel({\nid: '<PAYMENT_ID>',\nrequestOptions: {\nidempotencyKey: '<IDEMPOTENCY_KEY>'\n},\n}).then(console.log).catch(console.log);\n```\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n\nLong paymentId = 123456789L;\n\nPaymentClient client = new PaymentClient();\nclient.cancel(paymentId);\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new(ENV_ACCESS_TOKEN)\n\nrequest = {\nstatus: 'canceled'\n}\n\npayment_response = sdk.payment.update(payment_id, request)\npayment = payment_response[:response]\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar client = new PaymentClient();\nPayment payment = await client.CancelAsync(paymentId);\n```\n\nLANGUAGE: python\nCODE:\n```\nimport market\nsdk = Mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\npayment_data = {\n\"status\": \"cancelled\"\n}\n\npayment_response = sdk.payment().update(payment_id, payment_data)\npayment = payment_response[\"response\"]\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/payment\"\n)\n\nfunc main() {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\n\tclient := payment.NewClient(cfg)\n\n\tresource, err := client.Cancel(context.Background(), <PAYMENT_ID>)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PUT \\\n'https://api.mercadopago.com/v1/payments/PAYMENT_ID' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n-d '{\"status\": \"cancelled\"}'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n...\n\"status\": \"cancelled\",\n\"status_detail\": \"by_collector\",\n...\n\"captured\": false,\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment in Go\nDESCRIPTION: Creates and captures payment using MercadoPago Go SDK. Includes full payment creation and capture process with error handling.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_24\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/payment\"\n)\n\nfunc main() {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := payment.NewClient(cfg)\n\n\t// Create payment.\n\trequest := payment.Request{\n\t\tTransactionAmount: 105.1,\n\t\tPayer: &payment.PayerRequest{\n\t\t\tEmail: \"{{EMAIL}}\",\n\t\t},\n\t\tToken:        \"{{CARD_TOKEN}}\",\n\t\tInstallments: 1,\n\t\tCapture:      false,\n\t}\n\n\tresource, err := client.Create(context.Background(), request)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\t// Capture.\n\tresource, err = client.Capture(context.Background(), resource.ID)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Wallet Brick with JavaScript\nDESCRIPTION: This code snippet demonstrates how to render the Mercado Pago Wallet Brick on a website using JavaScript. It initializes the MercadoPago SDK, creates a bricks builder, and then renders the Wallet Brick within a specified container, configured with a preference ID and callback functions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-onsubmit.es.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n    <title>Bricks</title>\\n  </head>\\n  <body>\\n    <div id=\\\"walletBrick_container\\\"></div>\\n    <script src=\\\"https://sdk.mercadopago.com/js/v2\\\"></script>\\n    <script>\\n      const mp = new MercadoPago('YOUR_PUBLIC_KEY');\\n      const bricksBuilder = mp.bricks();\\n      const renderWalletBrick = async (bricksBuilder) => {\\n        const settings = {\\n          initialization: {\\n             preferenceId: '<PREFERENCE_ID>', // preferenciaId generado en backend\\n          },\\n          callbacks: {\\n            onReady: () => {\\n              /*\\n                Callback llamado cuando el Brick está listo.\\n                Aquí puedes ocultar loading de su sitio, por ejemplo.\\n              */\\n            },\\n            onSubmit: ({ selectedPaymentMethod, formData }) => {\\n              // callback llamado al hacer clic en Wallet Brick\\n              // esto es posible porque el Brick es un botón\\n            },\\n            onError: (error) => {\\n              // callback llamado para todos los casos de error de Brick\\n              console.error(error);\\n            },\\n          },\\n        };\\n        window.walletBrickController = await bricksBuilder.create(\\n          'wallet',\\n          'walletBrick_container',\\n          settings\\n        );\\n      };\\n      renderWalletBrick(bricksBuilder);\\n    </script>\\n  </body>\\n</html>\\n\"\n```\n\n----------------------------------------\n\nTITLE: Generating BCrypt Signature for Webhook Notification in Java\nDESCRIPTION: Example of how to validate the signature of a Mercado Pago webhook notification using BCrypt in Java. This code snippet demonstrates the verification of the notification's authenticity by combining the transaction ID, encryption password, and generation date.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/generate.es.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nBCrypt.checkpw(transaction_id + '-' + password_for_encryption + '-' + generation_date, payload_signature)\n```\n\n----------------------------------------\n\nTITLE: Fetching Identification Types with JavaScript\nDESCRIPTION: This JavaScript snippet fetches available identification document types from MercadoPago and populates a dropdown menu in a form. It calls an async function to retrieve data via `mp.getIdentificationTypes()`, and dynamically updates the form's select element using the helper function `createSelectOptions`. Ensure that the MercadoPago library is initialized and that the form contains an element with id: 'form-checkout__identificationType'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n\n(async function getIdentificationTypes() {\ntry {\nconst identificationTypes = await mp.getIdentificationTypes();\nconst identificationTypeElement = document.getElementById('form-checkout__identificationType');\n\ncreateSelectOptions(identificationTypeElement, identificationTypes);\n} catch (e) {\nreturn console.error('Error getting identificationTypes: ', e);\n}\n})();\n\nfunction createSelectOptions(elem, options, labelsAndKeys = { label: \"name\", value: \"id\" }) {\nconst { label, value } = labelsAndKeys;\n\nelem.options.length = 0;\n\nconst tempOptions = document.createDocumentFragment();\n\noptions.forEach(option => {\nconst optValue = option[value];\nconst optLabel = option[label];\n\nconst opt = document.createElement('option');\nopt.value = optValue;\nopt.textContent = optLabel;\n\ntempOptions.appendChild(opt);\n});\n\nelem.appendChild(tempOptions);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updated Payment Processing with MercadoPago in Java\nDESCRIPTION: This Java snippet adapts to the latest MercadoPago API to create a payment request using dynamic parameters from the request object, targeting a more integrated approach to processing payments. Requires the MercadoPago Java SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.en.md#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nPaymentClient client = new PaymentClient();\nPaymentCreateRequest paymentCreateRequest =\n  PaymentCreateRequest.builder()\n      .transactionAmount(request.getTransactionAmount())\n      .token(request.getToken())\n      .installments(request.getInstallments())\n      .paymentMethodId(request.getPaymentMethodId())\n      .payer(\n          PaymentPayerRequest.builder()\n              .email(request.getPayer().getEmail())\n              .identification(\n                  IdentificationRequest.builder()\n                      .type(request.getPayer().getIdentification().getType())\n                      .number(request.getPayer().getIdentification().getNumber())\n                      .build())\n              .build())\n      .build();\nclient.create(paymentCreateRequest);\n\n```\n\n----------------------------------------\n\nTITLE: Activate Automatic Report Schedule API Request\nDESCRIPTION: API request to activate automatic generation of settlement reports based on configured frequency. Sets the 'scheduled' property to true.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/schedule'\n```\n\n----------------------------------------\n\nTITLE: Requesting Access Token with Authorization Code using cURL\nDESCRIPTION: This cURL command demonstrates how to make a POST request to obtain an Access Token using the Authorization code flow. It sends the client ID, client secret, authorization code, grant type, redirect URI, and refresh token to the Mercado Pago OAuth endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/creation.en.md#2025-04-18_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    'https://api.mercadopago.com/oauth/token'\\\n    -H 'Content-Type: application/json' \\\n    -d '{\n  \"client_id\": \"client_id\",\n  \"client_secret\": \"client_secret\",\n  \"code\": \"TG-XXXXXXXX-241983636\",\n  \"grant_type\": \"authorization_code\",\n  \"redirect_uri\": \"https://www.redirect-url.com\",\n  \"refresh_token\": \"TG-XXXXXXXX-241983636\",\n  \"test_token\": \"false\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet Preference in React\nDESCRIPTION: This React snippet addresses the creation of a preference when the Wallet Brick is submitted. It includes callbacks for various states like error handling and readiness, offering a compact representation for React-based applications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/create-preference-submit.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst onSubmit = async (formData) => {\n // callback called when clicking on Wallet Brick\n // this is possible because Brick is a button\n // at this submission moment, you should create the preference\n const yourRequestBodyHere = {\n   items: [\n     {\n       id: '202809963',\n       title: 'Dummy title',\n       description: 'Dummy description',\n       quantity: 1,\n       unit_price: 10,\n     },\n   ],\n   purpose: 'wallet_purchase',\n };\n return new Promise((resolve, reject) => {\n   fetch('/create_preference', {\n     method: 'POST',\n     headers: {\n       'Content-Type': 'application/json',\n     },\n     body: JSON.stringify(yourRequestBodyHere),\n   })\n     .then((response) => response.json())\n     .then((response) => {\n       // resolve the promise with the preference ID\n       resolve(response.preference_id);\n     })\n     .catch((error) => {\n       // handle the error response when attempting to create the preference\n       reject();\n     });\n });\n};\n\n\nconst onError = async (error) => {\n // callback called for all Brick error cases\n console.log(error);\n};\n\n\nconst onReady = async () => {\n /*\n   Callback called when Brick is ready.\n   Here, you can hide loadings on your website, for example.\n */\n};\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment in Ruby with MercadoPago SDK\nDESCRIPTION: This code example demonstrates how to capture a partial amount from a reserved payment using the MercadoPago Ruby SDK. It initializes the SDK with the access token, prepares the request with the new transaction amount and capture flag, and updates the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.en.md#2025-04-18_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\nrequest = {\ntransaction_amount: 75,\ncapture: true\n}\n\npayment_response = sdk.payment.update(payment_id, request)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Loyalty Program Data Structure\nDESCRIPTION: This JSON snippet illustrates how to incorporate the `loyalty` field within an order to add points to a specified program. It includes all required attributes such as program name, transaction details, and product information. Note the nested structure for 'products' and 'cashier_identification'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/hidden-qr-unattended-loyalty.es.md#2025-04-18_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"collector_id\": 446566691,\n    \"sponsor_id\": 446559784,\n    \"items\":[{\n        \"title\": \"$500.00 de SUPER\",\n        \"currency_id\": \"ARS\",\n        \"description\": \"$500.00 de SUPER\",\n        \"quantity\": 1.0,\n        \"unit_price\": 500.00\n        }],\n    \"external_reference\": \"45ea80da\",\n    \"notification_url\": \"https://www.tusitio.com\",\n\n    \"loyalty\": {\n        \"program\": \"serviclub\",\n        \"transaction_id\": \"00029-45ea80da\",\n        \"invoice_number\": \"45ea80da\",\n        \"transaction_date\": \"2019-12-12T10:40:49.000+00:00\",\n        \"transaction_amount\": 500,\n        \"store_id\": \"00029\",\n        \"products\": [{\n            \"code\": \"2\",\n            \"quantity\": 11.2,\n            \"unit\": \"litre\",\n            \"unit_price\": 62.24\n            }],\n        \"cashier_identification\": {\n            \"type\": \"DNI\",\n            \"number\": \"00000000\"\n        },\n        \"period\": \"0000\",\n        \"shift\": \"1\",\n        \"affinity_plan\": \"7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Preference Object in Python\nDESCRIPTION: This code snippet demonstrates how to create a preference object in Python. The `purpose` is set to \"wallet_purchase\", allowing only logged-in payments. It includes an item with a title, quantity, and unit price. The purpose property can be omitted to allow guest payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-startup.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Create an item in the preference\npreference_data = {\n  # o \"purpose\": \"wallet_purchase\", allow only logged payments\n  # to allow guest payments you can omit this property\n    \"purpose\": \"wallet_purchase\",\n    \"items\": [\n        {\n            \"title\": \"My item\",\n            \"quantity\": 1,\n            \"unit_price\": 75.76\n        }\n    ]\n}\n \npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Requesting User Authorization - Mercado Pago Mexico\nDESCRIPTION: This curl command requests user authorization for payment management in Mexico. Update <APP_ID> and <REDIRECT_URI> as needed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/configuration.es.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl \"https://auth.mercadopago.com.mx/authorization?client_id=<APP_ID>&response_type=code&platform_id=mp&redirect_uri=<REDIRECT_URI>\"\n```\n\n----------------------------------------\n\nTITLE: Payment Request Body Example (JSON)\nDESCRIPTION: This JSON snippet represents the body of a payment request to Mercado Pago. It includes details such as the transaction amount, payment method, payer information (email, identification), and additional information about the items being purchased, buyer details (name, address, phone), and shipping address.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/home-and-deco.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\n{\n    \"transaction_amount\": 150.00,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"debvisa\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Pedido01\",\n    \"description\": \"PEDIDO NOVO\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"payer\": {\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"12345678909\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"title\": \"Serviço\",\n                \"warranty\": true,\n                \"description\": \"Descrição de serviço\",\n                \"category_id\": \"kitchen\",\n                \"quantity\": 1,\n                \"unit_price\": 150\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_prime_user\": true,\n            \"is_first_purchase_online\": true,\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"206233-2002\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"3003\"\n            },\n            \"authentication_type\": \"Facebook\",\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"306233-2003\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"3003\",\n                \"floor\": \"5\",\n                \"apartment\": \"502\",\n                \"state_name\":\"SP\",\n                \"city_name\":\"Osasco\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Benefits Section Configuration\nDESCRIPTION: YAML configuration detailing the benefits and features of the checkout solution including customization options and payment processing capabilities.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/landing.en.md#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbullet_section_with_media:\n - title: Benefits\n - type: normal\n - message: In addition to allowing greater control in the customization and integration process, Checkout offers a complete structure for processing payments with the main payment methods available\n - benefit_title: Purchases made in a single environment\n - benefit_message: The entire purchase process takes place within the online store environment, optimizing the buyer's payment steps.\n```\n\n----------------------------------------\n\nTITLE: Configuring SFTP Notification for Reports\nDESCRIPTION: API call to set up SFTP notifications for report delivery. This method allows reports to be sent directly to an SFTP server with appropriate credentials.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.es.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/reports/notifiers?type=ftp' \\\n--header 'Authorization: Bearer {{TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"type\": \"ftp\",\n    \"data\": {\n        \"ip\": \"test.files.com\",\n        \"port\": 22,\n        \"password\": \"test\",\n        \"protocol\": \"SFTP\",\n        \"username\": \"test@mercadolibre.com\",\n        \"remote_dir\": \"/\"\n    },\n    \"description\": \"test notifier sftp\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Exchanging Authorization Code for Access Token Using OAuth API\nDESCRIPTION: This snippet demonstrates how to make a POST request to the Mercado Pago OAuth API to exchange an authorization code for an access token. Necessary parameters such as CLIENT_ID, CLIENT_SECRET, AUTHORIZATION_CODE, and REDIRECT_URI must be provided. The response contains credentials necessary for managing sales on behalf of users.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/configuration.en.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n     -H 'accept: application/json' \\\n     -H 'content-type: application/x-www-form-urlencoded' \\\n     'https://api.mercadopago.com/oauth/token' \\\n     -d 'client_id=<CLIENT_ID>' \\\n     -d 'client_secret=<CLIENT_SECRET>' \\\n     -d 'grant_type=authorization_code' \\\n     -d 'code=<AUTHORIZATION_CODE>' \\\n     -d 'redirect_uri=<REDIRECT_URI>' \\\n     -d 'state=<RANDOM_ID>'\n```\n\n----------------------------------------\n\nTITLE: Consultar configuración de reportes con Python\nDESCRIPTION: Utiliza la biblioteca requests en Python para realizar una solicitud GET a la API de Mercado Pago y obtener la configuración de reportes de liquidación.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.es.md#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\nresponse = requests.get('https://api.mercadopago.com/v1/account/settlement_report/config', headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Mercado Pago Integration SAQ Types Table in Markdown\nDESCRIPTION: A markdown table showing the required Self-Assessment Questionnaire (SAQ) types for different Mercado Pago integration solutions, including Checkout Bricks, Checkout Pro, and Checkout API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/pci-v1.es.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n**Solución** | **SAQ**\n------ | ------\nCheckout Bricks | A\nCheckout Pro | A\nCheckout API | A\n```\n\n----------------------------------------\n\nTITLE: Searching Payments with PHP in MercadoPago API\nDESCRIPTION: This PHP code snippet shows how to search for payments using the MercadoPago library. It demonstrates filtering by external reference and requires the 'mercadopago.php' file.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/retrieving-payments.es.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\trequire ('mercadopago.php');\n\n\t$mp = new MP (\"ENV_ACCESS_TOKEN\");\n\n\t$payment = $mp->get(\n\t\t\"/v1/payments/search\",\n\t\tarray(\n\t\t\t\"external_reference\" => \"123456789\"\n\t\t)\n\t);\n?>\n```\n\n----------------------------------------\n\nTITLE: Listing Saved Cards in Mercado Pago\nDESCRIPTION: Code to retrieve a list of cards saved for a customer from Mercado Pago. It requires the customer ID and access token to fetch the saved cards that will be displayed to the customer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/receive-payments-with-saved-cards.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $customer_client = new CustomerClient();\n  $cards = $client->list(\"customer_id\");\n  echo implode ($cards);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerCard = new CustomerCard(client);\n\ncustomerCard.list({ customerId: '<CUSTOMER_UD>' }).then(console.log).catch(console.log);\n```\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nCustomerClient customerClient = new CustomerClient();\n\nCustomer customer = customerClient.get(\"247711297-jxOV430go9fx2e\");\ncustomerClient.listCards(customer.getId());\n```\n\nLANGUAGE: ruby\nCODE:\n```\ncards_response = sdk.card.list(customer_id)\ncards = cards_response[:response]\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar customerClient = new CustomerClient();\nResourcesList<CustomerCard> customerCards = await customerClient.ListCardsAsync(\"CUSTOMER_ID\");\n```\n\nLANGUAGE: python\nCODE:\n```\ncards_response = sdk.card().list_all(customer_id)\ncards = cards_response[\"response\"]\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/customercard\"\n)\n\nfunc main() {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := customercard.NewClient(cfg)\n\n\tresources, err := client.List(context.Background(), \"<CUSTOMER_ID>\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfor _, v := range resources {\n\t\tfmt.Println(v)\n\t}\n}\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n  -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n  'https://api.mercadopago.com/v1/customers/CUSTOMER_ID/cards' \\\n```\n\n----------------------------------------\n\nTITLE: Configuring Mercado Pago Button Text in React\nDESCRIPTION: This snippet shows how to customize the Mercado Pago payment button text and value proposition using React JSX. It sets the theme to 'default' and the value proposition to 'practicality'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-texts.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n    theme: 'default',\n    customStyle: {\n        valueProp: 'practicality',\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Webhook Validation in JavaScript\nDESCRIPTION: A complete JavaScript implementation for validating Mercado Pago webhook notifications by extracting the signature from headers, creating a manifest string, and comparing the computed HMAC with the received hash.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.en.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Obtain the x-signature value from the header\nconst xSignature = headers['x-signature']; // Assuming headers is an object containing request headers\nconst xRequestId = headers['x-request-id']; // Assuming headers is an object containing request headers\n\n// Obtain Query params related to the request URL\nconst urlParams = new URLSearchParams(window.location.search);\nconst dataID = urlParams.get('data.id');\n\n// Separating the x-signature into parts\nconst parts = xSignature.split(',');\n\n// Initializing variables to store ts and hash\nlet ts;\nlet hash;\n\n// Iterate over the values to obtain ts and v1\nparts.forEach(part => {\n    // Split each part into key and value\n    const [key, value] = part.split('=');\n    if (key && value) {\n        const trimmedKey = key.trim();\n        const trimmedValue = value.trim();\n        if (trimmedKey === 'ts') {\n            ts = trimmedValue;\n        } else if (trimmedKey === 'v1') {\n            hash = trimmedValue;\n        }\n    }\n});\n\n// Obtain the secret key for the user/application from Mercadopago developers site\nconst secret = 'your_secret_key_here';\n\n// Generate the manifest string\nconst manifest = `id:${dataID};request-id:${xRequestId};ts:${ts};`;\n\n// Create an HMAC signature\nconst hmac = crypto.createHmac('sha256', secret);\nhmac.update(manifest);\n\n// Obtain the hash result as a hexadecimal string\nconst sha = hmac.digest('hex');\n\nif (sha === hash) {\n    // HMAC verification passed\n    console.log(\"HMAC verification passed\");\n} else {\n    // HMAC verification failed\n    console.log(\"HMAC verification failed\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Intent Filter for RDCPass Android Manifest\nDESCRIPTION: XML configuration for the AndroidManifest.xml file that sets up the required intent filters for payment processing and DTE printing functionality.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-print-dte.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter> \n\t<action android:name=\"android.intent.action.SEND\" /> \n\t<action android:name=\"android.intent.action.ANSWER\" /> \n\t<action android:name=\"android.intent.action.SENDTO\" />\n\t<category android:name=\"android.intent.category.DEFAULT\" /> \n\t<data android:mimeType=\"text/*\" /> \n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Making Online Payment Request with Mercado Pago API using cURL\nDESCRIPTION: This cURL command demonstrates how to make a POST request to Mercado Pago's Secure Payments API for processing an online payment. It includes card data, payer information, and transaction details in the request body.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/secure_payments/integration.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n  -H 'X-Caller-Scopes: payments' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n  -d '{\n    \"binary_mode\": true,\n    \"capture\": true,\n    \"card\": {\n      \"card_number\": \"4688163623817035\",\n      \"security_code\": \"438\",\n      \"expiration_month\": \"08\",\n      \"expiration_year\": \"2024\",\n      \"cardholder\": {\n        \"identification\": {\n          \"number\": \"123456\",\n          \"type\": \"DNI\"\n        },\n        \"name\": \"APRO\"\n      },\n      \"device\": {\n        \"fingerprint\": {}\n      },\n      \"require_esc\": false\n    },\n    \"description\": \"Lorem ipsum.\",\n    \"installments\": 1,\n    \"issuer_id\": \"303\",\n    \"payer\": {\n      \"first_name\": \"APRO\",\n      \"last_name\": \"APRO\",\n      \"address\": {},\n      \"identification\": {\n        \"number\": \"123456\",\n        \"type\": \"DNI\"\n      },\n      \"email\": \"test@testuser.com\"\n    },\n    \"payment_method_id\": \"visa\",\n    \"statement_descriptor\": \"Lorem ipsum.\",\n    \"transaction_amount\": 9000,\n    \"additional_info\": {\n      \"items\": [\n        {\n          \"id\": \"ItemID1234\",\n          \"title\": \"Nombre del servicio\",\n          \"description\": \"Descripción del servicio\",\n          \"category_id\": \"travels\",\n          \"quantity\": 1,\n          \"unit_price\": 1234.56\n        }\n      ],\n      \"payer\": {\n        \"first_name\": \"Carlos\",\n        \"last_name\": \"Perez\",\n        \"is_prime_user\": \"1\",\n        \"is_first_purchase_online\": \"1\",\n        \"last_purchase\": \"2022-11-25T19:30:00.000-03:00\",\n        \"phone\": {\n          \"area_code\": \"57\",\n          \"number\": \"13123772\"\n        },\n        \"address\": {\n          \"zip_code\": \"11001\",\n          \"street_name\": \"Calle Falsa\",\n          \"street_number\": \"52\"\n        },\n        \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n      }\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Reserving Payment Values with Mercado Pago in C#\nDESCRIPTION: Creates a payment with 'capture=false' to reserve the value on the card without completing the transaction. This C# implementation configures the payment request object with the capture parameter set to false to authorize the payment without capturing funds.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/make-value-reserve.en.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar paymentRequest = new PaymentCreateRequest\n{\nTransactionAmount = 100,\nToken = \"ff8080814c11e237014c1ff593b57b4d\",\nDescription = \"Product Title\",\nInstallments = 1,\nPaymentMethodId = \"visa\",\nPayer = new PaymentPayerRequest\n{\nEmail = \"test_user_19653727@testuser.com\",\n},\ncapture = false,\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest);\n```\n\n----------------------------------------\n\nTITLE: Setting Brick Theme in React Component\nDESCRIPTION: This code shows how to configure a theme for a Brick component in a React application. The customization object defines the visual style with theme options including dark, default, bootstrap, or flat.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/set-theme.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n   style: {\n     theme: 'dark' | 'default' | 'bootstrap' | 'flat'\n   }\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Processing Pix Refunds in Node.js\nDESCRIPTION: Node.js example showing how to create a refund using the MercadoPago SDK. This code initializes the client with an access token and processes a refund of 100 monetary units for a specific payment ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.en.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MercadoPagoConfig, PaymentRefund } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: 'YOUR_ACCESS_TOKEN' });\nconst paymentRefund = new PaymentRefund(client);\n\nrefund.create({\npayment_id: '<PAYMENT_ID>',\nbody: {\namount: 100\n}\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Payment Intent Response for Brazil (MLB)\nDESCRIPTION: This JSON response shows the structure of the data returned when creating a payment intent for Brazil. It includes additional fields such as description and payment details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/payment-processing.en.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\":\"7d8c70b6-2ac8-4c57-a441-c319088ca3ca\",\n  \"device_id\":\"GERTEC_MP35P__8701016695109435\",\n  \"amount\":1500,\n  \"description\":\"this is an example\",\n  \"payment\":{\n     \"type\":\"credit_card\",\n     \"installments\":1,\n     \"installments_cost\":\"seller\"\n  },\n  \"additional_info\":{\n     \"external_reference\":\"4561ads-das4das4-das4754-das456\",\n     \"print_on_terminal\":true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refund Payment\nDESCRIPTION: This code refunds an accredited payment using its ID. It uses the `refund().create()` method to initiate the refund process.  This operation is only applicable to payments that have already been accredited.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.es.md#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef index(req, **kwargs):\n        payment_refund = sdk.refund().create(kwargs[\"id\"])\n\n        # Show result\n        return json.dumps(payment_refund[\"response\"], indent=4)\n```\n\n----------------------------------------\n\nTITLE: Sending Tourism-Specific Payment Data with cURL\nDESCRIPTION: This cURL request demonstrates how to send a payment request with tourism-specific data to the Mercado Pago API. It includes details about the passenger, route, and payer information to improve payment approval rates for tourism transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/tourism.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}} \\\n--data-raw '{\n    \"transaction_amount\": 1500.00,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"debvisa\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Ticket01\",\n    \"description\": \"BOG - GRU\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"payer\": {\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"12345678909\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"title\": \"Serviço\",\n                \"description\": \"Descrição de serviço\",\n                \"category_id\": \"travels\",\n                \"category_descriptor\": {\n                    \"passenger\": {\n                        \"first_name\": \"Passenger Nome\",\n                        \"last_name\": \"Passenger Sobrenome\",\n                        \"identification\": {\n                            \"type\": \"DNI\",\n                            \"number\": \"012345678\"\n                        }\n                    },\n                    \"route\": {\n                        \"departure\": \"Osasco\",\n                        \"destination\": \"Sao Paulo\",\n                        \"departure_date_time\": \"2022-03-12T12:58:41.425-04:00\",\n                        \"arrival_date_time\": \"2022-03-14T12:58:41.425-04:00\",\n                        \"company\": \"Companhia\"\n                    }\n                },\n                \"quantity\": 1,\n                \"unit_price\": 1500\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_prime_user\": true,\n            \"is_first_purchase_online\": true,\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"206233-2002\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"230032\"\n            },\n            \"authentication_type\": \"Facebook\",\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer by ID with Mercado Pago PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a customer's details by their unique ID using the Mercado Pago CustomerClient.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/customers.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new CustomerClient();\n  $client->get(\"247711297-jxOV430go9fx2e\");\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting a Merchant Order in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve all payment information for a specific product or service order using its ID. It utilizes the MerchantOrderClient to call the get method with the specified order ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/orders.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new MerchantOrderClient();\n  $client->get(123456789);\n?>\n```\n\n----------------------------------------\n\nTITLE: Parsing Payment Response JSON in Mercado Pago Integration\nDESCRIPTION: This JSON snippet represents a sample response from a successful payment creation in Mercado Pago. It includes key information such as payment status, approval date, payment method, and payer details. This response structure is crucial for handling and processing payment outcomes in your integration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-cards.en.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status\": \"approved\",\n    \"status_detail\": \"accredited\",\n    \"id\": 3055677,\n    \"date_approved\": \"2019-02-23T00:01:10.000-04:00\",\n    \"payer\": {\n        ...\n    },\n    \"payment_method_id\": \"visa\",\n    \"payment_type_id\": \"credit_card\",\n    \"refunds\": [],\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Mercado Pago API Endpoints Reference for Notification Types\nDESCRIPTION: After responding to a notification, you can retrieve complete information about the notified resource by making a request to the corresponding API endpoint. This table lists the endpoints for different notification types including payments, subscriptions, claims, orders, and chargebacks.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.en.md#2025-04-18_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n| Topic | URL | Documentation |\n| --- | --- | --- |\n| payment | `https://api.mercadopago.com/v1/payments/[ID]` | [Get payment](/developers/en/reference/payments/_payments_id/get)  |\n| subscription_preapproval | `https://api.mercadopago.com/preapproval/search` | [Search subscriptions](/developers/en/reference/subscriptions/_preapproval_search/get) |\n| subscription_preapproval_plan | `https://api.mercadopago.com/preapproval_plan/search` | [Search subscriptions plans](/developers/en/reference/subscriptions/_preapproval_plan_search/get)  |\n| subscription_authorized_payment | `https://api.mercadopago.com/authorized_payments/[ID]` | [Get invoice data](/developers/en/reference/subscriptions/_authorized_payments_id/get)  |\n| topic_claims_integration_wh | `https://api.mercadopago.com/post-purchase/v1/claims/[claim_id]` | [Get claim details](/developers/en/reference/claims/get-claim-details/get) |\n| topic_merchant_order_wh | `https://api.mercadopago.com/merchant_orders/[ID]` | [Get order](/developers/en/reference/merchant_orders/_merchant_orders_id/get) |\n| topic_chargebacks_wh | `https://api.mercadopago.com/v1/chargebacks/[ID]` | [Get chargeback](/developers/en/reference/chargebacks/_chargebacks_id/get) |\n```\n\n----------------------------------------\n\nTITLE: Cancel Pending Payment\nDESCRIPTION: This function cancels a pending payment using the payment ID. It updates the payment status to 'cancelled' and returns the result in JSON format.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.en.md#2025-04-18_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndef index(req, **kwargs):\n    payment_cancel = sdk.payment().update(kwargs[\"id\"], { \"status\": \"cancelled\" })\n\n    # Show result\n    return json.dumps(payment_cancel[\"response\"], indent=4)\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Item Preference in C#\nDESCRIPTION: This snippet demonstrates creating a preference with multiple items using C#. It shows how to set up the preference request and create it using the Mercado Pago SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\n// Create the request with multiples items\nvar request = new PreferenceRequest\n{\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"My product 1\",\n            Quantity = 1,\n            CurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\n            UnitPrice = 75.56m,\n        },\n        new PreferenceItemRequest\n        {\n            Title = \"My product 2\",\n            Quantity = 2,\n            CurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\n            UnitPrice = 96.56m,\n        },\n        // ...\n    },\n};\n\n// Create a client object\nvar client = new PreferenceClient();\n\n// Create the preference\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Implementing Mercado Pago Wallet with Callbacks in React\nDESCRIPTION: This snippet shows how to use the Wallet component in React with auxiliary callbacks. It includes onReady, onSubmit, and onError props for handling different events.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/auxiliary-callbacks.es.md#2025-04-18_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Wallet\n  initialization={{ preferenceId: '<PREFERENCE_ID>', redirectMode: 'self' }}\n  onReady={() => {}}\n  onError={() => {}}\n  onSubmit={() => {}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Constructing Authentication URL for Mercado Pago OAuth with PKCE\nDESCRIPTION: This URL is used to initiate the OAuth flow with PKCE for Mercado Pago. It includes parameters for response type, client ID, redirect URI, code challenge, and code challenge method. The code challenge and method are part of the PKCE protocol for enhanced security.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/creation.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\nhttps://auth.mercadopago.com/authorization?response_type=code&client_id=$APP_IDredirect_uri=$YOUR_URL&code_challenge=$CODE_CHALLENGE&code_challenge_method=$CODE_METHOD\n```\n\n----------------------------------------\n\nTITLE: Setting Mercado Pago Credentials in Node.js\nDESCRIPTION: This Node.js snippet shows the basic configuration steps for the Mercado Pago SDK, including setting the access token for payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.en.md#2025-04-18_snippet_6\n\nLANGUAGE: node\nCODE:\n```\n// Mercado Pago SDK\nconst mercadopago = require ('mercadopago');\n// Add Your credentials\nmercadopago.configure({\n  access_token: 'PROD_ACCESS_TOKEN'\n});\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment Value with Java\nDESCRIPTION: This code demonstrates how to capture a partial amount from a previously authorized payment using Java. It specifies the amount 75 to capture only a portion of the reserved amount.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n\nLong paymentId = 123456789L;\n\nPaymentClient client = new PaymentClient();\nclient.capture(paymentId, new BigDecimal(\"75\"));\n```\n\n----------------------------------------\n\nTITLE: Describing Successful Response for Payment Request Using Idempotency Key\nDESCRIPTION: This JSON snippet exemplifies a successful response (HTTP status code 200) for a payment request made using an idempotency key. The response includes payment details such as transaction amount, description, and payment status, along with other attributes like payer ID and site ID. Values like 'approved' indicate a successful transaction.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/idempotency-returns.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Json\nCODE:\n```\n{\n   \"id\":10458724,\n   \"status\":\"approved\",\n   \"wallet_payment\":{\n      \"transaction_amount\":700.50,\n      \"description\":\"Payment Google\",\n      \"external_reference\":\"Pago_123”\n   },\n   \"payments\":[\n      {\n         \"id\":3870106238,\n         \"status\":”approved”,\n         \"status_detail\":”accredited”,\n         \"payment_type_id\":\"credit_card\",\n         \"payment_method_id\":\"visa\",\n         \"transaction_amount\":700.50,\n         \"installments\":1,\n         \"description\":\"Payment Google\",\n         \"capture\":true,\n         \"external_reference\":\"Pago_123”\n      }\n   ],\n   \"disbursements\": [\n       {\n         \"collector_id\": \"ID_COLLECTOR\"\n       }\n   ],\n   \"payer\":{\n      \"id\":786547\n   },\n   \"site_id\": \"MLM\",\n   \"binary_mode\":true,\n   \"date_created\":\"2018-10-20T09:34:20.518-04:00\",\n   \"date_last_updated\":\"2018-10-20T09:34:20.518-04:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Transaction in Node.js with MercadoPago SDK\nDESCRIPTION: Node.js implementation for creating a payment transaction with comprehensive payer information and error handling\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-migrate-pse.es.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nimport { Payment, MercadoPagoConfig } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\nconst payment = new Payment(client);\n\npayment.create({\n      body: {\n \ttransaction_amount: 5000,\n \tdescription: 'Product description',\n \tpayment_method_id: 'pse',\n \tpayer: {\n \t\tentity_type: 'individual',\n \t\temail: req.body.email,\n \t\tidentification: {\n \t\t\ttype: req.body.identificationType,\n \t\t\tnumber: req.body.identificationNumber\n \t\t},\n            address: {\n                 zip_code: req.body.zipCode,\n                 street_name: req.body.streetName,\n                 street_number: req.body.streetNumber,\n                 neighborhood: req.body.neighborhood,\n                 city: req.body.city,\n                 Federal_unit: req.body.federalUnit\n           },\n           phone: {\n                 area_code: req.body.phoneAreaCode,\n                 number: req.body.phoneNumber\n           }\n \t},\n \tadditional_info: {\n \t\tip_address: '127.0.0.1'\n \t},\n \ttransaction_details: {\n \t\tfinancial_institution: req.body.financialInstitution\n \t},\n \tcallback_url: 'http://www.your-site.com'\n   }\n).then(function(response) {\n \t\tres.status(response.status).json({\n \t\t\tstatus: response.body.status,\n \t\t\tstatus_detail: response.body.status_detail,\n \t\t\tid: response.body.id,\n \t\t});\n \t})\n \t.catch(function(error) {\n \t\tres.status(error.status).send(error);\n \t});\n```\n\n----------------------------------------\n\nTITLE: Initiating HTML Printer with HTML Text\nDESCRIPTION: This Javascript code snippet shows how to use the `launchPrint` function with simple HTML text as the data parameter.  The `callbackResult` function handles the result of the printing operation, providing success or error details. The 'error' parameter contains detailed error information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/point-smart-printer.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlaunchPrint(\"<html><head>...</head><body>...</body></html>\",      \n    callbackResult);\n\nfunction callbackResult(result, error) {\n   if (result == 'success') {\n       // Escreva o código com sucesso aqui\n   } else {\n       //'error' tem informações detalhadas de erro, como \"outOfPaper\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Settlement Report Configuration in MercadoPago API\nDESCRIPTION: Makes a GET request to retrieve the current settlement report configuration. Returns HTTP 200 OK status with JSON response containing the current configuration settings.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.en.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/config' \\\n```\n\n----------------------------------------\n\nTITLE: Creando preferencia con atributo purpose para Cuenta de Mercado Pago en C#\nDESCRIPTION: Este código C# crea una preferencia de pago con el atributo 'purpose' configurado para 'wallet_purchase', habilitando el modo Cuenta de Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-mp-wallet.es.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Crea el objeto de request de la preferencia\nvar request = new PreferenceRequest\n{\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"Mi producto\",\n            Quantity = 1,\n            CurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\n            UnitPrice = 75m,\n        },\n    },\n    Purpose = \"wallet_purchase\",\n};\n// Crea la preferencia\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Creating Preference for Onboarding Credits with Python\nDESCRIPTION: This Python snippet demonstrates how to create a Mercado Pago preference for onboarding credits. It defines a dictionary containing item details and sets the `purpose` to `onboarding_credits`. It uses the SDK to create the preference and extract the response. This setup enables payments in installments without needing a credit card.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npreference_data = {\n    \"items\": [\n        {\n            \"title\": \"Mi producto\",\n            \"unit_price\": 100,\n            \"quantity\": 1\n        }\n    ],\n    \"purpose\": \"onboarding_credits\"\n}\n\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Discount using cURL in Mercado Pago API\nDESCRIPTION: This cURL request demonstrates how to create a payment with a discount using Mercado Pago's Advanced Payments API. It includes the wallet_payment object with transaction details and discount information, along with payer data. The discount is applied as a percentage with a maximum cap value.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/process-payments-with-discounts.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n'https://api.mercadopago.com/v1/advanced_payments' \\\n--header 'Authorization: <YOUR_ACCESS_TOKEN>' \\\n--data '{\n    \"wallet_payment\": {\n        \"transaction_amount\": 550,\n        \"description\": \"Payment Description\",\n        \"external_reference\": \"Pago_123\",\n        \"discount\": {\n            \"amount\": 55.0,\n            \"description\": \"Pruebas wc\",\n            \"detail\": {\n                \"value\": 10.0,\n                \"type\": \"percent\",\n                \"cap\": 5000\n            }\n        }\n    },\n    \"payer\": {\n        \"token\": \"PAYER_TOKEN\",\n        \"type_token\": \"wallet-token\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Processando pagamento com cartão de crédito via API Mercado Pago usando cURL\nDESCRIPTION: Exemplo de requisição POST para criar um pagamento com cartão de crédito através da API do Mercado Pago. Inclui cabeçalhos de autenticação, dados da transação, informações do pagador, detalhes do produto e informações adicionais como endereço de entrega e dados complementares do comprador.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/credit-card-general.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'x-platform-id: {{PLATFORM_ID fornecido pelo time de Partners}}' \\\n--header 'Authorization: Bearer {{ACCESS_TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"transaction_amount\": 100,\n    \"installments\": 1,\n    \"statement_descriptor\": \"Loja do vendedor\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": {{ID da sua conta Mercado Pago referente à sua plataforma}},\n    \"payment_method_id\": \"{{payment_method_id}}\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Identificador da plataforma\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"description\": \"Descrição do produto do vendedor\",\n    \"payer\": {\n        \"first_name\": \"Nome. Exemplo: João\",\n        \"last_name\": \"Sobrenome. Exemplo: Silva\",\n        \"email\": \"Exemplo: test_user_1677281619@testuser.com\",\n        \"identification\": {\n            \"type\": \"Tipo de documento. Exemplo: CPF\",\n            \"number\": \"Número do documento. Exemplo: 19119119100\"\n        },\n        \"address\": {\n            \"zip_code\": \"CEP. Exemplo: 06233-200\",\n            \"street_name\": \"Rua. Exemplo: Av. das Nações Unidas\",\n            \"street_number\": \"Número. Exemplo: 3003\",\n            \"neighborhood\": \"Bairro. Exemplo: Bonfim\",\n            \"city\": \"Cidade. Exemplo: Osasco\",\n            \"federal_unit\": \"UF. Exemplo: SP\"\n        }\n    },\n    \"additional_info\": {\n        \"referral_url\": \"URL de referência. Exemplo: www.sellertest123.com\",\n        \"drop_shipping\": true,\n        \"delivery_promise\": \"2022-11-20\",\n        \"contrated_plan\": \"premium\",\n        \"items\": [\n            {\n                \"id\": \"1941\",\n                \"title\": \"Produto do vendedor\",\n                \"description\": \"Descrição do produto do vendedor\",\n                \"picture_url\": null,\n                \"category_id\": \"Categoria. Exemplo: electronics\",\n                \"quantity\": 1,\n                \"unit_price\": 100.00\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome. Exemplo: João\",\n            \"last_name\": \"Sobrenome. Exemplo: Silva\",\n            \"is_prime_user\": \"1\",\n            \"is_first_purchase_online\": \"1\",\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"Código de área. Exemplo: 11\",\n                \"number\": \"Número. Exemplo: 987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"CEP. Exemplo: 06233-200\",\n                \"street_name\": \"Nome da rua. Exemplo: Av. das Nações Unidas\",\n                \"street_number\": \"Número. Exemplo: 3003\"\n            },\n            \"registration_date\": \"2013-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"0\",\n            \"pick_up_on_seller\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"CEP. Exemplo: 95630000\",\n                \"street_name\": \"Nome da rua. Exemplo: São Luiz\",\n                \"street_number\": \"Número. Exemplo: 15\",\n                \"floor\": \"Andar (caso seja apartamento). Exemplo: Segundo\",\n                \"apartment\": \"Número do apartamento (caso seja apartamento). Exemplo: 93\"\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Payment Response Handler\nDESCRIPTION: Method to handle the response from RDCPass, processing payment status and related data returned from the payment intent.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/cross-platform-ionic.en.md#2025-04-18_snippet_4\n\nLANGUAGE: ionic\nCODE:\n```\ngetIntent() { \n\t\tthis.intent.getIntent().then(async (intentRDCPass: any) => { \n\t\t\t\tif (intentRDCPass.extras && intentRDCPass.action == this.intent.ACTION_SEND) {  \n\t\t\t\t\tthis.data = JSON.parse(intentRDCPass.extras['android.intent.extra.TEXT']); \n\t\t\t\t\tthis.statusPay = this.data.ESTADO; \n\t\t\t\t\tlet objWithData = { \n\t\t\t\t\t\testado: this.data.ESTADO, \n\t\t\t\t\t\ttotal: this.data.TOTAL, \n\t\t\t\t\t\tpropina: this.data.PROPINA, \n\t\t\t\t\t\tmedio_pago: this.data.MEDIO_PAGO, \n\t\t\t\t\t\tcodaut: this.data.CODAUT, \n\t\t\t\t\t\tfecha_hora: this.data['FECHA&HORA'], \n\t\t\t\t\t\tmensaje_visor: this.data.MENSAJE_VISOR, \n\t\t\t\t\t}; \n\t\t\t\t\tif (this.data.ESTADO == 'APROBADO') { \n\t\t\t\t\t\t// ACCIÓN PARA EL CASO APROBADO.... \n\t\t\t\t\t} else { \n\t\t\t\t\t\t// ACCIÓN PARA EL CASO RECHAZADO.... \n\t\t\t\t\t} \n\t\t\t\t} else { \n\t\t\t\t\tsetTimeout(() => { \n\t\t\t\t\t\t\tthis.getIntent(); \n\t\t\t\t\t}, 1000); \n\t\t\t\t} \n\t\t});  \n}\n```\n\n----------------------------------------\n\nTITLE: Reserving amounts using Orders API with cURL\nDESCRIPTION: This cURL command creates an order with `capture_mode` set to `manual`, which reserves the amount from the customer's card. The `Authorization` header is required for authentication, and the `X-Idempotency-Key` helps prevent duplicate requests. Replace placeholders with actual values.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/reserve-capture-cancel-amounts.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer {{ENV_ACCESS_TOKEN}}' \\\n    -H 'X-Idempotency-Key: {{SOME_UNIQUE_VALUE}}' \\\n    'https://api.mercadopago.com/v1/orders' \\\n    -d '\n{\n  \"capture_mode\": \"manual\",\n  \"type\": \"online\",\n  \"external_reference\": \"ext_ref_1234\",\n  \"processing_mode\": \"automatic\",\n  \"marketplace\": \"NONE\",\n  \"total_amount\": \"200.00\",\n  \"payer\": {\n    \"email\": \"{{PAYER_EMAIL}}\",\n    \"identification\": {\n      \"type\": \"{{PAYER_DOCUMENT_TYPE}}\",\n      \"number\": \"{{PAYER_DOCUMENT_NUMBER}}\"\n    }\n  },\n  \"transactions\": {\n    \"payments\": [\n      {\n        \"amount\": \"200.00\",\n        \"payment_method\": {\n          \"id\": \"master\",\n          \"type\": \"credit_card\",\n          \"token\": \"{{CREDIT_CARD_TOKEN}}\",\n          \"installments\": 1\n        }\n      }\n    ]\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Hiding Value Proposition Text (MLB, MLC, MLM, MPE, MCO, MLU)\nDESCRIPTION: This snippet demonstrates how to hide the value proposition text in the Wallet Brick for MLB, MLC, MLM, MPE, MCO, and MLU regions.  It uses the `customStyle.hideValueProp` property set to `true` to hide the text.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/change-appearance.es.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n\t   theme: 'default',\n        customStyle: {\n            hideValueProp: true,\n        }\n    }\n}\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n    theme: 'default',\n    customStyle: {\n        hideValueProp: true,\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Searching Merchant Orders with Java SDK\nDESCRIPTION: This snippet illustrates how to search for merchant orders using specific filters such as status, preference_id, application_id, and payer_id. It creates a search request with defined parameters and executes the search to retrieve matching orders. The snippet is essential for accessing order data programmatically using the SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/orders.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMerchantOrderClient client = new MerchantOrderClient();\n\nMap<String, Object> filters = new HashMap<>();\nfilters.put(\"status\", \"closed\");\nfilters.put(\"preference_id\", \"12123adfasdf123u4u\");\nfilters.put(\"application_id\", \"10000000000000000\");\nfilters.put(\"payer_id\", \"123\");\nfilters.put(\"external_reference\", \"default\");\nfilters.put(\"site_id\", \"MLA\");\n\nMPSearchRequest searchRequest =\n   MPSearchRequest.builder().limit(0).offset(0).filters(filters).build();\n\nclient.search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Obtaining Access Token using Client Credentials with cURL\nDESCRIPTION: This cURL command demonstrates how to make a direct HTTP POST request to the Mercado Pago API to obtain an Access Token using client credentials. It includes the necessary headers and request body.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/creation.en.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    'https://api.mercadopago.com/oauth/token'\\\n    -H 'Content-Type: application/json' \\\n    -d '{\n  \"client_id\": \"client_id\",\n  \"client_secret\": \"client_secret\",\n  \"grant_type\": \"client_credentials\",\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Brick onReady Callback in React\nDESCRIPTION: Shows how to define an onReady callback for the Mercado Pago Brick Brand component in a React application, useful for performing actions after component initialization\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/brand-brick/callbacks.es.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { Brand } from '@mercadopago/sdk-react';\nconst onReady = async () => {\n  /*\n    Callback llamado cuando Brick esté listo.\n    Aquí puedes ocultar los cargadores de tu sitio, por ejemplo.\n  */\n};\n\n<Brand\n   onReady={onReady}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating PSE Payment with Mercado Pago in Ruby\nDESCRIPTION: Ruby implementation for creating a PSE payment using Mercado Pago SDK. The code configures the SDK with an access token, sets up idempotency key in the request headers, and creates a payment with all required information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pse-avanza.en.md#2025-04-18_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\nrequest_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\nbody = {\n  transaction_amount: 5000,\n  description: \"Product description\",\n  payment_method_id: \"pse\",\n  callback_url: \"https://your-site.com\",\n  notification_url: \"https://your-site.com\",\n  additional_info: {\n    ip_address: \"127.0.0.1\"\n  },\n  transaction_details: {\n    financial_institution: params[:financialInstitution]\n  },\n  payer: {\n    email: params[:email],\n    entity_type: \"individual\",\n    first_name: params[:firstName],\n    last_name: params[:lastName],\n    identification: {\n      type: params[:identificationType],\n      number: params[:identificationNumber]\n    }\n    address: {\n      zip_code: params[:zipCode],\n      street_name: params[:streetName],\n      street_number: params[:streetNumber],\n      neighborhood: params[:neighborhood],\n      city: params[:city],\n      federal_unit: params[:federalUnit]\n    }\n    phone: {\n      area_code: params[: phoneAreaCode],\n      number: params[: phoneNumber]\n    }\n  }\n}\n\npayment_response = sdk.payment.create(body, request_options)\npayment = payment_response[: response]\n```\n\n----------------------------------------\n\nTITLE: Creating Pending Payment Subscription with MercadoPago API using cURL\nDESCRIPTION: This cURL command creates a subscription with a pending payment status in MercadoPago. It sends a POST request to the '/preapproval' endpoint with JSON data specifying subscription details like the reason, payer email, auto-recurring settings, and a back URL. The key parameter is 'status', set to 'pending', indicating that the payment isn't immediate. This setup requires no upfront payment method, allowing completion by the user later.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/subscription-no-associated-plan-pending-payments.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/preapproval' \\\n--header 'Authorization: Bearer YOU_ACCESS_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"reason\": \"Yoga classes\",\n    \"external_reference\": \"YG-1234\",\n    \"payer_email\": \"test_user_75650838@testuser.com\",\n    \"auto_recurring\": {\n        \"frequency\": 1,\n        \"frequency_type\": \"months\",\n        \"end_date\": \"2023-07-20T15:59:52.581Z\",\n        \"transaction_amount\": 10,\n        \"currency_id\": \"BRL\"\n    },\n    \"back_url\": \"https://www.yoursite.com\",\n    \"status\": \"pending\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Customizing Action Button Text Labels in Mercado Pago Brick UI\nDESCRIPTION: This code demonstrates how to customize the text labels for various CTA buttons in the Mercado Pago Brick UI. The customizable labels include general error messages, card error messages, and return labels. When left empty, the default text is displayed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/status-screen-brick/change-texts.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    customization: {\n        visual: {\n            texts: {\n                ctaGeneralErrorLabel: \"\",\n                ctaCardErrorLabel: \"\",\n                ctaReturnLabel: \"\",\n            },\n        },\n    },\n};\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n    visual: {\n        texts: {\n            ctaGeneralErrorLabel: \"\",\n            ctaCardErrorLabel: \"\",\n            ctaReturnLabel: \"\",\n        },\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Get Customer Information\nDESCRIPTION: This calls the SDK method to get customer data using the customer ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.en.md#2025-04-18_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nsdk.customer().get(customer_id)\n```\n\n----------------------------------------\n\nTITLE: Creating BCrypt Signature for Webhook Validation in Java\nDESCRIPTION: This code snippet demonstrates how to validate the authenticity of a Mercado Pago webhook notification using BCrypt in Java. It combines the transaction ID, encryption password, and generation date to create a signature for verification.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/generate.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nBCrypt.checkpw(transaction_id + '-' + password_for_encryption + '-' + generation_date, payload_signature)\n```\n\n----------------------------------------\n\nTITLE: Initializing SDK in Application Class (Java)\nDESCRIPTION: Creates a class inheriting from Android's Application class and initializes the SDK with necessary configurations in Java.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/first-steps.es.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class MainApplication extends Application {\n\n @Override\n public void onCreate() {\n   super.onCreate();\n   MPConfig config = new MPConfigBuilder(this, \"123456789\")\n     .withBluetoothConfig()\n     .withBluetoothUIConfig()\n     .build();\n   MPManager.INSTANCE.initialize(this, config);\n }\n}\n```\n\n----------------------------------------\n\nTITLE: PDV Mode Activation Response\nDESCRIPTION: This JSON snippet represents the expected response after successfully activating Point of Sale (PDV) mode on a Mercado Pago Point device via a PATCH request. It confirms that the `operating_mode` has been successfully updated to `PDV`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/configure-devices-pdv.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"operating_mode\": \"PDV\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Return URLs in PHP for Mercado Pago Checkout Pro\nDESCRIPTION: This PHP code snippet demonstrates how to set up return URLs and auto-return behavior for a Mercado Pago Checkout Pro preference. It defines URLs for success, failure, and pending payment scenarios.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-return-urls.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$preference = new MercadoPago\\Preference();\n//...\n$preference->back_urls = array(\n    \"success\" => \"https://www.tu-sitio/success\",\n    \"failure\" => \"http://www.tu-sitio/failure\",\n    \"pending\" => \"http://www.tu-sitio/pending\"\n);\n$preference->auto_return = \"approved\";\n// ...\n?>\n```\n\n----------------------------------------\n\nTITLE: Modifying SFTP Notifier using PUT Request in MercadoPago API\nDESCRIPTION: This curl command shows how to modify an existing SFTP notifier using a PUT request to the MercadoPago API. It includes parameters for notifier type, SFTP connection data, and description.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/modifications.es.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request PUT 'https://api.mercadopago.com/v1/reports/notifiers/{{notifier_id}}?type=ftp' \\\n--header 'Authorization: Bearer {{TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"type\": \"ftp\",\n    \"data\": {\n        \"ip\": \"test.files.com\",\n        \"port\": 22,\n        \"password\": \"test\",\n        \"protocol\": \"SFTP\",\n        \"username\": \"test@mercadolibre.com\",\n        \"remote_dir\": \"/\"\n    },\n    \"description\": \"test notifier sftp\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Automatic Report Generation Success Response\nDESCRIPTION: JSON response returned after successfully scheduling automatic report generation. The response includes details about the scheduled report, such as date range, status, and generation date.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.en.md#2025-04-18_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 2541818,\n    \"user_id\": \"USER-ID\",\n    \"begin_date\": \"2019-07-01T06:00:00Z\",\n    \"end_date\": \"2019-08-01T05:59:59Z\",\n    \"created_from\": \"schedule\",\n    \"status\": \"pending\",\n    \"report_type\": \"settlement\",\n    \"generation_date\": \"2019-08-01T06:00:00.000Z\",\n    \"last_modified\": \"2019-07-24T13:45:33.479-04:00\",\n    \"retries\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Access Token for Mercado Pago in C#\nDESCRIPTION: This snippet initializes the Mercado Pago SDK and sets the access token, then lists the payment methods asynchronously using a client.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.en.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.PaymentMethod;\nusing MercadoPago.Config;\nusing MercadoPago.Resource;\nusing MercadoPago.Resource.PaymentMethod;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar client = new PaymentMethodClient();\nResourcesList<PaymentMethod> paymentMethods = await client.ListAsync();\n```\n\n----------------------------------------\n\nTITLE: Update Checkout Preference\nDESCRIPTION: This function updates an existing checkout preference with new data. It requires the ID of the preference to update and a data dictionary with updated item details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.en.md#2025-04-18_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef index(req, **kwargs):\n    preference_data = {\n        \"items\": [\n            {\n                \"title\": \"Test Modified\",\n                \"quantity\": 1,\n                \"currency_id\": \"USD\",\n                \"unit_price\": 20.4\n            }\n        ]\n    }\n\n    preference = sdk.preference().update(id, preference_data)\n\n    return json.dumps(preference_response[\"response\"], indent=4)\n```\n\n----------------------------------------\n\nTITLE: Creando Pagos con Efecty en Python usando MercadoPago SDK\nDESCRIPTION: Implementación en Python para procesar pagos con Efecty mediante el SDK de MercadoPago. Configura opciones de solicitud con encabezados personalizados para la idempotencia y crea la solicitud de pago con los parámetros necesarios.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mco.es.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n    \"transaction_amount\": 100,\n    \"description\": \"Product title\",\n    \"payment_method_id\": \"efecty\",\n    \"payer\": {\n        \"email\": \"test@test.com\",\n    },\n    \"metadata\": {\n        \"payment_mode\": \"online\",\n    }\n}\npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Money Transfer Payment with Account ID\nDESCRIPTION: API request example for creating a money transfer payment using recipient's account ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/money-transfer.en.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n$ curl https://api.mercadopago.com/v1/payments \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Cache-Control: no-cache' \\\n  -H 'Authorization: Bearer ACCESS_TOKEN' \\\n  -d '\n  {\n\t\"transaction_amount\": 100,\n\t\"operation_type\": \"money_transfer\",\n\t\"description\": \"Title of what you are paying for\",\n\t\"installments\": 1,\n\t\"marketplace\": \"NONE\",\n\t\"payment_method_id\": \"account_money\",\n\t\"collector\": {\n\t\t\"id\": \"399606359\"\n\t},\n\t\"external_reference\": \"Reference_1234\",\n\t\"notification_url\": \"https://www.your-site.com/webhooks\",\n}'\n```\n\n----------------------------------------\n\nTITLE: HMAC Signature Generation in Java\nDESCRIPTION: This Java code snippet shows how to generate an HMAC signature using the HmacUtils class from Apache Commons Codec library. It instantiates HmacUtils with HmacSHA256 algorithm and a secret key and calculates HMAC using the signed template.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/notifications.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nString cyphedSignature = new HmacUtils(\"HmacSHA256\", secret).hmacHex(signedTemplate);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with MercadoPago SDK (Ruby)\nDESCRIPTION: This Ruby snippet creates a payment using data from the request parameters and the MercadoPago SDK.  It retrieves parameters, creates payer details and calls the create function.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.es.md#2025-04-18_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\npayment_data = {\n transaction_amount: params[:transactionAmount].to_f,\n token: params[:token],\n installments: params[:installments].to_i,\n payment_method_id: params[:paymentMethodId],\n payer: {\n   email: params[:payer][:email],\n   identification: {\n     type: params[:payer][:identification][:type],\n     number: params[:payer][:identification][:number]\n   },\n }\n}\n\npayment_response = sdk.payment.create(payment_data)\npayment = payment_response[:response]\n\nputs payment\n\n```\n\n----------------------------------------\n\nTITLE: Setting Payment Expiration Date in ISO 8601 Format\nDESCRIPTION: Example of how to specify the date_of_expiration parameter using ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssz) when creating a payment preference. This parameter defines when the payment option will expire.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/expiration-date.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"date_of_expiration\": \"2020-05-30T23:59:59.000-04:00\"\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Bancário Payment with C#\nDESCRIPTION: This C# code snippet demonstrates how to create a boleto bancário payment using Mercado Pago's SDK. It configures the access token, creates a PaymentCreateRequest object with transaction and payer details, and uses the PaymentClient to process the payment asynchronously.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"<ENV_ACCESS_TOKEN>\";\n\nvar request = new PaymentCreateRequest\n{\n   TransactionAmount = 105,\n   Description = \"<DESCRIPCIÓN>\",\n   PaymentMethodId = \"bolbradesco\",\n   Payer = new PaymentPayerRequest\n   {\n       Email = \"<EMAIL>\",\n       FirstName = \"<NOMBRE>\",\n       LastName = \"<APELLIDO>\",\n       Identification = new IdentificationRequest\n       {\n           Type = \"CPF\",\n           Number = \"<NUMERO DE CPF>\",\n       },\n       Address = new  PaymentPayerAddressRequest\n       {\n           ZipCode = \"<CÓDIGO POSTAL>\",\n           StreetName = \"<CALLE XXX>\",\n           City = \"<CIUDAD>\",\n           StreetNumber = \"<NÚMERO>\",\n           Neighborhood = \"<BARRIO>\",\n           FederalUnit = \"<SIGLA DE ESTADO>\",\n\n       }\n   },\n};\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Creating Preference for Wallet Purchase in Java\nDESCRIPTION: This Java snippet shows how to create a preference for Mercado Pago Wallet, setting the `purpose` to `wallet_purchase`. It utilizes the Mercado Pago Java SDK. The code defines a `PreferenceRequest` containing item details and then creates the preference using the `PreferenceClient`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mp-wallet.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Create a preference object\nPreferenceClient client = new PreferenceClient();\n\n// Create an item in the preference\nPreferenceItemRequest item =\nPreferenceItemRequest.builder()\n.title(\"My product\")\n.quantity(1)\n.unitPrice(new BigDecimal(\"75\"))\n.build();\n\nList<PreferenceItemRequest> items = new ArrayList<>();\nitems.add(item);\n\nPreferenceRequest request =\nPreferenceRequest.builder().items(items).purpose(\"wallet_purchase\").build();\n\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Creating a Transaction Intent with cURL\nDESCRIPTION: This cURL command sends a POST request to the Mercado Pago API to initiate a transaction with specified account details and amounts. It is constructed for scenarios where a new transaction reference is needed, and includes all header information required for the request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-test.en.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\ \n  --url https://api.mercadopago.com/v1/transaction-intents/process \\ \n  --header 'Authorization: Bearer TEST-461396*********1-111215-*********cd39015a8*********bc3cb-1*********' \\ \n  --header 'content-type: application/json' \\ \n  --header 'x-enforce-signature: false' \\ \n  --data '{\n  \"external_reference\": \"external_ref_1234\",\n  \"point_of_interaction\": {\n    \"type\": \"PSP_TRANSFER\"\n  },\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://example.com.ar/notification\"\n    }\n  },\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": 25\n        }\n      ]\n    },\n    \"to\": {\n      \"total_amount\": 25,\n      \"accounts\": [\n        {\n          \"amount\": 25,\n          \"bank_id\": \"015\",\n          \"number\": \"0150533701000132688355\",\n          \"holder\": \"Victor Hugo\",\n          \"owner\": {\n              \"identification\": {\n                  \"number\": \"20209642647\",\n                  \"type\": \"CUIT\"\n              }\n          },\n          \"type\": \"savings_account\",\n          \"description\": \"envio de 25\"\n        }\n      ]\n    },\n    \"total_amount\": 25\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Capturing Device Information in Java\nDESCRIPTION: Java code snippets to capture device information using Mercado Pago Devices SDK in various formats for Android.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.pt.md#2025-04-18_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nDevice device = DeviceSDK.getInstance().getInfo() // Devolve um objeto Device, que é serializável\nMap deviceMap = DeviceSDK.getInstance().getInfoAsMap()  // Devolve um Map<String, Object>\nString jsonString = DeviceSDK.getInstance().getInfoAsJsonString() // Devolve uma String no formato JSON\n```\n\n----------------------------------------\n\nTITLE: Generating a Payment Method via Spreedly API (cURL)\nDESCRIPTION: This cURL command shows how to generate a payment method in Spreedly using card details. Sensitive information like card number and CVV should be handled securely. Replace the placeholder values with actual card information for testing purposes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/spreedly/spreedly.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\n$ curl https://core.spreedly.com/v1/payment_methods.json \\\n-u 'C7cRfNJGODKh4Iu5Ox3PToKjniY:4UIuWybmdythfNGPqAqyQnYha6s451ri0fYAo4p3drZUi7q2Jf4b7HKg8etDtoKJ' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n      \"payment_method\": {\n        \"credit_card\": {\n          \"first_name\": \"TEST\",\n          \"last_name\": \"TEST\",\n          \"number\": \"CARD NUMBER\",\n          \"verification_value\": CVV,\n          \"month\": \"CARD EXPIRATION MONTH\",\n          \"year\": \"CARD EXPIRATION YEAR\"\n        },\n        \"email\": \"luther_klocko@hotmail.com\"\n      }\n    }\n'\n```\n\n----------------------------------------\n\nTITLE: Device ID Implementation in HTML\nDESCRIPTION: HTML code examples for implementing Device ID tracking, including script implementation and hidden input options for capturing device information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.en.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\"></script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\" output=\"deviceId\"></script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"hidden\" id=\"deviceId\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Buyer Information for MercadoPago\nDESCRIPTION: Code examples showing how to set up buyer/payer information including name, email, phone, identification and address details. This information is required when creating a payment preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.pt.md#2025-04-18_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  // ...\n  $payer = new MercadoPago\\Payer();\n  $payer->name = \"Charles\";\n  $payer->surname = \"Luevano\";\n  $payer->email = \"charles@hotmail.com\";\n  $payer->date_created = \"2018-06-02T12:58:41.425-04:00\";\n  $payer->phone = array(\n    \"area_code\" => \"\",\n    \"number\" => \"949 128 866\"\n  );\n  $payer->identification = array(\n    \"type\" => \"DNI\",\n    \"number\" => \"12345678\"\n  );\n  $payer->address = array(\n    \"street_name\" => \"Cuesta Miguel Armendáriz\",\n    \"street_number\" => 1004,\n    \"zip_code\" => \"11020\"\n  );\n  // ...\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\n// ...\nvar payer = {\n  name: \"Charles\",\n  surname: \"Luevano\",\n  email: \"charles@hotmail.com\",\n  date_created: \"2015-06-02T12:58:41.425-04:00\",\n  phone: {\n    area_code: \"\",\n    number: \"949 128 866\"\n  },\n  identification: {\n    type: \"DNI\",\n    number: \"12345678\"\n  },\n  address: {\n    street_name: \"Cuesta Miguel Armendáriz\",\n    street_number: \"1004\",\n    zip_code: \"11020\"\n  }\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Item Preference in Python\nDESCRIPTION: This Python code shows how to create a preference with multiple items using MercadoPago's SDK. It defines a dictionary with preference data including two items, and then creates the preference using the SDK's preference() method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Crea ítems en la preferencia\npreference_data = {\n    \"items\": [\n        {\n            \"title\": \"Mi producto\",\n            \"quantity\": 1,\n            \"unit_price\": 75.56\n        },\n        {\n            \"title\": \"Mi producto2\",\n            \"quantity\": 2,\n            \"unit_price\": 96.56\n        }\n    ]\n}\n\n# Crea la preferencia\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Updated Payment Processing with MercadoPago in C#\nDESCRIPTION: In this C# version, payment details are filled based on dynamic Request parameters, improving integration with ASP.NET. Payment creation is handled asynchronously with appropriate error handling for the MercadoPago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.en.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\nvar paymentRequest = new PaymentCreateRequest\n{\n   TransactionAmount = decimal.Parse(Request[\"transactionAmount\"]),\n   Token = Request[\"token\"],\n   Installments = int.Parse(Request[\"installments\"]),\n   PaymentMethodId = Request[\"paymentMethodId\"],\n   Payer = new PaymentPayerRequest\n   {\n       Email = Request[\"payer\"][\"email\"],\n       Identification = new IdentificationRequest\n       {\n           Type = Request[\"payer\"][\"identification\"][\"type\"],\n           Number = Request[\"payer\"][\"identification\"][\"number\"],\n       },\n   },\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest);\nConsole.WriteLine(payment.Status);\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Form HTML\nDESCRIPTION: Defines the structure of the payment form and applies styles using CSS. The form includes fields for card details, issuer, and identification information, complete with their corresponding input and select elements. The form is styled with flex display for a responsive layout.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/partners.en.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    #form-checkout {\n      display: flex;\n      flex-direction: column;\n      max-width: 600px;\n    }\n    .container {\n      height: 18px;\n      display: inline-block;\n      border: 1px solid rgb(118, 118, 118);\n      border-radius: 2px;\n      padding: 1px 2px;\n    }\n</style>\n<form id=\"form-checkout\">\n  <fieldset>\n    <ul>\n      <li>\n        <label for=\"cardNumber\">Card number:</label>\n        <input type=\"text\" name=\"cardNumber\" id=\"form-checkout__cardNumber\" />\n      </li>\n      <li>\n        <label for=\"cardExpirationMonth\">Expiration month:</label>\n        <input type=\"text\" name=\"cardExpirationMonth\" id=\"form-checkout__cardExpirationMonth\" value=\"12\" />\n      </li>\n      <li>\n        <label for=\"cardExpirationYear\">Expiration year:</label>\n        <input type=\"text\" name=\"cardExpirationYear\" id=\"form-checkout__cardExpirationYear\" value=\"24\" />\n      </li>\n      <li>\n        <label for=\"cardholderName\">Cardholder name:</label>\n        <input type=\"text\" name=\"cardholderName\" id=\"form-checkout__cardholderName\" value=\"APRO\" />\n      </li>\n      <li>\n        <label for=\"cardholderEmail\">Email:</label>\n        <input type=\"email\" name=\"cardholderEmail\" id=\"form-checkout__cardholderEmail\" value=\"test_user_60077763@testuser.com\" />\n      </li>\n      <li>\n        <label for=\"securityCode\">Security code:</label>\n        <input type=\"text\" name=\"securityCode\" id=\"form-checkout__securityCode\" value=\"123\" />\n      </li>\n      <li>\n        <label for=\"issuer\">Issuer:</label>\n        <select name=\"issuer\" id=\"form-checkout__issuer\"></select>\n      </li>\n      <li>\n        <label for=\"identificationType\">Identification type:</label>\n        <select name=\"identificationType\" id=\"form-checkout__identificationType\"></select>\n      </li>\n      <li>\n        <label for=\"identificationNumber\">Identification number:</label>\n        <input type=\"text\" name=\"identificationNumber\" id=\"form-checkout__identificationNumber\" value=\"12345678909\" />\n      </li>\n      <li>\n        <label for=\"installments\">Installments:</label>\n        <select name=\"installments\" id=\"form-checkout__installments\"></select>\n      </li>\n      <li>\n        <button type=\"submit\" id=\"form-checkout__submit\">Pay</button>\n      </li>\n      <li>\n        <progress value=\"0\" class=\"progress-bar\">Loading...</progress>\n      </li>\n    </ul>\n  </fieldset>   \n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Request in C# with Mercado Pago SDK\nDESCRIPTION: This C# snippet illustrates how to create a payment request using the Mercado Pago SDK. It sets up the necessary details for the payer, payment method, transaction amount, and additional info before making the API call. Dependencies include MercadoPago SDK for .NET.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pse.en.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(Headers.IDEMPOTENCY_KEY, \"YOUR_IDEMPOTENCY_KEY\");\n\nvar identification = new IdentificationRequest() {\n  Type = request.IdentificationType,\n  Number = request.IdentificationNumber\n};\n\nvar address = new PaymentPayerAddressRequest() {\n    ZipCode = request.ZipCode,\n    StreetName = request.StreetName,\n    StreetNumber = request.StreetNumber,\n    Neighborhood = request.Neighborhood,\n    City = request.City,\n    FederalUnit = request.FederalUnit\n};\n\nvar phone = new PaymentPayerPhoneRequest() {\n    AreaCode = request.PhoneAreaCode,\n    Number = request.PhoneNumber\n};\n\nvar payer = new PaymentPayerRequest() {\n    Email = request.Email,\n    EntityType = \"individual\",\n    FirstName = firstName,\n    LastName = lastName,\n    Identification = identification,\n    Address = address,\n    Phone = phone\n};\n\nvar additionalInfo = new PaymentAdditionalInfoRequest() {\n  IpAddress = \"127.0.0.1\"\n};\n\nvar transactionDetails = new PaymentTransactionDetailsRequest() {\n  FinancialInstitution = request.FinancialInstitution\n};\n\nvar paymentCreateRequest = new PaymentCreateRequest() {\n    TransactionAmount = 5000,\n    Description = \"Product description\",\n    PaymentMethodId = \"pse\",\n    AdditionalInfo = additionalInfo,\n    TransactionDetails = transactionDetails,\n    CallbackUrl = \"https://your-site.com\",\n    NotificationUrl = \"https://your-site.com\",\n    Payer = payer\n};\n\nvar client = new PaymentClient();\nvar payment = await client.CreateAsync(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Initializing PaymentFlow Activity Java\nDESCRIPTION: This Java code snippet initializes the payment flow using the `PaymentFlow` class, sets up success and error callback URIs, creates a `PaymentFlowData` object with payment details, and launches the payment flow activity with a callback to handle the response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/payment-flow-legacy-support.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal PaymentFlow paymentFlow = MPManager.INSTANCE.getPaymentFlow();\n\nfinal HashMap<String, String> successMetadata = new HashMap<>();\nsuccessMetadata.put(\"success\", \"testSuccess\");\n\nfinal HashMap<String, String> errorMetadata = new HashMap<>();\nsuccessMetadata.put(\"message\", \"testError\");\n\nfinal String amount = \"2.0\";\nfinal String description = \"Payment description\";\nfinal Uri intentSuccess = paymentFlow.buildCallbackUri(\n   \"mercadopago://smart_integrations/payment_result\",\n   \"success\",\n   successMetadata,\n   \"demo.app\"\n);\nfinal Uri intentError = paymentFlow.buildCallbackUri(\n   \"mercadopago://smart_integrations/payment_result\",\n   \"error\",\n   errorMetadata,\n   \"demo.app\"\n);\n\nfinal PaymentFlowData paymentFlowData = new PaymentFlowData(\n   amount,\n   description,\n   intentSuccess,\n   intentError,\n   PaymentMethod.CREDIT_CARD.name(),\n   6\n);\n\nfinal Function1<MPResponse<String>, Unit> callback = (final MPResponse<String> response) -> {\n if (response.getStatus() == ResponseStatus.SUCCESS) {\n   // Success management with a message\n } else {\n   // Error management\n }\n return Unit.INSTANCE;\n};\n\npaymentFlow.launchPaymentFlowActivity(paymentFlowData, context, callback);\n```\n\n----------------------------------------\n\nTITLE: Embedding Mercado Pago 125x125 Banner for Chile (MLC)\nDESCRIPTION: HTML code to embed a 125x125 pixel Mercado Pago banner for Chile, showcasing 6 interest-free installment payment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/seis.en.md#2025-04-18_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://www.mercadopago.cl/banner/125x125_banner_psj_6x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"125\" height=\"125\"/>\n```\n\n----------------------------------------\n\nTITLE: Payment Status Test Data\nDESCRIPTION: Markdown table format showing different payment status scenarios with corresponding cardholder names and document information for testing payment responses\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-cross/test-cards.en.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Payment Status | Cardholder's first and last name | Identity document |\n| --- | --- | --- |\n| Approved payment | `APRO` | (DNI) 12345678|\n| Declined for general error | `OTHE` | (DNI) 12345678 |\n```\n\n----------------------------------------\n\nTITLE: Configuring MercadoPago Card Form with JavaScript\nDESCRIPTION: JavaScript code that initializes the MercadoPago card form with various configurations. It sets up form field mappings, defines callbacks for form events (mounting, submission, data fetching), and handles the generation of a payment token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/partners.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst cardForm = mp.cardForm({\n  amount: \"100.5\",\n  autoMount: true,\n  form: {\n    id: \"form-checkout\",\n    cardholderName: {\n      id: \"form-checkout__cardholderName\",\n      placeholder: \"Titular do cartão\",\n    },\n    cardholderEmail: {\n      id: \"form-checkout__cardholderEmail\",\n      placeholder: \"E-mail\",\n    },\n    cardNumber: {\n      id: \"form-checkout__cardNumber\",\n      placeholder: \"Número do cartão\",\n    },\n    cardExpirationMonth: {\n      id: \"form-checkout__cardExpirationMonth\",\n      placeholder: \"Mês de vencimento\",\n    },\n    cardExpirationYear: {\n      id: \"form-checkout__cardExpirationYear\",\n      placeholder: \"Ano de vencimento\",\n    },\n    securityCode: {\n      id: \"form-checkout__securityCode\",\n      placeholder: \"Código de segurança\",\n    },\n    installments: {\n      id: \"form-checkout__installments\",\n      placeholder: \"Parcelas\",\n    },\n    identificationType: {\n      id: \"form-checkout__identificationType\",\n      placeholder: \"Tipo de documento\",\n    },\n    identificationNumber: {\n      id: \"form-checkout__identificationNumber\",\n      placeholder: \"Número do documento\",\n    },\n    issuer: {\n      id: \"form-checkout__issuer\",\n      placeholder: \"Banco emissor\",\n    },\n  },\n  callbacks: {\n    onFormMounted: error => {\n      if (error) return console.warn(\"Form Mounted handling error: \", error);\n      console.log(\"Form mounted\");\n    },\n    onSubmit: event => {\n      event.preventDefault();\n\n      const {\n        paymentMethodId: payment_method_id,\n        issuerId: issuer_id,\n        cardholderEmail: email,\n        amount,\n        token,\n        installments,\n        identificationNumber,\n        identificationType,\n      } = cardForm.getCardFormData();\n\n      /*fetch(\"/process_payment\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          token,\n          issuer_id,\n          payment_method_id,\n          transaction_amount: Number(amount),\n          installments: Number(installments),\n          description: \"Descrição do produto\",\n          payer: {\n            email,\n            identification: {\n              type: identificationType,\n              number: identificationNumber,\n            },\n          },\n        }),\n      });*/\n      alert(\"Generated card token: \" + token);\n    },\n    onFetching: resource => {\n      console.log(\"Fetching resource: \", resource);\n\n      // Animate progress bar\n      const progressBar = document.querySelector(\".progress-bar\");\n      progressBar.removeAttribute(\"value\");\n\n      return () => {\n        progressBar.setAttribute(\"value\", \"0\");\n      };\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Items for Review Step\nDESCRIPTION: Example of configuring items for the review step, including item details like units, value, name and optional description and image URL.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/add-confirmation-step.en.md#2025-04-18_snippet_1\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n  // ...\n  initialization: {\n    items: {\n      totalItemsAmount: 9.42,\n      itemsList: [\n        {\n          units: 3,\n          value: 3.14,\n          name: \"<NAME>\",\n          description: \"<DESCRIPTION>\", // optional\n          imageURL: \"<IMAGE_URL>\", // optional\n        },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Registering a Webhook for Pix API Notifications using cURL\nDESCRIPTION: This cURL request demonstrates how to register a webhook URL linked to a specific Pix Key. The request uses a PUT method and requires authentication via Bearer token and mTLS certificates.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/pix-payments/notifications.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request PUT 'https://pix-api.mercadopago.com/webhook/CHAVE_PIX' \\\n--header 'Authorization: Bearer TOKEN' \\\n--header 'Content-Type: application/json' \\\n--cert PATH_TO_mTLS --key PATH_TO_KEY \\\n--data-raw '{\n    \"webhookUrl\": \"https://enbt7m5adgf8f.x.pipedream.net\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Associating Google Ads Tag with Checkout Pro Preference in C#\nDESCRIPTION: This C# code snippet shows how to associate a Google Ads conversion tag with a Checkout Pro preference. The 'CONVERSION_ID' and 'CONVERSION_LABEL' should be replaced with actual values from the Google Ads account.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// Associe sua tag do Google ads\nvar tracks = new List<PreferenceTrackRequest>\n{\n    new PreferenceTrackRequest\n    {\n        Type = \"facebook_ad\",\n        Values = new PreferenceTrackValuesRequest\n        {\n            ConversionId = \"CONVERSION_ID\",\n            ConversionLabel = \"CONVERSION_LABEL\",\n        },\n    },\n};\n\nvar request = new PreferenceRequest\n{\n    // ...\n    Tracks = tracks,\n};\n\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Creating Checkout Preferences with MercadoPago API\nDESCRIPTION: This curl request demonstrates how to create a checkout preference using the MercadoPago API. It includes basic buyer information, item details, and payment method settings. This example is a general implementation that can be adapted for various businesses.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/industry-data/additional-info.en.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/checkout/preferences' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--data-raw '{\n    \"auto_return\": \"approved\",\n    \"back_urls\": {\n        \"failure\": \"https://www.mercadopago.com/home/failure\",\n        \"pending\": \"https://www.mercadopago.com/home/pending\",\n        \"success\": \"https://www.mercadopago.com/home/success\"\n    },\n    \"notification_url\": \"https://webhook.site/xyz\",\n    \"expires\": false,\n    \"external_reference\": \"order-123\",\n    \"date_of_expiration\": \"2025-03-12T12:58:41.425-04:00\",\n    \"items\": [\n        {\n            \"id\": \"1234\",\n            \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n            \"title\": \"Product\",\n            \"picture_url\": \"\",\n            \"description\": \"Product Description\",\n            \"category_id\": \"services\",\n            \"quantity\": 1,\n            \"unit_price\": 150\n        }\n    ],\n    \"payer\": {\n        \"phone\": {\n            \"area_code\": \"11\",\n            \"number\": \"[FAKER][PHONE_NUMBER][CELL_PHONE]\"\n        },\n        \"address\": {\n            \"zip_code\": \"[FAKER][ADDRESS][ZIP_CODE]\",\n            \"street_name\": \"[FAKER][ADDRESS][STREET_NAME]\",\n            \"street_number\": 1000\n        },\n        \"identification\": {\n          \"identification_type\": \"[FAKER][IDENTIFICATION][TYPE]\",\n          \"identification_number\": \"12345678\"\n        },\n        \"email\": \"john@yourdomain.com\",\n        \"name\": \"[FAKER][NAME][FIRST_NAME]\",\n        \"surname\": \"[FAKER][NAME][LAST_NAME]\",\n        \"date_created\": \"\",\n        \"authentication_type\": \"Facebook\",\n        \"registration date\": \"2015-06-02T12:58:41.425-04:00\",\n        \"is_prime_user\": false,\n        \"is_first_purchase_online\": false,\n        \"last_purchase\": \"2020-01-02T12:58:41.425-04:00\"\n    },\n    \"payment_methods\": {\n        \"excluded_payment_methods\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"default_installments\": null,\n        \"default_payment_method_id\": null,\n        \"excluded_payment_types\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"installments\": null\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Installing Mercado Pago SDK with go get\nDESCRIPTION: This command uses `go get` to download and install the Mercado Pago SDK for Go. `go get -u github.com/mercadopago/sdk-go` retrieves the SDK from the specified GitHub repository. The `-u` flag ensures that the SDK and its dependencies are updated to the latest versions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-development-environment.es.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n\"go get -u github.com/mercadopago/sdk-go\"\n```\n\n----------------------------------------\n\nTITLE: Card Number Input (V1)\nDESCRIPTION: HTML input field for capturing card number in Mercado Pago SDK V1. The `data-checkout` attribute is used to identify the field for Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" id=\"cardNumber\" data-checkout=\"cardNumber\" />\n```\n\n----------------------------------------\n\nTITLE: Encryption Model for Bbpos Devices (3DES CBC)\nDESCRIPTION: Shows the encryption process for Bbpos devices using 3DES with CBC mode. It demonstrates how to extract card-present data such as PAN, expiration date, cardholder information, and track1 data using a derived key and KSN.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/secure_payments/responses.es.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Ejemplo |\n|---|\n| Track1 = A3F5E85954E0D9C992D5E1C04A60242D295945E0DD2C974C |\n| KSN = FFFF9876543210E000F9 |\n\n| Resultado |\n|---|\n| PAN = 4540750031789984 |\n| Fecha expiracion = 10/2019 |\n| Titular de la tarjeta = \"\" |\n| Track1 = 4540750031789984=19102016010000000000 |\n```\n\n----------------------------------------\n\nTITLE: Activating Automatic Settlement Report Generation with PHP\nDESCRIPTION: PHP implementation to enable automatic generation of settlement reports based on the configured frequency. This code makes a POST request to the scheduling endpoint using the Requests library.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.en.md#2025-04-18_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$response = Requests::post('https://api.mercadopago.com/v1/account/settlement_report/schedule', $headers);\n```\n\n----------------------------------------\n\nTITLE: Response example for successful QR Code resolution\nDESCRIPTION: This is an example of the expected JSON response when a QR code is successfully resolved. It provides information about the collector, order, administrator, and allowed payment methods. The `status` field being `open_amount` indicates that the amount is to be entered by the user.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/interoperable-accepting-flow-test.es.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"collector\": {\n        \"name\": \"Test Test\",\n        \"account\": \"0000009388000001809754\",\n        \"identification_number\": \"27326594305\",\n        \"mcc\": \"5912\",\n        \"postal_code\": \"c1430dnn\"\n    },\n    \"order\": {\n        \"id\": \"is282acfe8f8cb49b8a4f1a020242c1adf0854\",\n        \"items\": [\n            {\n                \"title\": \"Producto de Rowhna\",\n                \"description\": \"Producto\",\n                \"currency_id\": \"ARS\",\n                \"quantity\": 1\n            }\n        ]\n    },\n    \"administrator\": {\n        \"name\": \"COELSA\",\n        \"identification_number\": \"30692264785\"\n    },\n    \"additional_info\": \"\",\n    \"status\": \"open_amount\",\n    \"payment_methods_allowed\": [\n        {\n            \"id\": \"CARD\",\n            \"restrictions\": {\n                \"min_amount_allowed\": 3,\n                \"max_amount_allowed\": 15000000\n            }\n        },\n        {\n            \"id\": \"TRANSFER\",\n            \"restrictions\": {\n                \"min_amount_allowed\": 0.01,\n                \"max_amount_allowed\": 100000000\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Hidden Input for Device ID in HTML\nDESCRIPTION: HTML code to create a hidden input field for storing the device ID generated by Mercado Pago's security script.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"hidden\" id=\"deviceId\">\n```\n\n----------------------------------------\n\nTITLE: Error Response for Non-Existent Discount\nDESCRIPTION: A JSON response describing an error scenario where no discount is available for the user. It provides the transaction amount and indicates that no discount details are returned.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/create-discount-promise-with-coupon.en.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"transaction_amount\": 550.0,\\n  \"currency_id\": \"ARS\",\\n  \"discount\": {}\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Agreement with Mercado Pago API using curl\nDESCRIPTION: This curl command sends a POST request to the Mercado Pago API to create an agreement, which links a payer's wallet to a seller's integration, allowing payment method selection and updates without seller intervention. It requires setting appropriate headers such as 'Authorization' and 'Content-Type', along with parameters like 'return_uri', 'external_flow_id', 'external_user', and 'agreement_data'. The response provides two key parameters: 'agreement_id' and 'agreement_uri'. This snippet allows identifying if a user has the Mercado Pago app installed and manages agreement flow contingencies through webhook notifications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/create-agreement.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    'https://api.mercadopago.com/v2/wallet_connect/agreements' \\\n      -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n      -H 'Content-Type: application/json' \\\n      -H 'x-platform-id: YOUR_PLATFORM_ID' \\\n      -d '{\n  \"return_uri\": \"https://www.mercadopago.com/\",\n  \"external_flow_id\": \"EXTERNAL_FLOW_ID\",\n  \"external_user\": {\n    \"id\": \"usertest\",\n    \"description\": \"Test account\"\n  },\n  \"agreement_data\": {\n    \"validation_amount\": 3.14,\n    \"description\": \"Test agreement\"\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Batch Collection Output CSV Format Example\nDESCRIPTION: Example CSV output showing the structure for batch collection results. Includes successful charges and error cases with various status and detail messages.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/batch-payments-vault-migration/batch-payments/output-format-batch-payments.en.md#2025-04-18_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nsequential_order,external_reference,amount,reason,echoData,payment_status,payment_detail,payment_id\n1; 81047154; 322.04; Example charge 1; 3524731; Charged;;1232443\n2; 50724702; 364.19; Example charge 2; 48698812; Charged;;1234567\n3; 43952205; 289.62; Example charge 5; 38086525; Rejected; Could not process the payment; 1234568\n4; 62966843; 189.09; Example charge 3; 62483295; Error; Could not process the payment; \n```\n\n----------------------------------------\n\nTITLE: Handling DTE Print Action Response\nDESCRIPTION: Code block for handling the response after DTE printing completion. Used to define post-printing actions and manage control return to the integrator application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-print-dte.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nif (Intent.ACTION_SENDTO.equals(action)) { \n\t// Define what to do after printing the DTE \n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Brick Appearance (MLA)\nDESCRIPTION: This snippet showcases how to customize the Wallet Brick's appearance, specifically the button background and border radius, using the `customization.visual` property. This customization impacts the look and feel of the brick's primary call-to-action.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/change-appearance.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n         visual: {\n             buttonBackground: 'black',\n             borderRadius: '16px',\n         },\n    },\n}\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n   buttonBackground: 'black',\n   borderRadius: '16px',\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Release Report Generation in Mercado Pago API\nDESCRIPTION: This snippet demonstrates how to disable automatic generation of release reports using Mercado Pago's API. It sends a DELETE request to the /v1/account/release_report/schedule endpoint with the necessary headers for authentication and content type.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.en.md#2025-04-18_snippet_16\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X DELETE \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/release_report/schedule'\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',    \n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$response = Requests::delete('https://api.mercadopago.com/v1/account/release_report/schedule', $headers);\n```\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/release_report/schedule\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"DELETE\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\nresponse = requests.delete('https://api.mercadopago.com/v1/account/release_report/schedule', headers=headers)\n```\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/release_report/schedule',\n    method: 'DELETE',\n    headers: headers\n};\n\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\n\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer Cards with Mercado Pago SDK in Java\nDESCRIPTION: This snippet demonstrates how to retrieve all customer cards associated with a specific customer ID using the CustomerCardClient from the Mercado Pago SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/cards.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nCustomerCardClient client = new CustomerCardClient();\n\nString customerId = \"448870796-7ZjwhKGxILixxN\";\nclient.listAll(customerId);\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods in C#\nDESCRIPTION: C# implementation for setting payment method preferences, excluding specific payment methods and types, and limiting installments\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/payment-methods.en.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar paymentMethods = new PreferencePaymentMethodsRequest\n{\nExcludedPaymentMethods = new List<PreferencePaymentMethodRequest>\n{\nnew PreferencePaymentMethodRequest\n{\nId = \"master\",\n},\n},\nExcludedPaymentTypes = new List<PreferencePaymentTypeRequest>\n{\nnew PreferencePaymentTypeRequest\n{\nId = \"ticket\",\n},\n},\nInstallments = 12,\n};\n\nvar request = new PreferenceRequest\n{\n// ...\nPaymentMethods = paymentMethods,\n};\n```\n\n----------------------------------------\n\nTITLE: Opening Fintoc Widget in Sandbox Mode\nDESCRIPTION: Example of opening the Fintoc widget in sandbox environment for testing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-advanced.es.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync function openFintoc() {\n                  try {\n                    await fintoc.open({...})\n                  } catch(e) {\n                    console.error(e)\n                  }\n\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Box for Unattended Model with cURL\nDESCRIPTION: This cURL command creates a box (POS) for the unattended model by sending a POST request to the Mercado Pago API. The request includes essential information such as the box name, whether to use a fixed amount, category, external store ID, external ID, and the URL that Mercado Pago will query for order availability. Replace `PROD_ACCESS_TOKEN` with your actual production access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/hidden-qr-unattended-part-a.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\n\"curl -X POST \\\n-H 'Authorization: Bearer PROD_ACCESS_TOKEN' \\\nhttps://api.mercadopago.com/pos \\\n-d \\\n{\n  \\\"name\\\":\\\"Caja Principal\\\", \n  \\\"fixed_amount\\\": true,\n  \\\"category\\\": 621102,\n  \\\"external_store_id\\\": \\\"STORE001\\\",\n  \\\"external_id\\\": \\\"CAJA0001\\\",\n  \\\"url\\\": \\\"https://www.miempresa.com/pay-mp?locationId=6232&positionId=1\\\" \n}\n\"\n```\n\n----------------------------------------\n\nTITLE: Setting Back URLs and Auto Return in PHP\nDESCRIPTION: This PHP snippet demonstrates how to set the `back_urls` and `auto_return` attributes in a MercadoPago\\Preference object.  It defines URLs for success, failure, and pending payment statuses and enables automatic return for approved payments. The \\MercadoPago\\Preference class is required from the MercadoPago PHP SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$preference = new MercadoPago\\Preference();\n//...\n$preference->back_urls = array(\n    \"success\" => \"https://www.tu-sitio/success\",\n    \"failure\" => \"http://www.tu-sitio/failure\",\n    \"pending\" => \"http://www.tu-sitio/pending\"\n);\n$preference->auto_return = \"approved\";\n// ...\n?>\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with 3DS using cURL\nDESCRIPTION: This cURL command demonstrates how to create a payment with 3DS enabled using the Mercado Pago API. It sends a POST request to the `/v1/payments` endpoint with the necessary headers and a JSON payload containing the payment details, including the `three_d_secure_mode` set to `optional`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-bigmerchants.en.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'Authorization: <ENV_ACCESS_TOKEN>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"payer\": {\n        \"email\": \"<BUYER_EMAIL>\"\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"quantity\": <ITEM_QUANTITY>,\n                \"category_id\": <CATEGORY_ID>,\n                \"title\": <ITEM_TITLE>,\n                \"unit_price\": <TRANSACTION_AMOUNT>\n            }\n        ]\n    },\n    \"payment_method_id\": <PAYMENT_METHOD_ID>,\n    \"marketplace\": \"NONE\",\n    \"installments\": <INSTALLLMENTS_NUMBER>,\n    \"transaction_amount\": <TRANSACTION_AMOUNT>,\n    \"description\": \"<DESCRIPTION>\",\n    \"token\": \"CARD_TOKEN\",\n    \"three_d_secure_mode\": \"optional\",\n    \"capture\": true,\n    \"binary_mode\": false\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Notification URL - Node.js\nDESCRIPTION: This code snippet demonstrates creating a payment with a notification URL using the Mercado Pago Node.js SDK. It configures the MercadoPagoConfig, initializes a Payment object, defines the payment details (including the notification_url), and then calls the `create` method to create the payment with the specified parameters.  Notifications regarding payment status changes will be sent to the configured URL.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.en.md#2025-04-18_snippet_13\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'ACCESS_TOKEN' });\nconst payment = new Payment(client);\n\nconst body = {\n transaction_amount: '100',\n  token: 'token',\n  description: 'description',\n  installments: 1,\n  payment_method_id: 'visa',\n  notification_url: 'http://test.com',\n  payer: {\n    email: 'test@test.com',\n    identification: {\n      type: 'CPF',\n      number: '19119119100'\n    }\n  }\n};\n\npayment.create({ body: body, requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' } }).then(console.log).catch(console.log);\n\n```\n\n----------------------------------------\n\nTITLE: Integrating Google Ads Conversion Tracking with Checkout Pro Preference in C#\nDESCRIPTION: This code snippet demonstrates how to associate Google Ads conversion tracking with a Checkout Pro preference using C#. It allows tracking of ad conversions from Google Ads campaigns.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.es.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// Asocia tu etiqueta\nvar tracks = new List<PreferenceTrackRequest>\n{\n    new PreferenceTrackRequest\n    {\n        Type = \"facebook_ad\",\n        Values = new PreferenceTrackValuesRequest\n        {\n            ConversionId = \"CONVERSION_ID\",\n            ConversionLabel = \"CONVERSION_LABEL\",\n        },\n    },\n};\n\nvar request = new PreferenceRequest\n{\n    // ...\n    Tracks = tracks,\n};\n\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Activating Bluetooth Using MPManager (Java)\nDESCRIPTION: This snippet shows how to activate Bluetooth on a Smart POS device using the turnOn method of the BluetoothIgnitor class in Java. The response from the activation is processed through a provided callback that handles both success and error scenarios.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/manage-status.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal BluetoothIgnitor bluetoothIgnitor = MPManager.INSTANCE.getBluetooth().getIgnitor();\n\nfinal Function1<MPResponse<Boolean>, Unit> callback = (final MPResponse<Boolean> response) -> {\n if (response.getStatus() == ResponseStatus.SUCCESS) {\n   if (response.getData()) {\n     // Bluetooth was successfully activated\n     // Perform additional actions if necessary\n   } else {\n     // It wasn’t possible to activate the bluetooth\n   }\n } else {\n   // Manage the error case if necessary\n }\n return Unit.INSTANCE;\n};\n\nbluetoothIgnitor.turnOn(callback);\n\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment in Java\nDESCRIPTION: Captures a partial payment amount using MercadoPago Java SDK. Configures access token and uses PaymentClient to capture specified amount.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n\nLong paymentId = 123456789L;\n\nPaymentClient client = new PaymentClient();\nclient.capture(paymentId, new BigDecimal(\"75\"));\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Mercado Pago SDK (MLC, MCO)\nDESCRIPTION: This code snippet illustrates creating a Mercado Pago preference using the Python SDK, specifically tailored for MLC and MCO regions. It initializes the SDK with access credentials and constructs a preference object containing item details like title, quantity, and unit price.  The preference is then created using the SDK's preference creation method, with the response containing the created preference object.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/preferences.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"# SDK do Mercado Pago\nimport mercadopago\n# Configure as credenciais\nsdk = mercadopago.SDK(\"PROD_ACCESS_TOKEN\")\n# Crie um objeto de preferência\npreference_data = {\n    \"items\": [\n        {\n            \"title\": \"My Item\",\n            \"quantity\": 1,\n            \"unit_price\": 75\n        }\n    ]\n}\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Navigation History in Mini App\nDESCRIPTION: Command to access the navigation history of the Mini App\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/comunication-commands.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"method\": 'history',\n    \"args\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Notifications - cURL\nDESCRIPTION: This cURL command activates the email notification channel for an integrator, enabling it to receive notifications. It requires an access token for authorization and specifies the event channel for 'email'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/notifications-pdv.en.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request PATCH 'https://api.mercadopago.com/point/integration-api/integrator' \\\n--h 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n        \"event_channel_devices\": [\n                \"email\"\n        ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Rendering and Initializing Checkout Button in JavaScript\nDESCRIPTION: JavaScript example for rendering a Mercado Pago checkout button using a predefined container ID and preference ID. This allows users to interface with the payment functionalities.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-checkout.en.md#2025-04-18_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nmp.bricks().create(\"wallet\", \"wallet_container\", {\n   initialization: {\n       preferenceId: \"<PREFERENCE_ID>\",\n   },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing MercadoPago SDK with Public Key\nDESCRIPTION: Shows how to configure the MercadoPago SDK with a public key for secure payment processing\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.es.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mp = new MercadoPago('YOUR_PUBLIC_KEY');\n```\n\n----------------------------------------\n\nTITLE: Including Mercado Pago Scripts for HTML Receipt\nDESCRIPTION: This code snippet shows how to include the necessary Mercado Pago scripts, `mobilewebkit.js` and `smart_webkit.js`, in an HTML document. These scripts are required for correctly processing and printing HTML receipts on the Point Smart thermal printer. The scripts must be included before the closing `</body>` tag.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/point-smart-printer.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"share/mobilewebkit.js\" type=\"text/javascript\"></script>\n<script src=\"share/smart_webkit.js\" type=\"text/javascript\"></script>\n```\n\n----------------------------------------\n\nTITLE: Verifying HMAC Signature in Python\nDESCRIPTION: This Python snippet compares a received hash with a computed HMAC hash. It uses the hexdigest() method to obtain the hash result as a hexadecimal string and then compares it with the received hash.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.es.md#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Obtain the hash result as a hexadecimal string\nsha = hmac_obj.hexdigest()\nif sha == hash:\n    # HMAC verification passed\n    print(\"HMAC verification passed\")\nelse:\n    # HMAC verification failed\n    print(\"HMAC verification failed\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Integration Credentials in Mercado Pago\nDESCRIPTION: Step-by-step process for configuring integration credentials, including public key, access token, and test mode settings for Mercado Pago payment integration\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/linx/configure-payment-method.es.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsites_supported:\n  - mlb\n```\n\n----------------------------------------\n\nTITLE: Configuring Back URLs in Ruby\nDESCRIPTION: This Ruby code snippet shows how to set up back URLs and auto-return for a MercadoPago preference. It defines success, failure, and pending URLs within a preference data hash, and enables automatic return for approved payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\n# ...\npreference_data = {\n  # ...\n  back_urls = {\n    success: 'https://www.tu-sitio/success',\n    failure: 'https://www.tu-sitio/failure',\n    pending: 'https://www.tu-sitio/pendings'\n  },\n  auto_return: 'approved'\n  # ...\n}\n# ...\n```\n\n----------------------------------------\n\nTITLE: Adding New Cards to a Customer in Java\nDESCRIPTION: Java implementation for adding a new payment card to an existing MercadoPago customer. This code retrieves a customer and then creates a new card with the specified token, issuer, and payment method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nCustomerClient customerClient = new CustomerClient();\nCustomerCardClient customerCardClient = new CustomerCardClient();\n\nCustomer customer = customerClient.get(\"247711297-jxOV430go9fx2e\");\n\nCustomerCardIssuer issuer = CustomerCardIssuer.builder()\n.id(\"3245612\")\n.build();\n\nCustomerCardCreateRequest cardCreateRequest = CustomerCardCreateRequest.builder()\n.token(\"9b2d63e00d66a8c721607214cedaecda\")\n.issuer(issuer)\n.paymentMethodId(\"debit_card\")\n.build();\n\ncustomerCardClient.create(customer.getId(), cardCreateRequest);\n```\n\n----------------------------------------\n\nTITLE: Failed order reservation response in JSON\nDESCRIPTION: This JSON response indicates that the order reservation failed. The `status` and `status_detail` are both `failed`. The `errors` array provides details about the failure, including the `code` and `message`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/reserve-capture-cancel-amounts.en.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"code\": \"failed\",\n      \"message\": \"The following transactions failed\",\n      \"details\": [\n        \"pay_01JE797F7RX989RWQJHP4VHF94: required_call_for_authorize\"\n      ]\n    }\n  ],\n  \"data\": {\n    \"id\": \"01JE797F7RX989RWQJHMY34WJ4\",\n    \"capture_mode\": \"manual\",\n    \"status\": \"failed\",\n    \"status_detail\": \"failed\",\n    ...\n    \"transactions\": {\n      \"payments\": [\n        {\n          \"id\": \"pay_01JE797F7RX989RWQJHP4VHF94\",\n          \"amount\": \"200.00\",\n          \"status\": \"failed\",\n          \"status_detail\": \"required_call_for_authorize\"\n          ...\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Document Types for Boleto Bancário Payment Form\nDESCRIPTION: JavaScript function to dynamically retrieve identification types from Mercado Pago's API and populate the form's select element. This ensures the document type dropdown contains valid options required for payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n    (async function getIdentificationTypes() {\n      try {\n        const identificationTypes = await mp.getIdentificationTypes();\n        const identificationTypeElement = document.getElementById('form-checkout__identificationType');\n        createSelectOptions(identificationTypeElement, identificationTypes);\n      } catch (e) {\n        return console.error('Error getting identificationTypes: ', e);\n      }\n    })();\n    function createSelectOptions(elem, options, labelsAndKeys = { label: \"name\", value: \"id\" }) {\n      const { label, value } = labelsAndKeys;\n      elem.options.length = 0;\n      const tempOptions = document.createDocumentFragment();\n      options.forEach(option => {\n        const optValue = option[value];\n        const optLabel = option[label];\n        const opt = document.createElement('option');\n        opt.value = optValue;\n        opt.textContent = optLabel;\n        tempOptions.appendChild(opt);\n      });\n      elem.appendChild(tempOptions);\n    }\n```\n\n----------------------------------------\n\nTITLE: Complete Webhook Signature Validation in PHP\nDESCRIPTION: Full implementation of webhook signature validation in PHP, extracting signature components from headers and comparing the computed signature with the received one.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.es.md#2025-04-18_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Obtain the x-signature value from the header\n$xSignature = $_SERVER['HTTP_X_SIGNATURE'];\n$xRequestId = $_SERVER['HTTP_X_REQUEST_ID'];\n\n// Obtain Query params related to the request URL\n$queryParams = $_GET;\n\n// Extract the \"data.id\" from the query params\n$dataID = isset($queryParams['data.id']) ? $queryParams['data.id'] : '';\n\n// Separating the x-signature into parts\n$parts = explode(',', $xSignature);\n\n// Initializing variables to store ts and hash\n$ts = null;\n$hash = null;\n\n// Iterate over the values to obtain ts and v1\nforeach ($parts as $part) {\n    // Split each part into key and value\n    $keyValue = explode('=', $part, 2);\n    if (count($keyValue) == 2) {\n        $key = trim($keyValue[0]);\n        $value = trim($keyValue[1]);\n        if ($key === \"ts\") {\n            $ts = $value;\n        } elseif ($key === \"v1\") {\n            $hash = $value;\n        }\n    }\n}\n\n// Obtain the secret key for the user/application from Mercadopago developers site\n$secret = \"your_secret_key_here\";\n\n// Generate the manifest string\n$manifest = \"id:$dataID;request-id:$xRequestId;ts:$ts;\";\n\n// Create an HMAC signature defining the hash type and the key as a byte array\n$sha = hash_hmac('sha256', $manifest, $secret);\nif ($sha === $hash) {\n    // HMAC verification passed\n    echo \"HMAC verification passed\";\n} else {\n    // HMAC verification failed\n    echo \"HMAC verification failed\";\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting Document Types - JavaScript\nDESCRIPTION: This snippet fetches available document types for the payment form and populates the associated select element with the options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pix.en.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n(async function getIdentificationTypes() {\ntry {\nconst identificationTypes = await mp.getIdentificationTypes();\nconst identificationTypeElement = document.getElementById('form-checkout__identificationType');\n\ncreateSelectOptions(identificationTypeElement, identificationTypes);\n} catch (e) {\nreturn console.error('Error getting identificationTypes: ', e);\n}\n})();\n\nfunction createSelectOptions(elem, options, labelsAndKeys = { label: \"name\", value: \"id\" }) {\nconst { label, value } = labelsAndKeys;\n\nelem.options.length = 0;\n\nconst tempOptions = document.createDocumentFragment();\n\noptions.forEach(option => {\nconst optValue = option[value];\nconst optLabel = option[label];\n\nconst opt = document.createElement('option');\nop.value = optValue;\nop.textContent = optLabel;\n\ntempOptions.appendChild(opt);\n});\n\nelem.appendChild(tempOptions);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Point Devices with cURL\nDESCRIPTION: This snippet demonstrates how to make a GET request to retrieve a list of available Mercado Pago Point devices associated with an account. It requires an access token for authentication.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/payment-processing.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request GET 'https://api.mercadopago.com/point/integration-api/devices?offset=0&limit=50' \\ \n--h 'Authorization: Bearer YOUR_ACCESS_TOKEN' \n```\n\n----------------------------------------\n\nTITLE: Verifying HMAC Signatures in Python\nDESCRIPTION: This Python snippet verifies an HMAC hash by comparing a computed hexadecimal digest with a received hash value. It outputs a message indicating whether the verification passed or failed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Obtain the hash result as a hexadecimal string\nsha = hmac_obj.hexdigest()\nif sha == hash:\n    # HMAC verification passed\n    print(\"HMAC verification passed\")\nelse:\n    # HMAC verification failed\n    print(\"HMAC verification failed\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods in Ruby\nDESCRIPTION: Ruby implementation for setting payment method preferences, excluding specific payment methods and types, and limiting installments\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/payment-methods.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n#...\npreference_data = {\n# ...\npayment_methods: {\nexcluded_payment_methods: [\n{ id: 'master' }\n],\nexcluded_payment_types: [\n{ id: 'ticket' }\n],\ninstallments: 12\n}\n# ...\n}\n#...\n```\n\n----------------------------------------\n\nTITLE: Creating Total Refund with Mercado Pago SDK\nDESCRIPTION: Demonstrates how to perform a total refund for a specific payment using PaymentRefundClient. Requires payment ID and refund amount as parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/refunds.es.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nPaymentRefundClient client = new PaymentRefundClient();\n\nLong paymentId = 123456789L;\nBigDecimal amount = new BigDecimal(\"5\");\nclient.refund(paymentId, amount);\n```\n\n----------------------------------------\n\nTITLE: Processing First Subscription Payment - Ruby\nDESCRIPTION: Implements first-time subscription payment processing using MercadoPago Ruby SDK. Includes custom headers for idempotency and handles payment request creation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/subscription-messaging.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_request = {\n transaction_amount: params[:transactionAmount].to_f,\n token: params[:token],\n description: params[:description],\n payment_method_id: params[:paymentMethodId],\n payer: {\n   id: params[:id],\n   type: params[:type]\n },\n point_of_interaction: {\n    type: params[:type],\n    transaction_data: {\n      first_time_use: params[:first_time_use],\n      subscription_id: params[:subscription_id],\n      subscription_sequence: {\n        number: params[:number],\n        total: params[:total]\n      },\n      invoice_period: {\n        period: params[:period],\n        type: params[:type]\n      },\n      billing_date: params[:billing_date],\n    }\n}\n \npayment_response = sdk.payment.create(payment_request, custom_request_options)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Payment Response Model Definition\nDESCRIPTION: Definition of the PaymentResponse data model that contains payment transaction details including payment type, reference, amount, and card information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/payment-flow-callback.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval paymentResponse = PaymentResponse(\n    paymentType = \"paymentType\",\n    paymentReference = \"paymentReference\",\n    paymentCreationDate = \"paymentCreationDate\",\n    paymentAmount = 123,\n    paymentSnDevice = \"paymentSnDevice\",\n    paymentInstallments = \"paymentInstallments\",\n    paymentBrandName = \"paymentBrandName\",\n    paymentLastFourDigits = \"paymentLastFourDigits\",\n    statusError = \"\"\n)\n```\n\nLANGUAGE: java\nCODE:\n```\nPaymentResponse paymentResponse = new PaymentResponse(\n            \"paymentType\",\n            \"paymentReference\",\n            \"paymentCreationDate\",\n            123,\n            \"paymentSnDevice\",\n            \"paymentInstallments\",\n            \"paymentBrandName\",\n            \"paymentLastFourDigits\",\n            \"statusError\"\n        );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Refund Details\nDESCRIPTION: Method to fetch details of a specific refund for a given payment using PaymentRefundClient. Requires both payment ID and refund ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/refunds.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nPaymentRefundClient client = new PaymentRefundClient();\n\nLong paymentId = 123456789L;\nLong refundId = 1234L;\nclient.get(paymentId, refundId);\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK with Java\nDESCRIPTION: This code snippet initializes the Mercado Pago SDK in Java by importing the `MercadoPagoConfig` class and setting the access token. The access token is necessary for authenticating API requests.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// SDK do Mercado Pago\nimport com.mercadopago.MercadoPagoConfig;\n// Adicione as credenciais\nMercadoPagoConfig.setAccessToken(\"PROD_ACCESS_TOKEN\");\n```\n\n----------------------------------------\n\nTITLE: Updating Customers with MercadoPago SDK in Python\nDESCRIPTION: This snippet illustrates how to update customer information using the MercadoPago SDK in Python. A dictionary containing the updated customer data is passed to the update method. This example assumes access to a customer ID and requires the MercadoPago SDK and valid credentials.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/customers.en.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\ncustomer_data = {\n  \"email\": 'user@user.com',\n  \"first_name\": 'john',\n  \"last_name\": 'wagner',\n  \"default_address\": 'Casa',\n  \"phone\": {\n    \"area_code\": '[FAKER][PHONE_NUMBER][AREA_CODE]',\n    \"number\": '001234567'\n  },\n  \"identification\": {\n    \"type\": '[FAKER][IDENTIFICATION][TYPE]',\n    \"number\": '12341234'\n  },\n  \"address\": {\n    \"zip_code\": '[FAKER][ADDRESS][ZIP_CODE]',\n    \"street_name\": '[FAKER][ADDRESS][STREET_NAME]',\n    \"street_number\": '2'\n  },\n  \"description\": 'Informações do cliente',\n  \"default_card\": 'None'\n}\ncustomer_response = sdk.customer().update(customer_id, customer_data)\ncustomer = customer_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Configurar URLs de retorno en PHP para Checkout Pro\nDESCRIPTION: Ejemplo de cómo configurar las URLs de retorno y auto_return en PHP para la preferencia de pago de Checkout Pro. Define URLs para escenarios de éxito, fallo y pendiente.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-return-urls.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$preference = new MercadoPago\\Preference();\n//...\n$preference->back_urls = array(\n    \"success\" => \"https://www.tu-sitio/success\",\n    \"failure\" => \"http://www.tu-sitio/failure\",\n    \"pending\" => \"http://www.tu-sitio/pending\"\n);\n$preference->auto_return = \"approved\";\n// ...\n?>\n```\n\n----------------------------------------\n\nTITLE: Obtaining Access Token using Node.js in Mercado Pago API\nDESCRIPTION: This Node.js code demonstrates how to obtain an Access Token using the OAuth class. It requires client secret, client ID, authorization code, and redirect URI.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/creation.es.md#2025-04-18_snippet_4\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token', options: { timeout: 5000 } }); \n\nconst oauth = new OAuth(client);\n\noauth.create({\n\t'client_secret': 'your-client-secret',\n\t'client_id': 'your-client-id',\n\t'code': 'return-of-getAuthorizationURL-function',\n\t'redirect_uri': 'redirect-uri'\n}).then((result) => console.log(result))\n\t.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Checking Coupon Code Discounts with Mercado Pago API\nDESCRIPTION: This snippet demonstrates how to check for available discounts using a coupon code with the Mercado Pago API. The `coupon_code`, `transaction_amount`, and `payer_email` parameters are crucial. The API returns details like discount ID, percentage, and amount off if the coupon is valid.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/discount-campaigns.en.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n-H 'Authorization: Bearer ACCESS_TOKEN' \\\n'https://api.mercadopago.com/v1/discount_campaigns?transaction_amount=299.99&payer_email=test_user_99525168@testuser.com&coupon_code=TESTMP' \n```\n\n----------------------------------------\n\nTITLE: Generating HMAC Signature in PHP\nDESCRIPTION: A PHP code snippet that demonstrates how to create an HMAC SHA-256 signature in hexadecimal format using a secret key and data to validate Mercado Pago webhook notifications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.en.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$cyphedSignature = hash_hmac('sha256', $data, $key);\n```\n\n----------------------------------------\n\nTITLE: Configuring Excluded Payment Methods in JavaScript for Card Payment Brick\nDESCRIPTION: This code snippet demonstrates how to configure the Card Payment Brick settings to exclude specific payment method types. In this example, debit cards are excluded from the accepted payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/configure-payment-methods.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nsettings = {\n  ...,\n  customization: {\n    paymentMethods: {\n      types:{\n        excluded: ['debit_card']\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subsequent Payment Request with Network Transaction ID\nDESCRIPTION: Complete cURL request for processing subsequent payments including the network_transaction_id\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/network-transaction-id.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"description\": \"{{description}}\",\n    \"token\": \"{{card_token}}\",\n    \"payer\": {\n        \"id\": \"{{customer_id}}\",\n        \"type\": \"{{type}}\"\n    },\n    \"payment_method_id\": \"{{payment_method_id}}\",\n    \"transaction_amount\": {{transaction_amount}},\n    \"point_of_interaction\": {\n        \"type\": \"{{type}}\",\n        \"transaction_data\": {\n            \"first_time_use\": {{first_time_use}},\n            \"subscription_id\": \"{{subscription_id}}\",\n            \"subscription_sequence\": {\n                \"number\": {{subscription_number}},\n                \"total\": {{subscription_total}}\n            },\n            \"invoice_period\": {\n                \"period\": {{invoice_period}},\n                \"type\": \"{{invoice_type}}\"\n            },\n            \"billing_date\": \"{{billing_date}}\",\n            \"user_present\": {{user_present}}\n        }\n    },\n    \"forward_data\": {\n        \"network_transaction_data\": {\n            \"network_transaction_id\": \"{{network_transaction_id}}\"\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago PHP SDK\nDESCRIPTION: This snippet shows how to create a payment using the Mercado Pago PHP SDK. It requires the MercadoPago PHP SDK.  It takes transaction details from POST data, including token, transaction amount, and payer information, and sends a payment creation request to the Mercado Pago API, using a custom header for idempotency.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.es.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\Client\\Common\\RequestOptions;\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['<TRANSACTION_AMOUNT>'],\n    \"token\" => $_POST['<TOKEN>'],\n    \"description\" => $_POST['<DESCRIPTION>'],\n    \"installments\" => $_POST['<INSTALLMENTS>'],\n    \"payment_method_id\" => $_POST['<PAYMENT_METHOD_ID'],\n    \"issuer_id\" => $_POST['<ISSUER>'],\n    \"payer\" => [\n      \"email\" => $_POST['<EMAIL>'],\n      \"identification\" => [\n        \"type\" => $_POST['<IDENTIFICATION_TYPE'],\n        \"number\" => $_POST['<NUMBER>']\n      ]\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n\n```\n\n----------------------------------------\n\nTITLE: Deactivating Bluetooth Using MPManager (Kotlin)\nDESCRIPTION: This snippet illustrates how to deactivate Bluetooth on a Smart POS device using the turnOff method of the BluetoothIgnitor class in Kotlin. The outcome of the deactivation operation is processed through a callback that checks both success and failure responses.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/manage-status.en.md#2025-04-18_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval bluetoothIgnitor = MPManager.bluetooth.ignitor\n\nbluetoothIgnitor.turnOff { response ->\n   response\n       .doIfSuccess { result ->\n           if (!result) {\n               // Bluetooth was successfully deactivated\n               // Perform additional actions if necessary\n           } else {\n               // It wasn’t possible to deactivate the bluetooth\n           }\n       }\n       .doIfError { error ->\n           // Manage the error case\n       }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Notification URL with MercadoPago SDK in Node.js\nDESCRIPTION: This snippet shows how to configure a payment with notification URL using MercadoPago SDK in Node.js. It requires the MercadoPago SDK and configuration with your access token. Inputs include payment details and unique payer information. Outputs: Payment creation result logged to console.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.en.md#2025-04-18_snippet_10\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'ACCESS_TOKEN' });\\nconst payment = new Payment(client);\\n\\nconst body = {\\n transaction_amount: '100',\\n  token: 'token',\\n  description: 'description',\\n  installments: 1,\\n  payment_method_id: 'visa',\\n  notification_url: 'http://test.com',\\n  payer: {\\n    email: 'test@test.com',\\n    identification: {\\n      type: 'CPF',\\n      number: '19119119100'\\n    }\\n  }\\n};\\n\\npayment.create({ body: body, requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' } }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago Devices SDK in Java\nDESCRIPTION: Java code to initialize the Mercado Pago Devices SDK in an Android application's MainApplication class.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nimport com.mercadolibre.android.device.sdk.DeviceSDK;\n\n\nDeviceSDK.getInstance().execute(this);\n```\n\n----------------------------------------\n\nTITLE: Response for All Buyer Discounts with Mercado Pago API\nDESCRIPTION: This snippet shows the JSON response after checking for discount campaigns applicable to all buyers. It includes the `id` of the campaign, the `percent_off`, the `amount_off`, the `coupon_amount` and the `currency_id`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/discount-campaigns.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1118,\n    \"name\": \"Test discount campaign\",\n    \"percent_off\": 10,\n    \"amount_off\": 0,\n    \"coupon_amount\": 30,\n    \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Platform ID Header in Curl Request\nDESCRIPTION: This snippet demonstrates how to include the PLATFORM_ID in the header of a payment request using curl. Before using this, ensure you have the PLATFORM_ID provided by the Partners team. The code does not handle responses or errors.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/what-is-platform-id.en.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--header 'x-platform-id: (PLATFORM_ID provided by the Partners team)'\n```\n\n----------------------------------------\n\nTITLE: Creating Cash Payment with Python in MercadoPago\nDESCRIPTION: Python implementation for creating a payment request using MercadoPago's Python SDK. Sets transaction amount, description, payment method (OXXO), and payer email to process a cash payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\npayment_data = {\n    \"transaction_amount\": 100,\n    \"description\": \"Título do produto\",\n    \"payment_method_id\": \"oxxo\",\n    \"payer\": {\n        \"email\": \"test_user_82045343@testuser.com\"\n    }\n}\n\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Open Finance Pix Payment with Mercado Pago SDK\nDESCRIPTION: This code snippet demonstrates how to create an Open Finance Pix payment using Mercado Pago's SDK in various programming languages. It sets up the payment details, including the transaction amount, description, payment method, payer information, and the Open Finance point of interaction.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-openfinance.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nMercadoPago\\SDK::setAccessToken(\"access_token\");\n$payment = new MercadoPago\\Payment();\n$payment->transaction_amount = 100;\n$payment->description = \"Título do produto\";\n$payment->payment_method_id = \"pix\";\n$payment->payer = array(\n    \"email\" => \"test@test.com\",\n    \"first_name\" => \"Test\",\n    \"last_name\" => \"User\",\n    \"identification\" => array(\n        \"type\" => \"CPF\",\n        \"number\" => \"19119119100\"\n    ),\n);\n$payment->point_of_interaction = array(\n\"linked_to\" => \"openfinance\"\n);\n$payment->save();\n```\n\nLANGUAGE: node\nCODE:\n```\nmercadopago.configurations.setAccessToken(\"access_token\");\nvar payment = {\n    transaction_amount: 100,\n    description: 'description',\n    payment_method_id: 'pix',\n    payer: {\n        email: 'test@test.com'\n    },\n    point_of_interaction: {\n        linked_to: \"openfinance\"\n    }\n};\nmercadopago.payment.create(payment).then(function (data) {\n    console.log(data.response);\n}).catch(function (error) {\n    console.log(error);\n});\n```\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"access_token\");\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest createRequest =\nPaymentCreateRequest.builder()\n    .transactionAmount(new BigDecimal(100))\n    .description(\"description\")\n    .paymentMethodId(\"pix\")\n    .pointOfInteraction(\n        PaymentPointOfInteractionRequest.builder().linkedTo(\"openfinance\").build())\n    .payer(PaymentPayerRequest.builder().email(\"test@test.com\").build())\n    .build();\n\nPayment payment = client.create(createRequest);\n```\n\nLANGUAGE: ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('access_token')\n\npayment_request = {\n    transaction_amount: 100,\n    description: 'description',\n    payment_method_id: 'pix',\n    payer: {\n        email: 'test@test.com'\n    },\n    point_of_interaction: {\n        linked_to: \"openfinance\"\n    }\n}\npayment_response = sdk.payment.create(payment_request)\npayment = payment_response[:response]\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"access_token\";\n\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = 100,\n    Description = \"description\",\n    PaymentMethodId = \"pix\",\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"test@test.com\"\n    },\n    PointOfInteraction = new PaymentPointOfInteractionRequest\n    {\n        LinkedTo = \"openfinance\"\n    }\n};\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\n```\n\nLANGUAGE: python\nCODE:\n```\nsdk = mercadopago.SDK(\"access_token\")\n\npayment_data = {\n    \"transaction_amount\": 100,\n    \"description\": \"description\",\n    \"payment_method_id\": \"pix\",\n    \"payer\": {\n        \"email\": \"test@test.com\"\n    },\n    \"point_of_interaction\": {\n        \"linked_to\": \"openfinance\"\n    }\n}\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'Authorization: Bearer TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"transaction_amount\": 1000,\n    \"description\": \"Teste Pix Open Finance\",\n    \"payment_method_id\": \"pix\",\n    \"payer\": {\n        \"email\": \"test_user_19734329@testuser.com\"\n    },\n    \"point_of_interaction\": {\n        \"linked_to\": \"openfinance\"\n    },\n    \"callback_url\": \"https://example.com\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Payment Methods in Multiple Languages\nDESCRIPTION: Code examples in various programming languages to retrieve available payment methods using the Mercado Pago API. These snippets demonstrate how to make a GET request to the /v1/payment_methods endpoint with proper authentication.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  MercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n  $payment_methods = MercadoPago::get(\"/v1/payment_methods\");\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nvar mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(config.access_token);\nvar response = await mercadopago.payment_methods.listAll();\nvar payment_methods = response.body;\n```\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\nPaymentMethodClient client = new PaymentMethodClient();\nclient.list();\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\npayment_methods_response = sdk.payment_methods.get()\npayment_methods = payment_methods_response[:response]\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.PaymentMethod;\nusing MercadoPago.Config;\nusing MercadoPago.Resource;\nusing MercadoPago.Resource.PaymentMethod;\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\nvar client = new PaymentMethodClient();\nResourcesList<PaymentMethod> paymentMethods = await client.ListAsync();\n```\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\npayment_methods_response = sdk.payment_methods().list_all()\npayment_methods = payment_methods_response[\"response\"]\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/payment_methods' \\\n```\n\n----------------------------------------\n\nTITLE: Initiating QR Code Scanner in Kotlin\nDESCRIPTION: Uses the initQRCodeScanner function of the CameraScanner class to start reading QR codes with the Point Smart device.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/camscanner-legacy.en.md#2025-04-18_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval cameraScanner = MPManager.cameraScanner\ncameraScanner.initQRCodeScanner(this@YourActivity)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Item Preference in Python\nDESCRIPTION: Initialize a Mercado Pago preference with two items, specifying title, quantity, and unit price\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/preference-multiple-items.es.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Crea ítems en la preferencia\npreference_data = {\n    \"items\": [\n        {\n            \"title\": \"Mi producto\",\n            \"quantity\": 1,\n            \"unit_price\": 75.56\n        },\n        {\n            \"title\": \"Mi producto2\",\n            \"quantity\": 2,\n            \"unit_price\": 96.56\n        }\n    ]\n}\n\n# Crea la preferencia\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Updating Settlement Report Configuration with Mercado Pago API (Java)\nDESCRIPTION: This Java code updates the settlement report configuration using the Mercado Pago API. It uses HttpsURLConnection to send a PUT request with the configuration data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report/config\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"PUT\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nconnection.setDoOutput(true);\n\nString body = \"{\n                    \\\"file_name_prefix\\\": \\\"settlement-report-USER_ID\\\",\n                    \\\"show_fee_prevision\\\": false,\n                    \\\"show_chargeback_cancel\\\": true,\n                    \\\"detailed\\\": true,\n                    \\\"coupon_detailed\\\": true,\n                    \\\"shipping_detail\\\": true,\n                    \\\"refund_detailed\\\": true,\n                    \\\"extended\\\": false,\n                    \\\"frequency\\\": {\n                        \\\"hour\\\": 0,\n                        \\\"type\\\": \\\"monthly\\\",\n                        \\\"value\\\": 1\n                    }\n            }\";\n\ntry(OutputStream os = connection.getOutputStream()) {\n    byte[] input = body.getBytes(\"utf-8\");\n    os.write(input, 0, input.length);\n}\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\n----------------------------------------\n\nTITLE: Impression API Endpoints for Printing\nDESCRIPTION: API endpoints for managing printing actions on Point terminals, supporting electronic tax documents (DTE), receipts, images, and custom print actions\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/migrate-via-api.es.md#2025-04-18_snippet_1\n\nLANGUAGE: Endpoint List\nCODE:\n```\n- Create terminal action\n- Get action by ID\n- Cancel action by ID\n```\n\n----------------------------------------\n\nTITLE: Opening Safari View Controller in UIKit\nDESCRIPTION: Shows how to implement Safari View Controller in a UIKit-based iOS application with a button to trigger URL presentation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/swift.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: UIKit\nCODE:\n```\nimport SafariServices\nimport UIKit\n\nclass ViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        let button = UIButton()\n        button.setTitle(\"Open Preference\", for: .normal)\n        button.backgroundColor = .systemBlue\n        view.addSubview(button)\n        button.frame = CGRect(x: 100, y: 100, width: 200, height: 50)\n        button.layer.cornerRadius = 25\n        button.addTarget(self, action: #selector(openSafariViewController), for: .touchDown)\n    }\n    \n    @objc func openSafariViewController(_ sender: Any) {\n        if let url = URL(string: \"YOUR-URL-PREFERENCE\") {\n            let safariViewController = SFSafariViewController(url: url)\n            present(safariViewController, animated: true, completion: nil)\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Obtaining Credentials via OAuth\nDESCRIPTION: This curl command is used to obtain user credentials after receiving the authorization code. It requires client ID, client secret, authorization code, redirect URI, and a unique state parameter.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/configuration.es.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n     -H 'accept: application/json' \\\n     -H 'content-type: application/x-www-form-urlencoded' \\\n     'https://api.mercadopago.com/oauth/token' \\\n     -d 'client_id=<CLIENT_ID>' \\\n     -d 'client_secret=<CLIENT_SECRET>' \\\n     -d 'grant_type=authorization_code' \\\n     -d 'code=<AUTHORIZATION_CODE>' \\\n     -d 'redirect_uri=<REDIRECT_URI>' \\\n     -d 'state=<RANDOM_ID>'\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK in C#\nDESCRIPTION: This C# code snippet initializes the Mercado Pago SDK by setting the access token. The `MercadoPagoConfig.AccessToken` property is set to your production access token, enabling authentication with the Mercado Pago API. Replace `\"PROD_ACCESS_TOKEN\"` with your actual access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-development-environment.es.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n\"// SDK de Mercado Pago\n using MercadoPago.Config;\n // Agrega credenciales\nMercadoPagoConfig.AccessToken = \\\"PROD_ACCESS_TOKEN\\\";\"\n```\n\n----------------------------------------\n\nTITLE: Creating MercadoPago Preference with Multiple Items in PHP\nDESCRIPTION: This PHP snippet shows how to create a MercadoPago preference with multiple items. It creates two test items with different quantities and prices, adds them to an array, and saves the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  # Crear un objeto preferencia\n  $preference = new MercadoPago\\Preference();\n  # Crea ítems en la preferencia\n  $item1 = new MercadoPago\\Item\n  $item1->title = \"Item de Prueba 1\";\n  $item1->quantity = 2;\n  $item1->unit_price = 11.96;\n\n  $item2= new MercadoPago\\Item\n  $item2->title = \"Item de Prueba 2\";\n  $item2->quantity = 1;\n  $item2->unit_price = 11.96;\n\n  $preference->items = array($item1,$item2);\n  # Guardar y postear la preferencia\n  $preference->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Testing TLS Protocol Version in Java\nDESCRIPTION: This Java code creates an SSLSocket connection to api.mercadopago.com and prints the protocol version being used.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/pci-compliant-merchants/disabling-tls-10.es.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSSLSocket ss = (SSLSocket) SSLSocketFactory.getDefault().createSocket(\"api.mercadopago.com\", 443);\nSystem.out.println(\"protocol: \" + ss.getSession().getProtocol());\n```\n\n----------------------------------------\n\nTITLE: Handling Redirect URL Response in Mercado Pago API\nDESCRIPTION: This snippet shows the structure of the redirect URL response from Mercado Pago API after successful authentication. It includes the authorization code and state parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/creation.es.md#2025-04-18_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nhttps://www.redirect-url.com?code=CODE&state=RANDOM_ID\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Node.js\nDESCRIPTION: This Node.js snippet demonstrates creating a payment using the Mercado Pago Node.js SDK. It initializes the SDK with an access token and then uses the `payment.create` method to create a payment with the provided parameters, including the token, payment method ID, payer details, description, and transaction amount. It also sets the `X-Card-Validation` header.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/integration.es.md#2025-04-18_snippet_3\n\nLANGUAGE: Node.js\nCODE:\n```\nimport { Payment, MercadoPagoConfig } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\n\npayment.create({\n    body: { \n        token: req.token,\n        payment_method_id: req.payment_method_id,\n        payer: {\n            email: req.email,\n            type: req.type\n        },\n        description: req.description,\n        transaction_amount: req.transaction_amount,\n    },\n    requestOptions: { \n        X-Card-Validation: 'card_validation' }\n})\n.then((result) => console.log(result))\n.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Retrieving TEA and CFT Values via cURL Request\nDESCRIPTION: This cURL request demonstrates how to retrieve installment information including TEA and CFT values from the Mercado Pago API. It requires authentication via Bearer token and accepts parameters for payment method ID, card BIN, amount, and issuer ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/considerations-argentina.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n-H \"accept: application/json\" \\\n-H 'Authorization: Bearer TEST-5252485006568871-060216-a48700bfc7c55fd627e1a107f7ece57e__LA_LB__-110261734' \\\n\"https://api.mercadopago.com/v1/payment_methods/installments?[payment_method_id=:id]&[bin=:bin]&[amount=:amount]&[issuer.id=:issuer_id]\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Receiver\nDESCRIPTION: Example of a notification receiver implementation in PHP that processes payment and merchant order notifications. The code validates payment status and handles order fulfillment based on payment completion.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/ipn.en.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  MercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n  $merchant_order = null;\n  switch($_GET[\"topic\"]) {\n      case \"payment\":\n          $payment = MercadoPago\\Payment::find_by_id($_GET[\"id\"]);\n          // Get the payment and the corresponding merchant_order reported by the IPN.\n          $merchant_order = MercadoPago\\MerchantOrder::find_by_id($payment->order->id);\n          break;\n      case \"merchant_order\":\n          $merchant_order = MercadoPago\\MerchantOrder::find_by_id($_GET[\"id\"]);\n          break;\n  }\n  $paid_amount = 0;\n  foreach ($merchant_order->payments as $payment) { \n      if ($payment['status'] == 'approved'){\n          $paid_amount += $payment['transaction_amount'];\n      }\n  }\n   // If the payment's transaction amount is equal (or bigger) than the merchant_order's amount you can release your items\n  if($paid_amount >= $merchant_order->total_amount){\n      if (count($merchant_order->shipments)>0) { // The merchant_order has shipments\n          if($merchant_order->shipments[0]->status == \"ready_to_ship\") {\n              print_r(\"Totally paid. Print the label and release your item.\");\n          }\n      } else { // The merchant_order don't has any shipments\n          print_r(\"Totally paid. Release your item.\");\n      }\n  } else {\n      print_r(\"Not paid yet. Do not release your item.\");\n  }\n ?>\n```\n\n----------------------------------------\n\nTITLE: Adding Device SDK Dependency for Android\nDESCRIPTION: Configures the repository and adds the Device SDK dependency in the Android project's build.gradle file to implement Device ID functionality in a native Android application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.en.md#2025-04-18_snippet_6\n\nLANGUAGE: android\nCODE:\n```\nrepositories {\n    maven {\n        url \"https://artifacts.mercadolibre.com/repository/android-releases\"\n    }\n}\ndependencies {\n   implementation 'com.mercadolibre.android.device:sdk:4.0.1'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Preference for Wallet Purchase in Ruby\nDESCRIPTION: This Ruby snippet creates a preference for Mercado Pago Wallet using the Ruby SDK, configuring the `purpose` as `wallet_purchase`.  It initializes the MercadoPago SDK and creates a preference object with item details and the specified purpose. The `preference_id` is then extracted for use in the HTML.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mp-wallet.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n# Create a preference object\npreference_data = {\nitems: [\n{\ntitle: 'My product',\nunit_price: 100,\nquantity: 1\n}\n],\npurpose: 'wallet_purchase'\n}\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n\n# This value will replace the string \"<%= @preference_id %>\" in your HTML\n@preference_id = preference['id']\n```\n\n----------------------------------------\n\nTITLE: Sending Device ID as HTTP Header\nDESCRIPTION: Illustrates how to send the Device ID to Mercado Pago servers using a custom HTTP header for payment processing and security verification.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/device-id.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nX-meli-session-id: device_id\n```\n\n----------------------------------------\n\nTITLE: Searching Merchant Orders with Mercado Pago API in Java\nDESCRIPTION: This code snippet illustrates how to search for merchant orders using the Mercado Pago Java SDK, filtering by different criteria. It initializes the MerchantOrderClient, creates a map to store the filters, and uses the MPSearchRequest to specify the search parameters (limit, offset, and filters). Finally, it calls the search method of the MerchantOrderClient to perform the search operation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/orders.es.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n```java\n\nMerchantOrderClient client = new MerchantOrderClient();\n\nMap<String, Object> filters = new HashMap<>();\nfilters.put(\"status\", \"closed\");\nfilters.put(\"preference_id\", \"12123adfasdf123u4u\");\nfilters.put(\"application_id\", \"10000000000000000\");\nfilters.put(\"payer_id\", \"123\");\nfilters.put(\"external_reference\", \"default\");\nfilters.put(\"site_id\", \"MLA\");\n\nMPSearchRequest searchRequest =\n   MPSearchRequest.builder().limit(0).offset(0).filters(filters).build();\n\nclient.search(searchRequest);\n```\n```\n\n----------------------------------------\n\nTITLE: List Banks for PSE Payment\nDESCRIPTION: This JavaScript code fetches payment methods from the `/payment_methods` endpoint, filters for the 'pse' payment method, extracts the available banks, and dynamically populates a select element with these banks. It creates and populates a dropdown list of banks for the user to choose from when paying with PSE.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-migrate-pse.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction setPse() {\n    fetch('/payment_methods')\n        .then(async function(response) {\n            const paymentMethods = await response.json();\n            const pse = paymentMethods.filter((method) => method.id === 'pse')[0];\n            const banksList = pse.financial_institutions;\n            const banksListElement = document.getElementById('banksList');\n            const selectElement = document.createElement('select');\n            selectElement.name = 'financialInstitution';\n\n            banksList.forEach(bank => {\n                const option = document.createElement('option');\n                option.value = bank.id;\n                option.textContent = bank.description;\n                selectElement.appendChild(option);\n            });\n\n            banksListElement.appendChild(selectElement);\n\n        }).catch(function(reason) {\n            console.error('Failed to get payment methods', reason);\n        });\n}\n\n```\n\n----------------------------------------\n\nTITLE: Integrating Payments with MercadoPago API in Go\nDESCRIPTION: Shows the implementation of MercadoPago payment processing in Go, highlighting how to structure a payment request with sub_merchant information to ensure compliance with regulatory requirements.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subcredenciadores-payfacs/integration-update.en.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/payment\"\n)\n\nfunc main() {\n\taccessToken := \"YOUR_ACCESS_TOKEN\"\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := payment.NewClient(cfg)\n\n\trequest := payment.Request{\n\t\tTransactionAmount: 105,\n\t\tPaymentMethodID:   \"visa\",\n\t\tPayer: &payment.PayerRequest{\n\t\t\tEmail: \"test@testuser.com\",\n\t\t},\n\t\tForwardData: &payment.ForwardDataRequest{\n\t\t\tSubMerchant: &payment.SubMerchantRequest{\n\t\t\t\tSubMerchantId:     \"1234\",\n\t\t\t\tMCC:               \"123\",\n\t\t\t\tCountry:           \"BRA\",\n\t\t\t\tAddressDoorNumber: \"1\",\n\t\t\t\tZIP:               \"22222222\",\n\t\t\t\tDocumentNumber:    \"22222222222222\",\n\t\t\t\tCity:              \"Sao Paulo\",\n\t\t\t\tAddressStreet:     \"Rua A\",\n\t\t\t\tLegalName:         \"Legal Name\",\n\t\t\t\tRegionCodeIso:     \"BR\",\n\t\t\t\tRegionCode:        \"BR-SC\",\n\t\t\t\tDocumentType:      \"CNPJ\",\n\t\t\t\tPhone:             \"123456789\",\n\t\t\t\tURL:               \"www.nomedofacilitador.com.br\",\n\t\t\t},\n\t\t},\n\t\tToken:        \"879a958bbed52608607ae70bed919e13\",\n\t\tInstallments: 12,\n\t}\n\n\tresource, err := client.Create(context.Background(), request)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Open Finance Payment with Ruby SDK\nDESCRIPTION: This code example shows how to create an Open Finance payment using Mercado Pago's Ruby SDK. It configures the payment with the required parameters including transaction amount, payment method as Pix, and specifies 'openfinance' as the linked_to value.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/advanced-openFinance.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('access_token')\n\npayment_request = {\n    transaction_amount: 100,\n    description: 'description',\n    payment_method_id: 'pix',\n    payer: {\n        email: 'test@test.com'\n        identification: {\n            number: '12345678909',\n            type: 'CPF'\n       }\n    },\n    point_of_interaction: {\n        linked_to: \"openfinance\"\n    }\n}\npayment_response = sdk.payment.create(payment_request)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK with PHP\nDESCRIPTION: This PHP code snippet initializes the Mercado Pago SDK and sets the access token. The access token is required to authenticate requests to the Mercado Pago API and enable the creation of preferences.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/default-rendering.en.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Mercado Pago SDK\nrequire __DIR__ .  '/vendor/autoload.php';\n// Add Your credentials\nMercadoPago\\SDK::setAccessToken('PROD_ACCESS_TOKEN');\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing SmartPOS SDK in Kotlin Application Class\nDESCRIPTION: This Kotlin snippet shows how to create a class that inherits from Android's Application class and initialize the SmartPOS SDK with the necessary configuration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/first-steps.en.md#2025-04-18_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainApplication : Application() {\n   override fun onCreate() {\n       super.onCreate()\n       val config = MPConfigBuilder(this, \"123456789\")\n           .withBluetoothConfig()\n           .withBluetoothUIConfig()\n           .build()\n       MPManager.initialize(this, config)\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Launch Payment Flow with Amount and Payment Method\nDESCRIPTION: This snippet demonstrates how to initiate a payment flow with a specified amount and payment method. It uses the `launchPaymentMethod` function with the amount and payment method parameters. No custom callbacks are configured.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/start-payment-flow.es.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlaunchPaymentMethod(35.0, \"credit\")\n```\n\n----------------------------------------\n\nTITLE: Processing SPEI Bank Transfer Payments with Java\nDESCRIPTION: Java implementation for processing SPEI bank transfers with Mercado Pago SDK. The code configures a payment request with transaction amount, payment method, and payer information, then retrieves the payment link for the customer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.pt.md#2025-04-18_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  PaymentClient client = new PaymentClient();\n\n  PaymentPayerRequest payer =\n  \tPaymentPayerRequest.builder()\n  \t.type(\"customer\")\n  \t.email(request.getEmail())\n    .firstName(request.getPayerFirstName())\n    .lastName(request.getPayerLastName())\n  \t.entityType(\"individual\")\n  \t.build();\n\n  PaymentCreateRequest paymentCreateRequest = PaymentCreateRequest.builder()\n  \t.transactionAmount(new BigDecimal(5000))\n  \t.description(\"description\")\n  \t.paymentMethodId(\"clabe\")\n  \t.payer(payer)\n  \t.build();\n\n  Payment payment = client.create(paymentCreateRequest);\n  String paymentLink = payment.transactionDetails.externalResourceUrl;\n```\n\n----------------------------------------\n\nTITLE: Creating Open Finance Payment with C# SDK\nDESCRIPTION: C# implementation for creating Open Finance payments through Mercado Pago's SDK. Demonstrates the required properties including the PointOfInteraction with LinkedTo set to 'openfinance'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/advanced-openFinance.en.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"access_token\";\n\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = 100,\n    Description = \"description\",\n    PaymentMethodId = \"pix\",\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"test@test.com\"\n        Identification: {\n            number: \"12345678909\",\n            type: \"CPF\"\n       }\n    },\n    PointOfInteraction = new PaymentPointOfInteractionRequest\n    {\n        LinkedTo = \"openfinance\"\n    }\n};\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Creating a Merchant Order in PHP\nDESCRIPTION: This snippet shows how to create a new merchant order using the Mercado Pago SDK. It involves initializing a MerchantOrderClient, defining the item details and the order request parameters, and then calling the create method to register the order.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/orders.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new MerchantOrderClient();\n\n  $item = [\n    \"id\" => \"item id\",\n    \"category_id\" => \"item category\",\n    \"currency_id\" => \"BRL\",\n    \"description\" => \"item description\",\n    \"picture_url\" => \"item picture\",\n    \"quantity\" => 1,\n    \"unit_price\" => \"5\",\n    \"title\" => \"item title\"\n  ];\n\n  $createRequest = [\n    \"external_reference\" => \"default\",\n    \"preference_id\" => \"Preference identification\",\n    \"payer\" => [\n        \"id\" => 123,\n        \"nickname\" => \"JOHN\"\n    ],\n    \"site_id\" => \"MLA\",\n    \"items\" => $items,\n    \"application_id\" => \"10000000000000000\"\n  ];\n\n  $client->create(createRequest);\n?>\n```\n\n----------------------------------------\n\nTITLE: Associating Google Ads Tag with Checkout Pro Preference in Java\nDESCRIPTION: This Java code demonstrates how to associate a Google Ads conversion tag with a Checkout Pro preference. The 'CONVERSION_ID' and 'CONVERSION_LABEL' should be replaced with actual values from the Google Ads account.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n  // Criar um objeto preferencia\nPreferenceClient client = new PreferenceClient();\n\n  // Associar sua tag do Google ads\nList<PreferenceTrackRequest> tracks = new ArrayList<>();\nPreferenceTrackRequest trackGoogle =\n   PreferenceTrackRequest.builder()\n       .type(\"google_ad\")\n       .values(\n           PreferenceTrackValuesRequest.builder()\n               .conversionId(\"CONVERSION_ID\")\n               .conversionLabel(\"CONVERSION_LABEL\")\n               .build())\n       .build();\ntracks.add(trackGoogle);\n\nPreferenceRequest request = PreferenceRequest.builder().tracks(tracks).build();\n\n  // Salvar e postar a preferencia\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with PHP\nDESCRIPTION: This PHP snippet shows how to create a payment using the Mercado Pago PHP SDK. It sets the access token, creates a PaymentClient, and then uses it to create a payment with the provided token, payment method ID, payer details, description, and transaction amount. It also sets the 'X-Card-Validation' custom header.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/integration.es.md#2025-04-18_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\MercadoPagoConfig;\n\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Card-Validation: card_validation\"]);\n\n  $payment = $client->create([\n    \"token\" => $_POST['token'],\n    \"payment_method_id\" => $_POST['paymentMethodId'],\n    \"payer\" => [\n      \"email\" => $_POST['email'],\n      \"type\" => $_POST['type']\n    ],\n    \"description\" => $_POST['description'],\n    \"transaction_amount\" => (float) $_POST['transactionAmount']\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Navigating Back in Mini App\nDESCRIPTION: Command to navigate backwards through screens in a Mini App, with optional parameter to specify number of screens to go back\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/comunication-commands.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"method\": 'back',\n    \"args\": {\n        'screen': screens\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PSE Payment with MercadoPago in C#\nDESCRIPTION: This C# code snippet demonstrates how to create a PSE payment using MercadoPago SDK. It includes setting up payer information, transaction details, and additional data required for PSE transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-migrate-pse.en.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ACCESS_TOKEN\";\n\nvar client = new PaymentClient();\n\nvar identification = new IdentificationRequest() {\n  Type = request.IdentificationType,\n    Number = request.IdentificationNumber\n};\n\nvar address = new PaymentPayerAddressRequest() {\n    ZipCode = request.ZipCode,\n    StreetName = request.StreetName,\n    StreetNumber = request.StreetNumber,\n    Neighborhood = request.Neighborhood,\n    City = request.City,\n    FederalUnit = request.FederalUnit\n};\n\nvar phone = new PaymentPayerPhoneRequest() {\n    AreaCode = request.PhoneAreaCode,\n    Number = request.PhoneNumber\n};\n\nvar payer = new PaymentPayerRequest() {\n    Email = request.Email,\n    EntityType = \"individual\",\n    Identification = identification,\n    Address = address,\n    Phone = phone\n};\n\nvar additionalInfo = new PaymentAdditionalInfoRequest() {\n  IpAddress = \"127.0.0.1\"\n};\n\nvar transactionDetails = new PaymentTransactionDetailsRequest() {\n  FinancialInstitution = request.FinancialInstitution\n};\n\nvar paymentCreateRequest = new PaymentCreateRequest() {\n    TransactionAmount = 5000,\n    Description = \"Product description\",\n    PaymentMethodId = \"pse\",\n    AdditionalInfo = additionalInfo,\n    TransactionDetails = transactionDetails,\n    CallbackUrl = \"https://your-site.com\",\n    Payer = payer\n};\n\nvar payment = await client.CreateAsync(paymentCreateRequest);\n```\n\n----------------------------------------\n\nTITLE: Getting All Stores for a User - REST API - HTTP\nDESCRIPTION: This snippet demonstrates how to send a GET request to retrieve all stores associated with a specific user by providing their user ID and OAuth access token to the endpoint. Ensure you have a valid access token generated through the OAuth authentication process.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-delivery/store-data.en.md#2025-04-18_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /proximity-integration/users/{seller_id}/stores\nAuthorization: Bearer {access_token}\n\n```\n\n----------------------------------------\n\nTITLE: Canceling Scheduled Settlement Report Generation with Mercado Pago API\nDESCRIPTION: This code snippet shows how to cancel the scheduled generation of settlement reports by sending a DELETE request to the Mercado Pago API endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X DELETE \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/schedule'\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$response = Requests::delete('https://api.mercadopago.com/v1/account/settlement_report/schedule', $headers);\n```\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report/schedule\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"DELETE\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\nresponse = requests.delete('https://api.mercadopago.com/v1/account/settlement_report/schedule', headers=headers)\n```\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report/schedule',\n    method: 'DELETE',\n    headers: headers\n};\n\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\n\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Rendering Wallet Component for React Projects\nDESCRIPTION: Demonstrates how to utilize the Wallet component in React to render a checkout button given an initialization object with a preference ID. This is part of integrating React applications with Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-checkout.en.md#2025-04-18_snippet_10\n\nLANGUAGE: react-jsx\nCODE:\n```\n<Wallet initialization={{ preferenceId: '<PREFERENCE_ID>' }} />\n```\n\n----------------------------------------\n\nTITLE: Including CashOut in Order Creation - JSON\nDESCRIPTION: This snippet shows the JSON body required to request a CashOut when creating an order through the Mercado Pago API. It includes essential fields such as external reference, title, description, and the cash out amount to be withdrawn from the buyer's account.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/hidden-cashout.es.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"external_reference\": \"order-id-1234\",\n    \"title\": \"Title\",\n    \"description\": \"Mercado Pago\",\n    \"notification_url\": \"https://www.yourserver.com\",\n    \"expiration_date\": \"2023-08-22T16:34:56.559-04:00\",\n    \"total_amount\": 1390,\n    \"items\": [\n        {\n            \"sku_number\": \"KS955RUR\",\n            \"category\": \"FOOD\",\n            \"title\": \"Item1\",\n            \"description\": \"Item1 Mercado Pago\",\n            \"unit_price\": 238,\n            \"quantity\": 5,\n            \"unit_measure\": \"unit\",\n            \"total_amount\": 1190\n        }\n    ],\n    \"sponsor\": {\n            \"id\": 820480089\n            },\n    \"cash_out\": {\n                \"amount\": 200\n            }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PagoEfectivo Payment with Mercado Pago SDK (C#)\nDESCRIPTION: This C# code snippet demonstrates how to create a PagoEfectivo payment using the Mercado Pago SDK. It configures the SDK with an access token, builds the payment request with required information, and uses the PaymentClient to create the payment asynchronously.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = 5000,\n    Description = \"Título do produto\",\n    PaymentMethodId = \"pagoefectivo_atm\",\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"test_user_42972582@testuser.com\",\n    },\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Adding New Cards to a Customer in C#\nDESCRIPTION: C# implementation for adding a new payment card to an existing MercadoPago customer. The code creates a CustomerCardCreateRequest with a token and adds it to the specified customer account.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.en.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar customerClient = new CustomerClient();\nCustomer customer = await customerClient.GetAsync(\"247711297-jxOV430go9fx2e\");\n\nvar cardRequest = new CustomerCardCreateRequest\n{\nToken = \"9b2d63e00d66a8c721607214cedaecda\",\n};\nCustomerCard card = await customerClient.CreateCardAsync(customer.Id, cardRequest);\n\nConsole.WriteLine(card.Id);\n```\n\n----------------------------------------\n\nTITLE: Importing SafariServices in Swift\nDESCRIPTION: This code snippet demonstrates how to import the SafariServices framework, which is necessary for utilizing the SFSafariViewController in a Swift project. You need to add SafariServices to your project via 'Link Binary With Libraries' under 'Build Phases'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/swift.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport SafariServices\n```\n\n----------------------------------------\n\nTITLE: JavaScript HMAC Signature Validation\nDESCRIPTION: This JavaScript snippet performs HMAC SHA256 signature validation of Webhook notifications from Mercado Pago. It involves extracting key parts from the notification header, generating a signature using a secret key, and ensuring the authenticity by comparing with the received signature.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/notifications.en.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Obtain the x-signature value from the header\nconst xSignature = headers['x-signature']; // Assuming headers is an object containing request headers\nconst xRequestId = headers['x-request-id']; // Assuming headers is an object containing request headers\n\n// Obtain Query params related to the request URL\nconst urlParams = new URLSearchParams(window.location.search);\nconst dataID = urlParams.get('data.id');\n\n// Separating the x-signature into parts\nconst parts = xSignature.split(',');\n\n// Initializing variables to store ts and hash\nlet ts;\nlet hash;\n\n// Iterate over the values to obtain ts and v1\nparts.forEach(part => {\n    // Split each part into key and value\n    const [key, value] = part.split('=');\n    if (key && value) {\n        const trimmedKey = key.trim();\n        const trimmedValue = value.trim();\n        if (trimmedKey === 'ts') {\n            ts = trimmedValue;\n        } else if (trimmedKey === 'v1') {\n            hash = trimmedValue;\n        }\n    }\n});\n\n// Obtain the secret key for the user/application from Mercadopago developers site\nconst secret = 'your_secret_key_here';\n\n// Generate the manifest string\nconst manifest = `id:${dataID};request-id:${xRequestId};ts:${ts};`;\n\n// Create an HMAC signature\nconst hmac = crypto.createHmac('sha256', secret);\nhmac.update(manifest);\n\n// Obtain the hash result as a hexadecimal string\nconst sha = hmac.digest('hex');\n\nif (sha === hash) {\n    // HMAC verification passed\n    console.log(\"HMAC verification passed\");\n} else {\n    // HMAC verification failed\n    console.log(\"HMAC verification failed\");\n}\n```\n\n----------------------------------------\n\nTITLE: Handling RDCPass Payment Query Response\nDESCRIPTION: Code to process the response from RDCPass after a payment query, including payload and transaction ID extraction.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-payment-query.es.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\ntry{ \n\tIntent intent = getIntent(); \n\tString action = intent.getAction(); \n\tString payload = new JSONObject(intent.getStringExtra(\"payload\")); \n\tString userTransactionId= new JSONObject(intent.getStringExtra(\"userTransactionId\")); \n\tif (Intent.ACTION_ANSWER.equals(action)) { \n\t\t// Define what to do with the received data \"payload\" \n\t} \n} catch (Exception e) { \n\te.printStackTrace(); \n} \n```\n\n----------------------------------------\n\nTITLE: Enviar request de captura de pago - Wallet Connect\nDESCRIPTION: Este snippet muestra cómo enviar un request POST al endpoint /v1/advanced_payments para capturar un pago utilizando Wallet Connect. Incluye headers de idempotencia y autorización, así como el cuerpo del request con los parámetros necesarios como transaction_amount, description, external_reference, forward_data, payer token, type_token y binary_mode. Se requiere un token de acceso (ACCESS_TOKEN) y un token de pagador (PAYER_TOKEN).\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/capture-payment.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    'https://api.mercadopago.com/v1/advanced_payments' \\\n    -H 'X-Idempotency-Key: IDEMPOTENCY_KEY' \\\n    -H 'X-Meli-Session-Id: DEVICE_ID' \\\n    -H 'Authorization: Bearer ACCESS_TOKEN' \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -d '{ \"wallet_payment\": { \"transaction_amount\": 700.50, \"description\": \"Descripción del pago\", \"external_reference\": \"Pago_123\" \"forward_data\": { \"sub_merchant\": { \"sub_merchant_id\": 123123, \"mcc\": \"5462\", \"country\": \"BRA\", \"address_door_number\": 1, \"zip\": \"2222222\", \"document_number\": \"222222222222222\", \"city\": \"SÃO PAULO\", \"address_street\": \"RUA A\", \"legal_name\": \"LOJINHA DO ZÉ\", \"region_code_iso\": \"BR-MG\", \"region_code\": \"BR\", \"document_type\": \"CNPJ\", \"phone\": \"123123123\", \"url\": \"www.nomedofacilitador.com.br\" } } }, \"payer\": { \"token\": \"PAYER_TOKEN\", \"type_token\": \"wallet-token\" }, \"binary_mode\": true }'\n```\n\n----------------------------------------\n\nTITLE: Get Issuers (V1)\nDESCRIPTION: JavaScript code snippet demonstrating how to retrieve issuers using Mercado Pago SDK V1 using callback. The `getIssuers()` method is called with the paymentMethodId and a callback function.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.Mercadopago.getIssuers(\n    paymentMethodId, callBackFn\n);\n\nfunction callBackFn(status, response) {\n    if (status == 200) {\n        response.forEach( issuer => {\n           ...\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Payment Error Callback (JavaScript Function)\nDESCRIPTION: This code snippet demonstrates how to define a JavaScript function to handle a failed payment callback. The function receives a `data` object containing error details such as `error_status` and `metadata`. The user is expected to implement their own logic to handle the error details inside the function body.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/callback-handling.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction callback_payment_error(data) {\n\tlet errorStatus = data[\"error_status\"]; \n\tlet metadata = data[\"metadata\"]; \n\t\n\t// Seu código aqui...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with PagoEfectivo via cURL\nDESCRIPTION: This cURL snippet demonstrates how to create a payment using the Mercado Pago API. It sends a POST request with transaction details, payment method, and payer information. It requires an access token and an idempotency key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_42\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n--header 'X-Idempotency-Key: <SOME_UNIQUE_VALUE>' \\\n--data-raw '{\n  \"transaction_amount\": 100,\n  \"description\": \"Titulo del producto\",\n  \"payment_method_id\": \"pagoefectivo_atm\",\n  \"payer\": { \"email\": \"test_user_12345@testuser.com\" }\n}'\n\n```\n\n----------------------------------------\n\nTITLE: Adding MercadoPago SDK Dependency in Android Studio\nDESCRIPTION: Instructions for adding the MercadoPago SDK as a dependency in an Android Studio project, which is necessary for integrating the SDK into your app. No prerequisites other than a properly configured Android Studio environment are required.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/android.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: Groovy\nCODE:\n```\ncompile 'com.mercadopago:sdk:3.4.1'\n```\n\n----------------------------------------\n\nTITLE: Setting Integrator and Platform IDs in C# for Mercado Pago SDK\nDESCRIPTION: This code snippet shows how to set the platform ID and integrator ID using the Mercado Pago C# SDK. It enables developers to identify their integrations for metrics and benefits.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/metrics/integration-metrics.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.PlatformId    = \"PLATFORM_ID\";\nMercadoPagoConfig.IntegratorId  = \"INTEGRATOR_ID\";\n```\n\n----------------------------------------\n\nTITLE: Implementing RDCPass Share Function for DTE Printing\nDESCRIPTION: Android implementation of the shareRDCPass method that handles the creation and execution of intents for DTE printing through RDCPass. Includes payload and DTE XML structure handling.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-print-dte.es.md#2025-04-18_snippet_1\n\nLANGUAGE: android\nCODE:\n```\npublic void shareRDCPass(String total, String intent) { \n\ttry { \n\t\tIntent sharingIntent = new Intent(intent); \n\t\tsharingIntent.setClassName(\"redelcom.cl.rdcpass\", \"redelcom.cl.rdcpass.MainActivity\"); \n\t\tsharingIntent.putExtra(\"packageName\", getPackageName()); \n\t\tsharingIntent.putExtra(\"className\", getClass().toString().split(\" \")[1]);  \n\t\tsharingIntent.putExtra(\"payload\", \"RESULTADO_PAGO_REALIZADO\"); \n\t\tsharingIntent.putExtra(\"dte\", dte); \n\t\tstartActivity(sharingIntent); \n\t} catch (Exception e) { \n\t\te.printStackTrace(); \n\t} \n}\n```\n\n----------------------------------------\n\nTITLE: Sample GET Request for Return URL Response in Mercado Pago Checkout Pro\nDESCRIPTION: This cURL representation shows a sample GET request that would be received when a user is redirected back to the merchant's site after completing a payment. It includes various parameters such as payment status, IDs, and references.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-return-urls.en.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\nGET /test?collection_id=106400160592&collection_status=rejected&payment_id=106400160592&status=rejected&external_reference=qweqweqwe&payment_type=credit_card&merchant_order_id=29900492508&preference_id=724484980-ecb2c41d-ee0e-4cf4-9950-8ef2f07d3d82&site_id=MLC&processing_mode=aggregator&merchant_account_id=null HTTP/1.1\nHost: yourwebsite.com\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\nAccept-Encoding: gzip, deflate, br, zstd\nAccept-Language: es-419,es;q=0.9\nConnection: keep-alive\nReferer: https://www.mercadopago.com/checkout/v1/payment/redirect/505f641c-cf04-4407-a7ad-8ca471419ee5/congrats/rejected/?preference-id=724484980-ecb2c41d-ee0e-4cf4-9950-8ef2f07d3d82&router-request-id=0edb64e3-d853-447a-bb95-4f810cbed7f7&p=f2e3a023dd16ac953e65c4ace82bb3ab\nSec-Ch-Ua: \"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Google Chrome\";v=\"134\"\nSec-Ch-Ua-Mobile: ?0\nSec-Ch-Ua-Platform: \"macOS\"\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: cross-site\nSec-Fetch-User: ?1\nUpgrade-Insecure-Requests: 1\n```\n\n----------------------------------------\n\nTITLE: Associating Facebook Ads Pixel with Checkout Pro in Python\nDESCRIPTION: The Python snippet details the association of a Facebook Ads pixel with a Mercado Pago preference for conversion tracking. Dependencies include the Mercado Pago Python SDK and the pixel ID as input data, with preference creation outlined using the SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.en.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Associate your Facebook pixel\npreference_data = {\n# ...\n\"tracks\": [\n{\n\"type\": \"facebook_ad\",\n\"values\": {\n\"pixel_id\": \"PIXEL_ID\"\n}\n}\n]\n}\n\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Return URLs in Java for Mercado Pago Checkout Pro\nDESCRIPTION: This Java code snippet illustrates how to set up return URLs for a Mercado Pago Checkout Pro preference. It uses a builder pattern to create a PreferenceBackUrlsRequest object with URLs for success, pending, and failure scenarios.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-return-urls.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nPreferenceBackUrlsRequest backUrls =\n// ...\n   PreferenceBackUrlsRequest.builder()\n       .success(\"https://www.seu-site/success\")\n       .pending(\"https://www.seu-site/pending\")\n       .failure(\"https://www.seu-site/failure\")\n       .build();\n\nPreferenceRequest request = PreferenceRequest.builder().backUrls(backUrls).build();\n// ...\n```\n\n----------------------------------------\n\nTITLE: Yape Payment Response Example\nDESCRIPTION: This JSON snippet shows an example response after creating a Yape payment. It includes important fields such as payment ID, payment method details, and status information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.en.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 74581527758,\n    ...\n    \"payment_method_id\": \"yape\",\n    \"payment_type_id\": \"debit_card\",\n    \"payment_method\": {\n        \"id\": \"yape\",\n        \"type\": \"debit_card\",\n        \"issuer_id\": \"12759\",\n        \"data\": {\n            \"routing_data\": {\n                \"merchant_account_id\": \"462540702\"\n            }\n        }\n    },\n    \"status\": \"approved\",\n    \"status_detail\": \"accredited\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Financial Institutions List in JSON\nDESCRIPTION: This JSON response shows the structure of the data returned when querying available financial institutions. It includes details such as bank ID, name, code, and logo URL.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/advanced-openFinance.en.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"data\": [\n       {\n           \"id\": \"81d8e591-5d8e-46e2-8b4a\",\n           \"name\": \"Mercado Pago - Payments\",\n           \"code\": \"370\",\n           \"ispb\": \"10573521\",\n           \"logo\": \"https://http2.mlstatic.com/open-banking/assets/88b4a.svg\",\n           \"isFrequentlyUsed\": true\n       },\n       {\n           \"id\": \"87290355-03e2-4cf9-b30b\",\n           \"name\": \"Mock Bank\",\n           \"code\": \"345\",\n           \"ispb\": \"\",\n           \"logo\": \"https://http2.mlstatic.com/open-banking/assets/8b30b.svg\",\n           \"isFrequentlyUsed\": false\n       }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Card Payment with Mercado Pago PHP SDK\nDESCRIPTION: Uses the Mercado Pago PHP SDK to create a card payment. Includes setting the access token, creating a payment client, and sending a payment request with transaction details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.en.md#2025-04-18_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\Client\\Common\\RequestOptions;\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['<TRANSACTION_AMOUNT>'],\n    \"token\" => $_POST['<TOKEN>'],\n    \"description\" => $_POST['<DESCRIPTION>'],\n    \"installments\" => $_POST['<INSTALLMENTS>'],\n    \"payment_method_id\" => $_POST['<PAYMENT_METHOD_ID'],\n    \"issuer_id\" => $_POST['<ISSUER>'],\n    \"payer\" => [\n      \"email\" => $_POST['<EMAIL>'],\n      \"identification\" => [\n        \"type\" => $_POST['<IDENTIFICATION_TYPE'],\n        \"number\" => $_POST['<NUMBER>']\n      ]\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment Value with cURL\nDESCRIPTION: This cURL command demonstrates how to capture a partial amount from a previously authorized payment. It captures 75 units of currency from the original authorized amount.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_16\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PUT \\\n  'https://api.mercadopago.com/v1/payments/PAYMENT_ID' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n  -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n  -d '{\n          \"transaction_amount\": 75,\n          \"capture\": true\n}'\n```\n\n----------------------------------------\n\nTITLE: Example Payment Intent Response (MLB)\nDESCRIPTION: This JSON snippet exemplifies the expected response structure when querying a payment intent in MLB region. It includes fields like `state`, `id`, `device_id`, `description`, `amount`, `payment` details (type, installments), and `additional_info` (external reference, print on terminal).\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/payment-processing.en.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"state\":\"FINISHED\",\n  \"id\":\"f8f50814-a8c5-4524-95b6-672958523121\",\n  \"device_id\":\"GERTEC_MP35P__8701016695109435\",\n  \"description\":\"this is an example\",\n  \"amount\":1500,\n  \"payment\":{\n     \"type\":\"credit_card\",\n     \"installments\":1\n  },\n  \"additional_info\":{\n     \"external_reference\":\"4561ads-das4das4-das4754-das456\",\n     \"print_on_terminal\":true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Shipping Costs - JSON\nDESCRIPTION: This snippet shows how to configure and display shipping costs separately from the total value in a Mercado Pago payment preference.  It adds a 'shipments' item with the 'cost' and 'mode' attributes set to the desired shipping amount and 'not_specified', respectively.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"shipments\":{\n        \"cost\": 1000,\n        \"mode\": \"not_specified\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refunding with Mercado Pago in Node.js\nDESCRIPTION: This Node.js snippet initializes the Mercado Pago client with an access token, creates a refund for a specified payment ID with a given amount, and handles the response or error from the refund operation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.es.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MercadoPagoConfig, PaymentRefund } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: 'YOUR_ACCESS_TOKEN' });\nconst paymentRefund = new PaymentRefund(client);\n\nrefund.create({\npayment_id: '<PAYMENT_ID>',\nbody: {\namount: 100\n}\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Adding New Cards to a Customer in Mercado Pago with PHP\nDESCRIPTION: PHP code for adding a new payment card to an existing customer. Uses the MercadoPago SDK to find a customer by ID and create a new card association using a card token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n  \n  $customer_client = new CustomerClient();\n  $customer = $customer_client->get(\"1234\");\n\n  $card_client = new CustomerCardClient();\n  \n  $customer_card = $client->create($customer->id, [\n    \"token\" => \"your_card_token\",\n    \"payment_method_id\" => \"debit_card\"\n  ]);\n\n  echo implode($customer_card);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Form for Saved Cards with HTML and JavaScript\nDESCRIPTION: HTML and JavaScript implementation for a payment form that displays saved cards and captures the security code. This includes styling, form elements, and card selection functionality.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/receive-payments-with-saved-cards.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    #form-checkout {\n      display: flex;\n      flex-direction: column;\n      max-width: 600px;\n    }\n\n    .container {\n      height: 18px;\n      display: inline-block;\n      border: 1px solid rgb(118, 118, 118);\n      border-radius: 2px;\n      padding: 1px 2px;\n    }\n  </style>\n  <form id=\"form-checkout\" method=\"POST\" action=\"/process_payment\">\n    <select type=\"text\" id=\"form-checkout__cardId\"></select>\n    <div id=\"form-checkout__securityCode-container\" class=\"container\"></div>\n    <input name=\"token\" id=\"token\" hidden>\n    <button>Enviar</button>\n  </form>\n\n<script>\n    const mp = new MercadoPago('TEST-2bf9f710-6a6e-47c8-a207-79f5e73b464c');\n\n    const securityCodeElement = mp.fields.create('securityCode', {\n      placeholder: \"CVV\"\n    }).mount('form-checkout__securityCode-container');\n\n    const customerCards = [{\n      \"id\": \"3502275482333\",\n      \"last_four_digits\": \"9999\",\n      \"payment_method\": {\n        \"name\": \"amex\",\n      },\n      \"security_code\": {\n        \"length\": 4,\n      }\n    }];\n\n    function appendCardToSelect() {\n      const selectElement = document.getElementById('form-checkout__cardId');\n      const tmpFragment = document.createDocumentFragment();\n      customerCards.forEach(({ id, last_four_digits, payment_method }) => {\n        const optionElement = document.createElement('option');\n        optionElement.setAttribute('value', id)\n        optionElement.textContent = `${payment_method.name} ended in ${last_four_digits}`\n        tmpFragment.appendChild(optionElement);\n      })\n      selectElement.appendChild(tmpFragment)\n    }\n\n    appendCardToSelect();\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Successful Customer Update Response in MercadoPago API\nDESCRIPTION: Example of a successful API response when updating customer information with a valid customer_id in MercadoPago. It includes all the updated customer data in JSON format.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/modify-customer.en.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\"id\": \"xxxxxxxxxxxxxxxxxxxxx\",\n\"email\": \"user@user.com\",\n\"first_name\": \"john\",\n\"last_name\": \"wagner\",\n\"phone\": {\n\"area_code\": \"[FAKER][PHONE_NUMBER][AREA_CODE]\",\n\"number\": 001234567\n},\n\"identification\": {\n\"type\": \"[FAKER][IDENTIFICATION][TYPE]\",\n\"number\": 12341234\n},\n\"address\": {\n\"zip_code\": \"[FAKER][ADDRESS][ZIP_CODE]\",\n\"street_name\": \"[FAKER][ADDRESS][STREET_NAME]\",\n\"street_number\": 2\n},\n\"description\": \"Customer Information\",\n\"date_created\": \"2021-05-25T15:36:23.541Z\",\n\"metadata\": {},\n\"cards\": [\n{}\n],\n\"addresses\": [\n{}\n]\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving QR Code with cURL\nDESCRIPTION: This cURL command demonstrates how to resolve a QR code using the Mercado Pago API. It requires the `access_token_wallet` obtained through OAuth Client Credentials. The `data` parameter contains the QR code data, and the `Authorization` header includes the bearer token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/interoperable-accepting-flow-test.es.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\n\"curl --location 'https://api.mercadopago.com/instore/v2/beta/external/resolve?data=00020101021143530016com.mercadolibre0129https%3A%2F%2Fmpago.la%2Fpos%2F2602959950150011273265943055204970053030325802AR5917Prueba%20Perfumeria6004CABA63047720' \\\n--header 'Authorization: Bearer {access_token_wallet}'\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago Devices SDK in Swift\nDESCRIPTION: Swift code to initialize the Mercado Pago Devices SDK in an iOS application's AppDelegate.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport MercadoPagoDevicesSDK\n...\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        ...        \n        MercadoPagoDevicesSDK.shared.execute()\n        ...\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment Amount using cURL with Mercado Pago API\nDESCRIPTION: This snippet shows how to capture a partial amount of 75 from a previously reserved payment using cURL. It sends a PUT request to the Mercado Pago API with the payment ID, transaction amount, and capture flag.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.es.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PUT \\\n  'https://api.mercadopago.com/v1/payments/PAYMENT_ID' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n  -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n  -d '{\n          \"transaction_amount\": 75,\n          \"capture\": true\n}'\n```\n\n----------------------------------------\n\nTITLE: Encryption Example for Newland MLB Devices\nDESCRIPTION: Demonstrates the encryption process for 'newland_mlb' PoI devices using 3DES and ECB operation mode with KSN. Shows input data and expected output including PAN, expiration date, cardholder info, and track1 data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/secure_payments/responses.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Example |\n|---|\n| PoiType = NEWLAND_MLB_1234 |\n| Track1 = 59BF2A2DA3D02BB6491BF8756B47D05397D3B3E95F13F4F1EC63C1F6A33E0C86493F91D1358C0D7216AC5703D89CC2EB299950B3A3D69D8C1BA38F0A714809F8A8A821D54CC2ADFB |\n| KSN = FFFFF010010000E00016 |\n\n| Result |\n|---|\n| PAN = 7657773111126363 |\n| Expiration date = 07/2022 |\n| Cardholder = KREIFF DE MENTIRA |\n| Track1 = B7657773111126363^KREIFF/ |\n| DEMENTIRA^2207201000000100000000950000000|\n```\n\n----------------------------------------\n\nTITLE: Creating a Customer in Mercado Pago Java SDK\nDESCRIPTION: Demonstrates how to create a new customer with comprehensive details using the CustomerClient and CustomerRequest builder in Mercado Pago's Java SDK. Includes setting customer information like email, name, phone, identification, and address.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/customers.en.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nCustomerClient client = new CustomerClient();\n\nCustomerRequest customerRequest =\n   CustomerRequest.builder()\n       .email(\"jhon@doe.com\")\n       .firstName(\"Jhon\")\n       .lastName(\"Doe\")\n       .phone(PhoneRequest.builder().areaCode(\"55\").number(\"991234567\").build())\n       .identification(\n           IdentificationRequest.builder().type(\"CPF\").number(\"12345678900\").build())\n       .defaultAddress(\"Home\")\n       .address(\n           CustomerAddressRequest.builder()\n               .id(\"123123\")\n               .zipCode(\"01234567\")\n               .streetName(\"Rua Exemplo\")\n               .streetNumber(123)\n               .build())\n       .dateRegistred(OffsetDateTime.of(2000, 1, 18, 0, 0, 0, 0, ZoneOffset.UTC))\n       .description(\"Description del user\")\n       .defaultCard(\"None\")\n       .build();\n\nclient.create(customerRequest);\n```\n\n----------------------------------------\n\nTITLE: Creating Pix Payments with Ruby SDK\nDESCRIPTION: Ruby implementation for creating Pix payments with Mercado Pago. This snippet initializes the SDK with an access token, sets up custom headers with an idempotency key, and creates a payment request with the transaction amount, payment method, and payer email.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pix.es.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_request = {\n  transaction_amount: 100,\n  payment_method_id: 'pix',\n  payer: {\n    email: 'PAYER_EMAIL_HERE',\n  }\n}\n\npayment_response = sdk.payment.create(payment_request, custom_request_options)\npayment = payment_response[:response]\n\n```\n\n----------------------------------------\n\nTITLE: Creating Yape Payment in Ruby\nDESCRIPTION: Ruby implementation for creating a Yape payment using MercadoPago SDK with token, transaction amount, and payer details\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.pt.md#2025-04-18_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_object = {\n  description: 'Titulo del producto',\n  installments: 1,\n  payer: {\n    email: 'test_user_123@testuser.com',\n  },\n  payment_method_id: 'yape',\n  token: 'ff8080814c11e237014c1ff593b57b4d',\n  transaction_amount: 5000\n}\n\npayment_response = sdk.payment.create(payment_request, custom_request_options)\npayment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Associating Google Ads with Preferences in PHP\nDESCRIPTION: This snippet demonstrates how to link a Google Ads conversion tag with a payment preference in PHP. A MercadoPago\\Preference instance is a dependency, and integration requires specifying conversion_id and conversion_label values. These details are crucial for ads tracking.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/preferences.en.md#2025-04-18_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n  // Create a preference object\n  $preference = new MercadoPago\\Preference();\n \n  // Associate your tag\n  $preference->tracks = array(\n    array(\n        'type' => 'google_ad',\n        'values' => array(\n          'conversion_id' => 'CONVERSION_ID',\n          'conversion_label' => 'CONVERSION_LABEL'\n        )\n    )\n  );\n  ...\n  // Save and post the preference\n  $preference->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Cancelling Payment with Mercado Pago SDK\nDESCRIPTION: This code snippet demonstrates how to cancel a payment using the Mercado Pago SDK in Python. It initializes the SDK with an access token, defines the payment data with the 'cancelled' status, and updates the payment using the payment ID. The response contains the updated payment information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/cancellations.es.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n \npayment_data = {\n   \"status\": \"cancelled\"\n}\n \npayment_response = sdk.payment().update(payment_id, payment_data)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Credentials for Payment Processing in JavaScript\nDESCRIPTION: This JavaScript code snippet initializes Mercado Pago with a public key to set up the credentials required for processing payments securely.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.pt.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst mp = new MercadoPago('YOUR_PUBLIC_KEY');\n```\n\n----------------------------------------\n\nTITLE: Querying Card Issuers with PHP\nDESCRIPTION: PHP implementation to retrieve card issuers using Mercado Pago's API. Requires mercadopago.php library and valid ACCESS_TOKEN. Returns issuer information based on payment method and BIN number.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/issuers.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\trequire ('mercadopago.php');\n\t$mp = new MP ('ACCESS_TOKEN');\n\t$card_issuers = $mp->get('/v1/payment_methods/card_issuers', 'visa', '424242');\n\tprint_r ($card_issuers);\n?>\n```\n\n----------------------------------------\n\nTITLE: Example API Response for Yape Token Generation\nDESCRIPTION: JSON response structure returned after successful token generation via API, containing token details needed for payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.en.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"live_mode\": true,\n    \"luhn_validation\": null,\n    \"require_esc\": null,\n    \"cloned\": false,\n    \"cardholder\": {\n        \"identification\": {\n            \"number\": null,\n            \"type\": null,\n            \"subtype\": null\n        },\n        \"name\": \"yape\"\n    },\n    \"security_code_id\": 8069792005119486812,\n    \"security_code_length\": 6,\n    \"card_number_length\": 9,\n    \"expiration_month\": 5,\n    \"expiration_year\": 2024,\n    \"card_present_id\": null,\n    \"card_id\": null,\n    \"client_id\": 7775327892346559,\n    \"present\": null,\n    \"id\": \"45d013f72bf42717a1625f4c508fc20f\",\n    \"card_number_id\": \"FFTSHQTOSJTXGFVFGJKCBAIVOUISTFZBDRTQWLYJ\",\n    \"creation_date\": null,\n    \"due_date\": null,\n    \"last_modified_date\": null,\n    \"product_id\": null,\n    \"trust_level\": \"unknown\",\n    \"public_key\": \"APP_USR-352587ca-674b-4ae4-a348-8583ab39b4ac\",\n    \"site_id\": \"MPE\",\n    \"status\": \"active\",\n    \"transaction_id\": null,\n    \"trunc_card_number\": null,\n    \"used_date\": null,\n    \"bin\": \"111111\",\n    \"version\": 0,\n    \"client_header\": null,\n    \"first_six_digits\": \"111111\",\n    \"last_four_digits\": \"6789\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Payment Intent Status (MLM)\nDESCRIPTION: This code snippet demonstrates how to retrieve the status of a payment intent using the Mercado Pago Point Integration API for MLM. It requires the payment intent ID and an access token for authentication. The endpoint returns a JSON response with the payment intent details, including its current status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/payment-processing.en.md#2025-04-18_snippet_8\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request GET 'https://api.mercadopago.com/point/integration-api/payment-intents/{paymentintentid}' \\\n--h 'Authorization: Bearer YOUR_ACCESS_TOKEN' \n```\n\n----------------------------------------\n\nTITLE: Creating a New Release Report Configuration in MercadoPago API\nDESCRIPTION: This snippet demonstrates how to create a new release report configuration using the MercadoPago API. It includes setting properties such as file name prefix, email notifications, frequency, and report columns. The request is made via a POST call to the /v1/account/release_report/config endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/release_report/config' \\\n    -d '{\n            \"file_name_prefix\": \"release-report-USER_ID\",\n            \"include_withdrawal_at_end\": true,\n            \"execute_after_withdrawal\": false,\n            \"display_timezone\": \"GMT-04\",\n            \"notification_email_list\": [\n                \"example@email.com\",\n                \"john@example.com\"\n            ],\n            \"frequency\": {\n                \"hour\": 0,\n                \"type\": \"monthly\",\n                \"value\": 1\n            },\n            \"columns\": [\n                {\n                    \"key\": \"DATE\"\n                },\n                {\n                    \"key\": \"SOURCE_ID\"\n                },\n                {\n                    \"key\": \"EXTERNAL_REFERENCE\"\n                }\n            ]\n    }'\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$data = '{\n            \"file_name_prefix\": \"release-report-USER_ID\",\n            \"include_withdrawal_at_end\": true,\n            \"execute_after_withdrawal\": false,\n            \"display_timezone\": \"GMT-04\",\n            \"notification_email_list\": [\n                \"example@email.com\",\n                \"john@example.com\"\n            ],\n            \"frequency\": {\n                \"hour\": 0,\n                \"type\": \"monthly\",\n                \"value\": 1\n            },\n            \"columns\": [\n                {\n                    \"key\": \"DATE\"\n                },\n                {\n                    \"key\": \"SOURCE_ID\"\n                },\n                {\n                    \"key\": \"EXTERNAL_REFERENCE\"\n                }\n            ]\n    }';\n$response = Requests::post('https://api.mercadopago.com/v1/account/release_report/config', $headers, $data);\n```\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/release_report/config\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"POST\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nconnection.setDoOutput(true);\n\nString body = \"{\n                \\\"file_name_prefix\\\": \\\"release-report-USER_ID\\\",\n                \\\"include_withdrawal_at_end\\\": true,\n                \\\"execute_after_withdrawal\\\": false,\n                \\\"display_timezone\\\": \\\"GMT-04\\\",\n                \\\"notification_email_list\\\": [\n                    \\\"example@email.com\\\",\n                    \\\"john@example.com\\\",\n                ],\n                \\\"frequency\\\": {\n                    \\\"hour\\\": 0,\n                    \\\"type\\\": \\\"monthly\\\",\n                    \\\"value\\\": 1\n                },\n                \\\"columns\\\": [\n                    { \\\"key\\\": \\\"DATE\\\" },\n                    { \\\"key\\\": \\\"SOURCE_ID\\\" },\n                    { \\\"key\\\": \\\"EXTERNAL_REFERENCE\\\" },\n                ]\n            }\";\n\ntry(OutputStream os = connection.getOutputStream()) {\n    byte[] input = body.getBytes(\"utf-8\");\n    os.write(input, 0, input.length);\n}\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\ndata = '{  \n            \"file_name_prefix\": \"release-report-USER_ID\",\n            \"include_withdrawal_at_end\": true,\n            \"execute_after_withdrawal\": false,\n            \"display_timezone\": \"GMT-04\",\n            \"notification_email_list\": [\n                \"example@email.com\",\n                \"john@example.com\"\n            ],\n            \"frequency\": {\n                \"hour\": 0,\n                \"type\": \"monthly\",\n                \"value\": 1\n            },\n            \"columns\": [\n                {\n                    \"key\": \"DATE\"\n                },\n                {\n                    \"key\": \"SOURCE_ID\"\n                },\n                {\n                    \"key\": \"EXTERNAL_REFERENCE\"\n                }\n            ]\n        }'\n\nresponse = requests.post('https://api.mercadopago.com/v1/account/release_report/config', headers=headers, data=data)\n```\n\nLANGUAGE: node.js\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar dataString = '{\n            \"file_name_prefix\": \"release-report-USER_ID\",\n            \"include_withdrawal_at_end\": true,\n            \"execute_after_withdrawal\": false,\n            \"display_timezone\": \"GMT-04\",\n            \"notification_email_list\": [\n                \"example@email.com\",\n                \"john@example.com\"\n            ],\n            \"frequency\": {\n                \"hour\": 0,\n                \"type\": \"monthly\",\n                \"value\": 1\n            },\n            \"columns\": [\n                {\n                    \"key\": \"DATE\"\n                },\n                {\n                    \"key\": \"SOURCE_ID\"\n                },\n                {\n                    \"key\": \"EXTERNAL_REFERENCE\"\n                }\n            ]\n    }';\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/release_report/config',\n    method: 'POST',\n    headers: headers,\n    body: dataString\n};\n\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\n\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Resposta de consulta de transferência PIX concluída\nDESCRIPTION: Formato de resposta JSON que mostra uma transferência PIX concluída, incluindo campos como ID da transação, valor, chave PIX do destinatário e horário da transação.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/pix-payments/consult-transfer.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"status\": \"CONCLUIDA\",\n\"pix\": [\n    {\n        \"endToEndId\": \"E10573521202206211501YtU7ltDrM72\",\n        \"txid\": \"9c1256e6487e461dbec64f0d0471f9b0\",\n        \"valor\": \"1.00\",\n        \"chave\": \"test_user_81729269@testuser.com\",\n        \"horario\": \"2022-06-21T15:01:38Z\",\n        \"infoPagador\": \"Pago Bank Transfer Pix\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Partially Reverted Transaction Status\nDESCRIPTION: Transaction scenario where the transaction is partially refunded. The status will be 'partially_reverted' with a status_detail of 'partially_refunded'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-test.pt.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"partially_reverted\",\n  \"status_detail\": \"partially_refunded\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting custom CSS variables with React JSX\nDESCRIPTION: This React JSX snippet demonstrates how to set custom CSS variables for a Mercado Pago Brick within a React component. It utilizes the `customization.visual.style.customVariables` object to modify CSS properties like `textPrimaryColor` and `textSecondaryColor`.  Ensure the correct values are provided to customize the Brick's appearance.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/modify-variables.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n   style: {\n     customVariables: {\n       textPrimaryColor: 'string'\n       textSecondaryColor: 'string'\n     }\n   }\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Refund with Mercado Pago SDK in Python\nDESCRIPTION: This snippet shows how to retrieve a list of refunds associated with a specific payment ID using the Mercado Pago SDK for Python. It initializes the SDK with an access token, calls the `list_all` method on the `refund` object passing the payment ID, and then extracts the refunds information from the response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/refunds.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrefunds_response = sdk.refund().list_all(payment_id)\nrefunds = refunds_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Resolve QR Code using Mercado Pago API\nDESCRIPTION: This snippet shows how to resolve the QR code using a curl request to the Mercado Pago API.  It requires the `access_token_wallet` obtained through the OAuth Client Credentials flow.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/interoperable-accepting-flow-test.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\n\"curl --location 'https://api.mercadopago.com/instore/v2/beta/external/resolve?data=00020101021143530016com.mercadolibre0129https%3A%2F%2Fmpago.la%2Fpos%2F2602959950150011273265943055204970053030325802AR5917Prueba%20Perfumeria6004CABA63047720' \\\n--header 'Authorization: Bearer {access_token_wallet}'\"\n```\n\n----------------------------------------\n\nTITLE: Adding Payment Form - HTML\nDESCRIPTION: This HTML snippet creates a structured payment form utilizing the CardForm component from MercadoPago.js, designed to handle user input for card details necessary for processing payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    #form-checkout {\n      display: flex;\n      flex-direction: column;\n      max-width: 600px;\n    }\n\n    .container {\n      height: 18px;\n      display: inline-block;\n      border: 1px solid rgb(118, 118, 118);\n      border-radius: 2px;\n      padding: 1px 2px;\n    }\n  </style>\n  <form id=\"form-checkout\">\n    <div id=\"form-checkout__cardNumber\" class=\"container\"></div>\n    <div id=\"form-checkout__expirationDate\" class=\"container\"></div>\n    <div id=\"form-checkout__securityCode\" class=\"container\"></div>\n    <input type=\"text\" id=\"form-checkout__cardholderName\" />\n    <select id=\"form-checkout__issuer\"></select>\n    <select id=\"form-checkout__installments\"></select>\n    <select id=\"form-checkout__identificationType\"></select>\n    <input type=\"text\" id=\"form-checkout__identificationNumber\" />\n    <input type=\"email\" id=\"form-checkout__cardholderEmail\" />\n\n    <button type=\"submit\" id=\"form-checkout__submit\">Pagar</button>\n    <progress value=\"0\" class=\"progress-bar\">Carregando...</progress>\n  </form>\n```\n\n----------------------------------------\n\nTITLE: Discovering Bluetooth Devices with MPManager SDK\nDESCRIPTION: Demonstrates how to start bluetooth device discovery using the startDiscovery method. Handles different discovery states including device found, device changes, and discovery completion events.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/manage-connections.en.md#2025-04-18_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval bluetoothDiscover = MPManager.bluetooth.discover\n\nbluetoothDiscover.startDiscovery { response ->\n   response\n       .doIfSuccess { discoveryState ->\n           when (discoveryState.type) {\n               BluetoothDiscoveryState.Type.STARTED -> {\n                   // Manage the start of the discovery\n               }\n               BluetoothDiscoveryState.Type.DEVICE_FOUND -> discoveryState.device?.let { device ->\n                   // Manage the discovery of a new device\n               }\n               BluetoothDiscoveryState.Type.DEVICE_CHANGE -> discoveryState.device?.let { device ->\n                   // Manage changes in a discovered device\n               }\n               BluetoothDiscoveryState.Type.ENDED -> {\n                   // Manage the end of the discovery\n               }\n           }\n       }\n       .doIfError { error ->\n           // Manage the error case if necessary\n       }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal BluetoothDiscoverDevices bluetoothDiscoverDevices = MPManager.INSTANCE.getBluetooth().getDiscover();\n\nfinal Function1<MPResponse<BluetoothDiscoveryState>, Unit> callback = (final MPResponse<BluetoothDiscoveryState> response) -> {\n if (response.getStatus() == ResponseStatus.SUCCESS) {\n   switch (response.getData().getType()) {\n     case STARTED:\n       // Manage the start of the discovery\n       break;\n     case DEVICE_FOUND:\n       // Manage the discovery of a new device\n       final BluetoothDeviceModel foundDevice = response.getData().getDevice();\n       break;\n     case DEVICE_CHANGE:\n       // Manage changes in a discovered device\n       final BluetoothDeviceModel changedDevice = response.getData().getDevice();\n       break;\n     case ENDED:\n       // Manage the end of the discovery\n\n   }\n } else {\n   // Manage the error case if necessary\n }\n return Unit.INSTANCE;\n};\n\nbluetoothDiscoverDevices.startDiscovery(callback);\n```\n\n----------------------------------------\n\nTITLE: Checking Settlement Report Configuration via API\nDESCRIPTION: Makes a GET request to check the existing configuration of settlement reports. Requires authentication via Bearer token. Returns report configuration details including file naming, detailing options, and scheduling preferences.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/config'\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$response = Requests::get('https://api.mercadopago.com/v1/account/settlement_report/config', $headers);\n```\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report/config\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"GET\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\nresponse = requests.get('https://api.mercadopago.com/v1/account/settlement_report/config', headers=headers)\n```\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report/config',\n    headers: headers\n};\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Configuring Integration Identifiers in MercadoPago Ruby SDK\nDESCRIPTION: Demonstrates how to set platform, integrator, and corporation IDs using the MercadoPago Ruby SDK. Replace the placeholder values with actual identification codes and use the configured request options when initializing the SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integration-identification.es.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequest_options = Mercadopago::RequestOptions.new()\nrequest_options.platform_id = 'PLATFORM_ID'\nrequest_options.integrator_id = 'INTEGRATOR_ID'\nrequest_options.corporation_id = 'CORPORATION_ID'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN', request_options: request_options)\n```\n\n----------------------------------------\n\nTITLE: Schedule Report Success Response\nDESCRIPTION: Sample JSON response after successfully scheduling a settlement report, containing report details like ID, dates and status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.pt.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 2541818,\n    \"user_id\": \"USER-ID\",\n    \"begin_date\": \"2019-07-01T06:00:00Z\",\n    \"end_date\": \"2019-08-01T05:59:59Z\",\n    \"created_from\": \"schedule\",\n    \"status\": \"pending\",\n    \"report_type\": \"settlement\",\n    \"generation_date\": \"2019-08-01T06:00:00.000Z\",\n    \"last_modified\": \"2019-07-24T13:45:33.479-04:00\",\n    \"retries\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago Payment SDK in Multiple Languages\nDESCRIPTION: Set up Mercado Pago SDK and configure access token for payment processing across different programming languages. Demonstrates initial SDK configuration and payment object creation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php  \n    require_once 'vendor/autoload.php';\n\n    MercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n    //...\n    $payment = new MercadoPago\\Payment();\n    $payment->transaction_amount = 100;\n    $payment->token = $token;\n    $payment->description = \"Blue shirt\";\n    $payment->installments = $installments;\n    $payment->payment_method_id = $payment_method_id;\n    $payment->issuer_id = $issuer_id;\n    $payment->payer = array(\n    \"email\" => \"john@yourdomain.com\"\n    );\n    // Guarda y postea el pago\n    $payment->save();\n    //...\n    // Imprime el estado del pago\n    echo $payment->status;\n    //...\n```\n\nLANGUAGE: java\nCODE:\n```\nMercadoPago.SDK.setAccessToken(\"ENV_ACCESS_TOKEN\");\n//...\nPayment payment = new Payment();\npayment.setTransactionAmount(100f)\n       .setToken(token)\n       .setDescription(\"Blue shirt\")\n       .setInstallments(installments)\n       .setPaymentMethodId(payment_method_id)\n       .setIssuerId(issuer_id)\n       .setPayer(new Payer()\n         .setEmail(\"john@yourdomain.com\"));\n// Save and create the payment\npayment.save();\n//...\n// Shows payment stauts\nSystem.out.println(payment.getStatus());\n//...\n```\n\n----------------------------------------\n\nTITLE: Configuring Wallet Brick with redirectMode in React\nDESCRIPTION: This code snippet shows how to configure the Wallet Brick in a React component to open in a new page by setting the `redirectMode` property to `blank` within the `initialization` prop. The `preferenceId` is also passed in as part of the initialization settings.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/opening-mode.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\n<Wallet initialization={{ preferenceId: '<PREFERENCE_ID>', redirectMode: 'blank' }} />\n```\n\n----------------------------------------\n\nTITLE: Setting Report Frequency in JSON\nDESCRIPTION: JSON object that defines how often a report should be generated. This example configures a monthly report generation on the first day of each month at midnight.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"hour\": 0, \"type\": \"monthly\", \"value\": 1 }\n```\n\n----------------------------------------\n\nTITLE: Creando pagos con PagoEfectivo usando Mercado Pago API con cURL\nDESCRIPTION: Comando cURL para crear un pago con PagoEfectivo utilizando la API de Mercado Pago. Incluye los headers de autorización e idempotencia, y envía los datos requeridos para el pago en formato JSON.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mpe.es.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n    'https://api.mercadopago.com/v1/payments' \\\n    -d '{\n      \"transaction_amount\": 100,\n      \"description\": \"Product title\",\n      \"payment_method_id\": \"pagoefectivo_atm\",\n      \"payer\": {\n        \"email\": \"PAYER_EMAIL_HERE\",\n      },\n\"metadata\": {\n        \"payment_mode\": \"online\",\n      }\n    }'\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Request with 3DS via cURL\nDESCRIPTION: This cURL command demonstrates how to send a POST request to the Mercado Pago API to create a payment with 3DS authentication. It includes headers for authorization and content type, along with JSON data for payment details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.en.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'Authorization: <ENV_ACCESS_TOKEN>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"payer\": {\n        \"email\": \"<BUYER_EMAIL>\"\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"quantity\": <ITEM_QUANTITY>,\n                \"category_id\": <CATEGORY_ID>,\n                \"title\": <ITEM_TITLE>,\n                \"unit_price\": <TRANSACTION_AMOUNT>\n            }\n        ]\n    },\n    \"payment_method_id\": <PAYMENT_METHOD_ID>,\n    \"marketplace\": \"NONE\",\n    \"installments\": <INSTALLMENTS_NUMBER>,\n    \"transaction_amount\": <TRANSACTION_AMOUNT>,\n    \"description\": \"<DESCRIPTION>\",\n    \"token\": \"CARD_TOKEN\",\n    \"three_d_secure_mode\": \"optional\",\n    \"capture\": true,\n    \"binary_mode\": false\n}'\n```\n\n----------------------------------------\n\nTITLE: Processing Card Payments with cURL for Multiple Countries\nDESCRIPTION: This cURL request demonstrates how to create a payment for Argentina, Brazil, Peru, Colombia, Uruguay, and Chile using MercadoPago's API. It includes an idempotency key and payment details with the identification type field, which is required in these countries.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-cards.en.md#2025-04-18_snippet_8\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n    -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n    'https://api.mercadopago.com/v1/payments' \\\n    -d '{\n          \"transaction_amount\": 100,\n          \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n          \"description\": \"Blue shirt\",\n          \"installments\": 1,\n          \"payment_method_id\": \"visa\",\n          \"issuer_id\": 310,\n          \"payer\": {\n            \"email\": \"PAYER_EMAIL_HERE\",\n            \"identification\": {\n                \"number\": 19119119100,\n                \"type\": \"CPF\"\n            }\n          }\n    }'\n```\n\n----------------------------------------\n\nTITLE: Deleting Customer Card with Mercado Pago\nDESCRIPTION: This snippet demonstrates how to delete a customer card using the Mercado Pago Java SDK. It uses the `CustomerCardClient`'s `delete` method, requiring both the `customerId` and the `cardId` to identify the card to be removed. This action permanently deletes the specified card from the customer's account.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/cards.es.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nCustomerCardClient client = new CustomerCardClient();\n\nString customerId = \"448870796-7ZjwhKGxILixxN\";\nString cardId = \"8987269652\";\nclient.delete(customerId, cardId);\n```\n\n----------------------------------------\n\nTITLE: Activating Binary Mode - JSON\nDESCRIPTION: This snippet demonstrates how to activate binary mode for a Mercado Pago preference.  Setting `binary_mode` to `true` ensures that payments are either immediately approved or rejected, simplifying integration with the Payment Brick.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"binary_mode\": true\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirection URLs in MercadoPago Preference with PHP\nDESCRIPTION: This PHP code shows how to configure back URLs and auto-return for a MercadoPago preference. It defines URLs for success, failure, and pending payment states, and enables automatic redirection for approved payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$preference = new MercadoPago\\Preference();\n//...\n$preference->back_urls = array(\n    \"success\" => \"https://www.tu-sitio/success\",\n    \"failure\" => \"http://www.tu-sitio/failure\",\n    \"pending\" => \"http://www.tu-sitio/pending\"\n);\n$preference->auto_return = \"approved\";\n// ...\n?>\n```\n\n----------------------------------------\n\nTITLE: Rendering Wallet Brick HTML Container\nDESCRIPTION: This HTML snippet creates a `div` element that serves as the container for the Wallet Brick. The `id` of this `div` must match the container ID specified when initializing the Brick.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"walletBrick_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Creating Mercado Pago Preference in C#\nDESCRIPTION: This C# code creates a preference using the PreferenceClient. It sets up the 'wallet_purchase' purpose for logged payments and includes an item with title, quantity, currency, and unit price. The preference is then created asynchronously using the client.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.en.md#2025-04-18_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\n// Create the preference request object\nvar request = new PreferenceRequest\n{\n  // the Purpose = 'wallet_purchase', allows only logged payments.\n   // to allow guest payments you can omit this property\n    Purpose = 'wallet_purchase',\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"Meu produto\",\n            Quantity = 1,\n            CurrencyId = \"BRL\",\n            UnitPrice = 75, // item unit price, must be an integer.\n        },\n    },\n};\n\n// Create the preference using the client\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods in Mercado Pago Python\nDESCRIPTION: This Python snippet shows how to define a payment method preference using a dictionary structure. It includes exclusions for payment methods and types, as well as specifying installments. It assumes the use of the Mercado Pago Python SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n#...\npreference_data = {\n    \"excluded_payment_methods\": [\n        { \"id\": \"master\" }\n    ],\n    \"excluded_payment_types\": [\n        { \"id\": \"ticket\" }\n    ],\n    \"installments\": 12\n}\n#...\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Items in PHP\nDESCRIPTION: This PHP snippet demonstrates how to create a Mercado Pago preference with multiple items. It initializes the MercadoPago SDK, creates item objects with their properties, adds them to the preference, and saves the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/preference-multiple-items.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  # Criar um objeto preferência\n  $preference = new MercadoPago\\Preference();\n  # Cria itens na preferência\n  $item1 = new MercadoPago\\Item();\n  $item1->title = \"Item de Teste 1\";\n  $item1->quantity = 2;\n  $item1->unit_price = 11.96;\n\n  $item2= new MercadoPago\\Item\n  $item2->title = \"Item de Teste 2\";\n  $item2->quantity = 1;\n  $item2->unit_price = 11.96;\n\n  $preference->items = array($item1,$item2);\n  # Salvar e postar a preferência\n  $preference->save();\n?>\n\n```\n\n----------------------------------------\n\nTITLE: Creating Payment using MercadoPago API - Go\nDESCRIPTION: This Go example demonstrates how to create a new payment request using the MercadoPago SDK. It initializes the configuration with an access token, constructs a payment request with transaction and payer details, and sends the request to create the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.es.md#2025-04-18_snippet_17\n\nLANGUAGE: go\nCODE:\n```\naccessToken := \"{{ACCESS_TOKEN}}\"\n\n\ncfg, err := config.New(accessToken)\nif err != nil {\n  fmt.Println(err)\n  return\n}\n\nclient := payment.NewClient(cfg)\n\n\nrequest := payment.Request{\n   TransactionAmount: 105,\n   PaymentMethodID:   \"bolbradesco\",\n   Payer: &payment.PayerRequest{\n      Email:     \"{{EMAIL}}\",\n      FirstName: \"{{NOME}}\",\n      LastName:  \"{{SOBRENOME}}\",\n      Identification: &payment.IdentificationRequest{\n         Type:   \"{{TIPO DO DOCUMENTO}}\",\n         Number: \"{{NUMERO}}\",\n      },\n      Address: &payment.AddressRequest{\n         ZipCode:      \"06233-200\",\n         City:         \"Osasco\",\n         Neighborhood: \"Bonfim\",\n         StreetName:   \"Av. das Nações Unidas\",\n         StreetNumber: \"3003\",\n         FederalUnit:  \"SP\",\n      },\n   },\n}\n\nresource, err := client.Create(context.Background(), request)\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nfmt.Println(resource)\n\n```\n\n----------------------------------------\n\nTITLE: Manual Integration of Mercado Pago SDK - Swift\nDESCRIPTION: This snippet contains steps to manually integrate the Mercado Pago SDK by dragging the SDK project into an existing Xcode project, configuring targets, and setting up dependencies.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ios.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\n- Open the MercadoPagoSDK folder, and drag MercadoPagoSDK.xcodeproj into the file navigator of your app project.\n- In Xcode, navigate to the target configuration window by clicking on the blue project icon, and selecting the application target under the \"Targets\" heading in the sidebar.\n- Ensure that the deployment target of MercadoPagoSDK.framework matches that of the application target.\n- In the tab bar at the top of that window, open the \"Build Phases\" panel.\n- Expand the \"Target Dependencies\" group, and add MercadoPagoSDK.framework.\n- Click on the + button at the top left of the panel and select \"New Copy Files Phase\". Rename this new phase to \"Copy Frameworks\", set the \"Destination\" to \"Frameworks\", and add MercadoPagoSDK.framework.\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Mercado Pago API\nDESCRIPTION: This JSON structure represents the expected response from the Mercado Pago API after successfully creating an order with the QR Buyer model. It includes information such as the payment status, details about the items, and payment transaction.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/hidden-qr-buyer-part-b.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n   \"id\": 2574846382,\\n   \"status\": \"approved\",\\n   \"items\": [\\n       {\\n            \"sku_number\": \"KS955RUR\",\\n            \"category\": \"FOOD\",\\n            \"title\": \"Item1\",\\n            \"description\": \"Item1 Mercado Pago\",\\n            \"unit_price\": 20,\\n            \"quantity\": 5,\\n            \"unit_measure\": \"unit\",\\n            \"total_amount\": 100\\n        }\\n   ],\\n   \"payments\": [\\n       {\\n           \"id\": 14527153428,\\n           \"status\": \"approved\",\\n           \"status_detail\": \"accredited\",\\n           \"payment_type_id\": \"account_money\",\\n           \"payment_method_id\": \"account_money\",\\n           \"token\": null,\\n           \"transaction_amount\": 100,\\n           \"installments\": 1,\\n           \"processing_mode\": null,\\n           \"issuer_id\": null,\\n           \"coupon_amount\": 0,\\n           \"campaign_id\": null,\\n           \"coupon_code\": null,\\n           \"description\": \"Mercado Pago\",\\n           \"external_reference\": \"order-id-1234\",\\n           \"statement_descriptor\": null,\\n           \"date_of_expiration\": null,\\n           \"merchant_account_id\": null,\\n           \"payment_method_option_id\": null,\\n           \"additional_info\": null,\\n           \"net_amount\": null,\\n           \"transaction_details\": {\\n               \"external_resource_url\": null,\\n               \"total_paid_amount\": 100\\n           }\\n       }\\n   ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Details with MercadoPago Node.js SDK\nDESCRIPTION: This snippet demonstrates how to retrieve detailed information about a specific payment using its ID with the MercadoPago Node.js SDK. It requires an access token and the payment ID to query.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/create-payments.en.md#2025-04-18_snippet_2\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst payment = new Payment(client);\n\npayment.get({\n\tid: '<PAYMENT_ID>',\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Listing Customer Cards with Java\nDESCRIPTION: Retrieves the list of customer cards using the CustomerCardClient.  It sets the access token and then calls the listAll method with the customer ID to retrieve a list of CustomerCard objects.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/get-cards-list.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nCustomerCardClient customerCardClient = new CustomerCardClient();\n\nMPResourceList<CustomerCard> list = customerCardClient.listAll(\"000000000-abcdEfghiJklM\");\nList<CustomerCard> customerCards = list.getResults();\n```\n\n----------------------------------------\n\nTITLE: Available Payments Configuration (MLU)\nDESCRIPTION: This snippet specifies the available payment methods for Uruguay (MLU) when using the Mercado Pago integration with Tiendanube. It includes credit cards, debit cards, Mercado Pago account payments, cash payments and ATM payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/nuvemshop/landing.es.md#2025-04-18_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n\"available_payments: credit, debit, mercadopago, efectivo, atm\"\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with MercadoPago JavaScript\nDESCRIPTION: This snippet demonstrates how to create a preference object with MercadoPago using JavaScript. It sets the 'purpose' to 'wallet_purchase', allowing only registered payments. The code utilizes the MercadoPago JavaScript SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-startup.es.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Crear un objeto de preferencia\nlet preference = {\n  // el \"purpose\": \"wallet_purchase\" solo permite pagos registrados\n  // para permitir pagos de invitados, puedes omitir esta propiedad\n  \"purpose\": \"wallet_purchase\",\n  \"items\": [\n    {\n      \"id\": \"item-ID-1234\",\n      \"title\": \"Mi producto\",\n      \"quantity\": 1,\n      \"unit_price\": 75.76\n    }\n  ]\n};\n \nmercadopago.preferences.create(preference)\n  .then(function (response) {\n    // Este valor es el ID de preferencia que se enviará a Brick al iniciar\n    const preferenceId = response.body.id;\n  }).catch(function (error) {\n    console.log(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Statement by ID for Marketplace Sellers Sales Reports using cURL\nDESCRIPTION: This cURL command retrieves a specific statement by its ID for marketplace sellers sales reports. It requires an authorization token and content-type in the request headers, and the statement_id as a path parameter.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/queries-and-validations.en.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request GET 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/statements/:statement_id' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{TOKEN}}'\n```\n\n----------------------------------------\n\nTITLE: Setting Access Token for Mercado Pago using cURL\nDESCRIPTION: This cURL command sends a GET request to obtain the available payment methods, using the access token for authentication.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.en.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n-H 'accept: application/json' \\\n-H 'content-type: application/json' \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n'https://api.mercadopago.com/v1/payment_methods' \\\n\n```\n\n----------------------------------------\n\nTITLE: Redirect URI Example\nDESCRIPTION: This snippet shows an example of a redirect URI with the authorization code included as a parameter.  The `AUTHORIZATION_CODE` is a temporary code received after the user authorizes the application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/configuration.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\n\"http://<REDIRECT_URI>?code=AUTHORIZATION_CODE\"\n```\n\n----------------------------------------\n\nTITLE: Handling Scanner Response in Point Smart SDK (Kotlin)\nDESCRIPTION: This snippet demonstrates how to handle the scanner response in the onActivityResult method using the handleScannerResponse function. It processes the result, validates the response, and invokes appropriate callbacks based on success or error outcomes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/camscanner-legacy.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n   super.onActivityResult(requestCode, resultCode, data)\n\n   val cameraScanner = MPManager.cameraScanner\n\n   cameraScanner.handleScannerResponse(this, resultCode, data) { response ->\n       response.doIfSuccess { result ->\n           // Gerenciar resposta bem-sucedida\n           val status = result.status\n           val message = result.message\n           // ... Fazer algo com a resposta\n       }.doIfError { error ->\n           // Gerenciar o erro na resposta\n           val errorMessage = error.message\n           // ... Fazer algo com o erro\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Invoice Description in MercadoPago Checkout Preferences (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to set the statement_descriptor parameter in a MercadoPago checkout preference. The statement_descriptor defines the business name that will appear on the buyer's invoice, helping with identification and dispute prevention.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/invoice-description.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"statement_descriptor\": \"MYBUSINESS\"\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Notification URL\nDESCRIPTION: Examples of creating a payment with notification_url configuration across different programming languages. The code shows how to set up payment details including transaction amount, token, description, and the notification URL where webhooks will be received.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/ipn.en.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n   require_once 'vendor/autoload.php';\n\n   MercadoPago\\SDK::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n   $payment = new MercadoPago\\Payment();\n   $payment->transaction_amount = (float)$_POST['transactionAmount'];\n   $payment->token = $_POST['token'];\n   $payment->description = $_POST['description'];\n   $payment->installments = (int)$_POST['installments'];\n   $payment->payment_method_id = $_POST['paymentMethodId'];\n   $payment->issuer_id = (int)$_POST['issuer'];\n   $payment->notification_url = `http://requestbin.fullcontact.com/1ogudgk1`;\n   ...\n   $response = array(\n       'status' => $payment->status,\n       'status_detail' => $payment->status_detail,\n       'id' => $payment->id\n   );\n   echo json_encode($response);\n\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nvar mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nvar payment_data = {\n transaction_amount: Number(req.body.transactionAmount),\n token: req.body.token,\n description: req.body.description,\n installments: Number(req.body.installments),\n payment_method_id: req.body.paymentMethodId,\n issuer_id: req.body.issuer,\n notification_url: \"http://requestbin.fullcontact.com/1ogudgk1\",\n payer: {\n   email: req.body.email,\n   identification: {\n     type: req.body.docType,\n     number: req.body.docNumber\n   }\n }\n};\n\nmercadopago.payment.save(payment_data)\n .then(function(response) {\n   res.status(response.status).json({\n     status: response.body.status,\n     status_detail: response.body.status_detail,\n     id: response.body.id\n    });\n })\n .catch(function(error) {\n   res.status(response.status).send(error);\n });\n```\n\n----------------------------------------\n\nTITLE: Configuring Client ID Metadata in AndroidManifest.xml\nDESCRIPTION: This XML snippet demonstrates how to add the CLIENT_ID metadata to the AndroidManifest.xml file. It's crucial for identifying transactions and must use the exact name 'com.mercadolibre.android.sdk.CLIENT_ID'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/first-steps.en.md#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<application\n    ...>\n\n   <meta-data\n        android:name=\"com.mercadolibre.android.sdk.CLIENT_ID\"\n        android:value=\"123456789L\" />\n\n    <!-- Other application settings -->\n</application>\n```\n\n----------------------------------------\n\nTITLE: Add Payment Form (MLA, MLU, MPE, MCO, MLB, MLC)\nDESCRIPTION: This HTML snippet provides the structure for a payment form that integrates with MercadoPago.js. It includes fields for card number, expiration date, security code, cardholder name, issuer, installments, identification type, identification number, and cardholder email. CSS styling is included for basic layout and appearance.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n  <style>\n    #form-checkout {\n      display: flex;\n      flex-direction: column;\n      max-width: 600px;\n    }\n\n    .container {\n      height: 18px;\n      display: inline-block;\n      border: 1px solid rgb(118, 118, 118);\n      border-radius: 2px;\n      padding: 1px 2px;\n    }\n  </style>\n  <form id=\"form-checkout\">\n    <div id=\"form-checkout__cardNumber\" class=\"container\"></div>\n    <div id=\"form-checkout__expirationDate\" class=\"container\"></div>\n    <div id=\"form-checkout__securityCode\" class=\"container\"></div>\n    <input type=\"text\" id=\"form-checkout__cardholderName\" />\n    <select id=\"form-checkout__issuer\"></select>\n    <select id=\"form-checkout__installments\"></select>\n    <select id=\"form-checkout__identificationType\"></select>\n    <input type=\"text\" id=\"form-checkout__identificationNumber\" />\n    <input type=\"email\" id=\"form-checkout__cardholderEmail\" />\n\n    <button type=\"submit\" id=\"form-checkout__submit\">Pagar</button>\n    <progress value=\"0\" class=\"progress-bar\">Carregando...</progress>\n  </form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirection URLs in MercadoPago Preference with Ruby\nDESCRIPTION: This Ruby snippet shows how to add back URLs and auto-return settings to a MercadoPago preference. It configures URLs for different payment outcomes (success, failure, pending) and enables automatic redirection for approved payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\n# ...\npreference_data = {\n  # ...\n  back_urls = {\n    success: 'https://www.tu-sitio/success',\n    failure: 'https://www.tu-sitio/failure',\n    pending: 'https://www.tu-sitio/pendings'\n  },\n  auto_return: 'approved'\n  # ...\n}\n# ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Methods with .NET SDK\nDESCRIPTION: Configures Mercado Pago access token and retrieves a list of available payment methods using the PaymentMethodClient\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/payment-methods.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: dotnet\nCODE:\n```\nusing MercadoPago.Client.PaymentMethod;\nusing MercadoPago.Config;\nusing MercadoPago.Resource;\nusing MercadoPago.Resource.PaymentMethod;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar client = new PaymentMethodClient();\nResourcesList<PaymentMethod> paymentMethods = await client.ListAsync();\n```\n\n----------------------------------------\n\nTITLE: Starting Bluetooth Device Discovery in Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to initiate Bluetooth device discovery using the `startDiscovery` function of the `BluetoothDiscoverDevices` class. It handles different discovery states, such as start, device found, device change, and end, within the callback, and also manages potential errors.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/manage-connections.es.md#2025-04-18_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval bluetoothDiscover = MPManager.bluetooth.discover\n\nbluetoothDiscover.startDiscovery { response ->\n   response\n       .doIfSuccess { discoveryState ->\n           when (discoveryState.type) {\n               BluetoothDiscoveryState.Type.STARTED -> {\n                   // Manejar el inicio del descubrimiento\n               }\n               BluetoothDiscoveryState.Type.DEVICE_FOUND -> discoveryState.device?.let { device ->\n                   // Manejar el descubrimiento de un nuevo dispositivo\n               }\n               BluetoothDiscoveryState.Type.DEVICE_CHANGE -> discoveryState.device?.let { device ->\n                   // Manejar cambios en un dispositivo descubierto\n               }\n               BluetoothDiscoveryState.Type.ENDED -> {\n                   // Manejar el fin del descubrimiento\n               }\n           }\n       }\n       .doIfError { error ->\n           // Manejar el caso de error si es necesario\n       }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an Order with Mercado Pago QR Code API in curl\nDESCRIPTION: In scenarios where the order must be deleted before generating a new QR, this snippet shows how to send a DELETE request to the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/interoperable-accepting-flow-test.en.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X DELETE \\\n  'https://api.mercadopago.com/mpmobile/beta/instore/qr/{point_of_sale_id}?access_token={access_token_seller}'\n```\n\n----------------------------------------\n\nTITLE: JSON Notification Example - Mercado Pago\nDESCRIPTION: This JSON snippet represents a typical Webhook notification for an order event as sent by Mercado Pago. It is used to show the structure of a notification payload including action, type, user ID, application ID, data, and transactions information. Understanding this format is crucial for handling real notifications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/notifications.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"processed\",\n  \"type\": \"order\",\n  \"user_id\": \"123456\",\n  \"application_id\": \"789012\",\n  \"live_mode\": true,\n  \"api_version\": \"v1\",\n  \"date_created\": \"2024-01-01T00:00:00Z\",\n  \"data\": {\n    \"id\": \"01J35M8KHVFY0GQGDZJ94QXKMJ\",\n    \"type\": \"online\",\n    \"external_reference\": \"ext_ref_1234\",\n    \"status\": \"processed\",\n    \"version\": 1,\n    \"transactions\": {\n      \"payments\": [\n        {\n          \"id\": \"pay_01J3E4R55CTGYCEXCKSQB6RKDE\",\n          \"status\": \"processed\",\n          \"payment_method\": {\n            \"id\": \"visa\",\n            \"type\": \"credit_card\",\n            \"installments\": 1\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Operating Mode to PDV with PATCH Request\nDESCRIPTION: This snippet demonstrates how to change the operating mode of a Mercado Pago Point device to PDV (Point of Sale) using a PATCH request to the `/point/integration-api/devices/{device-id}` endpoint. It requires the `device-id` of the device to be configured and a valid `Authorization` token. The `Content-Type` header must be set to `application/json`, and the request body contains the desired operating mode, which is \"PDV\".\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/configure-devices-pdv.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PATCH \\\n      'https://api.mercadopago.com/point/integration-api/devices/{device-id}' \\\n       --h 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n       -H 'Content-Type: application/json' \\\n      -d '{\n  \"operating_mode\": \"PDV\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Example Response for MercadoPago Payment Cancellation\nDESCRIPTION: This JSON snippet shows the expected response structure after canceling a payment in MercadoPago. The key fields include status which becomes 'cancelled', status_detail showing the cancellation was made by the collector, and captured set to false.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/cancel-reserve.es.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"status\": \"cancelled\",\n  \"status_detail\": \"by_collector\",\n  ...\n  \"captured\": false,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Report Frequency Configuration in JSON\nDESCRIPTION: JSON configuration example for defining the frequency of automated report generation. This includes type (monthly/weekly/daily), hour of generation, and frequency value.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.es.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"hour\": 0, \"type\": \"monthly\", \"value\": 1 }\n```\n\n----------------------------------------\n\nTITLE: Installing Swift Project Dependencies\nDESCRIPTION: Installs project dependencies specified in the Podfile using CocoaPods. Ensures you open the generated Xcode workspace for building.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ios.es.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pod install\n\n$ open <YourProjectName>.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum and Maximum Installments in React\nDESCRIPTION: This snippet creates a customization object in React that defines properties for minimum and maximum installments in payment methods. The properties 'minInstallments' and 'maxInstallments' should be defined with numerical values to effectively restrict installment options for users.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/max-and-min-installments.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n  paymentMethods: {\n   minInstallments: number,\n   maxInstallments: number,\n },\n};\n```\n\n----------------------------------------\n\nTITLE: Printing Bitmap Images with Point Smart Printer\nDESCRIPTION: Implementation of bitmap image printing using the BitmapPrinter class accessed through MPManager. The function handles printing bitmap images and provides success/error callbacks.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/print-on-device.en.md#2025-04-18_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval bitmapPrinter = MPManager.bitmapPrinter\n\nval imageToPrint: Bitmap = bitmap // Get the bitmap image that will be printed\n\nbitmapPrinter.print(imageToPrint) { response ->\n   response.doIfSuccess { printResult ->\n       // Handle success\n   }.doIfError { error ->\n       // Handle error in the printing operation\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal BitmapPrinter bitmapPrinter = MPManager.INSTANCE.getBitmapPrinter();\n\nfinal Bitmap imageToPrint = bitmap // Get the bitmap image that will be printed\n\nfinal Function1<MPResponse<String>, Unit> callback = (final MPResponse<String> response) -> {\n if (response.getStatus() == ResponseStatus.SUCCESS) {\n   // Handle success\n } else {\n   // Handle error in the printing operation\n }\n return Unit.INSTANCE;\n};\n\nbitmapPrinter.print(imageToPrint, callback);\n```\n\n----------------------------------------\n\nTITLE: Setting Back URLs for Redirection\nDESCRIPTION: This C# code snippet shows how to set back URLs for redirection after a Mercado Pago payment. It creates a `PreferenceRequest` object and sets its `BackUrls` property with a `PreferenceBackUrlsRequest` object containing the success, failure, and pending URLs.  The `AutoReturn` property is also set to \"approved\".\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.pt.md#2025-04-18_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nvar request = new PreferenceRequest\n{\n    // ...\n    BackUrls = new PreferenceBackUrlsRequest\n    {\n        Success = \"https://www.tu-sitio/success\",\n        Failure = \"http://www.tu-sitio/failure\",\n        Pending = \"http://www.tu-sitio/pendings\",\n    },\n    AutoReturn = \"approved\",\n};\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Mercado Pago Security Script in HTML\nDESCRIPTION: HTML code snippet to add Mercado Pago's security script to a website, with configurable view parameter.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"home\"></script>\n```\n\n----------------------------------------\n\nTITLE: Get Payment Information using cURL\nDESCRIPTION: This cURL command retrieves payment information for a specific payment ID. It requires replacing `ADVANCED_PAYMENT_ID` with the actual payment ID and `YOUR_ACCESS_TOKEN` with a valid access token. The command sends a GET request to the specified endpoint with the authorization header.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/get-payment-information.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n    'https://api.mercadopago.com/v1/advanced_payments/ADVANCED_PAYMENT_ID' \\\n      -H 'Authorization: Bearer YOUR_ACCESS_TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Creating SFTP Notification Method for Reports\nDESCRIPTION: This curl request sets up SFTP server configuration for report delivery. It specifies server details including IP, port, credentials, and target directory where reports will be uploaded.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.en.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/reports/notifiers?type=ftp' \\\n--header 'Authorization: Bearer {{TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"type\": \"ftp\",\n    \"data\": {\n        \"ip\": \"test.files.com\",\n        \"port\": 22,\n        \"password\": \"test\",\n        \"protocol\": \"SFTP\",\n        \"username\": \"test@mercadolibre.com\",\n        \"remote_dir\": \"/\"\n    },\n    \"description\": \"test notifier sftp\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment Form with Email in Javascript for Colombia\nDESCRIPTION: Configuration to pre-populate the email field for various payment methods in Colombia. This allows you to initialize the Brick with the payer's email address.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/initialize-data-on-the-bricks.en.md#2025-04-18_snippet_12\n\nLANGUAGE: Javascript\nCODE:\n```\nsettings = {\n  ...,\n  initialization: {\n    ...,\n    payer: {\n      ...,\n      email: '<PAYER_EMAIL>',\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Criando Pagamento com Efecty usando cURL\nDESCRIPTION: Exemplo de requisição cURL para criar um pagamento via Efecty através da API do Mercado Pago. Inclui cabeçalhos de autorização e idempotência, e corpo da requisição no formato JSON.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_45\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n--header 'X-Idempotency-Key: <SOME_UNIQUE_VALUE>' \\\n--data-raw '{\n  \"transaction_amount\": 10000,\n  \"description\": \"Titulo del producto\",\n  \"payment_method_id\": \"efecty\",\n  \"payer\": { \"email\": \"test_user_12345@testuser.com\" }\n}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Methods using Python SDK\nDESCRIPTION: This Python snippet initializes the Mercado Pago SDK with an access token and retrieves a list of payment methods.  It creates an SDK instance using `mercadopago.SDK()` and calls `sdk.payment_methods().list_all()` to fetch the payment methods.  The payment methods are extracted from the `[\"response\"]` key of the response dictionary.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/consult-payment-methods.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n \npayment_methods_response = sdk.payment_methods().list_all()\npayment_methods = payment_methods_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Brick texts including Action and Complement in JavaScript\nDESCRIPTION: This snippet demonstrates how to customize the texts for the action, action complement, and value proposition of the Wallet Brick using JavaScript. The `customization.texts` object allows you to modify these strings.  Ensure the `actionComplement` corresponds to a valid option for the locale.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/change-texts.en.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n         texts: {\n             action: 'pay',\n             actionComplement: 'amount',\n             valueProp: 'payment_methods_logos',\n         },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Camera Scanner for QR and Barcode in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the MPManager.cameraScanner to launch a camera scanner for QR codes and barcodes in Kotlin. It shows how to handle successful scans and errors using callbacks.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/camscanner-callback.es.md#2025-04-18_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval cameraScanner = MPManager.cameraScanner\n/**\n* launch camera for scanner code QR\n**/\ncameraScanner.launchScanner(ScanType.CAMERA_SCANNER_QR) { response ->\n   response\n       .doIfSuccess { result -> // Manejo del resultado success del scanner result.message } \n\n       .doIfError { error -> // Manejo del error que resulte del scanner error.message.orEmpty() }\n\n}\n\n/**\n* launch camera for scanner Bar code\n**/\n\ncameraScanner.launchScanner(ScanType.CAMERA_SCANNER_BARCODE) { response ->\n   response\n       .doIfSuccess { result -> // Manejo del resultado success del scanner result.message } \n\n       .doIfError { error -> // Manejo del error que resulte del scanner error.message.orEmpty() }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mercado Pago JS SDK via NPM\nDESCRIPTION: Installs the Mercado Pago JavaScript SDK package through NPM for use in JavaScript applications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/mp-js-v2.es.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n```\n\n----------------------------------------\n\nTITLE: Configurando Data de Vencimento em Python\nDESCRIPTION: Código Python para definir a data de vencimento de um pagamento em dinheiro usando o formato ISO 8601. A data deve estar entre 1 e 30 dias a partir da emissão.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_52\n\nLANGUAGE: python\nCODE:\n```\n===\nA data usa o formato ISO 8601 format: yyyy-MM-dd'T'HH:mm:ssz\n===\n\n\"date_of_expiration\": \"2020-05-30T23:59:59.000-04:00\"\n```\n\n----------------------------------------\n\nTITLE: Payment Methods Table - Brazil (MLB)\nDESCRIPTION: Markdown table listing available payment methods for Brazil, including Cards, 2 Cards, Pix, Offline methods, and Pix installments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/adobe-commerce/checkout-api.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Payment Method | Description |\n|---|---|\n| Cards | Allows integration with credit and debit cards |\n| 2 Cards | Allows integration with 2 cards, whether they are credit or debit cards. |\n| Pix | Bank transfer available 24 hours a day. The Pix payment option will only be displayed if a Pix Key is registered in Mercado Pago. If you haven't created one yet, [see the step-by-step](https://www.youtube.com/watch?v=60tApKYVnkA). |\n| Offline methods | Payments via boleto bancário and lottery house. |\n| Parcelamento via Pix em até 12x | Allows the customer the option to finance a purchase without a card, while the seller receives the total amount of the money thanks to this Mercado Pago administrated credit line. |\n```\n\n----------------------------------------\n\nTITLE: Fetching and Listing Banks - JavaScript\nDESCRIPTION: This JavaScript function fetches the list of available banks for PSE and populates a select element with the options returned from the API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-migrate-pse.en.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction setPse() {\n    fetch('/payment_methods')\n        .then(async function(response) {\n            const paymentMethods = await response.json();\n            const pse = paymentMethods.filter((method) => method.id === 'pse')[0];\n            const banksList = pse.financial_institutions;\n            const banksListElement = document.getElementById('banksList');\n            const selectElement = document.createElement('select');\n            selectElement.name = 'financialInstitution';\n\n            banksList.forEach(bank => {\n                const option = document.createElement('option');\n                option.value = bank.id;\n                option.textContent = bank.description;\n                selectElement.appendChild(option);\n            });\n\n            banksListElement.appendChild(selectElement);\n\n        }).catch(function(reason) {\n            console.error('Failed to get payment methods', reason);\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Proper Brick Container Rendering Example (Javascript)\nDESCRIPTION: Demonstrates the correct approach to render a Brick by ensuring the container ID matches exactly in both the DOM and the create function. This example shows how to avoid the \"Container Not Found\" error with Payment Brick.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/possible-errors.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: Javascript\nCODE:\n```\nconst renderPaymentBrick = async (bricksBuilder) => {\n const settings = { ... };\n window.paymentBrickController = await bricksBuilder.create(\n   \"payment\",\n   \"paymentBrick_container\",\n   settings\n );\n};\n\nawait renderPaymentBrick(bricksBuilder);\n\n...\n\n<div id=\"paymentBrick_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Respuesta JSON para consulta de pago de cuentas en RDCPass\nDESCRIPTION: Ejemplo de respuesta JSON para una consulta de pago de cuentas. Incluye el estado de la respuesta, código de autorización, y una lista de cuentas que se pueden pagar con detalles como rubro, nombre de la compañía y datos de captura requeridos.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/annex-response-examples.es.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \n \"estatus\":\"OK\", \n \"codaut\":\"00112233445566778899aabbccddeeff\",  \"id_tx\":\"\", \n \"saldo\":-1, \n \"datos\":[ \n { \n \"rubro\":\"HIPOTECARIOS\", \n \"meta_rubro\":\"SERVICIOS FINANCIEROS\",  \"rubro_id\":12, \n \"descripcion\":\"\", \n \"nombre\":\"Compania 1 - PLAN Q\", \n \"company\":\"COMPANIA1\", \n \"datos_captura\":\"0=NUMERO DE RUT=2\",  \"id\":6151, \n \"id_tarjeta\":40 \n}, \n { \n \"rubro\":\"HIPOTECARIOS\", \n \"meta_rubro\":\"SERVICIOS FINANCIEROS\",  \"rubro_id\":12, \n \"descripcion\":\"\", \n \"nombre\":\"Leasing en Compania 12\",  \"company\":\"COMPANIA12\", \n \"datos_captura\":\"0=NUMERO DE RUT=2\",  \"id\":6152, \n \"id_tarjeta\":40 \n }, \n... \n ], \n \"mensaje\":\"Carga de Cuentas Recaudaciones  Exitosa\" \n} \n```\n\n----------------------------------------\n\nTITLE: Installing Expo Web Browser with Yarn\nDESCRIPTION: Command to install the expo-web-browser dependency using Yarn package manager\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-expo-go.es.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add expo-web-browser\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Brick Appearance (MLB, MLC, MLM, MPE, MCO, MLU)\nDESCRIPTION: This snippet demonstrates how to customize the appearance of the Wallet Brick using the `customization` property. It includes options to set the theme, value proposition color, border radius, vertical padding, and horizontal padding. This configuration applies to MLB, MLC, MLM, MPE, MCO, and MLU regions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/change-appearance.es.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n        theme:'dark',\n        customStyle: {\n            valueProp: 'practicality',\n            valuePropColor: 'black',\n            borderRadius: '10px',\n            verticalPadding: '10px',\n            horizontalPadding: '10px',\n        }\n    }\n}\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n    theme:'dark',\n    customStyle: {\n        valueProp: 'practicality',\n        valuePropColor: 'black',\n        borderRadius: '10px',\n        verticalPadding: '10px',\n        horizontalPadding: '10px',\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with Reserved Values in PHP\nDESCRIPTION: Creates a payment with capture=false to authorize and reserve the value without capturing it immediately. Uses the Mercado Pago PHP SDK to create a payment with a specified amount, token, and payment details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/make-value-reserve.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => 100.0,\n    \"token\" => \"123456\",\n    \"description\" => \"My product\",\n    \"installments\" => 1,\n    \"payment_method_id\" => \"visa\",\n    \"payer\" => [\n      \"email\" => \"my.user@example.com\",\n    ],\n    \"capture\" => false\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Intent with Mercado Pago Point API\nDESCRIPTION: This snippet demonstrates how to create a payment intent using the Mercado Pago Point API. It requires production credentials and a configured Point device. The request should include the device ID, an external reference for tracking, and a minimum amount.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/test-payments-processing.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n  https://api.mercadopago.com/point/integration-api/devices/{deviceId}/payment-intents \\\n  -H \"Authorization: Bearer YOUR_ACCESS_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"amount\": 100, \"description\": \"Test Payment\", \"external_reference\": \"TEST_PAYMENT_001\"}\n```\n\n----------------------------------------\n\nTITLE: Querying Chargeback by ID with cURL\nDESCRIPTION: API request to retrieve chargeback information using a specific chargeback ID. The endpoint returns detailed information about the chargeback status, amount, and documentation requirements.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/chargebacks-management/manage-chargeback.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --globoff 'https://api.mercadopago.com/v1/chargebacks/{id}' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{access_token}}'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"234000062890459000\",\n    \"payments\": [\n        86439942806\n    ],\n    \"currency\": \"ARS\",\n    \"amount\": 1000.50,\n    \"reason\": \"general\",\n    \"coverage_applied\": null,\n    \"coverage_elegible\": true,\n    \"documentation_required\": false,\n    \"documentation_status\": \"not_supplied\",\n    \"documentation\": [],\n    \"date_documentation_deadline\": null,\n    \"date_created\": null,\n    \"date_last_updated\": \"2024-10-17T12:48:24.000-04:00\",\n    \"live_mode\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment Flow with PaymentFlow in Java\nDESCRIPTION: This code snippet demonstrates how to initialize the payment flow using the PaymentFlow class in Java. It includes creating metadata for success and error cases, setting up the amount and description, building success and error URIs using buildCallbackUri, constructing a PaymentFlowData object, and launching the payment flow activity with a callback function to handle the response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/payment-flow-legacy-support.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal PaymentFlow paymentFlow = MPManager.INSTANCE.getPaymentFlow();\n\nfinal HashMap<String, String> successMetadata = new HashMap<>();\nsuccessMetadata.put(\"success\", \"testSuccess\");\n\nfinal HashMap<String, String> errorMetadata = new HashMap<>();\nsuccessMetadata.put(\"message\", \"testError\");\n\nfinal String amount = \"2.0\";\nfinal String description = \"Payment description\";\nfinal Uri intentSuccess = paymentFlow.buildCallbackUri(\n   \"mercadopago://smart_integrations/payment_result\",\n   \"success\",\n   successMetadata,\n   \"demo.app\"\n);\nfinal Uri intentError = paymentFlow.buildCallbackUri(\n   \"mercadopago://smart_integrations/payment_result\",\n   \"error\",\n   errorMetadata,\n   \"demo.app\"\n);\n\nfinal PaymentFlowData paymentFlowData = new PaymentFlowData(\n   amount,\n   description,\n   intentSuccess,\n   intentError,\n   PaymentMethod.CREDIT_CARD.name(),\n   6\n);\n\nfinal Function1<MPResponse<String>, Unit> callback = (final MPResponse<String> response) -> {\n if (response.getStatus() == ResponseStatus.SUCCESS) {\n   // Gerenciamento bem-sucedido usando uma mensagem\n } else {\n   // Gerenciamento do erro\n }\n return Unit.INSTANCE;\n};\n\npaymentFlow.launchPaymentFlowActivity(paymentFlowData, context, callback);\n```\n\n----------------------------------------\n\nTITLE: Updated Payment Processing with MercadoPago in Python\nDESCRIPTION: This Python snippet outlines how to utilize inputs from request parameters to create a payment. It captures transaction data dynamically and integrates it with the MercadoPago SDK for seamless payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.en.md#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\npayment_data = {\n   \"transaction_amount\": float(request.POST.get(\"transaction_amount\")),\n   \"token\": request.POST.get(\"token\"),\n   \"installments\": int(request.POST.get(\"installments\")),\n   \"payment_method_id\": request.POST.get(\"payment_method_id\"),\n   \"payer\": {\n       \"email\": request.POST[\"payer\"].get(\"email\"),\n       \"identification\": {\n           \"type\": request.POST[\"payer\"][\"identification\"].get(\"type\"),\n           \"number\": request.POST[\"payer\"][\"identification\"].get(\"number\")\n       }\n   }\n}\n\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\nprint(payment)\n\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Token - cURL Implementation\nDESCRIPTION: Direct API call implementation using cURL to refresh Mercado Pago access tokens. Sends a POST request to the oauth/token endpoint with client credentials and refresh token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/renewal.en.md#2025-04-18_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n'https://api.mercadopago.com/oauth/token'\\\n-H 'Content-Type: application/json' \\\n-d '{\n \"client_id\": \"client_id\",\n \"client_secret\": \"client_secret\",\n \"grant_type\": \"refresh-token\",\n \"refresh_token\": \"TG-XXXXXXXX-241983636\",\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementando el Código de Seguridad para Checkout en HTML\nDESCRIPTION: Código para implementar la generación del device ID en la página de Checkout. Este script permite la creación automática de una variable JavaScript global llamada MP_DEVICE_SESSION_ID que contiene el ID del dispositivo.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.es.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Payment Installment Ranges in JavaScript\nDESCRIPTION: Configuration object for setting minimum and maximum installment options in MercadoPago's Payment Brick. Uses the customization.paymentMethods property to define installment constraints.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/max-and-min-installments.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n        paymentMethods: {\n            minInstallments: number,\n            maxInstallments: number,\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Credit Card Payment with Mercado Pago API using cURL\nDESCRIPTION: This example shows how to make a POST request to Mercado Pago's payments API to process a credit card payment. The snippet includes all required headers and a comprehensive JSON payload with transaction amount, installments, payer information, product details, and shipping information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/credit-card-general.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'x-platform-id: {{PLATFORM_ID proporcionado por el equipo de Partners}}' \\\n--header 'Authorization: Bearer {{ACCESS_TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"transaction_amount\": 100,\n    \"installments\": 1,\n    \"statement_descriptor\": \"Tienda del vendedor\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": {{ID de su cuenta Mercado Pago referente a su plataforma}},\n    \"payment_method_id\": \"{{payment_method_id}}\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Identificador de la plataforma\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"description\": \"Descripción del producto del vendedor\",\n    \"payer\": {\n        \"first_name\": \"Nombre. Ejemplo: John\",\n        \"last_name\": \"Apellido. Ejemplo: Jones\",\n        \"email\": \"Ejemplo: test_user_1677281619@testuser.com\",\n        \"identification\": {\n            \"type\": \"Tipo de documento.\",\n            \"number\": \"Número. Ejemplo: 19119119100\"\n        },\n        \"address\": {\n            \"zip_code\": \"Código postal. Ejemplo: 06233-200\",\n            \"street_name\": \"Nombre de la calle. Ejemplo: Av. das Nações Unidas\",\n            \"street_number\": \"Número. Ejemplo: 3003\",\n            \"neighborhood\": \"Barrio. Ejemplo: Bonfim\",\n            \"city\": \"Ciudad. Ejemplo: Osasco\",\n            \"federal_unit\": \"UF. Ejemplo: SP\"\n        }\n    },\n    \"additional_info\": {\n        \"referral_url\": \"URL de referencia. Ejemplo: www.sellertest123.com\",\n        \"drop_shipping\": true,\n        \"delivery_promise\": \"2022-11-20\",\n        \"contrated_plan\": \"premium\",\n        \"items\": [\n            {\n                \"id\": \"1941\",\n                \"title\": \"Producto del vendedor\",\n                \"description\": \"Descripción del producto del vendedor\",\n                \"picture_url\": null,\n                \"category_id\": \"Categoria. Ejemplo: electronics\",\n                \"quantity\": 1,\n                \"unit_price\": 100.00\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nombre. Ejemplo: John\",\n            \"last_name\": \"Apellido. Ejemplo: Jones\",\n            \"is_prime_user\": \"1\",\n            \"is_first_purchase_online\": \"1\",\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"Código de área. Ejemplo: 11\",\n                \"number\": \"Número. Ejemplo: 987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"Código postal. Ejemplo: 06233-200\",\n                \"street_name\": \"Nombre de la calle. Ejemplo: Av. das Nações Unidas\",\n                \"street_number\": \"Número. Ejemplo: 3003\"\n            },\n            \"registration_date\": \"2013-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"0\",\n            \"pick_up_on_seller\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"Código postal. Ejemplo: 95630000\",\n                \"street_name\": \"Nombre de la calle. Ejemplo: São Luiz\",\n                \"street_number\": \"Número. Ejemplo: 15\",\n                \"floor\": \"Piso (si es un apartamento). Ejemplo: Segundo\",\n                \"apartment\": \"Número del apartamento (si es un apartamento). Ejemplo: 93\"\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment in PHP with MercadoPago SDK\nDESCRIPTION: This snippet demonstrates how to capture a partial amount from a reserved payment using the MercadoPago PHP SDK. It sets the access token, finds the payment by ID, updates the transaction amount, sets the capture flag to true, and updates the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.en.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nMercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n$payment = MercadoPago\\Payment::find_by_id($payment_id);\n$payment->transaction_amount = 75;\n$payment->capture = true;\n$payment->update();\n?>\n```\n\n----------------------------------------\n\nTITLE: Searching Payments with Mercado Pago SDK\nDESCRIPTION: This snippet shows how to search for payments made in the last twelve months using the Mercado Pago SDK. It initializes the MercadoPagoConfig with the access token and then uses the Payment class to search payments based on criteria like sort order and external reference. Replace placeholders with actual values.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/create-payments.es.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\n\nconst payment = new Payment(client);\n\npayment.search({ options: {\n\tcriteria: 'desc',\n      sort: 'date_created',\n      external_reference: 'ID_REF'\n} })\n.then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Bancário Payment with cURL\nDESCRIPTION: This cURL command demonstrates how to create a boleto bancário payment by sending a POST request to Mercado Pago's API. It includes headers for authorization, content type, and idempotency key, along with a JSON payload containing transaction details and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_13\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n--header 'X-Idempotency-Key: <SOME_UNIQUE_VALUE>' \\\n--header 'X-Product-Id: <SOME_UNIQUE_VALUE>' \\\n--data-raw '{\n   \"transaction_amount\": 100,\n   \"description\": \"Titulo do produto\",\n   \"payment_method_id\": \"bolbradesco\",\n   \"payer\": {\n       \"email\": \"test_user_12345@testuser.com\",\n       \"first_name\": \"Test\",\n       \"last_name\": \"User\",\n       \"identification\": {\n           \"type\": \"CPF\",\n           \"number\": \"01234567890\"\n       }\n       \"address\": {\n           \"zip_code\": \"88000000\",\n           \"street_name\": \"Nombre de calle\",\n           \"street_number\": \"123\",\n           \"neighborhood\": \"Barrio\",\n           \"city\": \"Ciudad\",\n           \"federal_unit\": \"UF\"\n       }\n   }\n}'\n```\n\n----------------------------------------\n\nTITLE: Validating Webhook Signature in Java\nDESCRIPTION: This code snippet demonstrates how to validate the signature of a Mercado Pago webhook notification using BCrypt in Java. It combines the transaction_id, encryption password, and generation_date to verify the authenticity of the notification.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/generate.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nBCrypt.checkpw(transaction_id + '-' + password_for_encryption + '-' + generation_date, payload_signature)\n```\n\n----------------------------------------\n\nTITLE: Including MercadoPago.js V1 in HTML\nDESCRIPTION: Code to include the MercadoPago.js V1 SDK in the HTML of your application. This adds the library to your page so you can use Mercado Pago functionality.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/mp-js-v1.es.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script src=\"https://secure.mlstatic.com/sdk/javascript/v1/mercadopago.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment Brick Controller\nDESCRIPTION: Creates a payment brick controller with specified settings for handling payment interactions\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/add-confirmation-step.en.md#2025-04-18_snippet_7\n\nLANGUAGE: Javascript\nCODE:\n```\nwindow.paymentBrickController = await bricksBuilder.create(\n   \"payment\",\n   \"paymentBrick_container\",\n   settings\n );\n```\n\n----------------------------------------\n\nTITLE: Implementing 120x600px Payment Method Banner\nDESCRIPTION: HTML code for embedding a 120x600 pixel Mercado Pago payment methods banner advertising 10 interest-free installments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/dez.en.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/PSJ/120x600_banner_psj_10x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"120\" height=\"600\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting Language via SDK in JavaScript\nDESCRIPTION: This snippet demonstrates how to set the language through the Mercado Pago SDK after initialization using JavaScript. It creates a new MercadoPago instance with English (US) as the specified language.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/select-language.en.md#2025-04-18_snippet_2\n\nLANGUAGE: Javascript\nCODE:\n```\nconst mp = new MercadoPago('YOUR_PUBLIC_KEY', {\n  locale: 'en-US',\n})\n```\n\n----------------------------------------\n\nTITLE: Example Response for Adding Gateway (JSON)\nDESCRIPTION: This JSON represents a sample response after successfully adding Mercado Pago as a gateway in Spreedly.  The `token` is a unique identifier for the gateway. The `characteristics` array shows the available actions for this gateway.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/spreedly/spreedly.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gateway\": {\n    \"token\": \"6DqX57I6fHgIuUkVN2HGszjDSu1\",\n    \"gateway_type\": \"test\",\n    \"description\": null,\n    \"payment_methods\": [\n      \"credit_card\",\n      \"sprel\",\n      \"third_party_token\",\n      \"bank_account\",\n      \"apple_pay\",\n      \"android_pay\"\n    ],\n    \"state\": \"retained\",\n    \"created_at\": \"2017-07-27T17:54:39Z\",\n    \"updated_at\": \"2017-07-27T17:54:39Z\",\n    \"name\": \"Spreedly Test\",\n    \"characteristics\": [\n      \"purchase\",\n      \"authorize\",\n      \"capture\",\n      \"credit\",\n      \"general_credit\",\n      \"void\",\n      \"verify\",\n      \"reference_purchase\",\n      \"purchase_via_preauthorization\",\n      \"offsite_purchase\",\n      \"offsite_authorize\",\n      \"3dsecure_purchase\",\n      \"3dsecure_authorize\",\n      \"store\",\n      \"remove\",\n      \"disburse\",\n      \"reference_authorization\"\n    ],\n    \"credentials\": [\n\n    ],\n    \"gateway_specific_fields\": [\n\n    ],\n    \"redacted\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Payment Intent Status with Curl\nDESCRIPTION: This curl command demonstrates how to make a GET request to check the status of a payment intent. It requires the rdcTransactionId and authentication credentials.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/api-query-payment-intent.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n'https://api-dev.redelcom.cl:20010/v2/pago?rdcTransactionId={rdcTransactionId}' \\\n--header 'X-Authentication: clientId;secret'\n```\n\n----------------------------------------\n\nTITLE: Creating PSE Payment with MercadoPago using cURL\nDESCRIPTION: This cURL command demonstrates how to create a PSE payment using MercadoPago API. It includes all necessary headers and a JSON payload with transaction details, payer information, and additional data required for PSE transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-migrate-pse.en.md#2025-04-18_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n curl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n-H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n-H 'Content-Type: application/json' \\\n--d '{\n    \"transaction_amount\": 5000,\n    \"description\": \"Product description\",\n    \"payment_method_id\": \"pse\",\n    \"payer\": {\n        \"email\": \"test_user_19549678@testuser.com\",\n        \"entity_type\": \"individual\",\n        \"identification\": {\n            \"type\": \"CC\",\n            \"number\": \"76262349\"\n        }, \n        \"address\": {\n          \"zip_code\": \"111\",\n          \"street_name\": \"siempre viva\",\n          \"street_number\": \"111\",\n          \"neighborhood\": \"sarasa\",\n          \"city\": \"salto\",\n          \"federal_unit\": \"1\"\n        },\n        \"phone\": {\n          \"area_code\": \"011\",\n          \"number\": \"2134242412\"\n        }\n    },\n    \"additional_info\": {\n        \"ip_address\": \"127.0.0.1\"\n    },\n    \"transaction_details\": {\n        \"financial_institution\": \"1009\"\n    },\n    \"callback_url\": \"http://www.your-site.com\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Card Issuer Information in Mercado Pago\nDESCRIPTION: This function identifies the card's issuing bank to prevent processing conflicts between different issuers. It checks if additional issuer information is needed and retrieves available issuers for the identified payment method and BIN.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function updateIssuer(paymentMethod, bin) {\n  const { additional_info_needed, issuer } = paymentMethod;\n  let issuerOptions = [issuer];\n\n  if (additional_info_needed.includes('issuer_id')) {\n    issuerOptions = await getIssuers(paymentMethod, bin);\n  }\n\n  createSelectOptions(issuerElement, issuerOptions);\n}\n\nasync function getIssuers(paymentMethod, bin) {\n  try {\n    const { id: paymentMethodId } = paymentMethod;\n    return await mp.getIssuers({ paymentMethodId, bin });\n  } catch (e) {\n    console.error('error getting issuers: ', e)\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Integration Identifiers in MercadoPago Python SDK\nDESCRIPTION: Illustrates how to set platform, integrator, and corporation IDs using the MercadoPago Python SDK. Replace the placeholder values with actual identification codes and use the configured request options when initializing the SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integration-identification.es.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nfrom mercadopago.config import RequestOptions\n\nrequest_options = RequestOptions(\n    corporation_id=\"CORPORATION_ID\",\n    integrator_id=\"INTEGRATOR_ID\",\n    platform_id=\"PLATFORM_ID\"\n)\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\", request_options=request_options)\n```\n\n----------------------------------------\n\nTITLE: Financial Report Field Specifications\nDESCRIPTION: Table structure defining field names, descriptions, and data types for financial reporting API. Includes transaction identifiers, payment details, store information, and tax-related fields.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/glossary.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name on the report column | What it means | Data type <br> (maximum longitude) |\n|---|---|---|\n| Reference code (`EXTERNAL_REFERENCE`) |  ID that helps identify the origin of the transaction... | String <br> (255) |\n```\n\n----------------------------------------\n\nTITLE: Payment Configuration for Brazil YAML\nDESCRIPTION: YAML configuration for payment options available in Brazil, including Checkout Pro and Checkout API integration methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/adobe-commerce/landing.en.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbullet_section_with_media:\n - title: Payment\n - type: normal\n - message: With the Mercado Pago module you can configure the payment using:\n - benefit_title: Checkout Pro\n - benefit_message: Payment is made on the Mercado Pago page (inside or outside your store) with cards (debit or credit), cash (boleto bancário) and Pix.\n - benefit_title: Checkout API\n - benefit_message: Payment is made out without leaving your virtual store with cards (debit or credit), offline payments (boleto bancário and ATM) and Pix.\n - image: /adobe-commerce/magento2-payment.png\n```\n\n----------------------------------------\n\nTITLE: Getting Store by External ID - REST API - HTTP\nDESCRIPTION: This snippet explains how to retrieve store information using an external ID, provided the user ID associated with the store and the OAuth access token. This allows access to the store's data even without using the store ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-delivery/store-data.en.md#2025-04-18_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /proximity-integration/users/{seller_id}/stores/{external_id}\nAuthorization: Bearer {access_token}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Payment in PHP with Mercado Pago SDK\nDESCRIPTION: Implementation of payment creation in PHP using Mercado Pago SDK, setting transaction details, token, and payer information\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.es.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    require_once 'vendor\\/autoload.php';\n\n    MercadoPago\\SDK::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n    $payment = new MercadoPago\\Payment();\n    $payment->transaction_amount = (float)$_POST['transactionAmount'];\n    $payment->token = $_POST['token'];\n    $payment->description = $_POST['description'];\n    $payment->installments = (int)$_POST['installments'];\n    $payment->payment_method_id = $_POST['paymentMethodId'];\n    $payment->issuer_id = (int)$_POST['issuer'];\n\n    $payer = new MercadoPago\\Payer();\n    $payer->email = $_POST['email'];\n    $payer->identification = array(\n        \"type\" => $_POST['identificationType'],\n        \"number\" => $_POST['identificationNumber']\n    );\n    $payment->payer = $payer;\n\n    $payment->save();\n\n    $response = array(\n        'status' => $payment->status,\n        'status_detail' => $payment->status_detail,\n        'id' => $payment->id\n    );\n    echo json_encode($response);\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing Card Payment Brick with Identification in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to initialize the Card Payment Brick with a payer's identification details. When valid identification number and type are provided, the payer document field is automatically filled in.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/initialize-data-on-the-bricks.en.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n   initialization: {\n       amount: number,\n       payer: {\n           identification: {\n               type: 'string',\n               number: 'string',\n           },\n       },\n   },\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Subsequent Subscription Payment Request in JSON\nDESCRIPTION: This snippet shows how to structure the JSON request for subsequent payments in a subscription series. It includes updated parameters such as first_time_use set to false, current installment number, and retains the original payment reference ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/subscription-messaging.en.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"payer\": {...},\n    \"transaction_amount\": 20,\n    \"description\": \"...\",\n    \"token\": \"....\",\n    \"statement_descriptor\": \"PRUEBA\",\n    \"issuer_id\": ...,\n    \"payment_method_id\": \"...\",\n    \"amounts\": {...},\n    \"installments\": 1,\n    \"pos_id\": \"....\",\n    \"external_reference\": \"...\",\n    \"point_of_interaction\": {\n        \"type\": \"SUBSCRIPTIONS\",\n        \"transaction_data\": {\n            \"first_time_use\": false,\n            \"subscription_sequence\": {\n                \"number\": 3,\n                \"total\": 12\n            },\n            \"invoice_period\": {\n                \"period\": 1,\n                \"type\": \"monthly\"\n            },\n            \"payment_reference\": {\n                \"id\": \"20792195335\"\n            },\n            \"user_present\": true/false,\n            \"billing_date\": \"2024-03-16\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment Form with Callbacks - JavaScript\nDESCRIPTION: This snippet initializes a payment form using the Mercado Pago library, specifying various parameters such as the payment amount, and setting up the form structure with necessary input fields including card details and cardholder information. The script also defines callback functions for actions like form submission and handling potential errors during form mounting.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst cardForm = mp.cardForm({\n  amount: \"100.5\",\n  iframe: true,\n  form: {\n    id: \"form-checkout\",\n    cardNumber: {\n      id: \"form-checkout__cardNumber\",\n      placeholder: \"Número do cartão\",\n    },\n    expirationDate: {\n      id: \"form-checkout__expirationDate\",\n      placeholder: \"MM/YY\",\n    },\n    securityCode: {\n      id: \"form-checkout__securityCode\",\n      placeholder: \"Código de segurança\",\n    },\n    cardholderName: {\n      id: \"form-checkout__cardholderName\",\n      placeholder: \"Titular do cartão\",\n    },\n    issuer: {\n      id: \"form-checkout__issuer\",\n      placeholder: \"Banco emissor\",\n    },\n    installments: {\n      id: \"form-checkout__installments\",\n      placeholder: \"Parcelas\",\n    },        \n    identificationType: {\n      id: \"form-checkout__identificationType\",\n      placeholder: \"Tipo de documento\",\n    },\n    identificationNumber: {\n      id: \"form-checkout__identificationNumber\",\n      placeholder: \"Número do documento\",\n    },\n    cardholderEmail: {\n      id: \"form-checkout__cardholderEmail\",\n      placeholder: \"E-mail\",\n    },\n  },\n  callbacks: {\n    onFormMounted: error => {\n      if (error) return console.warn(\"Form Mounted handling error: \", error);\n      console.log(\"Form mounted\");\n    },\n    onSubmit: event => {\n      event.preventDefault();\n\n      const {\n        paymentMethodId: payment_method_id,\n        issuerId: issuer_id,\n        cardholderEmail: email,\n        amount,\n        token,\n        installments,\n        identificationNumber,\n        identificationType,\n      } = cardForm.getCardFormData();\n\n      fetch(\"/process_payment\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          token,\n          issuer_id,\n          payment_method_id,\n          transaction_amount: Number(amount),\n          installments: Number(installments),\n          description: \"Descrição do produto\",\n          payer: {\n            email,\n            identification: {\n              type: identificationType,\n              number: identificationNumber,\n            },\n          },\n        }),\n      });\n    },\n    onFetching: (resource) => {\n      console.log(\"Fetching resource: \", resource);\n\n      // Animate progress bar\n      const progressBar = document.querySelector('.progress-bar');\n      progressBar.removeAttribute('value');\n\n      return () => {\n        progressBar.setAttribute('value', '0');\n      };\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Visual Customization Properties - React JSX\nDESCRIPTION: This snippet is the React JSX equivalent for setting visual customization properties of the Wallet Brick, encapsulating properties like button background and border radius for better integration in a React context.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/change-appearance.en.md#2025-04-18_snippet_3\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n   buttonBackground: 'black',\n   borderRadius: '16px',\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Bricks with Next.js Index Component\nDESCRIPTION: Demonstrates how to integrate Mercado Pago Bricks with Next.js by using dynamic imports to handle client-side rendering in a server-side rendering framework.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/possible-errors.en.md#2025-04-18_snippet_2\n\nLANGUAGE: React\nCODE:\n```\n//index.tsx\n\nimport Head from \"next/head\";\nimport styles from \"../styles/Home.module.css\";\nimport dynamic from \"next/dynamic\";\n\nconst CheckoutMercadoPago = dynamic(() => import(\"./checkoutMercadoPago\"), {\n  ssr: false,\n});\n\nexport default function Home() {\n  return (\n    <>\n      <Head>\n        <title>Checkout Brick + NextJS</title>\n        <meta name=\"description\" content=\"Generated by create next app\" />\n      </Head>\n      <main className={styles.main}>\n        <CheckoutMercadoPago />\n      </main>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Brick Payment Settings - JavaScript\nDESCRIPTION: This snippet demonstrates how to configure initialization settings and customize visual options in Mercado Pago's Brick framework using JavaScript. It sets the payment ID and defines callback functions for handling ready and error states. The 'hideStatusDetails' option hides processing details from users. Dependencies include the Mercado Pago Brick SDK, and the snippet should be used in client-side applications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/status-screen-brick/hide-processing-details.en.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst settings = {\n initialization: {\n   paymentId: 100, // payment id generated by Mercado Pago\n },\n callbacks: {\n   onReady: () => {\n     // callback called when Brick is ready\n   },\n   onError: (error) => {\n     // callback called for all Brick error cases\n   },\n },\n customization: {\n   visual: {\n       hideStatusDetails: true\n   }\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Payment Methods with Ruby\nDESCRIPTION: Code to obtain a list of all available payment methods using the MercadoPago Ruby SDK. This implementation initializes the SDK with your access token and uses the payment_methods resource to fetch the data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.es.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\npayment_methods_response = sdk.payment_methods.get()\npayment_methods = payment_methods_response[:response]\n\n```\n\n----------------------------------------\n\nTITLE: Structure Creation Response\nDESCRIPTION: JSON response returned after successfully creating a report structure. It includes the structure ID and other configuration fields that were set.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.es.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": {{structure_id}},\n    \"version\": 0,\n    \"date_created\": null,\n    \"date_last_updated\": null,\n    \"name\": null,\n    \"file_format\": null,\n    \"columns\": null,\n    \"file_config\": null,\n    \"report_translation\": null,\n    \"include_withdraw\": null,\n    \"refund_detailed\": null,\n    \"show_fee_prevision\": null,\n    \"coupon_detailed\": null,\n    \"show_chargeback_cancel\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Intent Filter for RDCPass Payment Query\nDESCRIPTION: AndroidManifest.xml configuration to enable payment query functionality by adding necessary intent filters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-payment-query.es.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter> \n\t<action android:name=\"android.intent.action.SEND\" /> \n\t<action android:name=\"android.intent.action.ANSWER\" /> \n\t<category android:name=\"android.intent.category.DEFAULT\" /> \n\t<data android:mimeType=\"text/*\" /> \n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Adding Boleto Bancário Payment Form\nDESCRIPTION: HTML form template for collecting customer information needed for Boleto Bancário payments. The form includes fields for customer name, email, document type, and document number, along with hidden fields for transaction amount and description.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n  <form id=\"form-checkout\" action=\"/process_payment\" method=\"post\">\n    <div>\n      <div>\n        <label for=\"payerFirstName\">Name</label>\n        <input id=\"form-checkout__payerFirstName\" name=\"payerFirstName\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"payerLastName\">Last name</label>\n        <input id=\"form-checkout__payerLastName\" name=\"payerLastName\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"email\">E-mail</label>\n        <input id=\"form-checkout__email\" name=\"email\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"identificationType\">Type of document</label>\n        <select id=\"form-checkout__identificationType\" name=\"identificationType\" type=\"text\"></select>\n      </div>\n      <div>\n        <label for=\"identificationNumber\">Document number</label>\n        <input id=\"form-checkout__identificationNumber\" name=\"identificationNumber\" type=\"text\">\n      </div>\n    </div>\n\n    <div>\n      <div>\n        <input type=\"hidden\" name=\"transactionAmount\" id=\"transactionAmount\" value=\"100\">\n        <input type=\"hidden\" name=\"description\" id=\"description\" value=\"Nome do Produto\">\n        <br>\n        <button type=\"submit\">Pay</button>\n      </div>\n    </div>\n  </form>\n```\n\n----------------------------------------\n\nTITLE: 3DS Challenge Implementation Function\nDESCRIPTION: JavaScript function to create and display the 3DS Challenge iframe with form submission handling.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.en.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction doChallenge(payment) {\n  try {\n    const {\n      status,\n      status_detail,\n      three_ds_info: { creq, external_resource_url },\n    } = payment;\n    if (status === \"pending\" && status_detail === \"pending_challenge\") {\n      var iframe = document.createElement(\"iframe\");\n      iframe.name = \"myframe\";\n      iframe.id = \"myframe\";\n      document.body.appendChild(iframe);\n\n      var idocument = iframe.contentWindow.document;\n\n      var myform = idocument.createElement(\"form\");\n      myform.name = \"myform\";\n      myform.setAttribute(\"target\", \"myframe\");\n      myform.setAttribute(\"method\", \"post\");\n      myform.setAttribute(\"action\", external_resource_url);\n\n      var hiddenField = idocument.createElement(\"input\");\n      hiddenField.setAttribute(\"type\", \"hidden\");\n      hiddenField.setAttribute(\"name\", \"creq\");\n      hiddenField.setAttribute(\"value\", creq);\n      myform.appendChild(hiddenField);\n      iframe.appendChild(myform);\n\n      myform.submit();\n    }\n  } catch (error) {\n    console.log(error);\n    alert(\"Error doing challenge, try again later.\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Yape Payment with cURL\nDESCRIPTION: cURL implementation for creating a Yape payment by sending a request to the Mercado Pago API with token, transaction amount, and payer details\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.pt.md#2025-04-18_snippet_13\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Authorization: Bearer <ACCESS_TOKEN>' \\\n--header 'Content-Type: application/json' \\\n--header 'x-idempotency-key: <IDEMPOTENCY_KEY>' \\\n--data-raw '{\n   \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n   \"transaction_amount\": 5000,\n   \"description\": \"Título del producto\",\n   \"installments\": 1,\n   \"payment_method_id\": \"yape\",\n   \"payer\": {\n    \"email\": \"test_user_1295925766@testuser.com\"\n   }\n}'\n```\n\n----------------------------------------\n\nTITLE: Webhook Notification Example - JSON\nDESCRIPTION: Sample JSON structure of a payment notification webhook sent by Mercado Pago showing key fields like ID, type, and data\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.es.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n \"id\": 12345,\n \"live_mode\": true,\n \"type\": \"payment\",\n \"date_created\": \"2015-03-25T10:04:58.396-04:00\",\n \"user_id\": 44444,\n \"api_version\": \"v1\",\n \"action\": \"payment.created\",\n \"data\": {\n     \"id\": \"999999999\"\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Bricks Payment Component in JavaScript\nDESCRIPTION: This code demonstrates how to initialize the Bricks Payment component using the MercadoPago SDK. It includes configuration for amount, payer email, styling, and callback functions for handling submission and errors.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/cardform-clientside.es.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mp = new MercadoPago('YOUR_PUBLIC_KEY');\nconst bricksBuilder = mp.bricks();\nconst renderPaymentBrick = async (bricksBuilder) => {\n   const settings = {\n       initialization: {\n           amount: 100, //valor do processamento a ser realizado\n           payer: {\n           email: '<PAYER_EMAIL_HERE>',\n       },\n       },\n       style: {\n           theme: 'default' // | 'dark' | 'bootstrap' | 'flat'\n       },\n       callbacks: {\n           onReady: () => {\n           // callback chamado quando o Brick estiver pronto\n           },\n           onSubmit: ({paymentType, formData}) => {\n           // callback chamado o usuário clicar no botão de submissão dos dados\n           // ejemplo de envío de los datos recolectados por el Brick a su servidor\n           return new Promise((resolve, reject) => {\n               fetch(\"/processar-pago\", {\n                   method: \"POST\",\n                   headers: {\n                       \"Content-Type\": \"application/json\",\n                   },\n                   body: JSON.stringify(formData)\n               })\n               .then((response) => {\n                   // receber o resultado do pagamento\n                   resolve();\n               })\n               .catch((error) => {\n                   // lidar com a resposta de erro ao tentar criar o pagamento\n                   reject();\n               })\n               });\n           },\n           onError: (error) => {\n           // callback chamado para todos os casos de erro do Brick\n           },\n       },\n   };\n   window.cardPaymentBrickController = await bricksBuilder.create('payment', 'paymentBrick_container', settings);\n};\nrenderPaymentBrick(bricksBuilder);\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Settlement Report Generation with cURL\nDESCRIPTION: API request to disable the automatic generation of settlement reports. When this endpoint is called with a DELETE method, the 'scheduled' property is automatically set to 'false'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.en.md#2025-04-18_snippet_14\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X DELETE \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/schedule'\n```\n\n----------------------------------------\n\nTITLE: Downloading Marketplace Seller Sales Reports with cURL in Mercado Pago\nDESCRIPTION: This cURL request fetches a previously generated marketplace seller sales report. It requires a valid statement_id in the URL path and authorization token in the header. The format parameter specifies the desired download format (csv or json).\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/download-report.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request GET 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/statements/{{statement_id}}/download?format=csv' \\\n--header 'Authorization: Bearer {{TOKEN}}'\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Metadata in AndroidManifest.xml\nDESCRIPTION: This XML snippet shows how to enable the OAuth authorization protocol by adding the OAUTH_ENABLED metadata to the AndroidManifest.xml file. The exact name 'com.mercadolibre.android.sdk.OAUTH_ENABLED' must be used.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/first-steps.en.md#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<application\n    ...>\n\n    <meta-data\n        android:name=\"com.mercadolibre.android.sdk.OAUTH_ENABLED\"\n        android:value=\"true\" />\n\n    <!-- Other application settings  -->\n\n</application>\n```\n\n----------------------------------------\n\nTITLE: Creating Cash Payment with cURL in MercadoPago\nDESCRIPTION: cURL implementation for creating a payment request for OXXO cash payment method. Includes authorization bearer token, idempotency key for preventing duplicate payments, and basic payment data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_28\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n--header 'X-Idempotency-Key: <SOME_UNIQUE_VALUE>' \\\n--data-raw '{\n  \"transaction_amount\": 100,\n  \"description\": \"Titulo del producto\",\n  \"payment_method_id\": \"oxxo\",\n  \"payer\": { \"email\": \"test_user_12345@testuser.com\" }\n}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago Payment in .NET\nDESCRIPTION: Configures access token, creates a payment request with transaction amount, token, installments, and payer details, and submits the payment using the PaymentClient\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/create-payments.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = 100,\n    Token = \"ff8080814c11e237014c1ff593b57b4d\",\n    Installments = 1,\n    Payer = new PaymentPayerRequest\n    {\n        Type = \"customer\",\n        Email = \"test_payer_12345@testuser.com\",\n    },\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Processing SPEI Bank Transfer Payments with PHP\nDESCRIPTION: PHP implementation for processing SPEI bank transfers with Mercado Pago SDK. The code handles payment creation with transaction amount, payment method, and customer information, then returns the payment status and redirect URL.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.pt.md#2025-04-18_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire '../vendor/autoload.php';\n\nMercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n$payment = new MercadoPago\\Payment();\n$payment->transaction_amount = 5000;\n$payment->description = \"Título del producto\";\n$payment->payment_method_id = \"clabe\";\n\n$payer = new MercadoPago\\Payer();\n$payer->email = $_POST['email'];\n$payer->first_name = $_POST['payerFirstName']\n$payer->last_name = $_POST['payerLastName']\n$payer->entity_type = \"individual\";\n\n$payment->payer = $payer;\n\n$payment->save();\n\n$response = array(\n    'status' => $payment->status,\n    'payment_link' => $payment->transaction_details->external_resource_url,\n    'id' => $payment->id\n);\necho json_encode($response);\n\n?>\n\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference in C#\nDESCRIPTION: Creates a payment preference request with item details using the Mercado Pago C# SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/installments-without-card.en.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar request = new PreferenceRequest\n{\nItems = new List<PreferenceItemRequest>\n{\nnew PreferenceItemRequest\n{\nTitle = \"My product,\nquantity = 1,\nCurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\nUnitPrice = 75m,\n},\n},\nPurpose = \"onboarding_credits\",\n};\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Updating Report Settings with PHP\nDESCRIPTION: This PHP code snippet demonstrates how to update report settings using the Requests library to communicate with the Mercado Pago API, specifically for release reports.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.en.md#2025-04-18_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\\\ninclude('vendor/rmccue/requests/library/Requests.php');\\\nRequests::register_autoloader();\\\n$headers = array(\\\n    'accept' => 'application/json',\\\n    'content-type' => 'application/json',\\\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\\\n);\\\n$data = '{\\\n            \"file_name_prefix\": \"release-report-USER_ID\",\\\n            \"include_withdrawal_at_end\": true,\\\n            \"execute_after_withdrawal\": false,\\\n            \"display_timezone\": \"GMT-04\",\\\n            \"notification_email_list\": [\\\n                \"example@email.com\",\\\n                \"john@example.com\"\\\n            ],\\\n            \"frequency\": {\\\n                \"hour\": 0,\\\n                \"type\": \"monthly\",\\\n                \"value\": 1\\\n            },\\\n            \"columns\": [\\\n                {\\\n                    \"key\": \"DATE\"\\\n                },\\\n                {\\\n                    \"key\": \"SOURCE_ID\"\\\n                },\\\n                {\\\n                    \"key\": \"EXTERNAL_REFERENCE\"\\\n                }\\\n            ]\\\n    }';\\\n$response = Requests::put('https://api.mercadopago.com/v1/account/release_report/config', $headers, $data);\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Payment Retrieval in MercadoPago API\nDESCRIPTION: This JSON snippet illustrates the expected response format when retrieving payment information. It includes various payment details such as ID, dates, status, and payment method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/retrieving-payments.es.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 2798247250,\n  \"date_created\": \"2017-06-16T21:10:06.000-04:00\",\n  \"date_approved\": \"2017-06-16T21:10:06.000-04:00\",\n  \"date_last_updated\": \"2017-06-28T19:39:41.000-04:00\",\n  \"date_of_expiration\": null,\n  \"money_release_date\": \"2017-06-21T21:10:06.000-04:00\",\n  \"operation_type\": \"regular_payment\",\n  \"payment_method_id\": \"visa\",\n  \"payment_type_id\": \"credit_card\",\n  \"status\": \"approved\",\n  \"status_detail\": \"accredited\",\n  \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n  \"description\": \"Telefono Celular iPhone 7\",\n  ...,\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Device SDK Implementation\nDESCRIPTION: Swift and Objective-C code examples for implementing the Mercado Pago Devices SDK in iOS applications, including initialization and information capture.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.en.md#2025-04-18_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport MercadoPagoDevicesSDK\n...\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        ...        \n        MercadoPagoDevicesSDK.shared.execute()\n        ...\n}\n```\n\nLANGUAGE: objective-c\nCODE:\n```\n@import 'MercadoPagoDevicesSDK';\n...\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    ...\n    [[MercadoPagoDevicesSDK shared] execute];\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Item Preference in Ruby\nDESCRIPTION: Demonstrates creating a payment preference with multiple items using the Mercado Pago Ruby SDK, configuring items with title, quantity, currency, and unit price\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/preference-multiple-items.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n# Create preference data with items\npreference_data = {\nitems: [\n{\ntitle: 'My product 1',\nquantity: 1,\ncurrency_id: '[FAKER][CURRENCY][ACRONYM]',\nunit_price: 75.56\n},\n{\ntitle: 'My Product 2',\nquantity: 2,\ncurrency_id: '[FAKER][CURRENCY][ACRONYM]',\nunit_price: 96.56\n}\n]\n}\n\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Setting Notification URL with MercadoPago SDK in C#\nDESCRIPTION: C# snippet to configure a payment request with a notification URL using MercadoPago SDK. The SDK must be installed with necessary configurations. Inputs include transaction details and payer's email and identification. Outputs: payment status displayed on console.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.en.md#2025-04-18_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\\nusing MercadoPago.Client.Common;\\nusing MercadoPago.Client.Payment;\\nusing MercadoPago.Config;\\nusing MercadoPago.Resource.Payment;\\n\\n\\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\\n\\n\\nvar paymentRequest = new PaymentCreateRequest\\n{\\n   TransactionAmount = decimal.Parse(Request[\"transactionAmount\"]),\\n   Token = Request[\"token\"],\\n   Description = Request[\"description\"],\\n   Installments = int.Parse(Request[\"installments\"]),\\n   PaymentMethodId = Request[\"paymentMethodId\"],\\n   NotificationUrl = \"http://requestbin.fullcontact.com/1ogudgk1\",\\n\\n\\n   Payer = new PaymentPayerRequest\\n   {\\n       Email = Request[\"email\"],\\n       Identification = new IdentificationRequest\\n       {----[mla, mlb, mlu, mlc, mpe, mco]----\\n           Type = Request[\"docType\"],------------\\n           Number = Request[\"docNumber\"],\\n       },\\n   },\\n};\\n\\n\\nvar client = new PaymentClient();\\nPayment payment = await client.CreateAsync(paymentRequest);\\n\\n\\nConsole.WriteLine(payment.Status);\\n\\n\n```\n\n----------------------------------------\n\nTITLE: Associating Google Ads with MercadoPago Preference\nDESCRIPTION: Shows how to associate Google Ads tracking with a MercadoPago preference for conversion tracking. Requires replacing 'CONVERSION_ID' and 'CONVERSION_LABEL' with actual Google Ads tag data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/preferences.en.md#2025-04-18_snippet_5\n\nLANGUAGE: node\nCODE:\n```\n// Configure your preference\nvar preference = {\n // Associate your tag\n  tracks: [\n        {\n            type: \"google_ad\",\n            values: {\n              conversion_id: \"CONVERSION_ID\",\n              conversion_label: \"CONVERSION_LABEL\"\n            }\n        }\n      ]\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Validation Payment with cURL - First Charging Step\nDESCRIPTION: cURL command for creating a validation payment by charging a small amount to validate cards when Zero Dollar Auth is not available. This shows the first step of charging a small amount to a card.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n   -H 'accept: application/json' \\\n   -H 'content-type: application/json' \\\n   -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n   -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n   'https://api.mercadopago.com/v1/payments' \\\n   -d '{\n         \"transaction_amount\": 100,\n         \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n         \"description\": \"Blue shirt\",\n         \"installments\": 1,\n         \"payment_method_id\": \"visa\",\n         \"issuer_id\": 310,\n         \"payer\": {\n           \"email\": \"PAYER_EMAIL\"\n         }\n   }'\n```\n\n----------------------------------------\n\nTITLE: Executing Mercado Pago Commands\nDESCRIPTION: This JavaScript code demonstrates how to construct and execute a command to interact with the Mercado Pago application. It defines the command object with `method`, `args`, and `callback` properties. The `MobileWebKit.executeNative()` function is then used to send the command to the native environment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/comunication-settings.es.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar exampleCommand =\n    {\n        \"method\": 'example',\n        \"args\": {\n            'arg1': value1\n         },\n         \"callback\": function(result, error) {\n             if (!result) {\n                 console.log(\"ERROR: wrong echo result\");\n             } else {\n                 console.log(\"SUCCESS: echo arrives \" + result);\n             }\n         }\n    }\nMobileWebKit.executeNative(exampleCommand)\n```\n\n----------------------------------------\n\nTITLE: Rendering Pix QR Code Image in HTML\nDESCRIPTION: HTML code for displaying a base64-encoded QR code image for Pix payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pix.es.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src={`data:image/jpeg;base64,${qr_code_base64}`}/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Bank Transfer Transaction in Mercado Pago\nDESCRIPTION: POST request to process a money transfer to a bank account. Requires detailed transaction information including source and destination account details, access token, and idempotency key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.en.md#2025-04-18_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    'https://api.mercadopago.com/v1/transaction-intents/process'\\\n    -H 'Content-Type: application/json' \\\n       -H 'X-Idempotency-Key: {{idempotency_key}}' \\\n       -H 'x-Signature: true' \\\n       -H 'x-enforce-signature: false' \\\n       -H 'Authorization: Bearer TEST-7434*********159-03141*********cee51edf8*********f94f589-1*********' \\\n    -d '{\n  \"external_reference\": \"MP0001\",\n  \"point_of_interaction\": \"{\\\"type\\\":\\\"PSP_TRANSFER\\\"}\",\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://example.com.br/notification\"\n    }\n  },\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": 100\n        }\n      ]\n    },\n    \"to\": {\n      \"accounts\": [\n        {\n          \"type\": \"current\",\n          \"amount\": 100,\n          \"bank_id\": \"99999004\",\n          \"branch\": \"0001\",\n          \"holder\": \"Jonh Doe\",\n          \"provider_id\": \"spi\",\n          \"currency_id\": \"BRL\",\n          \"number\": \"10266732\",\n          \"owner\": {\n            \"identification\": {\n              \"type\": \"CPF\",\n              \"number\": \"1234567890\"\n            }\n          }\n        }\n      ]\n    },\n    \"total_amount\": 100\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Form in HTML\nDESCRIPTION: This HTML snippet outlines how to create a payment form that captures buyer information, transaction amount, and product description for processing payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.pt.md#2025-04-18_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<form id=\"form-checkout\" action=\"/process_payment\" method=\"post\">\n    <div>\n      <div>\n        <label for=\"payerFirstName\">Name</label>\n        <input id=\"form-checkout__payerFirstName\" name=\"payerFirstName\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"payerLastName\">Last name</label>\n        <input id=\"form-checkout__payerLastName\" name=\"payerLastName\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"email\">E-mail</label>\n        <input id=\"form-checkout__email\" name=\"email\" type=\"text\">\n      </div>\n    <div>\n      <div>\n        <input type=\"hidden\" name=\"transactionAmount\" id=\"transactionAmount\" value=\"5000\">\n        <input type=\"hidden\" name=\"description\" id=\"description\" value=\"Nome do Produto\">\n        <br>\n        <button type=\"submit\">Pay</button>\n      </div>\n    </div>\n  </form>\n```\n\n----------------------------------------\n\nTITLE: Respuesta de pago de Mercado Pago (JSON)\nDESCRIPTION: Este snippet muestra la respuesta JSON después de procesar un pago. Incluye detalles completos del pago como estado, monto, información del pagador, detalles de la tarjeta, y más.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.es.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"acquirer_reconciliation\": [\n  ],\n  \"statement_descriptor\": \"MERCADOPAGO\",\n  \"captured\": true,\n  \"date_last_updated\": \"2018-04-17T09:16:40.000-04:00\",\n  \"merchant_account_id\": null,\n  \"payer_id\": 300444925,\n  \"issuer_id\": \"160\",\n  \"description\": \"Title of what you are paying for. It will be displayed in the payment process.\",\n  \"transaction_amount\": 100,\n  \"card\": {\n    \"id\": null,\n    \"first_six_digits\": \"494133\",\n    \"expiration_month\": 2,\n    \"cardholder\": {\n      \"identification\": {\n        \"number\": null,\n        \"type\": null\n      },\n      \"name\": \"APRO\"\n    },\n    \"date_last_updated\": \"2018-04-17T09:16:38.000-04:00\",\n    \"date_created\": \"2018-04-17T09:16:38.000-04:00\",\n    \"expiration_year\": 2021,\n    \"last_four_digits\": \"9283\"\n  },\n  \"transaction_details\": {\n    \"total_paid_amount\": 100,\n    \"acquirer_reference\": null,\n    \"payment_method_reference_id\": \"1234567\",\n    \"net_received_amount\": 90.96,\n    \"financial_institution\": null,\n    \"payable_deferral_period\": null,\n    \"installment_amount\": 100,\n    \"external_resource_url\": null,\n    \"overpaid_amount\": 0\n  },\n  \"client_id\": \"6122032597128314\",\n  \"coupon_amount\": 0,\n  \"metadata\": {\n  },\n  \"money_release_schema\": null,\n  \"collector_id\": 307467332,\n  \"status\": \"approved\",\n  \"financing_type\": null,\n  \"processing_mode\": \"aggregator\",\n  \"status_detail\": \"accredited\",\n  \"transaction_id\": \"6608447860_776736357f767f777777\",\n  \"installments\": 1,\n  \"internal_metadata\": {\n    \"processed_by\": \"checkout-off-v1\"\n  },\n  \"refunds\": [\n  ],\n  \"payment_type_id\": \"debit_card\",\n  \"counter_currency\": {\n    \"amount\": 4.99,\n    \"currency_id\": \"USD\",\n    \"rate\": 18.22539135,\n    \"amount_refunded\": 0\n  },\n  \"profile_id\": \"bancomer\",\n  \"payer_tags\": [\n  ],\n  \"reserve_id\": null,\n  \"coupon_id\": null,\n  \"shipping_amount\": 0,\n  \"fee_details\": [\n    {\n      \"amount\": 9.04,\n      \"fee_payer\": \"collector\",\n      \"type\": \"mercadopago_fee\"\n    }\n  ],\n  \"acquirer\": null,\n  \"date_created\": \"2018-04-17T09:16:38.000-04:00\",\n  \"id\": 3637024689,\n  \"collector\": {\n    \"id\": 307467332,\n    \"first_name\": \"TEST CBT OFF Pruebas\",\n    \"phone\": {\n      \"extension\": null,\n      \"area_code\": \"11\",\n      \"number\": \"32808879\"\n    },\n    \"email\": \"test.cbt.off.merchantcbt@test.com\",\n    \"identification\": {\n      \"number\": \"25060337\",\n      \"type\": \"RFC\"\n    },\n    \"last_name\": \"TEST MPFRONT\"\n  },\n  \"date_of_expiration\": null,\n  \"money_release_days\": null,\n  \"order\": {\n    \"id\": \"710534062\",\n    \"type\": \"mercadopago\"\n  },\n  \"external_reference\": \"Reference_1234\",\n  \"available_actions\": [\n    \"refund\"\n  ],\n  \"application_id\": 6122032597128314,\n  \"marketplace\": \"NONE\",\n  \"merchant_number\": null,\n  \"call_for_authorize_id\": null,\n  \"risk_execution_id\": 14940341296,\n  \"api_version\": \"2\",\n  \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n  \"sponsor_id\": null,\n  \"deduction_schema\": null,\n  \"payment_method_id\": \"debvisa\",\n  \"additional_info\": {\n  },\n  \"site_id\": \"MLM\",\n  \"binary_mode\": false,\n  \"operation_type\": \"regular_payment\",\n  \"differential_pricing_id\": null,\n  \"money_release_date\": \"2018-04-29T09:16:40.000-04:00\",\n  \"payer\": {\n    \"id\": \"300444925\",\n    \"first_name\": \"Test\",\n    \"phone\": {\n      \"extension\": null,\n      \"area_code\": \"01\",\n      \"number\": \"1111-1111\"\n    },\n    \"email\": \"test_user_33759716@testuser.com\",\n    \"identification\": {\n      \"number\": \"800825569\",\n      \"type\": \"RFC\"\n    },\n    \"last_name\": \"Test\",\n    \"entity_type\": null,\n    \"type\": \"registered\"\n  },\n  \"notification_url\": \"https://www.your-site.com/ipn\",\n  \"transaction_amount_refunded\": 0,\n  \"collector_tags\": [\n  ],\n  \"authorization_code\": \"1234567\",\n  \"date_approved\": \"2018-04-17T09:16:40.000-04:00\",\n  \"live_mode\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Print Action for Mercado Pago Point\nDESCRIPTION: This snippet demonstrates how to create a new print action for Mercado Pago Point with customized content using JSON format. It specifies terminal ID and subtype for formatting. The response returns a status code of 201 upon success.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/configure-printing.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"print\",\n  \"config\": {\n    \"point\": {\n      \"terminal_id\": \"{{device.id}}\",\n      \"subtype\": \"custom\"\n    }\n  },\n  \"external_reference\": \"8a42e06e45d5\",\n  \"content\": \"{br}--------------------------------{br}{center}{w} COMPROVANTE DE ENTREGA{/w}{br}{br}{s} Nro pedido :12345{/s}{br}{s} Loja: Loja de teste{/s}{br}--------------------------------{br}{s}***ITEM(S) DESPACHO***{/s}{br}{s}SKU / ARTIGO                     QUANTIDADE   {/s}{br}{s}----------------------------------------------{/s}{br}{s}4065432630504 / BOLA FUTEBOL WUCL LGE EHV240424   1{br}{s}ENTREGAR: 06/06/2024{/s}{br}{s}ENDEREÇO: METROPOLITANA  {/s}{br}{s}RECEBE: John{/s}{br}{s}entrega ao cliente no período da manhã{/s}{br}--------------------------------{br}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MercadoPago Credentials in HTML\nDESCRIPTION: This HTML snippet initializes MercadoPago with a public key for integrating the payment system with your account. The script assigns a new MercadoPago instance to handle payment operations. A valid public key string is a prerequisite.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.en.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  const mp = new MercadoPago(\"YOUR_PUBLIC_KEY\");\n</script>\n```\n\n----------------------------------------\n\nTITLE: Associating Google Ads Tag with Checkout Pro Preference in Node.js\nDESCRIPTION: This Node.js code shows how to associate a Google Ads conversion tag with a Checkout Pro preference. The 'CONVERSION_ID' and 'CONVERSION_LABEL' should be replaced with actual values from the Google Ads account.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n  // Criar um objeto preferencia\nvar preference = {\n \n  // Associar sua tag do Google ads\n  tracks: [\n        {\n            type: \"google_ad\",\n            values: {\n              conversion_id: \"CONVERSION_ID\",\n              conversion_label: \"CONVERSION_LABEL\"\n            } \n        }\n      ]\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Payment Intent Sender\nDESCRIPTION: Method to send payment intent to the native Android RDCPass app with necessary payment details and package information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/cross-platform-ionic.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ionic\nCODE:\n```\nstartActivity(pay): void { \n\t\tthis.app.getPackageName().then(async (value) => {  \n\t\t\tconst options = { \n\t\t\t\taction: this.intent.ACTION_SEND, \n\t\t\t\tpackage: value.toString(), \n\t\t\t\textras: { \n\t\t\t\t\tpackageName: value.toString(), \n\t\t\t\t\tclassName: `${value.toString()}.MainActivity`,  monto: `${pay}` \n\t\t\t\t}, \n\t\t\t\tcomponent: { \n\t\t\t\t\tpackage: 'redelcom.cl.rdcpass', \n\t\t\t\t\tclass: 'redelcom.cl.rdcpass.MainActivity' \n\t\t\t\t}, \n\t\t\t}; \n\t\t\tthis.intent.startActivity(options) \n\t\t\t.then((onSucces) => { \n\t\t\t\tthis.getIntent(); \n\t\t\t}, \n\t\t\t(onError) => { \n\t\t\t\tconsole.log('error', onError); \n\t\t\t}); \n\t\t} \n\t);  \n}\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Bancário Payment with Discounts, Fines, and Interest in Node.js\nDESCRIPTION: This Node.js code snippet shows how to create a boleto bancário payment with discounts, fines, and interest using the Mercado Pago SDK. It configures the payment details, payer information, and payment rules for discounts, fines, and interest.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar mercadopago = require('mercadopago');\nmercadopago.configure({\n  access_token: 'YOUR_ACCESS_TOKEN'\n});\nvar payment = {\n  description: 'Título do produto',\n  date_of_expiration: '2022-12-24T15:37:48.000-03:00',\n  payment_method_id: 'bolbradesco',\n  transaction_amount: 100,\n  payer: {\n    first_name: 'Test',\n    last_name: 'User',\n    email: 'test_user_123456@testuser.com',\n    identification: {\n      type: 'CPF',\n      number: '19119119100'\n    }\n  },\n  payment_method: {\n    data: {\n      rules: {\n        discounts: [\n          {\n            value: 5,\n            type: 'fixed',\n            limit_date: '2022-12-10'\n          }\n        ],\n        fine: {\n          value: 2,\n          type: 'percentage'\n        },\n        interest: {\n          value: 0.03,\n          type: 'percentage'\n        }\n      }\n    }\n  }\n};\nmercadopago.payment.create(payment).then(function (data) {\n  console.log('URL boleto: ' + data.body.transaction_details.external_resource_url);\n}).catch(function (error) {\n  console.log(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Creando preferencia con atributo purpose para Cuenta de Mercado Pago en Python\nDESCRIPTION: Este código Python crea una preferencia de pago con el atributo 'purpose' configurado para 'wallet_purchase', habilitando el modo Cuenta de Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-mp-wallet.es.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npreference_data = {\n    \"items\": [\n        {\n            \"title\": \"Mi producto\",\n            \"unit_price\": 100,\n            \"quantity\": 1\n        }\n    ],\n    \"purpose\": \"wallet_purchase\"\n}\n\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago Payment Form for Mexico (MLM)\nDESCRIPTION: Configures and initializes a Mercado Pago payment form for Mexico region. The code sets up form fields with Spanish placeholders, event handlers for form mounting and submission, and handles payment processing. It generates a cardtoken that represents card data securely and can be used once within 7 days.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.es.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst cardForm = mp.cardForm({\n    amount: \"100.5\",\n    iframe: true,\n    form: {\n        id: \"form-checkout\",\n        cardNumber: {\n            id: \"form-checkout__cardNumber\",\n            placeholder: \"Número de la tarjeta\",\n        },\n        expirationDate: {\n            id: \"form-checkout__expirationDate\",\n            placeholder: \"MM/AA\",\n        },\n        securityCode: {\n            id: \"form-checkout__securityCode\",\n            placeholder: \"Código de seguridad\",\n        },\n        cardholderName: {\n            id: \"form-checkout__cardholderName\",\n            placeholder: \"Titular de la tarjeta\",\n        },\n        issuer: {\n            id: \"form-checkout__issuer\",\n            placeholder: \"Banco emisor\",\n        },\n        installments: {\n            id: \"form-checkout__installments\",\n            placeholder: \"Cuotas\",\n        },\n        identificationType: {\n            id: \"form-checkout__identificationType\",\n            placeholder: \"Tipo de documento\",\n        },\n        identificationNumber: {\n            id: \"form-checkout__identificationNumber\",\n            placeholder: \"Número do documento\",\n        },\n        cardholderEmail: {\n            id: \"form-checkout__cardholderEmail\",\n            placeholder: \"Correo electrónico\",\n        },\n    },\n    callbacks: {\n        onFormMounted: error => {\n            if (error) return console.warn(\"Form Mounted handling error: \", error);\n            console.log(\"Form mounted\");\n        },\n        onSubmit: event => {\n            event.preventDefault();\n\n            const {\n                paymentMethodId: payment_method_id,\n                issuerId: issuer_id,\n                cardholderEmail: email,\n                amount,\n                token,\n                installments,\n                identificationNumber,\n                identificationType,\n            } = cardForm.getCardFormData();\n\n            fetch(\"/process_order\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    total_amount: amount, // debe ser una string con el formato ..0.00\n                    description: description,\n                    payer: {\n                        email,\n                        identification: {\n                            type: identificationType,\n                            number: identificationNumber\n                        }\n                    },\n                    transactions: [\n                        {\n                            amount, // debe ser una string con el formato ..0.00\n                            payment_method: {\n                                token,\n                                id: payment_method_id,\n                                type: type, // debe ser \"credit_card\" o \"debit_card\",\n                                installments: Number(installments)\n                            }\n                        }\n                    ]\n                }),\n            });\n        },\n        onFetching: (resource) => {\n            console.log(\"Fetching resource: \", resource);\n\n            // Animate progress bar\n            const progressBar = document.querySelector(\".progress-bar\");\n            progressBar.removeAttribute(\"value\");\n\n            return () => {\n                progressBar.setAttribute(\"value\", \"0\");\n            };\n        }\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Confirming CashOut Status - API Endpoint\nDESCRIPTION: This section describes how to confirm the CashOut status by sending a POST request to the specified endpoint with the required attributes. It highlights the importance of transaction flow dependencies on various factors, including available funds and potential reasons for failure.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/hidden-cashout.es.md#2025-04-18_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Searching for Customers with MercadoPago SDK in Node.js\nDESCRIPTION: This snippet shows how to search for customers using MercadoPago's SDK. It initializes the client and demonstrates searching for customers by email address using the search method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/customers.es.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerClient = new Customer(client);\n\ncustomerClient.search({ options: { email: '<EMAIL>' } }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Data in C# using MercadoPago SDK\nDESCRIPTION: Example of updating customer information such as email, name, phone, identification, and address details using the MercadoPago C# SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/modify-customer.en.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\nvar phoneRequest = new PhoneRequest\n{\nAreaCode = \"[FAKER][PHONE_NUMBER][AREA_CODE]\",\nNumber = \"001234567\"\n};\n\nvar identificationRequest = new IdentificationRequest\n{\nType = \"[FAKER][IDENTIFICATION][TYPE]\",\nNumber = \"12341234\"\n};\n\nvar addressRequest = new AddressRequest\n{\nZipCode = \"[FAKER][ADDRESS][ZIP_CODE]\",\nStreetName = \"[FAKER][ADDRESS][STREET_NAME]\",\nStreetNumber = \"2\"\n};\n\nvar customerRequest = new CustomerRequest\n{\nEmail = \"test_payer_12345@testuser.com\",\nFirstName = \"john\",\nLastName = \"wagner\",\nDefaultAddress = \"home\",\nDescription = \"Customer Information\",\nDefaultCard = \"None\",\nPhone = phoneRequest,\nIdentification = identificationRequest,\nAddress = addressRequest\n\n};\nvar customerClient = new CustomerClient();\nCustomer customer = await customerClient.Update(customerRequest);\n```\n\n----------------------------------------\n\nTITLE: Installing project dependencies using CocoaPods\nDESCRIPTION: This snippet provides the command necessary to install the defined dependencies in the Podfile, allowing for the use of Mercado Pago SDK in your project.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ios.en.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pod install\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Pix Charge with Discounts and Penalties\nDESCRIPTION: API request to create a comprehensive Pix charge including discount, interest, and penalty configurations for a more complex financial transaction\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/pix-payments/create-charge.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request PUT 'https://pix-api.mercadopago.com/cobv/1655996626' \\\n--header 'Authorization: Bearer TOKEN' \\\n--header 'Content-Type: application/json' \\\n--cert PATH_TO_mTLS --key PATH_TO_KEY \\\n--data-raw '{\n  \"calendario\": {\n    \"dataDeVencimento\": \"2022-12-31\"\n  },\n  \"devedor\": {\n    \"cpf\": \"12345678909\",\n    \"nome\": \"Francisco da Silva\"\n  },\n  \"valor\": {\n    \"original\": \"123.45\",\n    \"desconto\": {\n      \"modalidade\": \"1\",\n      \"descontoDataFixa\": [\n        {\n          \"data\": \"2020-11-30\",\n          \"valorPerc\": \"30.00\"\n        }\n      ]\n    },\n    \"juros\": {\n      \"modalidade\": \"2\",\n      \"valorPerc\": \"2.00\"\n    },\n    \"multa\": {\n      \"modalidade\": \"2\",\n      \"valorPerc\": \"15.00\"\n    }\n  },\n  \"chave\": \"CHAVE_PIX_RECEBEDOR\",\n  \"solicitacaoPagador\": \"Cobrança dos serviços prestados.\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Open Finance Payment with Java SDK\nDESCRIPTION: This snippet demonstrates the implementation of Open Finance payments using Mercado Pago's Java SDK. It configures the payment with the transaction amount, description, payer information, and sets the 'linked_to' parameter to 'openfinance'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/advanced-openFinance.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"access_token\");\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest createRequest =\nPaymentCreateRequest.builder()\n    .transactionAmount(new BigDecimal(100))\n    .description(\"description\")\n    .paymentMethodId(\"pix\")\n    .pointOfInteraction(\n        PaymentPointOfInteractionRequest.builder().linkedTo(\"openfinance\").build())\n    .payer(PaymentPayerRequest.builder().email(\"test@test.com\").build())\n    .build();\n\nPayment payment = client.create(createRequest);\n```\n\n----------------------------------------\n\nTITLE: Create Payment (Custom Checkout)\nDESCRIPTION: This code creates a payment using the custom checkout flow. The `payment_data` variable is expected to contain the necessary information for the payment, such as the payer, amount, and description.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.es.md#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsdk.payment().create(payment_data)\n```\n\n----------------------------------------\n\nTITLE: Customizing Status Screen Brick Visuals in React JSX\nDESCRIPTION: This React JSX snippet configures the visual settings of the Status Screen Brick to display the external_reference field. This setting facilitates integration by making the reference visible.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/status-screen-brick/add-external-reference.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n showExternalReference: true\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Brick Payment Settings Using JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to set up the Brick component to hide the transaction date, while also showing the basic configuration for initialization and error handling callbacks. It requires Mercado Pago's Brick to be initialized with a `paymentId` and uses settings for executing various callback functions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/status-screen-brick/hide-transaction-date.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n initialization: {\n paymentId: 100, // payment id generated by Mercado Pago\n },\n callbacks: {\n onReady: () => {\n // callback called when Brick is ready\n },\n onError: (error) => {\n // callback called for all Brick error cases\n },\n },\n customization: {\n visual: {\n hideTransactionDate: true\n }\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Callbacks for Brick Initialization in Javascript\nDESCRIPTION: This snippet demonstrates configuring the onBinChange callback in Brick settings. It is triggered every time the card bin input changes, printing the bin to the console. Ensure to validate the bin on the submit event for reliability.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/additional-callbacks.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n   ..., \n   callbacks: {\n       ...\n       onBinChange: (bin) => {\n           // allback called whenever card bin is changed\n           console.log(bin);\n       },\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: Example Chargeback Notification JSON Structure\nDESCRIPTION: This JSON structure represents an example of a notification sent by Mercado Pago when a chargeback occurs. It contains key details such as the actions taken, the API version, application ID, and data pertinent to the chargeback event. The notification format is crucial for systems receiving notifications to process the data correctly.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/chargebacks-management/chargebacks-notifications.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"actions\":[\n      \"changed_case_status\",\n   ],\n   \"api_version\":\"v1\",\n   \"application_id\":9007201037432480,\n   \"data\":{\n      \"checkout\":\"PRO\",\n      \"date_updated\":\"0001-01-01T00:00:00Z\",\n      \"id\":233000061680860000,\n      \"payment_id\":81968653106,\n      \"product_id\":\"C00A2J8RF4DI8BCIMFU0\",\n      \"site_id\":\"MLA\",\n      \"transaction_intent_id\":\"\"\n   },\n   \"date_created\":\"2024-07-03T19:34:28-04:00\",\n   \"id\":114411153595,\n   \"live_mode\":true,\n   \"type\":\"topic_chargebacks_wh\",\n   \"user_id\":634060442,\n   \"version\":1720035618\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Return URLs in Node.js for Mercado Pago Checkout Pro\nDESCRIPTION: This Node.js code snippet shows how to configure return URLs and auto-return behavior for a Mercado Pago Checkout Pro preference. It specifies URLs for success, failure, and pending payment outcomes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-return-urls.en.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar preference = {}\npreference = {\n  // ...\n  \"back_urls\": {\n        \"success\": \"https://www.tu-sitio/success\",\n        \"failure\": \"http://www.tu-sitio/failure\",\n        \"pending\": \"http://www.tu-sitio/pending\"\n    },\n    \"auto_return\": \"approved\",\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Instalando o SDK do Mercado Pago via NPM\nDESCRIPTION: Instala o pacote @mercadopago/sdk-js utilizando o gerenciador de pacotes npm.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/mp-js-v2.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n\n```\n\n----------------------------------------\n\nTITLE: Creating Mercado Pago Preference in Node.js\nDESCRIPTION: This Node.js code creates a preference object using the Mercado Pago SDK. It includes the 'wallet_purchase' purpose for logged payments and sets up an item with id, title, quantity, and unit price.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.en.md#2025-04-18_snippet_20\n\nLANGUAGE: node\nCODE:\n```\n// Create a preference object\nlet preference = {\n  // o \"purpose\": \"wallet_purchase\" only allows logged payments\n  // to allow guest payments you can omit this property\n  \"purpose\": \"wallet_purchase\",\n  \"items\": [\n    {\n      \"id\": \"item-ID-1234\",\n      \"title\": \"Meu produto\",\n      \"quantity\": 1,\n      \"unit_price\": 75 // item unit price, must be an integer.\n    }\n  ]\n};\n\nmercadopago.preferences.create(preference)\n  .then(function (response) {\n    // This value is the preferenceId that will be sent to the Brick at startup\n    const preferenceId = response.body.id;\n  }).catch(function (error) {\n    console.log(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Creando pagos con PagoEfectivo usando Mercado Pago SDK en Node.js\nDESCRIPTION: Código Node.js para crear un pago con PagoEfectivo utilizando el SDK de Mercado Pago. Configura el cliente con el token de acceso y realiza la solicitud de creación de pago con los datos necesarios.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mpe.es.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Payment, MercadoPagoConfig } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\n\npayment.create({\n    body: { \n        transaction_amount: req.transaction_amount,\n        token: req.token,\n        description: req.description,\n        installments: req.installments,\n        payment_method_id: req.paymentMethodId,\n        issuer_id: req.issuer,\n            payer: {\n            email: req.email,\n            identification: {\n        type: req.identificationType,\n        number: req.number\n    }}},\n    requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n.then((result) => console.log(result))\n.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Successful Response for Settlement Report Configuration Update\nDESCRIPTION: This JSON snippet shows the successful response after updating the settlement report configuration. It includes the updated configuration settings.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"file_name_prefix\": \"settlement-report-USER_ID\",\n    \"show_fee_prevision\": false,\n    \"show_chargeback_cancel\": true,\n    \"detailed\": true,\n    \"scheduled\": false,\n    \"coupon_detailed\": true,\n    \"shipping_detail\": true,\n    \"refund_detailed\": true,\n    \"extended\": false,\n    \"frequency\": {\n        \"hour\": 0,\n        \"type\": \"monthly\",\n        \"value\": 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Payment Button Click (JavaScript)\nDESCRIPTION: This JavaScript function handles the custom payment button click. It retrieves form data using getFormData() method, then sends it to a server endpoint for processing. It also includes error handling.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/hide-element.es.md#2025-04-18_snippet_5\n\nLANGUAGE: Javascript\nCODE:\n```\nfunction createPayment(){\n    window.cardPaymentBrickController.getFormData()\n        .then((cardFormData) => {\n            console.log('cardFormData received, creating payment...');\n            fetch(\"/process_payment\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify(cardFormData),\n            })\n        })\n        .catch((error) => {\n            // manejo de errores al llamar a getFormData()\n        });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing 120x600 Mercado Pago Payment Methods Banner\nDESCRIPTION: HTML code to embed a 120x600 pixel banner showing supported payment methods through Mercado Pago\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/online.en.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/banners/ar/medios/online/120X600.jpg\" \ntitle=\"Mercado Pago - Medios de pago\" alt=\"Mercado Pago - Medios de pago\" \nwidth=\"120\" height=\"600\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with 3DS (Optional) using Node.js\nDESCRIPTION: This Node.js code snippet demonstrates creating a payment using the Mercado Pago API, setting `three_d_secure_mode` to `optional`. It imports the necessary modules from the Mercado Pago SDK, creates a payment object with transaction details, and uses the `create` method to submit the payment request. It requires the MercadoPago Node.js SDK and an access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, Payment } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: 'YOUR_ACCESS_TOKEN' });\nconst payment = new Payment(client);\n\nconst body = {\ntransaction_amount: req.transaction_amount,\n  token: req.token,\n  description: req.description,\n  installments: req.installments,\n  payment_method_id: req.paymentMethodId,\n  issuer_id: req.issuer,\n  payer: {\n    email: req.email,\n    identification: {\n      type: req.identificationType,\n      number: req.number\n    }\n  },\n  three_d_secure_mode: 'optional' \n};\n\npayment.create({ body: body, requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' } }).then(console.log).catch(console.log);\n\n```\n\n----------------------------------------\n\nTITLE: Creating SPEI Transfer Payment with Ruby\nDESCRIPTION: Creates a SPEI bank transfer payment using MercadoPago Ruby SDK. The code initializes the SDK with an access token, defines payment data including transaction amount and payer information, then creates the payment and retrieves the payment link.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.es.md#2025-04-18_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ACCESS_TOKEN')\n\npayment_data = {\n\n  transaction_amount: 5000,\n  description: \"description\",\n  payment_method_id: \"clabe\",\n  payer: {\n    type: \"customer\",\n    email: params[: email],\n    entity_type: \"individual\",\n    first_name: params[: payerFirstName]\n    last_name: params[: payerLastName]\n  }\n}\n\npayment_response = sdk.payment.create(payment_data)\npayment = payment_response[: response]\npayment_link = payment.transaction_details.external_resource_url;\n```\n\n----------------------------------------\n\nTITLE: Importing MercadoPago.js Library\nDESCRIPTION: Includes the MercadoPago.js library in a web project via CDN or npm, enabling Pix payment integration\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pix.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n```\n\n----------------------------------------\n\nTITLE: Searching Merchant Orders in PHP\nDESCRIPTION: This snippet illustrates how to search for existing merchant orders using specific filters or date ranges. It initializes an MPSearchRequest with the desired preference_id and calls the search method on the MerchantOrderClient to retrieve the matching orders.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/orders.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $searchRequest = new MPSearchRequest(0, 0, [\n    \"preference_id\" => \"10000000000000000\"\n  ]);\n  $client = new MerchantOrderClient();\n  $client->search($searchRequest);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with MercadoPago - C#\nDESCRIPTION: This C# snippet illustrates how to create a payment using MercadoPago's SDK in an asynchronous manner. The payment request is constructed with transaction details and the 3D Secure mode set as optional.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.en.md#2025-04-18_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n \nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n \nvar paymentRequest = new PaymentCreateRequest\n{\n   TransactionAmount = decimal.Parse(Request[\"transactionAmount\"]),\n   Token = Request[\"token\"],\n   Description = Request[\"description\"],\n   Installments = int.Parse(Request[\"installments\"]),\n   PaymentMethodId = Request[\"paymentMethodId\"],\n   Payer = new PaymentPayerRequest\n   {\n       Email = Request[\"email\"],\n       Identification = new IdentificationRequest\n       {\n           Type = Request[\"identificationType\"],\n           Number = Request[\"identificationNumber\"],\n       },\n   },\nThreeDSecureMode = \"optional\",\n};\n \nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest);\n \nConsole.WriteLine(payment.Status);\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing Subscription Proportional Billing\nDESCRIPTION: Send a PUT request to modify an existing subscription and enable proportional billing for a specific subscription plan\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/payment-methods.es.md#2025-04-18_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nPUT /preapproval_plan/{id}\n{\n  \"billing_day_proportional\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Bricks Class with Theme Parameter in JavaScript\nDESCRIPTION: This code shows how to instantiate the Mercado Pago Bricks class with a specific theme. Setting the theme parameter at this level will apply the chosen theme to all Brick components that are initialized from this instance.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/set-theme.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nconst bricks = mp.bricks({ theme: 'dark' });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Document Types for Payment Form\nDESCRIPTION: Dynamically populates document type selection dropdown with available identification types using an asynchronous function and custom option creation method\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pix.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n(async function getIdentificationTypes() {\n  try {\n    const identificationTypes = await mp.getIdentificationTypes();\n    const identificationTypeElement = document.getElementById('form-checkout__identificationType');\n\n    createSelectOptions(identificationTypeElement, identificationTypes);\n  } catch (e) {\n    return console.error('Error getting identificationTypes: ', e);\n  }\n})();\n\nfunction createSelectOptions(elem, options, labelsAndKeys = { label: \"name\", value: \"id\" }) {\n  const { label, value } = labelsAndKeys;\n\n  elem.options.length = 0;\n\n  const tempOptions = document.createDocumentFragment();\n\n  options.forEach(option => {\n    const optValue = option[value];\n    const optLabel = option[label];\n\n    const opt = document.createElement('option');\n    opt.value = optValue;\n    opt.textContent = optLabel;\n\n    tempOptions.appendChild(opt);\n  });\n\n  elem.appendChild(tempOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: Printing DTE (Bill) with RedelCom API using cURL\nDESCRIPTION: This cURL command sends a POST request to print a DTE (bill) using the RedelCom API. It requires authentication headers and a JSON payload containing the DTE XML, transaction ID, and terminal ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/api-print-receipts.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\ \n'https://api-dev.redelcom.cl:20010/v2/factura' \\\n--header 'X-Authentication: clientId;secret' \\\n--header 'Content-Type: application/json' \\\n--data '{\n   \"dte\": \"XML de boleta o factura bajo el esquema de servicios impuestos internos\",\n   \"rdcTransactionId\": \"294-3727-16384\",\n   \"terminalId\": \"3127\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Banner Customization with React JSX\nDESCRIPTION: This React JSX snippet illustrates the definition of a `customization` object detailing visual elements of a Mercado Pago banner. It allows setting parameters such as logo visibility, content alignment, background, and border styles, as well as text alignment, font options, and colors. This is intended to integrate within a component to customize the banner's appearance.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/brand-brick/visual-customizations.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n    // the visual changes only apply to the banner, the modal is always default\n    visual: {\n      hideMercadoPagoLogo: false, // optional boolean\n      contentAlign: \"center\", // optional \"left\" | \"center\" | \"right\"\n      backgroundColor: \"white\", // optional \"white\" | \"mercado_pago_primary\" | \"mercado_pago_secondary\" | \"black\" | \"transparent\"\n      border: false, // optional boolean\n      borderColor: \"dark\", // optional \"dark\" | \"light\"\n      borderWidth: \"1px\", // optional \"1px\" | \"2px\"\n      borderRadius: \"0px\", // optional  string format: \"Npx\"\n      verticalPadding: \"8px\" // optional  string format: \"Npx\". max \"40px\"\n      horizontalPadding: \"16px\" // optional  string format: \"Npx\". max \"40px\"\n    },\n    text: {\n      align: \"left\", // optional \"left\" | \"center\" | \"right\",\n      useCustomFont: false, // optional boolean. OBS: If is true the Brick inheriths the font from the parent\n      size: \"medium\", // optional \"extra-small\" | \"small\" | \"medium\" | \"large\".\n      fontWeight: \"semibold\", // optional \"regular\" | \"semibold\".\n      color: \"secondary\", // optional \"primary\" | \"secondary\" | \"inverted\".\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Payment Response Model Implementation\nDESCRIPTION: Definition of the PaymentResponse model class that contains payment transaction details including payment type, reference, amount, and card information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/payment-flow-callback.es.md#2025-04-18_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval paymentResponse = PaymentResponse(\n    paymentType = \"paymentType\",\n    paymentReference = \"paymentReference\",\n    paymentCreationDate = \"paymentCreationDate\",\n    paymentAmount = 123,\n    paymentSnDevice = \"paymentSnDevice\",\n    paymentInstallments = \"paymentInstallments\",\n    paymentBrandName = \"paymentBrandName\",\n    paymentLastFourDigits = \"paymentLastFourDigits\",\n    statusError = \"\"\n)\n```\n\nLANGUAGE: java\nCODE:\n```\nPaymentResponse paymentResponse = new PaymentResponse(\n            \"paymentType\",\n            \"paymentReference\",\n            \"paymentCreationDate\",\n            123,\n            \"paymentSnDevice\",\n            \"paymentInstallments\",\n            \"paymentBrandName\",\n            \"paymentLastFourDigits\",\n            \"statusError\"\n        );\n```\n\n----------------------------------------\n\nTITLE: Hiding Form Title in Card Payment Brick (React JSX)\nDESCRIPTION: This snippet shows how to hide the form title and accepted flags in the Card Payment Brick using React JSX. It sets the 'hideFormTitle' property to true in the customization object.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/hide-element.es.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n   hideFormTitle: true\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing MercadoPagoDevicesSDK in Swift\nDESCRIPTION: Initializes the MercadoPagoDevicesSDK in the iOS application's AppDelegate didFinishLaunchingWithOptions method. This setup is required to capture device information for security validation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.en.md#2025-04-18_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport MercadoPagoDevicesSDK\n...\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        ...        \n        MercadoPagoDevicesSDK.shared.execute()\n        ...\n}\n```\n\n----------------------------------------\n\nTITLE: HMAC Generation Examples\nDESCRIPTION: Code examples showing how to generate HMAC SHA256 hash in different languages\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.es.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$cyphedSignature = hash_hmac('sha256', $data, $key);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst crypto = require('crypto');\nconst cyphedSignature = crypto\n    .createHmac('sha256', secret)\n    .update(signatureTemplateParsed)\n    .digest('hex');\n```\n\nLANGUAGE: java\nCODE:\n```\nString cyphedSignature = new HmacUtils(\"HmacSHA256\", secret).hmacHex(signedTemplate);\n```\n\nLANGUAGE: python\nCODE:\n```\nimport hashlib, hmac, binascii\n\ncyphedSignature = binascii.hexlify(hmac_sha256(secret.encode(), signedTemplate.encode()))\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods in PHP\nDESCRIPTION: PHP implementation for setting payment method preferences, excluding specific payment methods and types, and limiting installments\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/payment-methods.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$preference = new MercadoPago\\Preference();\n// ...\n$preference->payment_methods = array(\n\"excluded_payment_methods\" => array(\n array(\"id\" => \"master\")\n),\n\"excluded_payment_types\" => array(\n array(\"id\" => \"ticket\")\n),\n\"installments\" => 12\n);\n// ...\n?>\n```\n\n----------------------------------------\n\nTITLE: Custom Device ID Variable Implementation\nDESCRIPTION: HTML implementation for creating a custom variable to store the Device ID value using a hidden input field.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-chopro.en.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"hidden\" id=\"deviceId\">\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Notification URL - PHP\nDESCRIPTION: This code snippet demonstrates how to create a payment with a specified notification URL using the Mercado Pago PHP SDK.  It initializes a PaymentClient, sets the payment parameters including the notification_url, and then creates the payment. A notification will be sent to the provided URL upon payment status changes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.en.md#2025-04-18_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php \n$client = new PaymentClient();\n\n        $body = [\n            'transaction_amount' => 100,\n            'token' => 'token',\n            'description' => 'description',\n            'installments' => 1,\n            'payment_method_id' => 'visa',\n            'notification_url' => 'http://test.com',\n            'payer' => array(\n                'email' => 'test@test.com',\n                'identification' => array(\n                    'type' => 'CPF',\n                    'number' => '19119119100'\n                )\n            )\n        ];\n\n$client->create(body);\n?>\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Mercado Pago Event Notification Details\nDESCRIPTION: When clicking on a notification in the dashboard, you can access detailed information about the event including status, event type, trigger date, description, and the full JSON request. For failed notifications, you can view error reasons to prevent future issues.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.en.md#2025-04-18_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n### Evet details\n\nWhen you click on one of the listed notifications, you can access the event details. This section provides additional information, allowing you to retrieve lost data in case of notification delivery failure, thereby keeping your system up to date.\n * **Status:** Event status along with the corresponding success or error code.\n * **Event:** Type of event triggered as selected in the notification configuration.\n * **Type:** Topic to which the triggered event belongs as selected during configuration.\n * **Trigger date and time:** Date and time when the event was triggered.\n * **Description:** Detailed description of the event as documented.\n * **Trigger ID:** Unique identifier of the sent notification.\n * **Request:** JSON of the request corresponding to the triggered notification.\n\n![notifications details](/images/dashboard/notification-details-dashboard-es.png)\n\nIn case of notification delivery failure, you can view the reasons and correct the necessary information to prevent future issues.\n```\n\n----------------------------------------\n\nTITLE: Using Auxiliary Methods in Mercado Pago SDK for React\nDESCRIPTION: This snippet shows how to use auxiliary methods provided by the Mercado Pago SDK in a React application. It includes examples of retrieving identification types, payment methods, issuers, and installments. These methods are useful for building a complete payment flow.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/react-core-methods.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport {\n getIdentificationTypes,\n getPaymentMethods,\n getIssuers,\n getInstallments,\n} from '@mercadopago/sdk-react'\n\n\nconst identificationTypes = await getIdentificationTypes()\nconst paymentMethods = await getPaymentMethods({ bin: '50314332' })\nconst issuers = await getIssuers({ paymentMethodId: 'master', bin: '50314332' })\nconst installments = await getInstallments({\n amount: '1000',\n locale: 'pt-BR',\n bin: '50314332',\n processingMode: 'aggregator'\n})\n```\n\n----------------------------------------\n\nTITLE: Paginating Payment Search Results with PHP in MercadoPago API\nDESCRIPTION: This PHP code snippet shows how to implement pagination when searching for payments using the MercadoPago API. It demonstrates the use of limit, offset, sort, and criteria parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/retrieving-payments.es.md#2025-04-18_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\trequire ('mercadopago.php');\n\n\t$mp = new MP (\"ENV_ACCESS_TOKEN\");\n\n\t$payment = $mp->get(\n\t\t\"/v1/payments/search\",\n\t\tarray(\n\t\t\t\"external_reference\" => \"123456789\",\n\t\t\t\"limit\" => 50,\n\t\t\t\"offset\" => 200,\n\t\t\t\"sort\" => \"id\",\n\t\t\t\"criteria\" => \"desc\"\n\t\t)\n\t);\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing DeviceSDK in Java for Android\nDESCRIPTION: This code demonstrates how to initialize the DeviceSDK in a Java Android application. It's recommended to do this in the MainApplication class.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport com.mercadolibre.android.device.sdk.DeviceSDK;\nDeviceSDK.getInstance().execute(this);\n```\n\n----------------------------------------\n\nTITLE: Error Payment Intent Status Notification - JSON\nDESCRIPTION: This JSON object represents the 'ERROR' state of a payment intent, indicating a transaction error occurred. It includes transaction details and additional information regarding the error.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/notifications-pdv.en.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\"amount\": 100,\n\"caller_id\": 09876543,\n\"client_id\": 1234567890,\n\"created_at\": \"2021-11-29 17:10:37\",\n\"id\": \"abcdef123-8ab5-4139-9aa3-abcd123\",\n\"state\": \"ERROR\",\n\"additional_info\": {\n  \"external_reference\": \"information\",\n  \"ticket_number\": \"39SHDKKDJ\"\n}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"amount\": 100,\n\"caller_id\": 09876543,\n\"client_id\": 1234567890,\n\"created_at\": \"2021-11-29 17:10:37\",\n\"id\": \"abcdef123-8ab5-4139-9aa3-abcd123\",\n\"state\": \"ERROR\",\n\"additional_info\": {\n  \"external_reference\": \"information\"\n}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n \"amount\": 100,\n \"caller_id\": 09876543,\n \"client_id\": 1234567890,\n \"created_at\": \"2021-11-29 17:10:37\",\n \"id\": \"abcdef123-8ab5-4139-9aa3-abcd123\",\n \"state\": \"ERROR\",\n \"additional_info\": {\n   \"external_reference\": \"information\"\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Preference in Node.js\nDESCRIPTION: This Node.js snippet demonstrates how to create a Mercado Pago preference using the Mercado Pago API.  It constructs a preference object with item details and sets the `purpose` to `wallet_purchase` to allow only logged-in payments. The preference ID is then extracted from the API response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-onsubmit.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: node\nCODE:\n```\n// Cria um objeto de preferência\nlet preference = {\n  // o \"purpose\": \"wallet_purchase\" permite apenas pagamentos logados\n  // para permitir pagamentos como guest, você pode omitir essa propriedade\n  \"purpose\": \"wallet_purchase\",\n  \"items\": [\n    {\n      \"id\": \"item-ID-1234\",\n      \"title\": \"Meu produto\",\n      \"quantity\": 1,\n      \"unit_price\": 75.76\n    }\n  ]\n};\n \nmercadopago.preferences.create(preference)\n  .then(function (response) {\n    // Este valor é o preferenceId que será enviado para o Brick na inicialização\n    const preferenceId = response.body.id;\n  }).catch(function (error) {\n    console.log(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Updating Settlement Report Configuration with Mercado Pago API (Python)\nDESCRIPTION: This Python code updates the settlement report configuration using the Mercado Pago API. It uses the requests library to send a PUT request with the configuration data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN',\n}\n\ndata = '{\n            \"file_name_prefix\": \"settlement-report-USER_ID\",\n            \"show_fee_prevision\": false,\n            \"show_chargeback_cancel\": true,\n            \"detailed\": true,\n            \"coupon_detailed\": true,\n            \"shipping_detail\": true,\n            \"refund_detailed\": true,\n            \"extended\": false,\n            \"frequency\": {\n                \"hour\": 0,\n                \"type\": \"monthly\",\n                \"value\": 1\n            }\n        }'\n\nresponse = requests.put('https://api.mercadopago.com/v1/account/settlement_report/config', headers=headers, data=data)\n```\n\n----------------------------------------\n\nTITLE: Paginação de Pagamentos com PHP\nDESCRIPTION: Este exemplo demonstra como implementar a paginação ao buscar pagamentos. Utiliza parâmetros como limit, offset, sort e criteria para controlar a quantidade e ordem dos resultados retornados.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/retrieving-payments.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\trequire ('mercadopago.php');\n\n\t$mp = new MP (\"ENV_ACCESS_TOKEN\");\n\n\t$payment = $mp->get(\n\t\t\"/v1/payments/search\",\n\t\tarray(\n\t\t\t\"external_reference\" => \"123456789\",\n\t\t\t\"limit\" => 50,\n\t\t\t\"offset\" => 200,\n\t\t\t\"sort\" => \"id\",\n\t\t\t\"criteria\" => \"desc\"\n\t\t)\n\t);\n?>\n```\n\n----------------------------------------\n\nTITLE: Querying Settlement Report Config - HTTP Request Examples\nDESCRIPTION: Examples of how to query the settlement report configuration endpoint using different programming languages. Each example shows how to make a GET request to the /v1/account/settlement_report/config endpoint with proper authorization headers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/config' \\\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$response = Requests::get('https://api.mercadopago.com/v1/account/settlement_report/config', $headers);\n```\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report/config\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"GET\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\nresponse = requests.get('https://api.mercadopago.com/v1/account/settlement_report/config', headers=headers)\n```\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report/config',\n    headers: headers\n};\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Order with MercadoPago SDK - Node.js\nDESCRIPTION: This Node.js snippet shows how to retrieve order details using an order ID with the MercadoPago SDK. It depends on the 'MercadoPagoConfig' and 'MerchantOrder' classes and requires an access token. The key parameter is 'merchantOrderId', representing the ID of the order to be retrieved. The output is the order's payment information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/orders.en.md#2025-04-18_snippet_2\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\n\nconst merchantOrder = new MerchantOrder(client);\n\ncustomerClient.get({ merchantOrderId: '<MERCHANT_ORDER_ID>' }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Updating Payment with Mercado Pago PHP SDK\nDESCRIPTION: This snippet demonstrates how to update a payment using the Mercado Pago PHP SDK. It initializes a `PaymentClient` and utilizes the `capture()` method to update the payment with the given ID and amount. The `RequestOptions` is used to pass custom headers, including the idempotency key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/create-payments.en.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->capture(123456789, 100, $request_options);\n?>\n```\n\n----------------------------------------\n\nTITLE: Adding SDK Dependency in Gradle\nDESCRIPTION: Includes the dependency for the Main Apps SDK library in the module's .gradle file.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/first-steps.es.md#2025-04-18_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n     ....\n     implementation files(\"libs/nativesdk-0.1.0.aar\")\n     ...\n}\n```\n\n----------------------------------------\n\nTITLE: Free-form Printing with Redelcom API in cURL\nDESCRIPTION: This cURL command sends a POST request for free-form printing using the Redelcom API. It requires authentication headers and a JSON payload containing the formatted text to be printed and the terminal ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/api-print-receipts.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl  -X POST \\ \n 'https://api-dev.redelcom.cl:20010/v2/impresion' \\\n--header 'X-Authentication: clientId;secret' \\\n--header 'Content-Type: application/json' \\\n--data '{\n   \"printText\": \"\"{w}   Roberta Pizzas       {/w} {br}      PUB RESTAURANT {br}       Vina del mar.Chile{br}{br}{w}  ADICION        MESA   {br}    1763            5          {/w}{br}     18/04/2023  T:1  9:26 pm{br}Atendido por :ASDRUBAL      ( 3){br}Invitados    :  5{br}--- Detalle del Consumo --------{br}Producto {s}(Cant x Precio){/s}        Total{br}--------------------------------{b}{br}RUCULA                   $10,900{br}GAMBA                    $11,700{br}BOTURA                   $11,900{br} {br} {br}{pdf417}www.google.cl{/pdf417}{br}\"\n\",\n   \"terminalId\": \"3127\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Report Columns in JSON\nDESCRIPTION: JSON array for configuring which columns to include in a Mercado Pago report. The example shows how to select DATE and SOURCE_ID columns.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[ { \"key\": \"DATE\" }, { \"key\": \"SOURCE_ID\" } ]\n```\n\n----------------------------------------\n\nTITLE: Setting Application ID in AndroidManifest.xml\nDESCRIPTION: This snippet demonstrates how to configure the AndroidManifest.xml file with the `application_id` obtained from the Mercado Pago developer panel. This step is crucial for authenticating the application and enabling integration with the Point Smart device.  The 'value' attribute should be replaced with the actual application ID followed by the letter 'L'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/migrate-via-main-apps.en.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data\nname='com.mercadolibre.android.sdk.CLIENT_ID'\nvalue='XXXXXXXXXXXXXXXXL'>\n</meta-data>\n```\n\n----------------------------------------\n\nTITLE: Getting Paired Printers with MPManager SDK\nDESCRIPTION: Shows how to get a list of paired bluetooth printers using the getPairedPrinterDevices method. Returns an MPResponse containing a list of BluetoothDeviceModel objects specifically for printers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/manage-connections.en.md#2025-04-18_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval bluetoothDiscoverDevices = MPManager.bluetooth.discover\n\nbluetoothDiscoverDevices.getPairedPrinterDevices { result ->\n   result\n       .doIfSuccess { printers ->\n           // Work with the list of paired devices\n       }\n       .doIfError { error ->\n           // Manage the error case if necessary\n       }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal BluetoothDiscoverDevices bluetoothDiscoverDevices = MPManager.INSTANCE.getBluetooth().getDiscover();\n\nfinal Function1<MPResponse<List<BluetoothDeviceModel>>, Unit> callback = (final MPResponse<List<BluetoothDeviceModel>> response) -> {\n if (response.getStatus() == ResponseStatus.SUCCESS) {\n   final List<BluetoothDeviceModel> printers = response.getData();\n   // Work with the list of paired devices\n } else {\n   // Manage the error case if necessary\n }\n return Unit.INSTANCE;\n};\n\nbluetoothDiscoverDevices.getPairedPrinterDevices(callback);\n```\n\n----------------------------------------\n\nTITLE: Making a POST Request to Create Payer Token with curl\nDESCRIPTION: This `curl` command demonstrates how to make a POST request to the Mercado Pago API endpoint for creating a payer token. Important headers include Content-Type, platform ID, and Authorization Bearer token. The 'code' parameter must contain a unique code for each request. The API responds with a payer token in JSON format, confirming successful creation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/create-payer-token.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n      'https://api.mercadopago.com/v2/wallet_connect/agreements/<AGREEMENT.ID>/payer_token'\\\n       -H 'Content-Type: application/json' \\\n       -H 'x-platform-id: YOUR_PLATFORM_ID' \\\n       -H 'Authorization: Bearer TEST-3322*********190-03031*********46528954c*********0339910-1*********' \\\n       -d '{\n  \"code\": \"aeecea3e11f2545d1e7790eb6591ff68df74c57930551ed980239f4538a7e530\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Canceling a MercadoPago Payment Reservation in PHP\nDESCRIPTION: This code snippet demonstrates how to cancel a payment reservation in MercadoPago using PHP. It requires the MercadoPago SDK, an access token, and a payment ID. The code sets up a PaymentClient, configures idempotency, and calls the cancel method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/cancel-reserve.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->cancel($payment_id, $request_options);\n  echo $payment->status;\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing MercadoPagoDevicesSDK in Objective-C\nDESCRIPTION: This code shows how to initialize the MercadoPagoDevicesSDK in an Objective-C iOS application. It's recommended to do this in the AppDelegate's didFinishLaunchingWithOptions method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: objective-c\nCODE:\n```\n@import 'MercadoPagoDevicesSDK';\n...\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    ...\n    [[MercadoPagoDevicesSDK shared] execute];\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Create Partial Refund with Mercado Pago .NET SDK\nDESCRIPTION: This snippet demonstrates how to create a partial refund for a payment using the Mercado Pago .NET SDK.  It shows setting the access token, creating a `PaymentRefundClient`, and calling the `RefundAsync` method with the payment ID and the partial refund amount.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/refunds.es.md#2025-04-18_snippet_1\n\nLANGUAGE: .NET\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n \nvar client = new MercadoPago.Client.Payment.PaymentRefundClient();\nMercadoPago.Resource.Payment.PaymentRefund refund = await client.RefundAsync(payment_id, (decimal?)0.0);\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Multiple Items\nDESCRIPTION: This Ruby code demonstrates how to create a MercadoPago preference with multiple items.  It initializes the MercadoPago SDK and defines a `preference_data` hash containing an array of items, each with a title, quantity, currency, and unit price.  It then uses the SDK to create the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n# Create preference data with items\npreference_data = {\n  items: [\n    {\n      title: 'Meu produto 1',\n      quantity: 1,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 75.56\n    },\n    {\n      title: 'Meu produto 2',\n      quantity: 2,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 96.56\n    }\n  ]\n}\n\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n\n```\n\n----------------------------------------\n\nTITLE: Processing Pix Refunds with MercadoPago API in Node.js\nDESCRIPTION: Node.js implementation for creating a payment refund using the MercadoPago SDK. This snippet configures the client with an access token and creates a refund for a specific payment ID with an amount of 100.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, PaymentRefund } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: 'YOUR_ACCESS_TOKEN' });\nconst paymentRefund = new PaymentRefund(client);\n\nrefund.create({\npayment_id: '<PAYMENT_ID>',\nbody: {\namount: 100\n}\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Device ID Header Implementation\nDESCRIPTION: HTTP header implementation for sending Device ID to Mercado Pago servers when creating a payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-chopro.en.md#2025-04-18_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nX-meli-session-id: device_id\n```\n\n----------------------------------------\n\nTITLE: Updating Settlement Report Configuration - Multiple Languages\nDESCRIPTION: API examples showing how to update settlement report configuration including file naming, detail levels, and report frequency. Uses PUT request to /v1/account/settlement_report/config endpoint with JSON payload containing configuration parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PUT \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/config' \\\n    -d '{\n        \"file_name_prefix\": \"settlement-report-USER_ID\",\n        \"show_fee_prevision\": false,\n        \"show_chargeback_cancel\": true,\n        \"detailed\": true,\n        \"coupon_detailed\": true,\n        \"shipping_detail\": true,\n        \"refund_detailed\": true,\n        \"extended\": false,\n        \"frequency\": {\n            \"hour\": 0,\n            \"type\": \"monthly\",\n            \"value\": 1\n        }\n    }'\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$data = '{\n        \"file_name_prefix\": \"settlement-report-USER_ID\",\n        \"show_fee_prevision\": false,\n        \"show_chargeback_cancel\": true,\n        \"detailed\": true,\n        \"coupon_detailed\": true,\n        \"shipping_detail\": true,\n        \"refund_detailed\": true,\n        \"extended\": false,\n        \"frequency\": {\n            \"hour\": 0,\n            \"type\": \"monthly\",\n            \"value\": 1\n        }\n    }';\n$response = Requests::put('https://api.mercadopago.com/v1/account/settlement_report/config', $headers, $data);\n```\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report/config\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"PUT\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nconnection.setDoOutput(true);\n\nString body = \"{\n                    \\\"file_name_prefix\\\": \\\"settlement-report-USER_ID\\\",\n                    \\\"show_fee_prevision\\\": false,\n                    \\\"show_chargeback_cancel\\\": true,\n                    \\\"detailed\\\": true,\n                    \\\"coupon_detailed\\\": true,\n                    \\\"shipping_detail\\\": true,\n                    \\\"refund_detailed\\\": true,\n                    \\\"extended\\\": false,\n                    \\\"frequency\\\": {\n                        \\\"hour\\\": 0,\n                        \\\"type\\\": \\\"monthly\\\",\n                        \\\"value\\\": 1\n                    }\n            }\";\n\ntry(OutputStream os = connection.getOutputStream()) {\n    byte[] input = body.getBytes(\"utf-8\");\n    os.write(input, 0, input.length);\n}\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\ndata = '{\n            \"file_name_prefix\": \"settlement-report-USER_ID\",\n            \"show_fee_prevision\": false,\n            \"show_chargeback_cancel\": true,\n            \"detailed\": true,\n            \"coupon_detailed\": true,\n            \"shipping_detail\": true,\n            \"refund_detailed\": true,\n            \"extended\": false,\n            \"frequency\": {\n                \"hour\": 0,\n                \"type\": \"monthly\",\n                \"value\": 1\n            }\n        }'\n\nresponse = requests.put('https://api.mercadopago.com/v1/account/settlement_report/config', headers=headers, data=data)\n```\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar dataString = '{\n        \"file_name_prefix\": \"settlement-report-USER_ID\",\n        \"show_fee_prevision\": false,\n        \"show_chargeback_cancel\": true,\n        \"detailed\": true,\n        \"coupon_detailed\": true,\n        \"shipping_detail\": true,\n        \"refund_detailed\": true,\n        \"extended\": false,\n        \"frequency\": {\n            \"hour\": 0,\n            \"type\": \"monthly\",\n            \"value\": 1\n        }\n    }';\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report/config',\n    method: 'PUT',\n    headers: headers,\n    body: dataString\n};\n\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\n\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Rendering Status Screen Brick with React Component\nDESCRIPTION: React JSX code that imports and renders the StatusScreen component from the Mercado Pago SDK. It passes the initialization object and callback functions as props.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/status-screen-brick/default-rendering.en.md#2025-04-18_snippet_3\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { StatusScreen } from '@mercadopago/sdk-react';\n\n\n<StatusScreen\n   initialization={initialization}\n   onReady={onReady}\n   onError={onError}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with Mercado Pago API (cURL)\nDESCRIPTION: This cURL command demonstrates how to create a payment using the Mercado Pago API. It includes parameters such as transaction amount, token (obtained from the card form), description, installments, payment method, payer information, external reference, metadata, notification URL, and additional information about the items and payer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.en.md#2025-04-18_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n$ curl https://api.mercadopago.com/v1/payments \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer <ACCESS_TOKEN>' \\\n  -d '\n  {\n\t\"transaction_amount\": 100,\n\t\"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n\t\"description\": \"Title of what you are paying for\",\n\t\"installments\": 1,\n\t\"payment_method_id\": \"visa\",\n\t\"payer\": {\n\t\t\"email\": \"test_user_33759716@testuser.com\"\n\t},\n\t\"external_reference\": \"Reference_1234\",\n\t\"metadata\": {\n\t\t\"key1\": \"value1\",\n\t\t\"key2\": \"value2\"\n\t},\n\t\"notification_url\": \"https://www.your-site.com/webhooks\",\n\t\"additional_info\": {\n\t\t\"items\": [\n\t\t\t{\n\t\t\t\t\"id\": \"item-ID-1234\",\n\t\t\t\t\"title\": \"Title of what you are paying for\",\n\t\t\t\t\"picture_url\": \"https://www.mercadopago.com/org-img/MP3/home/logomp3.gif\",\n\t\t\t\t\"description\": \"Item description\",\n\t\t\t\t\"category_id\": \"others\",\n\t\t\t\t\"quantity\": 1,\n\t\t\t\t\"unit_price\": 100\n\t\t\t}\n\t\t],\n\t\t\"payer\": {\n\t\t\t\"first_name\": \"user-name\",\n\t\t\t\"last_name\": \"user-surname\",\n\t\t\t\"phone\": {\n\t\t\t\t\"area_code\": \"11\",\n\t\t\t\t\"number\": \"4444-4444\"\n\t\t\t},\n\t\t\t\"address\": {\n\t\t\t\t\"street_name\": \"Street\",\n\t\t\t\t\"street_number\": 123,\n\t\t\t\t\"zip_code\": \"5700\"\n\t\t\t}\n\t\t},\n\t\t\"shipments\": {\n\t\t\t\"receiver_address\": {\n\t\t\t\t\"zip_code\": \"5700\",\n\t\t\t\t\"street_name\": \"Street\",\n\t\t\t\t\"street_number\": 123,\n\t\t\t\t\"floor\": 4,\n\t\t\t\t\"apartment\": \"C\"\n\t\t\t}\n\t\t}\n\t},\n\t\"counter_currency\": {\n\t\t\"currency_id\": \"USD\"\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating Payment Amount Using JavaScript Controller\nDESCRIPTION: Example of how to update the payment amount using the Payment Brick controller in JavaScript. The update method preserves the current Brick instance while updating the specified data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/update-data.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet amount = 95;\npaymentBrickController.update({ amount });\n```\n\n----------------------------------------\n\nTITLE: Common Payment Rejection Status Codes\nDESCRIPTION: List of possible status_detail values returned by the API for different rejection scenarios including buyer errors, bank rejections, and fraud prevention.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/plugins/all/improve-approval.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status_detail\": [\n    \"cc_rejected_bad_filled_date\",\n    \"cc_rejected_bad_filled_other\",\n    \"cc_rejected_bad_filled_security_code\",\n    \"cc_rejected_call_for_authorize\",\n    \"cc_rejected_card_disabled\",\n    \"cc_rejected_duplicated_payment\",\n    \"cc_rejected_insufficient_amount\",\n    \"cc_rejected_blacklist\",\n    \"cc_rejected_high_risk\",\n    \"cc_rejected_other_reason\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Gambling-specific Checkout Preferences with Mercado Pago API\nDESCRIPTION: This curl request demonstrates how to create a checkout preference specifically for the gambling industry. It includes required fields for gambling transactions like category_id set to 'lottery', and provides detailed buyer information. The API request structure follows Mercado Pago's specifications for gambling-related transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/industry-data/additional-info.en.md#2025-04-18_snippet_13\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/checkout/preferences' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{access_token}}' \\\n--data-raw '{\n    \"auto_return\": \"approved\",\n    \"back_urls\": {\n        \"failure\": \"https://www.mercadopago.com/home/failure\",\n        \"pending\": \"https://www.mercadopago.com/home/pending\",\n        \"success\": \"https://www.mercadopago.com/home/success\"\n    },\n    \"notification_url\": \"https://webhook.site/xyz\",\n    \"expires\": false,\n    \"external_reference\": \"order-123\",\n    \"date_of_expiration\": \"2026-03-12T12:58:41.425-04:00\",\n    \"items\": [\n        {\n            \"id\": \"1234\",\n            \"currency_id\": \"MXN\",\n            \"title\": \"Producto\",\n            \"picture_url\": \"\",\n            \"description\": \"Descripción de producto\",\n            \"category_id\": \"lottery\",\n            \"quantity\": 1,\n            \"unit_price\": 150\n        }\n    ],\n    \"payer\": {\n        \"phone\": {\n            \"area_code\": \"11\",\n            \"number\": \"619 911 306\"\n        },\n        \"address\": {\n            \"zip_code\": \"52\",\n            \"street_name\": \"Insurgentes Sur\",\n            \"street_number\": 1000\n        },\n        \"identification\": {\n          \"identification_type\": \"-\",\n          \"identification_number\": \"12345678\"\n        },\n        \"email\": \"carlota.castellanos@yourdomain.com\",\n        \"name\": \"Carlota\",\n        \"surname\": \"Castellanos\",\n        \"date_created\": \"\",\n        \"authentication_type\": \"Facebook\",\n        \"registration date\": \"2015-06-02T12:58:41.425-04:00\",\n        \"is_first_purchase_online\": false,\n        \"is_prime_user\": false,\n        \"last_purchase\": \"2020-01-02T12:58:41.425-04:00\"\n    },\n    \"payment_methods\": {\n        \"excluded_payment_methods\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"default_installments\": null,\n        \"default_payment_method_id\": null,\n        \"excluded_payment_types\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"installments\": null\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Complete Bank Slip Payment Creation Request in Mercado Pago API\nDESCRIPTION: Full API request example for creating a bank slip payment with a custom expiration date, payer information, and additional details. The request includes transaction details, payer information, and custom expiration date configured to February 28, 2023.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/bank-slip-en.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'x-platform-id: {{PLATFORM_ID provided by the Partners team}}' \\\n--header 'Authorization: Bearer {{ACCESS_TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"transaction_amount\": 100,\n    \"installments\": 1,\n    \"statement_descriptor\": \"Seller\\'s store\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": {{ID of your Mercado Pago account related to your platform}},\n    \"payment_method_id\": \"bolbradesco\",\n    \"date_of_expiration\": \"2023-02-28T22:59:59.000-04:00\",\n    \"external_reference\": \"Platform identifier\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"description\": \"Seller\\'s product description\",\n    \"payer\": {\n        \"first_name\": \"Name. Example: John\",\n        \"last_name\": \"Last name. Example: Jones\",\n        \"email\": \"Example: test_user_{{$timestamp}}@testuser.com\",\n        \"identification\": {\n            \"type\": \"Document type. Example: CPF\",\n            \"number\": \"Document number. Example: 19119119100\"\n        },\n        \"address\": {\n            \"zip_code\": \"Zip code. Example: 06233-200\",\n            \"street_name\": \"Street name. Example: Av. das Nações Unidas\",\n            \"street_number\": \"Number. Example: 3003\",\n            \"neighborhood\": \"Neighborhood. Example: Bonfim\",\n            \"city\": \"City. Example: Osasco\",\n            \"federal_unit\": \"Federal unit. Example: SP\"\n        }\n    },\n    \"additional_info\": {\n        \"referral_url\": \"Referral USP. Example: www.sellertest123.com\",\n        \"drop_shipping\": true,\n        \"delivery_promise\": \"2022-11-20\",\n        \"contrated_plan\": \"premium\",\n        \"items\": [\n            {\n                \"id\": \"1941\",\n                \"title\": \"Seller\\'s product\",\n                \"description\": \"Description of the seller\\'s product\",\n                \"picture_url\": null,\n                \"category_id\": \"electronics\",\n                \"quantity\": 1,\n                \"unit_price\": 100.00\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Name. Example: John\",\n            \"last_name\": \"Last name. Example: Jones\",\n            \"is_prime_user\": \"1\",\n            \"is_first_purchase_online\": \"1\",\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"Area code. Example: 11\",\n                \"number\": \"Number. Example: 987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"Zip code. Example: 06233-200\",\n                \"street_name\": \"Street name. Example: Av. das Nações Unidas\",\n                \"street_number\": \"Number. Example: 3003\"\n            },\n            \"registration_date\": \"2013-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"0\",\n            \"pick_up_on_seller\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"Zip code. Example: 95630000\",\n                \"street_name\": \"Street name. Example: São Luiz\",\n                \"street_number\": \"Number. Example: 15\",\n                \"floor\": \"Floor (if it\\'s an apartment). Example: Second\",\n                \"apartment\": \"Apartment number (if it\\'s an apartment). Example: 93\"\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Respuesta de creación de preferencia de pago de Mercado Pago (JSON)\nDESCRIPTION: Este snippet muestra la respuesta JSON después de crear una preferencia de pago. Incluye detalles como el ID de la preferencia, URLs de inicio de pago, y toda la información proporcionada en la solicitud.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.es.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"collector_id\": 307467332,\n    \"operation_type\": \"regular_payment\",\n    \"items\": [\n        {\n            \"id\": \"item-ID-1234\",\n            \"picture_url\": \"https://www.mercadopago.com/org-img/MP3/home/logomp3.gif\",\n            \"title\": \"Title of what you are paying for. It will be displayed in the payment process.\",\n            \"description\": \"Item description\",\n            \"category_id\": \"others\",\n            \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n            \"quantity\": 1,\n            \"unit_price\": 100\n        }\n    ],\n    \"payer\": {\n        \"name\": \"user-name\",\n        \"surname\": \"user-surname\",\n        \"email\": \"test_user_33759716@testuser.com\",\n        \"date_created\": \"\",\n        \"phone\": {\n            \"area_code\": \"11\",\n            \"number\": \"4444-4444\"\n        },\n        \"identification\": {\n            \"type\": \"DNI\",\n            \"number\": \"12345678\"\n        },\n        \"address\": {\n            \"street_name\": \"Street\",\n            \"street_number\": 123,\n            \"zip_code\": \"5700\"\n        }\n    },\n    \"back_urls\": {\n        \"success\": \"https://www.success.com\",\n        \"pending\": \"http://www.pending.com\",\n        \"failure\": \"http://www.failure.com\"\n    },\n    \"auto_return\": \"approved\",\n    \"payment_methods\": {\n        \"excluded_payment_methods\": [\n            {\n                \"id\": \"master\"\n            }\n        ],\n        \"excluded_payment_types\": [\n            {\n                \"id\": \"ticket\"\n            }\n        ],\n        \"installments\": null,\n        \"default_payment_method_id\": null,\n        \"default_installments\": null\n    },\n    \"client_id\": \"963\",\n    \"marketplace\": \"NONE\",\n    \"marketplace_fee\": 0,\n    \"shipments\": {\n        \"receiver_address\": {\n            \"zip_code\": \"5700\",\n            \"street_number\": 123,\n            \"street_name\": \"Street\",\n            \"floor\": \"4\",\n            \"apartment\": \"C\"\n        }\n    },\n    \"notification_url\": \"https://www.your-site.com/ipn\",\n    \"counter_currency\": {\n        \"currency_id\": \"USD\"\n    },\n    \"external_reference\": \"Reference_1234\",\n    \"additional_info\": \"\",\n    \"expires\": false,\n    \"expiration_date_from\": null,\n    \"expiration_date_to\": null,\n    \"date_created\": \"2018-04-17T09:12:45.145-04:00\",\n    \"id\": \"307467332-2c69be5f-4317-405b-85d2-29152f33e852\",\n    \"init_point\": \"https://www.mercadopago.com/mlm/checkout/start?pref_id=307467332-2c69be5f-4317-405b-85d2-29152f33e852\",\n    \"sandbox_init_point\": \"https://sandbox.mercadopago.com/mlm/checkout/pay?pref_id=307467332-2c69be5f-4317-405b-85d2-29152f33e852\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Card Payment Amount using JavaScript\nDESCRIPTION: This snippet demonstrates how to update the payment amount in Card Payment Brick using JavaScript. It uses the cardPaymentBrickController.update method to set a new amount value.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/update-data.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet amount = 95;\ncardPaymentBrickController.update({ amount });\n```\n\n----------------------------------------\n\nTITLE: Successfully Processed Full Refund Response in JSON\nDESCRIPTION: This JSON response represents a successful full refund request with status code 200. It includes details like refund ID, payment ID, amount refunded, source of the refund, and creation date.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/refund-full-amount.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"id\": 1242469925,\n        \"payment_id\": 51617407254,\n        \"amount\": 25,\n        \"source\": {\n            \"id\": 783789745,\n            \"name\": \"Test Test\",\n            \"type\": \"collector\"\n        },\n        \"date_created\": \"2022-11-18T08:48:06.768-04:00\",\n        \"status\": \"approved\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Adding New Cards to a Customer in Mercado Pago with Java\nDESCRIPTION: Java implementation for adding a new card to a customer in Mercado Pago. Uses the SDK to retrieve a customer and create a card with the specified token and payment method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.es.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nCustomerClient customerClient = new CustomerClient();\nCustomerCardClient customerCardClient = new CustomerCardClient();\n\nCustomer customer = customerClient.get(\"247711297-jxOV430go9fx2e\");\n\nCustomerCardIssuer issuer = CustomerCardIssuer.builder()\n   .id(\"3245612\")\n   .build();\n\nCustomerCardCreateRequest cardCreateRequest = CustomerCardCreateRequest.builder()\n   .token(\"9b2d63e00d66a8c721607214cedaecda\")\n   .issuer(issuer)\n   .paymentMethodId(\"debit_card\")\n   .build();\n\ncustomerCardClient.create(customer.getId(), cardCreateRequest);\n```\n\n----------------------------------------\n\nTITLE: Generating HMAC Signature in Node.js\nDESCRIPTION: Code snippet demonstrating how to generate an HMAC-SHA256 signature in Node.js using the crypto module.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.es.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst crypto = require('crypto');\nconst cyphedSignature = crypto\n    .createHmac('sha256', secret)\n    .update(signatureTemplateParsed)\n    .digest('hex'); \n```\n\n----------------------------------------\n\nTITLE: Configuring Payer Information\nDESCRIPTION: Example of configuring payer information for the review step, which includes the buyer's email address.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/add-confirmation-step.en.md#2025-04-18_snippet_2\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n  // ...\n  initialization: {\n    payer: {\n      email: \"<EMAIL>\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Mercado Pago Wallet with Callbacks in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Mercado Pago Wallet instance with auxiliary callbacks in JavaScript. It includes onReady, onSubmit, and onError callbacks.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/auxiliary-callbacks.es.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nmp.bricks().create(\"wallet\", \"wallet_container\", {\n   initialization: {\n       preferenceId: \"<PREFERENCE_ID>\",\n       redirectMode: \"self\",\n   },\n   callbacks: {\n       onReady: () => {},\n       onSubmit: () => {},\n       onError: (error) => console.error(error),\n     },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Access Token with Authorization Code in Java\nDESCRIPTION: This Java code snippet shows how to create OAuth credentials using the Authorization code flow. It utilizes the OauthClient class to send the authorization code to the Mercado Pago API and generate the Access Token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/creation.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nOauthClient client = new OauthClient();\n\nString authorizationCode = \"TG-XXXXXXXX-241983636\";\nclient.createCredential(authorizationCode, null);\n```\n\n----------------------------------------\n\nTITLE: Get Payment Preference\nDESCRIPTION: This code retrieves an existing payment preference using its ID. It uses the `preference().get()` method to fetch the preference data from the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.es.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef index(req, **kwargs):\n        preference_response = sdk.preference().get(\"PREFERENCE_ID\")\n\n        return json.dumps(preference_response[\"response\"], indent=4)\n```\n\n----------------------------------------\n\nTITLE: Setting Header for Network Transaction ID\nDESCRIPTION: Header configuration to request network transaction ID in the response\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/network-transaction-id.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n--header 'X-Expand-Responde-Nodes: gateway.reference'\\\n```\n\n----------------------------------------\n\nTITLE: Response Format for Reserved Payment in Mercado Pago\nDESCRIPTION: JSON response structure when a payment is successfully authorized but not captured. The response includes the payment ID, status as 'authorized', status_detail as 'pending_capture', and captured field set to false.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/make-value-reserve.en.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\"id\": PAYMENT_ID,\n...\n\"status\": \"authorized\",\n\"status_detail\": \"pending_capture\",\n...\n\"captured\": false,\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies via CocoaPods - Ruby\nDESCRIPTION: This code snippet illustrates the command used to install the specified dependencies, ensuring that the Mercado Pago SDK is properly integrated into the project.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ios.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\n$ pod install\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with MercadoPago SDK (C#)\nDESCRIPTION: This C# snippet creates a payment using data from the request and the MercadoPago SDK. It sets the access token, retrieves payment parameters from the request, and creates a payment asynchronously using PaymentClient, printing the status to the console.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.es.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\nvar paymentRequest = new PaymentCreateRequest\n{\n   TransactionAmount = decimal.Parse(Request[\"transactionAmount\"]),\n   Token = Request[\"token\"],\n   Installments = int.Parse(Request[\"installments\"]),\n   PaymentMethodId = Request[\"paymentMethodId\"],\n   Payer = new PaymentPayerRequest\n   {\n       Email = Request[\"payer\"][\"email\"],\n       Identification = new IdentificationRequest\n       {\n           Type = Request[\"payer\"][\"identification\"][\"type\"],\n           Number = Request[\"payer\"][\"identification\"][\"number\"],\n       },\n   },\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest);\n\nConsole.WriteLine(payment.Status);\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Card Payment with MercadoPago API in curl\nDESCRIPTION: This curl request demonstrates how to create a payment through the MercadoPago API. It sends payment information including amount, payment method details, and payer information to the /v1/orders endpoint. The X-Idempotency-Key header is required to prevent duplicate transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.en.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    'https://api.mercadopago.com/v1/orders'\\\n    -H 'Content-Type: application/json' \\\n       -H 'X-Idempotency-Key: {{SOME_UNIQUE_VALUE}}' \\\n       -H 'Authorization: Bearer {{YOUR_ACCESS_TOKEN}}' \\\n    -d '{\n    \"type\": \"online\",\n    \"processing_mode\": \"automatic\",\n    \"total_amount\": \"200.00\",\n    \"external_reference\": \"ext_ref_1234\",\n    \"payer\": {\n        \"email\": \"{{EMAIL}}\"\n    },\n    \"transactions\": {\n        \"payments\": [\n            {\n                \"amount\": \"200.00\",\n                \"payment_method\": {\n                    \"id\": \"master\",\n                    \"type\": \"credit_card\",\n                    \"token\": \"1223123\",\n                    \"installments\": 1\n                }\n            }\n        ]\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Customizing CSS Variables in React for Mercado Pago\nDESCRIPTION: This React code snippet illustrates how to implement CSS variable customizations for Mercado Pago Bricks within a React component.  The `customization` object is used to define the desired `textPrimaryColor` and `textSecondaryColor` properties.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/modify-variables.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\n```react-jsx\nconst customization = {\n visual: {\n   style: {\n     customVariables: {\n       textPrimaryColor: 'string'\n       textSecondaryColor: 'string'\n     }\n   }\n }\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Obteniendo Información del Dispositivo en Android\nDESCRIPTION: Métodos disponibles en Java para obtener la información del dispositivo en diferentes formatos (objeto Device, Map o JSON String) utilizando el SDK de Mercado Pago para Android.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-chopro.es.md#2025-04-18_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nDevice device = DeviceSDK.getInstance().getInfo() // devuelve un objeto Device, serializable\nMap deviceMap = DeviceSDK.getInstance().getInfoAsMap()  // devuelve un Map<String, Object>\nString jsonString = DeviceSDK.getInstance().getInfoAsJsonString() // devuelve un String de tipo Json\n```\n\n----------------------------------------\n\nTITLE: Creating Settlement Report Configuration - PHP Implementation\nDESCRIPTION: PHP implementation using the Requests library to create a new settlement report configuration via MercadoPago's API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.es.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$data = '{\n            \"file_name_prefix\": \"settlement-report-USER_ID\",\n            \"show_fee_prevision\": false,\n            \"show_chargeback_cancel\": true,\n            \"include_withdraw\": true,\n            \"coupon_detailed\": true,\n            \"shipping_detail\": true,\n            \"refund_detailed\": true,\n            \"display_timezone\": \"GMT-04\",\n            \"notification_email_list\": [\n                \"example@email.com\",\n                \"john@example.com\"\n            ],\n            \"frequency\": {\n                \"hour\": 0,\n                \"type\": \"monthly\",\n                \"value\": 1\n            },\n            \"columns\": [\n                {\n                    \"key\": \"TRANSACTION_DATE\"\n                },\n                {\n                    \"key\": \"SOURCE_ID\"\n                },\n                {\n                    \"key\": \"EXTERNAL_REFERENCE\"\n                }\n            ]\n        }';\n$response = Requests::post('https://api.mercadopago.com/v1/account/settlement_report/config', $headers, $data);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Status via Mercado Pago API\nDESCRIPTION: This snippet demonstrates how to check the status of a payment using the Mercado Pago API. The 'status' field indicates if the payment was approved, while 'status_detail' provides more information, including reasons for rejection.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Get Payment](/developers/en/reference/payments/_payments_id/get)\n```\n\n----------------------------------------\n\nTITLE: Generating Card Token on Frontend\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Mercado Pago SDK JS to capture card details from a form and generate a card token. The token replaces sensitive card information with a randomly generated code, enhancing security during the transaction. The generated token is then submitted with the form to the backend.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/integration.es.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n   const formElement = document.getElementById('form-checkout');\n    formElement.addEventListener('submit', createCardToken);\n\n    async function createCardToken(event) {\n      try {\n        const tokenElement = document.getElementById('token');\n        if (!tokenElement.value) {\n          event.preventDefault();\n          const token = await mp.fields.createCardToken({\n            cardholderName: document.getElementById('form-checkout__cardholderName').value,\n            identificationType: document.getElementById('form-checkout__identificationType').value,\n            identificationNumber: document.getElementById('form-checkout__identificationNumber').value,\n          });\n          tokenElement.value = token.id;\n          formElement.requestSubmit();\n        }\n      } catch (e) {\n        console.error('error creating card token: ', e)\n      }\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Get Refunds List with Mercado Pago Node.js SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a list of refunds for a payment using the Mercado Pago Node.js SDK. It initializes the `MercadoPagoConfig` with an access token and then uses the `PaymentRefund` class to list the refunds, specifying the payment ID. The placeholder `<PAYMENT_ID>` should be replaced with the actual payment ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/refunds.en.md#2025-04-18_snippet_3\n\nLANGUAGE: node.js\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token', options: { timeout: 5000 } });\n\nconst refund = new PaymentRefund(client);\n\nrefund.list({\n\tpayment_id: '<PAYMENT_ID>'\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creando un pago con Fintoc usando cURL\nDESCRIPTION: Este snippet demuestra cómo crear un pago utilizando Fintoc como método de pago mediante una solicitud cURL a la API de Mercado Pago. Define los detalles del pago en el cuerpo de la solicitud.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-simplified.es.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer ' \\\n--data-raw '{\n    \"transaction_amount\": 2000,\n    \"payment_method_id\": \"fintoc\",\n    \"description\": \"description\",\n    \"callback_url\": \"https://www.your-site.com\",\n    \"point_of_interaction\": {\n      \"type\": \"CHECKOUT\",\n      \"sub_type\": \"INTER_PSP\"\n    },\n    \"payer\": {\n        \"email\": \"mail@mail.com.br\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Hiding Value Proposition Text - JavaScript\nDESCRIPTION: This snippet demonstrates how to hide the value proposition text below the button in the Wallet Brick by setting the hideValueProp property to true in the customization settings.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/change-appearance.en.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n\t   theme: 'default',\n        customStyle: {\n            hideValueProp: true,\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with MercadoPago SDK (Node.js)\nDESCRIPTION: This Node.js snippet creates a payment using data received in the request body and the MercadoPago SDK.  It saves the payment and returns a JSON response with status, status detail and ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.es.md#2025-04-18_snippet_7\n\nLANGUAGE: node.js\nCODE:\n```\nvar mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nmercadopago.payment.save(req.body)\n  .then(function(response) {\n    const { status, status_detail, id } = response.body;\n    res.status(response.status).json({ status, status_detail, id });\n  })\n  .catch(function(error) {\n    console.error(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference in Node.js\nDESCRIPTION: This Node.js snippet shows how to create a payment preference object and send it to Mercado Pago to retrieve a preference ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.en.md#2025-04-18_snippet_12\n\nLANGUAGE: node\nCODE:\n```\n// Create a preference object\nlet preference = {\n  // o \"purpose\": \"wallet_purchase\" only allows logged payments\n  // to allow guest payments you can omit this property\n  \"purpose\": \"wallet_purchase\",\n  \"items\": [\n    {\n      \"id\": \"item-ID-1234\",\n      \"title\": \"Meu produto\",\n      \"quantity\": 1,\n      \"unit_price\": 75\n    }\n  ]\n};\n\nmercadopago.preferences.create(preference)\n  .then(function (response) {\n    // This value is the preferenceId that will be sent to the Brick at startup\n    const preferenceId = response.body.id;\n  }).catch(function (error) {\n    console.log(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Associating Google Ads Tag with Mercado Pago Preference\nDESCRIPTION: This code snippet shows how to associate a Google Ads tag with a Mercado Pago preference using the Python SDK. It extends the preference data with a 'tracks' array, specifying the 'google_ad' type and including the Conversion ID and Conversion Label. Replace `CONVERSION_ID` and `CONVERSION_LABEL` with your specific Google Ads tag details. This enables conversion tracking in Google Ads for transactions originating from Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/preferences.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"# Associar sua tag do Google ads\npreference_data = {\n    # ...\n    \"tracks\": [\n        {\n            \"type\": \"google_ad\",\n            \"values\": {\n                \"conversion_id\": \"CONVERSION_ID\",\n                \"conversion_label\": \"CONVERSION_LABEL\"\n            }\n        }\n    ]\n}\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Back URLs in Mercado Pago SDK - Node.js\nDESCRIPTION: This Node.js snippet shows how to define back URLs using the Mercado Pago SDK for redirecting users after payment, with conditions based on payment status. There are no external dependencies aside from the MercadoPago Node.js SDK. Key parameters include success, failure, pending URLs, and auto_return for enabling automatic redirection.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/redirection.en.md#2025-04-18_snippet_1\n\nLANGUAGE: Node.js\nCODE:\n```\nvar preference = {}\\npreference = {\\n  // ...\\n  \\\"back_urls\\\": {\\n        \\\"success\\\": \\\"https://www.seu-site/success\\\",\\n        \\\"failure\\\": \\\"http://www.seu-site/failure\\\",\\n        \\\"pending\\\": \\\"http://www.seu-site/pending\\\"\\n    },\\n    \\\"auto_return\\\": \\\"approved\\\",\\n  // ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Respuesta JSON del pago con boleto bancario\nDESCRIPTION: Ejemplo de respuesta JSON al crear un pago con boleto bancario. Muestra el estado pendiente y la URL externa para las instrucciones de pago que debe ser mostrada al comprador.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mlb.es.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n {\n    ...,\n    \"id\": 5466310457,\n    \"status\": \"pending\",\n    \"status_detail\": \"pending_waiting_payment\",\n    ...,\n    \"transaction_details\": {\n        \"net_received_amount\": 0,\n        \"total_paid_amount\": 100,\n        \"overpaid_amount\": 0,\n        \"external_resource_url\": \"https://www.mercadopago.com/mlb/payments/ticket/helper?payment_id=123456789&payment_method_reference_id= 123456789&caller_id=123456\",\n        \"installment_amount\": 0,\n        \"financial_institution\": null,\n        \"payment_method_reference_id\": \"1234567890\"\n    }\n }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Shipping Cost in JSON for MercadoPago API\nDESCRIPTION: This JSON snippet configures shipping costs by assigning a freight amount and a mode to the shipments parameter. Key attributes include 'cost', which represents the amount charged for shipping, and 'mode', which is set to 'not_specified'. The snippet is used in a POST request to the /checkout/preferences endpoint, enabling merchants to handle shipping costs separately in payment transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/shipping-cost.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"shipments\":{\n\"cost\": 1000,\n\"mode\": \"not_specified\"\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Financial Institutions with cURL\nDESCRIPTION: This cURL request retrieves a list of available financial institutions for Open Finance payments. It requires an access token and supports optional query parameters for filtering results.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/advanced-openFinance.en.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request GET \\\n  --url https://api.mercadopago.com/open-banking/payments/v1/banks \\\n  --header 'Authorization: Bearer <ENV_ACCESS_TOKEN>'\n```\n\n----------------------------------------\n\nTITLE: Creating SPEI Transfer Payment with cURL\nDESCRIPTION: Creates a SPEI bank transfer payment using MercadoPago API via cURL. The command sends a POST request to the payments endpoint with transaction amount, product description, payment method, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.es.md#2025-04-18_snippet_11\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n-H 'Content-Type: application/json' \\\n--d '{\n    \"transaction_amount\": 5000,\n    \"description\": \"Título del producto\",\n    \"payment_method_id\": \"clabe\",\n    \"payer\": {\n        \"email\": \"test_user_19549678@testuser.com\",\n        \"entity_type\": \"individual\",\n        \"first_name\": \"John\",\n        \"last_name\": \"Doe\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Payment Response JSON with Redirection URL\nDESCRIPTION: Sample JSON response after payment creation showing the external_resource_url field that should be used for redirection to Mercado Pago's payment screen with Fintoc integration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-simplified.en.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   …\n        \"data\": {\n            \"reference_id\": \"82512912106\",\n            \"external_reference_id\": \"pi_2nGAKKSDoWG8ALR8_sec_Vfwt2rhBdjxYLhVpWupimnnp\",\n            // URL to perform the redirection\n            \"external_resource_url\": \"https://mercadopago.cl/banktransfer...\" \n        }\n   …\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a MercadoPago Notifier using cURL\nDESCRIPTION: This cURL command deletes a specific notifier in MercadoPago's system. It requires the notifier_id and an authorization token. A successful request will not return a response, while an error will return a 404 status code.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/deactivation.en.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request DELETE 'https://api.mercadopago.com/v1/reports/{{notifier_id}}' \\\n--header 'Authorization: Bearer {{TOKEN}}'\n```\n\n----------------------------------------\n\nTITLE: Initializing MercadoPagoDevicesSDK in Objective-C\nDESCRIPTION: Initializes the MercadoPagoDevicesSDK in the iOS application's AppDelegate didFinishLaunchingWithOptions method using Objective-C. This setup captures device information for security validation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.en.md#2025-04-18_snippet_8\n\nLANGUAGE: objective-c\nCODE:\n```\n@import 'MercadoPagoDevicesSDK';\n...\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    ...\n    [[MercadoPagoDevicesSDK shared] execute];\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Deep Link Handler Implementation\nDESCRIPTION: Complete implementation of deep link handling for iOS, including Safari View Controller management.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-expo-go.en.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n\tStatusBar\n} from \"expo-status-bar\";\nimport {\n\tStyleSheet,\n\tButton,\n\tView,\n\tLinking,\n\tPlatform\n} from \"react-native\";\nimport {\n\topenBrowserAsync\n} from \"expo-web-browser\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport {\n\tuseEffect\n} from \"react\";\nexport default function App() {\n\tuseEffect(() => {\n\t\tLinking.addEventListener(\"url\", (event) => {\n\t\t\tconst {\n\t\t\t\turl\n\t\t\t} = event;\n\t\t\tif (url !== null && url.includes(\"myapp://\")) {\n\t\t\t\tPlatform.OS === \"ios\" && WebBrowser.dismissBrowser();\n\t\t\t}\n\t\t});\n\t}, []);\n\tconst url = \"https://url-to-open.com\";\n\treturn ( <\n\t\tView style = {\n\t\t\tstyles.container\n\t\t} >\n\t\t<\n\t\tButton title = \"Open Browser\"\n\t\tonPress = {\n\t\t\t() => openBrowserAsync(url)\n\t\t}\n\t\t/> <\n\t\tStatusBar style = \"auto\" / > < /View>\n\t);\n}\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tbackgroundColor: \"#fff\",\n\t\talignItems: \"center\",\n\t\tjustifyContent: \"center\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Resolving QR Code with cURL Request\nDESCRIPTION: This cURL command sends a GET request to Mercado Pago's API to resolve the QR code. It requires the wallet's access token for authentication.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/interoperable-accepting-flow-test.en.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/instore/v2/beta/external/resolve?data=00020101021143530016com.mercadolibre0129https%3A%2F%2Fmpago.la%2Fpos%2F2602959950150011273265943055204970053030325802AR5917Prueba%20Perfumeria6004CABA63047720' \\\n--header 'Authorization: Bearer {access_token_wallet}'\n```\n\n----------------------------------------\n\nTITLE: Ejecutando script SFTP para carga de archivos en Mercado Pago\nDESCRIPTION: Este comando ejecuta un script SFTP para la carga automática de archivos. Se utiliza para iniciar el proceso de carga automatizada en el servidor SFTP de Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/upload-a-file.es.md#2025-04-18_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nshell> sftp -b batch_script_file_name username@sftp.mercadolibre.io\n```\n\n----------------------------------------\n\nTITLE: Setting Integrator and Platform IDs in Java for Mercado Pago SDK\nDESCRIPTION: This code snippet illustrates how to set the platform ID and integrator ID using the Mercado Pago Java SDK. It enables developers to identify their integrations for metrics and benefits.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/metrics/integration-metrics.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMercadoPago.SDK.setPlatformId(\"PLATFORM_ID\");\nMercadoPago.SDK.setIntegratorId(\"INTEGRATOR_ID\");\n```\n\n----------------------------------------\n\nTITLE: Generating HMAC Signature in Java\nDESCRIPTION: A Java code snippet that demonstrates how to create an HMAC SHA-256 signature in hexadecimal format using the HmacUtils class to validate Mercado Pago webhook notifications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.en.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nString cyphedSignature = new HmacUtils(\"HmacSHA256\", secret).hmacHex(signedTemplate);\n```\n\n----------------------------------------\n\nTITLE: Yape Token API Response Example\nDESCRIPTION: Example JSON response from the Yape token generation API. The response includes various token details such as card information, security codes, and identification data that will be used in the payment creation process.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"live_mode\": true,\n    \"luhn_validation\": null,\n    \"require_esc\": null,\n    \"cloned\": false,\n    \"cardholder\": {\n        \"identification\": {\n            \"number\": null,\n            \"type\": null,\n            \"subtype\": null\n        },\n        \"name\": \"yape\"\n    },\n    \"security_code_id\": 8069792005119486812,\n    \"security_code_length\": 6,\n    \"card_number_length\": 9,\n    \"expiration_month\": 5,\n    \"expiration_year\": 2024,\n    \"card_present_id\": null,\n    \"card_id\": null,\n    \"client_id\": 7775327892346559,\n    \"present\": null,\n    \"id\": \"45d013f72bf42717a1625f4c508fc20f\",\n    \"card_number_id\": \"FFTSHQTOSJTXGFVFGJKCBAIVOUISTFZBDRTQWLYJ\",\n    \"creation_date\": null,\n    \"due_date\": null,\n    \"last_modified_date\": null,\n    \"product_id\": null,\n    \"trust_level\": \"unknown\",\n    \"public_key\": \"APP_USR-352587ca-674b-4ae4-a348-8583ab39b4ac\",\n    \"site_id\": \"MPE\",\n    \"status\": \"active\",\n    \"transaction_id\": null,\n    \"trunc_card_number\": null,\n    \"used_date\": null,\n    \"bin\": \"111111\",\n    \"version\": 0,\n    \"client_header\": null,\n    \"first_six_digits\": \"111111\",\n    \"last_four_digits\": \"6789\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deactivating Automatic Report Generation using Python\nDESCRIPTION: This Python code snippet demonstrates how to use the Requests library to send a DELETE request to the Mercado Pago API for deactivating report generation, including the appropriate headers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.es.md#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport requests\\n\\nheaders = {\\n    'accept': 'application/json',\\n    'content-type': 'application/json',\\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\\n}\\n\\nresponse = requests.delete('https://api.mercadopago.com/v1/account/release_report/schedule', headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods for Swift Project Management\nDESCRIPTION: These Bash commands install CocoaPods, a dependency manager for Swift and Objective-C projects. Requires Ruby, and sudo may be needed based on the Ruby setup.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ios.es.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo gem install cocoapods\n$ pod setup\n```\n\n----------------------------------------\n\nTITLE: Successful Coupon Validation Response\nDESCRIPTION: This JSON response represents a successful coupon validation, indicating that the coupon is linked to an active discount. It includes details about the discount value, type (e.g., percentage), maximum cap, and applicable payment amounts. The response also provides a customer-facing description and a link to legal terms.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/coupon-validation-responses.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status\": \"success\",\n    \"description\": \"Description of the coupon displayed to customers, for example, in interfaces, invoices, or receipts\",\n    \"legal_terms\": \"URL of the terms and conditions for legal purposes\",\n    \"details\": {\n       \"value\": 10.0,\n       \"type\": \"percent\",\n       \"cap\": 1000.0,\n       \"min_payment_amount\": 100.0,\n       \"max_payment_amount\": 10000.0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Payment Response with 3DS Challenge Information\nDESCRIPTION: Example JSON response showing payment status and 3DS Challenge information including external resource URL and CREQ token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.en.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 52044997115,\n    ...\n    \"status\": \"pending\",\n    \"status_detail\": \"pending_challenge\",\n    ...\n    \"three_ds_info\":\n    {\n        \"external_resource_url\": \"https://acs-public.tp.mastercard.com/api/v1/browser_Challenges\",\n        \"creq\": \"eyJ0aHJlZURTU2VydmVyVHJhbnNJRCI6ImJmYTVhZjI0LTliMzAtNGY1Yi05MzQwLWJkZTc1ZjExMGM1MCIsImFjc1RyYW5zSUQiOiI3MDAwYTI2YS1jYWQ1LTQ2NjQtOTM0OC01YmRlZjUwM2JlOWYiLCJjaGFsbGVuZ2VXaW5kb3dTaXplIjoiMDQiLCJtZXNzYWdlVHlwZSI6IkNSZXEiLCJtZXNzYWdlVmVyc2lvbiI6IjIuMS4wIn0\"\n    },\n    \"owner\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Canceled Payment Intent Status Notification - JSON\nDESCRIPTION: This JSON object represents the 'CANCELED' state of a payment intent, indicating that the transaction has been canceled. It includes essential transaction details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/notifications-pdv.en.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\"amount\": 100,\n\"caller_id\": 09876543,\n\"client_id\": 1234567890,\n\"created_at\": \"2021-11-29 17:10:37\",\n\"id\": \"abcdef123-8ab5-4139-9aa3-abcd123\",\n\"state\": \"CANCELED\",\n\"additional_info\": {\n  \"external_reference\": \"information\",\n  \"ticket_number\": \"39SHDKKDJ\"\n}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"amount\": 100,\n\"caller_id\": 09876543,\n\"client_id\": 1234567890,\n\"created_at\": \"2021-11-29 17:10:37\",\n\"id\": \"abcdef123-8ab5-4139-9aa3-abcd123\",\n\"state\": \"CANCELED\",\n\"additional_info\": {\n  \"external_reference\": \"information\"\n}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n \"amount\": 100,\n \"caller_id\": 09876543,\n \"client_id\": 1234567890,\n \"created_at\": \"2021-11-29 17:10:37\",\n \"id\": \"abcdef123-8ab5-4139-9aa3-abcd123\",\n \"state\": \"CANCELED\",\n \"additional_info\": {\n   \"external_reference\": \"information\"\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating an Order with MercadoPago SDK - Node.js\nDESCRIPTION: This Node.js snippet demonstrates how to update order details such as external reference, item quantity, and other specifics using the MercadoPago SDK. Dependencies include 'MercadoPagoConfig' and 'MerchantOrder'. An access token is needed for authentication and the key parameter is 'merchantOrderId'. Updated order details are returned as output.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/orders.en.md#2025-04-18_snippet_3\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst merchantOrder = new MerchantOrder(client);\n\nmerchantOrder.update({ merchantOrderId: '<MERCHANT_ORDER_ID>',  body: {\n\texternal_reference: '<EXTERNAL_REFERENCE>',\n\tpreference_id: '<PREFERENCE_ID>',\n\tcollector: {\n\t\tid: 1234\n\t},\n\tsite_id: '<SITE_ID>',\n\titems: [\n\t\t{\n\t\t\tid: '<ITEM_ID>',\n\t\t\tquantity: 1234,\n\t\t}\n\t],\n\tapplication_id: '<APPLICATION_ID>',\n\tversion: 12.34\n}  }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Configuring MercadoPago Credentials in JavaScript\nDESCRIPTION: Asynchronous initialization of MercadoPago SDK using import and loadMercadoPago function\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.es.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loadMercadoPago } from \"@mercadopago/sdk-js\";\n\nawait loadMercadoPago();\nconst mp = new window.MercadoPago(\"YOUR_PUBLIC_KEY\");\n```\n\n----------------------------------------\n\nTITLE: Updating Settlement Report Configuration via MercadoPago API\nDESCRIPTION: This code snippet demonstrates how to update the configuration settings for settlement reports using the MercadoPago API. It includes options for file naming, report details, timezone, notification emails, and report frequency.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.en.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PUT \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/config' \\\n    -d '{\n            \"file_name_prefix\": \"settlement-report-USER_ID\",\n            \"show_fee_prevision\": false,\n            \"show_chargeback_cancel\": true,\n            \"coupon_detailed\": true,\n            \"include_withdraw\": true,\n            \"shipping_detail\": true,\n            \"refund_detailed\": true,\n            \"display_timezone\": \"GMT-04\",\n            \"notification_email_list\": [\n                \"example@email.com\",\n                \"john@example.com\"\n            ],\n            \"frequency\": {\n                \"hour\": 0,\n                \"type\": \"monthly\",\n                \"value\": 1\n            },\n            \"columns\": [\n                {\n                    \"key\": \"TRANSACTION_DATE\"\n                },\n                {\n                    \"key\": \"SOURCE_ID\"\n                },\n                {\n                    \"key\": \"EXTERNAL_REFERENCE\"\n                }\n            ]\n        }'\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$data = '{\n        \"file_name_prefix\": \"settlement-report-USER_ID\",\n        \"show_fee_prevision\": false,\n        \"show_chargeback_cancel\": true,\n        \"coupon_detailed\": true,\n        \"include_withdraw\": true,\n        \"shipping_detail\": true,\n        \"refund_detailed\": true,\n        \"display_timezone\": \"GMT-04\",\n        \"notification_email_list\": [\n            \"example@email.com\",\n            \"john@example.com\"\n        ],\n        \"frequency\": {\n            \"hour\": 0,\n            \"type\": \"monthly\",\n            \"value\": 1\n        },\n         \"columns\": [\n            {\n                \"key\": \"TRANSACTION_DATE\"\n            },\n            {\n                \"key\": \"SOURCE_ID\"\n            },\n            {\n                \"key\": \"EXTERNAL_REFERENCE\"\n            }\n        ]\n    }';\n$response = Requests::put('https://api.mercadopago.com/v1/account/settlement_report/config', $headers, $data);\n```\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report/config\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"PUT\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nconnection.setDoOutput(true);\n\nString body = \"{\n                \\\"file_name_prefix\\\": \\\"settlement-report-USER_ID\\\",\n                \\\"show_fee_prevision\\\": false,\n                \\\"show_chargeback_cancel\\\": true,\n                \\\"coupon_detailed\\\": true,\n                \\\"include_withdraw\\\": true,\n                \\\"shipping_detail\\\": true,\n                \\\"refund_detailed\\\": true,\n                \\\"display_timezone\\\": \\\"GMT-04\\\",\n                \\\"notification_email_list\\\": [\n                    \\\"example@email.com\\\",\n                    \\\"john@example.com\\\",\n                ],\n                \\\"frequency\\\": {\n                    \\\"hour\\\": 0,\n                    \\\"type\\\": \\\"monthly\\\",\n                    \\\"value\\\": 1\n                },\n                \\\"columns\\\": [\n                    { \\\"key\\\": \\\"TRANSACTION_DATE\\\" },\n                    { \\\"key\\\": \\\"SOURCE_ID\\\" },\n                    { \\\"key\\\": \\\"EXTERNAL_REFERENCE\\\" },\n                ]\n            }\";\n\ntry(OutputStream os = connection.getOutputStream()) {\n    byte[] input = body.getBytes(\"utf-8\");\n    os.write(input, 0, input.length);\n}\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN',\n}\n\ndata = '{\n            \"file_name_prefix\": \"settlement-report-USER_ID\",\n            \"show_fee_prevision\": false,\n            \"show_chargeback_cancel\": true,\n            \"coupon_detailed\": true,\n            \"include_withdraw\": true,\n            \"shipping_detail\": true,\n            \"refund_detailed\": true,\n            \"display_timezone\": \"GMT-04\",\n            \"notification_email_list\": [\n                \"example@email.com\",\n                \"john@example.com\"\n            ],\n            \"frequency\": {\n                \"hour\": 0,\n                \"type\": \"monthly\",\n                \"value\": 1\n            },\n            \"columns\": [\n                {\n                    \"key\": \"TRANSACTION_DATE\"\n                },\n                {\n                    \"key\": \"SOURCE_ID\"\n                },\n                {\n                    \"key\": \"EXTERNAL_REFERENCE\"\n                }\n            ]\n        }'\n\nresponse = requests.put('https://api.mercadopago.com/v1/account/settlement_report/config', headers=headers, data=data)\n```\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar dataString = '{\n        \"file_name_prefix\": \"settlement-report-USER_ID\",\n        \"show_fee_prevision\": false,\n        \"show_chargeback_cancel\": true,\n        \"coupon_detailed\": true,\n        \"include_withdraw\": true,\n        \"shipping_detail\": true,\n        \"refund_detailed\": true,\n        \"display_timezone\": \"GMT-04\",\n        \"notification_email_list\": [\n            \"example@email.com\",\n            \"john@example.com\"\n        ],\n        \"frequency\": {\n            \"hour\": 0,\n            \"type\": \"monthly\",\n            \"value\": 1\n        },\n        \"columns\": [\n            {\n                \"key\": \"TRANSACTION_DATE\"\n            },\n            {\n                \"key\": \"SOURCE_ID\"\n            },\n            {\n                \"key\": \"EXTERNAL_REFERENCE\"\n            }\n        ]\n    }';\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report/config',\n    method: 'PUT',\n    headers: headers,\n    body: dataString\n};\n\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\n\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment by ID with cURL in MercadoPago API\nDESCRIPTION: This snippet demonstrates how to make a GET request to retrieve payment information by its ID using cURL. It includes necessary headers and query parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/retrieving-payments.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -G -X GET \\\n-H \"accept: application/json\" \\\n-H 'Authorization: Bearer ACCESS_TOKEN' \\\n\"https://api.mercadopago.com/v1/payments/<payment_id>\" \\\n-d \"status=approved\" \\\n-d \"offset=0\" \\\n-d \"limit=10\"`\n```\n\n----------------------------------------\n\nTITLE: Encryption Example for ABECS Devices\nDESCRIPTION: Demonstrates the encryption process for 'abecs' PoI devices using 3DES and CBC operation mode with a working key. Shows input data and expected output for PAN, expiration date, cardholder info, and track1 data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/secure_payments/responses.en.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Example |\n|---|\n| Track1 = B73BEB4ADF6A3B7A3^TEST MARCELO ^171220100000 00510000000 |\n| Working key = 22222222222222222222222222222222 |\n\n| Result |\n|---|\n| PAN = 4074090252161538 |\n| Expiration date = 12/2017 |\n| Cardholder = TEST MARCELO |\n| Track1 = B4074090252161538^TEST MARCELO ^171220100000 00510000000 |\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods in Python\nDESCRIPTION: Python implementation for setting payment method preferences, excluding specific payment methods and types, and limiting installments\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/payment-methods.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n#...\npreference_data = {\n\"excluded_payment_methods\": [\n{ \"id\": \"master\" }\n],\n\"excluded_payment_types\": [\n{ \"id\": \"ticket\" }\n],\n\"installations\": 12\n}\n#...\n```\n\n----------------------------------------\n\nTITLE: Render Brand Brick with HTML\nDESCRIPTION: This HTML code creates a `div` element with the ID \"brandBrick_container\". This element serves as the container where the Brand Brick will be rendered.  The JavaScript configuration code targets this ID to place the brick within the HTML structure.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/brand-brick/default-rendering.en.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"brandBrick_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring SFTP Information for Report Delivery\nDESCRIPTION: JSON configuration for SFTP server details, allowing reports to be automatically uploaded to an external server. Includes server address, credentials, port, and target directory.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.es.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ \"server\": \"sftp.myserver.com\", \"password\": \"mypassword\", \"remote_dir\": \"/myfolder\", \"port\": 22, \"username\": \"myusername\" }\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Item Preference in PHP\nDESCRIPTION: Demonstrates creating a payment preference with multiple items using the Mercado Pago PHP SDK, allowing specification of item details like title, quantity, and unit price\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/preference-multiple-items.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n# Create a preference object\n$preference = new MercadoPago\\Preference();\n# Create items in preference\n$item1 = new MercadoPago\\Item();\n$item1->title = \"Test Item 1\";\n$item1->quantity = 2;\n$item1->unit_price = 11.96;\n\n$item2= new MercadoPago\\Item\n$item2->title = \"Test Item 2\";\n$item2->quantity = 1;\n$item2->unit_price = 11.96;\n\n$preference->items = array($item1,$item2);\n# Save and post the preference\n$preference->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Aviso sobre método legado em Markdown\nDESCRIPTION: Este trecho alerta os desenvolvedores sobre a existência de um método legado para iniciar a câmera scanner, baseado em uma implementação adicional (onActivityResult). Embora ainda funcione, recomenda-se atualizar para o método Callback.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/camscanner.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> WARNING\n>\n> Importante\n>\n> Se você possui uma integração antiga do Main Apps, é provável que tenha implementado um **método legacy para iniciar a câmera scanner**, baseado em uma implementação adicional (`onActivityResult`). Embora este método continue em funcionamento, recomendamos atualizar sua integração para o método Callback para ter uma implementação simplificada. Se você precisar de suporte para sua implementação antiga, consulte a [documentação](/developers/pt/docs/main-apps/camscanner/legacy).\n```\n\n----------------------------------------\n\nTITLE: Describing Client ID Not Found Error in JSON\nDESCRIPTION: This snippet provides the JSON structure for an error due to the absence of a Client ID in the whitelist. It explains that processing is unavailable for unlisted client IDs, returning a status code 404.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/get-payment-information-returns.en.md#2025-04-18_snippet_2\n\nLANGUAGE: Json\nCODE:\n```\n{\n   \"status\": \"404\",\n   \"error\":  \"Not found\",\n   \"message\": \"Client ID not found in whitelist.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Item Preference in C#\nDESCRIPTION: Demonstrates creating a payment preference with multiple items using the Mercado Pago C# SDK, configuring item details with title, quantity, currency, and unit price\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/preference-multiple-items.en.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Create the request with multiple items\nvar request = new PreferenceRequest\n{\nItems = new List<PreferenceItemRequest>\n{\nnew PreferenceItemRequest\n{\nTitle = \"My Product 1\",\nquantity = 1,\nCurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\nUnitPrice = 75.56m,\n},\nnew PreferenceItemRequest\n{\nTitle = \"My Product 2\",\nquantity = 2,\nCurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\nUnitPrice = 96.56m,\n},\n// ...\n},\n};\n\n// Create a client object\nvar client = new PreferenceClient();\n\n// Create the preference\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Configuring onBinChange Callback in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the `onBinChange` callback within the settings object when initializing a Brick. The callback function logs the bin number to the console whenever it changes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/additional-callbacks.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst settings = {\n   ...,\n   callbacks: {\n       ...\n       onBinChange: (bin) => {\n           // callback chamado sempre que o bin do cartão é alterado\n           console.log(bin);\n       },\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Token - Java Implementation\nDESCRIPTION: Java implementation for refreshing Mercado Pago access tokens using the OAuth client. Takes refresh token as parameter to create new credentials.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/renewal.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nOauthClient client = new OauthClient();\n\nString refreshtoken = \"TG-XXXXXXXX-241983636\";\nclient.createCredential(refreshtoken, null);\n```\n\n----------------------------------------\n\nTITLE: Requesting User Authorization - Mercado Pago Colombia\nDESCRIPTION: This curl command requests user authorization for payment management in Colombia. Replace <APP_ID> and <REDIRECT_URI> accordingly.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/configuration.es.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl \"https://auth.mercadopago.com.co/authorization?client_id=<APP_ID>&response_type=code&platform_id=mp&redirect_uri=<REDIRECT_URI>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Card Payment with Mercado Pago Python SDK\nDESCRIPTION: Demonstrates how to create a card payment using the Mercado Pago Python SDK. Sets up the SDK with an access token, configures custom headers, and sends a payment request with transaction details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.en.md#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport market\nsdk = Mercadopago.SDK(\"ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n\"transaction_amount\": float(request.POST.get(\"transaction_amount\")),\n\"token\": request.POST.get(\"token\"),\n\"description\": request.POST.get(\"description\"),\n\"installments\": int(request.POST.get(\"installments\")),\n\"payment_method_id\": request.POST.get(\"payment_method_id\"),\n\"payer\": {\n\"email\": request.POST.get(\"email\"),\n\"identification\": {\n\"type\": request.POST.get(\"type\"), \n\"number\": request.POST.get(\"number\")\n}\n}\n}\n \npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n \nprint(payment)\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Brick texts with JavaScript\nDESCRIPTION: This snippet demonstrates how to customize the theme and value proposition texts of the Wallet Brick using JavaScript. The `customization` object allows you to set the `theme` and `valueProp`.  Ensure correct placement in the overall settings object for proper functionality.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/change-texts.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n        theme: 'default',\n        customStyle: {\n            valueProp: 'practicality',\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Integration Metrics in Java SDK\nDESCRIPTION: Configures platform, integrator, and corporation IDs using Mercado Pago Java SDK. Replace placeholder values with actual identification codes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integration-identification.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMercadoPago.SDK.setPlatformId(\"PLATFORM_ID\");\nMercadoPago.SDK.setIntegratorId(\"INTEGRATOR_ID\");\nMercadoPago.SDK.setCorporationId(\"CORPORATION_ID\");\n```\n\n----------------------------------------\n\nTITLE: Creating Electronics Industry Preferences with MercadoPago API\nDESCRIPTION: API request example for creating preferences with electronics industry specific fields including warranty information and local pickup options. Contains specialized fields for electronics purchases like warranty status and local pickup availability.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/industry-data/additional-info.en.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/checkout/preferences' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--data-raw '{\n    \"auto_return\": \"approved\",\n    \"back_urls\": {\n        \"failure\": \"https://www.mercadopago.com/home/failure\",\n        \"pending\": \"https://www.mercadopago.com/home/pending\",\n        \"success\": \"https://www.mercadopago.com/home/success\"\n    },\n    \"notification_url\": \"https://webhook.site/xyz\",\n    \"expires\": false,\n    \"external_reference\": \"order-123\",\n    \"date_of_expiration\": \"2025-03-12T12:58:41.425-04:00\",\n    \"items\": [\n        {\n            \"id\": \"1234\",\n            \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n            \"title\": \"Product\",\n            \"category_id\": \"phones\",\n            \"quantity\": 1,\n            \"unit_price\": 150,\n            \"warranty\": false,\n        }\n    ],\n    \"payer\": {\n        \"phone\": {\n            \"area_code\": \"11\",\n            \"number\": \"[FAKER][PHONE_NUMBER][CELL_PHONE]\"\n        },\n        \"address\": {\n            \"zip_code\": \"[FAKER][ADDRESS][ZIP_CODE]\",\n            \"street_name\": \"[FAKER][ADDRESS][STREET_NAME]\",\n            \"street_number\": 1000\n        },\n        \"identification\": {\n          \"identification_type\": \"[FAKER][IDENTIFICATION][TYPE]\",\n          \"identification_number\": \"12345678\"\n        },\n        \"email\": \"john@yourdomain.com\",\n        \"first_name\": \"[FAKER][NAME][FIRST_NAME]\",\n        \"last_name\": \"[FAKER][NAME][LAST_NAME]\",\n        \"date_created\": \"\",\n        \"authentication_type\": \"Facebook\",\n        \"registration date\": \"2015-06-02T12:58:41.425-04:00\",\n        \"is_prime_user\": false,\n        \"is_first_purchase_online\": false,\n        \"last_purchase\": \"2020-01-02T12:58:41.425-04:00\"\n    },\n    \"payment_methods\": {\n        \"excluded_payment_methods\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"default_installments\": null,\n        \"default_payment_method_id\": null,\n        \"excluded_payment_types\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"installments\": null\n    },\n    \"shipments\": {\n        \"mode\": \"not_specified\",\n        \"receiver_address\": {\n            \"zip_code\": \"[FAKER][ADDRESS][ZIP_CODE]\",\n            \"street_name\": \"[FAKER][ADDRESS][STREET_NAME]\",\n            \"city_name\": \"[FAKER][ADDRESS][CITY]\",\n            \"state_name\": \"[FAKER][ADDRESS][STATE]\",\n            \"street_number\": 1000\n        },\n        \"express_shipment\": false,\n        \"local_pickup\": false\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Encryption Example for HEX CBC Decoding Devices\nDESCRIPTION: Shows the encryption process for devices supporting HEX CBC decoding, using 3DES and CBC operation mode. Includes input data and expected output for PAN, expiration date, cardholder info, and track1 data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/secure_payments/responses.en.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Example |\n|---|\n| Track1 = 4596CEF2DB0337030FB06765410ACDDB87AC1104CF9ED81C11D3BD831D12A68D6F289E61C588A7C6A79EC1DE4D056BF6 |\n| KSN = 0A010BF0000000000002 |\n\n| Result |\n|---|\n| PAN = 5413330089020011 |\n| Expiration date = 12/2025 |\n| Cardholder = John Doe |\n| Track1 = B4000340099900505^John/Doe ^22251110000123000 |\n```\n\n----------------------------------------\n\nTITLE: Configuring Intent Filter for DTE Printing in AndroidManifest.xml\nDESCRIPTION: XML configuration for AndroidManifest.xml that defines the intent filters required for payment processing and DTE printing functionality. Includes actions for sending, answering, and sending to specific targets.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-print-dte.en.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter> \n\t<action android:name=\"android.intent.action.SEND\" /> \n\t<action android:name=\"android.intent.action.ANSWER\" /> \n\t<action android:name=\"android.intent.action.SENDTO\" />\n\t<category android:name=\"android.intent.category.DEFAULT\" /> \n\t<data android:mimeType=\"text/*\" /> \n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Refund in PHP\nDESCRIPTION: Method to retrieve details of a specific refund for a payment using Mercado Pago SDK. Requires payment ID and refund ID as input parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/refunds.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $refund_client = new PaymentRefundClient();\n  $refund_client->get('123456789', '1234');\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference in Python\nDESCRIPTION: Creates a payment preference with product details using the Mercado Pago Python SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/installments-without-card.en.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npreference_data = {\n\"items\": [\n{\n\"title\": \"My product\",\n\"unit_price\": 100,\n\"quantity\": 1\n}\n],\n\"purpose\": \"onboarding_credits\"\n}\n\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Hiding Payment Button in Card Payment Brick (JavaScript)\nDESCRIPTION: This code demonstrates how to hide the default payment button in the Card Payment Brick using JavaScript. It sets the 'hidePaymentButton' property to true and includes callbacks for ready and error states.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/hide-element.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    callbacks: {\n        onReady: () => {\n            // callback chamado quando o Brick estiver pronto\n        },\n        onError: (error) => { \n            // callback chamado para todos os casos de erro do Brick\n        },\n    },\n    customization: {\n        visual: {\n            hidePaymentButton: true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Transactions with Predefined Status - cURL\nDESCRIPTION: This cURL command creates a transaction with a specific status by sending a POST request to the Money Out endpoint of the Mercado Pago API. The command includes headers for authorization and the test token, with a JSON payload defining the transaction details, including accounts involved and the amounts transferred.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-test.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/transaction-intents/process' \\\n--header 'x-enforce-signature: false' \\\n--header 'Authorization: Bearer TEST-7719*********832-03141*********ec9309854*********f1e54b5-1*********' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Test-Token: true' \\\n--data '{\\n    \"external_reference\": \"new\",\\n    \"point_of_interaction\": {\\n        \"type\": \"PSP_TRANSFER\"\\n    },\\n    \"seller_configuration\": {\\n        \"notification_info\": {\\n            \"notification_url\": \"https://webhook.site/c107a500-5bf2-4787-8c17-ec9fddcfd0f6\"\\n        }\\n    },\\n    \"transaction\": {\\n        \"from\": {\\n            \"accounts\": [\\n                {\\n                    \"amount\": 10\\n                }\\n            ]\\n        },\\n        \"to\": {\\n            \"accounts\": [\\n                {\\n                    \"amount\": 10,\\n                    \"owner\": {\\n                        \"identification\": {\\n                            \"number\": \"38437455871\",\\n                            \"type\": \"CPF\"\\n                        }\\n                    },\\n                    \"chave\": {\\n                        \"type\": \"CPF\",\\n                        \"value\": \"38437455871\"\\n                    }\\n                }\\n            ]\\n        },\\n        \"total_amount\": 10\\n    }\\n}'\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Brick texts with React\nDESCRIPTION: This snippet demonstrates how to customize the theme and value proposition texts of the Wallet Brick using React.  The `customization` object allows you to set the `theme` and `valueProp`. Ensure this object is passed correctly to the Wallet Brick component to apply the customizations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/change-texts.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n    theme: 'default',\n    customStyle: {\n        valueProp: 'practicality',\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Example Notification Payload\nDESCRIPTION: This JSON snippet shows an example of a notification payload sent by Mercado Pago for an order update. It contains information about the order, including the action, type, user ID, application ID, live mode status, and data about the order.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/notifications.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"processed\",\n  \"type\": \"order\",\n  \"user_id\": \"123456\",\n  \"application_id\": \"789012\",\n  \"live_mode\": true,\n  \"api_version\": \"v1\",\n  \"date_created\": \"2024-01-01T00:00:00Z\",\n  \"data\": {\n    \"id\": \"01J35M8KHVFY0GQGDZJ94QXKMJ\",\n    \"type\": \"online\",\n    \"external_reference\": \"ext_ref_1234\",\n    \"status\": \"processed\",\n    \"version\": 1,\n    \"transactions\": {\n      \"payments\": [\n        {\n          \"id\": \"pay_01J3E4R55CTGYCEXCKSQB6RKDE\",\n          \"status\": \"processed\",\n          \"payment_method\": {\n            \"id\": \"visa\",\n            \"type\": \"credit_card\",\n            \"installments\": 1\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Rapipago/Pago Fácil Payment Forms with Email in Javascript\nDESCRIPTION: Configuration to pre-populate the email field for Rapipago and Pago Fácil payments in Argentina. This allows you to initialize the Brick with the payer's email address.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/initialize-data-on-the-bricks.en.md#2025-04-18_snippet_6\n\nLANGUAGE: Javascript\nCODE:\n```\nsettings = {\n  ...,\n  initialization: {\n   ...,\n  payer: {\n  email: '<PAYER_EMAIL_HERE>',\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Merchant Orders with Java SDK\nDESCRIPTION: This code snippet shows how to retrieve payment information for a specific order by its ID using the Java SDK. It demonstrates the use of the MerchantOrderClient to fetch the details of the order, allowing access to associated payment data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/orders.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMerchantOrderClient client = new MerchantOrderClient();\n\nLong orderId = 123456789L;\nclient.get(orderId);\n```\n\n----------------------------------------\n\nTITLE: Processing Payments with MercadoPago in C#\nDESCRIPTION: This C# snippet shows how to configure the MercadoPago SDK, create a payment request with necessary details, and create the payment asynchronously using the PaymentClient. Make sure to include the required MercadoPago packages.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.en.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n// ...\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n// ...\nvar paymentRequest = new PaymentCreateRequest\n{\n    TransactionAmount = 100,\n    Token = token,\n    Description = \"Blue shirt\",\n    Installments = installments,\n    PaymentMethodId = payment_method_id,\n    IssuerId = issuer_id,\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"john@yourdomain.com\",\n    },\n};\n// Create the payment\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest);\n// ...\n// Shows payment status\nConsole.WriteLine(payment.Status);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with Reserved Values in Ruby\nDESCRIPTION: Implements a payment with capture=false using Mercado Pago's Ruby SDK. Creates a payment request with transaction amount, token, and payment details to reserve the value without immediate capture.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/make-value-reserve.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\npayment_request = {\n  transaction_amount: 100,\n  token: 'ff8080814c11e237014c1ff593b57b4d',\n  description: 'Título do produto',\n  installments: 1,\n  payment_method_id: 'visa',\n  payer: {\n    email: 'test_user_19653727@testuser.com'\n  },\n  capture: false\n}\n\npayment_response = sdk.payment.create(payment_request)\npayment = payment[:response]\n```\n\n----------------------------------------\n\nTITLE: Renovando Access Token con cURL en Mercado Pago\nDESCRIPTION: Este comando cURL muestra cómo renovar un Access Token haciendo una solicitud POST directamente a la API de Mercado Pago. Se incluyen las credenciales del cliente, el tipo de concesión y el refresh token en el cuerpo de la solicitud.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/renewal.es.md#2025-04-18_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n'https://api.mercadopago.com/oauth/token'\\\n-H 'Content-Type: application/json' \\\n-d '{\n \"client_id\": \"client_id\",\n \"client_secret\": \"client_secret\",\n \"grant_type\": \"refresh-token\",\n \"refresh_token\": \"TG-XXXXXXXX-241983636\",\n}'\n```\n\n----------------------------------------\n\nTITLE: Search Payments - PHP Implementation\nDESCRIPTION: PHP implementation for searching payments using external reference as a filter. Uses the MercadoPago SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/retrieving-payments.en.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\trequire ('mercadopago.php');\n\n\t$mp = new MP (\"ENV_ACCESS_TOKEN\");\n\n\t$payment = $mp->get(\n\t\t\"/v1/payments/search\",\n\t\tarray(\n\t\t\t\"external_reference\" => \"123456789\"\n\t\t)\n\t);\n?>\n```\n\n----------------------------------------\n\nTITLE: Importing MercadoPago.js via HTML script tag\nDESCRIPTION: Code to import the MercadoPago JavaScript SDK directly in your HTML. This approach loads the library from Mercado Pago's CDN and makes it available for initializing the payment functionality.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.es.md#2025-04-18_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Setting Back URLs for Redirection\nDESCRIPTION: This Java code snippet demonstrates how to configure back URLs for redirection after a Mercado Pago payment. It uses the `PreferenceBackUrlsRequest` builder to set the `success`, `pending`, and `failure` URLs, and then includes these back URLs in the overall `PreferenceRequest`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.pt.md#2025-04-18_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nPreferenceBackUrlsRequest backUrls =\n// ...\nPreferenceBackUrlsRequest.builder()\n       .success(\"https://www.seu-site/success\")\n       .pending(\"https://www.seu-site/pending\")\n       .failure(\"https://www.seu-site/failure\")\n       .build();\n\nPreferenceRequest request = PreferenceRequest.builder().backUrls(backUrls).build();\n// ...\n\n```\n\n----------------------------------------\n\nTITLE: Processing SPEI Bank Transfer Payments with cURL\nDESCRIPTION: cURL command for creating SPEI bank transfer payments through the Mercado Pago API. The request includes transaction amount, product description, payment method, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.pt.md#2025-04-18_snippet_18\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n-H 'Content-Type: application/json' \\\n--d '{\n    \"transaction_amount\": 5000,\n    \"description\": \"Título del producto\",\n    \"payment_method_id\": \"clabe\",\n    \"payer\": {\n        \"email\": \"test_user_19549678@testuser.com\",\n        \"entity_type\": \"individual\",\n        \"first_name\": \"John\",\n        \"last_name\": \"Doe\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Multiple Item Preference in PHP\nDESCRIPTION: Create a Mercado Pago preference with two items, setting title, quantity, and unit price for each item\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/preference-multiple-items.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  # Crear un objeto preferencia\n  $preference = new MercadoPago\\Preference();\n  # Crea ítems en la preferencia\n  $item1 = new MercadoPago\\Item();\n  $item1->title = \"Item de Prueba 1\";\n  $item1->quantity = 2;\n  $item1->unit_price = 11.96;\n\n  $item2= new MercadoPago\\Item\n  $item2->title = \"Item de Prueba 2\";\n  $item2->quantity = 1;\n  $item2->unit_price = 11.96;\n\n  $preference->items = array($item1,$item2);\n  # Guardar y postear la preferencia\n  $preference->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Links in Android Manifest\nDESCRIPTION: AndroidManifest.xml configuration for handling Deep Links in an Android application, including scheme and host definitions for return navigation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/java-kotlin.en.md#2025-04-18_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<activity\n   android:name=\".Congrats\"\n   android:exported=\"true\"\n   android:label=\"@string/deeplink\"\n   android:theme=\"@style/Theme.MyApplication.NoActionBar\" >\n\n   <intent-filter>\n       <action android:name=\"android.intent.action.VIEW\" />\n       <category android:name=\"android.intent.category.DEFAULT\" />\n       <category android:name=\"android.intent.category.BROWSABLE\" />\n       <!-- Accepts URIs that begin with \"yourapp://congrats\" -->\n       <data android:scheme=\"yourapp\"\n           android:host=\"congrats\" />\n\n   </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Create Mercado Pago Payment with Boleto in Node.js\nDESCRIPTION: This code snippet demonstrates how to create a payment using the Mercado Pago SDK in Node.js. It requires the 'mercadopago' module and sets the access token. It defines the payment data including transaction amount, description, payment method (bolbradesco), and payer information. The `mercadopago.payment.create` method is then used to send the payment data to the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_6\n\nLANGUAGE: node\nCODE:\n```\nvar mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(config.access_token);\nvar payment_data = {\n  transaction_amount: 100,\n  description: 'Título del producto',\n  payment_method_id: 'bolbradesco',\n  payer: {\n    email: 'test@test.com',\n    first_name: 'Test',\n    last_name: 'User',\n    identification: {\n        type: 'DNI',\n        number: '19119119'\n    },\n    address:  {\n        zip_code: '1264',\n        street_name: 'Av. Caseros',\n        street_number: '3039',\n        neighborhood: 'Parque Patricios',\n        city: 'Buenos Aires',\n        federal_unit: 'BA'\n    }\n  }\n};\nmercadopago.payment.create(payment_data).then(function (data) {\n}).catch(function (error) {\n});\n\n```\n\n----------------------------------------\n\nTITLE: Initiating Money Out Transfer to Bank Account (Chile)\nDESCRIPTION: This cURL request illustrates how to initiate a Money Out transfer to a bank account in Chile using the Mercado Pago API. It includes the necessary headers, including idempotency key, and JSON payload with transaction details specific to Chile.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.es.md#2025-04-18_snippet_5\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    'https://api.mercadopago.com/v1/transaction-intents/process'\\\n    -H 'Content-Type: application/json' \\\n       -H 'X-Idempotency-Key: {{idempotency_key}}' \\\n       -H 'x-Signature: true' \\\n       -H 'x-enforce-signature: false' \\\n       -H 'Authorization: Bearer TEST-7719*********832-03141*********ec9309854*********f1e54b5-1*********' \\\n    -d '{\n  \"external_reference\": \"MP0001\",\n  \"point_of_interaction\": \"{\"type\":\"PSP_TRANSFER\"}\",\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://exemplo.cl/notification\"\n    }\n  },\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": 100\n        }\n      ]\n    },\n    \"to\": {\n      \"accounts\": [\n        {\n          \"amount\": 100,\n          \"bank_id\": \"99999004\",\n          \"type\": \"current\",\n          \"number\": \"10266732\",\n          \"owner\": {\n            \"identification\": {\n              \"type\": \"RUT\",\n              \"number\": \"111111111111\"\n            }\n          }\n        }\n      ]\n    },\n    \"total_amount\": 100\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Data in PHP using MercadoPago SDK\nDESCRIPTION: Example of updating customer information such as email, name, phone, identification, and address details using the MercadoPago PHP SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/modify-customer.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n  \n  $client = new CustomerClient();\n\n  $customer = $client->update(\"user_id\", [\n    \"email\" => \"my.user@example.com\",\n    \"first_name\" => \"john\",\n    \"last_name\" => \"wagner\",\n    \"phone\" => array(\n      \"area_code\" => \"11\",\n      \"number\" => \"001234567\"\n    ),\n    \"identification\" => array(\n      \"type\" => \"CPF\",\n      \"number\" => \"12341234\"\n    ),\n    \"default_address\" => \"Casa\",\n    \"address\" => array(\n      \"zip_code\" => \"52\",\n      \"street_name\" => \"Av. das Nações Unidas\"\n      \"street_number\" => \"3033\"\n    )\n  ]);\n?>\n```\n\n----------------------------------------\n\nTITLE: Rendering Card Payment Brick in HTML\nDESCRIPTION: This snippet shows the HTML container element where the Card Payment Brick will be rendered. The id of this div should match the one used in the create() method of the brick configuration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/default-rendering.en.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"cardPaymentBrick_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Styling the Challenge Iframe with CSS\nDESCRIPTION: This CSS code snippet provides responsive styling for the iframe that displays the 3DS challenge. It sets the width and height of the iframe, and adjusts the dimensions for smaller screens using a media query.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n  #myframe{\n    width: 500px;\n    height: 600px;\n    border: none;\n  }\n  @media only screen and (width <= 980px) {\n    #myframe{\n      width: 100%;\n      height: 440px;\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Initializing MercadoPago CardForm for MLC Region\nDESCRIPTION: This code initializes a MercadoPago payment form specifically for Chile (MLC region). It requires integer values for the amount and includes all standard form fields with callbacks for form mounting, submission handling, and resource fetching.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-cardform.en.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst cardForm = mp.cardForm({\namount: \"100\", // The value must be an integer.\niframe: true,\nform: {\nid: \"form-checkout\",\ncardNumber: {\nid: \"form-checkout__cardNumber\",\nplaceholder: \"Card Number\",\n},\nexpirationDate: {\nid: \"form-checkout__expirationDate\",\nplaceholder: \"MM/YY\",\n},\nsecurityCode: {\nid: \"form-checkout__securityCode\",\nplaceholder: \"Security Code\",\n},\ncardholderName: {\nid: \"form-checkout__cardholderName\",\nplaceholder: \"Cardholder\",\n},\nissuer: {\nid: \"form-checkout__issuer\",\nplaceholder: \"Issuing bank\",\n},\ninstallments: {\nid: \"form-checkout__installments\",\nplaceholder: \"Installments\",\n},\nidentificationType: {\nid: \"form-checkout__identificationType\",\nplaceholder: \"Document type\",\n},\nidentificationNumber: {\nid: \"form-checkout__identificationNumber\",\nplaceholder: \"Document number\",\n},\ncardholderEmail: {\nid: \"form-checkout__cardholderEmail\",\nplaceholder: \"Email\",\n},\n},\ncallbacks: {\nonFormMounted: error => {\nif (error) return console.warn(\"Form Mounted handling error: \", error);\nconsole.log(\"Form mounted\");\n},\nonSubmit: event => {\nevent.preventDefault();\n\nconst {\npaymentMethodId: payment_method_id,\nissuerId: issuer_id,\ncardholderEmail: email,\namount,\ntoken,\ninstallments,\nidentificationNumber,\nidentificationType,\n} = cardForm.getCardFormData();\n\nfetch(\"/process_payment\", {\nmethod: \"POST\",\nheaders: {\n\"Content-Type\": \"application/json\",\n},\nbody: JSON.stringify({\ntoken,\nissuer_id,\npayment_method_id,\ntransaction_amount: Number(amount),\ninstallments: Number(installments),\ndescription: \"Product Description\",\npayer: {\nemail,\nidentification: {\ntype: identificationType,\nnumber: identificationNumber,\n},\n},\n}),\n});\n},\nonFetching: (resource) => {\nconsole.log(\"Fetching resource: \", resource);\n\n// Animate progress bar\nconst progressBar = document.querySelector(\".progress-bar\");\nprogressBar.removeAttribute(\"value\");\n\nreturn() => {\nprogressBar.setAttribute(\"value\", \"0\");\n};\n}\n},\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Back URLs in Mercado Pago SDK - Java\nDESCRIPTION: This code snippet in Java illustrates setting up back URLs using the Mercado Pago SDK for user redirection after payment. The PreferenceBackUrlsRequest and PreferenceRequest classes are utilized to establish URLs and the auto_return attribute is used for automatic approval redirection. Dependencies include Java SDK for Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/redirection.en.md#2025-04-18_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nPreferenceBackUrlsRequest backUrls =\\n// ...\\nPreferenceBackUrlsRequest.builder()\\n       .success(\\\"https://www.seu-site/success\\\")\\n       .pending(\\\"https://www.seu-site/pending\\\")\\n       .failure(\\\"https://www.seu-site/failure\\\")\\n       .build();\\n\\nPreferenceRequest request = PreferenceRequest.builder().backUrls(backUrls).build();\\n// ...\n```\n\n----------------------------------------\n\nTITLE: Transaction Creation Notification Message\nDESCRIPTION: This JSON snippet represents a notification message received when a transaction intent is created in Mercado Pago. It includes information such as the action type, API version, transaction ID, notification ID, date created, status, and type.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.es.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"transaction_intent.created\",\n  \"api_version\": \"v1\",\n  \"data\": {\n    \"id\": \"1108917506-01GGTH198RP0K71H133EK9BJAT\" // ID del transaction intent\n  },\n  \"date_created\": \"2022-11-01T17:19:53.915-04:00\",\n  \"id\": \"103686924004\", // ID de la notificacion\n  \"last_updated\": \"0001-01-01T00:00:00Z\",\n  \"status\": \"new\",\n  \"type\": \"transaction_intent\"\n}\n```\n\n----------------------------------------\n\nTITLE: Warning Message in Markdown\nDESCRIPTION: A warning message emphasizing the importance of installing the Mercado Pago SDK before creating a preference. It uses Markdown syntax for formatting.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/create-preference.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> WARNING\n>\n> Important\n>\n> Remember that you need to install the Mercado Pago SDK before creating a preference, so make sure that the installation of the Mercado Pago SDKs has already been completed. Check [SDKs](https://www.mercadopago[FAKER][URL][DOMAIN]/developers/en/guides/sdks) for instructions.\n```\n\n----------------------------------------\n\nTITLE: Adding Mercado Pago Security Script in HTML\nDESCRIPTION: This snippet shows how to add the Mercado Pago security script to a webpage. The 'view' attribute specifies the section where the script is added, which helps in collecting device information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"home\"></script>\n```\n\n----------------------------------------\n\nTITLE: Test User Creation Response Format\nDESCRIPTION: Example JSON response from the test user creation API showing the user details including ID, nickname, password, email, and creation dates.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/create-test-users-old.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 123456,\n    \"nickname\": \"TT123456\",\n    \"password\": \"qatest123456\",\n    \"site_status\": \"active\",\n    \"site_id\": \"[FAKER][GLOBALIZE][UPPER_SITE_ID]\",\n    \"description\": \"a description\",\n    \"email\": \"test_user_123456@testuser.com\",\n    \"date_created\": \"2021-11-04T12:02:35Z\",\n    \"date_last_updated\": \"2021-11-04T12:02:35Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Payment with MercadoPago Java SDK\nDESCRIPTION: Shows how to modify payment details or capture a payment using the PaymentClient with a specific payment ID\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/create-payments.es.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nPaymentClient client = new PaymentClient();\n\nLong paymentId = 123456789L;\nclient.capture(paymentId);\n```\n\n----------------------------------------\n\nTITLE: Building Callback URI with PaymentFlow in Java\nDESCRIPTION: This code demonstrates the Java implementation for building a callback URI using the `buildCallbackUri` function from the `PaymentFlow` class.  It sets up a HashMap for metadata, defines the callback URL, method callback type (error), and app ID before generating the URI.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/payment-flow-legacy-support.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal PaymentFlow paymentFlow = MPManager.INSTANCE.getPaymentFlow();\n\nfinal HashMap<String, String> resultMetadata = new HashMap<>();\nresultMetadata.put(\"message\", \"result\");\n\nfinal Uri uriResult = paymentFlow.buildCallbackUri(\n   \"tuHost://tuApp/result\",\n   \"error\",\n   resultMetadata,\n   \"demo.app\"\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Refund with Mercadopago SDK in Ruby\nDESCRIPTION: This snippet demonstrates how to retrieve a specific refund for a payment using the Mercadopago SDK in Ruby. It initializes the SDK with an environment access token and calls the list method on the refund object with the payment ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ruby/refunds.en.md#2025-04-18_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\nresult = sdk.refund.list(payment_id)\nrefunds = result[:response]\n```\n\n----------------------------------------\n\nTITLE: Updating Payment Preference in Java\nDESCRIPTION: Demonstrates updating an existing payment preference with new item details. Requires the original preference ID and provides a mechanism to modify item properties like title, description, and pricing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/preferences.es.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nPreferenceClient client = new PreferenceClient();\n\nString preferenceId = \"202809963-a2201f8d-11cb-443f-adf6-de5a42eed67d\";\n\nList<PreferenceItemRequest> items = new ArrayList<>();\nPreferenceItemRequest item =\n   PreferenceItemRequest.builder()\n       .id(\"202809963-a2201f8d-11cb-443f-adf6-de5a42eed67d\")\n       .title(\"Dummy Title\")\n       .description(\"Dummy description\")\n       .pictureUrl(\"http://www.myapp.com/myimage.jpg\")\n       .quantity(1)\n       .currencyId(\"US\")\n       .unitPrice(new BigDecimal(\"10\"))\n       .build();\nitems.add(item);\n\nPreferenceRequest request = PreferenceRequest.builder().items(items).build();\n\nclient.update(preferenceId, request);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago Checkout Bricks in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to replace an existing payment integration with Checkout Bricks. It initializes the Mercado Pago SDK with an access token, retrieves payment information from the POST request, and creates a payment object.  The payment is saved, and the status, status detail, and ID are returned as a JSON response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-serverside.es.md#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  require_once 'vendor/autoload.php';\n  MercadoPago\\SDK::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n  $payment = new MercadoPago\\Payment();\n  $payment->transaction_amount = (float)$_POST['transactionAmount'];\n  $payment->token = $_POST['token'];\n  $payment->installments = (int)$_POST['installments'];\n  $payment->payment_method_id = $_POST['paymentMethodId'];\n  $payment->issuer_id = (int)$_POST['issuer'];\n  $payer = new MercadoPago\\Payer();\n  $payer->email = $parsed_body['payer']['email'];\n  $payer->identification = array(\n     \"type\" => $parsed_body['payer']['identification']['type'],\n     \"number\" => $parsed_body['payer']['identification']['number']\n   );\n  $payment->payer = $payer;\n  $payment->save();\n  $response = array(\n      'status' => $payment->status,\n      'status_detail' => $payment->status_detail,\n      'id' => $payment->id\n  );\n  echo json_encode($response);\n\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Customers with MercadoPago SDK in Python\nDESCRIPTION: This snippet shows how to create a new customer using the MercadoPago SDK in Python. The SDK is initialized with an access token, and customer data is sent to the create method. Additionally, this example demonstrates how to associate a payment card with the newly created customer. Requires the MercadoPago SDK and valid credentials.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/customers.en.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\ncustomer_data = {\n  \"email\": \"test_payer_12345@testuser.com\"\n}\ncustomer_response = sdk.customer().create(customer_data)\ncustomer = customer_response[\"response\"]\n\ncard_data = {\n  \"token\": \"9b2d63e00d66a8c721607214cedaecda\",\n  \"issuer_id\": \"3245612\",\n  \"payment_method_id\": \"debit_card\"\n}\ncard_response = sdk.card().create(customer[\"id\"], card_data)\ncard = card_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Integrando el SDK de Dispositivos de Mercado Pago en Android\nDESCRIPTION: Configura el repositorio y la dependencia en el archivo build.gradle para implementar el SDK de Dispositivos de Mercado Pago en aplicaciones Android.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-chopro.es.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nrepositories {\n    maven {\n        url \"https://artifacts.mercadolibre.com/repository/android-releases\"\n    }\n}\ndependencies {\n   implementation 'com.mercadolibre.android.device:sdk:3.0.5'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PagoEfectivo Payment with Mercado Pago API (cURL)\nDESCRIPTION: This cURL command demonstrates how to create a PagoEfectivo payment using the Mercado Pago API directly. It sends a POST request to the payments endpoint with the necessary headers and payment details in the request body.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_37\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n--header 'X-Idempotency-Key: <SOME_UNIQUE_VALUE>' \\\n--data-raw '{\n  \"transaction_amount\": 100,\n  \"description\": \"Titulo del producto\",\n  \"payment_method_id\": \"pagoefectivo_atm\",\n  \"payer\": { \"email\": \"test_user_12345@testuser.com\" }\n}'\n```\n\n----------------------------------------\n\nTITLE: Error: Unable to Infer Payment Method\nDESCRIPTION: Happens when using an incorrect card type for the selected payment method. Requires using the correct card type for the transaction.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/vtex/common-errors.es.md#2025-04-18_snippet_3\n\nLANGUAGE: error-code\nCODE:\n```\nCannot infer Payment Method\n```\n\n----------------------------------------\n\nTITLE: Available Payments Configuration (MLB)\nDESCRIPTION: This snippet specifies the available payment methods for Brazil (MLB) when using the Mercado Pago integration with Tiendanube. It includes credit cards, debit cards, Mercado Pago account payments, boleto bancário, Pix and installments without a card.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/nuvemshop/landing.es.md#2025-04-18_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"available_payments: credit, debit, mercadopago, boleto, pix, cuotas_sin_tarjeta\"\n```\n\n----------------------------------------\n\nTITLE: Not Found Response in JSON\nDESCRIPTION: This JSON response represents a 'Not Found' error scenario (status code 404) when the specified advanced payment ID in the refund request does not exist in the system.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/refund-full-amount.en.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"status\": \"404\",\n   \"error\":  \"not_found\",\n   \"message\": \"Advanced payment not found.\",\n   \"cause\": [\n    {\n      \"code\":\"404002\",\n      \"message\": \"Advanced payment not found\",\n      \"data\": null\n    }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Report Generation Node\nDESCRIPTION: This Node.js code uses the Request module to post a scheduling request to the MercadoPago API, setting up headers and handling the callback function to process the HTTP response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_15\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report/schedule',\n    method: 'POST',\n    headers: headers\n};\n\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\n\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Updating a Customer using Mercado Pago .NET SDK\nDESCRIPTION: This snippet demonstrates how to update an existing customer using the Mercado Pago .NET SDK. It initializes a `CustomerRequest` object with the updated customer information and then uses the `CustomerClient` to update the customer's details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/customers.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: dotnet\nCODE:\n```\n```dotnet\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\nvar phoneRequest = new PhoneRequest\n{\n  AreaCode = \"[FAKER][PHONE_NUMBER][AREA_CODE]\",\n  Number = \"001234567\"\n};\n\nvar identificationRequest = new IdentificationRequest\n{\n  Type = \"[FAKER][IDENTIFICATION][TYPE]\",\n  Number = \"12341234\"\n};\n\nvar addressRequest = new AddressRequest\n{\n  ZipCode = \"[FAKER][ADDRESS][ZIP_CODE]\",\n  StreetName = \"[FAKER][ADDRESS][STREET_NAME]\",\n  StreetNumber = \"2\"\n};\n\nvar customerRequest = new CustomerRequest\n{\n    Email = \"test_payer_12345@testuser.com\",\n    FirstName = \"john\",\n    LastName = \"wagner\",\n    DefaultAddress = \"home\",\n    Description = \"Informações do cliente\",\n    DefaultCard = \"None\",\n    Phone = phoneRequest,\n    Identification = identificationRequest,\n    Address = addressRequest\n\n};\nvar customerClient = new CustomerClient();\nCustomer customer = await customerClient.Update(customerRequest);\n\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Report Status - API Request\nDESCRIPTION: Makes a GET request to check the status of generated settlement reports. Returns a list of reports with their metadata including file names and creation dates.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_9\n\nLANGUAGE: curl\nCODE:\n```\ncurl -G \\\n    -H 'accept: application/json' \\\n    -d 'access_token=ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/list'\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"id\": 12345678,\n        \"user_id\": USER-ID,\n        \"begin_date\": \"2015-05-01T00:00:00Z\",\n        \"end_date\": \"2015-06-01T23:59:59Z\",\n        \"file_name\": \"settlement-report-USER_ID-2016-01-20-131015.csv\",\n        \"created_from\": \"manual\",\n        \"date_created\": \"2016-01-20T10:07:53.000-04:00\"\n    },\n    {\n        ...\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Available Payments for MLB\nDESCRIPTION: This section specifies the available payment methods for the MLB region when using Mercado Pago with Tiendanube. It includes credit cards, debit cards, Mercado Pago balance, Boleto, Pix, and installment payments without a card.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/nuvemshop/landing.en.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"available_payments: credit, debit, mercadopago, boleto, pix, cuotas_sin_tarjeta\"\n```\n\n----------------------------------------\n\nTITLE: Canceling Scheduled Report Generation Python\nDESCRIPTION: This Python snippet uses the Requests library to issue a DELETE request for canceling scheduled reporting. It includes authorization headers in the request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\nresponse = requests.delete('https://api.mercadopago.com/v1/account/settlement_report/schedule', headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Mercado Pago SFTP server\nDESCRIPTION: This snippet shows how to connect to the Mercado Pago SFTP server using the sftp command.  It requires the private key path, username and server domain. The private key is used for authentication.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/integration-configuration.en.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nshell> sftp -i ${dirname}/${id_rsa_sftp_ml} ${user_seller_sftp_ml}@sftp.mercadolibre.io\n```\n\n----------------------------------------\n\nTITLE: Available Payments Configuration for Colombia (mco)\nDESCRIPTION: This snippet defines the available payment methods for Colombia (mco). The `available_payments` field lists the supported payment methods. This allows for customizing the payment options offered in each country.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/woocommerce/landing.es.md#2025-04-18_snippet_12\n\nLANGUAGE: YAML\nCODE:\n```\n----[mco]---- \n\n---\navailable_payments: mercadopago, pse, credit, debit, efectivo\n\n----\n------------\n```\n\n----------------------------------------\n\nTITLE: Automating File Download with SFTP Batch Scripting in Terminal\nDESCRIPTION: This code snippet demonstrates how to automate file downloads using SFTP batch scripting. It involves creating a script file with SFTP commands to automate navigating directories and file retrieval. The necessary prerequisites include access to SFTP and writing privileges to create script files in the designated directory. Outputs of the batch include the downloaded files, and the script minimizes manual command input.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/download-a-file.en.md#2025-04-18_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\ncd selfserviceinitiativeout\nget result_589_6_20230804.csv\nbye\n```\n\nLANGUAGE: terminal\nCODE:\n```\nUY0FVFGW103Q05P: demo user$ sftp -b download_sftp_script pg_sap@sftp-qa.mercadolibre.io\nsftp> cd selfserviceoutput\nsftp> get result_589_6_20230804.zip\nsftp> get report_589_216_20230804.zip\nsftp> bye\nUY0FVFGW103Q05P:demo user$ ls\nreport_589_216_20230804.zip\tresult_589_6_20230804.zip\n```\n\n----------------------------------------\n\nTITLE: Resource Not Found Error Response\nDESCRIPTION: Indicates that the requested resource does not exist on the server. Returns a not found error with a specific message.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/discount-promise-no-coupon-responses.en.md#2025-04-18_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"error\": \"not_found\",\n   \"message\": \"Not found manual input code\",\n   \"status\": 404\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Transaction Amount Errors in JSON\nDESCRIPTION: This JSON snippet specifies a 400 Bad Request error structure, occurring when the transaction_amount field is non-zero. The 'status' and 'message' fields are pivotal, providing error context and diagnosis information via 'cause'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/api-responses.en.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"Invalid value for transaction_amount\",\n    \"error\": \"bad_request\",\n    \"status\": 400,\n    \"cause\": [\n        {\n            \"code\": 2072,\n            \"description\": \"Invalid value for transaction_amount\",\n            \"data\": \"26-09-2023T17:27:50UTC;76230673-8376-47ee-8d7f-6ccaacdb5b2a\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MercadoPago Preference with Multiple Items in Node.js\nDESCRIPTION: This Node.js code example demonstrates how to create a MercadoPago preference with multiple products. It defines a preference object with two items, each with its own title, quantity, currency, and price, then creates a payment button using the MercadoPago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Configura tu preferencia\nvar preference = {\n  items: [\n      { title: 'Mi producto',\n      quantity: 1,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 75.56 },\n\t{ title: 'Mi producto 2',\n      quantity: 2,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 96.56 }\n    ]\n};\n// Crea un botón de pago en tu sitio\nmercadopago.preferences.create(preference)\n.then(function(preference){\n  // Este valor reemplazará el string \"$$init_point$$\" en tu HTML\n  global.init_point = preference.body.init_point;\n}).catch(function(error){\n  console.log(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Card Component with Additional Data in React\nDESCRIPTION: This snippet shows how to use the Card component from Payment Brick in a React application, including handling of the additionalData in the onSubmit prop.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/additional-data.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\n<Card\n initialization={initialization}\n customization={customization}\n onSubmit={async (cardFormData, additionalData) => {\n   console.log(cardFormData, additionalData);\n }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment Flow with PaymentFlow in Kotlin\nDESCRIPTION: This code snippet demonstrates how to initialize the payment flow using the PaymentFlow class in Kotlin. It involves setting up the amount, description, success and error intents using buildCallbackUri, creating a PaymentFlowData object, and launching the payment flow activity with a callback to handle the payment response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/payment-flow-legacy-support.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval paymentFlow = MPManager.paymentFlow\n\nval amount = \"2.0\"\nval description = \"Payment description\"\nval intentSuccess = paymentFlow.buildCallbackUri(\n   callback = \"mercadopago://smart_integrations/payment_result\",\n   methodCallback = \"success\",\n   metadata = hashMapOf(\"message\" to \"testSuccess\"),\n   appID = \"demo.app\"\n)\nval intentError = paymentFlow.buildCallbackUri(\n   callback = \"mercadopago://smart_integrations/payment_result\",\n   methodCallback = \"error\",\n   metadata = hashMapOf(\"message\" to \"testError\"),\n   appID = \"demo.app\"\n)\n\nval paymentFlowData = PaymentFlowData(\n   amount = amount,\n   description = description,\n   intentSuccess = intentSuccess,\n   intentError = intentError,\n   paymentMethod = PaymentMethod.CREDIT_CARD.name,\n   installments = 6\n)\npaymentFlow.launchPaymentFlowActivity(\n   paymentFlowData = paymentFlowData,\n   context = context\n) { response ->\n   response.doIfSuccess { message ->\n       // Gerenciamento bem-sucedido usando uma mensagem\n   }.doIfError { error ->\n       // Gerenciamento do erro\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Brick Initialization Data with Unmount and Re-render in JavaScript\nDESCRIPTION: Example demonstrating how to properly update initialization data for a Brick component by using the unmount function before re-rendering. This prevents duplication errors by properly handling the component lifecycle.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/possible-errors.es.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\n//First render\nconst renderPaymentBrick = async (bricksBuilder) => {\n      const settings = {\n        initialization: {\n          amount: 100,\n          preferenceId: \"<YOUR_FIRST_PREFERENCE_ID>\"\n        },\n...\nwindow.paymentBrickController = await bricksBuilder.create(\n   \"payment\",\n   \"paymentBrick_container\",\n   settings\n );\n\n    };\n\nawait renderPaymentBrick(bricksBuilder);\n\n//Second render\nwindow.paymentBrickController.unmount()\n\nconst secondRenderPaymentBrick = async (bricksBuilder) => {\n      const settings = {\n        initialization: {\n          amount: 100,\n          preferenceId: \"<YOUR_SECOND_PREFERENCE_ID>\"\n        },\n...\nwindow.paymentBrickController = await bricksBuilder.create(\n   \"payment\",\n   \"paymentBrick_container\",\n   settings\n );\n\n    };\n\nawait secondRenderPaymentBrick(bricksBuilder);\n\n...\n\n// Brick Container\n<div id=\"paymentBrick_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago C# SDK\nDESCRIPTION: This snippet shows how to create a payment using the Mercado Pago C# SDK. It requires the MercadoPago C# SDK. It creates a payment request object with transaction details like transaction amount, token, and payer information.  The payment is then created asynchronously using the PaymentClient, including custom headers for the idempotency key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.es.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n \nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n \nvar paymentRequest = new PaymentCreateRequest\n{\n   TransactionAmount = decimal.Parse(Request[\"transactionAmount\"]),\n   Token = Request[\"token\"],\n   Description = Request[\"description\"],\n   Installments = int.Parse(Request[\"installments\"]),\n   PaymentMethodId = Request[\"paymentMethodId\"],\n   Payer = new PaymentPayerRequest\n   {\n       Email = Request[\"email\"],\n       Identification = new IdentificationRequest\n       {\n           Type = Request[\"identificationType\"],\n           Number = Request[\"identificationNumber\"],\n       },\n   },\n};\n \nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest, requestOptions);\n \nConsole.WriteLine(payment.Status);\n \n\n```\n\n----------------------------------------\n\nTITLE: Structuring Marketplace Sales Report Configuration via API\nDESCRIPTION: API call to create a report structure for marketplace sales, defining timezone, file format, and column specifications. This is the first step in setting up report generation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/structures' \\\n--header 'Authorization: Bearer {{TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"display_timezone\": \"GMT-03\",\n    \"name\": \"Structure de mi marketplace\",\n    \"file_format\": {\n        \"prefix\": \"marketplace\",\n        \"column_separator\": \";\",\n        \"decimal_separator\": \".\"\n    },\n    \"columns\": [\n        {\n            \"key\": \"COLLECTOR\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"COLLECTOR_NICKNAME\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"PAYMENT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"STATUS_DESCRIPTION\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"STATUS_DETAIL\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"PURCHASE_ORDER\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"PAYMENT_METHOD_TYPE\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"TRANSACTION_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"DATE_CREATED\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"DATE_APPROVED\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"MARKETPLACE_FEE_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"MERCADOPAGO_FEE_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"TOTAL_PAID_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"NET_RECEIVED_AMOUNT\",\n            \"alias\": \"\"\n        }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: iOS Device SDK Implementation\nDESCRIPTION: Implementation of the Mercado Pago Devices SDK in iOS applications using Swift and Objective-C.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.es.md#2025-04-18_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport MercadoPagoDevicesSDK\n...\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        ...        \n        MercadoPagoDevicesSDK.shared.execute()\n        ...\n}\n```\n\nLANGUAGE: objective-c\nCODE:\n```\n@import 'MercadoPagoDevicesSDK';\n...\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    ...\n    [[MercadoPagoDevicesSDK shared] execute];\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Card Payment with MercadoPago C# SDK\nDESCRIPTION: Implementation of card payment processing using MercadoPago's C# SDK. Shows configuration of access token, custom headers, and creation of payment request with transaction details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.es.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n \nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n \nvar paymentRequest = new PaymentCreateRequest\n{\n   TransactionAmount = decimal.Parse(Request[\"transactionAmount\"]),\n   Token = Request[\"token\"],\n   Description = Request[\"description\"],\n   Installments = int.Parse(Request[\"installments\"]),\n   PaymentMethodId = Request[\"paymentMethodId\"],\n   Payer = new PaymentPayerRequest\n   {\n       Email = Request[\"email\"],\n       Identification = new IdentificationRequest\n       {\n           Type = Request[\"identificationType\"],\n           Number = Request[\"identificationNumber\"],\n       },\n   },\n};\n \nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest, requestOptions);\n \nConsole.WriteLine(payment.Status);\n```\n\n----------------------------------------\n\nTITLE: Rendering Status Screen Brick with HTML Container\nDESCRIPTION: HTML code that creates a container div element for the Status Screen Brick to render into. The ID used here must match the one specified in the JavaScript create() method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/status-screen-brick/default-rendering.en.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"statusScreenBrick_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Money Transfer API Response\nDESCRIPTION: Sample response from the Mercado Pago API after successfully creating a money transfer. Contains details about the transaction including status, amounts, fees, and both payer and collector information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/money-transfer.es.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 4637181430,\n    \"date_created\": \"2018-04-17T09:26:39.000-04:00\",\n    \"date_approved\": \"2018-04-17T09:26:40.000-04:00\",\n    \"date_last_updated\": \"2018-04-17T09:26:40.000-04:00\",\n    \"date_of_expiration\": null,\n    \"money_release_date\": \"2018-04-29T09:26:40.000-04:00\",\n    \"operation_type\": \"money_transfer\",\n    \"issuer_id\": null,\n    \"payment_method_id\": \"account_money\",\n    \"payment_type_id\": \"account_money\",\n    \"status\": \"approved\",\n    \"status_detail\": \"accredited\",\n    \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n    \"description\": \"Title of what you are paying for\",\n    \"live_mode\": true,\n    \"sponsor_id\": null,\n    \"authorization_code\": \"1234567\",\n    \"money_release_schema\": null,\n    \"collector_id\": 307467332,\n    \"payer\": { \n\t    \"email\": \"test_user_77371011@testuser.com\",\n\t    \"entity_type\": null,\n\t    \"first_name\": \"Test\",\n\t    \"id\": \"399605060\",\n\t    \"identification\": { \n\t\t    \"number\": \"32659430\",\n\t\t    \"type\": \"DNI\" \n\t     },\n\t    \"last_name\": \"Test\",\n\t    \"operator_id\": null,\n\t    \"phone\": { \n\t\t    \"area_code\": \"01\",\n\t\t    \"extension\": null,\n\t\t    \"number\": \"1111-1111\" \n\t    },\n\t    \"type\": \"guest\" \n\t},\n    \"additional_info\": {\n    },\n    \"order\": {},\n    \"external_reference\": \"Reference_1234\",\n    \"transaction_amount\": 100,\n    \"transaction_amount_refunded\": 0,\n    \"coupon_amount\": 0,\n    \"differential_pricing_id\": null,\n    \"deduction_schema\": null,\n    \"transaction_details\": {\n        \"net_received_amount\": 90.96,\n        \"total_paid_amount\": 100,\n        \"overpaid_amount\": 0,\n        \"external_resource_url\": null,\n        \"installment_amount\": 100,\n        \"financial_institution\": null,\n        \"payment_method_reference_id\": \"null\",\n        \"payable_deferral_period\": null,\n        \"acquirer_reference\": null\n    },\n    \"fee_details\": [\n        {\n            \"type\": \"mercadopago_fee\",\n            \"amount\": 9.04,\n            \"fee_payer\": \"collector\"\n        }\n    ],\n    \"captured\": true,\n    \"binary_mode\": false,\n    \"call_for_authorize_id\": null,\n    \"statement_descriptor\": \"MERCADOPAGO\",\n    \"installments\": 1,\n    \"card\": {\n    },\n    \"notification_url\": \"https://www.your-site.com/webhooks\",\n    \"refunds\": [],\n    \"processing_mode\": \"aggregator\",\n    \"merchant_account_id\": null,\n    \"acquirer\": null,\n    \"merchant_number\": null,\n    \"acquirer_reconciliation\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Executing SFTP Batch Script in Terminal\nDESCRIPTION: This snippet demonstrates how to execute an SFTP batch script from the command line. It includes the command structure and parameters needed to run the script.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/upload-a-file.en.md#2025-04-18_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nshell> sftp -b batch_script_file_name username@sftp.mercadolibre.io\n```\n\n----------------------------------------\n\nTITLE: Payment Response Example\nDESCRIPTION: Example JSON response showing the payment status and transaction details returned by the Mercado Pago API after creating a payment request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mlu.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n   {\n       ...,\n       \"id\": 5466310457,\n       \"status\": \"pending\",\n       \"status_detail\": \"pending_waiting_payment\",\n       ...,\n       \"transaction_details\": {\n           \"net_received_amount\": 0,\n           \"total_paid_amount\": 100,\n           \"overpaid_amount\": 0,\n           \"external_resource_url\": \"https://www.mercadopago.com.ar/payments/123456/ticket?caller_id=123456&payment_method_id=abitab&payment_id=123456&payment_method_reference_id=123456\",\n           \"installment_amount\": 0,\n           \"financial_institution\": null,\n           \"payment_method_reference_id\": \"1234567890\"\n       }\n   }\n]\n```\n\n----------------------------------------\n\nTITLE: Associating Facebook Ads Pixel with MercadoPago Preference\nDESCRIPTION: Shows how to associate a Facebook Pixel with a MercadoPago preference for tracking conversions from Facebook ads. Requires replacing 'PIXEL_ID' with the actual Facebook Pixel identifier.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/preferences.en.md#2025-04-18_snippet_4\n\nLANGUAGE: node\nCODE:\n```\n// Create a preference object\nvar preference = {\n  // Associate your Facebook Pixel\n  tracks: [\n        {\n          type: \"facebook_ad\",\n          values: {\n            \"pixel_id\": 'PIXEL_ID'\n          }\n        }\n      ]\n  //...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Back URLs in Node.js\nDESCRIPTION: This snippet illustrates how to define back URLs and the auto return feature for payment preferences in Node.js applications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/redirection.es.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nvar preference = {}\npreference = {\n  // ...\n  \"back_urls\": {\n        \"success\": \"https://www.tu-sitio/success\",\n        \"failure\": \"http://www.tu-sitio/failure\",\n        \"pending\": \"http://www.tu-sitio/pending\"\n    },\n    \"auto_return\": \"approved\",\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining Access Token using Client Credentials in Node.js\nDESCRIPTION: This Node.js snippet shows how to use the Mercado Pago SDK to create an OAuth client and request an Access Token. It requires the MercadoPagoConfig and OAuth classes from the SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/creation.en.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token', options: { timeout: 5000 } }); \n\nconst oauth = new OAuth(client);\n\noauth.create({\n\t'client_secret': 'your-client-secret',\n\t'client_id': 'your-client-id',\n}).then((result) => console.log(result))\n\t.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Implementing Payment Submission with Additional Data - Brazil\nDESCRIPTION: Example of implementing the onSubmit callback for payment processing in Brazil, including handling of additional payment data and wallet purchases.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/additional-data.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n  ...,\n  callbacks: {\n    onSubmit: ({ selectedPaymentMethod, formData }, additionalData) => {\n      // callback called after the user clicks the submit button for the data\n      // the additionalData parameter is optional, so you can remove it if you want\n      console.log(additionalData);\n      // example of sending the data collected by Brick to your server\n      return new Promise((resolve, reject) => {\n        const url = \"<YOUR-BACKEND-URL-HERE>\";\n\n        if (selectedPaymentMethod === \"wallet_purchase\") {\n          // wallet_purchase (Conta Mercado Pago) does not need to be sent by the backend\n          resolve();\n        }\n\n        fetch(url, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(formData),\n        })\n          .then((response) => response.json())\n          .then((response) => {\n            // receive the payment result\n            resolve();\n          })\n          .catch((error) => {\n            // handle the error response when trying to create the payment\n            reject();\n          });\n      });\n    },\n  },\n};\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\n<Payment\n initialization={initialization}\n customization={customization}\n onSubmit={async ({ selectedPaymentMethod, formData }, additionalData) => {\n   console.log({ selectedPaymentMethod, formData }, additionalData);\n }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Brick Appearance - React JSX\nDESCRIPTION: This React JSX snippet illustrates the same customization properties for the Wallet Brick component. It focuses on theme settings and custom styles directly within a React component's context.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/change-appearance.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n    theme:'dark',\n    customStyle: {\n        valueProp: 'practicality',\n        valuePropColor: 'black',\n        borderRadius: '10px',\n        verticalPadding: '10px',\n        horizontalPadding: '10px',\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Verifying HMAC signature in Python\nDESCRIPTION: This Python snippet demonstrates how to verify an HMAC signature received from Mercado Pago. It extracts the timestamp (`ts`) and hash from the signature string, constructs a manifest string, generates an HMAC signature using SHA256, and compares it to the received hash for verification.  The snippet assumes that necessary variables such as parts, dataID, xRequestId, and the secret key are available in the environment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.es.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n\"# Initializing variables to store ts and hash\nts = None\nhash = None\n\n# Iterate over the values to obtain ts and v1\nfor part in parts:\n    # Split each part into key and value\n    keyValue = part.split(\"=\", 1)\n    if len(keyValue) == 2:\n        key = keyValue[0].strip()\n        value = keyValue[1].strip()\n        if key == \\\"ts\\\":\n            ts = value\n        elif key == \\\"v1\\\":\n            hash = value\n\n# Obtain the secret key for the user/application from Mercadopago developers site\nsecret = \\\"your_secret_key_here\\\"\n\n# Generate the manifest string\nmanifest = f\\\"id:{dataID};request-id:{xRequestId};ts:{ts};\\\"\n\n# Create an HMAC signature defining the hash type and the key as a byte array\nhmac_obj = hmac.new(secret.encode(), msg=manifest.encode(), digestmod=hashlib.sha256)\n\n# Obtain the hash result as a hexadecimal string\nsha = hmac_obj.hexdigest()\nif sha == hash:\n    # HMAC verification passed\n    print(\\\"HMAC verification passed\\\")\nelse:\n    # HMAC verification failed\n    print(\\\"HMAC verification failed\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Card Reference with Mercado Pago SDK in Java\nDESCRIPTION: This code shows how to delete a customer's card reference using Java. By invoking 'get' on 'CustomerCardClient' with both customer ID and card ID, it attempts to remove the card reference associated with the specified IDs.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/cards.en.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nCustomerCardClient client = new CustomerCardClient();\n\nString customerId = \"448870796-7ZjwhKGxILixxN\";\nString cardId = \"8987269652\";\nclient.get(customerId, cardId);\n```\n\n----------------------------------------\n\nTITLE: Configurando Data de Vencimento em Node.js\nDESCRIPTION: Código Node.js para definir a data de vencimento de um pagamento em dinheiro usando o formato ISO 8601. A data deve estar entre 1 e 30 dias a partir da emissão.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n===\nA data usa o formato ISO 8601: yyyy-MM-dd'T'HH:mm:ssz\n===\n\ndate_of_expiration: \"2020-05-30T23:59:59.000-04:00\",\n```\n\n----------------------------------------\n\nTITLE: Checkout Pro Section Configuration\nDESCRIPTION: YAML configuration for the Checkout Pro feature section, including title, type, message, and image.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/shopify/landing.en.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbullet_section_with_media: \n - title: Receive payments with Mercado Pago Checkout Pro\n - type: normal\n - message: Integrate Mercado Pago into Shopify and redirect your buyers directly to the Mercado Pago page, allowing them to complete the payment simply and securely. Checkout Pro offers a pre-configured design to streamline the payment experience.\n - image: /shopify/mini-landing-1.png\n```\n\n----------------------------------------\n\nTITLE: Creating Podfile for CocoaPods - Ruby\nDESCRIPTION: This snippet outlines the commands to create and open a Podfile in Xcode, where you can specify the dependencies your project will use, particularly for the Mercado Pago SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ios.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\n$ touch Podfile\n$ open -a Xcode Podfile\n```\n\n----------------------------------------\n\nTITLE: Configuring Installments in Card Payment Brick using React\nDESCRIPTION: This snippet shows how to configure minimum and maximum installment values for the Card Payment Brick component in a React application. The configuration is set up in the 'customization.paymentMethods' object.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/max-and-min-installments.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n  paymentMethods: {\n   minInstallments: number,\n   maxInstallments: number,\n },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding a New Card Using MercadoPago with Java\nDESCRIPTION: This Java snippet demonstrates how to add a new card to a customer's profile in Mercado Pago. It requires MercadoPagoConfig and appropriate client dependencies to handle customer and card operations. The card creation uses a token, issuer information, and payment method. No output is explicitly specified in the code.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.en.md#2025-04-18_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nCustomerClient customerClient = new CustomerClient();\nCustomerCardClient customerCardClient = new CustomerCardClient();\n\nCustomer customer = customerClient.get(\"247711297-jxOV430go9fx2e\");\n\nCustomerCardIssuer issuer = CustomerCardIssuer.builder()\n   .id(\"3245612\")\n   .build();\n\nCustomerCardCreateRequest cardCreateRequest = CustomerCardCreateRequest.builder()\n   .token(\"9b2d63e00d66a8c721607214cedaecda\")\n   .issuer(issuer)\n   .paymentMethodId(\"debit_card\")\n   .build();\n\ncustomerCardClient.create(customer.getId(), cardCreateRequest);\n```\n\n----------------------------------------\n\nTITLE: Canceling Payments in Mercado Pago with Ruby\nDESCRIPTION: Code to cancel a payment using the Mercado Pago Ruby SDK. This involves creating a request to update the payment status to 'canceled' using the payment ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/cancel-reserve.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new(ENV_ACCESS_TOKEN)\n\nrequest = {\n  status: 'canceled'\n}\n\npayment_response = sdk.payment.update(payment_id, request)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth Token in Node.js\nDESCRIPTION: This snippet demonstrates how to create an OAuth token using the MercadoPago SDK. It initializes a client with an access token and makes a request to create a token with necessary parameters like client secret, client ID, authorization code, and redirect URI.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/oauth.en.md#2025-04-18_snippet_0\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token', options: { timeout: 5000 } }); \n\nconst oauth = new OAuth(client);\n\noauth.create({\n\t'client_secret': 'your-client-secret',\n\t'client_id': 'your-client-id',\n\t'code': 'return-of-getAuthorizationURL-function',\n\t'redirect_uri': 'redirect-uri'\n}).then((result) => console.log(result))\n\t.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Installing React-Native-InAppBrowser using yarn\nDESCRIPTION: This snippet shows how to install the React-Native-InAppBrowser package using yarn, which offers a similar purpose as the npm method, providing a browser integration within the application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-cli.en.md#2025-04-18_snippet_1\n\nLANGUAGE: yarn\nCODE:\n```\nyarn add react-native-inappbrowser-reborn\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods in Mercado Pago Ruby\nDESCRIPTION: This Ruby snippet sets up the payment methods using a hash structure, specifying fields like excluded payment methods, payment types, and installments. It assumes the use of the Mercado Pago Ruby gem. The snippet does not mention any explicit dependencies.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n#...\npreference_data = {\n  # ...\n  payment_methods: {\n    excluded_payment_methods: [\n      { id: 'master' }\n    ],\n    excluded_payment_types: [\n      { id: 'ticket' }\n    ],\n    installments: 12\n  }\n  # ...\n}\n#...\n```\n\n----------------------------------------\n\nTITLE: Successful QR Code Resolution Response\nDESCRIPTION: This JSON snippet represents the expected response from the Mercado Pago API after successfully resolving the QR code. It includes information about the collector, order details, administrator, and allowed payment methods. The `status` field indicates whether an amount needs to be specified.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/interoperable-accepting-flow-test.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"{\n    \"collector\": {\n        \"name\": \"Test Test\",\n        \"account\": \"0000009388000001809754\",\n        \"identification_number\": \"27326594305\",\n        \"mcc\": \"5912\",\n        \"postal_code\": \"c1430dnn\"\n    },\n    \"order\": {\n        \"id\": \"is282acfe8f8cb49b8a4f1a020242c1adf0854\",\n        \"items\": [\n            {\n                \"title\": \"Producto de Rowhna\",\n                \"description\": \"Producto\",\n                \"currency_id\": \"ARS\",\n                \"quantity\": 1\n            }\n        ]\n    },\n    \"administrator\": {\n        \"name\": \"COELSA\",\n        \"identification_number\": \"30692264785\"\n    },\n    \"additional_info\": \"\",\n    \"status\": \"open_amount\",\n    \"payment_methods_allowed\": [\n        {\n            \"id\": \"CARD\",\n            \"restrictions\": {\n                \"min_amount_allowed\": 3,\n                \"max_amount_allowed\": 15000000\n            }\n        },\n        {\n            \"id\": \"TRANSFER\",\n            \"restrictions\": {\n                \"min_amount_allowed\": 0.01,\n                \"max_amount_allowed\": 100000000\n            }\n        }\n    ]\n}\n\"\n```\n\n----------------------------------------\n\nTITLE: Initialize and render Card Payment Brick\nDESCRIPTION: This JavaScript code initializes the MercadoPago SDK and then renders the Card Payment Brick within the specified container. It includes settings for initialization (amount, payer), styling (theme), and callbacks (onReady, onSubmit, onError) to handle different stages of the payment process. The onSubmit callback simulates sending the form data to a server via a fetch request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-clientside.es.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n\" \\n   const mp = new MercadoPago('YOUR_PUBLIC_KEY');\\nconst bricksBuilder = mp.bricks();\\nconst renderPaymentBrick = async (bricksBuilder) => {\\n   const settings = {\\n       initialization: {\\n           amount: 100, //valor do processamento a ser realizado\\n           payer: {\\n           email: '<PAYER_EMAIL_HERE>',\\n       },\\n       },\\n       style: {\\n           theme: 'default' // | 'dark' | 'bootstrap' | 'flat'\\n       },\\n       callbacks: {\\n           onReady: () => {\\n           // callback chamado quando o Brick estiver pronto\\n           },\\n           onSubmit: ({paymentType, formData}) => {\\n           // callback chamado o usuário clicar no botão de submissão dos dados\\n           // ejemplo de envío de los datos recolectados por el Brick a su servidor\\n           return new Promise((resolve, reject) => {\\n               fetch(\\\"/processar-pago\\\", {\\n                   method: \\\"POST\\\",\\n                   headers: {\\n                       \\\"Content-Type\\\": \\\"application/json\\\",\\n                   },\\n                   body: JSON.stringify(formData)\\n               })\\n               .then((response) => {\\n                   // receber o resultado do pagamento\\n                   resolve();\\n               })\\n               .catch((error) => {\\n                   // lidar com a resposta de erro ao tentar criar o pagamento\\n                   reject();\\n               })\\n               });\\n           },\\n           onError: (error) => {\\n           // callback chamado para todos os casos de erro do Brick\\n           },\\n       },\\n   };\\n   window.cardPaymentBrickController = await bricksBuilder.create('payment', 'paymentBrick_container', settings);\\n};\\nrenderPaymentBrick(bricksBuilder);\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Associated Cards for a Customer with Mercado Pago\nDESCRIPTION: This snippet demonstrates how to retrieve the cards associated with a specific customer using Mercado Pago's SDK. It requires the customer ID, which is used to fetch the list of associated cards.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.en.md#2025-04-18_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $customer_client = new CustomerClient();\n  $cards = $client->list(\"customer_id\");\n  echo implode ($cards);\n?>\n```\n\n----------------------------------------\n\nTITLE: Setting Integrator ID in Node.js\nDESCRIPTION: Code for setting integrator identification in Mercado Pago Node.js implementation. Replace INTEGRATOR_ID with your actual value to identify your integration and work with metrics.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/metrics/integration-metrics.en.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nconst  requestOptions = {\n'integratorId': 'INTEGRATOR_ID',\n};\n```\n\n----------------------------------------\n\nTITLE: Criando Campo Oculto para Device ID em HTML\nDESCRIPTION: Exemplo de como criar um campo de input oculto para armazenar o Device ID no HTML da página.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-chopro.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"hidden\" id=\"deviceId\">\n```\n\n----------------------------------------\n\nTITLE: Implementando Receptor de Notificaciones IPN\nDESCRIPTION: Código de ejemplo para implementar un receptor de notificaciones IPN que procesa los pagos y órdenes recibidas.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/ipn.es.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  MercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n  $merchant_order = null;\n  switch($_GET[\"topic\"]) {\n      case \"payment\":\n          $payment = MercadoPago\\Payment::find_by_id($_GET[\"id\"]);\n          // Get the payment and the corresponding merchant_order reported by the IPN.\n          $merchant_order = MercadoPago\\MerchantOrder::find_by_id($payment->order->id);\n          break;\n      case \"merchant_order\":\n          $merchant_order = MercadoPago\\MerchantOrder::find_by_id($_GET[\"id\"]);\n          break;\n  }\n  $paid_amount = 0;\n  foreach ($merchant_order->payments as $payment) { \n      if ($payment['status'] == 'approved'){\n          $paid_amount += $payment['transaction_amount'];\n      }\n  }\n   // If the payment's transaction amount is equal (or bigger) than the merchant_order's amount you can release your items\n  if($paid_amount >= $merchant_order->total_amount){\n      if (count($merchant_order->shipments)>0) { // The merchant_order has shipments\n          if($merchant_order->shipments[0]->status == \"ready_to_ship\") {\n              print_r(\"Totally paid. Print the label and release your item.\");\n          }\n      } else { // The merchant_order don't has any shipments\n          print_r(\"Totally paid. Release your item.\");\n      }\n  } else {\n      print_r(\"Not paid yet. Do not release your item.\");\n  }\n ?>\n```\n\n----------------------------------------\n\nTITLE: Application Deep Link Configuration in XML\nDESCRIPTION: Configures deep linking in an iOS app using an Info.plist XML entry. This snippet sets up URL types including CFBundleURLSchemes and CFBundleURLName to establish deep link paths, facilitating navigation back into the app from external sources.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/swift.en.md#2025-04-18_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<dict>\n     …\n\n\t<key>CFBundleURLTypes</key>\n\t<array>\n\t\t<dict>\n\t\t\t<key>CFBundleTypeRole</key>\n\t\t\t<string>Editor</string>\n\t\t\t<key>CFBundleURLName</key>\n\t\t\t<string>your_identifier_here</string>\n\t\t\t<key>CFBundleURLSchemes</key>\n\t\t\t<array>\n\t\t\t\t<string>iosapp</string>\n\t\t\t</array>\n\t\t</dict>\n\t</array>\n    …\n\t\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Launch Payment Method with Configuration\nDESCRIPTION: This snippet shows how to initiate a payment flow with a specific payment method and additional configuration options. It uses the `launchPaymentMethod` function with parameters for amount, payment method, metadata, success callback, and error callback.  `encodeURIComponent` is used to ensure valid URL encoding of the metadata.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/start-payment-flow.es.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlaunchPaymentMethod(amount, paymentMethod\nencodeURIComponent({\"attr\":\"123\"}), 'congrats.html', 'error.html')\n```\n\n----------------------------------------\n\nTITLE: Payment Response JSON Example\nDESCRIPTION: Sample JSON response for a payment with pending 3DS challenge, showing key authentication information\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.es.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 52044997115,\n    \"status\": \"pending\",\n    \"status_detail\": \"pending_challenge\",\n    \"three_ds_info\": {\n        \"external_resource_url\": \"https://acs-public.tp.mastercard.com/api/v1/browser_Challenges\",\n        \"creq\": \"eyJ0aHJlZURTU2VydmVyVHJhbnNJRCI6ImJmYTVhZjI0LTliMzAtNGY1Yi05MzQwLWJkZTc1ZjExMGM1MCIsImFjc1RyYW5zSUQiOiI3MDAwYTI2YS1jYWQ1LTQ2NjQtOTM0OC01YmRlZjUwM2JlOWYiLCJjaGFsbGVuZ2VXaW5kb3dTaXplIjoiMDQiLCJtZXNzYWdlVHlwZSI6IkNSZXEiLCJtZXNzYWdlVmVyc2lvbiI6IjIuMS4wIn0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Discounts for All Buyers with Mercado Pago API\nDESCRIPTION: This snippet shows how to check for available discount campaigns applicable to all buyers using the Mercado Pago API. The `transaction_amount` and `payer_email` are key parameters. This returns details like the discount ID, percentage, and amount off.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/discount-campaigns.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -H \"Accept: application/json\" \\\n -H 'Authorization: Bearer ACCESS_TOKEN' \\\n'https://api.mercadopago.com/v1/discount_campaigns?transaction_amount=299.99&payer_email=test_user_85556797@testuser.com' \\\n\n```\n\n----------------------------------------\n\nTITLE: Creando una nota simple en Markdown\nDESCRIPTION: Este snippet muestra cómo crear una nota simple en Markdown. Se utiliza para destacar tips o recomendaciones en la documentación.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/style-guide/notes.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> Esto es un ejemplo de nota.\n```\n\n----------------------------------------\n\nTITLE: Configuring Marketplace-Specific Payment Methods\nDESCRIPTION: Structured documentation showing the configuration steps for offline payment methods in different marketplaces (MLM, MLB, MLA, MCO, MPE, MLU). Each section includes steps for enabling the payment method, setting titles, and configuring payment deadlines.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/adobe-commerce/cho-api-offline-payment-methods.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the store Control Panel, go to **Stores > Configuration > Sales > Payment Methods**.\n2. In the Mercado Pago plugin, click **Configure**.\n3. Click on the **Transparent Checkout** tab and then click on **Offline Payment Methods**.\n4. In the payment method option, complete the fields according to the descriptions below.\n   1. In **Enabled**, choose between \"Yes\" or \"No\". This option defines whether the payment method will be available for use.\n   2. In **Title**, define how you want this payment method to appear in the checkout.\n   3. In **Deadline for payment**, choose the time that the customer has to complete the payment.\n```\n\n----------------------------------------\n\nTITLE: Conflict Response (409)\nDESCRIPTION: This JSON snippet represents a \"Conflict\" response (HTTP status code 409) from the Mercado Pago API. This response signifies that the payment process is already in progress or has already been paid, violating the idempotency principle. Therefore, the request is rejected.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/idempotency-returns.es.md#2025-04-18_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"status\": \"409\",\n   \"error\":  \"Conflict\",\n   \"message\": \"The process has not been completed yet. Try again later.\",\n   \"cause\": [\n    {\n      \"code\":\"401001\",\n      \"message\": \"The process has not been completed yet. Try again later.\",\n      \"data\": null\n    }\n   ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Criando Pagamento com Efecty usando C#\nDESCRIPTION: Código C# para criar um pagamento via Efecty usando o SDK do Mercado Pago. Configura o token de acesso e cria um objeto de requisição com os detalhes do pagamento.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_42\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = 5000,\n    Description = \"Título do produto\",\n    PaymentMethodId = \"efecty\",\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"test_user_19549678@testuser.com\",\n    },\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Customer Card with Mercado Pago SDK in PHP\nDESCRIPTION: Removes a card reference associated with a customer using the CustomerCardClient. The function requires both the customer ID and the card ID to identify which payment method to delete. This allows customers to remove payment methods they no longer wish to use.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/cards.en.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new CustomerCardClient();\n  $client->delete(\"448870796-7ZjwhKGxILixxN\", \"8987269652\");\n?>\n```\n\n----------------------------------------\n\nTITLE: Associating Facebook Ads with Payment Preference in Dotnet\nDESCRIPTION: This Dotnet snippet serves to associate a Facebook Ads pixel with a payment preference to track conversions. It utilizes a PreferenceClient to create a new preference including tracking parameters. The Pixel ID needs to be specified for proper functionality.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/preferences.es.md#2025-04-18_snippet_2\n\nLANGUAGE: dotnet\nCODE:\n```\n===\nAgrega el código en la preferencia y reemplaza el valor <code>PIXEL_ID</code> por tu identificador.\n===\n// Asocia tu píxel de Facebook\nvar tracks = new List<PreferenceTrackRequest>\n{\n    new PreferenceTrackRequest\n    {\n        Type = \"facebook_ad\",\n        Values = new PreferenceTrackValuesRequest\n        {\n            PixelId = \"PIXEL_ID\",\n        },\n    },\n};\nvar request = new PreferenceRequest\n{\n    // ...\n    Tracks = tracks,\n};\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Subsequent Payment Processing with cURL\nDESCRIPTION: Complete cURL request for processing subsequent payments including network transaction ID\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/network-transaction-id.en.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"description\": \"{{description}}\",\n    \"token\": \"{{card_token}}\",\n    \"payer\": {\n        \"id\": \"{{customer_id}}\",\n        \"type\": \"{{type}}\"\n    },\n    \"payment_method_id\": \"{{payment_method_id}}\",\n    \"transaction_amount\": {{transaction_amount}},\n    \"point_of_interaction\": {\n        \"type\": \"{{type}}\",\n        \"transaction_data\": {\n            \"first_time_use\": {{first_time_use}},\n            \"subscription_id\": \"{{subscription_id}}\",\n            \"subscription_sequence\": {\n                \"number\": {{subscription_number}},\n                \"total\": {{subscription_total}}\n            },\n            \"invoice_period\": {\n                \"period\": {{invoice_period}},\n                \"type\": \"{{invoice_type}}\"\n            },\n            \"billing_date\": \"{{billing_date}}\",\n            \"user_present\": {{user_present}}\n        }\n    },\n    \"forward_data\": {\n        \"network_transaction_data\": {\n            \"network_transaction_id\": \"{{network_transaction_id}}\"\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Inicializando el SDK de Dispositivos en Swift\nDESCRIPTION: Inicializa el módulo MercadoPagoDevicesSDK en el evento didFinishLaunchingWithOptions del AppDelegate para aplicaciones iOS desarrolladas en Swift.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-chopro.es.md#2025-04-18_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport MercadoPagoDevicesSDK\n...\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        ...        \n        MercadoPagoDevicesSDK.shared.execute()\n        ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Efecty Payment with MercadoPago SDK\nDESCRIPTION: Code examples for creating an Efecty payment across different programming languages using MercadoPago's SDK. Includes handling of transaction amount, payer information, and idempotency key implementation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mco.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\Client\\Common\\RequestOptions;\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['transactionAmount'],\n    \"token\" => $_POST['token'],\n    \"description\" => $_POST['description'],\n    \"installments\" => $_POST['installments'],\n    \"payment_method_id\" => $_POST['paymentMethodId'],\n    \"issuer_id\" => $_POST['issuer'],\n    \"payer\" => [\n      \"email\" => $_POST['email'],\n      \"first_name\" => $_POST['payerFirstName'],\n      \"last_name\" => $_POST['payerLastName'],\n      \"identification\" => [\n        \"type\" => $_POST['identificationType'],\n        \"number\" => $_POST['number']\n      ]\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nconst mercadopago = require('mercadopago');\nimport { MercadoPagoConfig, Payment } from '@src/index';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>', options: { timeout: 5000 } });\n\nconst payment = new Payment(client);\n\npayment\n  .create({\n    body: {\n      transaction_amount: 100,\n      token: '<TOKEN>',\n      description: '<DESCRIPTION>',\n      installments: 1,\n      payment_method_id: '<PAYMENT_METHOD_ID>',\n      issuer_id: 310,\n      payer: {\n        email: '<EMAIL>',\n        identification: {\n          number: '12345678909',\n          type: 'CPF',\n        },\n      },\n    },\n  }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Obtaining Access Token using Client Credentials in PHP\nDESCRIPTION: This PHP snippet demonstrates how to create an OAuth client and request an Access Token using client credentials. It requires the OauthClient and OAuthCreateRequest classes from the Mercado Pago SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/creation.en.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new OauthClient();\n   $request = new OAuthCreateRequest();\n     $request->client_secret = \"CLIENT_SECRET\";\n     $request->client_id = \"CLIENT_ID\";\n\n  $client->create($request);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Item Preference in Java\nDESCRIPTION: This snippet demonstrates creating a preference with multiple items using Java. It shows how to set up item requests and create the preference using the Mercado Pago SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n// Create a preference object\nPreferenceClient client = new PreferenceClient();\n// Create items in the preference\nList<PreferenceItemRequest> items = new ArrayList<>();\n\nPreferenceItemRequest item1 =\n   PreferenceItemRequest.builder()\n       .id(\"1234\")\n       .title(\"Produto 1\")\n       .quantity(2)\n       .currencyId(\"BRL\")\n       .unitPrice(new BigDecimal(\"100\"))\n       .build();   \nPreferenceItemRequest item2 =\n   PreferenceItemRequest.builder()\n       .id(\"12\")\n       .title(\"Produto 2\")\n       .quantity(1)\n       .currencyId(\"BRL\")\n       .unitPrice(new BigDecimal(\"100\"))\n       .build();\n\nitems.add(item1);\nitems.add(item2);\n\nPreferenceRequest request = PreferenceRequest.builder().items(items).build();\n// Save and post the preference\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Basic React Native Expo Web Browser Implementation\nDESCRIPTION: Example component showing how to implement expo-web-browser to open URLs in a native browser view.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-expo-go.en.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n\tStatusBar\n} from \"expo-status-bar\";\nimport {\n\tStyleSheet,\n\tButton,\n\tView\n} from \"react-native\";\nimport {\n\topenBrowserAsync\n} from \"expo-web-browser\";\nexport default function ExpoWebBrowserExample(url) {\n\treturn ( <\n\t\tView style = {\n\t\t\tstyles.container\n\t\t} > < Button title = \"Open Browser\"\n\t\tonPress = {\n\t\t\t() => openBrowserAsync('YOUR-URL-PREFERENCE')\n\t\t}\n\t\t/> <StatusBar style=\"auto\" / >\n\t\t<\n\t\t/View> );\n\t}\n\tconst styles = StyleSheet.create({\n\t\tcontainer: {\n\t\t\tflex: 1,\n\t\t\tbackgroundColor: \"#fff\",\n\t\t\talignItems: \"center\",\n\t\t\tjustifyContent: \"center\",\n\t\t},\n\t});\n```\n\n----------------------------------------\n\nTITLE: API Response for Terminal ID Query\nDESCRIPTION: This JSON snippet shows the expected response format from the Redelcom API when querying for a terminal ID. It contains a single field 'terminal' with the numeric ID value.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/api-get-terminal.es.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"terminal\": \"3127\"\n}\n```\n\n----------------------------------------\n\nTITLE: OAuth Authorization URL (MCO)\nDESCRIPTION: This snippet shows the OAuth authorization URL for Colombia (MCO). It's used to redirect users to authorize the marketplace to manage their sales. Replace `<APP_ID>` with the application ID and `<REDIRECT_URI>` with the configured redirect URI.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/configuration.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\n\"https://auth.mercadopago.com.co/authorization?client_id=<APP_ID>&response_type=code&platform_id=mp&redirect_uri=<REDIRECT_URI>\"\n```\n\n----------------------------------------\n\nTITLE: Get Devices API Request\nDESCRIPTION: API request to retrieve list of Point devices associated with Mercado Pago account.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/test-integration-configuration.es.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\n/point_integration-api/devices\n```\n\n----------------------------------------\n\nTITLE: Brand Name Display Format for Card Statements\nDESCRIPTION: Format specification for how the merchant name appears on Master and Amex credit card statements when processing through Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/introduction.en.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMP*<brand_name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods for Mexico (MLM)\nDESCRIPTION: YAML configuration specifying available payment methods for Mexico, including credit, debit, mercadopago, efectivo, and atm.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/landing.en.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\navailable_payments: credit, debit, mercadopago, efectivo, atm\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods in JavaScript for Checkout Bricks\nDESCRIPTION: This code snippet demonstrates how to exclude debit card payments using the customization property in the settings object for Checkout Bricks. It sets the 'excluded' array to contain 'debit_card', effectively disabling debit card payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/configure-payment-methods.es.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nsettings = {\n  ...,\n  customization: {\n    paymentMethods: {\n      types:{\n        excluded: ['debit_card']\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling Payment with Mercado Pago PHP SDK\nDESCRIPTION: This code snippet demonstrates how to cancel a payment using the Mercado Pago PHP SDK. It initializes a PaymentClient, sets custom headers including an idempotency key, and calls the `cancel` method with the payment ID and request options. The idempotency key ensures that the cancellation request is processed only once, even if the request is sent multiple times.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/cancellation.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $client->cancel('123456789', $request_options);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Multiple Items\nDESCRIPTION: This cURL command demonstrates how to create a Mercado Pago preference with multiple items using a direct API call. It sends a POST request to the Mercado Pago API with a JSON payload containing an array of items.  Each item specifies the product ID, quantity, unit price, and title.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n  'https://api.mercadopago.com/checkout/preferences' \\\n  -H 'Content-Type: application/json' \\\n  -H 'cache-control: no-cache' \\\n  -H 'Authorization: Bearer PROD_ACCESS_TOKEN' \\\n  -d '{\n\t\"items\": [\n\t{\n\t\t\"id_product\":1,\n\t\t\"quantity\":1,\n\t\t\"unit_price\": 234.33,\n\t\t\"titulo\":\"Meu produto\"\n\t},\n\t{\n\t\t\"id_product\":2,\n\t\t\"quantity\":2,\n\t\t\"unit_price\": 255.33,\n\t\t\"titulo\":\"Meu produto 2\"\n\t}\n]\n}'\n\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Payment Search in MercadoPago API\nDESCRIPTION: This JSON snippet shows the expected response format for a payment search request. It includes pagination information and an array of results.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/retrieving-payments.es.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"paging\": {\n    \"total\": 1234,\n    \"limit\": 30,\n    \"offset\": 0\n  },\n  \"results\": [\n    {}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook Event: Payment Method Update\nDESCRIPTION: This code snippet shows the JSON structure of a webhook notification sent when the payment method for an agreement is updated. The `action` field is set to `payment_method.updated`, indicating that the user has updated or added a secondary payment method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/notifications.en.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\n\n```curl\n{\n  \"id\": \"22abcd1235ed497f945f755fcaba3c6c\",\n  \"type\": \"wallet_connect\",\n  \"entity\": \"agreement\",\n  \"action\": \"payment_method.updated\",\n  \"date\": \"2021-09-30T23:24:44Z\",\n  \"model_version\": 1,\n  \"version\": 0,\n  \"data\": {\n    \"id\": \"22abcd1235ed497f945f755fcaba3c6c\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Signing HTTP Request with Ed25519 in Go\nDESCRIPTION: This Go code snippet demonstrates how to sign an HTTP request body using an Ed25519 private key and include the signature in the `x-signature` header. It reads the private key from a file, signs the request body, encodes the signature in Base64, adds the signature to the request header, sends the request, and prints the response. Dependencies include the `crypto/ed25519`, `encoding/base64`, `fmt`, `io/ioutil`, `net/http`, and `bytes` packages.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/encryption.es.md#2025-04-18_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n    \"bytes\"\n    \"crypto/ed25519\"\n    \"encoding/base64\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n)\n\nfunc main() {\n    // Path to the file storing the private key\n    privateKeyFile := \"private.key\"\n\n    // Read the private key from the file\n    privateKeyBytes, err := ioutil.ReadFile(privateKeyFile)\n    if err != nil {\n        fmt.Println(\"Error reading private key:\", err)\n        return\n    }\n\n    // Convert the private key bytes to a PrivateKey\n    privateKey := ed25519.PrivateKey(privateKeyBytes)\n\n    // Define your request body\n    requestBody := []byte(`{\"key\": \"value\"}`)\n\n    // Sign the request body with the private key\n    signature := ed25519.Sign(privateKey, requestBody)\n\n    // Encode the signature to base64\n    signatureBase64 := base64.StdEncoding.EncodeToString(signature)\n\n    // Create a new HTTP request\n    req, err := http.NewRequest(\"POST\", \"https://example.com/api/endpoint\", bytes.NewBuffer(requestBody))\n    if err != nil {\n        fmt.Println(\"Error creating request:\", err)\n        return\n    }\n\n    // Add the x-signature header with the base64 encoded signature\n    req.Header.Set(\"x-signature\", signatureBase64)\n\n    // Send the request\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        fmt.Println(\"Error sending request:\", err)\n        return\n    }\n    defer resp.Body.Close()\n\n    // Read the response body\n    responseBody, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        fmt.Println(\"Error reading response body:\", err)\n        return\n    }\n\n    // Print the response body\n    fmt.Println(\"Response:\", string(responseBody))\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK with Ruby\nDESCRIPTION: This code snippet initializes the Mercado Pago SDK in Ruby by requiring the `mercadopago` gem and creating a new `Mercadopago::SDK` instance with the access token. The access token is necessary for authenticating API requests.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# SDK do Mercado Pago\nrequire 'mercadopago'\n# Adicione as credenciais\nsdk = Mercadopago::SDK.new('PROD_ACCESS_TOKEN')\n```\n\n----------------------------------------\n\nTITLE: Criando Pagamento com Efecty usando Python\nDESCRIPTION: Código Python para criar um pagamento via Efecty usando o SDK do Mercado Pago. Define os dados do pagamento como valor, descrição, método e email do pagador.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\npayment_data = {\n    \"transaction_amount\": 5000,\n    \"description\": \"Título do produto\",\n    \"payment_method_id\": \"efecty\",\n    \"payer\": {\n        \"email\": \"test_user_19549678@testuser.com\"\n    }\n}\n\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Deactivating Automatic Report Generation using CURL\nDESCRIPTION: This CURL command deactivates the automatic generation of a report by sending a DELETE request to the Mercado Pago API. It includes the required headers for the request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.es.md#2025-04-18_snippet_10\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X DELETE \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/release_report/schedule'\n```\n\n----------------------------------------\n\nTITLE: Card Payment Brick Sample\nDESCRIPTION: GitHub repository demonstrating the implementation of card payment functionality using Mercado Pago Bricks\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/github-project.en.md#2025-04-18_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n* [Functional project - Card Payment Brick](https://github.com/mercadopago/card-payment-bricks-sample)\n```\n\n----------------------------------------\n\nTITLE: Exemplo de Resposta JSON para Detalhes de Pagamento\nDESCRIPTION: Este é um exemplo da estrutura JSON retornada ao buscar informações de um pagamento específico. Inclui detalhes como ID, datas, tipo de operação, método de pagamento e status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/retrieving-payments.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 2798247250,\n  \"date_created\": \"2017-06-16T21:10:06.000-04:00\",\n  \"date_approved\": \"2017-06-16T21:10:06.000-04:00\",\n  \"date_last_updated\": \"2017-06-28T19:39:41.000-04:00\",\n  \"date_of_expiration\": null,\n  \"money_release_date\": \"2017-06-21T21:10:06.000-04:00\",\n  \"operation_type\": \"regular_payment\",\n  \"payment_method_id\": \"visa\",\n  \"payment_type_id\": \"credit_card\",\n  \"status\": \"approved\",\n  \"status_detail\": \"accredited\",\n  \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n  \"description\": \"Telefono Celular iPhone 7\",\n  ...,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Request with 3DS in PHP\nDESCRIPTION: This PHP snippet uses the Mercado Pago SDK to create a payment request that includes 3DS integration. It sets the access token, creates a payment client, and sends a request to create a payment with the specified parameters including transaction amount, card token, and 3DS mode.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => <TRANSACTION_AMOUNT>,\n    \"token\" => \"CARD_TOKEN\",\n    \"description\" => \"<DESCRIPTION>\",\n    \"installments\" => <INSTALLMENTS_NUMBER>,\n    \"payment_method_id\" => \"<PAYMENT_METHOD_ID>\",\n    \"issuer_id\" => \"<ISSUER_ID>\",\n    \"payer\" => [\n      \"email\" => $_POST['email']\n    ],\n    \"three_d_secure_mode\" => \"optional\"\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: CSV Example: Minimal Payment Links Data Entry\nDESCRIPTION: Sample CSV file with only mandatory fields completed for payment links creation\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/format-specifications.es.md#2025-04-18_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\next2024030614313,,,20250312,549.57,,,,,,,,,,,,\n```\n\n----------------------------------------\n\nTITLE: Installing Mercado Pago Cartridge Dependencies\nDESCRIPTION: Command to install project dependencies using npm for the Mercado Pago integration\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/salesforce/store-build.en.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configurando Data de Vencimento em Ruby\nDESCRIPTION: Código Ruby para definir a data de vencimento de um pagamento em dinheiro usando o formato ISO 8601. A data deve estar entre 1 e 30 dias a partir da emissão.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_50\n\nLANGUAGE: ruby\nCODE:\n```\n===\nA data usa o formato ISO 8601: yyyy-MM-dd'T'HH:mm:ssz\n===\n\ndate_of_expiration: '2020-05-30T23:59:59.000-04:00',\n```\n\n----------------------------------------\n\nTITLE: Hiding Value Proposition Text - React JSX\nDESCRIPTION: This React JSX snippet provides an example of how to hide the value proposition text of the Wallet Brick component by using the hideValueProp property within the visualization customization settings.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/change-appearance.en.md#2025-04-18_snippet_5\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n    theme: 'default',\n    customStyle: {\n        hideValueProp: true,\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Requesting Access Token with Authorization Code in PHP\nDESCRIPTION: This PHP snippet demonstrates how to create an OAuth request to obtain an Access Token using the Authorization code flow. It uses the OauthClient class to send the client secret, client ID, authorization code, and redirect URI to the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/creation.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new OauthClient();\n   $request = new OAuthCreateRequest();\n     $request->client_secret = \"CLIENT_SECRET\";\n     $request->client_id = \"CLIENT_ID\";\n     $request->code = \"CODE\";\n     $request->redirect_uri = \"REDIRECT_URI\";\n\n  $client->create($request);\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing Brick onReady Callback in JavaScript\nDESCRIPTION: Configures a callback function to be executed when the Brick component is fully loaded, typically used to hide loading indicators\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/brand-brick/callbacks.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n   callbacks: {\n      onReady: () => {\n        /*\n          Callback chamado quando o Brick estiver pronto.\n          Aqui você pode ocultar loadings do seu site, por exemplo.\n        */\n      },\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Webhook Event: Agreement Cancellation\nDESCRIPTION: This code snippet shows the JSON structure of a webhook notification sent when an agreement is cancelled. The `data` field contains the `id` of the agreement and the `status` is set to `cancelled`. This indicates that the `payer_token` has been invalidated.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/notifications.en.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\n\n```curl\n{\n  \"id\": \"22abcd1235ed497f945f755fcaba3c6c\",\n  \"type\": \"wallet_connect\",\n  \"entity\": \"agreement\",\n  \"action\": \"status.updated\",\n  \"date\": \"2021-09-30T23:24:44Z\",\n  \"model_version\": 1,\n  \"version\": 0,\n  \"data\": {\n    \"id\": \"22abcd1235ed497f945f755fcaba3c6c\",\n    \"status\": \"cancelled\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Subsequent Subscription Payment Request JSON\nDESCRIPTION: Example of the subsequent subscription payment request payload structure showing required fields for recurring payments with updated sequence numbers and first_time_use set to false.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/subscription-messaging.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"payer\": {...},\n    \"transaction_amount\": 20,\n    \"description\": \"...\",\n    \"token\": \"....\",\n    \"statement_descriptor\": \"PRUEBA\",\n    \"issuer_id\": ...,\n    \"payment_method_id\": \"...\",\n    \"amounts\": {...},\n    \"installments\": 1,\n    \"pos_id\": \"....\",\n    \"external_reference\": \"...\",\n    \"point_of_interaction\": {\n        \"type\": \"SUBSCRIPTIONS\",\n        \"transaction_data\": {\n            \"first_time_use\": false,\n            \"subscription_sequence\": {\n                \"number\": 3,\n                \"total\": 12\n            },\n            \"invoice_period\": {\n                \"period\": 1,\n                \"type\": \"monthly\"\n            },\n            \"payment_reference\": {\n                \"id\": \"20792195335\"\n            },\n            \"user_present\": true/false,\n            \"billing_date\": \"2024-03-16\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying MercadoPagoSDK Dependency\nDESCRIPTION: Defines the source and platform for CocoaPods and includes MercadoPagSDK version 3.4.1 in the Podfile to manage project dependencies.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ios.es.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsource 'https://github.com/CocoaPods/Specs.git'\nuse_frameworks!\nplatform :ios, '8.0'\npod 'MercadoPagoSDK', '3.4.1'\n```\n\n----------------------------------------\n\nTITLE: Successful Partial Payment Capture Response in JSON\nDESCRIPTION: This snippet shows the expected JSON response after successfully capturing a partial amount from a previously reserved payment. The response indicates that the payment is approved and accredited, with the transaction amount set to 75 and the captured flag set to true.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.es.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"status\": \"approved\",\n  \"status_detail\": \"accredited\",\n  ...\n  \"transaction_amount\": 75,\n  ...\n  \"captured\": true,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Methods using MercadoPago SDK PHP\nDESCRIPTION: This PHP snippet demonstrates how to retrieve payment methods using the MercadoPago SDK. It requires setting the access token via MercadoPagoConfig. Outputs the list of payment methods available for processing transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pse-avanza.en.md#2025-04-18_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\PaymentMethod\\PaymentMethodClient;\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n  $client = new PaymentMethodClient();\n  $payment_methods = $client->list();\n?>\n```\n\n----------------------------------------\n\nTITLE: Configuring Back URLs in C#\nDESCRIPTION: This snippet shows the configuration of back URLs and auto return settings within a PreferenceRequest in C#. It's aimed at integrating Mercado Pago functionalities.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/redirection.es.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar request = new PreferenceRequest\n{\n    // ...\n    BackUrls = new PreferenceBackUrlsRequest\n    {\n        Success = \"https://www.tu-sitio/success\",\n        Failure = \"http://www.tu-sitio/failure\",\n        Pending = \"http://www.tu-sitio/pendings\",\n    },\n    AutoReturn = \"approved\",\n};\n```\n\n----------------------------------------\n\nTITLE: Criando Pagamento com Efecty usando Java\nDESCRIPTION: Código Java para criar um pagamento via Efecty usando o SDK do Mercado Pago. Inclui configuração de cabeçalho de idempotência e utiliza o builder pattern para construir a requisição.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_40\n\nLANGUAGE: java\nCODE:\n```\nPaymentCreateRequest paymentCreateRequest = PaymentCreateRequest.builder()\n          .transactionAmount(new BigDecimal(\"<TRANSACTION_AMOUNT>\"))\n          .paymentMethodId(\"<PAYMENT_METHOD_ID>\")\n          .payer(\n              PaymentPayerRequest.builder()\n                  .email(\"<EMAIL>\").build()\n          ).build();\n\nMap<String, String> customHeaders = new HashMap<>();\ncustomHeaders.put(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n\nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders).build();\n\nPaymentClient client = new PaymentClient();\nclient.create(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Response Format for Canceled Payment in Mercado Pago\nDESCRIPTION: Example JSON response returned when a payment is successfully canceled. The response includes status information showing the payment is cancelled and the reason for cancellation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/cancel-reserve.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"status\": \"cancelled\",\n  \"status_detail\": \"by_collector\",\n  ...\n  \"captured\": false,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Reserved Amount in MercadoPago - PHP\nDESCRIPTION: The PHP snippet provides a method to capture a partial payment amount on MercadoPago. It requires finding the transaction by ID, updating the transaction amount, and executing the update process. The 'mercadopago/sdk' package and access token setup is necessary.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/capture-authorized-payment.en.md#2025-04-18_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nMercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n$payment = MercadoPago\\Payment::find_by_id($payment_id);\n$payment->transaction_amount = 75;\n$payment->capture = true;\n$payment->update();\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Notification URL - cURL\nDESCRIPTION: This cURL command demonstrates how to create a payment with a notification URL using the Mercado Pago API directly. It sends a POST request to the payments endpoint with the necessary payment data in JSON format, including the notification_url.  The API will send payment status updates to the configured URL.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.en.md#2025-04-18_snippet_19\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n   -H 'accept: application/json' \\\n   -H 'content-type: application/json' \\\n   -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n   'https://api.mercadopago.com/v1/payments' \\\n   -d '{\n         \"transaction_amount\": 100,\n         \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n         \"description\": \"Blue shirt\",\n         \"installments\": 1,\n         \"payment_method_id\": \"visa\",\n         \"issuer_id\": 310,\n         \"notification_url\": \"http://requestbin.fullcontact.com/1ogudgk1\",\n         \"payer\": {\n           \"email\": \"test@test.com\"\n\n\n         }\n   }'\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Confirmation Required Payment Intent Status Notification - JSON\nDESCRIPTION: This JSON object represents the 'CONFIRMATION_REQUIRED' state of a payment intent, indicating a payment status needs to be confirmed. It contains similar information as the finished status but lacks payment state and type details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/notifications-pdv.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n \"amount\": 100,\n \"caller_id\": 09876543,\n \"client_id\": 1234567890,\n \"created_at\": \"2021-11-29 17:10:37\",\n \"id\": \"abcdef123-8ab5-4139-9aa3-abcd123\",\n \"payment\": {\n   \"id\": 123456789,\n   \"state\": \"\",\n   \"type\": \"\"\n },\n \"state\": \"CONFIRMATION_REQUIRED\",\n \"additional_info\": {\n   \"external_reference\": \"information\",\n   \"ticket_number\": \"39SHDKKDJ\"\n }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"amount\": 100,\n\"caller_id\": 09876543,\n\"client_id\": 1234567890,\n\"created_at\": \"2021-11-29 17:10:37\",\n\"id\": \"abcdef123-8ab5-4139-9aa3-abcd123\",\n\"payment\": {\n  \"id\": 123456789,\n  \"state\": \"\",\n  \"type\": \"\"\n},\n\"state\": \"CONFIRMATION_REQUIRED\",\n\"additional_info\": {\n  \"external_reference\": \"information\"\n}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n \"amount\": 100,\n \"caller_id\": 09876543,\n \"client_id\": 1234567890,\n \"created_at\": \"2021-11-29 17:10:37\",\n \"id\": \"abcdef123-8ab5-4139-9aa3-abcd123\",\n \"payment\": {\n   \"id\": 123456789,\n   \"state\": \"\",\n   \"type\": \"\"\n },\n \"state\": \"CONFIRMATION_REQUIRED\",\n \"additional_info\": {\n   \"external_reference\": \"information\"\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment Flow with Installments - Brazil/Argentina/Mexico Implementation\nDESCRIPTION: Example of initializing payment flow for Brazil, Argentina, and Mexico regions using PaymentFlow class with installments option and callback handling.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/payment-flow-callback.es.md#2025-04-18_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval paymentFlow = MPManager.paymentFlow\n\nval paymentFlowRequestData = PaymentFlowRequestData(\n   amount = 10.0,\n   description = \"test description\",\n   paymentMethod = PaymentMethod.CREDIT_CARD.name,\n   installments = 6, // campo opcional si lanza el pago con cuotas \n   printOnTerminal = false // campo opcional si lanza el pago sin impresión en la terminal\n)\n\npaymentFlow.launchPaymentFlow(\n   paymentFlowRequestData = paymentFlowRequestData\n) { response ->\n   response.doIfSuccess { result ->\n       // manejo de éxito utilizando un mensaje\n   }.doIfError { error ->\n       // manejo del error\n   }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal PaymentFlow paymentFlow = MPManager.INSTANCE.getPaymentFlow();\n\nfinal String amount = \"2.0\";\n\nfinal String description = \"Payment description\";\n\nfinal PaymentFlowData paymentFlowData = new PaymentFlowData(\n   amount,\n   description,\n   PaymentMethod.CREDIT_CARD.name(),\n   6, // optional field if launching the payment in installments. \n   false // optional field if launching the payment without printing in terminal\n);\n\nfinal Function1<MPResponse<PaymentResponse>, Unit> callback = (final MPResponse<PaymentResponse> response) -> {\n if (response.getStatus() == ResponseStatus.SUCCESS) {\n   // Success handling using a message\n } else {\n   // Error handling \n }\n return Unit.INSTANCE;\n};\n\npaymentFlow.launchPaymentFlow(paymentFlowData, callback);\n```\n\n----------------------------------------\n\nTITLE: Document Type Selection - JavaScript\nDESCRIPTION: This JavaScript function updates the document types available based on the selected persona type in the payment form.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-migrate-pse.en.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ndocument.getElementById('form-checkout__personType').addEventListener('change', e => {\n\tconst personTypesElement = document.getElementById('form-checkout__personType');\n\tupdateSelectOptions(personTypesElement.value);\n});\n\nfunction updateSelectOptions(selectedValue) {\n\n\tconst naturalDocTypes = [\n\t\tnew Option('C.C', 'CC'),\n\t\tnew Option('C.E.', 'CE'),\n\t\tnew Option('Pasaporte', 'PAS'),\n\t\tnew Option('Tarjeta de Extranjería', 'TE'),\n\t\tnew Option('Tarjeta de Identidad ', 'TI'),\n\t\tnew Option('Registro Civil', 'RC'),\n\t\tnew Option('Documento de Identificación', 'DI')\n\t];\n\tconst juridicaDocTypes = [\n\t\tnew Option('NIT', 'NIT')\n\t];\n\tconst idDocTypes = document.getElementById('form-checkout__identificationType');\n\n\tif (selectedValue === 'natural') {\n\t\tidDocTypes.options.length = 0;\n\t\tnaturalDocTypes.forEach(item => idDocTypes.options.add(item, undefined));\n\t} else {\n\t\tidDocTypes.options.length = 0;\n\t\tjuridicaDocTypes.forEach(item => idDocTypes.options.add(item, undefined));\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Marketplace Fee in Checkout Pro (JSON)\nDESCRIPTION: This JSON object configures marketplace fees in a Checkout Pro payment preference. The `marketplace_fee` parameter specifies the fee amount. Integrators need to include this when creating a payment preference using the /checkout/preferences API in Mercado Pago. The JSON includes item details such as ID, title, currency, quantity, and unit price.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/integrate-marketplace.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"items\": [\n {\n \"id\": \"item-ID-1234\",\n \"title\": \"Meu produto\",\n \"currency_id\": \"BRL\",\n \"quantity\": 1,\n \"unit_price\": 75.76\n }\n],\n\"marketplace_fee\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Payment Methods with MPManager - Java\nDESCRIPTION: Shows how to retrieve payment methods using MPManager's PaymentMethodsTools in Java. Uses a Function1 callback to handle the response and provides status checking for success and error cases.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/get-payment-methods.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal Function1<MPResponse<List<PaymentMethod>>, Unit> callback = (final MPResponse<List<PaymentMethod>> response) -> {\n if (response.getStatus() == ResponseStatus.SUCCESS) {\n   // You can render the list of payment methods in a recycler view\n } else {\n   // Error management\n }\n return Unit.INSTANCE;\n};\nMPManager.INSTANCE.getPaymentMethodsTools().getPaymentMethods(callback);\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Item Preference in Node.js\nDESCRIPTION: Configure a Mercado Pago preference with two items, specifying title, quantity, currency, and unit price\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/preference-multiple-items.es.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Configura tu preferencia\nvar preference = {\n  items: [\n      { title: 'Mi producto',\n      quantity: 1,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 75.56 },\n\t{ title: 'Mi producto 2',\n      quantity: 2,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 96.56 }\n    ]\n};\n// Crea un botón de pago en tu sitio\nmercadopago.preferences.create(preference)\n.then(function(preference){\n  // Este valor reemplazará el string \"$$init_point$$\" en tu HTML\n  global.init_point = preference.body.init_point;\n}).catch(function(error){\n  console.log(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago Java SDK\nDESCRIPTION: This snippet shows how to create a payment using the Mercado Pago Java SDK. It requires the MercadoPago Java SDK. It constructs a payment request object with transaction details, including amount, token, and payer information.  It then creates a payment using the PaymentClient and request options including the idempotency key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.es.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest paymentCreateRequest =\n   PaymentCreateRequest.builder()\n       .transactionAmount(request.getTransactionAmount())\n       .token(request.getToken())\n       .description(request.getDescription())\n       .installments(request.getInstallments())\n       .paymentMethodId(request.getPaymentMethodId())\n       .payer(\n           PaymentPayerRequest.builder()\n               .email(request.getPayer().getEmail())\n               .firstName(request.getPayer().getFirstName())\n               .identification(\n                   IdentificationRequest.builder()\n                       .type(request.getPayer().getIdentification().getType())\n                       .number(request.getPayer().getIdentification().getNumber())\n                       .build())\n               .build())\n       .build();\n\nclient.create(paymentCreateRequest, requestOptions);\n \n\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with MercadoPago - Java\nDESCRIPTION: This Java snippet demonstrates how to create a payment using MercadoPago's SDK. The PaymentCreateRequest object is used to specify the payment details including the 3D Secure mode, which is set to optional.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.en.md#2025-04-18_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest paymentCreateRequest =\n   PaymentCreateRequest.builder()\n       .transactionAmount(request.getTransactionAmount())\n       .token(request.getToken())\n       .description(request.getDescription())\n       .installments(request.getInstallments())\n       .paymentMethodId(request.getPaymentMethodId())\n       .payer(\n           PaymentPayerRequest.builder()\n               .email(request.getPayer().getEmail())\n               .firstName(request.getPayer().getFirstName())\n               .identification(\n                   IdentificationRequest.builder()\n                       .type(request.getPayer().getIdentification().getType())\n                       .number(request.getPayer().getIdentification().getNumber())\n                       .build())\n               .build())\n       .threeDSecureMode(\"optional\")\n       .build();\n\nclient.create(paymentCreateRequest);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference with Mercado Pago SDK in Python\nDESCRIPTION: Similar to the previous snippet, this code also shows how to create a payment preference with the Mercado Pago SDK in Python. The only difference is the item price, which is set to 75 instead of 75.76. This snippet will also return the preference information after creation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/preferences.es.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# SDK de Mercado Pago\nimport mercadopago\n# Add Your credentials\nsdk = mercadopago.SDK(\"PROD_ACCESS_TOKEN\")\n# Crea un ítem en la preferencia\npreference_data = {\n    \"items\": [\n        {\n            \"title\": \"Mi producto\",\n            \"quantity\": 1,\n            \"unit_price\": 75\n        }\n    ]\n}\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Buyer Information in MercadoPago\nDESCRIPTION: Code examples demonstrating how to structure and submit buyer (payer) information including name, contact details, identification and address across different programming languages. Required for payment processing through MercadoPago's API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.es.md#2025-04-18_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n  // ...\n  $payer = new MercadoPago\\Payer();\n  $payer->name = \"Charles\";\n  $payer->surname = \"Luevano\";\n  $payer->email = \"charles@hotmail.com\";\n  $payer->date_created = \"2018-06-02T12:58:41.425-04:00\";\n  $payer->phone = array(\n    \"area_code\" => \"\",\n    \"number\" => \"949 128 866\"\n  );\n  $payer->identification = array(\n    \"type\" => \"DNI\",\n    \"number\" => \"12345678\"\n  );\n  $payer->address = array(\n    \"street_name\" => \"Cuesta Miguel Armendáriz\",\n    \"street_number\" => 1004,\n    \"zip_code\" => \"11020\"\n  );\n  // ...\n?>\n```\n\nLANGUAGE: Node.js\nCODE:\n```\n// ...\nvar payer = {\n  name: \"Charles\",\n  surname: \"Luevano\",\n  email: \"charles@hotmail.com\",\n  date_created: \"2015-06-02T12:58:41.425-04:00\",\n  phone: {\n    area_code: \"\",\n    number: \"949 128 866\"\n  },\n  identification: {\n    type: \"DNI\",\n    number: \"12345678\"\n  },\n  address: {\n    street_name: \"Cuesta Miguel Armendáriz\",\n    street_number: \"1004\",\n    zip_code: \"11020\"\n  }\n}\n// ...\n```\n\nLANGUAGE: Java\nCODE:\n```\n// ...\nPayer payer = new Payer();\npayer.setName(\"Charles\")\n     .setSurname(\"Luevano\")\n     .setEmail(\"charles@hotmail.com\")\n     .setDateCreated(\"2018-06-02T12:58:41.425-04:00\")\n     .setPhone(new Phone()\n        .setAreaCode(\"\")\n        .setPhoneNumber(\"949 128 866\"))\n     .setIdentification(new Identification()\n        .setType(\"DNI\")\n        .setNumber(\"12345678\"))\n     .setAddress(new Address()\n        .setStreetName(\"Cuesta Miguel Armendáriz\")\n        .setBuildingNumber(\"1004\")\n        .setZipCode(\"11020\"));\n// ...\n```\n\n----------------------------------------\n\nTITLE: Setting Payment Expiration Date in Python\nDESCRIPTION: This Python snippet shows how to set the date_of_expiration for a payment. The required format is ISO 8601.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n\"date_of_expiration\": \"2020-05-30T23:59:59.000-04:00\"\n```\n\n----------------------------------------\n\nTITLE: Activating Automatic Settlement Report Generation with Node.js\nDESCRIPTION: Node.js implementation using the request library to enable automatic generation of settlement reports. The code configures the headers and request options for making a POST request to the scheduling endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.en.md#2025-04-18_snippet_12\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report/schedule',\n    method: 'POST',\n    headers: headers\n};\n\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\n\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK in Ruby\nDESCRIPTION: This Ruby code snippet initializes the Mercado Pago SDK with your access token.  It creates a new instance of the `Mercadopago::SDK` class, passing in your access token as an argument. Replace `'PROD_ACCESS_TOKEN'` with your actual production access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-development-environment.es.md#2025-04-18_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n\"# SDK de Mercado Pago\nrequire 'mercadopago'\n# Agrega credenciales\nsdk = Mercadopago::SDK.new('PROD_ACCESS_TOKEN')\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Status Screen Brick in Javascript\nDESCRIPTION: The snippet configures the Status Screen Brick with payment initialization and callback functions. It enables the display of the external_reference field to help integrators identify purchases. This requires the inclusion of the Mercado Pago library.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/status-screen-brick/add-external-reference.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n initialization: {\n paymentId: 100, // payment id generated by Mercado Pago\n },\n callbacks: {\n onReady: () => {\n // callback called when Brick is ready\n },\n onError: (error) => {\n // callback called for all Brick error cases\n },\n },\n customization: {\n visual: {\n showExternalReference: true\n }\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Preference by ID with MercadoPago Node.js SDK\nDESCRIPTION: Initializes the MercadoPago client and retrieves a specific payment preference using its ID. This allows for checking all payment information for a product or service.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/preferences.en.md#2025-04-18_snippet_2\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token', options: { timeout: 5000 } });\nconst preference = new Preference(client);\n\npreference.get({ preferenceId: '123456789' })\n.then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Implementing Payment Query Function in Android\nDESCRIPTION: Java method for sharing RDCPass payment query intent. Configures intent with package name, class name, and transaction ID for querying payment details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-payment-query.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic void shareRDCPass(String total, String intent) { \n\ttry { \n\t\tIntent sharingIntent = new Intent(intent); \n\t\tsharingIntent.setClassName(\"redelcom.cl.rdcpass\", \"redelcom.cl.rdcpass.MainActivity\"); \n\t\tsharingIntent.putExtra(\"packageName\", getPackageName()); \n\t\tsharingIntent.putExtra(\"className\", getClass().toString().split(\" \")[1]); \n\t\tsharingIntent.putExtra(\"userTransactionId\", \"DEMO1234\"); \n\t\tstartActivity(sharingIntent); \n\t} catch (Exception e) { \n\t\te.printStackTrace(); \n\t} \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Accounts for Checkout Pro\nDESCRIPTION: Step-by-step process for setting up test seller and buyer accounts, configuring production credentials, and performing test transactions in Checkout Pro.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/adobe-commerce/integration-test.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Access Your integrations in Mercado Pago admin\n2. Click on Test Accounts\n3. Create two test accounts (seller and buyer)\n4. Login with seller account in incognito window\n5. Create new application\n6. Copy access_token and public_key\n7. Configure Adobe Commerce panel\n8. Select Production mode\n9. Enter test credentials\n10. Save configuration\n11. Login with buyer account\n12. Perform test purchase\n```\n\n----------------------------------------\n\nTITLE: Configure Deep Link in app.json (Android)\nDESCRIPTION: This code snippet shows how to configure deep linking in the app.json file for Android. It defines an intent filter that specifies the scheme, host, and path prefix for the deep link. This configuration allows the application to be opened when a specific URL is accessed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-expo-go.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n\"expo\": {\n\"android\": { \"intentFilters\": [\n{\n\"action\": \"VIEW\", \"data\": [\n{\n\"scheme\": \"myapp\", \"host\": \"checkout\", \"pathPrefix\": \"/congrats\"\n} ],\n\"category\": [\"BROWSABLE\", \"DEFAULT\"]\n} ]\n} }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Preference with MercadoPago Node.js SDK\nDESCRIPTION: Initializes the MercadoPago client and creates a new payment preference with specified items. Requires an access token and uses a 5000ms timeout for the API call.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/preferences.en.md#2025-04-18_snippet_0\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token', options: { timeout: 5000 } });\n\nconst preference = new Preference(client);\n\npreference.create({ body: {\n\titems: [\n\t\t{\n\t\t\tid: '<ID>',\n\t\t\ttitle: '<title>',\n\t\t\tquantity: 1,\n\t\t\tunit_price: 100\n\t\t}\n\t],\n} }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Payment Status Verification Implementation\nDESCRIPTION: JavaScript code to fetch and display updated payment status after Challenge completion.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.en.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener(\"DOMContentLoaded\", async function (e) {\n heat();\n});\n\nasync function init() {\n const id = localStorage.getItem(\"paymentId\");\n\n try {\n   const response = await fetch(\"/get_payment/\" + id, {\n     method: \"GET\",\n   });\n   const result = await response.json();\n   if (result.status != 200) throw new Error(\"error getting payment\");\n   document.getElementById(\"congrats-div\").innerHTML =\n     \"Pagamento \" + result.data.id + \" -> Status: \" + result.data.status;\n } catch (error) {\n   alert(\"Unexpected error\\n\" + JSON.stringify(error));\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Mercado Pago 120x600 Banner for Chile (MLC)\nDESCRIPTION: HTML code to embed a 120x600 pixel Mercado Pago banner for Chile, showcasing 6 interest-free installment payment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/seis.en.md#2025-04-18_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://www.mercadopago.cl/banner/120x600_banner_psj_6x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"120\" height=\"600\"/>\n```\n\n----------------------------------------\n\nTITLE: Canceling a MercadoPago Payment Reservation in Node.js\nDESCRIPTION: This code snippet shows how to cancel a payment reservation in MercadoPago using Node.js. It uses the MercadoPago SDK, requires an access token, and a payment ID. The code initializes the client with configuration and calls the cancel method with idempotency key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/cancel-reserve.es.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, Payment } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: 'YOUR_ACCESS_TOKEN' });\nconst payment = new Payment(client);\n\npayment.cancel({\nid: '<PAYMENT_ID>',\nrequestOptions: {\nidempotencyKey: '<IDEMPOTENCY_KEY>'\n},\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Update Mercado Pago JS script import\nDESCRIPTION: Updates the Mercado Pago JavaScript SDK script import in HTML from V1 to V2.  This ensures the application uses the latest SDK version.  The V1 script is replaced with the V2 script.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script \n   src=\"https://secure.mlstatic.com/sdk/javascript/v1/mercadopago.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: No Discount Available Response\nDESCRIPTION: Indicates a successful transaction processing without any discount applied. Returns original transaction amount and an empty discount object.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/discount-promise-no-coupon-responses.en.md#2025-04-18_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"transaction_amount\": 150.0,\n  \"currency_id\": \"ARS\",\n  \"discount\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Item Preference in Python\nDESCRIPTION: This code shows how to create a preference with multiple items using Python. It demonstrates setting up the preference data and creating it using the Mercado Pago SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# Create items in the preference\npreference_data = {\n    \"items\": [\n        {\n            \"title\": \"Mi producto\",\n            \"quantity\": 1,\n            \"unit_price\": 75.56\n        },\n        {\n            \"title\": \"Mi producto2\",\n            \"quantity\": 2,\n            \"unit_price\": 96.56\n        }\n    ]\n}\n\n# Create a preference\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Successful Counter Currency Response in Mercado Pago Cross Border Payment\nDESCRIPTION: This snippet shows the counter_currency response object in a successful Cross Border payment. It includes the currency, exchange rate, transaction amount in USD, and refunded amount information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.en.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"counter_currency\": {\n\t\"currency_id\": \"USD\",\n    \"rate\": 18.22539135,\n    \"amount\": 4.99,\n    \"amount_refunded\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cash Payment Expiration Date\nDESCRIPTION: Example of how to set an expiration date for cash payments using ISO 8601 format.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n\"date_of_expiration\": \"2020-05-30T23:59:59.000-04:00\"\n```\n\n----------------------------------------\n\nTITLE: Replace Web Tokenize Checkout form with Card Payment Brick container\nDESCRIPTION: This snippet demonstrates how to replace the existing Web Tokenize Checkout form with a div element that will serve as the container for the Card Payment Brick. This is a necessary step in migrating to Checkout Bricks.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-clientside.es.md#2025-04-18_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n\"<div class=\\\"tokenizer-container\\\">\\n<script>\\n// Agrega credenciales de SDK \\nconst mp = new MercadoPago('PUBLIC_KEY', {locale: 'es-AR'});\\n \\n// Inicializa el Web Tokenize Checkout\\nmp.checkout({\\n  tokenizer: {\\n    totalAmount: 4000,\\n    backUrl: 'https://www.mi-sitio.com/procesar-pago'\\n  },\\n render: {\\n    container: '.tokenizer-container', // Indica dónde se mostrará el botón\\n    label: 'Pagar' // Cambia el texto del botón de pago (opcional)\\n }\\n});\\n</script>\\n</div>\"\n```\n\n----------------------------------------\n\nTITLE: Requesting User Authorization - Mercado Pago Brazil\nDESCRIPTION: This curl command requests user authorization for payment management in Brazil, similar to the Argentina command but targeting the Brazilian authorization URL.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/configuration.es.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl \"https://auth.mercadopago.com.br/authorization?client_id=<APP_ID>&response_type=code&platform_id=mp&redirect_uri=<REDIRECT_URI>\"\n```\n\n----------------------------------------\n\nTITLE: Get Customer\nDESCRIPTION: This code retrieves an existing customer using their ID. It uses the `customer().get()` method to fetch the customer data from the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.es.md#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsdk.customer().get(customer_id)\n```\n\n----------------------------------------\n\nTITLE: Error Response - Invalid Money Transfer Configuration\nDESCRIPTION: Example error response when money transfer requirements are not met.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/money-transfer.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"badrequest\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Authorized Subscription Payment via Mercado Pago API\nDESCRIPTION: Demonstrates how to create a subscription with authorized status using Mercado Pago's preapproval endpoint. Includes configuration for recurring payment frequency, transaction amount, and card token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/subscription-no-associated-plan-authorized-payments.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n      'https://api.mercadopago.com/preapproval'\\\n       -H 'Content-Type: application/json' \\\n       -H 'Authorization: Bearer TEST-2151****' \\\n       -H 'X-scope: stage' \\\n       --data-raw '{\n            \"back_url\": \"https://www.google.com\",\n            \"reason\": \"Test Subscription\",\n            \"auto_recurring\": {\n                \"frequency\": 1,\n                \"frequency_type\": \"months\",\n                \"start_date\": \"2020-06-02T13:07:14.260Z\",\n                \"end_date\": \"2022-07-20T15:59:52.581Z\",\n                \"transaction_amount\": 10,\n                \"currency_id\": \"ARS\"\n            },\n            \"payer_email\": \"test_user+1020927396@testuser.com\",\n            \"card_token_id\": \"{{CARD_TOKEN}}\",\n            \"status\": \"authorized\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Successful Zero Dollar Auth Response\nDESCRIPTION: This JSON snippet represents a successful (approved) Zero Dollar Auth response. It contains details like the transaction ID, creation and approval dates, operation type, payment method, and status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/api-responses-test.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 0000000000,\n    \"version\": null,\n    \"date_created\": \"2023-01-12T11:36:19.497-04:00\",\n    \"date_approved\": \"2023-01-12T11:36:20.345-04:00\",\n    \"date_last_updated\": \"2023-01-12T11:36:20.345-04:00\",\n    \"date_of_expiration\": null,\n    \"money_release_date\": \"2023-01-12T11:36:20.345-04:00\",\n    \"operation_type\": \"card_validation\",\n    \"issuer_id\": \"205\",\n    \"payment_method_id\": \"master\",\n    \"payment_type_id\": \"credit_card\",\n    \"status\": \"approved\",\n    \"status_detail\": \"accredited\",\n    \"transaction_amount\": 0,\n    …\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Preference Expiration Date in JSON\nDESCRIPTION: This snippet shows how to set an expiration period for payment preferences using the 'expires', 'expiration_date_from', and 'expiration_date_to' attributes in ISO 8601 format.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"expires\": true,\n\"expiration_date_from\": \"2017-02-01T12:00:00.000-04:00\",\n\"expiration_date_to\": \"2017-02-28T12:00:00.000-04:00\"\n```\n\n----------------------------------------\n\nTITLE: Get document types V2\nDESCRIPTION: Illustrates how to retrieve identification types in Mercado Pago SDK V2 using a promise-based approach and populate a select element with the results.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.en.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n (async function getIdentificationTypes() {\n      try {\n        const identificationTypes = await mp.getIdentificationTypes();\n\n        const identificationTypeElement = document.getElementById('docType');\n\n        createSelectOptions(identificationTypeElement, identificationTypes);\n\n      } catch (e) {\n        return console.error('Error getting identificationTypes: ', e);\n      }\n})();\n\nfunction createSelectOptions(elem, options, labelsAndKeys = { label: \"name\", value: \"id\" }) {\n\n      const { label, value } = labelsAndKeys;\n\n      heem.options.length = 0;\n\n      const tempOptions = document.createDocumentFragment();\n\n      options.forEach(option => {\n        const optValue = option[value];\n        const optLabel = option[label];\n\n        const opt ​​= document.createElement('option');\n        opt.value = optValue;\n        opt.textContent = optLabel;\n\n        tempOptions.appendChild(opt);\n      });\n\n      elem.appendChild(tempOptions);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Store Information by External ID - JavaScript\nDESCRIPTION: This snippet shows how to retrieve store information using its external ID and related user ID through a GET request. It requires the user ID, external ID, and access token for authentication.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-delivery/change-store-external-id.en.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst userId = 'exampleUserId';\nconst externalId = 'exampleExternalId';\nconst accessToken = 'exampleAccessToken';\n\nfetch(`https://api.example.com/proximity-integration/users/${userId}/stores/external_id/${externalId}`, {\n    method: 'GET',\n    headers: {\n        'Authorization': `Bearer ${accessToken}`\n    }\n}).then(response => response.json()).then(data => console.log(data)).catch(error => console.error('Error:', error));\n```\n\n----------------------------------------\n\nTITLE: Fetching Card Issuer in Mercado Pago\nDESCRIPTION: This code retrieves the card issuer based on the payment method and BIN. It handles the case where additional issuer information is needed, calling the getIssuers API from Mercado Pago to get available issuers for the card. This helps avoid processing conflicts between different card issuers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.es.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n    async function updateIssuer(paymentMethod, bin) {\n      const { additional_info_needed, issuer } = paymentMethod;\n      let issuerOptions = [issuer];\n\n      if (additional_info_needed.includes('issuer_id')) {\n        issuerOptions = await getIssuers(paymentMethod, bin);\n      }\n\n      createSelectOptions(issuerElement, issuerOptions);\n    }\n\n    async function getIssuers(paymentMethod, bin) {\n      try {\n        const { id: paymentMethodId } = paymentMethod;\n        return await mp.getIssuers({ paymentMethodId, bin });\n      } catch (e) {\n        console.error('error getting issuers: ', e)\n      }\n    };\n```\n\n----------------------------------------\n\nTITLE: Card number field V1\nDESCRIPTION: Shows the HTML code for the card number field when using SDK V1\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.en.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" id=\"cardNumber\" data-checkout=\"cardNumber\" />\n\n```\n\n----------------------------------------\n\nTITLE: Specifying CSV Format for Batch Refunds\nDESCRIPTION: This CSV example shows the expected output format for the batch refunds process, which includes fields such as sequential order, external reference, and refund status. Each field has a defined purpose like identifying payments or detailing refund issues. The snippet is intended to ensure that the refund data is parsed and processed correctly.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/batch-payments-vault-migration/batch-refunds/output-format-batch-refunds.en.md#2025-04-18_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nsequential_order;external_reference;amount;refund_status;refund_detail;payment_id\\n1;ext_ref1;20398.00;refunded;refunded;1885556855\\n2;ext_ref2;10423.00;refunded;refunded;1885556854\\n3;ext_ref3;874.00;refunded;refunded;1885556853\n```\n\n----------------------------------------\n\nTITLE: Country-Specific Payment Configuration\nDESCRIPTION: Configuration for available payment methods across different Latin American countries using YAML/Markdown structured content\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/salesforce/landing.en.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\navailable_payments: [credit, debit, mercadopago, efectivo, atm, cuotas_sin_tarjeta]\n```\n\n----------------------------------------\n\nTITLE: Customizing Banner Text in JavaScript\nDESCRIPTION: This code snippet demonstrates how to customize the text displayed in the Mercado Pago banner using the `valueProp` option within the `customization` object. It allows selection from predefined value propositions like `payment_methods`, `installments`, `security`, `payment_methods_logos`, or `credits`. This customization is passed as a parameter to the `create()` method of the Brick.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/brand-brick/value-prop.es.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    customization: {\n      text: {\n        valueProp: \"payment_methods\", // optional \"installments\" | \"payment_methods\" | \"security\" | \"payment_methods_logos\" | \"credits\"\n      },\n    },\n  };\n```\n\n----------------------------------------\n\nTITLE: Adding Mercado Pago SDK Dependency in Gradle\nDESCRIPTION: Add the Mercado Pago SDK dependency to the module's gradle file. This step is necessary to include the SDK in the project.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/first-steps.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n     ....\n     implementation files(\"libs/nativesdk-0.1.0.aar\")\n     ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer Cards with Mercado Pago SDK in Python\nDESCRIPTION: This code snippet retrieves a list of cards associated with a specific customer ID using the Mercado Pago SDK. It uses the `card().list_all()` method, passing the `customer_id` as a parameter. The response contains the card details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/cards.es.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncards_response = sdk.card().list_all(customer_id)\ncards = cards_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Payment Methods with cURL\nDESCRIPTION: Direct API call to fetch all available payment methods using cURL. This implementation makes a GET request to the Mercado Pago API with proper authorization headers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/payment_methods' \\\n```\n\n----------------------------------------\n\nTITLE: Create Pix Payment via Open Finance - cURL\nDESCRIPTION: This cURL command demonstrates how to create a Pix payment via Open Finance using the Mercado Pago API. It requires providing the access token, payment method (pix), transaction amount, description, payer details (email and identification), point of interaction details (linked to openfinance), a token and a callback URL. The command sends a POST request to the Mercado Pago API endpoint with the necessary data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/advanced-openFinance.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\\n  --url 'https://api.mercadopago.com/v1/payments?access_token=XXX' \\\n  --data '{ \n  \"payment_method_id\": \"pix\",\n  \"transaction_amount\": 5,\n  \"description\": \"Pagamento Openfinace\",\n  \"payer\": {\n    \"email\": \"test_user_58128038@testuser.com\",\n    \"identification\": {\n      \"number\": \"15635614680\",\n      \"type\": \"CPF\"\n    },\n  },\n  \"point_of_interaction\": {\n    \"linked_to\": \"openfinance\",\n       \"transaction_data\": {\n\t\t\"bank_info\": {\n\t\t\t\"origin_bank_id\": \"81d8e591-5d8e-46e2-8b4a-9819e4739fd9\"\n\t }\n  },\n  \"token\": \"45ba90f2-a37f-4d57-bce2-e46aae3c3b04\",\n  \"callback_url\": \"https://example.com\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Inicializando el SDK de Dispositivos en Objective-C\nDESCRIPTION: Código para inicializar el SDK de dispositivos de Mercado Pago en una aplicación iOS usando Objective-C. Se recomienda iniciarlo en el evento didFinishLaunchingWithOptions del AppDelegate.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.es.md#2025-04-18_snippet_8\n\nLANGUAGE: objective-c\nCODE:\n```\n@import 'MercadoPagoDevicesSDK';\n...\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    ...\n    [[MercadoPagoDevicesSDK shared] execute];\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Mercado Pago Payment Brick Implementation in Next.js\nDESCRIPTION: Configures Mercado Pago Payment Brick with initialization, customization, and event handling for payment processing in a Next.js component\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/possible-errors.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { initMercadoPago, Payment } from \"@mercadopago/sdk-react\";\n\ninitMercadoPago(\"<YOUR_PUBLIC_KEY>\");\n\nconst CheckoutMercadoPago = () => {\n  const initialization = {\n    amount: <YOUR_AMOUNT>,\n    preferenceId: \"<YOUR_PREFERENCE_ID>\"\n  };\n  const customization = {\n    paymentMethods: {\n      ticket: \"all\",\n      bankTransfer: \"all\",\n      creditCard: \"all\",\n      debitCard: \"all\",\n      mercadoPago: \"all\",\n    },\n  };\n  const onSubmit = async ({ selectedPaymentMethod, formData }) => {\n    return new Promise((resolve, reject) => {\n      fetch(\"/process_payment\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(formData),\n      })\n        .then((response) => response.json())\n        .then((response) => {\n          resolve();\n        })\n        .catch((error) => {\n          reject();\n        });\n    });\n  };\n  const onError = async (error) => {\n    console.log(error);\n  };\n  const onReady = async () => {};\n\n  return (\n    <Payment\n      initialization={initialization}\n      customization={customization}\n      onSubmit={onSubmit}\n      onReady={onReady}\n      onError={onError}\n    />\n  );\n};\nexport default CheckoutMercadoPago;\n```\n\n----------------------------------------\n\nTITLE: Agregando dependencia del SDK de dispositivos en Android\nDESCRIPTION: Código para agregar el repositorio y la dependencia del SDK de dispositivos de Mercado Pago en una aplicación Android. Necesario para implementar la captura de información del dispositivo.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.es.md#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nrepositories {\n    maven {\n        url \"https://artifacts.mercadolibre.com/repository/android-releases\"\n    }\n}\ndependencies {\n   implementation 'com.mercadolibre.android.device:sdk:4.0.1'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Content for MLM Region\nDESCRIPTION: Configuration object for customizing text content in Brick for the MLM (Mexico) region. Includes settings for form fields, payment methods, and review confirmation texts. Note that custom texts will override language settings and truncate with ellipsis if too long.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/change-texts.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n  customization: {\n    visual: {\n      texts: {\n        formTitle: \"string\",\n        emailSectionTitle: \"string\",\n        installmentsSectionTitle: \"string\",\n        cardholderName: {\n          label: \"string\",\n          placeholder: \"string\",\n        },\n        email: {\n          label: \"string\",\n          placeholder: \"string\",\n        },\n        cardholderIdentification: {\n          label: \"string\",\n        },\n        cardNumber: {\n          label: \"string\",\n          placeholder: \"string\",\n        },\n        expirationDate: {\n          label: \"string\",\n          placeholder: \"string\",\n        },\n        securityCode: {\n          label: \"string\",\n          placeholder: \"string\",\n        },\n        entityType: {\n          placeholder: \"string\",\n          label: \"string\",\n        },\n        financialInstitution: {\n          placeholder: \"string\",\n          label: \"string\",\n        },\n        selectInstallments: \"string\",\n        selectIssuerBank: \"string\",\n        formSubmit: \"string\",\n        paymentMethods: {\n          newCreditCardTitle: \"string\",\n          creditCardTitle: \"string\",\n          creditCardValueProp: \" string\",\n          newDebitCardTitle: \"string\",\n          debitCardTitle: \"string\",\n          debitCardValueProp: \"string\",\n          ticketTitle: \"string\",\n          ticketValueProp: \"string\",\n        },\n        reviewConfirm: {\n          componentTitle: \"\",\n          payerDetailsTitle: \"\",\n          shippingDetailsTitle: \"\",\n          billingDetailsTitle: \"\",\n          paymentMethodDetailsTitle: \"\",\n          detailsTitle: \"\",\n          summaryItemsTitle: \"\",\n          summaryShippingTitle: \"\",\n          summaryDiscountTitle: \"\",\n          summaryYouPayTitle: \"\",\n          summaryTotalTitle: \"\",\n        },\n      },\n    },\n  },\n};\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst settings = {\n  customization: {\n    visual: {\n      texts: {\n        formTitle: \"string\",\n        emailSectionTitle: \"string\",\n        installmentsSectionTitle: \"string\",\n        cardholderName: {\n          label: \"string\",\n          placeholder: \"string\",\n        },\n        email: {\n          label: \"string\",\n          placeholder: \"string\",\n        },\n        cardholderIdentification: {\n          label: \"string\",\n        },\n        cardNumber: {\n          label: \"string\",\n          placeholder: \"string\",\n        },\n        expirationDate: {\n          label: \"string\",\n          placeholder: \"string\",\n        },\n        securityCode: {\n          label: \"string\",\n          placeholder: \"string\",\n        },\n        entityType: {\n          placeholder: \"string\",\n          label: \"string\",\n        },\n        financialInstitution: {\n          placeholder: \"string\",\n          label: \"string\",\n        },\n        selectInstallments: \"string\",\n        selectIssuerBank: \"string\",\n        formSubmit: \"string\",\n        paymentMethods: {\n          newCreditCardTitle: \"string\",\n          creditCardTitle: \"string\",\n          creditCardValueProp: \" string\",\n          newDebitCardTitle: \"string\",\n          debitCardTitle: \"string\",\n          debitCardValueProp: \"string\",\n          ticketTitle: \"string\",\n          ticketValueProp: \"string\",\n        },\n        reviewConfirm: {\n          componentTitle: \"string\",\n          payerDetailsTitle: \"string\",\n          shippingDetailsTitle: \"string\",\n          billingDetailsTitle: \"string\",\n          paymentMethodDetailsTitle: \"string\",\n          detailsTitle: \"string\",\n          summaryItemsTitle: \"string\",\n          summaryShippingTitle: \"string\",\n          summaryDiscountTitle: \"string\",\n          summaryYouPayTitle: \"string\",\n          summaryTotalTitle: \"string\",\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Payment Expiration Date in C#\nDESCRIPTION: Code to set the expiration date for a cash payment in C#. The date uses ISO 8601 format and must be between 1 and 30 days from the payment issue date.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\npaymentCreateRequest.DateOfExpiration = DateTime.Parse(\"2020-05-30T23:59:59.000-04:00\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment ID by External Reference using Mercado Pago API\nDESCRIPTION: This curl command shows how to retrieve a payment ID using the external reference. It queries the /v1/payments/search endpoint and specifies the attributes to return only the payment ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/shopify/how-tos-change-endpoint.en.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n        'https://api.mercadopago.com/v1/payments/search?access_token={{AccessToken}}&sort=date_created&criteria=desc&external_reference=njzY7fKb5HH5TgYwXO6jsh2xp&status=approved&attributes=results.id' \\\n```\n\n----------------------------------------\n\nTITLE: Initializing Web Tokenize Checkout V2\nDESCRIPTION: This HTML snippet shows the initialization of the Web Tokenize Checkout V2. It initializes the MercadoPago SDK with a public key, specifies the total amount, and sets a back URL for processing payments.  It also defines the container where the button will be rendered and allows customization of the button label.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-clientside.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=tokenizer-container>\n<script>\n// Agrega credenciales de SDK \nconst mp = new MercadoPago('PUBLIC_KEY', {locale: 'es-AR'});\n \n// Inicializa el Web Tokenize Checkout\nmp.checkout({\n  tokenizer: {\n    totalAmount: 4000,\n    backUrl: 'https://www.mi-sitio.com/procesar-pago'\n  },\n render: {\n    container: '.tokenizer-container', // Indica dónde se mostrará el botón\n    label: 'Pagar' // Cambia el texto del botón de pago (opcional)\n }\n});\n</script>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Processing Online Payments with IVA Tax - Mercado Pago API\nDESCRIPTION: API request demonstrating how to process a payment with explicit IVA tax values. Shows the structure for sending transaction amount, net amount, and tax details through the payments endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/iva-colombia.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n        -H 'accept: application/json' \\\n        -H 'content-type: application/json' \\\n        -H 'Authorization: Bearer ACCESS_TOKEN' \\\n        'https://api.mercadopago.com/v1/payments' \\\n        -d '{\n                \"transaction_amount\": 10000,\n                \"net_amount\": 9500,\n                \"taxes\":[{\n                        \"value\": 500,\n                        \"type\": \"IVA\"\n                }],\n                \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n                \"description\": \"Title of what you are paying for\",\n                \"installments\": 1,\n                \"payment_method_id\": \"visa\",\n                \"payer\": {\n                        \"email\": \"test_user_19653727@testuser.com\"\n                }\n            }'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Payment Methods with Java\nDESCRIPTION: Code to obtain a list of all available payment methods using the MercadoPago Java SDK. This implementation configures the access token and uses the PaymentMethodClient to list available payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.es.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nPaymentMethodClient client = new PaymentMethodClient();\nclient.list();\n\n```\n\n----------------------------------------\n\nTITLE: Android Deep Link Configuration\nDESCRIPTION: Configuration for Android deep linking in app.json and AndroidManifest.xml\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-expo-go.es.md#2025-04-18_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\"expo\": {\n\"android\": { \"intentFilters\": [\n{\n\"action\": \"VIEW\", \"data\": [\n{\n\"scheme\": \"myapp\", \"host\": \"checkout\", \"pathPrefix\": \"/congrats\"\n} ],\n\"category\": [\"BROWSABLE\", \"DEFAULT\"]\n} ]\n} }\n}\n```\n\nLANGUAGE: XML\nCODE:\n```\n<activity ....> ....\n<intent-filter data-generated=\"true\">\n<action android:name=\"android.intent.action.VIEW\"/>\n<data android:scheme=\"myapp\" android:host=\"checkout\" android:pathPrefix=\"/congrats\"/> <category android:name=\"android.intent.category.BROWSABLE\"/>\n<category android:name=\"android.intent.category.DEFAULT\"/> </intent-filter>\n....\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Creating Card Payment with Mercado Pago Ruby SDK\nDESCRIPTION: Demonstrates creating a card payment using the Mercado Pago Ruby SDK. Sets up the SDK with an access token, configures custom headers, and sends a payment request with transaction details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.en.md#2025-04-18_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_data = {\ntransaction_amount: params[:transactionAmount].to_f,\ntoken: params[:token],\ndescription: params[:description],\ninstallments: params[:installments].to_i,\npayment_method_id: params[:paymentMethodId],\npayer: {\nemail: params[:email],\nidentification: {\ntype: params[:identificationType],\nnumber: params[:identificationNumber]\n}\n}\n}\n \npayment_response = sdk.payment.create(payment_data, custom_request_options)\npayment = payment_response[:response]\n \nputs payment\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with MercadoPago cURL\nDESCRIPTION: This snippet shows how to create a preference object with MercadoPago using a cURL request. It sets the 'purpose' to 'wallet_purchase', restricting payments to registered users.  Replace `**PROD_ACCESS_TOKEN**` with your actual access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-startup.es.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n'https://api.mercadopago.com/checkout/preferences' \\\n-H 'Content-Type: application/json' \\\n-H 'cache-control: no-cache' \\\n-H 'Authorization: Bearer **PROD_ACCESS_TOKEN**' \\\n-d '{\n  \"purpose\": \"wallet_purchase\",\n  \"items\": [\n      {\n          \"title\": \"Mi producto\",\n          \"quantity\": 1,\n          \"unit_price\": 75.76\n      }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Brick Button Text and Action in JavaScript\nDESCRIPTION: This snippet demonstrates how to customize both the action and value proposition texts of the Wallet Brick button using JavaScript. It sets the action to 'buy' and the value proposition to 'security_details'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-texts.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n ...,\n customization: {\n      texts: {\n          action: 'buy',\n          valueProp: 'security_details',\n      },\n },\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Payment Intent Responses in Android\nDESCRIPTION: The following block of code handles responses from the RDCPass application, retrieving information such as userTransactionId and JSON payload. Proper exception handling and intent filtering are key considerations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-create-payment-intent.en.md#2025-04-18_snippet_2\n\nLANGUAGE: android\nCODE:\n```\ntry{ \n\tIntent intent = getIntent(); \n\tString action = intent.getAction(); \n\n\tJSONObject payload = new JSONObject(intent.getStringExtra(Intent.EXTRA_TEXT)); \n\tString userTransactionId = intent.getStringExtra(\"userTransactionId\"); \n\tif (Intent.ACTION_SEND.equals(action)) { \n\t\t// Define what to do with the received data \"payload\" \n\t} \n} catch (Exception e) { \n\te.printStackTrace(); \n}\n```\n\n----------------------------------------\n\nTITLE: Creating Card Payment with Mercado Pago Go SDK\nDESCRIPTION: Shows how to create a card payment using the Mercado Pago Go SDK. Includes setting up the client with an access token and sending a payment request with transaction details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.en.md#2025-04-18_snippet_15\n\nLANGUAGE: go\nCODE:\n```\naccessToken := \"{{ACCESS_TOKEN}}\"\n\n\ncfg, err := config.New(accessToken)\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nclient := payment.NewClient(cfg)\n\n\nrequest := payment.Request{\n   TransactionAmount: <transaction_amount>,\n   Token: <token>,\n   Description: <description>,\n   PaymentMethodID:   <paymentMethodId>,\n   Payer: &payment.PayerRequest{\n      Email: <email>,\n      Identification: &payment.IdentificationRequest{\n         Type: <type>,\n         Number: <number>,\n      },\n   },\n}\n\n\nresource, err := client.Create(context.Background(), request)\nif err != nil {\n   fmt.Println(err)\n}\n\n\nfmt.Println(resource)\n```\n\n----------------------------------------\n\nTITLE: Initializing Wallet Brick with Redirect Mode in JavaScript\nDESCRIPTION: This JavaScript code snippet initializes the Wallet Brick with the `redirectMode` set to `blank`, which opens the checkout in a new page. It requires the `bricksBuilder` object and a `<PREFERENCE_ID>`. The `renderComponent` function is responsible for creating and rendering the wallet brick with the specified settings.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/opening-mode.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst renderComponent = async (bricksBuilder) => {\n const settings = {\n   initialization: {\n     preferenceId: '<PREFERENCE_ID>',\n     redirectMode: 'blank'\n   }\n };\n const brickController = await bricksBuilder.create(\n   'wallet',\n   'wallet_container',\n   settings\n );\n};\nrenderComponent (bricksBuilder);\n```\n\n----------------------------------------\n\nTITLE: Available Payments Configuration for Chile (mlc)\nDESCRIPTION: This snippet defines the available payment methods for Chile (mlc). The `available_payments` field lists the supported payment methods. This allows for customizing the payment options offered in each country.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/woocommerce/landing.es.md#2025-04-18_snippet_13\n\nLANGUAGE: YAML\nCODE:\n```\n----[mlc]---- \n\n---\navailable_payments: mercadopago, credit, debit\n\n----\n------------\n```\n\n----------------------------------------\n\nTITLE: Generating SSH RSA Key Pair in Terminal\nDESCRIPTION: This command generates a new 4096-bit RSA key pair for SSH authentication. The public key should be shared with Mercado Pago, while the private key is kept secure for connecting to the SFTP server.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/public-and-private-key.en.md#2025-04-18_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nssh-keygen -t rsa -b 4096\n```\n\n----------------------------------------\n\nTITLE: Agregando Dependencia del SDK de Dispositivos en Android\nDESCRIPTION: Configuración para agregar el repositorio y la dependencia del SDK de dispositivos en el archivo build.gradle de una aplicación Android, necesario para la captura de información del dispositivo.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.es.md#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nrepositories {\n    maven {\n        url \"https://artifacts.mercadolibre.com/repository/android-releases\"\n    }\n}\ndependencies {\n   implementation 'com.mercadolibre.android.device:sdk:4.0.1'\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Google Ads Conversion Tracking with Checkout Pro Preference in PHP\nDESCRIPTION: This code snippet demonstrates how to associate Google Ads conversion tracking with a Checkout Pro preference using PHP. It enables tracking of ad conversions from Google Ads campaigns.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.es.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  // Crear un objeto preferencia\n  $preference = new MercadoPago\\Preference();\n \n  // Asocia tu etiqueta\n  $preference->tracks = array(\n    array(\n        'type' => 'google_ad',\n        'values' => array(\n          'conversion_id' => 'CONVERSION_ID',\n          'conversion_label' => 'CONVERSION_LABEL'\n        )\n    )\n  );\n\n  ...\n  // Guardar y postear la preferencia\n  $preference->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating Preferences in MercadoPago SDK using PHP\nDESCRIPTION: This snippet illustrates how to update payment preference details using a preference ID in the MercadoPago SDK in PHP. Dependencies include a PreferenceClient instance and an associative array containing updated details. This action modifies existing preferences with the provided data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/preferences.en.md#2025-04-18_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n  $client = new PreferenceClient();\n\n  $preference = $client->update('123456789', [\n    \"items\"=> array(\n        array(\n            \"id\" => \"4567\",\n            \"title\" => \"Dummy Title\",\n            \"quantity\" => 1,\n            \"unit_price\" => 100\n       )\n    ),\n  ]);\n\n?>\n```\n\n----------------------------------------\n\nTITLE: Send Payment with PSE (PHP)\nDESCRIPTION: This snippet indicates the use of PHP to send payment data via the Mercado Pago API, but the code itself is incomplete.  The complete example would require instantiating the MercadoPagoConfig and PaymentClient, and sending a POST request to /v1/payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-migrate-pse.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse MercadoPago\\Client\\Payment\\PaymentClient;\nuse MercadoPago\\MercadoPagoConfig;\n\n```\n\n----------------------------------------\n\nTITLE: Installing Mercado Pago JS SDK via HTML Script Tag\nDESCRIPTION: Adds the Mercado Pago JavaScript SDK to your web application by including the script tag in the HTML body.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/mp-js-v2.es.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Creating Unattended QR Point of Sale (POS) with Mercado Pago API\nDESCRIPTION: Endpoint for creating a point of sale in the unattended QR model, requiring an external service URL for order validation and management. Includes authentication with a production access token and configuration parameters for the POS.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/hidden-qr-unattended-part-a.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n-H 'Authorization: Bearer PROD_ACCESS_TOKEN' \\\nhttps://api.mercadopago.com/pos \\\n-d \\\n{\n  \"name\":\"Caixa Principal\", \n  \"fixed_amount\": true,\n  \"category\": 621102,\n  \"external_store_id\": \"STORE001\",\n  \"external_id\": \"CAIXA0001\",\n  \"url\": \"https://www.minhaempresa.com/pay-mp?locationId=6232&positionId=1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Automatic Settlement Report with Mercado Pago API\nDESCRIPTION: This code snippet demonstrates how to initiate automatic generation of settlement reports by sending a POST request to the Mercado Pago API. It sets the 'scheduled' attribute to true in the configuration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/schedule'\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$response = Requests::post('https://api.mercadopago.com/v1/account/settlement_report/schedule', $headers);\n```\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report/schedule\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"POST\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\nresponse = requests.post('https://api.mercadopago.com/v1/account/settlement_report/schedule', headers=headers)\n```\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report/schedule',\n    method: 'POST',\n    headers: headers\n};\n\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\n\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Activating Automatic Release Report Generation in Mercado Pago API\nDESCRIPTION: This snippet demonstrates how to activate automatic generation of release reports using Mercado Pago's API. It sends a POST request to the /v1/account/release_report/schedule endpoint with the necessary headers for authentication and content type.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.en.md#2025-04-18_snippet_14\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/release_report/schedule'\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$response = Requests::post('https://api.mercadopago.com/v1/account/release_report/schedule', $headers);\n```\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/release_report/schedule\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"POST\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\nresponse = requests.post('https://api.mercadopago.com/v1/account/release_report/schedule', headers=headers)\n```\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/release_report/schedule',\n    method: 'POST',\n    headers: headers\n};\n\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\n\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Creating Mercado Pago Preference with cURL\nDESCRIPTION: This cURL command demonstrates how to create a Mercado Pago preference with a single item and sets the `purpose` to `wallet_purchase`, restricting payments to registered users. It sends a POST request to the Mercado Pago API endpoint with the preference data in JSON format.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-onsubmit.es.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\n\"curl -X POST \\\\\\n'https://api.mercadopago.com/checkout/preferences' \\\\\\n-H 'Content-Type: application/json' \\\\\\n-H 'cache-control: no-cache' \\\\\\n-H 'Authorization: Bearer **PROD_ACCESS_TOKEN**' \\\\\\n-d '{ \\\\\\n  \\\"purpose\\\": \\\"wallet_purchase\\\", \\\\\\n  \\\"items\\\": [ \\\\\\n      { \\\\\\n          \\\"title\\\": \\\"Mi producto\\\", \\\\\\n          \\\"quantity\\\": 1, \\\\\\n          \\\"unit_price\\\": 75.76 \\\\\\n      } \\\\\\n  ] \\\\\\n}'\"\n```\n\n----------------------------------------\n\nTITLE: Payments Validation API Request\nDESCRIPTION: API endpoint for retrieving detailed information about a specific payment using its ID\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/test-payments-processing.en.md#2025-04-18_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v1/payments/{paymentId}\n```\n\n----------------------------------------\n\nTITLE: Adding New Cards to a Customer in Mercado Pago with Node.js\nDESCRIPTION: Node.js implementation to add a new card to a customer using Mercado Pago's SDK. The code retrieves a customer by ID and creates a new card association.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.es.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerClient = new Customer(client);\n\nconst customer = customerClient.get({ customerId: '<CUSTOMER_ID>' })\n\t.then((result) => {\n\n  const cardClient = new CustomerCard(client);\n\n  const body = {\n       token : result.token,\n       payment_method: 'debit_card' \n  };\n\ncardClient.create({ customerId: customer, body: body })\n.then(console.log).catch(console.log);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Mercado Pago SDK with Gem\nDESCRIPTION: This code snippet demonstrates how to install the Mercado Pago SDK for Ruby using Gem. Gem is the package manager for Ruby.  The command `gem install mercadopago-sdk` installs the Mercado Pago SDK as a gem in your Ruby environment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-development-environment.es.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n\"gem install mercadopago-sdk\"\n```\n\n----------------------------------------\n\nTITLE: Embedding Mercado Pago 468x60 Banner for Brazil (MLB)\nDESCRIPTION: HTML code to embed a 468x60 pixel Mercado Pago banner for Brazil, showcasing 6 interest-free installment payment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/seis.en.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/PSJ/468x60_banner_psj_6x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"468\" height=\"60\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with wallet_purchase in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates creating a preference with the `wallet_purchase` purpose using the Mercado Pago Ruby SDK. The code creates a `preference_data` hash with item details and sets the `purpose` key to `wallet_purchase` to restrict payments to logged-in users. The SDK's `preference.create` method is then used to create the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-onsubmit.en.md#2025-04-18_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# Create a preference object\npreference_data = {\n  # the purpose: 'wallet_purchase', allow only logged payments\n   # to allow guest payments you can omit this property\n  purpose: 'wallet_purchase',\n  items: [\n    {\n      title: 'My product',\n      unit_price: 75.56,\n      quantity: 1\n    }\n  ]\n}\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n \n# This value is the preferenceId you will use in the HTML on startup in Brick\n@preference_id = preference['id']\n\n```\n\n----------------------------------------\n\nTITLE: Associating Facebook Pixel with Checkout Pro Preference in Java\nDESCRIPTION: This Java code demonstrates how to associate a Facebook Pixel ID with a Checkout Pro preference. The 'PIXEL_ID' should be replaced with the actual Facebook Pixel identifier.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n  // Criar um objeto preferencia\nPreferenceClient client = new PreferenceClient();\n\n  // Associar seu pixel do Facebook\nList<PreferenceTrackRequest> tracks = new ArrayList<>();\nPreferenceTrackRequest trackFacebook = PreferenceTrackRequest.builder()\n   .type(\"facebook_ad\")\n   .values(PreferenceTrackValuesRequest.builder().pixelId(\"PIXEL_ID\").build())\n   .build();\ntracks.add(trackFacebook);\n\nPreferenceRequest request = PreferenceRequest.builder().tracks(tracks).build();\n\nPreference preference = new Preference()\n        .appendTrack(trackFacebook);\n\n  // Salvar e postar a preferencia\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Preferences by ID in MercadoPago SDK using PHP\nDESCRIPTION: This example shows how to retrieve a preference's payment information using its ID with the MercadoPago SDK in PHP. A PreferenceClient instance is required, and the input is a string representing the preference ID. Execution yields detailed preference information, including payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/preferences.en.md#2025-04-18_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n  $client = new PreferenceClient();\n  $client->get(\"123456789\");\n?>\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Custom Tabs dependency\nDESCRIPTION: This command adds the flutter_custom_tabs dependency to your Flutter project. It modifies the pubspec.yaml file and executes flutter pub get to install the dependency.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/flutter.es.md#2025-04-18_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n\"$ flutter pub add flutter_custom_tabs\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Status Screen Brick with React Component\nDESCRIPTION: This React JSX code snippet demonstrates how to render the Status Screen Brick using the `<StatusScreen>` component from the `@mercadopago/sdk-react` library.  It imports the `StatusScreen` component and then uses it to render the Brick, passing the `initialization`, `onReady`, and `onError` configurations as props. This provides a declarative way to integrate the Status Screen Brick into a React application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/status-screen-brick/default-rendering.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { StatusScreen } from '@mercadopago/sdk-react';\n\n\n<StatusScreen\n   initialization={initialization}\n   onReady={onReady}\n   onError={onError}\n/>\n```\n\n----------------------------------------\n\nTITLE: Enviando Access Token por header en API de Mercado Pago\nDESCRIPTION: Ejemplo de cómo enviar el Access Token a través del header Authorization en una solicitud API a Mercado Pago. Esta práctica es más segura que usar query parameters ya que evita exponer las credenciales en las URLs.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/best-practices/safety-for-your-credential/secure-credentials.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -H 'Authorization: Bearer APP_USR-12345678-031820-X-12345678' \\\nhttps://api.mercadolibre.com/users/me\n```\n\n----------------------------------------\n\nTITLE: Enviando el Device ID en el Header HTTP\nDESCRIPTION: Muestra cómo enviar el ID del dispositivo a los servidores de Mercado Pago al crear un pago, incluyéndolo en el encabezado HTTP de la solicitud.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.es.md#2025-04-18_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nX-meli-session-id: device_id\n```\n\n----------------------------------------\n\nTITLE: Python HMAC Signature Verification\nDESCRIPTION: Validates webhook notification signatures using HMAC-SHA256 hashing technique. Compares generated hash with received signature to ensure message integrity and authenticity.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.en.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Obtain the hash result as a hexadecimal string\nsha = hmac_obj.hexdigest()\nif sha == hash:\n    # HMAC verification passed\n    print(\"HMAC verification passed\")\nelse:\n    # HMAC verification failed\n    print(\"HMAC verification failed\")\n```\n\n----------------------------------------\n\nTITLE: Payment Response with Discount Coupon Details\nDESCRIPTION: This snippet shows the JSON response for a payment processed with a discount coupon. The response includes details such as `id`, `description`, `payment_method_id`, `payer` information, `transaction_amount`, `currency_id`, `coupon_amount`, and `transaction_details` which shows the `total_paid_amount`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/discount-campaigns.en.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"id\": 25416,\n\t\"description\": \"Title of what you are paying for\",\n\t\"payment_method_id\": \"master\",\n\t\"payer\": {\n\t\t\"email\": \"test_user_99525168@testuser.com\",\n\t\t...\n\t},\n\t\"transaction_amount\": 299.99,\n\t\"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n\t\"coupon_amount\": 29.99,\n\t\"transaction_details\": {\n\t\t\"total_paid_amount\": 269.98,\n\t\t...\n\t},\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Notifier in Mercado Pago Reports API\nDESCRIPTION: This command illustrates how to delete a specific notifier from the reports system using its notifier_id. Authorization via Bearer token is required.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/deactivation.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request DELETE 'https://api.mercadopago.com/v1/reports/{{notifier_id}}' \\\n--header 'Authorization: Bearer {{TOKEN}}'\n```\n\n----------------------------------------\n\nTITLE: Successful Coupon Validation Response (Discount)\nDESCRIPTION: This JSON response indicates a successful coupon validation with an associated discount. It includes details such as the coupon's description, legal terms, discount value, type, cap, and minimum/maximum payment amounts. A status code of 200 (Success) accompanies this response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/coupon-validation-responses.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"status\": \"success\",\n    \"description\": \"Descrição do cupom exibida aos clientes, por exemplo, em interfaces, faturas ou recibos\",\n    \"legal_terms\": \"URL dos termos e condições para fins legais\",\n    \"details\": {\n       \"value\": 10.0,\n       \"type\": \"percent\",\n       \"cap\": 1000.0,\n       \"min_payment_amount\": 100.0,\n       \"max_payment_amount\": 10000.0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Device ID Implementation\nDESCRIPTION: HTML implementation for generating and capturing device identification data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.es.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\"></script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\" output=\"deviceId\"></script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"hidden\" id=\"deviceId\">\n```\n\n----------------------------------------\n\nTITLE: Downloading Report Node\nDESCRIPTION: Node.js script utilizing the Request library to download a report via GET request. It includes passing the authorization token in the headers to access the file by name.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_25\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report/:file_name',\n    method: 'GET',\n    headers: headers\n};\n\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\n\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Resolving an Invalid QR Code in curl\nDESCRIPTION: This snippet demonstrates how to resolve an invalid QR code. It uses a specific QR data string and requires the wallet's access token for authorization.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/interoperable-accepting-flow-test.en.md#2025-04-18_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/instore/v2/beta/external/resolve?data=00020101021143530016com.mercadolibre0129https://mpago.la/pos/16719292501300091234567895204970053030325802AR5909FULL NAME6010CITY LEGAL6304B244' \\\n--header 'Authorization: Bearer {access_token_wallet}'\n```\n\n----------------------------------------\n\nTITLE: Creating Yape Payment in Node.js\nDESCRIPTION: Node.js implementation for creating a Yape payment using MercadoPago SDK with token, transaction amount, and payer details\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: node\nCODE:\n```\nconst mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(config.access_token);\n\nvar payment = req.body;\n\nvar payment_data = {\n  token: '<ff8080814c11e237014c1ff593b57b4d>',\n  transaction_amount: 5000,\n  installments: 1,\n  description: 'Titulo del producto',\n  payment_method_id: 'yape',\n  payer: {\n    email: payment.email,\n  }\n};\n\nvar payment = mercadopago.payment.save(payment_data)\n  .then(function (response) {\n    res.status(response.status).json({\n      status: response.body.status,\n      status_detail: response.body.status_detail,\n      id: respose.body.id,\n    });\n  })\n  .catch(function (error) {\n    res.status(error.status).send(error);\n});\n\nvar payment_link = payment.transaction_details.external_resource_url;\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods in Java for Mercado Pago\nDESCRIPTION: Java implementation for excluding specific payment methods and types in Mercado Pago Checkout Pro, with a maximum of 12 installments\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/payment-methods.es.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nPreferenceClient client = new PreferenceClient();\n//...\nList<PreferencePaymentMethodRequest> excludedPaymentMethods = new ArrayList<>();\nexcludedPaymentMethods.add(PreferencePaymentMethodRequest.builder().id(\"master\").build());\nexcludedPaymentMethods.add(PreferencePaymentMethodRequest.builder().id(\"amex\").build());\n\nList<PreferencePaymentTypeRequest> excludedPaymentTypes = new ArrayList<>();\nexcludedPaymentTypes.add(PreferencePaymentTypeRequest.builder().id(\"ticket\").build());\n\nPreferencePaymentMethodsRequest paymentMethods =\n   PreferencePaymentMethodsRequest.builder()\n       .excludedPaymentMethods(excludedPaymentMethods)\n       .excludedPaymentTypes(excludedPaymentTypes)\n       .installments(12)\n       .build();\n\nPreferenceRequest request = PreferenceRequest.builder().paymentMethods(paymentMethods).build();\n\nclient.create(request);\n//...\n```\n\n----------------------------------------\n\nTITLE: Exemplo de Notificação de Alerta de Fraude em JSON\nDESCRIPTION: Exemplo de payload de notificação enviada quando um alerta de fraude é detectado. Inclui detalhes do pedido e do pagamento associado que gerou o alerta.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/notification-additional-info.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"action\": \"Created\",\n    \"api_version\": \"v1\",\n    \"data\": {\n        \"description\": \"desc\",\n        \"merchant_order\": 249940988000,\n        \"payment_id\": 58980959081,\n        \"site_id\": \"MLA\"\n    },\n    \"date_created\": \"2022-07-23T23:03:5704:00\",\n    \"id\": \"58980959081\",\n    \"live_mode\": true,\n    \"type\": \"stop_delivery_op_wh\",\n    \"user_id\": 224403329,\n    \"version\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing APK on Windows\nDESCRIPTION: Command to install an Android application package using ADB on Windows.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/how-to-install-android-macos-windows.en.md#2025-04-18_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\nadb.exe install filename + extension\n```\n\n----------------------------------------\n\nTITLE: Available Countries for Split Payments\nDESCRIPTION: This snippet defines the countries where the Split Payments solution is available. The countries are represented by their ISO country codes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/landing.en.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\n--- \navailable_countries: mla, mlb, mlm, mlc, mpe\n\n---\n\n```\n\n----------------------------------------\n\nTITLE: Flutter Custom Tabs Integration\nDESCRIPTION: This code snippet demonstrates how to integrate Flutter Custom Tabs to open URLs within a Flutter application. It includes customization options for the toolbar, animations, and platform-specific settings for both Android and iOS.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/flutter.en.md#2025-04-18_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_custom_tabs/flutter_custom_tabs.dart';\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        body: Center(\n          child: TextButton(\n            child: const Text('Show Flutter homepage'),\n            onPressed: () => _launchURL(context),\n          ),\n        ),\n      ),\n    );\n  }\n\n  void _launchURL(BuildContext context) async {\n    try {\n      await launch(\n        'https://flutter.dev',\n        customTabsOption: CustomTabsOption(\n          toolbarColor: Theme.of(context).primaryColor,\n          enableDefaultShare: true,\n          enableUrlBarHiding: true,\n          showPageTitle: true,\n          animation: CustomTabsAnimation.slideIn(),\n          // or user defined animation.\n          animation: const CustomTabsAnimation(\n            startEnter: 'slide_up',\n            startExit: 'android:anim/fade_out',\n            endEnter: 'android:anim/fade_in',\n            endExit: 'slide_down',\n          ),\n          extraCustomTabs: const <String>[\n            // ref. https://play.google.com/store/apps/details?id=org.mozilla.firefox\n            'org.mozilla.firefox',\n            // ref. https://play.google.com/store/apps/details?id=com.microsoft.emmx\n            'com.microsoft.emmx',\n          ],\n        ),\n        safariVCOption: SafariViewControllerOption(\n          preferredBarTintColor: Theme.of(context).primaryColor,\n          preferredControlTintColor: Colors.white,\n          barCollapsingEnabled: true,\n          entersReaderIfAvailable: false,\n          dismissButtonStyle: SafariViewControllerDismissButtonStyle.close,\n        ),\n      );\n    } catch (e) {\n      // An exception is thrown if browser app is not installed on Android device.\n      debugPrint(e.toString());\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Card Payment with Mercado Pago Java SDK\nDESCRIPTION: Shows how to create a card payment using the Mercado Pago Java SDK. Includes setting up custom headers, configuring the client, and sending a payment request with transaction details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.en.md#2025-04-18_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest paymentCreateRequest =\nPaymentCreateRequest.builder()\n.transactionAmount(request.getTransactionAmount())\n.token(request.getToken())\n.description(request.getDescription())\n.installments(request.getInstallments())\n.paymentMethodId(request.getPaymentMethodId())\n.payer(\nPaymentPayerRequest.builder()\n.email(request.getPayer().getEmail())\n.firstName(request.getPayer().getFirstName())\n.identification(\nIdentificationRequest.builder()\n.type(request.getPayer().getIdentification().getType())\n.number(request.getPayer().getIdentification().getNumber())\n.build())\n.build())\n.build();\n\nclient.create(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Payment Response Structure\nDESCRIPTION: Example JSON response from the Mercado Pago API after creating a Fintoc payment, showing key fields including payment ID and external resource URL.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-simplified.en.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 82512912106,\n    \"payment_method_id\": \"fintoc\",\n    \"payment_type_id\": \"bank_transfer\",\n    \"payment_method\": {\n        \"id\": \"fintoc\",\n        \"type\": \"bank_transfer\",\n        \"data\": {\n            \"reference_id\": \"82512912106\",\n            \"external_reference_id\": \"pi_2nGAKKSDoWG8ALR8_sec_Vfwt2rhBdjxYLhVpWupimnnp\",\n            \"external_resource_url\": \"https://mercadopago.cl/banktransfer...\"\n        }\n    },\n    \"status\": \"pending\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Application ID in Android Manifest\nDESCRIPTION: This snippet demonstrates how to set the application ID in the AndroidManifest.xml file for Main Apps integration.  It requires the `application_id` obtained from the Mercado Pago developer panel. The `application_id` is concatenated with 'L' and placed in the `value` attribute of the `meta-data` tag.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/migrate-via-main-apps.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data\nname='com.mercadolibre.android.sdk.CLIENT_ID'\nvalue='XXXXXXXXXXXXXXXXL'>\n</meta-data>\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods for Argentina (MLA)\nDESCRIPTION: YAML configuration specifying available payment methods for Argentina, including credit, debit, mercadopago, rapipago, and pagofacil.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/landing.en.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\navailable_payments: credit, debit, mercadopago, rapipago, pagofacil\n```\n\n----------------------------------------\n\nTITLE: Setting Back URLs and Auto Return in Mercado Pago with Ruby\nDESCRIPTION: This code snippet demonstrates how to set the `back_urls` and `auto_return` attributes in Ruby. The `back_urls` hash defines the URLs for successful, failed, and pending payments, and `auto_return` is set to 'approved'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/redirection.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# ...\npreference_data = {\n  # ...\n  back_urls = {\n    success: 'https://www.tu-sitio/success',\n    failure: 'https://www.tu-sitio/failure',\n    pending: 'https://www.tu-sitio/pendings'\n  },\n  auto_return: 'approved'\n  # ...\n}\n# ...\n```\n\n----------------------------------------\n\nTITLE: Hiding Payment Button in Payment Brick\nDESCRIPTION: Configuration to hide the default payment button using hidePaymentButton property, including callback handlers for ready and error states.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/hide-element.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    callbacks: {\n        onReady: () => {\n            // callback chamado quando o Brick estiver pronto\n        },\n        onError: (error) => { \n            // callback chamado para todos os casos de erro do Brick\n        },\n    },\n    customization: {\n        visual: {\n            hidePaymentButton: true\n        }\n    }\n}\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n   hidePaymentButton: true\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor Dependencies\nDESCRIPTION: Adding WebIntent and AppVersion dependencies to the component constructor for dependency injection.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/cross-platform-ionic.en.md#2025-04-18_snippet_2\n\nLANGUAGE: ionic\nCODE:\n```\nimport { Component } from '@angular/core'; \nimport { WebIntent, Intent } from '@ionic-native/web-intent/ngx'; \nimport { AppVersion } from '@ionic-native/app-version/ngx'; \n… \nconstructor( \n\tprivate intent: WebIntent \n\t, private app: AppVersion \n) \n{…}\n```\n\n----------------------------------------\n\nTITLE: CSS for Responsive Iframe\nDESCRIPTION: This CSS snippet provides responsive styling for the iframe used to display the 3DS challenge.  It sets the initial width and height and adapts the width and height for smaller screens using a media query.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-bigmerchants.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n  #myframe{\n    width: 500px;\n    height: 600px;\n    border: none;\n  }\n  @media only screen and (width <= 980px) {\n    #myframe{\n      width: 100%;\n      height: 440px;\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Launching Camera Scanner for QR and Barcode in Java\nDESCRIPTION: This snippet shows how to initialize and launch the camera scanner for QR codes and barcodes using Java. It demonstrates the use of MPManager.getCameraScanner() and the launchScanner method with a callback function to handle the scan response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/camscanner-callback.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal CameraScanner cameraScanner = MPManager.INSTANCE.getCameraScanner();\nfinal Function<MPResponse<CameraScannerResponse>, Unit> callback = new Function<MPResponse<CameraScannerResponse>, Unit>() {\n   @Override\n   public Unit apply(MPResponse<CameraScannerResponse> response) {\n       if (response.getStatus() == ResponseStatus.SUCCESS) {\n\n           // Manusear a resposta bem-sucedida\n           CameraScannerResponse cameraScannerResponse = response.getData();\n\n           String result = cameraScannerResponse.getMessage();\n           // ... Fazer algo com o resultado\n       } else {\n\n           // Manusear o erro na resposta\n           String errorMessage = response.getError();\n           // ... Fazer algo com o erro\n       }\n       return Unit.INSTANCE;\n   }\n};\n\n/**\n* Iniciar o escâner de câmera QR ou Barra com o callback: ScanType.CAMERA_SCANNER_QR - ScanType.CAMERA_SCANNER_BARCODE\n*/\n\ncameraScanner.launchScanner(ScanType.CAMERA_SCANNER_QR, callback);\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: This command runs unit tests using Python's unittest module, finding tests under the 'tests/' directory. Requires Python 3.x.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.en.md#2025-04-18_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\npython3 -m unittest discover tests/\n```\n\n----------------------------------------\n\nTITLE: Defining product_landing_what_it_offers Component in YAML\nDESCRIPTION: This YAML snippet defines the `product_landing_what_it_offers` component, showcasing the features and benefits offered by a product. It includes a title, message, media (video or image), and benefit titles with associated bullet points.  `media_video` takes precedence over `media_image` if both are present.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/readme/product-overview.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nproduct_landing_what_it_offers:\n - title: Qué ofrece\n - message: Combina distintos métodos de pago y funciones para garantizar seguridad y conversión de las operaciones.\n - media_video: https://www.youtube.com/embed/tgbNymZ7vqY?autoplay=1&mute=1\n - benefit_title: Seguridad ante fraudes\n - benefit_bullet: Buyer Portection Program.\n - benefit_bullet: Seguridad en transacciones de alto riesgo usando 3DS (3-Domain Secure).\n - benefit_title: Aprobación de pagos\n - benefit_bullet: Validación de tarjetas con Zero Dollar Authorization.\n - benefit_bullet: Reconocimiento facial como método de verificación con FaceAuth.\n - benefit_title: Conversión\n - benefit_bullet: Configuración de la opción CVV.\n - benefit_bullet: Métodos de pago diversos y customizables.\n - benefit_bullet: Capacidad de recuperar pagos que fueron inicialmente rechazados.\n - benefit_bullet: Posibilidad de impulsar las ventas a través de cupones y campañas promocionales.\n - benefit_title: Personalización\n - benefit_bullet: Métodos y condiciones de pago a plazos.\n - benefit_bullet: Apariencia y estilo del botón de pago.\n - benefit_bullet: URL de retorno después de la redirección de pago.\n - benefit_bullet: División del porcentaje de interés entre pagador y vendedor.\n---\n```\n\n----------------------------------------\n\nTITLE: Customizing Banner Appearance with JavaScript\nDESCRIPTION: This JavaScript snippet defines a function `renderBrandBrick` that configures the visual and textual customizations of a Mercado Pago banner. The settings object within the function includes options for hiding/showing the Mercado Pago logo, aligning content, setting background and border properties, and text settings such as alignment, font size, and weight. These customizations are applied to the `create()` method's third parameter.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/brand-brick/visual-customizations.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst renderBrandBrick = async (bricksBuilder) => {\n  const settings = {\n    customization: {\n      // the visual changes only apply to the banner, the modal is always default\n      visual: {\n        hideMercadoPagoLogo: false, // optional boolean.\n        contentAlign: \"center\", // optional \"left\" | \"center\" | \"right\".\n        backgroundColor: \"white\", // optional \"white\" | \"mercado_pago_primary\" | \"mercado_pago_secondary\" | \"black\" | \"transparent\"\n        border: false, // optional boolean\n        borderColor: \"dark\", // optional \"dark\" | \"light\"\n        borderWidth: \"1px\", // optional \"1px\" | \"2px\"\n        borderRadius: \"0px\", // optional  string format: \"Npx\"\n        verticalPadding: \"8px\", // optional  string format: \"Npx\". max \"40px\"\n        horizontalPadding: \"16px\", // optional  string format: \"Npx\". max \"40px\"\n      },\n      text: {\n        align: \"left\", // optional \"left\" | \"center\" | \"right\",\n        useCustomFont: false, // optional boolean. OBS: If is true the Brick inheriths the font from the parent\n        size: \"medium\", // optional \"extra_small\" | \"small\" | \"medium\" | \"large\".\n        fontWeight: \"semibold\", // optional \"regular\" | \"semibold\".\n        color: \"secondary\", // optional \"primary\" | \"secondary\" |\"inverted\".\n      },\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Payment Method Rules JSON Example\nDESCRIPTION: This JSON snippet illustrates the structure for representing payment method rules in Mercado Pago. It includes details for discounts, fines, and interests, each with specific values and types.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 123456789,\n  \"status\": \"pending\",\n  \"status_detail\": \"pending_waiting_payment\",\n  \"payment_method\": {\n    \"id\": \"bolbradesco\",\n    \"type\": \"ticket\",\n    \"data\": {\n      \"rules\": {\n        \"discounts\": [\n          {\n            \"value\": 1,\n            \"type\": \"fixed\",\n            \"limit_date\": \"2022-12-12\"\n          }\n        ],\n        \"fine\": {\n          \"value\": 2,\n          \"type\": \"percentage\"\n        },\n        \"interest\": {\n          \"value\": 0.03,\n          \"type\": \"percentage\"\n        }\n      }\n    }\n  },\n  \"transaction_details\": {\n    \"net_received_amount\": 0,\n    \"total_paid_amount\": 100,\n    \"overpaid_amount\": 0,\n    \"external_resource_url\": \"https://www.mercadopago.com.br/payments/123456789/ticket?caller_id=123456&hash=e10c4695-49a0-475e-8adc-29a8055b9167\",\n    \"installment_amount\": 0,\n    \"financial_institution\": null,\n    \"payment_method_reference_id\": \"1234567890\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Device ID in HTTP Request Header\nDESCRIPTION: Include the Device ID as a custom header when making payment requests to Mercado Pago for enhanced security verification\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/device-id.en.md#2025-04-18_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nX-meli-session-id: device_id\n```\n\n----------------------------------------\n\nTITLE: CSV Sample File with All Data for Debts\nDESCRIPTION: This snippet is an example of a CSV file with all required data fields filled in, ready for uploading debts to be processed by MercadoPago. It includes both mandatory and conditional fields.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/format-specifications.en.md#2025-04-18_snippet_4\n\nLANGUAGE: csv\nCODE:\n```\next2024030614313,521998672,1002,20250312,549.57,20250315,778.87,20250318,801.87,Miss Kristopher Kautzer,1138225523,felica.walsh@example.com,Cuota,Ref2024,5\n```\n\n----------------------------------------\n\nTITLE: Creando preferencia con atributo purpose para Cuenta de Mercado Pago en Ruby\nDESCRIPTION: Este código Ruby crea una preferencia de pago con el atributo 'purpose' configurado para 'wallet_purchase', habilitando el modo Cuenta de Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-mp-wallet.es.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n# Crea un objeto de preferencia\npreference_data = {\n  items: [\n    {\n      title: 'Mi producto',\n      unit_price: 100,\n      quantity: 1\n    }\n  ],\n  purpose: 'wallet_purchase'\n}\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n\n# Este valor substituirá a la string \"<%= @preference_id %>\" en tu HTML\n@preference_id = preference['id']\n```\n\n----------------------------------------\n\nTITLE: Customizing Banner Text in React\nDESCRIPTION: This code snippet illustrates how to customize the Mercado Pago banner text within a React application. It uses a similar `customization` object with a `valueProp` property to select from different messaging options. This configuration would then be passed into the appropriate Mercado Pago component to render the banner with the selected value proposition.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/brand-brick/value-prop.es.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n   text: {\n   valueProp: \"payment_methods\", // optional \"installments\" | \"payment_methods\" | \"security\" | \"payment_methods_logos\" | \"credits\"\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Cancelling Payments in Python\nDESCRIPTION: This Python snippet illustrates how to cancel a payment reservation with the MercadoPago SDK. It involves setting the access token and defining custom headers in request options before calling the payment update method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/cancel-reserve.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n  \"status\": \"cancelled\"\n}\n\npayment_response = sdk.payment().update(payment_id, payment_data, request_options)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiservice Parameter Consultation Function in Android\nDESCRIPTION: A method to query parameters for bill payments and telecommunications recharges using Android Intent. Requires setting package name, class name, and optional signature parameters for accounts and recharges.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-query-multiservice-parameters.en.md#2025-04-18_snippet_0\n\nLANGUAGE: android\nCODE:\n```\npublic void consultaParametros(String firmaRecargas, String firmaCuentas) { \n    Intent consultaParametros = new Intent(\"consultaParametros\"); \n    consultaParametros.setClassName(\"redelcom.cl.rdcpass\",  \"redelcom.cl.rdcpass.MainActivity\"); \n    consultaParametros.putExtra(\"packageName\", getPackageName()); \n    consultaParametros.putExtra(\"className\", getClass().toString().split(\" \")[1]); \n    consultaParametros.putExtra(\"firmaGetCuentas\", firmaCuentas); \n    consultaParametros.putExtra(\"firmaGetCompanies\", firmaRecargas); \n    startActivity(consultaParametros); \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mercado Pago Button Text in JavaScript\nDESCRIPTION: This snippet demonstrates how to customize the Mercado Pago payment button text and value proposition using JavaScript. It sets the theme to 'default' and the value proposition to 'practicality'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-texts.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n        theme: 'default',\n        customStyle: {\n            valueProp: 'practicality',\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with 3DS Optional Mode - Python\nDESCRIPTION: This Python snippet shows how to create a payment with `three_d_secure_mode` set to \"optional\". This instructs Mercado Pago to decide if a 3DS challenge is needed based on risk. It requires the Mercado Pago Python SDK and an access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.es.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"<ENV_ACCESS_TOKEN>\")\npayment_data = {\n    \"transaction_amount\": <TRANSACTION_AMOUNT>,\n    \"token\": \"<CARD_TOKEN>\",\n    \"description\": \"<DESCRIPTION>\",\n    \"installments\": <INSTALLMENTS_NUMBER>,\n    \"payer\": {\n        \"email\": \"<BUYER_EMAIL>\",\n    },\n    \"three_d_secure_mode\": \"optional\"\n}\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n\n```\n\n----------------------------------------\n\nTITLE: Processing Pix Refunds in PHP\nDESCRIPTION: PHP implementation for creating a refund for a Pix payment using MercadoPago SDK. The code initializes the PaymentRefundClient, sets the access token, and processes a partial refund of 20 monetary units for a specific payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentRefundClient;\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n  \n  $client = new PaymentRefundClient();\n  $refund = $client->refund($payment_id, 20);\n  echo $refund->id;\n?>\n```\n\n----------------------------------------\n\nTITLE: Listing All Refunds for a Payment Using PaymentRefundClient in PHP\nDESCRIPTION: This code snippet demonstrates how to list all refunds associated with a specific payment using the PaymentRefundClient SDK. The input parameter is the payment ID, which is required to fetch all corresponding refunds.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/refunds.en.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $refund_client = new PaymentRefundClient();\n  $refund_client->list('123456789');\n?>\n```\n\n----------------------------------------\n\nTITLE: Sending Access Token via Header in Mercado Pago API Request\nDESCRIPTION: Example of making a secure API call to Mercado Pago's /users/me endpoint using an Access Token in the Authorization header instead of query parameters for enhanced security.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/best-practices/safety-for-your-credential/secure-credentials.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -H 'Authorization: Bearer APP_USR-12345678-031820-X-12345678' \\\nhttps://api.mercadolibre.com/users/me\n```\n\n----------------------------------------\n\nTITLE: Respuesta de API para creación de pago con PagoEfectivo\nDESCRIPTION: Ejemplo de la respuesta JSON al crear un pago con PagoEfectivo. Muestra el estado pendiente del pago y la URL externa del recurso que contiene las instrucciones para que el comprador realice el pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mpe.es.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n {\n    ...,\n    \"id\": 5466310457,\n    \"status\": \"pending\",\n    \"status_detail\": \"pending_waiting_payment\",\n    ...,\n    \"transaction_details\": {\n        \"net_received_amount\": 0,\n        \"total_paid_amount\": 100,\n        \"overpaid_amount\": 0,\n        \"external_resource_url\": \"https://www.mercadopago.com.pe/payments/123456/ticket?caller_id=123456&payment_method_id=pagoefectivo_atm&payment_id=123456&payment_method_reference_id=123456\",\n        \"installment_amount\": 0,\n        \"financial_institution\": null,\n        \"payment_method_reference_id\": \"1234567890\"\n    }\n }\n]\n```\n\n----------------------------------------\n\nTITLE: Capturing Device Information in Java for Android\nDESCRIPTION: These methods show different ways to capture device information using the DeviceSDK in Java for Android.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nDevice device = DeviceSDK.getInstance().getInfo() // Returns a Device object, which is serializable\nMap deviceMap = DeviceSDK.getInstance().getInfoAsMap()  // Returns a Map<String, Object>\nString jsonString = DeviceSDK.getInstance().getInfoAsJsonString() // Returns a String in JSON format\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Brick Button and Value Proposition Text in React\nDESCRIPTION: This snippet shows how to customize both the action text and value proposition of the Wallet Brick button using React JSX. It sets the action to 'buy' and the value proposition to 'security_details'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-texts.es.md#2025-04-18_snippet_3\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n texts: {\n   action: 'buy',\n   valueProp: 'security_details',\n },\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Value Proposition Text in Wallet Brick Button (React)\nDESCRIPTION: This React code snippet shows how to hide the value proposition text on the Wallet Brick button by setting the hideValueProp property to true in the customization object.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-appearance.es.md#2025-04-18_snippet_3\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n    theme: 'default',\n    customStyle: {\n        hideValueProp: true,\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating Google Ads Conversion Tracking with Checkout Pro Preference in Python\nDESCRIPTION: This code snippet shows how to associate Google Ads conversion tracking with a Checkout Pro preference using Python. It enables tracking of ad conversions from Google Ads campaigns.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.es.md#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Asocia tu etiqueta\npreference_data = {\n    # ...\n    \"tracks\": [\n        {\n            \"type\": \"google_ad\",\n            \"values\": {\n                \"conversion_id\": \"CONVERSION_ID\",\n                \"conversion_label\": \"CONVERSION_LABEL\"\n            }\n        }\n    ]\n}\n\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Updating Customer with Mercado Pago Python SDK\nDESCRIPTION: This snippet demonstrates how to update a customer's information using the Mercado Pago Python SDK. It initializes the SDK, defines the customer data to be updated, and calls the `customer().update()` method. The method requires the customer ID and the data to be updated. The response contains the updated customer object.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/customers.es.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\n\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\ncustomer_data = {\n  \"email\": 'user@user.com',\n  \"first_name\": 'john',\n  \"last_name\": 'wagner',\n  \"default_address\": 'Casa',\n  \"phone\": {\n    \"area_code\": '[FAKER][PHONE_NUMBER][AREA_CODE]',\n    \"number\": '001234567'\n  },\n  \"identification\": {\n    \"type\": '[FAKER][IDENTIFICATION][TYPE]',\n    \"number\": '12341234'\n  },\n  \"address\": {\n    \"zip_code\": '[FAKER][ADDRESS][ZIP_CODE]',\n    \"street_name\": '[FAKER][ADDRESS][STREET_NAME]',\n    \"street_number\": '2'\n  },\n  \"description\": 'Informações do cliente',\n  \"default_card\": 'None'\n}\ncustomer_response = sdk.customer().update(customer_id, customer_data)\ncustomer = customer_response[\"response\"]\n\n```\n\n----------------------------------------\n\nTITLE: Querying Release Reports via Mercado Pago API (Multiple Languages)\nDESCRIPTION: Sends a GET request to the Mercado Pago API to retrieve a list of generated release reports. Requires authorization token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.es.md#2025-04-18_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl -G \\\n    -H 'accept: application/json' \\\n    -d 'access_token=ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/release_report/list'\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json'\n);\n$data = array(\n    'access_token' => 'ENV_ACCESS_TOKEN'\n);\n$response = Requests::post('https://api.mercadopago.com/v1/account/release_report/list', $headers, $data);\n```\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/release_report/list\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"GET\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = { \n    'accept': 'application/json', \n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\nresponse = requests.post('https://api.mercadopago.com/v1/account/release_report/list', headers=headers)\n```\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\nvar headers = { 'accept': 'application/json'};\nvar dataString = 'access_token=ENV_ACCESS_TOKEN';\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/release_report/list',\n    method: 'POST',\n    headers: headers,\n    body: dataString\n};\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Printing Text with NeptuneLiteAPI in Android\nDESCRIPTION: This code snippet demonstrates how to instantiate a `Printer` object, initialize it, check the printer status, and print tagged text. It also handles potential errors such as the printer being busy or out of paper. The `TAG_IMPRESION` variable is assumed to be defined elsewhere in the code.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-print-receipts.es.md#2025-04-18_snippet_0\n\nLANGUAGE: android\nCODE:\n```\nPrinter printer = Printer.getInstance(); \nprinter.init(); \nint status = printer.getPrinterStatus(); \nif (status == 0) { \n    printer.printTaggedText(“TEXTO A IMPRIMIR”, \"iso-8859-1\"); \n} else{ \n    Log.e(TAG_IMPRESION, \"La impresora presenta el siguiente inconveniente: \" +  statusCode2Str(status); \n} \nprinter.start(); \n\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Brick Button Text in React\nDESCRIPTION: This snippet shows how to customize the theme and value proposition of the Wallet Brick button using React JSX. It sets the theme to 'default' and the value proposition to 'practicality'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-texts.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n    theme: 'default',\n    customStyle: {\n        valueProp: 'practicality',\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing MercadoPago Wallet with Callbacks in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a MercadoPago wallet integration with auxiliary callbacks using JavaScript. It includes onReady, onSubmit, and onError callbacks.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/auxiliary-callbacks.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nmp.bricks().create(\"wallet\", \"wallet_container\", {\n   initialization: {\n       preferenceId: \"<PREFERENCE_ID>\",\n       redirectMode: \"self\",\n   },\n   callbacks: {\n       onReady: () => {},\n       onSubmit: () => {},\n       onError: (error) => console.error(error),\n     },\n});\n```\n\n----------------------------------------\n\nTITLE: Processing Bank Withdrawal - Initial Request\nDESCRIPTION: This snippet shows how to make a POST request to the Mercado Pago API to initiate a bank withdrawal transaction. It includes essential headers such as Authorization and Content-Type, and contains detailed transaction data including sender and recipient account information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-test.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/transaction-intents/process' \\n--header 'x-enforce-signature: false' \\n--header 'Authorization: Bearer TEST-7719*********832-03141*********ec9309854*********f1e54b5-1*********' \\n--header 'Content-Type: application/json' \\n--header 'X-Test-Token: true' \\n--data '{\\n    \"external_reference\": \"new\",\\n    \"point_of_interaction\": {\\n        \"type\": \"PSP_TRANSFER\"\\n    },\\n    \"seller_configuration\": {\\n        \"notification_info\": {\\n            \"notification_url\": \"https://webhook.site/c107a500-5bf2-4787-8c17-ec9fddcfd0f6\"\\n        }\\n    },\\n    \"transaction\": {\\n        \"from\": {\\n            \"accounts\": [\\n                {\\n                    \"amount\": 5\\n                }\\n            ]\\n        },\\n        \"to\": {\\n            \"accounts\": [\\n                {\\n                    \"type\": \"current\",\\n                    \"amount\": 5,\\n                    \"bank_id\": \"99999004\",\\n                    \"branch\": \"0001\",\\n                    \"currency_id\": \"BRL\",\\n                    \"holder\": \"EWALD DAVIS\",\\n                    \"number\": \"10266732\",\\n                    \"provider_id\": \"spi\",\\n                    \"owner\": {\\n                        \"identification\": {\\n                            \"number\": \"38437455871\",\\n                            \"type\": \"CPF\"\\n                        }\\n                    }\\n                }\\n            ]\\n        },\\n        \"total_amount\": 5\\n    }\\n}'\n```\n\n----------------------------------------\n\nTITLE: Rendering Wallet Brick with React Component\nDESCRIPTION: This code snippet shows how to render the Wallet Brick using a React component from `@mercadopago/sdk-react`. It passes the `initialization`, `customization`, `onSubmit`, `onReady`, and `onError` props to the `Wallet` component.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { Wallet } from '@mercadopago/sdk-react';\n\n\n<Wallet\n   initialization={initialization}\n   customization={customization}\n   onSubmit={onSubmit}\n   onReady={onReady}\n   onError={onError}\n/>\n```\n\n----------------------------------------\n\nTITLE: HTML Element for Wallet Brick\nDESCRIPTION: This HTML snippet defines a DIV element that serves as a container for the Wallet Brick. It is essential that the ID corresponds to what is used in the JavaScript initialization.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.en.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"walletBrick_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment in Python with MercadoPago SDK\nDESCRIPTION: This code example illustrates how to capture a partial amount from a reserved payment using the MercadoPago Python SDK. It initializes the SDK with the access token, prepares the payment data with the new transaction amount and capture flag, and updates the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.en.md#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport market\nsdk = Mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\npayment_data = {\n\"transaction_amount\": 75,\n\"capture\": True\n}\n\npayment_response = sdk.payment().update(payment_id, payment_data)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creating SPEI Transfer Payment with Java\nDESCRIPTION: Creates a SPEI bank transfer payment using MercadoPago Java SDK. The code configures the access token, builds payer and payment requests with transaction amount and payment method, then creates the payment and extracts the payment link.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.es.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  PaymentClient client = new PaymentClient();\n\n  PaymentPayerRequest payer =\n  \tPaymentPayerRequest.builder()\n  \t.type(\"customer\")\n  \t.email(request.getEmail())\n    .firstName(request.getPayerFirstName())\n    .lastName(request.getPayerLastName())\n  \t.entityType(\"individual\")\n  \t.build();\n\n  PaymentCreateRequest paymentCreateRequest = PaymentCreateRequest.builder()\n  \t.transactionAmount(new BigDecimal(5000))\n  \t.description(\"description\")\n  \t.paymentMethodId(\"clabe\")\n  \t.payer(payer)\n  \t.build();\n\n  Payment payment = client.create(paymentCreateRequest);\n  String paymentLink = payment.transactionDetails.externalResourceUrl;\n```\n\n----------------------------------------\n\nTITLE: Creating Podfile for Mercado Pago SDK\nDESCRIPTION: This snippet demonstrates how to create a Podfile for managing dependencies with CocoaPods, specifically for integrating the Mercado Pago SDK into an iOS application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ios.en.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ touch Podfile\n$ open -a Xcode Podfile\n```\n\nLANGUAGE: ruby\nCODE:\n```\nsource 'https://github.com/CocoaPods/Specs.git'\nuse_frameworks!\nplatform :ios, '8.0'\npod 'MercadoPagoSDK', '3.4.1'\n```\n\n----------------------------------------\n\nTITLE: Processing Payment Method Update Webhook for Wallet Connect in Mercado Pago\nDESCRIPTION: This example shows the payload sent when a user adds or updates a secondary payment method for an existing connection. This can be used to detect rejected payments and notify users to update their payment information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/notifications.es.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\n{\n  \"id\": \"22abcd1235ed497f945f755fcaba3c6c\",\n  \"type\": \"wallet_connect\",\n  \"entity\": \"agreement\",\n  \"action\": \"payment_method.updated\",\n  \"date\": \"2021-09-30T23:24:44Z\",\n  \"model_version\": 1,\n  \"version\": 0,\n  \"data\": {\n    \"id\": \"22abcd1235ed497f945f755fcaba3c6c\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pix Payment Refund Details in Charge Query\nDESCRIPTION: JSON representation of a Pix payment with refund details included in the 'devolucoes' array, showing complete transaction history.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/pix-payments/payment-refund.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"pix\": [\n    {\n        \"endToEndId\": \"E10573521202206211501YtU7ltDrM72\",\n        \"txid\": \"9c1256e6487e461dbec64f0d0471f9b0\",\n        \"valor\": \"1.00\",\n        \"chave\": \"test_user_81729269@testuser.com\",\n        \"horario\": \"2022-06-21T15:01:38Z\",\n        \"infoPagador\": \"Pago Bank Transfer Pix\",\n        \"devolucoes\": [\n            {\n                \"id\": \"1656015124\",\n                \"valor\": \"0.10\",\n                \"horario\": {\n                    \"solicitacao\": \"2022-06-23T20:12:53.409Z\",\n                    \"liquidacao\": \"2022-06-23T20:12:07Z\"\n                },\n                \"status\": \"DEVOLVIDO\"\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Capturing Total Payment Value with PHP\nDESCRIPTION: This code demonstrates how to capture the total value of a previously authorized payment using PHP. It requires the payment ID and your Mercado Pago access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $client->capture($payment_id, $request_options);\n?>\n```\n\n----------------------------------------\n\nTITLE: Response for Modifying Email Notifier in MercadoPago API\nDESCRIPTION: This JSON response shows the updated email notifier configuration after a successful PUT request to modify a notifier in the MercadoPago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/modifications.es.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": {{notifier_id}},\n    \"type\": \"email\",\n    \"data\": {\n        \"recipients\": [\n            \"test@mercadolibre.com\"\n        ]\n    },\n    \"description\": null,\n    \"version\": 1,\n    \"status\": \"ACTIVE\",\n    \"is_pii_data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SPEI Payment Link in HTML\nDESCRIPTION: HTML example for creating a payment button that directs customers to the SPEI bank transfer payment instructions page. The link opens in a new tab and uses the external_resource_url from the payment response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.pt.md#2025-04-18_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://www.mercadopago.com.mx/payments/51096146182/ticket?caller_id=34728475&hash=f3a8630a-f06a-48e4-b2a6-f95750af7346\" target=\"_blank\">Pagar com Transferências SPEI</a>\n```\n\n----------------------------------------\n\nTITLE: Setting Integration Metrics in Ruby SDK\nDESCRIPTION: Configures platform, integrator, and corporation IDs using Mercado Pago Ruby SDK. Creates request options object and initializes SDK with access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integration-identification.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequest_options = Mercadopago::RequestOptions.new()\nrequest_options.platform_id = 'PLATFORM_ID'\nrequest_options.integrator_id = 'INTEGRATOR_ID'\nrequest_options.corporation_id = 'CORPORATION_ID'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN', request_options: request_options)\n```\n\n----------------------------------------\n\nTITLE: Creating PSE Payment with MercadoPago SDK in Python\nDESCRIPTION: This snippet demonstrates how to create a PSE payment using the MercadoPago SDK in Python. It includes setting up the payment details, payer information, and sending the request to create the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pse-avanza.en.md#2025-04-18_snippet_17\n\nLANGUAGE: python\nCODE:\n```\npayment_response = sdk.payment().create(body, request_options)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Pix Payment - Multi-language Examples\nDESCRIPTION: Code examples showing how to create a Pix payment using MercadoPago's SDK in different programming languages. Includes handling of transaction amount, payer information, and idempotency key for safe retries.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pix.en.md#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\Client\\Common\\RequestOptions;\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n \"transaction_amount\" => (float) $_POST['<TRANSACTION_AMOUNT>'],\n    \"payment_method_id\" => $_POST['<PAYMENT_METHOD_ID>'],\n    \"payer\" => [\n      \"email\" => $_POST['<EMAIL>']\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nimport { Payment, MercadoPagoConfig } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\nconst payment = new Payment(client);\n\npayment.create({\n    body: { \n        transaction_amount: req.transaction_amount,\n        description: req.description,\n        payment_method_id: req.paymentMethodId,\n            payer: {\n            email: req.email,\n            identification: {\n        type: req.identificationType,\n        number: req.number\n    }}},\n    requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n.then((result) => console.log(result))\n.catch((error) => console.log(error));\n```\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest paymentCreateRequest =\n   PaymentCreateRequest.builder()\n       .transactionAmount(new BigDecimal(\"100\"))\n       .description(\"Título do produto\")\n       .paymentMethodId(\"pix\")\n       .dateOfExpiration(OffsetDateTime.of(2023, 1, 10, 10, 10, 10, 0, ZoneOffset.UTC))\n       .payer(\n           PaymentPayerRequest.builder()\n               .email(\"PAYER_EMAIL\")\n               .firstName(\"Test\")\n               .identification(\n                   IdentificationRequest.builder().type(\"CPF\").number(\"19119119100\").build())\n               .build())\n       .build();\n\nclient.create(paymentCreateRequest, requestOptions);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...,\n \"id\": 5466310457,\n \"status\": \"pending\",\n \"status_detail\": \"pending_waiting_transfer\",\n ...,\n \"transaction_details\": {\n     \"net_received_amount\": 0,\n     \"total_paid_amount\": 100,\n     \"overpaid_amount\": 0,\n     \"external_resource_url\": null,\n     \"installment_amount\": 0,\n     \"financial_institution\": null,\n     \"transaction_id\": null\n },\n \"point_of_interaction\": {\n     \"type\": \"PIX\",\n     \"sub_type\": null,\n     \"application_data\": {\n       \"name\": \"NAME_SDK\",\n       \"version\": \"VERSION_NUMBER\"\n     },\n     \"transaction_data\": {\n       \"qr_code_base64\": \"iVBORw0KGgoAAAANSUhEUgAABRQAAAUUCAYAAACu5p7oAAAABGdBTUEAALGPC/xhBQAAAAFzUkdCAK7OHOkAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAIABJREFUeJzs2luO3LiWQNFmI+Y/Zd6vRt36KGNXi7ZOBtcagHD4kNLeiLX33v8DAAAAABD879sDAAAAAAA/h6AIAAAAAGSCIgAAAACQCYoAAAAAQCYoAgAAAACZoAgAAAAAZIIiAAAAAJAJigAAAABAJigCAAAAAJmgCAAAAABkgiIAAAAAkAmKAAAAAEAmKAIAAAAAmaAIAAAAAGSCIgAAAACQCYoAAAAAQCYoAgAAAACZoAgAAAAAZIIiAAAAAJAJigAAAABAJigCA...\",\n       \"qr_code\": \"00020126600014br.gov.bcb.pix0117john@yourdomain.com0217additional data520400005303986540510.005802BR5913Maria Silva6008Brasilia62070503***6304E2CA\",\n       \"ticket_url\": \"https://www.mercadopago.com.br/payments/123456789/ticket?caller_id=123456&hash=123e4567-e89b-12d3-a456-426655440000\",\n       \"transaction_id\": null\n     }\n }\n ...,\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Public and Private Keys using OpenSSL\nDESCRIPTION: This command generates a private key (mpprivate.pem) and a corresponding public key (mppublic.pem) using the ed25519 algorithm. The private key is used for signing requests, and the public key is sent to Mercado Pago for transaction validation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/encryption.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nopenssl genpkey -algorithm ed25519 -out mpprivate.pem && \nopenssl pkey -in mpprivate.pem -pubout -out mppublic.pem\n```\n\n----------------------------------------\n\nTITLE: Obteniendo información del dispositivo en Swift\nDESCRIPTION: Métodos disponibles en Swift para obtener la información del dispositivo en diferentes formatos, como objeto Device, JSON, String o Dictionary.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.es.md#2025-04-18_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nMercadoPagoDevicesSDK.shared.getInfo() // devuelve un objeto Device que es Codable\nMercadoPagoDevicesSDK.shared.getInfoAsJson() // devuelve un objeto Data de la librería de JSON\nMercadoPagoDevicesSDK.shared.getInfoAsJsonString() // devuelve el json en formato de String\nMercadoPagoDevicesSDK.shared.getInfoAsDictionary() // devuelve un Dictionary<String,Any>\n```\n\n----------------------------------------\n\nTITLE: Creating Checkout Preference for Automobiles and Nautical using MercadoPago API (cURL)\nDESCRIPTION: This cURL request shows how to create a checkout preference for automobiles and nautical products using the MercadoPago API. It includes detailed buyer information, product details, and shipping information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/industry-data/additional-info.en.md#2025-04-18_snippet_11\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/checkout/preferences' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--data-raw '{\n    \"auto_return\": \"approved\",\n    \"back_urls\": {\n        \"failure\": \"https://www.mercadopago.com/home/failure\",\n        \"pending\": \"https://www.mercadopago.com/home/pending\",\n        \"success\": \"https://www.mercadopago.com/home/success\"\n    },\n    \"notification_url\": \"https://webhook.site/xyz\",\n    \"expires\": false,\n    \"external_reference\": \"order-123\",\n    \"date_of_expiration\": \"2025-03-12T12:58:41.425-04:00\",\n    \"items\": [\n        {\n            \"id\": \"1234\",\n            \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n            \"title\": \"Product\",\n            \"picture_url\": \"\",\n            \"description\": \"Product Description\",\n            \"category_id\": \"others\",\n            \"quantity\": 1,\n            \"unit_price\": 150    \n        }\n    ],\n    \"payer\": {\n        \"phone\": {\n            \"area_code\": \"11\",\n            \"number\": \"[FAKER][PHONE_NUMBER][CELL_PHONE]\"\n        },\n        \"address\": {\n            \"zip_code\": \"[FAKER][ADDRESS][ZIP_CODE]\",\n            \"street_name\": \"[FAKER][ADDRESS][STREET_NAME]\",\n            \"street_number\": 1000\n        },\n        \"identification\": {\n          \"identification_type\": \"[FAKER][IDENTIFICATION][TYPE]\",\n          \"identification_number\": \"12345678\"\n        },\n        \"email\": \"john@yourdomain.com\",\n        \"name\": \"[FAKER][NAME][FIRST_NAME]\",\n        \"surname\": \"[FAKER][NAME][LAST_NAME]\",\n        \"date_created\": \"\",\n        \"authentication_type\": \"Facebook\",\n        \"registration date\": \"2015-06-02T12:58:41.425-04:00\",\n        \"is_first_purchase_online\": false,\n        \"last_purchase\": \"2020-01-02T12:58:41.425-04:00\"\n    },\n    \"payment_methods\": {\n        \"excluded_payment_methods\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"default_installments\": null,\n        \"default_payment_method_id\": null,\n        \"excluded_payment_types\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"installments\": null\n    },\n    \"shipments\": {\n        \"mode\": \"not_specified\",\n        \"local_pickup\": false,\n        \"receiver_address\": {\n            \"zip_code\": \"[FAKER][ADDRESS][ZIP_CODE]\",\n            \"street_name\": \"[FAKER][ADDRESS][STREET_NAME]\",\n            \"city_name\": \"[FAKER][ADDRESS][CITY]\",\n            \"state_name\": \"[FAKER][ADDRESS][STATE]\",\n            \"street_number\": 1000\n            \"floor\": \"12\",\n            \"apartment\": \"B\"\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Settlement Report with Mercado Pago API\nDESCRIPTION: Creates a new settlement report for a specific date range using a POST request to the Mercado Pago API. The request requires authentication via an access token and specifies the begin and end dates in ISO 8601 format. The report will be generated asynchronously.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.es.md#2025-04-18_snippet_16\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report' \\\n    -d '{\n            \"begin_date\": \"2019-05-01T00:00:00Z\",\n            \"end_date\": \"2019-06-01T00:00:00Z\"\n    }'\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$data ='{\n            \"begin_date\": \"2019-05-01T00:00:00Z\",\n            \"end_date\": \"2019-06-01T00:00:00Z\"\n    }';\n\n$response = Requests::post(\"https://api.mercadopago.com/v1/account/settlement_report\", $headers, $data);\n```\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"POST\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\nconnection.setDoOutput(true);\n\nString body = \"{\\\"begin_date\\\":\\\"2019-05-01T00:00:00Z\\\",\\\"end_date\\\": \\\"2019-06-01T00:00:00Z\\\"}\";\n\ntry(OutputStream os = connection.getOutputStream()) {\n    byte[] input = body.getBytes(\"utf-8\");\n    os.write(input, 0, input.length);\n}\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\ndata = '{ \"begin_date\": \"2019-05-01T00:00:00Z\", \"end_date\": \"2019-06-01T00:00:00Z\" }'\n\nresponse = requests.post('https://api.mercadopago.com/v1/account/settlement_report', headers=headers, data=data)\n```\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = { \n    'accept': 'application/json', \n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar dataString = '{ \"begin_date\": \"2019-05-01T00:00:00Z\", \"end_date\": \"2019-06-01T00:00:00Z\" }';\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report',\n    method: 'POST',\n    headers: headers,\n    body: dataString\n};\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Payment Token Response JSON\nDESCRIPTION: Example response structure containing the generated payer token after successful token creation request\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/create-payer-token.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"payer_token\": \"abcdef1e23f4567d8e9123eb6591ff68df74c57930551ed980239f4538a7e530\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Yape Payment in Python\nDESCRIPTION: Python implementation for creating a Yape payment using MercadoPago SDK with token, transaction amount, and payer details\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.pt.md#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n\t'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n\t\"description\": \"Titulo del producto\",\n\t\"installments\": 1,\n\t\"payer\": {\n\t\t\"email\": \"test_user_123@testuser.com\",\n\t},\n\t\"payment_method_id\": \"yape\",\n\t\"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n\t\"transaction_amount\": 5000\n}\n\npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Buyer Data for MercadoPago Payments\nDESCRIPTION: This code snippet demonstrates how to set up buyer information for MercadoPago payments. It includes details such as name, email, phone, identification, and address. The code is available in multiple programming languages.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.en.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  // ...\n  $payer = new MercadoPago\\Payer();\n  $payer->name = \"Charles\";\n  $payer->surname = \"Luevano\";\n  $payer->email = \"charles@hotmail.com\";\n  $payer->date_created = \"2018-06-02T12:58:41.425-04:00\";\n  $payer->phone = array(\n    \"area_code\" => \"\",\n    \"number\" => \"949 128 866\"\n  );\n  $payer->identification = array(\n    \"type\" => \"DNI\",\n    \"number\" => \"12345678\"\n  );\n  $payer->address = array(\n    \"street_name\" => \"Cuesta Miguel Armendáriz\",\n    \"street_number\" => 1004,\n    \"zip_code\" => \"11020\"\n  );\n  // ...\n?>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nvar payer = {\n  name: \"Charles\",\n  surname: \"Luevano\",\n  email: \"charles@hotmail.com\",\n  date_created: \"2015-06-02T12:58:41.425-04:00\",\n  phone: {\n    area_code: \"\",\n    number: \"949 128 866\"\n  },\n  identification: {\n    type: \"DNI\",\n    number: \"12345678\"\n  },\n  address: {\n    street_name: \"Cuesta Miguel Armendáriz\",\n    street_number: \"1004\",\n    zip_code: \"11020\"\n  }\n}\n// ...\n```\n\nLANGUAGE: java\nCODE:\n```\n// ...\nPayer payer = new Payer();\npayer.setName(\"Charles\")\n     .setSurname(\"Luevano\")\n     .setEmail(\"charles@hotmail.com\")\n     .setDateCreated(\"2018-06-02T12:58:41.425-04:00\")\n     .setPhone(new Phone()\n        .setAreaCode(\"\")\n        .setPhoneNumber(\"949 128 866\"))\n     .setIdentification(new Identification()\n        .setType(\"DNI\")\n        .setNumber(\"12345678\"))\n     .setAddress(new Address()\n        .setStreetName(\"Cuesta Miguel Armendáriz\")\n        .setBuildingNumber(\"1004\")\n        .setZipCode(\"11020\"));\n// ...\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# ...\npayer = {\n  name: \"Charles\",\n  surname: \"Luevano\",\n  email: \"charles@hotmail.com\",\n  date_created: Time.now,\n  identification: {\n    type: \"DNI\",\n    number: \"12345678\"\n  },\n  address: {\n    street_name: \"Cuesta Miguel Armendáriz\",\n    street_number: \"1004\",\n    zip_code: \"11020\"\n  }\n}\n# ...\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Collections.Generic;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Preference;\n// ...\nvar payer = new PreferencePayerRequest\n{\n    Name = \"Charles\",\n    Surname = \"Luevano\",\n    Email = \"charles@hotmail.com\",\n    Phone = new PhoneRequest\n    {\n        AreaCode = \"\",\n        Number = \"949 128 866\",\n    },\n    Identification = new IdentificationRequest\n    {\n        Type = \"DNI\",\n        Number = \"12345678\",\n    },\n    Address = new AddressRequest\n    {\n        StreetName = \"Cuesta Miguel Armendáriz\",\n        StreetNumber = \"1004\",\n        ZipCode = \"11020\",\n    },\n};\n// ...\n```\n\nLANGUAGE: python\nCODE:\n```\n# ...\npayer_data = {\n    \"name\": \"Charles\",\n    \"surname\": \"Luevano\",\n    \"email\": \"charles@hotmail.com\",\n    \"date_created\": \"2015-06-02T12:58:41.425-04:00\",\n    \"identification\": {\n        \"type\": \"DNI\",\n        \"number\": \"12345678\"\n    },\n    \"address\": {\n        \"street_name\": \"Cuesta Miguel Armendáriz\",\n        \"street_number\": \"1004\",\n        \"zip_code\": \"11020\"\n    }\n}\n# ...\n```\n\n----------------------------------------\n\nTITLE: Creating POS with Mercado Pago API using curl\nDESCRIPTION: This curl command is used to create a Point of Sale (POS) in the Mercado Pago system for the unattended QR model. The command sends a POST request to the Mercado Pago API with the required authorization token and POS details, including name, fixed amount flag, category, external store ID, external POS ID, and URL. Dependencies include a valid PROD_ACCESS_TOKEN and an accessible URL for order management.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/hidden-qr-unattended-part-a.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n-H 'Authorization: Bearer PROD_ACCESS_TOKEN' \\\nhttps://api.mercadopago.com/pos \\\n-d \\\n{\n  \"name\":\"Main pos\", \n  \"fixed_amount\": true,\n  \"category\": 621102,\n  \"external_store_id\": \"STORE001\",\n  \"external_id\": \"POS0001\",\n  \"url\": \"https://www.mystore.com/pay-mp?locationId=6232&positionId=1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Refunding with Mercado Pago in Java\nDESCRIPTION: This Java snippet sets the Mercado Pago access token, creates an instance of PaymentRefundClient, and prepares custom request options to include headers for processing refunds. It refunds a specified payment ID and outputs the created refund.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.es.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentRefundClient client = new PaymentRefundClient();\n\nMap<String, String> customHeaders = new HashMap<>();\ncustomHeaders.put(\"X-Render-In-Process-Refunds\", \"true\");\n\nMPRequestOptions requestOptions = MPRequestOptions.builder()\n   .customHeaders(customHeaders)\n   .build();\n\nPaymentRefund refund = client.refund(paymentId, new BigDecimal(20), requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Internal Error Response\nDESCRIPTION: This JSON response represents an internal server error in the Zero Dollar Auth flow. It includes an error message, error code, status code (500), and details about the cause of the error.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/api-responses-test.en.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"message\": \"Error message\",\n      \"error\": \"internal_error\",\n     \"status\": \"500\",\n     \"cause\": [\n           {\n              \"code\": \"Error code\",\n              \"description\": \"Error description\",\n              \"data\": \"2023-10-11T10:06:56.000-04:00;\",\n           }\n      ]\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Financing Option for Brazil (mlb)\nDESCRIPTION: This snippet configures a specific financing option, \"Linha de Crédito\", for Brazil (mlb). It highlights the benefit of reaching a larger audience with active credit and a high approval rate. This configuration is specific to the Brazilian market.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/woocommerce/landing.es.md#2025-04-18_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\n ----[mlb]----\n - benefit_title: Financiación sin tarjeta\n - benefit_message: Al activar Linha de Crédito en el checkout, llega a más de 12 millones de personas con crédito activo, sin costos adicionales, además de obtener una tasa de aprobación de aproximadamente el 98% en las ventas.\n\n ------------\n```\n\n----------------------------------------\n\nTITLE: Retrieving Structures for Marketplace Sellers Sales Reports using cURL\nDESCRIPTION: This cURL command retrieves all structures for marketplace sellers sales reports. It requires an authorization token in the request header.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/queries-and-validations.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request GET 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/structures' \\\n--header 'Authorization: Bearer {{TOKEN}}'\n```\n\n----------------------------------------\n\nTITLE: Configure Mercado Pago Credentials (JavaScript)\nDESCRIPTION: This code demonstrates how to configure Mercado Pago credentials using JavaScript and the MercadoPago SDK.  It imports the `loadMercadoPago` function to load the SDK and then initializes MercadoPago with your public key. Replace 'YOUR_PUBLIC_KEY' with your actual public key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loadMercadoPago } from \"@mercadopago/sdk-js\";\n\nawait loadMercadoPago();\nconst mp = new window.MercadoPago(\"YOUR_PUBLIC_KEY\");\n```\n\n----------------------------------------\n\nTITLE: Creating Discount Promise Without Pre-Added Coupon using cURL\nDESCRIPTION: This cURL command creates a discount promise without a pre-added coupon.  It requires an authorization token, payer token, and the transaction amount. Replace <YOUR_ACCESS_TOKEN> and <PAYER_TOKEN> with the actual values.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/create-discount-promise-without-coupon.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n'https://api.mercadopago.com/v2/wallet_connect/payment/discounts' \\\n--header 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n--header 'x-payer-token: <PAYER_TOKEN>' \\\n--header 'Content-Type: application/json' \\\n-d '{\n    \"amount\": 550\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementando Nota de Esclarecimento em Markdown\nDESCRIPTION: Cria uma nota de esclarecimento para fornecer informações adicionais ou redirecionamentos. Usa múltiplas linhas de blockquote com a palavra-chave 'NOTE'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/style-guide/notes.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> NOTE\n>\n> Título\n>\n> Corpo da nota.\n```\n\n----------------------------------------\n\nTITLE: Listing Mercado Pago Support Team Responsibilities in Markdown\nDESCRIPTION: A bullet point list describing the responsibilities of the Mercado Pago support team in the app distribution process. It includes version delivery, device configuration, UX and security validations, and APK distribution.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/distribution.es.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- **Entrega de nuevas versiones.**\n- **Pre-configuración de los dispositivos.**\n- **Validaciones de UX y Seguridad.**\n- **Distribución de los APKs nativos.**\n```\n\n----------------------------------------\n\nTITLE: Agregando dependencia de MercadoPagoDevicesSDK en iOS\nDESCRIPTION: Instrucciones para agregar la dependencia del SDK de dispositivos de Mercado Pago en una aplicación iOS usando CocoaPods. Este SDK permite capturar información del dispositivo para el Device ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.es.md#2025-04-18_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nuse_frameworks!\npod 'MercadoPagoDevicesSDK'\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK with Public Key in JavaScript\nDESCRIPTION: Loads and initializes the Mercado Pago SDK with your public key using ES Modules import syntax for modern JavaScript applications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/mp-js-v2.es.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loadMercadoPago } from \"@mercadopago/sdk-js\";\n\n\nawait loadMercadoPago();\nconst mp = new window.MercadoPago(\"YOUR_PUBLIC_KEY\");\n```\n\n----------------------------------------\n\nTITLE: Implementing 575x40 Mercado Pago Payment Methods Banner\nDESCRIPTION: HTML code to embed a 575x40 pixel banner showing supported payment methods through Mercado Pago\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/online.en.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/banners/ar/medios/online/575X40.jpg\" \ntitle=\"Mercado Pago - Medios de pago\" alt=\"Mercado Pago - Medios de pago\" \nwidth=\"575\" height=\"40\"/>\n```\n\n----------------------------------------\n\nTITLE: Payment Response Structure\nDESCRIPTION: Example of the JSON response returned after creating an Efecty payment, showing the payment status, transaction details, and external resource URL for payment completion.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mco.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n   {\n       \"...\": \"\",\n       \"id\": 5466310457,\n       \"status\": \"pending\",\n       \"status_detail\": \"pending_waiting_payment\",\n       \"...\": \"\",\n       \"transaction_details\": {\n           \"net_received_amount\": 0,\n           \"total_paid_amount\": 100,\n           \"overpaid_amount\": 0,\n           \"external_resource_url\": \"https://www.mercadopago.com.ar/payments/123456/ticket?caller_id=123456&payment_method_id=efecty&payment_id=123456&payment_method_reference_id=123456\",\n           \"installment_amount\": 0,\n           \"financial_institution\": null,\n           \"payment_method_reference_id\": \"1234567890\"\n       }\n   }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Access Token for Python Integration\nDESCRIPTION: This Python snippet configures the Mercado Pago SDK with the access token and retrieves all payment methods available. It requires the Mercado Pago SDK installed via pip.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport market\nsdk = Mercadopago.SDK(\"ACCESS_TOKEN\")\n\npayment_methods_response = sdk.payment_methods().list_all()\npayment_methods = payment_methods_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Intent for Mexico (MLM) with cURL\nDESCRIPTION: This cURL command demonstrates how to create a payment intent for a Point device in Mexico. It includes the basic fields such as amount and additional information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/payment-processing.en.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/point/integration-api/devices/{deviceid}/payment-intents' \\\n--h 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--data-raw '{\n    \"amount\": 1500,\n    \"additional_info\": {\n        \"external_reference\": \"4561ads-das4das4-das4754-das456\",\n        \"print_on_terminal\": true\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Sending Payment via Curl\nDESCRIPTION: This Curl command sends a payment request to the MercadoPago API with transaction details. It includes headers for content type and authorization, as well as a JSON payload with payment and payer information. Ensure to replace placeholders with actual values for successful execution. The expected output is a confirmation from the MercadoPago API about the payment processing status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/hospitality.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}}' \\\n--data-raw '{\\n    \"transaction_amount\": 800.00,\\n    \"installments\": 1,\\n    \"statement_descriptor\": \"Hotel 123\",\\n    \"capture\": true,\\n    \"binary_mode\": false,\\n    \"sponsor_id\": null,\\n    \"application_fee\": null,\\n    \"payment_method_id\": \"debvisa\",\\n    \"token\": \"{{card_token_id}}\",\\n    \"external_reference\": \"Reference01\",\\n    \"description\": \"Room 1002 - 3 nights\",\\n    \"notification_url\": \"{{notification_url}}\",\\n    \"metadata\": {\\n        \"order_number\": \"order_01\"\\n    },\\n    \"payer\": {\\n        \"email\": \"test_user_123456789@testuser.com\",\\n        \"identification\": {\\n            \"type\": \"CPF\",\\n            \"number\": \"12345678909\"\\n        }\\n    },\\n    \"additional_info\": {\\n        \"items\": [\\n            {\\n                \"id\": \"1234\",\\n                \"title\": \"Serviço\",\\n                \"event_date\": \"2019-12-25T19:30:00.000-03:00\",\\n                \"category_id\": \"accommodations\",\\n                \"category_descriptor\": {\\n                    \"passenger\": {\\n                        \"first_name\": \"Guest Nome\",\\n                        \"last_name\": \"Guest Sobrenome\",\\n                        \"identification\": {\\n                            \"type\": \"DNI\",\\n                            \"number\": \"012345678\"\\n                        }\\n                    }\\n                },\\n                \"quantity\": 1,\\n                \"unit_price\": 800\\n            }\\n        ],\\n        \"payer\": {\\n            \"first_name\": \"Nome\",\\n            \"last_name\": \"Sobrenome\",\\n            \"is_prime_user\": true,\\n            \"is_first_purchase_online\": true,\\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\\n            \"phone\": {\\n                \"area_code\": \"11\",\\n                \"number\": \"987654321\"\\n            },\\n            \"address\": {\\n                \"zip_code\": \"206233-2002\",\\n                \"street_name\": \"Av. das Nações Unidas\",\\n                \"street_number\": \"230032\"\\n            },\\n            \"authentication_type\": \"Facebook\",\\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\\n        }\\n    }\\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Ruby\nDESCRIPTION: This Ruby snippet shows how to create a payment using the Mercado Pago Ruby SDK. It initializes the SDK with the access token, defines custom headers including 'X-Card-Validation', and creates a payment request with the provided parameters such as token, payment method, payer details, description and transaction amount. The request is then sent using the SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/integration.es.md#2025-04-18_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\ncustom_headers = {\n 'X-Card-Validation': 'card_validation'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_data = {\n transaction_amount: params[:transactionAmount].to_f,\n token: params[:token],\n description: params[:description],\n payment_method_id: params[:paymentMethodId],\n payer: {\n   email: 'params[:email]',\n   type: params[:type]\n }\n}\n \npayment_response = sdk.payment.create(payment_data, custom_request_options)\npayment = payment_response[:response]\n \nputs payment\n```\n\n----------------------------------------\n\nTITLE: Retrieving Card Payment Methods in Mercado Pago Integration\nDESCRIPTION: This code handles the validation of buyer's card data by detecting the card type based on BIN number. It sets up event listeners that trigger when the card number changes, fetches appropriate payment methods, and updates form fields with relevant options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst paymentMethodElement = document.getElementById('paymentMethodId');\nconst issuerElement = document.getElementById('form-checkout__issuer');\nconst installmentsElement = document.getElementById('form-checkout__installments');\n\nconst issuerPlaceholder = \"Banco emissor\";\nconst installmentsPlaceholder = \"Parcelas\";\n\nlet currentBin;\ncardNumberElement.on('binChange', async (data) => {\n  const { bin } = data;\n  try {\n    if (!bin && paymentMethodElement.value) {\n      clearSelectsAndSetPlaceholders();\n      paymentMethodElement.value = \"\";\n    }\n\n    if (bin && bin !== currentBin) {\n      const { results } = await mp.getPaymentMethods({ bin });\n      const paymentMethod = results[0];\n\n      paymentMethodElement.value = paymentMethod.id;\n      updatePCIFieldsSettings(paymentMethod);\n      updateIssuer(paymentMethod, bin);\n      updateInstallments(paymentMethod, bin);\n    }\n\n    currentBin = bin;\n  } catch (e) {\n    console.error('error getting payment methods: ', e)\n  }\n});\n\nfunction clearSelectsAndSetPlaceholders() {\n  clearHTMLSelectChildrenFrom(issuerElement);\n  createSelectElementPlaceholder(issuerElement, issuerPlaceholder);\n\n  clearHTMLSelectChildrenFrom(installmentsElement);\n  createSelectElementPlaceholder(installmentsElement, installmentsPlaceholder);\n}\n\nfunction clearHTMLSelectChildrenFrom(element) {\n  const currOptions = [...element.children];\n  currOptions.forEach(child => child.remove());\n}\n\nfunction createSelectElementPlaceholder(element, placeholder) {\n  const optionElement = document.createElement('option');\n  optionElement.textContent = placeholder;\n  optionElement.setAttribute('selected', \"\");\n  optionElement.setAttribute('disabled', \"\");\n\n  element.appendChild(optionElement);\n}\n\n// Esta etapa melhora as validações cardNumber e securityCode\nfunction updatePCIFieldsSettings(paymentMethod) {\n  const { settings } = paymentMethod;\n\n  const cardNumberSettings = settings[0].card_number;\n  cardNumberElement.update({\n    settings: cardNumberSettings\n  });\n\n  const securityCodeSettings = settings[0].security_code;\n  securityCodeElement.update({\n    settings: securityCodeSettings\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Retail Data using cURL\nDESCRIPTION: This cURL command demonstrates how to create a payment with additional information related to the retail industry, including item details, buyer information, and shipping address. The command sends a POST request to the Mercado Pago payments API with the necessary headers and a JSON payload containing the transaction details and retail-specific data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/retail.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}} \\\n--data-raw '{ \n    \"transaction_amount\": 150.00,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"debvisa\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Pedido01\",\n    \"description\": \"PEDIDO NOVO\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"payer\": {\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"12345678909\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"title\": \"Serviço\",\n                \"picture_url\": \"{{picture_url}}\",\n                \"description\": \"Descrição de serviço\",\n                \"category_id\": \"pantry\",\n                \"quantity\": 1,\n                \"unit_price\": 150\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_prime_user\": true,\n            \"is_first_purchase_online\": true,\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"206233-2002\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"3003\"\n            },\n            \"authentication_type\": \"Facebook\",\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"306233-2003\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"3003\",\n                \"floor\": \"5\",\n                \"apartment\": \"502\",\n                \"state_name\": \"DF\",\n                \"city_name\": \"Bogota\"\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Preferences - Ruby\nDESCRIPTION: This Ruby snippet sets up a hash that defines payment preferences for MercadoPago, specifying excluded payment methods and types as well as installment options. This is useful for configuring user-specific payment processing features in a Ruby application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n#...\npreference_data = {\n  # ...\n  payment_methods: {\n    excluded_payment_methods: [\n      { id: 'master' }\n    ],\n    excluded_payment_types: [\n      { id: 'ticket' }\n    ],\n    installments: 12\n  }\n  # ...\n}\n#...\n```\n\n----------------------------------------\n\nTITLE: Creating Full Refund with Mercado Pago SDK in Python\nDESCRIPTION: This snippet demonstrates how to create a full refund for a given payment ID using the Mercado Pago SDK for Python. It initializes the SDK with an access token and then calls the `create` method on the `refund` object, passing the payment ID as an argument.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/refunds.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsdk = mercadopago.SDK('YOUR_ACCESS_TOKEN')\n \nsdk.refund().create('payment_id')\n```\n\n----------------------------------------\n\nTITLE: Configuring Intent Filter for DTE Printing in Android Manifest\nDESCRIPTION: XML configuration for AndroidManifest.xml that defines the necessary intent filters for handling DTE printing actions in the Android application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-print-dte.es.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter> \n\t<action android:name=\"android.intent.action.SEND\" /> \n\t<action android:name=\"android.intent.action.ANSWER\" /> \n\t<action android:name=\"android.intent.action.SENDTO\" />\n\t<category android:name=\"android.intent.category.DEFAULT\" /> \n\t<data android:mimeType=\"text/*\" /> \n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Building Callback URI Java\nDESCRIPTION: This Java snippet demonstrates how to use the `buildCallbackUri` function from the `PaymentFlow` class to create a URI with specified callback, method callback, metadata, and app ID. The resulting URI is intended to be used for deeplinking in payment flows.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/payment-flow-legacy-support.en.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal PaymentFlow paymentFlow = MPManager.INSTANCE.getPaymentFlow();\n\nfinal HashMap<String, String> resultMetadata = new HashMap<>();\nresultMetadata.put(\"message\", \"result\");\n\nfinal Uri uriResult = paymentFlow.buildCallbackUri(\n   \"tuHost://tuApp/result\",\n   \"error\",\n   resultMetadata,\n   \"demo.app\"\n);\n```\n\n----------------------------------------\n\nTITLE: Adding New Cards to a Customer using cURL\nDESCRIPTION: cURL commands for retrieving a customer's cards and adding a new card to a MercadoPago customer. The POST command creates a new card with token, issuer, and payment method details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.en.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n'https://api.mercadopago.com/v1/customers/CUSTOMER_ID/cards' \\\n\ncurl -X POST \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n'https://api.mercadopago.com/v1/customers/CUSTOMER_ID/cards' \\\n-d '{\"token\": \"9b2d63e00d66a8c721607214cedaecda\", \"issuer\": {\"id\": \"3245612\"}, \"payment_method_id\":\"debit_card\"}'\n```\n\n----------------------------------------\n\nTITLE: Creando Pagos con Efecty en Node.js usando MercadoPago SDK\nDESCRIPTION: Implementación en Node.js para crear un pago con Efecty mediante el SDK de MercadoPago. Incluye configuración del token de acceso y manejo de la idempotencia con la opción idempotencyKey.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mco.es.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nimport { Payment, MercadoPagoConfig } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\n\npayment.create({\n    body: { \n        transaction_amount: req.transaction_amount,\n        token: req.token,\n        description: req.description,\n        installments: req.installments,\n        payment_method_id: req.paymentMethodId,\n        issuer_id: req.issuer,\n            payer: {\n            email: req.email,\n            identification: {\n        type: req.identificationType,\n        number: req.number\n    }}},\n    requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n.then((result) => console.log(result))\n.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Payment Button (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to add a custom payment button to replace the hidden default button. It creates a button that triggers the 'createPayment' function when clicked.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/hide-element.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\" onclick=\"createPayment();\">Custom Payment Button</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Application ID in Android Manifest\nDESCRIPTION: This code snippet demonstrates how to add the application ID to the Android Manifest file for Main Apps integration with Mercado Pago. The 'application_id' should be obtained from the developer panel and formatted correctly.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/migrate-via-main-apps.es.md#2025-04-18_snippet_0\n\nLANGUAGE: manifest\nCODE:\n```\n<meta-data\nname='com.mercadolibre.android.sdk.CLIENT_ID'\nvalue='XXXXXXXXXXXXXXXXL'>\n</meta-data>\n```\n\n----------------------------------------\n\nTITLE: Boleto Payment Method Configuration\nDESCRIPTION: Configuration process for activating and setting up boleto payment method in the store's administration panel\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/linx/configure-payment-method.en.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. Go to \"Methods of payment\" in your store administration panel, Settings section.\n2. Look for created method of payment and click on \"Edit\".\n3. Go to \"Boleto\" tab and select \"Active\" mode.\n4. Fill out integration ID field with information to be identified in your ERP.\n5. Enter order to show boleto option in your store.\n6. Finally, click on \"Save\".\n```\n\n----------------------------------------\n\nTITLE: Updating Payment Preference with Mercado Pago SDK in Java\nDESCRIPTION: This snippet provides an example of how to update an existing payment preference using the Mercado Pago SDK. It initializes a PreferenceClient, builds an updated PreferenceRequest with new item details, and calls the update method with the preference ID. It requires the Mercado Pago SDK and related classes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/preferences.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nPreferenceClient client = new PreferenceClient();\n\nString preferenceId = \"202809963-a2201f8d-11cb-443f-adf6-de5a42eed67d\";\n\nList<PreferenceItemRequest> items = new ArrayList<>();\nPreferenceItemRequest item =\n   PreferenceItemRequest.builder()\n       .id(\"202809963-a2201f8d-11cb-443f-adf6-de5a42eed67d\")\n       .title(\"Dummy Title\")\n       .description(\"Dummy description\")\n       .pictureUrl(\"http://www.myapp.com/myimage.jpg\")\n       .quantity(1)\n       .currencyId(\"US\")\n       .unitPrice(new BigDecimal(\"10\"))\n       .build();\nitems.add(item);\n\nPreferenceRequest request = PreferenceRequest.builder().items(items).build();\n\nclient.update(preferenceId, request);\n```\n\n----------------------------------------\n\nTITLE: Adding a New Card Using MercadoPago with PHP\nDESCRIPTION: This snippet demonstrates how to use PHP to add a new card to a customer's profile in Mercado Pago. It requires MercadoPagoConfig to be installed and configured with a valid access token. The customer card details must include a token, issuer ID, and payment method ID. This code outputs the added card data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.en.md#2025-04-18_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n  \n  $customer_client = new CustomerClient();\n  $customer = $customer_client->get(\"1234\");\n\n  $card_client = new CustomerCardClient();\n  \n  $customer_card = $client->create($customer->id, [\n    \"token\" => \"your_card_token\",\n    \"issuer_id\" => \"2345\",\n    \"payment_method_id\" => \"debit_card\"\n  ]);\n\n  echo implode($customer_card);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating SPEI Transfer Payment with Python\nDESCRIPTION: Creates a SPEI bank transfer payment using MercadoPago Python SDK. The code initializes the SDK with an access token, prepares payment data with transaction amount and payer details, creates the payment, and retrieves the payment link.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.es.md#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n \npayment_data = {\n   \"transaction_amount\": 5000,\n   \"description\": \"description\",\n   \"payment_method_id\": \"clabe\",\n   \"payer\": {\n       \"type\": \"customer\",\n       \"email\": request.POST.get(\"email\"),\n       \"entity_type\": \"individual\",\n       \"first_name\": request.POST.get(\"first_name\"),\n       \"last_name\": request.POST.get(\"last_name\"),\n   }\n}\n \npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\nPayment_link = payment.transaction_details.external_resource_url\n```\n\n----------------------------------------\n\nTITLE: PagoEfectivo API Response Example\nDESCRIPTION: Sample JSON response from PagoEfectivo payment creation showing status, transaction details, and external resource URL for payment instructions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.es.md#2025-04-18_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 5466310457,\n    \"status\": \"pending\",\n    \"status_detail\": \"pending_waiting_payment\",\n    \"order\": {},\n    \"external_reference\": null,\n    \"transaction_amount\": 100,\n    \"transaction_amount_refunded\": 0,\n    \"coupon_amount\": 0,\n    \"differential_pricing_id\": null,\n    \"deduction_schema\": null,\n    \"transaction_details\": {\n        \"payment_method_reference_id\": \"123457986\",\n        \"verification_code\": \"24308767\",\n        \"net_received_amount\": 0,\n        \"total_paid_amount\": 100,\n        \"overpaid_amount\": 0,\n        \"external_resource_url\": \"https://www.mercadopago.com/mpe/payments/sandbox/atm/helper?payment_id=24308766&payment_method_reference_id=24308767&caller_id=537490079&hash=c96a61b0-10f4-40f6-afff-82fc0f0923da\",\n        \"installment_amount\": 0,\n        \"financial_institution\": \"PagoEfectivo\",\n        \"payable_deferral_period\": null,\n        \"acquirer_reference\": null\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Handling Global Payment Error Event\nDESCRIPTION: This code snippet demonstrates how to listen for the `PointPayment.Error` global event to handle failed payment outcomes. It extracts error details from the `event.detail` object, including error status and metadata.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/callback-handling.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener(\"PointPayment.Error\", (event) => {\n  \n\tlet data=event.detail;\n\t// Obtendo erro de dados de pagamento a partir de dados de evento\n\tlet errorStatus = data[\"error_status\"]; \n\tlet metadata = data['metadata'];\n\t\n\t// Seu código aqui...\n});\n```\n\n----------------------------------------\n\nTITLE: Payment Form HTML Structure\nDESCRIPTION: Complete HTML form structure for capturing payment details including card information, personal details and hidden fields for payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.en.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\n#form-checkout {\ndisplay: flex;\nflex-direction: column;\nmax-width: 600px;\n}\n\n.container {\nheight: 18px;\ndisplay: inline-block;\nborder: 1px solid rgb(118, 118, 118);\nborder-radius: 2px;\npadding: 1px 2px;\n}\n</style>\n<form id=\"form-checkout\" action=\"/process_payment\" method=\"POST\">\n<div id=\"form-checkout__cardNumber\" class=\"container\"></div>\n<div id=\"form-checkout__expirationDate\" class=\"container\"></div>\n<div id=\"form-checkout__securityCode\" class=\"container\"></div>\n<input type=\"text\" id=\"form-checkout__cardholderName\" placeholder=\"Cardholder\" />\n<select id=\"form-checkout__issuer\" name=\"issuer\">\n<option value=\"\" disabled selected>Issuing Bank</option>\n</select>\n<select id=\"form-checkout__installments\" name=\"installments\">\n<option value=\"\" disabled selected>Plots</option>\n</select>\n<select id=\"form-checkout__identificationType\" name=\"identificationType\">\n<option value=\"\" disabled selected>Document type</option>\n</select>\n<input type=\"text\" id=\"form-checkout__identificationNumber\" name=\"identificationNumber\" placeholder=\"Document number\" />\n<input type=\"email\" id=\"form-checkout__email\" name=\"email\" placeholder=\"Email\" />\n\n<input id=\"token\" name=\"token\" type=\"hidden\">\n<input id=\"paymentMethodId\" name=\"paymentMethodId\" type=\"hidden\">\n<input id=\"transactionAmount\" name=\"transactionAmount\" type=\"hidden\" value=\"100\">\n<input id=\"description\" name=\"description\" type=\"hidden\" value=\"Product Name\">\n\n<button type=\"submit\" id=\"form-checkout__submit\">Pay</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Items in Python\nDESCRIPTION: This Python snippet demonstrates how to create a Mercado Pago preference with multiple items. It defines a preference_data dictionary containing an array of item dictionaries with properties like title, quantity, and unit_price.  It then uses the SDK to create the preference and retrieves the response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/preference-multiple-items.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Cria itens na preferência\npreference_data = {\n    \"items\": [\n        {\n            \"title\": \"Mi producto\",\n            \"quantity\": 1,\n            \"unit_price\": 75.56\n        },\n        {\n            \"title\": \"Mi producto2\",\n            \"quantity\": 2,\n            \"unit_price\": 96.56\n        }\n    ]\n}\n\n# Cria a preferência\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n\n```\n\n----------------------------------------\n\nTITLE: Creating POS API Request\nDESCRIPTION: API request to create a point of sale and associate it with previously created store.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/test-integration-configuration.es.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\n/pos\n```\n\n----------------------------------------\n\nTITLE: Making a Payment Request for Urban Transport via Mercado Pago API (cURL)\nDESCRIPTION: This cURL command demonstrates how to make a payment request to the Mercado Pago API for an urban transport service. It includes detailed buyer information, item details, and payment method specifications. The request is sent to the '/v1/payments' endpoint with proper headers and a JSON payload.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/urban-transport.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}} \\\n--data-raw '{\n    \"transaction_amount\": 150.00,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"debvisa\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Pedido01\",\n    \"description\": \"PEDIDO NOVO\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"payer\": {\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"12345678909\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"title\": \"Serviço\",\n                \"description\": \"Descrição de serviço\",\n                \"category_id\": \"service\",\n                \"quantity\": 1,\n                \"unit_price\": 150\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_prime_user\": true,\n            \"is_first_purchase_online\": true,\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"206233-2002\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"230032\"\n            },\n            \"authentication_type\": \"Facebook\",\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Adding SmartPOS SDK Dependency in Gradle\nDESCRIPTION: This snippet shows how to include the SmartPOS SDK dependency in the app's Gradle file. It adds the SDK AAR file from the libs directory.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/first-steps.en.md#2025-04-18_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n     ....\n     implementation files(\"libs/nativesdk-0.1.0.aar\")\n     ...\n}\n```\n\n----------------------------------------\n\nTITLE: Objective-C Device SDK Implementation\nDESCRIPTION: Objective-C implementation for initializing and using the Mercado Pago Devices SDK in iOS applications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-chopro.en.md#2025-04-18_snippet_4\n\nLANGUAGE: objective-c\nCODE:\n```\n@import 'MercadoPagoDevicesSDK';\n...\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    ...\n    [[MercadoPagoDevicesSDK shared] execute];\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving a QR Code with Wallet Access Token in curl\nDESCRIPTION: This snippet illustrates how to resolve a QR code using the wallet's access token. It assumes that the caller has already created an order and is using the QR data provided by the support team.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/interoperable-accepting-flow-test.en.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/instore/v2/beta/external/resolve?data={qr_data}' \\\n--header 'Authorization: Bearer {access_token_wallet}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Payment Preference with MercadoPago Node.js SDK\nDESCRIPTION: This code demonstrates how to retrieve information about a specific payment preference using its ID with MercadoPago's Node.js SDK. It initializes a client with an access token and fetches the preference details using the preference ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/preferences.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token', options: { timeout: 5000 } });\nconst preference = new Preference(client);\n\npreference.get({ preferenceId: '123456789' })\n.then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creating Retail Checkout Preferences with MercadoPago API\nDESCRIPTION: This curl request shows how to create a checkout preference for retail businesses using the MercadoPago API. It includes buyer information, item details, shipment information, and payment method settings specific to retail transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/industry-data/additional-info.en.md#2025-04-18_snippet_5\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/checkout/preferences' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--data-raw '{\n    \"auto_return\": \"approved\",\n    \"back_urls\": {\n        \"failure\": \"https://www.mercadopago.com/us/home/failure\",\n        \"pending\": \"https://www.mercadopago.com/us/home/pending\",\n        \"success\": \"https://www.mercadopago.com/us/home/success\"\n    },\n    \"notification_url\": \"https://webhook.site/xyz\",\n    \"expires\": false,\n    \"external_reference\": \"order-123\",\n    \"date_of_expiration\": \"2025-03-12T12:58:41.425-04:00\",\n    \"items\": [\n        {\n            \"id\": \"1234\",\n            \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n            \"title\": \"Product\",\n            \"picture_url\": \"\",\n            \"description\": \"Product Description\",\n            \"category_id\": \"others\",\n            \"quantity\": 1,\n            \"unit_price\": 150\n        }\n    ],\n    \"payer\": {\n        \"phone\": {\n            \"area_code\": \"11\",\n            \"number\": \"[FAKER][PHONE_NUMBER][CELL_PHONE]\"\n        },\n        \"address\": {\n            \"zip_code\": \"[FAKER][ADDRESS][ZIP_CODE]\",\n            \"street_name\": \"[FAKER][ADDRESS][STREET_NAME]\",\n            \"street_number\": 1000\n        },\n        \"identification\": {\n          \"identification_type\": \"[FAKER][IDENTIFICATION][TYPE]\",\n          \"identification_number\": \"12345678\"\n        },\n        \"email\": \"john@yourdomain.com\",\n        \"name\": \"[FAKER][NAME][FIRST_NAME]\",\n        \"surname\": \"[FAKER][NAME][LAST_NAME]\",\n        \"date_created\": \"\",\n        \"authentication_type\": \"Facebook\",\n        \"registration date\": \"2015-06-02T12:58:41.425-04:00\",\n        \"is_prime_user\": false,\n        \"is_first_purchase_online\": false,\n        \"last_purchase\": \"2020-01-02T12:58:41.425-04:00\"\n    },\n    \"payment_methods\": {\n        \"excluded_payment_methods\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"default_installments\": null,\n        \"default_payment_method_id\": null,\n        \"excluded_payment_types\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"installments\": null\n    },\n    \"shipments\": {\n        \"mode\": \"not_specified\",\n        \"receiver_address\": {\n            \"zip_code\": \"[FAKER][ADDRESS][ZIP_CODE]\",\n            \"street_name\": \"[FAKER][ADDRESS][STREET_NAME]\",\n            \"city_name\": \"[FAKER][ADDRESS][CITY]\",\n            \"state_name\": \"[FAKER][ADDRESS][STATE]\",\n            \"street_number\": 1000\n        },\n        \"express_shipment\": false,\n        \"local_pickup\": false\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Payment Button with Card Payment Brick\nDESCRIPTION: This example shows how to create a custom payment button and handle the payment process when the default button is hidden. It includes HTML for the button and JavaScript to handle the form data submission.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/hide-element.en.md#2025-04-18_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<button type=\"button\" onclick=\"createPayment();\">Custom Payment Button</button>\n```\n\nLANGUAGE: Javascript\nCODE:\n```\nfunction createPayment(){\n    window.cardPaymentBrickController.getFormData()\n        .then((cardFormData) => {\n            console.log('cardFormData received, creating payment...');\n            fetch(\"/process_payment\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify(cardFormData),\n            })\n        })\n        .catch((error) => {\n            // error handling when calling getFormData()\n        });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Back URLs in Python\nDESCRIPTION: The Python snippet illustrates how to set back URLs for a payment preference and specify the auto return feature using a dictionary.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/redirection.es.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npreference_data = {\n    \"back_urls\": {\n        \"success\": \"https://www.tu-sitio/success\",\n        \"failure\": \"https://www.tu-sitio/failure\",\n        \"pending\": \"https://www.tu-sitio/pendings\"\n    },\n    \"auto_return\": \"approved\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creando Pagos con Efecty en PHP usando MercadoPago SDK\nDESCRIPTION: Código PHP para crear un pago con el método Efecty utilizando el SDK de MercadoPago. Incluye la configuración del token de acceso, creación del cliente de pago y manejo de la idempotencia mediante X-Idempotency-Key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mco.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\Client\\Common\\RequestOptions;\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['transactionAmount'],\n    \"token\" => $_POST['token'],\n    \"description\" => $_POST['description'],\n    \"installments\" => $_POST['installments'],\n    \"payment_method_id\" => $_POST['paymentMethodId'],\n    \"issuer_id\" => $_POST['issuer'],\n    \"payer\" => [\n      \"email\" => $_POST['email'],\n      \"first_name\" => $_POST['payerFirstName'],\n      \"last_name\" => $_POST['payerLastName'],\n      \"identification\" => [\n        \"type\" => $_POST['identificationType'],\n        \"number\" => $_POST['number']\n      ]\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Hiding Value Proposition Text in Wallet Brick Button (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to hide the value proposition text on the Wallet Brick button by setting the hideValueProp property to true.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-appearance.es.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n\t   theme: 'default',\n        customStyle: {\n            hideValueProp: true,\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mercado Pago Device Fingerprint Script\nDESCRIPTION: This HTML snippet includes the Mercado Pago security JavaScript file, which is used to generate a device fingerprint for fraud prevention. Adding this script to the checkout page allows for the collection of device information, which can then be sent with the payment details to improve approval rates.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/spreedly/spreedly.en.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\"></script>\n```\n\n----------------------------------------\n\nTITLE: Describing Payment Not Found Error in JSON\nDESCRIPTION: This response snippet details a failed payment request when a payment ID is not found. It includes an error message, status code 404, indicating the payment's unavailability.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/get-payment-information-returns.en.md#2025-04-18_snippet_1\n\nLANGUAGE: Json\nCODE:\n```\n{\n   \"status\": \"404\",\n   \"error\":  \"Not found\",\n   \"message\": \"Payment not found.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mercado Pago Preference in Node.js\nDESCRIPTION: This Node.js code snippet demonstrates how to create a Mercado Pago preference with a single item and sets the `purpose` to `wallet_purchase`, restricting payments to registered users. It uses the MercadoPago SDK to create the preference and logs the preference ID upon successful creation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-onsubmit.es.md#2025-04-18_snippet_2\n\nLANGUAGE: node\nCODE:\n```\n\"// Crear un objeto de preferencia\\nlet preference = {\\n  // el \\\"purpose\\\": \\\"wallet_purchase\\\" solo permite pagos registrados\\n  // para permitir pagos de invitados, puedes omitir esta propiedad\\n  \\\"purpose\\\": \\\"wallet_purchase\\\",\\n  \\\"items\\\": [\\n    {\\n      \\\"id\\\": \\\"item-ID-1234\\\",\\n      \\\"title\\\": \\\"Mi producto\\\",\\n      \\\"quantity\\\": 1,\\n      \\\"unit_price\\\": 75.76\\n    }\\n  ]\\n};\\n \\nmercadopago.preferences.create(preference)\\n  .then(function (response) {\\n    // Este valor es el ID de preferencia que se enviará a Brick al iniciar\\n    const preferenceId = response.body.id;\\n  }).catch(function (error) {\\n    console.log(error);\\n  });\"\n```\n\n----------------------------------------\n\nTITLE: Creating Cash Out Payment Order in JSON\nDESCRIPTION: JSON payload for creating a payment order with cash out functionality, including item details, total amount, and cash out amount\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/hidden-cashout.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"external_reference\": \"order-id-1234\",\n    \"title\": \"Title\",\n    \"description\": \"Mercado Pago\",\n    \"notification_url\": \"https://www.yourserver.com\",\n    \"expiration_date\": \"2023-08-22T16:34:56.559-04:00\",\n    \"total_amount\": 1390,\n    \"items\": [\n        {\n            \"sku_number\": \"KS955RUR\",\n            \"category\": \"FOOD\",\n            \"title\": \"Item1\",\n            \"description\": \"Item1 Mercado Pago\",\n            \"unit_price\": 238,\n            \"quantity\": 5,\n            \"unit_measure\": \"unit\",\n            \"total_amount\": 1190\n        }\n    ],\n    \"sponsor\": {\n            \"id\": 820480089\n            },\n    \"cash_out\": {\n                \"amount\": 200\n            }\n}\n```\n\n----------------------------------------\n\nTITLE: CSV Example: Minimal Debt Entry\nDESCRIPTION: Sample CSV file with only mandatory fields completed for debt creation\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/format-specifications.es.md#2025-04-18_snippet_5\n\nLANGUAGE: csv\nCODE:\n```\next2024030614313,521998672,,20250312,549.57,,,,,,,,,,,\n```\n\n----------------------------------------\n\nTITLE: Conditional Financing Option for Argentina (mla)\nDESCRIPTION: This snippet configures a specific financing option, \"Cuotas sin Tarjeta\", for Argentina (mla). It highlights the benefit of reaching a larger audience with active credit and a high approval rate. This configuration is specific to the Argentinian market.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/woocommerce/landing.es.md#2025-04-18_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n ----[mla]----\n - benefit_title: Financiación sin tarjeta\n - benefit_message: Al activar Cuotas sin Tarjeta en el checkout, llega a más de 12 millones de personas con crédito activo, sin costos adicionales, además de obtener una tasa de aprobación de aproximadamente el 98% en las ventas.\n\n ------------\n```\n\n----------------------------------------\n\nTITLE: Failed payment response from Mercado Pago API\nDESCRIPTION: This JSON response is returned when a payment transaction fails. It provides error details including error code, message, and specific details about the failure, along with the transaction information showing a failed status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"code\": \"failed\",\n      \"message\": \"The following transactions failed\",\n      \"details\": [\n        \"pay_01JE71J4APB80344T8QMSZK48V: rejected_by_issuer\"\n      ]\n    }\n  ],\n  \"data\": {\n    \"id\": \"01JE71J4APB80344T8QHV6W42A\",\n    \"type\": \"online\",\n    \"processing_mode\": \"automatic\",\n    \"external_reference\": \"ext_ref_1234\",\n    \"capture_mode\": \"automatic\",\n    \"total_amount\": \"200.00\",\n    \"country_code\": \"BRA\",\n    \"status\": \"failed\",\n    \"status_detail\": \"failed\",\n    \"created_date\": \"2024-12-03T19:57:07.798976826Z\",\n    \"last_updated_date\": \"2024-12-03T19:57:10.276894389Z\",\n    \"integration_data\": {\n      \"application_id\": \"130106526144588\"\n    },\n    \"payer\": {\n      \"email\": \"test_user_9835778@testuser.com\"\n    },\n    \"transactions\": {\n      \"payments\": [\n        {\n          \"id\": \"pay_01JE71J4APB80344T8QMSZK48V\",\n          \"amount\": \"200.00\",\n          \"status\": \"failed\",\n          \"status_detail\": \"rejected_by_issuer\",\n          \"reference_id\": \"22dvqmsfohy\",\n          \"payment_method\": {\n            \"id\": \"master\",\n            \"type\": \"credit_card\",\n            \"token\": \"756bf5ae9e03b14a47c7afd8e77ab7f8\",\n            \"installments\": 1\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Opening Scheme HTML Implementation\nDESCRIPTION: HTML implementation for direct redirection to Checkout Pro using the init_point URL obtained from the Preferences API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/opening-schema.en.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n <head>\n   <title>Pagar</title>\n </head>\n <body>\n   <a href=\"YOUR_INIT_POINT\"> // Indicate the init_point returned when creating the preference\n     <button>\n       Pay with Mercado Pago\n     </button>\n   </a>\n </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer Cards Using Python SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve all card data associated with a specific customer utilizing a Python SDK. The SDK function requires the customer's unique ID as a parameter and returns a response object containing card information. Dependencies include the MercadoPago SDK configured with the necessary authentication credentials. The key input is the customer_id, and the expected output is a 'response' dictionary containing the customer's card details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/cards.en.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncards_response = sdk.card().list_all(customer_id)\\ncards = cards_response[\\\"response\\\"]\\n\n```\n\n----------------------------------------\n\nTITLE: Mexico Payment Methods Banner Implementation\nDESCRIPTION: HTML code for displaying Mercado Pago payment method banners for Mexico (MLM) in various dimensions including 728x90, 575x40, 468x60, 120x240, and 120x600 pixels.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/all.en.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/banners/mx/medios/MLM_728X90_new.jpg\" \ntitle=\"Mercado Pago - Medios de pago\" alt=\"Mercado Pago - Medios de pago\" \nwidth=\"728\" height=\"90\"/>\n```\n\n----------------------------------------\n\nTITLE: Integrating Google Ads Conversion Tracking with Checkout Pro Preference in Node.js\nDESCRIPTION: This code snippet shows how to associate Google Ads conversion tracking with a Checkout Pro preference using Node.js. It allows tracking of ad conversions from Google Ads campaigns.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.es.md#2025-04-18_snippet_6\n\nLANGUAGE: node\nCODE:\n```\n// Configura tu preferencia\nvar preference = {\n \n  // Asocia tu etiqueta\n  tracks: [\n        {\n            type: \"google_ad\",\n            values: {\n              conversion_id: \"CONVERSION_ID\",\n              conversion_label: \"CONVERSION_LABEL\"\n            } \n        }\n      ]\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Bancário Payment with Discounts, Fines, and Interest in C#\nDESCRIPTION: This C# code snippet demonstrates how to create a boleto bancário payment with discounts, fines, and interest using the Mercado Pago SDK. It sets up the payment details, payer information, and payment rules for discounts, fines, and interest.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Config;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\nvar paymentRequest = new PaymentCreateRequest {\n    Description = \"Titulo do produto\",\n    DateOfExpiration = new DateTime(2022, 12, 24, 23, 59, 59, 000, DateTimeKind.Local),\n    PaymentMethodId = \"bolbradesco\",\n    TransactionAmount = 100,\n    Payer = new PaymentPayerRequest\n    {\n        FirstName = \"Test\",\n        LastName = \"User\",\n        Email = \"test_user_123456@testuser.com\",\n        Identification = new IdentificationRequest\n        {\n            Type = \"CPF\",\n            Number = \"19119119100\"\n        }\n    },\n    PaymentMethod = new PaymentMethodRequest\n    {\n        Data = new PaymentDataRequest\n        {\n            Rules = new PaymentRulesRequest\n            {\n                Discounts = new List<PaymentDiscountRequest>()\n                {\n                    new PaymentDiscountRequest\n                    {\n                        Value = 5,\n                        Type = \"fixed\",\n                        LimitDate = new DateTime(2022, 12, 1)\n                    }\n                },\n                Fine = new PaymentFeeRequest\n                {\n                    Value = 2,\n                    Type = \"percentage\"\n                },\n                Interest = new PaymentFeeRequest\n                {\n                    Value = 1m,\n                    Type = \"percentage\"\n                }\n            }\n        }\n    }\n};\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest);\nConsole.WriteLine(payment.TransactionDetails.ExternalResourceUrl);\n```\n\n----------------------------------------\n\nTITLE: Creating a Money Transfer Using Recipient Email\nDESCRIPTION: API request to create a money transfer in Mercado Pago using the recipient's email address. This requires the 'money_transfer' operation type and account_money payment method to ensure zero commission and immediate release of funds.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/money-transfer.es.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n$ curl https://api.mercadopago.com/v1/payments \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Cache-Control: no-cache' \\\n  -H 'Authorization: Bearer ACCESS_TOKEN' \\\n  -d '\n  {\n\t\"transaction_amount\": 100,\n\t\"operation_type\": \"money_transfer\",\n\t\"description\": \"Title of what you are paying for\",\n\t\"installments\": 1,\n\t\"marketplace\": \"NONE\",\n\t\"payment_method_id\": \"account_money\",\n\t\"collector\": {\n\t\t\"email\": \"test_user_50345633@testuser.com\"\n\t},\n\t\"external_reference\": \"Reference_1234\",\n\t\"notification_url\": \"https://www.your-site.com/webhooks\",\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Checkout Preferences with Mercado Pago API\nDESCRIPTION: This curl request creates a checkout preference with Mercado Pago API. It includes detailed buyer information, item details, back URLs, and payment method configurations. The request sends a POST to the /checkout/preferences endpoint with an authorization token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/industry-data/additional-info.en.md#2025-04-18_snippet_12\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/checkout/preferences' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--data-raw '{\n    \"auto_return\": \"approved\",\n    \"back_urls\": {\n        \"failure\": \"https://www.mercadopago.com/home/failure\",\n        \"pending\": \"https://www.mercadopago.com/home/pending\",\n        \"success\": \"https://www.mercadopago.com/home/success\"\n    },\n    \"notification_url\": \"https://webhook.site/xyz\",\n    \"expires\": false,\n    \"external_reference\": \"order-123\",\n    \"date_of_expiration\": \"2025-03-12T12:58:41.425-04:00\",\n    \"items\": [\n        {\n            \"id\": \"1234\",\n            \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n            \"title\": \"Product\",\n            \"picture_url\": \"\",\n            \"description\": \"Product Description\",\n            \"category_id\": \"others\",\n            \"quantity\": 1,\n            \"unit_price\": 150 \n        }\n    ],\n    \"payer\": {\n        \"phone\": {\n            \"area_code\": \"11\",\n            \"number\": \"[FAKER][PHONE_NUMBER][CELL_PHONE]\"\n        },\n        \"address\": {\n            \"zip_code\": \"[FAKER][ADDRESS][ZIP_CODE]\",\n            \"street_name\": \"[FAKER][ADDRESS][STREET_NAME]\",\n            \"street_number\": 1000\n        },\n        \"identification\": {\n          \"identification_type\": \"[FAKER][IDENTIFICATION][TYPE]\",\n          \"identification_number\": \"12345678\"\n        },\n        \"email\": \"john@yourdomain.com\",\n        \"name\": \"[FAKER][NAME][FIRST_NAME]\",\n        \"surname\": \"[FAKER][NAME][LAST_NAME]\",\n        \"date_created\": \"\",\n        \"authentication_type\": \"Facebook\",\n        \"registration date\": \"2015-06-02T12:58:41.425-04:00\",\n        \"is_first_purchase_online\": false,\n        \"is_prime_user\": false,\n        \"last_purchase\": \"2020-01-02T12:58:41.425-04:00\"\n    },\n    \"payment_methods\": {\n        \"excluded_payment_methods\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"default_installments\": null,\n        \"default_payment_method_id\": null,\n        \"excluded_payment_types\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"installments\": null\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Downloading a Specific Release Report\nDESCRIPTION: Download a specific report using the file_name attribute retrieved from the report listing. Requires an access token for authentication and the specific report filename.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.en.md#2025-04-18_snippet_13\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/release_report/:file_name'\n```\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/release_report/:file_name',\n    headers: headers,\n};\n\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\n\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Creating Preference for Onboarding Credits with Node.js\nDESCRIPTION: This Node.js snippet shows how to create a Mercado Pago preference for onboarding credits using the MercadoPago SDK. It defines a preference object with an item and sets the `purpose` to `onboarding_credits`. It then uses `mercadopago.preferences.create` to create the preference and handle the response or any errors. This snippet is useful for setting up payments without a credit card.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Crea un objeto de preferencia\nlet preference = {\n  items: [\n    {\n      title: 'Mi producto',\n      unit_price: 100,\n      quantity: 1,\n    }\n  ],\n  purpose: 'onboarding_credits'\n};\n\nmercadopago.preferences.create(preference)\n.then(function(response){\n// Este valor substituirá a la string \"<%= global.id %>\" en tu HTML\n  global.id = response.body.id;\n}).catch(function(error){\n  console.log(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Request for Apparel Transaction\nDESCRIPTION: Curl command to submit a payment request with detailed apparel-specific information including transaction details, items, payer, and shipment data\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/apparel.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}} \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}}' \\\n--data-raw '{...}'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"transaction_amount\": 150.00,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"debvisa\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Pedido01\",\n    \"description\": \"PEDIDO NOVO\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"payer\": {...},\n    \"additional_info\": {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Refund with MercadoPago API\nDESCRIPTION: Example of processing a refund for a previous payment using MercadoPago's API. Shows the required headers and endpoint for initiating a refund.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.es.md#2025-04-18_snippet_5\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n'https://api.mercadopago.com/v1/payments/12345678901/refunds'\\\n-H 'Content-Type: application/json' \\\n-H 'X-Idempotency-Key: 77e1c83b-7bb0-437b-bc50-a7a58e5660ac' \\\n-H 'Authorization: Bearer TEST-4397********912-08011*********50d74305b*********a2f9ec0-1********' \\\n-d '{\n\"amount\": 5\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Buy Now Pay Later in VTEX Payment Settings\nDESCRIPTION: A comprehensive guide to adding Mercado Pago's installment payment method without requiring a credit card in VTEX admin panel\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/vtex/cho-api-credits.es.md#2025-04-18_snippet_0\n\nLANGUAGE: es\nCODE:\n```\n1. Haz clic en el botón **+ (Añadir nueva condición de pago para...)**.\n2. Dentro de la categoría \"Otro\", busca por **Buy Now Pay Later Mercado Pago** y selecciona esa opción.\n3. Completa los campos:\n   a. Escribe el **Nombre de la Regla**\n   b. Selecciona **MercadoPagoV2** en \"Proceso con la afiliación\"\n   c. **Activa** la condición de pago\n4. Haz clic en **Guardar**\n```\n\n----------------------------------------\n\nTITLE: Excluding Payment Methods PHP\nDESCRIPTION: This PHP snippet demonstrates how to exclude specific payment methods and types from a Mercado Pago payment preference. It configures the `excluded_payment_methods` and `excluded_payment_types` arrays within the `payment_methods` property, and sets the number of installments available.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$preference = new MercadoPago\\Preference();\n// ...\n$preference->payment_methods = array(\n  \"excluded_payment_methods\" => array(\n    array(\"id\" => \"master\")\n  ),\n  \"excluded_payment_types\" => array(\n    array(\"id\" => \"ticket\")\n  ),\n  \"installments\" => 12\n);\n// ...\n?>\n\n```\n\n----------------------------------------\n\nTITLE: Processing Pix Refunds with Custom Headers in Ruby\nDESCRIPTION: Ruby implementation for creating a refund with custom headers. The code initializes the MercadoPago SDK, sets up refund data with an amount of 20, and includes the X-Render-In-Process-Refunds header to handle in-process refunds.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.en.md#2025-04-18_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\ndata = {\n amount: 20\n}\n\ncustom_headers = {\n 'X-Render-In-Process-Refunds': 'true'\n}\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\nrefund = sdk.refund.create(payment_id, refund_data: data, request_options: custom_request_options)\n```\n\n----------------------------------------\n\nTITLE: Personalizando la variable de salida del Device ID\nDESCRIPTION: Script que personaliza el nombre de la variable de salida donde se almacenará el ID del dispositivo, permitiendo usar un nombre diferente al predeterminado MP_DEVICE_SESSION_ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.es.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\" output=\"deviceId\"></script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Payment Notification Receiver\nDESCRIPTION: Example implementation of a notification receiver that processes payment and merchant order notifications. Handles different notification types and validates payment status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/ipn.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  MercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n  $merchant_order = null;\n  switch($_GET[\"topic\"]) {\n      case \"payment\":\n          $payment = MercadoPago\\Payment::find_by_id($_GET[\"id\"]);\n          // Get the payment and the corresponding merchant_order reported by the IPN.\n          $merchant_order = MercadoPago\\MerchantOrder::find_by_id($payment->order->id);\n          break;\n      case \"merchant_order\":\n          $merchant_order = MercadoPago\\MerchantOrder::find_by_id($_GET[\"id\"]);\n          break;\n  }\n  $paid_amount = 0;\n  foreach ($merchant_order->payments as $payment) { \n      if ($payment['status'] == 'approved'){\n          $paid_amount += $payment['transaction_amount'];\n      }\n  }\n   // If the payment's transaction amount is equal (or bigger) than the merchant_order's amount you can release your items\n  if($paid_amount >= $merchant_order->total_amount){\n      if (count($merchant_order->shipments)>0) { // The merchant_order has shipments\n          if($merchant_order->shipments[0]->status == \"ready_to_ship\") {\n              print_r(\"Totally paid. Print the label and release your item.\");\n          }\n      } else { // The merchant_order don't has any shipments\n          print_r(\"Totally paid. Release your item.\");\n      }\n  } else {\n      print_r(\"Not paid yet. Do not release your item.\");\n  }\n ?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Banks for Money Out Transfer\nDESCRIPTION: API endpoint to fetch the list of available banks for money transfers using Mercado Pago's Open Banking API. Requires authentication with Access Token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request GET \\\n  --url https://api.mercadopago.com/open-banking/payments/v1/banks \\\n  --header 'Authorization: Bearer <ENV_ACCESS_TOKEN>'\n```\n\n----------------------------------------\n\nTITLE: Installing Mercado Pago SDK with NuGet\nDESCRIPTION: This code snippet shows how to install the Mercado Pago SDK for C# using NuGet. NuGet is the package manager for .NET. The command `nuget install mercadopago-sdk` installs the Mercado Pago SDK into your .NET project.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-development-environment.es.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n\"nuget install mercadopago-sdk\"\n```\n\n----------------------------------------\n\nTITLE: Creating Authorized Subscription via Mercado Pago API\nDESCRIPTION: Demonstrates how to create a subscription with authorized payment using the Mercado Pago API. Includes configuration of recurring payment details, specifying frequency, transaction amount, and authorization status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/subscription-no-associated-plan-authorized-payments.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n      'https://api.mercadopago.com/preapproval'\\\n       -H 'Content-Type: application/json' \\\n       -H 'Authorization: Bearer TEST-2151****' \\\n       -H 'X-scope: stage' \\\n       --data-raw '{\n            \"back_url\": \"https://www.google.com\",\n            \"reason\": \"Test Subscription\",\n            \"auto_recurring\": {\n                \"frequency\": 1,\n                \"frequency_type\": \"months\",\n                \"start_date\": \"2020-06-02T13:07:14.260Z\",\n                \"end_date\": \"2022-07-20T15:59:52.581Z\",\n                \"transaction_amount\": 10,\n                \"currency_id\": \"ARS\"\n            },\n            \"payer_email\": \"test_user+1020927396@testuser.com\",\n            \"card_token_id\": \"{{CARD_TOKEN}}\",\n            \"status\": \"authorized\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Cancelando un pago con MercadoPago SDK en Ruby\nDESCRIPTION: Este fragmento de código demuestra cómo cancelar un pago específico utilizando el SDK de MercadoPago en Ruby. Se inicializa el SDK con un token de acceso, se define el estado del pago como 'cancelled', y se actualiza el pago utilizando su ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ruby/cancellations.es.md#2025-04-18_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\npayment_data = {\n   \"status\": \"cancelled\"\n}\npayment = sdk.payment.update(\"payment_id\", payment_data)\n```\n\n----------------------------------------\n\nTITLE: Creating a Transaction Request for Chile (MLC)\nDESCRIPTION: Example cURL command for creating a transaction in Chile. It includes the authorization header, idempotency key, and a JSON payload with transaction details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.en.md#2025-04-18_snippet_10\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    'https://api.mercadopago.com/v1/transaction-intents/process'\\\n    -H 'Content-Type: application/json' \\\n       -H 'X-Idempotency-Key: {{idempotency_key}}' \\\n       -H 'x-Signature: true' \\\n       -H 'x-enforce-signature: false' \\\n       -H 'Authorization: Bearer TEST-7719*********832-03141*********ec9309854*********f1e54b5-1*********' \\\n    -d '{\n  \"external_reference\": \"MP0001\",\n  \"point_of_interaction\": \"{\\\"type\\\":\\\"PSP_TRANSFER\\\"}\",\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://exemplo.cl/notification\"\n    }\n  },\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": 100\n        }\n      ]\n    },\n    \"to\": {\n      \"accounts\": [\n        {\n          \"amount\": 100,\n          \"bank_id\": \"99999004\",\n          \"type\": \"current\",\n          \"number\": \"10266732\",\n          \"owner\": {\n            \"identification\": {\n              \"type\": \"RUT\",\n              \"number\": \"111111111111\"\n            }\n          }\n        }\n      ]\n    },\n    \"total_amount\": 100\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Transaction Response JSON Example\nDESCRIPTION: Sample JSON response returned after successful processing of a bank transfer transaction, including transaction details, status, and account information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_date\": \"2021-01-01T00:00:00.000Z\",\n  \"external_reference\": \"123456\",\n  \"id\": \"0d5020ed\",\n  \"last_updated_date\": \"2021-01-01T00:00:00.000Z\",\n  \"point_of_interaction\": {\n    \"type\": \"{\\\"type\\\":\\\"PSP_TRANSFER\\\"}\"\n  },\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://example.com.br/notification\"\n    }\n  },\n  \"status\": \"approved\",\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": \"100,00\"\n        }\n      ]\n    },\n    \"paid_amount\": 100,\n    \"payer\": {\n      \"id\": 123456543\n    },\n    \"refunded_amount\": 1,\n    \"to\": {\n      \"accounts\": [\n        {\n          \"amount\": \"100,00\",\n          \"origin_id\": \"01AAAM001A1AY43FBR8WCM9CES\",\n          \"status_details\": [\n            {}\n          ],\n          \"owner\": {\n            \"identification\": {\n              \"number\": \"1234567890\",\n              \"type\": \"CPF\"\n            }\n          },\n          \"bank_id\": \"0000014\",\n          \"type\": \"checking_account\",\n          \"number\": \"123456\"\n        }\n      ]\n    },\n    \"total_amount\": 100,\n    \"statement_descriptor\": \"test\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response - JSON Payment Data\nDESCRIPTION: This JSON response represents the data returned after creating a Pix payment via Open Finance through the Mercado Pago API. It includes details such as the payment ID, creation date, status, payment method, transaction amount, and information about the payer and point of interaction. The response also includes a 'ticket_url' used for redirection.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/advanced-openFinance.pt.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 22831702804,\n    \"date_created\": \"2022-06-02T10:17:13.865-04:00\",\n    \"date_approved\": null,\n    \"date_last_updated\": \"2022-06-02T10:17:13.865-04:00\",\n    \"date_of_expiration\": \"2022-06-03T10:17:13.536-04:00\",\n    \"money_release_date\": null,\n    \"operation_type\": \"regular_payment\",\n    \"issuer_id\": null,\n    \"payment_method_id\": \"pix\",\n    \"payment_type_id\": \"bank_transfer\",\n    \"status\": \"pending\",\n    \"status_detail\": \"pending_waiting_transfer\",\n    \"currency_id\": \"BRL\",\n    \"description\": \"Pagamento Openfinace\",\n    \"live_mode\": true,\n    \"sponsor_id\": null,\n    \"authorization_code\": null,\n    \"money_release_schema\": null,\n    \"taxes_amount\": 0,\n    \"counter_currency\": null,\n    \"brand_id\": null,\n    \"shipping_amount\": 0,\n    \"pos_id\": null,\n    \"store_id\": null,\n    \"integrator_id\": null,\n    \"platform_id\": null,\n    \"corporation_id\": null,\n    \"collector_id\": 456852241,\n    \"payer\": {\n        \"type\": null,\n        \"id\": \"435906493\",\n        \"operator_id\": null,\n        \"email\": null,\n        \"identification\": {\n            \"type\": null,\n            \"number\": null\n        },\n        \"phone\": {\n            \"area_code\": null,\n            \"number\": null,\n            \"extension\": null\n        },\n        \"first_name\": null,\n        \"last_name\": null,\n        \"entity_type\": null\n    },\n    \"marketplace_owner\": null,\n    \"metadata\": {},\n    \"additional_info\": {\n        \"available_balance\": null,\n        \"nsu_processadora\": null,\n        \"authentication_code\": null\n    },\n    \"order\": {},\n    \"external_reference\": \"45ba90f2-a37f-4d57-bce2-e46aae3c3b04\",\n    \"transaction_amount\": 5,\n    \"transaction_amount_refunded\": 0,\n    \"coupon_amount\": 0,\n    \"differential_pricing_id\": null,\n    \"deduction_schema\": null,\n    \"callback_url\": null,\n    \"installments\": 1,\n    \"transaction_details\": {\n        \"payment_method_reference_id\": null,\n        \"net_received_amount\": 0,\n        \"total_paid_amount\": 5,\n        \"overpaid_amount\": 0,\n        \"external_resource_url\": null,\n        \"installment_amount\": 0,\n        \"financial_institution\": null,\n        \"payable_deferral_period\": null,\n        \"acquirer_reference\": null,\n        \"bank_transfer_id\": null,\n        \"transaction_id\": null\n    },\n    \"fee_details\": [],\n    \"charges_details\": [],\n    \"captured\": true,\n    \"binary_mode\": false,\n    \"call_for_authorize_id\": null,\n    \"statement_descriptor\": null,\n    \"card\": {},\n    \"notification_url\": null,\n    \"refunds\": [],\n    \"processing_mode\": \"aggregator\",\n    \"merchant_account_id\": null,\n    \"merchant_number\": null,\n    \"acquirer_reconciliation\": [],\n    \"point_of_interaction\": {\n        \"type\": \"OPENPLATFORM\",\n        \"linked_to\": \"openfinance\",\n        \"business_info\": {\n            \"unit\": \"online_payments\",\n            \"sub_unit\": \"default\"\n        },\n        \"application_data\": {\n            \"name\": null,\n            \"version\": null\n        },\n        \"transaction_data\": {\n            \"qr_code\": null,\n            \"bank_transfer_id\": null,\n            \"transaction_id\": null,\n            \"financial_institution\": null,\n            \"ticket_url\": null,\n            \"bank_info\": {\n                \"payer\": {\n                    \"account_id\": null,\n                    \"id\": null,\n                    \"long_name\": null,\n                    \"external_account_id\": null\n                },\n                \"collector\": {\n                    \"account_id\": null,\n                    \"long_name\": null,\n                    \"account_holder_name\": \"Salazar Tucker\",\n                    \"transfer_account_id\": null\n                },\n                \"is_same_bank_account_owner\": null,\n                \"origin_bank_id\": null,\n                \"origin_wallet_id\": null\n            },\n            \"infringement_notification\": {\n                \"type\": null,\n                \"status\": null\n            },\n          \"qr_code_base64\":null\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Full Payment Request with Mercado Pago Details\nDESCRIPTION: This curl command demonstrates a complete purchase request to Spreedly, incorporating Mercado Pago specific fields such as cardholder identification, installments, device ID, and additional information. This example showcases the inclusion of payer details, item information, and shipping address to improve payment approval rates.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/spreedly/spreedly.en.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\n$ curl https://core.spreedly.com/v1/gateways/6DqX57I6fHgIuUkVN2HGszjDSu1/purchase.json \\\n  -u 'C7cRfNJGODKh4Iu5Ox3PToKjniY:4UIuWybmdythfNGPqAqyQnYha6s451ri0fYAo4p3drZUi7q2Jf4b7HKg8etDtoKJ' \\\n  -H 'Content-Type: application/json' \\\n  -d '\\n{\n  \"transaction\": {\n          \"payment_method_token\": \"3uAIR1sSCVJG90obnCN1Ip1BY3b\",\n          \"amount\": 500,\n          \"currency_code\": \"[FAKER][CURRENCY][ACRONYM]\",\n          \"gateway_specific_fields\":{\n          \t\"mercado_pago\":{\n          \t\t\"cardholder_identification_type\":\"DNI\",\n          \t\t\"cardholder_identification_number\":\"22333444\",\n          \t\t\"installments\": \"1\",\n          \t\t\"device_id\": \"392d1af8-bc36-893c-ccf4-80b6abbc07b7\",\n          \t\t\"additional_info\":{\n                \t\"items\": [{\n\t\t                    \"id\": \"item-ID-1234\",\n\t\t                    \"title\": \"Title of what you are paying for\",\n\t\t                    \"picture_url\": \"https://www.mercadopago.com/org-img/MP3/home/logomp3.gif\",\n\t\t                    \"description\": \"Item description\",\n\t\t                    \"category_id\": \"other\",\n\t\t                    \"quantity\": 1,\n\t\t                    \"unit_price\": 5\n                \t}],\n                \t\"payer\": {\n\t\t\t\t\t\t\"first_name\": \"TEST\",\n\t\t\t\t\t\t\"last_name\": \"TEST\",\n\t\t\t\t\t\t\"phone\": {\n\t\t\t\t\t\t\t\"area_code\": \"00\",\n\t\t\t\t\t\t\t\"number\": \"0000-0000\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"address\": {\n\t\t\t\t\t\t\t\"street_name\": \"STREET NAME\",\n\t\t\t\t\t\t\t\"street_number\": STREET NUMBER,\n\t\t\t\t\t\t\t\"zip_code\": \"ZIP CODE\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n            \t}\n          \t}\n          },\n          \"retain_on_success\": true,\n          \"order_id\" : \"0001\",\n          \"description\" : \"SPREEDLY TEST\",\n          \"email\" : \"[FAKER][INTERNET][FREE_EMAIL]\",  \n          \"shipping_address\" : {\n            \"name\" : \"ADDRESS NAME\",\n            \"address1\" : \"STREET NAME STREET NUMBER\",\n            \"address2\" : \"\",\n            \"city\" : \"CITY\",\n            \"state\" : \"STATE\",\n            \"zip\" : \"ZIP CODE\",\n            \"country\" : \"COUNTRY\",\n            \"phone\" : \"0000000000\"\n    \t}\n\t}\n}\n'\n```\n\n----------------------------------------\n\nTITLE: Payment Methods Table - Peru (MPE)\nDESCRIPTION: Markdown table listing available payment methods for Peru, including Cards and 2 Cards options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/adobe-commerce/checkout-api.en.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Payment Method | Description |\n| --- | --- |\n| Cards | Allows integration with credit and debit cards. |\n| 2 Cards | Allows integration with 2 credit and debit cards. |\n```\n\n----------------------------------------\n\nTITLE: Structuring JSON Payload for Payment\nDESCRIPTION: Defines the JSON payload structure required for sending payment information, including detailed sub_merchant data to comply with BCB 3978 regulations. This JSON is used in making API requests to MercadoPago for transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subcredenciadores-payfacs/integration-update.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"payer\": {...},\n  \"forward_data\": {\n    \"sub_merchant\": {\n      \"sub_merchant_id\": 123123,\n      \"mcc\": \"5462\",\n      \"country\": \"BRA\",\n      \"address_door_number\": 1,\n      \"zip\": \"2222222\",\n      \"document_number\": \"222222222222222\",\n      \"city\": \"SÃO PAULO\",\n      \"address_street\": \"RUA A\",\n\t    \"legal_name\": \"LOJINHA DO ZÉ\",\n      \"region_code_iso\": \"BR-MG\",\n      \"region_code\": \"BR\",\n      \"document_type\": \"CNPJ\",\n      \"phone\": \"123123123\",\n      \"url\": \"www.nomedofacilitador.com.br\"\n    }\n  },\n  \"transaction_amount\": 20,\n  \"description\": \"...\",\n  \"token\": \"....\",\n  \"statement_descriptor\": \"PRUEBA\",\n  \"issuer_id\": ...,\n  \"payment_method_id\": \"...\",\n  \"amounts\": {...},\n  \"installments\": 1,\n  \"pos_id\": \"....\",\n  \"external_reference\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Response Structure for Mexico (MLM)\nDESCRIPTION: Example JSON response showing a processed transaction in Mexico with a status of 'processed'. It includes similar fields to the MLA response but with Mexico-specific details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.en.md#2025-04-18_snippet_9\n\nLANGUAGE: curl\nCODE:\n```\n{\n  \"created_date\": \"2024-11-13T14:18:07.052+00:00\",\n  \"external_reference\": \"12345\",\n  \"id\": \"22dvqmseu6a\",\n  \"last_updated_date\": \"2024-11-13T14:18:07.663+00:00\",\n  \"point_of_interaction\": {\n    \"type\": \"PSP_TRANSFER\"\n  },\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://example.mx/notification\"\n    }\n  },\n  \"status\": \"processed\",\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": 25,\n          \"status_details\": []\n        }\n      ]\n    },\n    \"paid_amount\": 0,\n    \"payer\": {\n      \"id\": 1992483662\n    },\n    \"refunded_amount\": 0,\n    \"to\": {\n      \"accounts\": [\n        {\n          \"amount\": 25,\n          \"description\": \"envio de 25\",\n          \"origin_id\": \"01JCJY70ACGJ2AP8433JGG0ZRY\",\n          \"status_details\": []\n        }\n      ]\n    },\n    \"total_amount\": 25,\n    \"statement_descriptor\": \"\",\n    \"binary_mode\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing 120x240px Payment Method Banner\nDESCRIPTION: HTML code for embedding a 120x240 pixel Mercado Pago payment methods banner advertising 10 interest-free installments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/dez.en.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/PSJ/120x240_banner_psj_10x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"120\" height=\"240\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating Preference in Python\nDESCRIPTION: This Python snippet demonstrates creating a Mercado Pago preference with item details and setting the `purpose` to `wallet_purchase`, restricting payments to logged-in users. It retrieves the created preference from the response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-onsubmit.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Cria um item na preferência\npreference_data = {\n  # o \"purpose\": \"wallet_purchase\", permite apenas pagamentos logados\n  # para permitir pagamentos como guest, você pode omitir essa propriedade\n    \"purpose\": \"wallet_purchase\",\n    \"items\": [\n        {\n            \"title\": \"Meu Item\",\n            \"quantity\": 1,\n            \"unit_price\": 75.76\n        }\n    ]\n}\n \npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Mercado Pago Module Configuration (MLU, MCO, MLC, MPE)\nDESCRIPTION: This snippet configures the Mercado Pago module for Tiendanube, focusing on payment options for Uruguay, Colombia, Chile and Peru (MLU, MCO, MLC, MPE). It details Checkout Pro and Checkout API options, including support for credit/debit cards and cash payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/nuvemshop/landing.es.md#2025-04-18_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"bullet_section_with_media:\\n - title: Pago\n - type: normal\n - message: Con el módulo de Mercado Pago puedes configurar pagos mediante:\n - benefit_title: Checkout Pro\n - benefit_message: Los compradores podrán pagar con una cuenta de Mercado Pago y todo el proceso de compra se realizará en nuestro entorno, lo que facilita el pago con tarjetas de débito, de crédito y otros medios de pago (redes de pago en efectivo).\n - benefit_title: Checkout API\n - benefit_message: El pago se realiza sin salir de tu tienda virtual con tarjetas (crédito y debito) y redes de pago en efectivo.\n - image: /nuvemshop/landing-2.png \"\n```\n\n----------------------------------------\n\nTITLE: Hiding Form Title in Card Payment Brick (JavaScript)\nDESCRIPTION: This snippet demonstrates how to hide the form title and accepted flags in the Card Payment Brick using JavaScript. It sets the 'hideFormTitle' property to true in the customization settings.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/hide-element.es.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n   ...,\n   customization: {\n       visual: {\n           hideFormTitle: true\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Available Payments Configuration for Argentina (mla)\nDESCRIPTION: This snippet defines the available payment methods for Argentina (mla). The `available_payments` field lists the supported payment methods. This allows for customizing the payment options offered in each country.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/woocommerce/landing.es.md#2025-04-18_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\n----[mla]---- \n\n---\navailable_payments: credit, debit, mercadopago, efectivo, atm, cuotas_sin_tarjeta\n\n----\n------------\n```\n\n----------------------------------------\n\nTITLE: Refunding Validation Payment in Mercado Pago\nDESCRIPTION: cURL command for refunding a validation payment after card verification. This endpoint requires the payment ID, authorization token, idempotency key, and the amount to be refunded. Execution should happen at least 5 seconds after payment creation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.en.md#2025-04-18_snippet_9\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n'https://api.mercadopago.com/v1/payments/12345678901/refunds'\\\n-H 'Content-Type: application/json' \\\n-H 'X-Idempotency-Key: 77e1c83b-7bb0-437b-bc50-a7a58e5660ac' \\\n-H 'Authorization: Bearer TEST-4397********912-08011*********50d74305b*********a2f9ec0-1********' \\\n-d '{\n\"amount\": 5\n}'\n```\n\n----------------------------------------\n\nTITLE: Setting Back URLs and Auto Return in C#\nDESCRIPTION: This C# snippet shows how to set the `BackUrls` and `AutoReturn` properties within a `PreferenceRequest` object. It initializes the URLs for success, failure, and pending scenarios and sets automatic return on approval. A Mercado Pago C# SDK with `PreferenceRequest` and `PreferenceBackUrlsRequest` classes is required.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nvar request = new PreferenceRequest\n{\n    // ...\n    BackUrls = new PreferenceBackUrlsRequest\n    {\n        Success = \"https://www.tu-sitio/success\",\n        Failure = \"http://www.tu-sitio/failure\",\n        Pending = \"http://www.tu-sitio/pendings\",\n    },\n    AutoReturn = \"approved\",\n};\n\n```\n\n----------------------------------------\n\nTITLE: Sending Intent to Android App in Flutter\nDESCRIPTION: This Flutter code sends an intent to a native Android application.  It retrieves the package name using `packageInfo`, creates an `AndroidIntent` with specified action, package, component, and arguments including the amount to send ('monto').  The intent is then launched to initiate the payment process.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/cross-platform-flutter.en.md#2025-04-18_snippet_2\n\nLANGUAGE: flutter\nCODE:\n```\n\"Future<void> _intentSend() async { \n\t\tPackageInfo packageInfo = await PackageInfo.fromPlatform();  setState(() { \n\t\t\tString packageName = packageInfo.packageName; \n\t\t\tfinal AndroidIntent intent = AndroidIntent( \n\t\t\taction: 'android.intent.action.SEND', \n\t\t\tpackage: 'redelcom.cl.rdcpass ', \n\t\t\targuments: <String, dynamic>{ \n\t\t\t\t'packageName': packageName, \n\t\t\t\t'className': '$packageName.MainActivity', \n\t\t\t\t'monto': '200', //pasar la cantidad del envío \n\t\t\t}, \n\t\t\tcomponentName: 'redelcom.cl.rdcpass.MainActivity', \n\t\t\t); \n\t\t\tintent.launch(); \n\t\t}); \n}\"\n```\n\n----------------------------------------\n\nTITLE: Successful Transaction Info Response (MLM)\nDESCRIPTION: This JSON snippet shows a sample response from the Mercado Pago API when querying transaction information in Mexico (MLM). It includes details such as creation date, external reference, ID, status, and transaction specifics.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_date\": \"2024-11-13T14:18:07.052+00:00\",\n  \"external_reference\": \"12345\",\n  \"id\": \"22dvqmseu6a\",\n  \"last_updated_date\": \"2024-11-13T14:18:07.663+00:00\",\n  \"point_of_interaction\": {\n    \"type\": \"PSP_TRANSFER\"\n  },\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://example.mx/notification\"\n    }\n  },\n  \"status\": \"processed\",\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": 25,\n          \"status_details\": []\n        }\n      ]\n    },\n    \"paid_amount\": 0,\n    \"payer\": {\n      \"id\": 1992483662\n    },\n    \"refunded_amount\": 0,\n    \"to\": {\n      \"accounts\": [\n        {\n          \"amount\": 25,\n          \"description\": \"envio de 25\",\n          \"origin_id\": \"01JCJY70ACGJ2AP8433JGG0ZRY\",\n          \"status_details\": []\n        }\n      ]\n    },\n    \"total_amount\": 25,\n    \"statement_descriptor\": \"\",\n    \"binary_mode\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Form Title in Card Payment Brick (JavaScript)\nDESCRIPTION: This snippet demonstrates how to hide the form title and accepted card flags in the Card Payment Brick using JavaScript. It sets the 'hideFormTitle' property to true in the customization settings.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/hide-element.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n   ...,\n   customization: {\n       visual: {\n           hideFormTitle: true\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Notification for Reports\nDESCRIPTION: API call to set up email notifications for report generation. This allows specifying email recipients that will receive reports automatically.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.es.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/reports/notifiers' \\\n--header 'Authorization: Bearer {{TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"type\": \"email\",\n    \"data\": {\n        \"recipients\": [\"test@mercadolibre.com\"]\n    },\n    \"description\": \"test notifier email\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Setting Access Token for Mercado Pago in Java\nDESCRIPTION: This snippet configures the Mercado Pago SDK with the access token to initialize a client for retrieving payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nPaymentMethodClient client = new PaymentMethodClient();\nclient.list();\n```\n\n----------------------------------------\n\nTITLE: Connecting to Mercado Pago SFTP Server via Terminal\nDESCRIPTION: Command to establish a secure SFTP connection using SSH private key authentication. Requires predefined variables for directory, private key file, and user credentials.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/integration-configuration.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsftp -i ${dirname}/${id_rsa_sftp_ml} ${user_seller_sftp_ml}@sftp.mercadolibre.io\n```\n\n----------------------------------------\n\nTITLE: Updating a Merchant Order in PHP\nDESCRIPTION: This snippet provides guidance on how to update the details of a merchant order by specifying the order ID and the parameters that need to be changed. It constructs a request array and utilizes the update method of the MerchantOrderClient to apply the changes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/orders.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new MerchantOrderClient();\n\n    $request = [\n      \"notification_url\" => \"https://www.test.com\"\n    ];\n\n  $client->update(123456789, $request);\n?>\n```\n\n----------------------------------------\n\nTITLE: Payment Form HTML Structure\nDESCRIPTION: Complete payment form structure including card fields, personal information inputs, and styling.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    #form-checkout {\n      display: flex;\n      flex-direction: column;\n      max-width: 600px;\n    }\n\n    .container {\n      height: 18px;\n      display: inline-block;\n      border: 1px solid rgb(118, 118, 118);\n      border-radius: 2px;\n      padding: 1px 2px;\n    }\n  </style>\n  <form id=\"form-checkout\" action=\"/process_payment\" method=\"POST\">\n    <div id=\"form-checkout__cardNumber\" class=\"container\"></div>\n    <div id=\"form-checkout__expirationDate\" class=\"container\"></div>\n    <div id=\"form-checkout__securityCode\" class=\"container\"></div>\n    <input type=\"text\" id=\"form-checkout__cardholderName\" placeholder=\"Titular do cartão\" />\n    <select id=\"form-checkout__issuer\" name=\"issuer\">\n      <option value=\"\" disabled selected>Banco emissor</option>\n    </select>\n    <select id=\"form-checkout__installments\" name=\"installments\">\n      <option value=\"\" disabled selected>Parcelas</option>\n    </select>\n    <select id=\"form-checkout__identificationType\" name=\"identificationType\">\n      <option value=\"\" disabled selected>Tipo de documento</option>\n    </select>\n    <input type=\"text\" id=\"form-checkout__identificationNumber\" name=\"identificationNumber\" placeholder=\"Número do documento\" />\n    <input type=\"email\" id=\"form-checkout__email\" name=\"email\" placeholder=\"E-mail\" />\n\n    <input id=\"token\" name=\"token\" type=\"hidden\">\n    <input id=\"paymentMethodId\" name=\"paymentMethodId\" type=\"hidden\">\n    <input id=\"transactionAmount\" name=\"transactionAmount\" type=\"hidden\" value=\"100\">\n    <input id=\"description\" name=\"description\" type=\"hidden\" value=\"Nome do Produto\">\n\n    <button type=\"submit\" id=\"form-checkout__submit\">Pagar</button>\n  </form>\n```\n\n----------------------------------------\n\nTITLE: Add Payment Form (MLM)\nDESCRIPTION: This HTML snippet provides the structure for a payment form specifically tailored for MLM, integrating with MercadoPago.js. It includes fields for card number, expiration date, security code, cardholder name, issuer, installments, and cardholder email. CSS styling is included for basic layout and appearance.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n  <style>\n    #form-checkout {\n      display: flex;\n      flex-direction: column;\n      max-width: 600px;\n    }\n\n    .container {\n      height: 18px;\n      display: inline-block;\n      border: 1px solid rgb(118, 118, 118);\n      border-radius: 2px;\n      padding: 1px 2px;\n    }\n  </style>\n  <form id=\"form-checkout\">\n    <div id=\"form-checkout__cardNumber\" class=\"container\"></div>\n    <div id=\"form-checkout__expirationDate\" class=\"container\"></div>\n    <div id=\"form-checkout__securityCode\" class=\"container\"></div>\n    <input type=\"text\" id=\"form-checkout__cardholderName\" />\n    <select id=\"form-checkout__issuer\"></select>\n    <select id=\"form-checkout__installments\"></select>\n    <input type=\"email\" id=\"form-checkout__cardholderEmail\" />\n\n    <button type=\"submit\" id=\"form-checkout__submit\">Pagar</button>\n    <progress value=\"0\" class=\"progress-bar\">Carregando...</progress>\n  </form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Customizations for Mercado Pago Banner in React\nDESCRIPTION: This React snippet shows how to define visual customizations for the Mercado Pago banner within a React component. It includes options for controlling the logo visibility, content alignment, background and border styles, and text properties such as alignment, font, size, weight, and color. This configuration object can be used when rendering the banner component.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/brand-brick/visual-customizations.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n    // the visual changes only apply to the banner, the modal is always default\n    visual: {\n      hideMercadoPagoLogo: false, // optional boolean\n      contentAlign: \"center\", // optional \"left\" | \"center\" | \"right\"\n      backgroundColor: \"white\", // optional \"white\" | \"mercado_pago_primary\" | \"mercado_pago_secondary\" | \"black\" | \"transparent\"\n      border: false, // optional boolean\n      borderColor: \"dark\", // optional \"dark\" | \"light\"\n      borderWidth: \"1px\", // optional \"1px\" | \"2px\"\n      borderRadius: \"0px\", // optional  string format: \"Npx\"\n      verticalPadding: \"8px\" // optional  string format: \"Npx\". max \"40px\"\n      horizontalPadding: \"16px\" // optional  string format: \"Npx\". max \"40px\"\n    },\n    text: {\n      align: \"left\", // optional \"left\" | \"center\" | \"right\",\n      useCustomFont: false, // optional boolean. OBS: If is true the Brick inheriths the font from the parent\n      size: \"medium\", // optional \"extra-small\" | \"small\" | \"medium\" | \"large\".\n      fontWeight: \"semibold\", // optional \"regular\" | \"semibold\".\n      color: \"secondary\", // optional \"primary\" | \"secondary\" | \"inverted\".\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: CSV Sample File with Mandatory Data for Payment Links\nDESCRIPTION: This CSV file example contains only the mandatory data fields required for uploading payment links to MercadoPago. It omits all optional data fields.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/format-specifications.en.md#2025-04-18_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\next2024030614313,,,20250312,549.57,,,,,,,,,,,,,,,,,,,\n```\n\n----------------------------------------\n\nTITLE: Updating Settlement Report Configuration in MercadoPago API\nDESCRIPTION: API request to update settlement report configuration including file naming, detail levels, and reporting frequency. Uses PUT request to /v1/account/settlement_report/config endpoint with configuration options in JSON format.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PUT \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/config' \\\n    -d '{\n        \"file_name_prefix\": \"settlement-report-USER_ID\",\n        \"show_fee_prevision\": false,\n        \"show_chargeback_cancel\": true,\n        \"detailed\": true,\n        \"coupon_detailed\": true,\n        \"shipping_detail\": true,\n        \"refund_detailed\": true,\n        \"extended\": false,\n        \"frequency\": {\n            \"hour\": 0,\n            \"type\": \"monthly\",\n            \"value\": 1\n        }\n    }'\n```\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$data = '{\n        \"file_name_prefix\": \"settlement-report-USER_ID\",\n        \"show_fee_prevision\": false,\n        \"show_chargeback_cancel\": true,\n        \"detailed\": true,\n        \"coupon_detailed\": true,\n        \"shipping_detail\": true,\n        \"refund_detailed\": true,\n        \"extended\": false,\n        \"frequency\": {\n            \"hour\": 0,\n            \"type\": \"monthly\",\n            \"value\": 1\n        }\n    }';\n$response = Requests::put('https://api.mercadopago.com/v1/account/settlement_report/config', $headers, $data);\n```\n\nLANGUAGE: Java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report/config\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"PUT\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nconnection.setDoOutput(true);\n\nString body = \"{\n                    \\\"file_name_prefix\\\": \\\"settlement-report-USER_ID\\\",\n                    \\\"show_fee_prevision\\\": false,\n                    \\\"show_chargeback_cancel\\\": true,\n                    \\\"detailed\\\": true,\n                    \\\"coupon_detailed\\\": true,\n                    \\\"shipping_detail\\\": true,\n                    \\\"refund_detailed\\\": true,\n                    \\\"extended\\\": false,\n                    \\\"frequency\\\": {\n                        \\\"hour\\\": 0,\n                        \\\"type\\\": \\\"monthly\\\",\n                        \\\"value\\\": 1\n                    }\n            }\";\n\ntry(OutputStream os = connection.getOutputStream()) {\n    byte[] input = body.getBytes(\"utf-8\");\n    os.write(input, 0, input.length);\n}\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: Python\nCODE:\n```\nimport requests\n\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\ndata = '{\n            \"file_name_prefix\": \"settlement-report-USER_ID\",\n            \"show_fee_prevision\": false,\n            \"show_chargeback_cancel\": true,\n            \"detailed\": true,\n            \"coupon_detailed\": true,\n            \"shipping_detail\": true,\n            \"refund_detailed\": true,\n            \"extended\": false,\n            \"frequency\": {\n                \"hour\": 0,\n                \"type\": \"monthly\",\n                \"value\": 1\n            }\n        }'\n\nresponse = requests.put('https://api.mercadopago.com/v1/account/settlement_report/config', headers=headers, data=data)\n```\n\nLANGUAGE: Node.js\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar dataString = '{\n        \"file_name_prefix\": \"settlement-report-USER_ID\",\n        \"show_fee_prevision\": false,\n        \"show_chargeback_cancel\": true,\n        \"detailed\": true,\n        \"coupon_detailed\": true,\n        \"shipping_detail\": true,\n        \"refund_detailed\": true,\n        \"extended\": false,\n        \"frequency\": {\n            \"hour\": 0,\n            \"type\": \"monthly\",\n            \"value\": 1\n        }\n    }';\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report/config',\n    method: 'PUT',\n    headers: headers,\n    body: dataString\n};\n\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\n\nrequest(options, callback);\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"file_name_prefix\": \"settlement-report-USER_ID\",\n    \"show_fee_prevision\": false,\n    \"show_chargeback_cancel\": true,\n    \"detailed\": true,\n    \"scheduled\": false,\n    \"coupon_detailed\": true,\n    \"shipping_detail\": true,\n    \"refund_detailed\": true,\n    \"extended\": false,\n    \"frequency\": {\n        \"hour\": 0,\n        \"type\": \"monthly\",\n        \"value\": 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Preference for Installments without Card in Ruby\nDESCRIPTION: Ruby code snippet for creating a preference object with Mercado Pago SDK to enable installment payments without a card. It sets up an item and specifies the purpose as 'onboarding_credits'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/installments-without-card.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n# Create a preference object\npreference_data = {\nitems: [\n{\ntitle: 'My product',\nunit_price: 100,\nquantity: 1\n}\n],\npurpose: 'onboarding_credits'\n}\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Encryption Model for Newland MLB Devices (3DES ECB)\nDESCRIPTION: Demonstrates the encryption process for Newland MLB devices using 3DES with ECB mode. It shows how to extract card-present data such as PAN, expiration date, cardholder information, and track1 data using a derived key and KSN.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/secure_payments/responses.es.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Ejemplo |\n|---|\n| PoiType = NEWLAND_MLB_1234 | \n| Track1 = 59BF2A2DA3D02BB6491BF8756B47D05397D3B3E95F13F4F1EC63C1F6A33E0C86493F91D1358C0D7216AC5703D89CC2EB299950B3A3D69D8C1BA38F0A714809F8A8A821D54CC2ADFB | \n| KSN = FFFFF010010000E00016 |\n\n| Resultado |\n|---|\n| PAN = 7657773111126363 |\n| Fecha expiracion = 07/2022 |\n| Titular de la tarjeta = KREIFF DE MENTIRA |\n| Track1 = B7657773111126363^KREIFF/ |\n| DEMENTIRA^2207201000000100000000950000000|\n```\n\n----------------------------------------\n\nTITLE: Agregando Dependencia del SDK de Dispositivos en iOS\nDESCRIPTION: Código para agregar la dependencia MercadoPagoDevicesSDK en el archivo Podfile de una aplicación iOS, necesario para implementar la captura de información del dispositivo.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.es.md#2025-04-18_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nuse_frameworks!\npod 'MercadoPagoDevicesSDK'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer Details in Mercado Pago Java SDK\nDESCRIPTION: Demonstrates how to retrieve a customer's complete information using their unique customer ID with the CustomerClient's get method in the Mercado Pago Java SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/customers.en.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nCustomerClient customerClient = new CustomerClient();\n\nString customerId = \"247711297-jxOV430go9fx2e\";\ncustomerClient.get(customerId);\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Payment with Mercado Pago SDK\nDESCRIPTION: Code examples showing how to create a Boleto Bancário payment across different programming languages using Mercado Pago's SDK. Includes required parameters like transaction amount, payer information, and payment method configuration with idempotency key handling.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mlb.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\Client\\Common\\RequestOptions;\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['transactionAmount'],\n    \"token\" => $_POST['token'],\n    \"description\" => $_POST['description'],\n    \"installments\" => $_POST['installments'],\n    \"payment_method_id\" => $_POST['paymentMethodId'],\n    \"issuer_id\" => $_POST['issuer'],\n    \"payer\" => [\n      \"email\" => $_POST['email'],\n      \"first_name\" => $_POST['payerFirstName'],\n      \"last_name\" => $_POST['payerLastName'],\n      \"identification\" => [\n        \"type\" => $_POST['identificationType'],\n        \"number\" => $_POST['number']\n      ]\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nimport { Payment, MercadoPagoConfig } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\n\npayment.create({\n    body: { \n        transaction_amount: req.transaction_amount,\n        token: req.token,\n        description: req.description,\n        installments: req.installments,\n        payment_method_id: req.paymentMethodId,\n        issuer_id: req.issuer,\n            payer: {\n            email: req.email,\n            identification: {\n        type: req.identificationType,\n        number: req.number\n    }}},\n    requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n.then((result) => console.log(result))\n.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK\nDESCRIPTION: Code snippets for initializing the Mercado Pago SDK with access tokens in different programming languages. This step is required before creating preferences.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-checkout.en.md#2025-04-18_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// Mercado Pago SDK\nrequire __DIR__ .  '/vendor/autoload.php';\n// Add Your credentials\nMercadoPago\\SDK::setAccessToken('PROD_ACCESS_TOKEN');\n?>\n```\n\nLANGUAGE: Node.js\nCODE:\n```\n// Mercado Pago SDK\nimport { MercadoPagoConfig } from 'mercadopago';\n// Add Your credentials\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\n```\n\nLANGUAGE: Java\nCODE:\n```\n// Mercado Pago SDK\nimport com.mercadopago.MercadoPagoConfig;\n// Add Your credentials\nMercadoPagoConfig.setAccessToken(\"PROD_ACCESS_TOKEN\");\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n# Mercado Pago SDK\nrequire 'mercadopago'\n# Add Your credentials\nsdk = Mercadopago::SDK.new('PROD_ACCESS_TOKEN')\n```\n\nLANGUAGE: C#\nCODE:\n```\n// Mercado Pago SDK\n using MercadoPago.Config;\n // Add Your credentials\nMercadoPagoConfig.AccessToken = \"PROD_ACCESS_TOKEN\";\n```\n\nLANGUAGE: Python\nCODE:\n```\n# Mercado Pago SDK\nimport mercadopago\n# Add Your credentials\nsdk = mercadopago.SDK(\"PROD_ACCESS_TOKEN\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago Card Form (MLM)\nDESCRIPTION: This JavaScript code snippet initializes the Mercado Pago card form with specific configurations for the MLM region. It defines the form's structure, including the ID and placeholder for each input field (card number, expiration date, etc.). The `onSubmit` callback captures the card form data, including the token, and sends it to the `/process_payment` endpoint for payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.es.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n\n    const cardForm = mp.cardForm({\n      amount: \"100.5\",\n      iframe: true,\n      form: {\n        id: \"form-checkout\",\n        cardNumber: {\n          id: \"form-checkout__cardNumber\",\n          placeholder: \"Numero de tarjeta\",\n        },\n        expirationDate: {\n          id: \"form-checkout__expirationDate\",\n          placeholder: \"MM/YY\",\n        },\n        securityCode: {\n          id: \"form-checkout__securityCode\",\n          placeholder: \"Código de seguridad\",\n        },\n        cardholderName: {\n          id: \"form-checkout__cardholderName\",\n          placeholder: \"Titular de la tarjeta\",\n        },\n        issuer: {\n          id: \"form-checkout__issuer\",\n          placeholder: \"Banco emisor\",\n        },\n        installments: {\n          id: \"form-checkout__installments\",\n          placeholder: \"Cuotas\",\n        },        \n        cardholderEmail: {\n          id: \"form-checkout__cardholderEmail\",\n          placeholder: \"E-mail\",\n        },\n      },\n      callbacks: {\n        onFormMounted: error => {\n          if (error) return console.warn(\"Form Mounted handling error: \", error);\n          console.log(\"Form mounted\");\n        },\n        onSubmit: event => {\n          event.preventDefault();\n\n          const {\n            paymentMethodId: payment_method_id,\n            issuerId: issuer_id,\n            cardholderEmail: email,\n            amount,\n            token,\n            installments,\n            identificationNumber,\n            identificationType,\n          } = cardForm.getCardFormData();\n\n          fetch(\"/process_payment\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              token,\n              issuer_id,\n              payment_method_id,\n              transaction_amount: Number(amount),\n              installments: Number(installments),\n              description: \"Descripción del producto\",\n              payer: {\n                email,\n                identification: {\n                  type: identificationType,\n                  number: identificationNumber,\n                },\n              },\n            }),\n          });\n        },\n        onFetching: (resource) => {\n          console.log(\"Fetching resource: \", resource);\n\n          // Animate progress bar\n          const progressBar = document.querySelector(\".progress-bar\");\n          progressBar.removeAttribute(\"value\");\n\n          return () => {\n            progressBar.setAttribute(\"value\", \"0\");\n          };\n        }\n      },\n    });\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Existing Release Report Configuration with MercadoPago API\nDESCRIPTION: This code snippet demonstrates how to check the current release report configuration using the MercadoPago API. It sends a GET request to retrieve the existing settings including file name prefix, withdrawal options, timezone, frequency, and columns.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.en.md#2025-04-18_snippet_5\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/release_report/config' \\\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$response = Requests::get('https://api.mercadopago.com/v1/account/release_report/config', $headers);\n```\n\nLANGUAGE: java\nCODE:\n```\n URL url = new URL(\"https://api.mercadopago.com/v1/account/release_report/config\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"GET\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\nresponse = requests.get('https://api.mercadopago.com/v1/account/release_report/config', headers=headers)\n```\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/release_report/config',\n    headers: headers\n};\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment using cURL with MercadoPago API\nDESCRIPTION: This cURL command demonstrates how to capture a partial amount from a reserved payment using the MercadoPago API directly. It sends a PUT request to update the payment with the new transaction amount and capture flag.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.en.md#2025-04-18_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n'https://api.mercadopago.com/v1/payments/PAYMENT_ID' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n-H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n-d '{\n\"transaction_amount\": 75,\n\"capture\": true\n}'\n```\n\n----------------------------------------\n\nTITLE: Changing the script import V1\nDESCRIPTION: Shows how the script import should be made when using SDK V1\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script\n   src=\"https://secure.mlstatic.com/sdk/javascript/v1/mercadopago.js\"></script>\n\n```\n\n----------------------------------------\n\nTITLE: Creating Customer and Card via MercadoPago API with cURL\nDESCRIPTION: The cURL command exemplifies the process of creating a card associated with a customer in MercadoPago. It uses an HTTP POST request with a specified access token and JSON body to detail the card information linked to a customer ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/create-customer-and-card.en.md#2025-04-18_snippet_7\n\nLANGUAGE: cURL\nCODE:\n```\ncurl -X POST \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n'https://api.mercadopago.com/v1/customers/CUSTOMER_ID/cards' \\\n-d '{\"token\": \"9b2d63e00d66a8c721607214cedaecda\", \"payment_method_id\": \"visa\"}'\n\n```\n\n----------------------------------------\n\nTITLE: Sending Money Out Transaction Request with cURL - Chile Example\nDESCRIPTION: This cURL command demonstrates how to send a POST request to the MercadoPago API for money out transactions in Chile. It specifies headers such as X-Idempotency-Key, X-Signature for production environments, and transaction details including external reference, point of interaction type, and account information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.en.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    'https://api.mercadopago.com/v1/transaction-intents/process'\\\n    -H 'Content-Type: application/json' \\\n       -H 'X-Idempotency-Key: {{idempotency_key}}' \\\n       -H 'x-Signature: true' \\\n       -H 'x-enforce-signature: false' \\\n       -H 'Authorization: Bearer TEST-7719*********832-03141*********ec9309854*********f1e54b5-1*********' \\\n    -d '{\n  \"external_reference\": \"MP0001\",\n  \"point_of_interaction\": \"{\"type\":\"PSP_TRANSFER\"}\",\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://exemplo.cl/notification\"\n    }\n  },\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": 100\n        }\n      ]\n    },\n    \"to\": {\n      \"accounts\": [\n        {\n          \"amount\": 100,\n          \"bank_id\": \"99999004\",\n          \"type\": \"current\",\n          \"number\": \"10266732\",\n          \"owner\": {\n            \"identification\": {\n              \"type\": \"RUT\",\n              \"number\": \"111111111111\"\n            }\n          }\n        }\n      ]\n    },\n    \"total_amount\": 100\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with 3DS in Mercado Pago Java SDK\nDESCRIPTION: This Java code snippet illustrates the process of creating a payment in Mercado Pago with 3DS data. Prerequisites include MercadoPago SDK with an access token configured. Parameters like transaction amount, token, and payment method data must be accurately populated for the request to be successful.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-external-mpi.en.md#2025-04-18_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders).build();\nMercadoPagoConfig.setAccessToken(\"<ENV_ACCESS_TOKEN>\");\n\n    PaymentClient client = new PaymentClient();\n    PaymentAuthenticationRequest authentication = \nPaymentAuthenticationRequest.builder()\n        .type(\"external_threeds\")\n        .cryptogram(\"<<String>>\")\n        .threeDsServerTransId(\"<<String>>\")\n        .eci(\"<<String>>\")\n        .dsTransId(\"<<String>>\")\n        .acsTransId(\"<<String>>\")\n        .threeDsVersion(\"<<String>>\")\n        .authenticationStatus(\"<<String>>\")\n        .build();\nPaymentDataRequest data = PaymentDataRequest.builder()\n        .authentication(authentication).build();\nPaymentMethodRequest paymentMethod = PaymentMethodRequest\n        .builder().data(data).type(\"credit_card\").build();\n\nPaymentCreateRequest createRequest =\n    PaymentCreateRequest.builder()\n        .transactionAmount(new BigDecimal(<TRANSACTION_AMOUNT>))\n        .token(\"<CARD_TOKEN>\")\n        .description(\"<DESCRIPTION>\")\n        .installments(<INSTALLLMENTS_NUMBER>)\n        .paymentMethodId(\"<PAYMENT_METHOD_ID>\")\n        .payer(PaymentPayerRequest.builder().email(\"<BUYER_EMAIL>\")\n             .build())\n        .paymentMethod(paymentMethod)\n        .build();\n\nclient.create(createRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Closing WebView in Mini App\nDESCRIPTION: Command to close the JavaScript landing page WebView without additional parameters\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/comunication-commands.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"method\": 'close',\n    \"args\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Card Issuers API Response Format\nDESCRIPTION: Example JSON response from the card issuers API showing issuer details including ID, name, and thumbnail URLs.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/issuers.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t    \"id\": \"279\",\n\t    \"name\": \"Banco Galicia\",\n\t    \"secure_thumbnail\": \"https://www.mercadopago.com/org-img/MP3/API/logos/279.gif\",\n\t    \"thumbnail\": \"http://img.mlstatic.com/org-img/MP3/API/logos/279.gif\"\n\t},\n\t...\n]\n```\n\n----------------------------------------\n\nTITLE: Exchange Rate API Endpoint for Mercado Pago Cross Border\nDESCRIPTION: This snippet shows the API endpoint for retrieving the current exchange rate between USD and the local currency. The endpoint requires a public key and returns the conversion rate needed for Cross Border transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.en.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nhttps://api.mercadopago.com/v1/exchange_rates?from=USD&to=[FAKER][CURRENCY][ACRONYM]&public_key=<PUBLIC_KEY>\n```\n\n----------------------------------------\n\nTITLE: Creating Cash Payment with Mercado Pago SDKs\nDESCRIPTION: Examples of creating cash payments using different Mercado Pago SDKs. Each implementation includes payment creation with necessary parameters like transaction amount, description, payment method, and payer information. Requires access token and idempotency key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mlm.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\Client\\Common\\RequestOptions;\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['transactionAmount'],\n    \"token\" => $_POST['token'],\n    \"description\" => $_POST['description'],\n    \"installments\" => $_POST['installments'],\n    \"payment_method_id\" => $_POST['paymentMethodId'],\n    \"issuer_id\" => $_POST['issuer'],\n    \"payer\" => [\n      \"email\" => $_POST['email'],\n      \"first_name\" => $_POST['payerFirstName'],\n      \"last_name\" => $_POST['payerLastName'],\n      \"identification\" => [\n        \"type\" => $_POST['identificationType'],\n        \"number\" => $_POST['number']\n      ]\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n    \"transaction_amount\": 100,\n    \"description\": \"Título do produto\",\n    \"payment_method_id\": \"oxxo\",\n    \"payer\": {\n        \"email\": \"test@test.com\",\n    },\n    \"metadata\": {\n        \"payment_point\": \"oxxo\",\n    }\n}\n \npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Back URLs and Auto Return in Ruby\nDESCRIPTION: This Ruby snippet demonstrates setting the `back_urls` and `auto_return` within a `preference_data` hash. It defines URLs for success, failure, and pending scenarios, along with enabling automatic return for approved payments. A Mercado Pago Ruby SDK is assumed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\n# ...\npreference_data = {\n  # ...\n  back_urls = {\n    success: 'https://www.tu-sitio/success',\n    failure: 'https://www.tu-sitio/failure',\n    pending: 'https://www.tu-sitio/pendings'\n  },\n  auto_return: 'approved'\n  # ...\n}\n# ...\n\n```\n\n----------------------------------------\n\nTITLE: Fraud Alert Notification Example in JSON\nDESCRIPTION: Example of a Webhooks notification sent when a fraud alert is detected. It includes details about the order and payment that triggered the alert, requiring action to cancel the order.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/notification-additional-info.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"action\": \"Created\",\n    \"api_version\": \"v1\",\n    \"data\": {\n        \"description\": \"desc\",\n        \"merchant_order\": 249940988000,\n        \"payment_id\": 58980959081,\n        \"site_id\": \"MLA\"\n    },\n    \"date_created\": \"2022-07-23T23:03:5704:00\",\n    \"id\": \"58980959081\",\n    \"live_mode\": true,\n    \"type\": \"stop_delivery_op_wh\",\n    \"user_id\": 224403329,\n    \"version\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Card Fields\nDESCRIPTION: JavaScript code for initializing secure card input fields using MercadoPago's field creation API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst cardNumberElement = mp.fields.create('cardNumber', {\n      placeholder: \"Número do cartão\"\n    }).mount('form-checkout__cardNumber');\n    const expirationDateElement = mp.fields.create('expirationDate', {\n      placeholder: \"MM/YY\",\n    }).mount('form-checkout__expirationDate');\n    const securityCodeElement = mp.fields.create('securityCode', {\n      placeholder: \"Código de segurança\"\n    }).mount('form-checkout__securityCode');\n```\n\n----------------------------------------\n\nTITLE: Handling Deep Links in SwiftUI\nDESCRIPTION: Shows how to handle deep links in a SwiftUI application. When a deep link is received, it closes the existing SFSafariViewController and presents a new view, demonstrating smooth in-app navigation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/swift.en.md#2025-04-18_snippet_4\n\nLANGUAGE: SwiftUI\nCODE:\n```\nstruct ContentView: View {\n    @State private var showSuccessView = false\n    \n    var body: some View {\n        VStack {\n            Text(\"SwiftUI\")\n                .font(.system(size: 36, design: .rounded).weight(.bold)).foregroundColor(.black).padding(.bottom, 8)\n            Text(\"POC\")\n                .font(.system(size: 24, design: .rounded)).foregroundColor(.gray).padding(.bottom)\n            Button(\"Abrir Safari\") {\n                if let url = URL(string: \"YOUR-URL-PREFERENCE\") {\n                    UIApplication.shared.windows.first?.rootViewController?.present(UIHostingController(rootView: SafariView(url: url)), animated: true, completion: nil)\n                    }\n                }.padding(.bottom)\n            Button(\"Abrir Congrat\") {\n                showSuccessView = true\n            }\n        }\n        .sheet(isPresented: $showSuccessView) {\n            SuccessView(isPresented: $showSuccessView)\n        }\n        \n        \n// Here the deep link reception\n\n.onOpenURL { url in\n            if let components = URLComponents(url: url, resolvingAgainstBaseURL: false),\n               components.scheme == \"iosapp\",\n               components.host == \"congrat\",\n               components.path.contains(\"success\") {\n                \n                DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {\n                    if let presenting = UIApplication.shared.windows.first?.rootViewController?.presentedViewController {\n                        presenting.dismiss(animated: true, completion: nil)\n                        showSuccessView = true\n                    }\n                }\n            }\n        }\n        .padding()\n    }\n}\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Associating Google Ads with Payment Preference in Python\nDESCRIPTION: This snippet involves adding Google Ads tracking to the payment preference in Python. It requires the conversion ID and label to be specified for the Google Ads integration. The function creates a preference that includes this tracking information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/preferences.es.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n===\nAgrega el código en la preferencia y reemplaza los valores <code>CONVERSION_ID</code> y <code>CONVERSION_LABEL</code> por los datos de tu _tag_.\n===\n# Asocia tu tag\npreference_data = {\n    # ...\n    \"tracks\": [\n        {\n            \"type\": \"google_ad\",\n            \"values\": {\n                \"conversion_id\": \"CONVERSION_ID\",\n                \"conversion_label\": \"CONVERSION_LABEL\"\n            }\n        }\n    ]\n}\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Creación de pago con API de Mercado Pago\nDESCRIPTION: Petición POST a la API de Mercado Pago para crear un pago utilizando el token generado previamente. Incluye datos del comprador, ítem, detalles adicionales y configuraciones de moneda.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.es.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n$ curl https://api.mercadopago.com/v1/payments \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer <ACCESS_TOKEN>' \\\n  -d '\n  {\n\t\"transaction_amount\": 100,\n\t\"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n\t\"description\": \"Title of what you are paying for\",\n\t\"installments\": 1,\n\t\"payment_method_id\": \"visa\",\n\t\"payer\": {\n\t\t\"email\": \"test_user_33759716@testuser.com\"\n\t},\n\t\"external_reference\": \"Reference_1234\",\n\t\"metadata\": {\n\t\t\"key1\": \"value1\",\n\t\t\"key2\": \"value2\"\n\t},\n\t\"notification_url\": \"https://www.your-site.com/webhooks\",\n\t\"additional_info\": {\n\t\t\"items\": [\n\t\t\t{\n\t\t\t\t\"id\": \"item-ID-1234\",\n\t\t\t\t\"title\": \"Title of what you are paying for\",\n\t\t\t\t\"picture_url\": \"https://www.mercadopago.com/org-img/MP3/home/logomp3.gif\",\n\t\t\t\t\"description\": \"Item description\",\n\t\t\t\t\"category_id\": \"others\",\n\t\t\t\t\"quantity\": 1,\n\t\t\t\t\"unit_price\": 100\n\t\t\t}\n\t\t],\n\t\t\"payer\": {\n\t\t\t\"first_name\": \"user-name\",\n\t\t\t\"last_name\": \"user-surname\",\n\t\t\t\"phone\": {\n\t\t\t\t\"area_code\": \"11\",\n\t\t\t\t\"number\": \"4444-4444\"\n\t\t\t},\n\t\t\t\"address\": {\n\t\t\t\t\"street_name\": \"Street\",\n\t\t\t\t\"street_number\": 123,\n\t\t\t\t\"zip_code\": \"5700\"\n\t\t\t}\n\t\t},\n\t\t\"shipments\": {\n\t\t\t\"receiver_address\": {\n\t\t\t\t\"zip_code\": \"5700\",\n\t\t\t\t\"street_name\": \"Street\",\n\t\t\t\t\"street_number\": 123,\n\t\t\t\t\"floor\": 4,\n\t\t\t\t\"apartment\": \"C\"\n\t\t\t}\n\t\t}\n\t},\n\t\"counter_currency\": {\n\t\t\"currency_id\": \"USD\"\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Preference for Onboarding Credits with Ruby\nDESCRIPTION: This Ruby snippet demonstrates creating a Mercado Pago preference for onboarding credits.  It initializes the MercadoPago SDK, defines a preference with an item and sets `purpose` to `onboarding_credits`. It then creates the preference and extracts the ID to be used in HTML. This setup enables payment in installments without a credit card.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n# Crea un objeto de preferencia\npreference_data = {\n  items: [\n    {\n      title: 'Mi producto',\n      unit_price: 100,\n      quantity: 1\n    }\n  ],\n  purpose: 'onboarding_credits'\n}\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n\n# Este valor substituirá a la string \"<%= @preference_id %>\" en tu HTML\n@preference_id = preference['id']\n```\n\n----------------------------------------\n\nTITLE: Payment Response Example\nDESCRIPTION: This JSON snippet shows an example of a payment response when a 3DS challenge is required. The `external_resource_url` and `creq` fields are used to create the iframe and initiate the challenge.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 52044997115,\n    ...\n    \"status\": \"pending\",\n    \"status_detail\": \"pending_challenge\",\n    ...\n    \"three_ds_info\":\n    {\n        \"external_resource_url\": \"https://acs-public.tp.mastercard.com/api/v1/browser_Challenges\",\n        \"creq\": \"eyJ0aHJlZURTU2VydmVyVHJhbnNJRCI6ImJmYTVhZjI0LTliMzAtNGY1Yi05MzQwLWJkZTc1ZjExMGM1MCIsImFjc1RyYW5zSUQiOiI3MDAwYTI2YS1jYWQ1LTQ2NjQtOTM0OC01YmRlZjUwM2JlOWYiLCJjaGFsbGVuZ2VXaW5kb3dTaXplIjoiMDQiLCJtZXNzYWdlVHlwZSI6IkNSZXEiLCJtZXNzYWdlVmVyc2lvbiI6IjIuMS4wIn0\"\n    },\n    \"owner\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Payment Preference with MercadoPago Node.js SDK\nDESCRIPTION: This code shows how to update an existing payment preference by ID using MercadoPago's Node.js SDK. It initializes a client with an access token and updates the preference with new item details, including ID, title, quantity, and price.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/preferences.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token', options: { timeout: 5000 } });\n\nconst preference = new Preference(client);\n\npreference.update({\n\tid: '123456789',\n\tupdatePreferenceRequest: {\n\t\titems: [\n\t\t\t{\n\t\t\t\tid: '1234',\n\t\t\t\ttitle: 'Dummy Title',\n\t\t\t\tquantity: 1,\n\t\t\t\tunit_price: 100\n\t\t\t}\n\t\t],\n\t}\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Installation Success Output\nDESCRIPTION: Example output showing successful installation of an Android application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/how-to-install-android-macos-windows.en.md#2025-04-18_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\nPerforming Streamed Installed\nSuccess\n```\n\n----------------------------------------\n\nTITLE: Printing Custom Actions on Mercado Pago Point Terminal\nDESCRIPTION: Endpoint for creating print actions including electronic tax documents, receipts, and custom images on Point terminals\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/migrate-via-api.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /impressions_dte\n```\n\n----------------------------------------\n\nTITLE: MLB Payment Brick Configuration\nDESCRIPTION: Configuration for Brazil (MLB) region implementing Payment Brick with support for tickets, bank transfers, credit cards, prepaid cards, debit cards, and Mercado Pago payments. Includes initialization settings, payment method customization, and callback handlers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/default-rendering.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nconst renderPaymentBrick = async (bricksBuilder) => {\n const settings = {\n   initialization: {\n     amount: 100,\n     preferenceId: \"<PREFERENCE_ID>\",\n   },\n   customization: {\n     paymentMethods: {\n       ticket: \"all\",\n       bankTransfer: \"all\",\n       creditCard: \"all\",\n       prepaidCard: \"all\",\n       debitCard: \"all\",\n       mercadoPago: \"all\",\n     },\n   },\n   callbacks: {\n     onReady: () => {},\n     onSubmit: ({ selectedPaymentMethod, formData }) => {\n       return new Promise((resolve, reject) => {\n         fetch(\"/process_payment\", {\n           method: \"POST\",\n           headers: {\n             \"Content-Type\": \"application/json\",\n           },\n           body: JSON.stringify(formData),\n         })\n           .then((response) => response.json())\n           .then((response) => {\n             resolve();\n           })\n           .catch((error) => {\n             reject();\n           });\n       });\n     },\n     onError: (error) => {\n       console.error(error);\n     },\n   },\n };\n window.paymentBrickController = await bricksBuilder.create(\n   \"payment\",\n   \"paymentBrick_container\",\n   settings\n );\n};\nrenderPaymentBrick(bricksBuilder);\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst initialization = {\n amount: 100,\n preferenceId: \"<PREFERENCE_ID>\",\n};\nconst customization = {\n paymentMethods: {\n   ticket: \"all\",\n   bankTransfer: \"all\",\n   creditCard: \"all\",\n   prepaidCard: \"all\",\n   debitCard: \"all\",\n   mercadoPago: \"all\",\n },\n};\nconst onSubmit = async (\n { selectedPaymentMethod, formData }\n) => {\n return new Promise((resolve, reject) => {\n   fetch(\"/process_payment\", {\n     method: \"POST\",\n     headers: {\n       \"Content-Type\": \"application/json\",\n     },\n     body: JSON.stringify(formData),\n   })\n     .then((response) => response.json())\n     .then((response) => {\n       resolve();\n     })\n     .catch((error) => {\n       reject();\n     });\n });\n};\nconst onError = async (error) => {\n console.log(error);\n};\nconst onReady = async () => {};\n```\n\n----------------------------------------\n\nTITLE: Processing Bank Withdrawal - Alternative Request 2\nDESCRIPTION: This snippet demonstrates yet another configuration for a bank withdrawal request with a different external reference, highlighting the flexibility in handling transactions through the Mercado Pago API. The request structure remains consistent while providing different transaction details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-test.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\n  --url https://api.mercadopago.com/v1/transaction-intents/process \\n  --header 'Authorization: Bearer TEST-6133*********794-11121*********edd13abd8*********82868e9-1*********' \\n  --header 'content-type: application/json' \\n  --header 'x-enforce-signature: false' \\n  --data '{\\n  \"external_reference\": \"12345\",\\n  \"point_of_interaction\": {\\n    \"type\": \"PSP_TRANSFER\"\\n  },\\n  \"seller_configuration\": {\\n    \"notification_info\": {\\n      \"notification_url\": \"http://example.mx/notification\"\\n    }\\n  },\\n  \"transaction\": {\\n    \"from\": {\\n      \"accounts\": [\\n        {\\n          \"amount\": 25\\n        }\\n      ]\\n    },\\n    \"to\": {\\n      \"total_amount\": 25,\\n      \"accounts\": [\\n        {\\n          \"amount\": 25,\\n          \"bank_id\": \"646\",\\n          \"number\": \"646180110400000007\",\\n          \"holder\": \"JUAN JOSE MARIA\",\\n          \"type\": \"savings_account\",\\n          \"description\": \"envio de 25\"\\n        }\\n      ]\\n    },\\n    \"total_amount\": 25\\n  }\\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Input Field for Device ID\nDESCRIPTION: This snippet shows how to create a hidden HTML input field to store the Device ID.  The `id` attribute is set to `deviceId`, allowing you to easily retrieve the Device ID value using JavaScript.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/device-id.es.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n  <input type=\"hidden\" id=\"deviceId\">\n```\n\n----------------------------------------\n\nTITLE: PSE Payment Response JSON Example\nDESCRIPTION: Sample JSON response for a PSE bank transfer payment, demonstrating key transaction details, status, and external resource URL for payment completion\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-migrate-pse.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1312147735,\n    \"operation_type\": \"regular_payment\",\n    \"payment_method_id\": \"pse\",\n    \"payment_type_id\": \"bank_transfer\",\n    \"payment_method\": {\n        \"id\": \"pse\",\n        \"type\": \"bank_transfer\"\n    },\n    \"status\": \"pending\",\n    \"status_detail\": \"pending_waiting_transfer\",\n    \"description\": \"Título del producto\",\n    \"callback_url\": \"http://www.your-site.com\",\n    \"installments\": 1,\n    \"transaction_details\": {\n        \"total_paid_amount\": 5000,\n        \"external_resource_url\": \"https://www.mercadopago.com.co/sandbox/payments/1312147735/bank_transfer?caller_id=1148920820&hash=f41dd14f-b3a6-4ac4-9b78-5cfeb5a35e77\",\n        \"financial_institution\": \"1009\",\n        \"bank_transfer_id\": 129229,\n        \"transaction_id\": \"10022214\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating QR Data Response for Pix Key Configuration - JSON\nDESCRIPTION: This snippet showcases how the `qr_data` structure looks when a Pix Key is configured in the Mercado Pago account. The response includes Pix-related data, which is necessary for processing Pix payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/qr-dynamic-integration.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"qr_data\": \"00020101021226940014BR.GOV.BCB.PIX2572pix-qr.mercadopago.com/instore/o/v2/fdf9ece0-6137-4e1e-a49d-94f55ec9eee25204000053039865802BR5925FELIPE AAAAAA AAAAA 6009SAO PAULO62070503***6304B61D\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Printer in Android POS\nDESCRIPTION: Code demonstrates how to initialize a printer instance, check its status, and print text using the Demo App RDC. It includes error handling and status checking before printing operations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-print-receipts.en.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nPrinter printer = Printer.getInstance(); \nprinter.init(); \nint status = printer.getPrinterStatus(); \nif (status == 0) { \n    printer.printTaggedText(\"TEXTO A IMPRIMIR\", \"iso-8859-1\"); \n} else{ \n    Log.e(TAG_IMPRESION, \"La impresora presenta el siguiente inconveniente: \" +  statusCode2Str(status); \n} \nprinter.start();  \n\n```\n\n----------------------------------------\n\nTITLE: Capturing Device Information in Swift\nDESCRIPTION: These methods show different ways to capture device information using the MercadoPagoDevicesSDK in Swift.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nMercadoPagoDevicesSDK.shared.getInfo() // Returns a Device object that is Codable\nMercadoPagoDevicesSDK.shared.getInfoAsJson() // Returns a JSON object\nMercadoPagoDevicesSDK.shared.getInfoAsJsonString() // Returns the JSON as a String\nMercadoPagoDevicesSDK.shared.getInfoAsDictionary() // Returns a Dictionary<String,Any> object\n```\n\n----------------------------------------\n\nTITLE: Canceling Refund Intent via API (curl)\nDESCRIPTION: This curl command shows how to cancel a refund intent assigned to a Point device. It can only be used if the intent status is open and hasn't been sent to the device.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/refund-processing.en.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request DELETE 'https://api.mercadopago.com/point/integration-api/devices/{deviceid}/refund/{intentid}' \\\n--h 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Registered Users Payment Preference\nDESCRIPTION: Example of how to configure payment acceptance only from registered Mercado Pago users by setting the purpose attribute to wallet_purchase.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"purpose\": \"wallet_purchase\",\n    \"items\": [\n        {\n            \"title\": \"Mi producto\",\n            \"quantity\": 1,\n            \"unit_price\": 75.76\n        }\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Installment Options with JavaScript\nDESCRIPTION: This function fetches available installment options from Mercado Pago based on the transaction amount and BIN. It populates a select element designated for installments with the received data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/secure-fields-core.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Step #getInstallments\nconst getInstallments = async (bin) => {\n    try {\n      const installmentsElement = document.getElementById('form-checkout__installments')\n      const installments = await mp.getInstallments({\n        amount: document.getElementById('transactionAmount').value,\n        bin,\n        paymentTypeId: 'credit_card'\n      });\n      createSelectOptions(installmentsElement, installments[0].payer_costs, { label: 'recommended_message', value: 'installments' })\n    } catch (e) {\n      console.error('error getting installments: ', e)\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Opening Fintoc Payment Widget\nDESCRIPTION: Implementation of the Fintoc widget opening function with required parameters including institution ID, username, widget token, and callback functions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-advanced.es.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function openFintoc() {\n  try {\n    await fintoc.open({\n      institutionId: <INSTITUTION_ID>,\n      username: <USERNAME>\n      widgetToken: <EXTERNAL_REFERENCE_ID>\n      onSuccess,\n      onExit,\n      onEvent,\n    })\n  } catch(e) {\n    console.error(e)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Payment Methods Table in Markdown\nDESCRIPTION: Markdown table displaying available payment methods across different Latin American countries. The table includes various payment categories like Cash in Account, ATM, Bank Transfer, Credit, Debit, Prepaid Card, and Payment Slip/Cash options for Argentina, Brazil, Chile, Colombia, Mexico, Peru, and Uruguay.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-methods.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Payment methods | 🇦🇷 <br> Argentina | 🇧🇷 <br> Brazil | 🇨🇱 <br>  Chile | 🇨🇴 <br>  Colombia | 🇲🇽 <br> Mexico | 🇵🇪 <br> Peru | 🇺🇾 <br> Uruguay |\n| :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n| Cash in Account | Mercado Pago | Mercado Pago | Mercado Pago | Mercado Pago | Mercado Pago | Mercado Pago | Mercado Pago |\n| ATM | - | - | - | - | Bancomer <br> Citibanamex <br> Santander | PagoEfectivo | - |\n| Bank Transfer | - | Pix | - | PSE | CLABE | Yape | - |\n| Credit | Visa <br> Mastercard <br> American Express <br> Diners Club <br> Naranja <br> Cabal <br> Tarjeta Shopping <br> Cencosud <br> Argencard <br> CMR | Visa <br> Mastercard <br> American Express <br> Hipercard <br> Elo | Visa <br> Mastercard <br> American Express <br> Magna <br> Presto | Visa <br> Mastercard <br> American Express <br> Diners Club <br> Codensa | Visa <br> Mastercard <br> American Express | Visa <br> Diners Club <br> Mastercard <br> American Express | Visa <br> Mastercard <br> Oca <br> American Express <br> Creditel <br> Líder |\n| Debit | Visa <br> Mastercard <br> Maestro <br> Cabal | CAIXA virtual debit card* <br> Elo* | Visa <br> Mastercard <br> RedCompra | Visa <br> Mastercard | Visa <br> Mastercard | Visa <br> Mastercard | Visa |\n| Prepaid Card | Visa <br> Mastercard  | Visa <br> Mastercard  | Visa <br> Mastercard  | Visa <br> Mastercard  | Visa <br> Mastercard <br> Mercado Pago   | Visa <br> Mastercard  | Visa <br> Mastercard  |\n| Payment Slip/Cash | Rapipago* <br> Pago Facil* | Boleto | - | Efecty | Oxxo <br> PayCash | - | Abitab <br> Red Pagos |\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Reserved Amount in MercadoPago - Curl\nDESCRIPTION: This Curl command demonstrates capturing a partial payment amount through MercadoPago's API, requiring a properly formatted payload and headers. It's tied to a specific reservation and must be executed on a system with 'curl' installed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/capture-authorized-payment.en.md#2025-04-18_snippet_13\n\nLANGUAGE: Curl\nCODE:\n```\ncurl -X PUT \\\n'https://api.mercadopago.com/v1/payments/PAYMENT_ID' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n-H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n-d '{\n\"transaction_amount\": 75,\n\"capture\": true\n}'\n```\n\n----------------------------------------\n\nTITLE: Successful order reservation response in JSON\nDESCRIPTION: This JSON response indicates that the payment is authorized and pending capture.  The `status` is `action_required` and `status_detail` is `waiting_capture`. The payment `id` and order `id` should be saved for subsequent capture or cancellation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/reserve-capture-cancel-amounts.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": ORDER_ID,\n  ...\n  \"status\": \"action_required\",\n  \"status_detail\": \"waiting_capture\",\n  ...\n  \"capture_mode\": \"manual\",\n  ...\n \"transactions\": {\n    \"payments\": [\n      {\n        \"id\": TRANSACTION_ID,\n        \"status\": \"action_required\",\n        \"status_detail\": \"waiting_capture\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Mercado Pago Security Script\nDESCRIPTION: Implementation of the security script for web pages to collect Device ID information. The script should be added to checkout and other relevant pages.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-chopro.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"home\"></script>\n```\n\n----------------------------------------\n\nTITLE: Adding a New Card Using MercadoPago with Node.js\nDESCRIPTION: This snippet shows how to use Node.js to add a new card to a customer's profile in Mercado Pago. It requires the MercadoPagoConfig module with a configured access token. After obtaining the customer's data, it creates a new card using a token, issuer ID, and payment method ID. Logs the result or error in the console.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.en.md#2025-04-18_snippet_16\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerClient = new Customer(client);\n\nconst customer = customerClient.get({ customerId: '<CUSTOMER_ID>' })\n\t.then((result) => {\n\n  const cardClient = new CustomerCard(client);\n\n  const body = {\n       token : result.token,\n       issuer_id: '2345',\n       payment_method: 'debit_card' \n  };\n\ncardClient.create({ customerId: customer, body: body })\n.then(console.log).catch(console.log);\n});\n```\n\n----------------------------------------\n\nTITLE: XML Structure for Chilean Electronic Tax Document (DTE)\nDESCRIPTION: Comprehensive XML template showing the structure of a Chilean electronic tax document (DTE) including header information, issuer and recipient details, product line items, totals, digital timestamp, and digital signatures with X509 certificates.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/annex-xml-for-printing.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<DTE version=\"1.0\" xmlns=\"http://www.sii.cl/SiiDte\">\n\t<Documento ID=\"F60T33\">\n\t\t<Encabezado>\n\t\t\t<IdDoc>\n\t\t\t\t<TipoDTE>33</TipoDTE>\n\t\t\t\t<Folio>60</Folio>\n\t\t\t\t<FchEmis>2003-10-13</FchEmis>\n\t\t\t</IdDoc>\n\t\t\t<Emisor>\n\t\t\t\t<RUTEmisor>97975000-5</RUTEmisor>\n\t\t\t\t<RznSoc>RUT DE PRUEBA</RznSoc>\n\t\t\t\t<GiroEmis>Insumos de Computacion</GiroEmis>\n\t\t\t\t<Acteco>31341</Acteco>\n\t\t\t\t<CdgSIISucur>1234</CdgSIISucur>\n\t\t\t\t<DirOrigen>Teatinos 120, Piso 4</DirOrigen>\n\t\t\t\t<CmnaOrigen>Santiago</CmnaOrigen>\n\t\t\t\t<CiudadOrigen>Santiago</CiudadOrigen>\n\t\t\t</Emisor>\n\t\t\t<Receptor>\n\t\t\t\t<RUTRecep>77777777-7</RUTRecep>\n\t\t\t\t<RznSocRecep>EMPRESA  LTDA</RznSocRecep>\n\t\t\t\t<GiroRecep>COMPUTACION</GiroRecep>\n\t\t\t\t<DirRecep>SAN DIEGO 2222</DirRecep>\n\t\t\t\t<CmnaRecep>LA FLORIDA</CmnaRecep>\n\t\t\t\t<CiudadRecep>SANTIAGO</CiudadRecep>\n\t\t\t</Receptor>\n\t\t\t<Totales>\n\t\t\t\t<MntNeto>100000</MntNeto>\n\t\t\t\t<TasaIVA>19</TasaIVA>\n\t\t\t\t<IVA>19000</IVA>\n\t\t\t\t<MntTotal>119000</MntTotal>\n\t\t\t</Totales>\n\t\t</Encabezado>\n\t\t<Detalle>\n\t\t\t<NroLinDet>1</NroLinDet>\n\t\t\t<CdgItem>\n\t\t\t\t<TpoCodigo>INT1</TpoCodigo>\n\t\t\t\t<VlrCodigo>011</VlrCodigo>\n\t\t\t</CdgItem>\n\t\t\t<NmbItem>Parlantes Multimedia 180W.</NmbItem>\n\t\t\t<DscItem/>\n\t\t\t<QtyItem>20</QtyItem>\n\t\t\t<PrcItem>4500</PrcItem>\n\t\t\t<MontoItem>90000</MontoItem>\n\t\t</Detalle>\n\t\t<Detalle>\n\t\t\t<NroLinDet>2</NroLinDet>\n\t\t\t<CdgItem>\n\t\t\t\t<TpoCodigo>INT1</TpoCodigo>\n\t\t\t\t<VlrCodigo>0231</VlrCodigo>\n\t\t\t</CdgItem>\n\t\t\t<NmbItem>Mouse Inalambrico PS/2</NmbItem>\n\t\t\t<DscItem/>\n\t\t\t<QtyItem>1</QtyItem>\n\t\t\t<PrcItem>5000</PrcItem>\n\t\t\t<MontoItem>5000</MontoItem>\n\t\t</Detalle>\n\t\t<Detalle>\n\t\t\t<NroLinDet>3</NroLinDet>\n\t\t\t<CdgItem>\n\t\t\t\t<TpoCodigo>INT1</TpoCodigo>\n\t\t\t\t<VlrCodigo>1515</VlrCodigo>\n\t\t\t</CdgItem>\n\t\t\t<NmbItem>Caja de Diskettes 10 Unidades</NmbItem>\n\t\t\t<DscItem/>\n\t\t\t<QtyItem>5</QtyItem>\n\t\t\t<PrcItem>1000</PrcItem>\n\t\t\t<MontoItem>5000</MontoItem>\n\t\t</Detalle>\n\t\t<TED version=\"1.0\">\n\t\t\t<DD>\n\t\t\t\t<RE>97975000-5</RE>\n\t\t\t\t<TD>33</TD>\n\t\t\t\t<F>60</F>\n\t\t\t\t<FE>2003-10-13</FE>\n\t\t\t\t<RR>77777777-7</RR>\n\t\t\t\t<RSR>EMPRESA  LTDA</RSR>\n\t\t\t\t<MNT>119000</MNT>\n\t\t\t\t<IT1>Parlantes Multimedia 180W.</IT1>\n\t\t\t\t<CAF version=\"1.0\">\n\t\t\t\t\t<DA>\n\t\t\t\t\t\t<RE>97975000-5</RE>\n\t\t\t\t\t\t<RS>RUT DE PRUEBA</RS>\n\t\t\t\t\t\t<TD>33</TD>\n\t\t\t\t\t\t<RNG>\n\t\t\t\t\t\t\t<D>1</D>\n\t\t\t\t\t\t\t<H>200</H>\n\t\t\t\t\t\t</RNG>\n\t\t\t\t\t\t<FA>2003-09-04</FA>\n\t\t\t\t\t\t<RSAPK>\n\t\t\t\t\t\t\t<M>0a4O6Kbx8Qj3K4iWSP4w7KneZYeJ+g/prihYtIEolKt3cykSxl1zO8vSXu397QhTmsX7SBEudTUx++2zDXBhZw==</M>\n\t\t\t\t\t\t\t<E>Aw==</E>\n\t\t\t\t\t\t</RSAPK>\n\t\t\t\t\t\t<IDK>100</IDK>\n\t\t\t\t\t</DA>\n\t\t\t\t\t<FRMA algoritmo=\"SHA1withRSA\">g1AQX0sy8NJugX52k2hTJEZAE9Cuul6pqYBdFxj1N17umW7zG/hAavCALKByHzdYAfZ3LhGTXCai5zNxOo4lDQ==</FRMA>\n\t\t\t\t</CAF>\n\t\t\t\t<TSTED>2003-10-13T09:33:20</TSTED>\n\t\t\t</DD>\n\t\t\t<FRMT algoritmo=\"SHA1withRSA\">GbmDcS9e/jVC2LsLIe1iRV12Bf6lxsILtbQiCkh6mbjckFCJ7fj/kakFTS06Jo8i\nS4HXvJj3oYZuey53Krniew==</FRMT>\n\t\t</TED>\n\t\t<TmstFirma>2003-10-13T09:33:20</TmstFirma>\n\t</Documento>\n<Signature xmlns=\"http://www.w3.org/2000/09/xmldsig#\">\n<SignedInfo>\n<CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"/>\n<SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/>\n<Reference URI=\"#F60T33\">\n<Transforms>\n<Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"/>\n</Transforms>\n<DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/>\n<DigestValue>hlmQtu/AyjUjTDhM3852wvRCr8w=</DigestValue>\n</Reference>\n</SignedInfo>\n<SignatureValue>JG1Ig0pvSIH85kIKGRZUjkyX6CNaY08Y94j4UegTgDe8+wl61GzqjdR1rfOK9BGn93AMOo6aiAgolW0k/XklNVtM/ZzpNNS3d/fYVa1q509mAMSXbelxSM3bjoa7H6Wzd/mV1PpQ8zK5gw7mgMMP4IKxHyS92G81GEguSmzcQmA=</SignatureValue>\n<KeyInfo>\n<KeyValue>\n<RSAKeyValue>\n<Modulus>\ntNEknkb1kHiD1OOAWlLKkcH/UP5UGa6V6MYso++JB+vYMg2OXFROAF7G8BNFFPQx\niuS/7y1azZljN2xq+bW3bAou1bW2ij7fxSXWTJYFZMAyndbLyGHM1e3nVmwpgEpx\nBHhZzPvwLb55st1wceuKjs2Ontb13J33sUb7bbJMWh0=\n</Modulus>\n<Exponent>\nAQAB\n</Exponent>\n</RSAKeyValue>\n</KeyValue>\n<X509Data>\n<X509Certificate>MIIEgjCCA+ugAwIBAgIEAQAApzANBgkqhkiG9w0BAQUFADCBtTELMAkGA1UEBhMC\nQ0wxHTAbBgNVBAgUFFJlZ2lvbiBNZXRyb3BvbGl0YW5hMREwDwYDVQQHFAhTYW50\naWFnbzEUMBIGA1UEChQLRS1DRVJUQ0hJTEUxIDAeBgNVBAsUF0F1dG9yaWRhZCBD\nZXJ0aWZpY2Fkb3JhMRcwFQYDVQQDFA5FLUNFUlRDSElMRSBDQTEjMCEGCSqGSIb3\nDQEJARYUZW1haWxAZS1jZXJ0Y2hpbGUuY2wwHhcNMDMxMDAxMTg1ODE1WhcNMDQw\nOTMwMDAwMDAwWjCBuDELMAkGA1UEBhMCQ0wxFjAUBgNVBAgUDU1ldHJvcG9saXRh\nbmExETAPBgNVBAcUCFNhbnRpYWdvMScwJQYDVQQKFB5TZXJ2aWNpbyBkZSBJbXB1\nZXN0b3MgSW50ZXJub3MxDzANBgNVBAsUBlBpc28gNDEjMCEGA1UEAxQaV2lsaWJh\nbGRvIEdvbnphbGV6IENhYnJlcmExHzAdBgkqhkiG9w0BCQEWEHdnb256YWxlekBz\naWkuY2wwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALxZlVh1xr9sKQIBDF/6\nVa+lsHQSG5AAmCWvtNTIOXN3E9EQCy7pOPHrDg6EusvoHyesZSKJbc0TnIFXZp78\nq7mbdHijzKqvMmyvwbdP7KK8LQfwf84W4v9O8MJeUHlbJGlo5nFACrPAeTtONbHa\nReyzeMDv2EganNEDJc9c+UNfAgMBAAGjggGYMIIBlDAjBgNVHREEHDAaoBgGCCsG\nAQQBwQEBoAwWCjA3ODgwNDQyLTQwCQYDVR0TBAIwADA8BgNVHR8ENTAzMDGgL6At\nhitodHRwOi8vY3JsLmUtY2VydGNoaWxlLmNsL2UtY2VydGNoaWxlY2EuY3JsMCMG\nA1UdEgQcMBqgGAYIKwYBBAHBAQKgDBYKOTY5MjgxODAtNTAfBgNVHSMEGDAWgBTg\nKP3S4GBPs0brGsz1CJEHcjodCDCB0AYDVR0gBIHIMIHFMIHCBggrBgEEAcNSBTCB\ntTAvBggrBgEFBQcCARYjaHR0cDovL3d3dy5lLWNlcnRjaGlsZS5jbC8yMDAwL0NQ\nUy8wgYEGCCsGAQUFBwICMHUac0VsIHRpdHVsYXIgaGEgc2lkbyB2YWxpZG8gZW4g\nZm9ybWEgcHJlc2VuY2lhbCwgcXVlZGFuZG8gZWwgQ2VydGlmaWNhZG8gcGFyYSB1\nc28gdHJpYnV0YXJpbywgcGFnb3MsIGNvbWVyY2lvIHkgb3Ryb3MwCwYDVR0PBAQD\nAgTwMA0GCSqGSIb3DQEBBQUAA4GBABMfCyJF0mNXcov8iEWvjGFyyPTsXwvsYbbk\nOJ41wjaGOFMCInb4WY0ngM8BsDV22bGMs8oLyX7rVy16bGA8Z7WDUtYhoOM7mqXw\n/Hrpqjh3JgAf8zqdzBdH/q6mAbdvq/yb04JHKWPC7fMFuBoeyVWAnhmuMZfReWQi\nMUEHGGIW</X509Certificate>\n</X509Data>\n</KeyInfo>\n</Signature></DTE>\n```\n\n----------------------------------------\n\nTITLE: Search Response Structure\nDESCRIPTION: Example JSON response showing the structure of search results including pagination information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/retrieving-payments.en.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"paging\": {\n    \"total\": 1234,\n    \"limit\": 30,\n    \"offset\": 0\n  },\n  \"results\": [\n    {}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling a MercadoPago Payment Reservation with cURL\nDESCRIPTION: This code snippet shows how to cancel a payment reservation in MercadoPago using cURL. It requires an access token and a payment ID. The request updates the payment status to 'cancelled' through the MercadoPago API endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/cancel-reserve.es.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PUT \\\n  'https://api.mercadopago.com/v1/payments/PAYMENT_ID' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n  -d '{\"status\": \"cancelled\"}'\n```\n\n----------------------------------------\n\nTITLE: Installing MercadoPago SDK using npm\nDESCRIPTION: This snippet shows how to install the MercadoPago JavaScript SDK using npm command. Before using MercadoPago's JavaScript functions, install the SDK in your project directory. The installation command requires npm to be pre-installed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.en.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n\n```\n\n----------------------------------------\n\nTITLE: Setting Wallet Purchase Purpose in JSON\nDESCRIPTION: This snippet shows how to set the 'purpose' attribute to 'wallet_purchase' in the payment preference JSON to accept payments only from registered users.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"purpose\": \"wallet_purchase\",\n    \"items\": [\n        {\n            \"title\": \"My product\",\n            \"quantity\": 1,\n            \"unit_price\": 75.76\n        }\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Generated SSH Public Key\nDESCRIPTION: This snippet shows an example of a generated SSH public key. It consists of three columns: the algorithm (ssh-rsa), the public key value, and the host/comment. This entire string should be shared with Mercado Pago for SFTP authentication setup.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/public-and-private-key.es.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nssh-rsa CCCCB3NzaC1yc2EAAAADAQABAAABgQDIuC0emFLk1nGC1MCmJDqHzJy9N3WGJFCrDY8EuhcrpCP+5R6X/LnVESwn291IR2B7cO6jZtv6v8OohdWl9nCfNndm5w9HRuujrbpPebADGbrG89srHCuQVLY8zg+/cvLk0yGGvsSkpCZsJDm74VHngkwxdnR3T0dfpHFG/JcFjeNPpCW4d9N9gfkpmclBpfB14VMLoQ2K2xwLbujaxra0p0EbEbc/eq1vdN+m2Ja7WyR1L+66Cp3NKw1+suFIlP2H58kn7988JZ4baenfwOv8qQZu6WqsyJTecSwDgBn6Jr7WbpKfq2+nARif96nip5rFwxKWkHs7pDGu2XniurzlGe7MQaRc/XLdeAewS1qkt9qS51b1hy816KvcBFC5zPOH2P3yFWTcEFDT3WUfJ0o1MQk22eAHuCSK1tjRdDCGoB5sCjYYGCPonIaRc85CRNi/5CpD0i+xmopW1gOK6Q7dZSj6kSaphK1WK47Mdn20Eeu+OADLqnWN/np2qWyK/68= user@host\n```\n\n----------------------------------------\n\nTITLE: Creating a Release Report via Mercado Pago API (Multiple Languages)\nDESCRIPTION: Sends a POST request to the Mercado Pago API to manually generate a new release report for a specific date range. Requires authorization token and date parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.es.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/release_report' \\\n    -d '{\n            \"begin_date\": \"2019-05-01T00:00:00Z\",\n            \"end_date\": \"2019-06-01T00:00:00Z\"\n    }'\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$data ='{\n            \"begin_date\": \"2019-05-01T00:00:00Z\",\n            \"end_date\": \"2019-06-01T00:00:00Z\"\n    }';\n\n$response = Requests::post(\"https://api.mercadopago.com/v1/account/release_report\", $headers, $data);\n```\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/release_report\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"POST\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\nconnection.setDoOutput(true);\n\nString body = \"{\\\"begin_date\\\":\\\"2019-05-01T00:00:00Z\\\",\\\"end_date\\\": \\\"2019-06-01T00:00:00Z\\\"}\";\n\ntry(OutputStream os = connection.getOutputStream()) {\n    byte[] input = body.getBytes(\"utf-8\");\n    os.write(input, 0, input.length);\n}\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\ndata = '{ \"begin_date\": \"2019-05-01T00:00:00Z\", \"end_date\": \"2019-06-01T00:00:00Z\" }'\n\nresponse = requests.post('https://api.mercadopago.com/v1/account/release_report', headers=headers, data=data)\n```\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = { \n    'accept': 'application/json', \n    'content-type': 'application/json', \n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar dataString = '{ \"begin_date\": \"2019-05-01T00:00:00Z\", \"end_date\": \"2019-06-01T00:00:00Z\" }';\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/release_report',\n    method: 'POST',\n    headers: headers,\n    body: dataString\n};\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Creating Fintoc Payment with MercadoPago Ruby SDK\nDESCRIPTION: Demonstrates creating a Fintoc payment using the MercadoPago Ruby SDK, including setting up the payment object and handling the API request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-advanced.en.md#2025-04-18_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_object = {\n  description: 'Product title',\n  payer: {\n    email: 'test_user_123@testuser.com',\n  },\n  payment_method_id: 'fintoc',\n  transaction_amount: 5000,\n  callback_url: 'https://www.your-site.com',\n  point_of_interaction: {\n   type: 'CHECKOUT',\n   sub_type: 'INTER_PSP'\n  }\n\n}\n\npayment_response = sdk.payment.create(payment_request, custom_request_options)\npayment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Successful Authenticated Payment\nDESCRIPTION: This snippet shows a sample JSON response for a successful authenticated payment. It includes details such as payment status, amount, payer information, and transaction details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-external-mpi.en.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"send_advice\": false,\n    \"id\": 69306088555,\n    \"date_created\": \"2023-12-26T18:04:10.711-04:00\",\n    \"date_approved\": \"2023-12-26T18:04:11.351-04:00\",\n    \"date_last_updated\": \"2023-12-26T18:04:11.351-04:00\",\n    \"money_release_date\": \"2023-12-26T18:04:11.351-04:00\",\n    \"collector_id\": 219830831,\n    \"operation_type\": \"regular_payment\",\n    \"issuer_id\": \"205\",\n    \"payment_method_id\": \"visa\",\n    \"payment_type_id\": \"credit_card\",\n    \"status\": \"approved\",\n    \"status_detail\": \"accredited\",\n    \"currency_id\": \"COP\",\n    \"description\": \"Payment test\",\n    \"live_mode\": true,\n    \"payer\": {\n        \"phone\": {},\n        \"id\": \"1608786725\",\n        \"email\": \"test_user_11653412@testuser.com\",\n        \"identification\": {\n            \"number\": \"123456767\",\n            \"type\": \"CC\"\n        }\n    },\n    \"order\": {},\n    \"transaction_amount\": 1234.56,\n    \"transaction_amount_refunded\": 0,\n    \"coupon_amount\": 0,\n    \"transaction_details\": {\n        \"acquirer_reference\": null,\n        \"external_resource_url\": null,\n        \"financial_institution\": null,\n        \"installment_amount\": 1234.56,\n        \"net_received_amount\": 234.17,\n        \"overpaid_amount\": 0,\n        \"payable_deferral_period\": null,\n        \"payment_method_reference_id\": null,\n        \"total_paid_amount\": 1234.56\n    },\n    \"fee_details\": [\n        {\n            \"type\": \"mercadopago_fee\",\n            \"fee_payer\": \"collector\",\n            \"amount\": 1000.39\n        }\n    ],\n    \"captured\": true,\n    \"binary_mode\": true,\n    \"statement_descriptor\": \"Mercadopago*fake\",\n    \"installments\": 1,\n    \"card\": {\n        \"first_six_digits\": \"401354\",\n        \"last_four_digits\": \"6260\",\n        \"expiration_month\": 11,\n        \"expiration_year\": 2025,\n        \"date_last_updated\": \"2023-12-26T18:04:10.000-04:00\",\n        \"date_created\": \"2023-12-26T18:04:10.000-04:00\",\n        \"cardholder\": {\n            \"identification\": {\n                \"number\": \"123456767\",\n                \"type\": \"CC\"\n            },\n            \"name\": \"APRO\"\n        }\n    },\n    \"refunds\": [],\n    \"additional_info\": {\n        \"authentication_code\": null,\n        \"available_balance\": null,\n        \"nsu_processadora\": null\n    },\n    \"processing_mode\": \"aggregator\",\n    \"taxes_amount\": 0,\n    \"shipping_amount\": 0,\n    \"is_test\": false,\n    \"authorization_code\": \"301299\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Capturing Payment in Go with Mercado Pago SDK\nDESCRIPTION: This snippet demonstrates how to create a payment with capture disabled, and then capture it later using Go. It initializes the Mercado Pago SDK with the access token, creates a new payment client, creates a payment with capture set to false, and then captures the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.es.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/payment\"\n)\n\nfunc main() {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := payment.NewClient(cfg)\n\n\t// Create payment.\n\trequest := payment.Request{\n\t\tTransactionAmount: 105.1,\n\t\tPayer: &payment.PayerRequest{\n\t\t\tEmail: \"{{EMAIL}}\",\n\t\t},\n\t\tToken:        \"{{CARD_TOKEN}}\",\n\t\tInstallments: 1,\n\t\tCapture:      false,\n\t}\n\n\tresource, err := client.Create(context.Background(), request)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\t// Capture.\n\tresource, err = client.Capture(context.Background(), resource.ID)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Preference ID in Ruby\nDESCRIPTION: Sets up a preference ID from a preference object in Ruby.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/installments-without-card.en.md#2025-04-18_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n@preference_id = preference['id']\n```\n\n----------------------------------------\n\nTITLE: Configuring Back URLs in C#\nDESCRIPTION: This C# code snippet demonstrates how to configure back URLs and auto-return for a MercadoPago preference. It sets up a PreferenceBackUrlsRequest object with success, failure, and pending URLs, and enables automatic return for approved payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nvar request = new PreferenceRequest\n{\n    // ...\n    BackUrls = new PreferenceBackUrlsRequest\n    {\n        Success = \"https://www.tu-sitio/success\",\n        Failure = \"http://www.tu-sitio/failure\",\n        Pending = \"http://www.tu-sitio/pendings\",\n    },\n    AutoReturn = \"approved\",\n};\n```\n\n----------------------------------------\n\nTITLE: Altering Cash Payment Expiration Date - JSON\nDESCRIPTION: This snippet illustrates how to alter the expiration date of cash payments using the `date_of_expiration` field in the preference creation request.  The date must be between 1 and 30 days from the payment issuance date and follows the ISO 8601 format.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"date_of_expiration\": \"2020-05-30T23:59:59.000-04:00\"\n```\n\n----------------------------------------\n\nTITLE: Deactivating Automatic Report Generation using Node.js\nDESCRIPTION: This Node.js snippet uses the request module to send a DELETE request to deactivated the report generation via the Mercado Pago API, setting the necessary headers for the request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.es.md#2025-04-18_snippet_14\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\\n\\nvar headers = {\\n    'accept': 'application/json',\\n    'content-type': 'application/json',\\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\\n};\\n\\nvar options = {\\n    url: 'https://api.mercadopago.com/v1/account/release_report/schedule',\\n    method: 'DELETE',\\n    headers: headers\\n};\\n\\nfunction callback(error, response, body) {\\n    if (!error && response.statusCode == 200) {\\n        console.log(body);\\n    }\\n}\\n\\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Sending Payment Request with MercadoPago API - curl\nDESCRIPTION: This snippet demonstrates making a payment request to the MercadoPago API using curl. The request includes transaction details such as amount, payment method, and payer information. Required dependencies include access to MercadoPago's API with valid authentication tokens. Key parameters include `transaction_amount`, `installments`, `description`, and `payer` details. The expected output is the payment processing response from MercadoPago. Ensure that the `ACCESS_TOKEN` and other variable placeholders are correctly set for the request to succeed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/automobiles-and-nautical.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}}' \\\n--data-raw '{\n    \"transaction_amount\": 15000.00,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"debvisa\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Pedido01\",\n    \"description\": \"PEDIDO NOVO\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"payer\": {\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"12345678909\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"title\": \"Serviço\",\n                \"description\": \"Descrição de serviço\",\n                \"category_id\": \"truck\",\n                \"quantity\": 1,\n                \"unit_price\": 15000\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_first_purchase_online\": \"1\",\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"206233-2002\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"230032\"\n            },\n            \"authentication_type\": \"Facebook\",\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"local_pickup\": true,\n            \"receiver_address\": {\n                \"zip_code\": \"306233-2003\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"330033\",\n                \"floor\": \"5\",\n                \"apartment\": \"502\",\n                \"state_name\": \"DF\",\n                \"city_name\": \"Bogota\"\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Web Tokenize Checkout Migration Overview\nDESCRIPTION: Documentation for migrating from deprecated Web Tokenize Checkout versions V1 and V2 to Checkout Bricks\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/howto-migrate.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Migrate from Web Tokenize Checkout V1](/developers/en/docs/checkout-bricks/how-tos/how-to-migrate/web-tokenize-checkout-v1/clientside)\n- [Migrate from Web Tokenize Checkout V2](/developers/en/docs/checkout-bricks/how-tos/how-to-migrate/web-tokenize-checkout-v2/clientside)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tabs Dependency in Android\nDESCRIPTION: Gradle dependency configuration for implementing Custom Tabs in Android native applications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/java-kotlin.es.md#2025-04-18_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ndependencies {\n    ...\n    implementation \"androidx.browser:browser:1.4.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Checking Refund Intent Status (JSON)\nDESCRIPTION: This JSON response shows the structure of the data returned when checking a refund intent status. It includes the device ID, refund intent ID, payment ID, and current state.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/refund-processing.en.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"device_id\": \"GERTEC_MP35P__8701012142072431\",\n   \"id\": \"75j8sfa-euu6-4x56-slk8-a341f71ba2f1\",\n   \"payment_id\": \"93921210001\",\n   \"state\": \"FINISHED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Scanner Response in Java\nDESCRIPTION: Implements the onActivityResult method to handle the response from the QR code or barcode scanning activity using the handleScannerResponse function of the CameraScanner class.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/camscanner-legacy.en.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void onActivityResult(final int requestCode, final int resultCode, final Intent data) {\n super.onActivityResult(requestCode, resultCode, data);\n\n final CameraScanner cameraScanner = MPManager.INSTANCE.getCameraScanner();\n final Function1<MPResponse<CameraScannerResponse>, Unit> callback = (final MPResponse<CameraScannerResponse> response) -> {\n\n   if (response.getStatus() == ResponseStatus.SUCCESS) {\n     final CameraScannerResponse cameraScannerResponse = response.getData();\n     // Manage successful response\n     final String result = response.getData().getMessage();\n     // ... Do something with the response\n   } else {\n     // Manage the error in the response\n     final Exception errorMessage = response.getError();\n     // ... Do something with the error\n   }\n   return Unit.INSTANCE;\n };\n\n cameraScanner.handleScannerResponse(this, resultCode, data, callback);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with C#\nDESCRIPTION: This C# snippet shows how to create a payment using the Mercado Pago C# SDK. It configures the access token, sets up custom headers for the request, and then creates a PaymentCreateRequest with the necessary information, including the token, payment method ID, payer details, description, and transaction amount. Finally, it sends the request to the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/integration.es.md#2025-04-18_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n \nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"X-Card-Validation\", \"card_validation\");\n\nvar paymentRequest = new PaymentCreateRequest\n{\n   TransactionAmount = decimal.Parse(Request[\"transactionAmount\"]),\n   Token = Request[\"token\"],\n   Description = Request[\"description\"],\n   PaymentMethodId = Request[\"paymentMethodId\"],\n   Payer = new PaymentPayerRequest\n   {\n       Email = Request[\"email\"],\n       Type = Request[\"type\"]\n   },\n};\n \nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest, requestOptions);\n \nConsole.WriteLine(payment.Status);\n```\n\n----------------------------------------\n\nTITLE: Sending Payment Data via curl\nDESCRIPTION: This curl command sends a payment request to the Mercado Pago API with transaction details, payer information, and item details formatted in JSON. Required headers such as Content-Type and Authorization are included, and data is sent in raw JSON format.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/home-and-deco.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}}' \\\n--data-raw '{\\n    \"transaction_amount\": 150.00,\\n    \"installments\": 1,\\n    \"statement_descriptor\": \"LOJA 123\",\\n    \"capture\": true,\\n    \"binary_mode\": false,\\n    \"sponsor_id\": null,\\n    \"application_fee\": null,\\n    \"payment_method_id\": \"debvisa\",\\n    \"token\": \"{{card_token_id}}\",\\n    \"external_reference\": \"Pedido01\",\\n    \"description\": \"PEDIDO NOVO\",\\n    \"notification_url\": \"{{notification_url}}\",\\n    \"metadata\": {\\n        \"order_number\": \"order_01\"\\n    },\\n    \"payer\": {\\n        \"email\": \"test_user_123456789@testuser.com\",\\n        \"identification\": {\\n            \"type\": \"CPF\",\\n            \"number\": \"12345678909\"\\n        }\\n    },\\n    \"additional_info\": {\\n        \"items\": [\\n            {\\n                \"id\": \"1234\",\\n                \"title\": \"Serviço\",\\n                \"warranty\": true,\\n                \"description\": \"Descrição de serviço\",\\n                \"category_id\": \"kitchen\",\\n                \"quantity\": 1,\\n                \"unit_price\": 150\\n            }\\n        ],\\n        \"payer\": {\\n            \"first_name\": \"Nome\",\\n            \"last_name\": \"Sobrenome\",\\n            \"is_prime_user\": true,\\n            \"is_first_purchase_online\": true,\\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\\n            \"phone\": {\\n                \"area_code\": \"11\",\\n                \"number\": \"987654321\"\\n            },\\n            \"address\": {\\n                \"zip_code\": \"206233-2002\",\\n                \"street_name\": \"Av. das Nações Unidas\",\\n                \"street_number\": \"3003\"\\n            },\\n            \"authentication_type\": \"Facebook\",\\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\\n        },\\n        \"shipments\": {\\n            \"express_shipment\": \"1\",\\n            \"receiver_address\": {\\n                \"zip_code\": \"306233-2003\",\\n                \"street_name\": \"Av. das Nações Unidas\",\\n                \"street_number\": \"3003\",\\n                \"floor\": \"5\",\\n                \"apartment\": \"502\",\\n                \"state_name\":\"SP\",\\n                \"city_name\":\"Osasco\"\\n            }\\n        }\\n    }\\n}'\n```\n\n----------------------------------------\n\nTITLE: Complete Flutter Custom Tabs Implementation\nDESCRIPTION: Full example of implementing Custom Tabs in a Flutter application, including configuration options for both Android and iOS platforms.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/flutter.en.md#2025-04-18_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_custom_tabs/flutter_custom_tabs.dart';\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        body: Center(\n          child: TextButton(\n            child: const Text('Show Flutter homepage'),\n            onPressed: () => _launchURL(context),\n          ),\n        ),\n      ),\n    );\n  }\n\n  void _launchURL(BuildContext context) async {\n    try {\n      await launch(\n        'https://flutter.dev',\n        customTabsOption: CustomTabsOption(\n          toolbarColor: Theme.of(context).primaryColor,\n          enableDefaultShare: true,\n          enableUrlBarHiding: true,\n          showPageTitle: true,\n          animation: CustomTabsAnimation.slideIn(),\n          // or user defined animation.\n          animation: const CustomTabsAnimation(\n            startEnter: 'slide_up',\n            startExit: 'android:anim/fade_out',\n            endEnter: 'android:anim/fade_in',\n            endExit: 'slide_down',\n          ),\n          extraCustomTabs: const <String>[\n            // ref. https://play.google.com/store/apps/details?id=org.mozilla.firefox\n            'org.mozilla.firefox',\n            // ref. https://play.google.com/store/apps/details?id=com.microsoft.emmx\n            'com.microsoft.emmx',\n          ],\n        ),                    \n        safariVCOption: SafariViewControllerOption(\n          preferredBarTintColor: Theme.of(context).primaryColor,\n          preferredControlTintColor: Colors.white,\n          barCollapsingEnabled: true,\n          entersReaderIfAvailable: false,\n          dismissButtonStyle: SafariViewControllerDismissButtonStyle.close,        \n        ),\n      );\n    } catch (e) {\n      // An exception is thrown if browser app is not installed on Android device.\n      debugPrint(e.toString());\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Intent-Filter in AndroidManifest\nDESCRIPTION: This code snippet shows how to define an Intent-Filter in your AndroidManifest.xml file to handle sending data with specific mime types. It is necessary for interacting with the RDCPass application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-create-payment-intent.en.md#2025-04-18_snippet_0\n\nLANGUAGE: android\nCODE:\n```\n<intent-filter> \n\t<action android:name=\"android.intent.action.SEND\" /> \n\t<category android:name=\"android.intent.category.DEFAULT\" /> \n\t<data android:mimeType=\"text/*\" /> \n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Inicializando el SDK de Dispositivos en Java para Android\nDESCRIPTION: Código para inicializar el SDK de dispositivos de Mercado Pago en una aplicación Android. Se recomienda hacerlo en la clase MainApplication.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.es.md#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nimport com.mercadolibre.android.device.sdk.DeviceSDK;\n\n\nDeviceSDK.getInstance().execute(this);\n```\n\n----------------------------------------\n\nTITLE: Verifying HMAC Signature in Python\nDESCRIPTION: This snippet shows how to verify the HMAC signature of a Mercado Pago webhook notification in Python. It compares the calculated SHA-256 hash with the provided hash to determine if the verification passed or failed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.en.md#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Obtain the hash result as a hexadecimal string\nsha = hmac_obj.hexdigest()\nif sha == hash:\n    # HMAC verification passed\n    print(\"HMAC verification passed\")\nelse:\n    # HMAC verification failed\n    print(\"HMAC verification failed\")\n```\n\n----------------------------------------\n\nTITLE: Implementing PSE Payment with MercadoPago in Ruby\nDESCRIPTION: This Ruby code creates a PSE payment using MercadoPago SDK. It sets up the payment with transaction amount, payer details, and additional information required for PSE transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-migrate-pse.en.md#2025-04-18_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ACCESS_TOKEN')\n\npayment_data = {\n\n  transaction_amount: 5000,\n  description: \"Product description\",\n  payment_method_id: \"pse\",\n  additional_info: {\n    ip_address: \"127.0.0.1\"\n  },\n  transaction_details: {\n    financial_institution: params[: financialInstitution]\n  },\n  callback_url: \"https://your-site.com\"\n  payer: {\n    email: params[:email],\n    entity_type: \"individual\",\n    identification: {\n      type: params[: identificationType],\n      number: params[: identificationNumber]\n    }\n    address: {\n      zip_code: params[: zipCode],\n      street_name: params[: streetName],\n      street_number: params[: streetNumber],\n      neighborhood: params[: neighborhood],\n      city: params[: city],\n      federal_unit: params[: federalUnit]\n    }\n    phone: {\n      area_code: params[: phoneAreaCode],\n      number: params[: phoneNumber]\n    }\n  }\n}\n\npayment_response = sdk.payment.create(payment_data)\npayment = payment_response[: response]\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference with MercadoPago SDK in Python\nDESCRIPTION: This snippet demonstrates how to create a payment preference object using the MercadoPago SDK in Python. It sets up the item details including title, quantity, and price.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-checkout.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Cria um objeto de preferência\npreference_data = {\n    \"items\": [\n        {\n            \"title\": \"My Item\",\n            \"quantity\": 1,\n            \"unit_price\": 75\n        }\n    ]\n}\n\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Sending Checkout Preferences with cURL\nDESCRIPTION: This cURL command is used to send a POST request to the Mercado Pago API to create checkout preferences. Dependencies include an internet connection and a valid Mercado Pago access token. The data sent includes auto-return settings, back URLs, notification URL, expiration details, items purchased, and buyer information. The expected output is the creation of a preference that can then be used for processing payments through Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/industry-data/additional-info.en.md#2025-04-18_snippet_8\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/checkout/preferences' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--data-raw '{\n    \"auto_return\": \"approved\",\n    \"back_urls\": {\n        \"failure\": \"https://www.mercadopago.com/home/failure\",\n        \"pending\": \"https://www.mercadopago.com/home/pending\",\n        \"success\": \"https://www.mercadopago.com/home/success\"\n    },\n    \"notification_url\": \"https://webhook.site/xyz\",\n    \"expires\": false,\n    \"external_reference\": \"order-123\",\n    \"date_of_expiration\": \"2025-03-12T12:58:41.425-04:00\",\n    \"items\": [\n        {\n            \"id\": \"1234\",\n            \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n            \"title\": \"Service\",\n            \"description\": \"Service description\",\n            \"category_id\": \"Travels\",\n            \"category_descriptor\": {\n                \"event_date\": \"2020-06-02T12:58:41.425-04:00\",\n                \"passenger\": {\n                    \"first_name\": \"[FAKER][NAME][FIRST_NAME]\",\n                    \"last_name\": \"[FAKER][NAME][LAST_NAME]\",\n                    \"type\": \"[FAKER][IDENTIFICATION][TYPE]\",\n                    \"number\": 12345678\n                }\n            },\n            \"quantity\": 1,\n            \"unit_price\": 150\n        }\n    ],\n    \"payer\": {\n        \"phone\": {\n            \"area_code\": \"11\",\n            \"number\": \"[FAKER][PHONE_NUMBER][CELL_PHONE]\"\n        },\n        \"address\": {\n            \"zip_code\": \"[FAKER][ADDRESS][ZIP_CODE]\",\n            \"street_name\": \"[FAKER][ADDRESS][STREET_NAME]\",\n            \"street_number\": 1000\n        },\n        \"identification\": {\n          \"identification_type\": \"[FAKER][IDENTIFICATION][TYPE]\",\n          \"identification_number\": \"12345678\"\n        },\n        \"email\": \"john@yourdomain.com\",\n        \"name\": \"[FAKER][NAME][FIRST_NAME]\",\n        \"surname\": \"[FAKER][NAME][LAST_NAME]\",\n        \"date_created\": \"\",\n        \"authentication_type\": \"Facebook\",\n        \"registration date\": \"2015-06-02T12:58:41.425-04:00\",\n        \"is_prime_user\": false,\n        \"is_first_purchase_online\": false,\n        \"last_purchase\": \"2020-01-02T12:58:41.425-04:00\"\n    },\n    \"payment_methods\": {\n        \"excluded_payment_methods\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"default_installments\": null,\n        \"default_payment_method_id\": null,\n        \"excluded_payment_types\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"installments\": null\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Error: Mismatched Environment Credentials\nDESCRIPTION: Occurs when using production credentials in a test environment or vice versa. Requires ensuring matching credentials and environment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/vtex/common-errors.es.md#2025-04-18_snippet_4\n\nLANGUAGE: error-code\nCODE:\n```\nInvalid users involved\n```\n\n----------------------------------------\n\nTITLE: Embedding Mercado Pago 120x240 Banner for Chile (MLC)\nDESCRIPTION: HTML code to embed a 120x240 pixel Mercado Pago banner for Chile, showcasing 6 interest-free installment payment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/seis.en.md#2025-04-18_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://www.mercadopago.cl/banner/120x240_banner_psj_6x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"120\" height=\"240\"/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Brick Button Text in React\nDESCRIPTION: This snippet shows how to customize the theme and value proposition of the Wallet Brick button using React JSX. It sets the theme to 'default' and the value proposition to 'practicality'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-texts.es.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n    theme: 'default',\n    customStyle: {\n        valueProp: 'practicality',\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: CSV Format Example for Vault Migration to Tokenization\nDESCRIPTION: Example of the required CSV format for migrating vaults to tokenization. The CSV requires specific fields including external reference, customer email, card details, and filler fields that must be present even if empty.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/batch-payments-vault-migration/vault-migration/input-format-vault-migration.en.md#2025-04-18_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nFiller,external_reference,customer_email,Filler,Filler,card_number,expiration_month,expiration_year,cardholder_name,Filler\n,217307543,test1@gmail.com,,,4356141052114191,11,25,Mary Meir,\n,485342254,test2@gmail.com,,,4356141052114192,02,28,Jhon Doe,\n```\n\n----------------------------------------\n\nTITLE: Setting Bank Slip Expiration Date in Mercado Pago API\nDESCRIPTION: Example of setting the date_of_expiration field in ISO 8601 format for a bank slip payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/bank-slip-en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\n\"date_of_expiration\": \"2023-01-28T22:59:59.000-04:00\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Method using Spreedly API in curl\nDESCRIPTION: This snippet shows how to create a payment method with the Spreedly API, crucial for processing user transactions. Dependencies include having a Spreedly account and the gateway URL. Required parameters involve credit card details such as 'first_name', 'last_name', 'number', 'verification_value', 'month', and 'year'. This operation makes a POST request to the Spreedly API, yielding a JSON response that contains the transaction details and payment method information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/spreedly/spreedly.en.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\n$ curl https://core.spreedly.com/v1/payment_methods.json \\\n-u 'C7cRfNJGODKh4Iu5Ox3PToKjniY:4UIuWybmdythfNGPqAqyQnYha6s451ri0fYAo4p3drZUi7q2Jf4b7HKg8etDtoKJ' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n\t  \"payment_method\": {\n\t    \"credit_card\": {\n\t      \"first_name\": \"TEST\",\n\t      \"last_name\": \"TEST\",\n\t      \"number\": \"CARD NUMBER\",\n\t      \"verification_value\": CVV,\n\t      \"month\": \"CARD EXPIRATION MONTH\",\n\t      \"year\": \"CARD EXPIRATION YEAR\"\n\t    },\n\t    \"email\": \"[FAKER][INTERNET][FREE_EMAIL]\"\n\t  }\n\t}\n'\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with Direct Sale Data using cURL\nDESCRIPTION: This cURL command creates a payment request to Mercado Pago, including data related to a direct sale. It specifies transaction details, payer information, item details, shipment details, and other relevant parameters within the JSON payload. Replace placeholders like `ACCESS_TOKEN`, `card_token_id`, and `notification_url` with actual values.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/direct-sale.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}} \\\n--data-raw '{ \n    \"transaction_amount\": 1500.00,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"debvisa\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Pedido01\",\n    \"description\": \"PEDIDO NOVO\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"payer\": {\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"12345678909\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"title\": \"Direct sale\",\n                \"description\": \"Gold ring\",\n                \"category_id\": \"jewelry\",\n                \"quantity\": 1,\n                \"unit_price\": 1500\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_prime_user\": true,\n            \"is_first_purchase_online\": true,\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"206233-2002\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"230032\"\n            },\n            \"authentication_type\": \"Facebook\",\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"local_pickup\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"306233-2003\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"3003\",\n                \"floor\": \"5\",\n                \"apartment\": \"502\",\n                \"state_name\": \"DF\",\n                \"city_name\": \"Bogota\"\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Sub-merchant Data in Go\nDESCRIPTION: This Go code demonstrates creating a payment with sub-merchant details using the Mercado Pago SDK for Go. It initializes the configuration with an access token, creates a payment client, defines a payment request that includes `ForwardData` containing sub-merchant information, and then calls the `Create` method. It handles errors during the payment creation process and prints the resource.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subcredenciadores-payfacs/integration-update.es.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/payment\"\n)\n\nfunc main() {\n\taccessToken := \"YOUR_ACCESS_TOKEN\"\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := payment.NewClient(cfg)\n\n\trequest := payment.Request{\n\t\tTransactionAmount: 105,\n\t\tPaymentMethodID:   \"visa\",\n\t\tPayer: &payment.PayerRequest{\n\t\t\tEmail: \"test@testuser.com\",\n\t\t},\n\t\tForwardData: &payment.ForwardDataRequest{\n\t\t\tSubMerchant: &payment.SubMerchantRequest{\n\t\t\t\tSubMerchantId:     \"1234\",\n\t\t\t\tMCC:               \"123\",\n\t\t\t\tCountry:           \"BRA\",\n\t\t\t\tAddressDoorNumber: \"1\",\n\t\t\t\tZIP:               \"22222222\",\n\t\t\t\tDocumentNumber:    \"22222222222222\",\n\t\t\t\tCity:              \"Sao Paulo\",\n\t\t\t\tAddressStreet:     \"Rua A\",\n\t\t\t\tLegalName:         \"Legal Name\",\n\t\t\t\tRegionCodeIso:     \"BR\",\n\t\t\t\tRegionCode:        \"BR-SC\",\n\t\t\t\tDocumentType:      \"CNPJ\",\n\t\t\t\tPhone:             \"123456789\",\n\t\t\t\tURL:               \"www.nomedofacilitador.com.br\",\n\t\t\t},\n\t\t},\n\t\tToken:        \"879a958bbed52608607ae70bed919e13\",\n\t\tInstallments: 12,\n\t}\n\n\tresource, err := client.Create(context.Background(), request)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\n----------------------------------------\n\nTITLE: Regional Payment Method Definitions\nDESCRIPTION: Detailed breakdown of payment method configurations for specific countries like Brazil, Argentina, Mexico, and others\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/salesforce/landing.en.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\navailable_countries: [mla, mlb, mlm, mlu, mlc, mco, mpe]\n```\n\n----------------------------------------\n\nTITLE: Payment Preference Response Example\nDESCRIPTION: Example response received after creating a payment preference. Contains the generated init_point and sandbox_init_point URLs, along with all the preference details and configurations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.en.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"collector_id\": 307467332,\n    \"operation_type\": \"regular_payment\",\n    \"items\": [\n        {\n            \"id\": \"item-ID-1234\",\n            \"picture_url\": \"https://www.mercadopago.com/org-img/MP3/home/logomp3.gif\",\n            \"title\": \"Title of what you are paying for. It will be displayed in the payment process.\",\n            \"description\": \"Item description\",\n            \"category_id\": \"others\",\n            \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n            \"quantity\": 1,\n            \"unit_price\": 100\n        }\n    ],\n    \"payer\": {\n        \"name\": \"user-name\",\n        \"surname\": \"user-surname\",\n        \"email\": \"test_user_33759716@testuser.com\",\n        \"date_created\": \"\",\n        \"phone\": {\n            \"area_code\": \"11\",\n            \"number\": \"4444-4444\"\n        },\n        \"identification\": {\n            \"type\": \"DNI\",\n            \"number\": \"12345678\"\n        },\n        \"address\": {\n            \"street_name\": \"Street\",\n            \"street_number\": 123,\n            \"zip_code\": \"5700\"\n        }\n    },\n    \"back_urls\": {\n        \"success\": \"https://www.success.com\",\n        \"pending\": \"http://www.pending.com\",\n        \"failure\": \"http://www.failure.com\"\n    },\n    \"auto_return\": \"approved\",\n    \"payment_methods\": {\n        \"excluded_payment_methods\": [\n            {\n                \"id\": \"master\"\n            }\n        ],\n        \"excluded_payment_types\": [\n            {\n                \"id\": \"ticket\"\n            }\n        ],\n        \"installments\": null,\n        \"default_payment_method_id\": null,\n        \"default_installments\": null\n    },\n    \"client_id\": \"963\",\n    \"marketplace\": \"NONE\",\n    \"marketplace_fee\": 0,\n    \"shipments\": {\n        \"receiver_address\": {\n            \"zip_code\": \"5700\",\n            \"street_number\": 123,\n            \"street_name\": \"Street\",\n            \"floor\": \"4\",\n            \"apartment\": \"C\"\n        }\n    },\n    \"notification_url\": \"https://www.your-site.com/ipn\",\n    \"counter_currency\": {\n        \"currency_id\": \"USD\"\n    },\n    \"external_reference\": \"Reference_1234\",\n    \"additional_info\": \"\",\n    \"expires\": false,\n    \"expiration_date_from\": null,\n    \"expiration_date_to\": null,\n    \"date_created\": \"2018-04-17T09:12:45.145-04:00\",\n    \"id\": \"307467332-2c69be5f-4317-405b-85d2-29152f33e852\",\n    \"init_point\": \"https://www.mercadopago.com/mlm/checkout/start?pref_id=307467332-2c69be5f-4317-405b-85d2-29152f33e852\",\n    \"sandbox_init_point\": \"https://sandbox.mercadopago.com/mlm/checkout/pay?pref_id=307467332-2c69be5f-4317-405b-85d2-29152f33e852\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wallet Brick in HTML/JavaScript\nDESCRIPTION: This HTML/JavaScript code snippet configures the Mercado Pago Wallet Brick for client-side integration. It initializes the MercadoPago SDK with a public key and renders the Wallet Brick within a specified container, using a `preferenceId` obtained from the backend. Callbacks are defined for ready, submit, and error events.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-startup.en.md#2025-04-18_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Bricks</title>\n  </head>\n  <body>\n    <div id=\"walletBrick_container\"></div>\n    <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n    <script>\n      const mp = new MercadoPago('YOUR_PUBLIC_KEY');\n      const bricksBuilder = mp.bricks();\n      const renderWalletBrick = async (bricksBuilder) => {\n        const settings = {\n          initialization: {\n             preferenceId: '<PREFERENCE_ID>', // preferenceId generated in backend\n          },\n          callbacks: {\n            onReady: () => {\n              /*\n                Callback called when Brick is ready.\n                Here you can hide loadings from your site, for example.\n              */\n            },\n            onSubmit: () => {\n              // callback called when clicking Wallet Brick\n              // this is possible because the brick is a button\n            },\n            onError: (error) => {\n              // callback called for all Brick error cases\n              console.error(error);\n            },\n          },\n        };\n        window.walletBrickController = await bricksBuilder.create(\n          'wallet',\n          'walletBrick_container',\n          settings\n        );\n      };\n      renderWalletBrick(bricksBuilder);\n    </script>\n  </body>\n</html>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst mp = new MercadoPago('YOUR_PUBLIC_KEY');\n      const bricksBuilder = mp.bricks();\n      const renderWalletBrick = async (bricksBuilder) => {\n        const settings = {\n          initialization: {\n             preferenceId: '<PREFERENCE_ID>', // preferenceId generated in backend\n          },\n          callbacks: {\n            onReady: () => {\n              /*\n                Callback called when Brick is ready.\n                Here you can hide loadings from your site, for example.\n              */\n            },\n            onSubmit: () => {\n              // callback called when clicking Wallet Brick\n              // this is possible because the brick is a button\n            },\n            onError: (error) => {\n              // callback called for all Brick error cases\n              console.error(error);\n            },\n          },\n        };\n        window.walletBrickController = await bricksBuilder.create(\n          'wallet',\n          'walletBrick_container',\n          settings\n        );\n      };\n      renderWalletBrick(bricksBuilder);\n```\n\n----------------------------------------\n\nTITLE: Generating Authentication Token for Redelcom API in JavaScript\nDESCRIPTION: This Postman pre-script demonstrates how to generate the X-Authentication token required for Redelcom API requests. It constructs the message using the request path and body, then applies HMAC-SHA256 encryption with the secret key to produce the token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/api-configure-credentials.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// get path with query params\nconst path = pm.request.url.getPath().replace(\"/redelcom\",\"\");\nlet queryParam;\nlet httpPath = path;\nif (pm.request.url.query != \"\") {\n    pm.request.url.query.all().forEach((param) => queryParam = param.key + \"=\" +  param.value);\n    httpPath +=  \"?\" + queryParam;\n}\nconsole.log(\"httpPath: \" + httpPath);\n// execute algorithm\nconst SECRET_KEY = pm.collectionVariables.get(\"secret\");\nconst body = pm.request.body\nconst message = httpPath + \",\" + body;\nconsole.log(\"message: \" + message);\nconst token = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA256(message, SECRET_KEY));\nconsole.log(\"token: \" + token);\npm.environment.set(\"X-Authentication\", pm.collectionVariables.get(\"clientId\") + \";\" + token);\n```\n\n----------------------------------------\n\nTITLE: Capturing Total Reserved Amount in MercadoPago - Python\nDESCRIPTION: This Python example illustrates capturing a total reserved amount via the 'mercadopago-sdk'. It involves setting custom request headers, forming payment data, and initiating the update process for a specified payment ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/capture-authorized-payment.en.md#2025-04-18_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = { \"capture\": True }\npayment_response = sdk.payment().update(payment_id, payment_data, request_options)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment Amount in PHP with Mercado Pago SDK\nDESCRIPTION: This snippet demonstrates how to capture a partial amount from a previously reserved payment using PHP. It finds a payment by ID, sets the transaction amount to 75, enables the capture flag, and updates the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n  MercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n  $payment = MercadoPago\\Payment::find_by_id($payment_id);\n  $payment->transaction_amount = 75;\n  $payment->capture = true;\n  $payment->update();\n?>\n```\n\n----------------------------------------\n\nTITLE: Change Device Operation Mode API Request\nDESCRIPTION: PATCH request to change Point device operating mode to PDV for API integration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/test-integration-configuration.es.md#2025-04-18_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\n/point_integration-api/devices/device-id\n```\n\n----------------------------------------\n\nTITLE: Tabla de requisitos previos en Markdown\nDESCRIPTION: Una tabla que enumera y describe los requisitos previos para la integración con Mercado Pago, incluyendo una cuenta, credenciales y cumplimiento de la normativa PCI DSS.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/secure_payments/requirements.es.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Requisitos | Descripción |\n|---|---|\n| Cuenta Mercado Pago | Es necesario que tengas una cuenta en Mercado Pago para poder generar tus credenciales. Si no la tienes, [haz clic aquí](https://www.mercadopago[FAKER][URL][DOMAIN]/hub/registration/landing) para crearla. |\n| Credenciales | Las [credenciales](/developers/es/docs/your-integrations/credentials) son contraseñas únicas con las que identificamos una integración en tu cuenta, y que sirven para capturar pagos en tiendas virtuales y otras aplicaciones de forma segura. |\n| Normativa PCI DSS | Para garantizar la protección de los datos confidenciales de nuestros usuarios y cumplir con las mejores prácticas de seguridad de la industria, solo se tendrá acceso por medio de flujos que cumplan con requisitos PCI DSS. Recomendamos acceder al [sitio oficial de PCI](https://www.pcisecuritystandards.org/) para más información. |\n```\n\n----------------------------------------\n\nTITLE: Printing DTE (Electronic Invoice) with Redelcom API in cURL\nDESCRIPTION: This cURL command sends a POST request to print a DTE (electronic invoice) using the Redelcom API. It requires authentication headers and a JSON payload containing the DTE XML, transaction ID, and terminal ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/api-print-receipts.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\ \n'https://api-dev.redelcom.cl:20010/v2/factura' \\\n--header 'X-Authentication: clientId;secret' \\\n--header 'Content-Type: application/json' \\\n--data '{\n   \"dte\": \"XML de boleta o factura bajo el esquema de servicios impuestos internos\",\n   \"rdcTransactionId\": \"294-3727-16384\",\n   \"terminalId\": \"3127\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Consultar configuración de reportes con Node.js\nDESCRIPTION: Utiliza el módulo request en Node.js para realizar una solicitud GET a la API de Mercado Pago y obtener la configuración actual de los reportes de liquidación.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.es.md#2025-04-18_snippet_14\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report/config',\n    headers: headers\n};\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Validating Bluetooth Status Using MPManager (Kotlin)\nDESCRIPTION: This snippet shows how to retrieve the current Bluetooth status on a Smart POS device using the getCurrentState method of the BluetoothIgnitor class in Kotlin. The callback processes whether Bluetooth is active or inactive, managing results accordingly.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/manage-status.en.md#2025-04-18_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval bluetoothIgnitor = MPManager.bluetooth.ignitor\n\nbluetoothIgnitor.getCurrentState { result ->\n   result\n       .doIfSuccess { state ->\n           if (state) {\n               // Bluetooth is activated\n               // Perform additional actions if necessary\n           } else {\n               // Bluetooth is deactivated\n               // Perform additional actions if necessary\n           }\n       }\n       .doIfError { error ->\n           // Manage the error case if necessary\n       }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Payment Methods Table - Uruguay (MLU)\nDESCRIPTION: Markdown table listing available payment methods for Uruguay, including Cards and 2 Cards options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/adobe-commerce/checkout-api.en.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Payment Method | Description |\n| --- | --- |\n| Cards | Allows integration with credit and debit cards. |\n| 2 Cards | Allows integration with 2 credit and debit cards. |\n```\n\n----------------------------------------\n\nTITLE: Creating a Release Report via API POST Request\nDESCRIPTION: Manually generate a new financial release report by specifying a date range using a POST request to the Mercado Pago API. Requires an access token and JSON payload with begin and end dates.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.en.md#2025-04-18_snippet_11\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/release_report' \\\n    -d '{\\\n            \"begin_date\": \"2019-05-01T00:00:00Z\",\\\n            \"end_date\": \"2019-06-01T00:00:00Z\"\\\n    }'\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$data ='{\\n            \"begin_date\": \"2019-05-01T00:00:00Z\",\\n            \"end_date\": \"2019-06-01T00:00:00Z\"\\n    }';\n\n$response = Requests::post(\"https://api.mercadopago.com/v1/account/release_report\", $headers, $data);\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Multiple Items - Node.js\nDESCRIPTION: This Node.js snippet demonstrates how to create a Mercado Pago preference with multiple items.  It defines a preference object with an array of items, each with title, quantity, currency, and unit price, then uses the MercadoPago SDK to create the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_15\n\nLANGUAGE: node\nCODE:\n```\n// Configura sua preferência\nvar preference = {\n  items: [\n      { title: 'Meu produto',\n      quantity: 1,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 75.56 },\n\t{ title: 'Meu produto 2’,\n      quantity: 2,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 96.56 }\n    ]\n};\n// Cria um botão de pagamento no seu site\nmercadopago.preferences.create(preference)\n.then(function(preference){\n  // Este valor substituirá o string \"$$init_point$$\" no seu HTML\n  global.init_point = preference.body.init_point;\n}).catch(function(error){\n  console.log(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Failed Insufficient Funds Transaction Status\nDESCRIPTION: Transaction scenario where the transaction is rejected due to insufficient funds in the source account. The status will be 'failed' with a status_detail of 'insufficient_funds'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-test.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"failed\",\n  \"status_detail\": \"insufficient_funds\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago Payment Form for Chile (MLC)\nDESCRIPTION: This code demonstrates how to initialize a Mercado Pago card form specifically for Chile with integer amount values. It configures all necessary form fields, handles submission with token generation, and implements callbacks for form mounting, submission, and resource fetching.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.en.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst cardForm = mp.cardForm({\namount: \"100\", // The value must be an integer.\niframe: true,\nform: {\nid: \"form-checkout\",\ncardNumber: {\nid: \"form-checkout__cardNumber\",\nplaceholder: \"Card Number\",\n},\nexpirationDate: {\nid: \"form-checkout__expirationDate\",\nplaceholder: \"MM/YY\",\n},\nsecurityCode: {\nid: \"form-checkout__securityCode\",\nplaceholder: \"Security Code\",\n},\ncardholderName: {\nid: \"form-checkout__cardholderName\",\nplaceholder: \"Cardholder\",\n},\nissuer: {\nid: \"form-checkout__issuer\",\nplaceholder: \"Issuing bank\",\n},\ninstallments: {\nid: \"form-checkout__installments\",\nplaceholder: \"Installments\",\n},\nidentificationType: {\nid: \"form-checkout__identificationType\",\nplaceholder: \"Document type\",\n},\nidentificationNumber: {\nid: \"form-checkout__identificationNumber\",\nplaceholder: \"Document number\",\n},\ncardholderEmail: {\nid: \"form-checkout__cardholderEmail\",\nplaceholder: \"Email\",\n},\n},\ncallbacks: {\nonFormMounted: error => {\nif (error) return console.warn(\"Form Mounted handling error: \", error);\nconsole.log(\"Form mounted\");\n},\nonSubmit: event => {\nevent.preventDefault();\n\nconst {\npaymentMethodId: payment_method_id,\nissuerId: issuer_id,\ncardholderEmail: email,\namount,\ntoken,\ninstallments,\nidentificationNumber,\nidentificationType,\n} = cardForm.getCardFormData();\n\nfetch(\"/process_payment\", {\nmethod: \"POST\",\nheaders: {\n\"Content-Type\": \"application/json\",\n},\nbody: JSON.stringify({\ntoken,\nissuer_id,\npayment_method_id,\ntransaction_amount: Number(amount),\ninstallments: Number(installments),\ndescription: \"Product Description\",\npayer: {\nemail,\nidentification: {\ntype: identificationType,\nnumber: identificationNumber,\n},\n},\n}),\n});\n},\nonFetching: (resource) => {\nconsole.log(\"Fetching resource: \", resource);\n\n// Animate progress bar\nconst progressBar = document.querySelector(\".progress-bar\");\nprogressBar.removeAttribute(\"value\");\n\nreturn() => {\nprogressBar.setAttribute(\"value\", \"0\");\n};\n}\n},\n});\n```\n\n----------------------------------------\n\nTITLE: Add Payment Form HTML\nDESCRIPTION: This snippet provides the HTML structure for the payment form, including fields for card number, expiration date, cardholder name, email, security code, issuer, document type, identification number, and installments. The form uses specific IDs for Mercado Pago integration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/secure-fields-core.en.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  #form-checkout {\n    display: flex;\n    flex-direction: column;\n    max-width: 600px;\n  }\n\n  .container {\n    height: 18px;\n    display: inline-block;\n    border: 1px solid rgb(118, 118, 118);\n    border-radius: 2px;\n    padding: 1px 2px;\n  }\n</style>\n<form id=\"form-checkout\" method=\"POST\" action=\"/process_payment\">\n  <div id=\"form-checkout__cardNumber-container\" class=\"container\"></div>\n  <div id=\"form-checkout__expirationDate-container\" class=\"container\"></div>\n  <input type=\"text\" name=\"cardholderName\" id=\"form-checkout__cardholderName\" placeholder=\"Cardholder name\" />\n  <input type=\"email\" name=\"email\" id=\"form-checkout__email\" placeholder=\"E-mail\" />\n  <div id=\"form-checkout__securityCode-container\" class=\"container\"></div>\n  <select name=\"issuer\" id=\"form-checkout__issuer\">\n    <option value=\"\" disabled selected>Issuer</option>\n  </select>----[mla, mlb, mlu, mlc, mpe, mco]----\n  <select name=\"identificationType\" id=\"form-checkout__identificationType\">\n    <option value=\"\" disabled selected>Document type</option>\n  </select>------------\n  <input type=\"text\" name=\"identificationNumber\" id=\"form-checkout__identificationNumber\"\n    placeholder=\"Document vaule\" />\n  <select name=\"installments\" id=\"form-checkout__installments\">\n    <option value=\"\" disabled selected>Choose the amount of installments</option>\n  </select>\n  <input id=\"token\" name=\"token\" type=\"hidden\" />\n  <input id=\"paymentMethodId\" name=\"paymentMethodId\" type=\"hidden\" />\n  <input id=\"transactionAmount\" name=\"transactionAmount\" type=\"hidden\" value=\"100\" />\n  <input id=\"description\" name=\"description\" type=\"hidden\" value=\"product description\" />\n  <button type=\"submit\" id=\"form-checkout__submit\">Pay</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Updating Card Payment Amount in JavaScript\nDESCRIPTION: This snippet demonstrates how to update the payment amount using the cardPaymentBrickController in JavaScript. It sets a new amount and calls the update method with the new value.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/update-data.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet amount = 95;\ncardPaymentBrickController.update({ amount });\n```\n\n----------------------------------------\n\nTITLE: Creating a Checkout Pro Preference with Sponsor ID in cURL\nDESCRIPTION: This snippet demonstrates how to make a POST request to create a Checkout Pro preference with a sponsor_id field. The example includes complete request headers, body parameters for payment configuration, redirect URLs, item details, and shipping information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/si-transactions-via-checkout-pro.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadolibre.com/checkout/preferences' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{ACCESS_TOKEN}}' \\\n--data-raw '{\n    \"auto_return\": \"all\",\n    \"back_urls\": {\n        \"success\": \"https://httpbin.org/get?status=pago\",\n        \"failure\": \"https://httpbin.org/get?status=recusado\",\n        \"pending\": \"https://httpbin.org/get?status=pendente\"\n    },\n    \"redirect_urls\": {\n        \"failure\": \"https://httpbin.org/get?status=redirectrecusado\",\n        \"pending\": \"https://httpbin.org/get?status=redirectpendente\",\n        \"success\": \"https://httpbin.org/get?status=redirectsuccess\"\n    },\n    \"notification_url\": \"https://webhook.site/d69d1102-b677-44f6-ae6d-104a7e813b93\",\n    \"expires\": false,\n    \"external_reference\": \"Order - Test\",\n    \"date_of_expiration\": \"2022-04-01T22:59:00.000-04:00\",\n    \"sponsor_id\": \"{{ID of your Mercado Pago account related to your platform.}}\",\n    \"items\": [\n        {\n            \"id\": \"1234\",\n            \"currency_id\": \"Currency. Example: BRL\",\n            \"title\": \"Product\",\n            \"category_id\": \"entertainment\",\n            \"quantity\": 1,\n            \"unit_price\": 4\n        },\n        {\n            \"id\": \"1234\",\n            \"currency_id\": \"Currency. Example: BRL\",\n            \"title\": \"frete\",\n            \"category_id\": \"entertainment\",\n            \"quantity\": 1,\n            \"unit_price\": 1\n        }\n    ],\n  \n    \"payment_methods\": {\n        \"default_installments\": null,\n        \"default_payment_method_id\": null,\n        \"excluded_payment_types\": []\n    },\n    \"installments\": null,\n    \"shipments\": {\n        \"receiver_address\": {\n\t         \"zip_code\": \"Zip code. Example: 95630000\",\n\t         \"street_name\": \"Street name. Example: Av. St. Luiz\",\n\t         \"street_number\": \"Número. Example: 15\"\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Destroying Fintoc Widget Instance\nDESCRIPTION: Function to completely remove the Fintoc widget instance from the application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-advanced.es.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction destroyFintoc() {\n      fintoc.destroy()\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation Markdown Block for Store Configuration\nDESCRIPTION: Markdown content providing step-by-step instructions for configuring store settings in Shopify, including company name requirements, language settings, and buyer identification customization.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/shopify/integration-configuration-store.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Configure store information\n\nWe recommend you customize the checkout information of the store to ensure a better shopping experience and a smoother integration between Mercado Pago`s checkout and Shopify. To do so, follow the steps below:\n\n## Configure the company name \n\n1. Go to your [Shopify](https://accounts.shopify.com/store-login) store.\n2. In the store's admin panel, click on **Settings**.\n\n![Panel](/images/shopify/store-panel-es.png)\n\n3. Once there, select the **Checkout** option.\n\n![Checkout](/images/shopify/checkout-es.png)\n\n4. In the **Customer information** section, select the \"Company name\" field as mandatory.\n\n![Company name](/images/shopify/company-name-es.png)\n\n5. Click on **Save**.\n```\n\n----------------------------------------\n\nTITLE: Configuring Back URLs in Ruby\nDESCRIPTION: This snippet provides an example of how to set back URLs and the auto return attribute in Ruby for Mercado Pago preferences.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/redirection.es.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# ...\npreference_data = {\n  # ...\n  back_urls = {\n    success: 'https://www.tu-sitio/success',\n    failure: 'https://www.tu-sitio/failure',\n    pending: 'https://www.tu-sitio/pendings'\n  },\n  auto_return: 'approved'\n  # ...\n}\n# ...\n```\n\n----------------------------------------\n\nTITLE: Payment Status Reference Table\nDESCRIPTION: A reference table showing all possible payment status codes and their corresponding status_detail values, along with descriptions of what each combination means. Includes various scenarios like successful payments, refunds, authorizations, pending processes, cancellations, chargebacks, and rejections.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/payment-query-results.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Status | `status_detail` | Description |\n| --- | --- | --- |\n| approved | `accredited` | Done! Your payment was credited. Your statement will show the `amount` charge as `statement_descriptor`. |\n| approved | `partially_refunded` | The payment has at least one partial refund. |\n| authorized | `pending_capture` | The payment has been authorized and is waiting for [capture](/developers/en/docs/checkout-api/payment-management/capture-authorized-payment). |\n| in_process | `offline_process` | Due to lack of online processing, the payment is being processed offline. |\n| in_process | `pending_contingency` | We are processing your payment.<br/><br/>Don't worry! You will be notified via e-mail if the payment was credited in less than 2 business days. |\n| in_process | `pending_review_manual` | We are processing your payment.<br/><br/>Don't worry! You will be notified via e-mail if it is credited or if we need more information in less than 2 business days. |\n| pending | `pending_waiting_transfer` | In cases of bank transfer, the `status_detail` is obtained by waiting for the user to finish the payment process in their bank. |\n| pending | `pending_waiting_payment` | In cases of offline payments, it remains pending until the user finishes the payment. |\n| pending | `pending_challenge` | n cases of credit card payments, there is a pending confirmation due to a challenge. |\n| cancelled | `expired` | The payment has been cancelled after spending 30 days in a pending status.|\n| cancelled | `by_collector` | The payment has been cancelled by collector.|\n| cancelled | `by_payer` | The payment has been cancelled by payer.|\n| charged_back | `settled` | The money was retained after a chargeback process. |\n| charged_back | `reimbursed` | The money was reimbursed after a chargeback process.|\n| charged_back | `in_process` | The payment is in process due to the payer disowning it.|\n| refunded | `refunded` | The payment has been refunded by the collector.|\n| refunded | `by_admin` | The payment has been refunded by the administrator. |\n| rejected | `bank_error` | If the payment method is bank transfer, the payment was rejected due to an error with the bank. |\n| rejected | `cc_rejected_3ds_challenge` | The payment is rejected for not surpasing the 3DS challenge. |\n| rejected | `cc_rejected_3ds_mandatory` | The payment is rejected for not having a 3DS challenge when it is mandatory. |\n| rejected | `cc_rejected_bad_filled_card_number` | Check card number. |\n| rejected | `cc_rejected_bad_filled_date` | Check expiration date. |\n| rejected | `cc_rejected_bad_filled_other` | Check data. |\n| rejected | `cc_rejected_bad_filled_security_code` | Check card security code. |\n| rejected | `cc_rejected_blacklist` | Your payment couldn't be processed. |\n| rejected | `cc_rejected_call_for_authorize` | Authorize the `amount` payment to `payment_method_id`. |\n| rejected | `cc_rejected_card_disabled` | Call `payment_method_id` to activate your card, or use a different payment method. The phone is on the back of your card. |\n| rejected | `cc_rejected_card_error` | Your payment couldn't be processed. |\n| rejected | `cc_rejected_duplicated_payment` | You have already made a payment for that value.<br/><br/>If you need to pay again, use a different card or payment method. |\n| rejected | `cc_rejected_high_risk` | Your payment was rejected.<br/><br/>Select a different payment method; we recommend cash methods. |\n| rejected | `cc_rejected_insufficient_amount` | Your `payment_method_id` does not have enough funds. |\n| rejected | `cc_rejected_invalid_installments` | `payment_method_id` does not process payments in `installments` installments. |\n| rejected | `cc_rejected_max_attempts` | You reached the allowed attempt limit.<br/><br/>Select a different card or payment method. |\n| rejected | `cc_rejected_other_reason` | `payment_method_id` did not process payment. |\n| rejected | `cc_amount_rate_limit_exceeded` | Rejected because it exceeded the limit (CAP - Maximum Allowed Capacity) of the payment method. |\n| rejected | `rejected_insufficient_data` | Rejected due to the lack of all required mandatory information in the payment. |\n| rejected | `rejected_by_bank` | Operation rejected by the bank. |\n| rejected | `rejected_by_regulations` | Payment rejected by regulations. |\n| rejected | `insufficient_amount` | Payment rejected due to insufficient amount. |\n| rejected | `cc_rejected_card_type_not_allowed` | The payment was rejected because the user does not have the credit function enabled on their multiple card (debit and credit). |\n```\n\n----------------------------------------\n\nTITLE: Implementing SPEI Payment Button in HTML\nDESCRIPTION: HTML implementation for a payment button that directs users to the SPEI transfer payment page. The link uses the external_resource_url from the payment response and opens in a new tab when clicked, allowing users to complete their payment via SPEI transfer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.en.md#2025-04-18_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://www.mercadopago.com.mx/payments/51096146182/ticket?caller_id=34728475&hash=f3a8630a-f06a-48e4-b2a6-f95750af7346\" target=\"_blank\">Pay with SPEI Transfers</a>\n```\n\n----------------------------------------\n\nTITLE: Setting Theme During Bricks Instantiation\nDESCRIPTION: This snippet shows how to set the theme parameter when instantiating the Checkout Bricks object. This approach applies the selected theme to all Bricks that can be instantiated.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/set-theme.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst bricks = mp.bricks({ theme: 'dark' });\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods for Mercado Pago SDK - Ruby\nDESCRIPTION: This snippet demonstrates how to install CocoaPods, which is necessary for managing dependencies in iOS projects. It involves running commands that install the CocoaPods gem and set up the environment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ios.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n$ sudo gem install cocoapods\n$ pod setup\n```\n\n----------------------------------------\n\nTITLE: Implementing startActivity Method for Sending Intents in Ionic\nDESCRIPTION: Method to send an intent to a native Android app for payment processing. It uses the WebIntent and AppVersion plugins to construct and send the intent.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/cross-platform-ionic.es.md#2025-04-18_snippet_3\n\nLANGUAGE: ionic\nCODE:\n```\nstartActivity(pay): void { \n \t\tthis.app.getPackageName().then(async (value) => {  \n\t\t\tconst options = { \n\t\t\t\taction: this.intent.ACTION_SEND, \n\t\t\t\tpackage: value.toString(), \n\t\t\t\textras: { \n\t\t\t\t\tpackageName: value.toString(), \n\t\t\t\t\tclassName: `${value.toString()}.MainActivity`,  monto: `${pay}` \n\t\t\t\t}, \n\t\t\t\tcomponent: { \n\t\t\t\t\tpackage: 'redelcom.cl.rdcpass', \n\t\t\t\t\tclass: 'redelcom.cl.rdcpass.MainActivity' \n \t\t\t\t}, \n \t\t\t}; \n \t\t\tthis.intent.startActivity(options) \n \t\t\t.then((onSucces) => { \n\t\t\t\tthis.getIntent(); \n \t\t\t}, \n \t\t\t(onError) => { \n\t\t\t\tconsole.log('error', onError); \n \t\t\t}); \n \t\t} \n\t);  \n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining HMAC Hexadecimal String - Python\nDESCRIPTION: This snippet verifies an HMAC by comparing the calculated hexadecimal string with a given hash. It uses the hmac_obj to obtain the hex digest and prints the verification result.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/notifications.es.md#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nsha = hmac_obj.hexdigest()\nif sha == hash:\n    # HMAC verification passed\n    print(\"HMAC verification passed\")\nelse:\n    # HMAC verification failed\n    print(\"HMAC verification failed\")\n```\n\n----------------------------------------\n\nTITLE: Inicializando Card Payment Brick con documento de identificación en React\nDESCRIPTION: Este snippet muestra cómo configurar el objeto de inicialización para el Card Payment Brick en React, incluyendo el tipo y número de documento de identificación del pagador.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/initialize-data-on-the-bricks.es.md#2025-04-18_snippet_3\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst initialization = {\n ...,\n payer: {\n   ...,\n   identification: {\n     type: 'string',\n     number: 'string',\n   },\n },\n};\n```\n\n----------------------------------------\n\nTITLE: Associating Google Ads Tag with Checkout Pro in Java\nDESCRIPTION: In this Java snippet, Google Ads conversions are linked with a Mercado Pago preference. It uses objects like PreferenceTrackRequest with conversion ID and label to configure ad tracking. Dependencies include PreferenceClient and relevant request classes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.en.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// Create a preference object\nPreferenceClient client = new PreferenceClient();\n\n// Associate your Google ads tag\nList<PreferenceTrackRequest> tracks = new ArrayList<>();\nPreferenceTrackRequest trackGoogle =\nPreferenceTrackRequest.builder()\n.type(\"google_ad\")\n.values(\nPreferenceTrackValuesRequest.builder()\n.conversionId(\"CONVERSION_ID\")\n.conversionLabel(\"CONVERSION_LABEL\")\n.build())\n.build();\ntracks.add(trackGoogle);\n\nPreferenceRequest request = PreferenceRequest.builder().tracks(tracks).build();\n\n// Save and post the preference\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Getting Payment Methods in Java\nDESCRIPTION: Shows how to retrieve payment methods using MPManager.INSTANCE.getPaymentMethodsTools() in Java. Implements a callback function to handle the response status and process the list of payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/get-payment-methods.es.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal Function1<MPResponse<List<PaymentMethod>>, Unit> callback = (final MPResponse<List<PaymentMethod>> response) -> {\n if (response.getStatus() == ResponseStatus.SUCCESS) {\n   // Puedes renderizar la lista de payment methods en un recycler view\n } else {\n   // Manejo del error\n }\n return Unit.INSTANCE;\n};\nMPManager.INSTANCE.getPaymentMethodsTools().getPaymentMethods(callback);\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment Value with Node.js\nDESCRIPTION: This snippet shows how to capture a partial amount from a previously authorized payment using Node.js. It captures only 5 units of currency from the original authorized amount.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_11\n\nLANGUAGE: node\nCODE:\n```\nvar mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(config.access_token);\n\nlet captureInfo = {id: 123, transaction_amount: 5}\n\nmercadopago.payment.capturePartial(captureInfo, mercadopago, (error, response) => {\n    if (error){\n        console.log(error);\n    }else{\n        console.log(response)\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Launching Payment Method\nDESCRIPTION: Function to start payment flow with specific payment method, amount, metadata, and callback paths\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/comunication-commands.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlaunchPaymentMethod(25.6, \"debit\", encodeURIComponent({\"attr\":\"123\"}), \n'congrats.html', 'error.html')\n```\n\n----------------------------------------\n\nTITLE: Embedding MercadoPago SDK JS V2 HTML\nDESCRIPTION: This snippet demonstrates how to include the MercadoPago SDK JS V2 in an HTML document. The script tag imports the SDK, enabling the creation of payment forms and tokenization processes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/partners.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Processing Payments with SmartPOS SDK in Kotlin\nDESCRIPTION: This Kotlin snippet shows how to use the SmartPOS SDK to process payments. It demonstrates building callback URIs and launching the payment flow activity.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/first-steps.en.md#2025-04-18_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval paymentFlow = MPManager.paymentFlow\n\nval uriSuccess = paymentFlow.buildCallbackUri(\n   \"mercadopago://launcher_native_app\",\n   \"success\",\n   hashMapOf(\"attr\" to \"123\"),\n   \"demo_app\"\n)\n\nval uriError = paymentFlow.buildCallbackUri(\n   \"mercadopago://launcher_native_app\",\n   \"error\",\n   hashMapOf(\"attr\" to \"456\"),\n   \"demo_app\"\n)\n\npaymentFlow.launchPaymentFlowActivity(\n   amount,\n   description,\n   uriSuccess,\n   uriError,\n   context,\n   lastPaymentMethodSelected\n) { response ->\n   response.doIfError { error ->\n       error.message?.let { errorMessage -> setLayoutError(errorMessage) }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: API Response for QR Code Resolution\nDESCRIPTION: This JSON response contains details about the resolved QR code, including collector information, order details, and allowed payment methods with their restrictions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/interoperable-accepting-flow-test.en.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"collector\": {\n        \"name\": \"Test Test\",\n        \"account\": \"0000009388000001809754\",\n        \"identification_number\": \"27326594305\",\n        \"mcc\": \"5912\",\n        \"postal_code\": \"c1430dnn\"\n    },\n    \"order\": {\n        \"id\": \"is282acfe8f8cb49b8a4f1a020242c1adf0854\",\n        \"items\": [\n            {\n                \"title\": \"Producto de Rowhna\",\n                \"description\": \"Producto\",\n                \"currency_id\": \"ARS\",\n                \"quantity\": 1\n            }\n        ]\n    },\n    \"administrator\": {\n        \"name\": \"COELSA\",\n        \"identification_number\": \"30692264785\"\n    },\n    \"additional_info\": \"\",\n    \"status\": \"open_amount\",\n    \"payment_methods_allowed\": [\n        {\n            \"id\": \"CARD\",\n            \"restrictions\": {\n                \"min_amount_allowed\": 3,\n                \"max_amount_allowed\": 15000000\n            }\n        },\n        {\n            \"id\": \"TRANSFER\",\n            \"restrictions\": {\n                \"min_amount_allowed\": 0.01,\n                \"max_amount_allowed\": 100000000\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Payment Intent Status Using cURL\nDESCRIPTION: HTTP GET request to check payment intent status using rdcTransactionId. Requires X-Authentication header with clientId and secret credentials.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/api-query-payment-intent.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n'https://api-dev.redelcom.cl:20010/v2/pago?rdcTransactionId={rdcTransactionId}' \\\n--header 'X-Authentication: clientId;secret'\n\n```\n\n----------------------------------------\n\nTITLE: Handling Payment Success Callback (JavaScript Function)\nDESCRIPTION: This code snippet shows how to define a JavaScript function to handle a successful payment callback. The function receives a `data` object containing payment details such as `payment_type` and `payment_reference`.  The user is expected to implement their own logic to process the payment details inside the function body.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/callback-handling.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction callback_payment_success(data) {\n\tlet paymentType = data[\"payment_type\"]; \n\tlet paymentReference = data[\"payment_reference\"]; \n\t\n\t// Seu código aqui...\n}\n```\n\n----------------------------------------\n\nTITLE: Criando preferência de pagamento com PHP no Mercado Pago\nDESCRIPTION: Este snippet demonstra como criar uma preferência de pagamento usando o SDK do Mercado Pago em PHP. Ele configura um item com título, quantidade e preço unitário.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-preferences.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$client = new PreferenceClient();\n$preference = $client->create([\n  \"items\"=> array(\n    array(\n      \"title\" => \"Meu produto\",\n      \"quantity\" => 1,\n      \"unit_price\" => 2000\n    )\n  )\n]);\n\necho $preference\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with cURL\nDESCRIPTION: This cURL command demonstrates how to make a POST request to the Mercado Pago API to create a payment. It includes the 'X-Card-Validation' header, the access token for authentication, and the necessary data like token, payment method ID, payer information, description, and transaction amount. The transaction amount is set to 0 for Zero Dollar Auth.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/integration.es.md#2025-04-18_snippet_1\n\nLANGUAGE: cURL\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Card-Validation: card_validation' \\\n--data-raw '{\n    \"token\": \"TOKEN\",\n    \"payment_method_id\": \"master\",\n    \"payer\": {\n        \"email\": \"{{payer_email}}\",\n        \"type\" : \"guest\",\n    },\n    \"description\": \"validação de cartão com valor zero dollar master\",\n    \"transaction_amount\": 0\n}'\n```\n\n----------------------------------------\n\nTITLE: Configure Scheme in app.json (iOS)\nDESCRIPTION: This JSON snippet shows how to configure the URL scheme in the app.json file for iOS.  The scheme is used as part of the deep link that will redirect to the application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-expo-go.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"expo\": {\n\t\t\"scheme\": \"myapp\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creando Pagos con Efecty usando cURL\nDESCRIPTION: Comando cURL para crear un pago con Efecty mediante la API de MercadoPago. Incluye los encabezados necesarios como Authorization y X-Idempotency-Key, así como el cuerpo de la solicitud con los datos del pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mco.es.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n    'https://api.mercadopago.com/v1/payments' \\\n    -d '{\n      \"transaction_amount\": 100,\n      \"description\": \"Product title\",\n      \"payment_method_id\": \"efecty\",\n      \"payer\": {\n        \"email\": \"PAYER_EMAIL_HERE\",\n      },\n\"metadata\": {\n        \"payment_mode\": \"online\",\n      }\n    }'\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Bancário Payment with PHP\nDESCRIPTION: This PHP code snippet demonstrates how to create a boleto bancário payment using Mercado Pago's SDK. It includes setting up the client, configuring request options with an idempotency key, and sending the payment details including transaction amount, payment method, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse MercadoPago\\Client\\Payment\\PaymentClient;\nuse MercadoPago\\Client\\Common\\RequestOptions;\nuse MercadoPago\\MercadoPagoConfig;\n\nMercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n$client = new PaymentClient();\n$request_options = new RequestOptions();\n$request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n$payment = $client->create([\n  \"transaction_amount\" => (float) $_POST['<TRANSACTION_AMOUNT>'],\n  \"payment_method_id\" => $_POST['<PAYMENT_METHOD_ID>'],\n  \"payer\" => [\n    \"email\" => $_POST['<EMAIL>'],\n    \"first_name\" => $_POST['<NOME>'],\n    \"last_name\" => $_POST['<SOBRENOME>'],\n    \"identification\" => [\n      \"type\" =>  $_POST['<TIPO DE DOCUMENTO>'],\n      \"number\" => $_POST['<NUMERO>']\n    ],\n    \"address\" => [\n      \"zip_code\" => $_POST['<CEP>'],\n      \"city\" => $_POST['<CIDADE>'],\n      \"street_name\" => $_POST['<RUA>'],\n      \"street_number\" => $_POST['<NÚMERO>'],\n      \"neighborhood\" => $_POST['<BAIRRO>'],\n      \"federal_unit\" => $_POST['<SIGLA DO ESTADO>']\n    ]\n  ]\n], $request_options);\necho implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Excluding Payment Methods JavaScript\nDESCRIPTION: This JavaScript snippet shows how to exclude payment methods and types, and to set installments for Mercado Pago preferences. It creates a `payment_methods` object with `excluded_payment_methods` and `excluded_payment_types` arrays, along with the `installments` parameter.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar preference = {}\npreference = {\n//...\n\"payment_methods\": {\n    \"excluded_payment_methods\": [\n        {\n            \"id\": \"master\"\n        }\n    ],\n    \"excluded_payment_types\": [\n        {\n            \"id\": \"ticket\"\n        }\n    ],\n    \"installments\": 12\n\t}\n//...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Processing Payment with C#\nDESCRIPTION: C# implementation for processing credit card payments with Mercado Pago. Uses the PaymentClient to create a payment request with transaction amount, token, payment method, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.en.md#2025-04-18_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\nvar paymentRequest = new PaymentCreateRequest\n{\nTransactionAmount = decimal.Parse(Request[\"transactionAmount\"]),\nToken = Request[\"token\"],\nDescription = Request[\"description\"],\nInstallments = int.Parse(Request[\"installments\"]),\nPaymentMethodId = Request[\"paymentMethodId\"],\nPayer = new PaymentPayerRequest\n{\nEmail = Request[\"email\"],\nIdentification = new IdentificationRequest\n{\nType = Request[\"identificationType\"],\nNumber = Request[\"identificationNumber\"],\n},\n},\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest);\n\nConsole.WriteLine(payment.Status);\n```\n\n----------------------------------------\n\nTITLE: Querying Card Issuers with PHP\nDESCRIPTION: PHP code example showing how to retrieve card issuer information using the Mercado Pago API. The request requires an ACCESS_TOKEN and returns issuer details for a specific payment method and BIN number.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/issuers.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\trequire ('mercadopago.php');\n\t$mp = new MP ('ACCESS_TOKEN');\n\t$card_issuers = $mp->get('/v1/payment_methods/card_issuers', 'visa', '424242');\n\tprint_r ($card_issuers);\n?>\n```\n\n----------------------------------------\n\nTITLE: Configurar URLs de retorno en Python para Checkout Pro\nDESCRIPTION: Ejemplo de cómo configurar las URLs de retorno y auto_return en Python para la preferencia de pago de Checkout Pro. Define URLs para escenarios de éxito, fallo y pendiente.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-return-urls.es.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npreference_data = {\n    \"back_urls\": {\n        \"success\": \"https://www.tu-sitio/success\",\n        \"failure\": \"https://www.tu-sitio/failure\",\n        \"pending\": \"https://www.tu-sitio/pendings\"\n    },\n    \"auto_return\": \"approved\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Authenticated Payment with Mercado Pago Python SDK\nDESCRIPTION: This snippet demonstrates how to create an authenticated payment using the Mercado Pago Python SDK. It includes the payment data structure with authentication attributes and the API call to create the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-external-mpi.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npayment_data = {\n    \"description\": \"<<PAYMENT_DESCRIPTION>>\",\n    \"installments\": 1,\n    \"payer\": {\n        \"first_name\": \"<<FIRST_NAME>>\",\n        \"last_name\": \"<<LAST_NAME>>\",\n        \"address\": {},\n        \"identification\": {\n            \"number\": \"<<IDENTIFICATION_NUMBER>>\",\n            \"type\": \"<<IDENTIFICATION_TYPE>>\"\n        },\n        \"email\": \"<<EMAIL>>\"\n    },\n    \"payment_method_id\": \"<<PAYMENT_METHOD_ID>>\",\n    \"token\": \"<<CARD_TOKEN>>\",\n    \"payment_method\": {\n        \"type\": \"credit_card\",\n        \"data\": {\n            \"authentication\": {\n                \"type\": \"external_threeds\",\n                \"cryptogram\": \"<<String>>\",\n                \"three_ds_server_trans_id\": \"<<String>>\",\n                \"eci\": \"<<String>>\",\n                \"ds_trans_id\": \"<<String>>\",\n                \"acs_trans_id\": \"<<String>>\",\n                \"three_ds_version\": \"<<String>>\",\n                \"authentication_status\": \"<<String>>\"\n            }\n        }\n    },\n    \"statement_descriptor\": \"<<STATEMENT_DESCRIPTOR>>\",\n    \"transaction_amount\": <<AMOUNT>>\n}\n\npayment_response = sdk.payment().create(payment_data,\n                                        request_options)\n\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Criando Preferência de Pagamento com Platform ID via Checkout Pro - curl\nDESCRIPTION: Este snippet demonstra como enviar uma requisição POST para criar uma preferência de pagamento no Mercado Pago, incluindo o header 'x-platform-id'. A requisição contém informações completas como URLs de redirecionamento, dados do produto, métodos de pagamento e informações de envio.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/pi-transactions-via-checkout-pro.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadolibre.com/checkout/preferences' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{ACCESS_TOKEN}}' \\\n--header 'x-platform-id: {{PLATFORM_ID fornecido pelo time de Partners}}' \\\n--data-raw '{\n    \"auto_return\": \"all\",\n    \"back_urls\": {\n        \"success\": \"https://httpbin.org/get?status=pago\",\n        \"failure\": \"https://httpbin.org/get?status=recusado\",\n        \"pending\": \"https://httpbin.org/get?status=pendente\"\n    },\n    \"redirect_urls\": {\n        \"failure\": \"https://httpbin.org/get?status=redirectrecusado\",\n        \"pending\": \"https://httpbin.org/get?status=redirectpendente\",\n        \"success\": \"https://httpbin.org/get?status=redirectsuccess\"\n    },\n    \"notification_url\": \"https://webhook.site/d69d1102-b677-44f6-ae6d-104a7e813b93\",\n    \"expires\": false,\n    \"external_reference\": \"Pedido - Teste\",\n    \"date_of_expiration\": \"2022-04-01T22:59:00.000-04:00\",\n    \"sponsor_id\": <CUST_ID>,\n    \"items\": [\n        {\n            \"id\": \"1234\",\n            \"currency_id\": \"Moeda. Exemplo: BRL\",\n            \"title\": \"Produto\",\n            \"category_id\": \"Categoria. Exemplo: entertainment\",\n            \"quantity\": 1,\n            \"unit_price\": 4\n        },\n        {\n            \"id\": \"1234\",\n            \"currency_id\": \"Moeda. Exemplo: BRL\",\n            \"title\": \"Frete\",\n            \"category_id\": \"Categoria: entertainment\",\n            \"quantity\": 1,\n            \"unit_price\": 1\n        }\n    ],\n    \"payment_methods\": {\n        \"default_installments\": null,\n        \"default_payment_method_id\": null,\n        \"excluded_payment_types\": [],\n        \"installments\": null\n    },\n    \"shipments\": {\n        \"receiver_address\": {\n            \"zip_code\": \"CEP. Exemplo: 95630000\",\n            \"street_name\": \"Nome da rua. Exemplo: Av. das Nações Unidas\",\n            \"street_number\": \"Número da rua. Exemplo: 3003\"\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Java SDK\nDESCRIPTION: Java code snippet for creating a payment using Mercado Pago SDK with custom request options and payment details. The code builds a payment request with transaction details, payer information, and identification data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n.installments(request.getInstallments())\n       .paymentMethodId(request.getPaymentMethodId())\n       .payer(\n           PaymentPayerRequest.builder()\n               .email(request.getPayer().getEmail())\n               .firstName(request.getPayer().getFirstName())\n               .identification(\n                   IdentificationRequest.builder()\n                       .type(request.getPayer().getIdentification().getType())\n                       .number(request.getPayer().getIdentification().getNumber())\n                       .build())\n               .build())\n       .build();\n\nclient.create(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: PCI DSS Compliance Levels Table in Markdown\nDESCRIPTION: Markdown table displaying the four PCI DSS compliance levels based on transaction volume, along with their respective requirements for audits, scanning, and certifications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/pci-v2.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* **Level 1:** (i) Organizations that process more than 6 million transactions per year for Visa or MasterCard, or more than 2.5 million for American Express; (ii) organizations in which there has been a data breach; (iii) organizations considered level 1 by any card association.\n    * Annual Compliance Report (ROC) by a Qualified Security Assessor (QSA) or Internal Auditor.\n    * Quarterly Network Scanning by Approved Vendor (ASV).\n    * Compliance Certification (AOC).\n    <br>\n* **Level 2**: Organizations that process between 1 and 6 million transactions per year.\n    * Corresponding annual PCI Self-Assessment Questionnaire (SAQ).\n    * Quarterly Network Scanning by Approved Vendor (ASV).\n    * Compliance Certification (AOC) for each of two corresponding SAQs.\n    <br>\n* **Level 3**: Organizations that process between 20,000 and 1 million online transactions per year and organizations that process less than 1 million transactions in total.\n    * Corresponding annual PCI Self-Assessment Questionnaire (SAQ).\n    * Quarterly Network Scanning by Approved Vendor (ASV).\n    * Compliance Certification (AOC) for each of two corresponding SAQs.\n    <br>\n* **Level 4**: Organizations that process less than 20,000 online transactions per year and organizations that process up to 1 million total transactions per year. \n    * Corresponding annual PCI Self-Assessment Questionnaire (SAQ).\n    * Quarterly Network Scanning by Approved Vendor (ASV).\n    * Compliance Certification (AOC) for each of two corresponding SAQs.\n```\n\n----------------------------------------\n\nTITLE: Embedding Mercado Pago 125x125 Banner for Brazil (MLB)\nDESCRIPTION: HTML code to embed a 125x125 pixel Mercado Pago banner for Brazil, showcasing 6 interest-free installment payment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/seis.en.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/PSJ/125x125_banner_psj_6x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"125\" height=\"125\"/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Brick Visual Options - React JSX\nDESCRIPTION: This code snippet shows how to customize visual settings in Mercado Pago's Brick framework using React JSX. It includes an option to hide status details from the payment information. This snippet is useful when integrating Mercado Pago in React applications to control the user interface effectively.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/status-screen-brick/hide-processing-details.en.md#2025-04-18_snippet_1\n\nLANGUAGE: React JSX\nCODE:\n```\nconst customization = {\n visual: {\n   hideStatusDetails: true\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Idempotency Key Requirement\nDESCRIPTION: Explains the mandatory use of X-Idempotency-Key header to prevent duplicate transactions during cancellation requests\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/cancellations.en.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nWhen running the endpoints referenced in this documentation, you will encounter the attribute **X-Idempotency-Key**. Sending it is mandatory to ensure the execution and re-execution of requests without side effects.\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Application Fee - cURL\nDESCRIPTION: This cURL command demonstrates how to create a payment using Mercado Pago's Checkout API or Checkout Transparente for different regions. The request includes the necessary headers and payload to set up a payment, including `application_fee` to specify the marketplace's commission per payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/marketplace/integrate-marketplace.en.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'accept: application/json' \\\n--header 'content-type: application/json' \\\n--header 'Authorization: Bearer {{oauth_access_token}}' \\\n--data-raw '{\n    \"description\": \"Test payment 3\",\n    \"installments\": 1,\n    \"token\": \"{{card_token}}\",\n    \"payer\": {\n        \"email\": \"{{payer_email}}\"\n    },\n    \"payment_method_id\": \"master\",\n    \"transaction_amount\": 25,\n    \"application_fee\": 10\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Full Refund Using PaymentRefundClient in PHP\nDESCRIPTION: This code snippet demonstrates how to create a full refund by utilizing the PaymentRefundClient SDK. It requires the `PaymentRefundClient` class to be included in your project. The primary parameter is the payment ID, which is needed to process the refund.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/refunds.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n $refund_client = new PaymentRefundClient();\n $refund_client->refundTotal(123456789);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating a QR Code Order with Mercado Pago API (cURL)\nDESCRIPTION: This cURL command demonstrates how to create an order using the Mercado Pago API with information obtained from scanning a QR code. It includes the necessary headers for authorization, content type, and idempotency, as well as the request body with order details and the payment token.  The key parameters are `USER_ID`, `EXTERNAL_STORE_ID`, `EXTERNAL_POS_ID`, `ACCESS_TOKEN`, `X-Idempotency-Key`, and `payment_token`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/hidden-qr-buyer-part-b.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST \\\n 'https://api.mercadopago.com/instore/qr/buyer/collectors/USER_ID/stores/EXTERNAL_STORE_ID/pos/EXTERNAL_POS_ID/orders' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: 92022242-f08a-11e9-81b4-2a2a12' \\\n--data-raw ' {\n    \"external_reference\" : \"order-id-1234\",\n   \"total_amount\": 100.0,\n    \"items\": [\n        {\n            \"sku_number\": \"KS955RUR\",\n            \"category\": \"FOOD\",\n            \"title\": \"Item1\",\n            \"description\": \"Item1 Mercado Pago\",\n            \"unit_price\": 20,\n            \"quantity\": 5,\n            \"unit_measure\": \"unit\",\n            \"total_amount\": 100\n        }\n   ],\n   \"title\": \"Title\",\n    \"description\": \"Mercado Pago\",\n \"scan_timestamp\": 1581356798,\n\"payment_token\":\"PAYMENT_TOKEN\"\n   }'\n```\n\n----------------------------------------\n\nTITLE: Updating a Merchant Order in PHP\nDESCRIPTION: Updates merchant order details by providing the order ID and specific update information using Mercado Pago SDK\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/orders.es.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new MerchantOrderClient();\n\n    $request = [\n      \"notification_url\" => \"https://www.test.com\"\n    ];\n\n  $client->update(123456789, $request);\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK\nDESCRIPTION: Initializes the Mercado Pago SDK with your public key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/installments-without-card.en.md#2025-04-18_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  const mp = new MercadoPago(\"YOUR_PUBLIC_KEY\");\n</script>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loadMercadoPago } from \"@mercadopago/sdk-js\";\n\nawait loadMercadoPago();\nconst mp = new window.MercadoPago(\"YOUR_PUBLIC_KEY\");\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with wallet_purchase in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to create a preference with the `wallet_purchase` purpose using the Mercado Pago PHP SDK.  The `wallet_purchase` setting requires users to be logged in to their Mercado Pago account.  The preference object includes an item with a title, quantity, and unit price.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-onsubmit.en.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Create a preference object\n$preference = new MercadoPago\\Preference();\n \n// Create an item in the preference\n$item = new MercadoPago\\Item();\n$item->title = 'My product';\n$item->quantity = 1;\n$item->unit_price = 75.56;\n$preference->items = array($item);\n \n// o $preference->purpose = 'wallet_purchase'; allows only logged payments\n// to allow guest payments, you can omit this property\n$preference->purpose = 'wallet_purchase';\n$preference->save();\n?>\n\n```\n\n----------------------------------------\n\nTITLE: Payment Methods Customization with JavaScript\nDESCRIPTION: This code snippet demonstrates how to customize payment methods using JavaScript. It shows how to exclude specific payment methods and types, set the maximum number of installments, and enable or disable interest-free installments. The `settings` object is passed as the third parameter in the `create()` method of the Brick component.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/brand-brick/payment-methods.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    customization: {\n      paymentMethods: {\n        excludedPaymentMethods: [\"master\"], // optional string[]. default []. options [\"master\", \"visa\", \"amex\", \"naranja\", \"maestro\", \"cabal\", \"cencosud\", \"cordobesa\", \"argencard\", \"diners\", \"tarshop\", \"cmr\", \"rapipago\", \"pagofacil\", \"mercadopago\"]\n        excludedPaymentTypes: [\"ticket\"], // optional string[]. default []. options [\"credit_card\", \"debit_card\", \"ticket\"]\n        maxInstallments: 12, // optional number. min 2 max 12\n        interestFreeInstallments: false, // optional boolean\n     },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment for Urban Transport with Mercado Pago API (cURL)\nDESCRIPTION: This cURL request demonstrates how to create a payment for urban transport services using the Mercado Pago API. It includes detailed information about the transaction, payer, and additional data specific to the urban transport industry.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/urban-transport.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}} \\\n--data-raw '{\n    \"transaction_amount\": 150.00,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"debvisa\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Pedido01\",\n    \"description\": \"PEDIDO NOVO\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"payer\": {\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"12345678909\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"title\": \"Serviço\",\n                \"description\": \"Descrição de serviço\",\n                \"category_id\": \"service\",\n                \"quantity\": 1,\n                \"unit_price\": 150\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_prime_user\": true,\n            \"is_first_purchase_online\": true,\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"206233-2002\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"230032\"\n            },\n            \"authentication_type\": \"Facebook\",\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer Details with MercadoPago SDK in Node.js\nDESCRIPTION: This snippet demonstrates retrieving customer details using the MercadoPago SDK in Node.js. It requires the MercadoPagoConfig and Customer classes, a valid customer ID, and outputs the customer information obtained from the SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/customers.en.md#2025-04-18_snippet_2\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerClient = new Customer(client);\n\ncustomerClient.get({ customerId: '<CUSTOMER_ID>' }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Testing Mercado Pago Checkout Pro\nDESCRIPTION: Steps for testing Checkout Pro integration using test buyer account and credentials.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/shopify/integration-test.en.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n11. Login to Mercado Pago with buyer test account\n12. Access store and make purchase\n    - Use buyer test account information\n    - Select OTHER for Document type\n    - Enter 9 digits for document\n    - Use test cards from documentation\n```\n\n----------------------------------------\n\nTITLE: Payment Status Simulation Configuration\nDESCRIPTION: Detailed table of payment status codes and their corresponding descriptions for testing payment scenarios across different markets\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/test-cards.en.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Payment Status | Description | Identity document |\n| --- | --- | --- |\n| `APRO` | Approved payment | (DNI) 12345678|\n| `OTHE` | Declined for general error | (DNI) 12345678 |\n| `CONT` | Pending payment | - |\n| `CALL` | Declined with validation to authorize | - |\n```\n\n----------------------------------------\n\nTITLE: Associating Facebook Ads Pixel with MercadoPago Preference\nDESCRIPTION: This code demonstrates how to associate a Facebook Ads pixel with a MercadoPago payment preference for conversion tracking. The code includes the tracks configuration with the Facebook pixel ID that should be replaced with the actual ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/preferences.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Criar um objeto preferência\nvar preference = {\n  // Associe seu píxel do Facebook\n  tracks: [\n        {\n          type: \"facebook_ad\",\n          values: {\n            \"pixel_id\": 'PIXEL_ID'\n          }\n        }\n      ]\n  //...\n};\n```\n\n----------------------------------------\n\nTITLE: Launch Payment Flow with JavaScript Function Callbacks\nDESCRIPTION: This snippet demonstrates how to initiate a payment flow with JavaScript function callbacks for success and error scenarios. The `launchPaymentFlow` function is used with an amount and callback function names prefixed with `callback_`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/start-payment-flow.es.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlaunchPaymentFlow(15.50, null,\n'callback_payment_success', 'callback_payment_error')\n```\n\n----------------------------------------\n\nTITLE: Associating Facebook Pixel with Checkout Pro Preference in Node.js\nDESCRIPTION: This code snippet shows how to associate a Facebook Pixel ID with a Checkout Pro preference using Node.js. The 'PIXEL_ID' should be replaced with the actual Facebook Pixel identifier.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  // Criar um objeto preferencia\nvar preference = {\n\n  // Asocia tu píxel de Facebook\n  tracks: [\n        {\n          type: \"facebook_ad\",\n          values: {\n            \"pixel_id\": 'PIXEL_ID'\n          }\n        }\n      ]\n  //...\n};\n```\n\n----------------------------------------\n\nTITLE: Deleting Customer Card with Mercado Pago SDK in Java\nDESCRIPTION: This snippet provides a method to delete a customer card reference associated with a customer using the CustomerCardClient from the Mercado Pago SDK. It requires the customer ID and the card ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/cards.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nCustomerCardClient client = new CustomerCardClient();\n\nString customerId = \"448870796-7ZjwhKGxILixxN\";\nString cardId = \"8987269652\";\nclient.delete(customerId, cardId);\n```\n\n----------------------------------------\n\nTITLE: Handling Authorization Code Reception\nDESCRIPTION: This snippet illustrates the format for receiving an authorization code in the user's redirect URI. The received AUTHORIZATION_CODE is essential for subsequent OAuth token requests. Ensure that the redirect URI is pre-configured correctly to accept this code.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/configuration.en.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\nhttp://<REDIRECT_URI>?code=AUTHORIZATION_CODE\n```\n\n----------------------------------------\n\nTITLE: Implementando el Script de Seguridad en Checkout\nDESCRIPTION: Agrega el código de seguridad de Mercado Pago en la página de checkout para generar el Device ID, que es esencial para mejorar la seguridad de los pagos y aumentar la tasa de aprobación.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-chopro.es.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\"></script>\n```\n\n----------------------------------------\n\nTITLE: Updating Report Settings with Python\nDESCRIPTION: In this Python snippet, the requests library is used to send a PUT request to update the release report settings on the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.en.md#2025-04-18_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nimport requests\\\n\\\nheaders = {\\\n    'accept': 'application/json',\\\n    'content-type': 'application/json',\\\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\\\n}\\\n\\\ndata = '{  \\n            \"file_name_prefix\": \"release-report-USER_ID\",\\\n            \"include_withdrawal_at_end\": true,\\\n            \"execute_after_withdrawal\": false,\\\n            \"display_timezone\": \"GMT-04\",\\\n            \"notification_email_list\": [\\\n                \"example@email.com\",\\\n                \"john@example.com\"\\\n            ],\\\n            \"frequency\": {\\\n                \"hour\": 0,\\\n                \"type\": \"monthly\",\\\n                \"value\": 1\\\n            },\\\n            \"columns\": [\\\n                {\\\n                    \"key\": \"DATE\"\\\n                },\\\n                {\\\n                    \"key\": \"SOURCE_ID\"\\\n                },\\\n                {\\\n                    \"key\": \"EXTERNAL_REFERENCE\"\\\n                }\\\n            ]\\\n        }'\\\n\\\nresponse = requests.put('https://api.mercadopago.com/v1/account/release_report/config', headers=headers, data=data)\n```\n\n----------------------------------------\n\nTITLE: Cancelling Payment in MercadoPago Java SDK\nDESCRIPTION: Cancels a specific payment by setting the access token and using the PaymentClient to invoke the cancellation method with a payment ID\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/cancellation.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\nPayment payment = client.cancel(\"<PAYMENT_ID>\");\n```\n\n----------------------------------------\n\nTITLE: OAuth Authorization URL (MLA)\nDESCRIPTION: This snippet shows the OAuth authorization URL for Argentina (MLA). It's used to redirect users to authorize the marketplace to manage their sales. Replace `<APP_ID>` with the application ID and `<REDIRECT_URI>` with the configured redirect URI.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/configuration.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\n\"https://auth.mercadopago.com.ar/authorization?client_id=<APP_ID>&response_type=code&platform_id=mp&redirect_uri=<REDIRECT_URI>\"\n```\n\n----------------------------------------\n\nTITLE: Exemplo de resposta JSON para pagamento PagoEfectivo\nDESCRIPTION: Exemplo de resposta JSON retornada pela API ao criar um pagamento PagoEfectivo. A resposta inclui o status pendente do pagamento e a URL externa com instruções para o comprador finalizar o pagamento.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mpe.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n {\n    ...,\n    \"id\": 5466310457,\n    \"status\": \"pending\",\n    \"status_detail\": \"pending_waiting_payment\",\n    ...,\n    \"transaction_details\": {\n        \"net_received_amount\": 0,\n        \"total_paid_amount\": 100,\n        \"overpaid_amount\": 0,\n        \"external_resource_url\": \"https://www.mercadopago.com.pe/payments/123456/ticket?caller_id=123456&payment_method_id=pagoefectivo_atm&payment_id=123456&payment_method_reference_id=123456\",\n        \"installment_amount\": 0,\n        \"financial_institution\": null,\n        \"payment_method_reference_id\": \"1234567890\"\n    }\n }\n]\n```\n\n----------------------------------------\n\nTITLE: Mercado Pago Credentials Table - Public Key and Access Token\nDESCRIPTION: Markdown table showing the description of Public Key and Access Token credentials used in Mercado Pago integrations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/credentials/credentials.es.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Tipo | Descripción |\n|---|---|\n| Public Key | La clave pública de la aplicación se utiliza generalmente en el frontend. Permite, por ejemplo, acceder a información sobre los medios de pago y cifrar los datos de la tarjeta. |\n| Access Token | Clave privada de la aplicación que siempre se debe utilizar en el backend para generar pagos. Es esencial mantener esta información segura en tus servidores. |\n```\n\n----------------------------------------\n\nTITLE: Integrating Facebook Pixel ID with Checkout Pro Preference\nDESCRIPTION: This code snippet demonstrates how to associate a Facebook pixel ID with a Checkout Pro preference. It allows tracking of ad conversions from Facebook campaigns.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  // Crear un objeto preferencia\n  $preference = new MercadoPago\\Preference();\n\n  // Asocia tu píxel de Facebook\n  $preference->tracks = array(\n    array(\n      'type' => 'facebook_ad',\n      'values'=> array(\n        'pixel_id' => 'PIXEL_ID'\n      )\n    )\n  );\n\n  // ...\n  // Guardar y postear la preferencia\n  $preference->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago Payment Form for Brazil and Argentina (MLB, MLA)\nDESCRIPTION: Configures and initializes a Mercado Pago payment form for Brazil and Argentina regions. The code sets up form fields with Portuguese placeholders, event handlers for form mounting and submission, and handles payment processing. It generates a cardtoken that represents card data securely and can be used once within 7 days.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.es.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst cardForm = mp.cardForm({\n    amount: \"100.5\",\n    iframe: true,\n    form: {\n        id: \"form-checkout\",\n        cardNumber: {\n            id: \"form-checkout__cardNumber\",\n            placeholder: \"Número do cartão\",\n        },\n        expirationDate: {\n            id: \"form-checkout__expirationDate\",\n            placeholder: \"MM/AA\",\n        },\n        securityCode: {\n            id: \"form-checkout__securityCode\",\n            placeholder: \"Código de segurança\",\n        },\n        cardholderName: {\n            id: \"form-checkout__cardholderName\",\n            placeholder: \"Titular do cartão\",\n        },\n        issuer: {\n            id: \"form-checkout__issuer\",\n            placeholder: \"Banco emissor\",\n        },\n        installments: {\n            id: \"form-checkout__installments\",\n            placeholder: \"Parcelas\",\n        },\n        identificationType: {\n            id: \"form-checkout__identificationType\",\n            placeholder: \"Tipo de documento\",\n        },\n        identificationNumber: {\n            id: \"form-checkout__identificationNumber\",\n            placeholder: \"Número do documento\",\n        },\n        cardholderEmail: {\n            id: \"form-checkout__cardholderEmail\",\n            placeholder: \"E-mail\",\n        },\n    },\n    callbacks: {\n        onFormMounted: error => {\n            if (error) return console.warn(\"Form Mounted handling error: \", error);\n            console.log(\"Form mounted\");\n        },\n        onSubmit: event => {\n            event.preventDefault();\n\n            const {\n                paymentMethodId: payment_method_id,\n                issuerId: issuer_id,\n                cardholderEmail: email,\n                amount,\n                token,\n                installments,\n                identificationNumber,\n                identificationType,\n            } = cardForm.getCardFormData();\n\n            fetch(\"/process_order\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    total_amount: amount, // deve ser uma string com o formato ..0.00\n                    description: description,\n                    payer: {\n                        email,\n                        identification: {\n                            type: identificationType,\n                            number: identificationNumber\n                        }\n                    },\n                    transactions: [\n                        {\n                            amount, // deve ser uma string com o formato ..0.00\n                            payment_method: {\n                                token,\n                                id: payment_method_id,\n                                type: type, // deve ser \"credit_card\" ou \"debit_card\",\n                                installments: Number(installments)\n                            }\n                        }\n                    ]\n                }),\n            });\n        },\n        onFetching: (resource) => {\n            console.log(\"Fetching resource: \", resource);\n\n            // Animate progress bar\n            const progressBar = document.querySelector(\".progress-bar\");\n            progressBar.removeAttribute(\"value\");\n\n            return () => {\n                progressBar.setAttribute(\"value\", \"0\");\n            };\n        }\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Back URLs in Mercado Pago SDK - Python\nDESCRIPTION: This Python snippet explains how to define back URLs using the Mercado Pago SDK for post-payment redirection based on payment status. Incorporates success, failure, and pending URLs, and the auto_return attribute for automatic redirection upon approval. Prerequisite: Mercado Pago Python SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/redirection.en.md#2025-04-18_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\npreference_data = {\\n    \\\"back_urls\\\": {\\n        \\\"success\\\": \\\"https://www.tu-sitio/success\\\",\\n        \\\"failure\\\": \\\"https://www.tu-sitio/failure\\\",\\n        \\\"pending\\\": \\\"https://www.tu-sitio/pendings\\\"\\n    },\\n    \\\"auto_return\\\": \\\"approved\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago Payment Form for Mexico (MLM)\nDESCRIPTION: This code demonstrates how to initialize a Mercado Pago card form for Mexico which does not require identification fields. It configures form fields, handles submission with token generation, and implements callbacks for form mounting, submission, and resource fetching.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.en.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst cardForm = mp.cardForm({\namount: \"100.5\",\niframe: true,\nform: {\nid: \"form-checkout\",\ncardNumber: {\nid: \"form-checkout__cardNumber\",\nplaceholder: \"Card Number\",\n},\nexpirationDate: {\nid: \"form-checkout__expirationDate\",\nplaceholder: \"MM/YY\",\n},\nsecurityCode: {\nid: \"form-checkout__securityCode\",\nplaceholder: \"Security Code\",\n},\ncardholderName: {\nid: \"form-checkout__cardholderName\",\nplaceholder: \"Cardholder\",\n},\nissuer: {\nid: \"form-checkout__issuer\",\nplaceholder: \"Issuing bank\",\n},\ninstallments: {\nid: \"form-checkout__installments\",\nplaceholder: \"Installments\",\n},\ncardholderEmail: {\nid: \"form-checkout__cardholderEmail\",\nplaceholder: \"Email\",\n},\n},\ncallbacks: {\nonFormMounted: error => {\nif (error) return console.warn(\"Form Mounted handling error: \", error);\nconsole.log(\"Form mounted\");\n},\nonSubmit: event => {\nevent.preventDefault();\n\nconst {\npaymentMethodId: payment_method_id,\nissuerId: issuer_id,\ncardholderEmail: email,\namount,\ntoken,\ninstallments,\nidentificationNumber,\nidentificationType,\n} = cardForm.getCardFormData();\n\nfetch(\"/process_payment\", {\nmethod: \"POST\",\nheaders: {\n\"Content-Type\": \"application/json\",\n},\nbody: JSON.stringify({\ntoken,\nissuer_id,\npayment_method_id,\ntransaction_amount: Number(amount),\ninstallments: Number(installments),\ndescription: \"Product Description\",\npayer: {\nemail,\nidentification: {\ntype: identificationType,\nnumber: identificationNumber,\n},\n},\n}),\n});\n},\nonFetching: (resource) => {\nconsole.log(\"Fetching resource: \", resource);\n\n// Animate progress bar\nconst progressBar = document.querySelector(\".progress-bar\");\nprogressBar.removeAttribute(\"value\");\n\nreturn() => {\nprogressBar.setAttribute(\"value\", \"0\");\n};\n}\n},\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Payment Request Using cURL for Mercado Pago\nDESCRIPTION: This cURL command is used to create a payment request in the Mercado Pago API. It requires an access token for authentication and contains transaction details, payer information, and item metadata. The structure includes necessary headers and a JSON payload with transaction-specific information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/tickets-and-entretainment.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--data-raw '{\\n    \"transaction_amount\": 12.34,\\n    \"installments\": 1,\\n    \"statement_descriptor\": \"LOJA 123\",\\n    \"capture\": true,\\n    \"binary_mode\": false,\\n    \"sponsor_id\": null,\\n    \"application_fee\": null,\\n    \"payment_method_id\": \"debvisa\",\\n    \"token\": \"{{card_token_id}}\",\\n    \"external_reference\": \"Pedido01\",\\n    \"description\": \"PEDIDO NOVO - INGRESSO\",\\n    \"notification_url\": \"{{notification_url}}\",\\n    \"metadata\": {\\n        \"order_number\": \"order_01\"\\n    },\\n    \"payer\": {\\n        \"email\": \"test_user_123456789@testuser.com\",\\n        \"identification\": {\\n            \"type\": \"CPF\",\\n            \"number\": \"12345678909\"\\n        }\\n    },\\n    \"additional_info\": {\\n        \"items\": [\\n            {\\n                \"id\": \"1941\",\\n                \"title\": \"25/08/2022 | Pista Inteira5 lote - GREEN VALLEY GRAMADO 2022\",\\n                \"description\": \"25/08/2022 | Pista Inteira5 lote - GREEN VALLEY GRAMADO 2022\",\\n                \"category_id\": \"Tickets\",\\n                \"quantity\": 1,\\n                \"unit_price\": 100.00,\\n                \"event_date\": \"2019-12-25T19:30:00.000-03:00\"\\n            }\\n        ],\\n        \"payer\": {\\n            \"first_name\": \"Nome\",\\n            \"last_name\": \"Sobrenome\",\\n            \"is_prime_user\": true,\\n            \"is_first_purchase_online\": true,\\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\\n            \"phone\": {\\n                \"area_code\": \"11\",\\n                \"number\": \"987654321\"\\n            },\\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\",\\n            \"authentication_type\":\"Gmail\"\\n        }\\n    }\\n}'\n```\n\n----------------------------------------\n\nTITLE: Canceling Payments in Mercado Pago with Python\nDESCRIPTION: Code to cancel a payment using the Mercado Pago Python SDK. This involves updating the payment status to 'cancelled' by constructing a payment data object with the new status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/cancel-reserve.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\npayment_data = {\n  \"status\": \"cancelled\"\n}\n\npayment_response = sdk.payment().update(payment_id, payment_data)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Mercado Pago Credentials in Ruby\nDESCRIPTION: This Ruby snippet illustrates how to require the Mercado Pago SDK and initialize it with the access token for future API interactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.en.md#2025-04-18_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# Mercado Pago SDK\nrequire 'mercadopago'\n# Add Your credentials\nsdk = Mercadopago::SDK.new('PROD_ACCESS_TOKEN')\n```\n\n----------------------------------------\n\nTITLE: Proper Container Implementation for Bricks\nDESCRIPTION: Shows the correct way to reference a DOM container for Brick rendering to avoid \"Container Not Found\" errors, emphasizing the importance of using ID selectors and ensuring the container is rendered before initializing the Brick.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/possible-errors.en.md#2025-04-18_snippet_1\n\nLANGUAGE: Javascript\nCODE:\n```\nconst renderPaymentBrick = async (bricksBuilder) => {\n const settings = { ... };\n window.paymentBrickController = await bricksBuilder.create(\n   \"payment\",\n   \"paymentBrick_container\",\n   settings\n );\n};\n\nawait renderPaymentBrick(bricksBuilder);\n\n...\n\n<div id=\"paymentBrick_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Generating Successful Debt Creation Report in CSV for Mercado Pago\nDESCRIPTION: This CSV snippet shows the format of a successful debt creation report. It includes a reference number and a success status indicator.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/format-specifications.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\n\"ext2024030615501\", \"Success\"\n```\n\n----------------------------------------\n\nTITLE: Generating QR Code with curl\nDESCRIPTION: This snippet demonstrates how to generate a QR code using a public third-party API. The API requires parameters such as the recipient's name, city, location (obtained from a previous request), output format, and size. It uses a GET request to the specified endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/pix-payments/generate-qr-code.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request GET 'https://gerarqrcodepix.com.br/api/v1?nome=NOME_RECEBEDOR&cidade=CIDADE_RECEBEDOR&location=LOCATION&saida=qr&tamanho=256'\n```\n\n----------------------------------------\n\nTITLE: Associating Facebook Ads Pixel with Checkout Pro in C#\nDESCRIPTION: This C# snippet shows how to associate a Facebook Ads pixel with a Mercado Pago preference. Essential dependencies include PreferenceTrackRequest and PreferenceTrackValuesRequest, with the pixel ID as a key parameter for tracking ad conversions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.en.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Associate your Facebook pixel\nvar tracks = new List<PreferenceTrackRequest>\n{\nnew PreferenceTrackRequest\n{\nType = \"facebook_ad\",\nValues = new PreferenceTrackValuesRequest\n{\nPixelId = \"PIXEL_ID\",\n},\n},\n};\n\nvar request = new PreferenceRequest\n{\n// ...\ntracks = tracks,\n};\n\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago cURL\nDESCRIPTION: This snippet demonstrates how to create a payment using cURL to directly interact with the Mercado Pago API. It constructs a JSON payload with transaction details, including the transaction amount, token, and payer information, and sends it as a POST request to the /v1/payments endpoint. The X-Idempotency-Key is included in the header.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.es.md#2025-04-18_snippet_10\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n   -H 'accept: application/json' \\\n   -H 'content-type: application/json' \\\n   -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n   -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n   'https://api.mercadopago.com/v1/payments' \\\n   -d '{\n         \"transaction_amount\": 100,\n         \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n         \"description\": \"Blue shirt\",\n         \"installments\": 1,\n         \"payment_method_id\": \"visa\",\n         \"issuer_id\": 310,\n         \"payer\": {\n           \"email\": \"PAYER_EMAIL\"\n         }\n   }'\n \n\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with Reserved Values in C#\nDESCRIPTION: Uses Mercado Pago's C# SDK to create a payment with capture=false. Sets up a payment request with transaction amount, token, and other required details to reserve the payment amount without capturing it immediately.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/make-value-reserve.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar paymentRequest = new PaymentCreateRequest\n{\n    TransactionAmount = 100,\n    Token = \"ff8080814c11e237014c1ff593b57b4d\",\n    Description = \"Título do produto\",\n    Installments = 1,\n    PaymentMethodId = \"visa\",\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"test_user_19653727@testuser.com\",\n    },\n    Capture = false,\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest);\n```\n\n----------------------------------------\n\nTITLE: Ativando Modo Binário em Preferências de Checkout (JSON)\nDESCRIPTION: Este snippet demonstra como ativar o modo binário nas preferências de checkout do Mercado Pago. O parâmetro 'binary_mode' é definido como true para garantir que os pagamentos sejam apenas aprovados ou recusados instantaneamente.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/binary-mode.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"binary_mode\": true\n```\n\n----------------------------------------\n\nTITLE: Unpairing Bluetooth Device from Point Smart\nDESCRIPTION: Implementation for unpairing a Bluetooth device using the BluetoothDevicesPairing class through MPManager. The code handles both success and error cases, using the device address as a parameter.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/pair-unpair.en.md#2025-04-18_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval bluetoothPairing = MPManager.bluetooth.paring\n\nbluetoothPairing.unPairDevice(address) { response ->\n   response.doIfSuccess { result ->\n       // Manage pairing success\n       val bondState = result.first\n       val deviceModel = result.second\n       // ... Perform additional actions if necessary\n   }.doIfError { error ->\n       // Manage the error case if necessary\n   }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal BluetoothDevicesPairing bluetoothPairing = MPManager.INSTANCE.getBluetooth().getParing();\n\nfinal Function1<MPResponse<Pair<BluetoothBondState, BluetoothDeviceModel>>, Unit> callback =\n   (final MPResponse<Pair<BluetoothBondState, BluetoothDeviceModel>> response) -> {\n     if (response.getStatus() == ResponseStatus.SUCCESS) {\n       final BluetoothBondState bondState = response.getData().getFirst();\n       final BluetoothDeviceModel deviceModel = response.getData().getSecond();\n       // Perform additional actions if necessary\n     } else {\n       // Manage the error case if necessary\n     }\n     return Unit.INSTANCE;\n   };\n\nbluetoothPairing.unPairDevice(address, callback);\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Brick Button Text in JavaScript\nDESCRIPTION: This snippet demonstrates how to customize the theme and value proposition of the Wallet Brick button using JavaScript. It sets the theme to 'default' and the value proposition to 'practicality'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-texts.es.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n        theme: 'default',\n        customStyle: {\n            valueProp: 'practicality',\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Preference Details by ID - Java\nDESCRIPTION: This snippet retrieves payment information for a specific preference using its ID via the Mercado Pago Java SDK. The `PreferenceClient.get()` method is used to fetch details for a given `preferenceId`. Requires the Mercado Pago SDK and is sensitive to the correct format of preference ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/preferences.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n\nPreferenceClient client = new PreferenceClient();\n\nString preferenceId = \"202809963-a2201f8d-11cb-443f-adf6-de5a42eed67d\";\nclient.get(preferenceId);\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Methods Across Languages\nDESCRIPTION: Demonstrates how to fetch available payment methods using the Mercado Pago SDK across different programming languages\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nMercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n$payment_methods = MercadoPago::get(\"/v1/payment_methods\");\n\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nvar Mercadopago = require('mercadopago');\nMercadopago.configurations.setAccessToken(config.access_token);\n\nvar response = await Mercadopago.payment_methods.listAll();\nvar payment_methods = response.body;\n```\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nPaymentMethodClient client = new PaymentMethodClient();\nclient.list();\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\npayment_methods_response = sdk.payment_methods.get()\npayment_methods = payment_methods_response[:response]\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.PaymentMethod;\nusing MercadoPago.Config;\nusing MercadoPago.Resource;\nusing MercadoPago.Resource.PaymentMethod;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar client = new PaymentMethodClient();\nResourcesList<PaymentMethod> paymentMethods = await client.ListAsync();\n```\n\nLANGUAGE: python\nCODE:\n```\nimport market\nsdk = Mercadopago.SDK(\"ACCESS_TOKEN\")\n\npayment_methods_response = sdk.payment_methods().list_all()\npayment_methods = payment_methods_response[\"response\"]\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n-H 'accept: application/json' \\\n-H 'content-type: application/json' \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n'https://api.mercadopago.com/v1/payment_methods'\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Item Preference in Ruby\nDESCRIPTION: This code shows how to create a preference with multiple items using Ruby. It demonstrates setting up the preference data and creating it using the Mercado Pago SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n# Create preference data with items\npreference_data = {\n  items: [\n    {\n      title: 'Mi producto 1',\n      quantity: 1,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 75.56\n    },\n    {\n      title: 'Mi producto 2',\n      quantity: 2,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 96.56\n    }\n  ]\n}\n\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Resolving a Disabled Register QR Code in curl\nDESCRIPTION: This snippet handles the resolution of a QR code from a merchant whose register is not enabled for interoperability. It utilizes specific QR data relevant to the test.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/interoperable-accepting-flow-test.en.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/instore/v2/beta/external/resolve?data=00020101021143530016com.mercadolibre0129https://mpago.la/pos/16853808501300091234567895204970053030325802AR5909FULL NAME6010CITY LEGAL63049102' \\\n--header 'Authorization: Bearer {access_token_wallet}'\n```\n\n----------------------------------------\n\nTITLE: Create Customer Data\nDESCRIPTION: This snippet creates a new customer in the system. Requires a dictionary including the customer's email address.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.en.md#2025-04-18_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\ncustomer_data = {\n    \"email\": \"email@test.com\"\n}\n\nsdk.customer().create(customer_data)\n```\n\n----------------------------------------\n\nTITLE: Getting Paired Devices using BluetoothDiscoverDevices in Kotlin\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of paired Bluetooth devices using the `getPairedDevices` function of the `BluetoothDiscoverDevices` class in Kotlin. It accesses the `BluetoothDiscoverDevices` instance via the `MPManager` object and handles both success and error cases in the callback.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/manage-connections.es.md#2025-04-18_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval bluetoothDiscoverDevices = MPManager.bluetooth.discover\n\nbluetoothDiscoverDevices.getPairedDevices { result ->\n   result\n       .doIfSuccess { devices ->\n           // Trabajar con la lista de dispositivos emparejados\n       }\n       .doIfError { error ->\n           // Manejar el caso de error si es necesario\n       }\n}\n```\n\n----------------------------------------\n\nTITLE: Configurar URLs de retorno en Ruby para Checkout Pro\nDESCRIPTION: Ejemplo de cómo configurar las URLs de retorno y auto_return en Ruby para la preferencia de pago de Checkout Pro. Define URLs para escenarios de éxito, fallo y pendiente.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-return-urls.es.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# ...\npreference_data = {\n  # ...\n  back_urls = {\n    success: 'https://www.tu-sitio/success',\n    failure: 'https://www.tu-sitio/failure',\n    pending: 'https://www.tu-sitio/pendings'\n  },\n  auto_return: 'approved'\n  # ...\n}\n# ...\n```\n\n----------------------------------------\n\nTITLE: Adding Coupon Before Payment with cURL\nDESCRIPTION: This cURL command allows the user to apply a coupon discount to the transaction before payment. Required parameters include Authorization, x-payer-token, amount, and coupon. The command checks if the transaction amount is greater than zero and if the coupon exists, returning success or error responses accordingly.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/create-discount-promise-with-coupon.en.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n  'https://api.mercadopago.com/v2/wallet_connect/discounts' \\\n  --header 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --header 'x-payer-token: <PAYER_TOKEN>' \\\n  --header 'Content-Type: application/json' \\\n  -d '{\\n      \"amount\": 550,\\n      \"coupon\": \"<COUPON>\"\\n  }'\n```\n\n----------------------------------------\n\nTITLE: Offering Free Trial for Subscription with PUT Request\nDESCRIPTION: Enables setting up a free trial period for a subscription by specifying trial duration and frequency type using a PUT request to the preapproval plan endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/subscription-management.en.md#2025-04-18_snippet_4\n\nLANGUAGE: rest\nCODE:\n```\nPUT /preapproval_plan/{id}\n{\n    \"free_trial\": \"trial_duration\",\n    \"frequency\": \"duration_value\",\n    \"frequency_type\": \"days/months\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Payment Expiration Date in C#\nDESCRIPTION: This C# code demonstrates how to assign an expiration date to a payment request. It requires the date to be formatted in ISO 8601 format.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\npaymentCreateRequest.DateOfExpiration = DateTime.Parse(\"2020-05-30T23:59:59.000-04:00\");\n```\n\n----------------------------------------\n\nTITLE: Handling Deep Links in SwiftUI\nDESCRIPTION: Implementation of deep link handling in a SwiftUI application, demonstrating URL parsing and view navigation based on received deep link.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/swift.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: SwiftUI\nCODE:\n```\n.onOpenURL { url in\n    if let components = URLComponents(url: url, resolvingAgainstBaseURL: false),\n       components.scheme == \"iosapp\",\n       components.host == \"congrat\",\n       components.path.contains(\"success\") {\n        \n        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {\n            if let presenting = UIApplication.shared.windows.first?.rootViewController?.presentedViewController {\n                presenting.dismiss(animated: true, completion: nil)\n                showSuccessView = true\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Token with OauthClient in Java\nDESCRIPTION: This snippet demonstrates how to use the OauthClient class to create a token with an authorization code. It requires an instance of OauthClient and the corresponding authorization code received earlier. The `createCredential` method is called with the authorization code as parameter, where the second parameter can be null for initial token creation. This is part of the authentication flow necessary for vendor app operations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/oauth.en.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n\nOauthClient client = new OauthClient();\n\nString authorizationCode = \"TG-XXXXXXXX-241983636\";\nclient.createCredential(authorizationCode, null);\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Brick texts including Action and Complement in React\nDESCRIPTION: This snippet demonstrates how to customize the texts for the action, action complement, and value proposition of the Wallet Brick using React. The `customization.visual.texts` object allows you to modify these strings. Verify that `actionComplement` is valid for the targeted Mercado Pago region.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/change-texts.en.md#2025-04-18_snippet_3\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n   texts: {\n     action: 'pay',\n     actionComplement: 'amount',\n     valueProp: 'payment_methods_logos',\n     ...,\n   }\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Sub-merchant Data in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to create a payment with sub-merchant data using the Mercado Pago SDK for PHP. It initializes the client with an access token, defines the payment request including the `forward_data.sub_merchant` property, and handles potential exceptions during the payment creation process. The snippet uses `var_dump` to output the payment object or any errors encountered.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subcredenciadores-payfacs/integration-update.es.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire 'vendor/autoload.php';\n\nuse MercadoPago\\Client\\Payment\\PaymentClient;\nuse MercadoPago\\Client\\Common\\RequestOptions;\nuse MercadoPago\\MercadoPagoConfig;\n\nMercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n$client = new PaymentClient();\n\n$request_options = new RequestOptions();\n$request = [\n    \"transaction_amount\" => (float) '100',\n    \"token\" => '545950fe518e85df69052e1765898e92',\n    \"description\" =>'teste',\n    \"payment_method_id\" => 'visa',\n    \"installments\" => 1,\n    \"payer\" => [\n        \"email\" => 'test_user_11264832@testuser.com',\n    ],\n    \"forward_data\" => [\n        \"sub_merchant\" => [\n            \"sub_merchant_id\" => \"123123\",\n            \"mcc\" => \"5462\",\n            \"country\" => \"BRA\",\n            \"address_door_number\" => 1,\n            \"zip\" => \"2222222\",\n            \"document_number\" => \"222222222222222\",\n            \"city\" => \"SÃO PAULO\",\n            \"address_street\" => \"RUA A\",\n            \"legal_name\" => \"LOJINHA DO ZÉ\",\n            \"region_code_iso\" => \"BR-MG\",\n            \"region_code\" => \"BR\",\n            \"document_type\" => \"CNPJ\",\n            \"phone\" => \"123123123\",\n            \"url\" => \"www.nomedofacilitador.com.br\"\n        ]\n    ]\n];\n\ntry{\n    $payment = $client->create( $request, $request_options);\n    var_dump($payment);\n\n} catch (MPApiException $e) {\n    var_dump($e);\n} catch (\\Exception $e) {\n    // Handle all other exceptions\n    var_dump($e);\n}\n// echo \"Content: \";\n// var_dump($e->getApiResponse()->getContent());\n// echo \"\\n\";\n// } catch (\\Exception $e) {\n// // Handle all other exceptions\n// echo $e->getMessage();\n// }\n\n```\n\n----------------------------------------\n\nTITLE: Configurando Data de Vencimento em cURL\nDESCRIPTION: Exemplo de como definir a data de vencimento em uma requisição cURL para pagamento em dinheiro usando o formato ISO 8601. A data deve estar entre 1 e 30 dias a partir da emissão.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_53\n\nLANGUAGE: curl\nCODE:\n```\n===\nA data usa o formato ISO 8601: yyyy-MM-dd'T'HH:mm:ssz\n===\n\n\"date_of_expiration\": \"2020-05-30T23:59:59.000-04:00\",\n```\n\n----------------------------------------\n\nTITLE: Adding Images with Alt Text in Markdown\nDESCRIPTION: Shows the basic Markdown syntax for inserting images with alternative text, which is important for accessibility purposes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/style-guide/images.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![texto alternativo](path de la imagen dentro del repositorio)\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Providers\nDESCRIPTION: Configuration of app.modules.ts to include WebIntent and AppVersion services in the providers array.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/cross-platform-ionic.en.md#2025-04-18_snippet_1\n\nLANGUAGE: ionic\nCODE:\n```\nimport { WebIntent } from '@ionic-native/web-intent/ngx'; \nimport { AppVersion } from '@ionic-native/app-version/ngx'; \n… \nproviders: [ \n\tWebIntent, \n\tAppVersion \n], \n…\n```\n\n----------------------------------------\n\nTITLE: Configuring Billing Information\nDESCRIPTION: Example of configuring billing information including personal details, tax information and billing address.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/add-confirmation-step.en.md#2025-04-18_snippet_4\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n  // ...\n  initialization: {\n    billing: {\n      firstName: \"<FIRST_NAME>\", // optional\n      lastName: \"<LAST_NAME>\", // optional\n      taxRegime: \"<TAX_REGIME>\", // optional\n      taxIdentificationNumber: \"<TAX_IDENTIFICATION_NUMBER>\",\n      identification: { // optional\n        type: \"<IDENTIFICATION_TYPE>\",\n        number: \"<IDENTIFICATION_NUMBER>\",\n      },\n      billingAddress: { // optional\n        streetName: \"<STREET_NAME>\",\n        streetNumber: \"<STREET_NUMBER>\",\n        neighborhood: \"<PAYER_NEIGHBORHOOD>\", // optional\n        city: \"<CITY>\", // optional\n        federalUnit: \"<FED_UNIT>\", // optional\n        zipCode: \"<ZIP_CODE>\",\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Create Card Token with Mercado Pago\nDESCRIPTION: This JavaScript code snippet demonstrates how to create a secure card token using the Mercado Pago SDK.  The `createCardToken` function prevents the form from submitting until a token is generated, and upon success, it populates a hidden field (`token`) with the token ID. The token is generated using `mp.fields.createCardToken` with cardholder details and identification information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/secure-fields-core.es.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Step #createCardToken\nconst formElement = document.getElementById('form-checkout');\n  formElement.addEventListener('submit', e => createCardToken(e));\n  const createCardToken = async (event) => {\n    try {\n      const tokenElement = document.getElementById('token');\n      if (!tokenElement.value) {\n        event.preventDefault();\n        const token = await mp.fields.createCardToken({\n          cardholderName: document.getElementById('form-checkout__cardholderName').value,----[mla, mlb, mlu, mlc, mpe, mco]----\n          identificationType: document.getElementById('form-checkout__identificationType').value,------------\n          identificationNumber: document.getElementById('form-checkout__identificationNumber').value,\n        });\n        tokenElement.value = token.id;\n        formElement.requestSubmit();\n      }\n    } catch (e) {\n      console.error('error creating card token: ', e)\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating SPEI Transfer Payment with C#\nDESCRIPTION: Creates a SPEI bank transfer payment using MercadoPago C# SDK. The code configures the access token, initializes a payment client, defines payer and payment data with transaction amount, then creates the payment and extracts the payment link.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.es.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ACCESS_TOKEN\";\n\nvar client = new PaymentClient();\n\nvar payer = new PaymentPayerRequest() {\n    Type = \"customer\",\n    Email = request.Email,\n    EntityType = \"individual\",\n    FirstName = request.PayerFirstName,\n    LastName = request.PayerLastName\n};\n\nvar paymentCreateRequest = new PaymentCreateRequest() {\n  TransactionAmount = 5000,\n    Description = \"description\",\n    PaymentMethodId = \"clabe\",\n    AdditionalInfo = additionalInfo,\n    CallbackUrl = \"https://your-site.com\",\n    Payer = payer\n};\n\nvar payment = await client.CreateAsync(paymentCreateRequest);\nvar paymentLink = payment.TransactionDetails.externalResourceUrl;\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference in PHP\nDESCRIPTION: This PHP snippet illustrates the process of creating a payment preference for a product using the Mercado Pago SDK. It includes item details and how to retrieve the preference ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.en.md#2025-04-18_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$client = new PreferenceClient();\n$preference = $client->create([\n  \"items\"=> array(\n    array(\n      \"title\" => \"My product\",\n      \"quantity\" => 1,\n      \"unit_price\" => 25\n    )\n  )\n]);\n?>\n```\n\n----------------------------------------\n\nTITLE: Replacing with Card Payment Brick Container\nDESCRIPTION: This snippet demonstrates replacing the existing Web Tokenize Checkout form with a placeholder div for the Card Payment Brick, a necessary step for migrating to Checkout Bricks.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-clientside.en.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"paymentBrick_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Generating Duplicate Ticket API Request\nDESCRIPTION: HTTP GET request endpoint for generating a duplicate payment ticket using the Mercado Pago Payments API. Requires payment ID and seller's Access Token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/faqs/payments.en.md#2025-04-18_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.mercadopago.com/v1/payments/PAYMENT_ID\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Reserved Amount in MercadoPago - Ruby\nDESCRIPTION: In this Ruby snippet, capturing a partial payment amount is demonstrated using the 'mercadopago' SDK. The minimal requirements include authenticating with an access token and constructing a request to modify the transaction amount and capture status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/capture-authorized-payment.en.md#2025-04-18_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\nrequest = {\ntransaction_amount: 75,\ncapture: true\n}\n\npayment_response = sdk.payment.update(payment_id, request)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Processing Payments with MercadoPago using CURL\nDESCRIPTION: This snippet shows how to make a POST request using CURL to MercadoPago's API to create a payment. The necessary headers and payment data are defined in the request. It is crucial to replace placeholders with actual values.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.en.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/payments' \\\n    -d '{\n          \"transaction_amount\": 100,\n          \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n          \"description\": \"Blue shirt\",\n          \"installments\": 1,\n          \"payment_method_id\": \"visa\",\n          \"issuer_id\": 310,\n          \"payer\": {\n            \"email\": \"test@test.com\"\n          }\n    }'\n\n```\n\n----------------------------------------\n\nTITLE: Mercado Pago Module Configuration (MLA)\nDESCRIPTION: This snippet configures the Mercado Pago module for Tiendanube, focusing on payment options for the Argentinian market (MLA). It details Checkout Pro and Checkout API options, including supported payment methods such as credit/debit cards and cash payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/nuvemshop/landing.es.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"bullet_section_with_media:\\n - title: Pago\n - type: normal\n - message: Con el módulo de Mercado Pago puedes configurar pagos mediante:\n - benefit_title: Checkout Pro\n - benefit_message: Los compradores podrán pagar con una cuenta de Mercado Pago y todo el proceso de compra se realizará en nuestro entorno, lo que facilita el pago con tarjetas de débito, de crédito y otros medios de pago (redes de pago en efectivo y Cuotas sin Tarjeta).\n - benefit_title: Checkout API\n - benefit_message: El pago se realiza sin salir de tu tienda virtual con tarjetas (crédito y debito) y redes de pago en efectivo.\n - image: /nuvemshop/landing-2.png \"\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference in Python\nDESCRIPTION: In this Python snippet, a payment preference object is created and configured for product details before sending it to Mercado Pago to retrieve the preference ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.en.md#2025-04-18_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# Create a preference object\npreference_data = {\n  # the purpose: 'wallet_purchase', allows only logged payments\n  # to allow guest payments you can omit this property\n  purpose: 'wallet_purchase',\n  items: [\n    {\n      title: 'Meu produto',\n      unit_price: 75,\n      quantity: 1\n    }\n  ]\n}\n\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response['response']\n\n# This value is the preferenceId you'll use in the HTML on Brick startup\npreference_id = preference['id']\n```\n\n----------------------------------------\n\nTITLE: Example CSV Format for Card Data Migration in Mercado Pago\nDESCRIPTION: Example of the CSV format required for migrating card vaults to tokenization. The file uses comma-separated values with specific fields for customer and card information. All fields shown are mandatory and follow a predefined structure.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/batch-payments-vault-migration/vault-migration/input-format-vault-migration.es.md#2025-04-18_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nFiller,external_reference,customer_email,Filler,Filler,card_number,expiration_month,expiration_year,cardholder_name,Filler\n,217307543,test1@gmail.com,,,4356141052114191,11,25,Mary Meir,\n,485342254,test2@gmail.com,,,4356141052114192,02,28,Jhon Doe,\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with MercadoPago SDK in Ruby\nDESCRIPTION: This code snippet demonstrates how to create a payment using the MercadoPago SDK in Ruby. It includes setting up the SDK with an access token, defining custom headers with an idempotency key, and creating a payment request with specific details such as token, installments, amount, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ruby/create-payments.es.md#2025-04-18_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_request = {\n  token: 'ff8080814c11e237014c1ff593b57b4d',\n  installments: 1,\n  transaction_amount: 100,\n  payer: {\n    type: 'customer',\n    id: '123456789-jxOV430go9fx2e'\n  }\n}\npayment_response = sdk.payment.create(payment_request, custom_request_options)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Embedding a Subscription Button with HTML\nDESCRIPTION: This snippet allows embedding a button on your website to redirect users to the subscription plan. The HTML code, displayed in Mercado Pago's interface, is meant to be copied and pasted directly into your website's HTML structure, providing a direct link to the subscription.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscription-plans/create-subscription-plan.en.md#2025-04-18_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n\"<HTML code will be displayed ready to copy and paste into your website.\"\n```\n\n----------------------------------------\n\nTITLE: Processing Pix Refunds with MercadoPago API in Ruby\nDESCRIPTION: Ruby implementation for creating a payment refund using the MercadoPago SDK. This snippet demonstrates configuring custom headers to use the X-Render-In-Process-Refunds feature for better handling of refunds in contingency status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\ndata = {\n amount: 20\n}\n\ncustom_headers = {\n 'X-Render-In-Process-Refunds': 'true'\n}\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\nrefund = sdk.refund.create(payment_id, refund_data: data, request_options: custom_request_options)\n```\n\n----------------------------------------\n\nTITLE: Processing Approved Payments Responses in JSON\nDESCRIPTION: This JSON snippet represents an approved payment response from the Mercado Pago API. It includes information such as payment ID, status, transaction amount, payment method, and timestamps. No additional dependencies aside from a basic JSON parser are required. Inputs include payment request details, while outputs illustrate successful payment attributes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/capture-payment-returns.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"id\":10458724,\n   \"status\":\"approved\",\n   \"wallet_payment\":{\n      \"transaction_amount\":700.50,\n      \"description\":\"Payment for the purchase of furniture\",\n      \"external_reference\":\"Pago_123\"\n   },\n   \"payments\":[\n      {\n         \"id\":3870106238,\n         \"status\":\"approved\",\n         \"status_detail\":\"accredited\",\n         \"payment_type_id\":\"credit_card\",\n         \"payment_method_id\":\"visa\",\n         \"transaction_amount\":700.50,\n         \"installments\":1,\n         \"description\":\"Payment for the purchase of furniture\",\n         \"capture\":true,\n         \"external_reference\":\"Pago_123\"\n      }\n   ],\n   \"disbursements\": [\n       {\n         \"collector_id\": \"ID_COLLECTOR\"\n       }\n   ],\n   \"payer\":{\n      \"id\":786547\n   },\n   \"site_id\": \"MLM\",\n   \"binary_mode\":true,\n   \"date_created\":\"2018-10-20T09:34:20.518-04:00\",\n   \"date_last_updated\":\"2018-10-20T09:34:20.518-04:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: CSV Output Format for Vault to Tokenization Migration\nDESCRIPTION: Example of the CSV output file structure generated when migrating payment vaults to tokenization. The file contains columns for status, customer ID, card ID, reference ID, and status details that indicate the result of each migration attempt.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/batch-payments-vault-migration/vault-migration/output-format-vault-migration.en.md#2025-04-18_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nSTATUS,CUSTOMER_ID,CARD_ID,REFERENCE_ID,STATUS_DETAIL\nFINALIZED,1234-cust_id,270,ref_id_externa_2p_1800008,Card ID updated\nFINALIZED,1234-cust_id,270,ref_id_externa_2p_1800010,\nFINALIZED,1234-cust_id,270,ref_id_externa_2p_1800007,Card ID updated\nFINALIZED,1234-cust_id,270,ref_id_externa_2p_1800006,Card ID updated\nFINALIZED,1234-cust_id,270,ref_id_externa_2p_1800009,Card ID updated\n```\n\n----------------------------------------\n\nTITLE: Card number field V2\nDESCRIPTION: Shows the HTML code for the card number field when using SDK V2\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.en.md#2025-04-18_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"cardNumber\"></div>\n\n```\n\n----------------------------------------\n\nTITLE: Card Issuer API Response Format\nDESCRIPTION: Example JSON response from the card issuers API showing the structure of returned data. Includes issuer ID, name, and thumbnail image URLs.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/issuers.es.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t    \"id\": \"279\",\n\t    \"name\": \"Banco Galicia\",\n\t    \"secure_thumbnail\": \"https://www.mercadopago.com/org-img/MP3/API/logos/279.gif\",\n\t    \"thumbnail\": \"http://img.mlstatic.com/org-img/MP3/API/logos/279.gif\"\n\t},\n\t...\n]\n```\n\n----------------------------------------\n\nTITLE: Get issuing bank V1\nDESCRIPTION: Shows how to get the issuing bank when using SDK V1. It shows the function call and the callback function.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.en.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.Mercadopago.getIssuers(\n    paymentMethodId, callBackFn\n);\n\nfunction callBackFn(status, response) {\n    if (status == 200) {\n        response.forEach( issuer => {\n           ...\n        });\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sending Invoice Description - JSON\nDESCRIPTION: This snippet demonstrates how to add a description to the buyer's card statement using the `statement_descriptor` attribute in a Mercado Pago preference. The value of this attribute will appear on the buyer's card invoice, depending on the card brand.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"statement_descriptor\": \"MEUNEGOCIO\"\n```\n\n----------------------------------------\n\nTITLE: Payment Bricks Component Implementation\nDESCRIPTION: This snippet showcases the implementation of the CheckoutMercadoPago component, including the initialization of the Mercado Pago SDK, configuration of payment methods, and asynchronous handling of the payment submission process.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/possible-errors.es.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n//checkoutMercadoPago.tsx\n\nimport { initMercadoPago, Payment } from \"@mercadopago/sdk-react\";\n\ninitMercadoPago(\"<YOUR_PUBLIC_KEY>\");\n\nconst CheckoutMercadoPago = () => {\n  const initialization = {\n    amount: <YOUR_AMOUNT>,\n    preferenceId: \"<YOUR_PREFERENCE_ID>\"\n  };\n  const customization = {\n    paymentMethods: {\n      ticket: \"all\",\n      bankTransfer: \"all\",\n      creditCard: \"all\",\n      debitCard: \"all\",\n      mercadoPago: \"all\",\n    },\n  };\n  const onSubmit = async ({ selectedPaymentMethod, formData }) => {\n   \n // callback llamado al hacer clic en el botón enviar datos\n    return new Promise((resolve, reject) => {\n      fetch(\"/process_payment\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(formData),\n      })\n        .then((response) => response.json())\n        .then((response) => {\n          // recibir el resultado del pago\n          resolve();\n        })\n        .catch((error) => {\n          // manejar la respuesta de error al intentar crear el pago\n          reject();\n        });\n    });\n  };\n  const onError = async (error) => {\n    // callback llamado para todos los casos de error de Brick\n    console.log(error);\n  };\n  const onReady = async () => {\n   /*\n    Callback llamado cuando el Brick está listo.\n    Aquí puede ocultar cargamentos de su sitio, por ejemplo.\n   */\n  };\n\n  return (\n    <Payment\n      initialization={initialization}\n      customization={customization}\n      onSubmit={onSubmit}\n      onReady={onReady}\n      onError={onError}\n    />\n  );\n};\nexport default CheckoutMercadoPago;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Brazilian Payment Form (MLB)\nDESCRIPTION: Enhanced HTML form for Brazil (MLB) that includes additional required address fields for boleto bancário payments. Contains fields for name, document information, and full address details (CEP, street, number, neighborhood, city, state).\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n <form id=\"form-checkout\" action=\"/process_payment\" method=\"post\">\n   <div>\n       <h1>Payer Request</h1>\n     <div>\n       <label for=\"payerFirstName\">Nome</label>\n       <input id=\"form-checkout__payerFirstName\" name=\"payerFirstName\" type=\"text\">\n     </div>\n     <div>\n       <label for=\"payerLastName\">Sobrenome</label>\n       <input id=\"form-checkout__payerLastName\" name=\"payerLastName\" type=\"text\">\n     </div>\n     <div>\n       <label for=\"email\">E-mail</label>\n       <input id=\"form-checkout__email\" name=\"email\" type=\"text\">\n     </div>\n     <div>\n       <label for=\"identificationType\">Tipo de documento</label>\n       <input id=\"form-checkout__identificationType\" name=\"identificationType\" type=\"text\"></input>\n     </div>\n     <div>\n       <label for=\"identificationNumber\">Número do documento</label>\n       <input id=\"form-checkout__identificationNumber\" name=\"identificationNumber\" type=\"text\">\n     </div>\n     <div>\n       <label for=\"zip_code\"> CEP: </label>\n       <input id=\"form-checkout__zip_code\" name=\"zip_code\" type=\"text\">\n     </div>\n     <div>\n       <label for=\"street_name\"> Rua: </label>\n       <input id=\"form-checkout__street_name\" name=\"street_name\" type=\"text\">\n     </div>\n     <div>\n       <label for=\"street_number\"> Número: </label>\n       <input id=\"form-checkout__street_number\" name=\"street_number\" type=\"text\">\n     </div>\n     <div>\n       <label for=\"neighborhood\"> Bairro: </label>\n       <input id=\"form-checkout__neighborhood\" name=\"neighborhood\" type=\"text\">\n     </div>\n     <div>\n       <label for=\"city\"> Cidade: </label>\n       <input id=\"form-checkout__city\" name=\"city\" type=\"text\">\n     </div>\n     <div>\n       <label for=\"federal_unit\"> Estado: </label>\n       <input id=\"form-checkout__federal_unit\" name=\"federal_unit\" type=\"text\">\n     </div>\n   </div>\n   <div>\n     <div>\n       <input type=\"hidden\" name=\"transactionAmount\" id=\"transactionAmount\" value=\"100\">\n       <input type=\"hidden\" name=\"description\" id=\"description\" value=\"Nome do Produto\">\n       <br>\n       <button type=\"submit\">Pagar</button>\n     </div>\n   </div>\n </form>\n```\n\n----------------------------------------\n\nTITLE: Cancelling Payments in PHP\nDESCRIPTION: This snippet demonstrates how to cancel a payment reservation using the MercadoPago PHP SDK by setting the access token and invoking the cancel method on the PaymentClient class with specified request options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/cancel-reserve.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->cancel($payment_id, $request_options);\n  echo $payment->status;\n?>\n```\n\n----------------------------------------\n\nTITLE: Configuring MercadoPago Credentials with HTML\nDESCRIPTION: Code to initialize MercadoPago in your HTML page after importing the SDK. This creates an instance of MercadoPago with your public key for client-side operations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.es.md#2025-04-18_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  const mp = new MercadoPago(\"YOUR_PUBLIC_KEY\");\n</script>\n```\n\n----------------------------------------\n\nTITLE: Respuesta JSON del Endpoint de Pagos para Efecty\nDESCRIPTION: Ejemplo de la respuesta JSON devuelta por el endpoint de pagos al crear un pago con Efecty. Muestra el estado pendiente y la URL externa con las instrucciones de pago para el comprador.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mco.es.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n   {\n       ...,\n       \"id\": 5466310457,\n       \"status\": \"pending\",\n       \"status_detail\": \"pending_waiting_payment\",\n       ...,\n       \"transaction_details\": {\n           \"net_received_amount\": 0,\n           \"total_paid_amount\": 100,\n           \"overpaid_amount\": 0,\n           \"external_resource_url\": \"https://www.mercadopago.com.ar/payments/123456/ticket?caller_id=123456&payment_method_id=efecty&payment_id=123456&payment_method_reference_id=123456\",\n           \"installment_amount\": 0,\n           \"financial_institution\": null,\n           \"payment_method_reference_id\": \"1234567890\"\n       }\n   }\n]\n```\n\n----------------------------------------\n\nTITLE: Canceling a MercadoPago Payment Reservation in Ruby\nDESCRIPTION: This code snippet shows how to cancel a payment reservation in MercadoPago using Ruby. It uses the MercadoPago SDK, requires an access token, and a payment ID. The code creates a request with canceled status and updates the payment using the SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/cancel-reserve.es.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new(ENV_ACCESS_TOKEN)\n\nrequest = {\n  status: 'canceled'\n}\n\npayment_response = sdk.payment.update(payment_id, request)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Device ID Input Element\nDESCRIPTION: Shows how to create a custom HTML input element to store the Device ID value with a specific identifier.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/device-id.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"hidden\" id=\"deviceId\">\n```\n\n----------------------------------------\n\nTITLE: Setting Expiration Date for Cash Payments (Region: MLA) in Multiple Languages\nDESCRIPTION: Code examples for configuring the expiration date for Rapipago/Pago Fácil payments in Argentina (MLA) using ISO 8601 format. The date must be between 1 and 30 days from issuance.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n===\nThe date uses the ISO 8601 format: yyyy-MM-dd'T'HH:mm:ssz\n===\n\n$payment->date_of_expiration = \"2020-05-30T23:59:59.000-04:00\";\n```\n\nLANGUAGE: node\nCODE:\n```\n===\nThe date uses the ISO 8601 format: yyyy-MM-dd'T'HH:mm:ssz\n===\n\ndate_of_expiration: \"2020-05-30T23:59:59.000-04:00\",\n```\n\nLANGUAGE: java\nCODE:\n```\n===\nThe date uses the ISO 8601 format: yyyy-MM-dd'T'HH:mm:ssz\n===\n\npayment.setDateOfExpiration(\"2020-05-30T23:59:59.000-04:00\")\n```\n\nLANGUAGE: ruby\nCODE:\n```\n===\nThe date uses the ISO 8601 format: yyyy-MM-dd'T'HH:mm:ssz\n===\n\ndate_of_expiration: '2020-05-30T23:59:59.000-04:00',\n```\n\nLANGUAGE: csharp\nCODE:\n```\n===\nThe date uses the ISO 8601 format: yyyy-MM-dd'T'HH:mm:ssz\n===\n\npaymentCreateRequest.DateOfExpiration = DateTime.Parse(\"2020-05-30T23:59:59.000-04:00\");\n```\n\nLANGUAGE: python\nCODE:\n```\n===\nThe date uses the ISO 8601 format: yyyy-MM-dd'T'HH:mm:ssz\n===\n\n\"date_of_expiration\": \"2020-05-30T23:59:59.000-04:00\"\n```\n\nLANGUAGE: curl\nCODE:\n```\n===\nThe date uses the ISO 8601 format: yyyy-MM-dd'T'HH:mm:ssz\n===\n\n\"date_of_expiration\": \"2020-05-30T23:59:59.000-04:00\",\n```\n\n----------------------------------------\n\nTITLE: Handling Internal Error Responses in JSON\nDESCRIPTION: This JSON structure exemplifies the 500 Internal Server Error response, indicating a server-side failure. Key areas include an 'error' field and a descriptive 'cause' section for diagnosis.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/api-responses.en.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"message\": \"<ERROR MESSAGE>\",\n   \"error\": \"internal_error\",\n   \"status\": 500,\n   \"cause\": [\n       {\n           \"code\": <error_code>,\n           \"description\": \"<detail error description>\",\n           \"data\": \"12-01-2023T15:21:28UTC;82c52796-1026-41d2-8ef9-4cbda2d0db8d\"\n       }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bank Ticket Payment for Subscriptions\nDESCRIPTION: Send a POST request to enable boleto bancário as a payment method for subscriptions with a specific payment method identifier\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/payment-methods.es.md#2025-04-18_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /preapproval_plan\n{\n  \"payment_methods_allowed\": \"bolbradesco\"\n}\n```\n\n----------------------------------------\n\nTITLE: Respuesta JSON para creación de intención de pago en RDCPass\nDESCRIPTION: Ejemplo de respuesta JSON que incluye detalles de la transacción, datos de adquirencia, información de boleta electrónica y saldo del terminal. Contiene campos como estado de la transacción, monto total, medio de pago, código de autorización y datos para imprimir comprobantes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/annex-response-examples.es.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"ESTADO\":\"APROBADO\",\n   \"TOTAL\":\"5566\",\n   \"PROPINA\":\"0\",\n   \"MEDIO_PAGO\":\"DEBITO\",\n   \"CODAUT\":\"388153\",\n   \"FECHA&HORA\":\"20230817&111955\",\n   \"MENSAJE_VISOR\":\"APROBADO (00)\",\n   \"DATOS_ADQUIRENCIA_CLIENTE\":{\n      \"RETAILER_ID\":\"39200562\",\n      \"FECHA&HORA\":\"20230817&111955\",\n      \"TERMINAL\":\"3261\",\n      \"NUM_TARJETA\":\"********4199\",\n      \"TOTAL\":\"5566\",\n      \"PROPINA\":\"0\",\n      \"NUM_OPER\":\"00000812\",\n      \"COD_AUTO\":\"388153\",\n      \"NUM_UNICO\":\"246636\",\n      \"TIPO_TARJETA\":\"DEBITO\",\n      \"TIPO_LECTURA\":\"E-DB\"\n   },\n   \"DATOS_ADQUIRENCIA_CLIENTE_IMPRIMIR\":\"{s}39200562 -    2.62.03          TARJETA DE DEBITO{\\/s}{br}{s}17\\/08\\/2023    11:19:55                     3261{\\/s}{br}{s}********4199    {s} E-DB{br}{s}MONTO COMPRA                              $5.566{\\/s}{br}{s}TOTAL                                    $ 5.566{\\/s}{br}{s}NUM OPER    00000812       COD AUTO       388153{\\/s}{br}{s}NUMERO UNICO                              246636{\\/s}{br}{center}{s}ACEPTO PAGAR SEGUN CONTRATO CON EMISOR{\\/s}\",\n   \"DATOS_ADQUIRENCIA_COMERCIO\":{\n      \"RETAILER_ID\":\"39200562\",\n      \"FECHA&HORA\":\"20230817&111955\",\n      \"TERMINAL\":\"3261\",\n      \"NUM_TARJETA\":\"********4199\",\n      \"TOTAL\":\"5566\",\n      \"PROPINA\":\"0\",\n      \"NUM_OPER\":\"00000812\",\n      \"COD_AUTO\":\"388153\",\n      \"NUM_UNICO\":\"246636\"\n   },\n   \"DATOS_ADQUIRENCIA_COMERCIO_IMPRIMIR\":\"{center}COMPROBANTE DE VENTA{br}{center}TARJETA DE DEBITO{br}{br}{center}{s}REDELKONG{\\/s}{br}{center}{s}TEST 2050, SANTIAGO{\\/s}{br}{center}{s} - 2.62.03{\\/s}{br}{br}{s}FECHA         HORA                     TERMINAL{\\/s}{br}{s}17\\/08\\/2023    11:19:55                     3261{\\/s}{br}{br}{s}NUMERO DE TARJETA   NUM DE CUENTA    E-DB{\\/s}{br}{s}********4199          {\\/s}{br}{s}MONTO COMPRA                              $5.566{\\/s}{br}{s}PROPINA                                       $0{\\/s}{br}{s}TOTAL                                    $ 5.566{\\/s}{br}{s}NUMERO DE OPERACION    :                00000812{\\/s}{br}{s}CODIGO DE AUTORIZACION :                  388153{\\/s}{br}{s}NUMERO UNICO :                            246636{\\/s}{br}{center}{s}ORIGINAL COMERCIO{\\/s}{br}{center}{s}ACEPTO PAGAR SEGUN CONTRATO CON EMISOR{\\/s}\",\n   \"BOLETA\":{\n      \"RUBRO\":\"VENTA AL POR MENOR DE COMPUTADORES, EQUIPO PERIFERICO, PROGRAMAS INFOR\",\n      \"DIRECCION\":\"PADRE MARIANO 391 OF 704 7P Providencia \",\n      \"SUCURSAL\":\"81228911\",\n      \"CAF\":\"12444098\",\n      \"TED1\":\"<TED version=\\\"1.0\\\"><DD><RE>13924206-8<\\/RE><TD>39<\\/TD><F>12444098<\\/F><FE>2023-08-17<\\/FE><RR>66666666-6<\\/RR><RSR>SII Boleta<\\/RSR><MNT>5566<\\/MNT><IT1>Venta<\\/IT1><CAF version=\\\"1.0\\\"><DA><RE>76123174-K<\\/RE><RS>REDELCOM S.A.<\\/RS><TD>39<\\/TD><RNG><D>1<\\/D><H>100<\\/H><\\/RNG><FA>2017-08-07<\\/FA><RSAPK><M>0ts6Ek7exNXpPnY\\/8OfC5G1k0eaK1olAfrK5Q68fD4uWdcmNetiSUyZ3pKK4uRxWJCfWB9fdG2bbFzPQqQL0MQ==<\\/M><E>Aw==<\\/E><\\/RSAPK><IDK>100<\\/IDK><\\/DA><FRMA algoritmo=\\\"SHA1withRSA\\\">Hjeprfm4y6SWTTMPx5Xd348MnV0CV5x1kLVY2mreJFms6WHlabnRZISABDqwpc9JzVQCfYVaFdVbJq6hTRUz0A==<\\/FRMA><\\/CAF><TSTED>2023-08-17T11:19:23<\\/TSTED><\\/DD><FRMT algoritmo=\\\"SHA1withRSA\\\">UYSvOH22AKI4S8D+z6E7NiCkQg3y8cR\\/Ane+m2N3mPG+nGpLBt+NmpmCudBHhn4Ujscl6tQLCur4\\no2EqibfPzg==\\n<\\/FRMT><\\/TED>\",\n      \"TED2\":\"UYSvOH22AKI4S8D+z6E7NiCkQg3y8cR\\/Ane+m2N3mPG+nGpLBt+NmpmCudBHhn4Ujscl6tQLCur4\\no2EqibfPzg==\\n\"\n   },\n   \"SALDO_TERMINAL\":\"11736999\"\n}\n```\n\n----------------------------------------\n\nTITLE: OAuth API Response for Credential Acquisition\nDESCRIPTION: This JSON snippet represents the response from the OAuth API after successfully exchanging an authorization code. It includes tokens and user identification data essential for integrating with the Mercado Pago platform, highlighting the time-sensitive nature of the tokens.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/configuration.en.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"access_token\": \"SELLER_PAYER_TOKEN\",\n    \"public_key\": \"PUBLIC_KEY\",\n    \"refresh_token\": \"TG-XXXXXXXXX-XXXXX\",\n    \"live_mode\": true,\n    \"user_id\": \"COLLECTOR_ID DE PAGO\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 15552000,\n    \"scope\": \"offline_access payments write\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Intent for Argentina (MLA) with cURL\nDESCRIPTION: This cURL command demonstrates how to create a payment intent for a Point device in Argentina. It includes the device ID, payment amount, and additional information such as external reference and printing options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/payment-processing.en.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/point/integration-api/devices/{deviceid}/payment-intents' \\\n--h 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--data-raw '{\n   \"amount\": 1500,\n   \"additional_info\": {\n       \"external_reference\": \"4561ads-das4das4-das4754-das456\",\n       \"print_on_terminal\": true,\n       \"ticket_number\": \"S0392JED\"\n   }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Preference for Wallet Purchase in PHP\nDESCRIPTION: This PHP snippet demonstrates how to create a preference using the Mercado Pago SDK, specifically setting the `purpose` attribute to `wallet_purchase`. This configuration enables the wallet payment option. It requires the Mercado Pago PHP SDK and defines the product details within the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mp-wallet.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n   $client = new PreferenceClient();\n   $preference = $client->create([\n          \"items\"=> array(\n            array(\n              \"title\" => \"My product\",\n              \"description\" => \"Test product\",\n              \"picture_url\" => \"http://i.mlcdn.com.br/portaldalu/fotosconteudo/48029_01.jpg\",\n              \"category_id\" => \"electronics\",\n              \"quantity\" => 1,\n              \"currency_id\" => \"BRL\",\n              \"unit_price\" => 100\n            )\n          ),\n          \"purpose\"=> \"wallet_purchase\"\n  ]);\n  echo implode($preference);\n?>\n```\n\n----------------------------------------\n\nTITLE: Implementing RDCPass Payment Query Method\nDESCRIPTION: Java method to initiate a payment query through RDCPass. Includes transaction ID handling and app package configuration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-payment-query.es.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic void shareRDCPass(String total, String intent) { \n\ttry { \n\t\tIntent sharingIntent = new Intent(intent); \n\t\tsharingIntent.setClassName(\"redelcom.cl.rdcpass\", \"redelcom.cl.rdcpass.MainActivity\"); \n\t\tsharingIntent.putExtra(\"packageName\", getPackageName()); \n\t\tsharingIntent.putExtra(\"className\", getClass().toString().split(\" \")[1]); \n\t\tsharingIntent.putExtra(\"userTransactionId\", \"DEMO1234\"); \n\t\tstartActivity(sharingIntent); \n\t} catch (Exception e) { \n\t\te.printStackTrace(); \n\t} \n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Total Payment Value with cURL\nDESCRIPTION: This cURL command demonstrates how to capture the total value of a previously authorized payment using a direct API call. It requires the payment ID and your Mercado Pago access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PUT \\\n  'https://api.mercadopago.com/v1/payments/PAYMENT_ID' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n  -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n  -d '{\"capture\": true}'\n```\n\n----------------------------------------\n\nTITLE: Generating Settlement Report - API Request\nDESCRIPTION: Makes a POST request to generate a settlement report for a specified date range. Requires authentication via access token and accepts JSON payload with begin_date and end_date parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_8\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report' \\\n    -d '{\n            \"begin_date\": \"2019-05-01T00:00:00Z\",\n            \"end_date\": \"2019-06-01T00:00:00Z\"\n    }'\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$data ='{\n            \"begin_date\": \"2019-05-01T00:00:00Z\",\n            \"end_date\": \"2019-06-01T00:00:00Z\"\n    }';\n\n$response = Requests::post(\"https://api.mercadopago.com/v1/account/settlement_report\", $headers, $data);\n```\n\n----------------------------------------\n\nTITLE: Associating Google Ads Tag with Checkout Pro in Python\nDESCRIPTION: This Python snippet illustrates how to connect Google Ads conversion tags with a Mercado Pago preference. The setup involves using the Mercado Pago Python SDK to manage preference creation with conversion ID and label for ad tracking.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.en.md#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Associate your Google ads tag\npreference_data = {\n# ...\n\"tracks\": [\n{\n\"type\": \"google_ad\",\n\"values\": {\n\"conversion_id\": \"CONVERSION_ID\",\n\"conversion_label\": \"CONVERSION_LABEL\"\n}\n}\n]\n}\n\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Get Installments (V1)\nDESCRIPTION: JavaScript code snippet demonstrating how to retrieve installments using Mercado Pago SDK V1 using callback. The `getInstallments()` method is called with an object containing payment_method_id, amount, and issuer_id and a callback function.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.Mercadopago.getInstallments({\n       \"payment_method_id\": paymentMethodId,\n       \"amount\": parseFloat(transactionAmount),\n       \"issuer_id\": parseInt(issuerId)\n   }, callbackFn\n);\n\nfunction callBackFn(status, response) {\n   if (status == 200) {\n      response[0].payer_costs.forEach( payerCost => {\n        ...\n       });\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creando un pago con Fintoc en Ruby\nDESCRIPTION: Este snippet muestra cómo crear un pago usando Fintoc como método de pago en Ruby. Configura el SDK de Mercado Pago, define los detalles del pago y procesa la solicitud.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-simplified.es.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_object = {\n  description: 'Titulo del producto',\n  payer: {\n    email: 'test_user_123@testuser.com',\n  },\n  payment_method_id: 'fintoc',\n  transaction_amount: 5000,\n  callback_url: 'https://www.your-site.com',\n  point_of_interaction: {\n   type: 'CHECKOUT',\n   sub_type: 'INTER_PSP'\n  }\n\n}\n\npayment_response = sdk.payment.create(payment_request, custom_request_options)\npayment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Starting Bluetooth Device Discovery in Java\nDESCRIPTION: This Java code snippet demonstrates how to start Bluetooth device discovery using the `startDiscovery` method of the `BluetoothDiscoverDevices` class. It defines a callback function to handle the response, which includes different states like `STARTED`, `DEVICE_FOUND`, `DEVICE_CHANGE`, and `ENDED`, allowing for specific actions based on the discovery status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/manage-connections.es.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nfinal BluetoothDiscoverDevices bluetoothDiscoverDevices = MPManager.INSTANCE.getBluetooth().getDiscover();\n\nfinal Function1<MPResponse<BluetoothDiscoveryState>, Unit> callback = (final MPResponse<BluetoothDiscoveryState> response) -> {\n if (response.getStatus() == ResponseStatus.SUCCESS) {\n   switch (response.getData().getType()) {\n     case STARTED:\n       // Manejar el inicio del descubrimiento\n       break;\n     case DEVICE_FOUND:\n       // Manejar el descubrimiento de un nuevo dispositivo\n       final BluetoothDeviceModel foundDevice = response.getData().getDevice();\n       break;\n     case DEVICE_CHANGE:\n       // Manejar cambios en un dispositivo descubierto\n       final BluetoothDeviceModel changedDevice = response.getData().getDevice();\n       break;\n     case ENDED:\n       // Manejar el fin del descubrimiento\n\n   }\n } else {\n   // Manejar el caso de error si es necesario\n }\n return Unit.INSTANCE;\n};\n\nbluetoothDiscoverDevices.startDiscovery(callback);\n```\n\n----------------------------------------\n\nTITLE: Transaction Response Structure for Argentina (MLA)\nDESCRIPTION: Example JSON response showing a processed transaction in Argentina with a status of 'processed'. The response includes transaction details, amount information, and status details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.en.md#2025-04-18_snippet_8\n\nLANGUAGE: curl\nCODE:\n```\n{\n  \"created_date\": \"2024-11-13T15:04:25.699+00:00\",\n  \"external_reference\": \"external_ref_1234\",\n  \"id\": \"22dvqmseu9m\",\n  \"last_updated_date\": \"2024-11-13T15:04:31.256+00:00\",\n  \"point_of_interaction\": {\n    \"type\": \"PSP_TRANSFER\"\n  },\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://example.ar/notification\"\n    }\n  },\n  \"status\": \"processed\",\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": 25,\n          \"status_details\": []\n        }\n      ]\n    },\n    \"paid_amount\": 25,\n    \"payer\": {\n      \"id\": 1992483656\n    },\n    \"refunded_amount\": 0,\n    \"to\": {\n      \"accounts\": [\n        {\n          \"amount\": 25,\n          \"description\": \"envio de 25\",\n          \"origin_id\": \"01JCK0VSV3TBSAADAGJQKG4GTY\",\n          \"status_details\": [\n            \"approved\"\n          ]\n        }\n      ]\n    },\n    \"total_amount\": 25,\n    \"statement_descriptor\": \"\",\n    \"binary_mode\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Settlement Report Configuration - Python Implementation\nDESCRIPTION: Python implementation using the requests library to create a new settlement report configuration via MercadoPago's API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.es.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\ndata = '{  \n            \"file_name_prefix\": \"settlement-report-USER_ID\",\n            \"show_fee_prevision\": false,\n            \"show_chargeback_cancel\": true,\n            \"coupon_detailed\": true,\n            \"include_withdraw\": true,\n            \"shipping_detail\": true,\n            \"refund_detailed\": true,\n            \"display_timezone\": \"GMT-04\",\n            \"notification_email_list\": [\n                \"example@email.com\",\n                \"john@example.com\"\n            ],\n            \"frequency\": {\n                \"hour\": 0,\n                \"type\": \"monthly\",\n                \"value\": 1\n            },\n            \"columns\": [\n                {\n                    \"key\": \"TRANSACTION_DATE\"\n                },\n                {\n                    \"key\": \"SOURCE_ID\"\n                },\n                {\n                    \"key\": \"EXTERNAL_REFERENCE\"\n                }\n            ]\n        }'\n\nresponse = requests.post('https://api.mercadopago.com/v1/account/settlement_report/config', headers=headers, data=data)\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Sub-merchant Data in C#\nDESCRIPTION: This C# code snippet shows how to create a payment with sub-merchant data using the Mercado Pago SDK for C#. It configures the access token, creates a `PaymentCreateRequest` with necessary details, including the `PaymentForwardDataRequest` containing `SubMerchant` information.  The example uses `Newtonsoft.Json` to serialize the created payment object and print it to the console.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subcredenciadores-payfacs/integration-update.es.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Config;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = 105,\n    Description = \"Título do produto\",\n    PaymentMethodId = \"visa\",\n    Token = \"879a958bbed52608607ae70bed919e13\",\n    Installments = 3,\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"test_user_24634097@testuser.com\",\n    },\n    PaymentForwardDataRequest = new PaymentForwardDataRequest\n    {\n        SubMerchant = new SubMerchant\n        {\n            SubMerchantId = \"1234\",\n            MCC = \"123\",\n            Country = \"BRA\",\n            AddressDoorNumber = \"1\",\n            Zip = \"22222222\",\n            DocumentNumber = \"22222222222222\",\n            City = \"Sao Paulo\",\n            AddressStreet = \"Rua A\",\n            LegalName = \"Legal Name\",\n            RegionCodeIso = \"BR\",\n            RegionCode = \"BR-SC\",\n            DocumentType = \"CNPJ\",\n            Phone = \"123456789\",\n            Url = \"www.nomedofacilitador.com.br\",\n        },\n    },\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\nConsole.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(payment));\n```\n\n----------------------------------------\n\nTITLE: MercadoPago Banner Implementation - 120x240px\nDESCRIPTION: HTML code for displaying a 120x240 pixel MercadoPago payment methods banner. The image shows 12 interest-free installment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/doze.en.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/PSJ/120x240_banner_psj_12x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"120\" height=\"240\"/>\n```\n\n----------------------------------------\n\nTITLE: Handling Deep Links in UIKit\nDESCRIPTION: This code snippet demonstrates handling deep links in a UIKit-based iOS application. It includes a callback for deep link reception, closing the SFSafariViewController, and presenting a new view controller to transition smoothly within the app.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/swift.en.md#2025-04-18_snippet_5\n\nLANGUAGE: UIKit\nCODE:\n```\nimport UIKit\n\nclass SceneDelegate: UIResponder, UIWindowSceneDelegate {\n\n    var window: UIWindow?\n\n    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\n        guard let _ = (scene as? UIWindowScene) else { return }\n    }\n\n    func scene(_ scene: UIScene, openURLContexts URLContexts: Set<UIOpenURLContext>) {\n        if let urlContext = URLContexts.first {\n            let url = urlContext.url\n\n            if let components = URLComponents(url: url, resolvingAgainstBaseURL: false),\n               components.scheme == \"iosapp\",\n               components.host == \"congrat\",\n               components.path.contains(\"success\") {\n                \n                if let rootViewController = window?.rootViewController {\n                    let successViewController = SuccessViewController {\n                        rootViewController.dismiss(animated: true, completion: nil)\n                    }\n                    \n                    if let presentingViewController = rootViewController.presentedViewController {\n                        presentingViewController.dismiss(animated: true) {\n                            rootViewController.present(successViewController, animated: true, completion: nil)\n                        }\n                    } else {\n                        rootViewController.present(successViewController, animated: true, completion: nil)\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference in Java\nDESCRIPTION: This Java snippet demonstrates how to create a payment preference object within a preference client, including item details and the purpose for the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.en.md#2025-04-18_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n// Create a preference object\nPreferenceClient client = new PreferenceClient();\n\n// Create an item in the preference\nList<PreferenceItemRequest> items = new ArrayList<>();\nPreferenceItemRequest item =\n   PreferenceItemRequest.builder()\n       .title(\"Meu produto\")\n       .quantity(1)\n       .unitPrice(new BigDecimal(\"100\"))\n       .build();\nitems.add(item);\n\nPreferenceRequest request = PreferenceRequest.builder()\n  // o .purpose('wallet_purchase') only allows logged payments\n  // to allow guest payments you can omit this line\n  .purpose('wallet_purchase')\n  .items(items).build();\n\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Defining future product availability for multiple countries\nDESCRIPTION: This snippet defines the future availability of Checkout Bricks products for multiple countries. It includes information such as the title, description, and card details for each available brick.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/landing.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n----[mlb, mlu, mlc, mco, mpe]----\n\n---\nfuture_product_avaible:\n - title: Bricks\n - description: Conheça todos os módulos do Checkout Bricks e as suas disponibilidades.\n - card_avaible: true\n - card_icon: Pay\n - card_title: Payment Brick\n - card_description: Ofereça diversos métodos de pagamento para os clientes escolherem, com a capacidade de salvar dados do cartão para compras futuras. Teste a demonstração do Brick antes de integrá-lo.\n - card_button: /developers/pt/docs/checkout-bricks/payment-brick/introduction\n - card_buttonDescription: Saiba mais\n - card_pillText: DISPONÍVEL\n - card_linkAvailable: true\n - card_linkProof: /developers/pt/live-demo/payment-brick\n - card_linkProofDescription: Acessar demonstração\n - card_avaible: true\n - card_icon: Wallet\n - card_title: Wallet Brick\n - card_description: Vincule a conta Mercado Pago e permita pagamentos registrados. Teste a demonstração do Brick antes de integrá-lo.\n - card_button: /developers/pt/docs/checkout-bricks/wallet-brick/introduction\n - card_buttonDescription: Saiba mais\n - card_pillText: DISPONÍVEL\n - card_linkAvailable: true\n - card_linkProof: /developers/pt/live-demo/wallet-brick\n - card_linkProofDescription: Acessar demonstração\n - card_avaible: true\n - card_icon: Loading\n - card_title: Status Screen Brick\n - card_description: Informe os clientes dos resultados do processo de compra após efetuar o pagamento. Teste a demonstração do Brick antes de integrá-lo.\n - card_button: /developers/pt/docs/checkout-bricks/status-screen-brick/introduction\n - card_buttonDescription: Saiba mais\n - card_pillText: DISPONÍVEL\n - card_linkAvailable: true\n - card_linkProof: /developers/pt/live-demo/status-screen-brick\n - card_linkProofDescription: Acessar demonstração\n - card_avaible: true\n - card_icon: Card\n - card_title: Card Payment Brick\n - card_description: Ofereça pagamentos com cartão de crédito e débito. Teste a demonstração do Brick antes de integrá-lo.\n - card_button: /developers/pt/docs/checkout-bricks/card-payment-brick/introduction\n - card_buttonDescription: Saiba mais\n - card_pillText: DISPONÍVEL\n - card_linkAvailable: true\n - card_linkProof: /developers/pt/live-demo/card-payment-brick\n - card_linkProofDescription: Acessar demonstração\n - card_avaible: false\n - card_icon: Check\n - card_title: Review & Confirm\n - card_description: Exiba um resumo de todo o processo de compra com as informações mais relevantes, assim os clientes poderão analisar antes de confirmar a compra.\n - card_button:\n - card_buttonDescription:\n - card_pillText: EM BREVE\n - card_linkAvailable: false\n - card_linkProof:\n - card_linkProofDescription:\n - card_avaible: false\n - card_icon: User\n - card_title: Brand Brick\n - card_description: Comunique diferentes mensagens relacionadas às formas de pagamento disponíveis via Mercado Pago em sua loja.\n - card_button:\n - card_buttonDescription:\n - card_pillText: EM BREVE\n - card_linkAvailable: false\n - card_linkProof:\n - card_linkProofDescription:\n - card_avaible: false\n - card_icon: User\n - card_title: User Info Brick\n - card_description: Colete os dados dos clientes para deduzir aqueles que serão necessários no processo de compra.\n - card_button:\n - card_buttonDescription:\n - card_pillText: EM BREVE\n - card_linkAvailable: false\n - card_linkProof:\n - card_linkProofDescription:\n - card_avaible: false\n - card_icon: Truck\n - card_title: Shipping Brick\n - card_description: Colete dados de envio dos clientes e exiba as opções de entrega disponíveis, além de seus benefícios.\n - card_button:\n - card_buttonDescription:\n - card_pillText: EM BREVE\n - card_linkAvailable: false\n - card_linkProof:\n - card_linkProofDescription:\n---\n\n```\n\n----------------------------------------\n\nTITLE: Setting Access Token for Java Integration\nDESCRIPTION: This Java snippet sets the access token for the Mercado Pago SDK and retrieves a list of payment methods using a PaymentMethodClient. Requires Mercado Pago configuration setup.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nPaymentMethodClient client = new PaymentMethodClient();\nclient.list();\n```\n\n----------------------------------------\n\nTITLE: Email Notification Configuration Response\nDESCRIPTION: JSON response returned after setting up email notifications for reports. It includes the notifier ID and details about the email recipients.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.es.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": {{notifier_id}},\n    \"type\": \"email\",\n    \"data\": {\n        \"recipients\": [\n            \"test@mercadolibre.com\"\n        ]\n    },\n    \"description\": null,\n    \"version\": 0,\n    \"status\": \"ACTIVE\",\n    \"is_pii_data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Cards to a Customer in Mercado Pago with Python\nDESCRIPTION: Python implementation for adding a new card to a Mercado Pago customer. Uses the SDK to retrieve a customer by ID and create a card with the provided token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.es.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\ncustomer_response = sdk.customer().get(\"247711297-jxOV430go9fx2e\")\ncustomer = customer_response[\"response\"]\n\ncard_data = {\n  \"token\": \"9b2d63e00d66a8c721607214cedaecda\",\n  \"payment_method_id\": \"debit_card\"\n}\ncard_response = sdk.card().create(customer[\"id\"], card_data)\ncard = card_response[\"response\"]\n\nprint(card)\n```\n\n----------------------------------------\n\nTITLE: Sending Payment with Form Submission\nDESCRIPTION: Once the card token is obtained, it's added to a hidden form field and submitted. The process includes setting an event listener for form submission and invoking the token creation method. The token is then passed to a function handling the form submission, ensuring the payment request is complete with tokenized data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.en.md#2025-04-18_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ndoSubmit = false;\ndocument.getElementById('paymentForm').addEventListener('submit', getCardToken);\n\nasync function getCardToken(event) {\n    event.preventDefault();\n    if (!doSubmit) {\n        let $form = document.getElementById('paymentForm');\n        const token = await mp.fields.createCardToken({\n            cardholderName: document.getElementById('cardholderName').value,\n            identificationType: document.getElementById('docType').value,\n            identificationNumber: document.getElementById('docNumber').value,\n        })\n        setCardTokenAndPay(token.id)\n    }\n};\n\nfunction setCardTokenAndPay(token) {\n    let form = document.getElementById('paymentForm');\n    let card = document.createElement('input');\n    card.setAttribute('name', 'token');\n    card.setAttribute('type', 'hidden');\n    card.setAttribute('value', token);\n    form.appendChild(card);\n    doSubmit = true;\n    form.submit();\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Request with 3DS in Go\nDESCRIPTION: This Go snippet shows how to configure the Mercado Pago SDK and create a payment request incorporating 3DS authentication. It initializes the necessary request parameters and handles the creation of the payment resource.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.en.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/payment\"\n)\n\nfunc main() {\n\taccessToken := \"<ENV_ACCESS_TOKEN>\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := payment.NewClient(cfg)\n\n\trequest := payment.Request{\n\t\tTransactionAmount:<TRANSACTION_AMOUNT>,\n\t\tPayer: &payment.PayerRequest{\n\t\t\tEmail: \"<BUYER_EMAIL>\",\n\t\t},\n\t\tToken:        \"<CARD_TOKEN>\",\n\t\tInstallments: <INSTALLLMENTS_NUMBER>,\n\t\tDescription: \"<DESCRIPTION>\",\n\t\tThreeDSecureMode: \"optional\",\n\t}\n\n\tresource, err := client.Create(context.Background(), request)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mercado Pago SDK for React via npm\nDESCRIPTION: This command installs the Mercado Pago SDK for React using npm. It's the first step in integrating Mercado Pago functionality into a React application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/react-installation.en.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-react\n```\n\n----------------------------------------\n\nTITLE: PHP Payment Creation with Mercado Pago SDK\nDESCRIPTION: Server-side PHP implementation for creating a payment with comprehensive payer and transaction details using Mercado Pago PHP SDK\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pse-avanza.es.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse MercadoPago\\Client\\Common\\RequestOptions;\nuse MercadoPago\\Client\\Payment\\PaymentClient;\nuse MercadoPago\\MercadoPagoConfig;\n\nMercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n$client = new PaymentClient();\n$request_options = new RequestOptions();\n$request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n$createRequest = [\n  \"transaction_amount\" => 5000,\n  \"description\" => \"Product description\",\n  \"payment_method_id\" => \"pse\",\n  \"callback_url\" => \"http://www.your-site.com\",\n  \"notification_url\" => \"http://www.your-site.com\",\n  \"payer\" => [\n    \"email\" => $_POST['email'],\n    // Additional payer details...\n  ]\n];\n\n$payment = $client->create($createRequest, $request_options);\nprint_r($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK with Access Token\nDESCRIPTION: Set up the Mercado Pago SDK with a production access token for creating payment preferences\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/default-rendering.en.md#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsdk = mercadopago.SDK(\"PROD_ACCESS_TOKEN\")\n```\n\n----------------------------------------\n\nTITLE: Render Brand Brick with React\nDESCRIPTION: This React code renders the Brand Brick using the `@mercadopago/sdk-react` library. The `<Brand />` component is imported from the library and included in the React component's JSX.  It assumes that the `@mercadopago/sdk-react` library is installed as a dependency.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/brand-brick/default-rendering.en.md#2025-04-18_snippet_2\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { Brand } from '@mercadopago/sdk-react';\n\n<Brand />\n```\n\n----------------------------------------\n\nTITLE: Creating Payments with Saved Cards in Multiple Languages\nDESCRIPTION: Code examples showing how to create a payment using a saved card token across different programming languages. These implementations include customer identification and transaction details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/receive-payments-with-saved-cards.en.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $customer_client = new CustomerClient();\n  $cards = $client->list(\"customer_id\");\n  \n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => 100.0,\n    \"token\" => $cards[0]-> token,\n    \"description\" => \"My product\",\n    \"installments\" => 1,\n    \"payment_method_id\" => \"visa\",\n    \"payer\" => [\n      \"type\" => \"customer\",\n      \"id\" => \"1234\"\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerClient = new Customer(client);\n\ncustomerClient.listCards({ customerId: '<CUSTOMER_ID>' })\n\t.then((result) => {\n\n  const payment = new Payment(client);\n\n  const body = {\n    transaction_amount: 100,\n    token: result[0].token,\n    description: 'My product',\n    installments: 1,\n    payment_method_id: 'visa',\n    payer: {\n      type: 'customer',\n      id: '123'\n  }\n};\n\n  payment.create({ body: body }).then((result) => console.log(result));\n});\n```\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest request = PaymentCreateRequest.builder()\n.transactionAmount(new BigDecimal(\"100\"))\n.installments(1)\n.token(\"ff8080814c11e237014c1ff593b57b4d\")\n.payer(PaymentPayerRequest.builder()\n.type(\"customer\")\n.id(\"247711297-jxOV430go9fx2e\")\n.build())\n.build();\n\nclient.create(request);\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\npayment_request = {\ntoken: 'ff8080814c11e237014c1ff593b57b4d',\ninstallments: 1,\ntransaction_amount: 100,\npayer: {\ntype: 'customer',\nid: '123456789-jxOV430go9fx2e'\n}\n}\npayment_response = sdk.payment.create(payment_request)\npayment = payment_response[:response]\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar request = new PaymentCreateRequest\n{\nTransactionAmount = 100,\nToken = \"ff8080814c11e237014c1ff593b57b4d\",\nInstallments = 1,\nPayer = new PaymentPayerRequest\n{\nType = \"customer\",\nEmail = \"test_payer_12345@testuser.com\",\n},\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\n```\n\nLANGUAGE: python\nCODE:\n```\nimport market\nsdk = Mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\npayment_data = {\n\"transaction_amount\": 100,\n\"token\": 'ff8080814c11e237014c1ff593b57b4d',\n\"installations\": 1,\n\"payer\": {\n\"type\": \"customer\",\n\"id\": \"123456789-jxOV430go9fx2e\"\n}\n}\n\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n```\n\nLANGUAGE: go\nCODE:\n```\naccessToken := \"{{ACCESS_TOKEN}}\"\n\n\ncfg, err := config.New(accessToken)\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nclient := payment.NewClient(cfg)\n\n\nrequest := payment.Request{\n   TransactionAmount: 100,\n   Token: \"ff8080814c11e237014c1ff593b57b4d\",\n   Description: \"My product\",\n   Installments: 1,\n   PaymentMethodID:  \"master\",\n   Payer: &payment.PayerRequest{\n      Email: \"test_user_12345@testuser.com\",\n      Identification: &payment.IdentificationRequest{\n         Type: \"CPF\",\n         Number: \"01234567890\",\n      },\n   },\n}\n\n\nresource, err := client.Create(context.Background(), request)\nif err != nil {\n   fmt.Println(err)\n}\n\n\nfmt.Println(resource)\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n'https://api.mercadopago.com/v1/payments' \\\n-d '{\ntransaction_amount: 100,\ntoken: \"ff8080814c11e237014c1ff593b57b4d\",\ninstallments: 1,\npayer: {\ntype: \"customer\",\nid: \"123456789-jxOV430go9fx2e\"\n}\n}'\n```\n\n----------------------------------------\n\nTITLE: Unprocessable Entity Response for Idempotency Errors\nDESCRIPTION: This JSON snippet represents a failed response with HTTP status code 422, indicating an unprocessable entity error. This occurs when the idempotency key has been used already, rendering the request invalid. The response presents an error message along with a cause code for detailed diagnostics.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/idempotency-returns.en.md#2025-04-18_snippet_3\n\nLANGUAGE: Json\nCODE:\n```\n{\n   \"status\": \"422\",\n   \"error\":  \"Unprocessable entity\",\n   \"message\": \"Idempotency key already used.\",\n   \"cause\": [\n    {\n      \"code\":\"422001\",\n      \"message\": \"Idempotency key already used.\",\n      \"data\": null\n    }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Challenge Completion Event\nDESCRIPTION: Event listener to handle 3DS challenge completion and redirect user to confirmation page\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.es.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener(\"message\", (e) => {\n     if (e.data.status === \"COMPLETE\") {\n         window.open(\"congrats.html\");\n     }\n});\n```\n\n----------------------------------------\n\nTITLE: React Payment Brick Integration\nDESCRIPTION: This React code snippet demonstrates how to integrate the Payment Brick using the @mercadopago/sdk-react library. It defines initialization and customization options, along with callback functions for onSubmit, onReady, and onError events. The Payment component is rendered with these configurations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/default-rendering.en.md#2025-04-18_snippet_2\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst initialization = {\n amount: 100,\n preferenceId: \"<PREFERENCE_ID>\",\n};\nconst customization = {\n paymentMethods: {\n   ticket: \"all\",\n   creditCard: \"all\",\n   prepaidCard: \"all\",\n   debitCard: \"all\",\n   mercadoPago: \"all\",\n },\n};\nconst onSubmit = async (\n { selectedPaymentMethod, formData }\n) => {\n // callback called when clicking the submit data button\n return new Promise((resolve, reject) => {\n   fetch(\"/process_payment\", {\n     method: \"POST\",\n     headers: {\n       \"Content-Type\": \"application/json\",\n     },\n     body: JSON.stringify(formData),\n   })\n     .then((response) => response.json())\n     .then((response) => {\n       // receive payment result\n       resolve();\n     })\n     .catch((error) => {\n       // handle error response when trying to create payment\n       reject();\n     });\n });\n};\nconst onError = async (error) => {\n // callback called for all Brick error cases\n console.log(error);\n};\nconst onReady = async () => {\n /*\n   Callback called when Brick is ready.\n   Here you can hide loadings from your site, for example.\n */\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Refund Using PaymentRefundClient in PHP\nDESCRIPTION: This snippet illustrates how to retrieve a specific refund for a payment using the PaymentRefundClient SDK. It requires the payment ID and the refund ID as parameters. Proper error handling should be implemented to manage cases where the refund is not found.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/refunds.en.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $refund_client = new PaymentRefundClient();\n  $refund_client->get('123456789', '1234');\n?>\n```\n\n----------------------------------------\n\nTITLE: Setting Access Token for Mercado Pago in PHP\nDESCRIPTION: This snippet initializes the Mercado Pago SDK with the provided access token and retrieves available payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nMercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n$payment_methods = MercadoPago::get(\"/v1/payment_methods\");\n\n?>\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation Buttons in Markdown\nDESCRIPTION: This snippet demonstrates the use of custom Markdown syntax to create recommended navigation buttons for the Mercado Pago documentation. It includes buttons for generating reports and accessing a glossary.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n> LEFT_BUTTON_RECOMMENDED_EN\n>\n> Generating from Mercado Pago\n>\n> Download your reports manually or scheduled from your Mercado Pago account.         \n>\n> [Generating from Mercado Pago](https://www.mercadopago[FAKER][URL][DOMAIN]/developers/en/guides/additional-content/reports/account-money/panel)\n\n> RIGHT_BUTTON_RECOMMENDED_EN\n>\n> Glossary\n>\n> Know what each term means and the detail of the columns that make up the report.\n>\n> [Glossary](https://www.mercadopago[FAKER][URL][DOMAIN]/developers/en/guides/additional-content/reports/account-money/glossary)\n```\n\n----------------------------------------\n\nTITLE: Available Payments Configuration (MLA)\nDESCRIPTION: This snippet configures the available payment methods for Argentina (mla) within the Mini Apps environment. It specifies 'credit', 'debit', and 'mercadopago' as accepted payment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/landing.es.md#2025-04-18_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n\"---\\navailable_payments: credit, debit, mercadopago\\n---\"\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Ruby\nDESCRIPTION: This Ruby snippet creates a preference object using the Mercado Pago SDK.  It sets the `purpose` to `wallet_purchase` and includes an item with a title, unit price and quantity.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.pt.md#2025-04-18_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# Cria um objeto de preferência\npreference_data = {\n  # o purpose: 'wallet_purchase', permite apenas pagamentos logados\n  # para permitir pagamentos como guest, você pode omitir essa propriedade\n  purpose: 'wallet_purchase',\n  items: [\n    {\n      title: 'Meu produto',\n      unit_price: 75,\n      quantity: 1\n    }\n  ]\n}\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n \n# Este valor é o preferenceId que você usará no HTML na inicialização no Brick\n@preference_id = preference['id']\n```\n\n----------------------------------------\n\nTITLE: Setting Integrator and Platform IDs in PHP for Mercado Pago SDK\nDESCRIPTION: This code snippet demonstrates how to set the platform ID and integrator ID using the Mercado Pago PHP SDK. It allows developers to identify their integrations for metrics and benefits.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/metrics/integration-metrics.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nMercadoPago\\SDK::setPlatformId(\"PLATFORM_ID\");\nMercadoPago\\SDK::setIntegratorId(\"INTEGRATOR_ID\");\n```\n\n----------------------------------------\n\nTITLE: Searching for Merchant Orders with Mercado Pago PHP SDK\nDESCRIPTION: This code snippet shows how to search for merchant orders using the Mercado Pago PHP SDK. It initializes a MerchantOrderClient and then calls the get method with an order ID.  This requires the Mercado Pago PHP SDK to be installed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/orders.en.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new MerchantOrderClient();\n  $client->get(123456789);\n?>\n```\n\n----------------------------------------\n\nTITLE: Changing Main Payment Method Card with PUT Request\nDESCRIPTION: Allows updating the card associated with an existing subscription by sending a new card token via a PUT request to the preapproval endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/subscription-management.en.md#2025-04-18_snippet_2\n\nLANGUAGE: rest\nCODE:\n```\nPUT /preapproval/{id}\n{\n    \"card_token_id\": \"new_card_token\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with 3DS Optional Mode - Ruby\nDESCRIPTION: This Ruby snippet illustrates creating a payment with `three_d_secure_mode` set to \"optional\".  Mercado Pago determines if a 3DS challenge is required. The snippet uses the Mercado Pago Ruby SDK and requires an access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.es.md#2025-04-18_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('<ENV_ACCESS_TOKEN>')\npayment_request = {\n  token: '<CARD_TOKEN>',\n  installments: <INSTALLLMENTS_NUMBER>,\n  transaction_amount: <TRANSACTION_AMOUNT>,\n  description: '<DESCRIPTION>',\n  payer: {\n    email: '<BUYER_EMAIL>',\n  },\n  three_d_secure_mode: 'optional'\n}\npayment_response = sdk.payment.create(payment_request)\npayment = payment_response[:response]\n\n```\n\n----------------------------------------\n\nTITLE: Add Card Payment Brick container\nDESCRIPTION: This snippet shows how to add a div element to the HTML structure.  This div will be the container for the Card Payment Brick, where the payment form will be rendered.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-clientside.es.md#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n\"<div id=\\\"paymentBrick_container\\\"></div>\"\n```\n\n----------------------------------------\n\nTITLE: Updating Report Settings with Node.js\nDESCRIPTION: This Node.js code snippet demonstrates how to update report settings through a PUT request to the Mercado Pago API using the request library.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.en.md#2025-04-18_snippet_10\n\nLANGUAGE: Node.js\nCODE:\n```\nvar request = require('request');\\\n\\\nvar headers = {\\\n    'accept': 'application/json',\\\n    'content-type': 'application/json',\\\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\\\n};\\\n\\\nvar dataString = '{\\\n            \"file_name_prefix\": \"release-report-USER_ID\",\\\n            \"include_withdrawal_at_end\": true,\\\n            \"execute_after_withdrawal\": falsre,\\\n            \"display_timezone\": \"GMT-04\",\\\n            \"notification_email_list\": [\\\n                \"example@email.com\",\\\n                \"john@example.com\"\\\n            ],\\\n            \"frequency\": {\\\n                \"hour\": 0,\\\n                \"type\": \"monthly\",\\\n                \"value\": 1\\\n            },\\\n            \"columns\": [\\\n                {\\\n                    \"key\": \"DATE\"\\\n                },\\\n                {\\\n                    \"key\": \"SOURCE_ID\"\\\n                },\\\n                {\\\n                    \"key\": \"EXTERNAL_REFERENCE\"\\\n                }\\\n            ]\\\n    }';\\\n\\\nvar options = {\\\n    url: 'https://api.mercadopago.com/v1/account/release_report/config',\\\n    method: 'PUT',\\\n    headers: headers,\\\n    body: dataString\\\n};\\\n\\\nfunction callback(error, response, body) {\\\n    if (!error && response.statusCode == 200) {\\\n        console.log(body);\\\n    }\\\n}\\\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Search Payments\nDESCRIPTION: This code searches for payments based on specified filters (ID, external_reference). It uses the `payment().search()` method to query the Mercado Pago API and retrieve matching payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.es.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef index(req, **kwargs):\n        filters = {\n            \"id\": None,\n            \"external_reference\": None\n        }\n\n        payments_search = sdk.payment().search(filters=filters)\n\n        return json.dumps(payments_search[\"response\"], indent=4)\n```\n\n----------------------------------------\n\nTITLE: Notificación de contracargos en JSON\nDESCRIPTION: Ejemplo de estructura JSON para una notificación de contracargos, que se envía cuando se inicia un contracargo o cambia su estado.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/notification-additional-info.es.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"actions\":[\"changed_case_status\"],\n    \"api_version\":\"v1\",\n    \"application_id\":9007201037432480,\n    \"data\":{\n        \"checkout\":\"PRO\",\n        \"date_updated\":\"0001-01-01T00:00:00Z\",\n        \"id\":217000061307271000,\n        \"payment_id\":81034165129,\n        \"product_id\":\"BC32A57TRPP001U8NHHG\",\n        \"site_id\":\"MLA\",\n        \"transaction_intent_id\":\"\"\n        },\n    \"date_created\":\"2024-07-02T22:03:24-04:00\",\n    \"id\":114544942708,\n    \"live_mode\":true,\n    \"type\":\"topic_chargebacks_wh\",\n    \"user_id\":425424311,\n    \"version\":1720427447\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Money Transfer Using Recipient Account ID\nDESCRIPTION: API request to create a money transfer in Mercado Pago using the recipient's account ID instead of email. This alternative method requires the same basic parameters as the email-based method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/money-transfer.es.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n$ curl https://api.mercadopago.com/v1/payments \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Cache-Control: no-cache' \\\n  -H 'Authorization: Bearer ACCESS_TOKEN' \\\n  -d '\n  {\n\t\"transaction_amount\": 100,\n\t\"operation_type\": \"money_transfer\",\n\t\"description\": \"Title of what you are paying for\",\n\t\"installments\": 1,\n\t\"marketplace\": \"NONE\",\n\t\"payment_method_id\": \"account_money\",\n\t\"collector\": {\n\t\t\"id\": \"399606359\"\n\t},\n\t\"external_reference\": \"Reference_1234\",\n\t\"notification_url\": \"https://www.your-site.com/webhooks\",\n}'\n```\n\n----------------------------------------\n\nTITLE: Canceling Payments in Mercado Pago with Node.js\nDESCRIPTION: Code to cancel a payment using the Mercado Pago Node.js SDK. This requires configuring a client with an access token and providing the payment ID and an idempotency key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/cancel-reserve.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, Payment } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: 'YOUR_ACCESS_TOKEN' });\nconst payment = new Payment(client);\n\npayment.cancel({\nid: '<PAYMENT_ID>',\nrequestOptions: {\nidempotencyKey: '<IDEMPOTENCY_KEY>'\n},\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Importing MercadoPago.js Library in HTML\nDESCRIPTION: This HTML snippet includes the MercadoPago.js library in a webpage, which is necessary for rendering the payment form to facilitate transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<body>\n<script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Displaying Card Payment Brick Layout in Markdown\nDESCRIPTION: Markdown code to display the Card Payment Brick layout image for different Mercado Pago country sites. The image shown varies based on the country code.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/introduction.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n----[mlc]----\n![cardform](checkout-bricks/card-form-mlc-pt.png)\n\n------------\n----[mlm]----\n![cardform](checkout-bricks/card-form-mlm-pt.png)\n\n------------\n----[mla]----\n![cardform](checkout-bricks/card-form-pt.png)\n\n------------ \n----[mlb]----\n![cardform](checkout-bricks/card-form-mlb-pt.png)\n\n------------ \n----[mco, mpe, mlu]----\n![cardform](checkout-bricks/card-form-all-pt.png)\n\n------------\n```\n\n----------------------------------------\n\nTITLE: Initializing Fintoc Widget in JavaScript\nDESCRIPTION: Basic initialization of the Fintoc widget instance using MercadoPago's SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-advanced.es.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fintoc = mp.fintoc();\n```\n\n----------------------------------------\n\nTITLE: Initializing MercadoPago SDK in JavaScript\nDESCRIPTION: This snippet initializes the MercadoPago SDK in JavaScript using the public key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-checkout.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mp = new MercadoPago('YOUR_PUBLIC_KEY');\n```\n\n----------------------------------------\n\nTITLE: Generating Authentication URL for Mercado Pago API\nDESCRIPTION: This code snippet demonstrates how to construct the authentication URL for the Mercado Pago API. It includes placeholders for the application ID, state, and redirect URI.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/creation.es.md#2025-04-18_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttps://auth.mercadopago.com/authorization?client_id=APP_ID&response_type=code&platform_id=mp&state=RANDOM_ID&redirect_uri=https://www.redirect-url.com\n```\n\n----------------------------------------\n\nTITLE: X-Signature Header Format\nDESCRIPTION: The format of the X-Signature header that contains the timestamp and the encrypted validation key used to verify the authenticity of Mercado Pago webhook notifications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.en.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n`ts=1742505638683,v1=ced36ab6d33566bb1e16c125819b8d840d6b8ef136b0b9127c76064466f5229b`\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Mercado Pago SDK\nDESCRIPTION: This snippet outlines the steps for manually integrating the Mercado Pago SDK into an iOS application, suitable for projects using older versions of iOS.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ios.en.md#2025-04-18_snippet_3\n\nLANGUAGE: objective-c\nCODE:\n```\n// Open the MercadoPagoSDK folder, and drag MercadoPagoSDK.xcodeproj into the file navigator of your app project.\n// Navigate to the target configuration and ensure the deployment target matches.\n// Update the Build Phases to add MercadoPagoSDK.framework.\n```\n\n----------------------------------------\n\nTITLE: Submitting Tourism Payment Data with cURL\nDESCRIPTION: This cURL command demonstrates how to submit a payment request with tourism-specific data to the Mercado Pago API. It includes details about the transaction, items, passenger information, route details, and buyer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/tourism.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}} \\\n--data-raw '{\n    \"transaction_amount\": 1500.00,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"debvisa\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Ticket01\",\n    \"description\": \"BOG - GRU\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"payer\": {\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"12345678909\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"title\": \"Serviço\",\n                \"description\": \"Descrição de serviço\",\n                \"category_id\": \"travels\",\n                \"category_descriptor\": {\n                    \"passenger\": {\n                        \"first_name\": \"Passenger Nome\",\n                        \"last_name\": \"Passenger Sobrenome\",\n                        \"identification\": {\n                            \"type\": \"DNI\",\n                            \"number\": \"012345678\"\n                        }\n                    },\n                    \"route\": {\n                        \"departure\": \"Osasco\",\n                        \"destination\": \"Sao Paulo\",\n                        \"departure_date_time\": \"2022-03-12T12:58:41.425-04:00\",\n                        \"arrival_date_time\": \"2022-03-14T12:58:41.425-04:00\",\n                        \"company\": \"Companhia\"\n                    }\n                },\n                \"quantity\": 1,\n                \"unit_price\": 1500\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_prime_user\": true,\n            \"is_first_purchase_online\": true,\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"206233-2002\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"230032\"\n            },\n            \"authentication_type\": \"Facebook\",\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Tourism Payment with MercadoPago API using cURL\nDESCRIPTION: This cURL command demonstrates how to create a payment for a tourism-related transaction using the MercadoPago API. It includes detailed information about the item, passenger, route, and buyer to enhance payment approval.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/tourism.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}} \\\n--data-raw '{\n    \"transaction_amount\": 1500.00,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"debvisa\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Ticket01\",\n    \"description\": \"BOG - GRU\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"payer\": {\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"12345678909\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"title\": \"Serviço\",\n                \"description\": \"Descrição de serviço\",\n                \"category_id\": \"travels\",\n                \"category_descriptor\": {\n                    \"passenger\": {\n                        \"first_name\": \"Passenger Nome\",\n                        \"last_name\": \"Passenger Sobrenome\",\n                        \"identification\": {\n                            \"type\": \"DNI\",\n                            \"number\": \"012345678\"\n                        }\n                    },\n                    \"route\": {\n                        \"departure\": \"Osasco\",\n                        \"destination\": \"Sao Paulo\",\n                        \"departure_date_time\": \"2022-03-12T12:58:41.425-04:00\",\n                        \"arrival_date_time\": \"2022-03-14T12:58:41.425-04:00\",\n                        \"company\": \"Companhia\"\n                    }\n                },\n                \"quantity\": 1,\n                \"unit_price\": 1500\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_prime_user\": true,\n            \"is_first_purchase_online\": true,\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"206233-2002\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"230032\"\n            },\n            \"authentication_type\": \"Facebook\",\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: SFTP Notifier Creation Response\nDESCRIPTION: The JSON response returned after creating an SFTP notification configuration, containing the notifier ID and confirmation of the SFTP server details for report delivery.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.en.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": {{notifier_id}},\n    \"type\": \"ftp\",\n    \"data\": {\n        \"protocol\": \"SFTP\",\n        \"ip\": \"test.files.com\",\n        \"username\": \"test@mercadolibre.com\",\n        \"password\": \"test\",\n        \"remote_dir\": \"/\",\n        \"port\": 22\n    },\n    \"description\": null,\n    \"version\": 0,\n    \"status\": \"ACTIVE\",\n    \"is_pii_data\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Home Page with Dynamic Mercado Pago Checkout\nDESCRIPTION: Main page configuration using Next.js dynamic import to load Mercado Pago checkout component with server-side rendering disabled\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/possible-errors.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport Head from \"next/head\";\nimport styles from \"../styles/Home.module.css\";\nimport dynamic from \"next/dynamic\";\n\nconst CheckoutMercadoPago = dynamic(() => import(\"./checkoutMercadoPago\"), {\n  ssr: false,\n});\n\nexport default function Home() {\n  return (\n    <>\n      <Head>\n        <title>Checkout Brick + NextJS</title>\n        <meta name=\"description\" content=\"Generated by create next app\" />\n      </Head>\n      <main className={styles.main}>\n        <CheckoutMercadoPago />\n      </main>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Payment Methods with Ruby SDK\nDESCRIPTION: Code to fetch all available payment methods using Mercado Pago's Ruby SDK. This implementation initializes the SDK with an access token and then requests the payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\npayment_methods_response = sdk.payment_methods.get()\npayment_methods = payment_methods_response[:response]\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Preference ID - Response Example\nDESCRIPTION: Example showing the format of a preference ID in the API response. This identifier is crucial for the next steps of the integration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-preferences.es.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"id\": \"787997534-6dad21a1-6145-4f0d-ac21-66bf7a5e7a58\"\n```\n\n----------------------------------------\n\nTITLE: Creating Pix Payments with Python SDK\nDESCRIPTION: Python implementation for creating Pix payments using Mercado Pago's SDK. This snippet initializes the SDK with an access token, sets up request options with an idempotency key, and creates a payment with transaction amount, payment method, and payer details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pix.es.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n    \"transaction_amount\": 100,\n    \"payment_method_id\": \"pix\",\n    \"payer\": {\n        \"email\": \"PAYER_EMAIL_HERE\",\n    }\n}\n\npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Button Appearance for Argentina\nDESCRIPTION: This code snippet demonstrates how to customize the appearance of the Wallet Button specifically for Argentina (MLA). It modifies the button background color and border radius.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-appearance.en.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n ...,\n customization: {\n      visual: {\n          buttonBackground: 'black',\n          borderRadius: '16px',\n      },\n },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MercadoPago Banner - 125x125px\nDESCRIPTION: HTML code to embed a 125x125 pixel MercadoPago payment methods banner showing 9 interest-free installments option.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/nove.en.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/PSJ/125x125_banner_psj_9x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"125\" height=\"125\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Notification List in JSON\nDESCRIPTION: JSON array for setting up email addresses that will receive notifications when a report is ready for download.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\"example@email.com\", \"john@example.com\"]\n```\n\n----------------------------------------\n\nTITLE: Updating Payment Data with Controller\nDESCRIPTION: Demonstrates how to use the update method of the payment brick controller to modify payment data dynamically\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/add-confirmation-step.en.md#2025-04-18_snippet_8\n\nLANGUAGE: Javascript\nCODE:\n```\nwindow.paymentBrickController.update((paymentData) => {\n   ...\n})\n```\n\n----------------------------------------\n\nTITLE: Invalid Payer Token Error Response\nDESCRIPTION: This JSON response signifies that the `payer_token` provided in the request is invalid. The 'error' field is set to \"bad_request\", the 'message' contains the specific error message (\"Invalid payer token.\"), and the 'status' code is 400. This error indicates that the provided payer token is not valid or recognized.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/coupon-validation-responses.en.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"bad_request\",\n  \"message\": \"Invalid payer token.\",\n  \"status\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Card Token V2 with MercadoPago.js\nDESCRIPTION: This snippet shows how to create a card token using the `createCardToken` method in Mercado Pago's JavaScript SDK V2 (Secure Fields).  It takes an object containing `cardholderName`, `identificationType`, and `identificationNumber` as input, and returns a Promise that resolves with the token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.es.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function createCardToken(){\n    const token = await mp.fields.createCardToken({\n        cardholderName,\n        identificationType, \n        identificationNumber, \n    });\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Generating Marketplace Seller Sales Reports\nDESCRIPTION: This cURL request shows how to manually generate a marketplace seller sales report for a specific date range using the Mercado Pago API. It specifies the report structure, notifiers, and time period.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.es.md#2025-04-18_snippet_8\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/statements' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{TOKEN}}' \\\n--data-raw '{\n    \"user_description\": \"\",\n    \"created_by\": \"automatic\",\n    \"origin\": {\n        \"type\": \"date_range\",\n        \"data\": {\n            \"date_start\": \"2023-04-01T03:00:00Z\",\n    \t\t\"date_end\": \"2023-04-02T02:27:44Z\"\n        }\n    },\n    \"structure_id\": {{structure_id}},\n    \"notifiers_id\": [{{notifier_id}}]\n}'\n```\n\n----------------------------------------\n\nTITLE: Testing TLS Protocol Version in C#\nDESCRIPTION: This C# code establishes an SSL connection to api.mercadopago.com and outputs the SSL protocol version being used.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/pci-compliant-merchants/disabling-tls-10.es.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nstring strWebsiteName = \"api.mercadopago.com\";\nTcpClient _myClient = new TcpClient();\nSslStream _myStream;\n_myClient.Connect(strWebsiteName, 443);\n_myStream = new SslStream(_myClient.GetStream());\n_myStream.AuthenticateAsClient(strWebsiteName);\n\nConsole.WriteLine(\"protocol : \" + _myStream.SslProtocol);\n```\n\n----------------------------------------\n\nTITLE: Transaction Information Response Example (Argentina)\nDESCRIPTION: Sample JSON response for transaction information in Argentina, showing transaction details, amounts, and status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.en.md#2025-04-18_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_date\": \"2024-11-13T15:04:25.699+00:00\",\n  \"external_reference\": \"external_ref_1234\",\n  \"id\": \"22dvqmseu9m\",\n  \"last_updated_date\": \"2024-11-13T15:04:31.256+00:00\",\n  \"point_of_interaction\": {\n    \"type\": \"PSP_TRANSFER\"\n  },\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://example.ar/notification\"\n    }\n  },\n  \"status\": \"processed\",\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": 25,\n          \"status_details\": []\n        }\n      ]\n    },\n    \"paid_amount\": 25,\n    \"payer\": {\n      \"id\": 1992483656\n    },\n    \"refunded_amount\": 0,\n    \"to\": {\n      \"accounts\": [\n        {\n          \"amount\": 25,\n          \"description\": \"envio de 25\",\n          \"origin_id\": \"01JCK0VSV3TBSAADAGJQKG4GTY\",\n          \"status_details\": [\n            \"approved\"\n          ]\n        }\n      ]\n    },\n    \"total_amount\": 25,\n    \"statement_descriptor\": \"\",\n    \"binary_mode\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MercadoPago.js via NPM\nDESCRIPTION: Command to install the MercadoPago JavaScript SDK using NPM. This allows integration of the SDK into projects using JavaScript module bundlers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Multiple Item Preference in Java\nDESCRIPTION: Create a Mercado Pago preference with two items using builder pattern, specifying item details\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/preference-multiple-items.es.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Crea un objeto preferencia\nPreferenceClient client = new PreferenceClient();\n// Crea ítems en la preferencia\nList<PreferenceItemRequest> items = new ArrayList<>();\n\nPreferenceItemRequest item1 =\n   PreferenceItemRequest.builder()\n       .id(\"1234\")\n       .title(\"Produto 1\")\n       .quantity(2)\n       .currencyId(\"BRL\")\n       .unitPrice(new BigDecimal(\"100\"))\n       .build();   \nPreferenceItemRequest item2 =\n   PreferenceItemRequest.builder()\n       .id(\"12\")\n       .title(\"Produto 2\")\n       .quantity(1)\n       .currencyId(\"BRL\")\n       .unitPrice(new BigDecimal(\"100\"))\n       .build();\n\nitems.add(item1);\nitems.add(item2);\n\nPreferenceRequest request = PreferenceRequest.builder().items(items).build();\n// Guardar y postear la preferencia\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Associating Facebook Ads Pixel with Checkout Pro in Java\nDESCRIPTION: This Java code snippet integrates a Facebook Ads pixel with a Mercado Pago preference. It utilizes classes like PreferenceClient and PreferenceTrackRequest, requiring the Facebook pixel ID for setup. The code creates and posts the preference with assigned tracking details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Create a preference object\nPreferenceClient client = new PreferenceClient();\n\n// Associate your Facebook pixel\nList<PreferenceTrackRequest> tracks = new ArrayList<>();\nPreferenceTrackRequest trackFacebook = PreferenceTrackRequest.builder()\n.type(\"facebook_ad\")\n.values(PreferenceTrackValuesRequest.builder().pixelId(\"PIXEL_ID\").build())\n.build();\ntracks.add(trackFacebook);\n\nPreferenceRequest request = PreferenceRequest.builder().tracks(tracks).build();\n\nPreference preference = new Preference()\n.appendTrack(trackFacebook);\n\n// Save and post the preference\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Implementing shareRDCPass Function in Android\nDESCRIPTION: This function demonstrates creating an intent to interact with the RDCPass application for payment. It sets multiple extras, such as userTransactionId and description, to customize the payment request. The function requires Android Intent and proper permission handling.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-create-payment-intent.en.md#2025-04-18_snippet_1\n\nLANGUAGE: android\nCODE:\n```\npublic void shareRDCPass(String total, String intent) { \n\ttry { \n\t\tIntent sharingIntent = new Intent(intent); \n\t\tsharingIntent.setClassName(\"redelcom.cl.rdcpass\", \"redelcom.cl.rdcpass.MainActivity\"); \n\t\tsharingIntent.putExtra(\"packageName\", getPackageName()); \n\t\tsharingIntent.putExtra(\"className\", getClass().toString().split(\" \")[1]); \n\t\tsharingIntent.putExtra(Intent.EXTRA_TEXT, total); \n\t\tsharingIntent.putExtra(\"userTransactionId\", \"DEMO1234\");\n\t\tsharingIntent.putExtra(\"description\", \"Descripcion para tu transacción\");\n\t\tsharingIntent.putExtra(\"payment_type\", \"TIPO_PAGO\");\n\t\tsharingIntent.putExtra(\"request_tip\", false);\n\t\tsharingIntent.putExtra(\"rdcDTE\", false);\n\n\t\tArrayList<String> arrayListUserTransactionId = new ArrayList<String>(); \n\t\tarrayListUserTransactionId.add(\"DEMO1233\"); \n\t\tsharingIntent.putExtra(\"completeTransactions\", arrayListUserTransactionId);\n\t\tstartActivity(sharingIntent); \n\t} catch (Exception e) { \n\t\te.printStackTrace(); \n\t} \n}\n```\n\n----------------------------------------\n\nTITLE: Handling the 3DS Challenge Completion Event (JavaScript)\nDESCRIPTION: This JavaScript code listens for a message event from the iframe, indicating that the 3DS challenge is complete.  When a message with `status === 'COMPLETE'` is received, it redirects the user to a confirmation page (`congrats.html`).\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-bigmerchants.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener(\"message\", (e) => {\n     if (e.data.status === \"COMPLETE\") {\n         window.open(\"congrats.html\");\n     }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing PaymentFlow Activity Kotlin\nDESCRIPTION: This Kotlin code snippet initializes the payment flow using the `PaymentFlow` class, sets up success and error callback URIs, creates a `PaymentFlowData` object with payment details, and launches the payment flow activity with a callback to handle the response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/payment-flow-legacy-support.en.md#2025-04-18_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval paymentFlow = MPManager.paymentFlow\n\nval amount = \"2.0\"\nval description = \"Payment description\"\nval intentSuccess = paymentFlow.buildCallbackUri(\n   callback = \"mercadopago://smart_integrations/payment_result\",\n   methodCallback = \"success\",\n   metadata = hashMapOf(\"message\" to \"testSuccess\"),\n   appID = \"demo.app\"\n)\nval intentError = paymentFlow.buildCallbackUri(\n   callback = \"mercadopago://smart_integrations/payment_result\",\n   methodCallback = \"error\",\n   metadata = hashMapOf(\"message\" to \"testError\"),\n   appID = \"demo.app\"\n)\n\nval paymentFlowData = PaymentFlowData(\n   amount = amount,\n   description = description,\n   intentSuccess = intentSuccess,\n   intentError = intentError,\n   paymentMethod = PaymentMethod.CREDIT_CARD.name,\n   installments = 6\n)\npaymentFlow.launchPaymentFlowActivity(\n   paymentFlowData = paymentFlowData,\n   context = context\n) { response ->\n   response.doIfSuccess { message ->\n       // Success management with a message\n   }.doIfError { error ->\n       // Error management\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Intent-Filter for RDCPass Integration in AndroidManifest\nDESCRIPTION: This snippet adds an intent-filter to the AndroidManifest.xml to enable sending data to RDCPass. It listens for SEND actions with a mime type of text. Required for initiating payment queries.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-query-and-pay-bills.en.md#2025-04-18_snippet_0\n\nLANGUAGE: android\nCODE:\n```\n<intent-filter> \n\t<action android:name=\"android.intent.action.SEND\" /> \n\t<category android:name=\"android.intent.category.DEFAULT\" /> \n\t<data android:mimeType=\"text/*\" /> \n</intent-filter>\n\n```\n\n----------------------------------------\n\nTITLE: Setting Language While Initializing Bricks in React\nDESCRIPTION: This code shows how to set the language when initializing Mercado Pago Bricks in a React application using the SDK-React package. The locale parameter is used to specify Portuguese (Brazil) as the language.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/select-language.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { initMercadoPago } from '@mercadopago/sdk-react';\ninitMercadoPago('YOUR_PUBLIC_KEY', {locale: 'pt-BR'});\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Disabled Release Report in Mercado Pago API\nDESCRIPTION: This JSON snippet shows the expected response structure when successfully disabling automatic generation of a release report. It includes details such as report ID, date range, status, and user ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.en.md#2025-04-18_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 2787882,\n    \"begin_date\": \"2019-08-15T06:00:00Z\",\n    \"created_from\": \"schedule\",\n    \"end_date\": \"2019-08-16T05:59:59Z\",\n    \"generation_date\": \"2019-08-16T02:00:00.000-04:00\",\n    \"last_modified\": \"2019-08-15T15:41:53.681-04:00\",\n    \"report_type\": \"release\",\n    \"retries\": 0,\n    \"status\": \"deleted\",\n    \"user_id\": USER_ID\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Integrator and Platform IDs in Java SDK\nDESCRIPTION: Code for setting platform and integrator identification in Mercado Pago Java SDK. Replace PLATFORM_ID and INTEGRATOR_ID with your actual values to identify your integration and work with metrics.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/metrics/integration-metrics.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMercadoPago.SDK.setPlatformId(\"PLATFORM_ID\");\nMercadoPago.SDK.setIntegratorId(\"INTEGRATOR_ID\");\n```\n\n----------------------------------------\n\nTITLE: Processing Payments with Mercado Pago SDK in Kotlin\nDESCRIPTION: Use the Mercado Pago SDK to process payments in a Kotlin Android application. This includes setting up success and error URIs, and launching the payment flow.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/first-steps.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval paymentFlow = MPManager.paymentFlow\n\nval uriSuccess = paymentFlow.buildCallbackUri(\n   \"mercadopago://launcher_native_app\",\n   \"success\",\n   hashMapOf(\"attr\" to \"123\"),\n   \"demo_app\"\n)\n\nval uriError = paymentFlow.buildCallbackUri(\n   \"mercadopago://launcher_native_app\",\n   \"error\",\n   hashMapOf(\"attr\" to \"456\"),\n   \"demo_app\"\n)\n\npaymentFlow.launchPaymentFlowActivity(\n   amount,\n   description,\n   uriSuccess,\n   uriError,\n   context,\n   lastPaymentMethodSelected\n) { response ->\n   response.doIfError { error ->\n       error.message?.let { errorMessage -> setLayoutError(errorMessage) }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Making a Money Out Transaction Via Pix - cURL\nDESCRIPTION: This cURL command demonstrates how to make a POST request to create a Money Out transaction using the Pix payment method. It includes required headers like Authorization and X-Idempotency-Key and specifies the transaction details in the request body.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    'https://api.mercadopago.com/v1/transaction-intents/process'\\\n    -H 'Content-Type: application/json' \\\n       -H 'X-Idempotency-Key: {{idempotency_key}}' \\\n       -H 'x-Signature: true' \\\n       -H 'x-enforce-signature: false' \\\n       -H 'Authorization: Bearer TEST-7434*********159-03141*********cee51edf8*********f94f589-1*********' \\\n    -d '{\\n  \"external_reference\": \"MP0001\",\\n  \"point_of_interaction\": \"{\\\"type\\\":\\\"PSP_TRANSFER\\\"}\",\\n  \"seller_configuration\": {\\n    \"notification_info\": {\\n      \"notification_url\": \"http://example.com.br/notification\"\\n    }\\n  },\\n  \"transaction\": {\\n    \"from\": {\\n      \"accounts\": [\\n        {\\n          \"amount\": 100\\n        }\\n      ]\\n    },\\n    \"to\": {\\n      \"accounts\": [\\n        {\\n          \"type\": \"current\",\\n          \"amount\": 100,\\n          \"chave\": {\\n            \"type\": \"CPF\",\\n            \"value\": \"1234567890\"\\n          },\\n          \"owner\": {\\n            \"identification\": {\\n              \"type\": \"CPF\",\\n              \"number\": \"1234567890\"\\n            }\\n          }\\n        }\\n      ]\\n    },\\n    \"total_amount\": 100\\n  }\\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods in React JSX for Checkout Bricks\nDESCRIPTION: This React JSX code snippet shows how to create a customization object to exclude debit card payments in Checkout Bricks. It defines a 'paymentMethods' object with a 'types' property, setting 'excluded' to an array containing 'debit_card'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/configure-payment-methods.es.md#2025-04-18_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nconst customization = {\n paymentMethods: {\n   types: {\n     excluded: ['debit_card'],\n   },\n },\n};\n```\n\n----------------------------------------\n\nTITLE: ProGuard Configuration for Mercado Pago SDK\nDESCRIPTION: This snippet contains ProGuard configuration settings necessary to keep the Mercado Pago classes from being obfuscated during the build process. It ensures that the bindings remain accessible and functional in the final app.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/android.es.md#2025-04-18_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n-keep class com.mercadopago.** { *; }\n```\n\n----------------------------------------\n\nTITLE: Transaction Response Example (MLA)\nDESCRIPTION: This is an example of a transaction response from Mercado Pago for Argentina (MLA). It includes information such as creation date, external reference, transaction ID, status, and details about the payer and payee accounts. The `status` field indicates the current state of the transaction.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.es.md#2025-04-18_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"created_date\": \"2024-11-13T15:04:25.699+00:00\",\n  \"external_reference\": \"external_ref_1234\",\n  \"id\": \"22dvqmseu9m\",\n  \"last_updated_date\": \"2024-11-13T15:04:31.256+00:00\",\n  \"point_of_interaction\": {\n    \"type\": \"PSP_TRANSFER\"\n  },\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://example.ar/notification\"\n    }\n  },\n  \"status\": \"processed\",\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": 25,\n          \"status_details\": []\n        }\n      ]\n    },\n    \"paid_amount\": 25,\n    \"payer\": {\n      \"id\": 1992483656\n    },\n    \"refunded_amount\": 0,\n    \"to\": {\n      \"accounts\": [\n        {\n          \"amount\": 25,\n          \"description\": \"envio de 25\",\n          \"origin_id\": \"01JCK0VSV3TBSAADAGJQKG4GTY\",\n          \"status_details\": [\n            \"approved\"\n          ]\n        }\n      ]\n    },\n    \"total_amount\": 25,\n    \"statement_descriptor\": \"\",\n    \"binary_mode\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Report Types\nDESCRIPTION: A structured table listing the different types of financial reports available in Mercado Pago, including descriptions of their purposes and functionalities.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/general-considerations/reconciliation-reports.es.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Tipo de reporte | Descripción |\n|---|---|\n| ----[mlm, mlb, mlc, mco, mlu, mpe]---- Reporte de Liberaciones ------------ ----[mla]---- Reporte de Liquidaciones ------------ | Proporciona la composición del saldo disponible en su cuenta, con detalles sobre los valores involucrados en un período determinado. Consulte la [documentación de ----[mla]----Liquidaciones------------ ----[mlm, mlb, mlc, mco, mlu, mpe]----Liberaciones------------](/developers/es/docs/reports/released-money/introduction) para obtener más información. |\n| Reporte de Dinero en cuenta | Informa sobre las transacciones/movimientos que afectaron su saldo en cuenta. Para obtener más información, consulte la [documentación de Dinero en cuenta](/developers/es/docs/reports/account-money/introduction). |\n| Reportes de Facturación | El **Marketplace de Mercado Libre** ha desarrollado una serie de reportes de facturación para proporcionar detalles financieros de las transacciones realizadas en Mercado Pago a partir de las ventas en Mercado Libre. <br><br>Los datos de los reportes también incluyen información financiera de usuarios que no realizan ventas en Mercado Libre, ya que los datos de facturación son de Mercado Pago. Para obtener más información, consulte la ----[mlb]----[documentación](https://developers.mercadolivre.com.br/pt_br/relatorios-de-faturamento)------------ ----[mla, mlm, mlc, mco, mlu, mpe]----[documentación](https://developers.mercadolibre[FAKER][URL][DOMAIN]/es_ar/reportes-de-facturacion)------------.|\n| Reporte de Ventas de la Solución Split de Pagos do Mercado Pago | El Reporte de ventas de la solución split de pagos do Mercado Pago ofrece una visión completa de las transacciones de los vendedores vinculados, disponible para su descarga en los formatos _csv_ y _json_. Para obtener más información, consulte la [documentación](/developers/es/docs/reports/sales-report/introduction). |\n```\n\n----------------------------------------\n\nTITLE: Creating a Deep Link in AndroidManifest.xml\nDESCRIPTION: This XML snippet illustrates how to define a Deep Link scheme within the AndroidManifest.xml file, enabling navigation to specific app sections from external links.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-cli.en.md#2025-04-18_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<activity ....> ....\n<intent-filter data-generated=\"true\">\n<action android:name=\"android.intent.action.VIEW\"/>\n<data android:scheme=\"myapp\" android:host=\"checkout\" android:pathPrefix=\"/congrats\"/> <category android:name=\"android.intent.category.BROWSABLE\"/>\n<category android:name=\"android.intent.category.DEFAULT\"/>\n</intent-filter>\n.... </activity>\n```\n\n----------------------------------------\n\nTITLE: Replacing with Card Payment Brick Container\nDESCRIPTION: This HTML snippet defines a container for the Card Payment Brick. It serves as a placeholder where the Card Payment Brick will be rendered, replacing the original Web Tokenize Checkout form.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-clientside.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"paymentBrick_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Canceling Payments in Mercado Pago with Go\nDESCRIPTION: Code to cancel a payment using the Mercado Pago Go SDK. This requires configuring the SDK with an access token and using a payment client to cancel a payment by its ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/cancel-reserve.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/payment\"\n)\n\nfunc main() {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\n\tclient := payment.NewClient(cfg)\n\n\tresource, err := client.Cancel(context.Background(), <PAYMENT_ID>)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Settlement Reports via API (Multiple Languages)\nDESCRIPTION: Send a GET request to retrieve a list of generated settlement reports. The API requires authentication and returns a JSON array of report details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.en.md#2025-04-18_snippet_5\n\nLANGUAGE: curl\nCODE:\n```\ncurl -G \\\n    -H 'accept: application/json' \\\n    -d 'access_token=ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/list'\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json'\n);\n$data = array(\n    'access_token' => 'ENV_ACCESS_TOKEN'\n);\n$response = Requests::get('https://api.mercadopago.com/v1/account/settlement_report/list', $headers, $data);\n```\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report/list\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nconnection.setRequestMethod(\"GET\");\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = { \n    'accept': 'application/json',\n    'Authorization: Bearer ENV_ACCESS_TOKEN'\n}\n\nresponse = requests.get('https://api.mercadopago.com/v1/account/settlement_report/list', headers=headers)\n```\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\nvar headers = { 'accept': 'application/json'};\nvar dataString = 'access_token=ENV_ACCESS_TOKEN';\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report/list',\n    method: 'GET',\n    headers: headers,\n    body: dataString\n};\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Associating Facebook Pixel with Checkout Pro Preference\nDESCRIPTION: This code snippet demonstrates how to associate a Facebook Pixel ID with a Checkout Pro preference for ad conversion tracking. It requires replacing 'PIXEL_ID' with the actual Facebook Pixel identifier.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  // Criar um objeto preferencia\n  $preference = new MercadoPago\\Preference();\n\n  // Associar seu pixel do Facebook\n  $preference->tracks = array(\n    array(\n      'type' => 'facebook_ad',\n      'values'=> array(\n        'pixel_id' => 'PIXEL_ID'\n      )\n    )\n  );\n\n  // ...\n  // Salvar e postar a preferencia\n  $preference->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Setting Visual Customization Properties - JavaScript\nDESCRIPTION: This code snippet shows how to define visual customization properties for the Wallet Brick, including background button color and border radius. This is relevant when rendering the Brick component in a client-side application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/change-appearance.en.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n         visual: {\n             buttonBackground: 'black',\n             borderRadius: '16px',\n         },\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Payment using MercadoPago API - PHP\nDESCRIPTION: This PHP script demonstrates how to create a payment through the MercadoPago API using the PaymentClient. It sets up the necessary access token, configures idempotency headers, and constructs a payment request with details about the transaction and the payer's information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.es.md#2025-04-18_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse MercadoPago\\Client\\Payment\\PaymentClient;\nuse MercadoPago\\Client\\Common\\RequestOptions;\nuse MercadoPago\\MercadoPagoConfig;\n\nMercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n$client = new PaymentClient();\n$request_options = new RequestOptions();\n$request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]); \n\n$payment = $client->create([\n  \"transaction_amount\" => (float) $_POST['<TRANSACTION_AMOUNT>'],\n  \"payment_method_id\" => $_POST['<PAYMENT_METHOD_ID>'],\n  \"payer\" => [\n    \"email\" => $_POST['<EMAIL>'],\n    \"first_name\" => $_POST['<NOME>'],\n    \"last_name\" => $_POST['<SOBRENOME>'],\n    \"identification\" => [\n      \"type\" =>  $_POST['<TIPO DE DOCUMENTO>'],\n      \"number\" => $_POST['<NUMERO>']\n    ],\n    \"address\" => [\n      \"zip_code\" => $_POST['<CEP>'],\n      \"city\" => $_POST['<CIDADE>'],\n      \"street_name\" => $_POST['<RUA>'],\n      \"street_number\" => $_POST['<NÚMERO>'],\n      \"neighborhood\" => $_POST['<BAIRRO>'],\n      \"federal_unit\" => $_POST['<SIGLA DO ESTADO>']\n    ]\n  ]\n], $request_options);\necho implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Configuring Boleto Bancário Payment Method for Subscriptions\nDESCRIPTION: Send a POST request to the preapproval_plan endpoint with payment_methods_allowed parameter to enable boleto bancário as a subscription payment method. Only available for Checkout Pro integrations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/payment-methods.en.md#2025-04-18_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /preapproval_plan\n{\n  \"payment_methods_allowed\": \"bolbradesco\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auxiliary Callbacks in JavaScript for Mercado Pago Wallet\nDESCRIPTION: This snippet demonstrates how to create a Mercado Pago Wallet button with auxiliary callbacks in JavaScript. It initializes the wallet with a preference ID and redirect mode, and includes onReady, onSubmit, and onError callbacks.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/auxiliary-callbacks.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nmp.bricks().create(\"wallet\", \"wallet_container\", {\n   initialization: {\n       preferenceId: \"<PREFERENCE_ID>\",\n       redirectMode: \"self\",\n   },\n   callbacks: {\n       onReady: () => {},\n       onSubmit: () => {},\n       onError: (error) => console.error(error),\n     },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Device ID Header to Request\nDESCRIPTION: This code snippet illustrates how to add the Device ID as a header to the request. The `X-meli-session-id` header is used to transmit the device ID to Mercado Pago servers.  Make sure to replace `device_id` with the correct variable name.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/device-id.es.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\nX-meli-session-id: device_id\n```\n\n----------------------------------------\n\nTITLE: Scheduled Report Event Configuration Response\nDESCRIPTION: This JSON response shows the configuration details of a scheduled marketplace seller sales report event. It includes frequency settings, structure ID, and status information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.es.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": {{event_id}},\n    \"type\": \"frequency\",\n    \"data\": {\n        \"period\": \"daily\",\n        \"value\": 0,\n        \"hour\": 20,\n        \"skip_non_working_days\": false\n    },\n    \"description\": \"event test\",\n    \"structure_id\": {{structure_id}},\n    \"notifiers\": [],\n    \"status\": \"ACTIVE\",\n    \"version\": 0,\n    \"user_id\": {{user_id}}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Ionic Plugins\nDESCRIPTION: Lists the required Ionic plugins (AppVersion and WebIntent) needed for RDCPass system communication.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/cross-platform-ionic.en.md#2025-04-18_snippet_0\n\nLANGUAGE: ionic\nCODE:\n```\nAppVersion => (https://ionicframework.com/docs/native/app-version) \n\nWebIntent => (https://ionicframework.com/docs/native/web-intent)\n```\n\n----------------------------------------\n\nTITLE: Webhook Registration Response in JSON Format\nDESCRIPTION: This JSON response is returned after successfully registering a webhook for Pix notifications. It includes the webhook URL, the Pix key it's associated with, and the creation timestamp.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/pix-payments/notifications.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"webhookUrl\": \"https://enbt7m5adgf8f.x.pipedream.net\",\n    \"chave\": \"test_user_81729269@testuser.com\",\n    \"criacao\": \"2022-07-05T17:15:12.107Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Associating Google Ads with a Preference in Python\nDESCRIPTION: This snippet shows how to add a Google Ads tracking tag to a preference for conversion tracking purposes. The code requires replacing the placeholder values 'CONVERSION_ID' and 'CONVERSION_LABEL' with the actual tag data. The updated preference data is then used to create the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/preferences.en.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n===\nAdd the code in the preference and replace the <code>CONVERSION_ID</code> and <code>CONVERSION_LABEL</code> values with the data from your tag.\n===\n# Associate your tag\npreference_data = {\n    # ...\n    \"tracks\": [\n        {\n            \"type\": \"google_ad\",\n            \"values\": {\n                \"conversion_id\": \"CONVERSION_ID\",\n                \"conversion_label\": \"CONVERSION_LABEL\"\n            }\n        }\n    ]\n}\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods in Ruby for Mercado Pago\nDESCRIPTION: Ruby implementation for excluding specific payment methods and types in Mercado Pago Checkout Pro, with a maximum of 12 installments\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/payment-methods.es.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n#...\npreference_data = {\n  # ...\n  payment_methods: {\n    excluded_payment_methods: [\n      { id: 'master' }\n    ],\n    excluded_payment_types: [\n      { id: 'ticket' }\n    ],\n    installments: 12\n  }\n  # ...\n}\n#...\n```\n\n----------------------------------------\n\nTITLE: Initializing PagoEfectivo Payment Form with Email in React for Peru\nDESCRIPTION: React implementation to pre-populate the email field for PagoEfectivo payments in Peru. This object configuration initializes the Brick with the payer's email address.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/initialize-data-on-the-bricks.en.md#2025-04-18_snippet_11\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst initialization = {\n ...,\n payer: {\n   email: '<PAYER_EMAIL_HERE>',\n },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Pix Payment Expiration Date\nDESCRIPTION: Example of how to set the expiration date for a Pix payment using ISO 8601 format. The default expiration is 24 hours, but it can be customized with a recommended minimum of 30 minutes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/pix.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\n\"date_of_expiration\": \"2023-01-28T22:59:59.000-04:00\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Preference Request with Different Unit Price in Mercado Pago SDK - C#\nDESCRIPTION: This snippet also creates a preference request using the Mercado Pago SDK in C# but sets a different unit price. It follows the same structure and dependencies as the previous snippet.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/preferences.en.md#2025-04-18_snippet_1\n\nLANGUAGE: dotnet\nCODE:\n```\n// Mercado Pago SDK\nusing MercadoPago.Config;\nusing MercadoPago.Client.Preference;\nusing MercadoPago.Resource.Preference;\n// Add Your credentials\nMercadoPagoConfig.AccessToken = \"PROD_ACCESS_TOKEN\";\n// Create the preference request object\nvar request = new PreferenceRequest\n{\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"My Item\",\n            Quantity = 1,\n            CurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\n            UnitPrice = 75m,\n        },\n    },\n};\n// Create the preference using the client\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Setting Access Token for Node.js Integration\nDESCRIPTION: This Node.js snippet illustrates how to configure the Mercado Pago access token and retrieve a list of all payment methods asynchronously. The setup requires the Mercado Pago package.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nvar Mercadopago = require('mercadopago');\nMercadopago.configurations.setAccessToken(config.access_token);\n\nvar response = await Mercadopago.payment_methods.listAll();\nvar payment_methods = response.body;\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference with Mercado Pago API\nDESCRIPTION: Example of creating a payment preference using Mercado Pago's API. The request includes item details, payer information, back URLs, payment method restrictions, shipping details, and other configuration options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.en.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\n$ curl https://api.mercadopago.com/checkout/preferences \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer <ACCESS_TOKEN>' \\\n  -d '\n{\n\t\"items\": [\n\t\t{\n\t\t\t\"id\": \"item-ID-1234\",\n\t\t\t\"title\": \"Title of what you are paying for. It will be displayed in the payment process.\",\n\t\t\t\"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n\t\t\t\"picture_url\": \"https://www.mercadopago.com/org-img/MP3/home/logomp3.gif\",\n\t\t\t\"description\": \"Item description\",\n\t\t\t\"category_id\": \"others\",\n\t\t\t\"quantity\": 1,\n\t\t\t\"unit_price\": 100\n\t\t}\n\t],\n\t\"payer\": {\n\t\t\"name\": \"user-name\",\n\t\t\"surname\": \"test_user_88271050@testuser.com\",\n\t\t\"email\": \"user@email.com\",\n\t\t\"phone\": {\n\t\t\t\"area_code\": \"11\",\n\t\t\t\"number\": \"4444-4444\"\n\t\t},\n\t\t\"identification\": {\n\t\t\t\"type\": \"DNI\",\n\t\t\t\"number\": \"12345678\"\n\t\t},\n\t\t\"address\": {\n\t\t\t\"street_name\": \"Street\",\n\t\t\t\"street_number\": 123,\n\t\t\t\"zip_code\": \"5700\"\n\t\t}\n\t},\n\t\"back_urls\": {\n\t\t\"success\": \"https://www.success.com\",\n\t\t\"failure\": \"http://www.failure.com\",\n\t\t\"pending\": \"http://www.pending.com\"\n\t},\n\t\"auto_return\": \"approved\",\n\t\"payment_methods\": {\n\t\t\"excluded_payment_methods\": [\n\t\t\t{\n\t\t\t\t\"id\": \"master\"\n\t\t\t}\n\t\t],\n\t\t\"excluded_payment_types\": [\n\t\t\t{\n\t\t\t\t\"id\": \"ticket\"\n\t\t\t}\n\t\t]\n\t},\n\t\"shipments\": {\n\t\t\"receiver_address\": {\n\t\t\t\"zip_code\": \"5700\",\n\t\t\t\"street_number\": 123,\n\t\t\t\"street_name\": \"Street\",\n\t\t\t\"floor\": 4,\n\t\t\t\"apartment\": \"C\"\n\t\t}\n\t},\n\t\"notification_url\": \"https://www.your-site.com/ipn\",\n\t\"external_reference\": \"Reference_1234\",\n\t\"counter_currency\": {\n\t\t\"currency_id\": \"USD\"\n\t}\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Complete Pix Payment with Mercado Pago API\nDESCRIPTION: Full example of creating a Pix payment using Mercado Pago's API. This includes transaction details, payer information, expiration date, and additional information such as items and shipping details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/pix.es.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'x-platform-id: {{PLATFORM_ID proporcionado por el equipo de Partners}}' \\\n--header 'Authorization: Bearer {{ACCESS_TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"transaction_amount\": 100,\n    \"installments\": 1,\n    \"statement_descriptor\": \"Tienda del vendedor\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": {{ID de su cuenta Mercado Pago referente a su plataforma}},\n    \"payment_method_id\": \"pix\",\n    \"date_of_expiration\": \"2023-02-28T22:59:59.000-04:00\",\n    \"external_reference\": \"Identificador de la plataforma\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"description\": \"Descripción del producto del vendedor\",\n    \"payer\": {\n        \"first_name\": \"Nombre. Ejemplo: John\",\n        \"last_name\": \"Apellido. Ejemplo: Jones\",\n        \"email\": \"test_user_{{$timestamp}}@testuser.com\",\n        \"identification\": {\n            \"type\": \"Tipo de documento. Ejemplo: CPF\",\n            \"number\": \"Número del documento. Ejemplo: 19119119100\"\n        },\n        \"address\": {\n            \"zip_code\": \"Código de área. CEP: 06233-200\",\n            \"street_name\": \"Nombre de la calle. Ejemplo: Av. das Nações Unidas\",\n            \"street_number\": \"Número. Ejemplo: 3003\",\n            \"neighborhood\": \"Barrio. Ejemplo: Bonfim\",\n            \"city\": \"Ciudad. Ejemplo: Osasco\",\n            \"federal_unit\": \"UF. Ejemplo: SP\"\n        }\n    },\n    \"additional_info\": {\n        \"referral_url\": \"URL de referencia. Ejemplo: www.sellertest123.com\",\n        \"drop_shipping\": true,\n        \"delivery_promise\": \"2022-11-20\",\n        \"contrated_plan\": \"premium\",\n        \"items\": [\n            {\n                \"id\": \"1941\",\n                \"title\": \"Producto del vendedor\",\n                \"description\": \"Descripción del producto del vendedor\",\n                \"picture_url\": null,\n                \"category_id\": \"Categoría. Ejemplo: electronics\",\n                \"quantity\": 1,\n                \"unit_price\": 100.00\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nombre. Ejemplo: John\",\n            \"last_name\": \"Apellido. Ejemplo: Jones\",\n            \"is_prime_user\": \"1\",\n            \"is_first_purchase_online\": \"1\",\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"Código de área. Ejemplo: 11\",\n                \"number\": \"Número de teléfono. Ejemplo: 987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"Código postal. Ejemplo: 06233-200\",\n                \"street_name\": \"Nombre de la calle. Ejemplo: Av. das Nações Unidas\",\n                \"street_number\": \"Número. Ejemplo: 3003\"\n            },\n            \"registration_date\": \"2013-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"0\",\n            \"pick_up_on_seller\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"Código postal. Ejemplo: 95630000\",\n                \"street_name\": \"Nombre de la calle. Ejemplo: São Luiz\",\n                \"street_number\": \"Número. Ejemplo: 15\",\n                \"floor\": \"Piso (en caso de que sea un apartamento). Ejemplo: Segundo\",\n                \"apartment\": \"Número del apartamento (en caso de que sea un apartamento). Ejemplo: 93\"\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Integrating Wallet Brick in HTML\nDESCRIPTION: This HTML snippet demonstrates how to integrate the Mercado Pago Wallet Brick into a website. It includes the necessary script for the Mercado Pago SDK, initializes the Wallet Brick, and handles the `onSubmit` event to create a preference using a server-side endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-onsubmit.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Bricks</title>\n  </head>\n  <body>\n    <div id=\"walletBrick_container\"></div>\n    <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n    <script>\n      const mp = new MercadoPago('YOUR_PUBLIC_KEY');\n      const bricksBuilder = mp.bricks();\n      const renderWalletBrick = async (bricksBuilder) => {\n        const settings = {\n          callbacks: {\n            onReady: () => {\n              /*\n                Callback chamado quando o Brick estiver pronto.\n                Aqui você pode ocultar loadings do seu site, por exemplo.\n              */\n            },\n            onSubmit: () => {\n              // callback chamado ao clicar no Wallet Brick\n              // isso é possível porque o Brick é um botão\n              // neste momento de submit, você deve criar a preferência\n              const yourRequestBodyHere = {\n                items: [\n                  id: \"202809963\",\n                  title: \"Dummy title\",\n                  description: \"Dummy description\",\n                  quantity: 1,\n                  unit_price: 10,\n                ],\n                purpose: \"wallet_purchase\"\n              };\n              return new Promise((resolve, reject) => {\n                fetch(\"/create_preference\", {\n                  method: \"POST\",\n                  headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                  body: JSON.stringify(yourRequestBodyHere)\n                })\n                .then((response) => {\n                  // resolver a promise com o ID da preferência\n                  resolve(response.preference_id);\n                })\n                .catch((error) => {\n                  // lidar com a resposta de erro ao tentar criar a preferência\n                  reject();\n                })\n              });\n            },\n            onError: (error) => {\n              // callback chamado para todos os casos de erro do Brick\n              console.error(error);\n            },\n          },\n        };\n        window.walletBrickController = await bricksBuilder.create(\n          'wallet',\n          'walletBrick_container',\n          settings\n        );\n      };\n      renderWalletBrick(bricksBuilder);\n    </script>\n  </body>\n</html>\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment Form - JavaScript\nDESCRIPTION: This JavaScript snippet initializes the payment form with the MercadoPago SDK, linking HTML input fields to the relevant data for payment processing. It provides callbacks for handling form events such as submission and fetching resources.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst cardForm = mp.cardForm({\n    amount: \"100.5\",\n    iframe: true,\n    form: {\n        id: \"form-checkout\",\n        cardNumber: {\n            id: \"form-checkout__cardNumber\",\n            placeholder: \"Número do cartão\",\n        },\n        expirationDate: {\n            id: \"form-checkout__expirationDate\",\n            placeholder: \"MM/AA\",\n        },\n        securityCode: {\n            id: \"form-checkout__securityCode\",\n            placeholder: \"Código de segurança\",\n        },\n        cardholderName: {\n            id: \"form-checkout__cardholderName\",\n            placeholder: \"Titular do cartão\",\n        },\n        issuer: {\n            id: \"form-checkout__issuer\",\n            placeholder: \"Banco emissor\",\n        },\n        installments: {\n            id: \"form-checkout__installments\",\n            placeholder: \"Parcelas\",\n        },\n        identificationType: {\n            id: \"form-checkout__identificationType\",\n            placeholder: \"Tipo de documento\",\n        },\n        identificationNumber: {\n            id: \"form-checkout__identificationNumber\",\n            placeholder: \"Número do documento\",\n        },\n        cardholderEmail: {\n            id: \"form-checkout__cardholderEmail\",\n            placeholder: \"E-mail\",\n        },\n    },\n    callbacks: {\n        onFormMounted: error => {\n            if (error) return console.warn(\"Form Mounted handling error: \", error);\n            console.log(\"Form mounted\");\n        },\n        onSubmit: event => {\n            event.preventDefault();\n\n            const {\n                paymentMethodId: payment_method_id,\n                issuerId: issuer_id,\n                cardholderEmail: email,\n                amount,\n                token,\n                installments,\n                identificationNumber,\n                identificationType,\n            } = cardForm.getCardFormData();\n\n            fetch(\"/process_order\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    total_amount: amount, // deve ser uma string com o formato ..0.00\n                    description: description,\n                    payer: {\n                        email,\n                        identification: {\n                            type: identificationType,\n                            number: identificationNumber\n                        }\n                    },\n                    transactions: [\n                        {\n                            amount, // deve ser uma string com o formato ..0.00\n                            payment_method: {\n                                token,\n                                id: payment_method_id,\n                                type: type, // deve ser “credit_card” ou “debit_card”,\n                                installments: Number(installments)\n                            }\n                        }\n                    ]\n                }),\n            });\n        },\n        onFetching: (resource) => {\n            console.log(\"Fetching resource: \", resource);\n\n            // Animate progress bar\n            const progressBar = document.querySelector(\".progress-bar\");\n            progressBar.removeAttribute(\"value\");\n\n            return () => {\n                progressBar.setAttribute(\"value\", \"0\");\n            };\n        }\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Parameter Equivalences in Markdown Table\nDESCRIPTION: This markdown table shows the equivalences between parameters returned in the Collections and Payments APIs for IPN notifications. It includes field names, data types, and explanations for fields that don't have direct equivalents.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/hidden-ipn-deprecated-collections.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| collections/notifications | v1/payments |\n|:---:|:---:|\n| `collection.id` | `id` (string) |\n| `collection.date_created` | `date_created` (datetime) |\n| `collection.date_approved` | `date_approved` (datetime) |\n| `collection.money_release_date` | `money_release_date` (datetime) |\n| `collection.last_modified` | `date_last_updated` (datetime) |\n| `collection.payer.id` | `payer.id` (string) |\n| `collection.payer.first_name` | `payer.first_name` (string) |\n| `collection.payer.last_name` | `payer.last_name` (string) |\n| `collection.payer.phone.area_code` | `payer.phone.area_code` (string) |\n| `collection.payer.phone.number` | `payer.phone.number` (string) |\n| `collection.payer.phone.extension` | `payer.phone.extension` (string) |\n| `collection.payer.identification.type` | `payer.identification.type` (string) |\n| `collection.payer.identification.number` | `payer.identification.number` (string) |\n| `collection.payer.email` | `payer.email` (string) |\n| `collection.payer.nickname` | Not applicable in _v1/payments_. |\n| `collection.order_id` | `order.id` (string) |\n| `collection.external_reference` | `external_reference` (string) |\n| `collection.merchant_order_id` | `order.id` (string) |\n| `collection.reason` | `description` (string) |\n| `collection.currency_id` | `currency_id` (string) |\n| `collection.transaction_amount` | `transaction_amount` (float64) |\n| `collection.net_received_amount` | `transaction_details.net_received_amount` (float64) |\n| `collection.total_paid_amount` | `transaction_details.total_paid_amount` (float64) |\n| `collection.shipping_cost` | `shipping_amount` (float64) |\n| `collection.coupon_amount` | `coupon_amount` (float64) |\n| `collection.coupon_fee` | `fee_details.amount` (float64).  It is mapped in this field when the fee type is `coupon_fee` and the payment is in `approved` status. Example: In _v1/payments_ we would have:<br>\"fee_details\": [{<br>\"type\": \"coupon_fee\"<br>\"amount\": 10 <br>}] |\n| `collection.finance_fee` | `fee_details.amount` (float64). It is mapped in this field when the fee type is `finance_fee` and the payment is in `approved` status. Example: In _v1/payments_ we would have:<br>\"fee_details\": [{<br>\"type\": \"finance_fee\"<br>\"amount\": 10 <br>}] |\n| `collection.discount_fee` | `fee_details.amount` (float64). It is mapped in this field when the fee type is `discount_fee` and the payment is in `approved` status. Example: In _v1/payments_ we would have:<br>\"fee_details\": [{<br>\"type\": \"'discount_fee'\"<br>\"amount\": 10 <br>}] |\n| `collection.marketplace_fee` | `fee_details.amount` (float64). It is mapped in this field when the fee type is `application_fee` and the payment is in `approved` status. Example: In _v1/payments_ we would have:<br>\"fee_details\": [{<br>\"type\": \"application_fee\"<br>\"amount\": 10 <br>}] |\n| `collection.coupon_id` | `coupon_id` (string) |\n| `collection.status` | `status` (string) |\n| `collection.status_detail` | `status_detail` (string) |\n| `collection.installments` | `installments` (integer) |\n| `collection.issuer_id` | `issuer_id` (string) |\n| `collection.installment_amount` | `transaction_details.installment_amount` (float64) |\n| `collection.deferred_period` | Does not exist in _v1/payments_, always reported as empty. |\n| `collection.payment_type` | `payment_type_id` (string) |\n| `collection.payment_method_id` | `payment_method_id` (string) |\n| `collection.marketplace` |Does not exist in _v1/payments_. |\n| `collection.operation_type` | `operation_type` (string) |\n| `collection.transaction_order_id` | Does not exist in _v1/payments_, always reported as empty. |\n| `collection.statement_descriptor` | `statement_descriptor` (string) |\n| `collection.cardholder.name` | `card.cardholder.name` (string) |\n| `collection.cardholder.identification.type` | `card.cardholder.identification.type` (string) |\n| `collection.cardholder.identification.number` | `card.cardholder.identification.number` (string) |\n| `collection.authorization_code` | `authorization_code` (string) |\n| `collection.last_four_digits` | `card.last_four_digits` (string) |\n| `collection.deduction_schema` | `deduction_schema` (string) |\n| `collection.refunds` | `refunds` (array) |\n| `collection.refunds.id` | `refunds.id` (string) |\n| `collection.refunds.gtw_refund_id` | `refunds.gtw_refund_id` (string) |\n| `collection.refunds.collection_id` | `refunds.collection_id` (string) |\n| `collection.refunds.movement_id` | `refunds.collector_movement_id` (string) |\n| `collection.refunds.metadata`  | `refunds.metadata` (object) |\n| `collection.refunds.amount` | `refunds.amount` (float64) |\n| `collection.refunds.source` | `refunds.source` (string) |\n| `collection.refunds.date_created` | `refunds.date_created` (datetime) |\n| `collection.amount_refunded` | `transaction_amount_refunded` (float64) |\n| `collection.site_id` | Does not exist in _v1/payments_. |\n| `collection.last_modified_by_admin` | Does not exist in _v1/payments_. |\n| `collection.api_version` | `api_version` (string) |\n| `collection.concept_id` | Does not exist in _v1/payments_. |\n| `collection.concept_amount` | Does not exist in _v1/payments_. |\n| `collection.collector.id` | `collector_id` (int64) |\n| `collection.collector.nickname` | Does not exist in _v1/payments_. |\n```\n\n----------------------------------------\n\nTITLE: Sending Money Out Transaction Request with cURL - Country-specified Example\nDESCRIPTION: This cURL command sends a POST request to the MercadoPago API to process a money out transaction where money is transferred from one account to another within the specified country context. It requires setting specific headers including an Access Token for authorization, and optionally an idempotency key for request idempotency. Other parameters in the request data include transaction amounts and account details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.en.md#2025-04-18_snippet_5\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\\n  --url https://api.mercadopago.com/v1/transaction-intents/process \\\n  --header 'Authorization: Bearer TEST-4613*********761-11121*********92cd39015*********7bbc3cb-1*********' \\\n  --header 'content-type: application/json' \\\n  --header 'x-enforce-signature: false' \\\n  --data '{\n  \"external_reference\": \"external_ref_1234\",\n  \"point_of_interaction\": {\n    \"type\": \"PSP_TRANSFER\"\n  },\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://example.com.ar/notification\"\n    }\n  },\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": 25\n        }\n      ]\n    },\n    \"to\": {\n      \"total_amount\": 25,\n      \"accounts\": [\n        {\n          \"amount\": 25,\n          \"bank_id\": \"015\",\n          \"number\": \"0150533701000132688355\",\n          \"holder\": \"Victor Hugo\",\n          \"owner\": {\n              \"identification\": {\n                  \"number\": \"20209642647\",\n                  \"type\": \"CUIT\"\n              }\n          },\n          \"type\": \"savings_account\",\n          \"description\": \"envio de 25\"\n        }\n      ]\n    },\n    \"total_amount\": 25\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Intent Filter for RDCPass Payment Query\nDESCRIPTION: AndroidManifest.xml configuration to enable payment query functionality with necessary intent filters and data types.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-payment-query.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter> \n\t<action android:name=\"android.intent.action.SEND\" /> \n\t<action android:name=\"android.intent.action.ANSWER\" /> \n\t<category android:name=\"android.intent.category.DEFAULT\" /> \n\t<data android:mimeType=\"text/*\" /> \n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Generating XML Structure for Chilean Electronic Tax Document (DTE)\nDESCRIPTION: This XML snippet demonstrates the structure of a DTE (Documento Tributario Electrónico) used in Chile. It includes document identification, issuer and recipient details, totals, line items, and digital signatures required for electronic tax documents.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/annex-xml-for-printing.es.md#2025-04-18_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<DTE version=\"1.0\" xmlns=\"http://www.sii.cl/SiiDte\">\n\t<Documento ID=\"F60T33\">\n\t\t<Encabezado>\n\t\t\t<IdDoc>\n\t\t\t\t<TipoDTE>33</TipoDTE>\n\t\t\t\t<Folio>60</Folio>\n\t\t\t\t<FchEmis>2003-10-13</FchEmis>\n\t\t\t</IdDoc>\n\t\t\t<Emisor>\n\t\t\t\t<RUTEmisor>97975000-5</RUTEmisor>\n\t\t\t\t<RznSoc>RUT DE PRUEBA</RznSoc>\n\t\t\t\t<GiroEmis>Insumos de Computacion</GiroEmis>\n\t\t\t\t<Acteco>31341</Acteco>\n\t\t\t\t<CdgSIISucur>1234</CdgSIISucur>\n\t\t\t\t<DirOrigen>Teatinos 120, Piso 4</DirOrigen>\n\t\t\t\t<CmnaOrigen>Santiago</CmnaOrigen>\n\t\t\t\t<CiudadOrigen>Santiago</CiudadOrigen>\n\t\t\t</Emisor>\n\t\t\t<Receptor>\n\t\t\t\t<RUTRecep>77777777-7</RUTRecep>\n\t\t\t\t<RznSocRecep>EMPRESA  LTDA</RznSocRecep>\n\t\t\t\t<GiroRecep>COMPUTACION</GiroRecep>\n\t\t\t\t<DirRecep>SAN DIEGO 2222</DirRecep>\n\t\t\t\t<CmnaRecep>LA FLORIDA</CmnaRecep>\n\t\t\t\t<CiudadRecep>SANTIAGO</CiudadRecep>\n\t\t\t</Receptor>\n\t\t\t<Totales>\n\t\t\t\t<MntNeto>100000</MntNeto>\n\t\t\t\t<TasaIVA>19</TasaIVA>\n\t\t\t\t<IVA>19000</IVA>\n\t\t\t\t<MntTotal>119000</MntTotal>\n\t\t\t</Totales>\n\t\t</Encabezado>\n\t\t<Detalle>\n\t\t\t<NroLinDet>1</NroLinDet>\n\t\t\t<CdgItem>\n\t\t\t\t<TpoCodigo>INT1</TpoCodigo>\n\t\t\t\t<VlrCodigo>011</VlrCodigo>\n\t\t\t</CdgItem>\n\t\t\t<NmbItem>Parlantes Multimedia 180W.</NmbItem>\n\t\t\t<DscItem/>\n\t\t\t<QtyItem>20</QtyItem>\n\t\t\t<PrcItem>4500</PrcItem>\n\t\t\t<MontoItem>90000</MontoItem>\n\t\t</Detalle>\n\t\t<Detalle>\n\t\t\t<NroLinDet>2</NroLinDet>\n\t\t\t<CdgItem>\n\t\t\t\t<TpoCodigo>INT1</TpoCodigo>\n\t\t\t\t<VlrCodigo>0231</VlrCodigo>\n\t\t\t</CdgItem>\n\t\t\t<NmbItem>Mouse Inalambrico PS/2</NmbItem>\n\t\t\t<DscItem/>\n\t\t\t<QtyItem>1</QtyItem>\n\t\t\t<PrcItem>5000</PrcItem>\n\t\t\t<MontoItem>5000</MontoItem>\n\t\t</Detalle>\n\t\t<Detalle>\n\t\t\t<NroLinDet>3</NroLinDet>\n\t\t\t<CdgItem>\n\t\t\t\t<TpoCodigo>INT1</TpoCodigo>\n\t\t\t\t<VlrCodigo>1515</VlrCodigo>\n\t\t\t</CdgItem>\n\t\t\t<NmbItem>Caja de Diskettes 10 Unidades</NmbItem>\n\t\t\t<DscItem/>\n\t\t\t<QtyItem>5</QtyItem>\n\t\t\t<PrcItem>1000</PrcItem>\n\t\t\t<MontoItem>5000</MontoItem>\n\t\t</Detalle>\n\t\t<TED version=\"1.0\">\n\t\t\t<DD>\n\t\t\t\t<RE>97975000-5</RE>\n\t\t\t\t<TD>33</TD>\n\t\t\t\t<F>60</F>\n\t\t\t\t<FE>2003-10-13</FE>\n\t\t\t\t<RR>77777777-7</RR>\n\t\t\t\t<RSR>EMPRESA  LTDA</RSR>\n\t\t\t\t<MNT>119000</MNT>\n\t\t\t\t<IT1>Parlantes Multimedia 180W.</IT1>\n\t\t\t\t<CAF version=\"1.0\">\n\t\t\t\t\t<DA>\n\t\t\t\t\t\t<RE>97975000-5</RE>\n\t\t\t\t\t\t<RS>RUT DE PRUEBA</RS>\n\t\t\t\t\t\t<TD>33</TD>\n\t\t\t\t\t\t<RNG>\n\t\t\t\t\t\t\t<D>1</D>\n\t\t\t\t\t\t\t<H>200</H>\n\t\t\t\t\t\t</RNG>\n\t\t\t\t\t\t<FA>2003-09-04</FA>\n\t\t\t\t\t\t<RSAPK>\n\t\t\t\t\t\t\t<M>0a4O6Kbx8Qj3K4iWSP4w7KneZYeJ+g/prihYtIEolKt3cykSxl1zO8vSXu397QhTmsX7SBEudTUx++2zDXBhZw==</M>\n\t\t\t\t\t\t\t<E>Aw==</E>\n\t\t\t\t\t\t</RSAPK>\n\t\t\t\t\t\t<IDK>100</IDK>\n\t\t\t\t\t</DA>\n\t\t\t\t\t<FRMA algoritmo=\"SHA1withRSA\">g1AQX0sy8NJugX52k2hTJEZAE9Cuul6pqYBdFxj1N17umW7zG/hAavCALKByHzdYAfZ3LhGTXCai5zNxOo4lDQ==</FRMA>\n\t\t\t\t</CAF>\n\t\t\t\t<TSTED>2003-10-13T09:33:20</TSTED>\n\t\t\t</DD>\n\t\t\t<FRMT algoritmo=\"SHA1withRSA\">GbmDcS9e/jVC2LsLIe1iRV12Bf6lxsILtbQiCkh6mbjckFCJ7fj/kakFTS06Jo8i\nS4HXvJj3oYZuey53Krniew==</FRMT>\n\t\t</TED>\n\t\t<TmstFirma>2003-10-13T09:33:20</TmstFirma>\n\t</Documento>\n<Signature xmlns=\"http://www.w3.org/2000/09/xmldsig#\">\n<SignedInfo>\n<CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"/>\n<SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/>\n<Reference URI=\"#F60T33\">\n<Transforms>\n<Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"/>\n</Transforms>\n<DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/>\n<DigestValue>hlmQtu/AyjUjTDhM3852wvRCr8w=</DigestValue>\n</Reference>\n</SignedInfo>\n<SignatureValue>JG1Ig0pvSIH85kIKGRZUjkyX6CNaY08Y94j4UegTgDe8+wl61GzqjdR1rfOK9BGn93AMOo6aiAgolW0k/XklNVtM/ZzpNNS3d/fYVa1q509mAMSXbelxSM3bjoa7H6Wzd/mV1PpQ8zK5gw7mgMMP4IKxHyS92G81GEguSmzcQmA=</SignatureValue>\n<KeyInfo>\n<KeyValue>\n<RSAKeyValue>\n<Modulus>\ntNEknkb1kHiD1OOAWlLKkcH/UP5UGa6V6MYso++JB+vYMg2OXFROAF7G8BNFFPQx\niuS/7y1azZljN2xq+bW3bAou1bW2ij7fxSXWTJYFZMAyndbLyGHM1e3nVmwpgEpx\nBHhZzPvwLb55st1wceuKjs2Ontb13J33sUb7bbJMWh0=\n</Modulus>\n<Exponent>\nAQAB\n</Exponent>\n</RSAKeyValue>\n</KeyValue>\n<X509Data>\n<X509Certificate>MIIEgjCCA+ugAwIBAgIEAQAApzANBgkqhkiG9w0BAQUFADCBtTELMAkGA1UEBhMC\nQ0wxHTAbBgNVBAgUFFJlZ2lvbiBNZXRyb3BvbGl0YW5hMREwDwYDVQQHFAhTYW50\naWFnbzEUMBIGA1UEChQLRS1DRVJUQ0hJTEUxIDAeBgNVBAsUF0F1dG9yaWRhZCBD\nZXJ0aWZpY2Fkb3JhMRcwFQYDVQQDFA5FLUNFUlRDSElMRSBDQTEjMCEGCSqGSIb3\nDQEJARYUZW1haWxAZS1jZXJ0Y2hpbGUuY2wwHhcNMDMxMDAxMTg1ODE1WhcNMDQw\nOTMwMDAwMDAwWjCBuDELMAkGA1UEBhMCQ0wxFjAUBgNVBAgUDU1ldHJvcG9saXRh\nbmExETAPBgNVBAcUCFNhbnRpYWdvMScwJQYDVQQKFB5TZXJ2aWNpbyBkZSBJbXB1\nZXN0b3MgSW50ZXJub3MxDzANBgNVBAsUBlBpc28gNDEjMCEGA1UEAxQaV2lsaWJh\nbGRvIEdvbnphbGV6IENhYnJlcmExHzAdBgkqhkiG9w0BCQEWEHdnb256YWxlekBz\naWkuY2wwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALxZlVh1xr9sKQIBDF/6\nVa+lsHQSG5AAmCWvtNTIOXN3E9EQCy7pOPHrDg6EusvoHyesZSKJbc0TnIFXZp78\nq7mbdHijzKqvMmyvwbdP7KK8LQfwf84W4v9O8MJeUHlbJGlo5nFACrPAeTtONbHa\nReyzeMDv2EganNEDJc9c+UNfAgMBAAGjggGYMIIBlDAjBgNVHREEHDAaoBgGCCsG\nAQQBwQEBoAwWCjA3ODgwNDQyLTQwCQYDVR0TBAIwADA8BgNVHR8ENTAzMDGgL6At\nhitodHRwOi8vY3JsLmUtY2VydGNoaWxlLmNsL2UtY2VydGNoaWxlY2EuY3JsMCMG\nA1UdEgQcMBqgGAYIKwYBBAHBAQKgDBYKOTY5MjgxODAtNTAfBgNVHSMEGDAWgBTg\nKP3S4GBPs0brGsz1CJEHcjodCDCB0AYDVR0gBIHIMIHFMIHCBggrBgEEAcNSBTCB\ntTAvBggrBgEFBQcCARYjaHR0cDovL3d3dy5lLWNlcnRjaGlsZS5jbC8yMDAwL0NQ\nUy8wgYEGCCsGAQUFBwICMHUac0VsIHRpdHVsYXIgaGEgc2lkbyB2YWxpZG8gZW4g\nZm9ybWEgcHJlc2VuY2lhbCwgcXVlZGFuZG8gZWwgQ2VydGlmaWNhZG8gcGFyYSB1\nc28gdHJpYnV0YXJpbywgcGFnb3MsIGNvbWVyY2lvIHkgb3Ryb3MwCwYDVR0PBAQD\nAgTwMA0GCSqGSIb3DQEBBQUAA4GBABMfCyJF0mNXcov8iEWvjGFyyPTsXwvsYbbk\nOJ41wjaGOFMCInb4WY0ngM8BsDV22bGMs8oLyX7rVy16bGA8Z7WDUtYhoOM7mqXw\n/Hrpqjh3JgAf8zqdzBdH/q6mAbdvq/yb04JHKWPC7fMFuBoeyVWAnhmuMZfReWQi\nMUEHGGIW</X509Certificate>\n</X509Data>\n</KeyInfo>\n</Signature></DTE>\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with cURL\nDESCRIPTION: This cURL command creates a Mercado Pago preference by sending a POST request to the Mercado Pago API. It sets the `purpose` to `wallet_purchase` to allow only logged-in payments.  Requires replacing `**PROD_ACCESS_TOKEN**` with a valid production access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-onsubmit.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n'https://api.mercadopago.com/checkout/preferences' \\\n-H 'Content-Type: application/json' \\\n-H 'cache-control: no-cache' \\\n-H 'Authorization: Bearer **PROD_ACCESS_TOKEN**' \\\n-d '{\n  \"purpose\": \"wallet_purchase\",\n  \"items\": [\n      {\n          \"title\": \"Meu produto\",\n          \"quantity\": 1,\n          \"unit_price\": 75.76\n      }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment Flow with Callback - Brazil/Argentina/Mexico Version\nDESCRIPTION: Implementation of payment flow for Brazil, Argentina, and Mexico markets with installment support. Includes additional parameters for regional payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/payment-flow-callback.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval paymentFlow = MPManager.paymentFlow\n\nval paymentFlowRequestData = PaymentFlowRequestData(\n\n   amount = 10.0,\n\n   description = \"test description\",\n\n   paymentMethod = PaymentMethod.CREDIT_CARD.name,\n\n   installments = 6, // campo opcional se lança o pagamento parcelado\n\n   printOnTerminal = false // campo opcional se lança o pagamento sem impressão na terminal\n\n)\n\npaymentFlow.launchPaymentFlow(\n\n   paymentFlowRequestData = paymentFlowRequestData\n\n) { response ->\n\n   response.doIfSuccess { result ->\n\n       // manutenção bem-sucedida utilizando uma mensagem\n\n   }.doIfError { error ->\n\n       // manutenção de erro\n\n   }\n\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal PaymentFlow paymentFlow = MPManager.INSTANCE.getPaymentFlow();\n\nfinal String amount = \"2.0\";\n\nfinal String description = \"Payment description\";\n\nfinal PaymentFlowData paymentFlowData = new PaymentFlowData(\n\n   amount,\n\n   description,\n\n   PaymentMethod.CREDIT_CARD.name(),\n\n   6, // optional field if launching the payment in installments. \n\n   false // optional field if launching the payment without printing in terminal\n\n);\n\n\n\nfinal Function1<MPResponse<PaymentResponse>, Unit> callback = (final MPResponse<PaymentResponse> response) -> {\n\n if (response.getStatus() == ResponseStatus.SUCCESS) {\n\n   // Success handling using a message\n\n } else {\n\n   // Error handling \n\n }\n\n return Unit.INSTANCE;\n\n};\n\npaymentFlow.launchPaymentFlow(paymentFlowData, callback);\n```\n\n----------------------------------------\n\nTITLE: Updating Report Settings with cURL\nDESCRIPTION: This cURL command updates the default settings of release reports on the Mercado Pago API. It includes various settings including frequency and notification emails.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.en.md#2025-04-18_snippet_6\n\nLANGUAGE: cURL\nCODE:\n```\ncurl -X PUT \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/release_report/config' \\\n    -d '{\\\n            \"file_name_prefix\": \"release-report-USER_ID\",\\\n            \"include_withdrawal_at_end\": true,\\\n            \"execute_after_withdrawal\": false,\\\n            \"display_timezone\": \"GMT-04\",\\\n            \"notification_email_list\": [\\\n                \"example@email.com\",\\\n                \"john@example.com\"\\\n            ],\\\n            \"frequency\": {\\\n                \"hour\": 0,\\\n                \"type\": \"monthly\",\\\n                \"value\": 1\\\n            },\\\n            \"columns\": [\\\n                {\\\n                    \"key\": \"DATE\"\\\n                },\\\n                {\\\n                    \"key\": \"SOURCE_ID\"\\\n                },\\\n                {\\\n                    \"key\": \"EXTERNAL_REFERENCE\"\\\n                }\\\n            ]\\\n    }'\n```\n\n----------------------------------------\n\nTITLE: HTML Code Snippet for Subscription Button Embedding\nDESCRIPTION: This snippet represents the HTML code provided by Mercado Pago for embedding a subscription button directly into a website.  The code is intended to be copied and pasted into the desired location within the site's HTML structure, allowing users to easily subscribe to the created plan. It will be displayed after clicking on **Ou cole um botão em seu site** button.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscription-plans/create-subscription-plan.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nUm código HTML será exibido pronto para copiar e colar em sua página.\n```\n\n----------------------------------------\n\nTITLE: Adding Google Ads Conversion Tracking to Mercado Pago Preference\nDESCRIPTION: Shows how to associate a Google Ads conversion tag with a Mercado Pago preference for tracking ad conversions. Includes setting up conversion tracking details and creating the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/preferences.es.md#2025-04-18_snippet_2\n\nLANGUAGE: dotnet\nCODE:\n```\n// Asocia tu tag\nvar tracks = new List<PreferenceTrackRequest>\n{\n    new PreferenceTrackRequest\n    {\n        Type = \"facebook_ad\",\n        Values = new PreferenceTrackValuesRequest\n        {\n            ConversionId = \"CONVERSION_ID\",\n            ConversionLabel = \"CONVERSION_LABEL\",\n        },\n    },\n};\nvar request = new PreferenceRequest\n{\n    // ...\n    Tracks = tracks,\n};\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Creating Preference in Ruby\nDESCRIPTION: This Ruby snippet demonstrates creating a Mercado Pago preference using the Ruby SDK. It configures the preference with item details and sets `purpose` to `wallet_purchase`, restricting payments to logged-in users. The code retrieves the preference ID for use in the HTML initialization of the Brick.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-onsubmit.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# Cria um objeto de preferência\npreference_data = {\n  # o purpose: 'wallet_purchase', permite apenas pagamentos logados\n  # para permitir pagamentos como guest, você pode omitir essa propriedade\n  purpose: 'wallet_purchase',\n  items: [\n    {\n      title: 'Meu produto',\n      unit_price: 75.56,\n      quantity: 1\n    }\n  ]\n}\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n \n# Este valor é o preferenceId que você usará no HTML na inicialização no Brick\n@preference_id = preference['id']\n```\n\n----------------------------------------\n\nTITLE: Setting Expiration Dates in JSON\nDESCRIPTION: This JSON snippet demonstrates setting the expiration dates for a payment preference. It uses the `expires` flag, `expiration_date_from` for the start date, and `expiration_date_to` for the end date, both following the ISO 8601 format.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/term-of-preference.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"expires\": true,\n\"expiration_date_from\": \"2017-02-01T12:00:00.000-04:00\",\n\"expiration_date_to\": \"2017-02-28T12:00:00.000-04:00\"\n```\n\n----------------------------------------\n\nTITLE: Testing TLS Protocol Version in PHP\nDESCRIPTION: This PHP snippet uses cURL to check the SSL version being used for the connection, helping to verify if a non-TLS 1.0 protocol is in use.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/pci-compliant-merchants/disabling-tls-10.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $curl_info = curl_version();\n  echo \"protocol: \" . $curl_info['ssl_version'];\n?>\n```\n\n----------------------------------------\n\nTITLE: Expired Coupon Code Discount Response with Mercado Pago API\nDESCRIPTION: This snippet shows the JSON response when a coupon code is no longer available or has expired. It indicates that the coupon is invalid with an error message: `Run Out of uses per user`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/discount-campaigns.en.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"Run Out of uses per user\",\n    \"error\": \"run-out-of-uses\",\n    \"status\": 404,\n    \"cause\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Settlement Report Configuration - Response Format\nDESCRIPTION: Example JSON response showing the structure and properties of a successful settlement report configuration query. Includes settings for file naming, feature toggles, timezone, reporting frequency, and column configurations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"file_name_prefix\": \"settlement-report-USER_ID\",\n    \"show_fee_prevision\": false,\n    \"show_chargeback_cancel\": true,\n    \"scheduled\": false,\n    \"coupon_detailed\": true,\n    \"include_withdraw\": true,\n    \"shipping_detail\": true,\n    \"refund_detailed\": true,\n    \"display_timezone\": \"GMT-04\",\n    \"frequency\": {\n        \"hour\": 0,\n        \"type\": \"monthly\",\n        \"value\": 1\n    },\n     \"columns\": [\n        {\n            \"key\": \"TRANSACTION_DATE\"\n        },\n        {\n            \"key\": \"SOURCE_ID\"\n        },\n        {\n            \"key\": \"EXTERNAL_REFERENCE\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Checkout Preference with Shipment Details using MercadoPago API (cURL)\nDESCRIPTION: This cURL request demonstrates how to create a checkout preference with detailed shipment information using the MercadoPago API. It includes buyer details, item information, payment methods, and shipping address.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/industry-data/additional-info.en.md#2025-04-18_snippet_10\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/checkout/preferences' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--data-raw '{\n    \"auto_return\": \"approved\",\n    \"back_urls\": {\n        \"failure\": \"https://www.mercadopago.com/home/failure\",\n        \"pending\": \"https://www.mercadopago.com/home/pending\",\n        \"success\": \"https://www.mercadopago.com/home/success\"\n    },\n    \"notification_url\": \"https://webhook.site/xyz\",\n    \"expires\": false,\n    \"external_reference\": \"order-123\",\n    \"date_of_expiration\": \"2025-03-12T12:58:41.425-04:00\",\n    \"items\": [\n        {\n            \"id\": \"1234\",\n            \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n            \"title\": \"Product\",\n            \"picture_url\": \"\",\n            \"description\": \"Product description\",\n            \"category_id\": \"others\",\n            \"quantity\": 1,\n            \"unit_price\": 150            \n        }\n    ],\n    \"payer\": {\n        \"phone\": {\n            \"area_code\": \"11\",\n            \"number\": \"[FAKER][PHONE_NUMBER][CELL_PHONE]\"\n        },\n        \"address\": {\n            \"zip_code\": \"[FAKER][ADDRESS][ZIP_CODE]\",\n            \"street_name\": \"[FAKER][ADDRESS][STREET_NAME]\",\n            \"street_number\": 1000\n        },\n        \"identification\": {\n          \"identification_type\": \"[FAKER][IDENTIFICATION][TYPE]\",\n          \"identification_number\": \"12345678\"\n        },\n        \"email\": \"john@yourdomain.com\",\n        \"name\": \"[FAKER][NAME][FIRST_NAME]\",\n        \"surname\": \"[FAKER][NAME][LAST_NAME]\",\n        \"date_created\": \"\",\n        \"authentication_type\": \"Facebook\",\n        \"registration date\": \"2015-06-02T12:58:41.425-04:00\",\n        \"is_prime_user\": false,\n        \"is_first_purchase_online\": false,\n        \"last_purchase\": \"2020-01-02T12:58:41.425-04:00\"\n    },\n    \"payment_methods\": {\n        \"excluded_payment_methods\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"default_installments\": null,\n        \"default_payment_method_id\": null,\n        \"excluded_payment_types\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"installments\": null\n    },\n    \"shipments\": {\n        \"mode\": \"not_specified\",\n        \"local_pickup\": false,\n        \"receiver_address\": {\n            \"zip_code\": \"[FAKER][ADDRESS][ZIP_CODE]\",\n            \"street_name\": \"[FAKER][ADDRESS][STREET_NAME]\",\n            \"city_name\": \"[FAKER][ADDRESS][CITY]\",\n            \"state_name\": \"[FAKER][ADDRESS][STATE]\",\n            \"street_number\": 1000\n            \"floor\": \"12\",\n            \"apartment\": \"B\"\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Preference for Installments without Card in Java\nDESCRIPTION: Java code snippet for creating a preference object with Mercado Pago SDK to enable installment payments without a card. It sets up an item, configures the access token, and specifies the purpose as 'onboarding_credits'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/installments-without-card.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Create a preference object\nPreferenceClient client = new PreferenceClient();\n\n// Create an item in the preference\nPreferenceItemRequest item =\nPreferenceItemRequest.builder()\n.title(\"My product\")\n.quantity(1)\n.unitPrice(new BigDecimal(\"75\"))\n.build();\n\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nList<PreferenceItemRequest> items = new ArrayList<>();\nitems.add(item);\n\nPreferenceRequest request =\nPreferenceRequest.builder().items(items).purpose(\"onboarding_credits\").build();\n\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Querying Terminal ID with cURL\nDESCRIPTION: API request to retrieve a terminal ID using a device's serial number. Requires X-Authentication header with clientId and secret credentials. The terminalCode parameter should be replaced with the actual serial number found on the device.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/api-get-terminal.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n'https://api-dev.redelcom.cl:20010/v2/terminal?serialNumber={terminalCode}' \\\n--header 'X-Authentication: clientId;secret'\n```\n\n----------------------------------------\n\nTITLE: Making a Payment Request for Urban Transport via cURL\nDESCRIPTION: This cURL command demonstrates how to make a payment request for urban transport services. It includes detailed information about the transaction, items, and the payer. The request is sent to the Mercado Pago API endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/urban-transport.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}} \\\n--data-raw '{\n    \"transaction_amount\": 150.00,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"debvisa\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Pedido01\",\n    \"description\": \"PEDIDO NOVO\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"payer\": {\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"12345678909\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"title\": \"Serviço\",\n                \"description\": \"Descrição de serviço\",\n                \"category_id\": \"service\",\n                \"quantity\": 1,\n                \"unit_price\": 150\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_prime_user\": true,\n            \"is_first_purchase_online\": true,\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"206233-2002\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"230032\"\n            },\n            \"authentication_type\": \"Facebook\",\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Processing Payments with Mercado Pago in Node.js\nDESCRIPTION: This Node.js code registers a payment with Mercado Pago using the SDK within the backend application. It sets payment parameters from the request body. Successful payment processing will return a JSON response with payment details, while errors will be logged. It requires the 'mercadopago' Node.js library as a dependency.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-serverside.en.md#2025-04-18_snippet_2\n\nLANGUAGE: Node.js\nCODE:\n```\nvar mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(config.access_token);\n\nvar payment_data = {\n  transaction_amount: 100,\n  token: token,\n  description: 'Blue shirt',\n  installments: installments,\n  payment_method_id: payment_method_id,\n  issuer_id: issuer_id,\n  payer: {\n    email: 'john@yourdomain.com'\n  }\n};\n\n// Guarda y postea el pago\nmercadopago.payment.save(payment_data).then(function (data) {\n  // ...    \n  // Imprime el estado del pago\n  Console.log(data.status);\n}).catch(function (error) {\n  // ...\n});\n```\n\nLANGUAGE: Node.js\nCODE:\n```\nvar mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nmercadopago.payment.save(req.body)\n  .then(function(response) {\n    const { status, status_detail, id } = response.body;\n    res.status(response.status).json({ status, status_detail, id });\n  })\n  .catch(function(error) {\n    console.error(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Device List Output Example\nDESCRIPTION: Example output showing a successfully connected Android device via ADB.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/how-to-install-android-macos-windows.en.md#2025-04-18_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nList of devices attached\n1850796495     device\n```\n\n----------------------------------------\n\nTITLE: Configure Mercado Pago Credentials (HTML)\nDESCRIPTION: This code snippet shows how to configure Mercado Pago credentials in HTML using the public key. Replace 'YOUR_PUBLIC_KEY' with your actual public key to initialize the MercadoPago object.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  const mp = new MercadoPago(\"YOUR_PUBLIC_KEY\");\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Email Notification List for Report Availability - JSON\nDESCRIPTION: JSON array of email addresses to receive notifications when a report is ready for download. It allows multiple recipients to be informed about report availability.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.en.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\"example@email.com\", \"john@example.com\"]\n```\n\n----------------------------------------\n\nTITLE: Adding a Card to a Customer with PHP\nDESCRIPTION: This PHP code demonstrates how to add a new card to an existing customer using Mercado Pago's API. It retrieves the customer by ID and then creates a new card entry by providing a card token and payment method ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n  \n  $customer_client = new CustomerClient();\n  $customer = $customer_client->get(\"1234\");\n\n  $card_client = new CustomerCardClient();\n  \n  $customer_card = $client->create($customer->id, [\n    \"token\" => \"your_card_token\",\n    \"payment_method_id\" => \"debit_card\"\n  ]);\n\n  echo implode($customer_card);\n?>\n```\n\n----------------------------------------\n\nTITLE: Activating POS Mode on Point Device Using Mercado Pago API\nDESCRIPTION: This snippet demonstrates how to activate the Point of Sale (POS) operating mode on a Point device using Mercado Pago's API. Ensure you have the device's serial number and your Mercado Pago access token ready. This operation requires a PATCH request to the correct endpoint with the device's ID. The expected JSON response will include the operating mode. Only one POS device is allowed per checkout.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/configure-devices-pdv.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PATCH \\\n      'https://api.mercadopago.com/point/integration-api/devices/{device-id}' \\\n       --h 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n       -H 'Content-Type: application/json' \\ \\\n      -d '{\n  \"operating_mode\": \"PDV\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Intent Filter for POS Money Loading\nDESCRIPTION: XML configuration for AndroidManifest.xml that defines the intent filter required for handling money loading operations in the POS terminal.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-load-money.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter> \n\t<action android:name=\"android.intent.action.SEND\" /> \n\t<category android:name=\"android.intent.category.DEFAULT\" /> \n\t<data android:mimeType=\"text/*\" /> \n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Initiating 3DS Challenge in JavaScript\nDESCRIPTION: Function to dynamically create and submit an iframe for 3DS authentication challenge with error handling\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.es.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction doChallenge(payment) {\n  try {\n    const {\n      status,\n      status_detail,\n      _three_ds_info: { creq, external_resource_url },\n    } = payment;\n    if (status === \"pending\" && status_detail === \"pending_challenge\") {\n      var iframe = document.createElement(\"iframe\");\n      iframe.name = \"myframe\";\n      iframe.id = \"myframe\";\n      document.body.appendChild(iframe);\n\n      var idocument = iframe.contentWindow.document;\n\n      var myform = idocument.createElement(\"form\");\n      myform.name = \"myform\";\n      myform.setAttribute(\"target\", \"myframe\");\n      myform.setAttribute(\"method\", \"post\");\n      myform.setAttribute(\"action\", external_resource_url);\n\n      var hiddenField = idocument.createElement(\"input\");\n      hiddenField.setAttribute(\"type\", \"hidden\");\n      hiddenField.setAttribute(\"name\", \"creq\");\n      hiddenField.setAttribute(\"value\", creq);\n      myform.appendChild(hiddenField);\n      iframe.appendChild(myform);\n\n      myform.submit();\n    }\n  } catch (error) {\n    console.log(error);\n    alert(\"Error doing challenge, try again later.\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with MercadoPago Python\nDESCRIPTION: This snippet demonstrates how to create a preference object with MercadoPago using Python. It sets the 'purpose' to 'wallet_purchase', allowing only registered payments. The code utilizes the MercadoPago Python SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-startup.es.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Crear un ítem en la preferencia\npreference_data = {\n  # el \"purpose\": \"wallet_purchase\", solo permite pagos registrados\n  # para permitir pagos de invitados, puedes omitir esta propiedad\n    \"purpose\": \"wallet_purchase\",\n    \"items\": [\n        {\n            \"title\": \"Mi ítem\",\n            \"quantity\": 1,\n            \"unit_price\": 75.76\n        }\n    ]\n}\n \npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Validating Webhook Signature using BCrypt in Java\nDESCRIPTION: Example code that demonstrates how to validate the authenticity of a Mercado Pago webhook notification by verifying the signature using BCrypt. This verification combines the transaction_id, encryption password, and generation_date to ensure the notification is legitimate.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/generate.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nBCrypt.checkpw(transaction_id + '-' + password_for_encryption + '-' + generation_date, payload_signature)\n```\n\n----------------------------------------\n\nTITLE: Refunding with Mercado Pago in .NET\nDESCRIPTION: This .NET snippet sets the access token for Mercado Pago, creates the PaymentRefundClient and prepares the request options with custom headers. It refunds a specific payment ID and amount.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.es.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\nPaymentRefundClient client = new PaymentRefundClient();\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"X-Render-In-Process-Refunds\", \"true\");\n\nvar refund = client.Refund(paymentId, 20, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Handling Unauthorized Credential Use Error\nDESCRIPTION: Error occurs when Mercado Pago account credentials are not properly activated. Requires developers to activate credentials on the specified page before integration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/vtex/common-errors.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`unauthorized_use_of_live_credentials`\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for a Saved Card\nDESCRIPTION: Sample JSON response showing the structure of data returned when querying a saved card. This includes card identifier, expiration details, and masked card number information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/receive-payments-with-saved-cards.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[{\n\"id\": \"1490022319978\",\n\"expiration_month\": 12,\n\"expiration_year\": 2020,\n\"first_six_digits\": \"415231\",\n\"last_four_digits\": \"0001\",\n...\n}]\n```\n\n----------------------------------------\n\nTITLE: Clave PGP para encriptación en migración de datos de tarjetas a Mercado Pago\nDESCRIPTION: Clave pública PGP proporcionada por Mercado Pago para encriptar el archivo de datos de tarjetas antes de transferirlo de forma segura al servidor SFTP. Esta clave es esencial para el proceso de migración y asegura el cumplimiento de las normativas PCI.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/pci-migration-pgp.es.md#2025-04-18_snippet_0\n\nLANGUAGE: pgp\nCODE:\n```\n===\nMigration key\n===\n-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQINBGMp/zABEAD2EDijQyA42FsQ/84C4VJ0gW8jWmXZqdZrmcZ/oALJOHZaybig\ns/edgdmfe07NR0VZSxKJJ3gvqjr0UFWfqwDUw49a6ez85EowX73rAoIqTMQPMCA3\na5kkkG4UhFDBIAclpzD1IqfInhIBsAxMwgAo1YTkgS/XPG9ih16qszkCUHB6ccAX\nSRyIoYW4dDHkaOQVLFruSEwVZLZAkTgOvwMXmSTfcf0O8pq6L1iarvor2azg/Lk+\nVmya3K3aIAm0mzyiSJf61+7FQ7EoBuNpFi7j5K3KwEmo+0yu2erQkvrJ/WaYnylL\nfOK4D7yMOxbe52IwvR+zO/r0ncKdHL2MIQEGDrM/Gvan4mQ/FpS5kTW+2tx+P1AR\nuj28Ql/tZkLndY5DK6SI7j1frXII4mXer/dZgT9l0vdH+NzAWb4QcbbQmm+Q7lCo\nTfmkzIrSGMlNeMFuAj2LWKoj80opxcv9y2dC7UF8TI4jgIVISasM+wF4B8RX9Pvu\nVK+1fdZkgD16h/b9/gk0CbNI+gQtEBx/3E4BPisCTNgYbCGMkYcV3Ah6ROSuQ6i0\nqvG29jZSZqIPmD3m+biIEusb51q+I5BlZrhX+MFf/CvgLQ06Sg18sYkzVK44tGbp\nsgd0hjk4sFY9Ptb8GYUBHO56xx0zI3YE7tXN+QbP5H0GfY+PMPg++lmybQARAQAB\ntDBhbGx1Z2F0b3IgPG1wLnNlY3JldG1hbmFnZW1lbnRAbWVyY2Fkb2xpYnJlLmNv\nbT6JAlEEEwEIADsWIQQlKxogEAPOMTjssJeQ+ppb6oJkKAUCYyn/MAIbAwULCQgH\nAgIiAgYVCgkICwIEFgIDAQIeBwIXgAAKCRCQ+ppb6oJkKI3oEACDNIBxHg79MRH/\nNoFFjFxMkX4Pd/FdCLIk2GlPEhHo2+3gsZ0D3xZEk0qX0/zmrwKHuinLD/mX72pc\nwh30VX731edRBTxoAU+n6HY7WrHZm5yZptAU11QDPO1LQGBFs8f1+xTZ3CuY6QF9\n0a8M4j4+h68LGy1X1PulSHYPlEubudizeB4pFexu/1DuZojsJXDEAqdr4B470ZAq\n4QedEiGth1cprHhJia5jJ6Wjn6mtTALWt8v7GmBgLSF0BcgN1D85Qm08Fsk5k/Ef\niZz7DBOhe93gKUo3QZMjsMINLfKp5US6vCWb7efhqGJkG4L18n17tgvhdIPS1nB/\nGvcjDpA+X6NolT011mG3CbL0ncplmTNVObSd7bp8SvGiRDt/LQ9kNTPyUyhnlOwc\n7ml44dOZ4eXoKv3ooDoHpbTbRql3gnjd3ZOENv95uZOz0thE1pAtQXgHjZfzsTeJ\nxPIKa++6UyscmD6U10SO2t7NlzZc111nEhc/uC8/PHmGcM4WXjLqqNJJV1ullXUs\n7tMX+TQKve8nx/5JY3KhlicZfu2qshSb5OInrTYBxhbLxuyuuXUebB/05G9OArcL\nVauSkLYgcv705UFHi0D3Amlb/GobP22YQGctBeap1dfE26r9M+gfSASrb2qBdXRW\nvTuatWquL/sMyGd5woBtQQS4LwtEObkCDQRjKf8wARAA1CLE+wWnxDOjXQ1JSdvi\n1QxA/y7K4/KGTHJoyFFWAXmc7IJkGZaRnwz+GLPGfs9X25sEltaf4PBOpZvrLVId\neQhweQy9yW1TZnhal0LoND5jm48MdTE4/H+t/vWO0SmVqm5veyelYmSgYxvF43ae\nPWgRBOErGsUVy46dYLjd2rAh/0O3QZ6BjJB4ykgIycg9TEnMAgWXQ8qz+zVEmxhc\n1AbybdqkLnza8rt88d+Pk+WN4RVz3uImevB84ZhRjmF4QnKC1+x0AVTETHVp4shP\n7l7sJLwR9zIBHABz4S/YdcfRgZbEVrGAjr58FCbOTaG8sfbaDJsVaVz8HPCMcMSl\nDPbxFaYi/EBcqO9cGehKoXoMWO5IcNJ+gS/Aj1vh/mxaDjw1jjYoest/A445DfAV\nJnvs4x9cLF5KPlm4qplLmOpVg/yroryvWqdzEBz+NK176G2nOALY3NG/DsGQVVN0\nqVuIvZUGVZDaHxMy6StwfC5BpGdGZmCZt0P+oiUU/bByUDBRGkLL+ZnnKwmAbdII\nOkP6Q+OpuxucQA+I1AVYF0xT1clz0bLJ19OC4DM6ZvinJSSbBwe77cMHr2/8Uunr\n/yjOADv9DHNvHd0q66uCoCaykUHy6QDHq7xneVZJR0CT3AQA4+vAKbxvsZzLuvJc\nx02I+ANN9UN996ufVtTotVcAEQEAAYkCNgQYAQgAIBYhBCUrGiAQA84xOOywl5D6\nmlvqgmQoBQJjKf8wAhsMAAoJEJD6mlvqgmQoEIQP/3SwoaUlv4aSjPgr9uZX1C4+\nNjh5w3mTzzA8vf0hTC2XmzSK0KsghJITyeZ7wkm+PIwyR/dCeU53v5g2S1JUd3Wh\nkigKkySgPFEcRil3PDN1RbIF4gjHQTPc1vXLROEiYiuaFUO6ZFKgVk2B3KSI5YH6\n50Ha05C6r2rcxTaBYCBOzESAoD2um6OBGL2O6t//meQ+iVal7ffU0dFens29XYot\nyOedPHPAjcCIUBvYmoQQTA5SuOCTEb1WmpPkfTjhA/gWCyh/5WsyZ/P/avyz7hQ0\nrYYffsTQMuN83SATelon6evClY19QlokeljM6y7dpvovArOicJNnuaA9UIuU451c\ni5lb3gKwSF7vCm+RdXkfCdiQbbAqZqwv21SaWRvBgER6zR/rhI7BFQ4bdPhjzcfn\nCOLpc8kdpQP4SYg+b2K8s1XPEIdTRJuMJfGx6q10e8pqGYpGnBj+dvi0HkjzmFxe\nFmOb2+jSs+yh6/JteQQWttZdABwdjoOktKM0OhVgrXrVpFxnODcVtC7WneUjkpvg\nDZADqKS7pkKqpNQWb5Tv4SZmIk3ZYpttvu6JeuV+x7BPqcHTo7eGOV7VsMKZtr+6\niQAEkudX5oY4RK9l10D1jXFYb1d4FA8ah/zUSpyH3BI9A6B86gM/LLrj5TY6pu2I\nrt+/GYfDo9OZVgr6eupH\n=e+ov\n\n-----END PGP PUBLIC KEY BLOCK-----\n```\n\n----------------------------------------\n\nTITLE: Submitting Chargeback Documentation with cURL\nDESCRIPTION: API request to submit documentation for a chargeback dispute. Supports multiple file uploads in jpg, png, or pdf format with a 10MB size limit per file.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/chargebacks-management/manage-chargeback.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST  \\\n-F 'files[]=@/path/to/file/file1.png' \\\n-F 'files[]=@/path/to/file/file2.pdf' \\\n-H 'Authorization: Bearer {{access_token}}'\nhttps://api.mercadopago.com/v1/chargebacks/{id}/documentation\n```\n\n----------------------------------------\n\nTITLE: Creating PSE Payment with Mercado Pago in Node.js\nDESCRIPTION: Node.js implementation for creating a PSE payment using Mercado Pago SDK. This code sets up a client with access token, configures idempotency key, and builds a payment request with transaction and payer details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pse-avanza.en.md#2025-04-18_snippet_12\n\nLANGUAGE: node\nCODE:\n```\nimport { Payment, MercadoPagoConfig } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\nconst payment = new Payment(client);\n\nconst requestOptions = {\n\tidempotencyKey: '<IDEMPOTENCY_KEY>',\n};\n\nconst body = {\n  transaction_amount: 5000,\n  description: 'Product description',\n  payment_method_id: 'pse',\n  callback_url: 'http://www.your-site.com',\n  notification_url: 'http://www.your-site.com',\n  payer: {\n    entity_type: 'individual',\n    email: req.body.email,\n    first_name: req.body.firstName,\n    last_name: req.body.lastName,\n    identification: {\n      type: req.body.identificationType,\n      number: req.body.identificationNumber\n    },\n    address: {\n      zip_code: req.body.zipCode,\n      street_name: req.body.streetName,\n      street_number: req.body.streetNumber,\n      neighborhood: req.body.neighborhood,\n      city: req.body.city,\n      federal_unit: req.body.federalUnit\n    },\n    phone: {\n      area_code: req.body.phoneAreaCode,\n      number: req.body.phoneNumber\n    }\n  },\n  additional_info: {\n    ip_address: '127.0.0.1'\n  },\n  transaction_details: {\n    financial_institution: req.body.financialInstitution\n  }\n};\n\npayment.create({body, requestOptions})\n  .then(function (response) {\n    console.info(response)\n  })\n  .catch(function (error) {\n    console.error(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Financial Report Column Definitions Table\nDESCRIPTION: Markdown table defining financial report columns with their meanings and data types. Includes detailed explanations of transaction types, reference codes, and amount fields used in Mercado Pago's reporting system.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/glossary.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name on the report column | What it means | Data type <br> (maximum longitude) |\n|---|---|---|\n| Release date (`DATE`) | Transaction release date. It is the moment when this transaction impacts the available balance in the user's account. | DateTime <br> (yyyy-MM-dd'T'HH:mm:ssZ) |\n| Transaction ID in Mercado Pago (`SOURCE_ID`) | Transaction identifier in Mercado Pago's systems. Example: ID of a Payment. | String <br> (100) |\n```\n\n----------------------------------------\n\nTITLE: Configuration Warning - Customer VAT ID\nDESCRIPTION: Warning message regarding the module's behavior with the VAT ID field, indicating that it will override configurations if the field is not found as it's mandatory for payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/adobe-commerce/cho-api-credit-and-debit-cards.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> WARNING\\n>\\n> Important\\n>\\n> Our module tries to capture the information of the `vat_id` field of your store, if it does not find it, we will overwrite your configuration as this is a mandatory value for payment.\n```\n\n----------------------------------------\n\nTITLE: Creando Pago con Notificaciones IPN en Mercado Pago\nDESCRIPTION: Ejemplos de código para crear un pago con notificaciones IPN configuradas en diferentes lenguajes. Incluye la configuración de notification_url y los datos del pagador.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/ipn.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n   require_once 'vendor/autoload.php';\n\n   MercadoPago\\SDK::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n   $payment = new MercadoPago\\Payment();\n   $payment->transaction_amount = (float)$_POST['transactionAmount'];\n   $payment->token = $_POST['token'];\n   $payment->description = $_POST['description'];\n   $payment->installments = (int)$_POST['installments'];\n   $payment->payment_method_id = $_POST['paymentMethodId'];\n   $payment->issuer_id = (int)$_POST['issuer'];\n   $payment->notification_url = `http://requestbin.fullcontact.com/1ogudgk1`;\n   ...\n   $response = array(\n       'status' => $payment->status,\n       'status_detail' => $payment->status_detail,\n       'id' => $payment->id\n   );\n   echo json_encode($response);\n\n?>\n```\n\n----------------------------------------\n\nTITLE: Advantages Configuration YAML\nDESCRIPTION: YAML configuration listing the advantages and benefits of using Mercado Pago integration, including payment customization, security features, and payment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/adobe-commerce/landing.en.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbullet_section_with_media:\n - title: Advantages\n - type: normal\n - benefit_title: Payment methods customization in Checkout Pro\n - benefit_message: You can offer all available payment methods or only the ones you find necessary.\n - benefit_title: Data protection with PCI-DSS (Payment Card Industry Data Security Standard)\n - benefit_message: We comply with the global standard for protecting sensitive card information and utilize Secure Fields to facilitate certification acquisition for your store.\n - benefit_title: Ensure security in your high-risk transactions with 3DS (3-Domain Secure)\n - benefit_message: With 3DS, we conduct discreet identity verification through a modal within the store, offering benefits such as higher approval rates and lower fraud risks.\n - benefit_title: Increased payment approval with Checkout Pro\n - benefit_message: We ensure a higher approval rate and lower fraud risk when payment is made through Mercado Pago account.\n - benefit_title: Payment with two cards\n - benefit_message: The buyer can split the amount across two different cards if one of them has insufficient balance.\n - image: /adobe-commerce/adb-commerce-landing.png\n```\n\n----------------------------------------\n\nTITLE: Order Information Available Service Response\nDESCRIPTION: Comprehensive JSON response when order details are ready for payment, returned with HTTP 200 status code\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/hidden-qr-unattended-part-b.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"external_reference\": \"<EXTERNAL_REFERENCE>\",\n    \"total_amount\": <TOTAL_AMOUNT>,\n    \"items\": [\n        {\n            \"sku_number\": \"<SKU_NUMBER>\",\n            \"category\": \"<ITEM_CATEGORY>\",\n            \"title\": \"<ITEM_TITLE>\",\n            \"description\": \"<ITEM_DESC>\",\n            \"quantity\": <ITEM_QUANTITY>,\n            \"unit_measure\": \"<ITEM_UNIT_MEASURE>\",\n            \"unit_price\": <ITEM_UNIT_PRICE>,\n            \"total_amount\": <ITEM_TOTAL_AMOUNT>\n        }\n    ],\n    \"title\": \"<PURCHASE_TITLE>\",\n    \"description\": \"<PURCHASE_DESC>\",\n    \"notification_url\": \"<NOTIFICATION_URL>\",\n    \"sponsor\": {\n        \"id\": <SPONSOR_ID>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MercadoPago.js Library - HTML\nDESCRIPTION: This snippet shows how to import the MercadoPago.js library in an HTML document by including the script tag.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pix.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n\n```\n\n----------------------------------------\n\nTITLE: Example Payment Request JSON\nDESCRIPTION: Complete JSON example of a payment request including subscription and network transaction data\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/network-transaction-id.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"TESTE\",\n    \"external_reference\": \"MP_genova_master\",\n    \"installments\": 1,\n    \"token\": \"{{token}}\",\n    \"payer\": {\n        \"id\": \"{{customer_id}}\",\n        \"entity_type\": \"individual\",\n        \"type\": \"customer\"\n    },\n    \"payment_method_id\": \"master\",\n    \"transaction_amount\": 1,\n    \"point_of_interaction\": {\n        \"type\": \"SUBSCRIPTIONS\",\n        \"transaction_data\": {\n            \"first_time_use\": true,\n            \"subscription_id\": \"mlb-suscripcions-genova-1\",\n            \"subscription_sequence\": {\n                \"number\": 1\n            },\n            \"invoice_period\": {\n                \"period\": 1,\n                \"type\": \"monthly\"\n            },\n            \"billing_date\": \"2024-07-29\",\n            \"user_present\": true\n        }\n    },\n    \"forward_data\": {\n        \"network_transaction_data\": {\n            \"network_transaction_id\": \"n7w-c0d3-t7d\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Application Configuration Documentation - Markdown\nDESCRIPTION: Markdown documentation describing the structure and configuration options for Mercado Pago applications, including application data, edit settings, quality measurement, and integration testing details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/application-details.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Application details\n\nTo access the general data of your application, navigate to the [Developer Dashboard](/developers/panel/app) and click on the card of an application to access the **Application details**.\n\n## Application data\n\n* **Application data**: This section displays the basic data of the application, including:\n  - **User ID**: Automatically generated user identification number.\n  - **Application number**: Automatically generated application identification number.\n  - **Integration with**: The product or platform integrated with the application.\n  - **Integration model** (if applicable): Integration model options are available depending on the used product or platform.\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Payment Option with React\nDESCRIPTION: This snippet illustrates how to configure the default payment option within a React component for the Payment Brick. It sets the walletForm as the default payment option. Remember to enable only one property at a time inside the `defaultPaymentOption` object.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/default-payment-method.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n   defaultPaymentOption: {\n     walletForm: true,\n     // creditCardForm: true,\n     // debitCardForm: true,\n     // savedCardForm: 'card id sent in the initialization',\n     // ticketForm: true,\n   },\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing MercadoPago SDK using Bash\nDESCRIPTION: This Bash snippet shows the command to install the MercadoPago SDK using npm, facilitating the use of MercadoPago.js functions in your project.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-cardform.en.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n\n```\n\n----------------------------------------\n\nTITLE: Creating Test Users with MercadoPago API using cURL\nDESCRIPTION: This cURL command creates a test user for MercadoPago integration. It sends a POST request to the MercadoPago API with the site_id parameter set to 'MLM' (likely representing Mexico). The response will contain details of the created test user.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/create-test-user.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer ENV_ACCESS_TOKEN\" \\\n\"https://api.mercadopago.com/users/test_user\" \\\n-d '{\"site_id\":\"MLM\"}'\n```\n\n----------------------------------------\n\nTITLE: Customizing Brick Visuals to Hide Transaction Date Using React-JSX\nDESCRIPTION: This React-JSX snippet focuses on customizing the visual options of a Brick component by hiding the transaction date. It shows a simple configuration that can be integrated within a React component to achieve the desired visual customization.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/status-screen-brick/hide-transaction-date.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n hideTransactionDate: true\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Update Mercado Pago JS script import\nDESCRIPTION: Updates the Mercado Pago JavaScript SDK script import in HTML from V1 to V2. This ensures the application uses the latest SDK version. The new version uses a different CDN endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n```\n\n----------------------------------------\n\nTITLE: Customizing Device ID Output in HTML\nDESCRIPTION: HTML code to customize the output variable name for device ID in Mercado Pago's security script.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\" output=\"deviceId\"></script>\n```\n\n----------------------------------------\n\nTITLE: Criando Pagamento com Efecty usando PHP\nDESCRIPTION: Código PHP para criar um pagamento via Efecty usando o SDK do Mercado Pago. Inclui configuração de cabeçalho de idempotência e processamento da resposta.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['<TRANSACTION_AMOUNT>'],\n    \"payment_method_id\" => $_POST['<PAYMENT_METHOD_ID>'],\n    \"payer\" => [\n      \"email\" => $_POST['<EMAIL>']\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Adding New Cards to a Customer in Ruby\nDESCRIPTION: Ruby implementation for adding a new payment card to an existing MercadoPago customer. This code uses the MercadoPago SDK to fetch a customer and then create a new card with the specified token and payment method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustomer_response = sdk.customer.get('247711297-jxOV430go9fx2e')\ncustomer = customer_response[:response]\n\ncard_request = {\ntoken: '9b2d63e00d66a8c721607214cedaecda',\npayment_method_id: 'debit_card'\n}\ncard_response = sdk.card.create(customer['id'], card_request)\ncard = card_response[:response]\n\nputs card\n```\n\n----------------------------------------\n\nTITLE: Sending Discounted Payment Request with Curl\nDESCRIPTION: Demonstrates how to make a POST request to the Mercado Pago Advanced Payments API with a discounted payment, including transaction details, discount parameters, and payer information\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/process-payments-with-discounts.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n'https://api.mercadopago.com/v1/advanced_payments' \\\n--header 'Authorization: <YOUR_ACCESS_TOKEN>' \\\n--data '{\n    \"wallet_payment\": {\n        \"transaction_amount\": 550,\n        \"description\": \"Payment Description\",\n        \"external_reference\": \"Pago_123\",\n        \"discount\": {\n            \"amount\": 55.0,\n            \"description\": \"Pruebas wc\",\n            \"detail\": {\n                \"value\": 10.0,\n                \"type\": \"percent\",\n                \"cap\": 5000\n            }\n        }\n    },\n    \"payer\": {\n        \"token\": \"PAYER_TOKEN\",\n        \"type_token\": \"wallet-token\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Making a Utilities Payment Request with cURL\nDESCRIPTION: This cURL command demonstrates how to make a payment request for utilities services. It includes detailed information about the transaction, items, and payer, along with additional fields specific to the utilities industry.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/utilities.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}} \\\n--data-raw '{\n    \"transaction_amount\": 150.00,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"debvisa\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Pedido01\",\n    \"description\": \"PEDIDO NOVO\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"payer\": {\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"12345678909\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"title\": \"Serviço\",\n                \"category_id\": \"service\",\n                \"quantity\": 1,\n                \"unit_price\": 150\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_prime_user\": true,\n            \"is_first_purchase_online\": true,\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"206233-2002\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"3003\"\n            },\n            \"authentication_type\": \"Facebook\",\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment for Tickets and Entertainment using Mercado Pago API\nDESCRIPTION: This cURL request demonstrates how to create a payment for tickets and entertainment using the Mercado Pago API. It includes detailed information about the transaction, items, and the buyer to improve payment approval rates.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/tickets-and-entretainment.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--data-raw '{\n    \"transaction_amount\": 12.34,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"debvisa\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Pedido01\",\n    \"description\": \"PEDIDO NOVO - INGRESSO\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"payer\": {\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"12345678909\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"1941\",\n                \"title\": \"25/08/2022 | Pista Inteira5 lote - GREEN VALLEY GRAMADO 2022\",\n                \"description\": \"25/08/2022 | Pista Inteira5 lote - GREEN VALLEY GRAMADO 2022\",\n                \"category_id\": \"Tickets\",\n                \"quantity\": 1,\n                \"unit_price\": 100.00,\n                \"event_date\": \"2019-12-25T19:30:00.000-03:00\"\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_prime_user\": true,\n            \"is_first_purchase_online\": true,\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\",\n            \"authentication_type\":\"Gmail\"\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Settlement Report Format\nDESCRIPTION: Shows the structure and data format of a CSV settlement report from MercadoPago, containing transaction details including external references, payment methods, amounts, fees, and other transaction-related information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.en.md#2025-04-18_snippet_7\n\nLANGUAGE: csv\nCODE:\n```\nEXTERNAL_REFERENCE;SOURCE_ID;USER_ID;PAYMENT_METHOD_TYPE;PAYMENT_METHOD;SITE;TRANSACTION_TYPE;TRANSACTION_AMOUNT;TRANSACTION_CURRENCY;TRANSACTION_DATE;FEE_AMOUNT;SETTLEMENT_NET_AMOUNT;SETTLEMENT_CURRENCY;SETTLEMENT_DATE;REAL_AMOUNT;COUPON_AMOUNT;METADATA;MKP_FEE_AMOUNT;FINANCING_FEE_AMOUNT;SHIPPING_FEE_AMOUNT;TAXES_AMOUNT;INSTALLMENTS;ORDER_ID;SHIPPING_ID;SHIPMENT_MODE;PACK_ID\n2112818453;5067634447;123456789;account_money;account_money;MLB;SETTLEMENT;79.00;BRL;2019-08-11T22:20:19.000-04:00;-8.85;70.15;BRL;2019-08-11T22:20:19.000-04:00;70.15;0.00;[{}];-8.85;0.00;0.00;0.00;1;2112818453;28067695419;me1;2E+15\n2112815686;5067535844;123456789;account_money;account_money;MLB;SETTLEMENT;819.00;BRL;2019-08-11T22:15:32.000-04:00;-91.73;727.27;BRL;2019-08-11T22:15:32.000-04:00;727.27;0.00;[{}];-91.73;0.00;0.00;0.00;1;2112815686;28067772278;me1;2E+15\n2112811587;5067365727;123456789;account_money;account_money;MLB;SETTLEMENT;769.00;BRL;2019-08-11T22:11:13.000-04:00;-86.13;682.87;BRL;2019-08-11T22:11:13.000-04:00;682.87;0.00;[{}];-86.13;0.00;0.00;0.00;1;2112811587;28067612908;me1;2E+15\n2112784039;5067781790;123456789;credit_card;master;MLB;SETTLEMENT;199.00;BRL;2019-08-11T21:38:18.000-04:00;-22.29;176.71;BRL;2019-08-11T21:38:24.000-04:00;176.71;0.00;[{}];-22.29;0.00;0.00;0.00;1;2112784039;;;\n2112755183;5067186172;123456789;credit_card;master;MLB;SETTLEMENT;79.00;BRL;2019-08-11T21:10:20.000-04:00;-8.85;70.15;BRL;2019-08-11T21:10:27.000-04:00;70.15;0.00;[{}];-8.85;0.00;0.00;0.00;1;2112755183;;;\n2112747018;5067323570;123456789;credit_card;visa;MLB;SETTLEMENT;3109.00;BRL;2019-08-11T21:00:11.000-04:00;-348.21;2760.79;BRL;2019-08-11T21:00:18.000-04:00;2760.79;0.00;[{}];-348.21;0.00;0.00;0.00;12;2112747018;;;\n2112742918;5067175589;123456789;account_money;account_money;MLB;SETTLEMENT;154.00;BRL;2019-08-11T20:57:05.000-04:00;-17.25;136.75;BRL;2019-08-11T20:57:05.000-04:00;136.75;0.00;[{}];-17.25;0.00;0.00;0.00;1;2112742918;28067593333;me1;2E+15\n2112736997;5067585992;123456789;digital_currency;consumer_credits;MLB;SETTLEMENT;94.00;BRL;2019-08-11T20:51:12.000-04:00;-10.53;83.47;BRL;2019-08-11T20:51:18.000-04:00;83.47;0.00;[{}];-10.53;0.00;0.00;0.00;1;2112736997;;;\n2112736008;5067314803;123456789;digital_currency;consumer_credits;MLB;SETTLEMENT;79.00;BRL;2019-08-11T20:48:08.000-04:00;-8.85;70.15;BRL;2019-08-11T20:48:15.000-04:00;70.15;0.00;[{}];-8.85;0.00;0.00;0.00;1;2112736008;;;\n2112729919;5067463621;123456789;credit_card;master;MLB;SETTLEMENT;79.00;BRL;2019-08-11T20:41:46.000-04:00;-8.85;70.15;BRL;2019-08-11T20:41:55.000-04:00;70.15;0.00;[{}];-8.85;0.00;0.00;0.00;1;2112729919;;;\n```\n\n----------------------------------------\n\nTITLE: Deploying Static Content\nDESCRIPTION: Command to regenerate static content files for production mode.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/adobe-commerce/installation-composer.en.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbin/magento setup:static-content:deploy\n```\n\n----------------------------------------\n\nTITLE: Implementing getIntent Method for Receiving Responses in Ionic\nDESCRIPTION: Method to receive and process the response from the payment intent. It parses the response data and performs actions based on the payment status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/cross-platform-ionic.es.md#2025-04-18_snippet_4\n\nLANGUAGE: ionic\nCODE:\n```\ngetIntent() { \n \t\tthis.intent.getIntent().then(async (intentRDCPass: any) => { \n \t\t\t\tif (intentRDCPass.extras && intentRDCPass.action == this.intent.ACTION_SEND) {  \n\t\t\t\t\tthis.data = JSON.parse(intentRDCPass.extras['android.intent.extra.TEXT']); \n\t\t\t\t\tthis.statusPay = this.data.ESTADO; \n\t\t\t\t\t// ARMAR UN OBJETO CON LOS DATOS DE RESPUESTA QUE SE REQUIERAN.\n\t\t\t\t\tlet objWithData = { \n\t\t\t\t\t\testado: this.data.ESTADO, \n\t\t\t\t\t\ttotal: this.data.TOTAL, \n\t\t\t\t\t\tpropina: this.data.PROPINA, \n\t\t\t\t\t\tmedio_pago: this.data.MEDIO_PAGO, \n\t\t\t\t\t\tcodaut: this.data.CODAUT, \n\t\t\t\t\t\tfecha_hora: this.data['FECHA&HORA'], \n\t\t\t\t\t\tmensaje_visor: this.data.MENSAJE_VISOR, \n\t\t\t\t\t}; \n\t\t\t\t\tif (this.data.ESTADO == 'APROBADO') { \n\t\t\t\t\t\t// ACCIÓN PARA EL CASO APROBADO.... \n\t\t\t\t\t} else { \n\t\t\t\t\t\t// ACCIÓN PARA EL CASO RECHAZADO.... \n\t\t\t\t\t} \n \t\t\t\t} else { \n\t\t\t\t\tsetTimeout(() => { \n\t\t\t\t\t\t\tthis.getIntent(); \n\t\t\t\t\t}, 1000); \n \t\t\t\t} \n\t\t});  \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth in AndroidManifest.xml\nDESCRIPTION: Add metadata to AndroidManifest.xml to enable OAuth protocol. This is necessary when devices will be used with accounts different from the application developer's.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/first-steps.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<application\n    ...>\n\n    <meta-data\n        android:name=\"com.mercadolibre.android.sdk.OAUTH_ENABLED\"\n        android:value=\"true\" />\n\n    <!-- Outras configurações da aplicação -->\n</application>\n```\n\n----------------------------------------\n\nTITLE: Exemplo de Notificação de Reclamação em JSON\nDESCRIPTION: Exemplo de payload de notificação enviada quando uma reclamação ou chargeback é iniciado. Inclui informações sobre o recurso criado e detalhes da reclamação.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/notification-additional-info.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"action\": \"Created\",\n    \"api_version\": \"v1\",\n    \"data\": {\n        \"description\": \"desc\",\n        \"merchant_order\": 249940988000,\n        \"payment_id\": 58980959081,\n        \"site_id\": \"MLA\"\n    },\n    \"date_created\": \"2022-07-23T23:03:5704:00\",\n    \"id\": \"58980959081\",\n    \"live_mode\": true,\n    \"type\": \"stop_delivery_op_wh\",\n    \"user_id\": 224403329,\n    \"version\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MercadoPago SDK for React\nDESCRIPTION: This command installs the MercadoPago SDK for React applications using npm.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-checkout.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install @mercadopago/sdk-react\n```\n\n----------------------------------------\n\nTITLE: Creating Mercado Pago Preference in Java\nDESCRIPTION: This Java code uses the PreferenceClient to create a preference. It sets up an item with title, quantity, and unit price, and includes the 'wallet_purchase' purpose for logged payments. The preference is then created using the client.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.en.md#2025-04-18_snippet_21\n\nLANGUAGE: java\nCODE:\n```\n// Create a preference object\nPreferenceClient client = new PreferenceClient();\n\n// Create an item in the preference\nList<PreferenceItemRequest> items = new ArrayList<>();\nPreferenceItemRequest item =\n   PreferenceItemRequest.builder()\n       .title(\"Meu produto\")\n       .quantity(1)\n       .unitPrice(new BigDecimal(\"100\"))\n       .build();\nitems.add(item);\n\nPreferenceRequest request = PreferenceRequest.builder()\n  // o .purpose('wallet_purchase') only allows logged payments\n  // to allow guest payments you can omit this line\n  .purpose('wallet_purchase')\n  .items(items).build();\n\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Setting Expiration Date for Boleto Bancario in ISO 8601 Format\nDESCRIPTION: A simple example showing how to format the date_of_expiration field in ISO 8601 format when creating a Boleto Bancario payment. The format must follow yyyy-MM-dd'T'HH:mm:ssz pattern.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/bank-slip.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\n\"date_of_expiration\": \"2023-01-28T22:59:59.000-04:00\"\n```\n\n----------------------------------------\n\nTITLE: Error Response for Invalid Transaction Amount\nDESCRIPTION: This is an error response indicating a bad request due to an invalid transaction amount. The response details the error message and the status code indicating the nature of the problem.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/create-discount-promise-with-coupon.en.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"error\": \"bad_request\",\\n  \"message\": \"transaction_amount must be greater than 0\",\\n  \"status\": 400\\n}\n```\n\n----------------------------------------\n\nTITLE: Creando un Campo Oculto para el Device ID\nDESCRIPTION: Crea un campo oculto en tu HTML con un ID específico para almacenar el valor del Device ID generado por el script de seguridad de Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-chopro.es.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"hidden\" id=\"deviceId\">\n```\n\n----------------------------------------\n\nTITLE: Launching Camera Scanner for QR and Barcode in Java\nDESCRIPTION: This snippet shows how to use MPManager.getCameraScanner() to launch a camera scanner for QR codes and barcodes in Java. It demonstrates how to create a callback function to handle scan results and errors.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/camscanner-callback.es.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal CameraScanner cameraScanner = MPManager.INSTANCE.getCameraScanner();\nfinal Function<MPResponse<CameraScannerResponse>, Unit> callback = new Function<MPResponse<CameraScannerResponse>, Unit>() {\n   @Override\n   public Unit apply(MPResponse<CameraScannerResponse> response) {\n       if (response.getStatus() == ResponseStatus.SUCCESS) {\n\n           // Manejar la respuesta exitosa\n           CameraScannerResponse cameraScannerResponse = response.getData();\n\n           String result = cameraScannerResponse.getMessage();\n           // ... Hacer algo con el resultado\n       } else {\n\n           // Manejar el error en la respuesta\n           String errorMessage = response.getError();\n           // ... Hacer algo con el error\n       }\n       return Unit.INSTANCE;\n   }\n};\n\n/**\n* Lanzar el escáner de cámara QR o Barra con el callback: ScanType.CAMERA_SCANNER_QR - ScanType.CAMERA_SCANNER_BARCODE\n*/\n\ncameraScanner.launchScanner(ScanType.CAMERA_SCANNER_QR, callback);\n```\n\n----------------------------------------\n\nTITLE: Generating RSA SSH Key Pair in Terminal\nDESCRIPTION: This command generates a 4096-bit RSA SSH key pair. The public key will be shared with Mercado Pago, while the private key is used for SFTP connection. Both keys should be stored in the same directory on the computer that will connect to Mercado Pago's SFTP server.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/public-and-private-key.es.md#2025-04-18_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nssh-keygen -t rsa -b 4096\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment Form with SDK JS V2 JavaScript\nDESCRIPTION: This snippet initializes the MercadoPago card form using SDK JS V2. It sets up the payment form configuration, including field mappings and placeholders, and defines callbacks for form mounting, submission, and resource fetching events. Includes form validation and submission logic with console and alert outputs to assist in debugging.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/partners.en.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst cardForm = mp.cardForm({\n  amount: \"100.5\",\n  autoMount: true,\n  form: {\n    id: \"form-checkout\",\n    cardholderName: {\n      id: \"form-checkout__cardholderName\",\n      placeholder: \"Cardholder name\",\n    },\n    cardholderEmail: {\n      id: \"form-checkout__cardholderEmail\",\n      placeholder: \"Email\",\n    },\n    cardNumber: {\n      id: \"form-checkout__cardNumber\",\n      placeholder: \"Card number\",\n    },\n    cardExpirationMonth: {\n      id: \"form-checkout__cardExpirationMonth\",\n      placeholder: \"Expiration month\",\n    },\n    cardExpirationYear: {\n      id: \"form-checkout__cardExpirationYear\",\n      placeholder: \"Expiration year\",\n    },\n    securityCode: {\n      id: \"form-checkout__securityCode\",\n      placeholder: \"Security code\",\n    },\n    installments: {\n      id: \"form-checkout__installments\",\n      placeholder: \"Installments\",\n    },\n    identificationType: {\n      id: \"form-checkout__identificationType\",\n      placeholder: \"Identification type\",\n    },\n    identificationNumber: {\n      id: \"form-checkout__identificationNumber\",\n      placeholder: \"Identification number\",\n    },\n    issuer: {\n      id: \"form-checkout__issuer\",\n      placeholder: \"Issuer bank\",\n    },\n  },\n  callbacks: {\n    onFormMounted: error => {\n      if (error) return console.warn(\"Form mounted handling error: \", error);\n      console.log(\"Form mounted\");\n    },\n    onSubmit: event => {\n      event.preventDefault();\n\n      const {\n        paymentMethodId: payment_method_id,\n        issuerId: issuer_id,\n        cardholderEmail: email,\n        amount,\n        token,\n        installments,\n        identificationNumber,\n        identificationType,\n      } = cardForm.getCardFormData();\n\n      /*fetch(\"/process_payment\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          token,\n          issuer_id,\n          payment_method_id,\n          transaction_amount: Number(amount),\n          installments: Number (installments),\n          description: \"Product description\",\n          payer: {\n            email,\n            identification: {\n              type: identificationType,\n              number: identificationNumber,\n            },\n          },\n        }),\n      });*/\n      alert(\"Generated card token: \" + token);\n    },\n    onFetching: resource => {\n      console.log(\"Fetching resource: \", resource);\n\n      // Animate progress bar\n      const progressBar = document.querySelector(\".progress-bar\");\n      progressBar.removeAttribute(\"value\");\n\n      return () => {\n        progressBar.setAttribute(\"value\", \"0\");\n      };\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Encryption Model for Newland Devices (3DES ECB)\nDESCRIPTION: Illustrates the encryption process for Newland devices using 3DES with ECB mode. It demonstrates how to extract card-present data such as PAN, expiration date, cardholder information, and track1 data using a working key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/secure_payments/responses.es.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Ejemplo |\n|---|\n| Track1 = EE9CB14C4F92A690D68CD81F3C3FBEF37A1656DF0635B3DFD297B4BF74A3756224C4F86A48A0F130612FAB419023C9D73EBFFD5FF48AA36BD1920EA92F5B6A40 |\n| Working key = 22222222222222222222222222222222 |\n\n| Resultado |\n|---|\n| PAN = 340431451910745 |\n| Fecha expiracion = 01/2022 |\n| Titular de la tarjeta = TESTTEST TESTER NICOLAS |\n| Track1 = B340431451910745^TESTTEST/TESTER NICOLAS  ^2201201170191641 |\n```\n\n----------------------------------------\n\nTITLE: Initiating Barcode Scanner in Kotlin\nDESCRIPTION: Uses the initBarcodeScanner function of the CameraScanner class to start reading barcodes with the Point Smart device.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/camscanner-legacy.en.md#2025-04-18_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval cameraScanner = MPManager.cameraScanner\ncameraScanner.initBarcodeScanner(this@YourActivity)\n```\n\n----------------------------------------\n\nTITLE: Successful Discount Applied Response\nDESCRIPTION: Represents a successful API response with a discount applied to the transaction. Returns transaction details, discount amount, and legal terms.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/discount-promise-no-coupon-responses.en.md#2025-04-18_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"transaction_amount\": 550.0,\n  \"currency_id\": \"ARS\",\n  \"discount\": {\n    \"amount\": 55.0,\n    \"detail\": {\n      \"value\": 10.0,\n      \"type\": \"percent\",\n      \"cap\": 1000.0\n    },\n    \"legal_terms\": \"https://mercadopago.com/legal/terms\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Collector ID Not Found Error in JSON\nDESCRIPTION: This JSON error response highlights a failed request due to the absence of a collector_id in the merchant list. It returns a status code 404, suggesting the collector is unauthorized for transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/get-payment-information-returns.en.md#2025-04-18_snippet_3\n\nLANGUAGE: Json\nCODE:\n```\n{\n   \"status\": \"404\",\n   \"error\":  \"Not found\",\n   \"message\": \"collector_id not found in the merchant list.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Exemplo de Resposta JSON para Busca de Pagamentos\nDESCRIPTION: Este é um exemplo da estrutura JSON retornada ao buscar uma lista de pagamentos. Inclui informações de paginação e um array de resultados.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/retrieving-payments.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"paging\": {\n    \"total\": 1234,\n    \"limit\": 30,\n    \"offset\": 0\n  },\n  \"results\": [\n    {}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Refunds for a Payment\nDESCRIPTION: Method to retrieve all refunds associated with a specific payment using PaymentRefundClient. Requires the payment ID as a parameter.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/refunds.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nPaymentRefundClient client = new PaymentRefundClient();\n\nLong paymentId = 123456789L;\nclient.list(paymentId);\n```\n\n----------------------------------------\n\nTITLE: Initializing PSE Payment Form with Entity and ID Data in React for Colombia\nDESCRIPTION: React implementation to pre-populate entity type, identification, and email fields for PSE payments in Colombia. Includes entity type set to 'individual' and identification details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/initialize-data-on-the-bricks.en.md#2025-04-18_snippet_15\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst initialization = {\n   ...,\n   payer: {\n    email: '<PAYER_EMAIL>',\n    entityType: 'individual',\n    identification: {\n      type: '<YOUR_IDENTIFICATION_TYPE>',\n      number: '<YOUR_IDENTIFICATION_NUMBER>'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing React-Native-InAppBrowser for iOS\nDESCRIPTION: This JavaScript snippet showcases how to implement the React-Native-InAppBrowser in a React Native application for iOS, offering customization options for opening a URL in Safari View Controller.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-cli.en.md#2025-04-18_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n\tButton,\n\tLinking\n} from 'react-native';\nimport InAppBrowser from 'react-native-inappbrowser-reborn';\nconst ButtonCustomTabs = () => {\n\tconst openUrl = async (url) => {\n\t\tif (await InAppBrowser.isAvailable()) {\n\t\t\tInAppBrowser.open(url, {\n\t\t\t\t// iOS Properties\n\t\t\t\tdismissButtonStyle: 'cancel',\n\t\t\t\tpreferredBarTintColor: '#453AA4',\n\t\t\t\tpreferredControlTintColor: 'white',\n\t\t\t\treaderMode: false,\n\t\t\t\tanimated: true,\n\t\t\t\tmodalEnabled: true,\n\t\t\t\t// Android Properties\n\t\t\t\tshowTitle: true,\n\t\t\t\ttoolbarColor: '#6200EE',\n\t\t\t\tsecondaryToolbarColor: 'black',\n\t\t\t\tenableUrlBarHiding: true,\n\t\t\t\tenableDefaultShare: true,\n\t\t\t\tforceCloseOnRedirection: false, // Animation\n\t\t\t\tanimations: {\n\t\t\t\t\tstartEnter: 'slide_in_right',\n\t\t\t\t\tstartExit: 'slide_out_left',\n\t\t\t\t\tendEnter: 'slide_in_left',\n\t\t\t\t\tendExit: 'slide_out_right',\n\t\t\t\t},\n\t\t\t});\n\t\t} else {\n\t\t\tLinking.openURL(url);\n\t\t}\n\t};\n\treturn ( < Button title = \"Press Me\"\n\t\t\t\t\t onPress = {\n\t\t\t\t\t\t() =>\n\t\t\t\t\t\topenUrl('https://url-to-open.com')\n\t\t\t\t\t}\n\t\t\t\t\t/> );\n};\nexport default ButtonCustomTabs;\n```\n\n----------------------------------------\n\nTITLE: Installing ADB on MacOS\nDESCRIPTION: Command to install Android Debug Bridge platform tools using Homebrew package manager on MacOS.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/how-to-install-android-macos-windows.en.md#2025-04-18_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nbrew install android-platform-tools;\n```\n\n----------------------------------------\n\nTITLE: Eliminando una Estructura en Mercado Pago API usando cURL\nDESCRIPTION: Este comando cURL elimina una estructura específica del reporte de ventas de vendedores del marketplace. Requiere autenticación mediante un token de acceso y el ID de la estructura a eliminar.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/deactivation.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request DELETE 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/structures/{{structure_id}}' \\\n--header 'Authorization: Bearer {{TOKEN}}'\n```\n\n----------------------------------------\n\nTITLE: Creating Settlement Report Configuration - HTTP Request\nDESCRIPTION: Makes a POST request to create a new settlement report configuration. Sets report properties like file name prefix, display options, notification emails, and column specifications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.es.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/config' \\\n    -d '{\n            \"file_name_prefix\": \"settlement-report-USER_ID\",\n            \"show_fee_prevision\": false,\n            \"show_chargeback_cancel\": true,\n            \"include_withdraw\": true,\n            \"coupon_detailed\": true,\n            \"shipping_detail\": true,\n            \"refund_detailed\": true,\n            \"display_timezone\": \"GMT-04\",\n            \"notification_email_list\": [\n                \"example@email.com\",\n                \"john@example.com\"\n            ],\n            \"frequency\": {\n                \"hour\": 0,\n                \"type\": \"monthly\",\n                \"value\": 1\n            },\n            \"columns\": [\n                {\n                    \"key\": \"TRANSACTION_DATE\"\n                },\n                {\n                    \"key\": \"SOURCE_ID\"\n                },\n                {\n                    \"key\": \"EXTERNAL_REFERENCE\"\n                }\n            ]\n        }'\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK with Python\nDESCRIPTION: This code snippet initializes the Mercado Pago SDK in Python by importing the `mercadopago` module and creating an `SDK` instance with the access token. The access token is required for authenticating API requests.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.pt.md#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# SDK do Mercado Pago\nimport mercadopago\n# Adicione as credenciais\nsdk = mercadopago.SDK(\"PROD_ACCESS_TOKEN\")\n```\n\n----------------------------------------\n\nTITLE: Partially Processed Pending Bank Transaction Status\nDESCRIPTION: Transaction scenario where processing is incomplete due to destination account issues. The status will be 'partially_processed' with a status_detail of 'pending_bank'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-test.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"partially_processed\",\n  \"status_detail\": \"pending_bank\"\n}\n```\n\n----------------------------------------\n\nTITLE: Associating Google Ads Tag with Checkout Pro in Node.js\nDESCRIPTION: The Node.js code snippet shows how to integrate Google Ads conversion tracking into a Mercado Pago preference. It requires conversion ID and conversion label parameters, demonstrating the setup in a Node environment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.en.md#2025-04-18_snippet_6\n\nLANGUAGE: node\nCODE:\n```\n// Create a preference object\nvar preference = {\n\n// Associate your Google ads tag\ntracks: [\n{\ntype: \"google_ad\",\nvalues: {\nconversion_id: \"CONVERSION_ID\",\nconversion_label: \"CONVERSION_LABEL\"\n}\n}\n]\n...\n};\n```\n\n----------------------------------------\n\nTITLE: Get payment method V1\nDESCRIPTION: Shows how to get the payment method when using SDK V1. It also shows the event listener for the card number field.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.en.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.Mercadopago.getPaymentMethod({\n    \"bin\": bin\n}, callbackFn);\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById('cardNumber').addEventListener('change', guessPaymentMethod);\n\n```\n\n----------------------------------------\n\nTITLE: Building Mercado Pago Cartridge\nDESCRIPTION: Command to build the Mercado Pago cartridge after installing dependencies, preparing it for integration with the store site\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/salesforce/store-build.en.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Adding Payment Form for Checkout Integration in HTML\nDESCRIPTION: This HTML snippet provides a form for collecting user payment information required for processing payments through Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.en.md#2025-04-18_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<form id=\"form-checkout\" action=\"/process_payment\" method=\"post\">\n    <div>\n      <div>\n        <label for=\"payerFirstName\">Name</label>\n        <input id=\"form-checkout__payerFirstName\" name=\"payerFirstName\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"payerLastName\">Last name</label>\n        <input id=\"form-checkout__payerLastName\" name=\"payerLastName\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"email\">E-mail</label>\n        <input id=\"form-checkout__email\" name=\"email\" type=\"text\">\n      </div>\n    <div>\n      <div>\n        <input type=\"hidden\" name=\"transactionAmount\" id=\"transactionAmount\" value=\"5000\">\n        <input type=\"hidden\" name=\"description\" id=\"description\" value=\"Nome do Produto\">\n        <br>\n        <button type=\"submit\">Pay</button>\n      </div>\n    </div>\n  </form>\n\n```\n\n----------------------------------------\n\nTITLE: Setting Back URLs and Auto Return - C#\nDESCRIPTION: This C# snippet shows how to set the `BackUrls` property of a `PreferenceRequest` object, defining the success, failure, and pending URLs. It also sets the `AutoReturn` property to \"approved\" for automatic redirection upon payment approval.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nvar request = new PreferenceRequest\n{\n    // ...\n    BackUrls = new PreferenceBackUrlsRequest\n    {\n        Success = \"https://www.tu-sitio/success\",\n        Failure = \"http://www.tu-sitio/failure\",\n        Pending = \"http://www.tu-sitio/pendings\",\n    },\n    AutoReturn = \"approved\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Card Token in Mercado Pago SDK V1\nDESCRIPTION: Example of how to create a card token using the Mercado Pago SDK V1. The createToken method receives a form and a callback function that executes after token creation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.Mercadopago.createToken($form, setCardTokenAndPay);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tabs in Java\nDESCRIPTION: Code for launching a Custom Tab with a payment preference URL in Java.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/java-kotlin.en.md#2025-04-18_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nString url = \"URL-PREFERENCE\";\nCustomTabsIntent intent = new CustomTabsIntent.Builder()\n       .build();\nintent.launchUrl(MainActivity.this, Uri.parse(url));\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago SDK\nDESCRIPTION: Code examples showing how to create a payment using Mercado Pago SDK across different programming languages. Includes handling of idempotency key and essential payment parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mla.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\Client\\Common\\RequestOptions;\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['transactionAmount'],\n    \"token\" => $_POST['token'],\n    \"description\" => $_POST['description'],\n    \"installments\" => $_POST['installments'],\n    \"payment_method_id\" => $_POST['paymentMethodId'],\n    \"issuer_id\" => $_POST['issuer'],\n    \"payer\" => [\n      \"email\" => $_POST['email'],\n      \"first_name\" => $_POST['payerFirstName'],\n      \"last_name\" => $_POST['payerLastName'],\n      \"identification\" => [\n        \"type\" => $_POST['identificationType'],\n        \"number\" => $_POST['number']\n      ]\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nimport { Payment, MercadoPagoConfig } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\n\npayment.create({\n    body: { \n        transaction_amount: req.transaction_amount,\n        token: req.token,\n        description: req.description,\n        installments: req.installments,\n        payment_method_id: req.paymentMethodId,\n        issuer_id: req.issuer,\n            payer: {\n            email: req.email,\n            identification: {\n        type: req.identificationType,\n        number: req.number\n    }}},\n    requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n.then((result) => console.log(result))\n.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Excluding Mercado Pago Bindings in ProGuard\nDESCRIPTION: This ProGuard configuration snippet is used to prevent the Mercado Pago SDK classes from being obfuscated during the build process, ensuring that necessary bindings remain intact for functionality.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/android.en.md#2025-04-18_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\n-keep class com.mercadopago.** { *; }\n```\n\n----------------------------------------\n\nTITLE: Reserving Payment Values with Mercado Pago in Node.js\nDESCRIPTION: Creates a payment with 'capture=false' to reserve the value on the card without completing the transaction. This Node.js implementation uses the MercadoPago SDK to create a payment that will be in an 'authorized' state.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/make-value-reserve.en.md#2025-04-18_snippet_2\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, Payment } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: 'YOUR_ACCESS_TOKEN' });\nconst payment = new Payment(client);\n\nconst body = {\ntransaction_amount: 100,\ntoken: '123456',\ndescription: 'My product',\ninstallments: 1,\npayment_method_id: 'visa',\npayer: {\nemail: 'my.user@example.com',\n},\ncapture: false\n};\n\npayment.create({ body: body, requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' } }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Adding Pix Payment Button in HTML\nDESCRIPTION: HTML code snippet for adding a Pix payment button that opens a new window with payment information including QR Code and Pix Copy and Paste details. The link uses the ticket_url attribute to direct users to the payment page.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pix.en.md#2025-04-18_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://www.mercadopago.com.br/payments/123456789/ticket?caller_id=123456&hash=123e4567-e89b-12d3-a456-426655440000\" target=\"_blank\">Pay with Pix</a>\n```\n\n----------------------------------------\n\nTITLE: Response for Updating Event Configuration in JSON\nDESCRIPTION: This snippet displays the JSON response received after successfully updating an event configuration. It includes details such as the event ID, type, data (period, value, hour), description, structure ID, notifiers, status, version, and user ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/modifications.en.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": {{event_id}},\n    \"type\": \"frequency\",\n    \"data\": {\n        \"period\": \"daily\",\n        \"value\": 0,\n        \"hour\": 11,\n        \"skip_non_working_days\": false\n    },\n    \"description\": \"Evento para envío los viernes \",\n    \"structure_id\": {{structure_id}},\n    \"notifiers\": [\n        {{notifier_id}}\n    ],\n    \"status\": \"ACTIVE\",\n    \"version\": 1,\n    \"user_id\": {{user_id}}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment using MercadoPago API - Python\nDESCRIPTION: This Python snippet demonstrates how to create a payment using the MercadoPago SDK. It initializes the SDK with an access token, configures request options with custom headers, and constructs the payment data to submit to the API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.es.md#2025-04-18_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n    \"transaction_amount\": 100,\n    \"description\": \"Título del producto\",\n    \"payment_method_id\": \"bolbradesco\",\n    \"payer\": {\n        \"email\": \"PAYER_EMAIL\",\n        \"first_name\": \"Test\",\n        \"last_name\": \"User\",\n        \"identification\": {\n            \"type\": \"DNI\",\n            \"number\": \"19119119\"\n        },\n        \"address\": {\n            \"zip_code\": \"1264\",\n            \"street_name\": \"Av. Caseros\",\n            \"street_number\": \"3039\",\n            \"neighborhood\": \"Parque Patricios\",\n            \"city\": \"Buenos Aires\",\n            \"federal_unit\": \"BA\"\n        }\n    }\n}\n\npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Customer Card with Mercado Pago SDK in Java\nDESCRIPTION: This snippet illustrates how to fetch the details of a specific customer card using its card ID and associated customer ID with the CustomerCardClient.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/cards.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nCustomerCardClient client = new CustomerCardClient();\n\nString customerId = \"448870796-7ZjwhKGxILixxN\";\nString cardId = \"8987269652\";\nclient.get(customerId, cardId);\n```\n\n----------------------------------------\n\nTITLE: Creating a Credit Card Payment with Mercado Pago via cURL\nDESCRIPTION: This cURL command demonstrates how to create a payment using a credit card with Mercado Pago. It includes the necessary headers for authorization and content type, and it sends a JSON payload containing the payment details, payer information, item descriptions relevant to travel, and additional relevant parameters.  Replace the placeholders with actual values for ACCESS_TOKEN, PLATFORM_ID, payment_method_id and card_token_id to make it functional.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/credit-card-travels.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'x-platform-id: {{PLATFORM_ID provided by the Partners team}}' \\\n--header 'Authorization: Bearer {{ACCESS_TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{ \n    \"transaction_amount\": 150.34,\n    \"installments\": 1,\n    \"statement_descriptor\": \"Seller's store\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": {{ID of your Mercado Pago account related to your platform}},\n    \"payment_method_id\": \"{{payment_method_id}}\",\n    \"token\":  \"{{card_token_id}}\",\n    \"external_reference\": \"Platform identifier\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"description\": \"Date (in the format dd/mm/yyyy) | Description of the passage\",\n    \"payer\": {\n        \"first_name\": \"Name. Example: John\",\n        \"last_name\": \"Last name. Example: Jones\",\n        \"email\": \"Example: test_user_1677282147@testuser.com\",\n        \"identification\": {\n            \"type\": \"Document type. Example: CPF\",\n            \"number\": \"Number. Example: 19119119100\"\n        },\n        \"address\": {\n            \"zip_code\": \"Zip code. Example: 06233-200\",\n            \"street_name\": \"Nombre de la calle. Example: Av. das Nações Unidas\",\n            \"street_number\": \"Street number. Example: 3003\",\n            \"neighborhood\": \"Neighborhood. Example: Bonfim\",\n            \"city\": \"City. Example: Osasco\",\n            \"federal_unit\": \"Federal unit. Example: SP\"\n        }\n    },\n    \"additional_info\": {\n        \"referral_url\": \"Example: www.sellertest123.com\",\n        \"drop_shipping\": false,\n        \"delivery_promise\": \"2022-11-20\",\n        \"contrated_plan\": \"premium\",\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"title\": \"Date (in the format dd/mm/yyyy) | Description of the passage\",\n                \"description\": \"Date (in the format dd/mm/yyyy) | Description of the passage\",\n                \"picture_url\": \"Example: www.google.com\",\n                \"category_id\": \"travels\",\n                \"category_descriptor\": {\n                    \"passenger\": {\n                        \"first_name\": \"Name. Example: John\",\n                        \"last_name\": \"Last name. Example: Jones\"\n                    },\n                    \"route\": {\n                        \"departure\": \"Example: Osasco\",\n                        \"destination\": \"Example: Buenos Aires\",\n                        \"departure_date_time\": \"2023-03-12T12:58:41.425-04:00\",\n                        \"arrival_date_time\": \"2023-03-14T12:58:41.425-04:00\",\n                        \"company\": \"Companhia\"\n                    }\n                },\n                \"quantity\": 1,\n                \"unit_price\": 150.34\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Name. Example: John\",\n            \"last_name\": \"Last name. Example: Jones\",\n            \"is_prime_user\": \"1\",\n            \"is_first_purchase_online\": \"1\",\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"Area code. Example: 11\",\n                \"number\": \"Number. Example: 987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"Zip code. Example: 06233-200\",\n                \"street_name\": \"Street name. Example: Av. das Nações Unidas\",\n                \"street_number\": \"Number. Example: 3003\"\n            },\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"0\",\n            \"pick_up_on_seller\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"Zip code. Example: 06233-200\",\n                \"street_name\": \"Street name. Example: Av. das Nações Unidas\",\n                \"street_number\": \"Number. Example: 3003\",\n                \"floor\": \"Floor (if it's an apartment). Example: Second\",\n                \"apartment\": \"Apartment number (if it's an apartment). Example: 93\"\n            }\n        }\n     }\n  }'\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Activated Release Report in Mercado Pago API\nDESCRIPTION: This JSON snippet shows the expected response structure when successfully activating automatic generation of a release report. It includes details such as report ID, user ID, date range, status, and generation date.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.en.md#2025-04-18_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 2541818,\n    \"user_id\": \"USER-ID\",\n    \"begin_date\": \"2019-07-01T06:00:00Z\",\n    \"end_date\": \"2019-08-01T05:59:59Z\",\n    \"created_from\": \"schedule\",\n    \"status\": \"pending\",\n    \"report_type\": \"release\",\n    \"generation_date\": \"2019-08-01T06:00:00.000Z\",\n    \"last_modified\": \"2019-07-24T13:45:33.479-04:00\",\n    \"retries\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Initial Subscription Payment Request in JSON\nDESCRIPTION: This snippet demonstrates how to structure the JSON request for the first payment in a subscription series. It includes all necessary parameters such as payer information, transaction amount, payment method details, and subscription-specific data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/subscription-messaging.en.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"payer\": {...},\n    \"transaction_amount\": 20,\n    \"description\": \"...\",\n    \"token\": \"....\",\n    \"statement_descriptor\": \"PRUEBA\",\n    \"issuer_id\": ...,\n    \"payment_method_id\": \"...\",\n    \"amounts\": {...},\n    \"installments\": 1,\n    \"pos_id\": \"....\",\n    \"external_reference\": \"...\",\n    \"point_of_interaction\": {\n        \"type\": \"SUBSCRIPTIONS\",\n        \"transaction_data\": {\n            \"first_time_use\": true,\n            \"subscription_id\": \"COLLECTORPADRE-SUBSCRIPCION_ID\",\n            \"subscription_sequence\": {\n                \"number\": 1,\n                \"total\": 12\n            },\n            \"invoice_period\": {\n                \"period\": 1,\n                \"type\": \"monthly\"\n            },\n            \"payment_reference\": {\n                \"id\": \"20792195335\"\n            },\n            \"user_present\": true/false,\n            \"billing_date\": \"2024-03-16\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tabs Dependency in Android\nDESCRIPTION: Gradle dependency configuration for implementing Custom Tabs in Android applications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/java-kotlin.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ndependencies {\n    ...\n    implementation \"androidx.browser:browser:1.4.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Excluindo pagamento com cartão de débito no Card Payment Brick (React JSX)\nDESCRIPTION: Este snippet mostra como configurar o Card Payment Brick em React JSX para excluir pagamentos com cartão de débito. A configuração é realizada através do objeto customization.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/configure-payment-methods.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n paymentMethods: {\n   types: {\n     excluded: ['debit_card'],\n   },\n },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Integration Identifiers in MercadoPago Java SDK\nDESCRIPTION: Illustrates how to set platform, integrator, and corporation IDs using the MercadoPago Java SDK. Replace the placeholder values with actual identification codes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integration-identification.es.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMercadoPago.SDK.setPlatformId(\"PLATFORM_ID\");\nMercadoPago.SDK.setIntegratorId(\"INTEGRATOR_ID\");\nMercadoPago.SDK.setCorporationId(\"CORPORATION_ID\");\n```\n\n----------------------------------------\n\nTITLE: Checking TLS Protocol Version in C#\nDESCRIPTION: This C# snippet establishes an SSL connection to api.mercadopago.com and outputs the SSL protocol version, enabling developers to verify TLS 1.2 or higher compatibility.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/pci-compliant-merchants/disabling-tls-10.en.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nstring strWebsiteName = \"api.mercadopago.com\";\nTcpClient _myClient = new TcpClient();\nSslStream _myStream;\n_myClient.Connect(strWebsiteName, 443);\n_myStream = new SslStream(_myClient.GetStream());\n_myStream.AuthenticateAsClient(strWebsiteName);\n\nConsole.WriteLine(\"protocol : \" + _myStream.SslProtocol);\n```\n\n----------------------------------------\n\nTITLE: Getting Installments Amount in Kotlin\nDESCRIPTION: Retrieve installment details for a specific amount using Kotlin with MPManager's PaymentInstallmentTools\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/get-list-installments.en.md#2025-04-18_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nMPManager.paymentInstallmentTools.getInstallmentsAmount(\n   callback = { mpResponse ->\n       mpResponse.doIfSuccess { installments ->\n           // Successfully manage the list of installments\n       }.doIfError {\n           // Manage the error in the installment request \n       }\n   },\n   amount = \"11.0\"\n)\n```\n\n----------------------------------------\n\nTITLE: Printing with Specific Bluetooth Device Address\nDESCRIPTION: Shows how to print to a specific Bluetooth printer using its address. Includes error handling and success case management.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/print-external-printer.en.md#2025-04-18_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval bluetoothPrinter = MPManager.bluetooth.printer\n\nbluetoothPrinter.print(dataToPrint, address) { response ->\n   response\n       .doIfSuccess { printerResult ->\n           // Manage successful printing result\n       }.doIfError { error ->\n           // Manage the error case if necessary\n       }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal BluetoothPrinter bluetoothPrinter = MPManager.INSTANCE.getBluetooth().getPrinter();\n\nfinal Function1<MPResponse<BluetoothPrinterResult>, Unit> callback =\n   (final MPResponse<BluetoothPrinterResult> response) -> {\n     if (response.getStatus() == ResponseStatus.SUCCESS) {\n       // Perform additional actions if necessary\n     } else {\n       // Manage the error case if necessary\n     }\n     return Unit.INSTANCE;\n   };\n\nbluetoothPrinter.print(dataToPrint, address, callback);\n```\n\n----------------------------------------\n\nTITLE: Processing Payments with MercadoPago in PHP\nDESCRIPTION: Demonstrates how to process payments using MercadoPago in a PHP environment. It includes setting up the PaymentClient and creating a payment request with sub_merchant data, ensuring compliance with BCB 3978 regulations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subcredenciadores-payfacs/integration-update.en.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire 'vendor/autoload.php';\n\nuse MercadoPago\\Client\\Payment\\PaymentClient;\nuse MercadoPago\\Client\\Common\\RequestOptions;\nuse MercadoPago\\MercadoPagoConfig;\n\nMercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n$client = new PaymentClient();\n\n$request_options = new RequestOptions();\n$request = [\n    \"transaction_amount\" => (float) '100',\n    \"token\" => '545950fe518e85df69052e1765898e92',\n    \"description\" =>'teste',\n    \"payment_method_id\" => 'visa',\n    \"installments\" => 1,\n    \"payer\" => [\n        \"email\" => 'test_user_11264832@testuser.com',\n    ],\n    \"forward_data\" => [\n        \"sub_merchant\" => [\n            \"sub_merchant_id\" => \"123123\",\n            \"mcc\" => \"5462\",\n            \"country\" => \"BRA\",\n            \"address_door_number\" => 1,\n            \"zip\" => \"2222222\",\n            \"document_number\" => \"222222222222222\",\n            \"city\" => \"SÃO PAULO\",\n            \"address_street\" => \"RUA A\",\n            \"legal_name\" => \"LOJINHA DO ZÉ\",\n            \"region_code_iso\" => \"BR-MG\",\n            \"region_code\" => \"BR\",\n            \"document_type\" => \"CNPJ\",\n            \"phone\" => \"123123123\",\n            \"url\" => \"www.nomedofacilitador.com.br\"\n        ]\n    ]\n];\n\ntry{\n    $payment = $client->create( $request, $request_options);\n    var_dump($payment);\n\n} catch (MPApiException $e) {\n    var_dump($e);\n} catch (\\Exception $e) {\n    // Handle all other exceptions\n    var_dump($e);\n}\n// echo \"Content: \";\n// var_dump($e->getApiResponse()->getContent());\n// echo \"\\n\";\n// } catch (\\Exception $e) {\n// // Handle all other exceptions\n// echo $e->getMessage();\n// }\n```\n\n----------------------------------------\n\nTITLE: Transaction Information Response (MLA)\nDESCRIPTION: This JSON snippet represents a successful response from the Mercado Pago API when retrieving transaction information. It includes various details about the transaction, such as creation and update dates, external reference, ID, point of interaction, seller configuration, status, and transaction details. This response is specific to the MLA region.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.es.md#2025-04-18_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_date\": \"2024-11-13T15:04:25.699+00:00\",\n  \"external_reference\": \"external_ref_1234\",\n  \"id\": \"22dvqmseu9m\",\n  \"last_updated_date\": \"2024-11-13T15:04:31.256+00:00\",\n  \"point_of_interaction\": {\n    \"type\": \"PSP_TRANSFER\"\n  },\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://example.ar/notification\"\n    }\n  },\n  \"status\": \"processed\",\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": 25,\n          \"status_details\": []\n        }\n      ]\n    },\n    \"paid_amount\": 25,\n    \"payer\": {\n      \"id\": 1992483656\n    },\n    \"refunded_amount\": 0,\n    \"to\": {\n      \"accounts\": [\n        {\n          \"amount\": 25,\n          \"description\": \"envio de 25\",\n          \"origin_id\": \"01JCK0VSV3TBSAADAGJQKG4GTY\",\n          \"status_details\": [\n            \"approved\"\n          ]\n        }\n      ]\n    },\n    \"total_amount\": 25,\n    \"statement_descriptor\": \"\",\n    \"binary_mode\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Preference on Submit using Wallet Brick in React\nDESCRIPTION: This React code snippet defines an `onSubmit` function for the Wallet Brick that creates a preference. It sends a POST request to `/create_preference` with a predefined request body containing item details and purchase purpose. The response is then processed to resolve the promise with the preference ID, or the promise is rejected if there's an error.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/create-preference-submit.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst onSubmit = async (formData) => {\n // callback chamado ao clicar no Wallet Brick\n // isso é possível porque o Brick é um botão\n // neste momento de submit, você deve criar a preferência\n const yourRequestBodyHere = {\n   items: [\n     {\n       id: '202809963',\n       title: 'Dummy title',\n       description: 'Dummy description',\n       quantity: 1,\n       unit_price: 10,\n     },\n   ],\n   purpose: 'wallet_purchase',\n };\n return new Promise((resolve, reject) => {\n   fetch('/create_preference', {\n     method: 'POST',\n     headers: {\n       'Content-Type': 'application/json',\n     },\n     body: JSON.stringify(yourRequestBodyHere),\n   })\n     .then((response) => response.json())\n     .then((response) => {\n       // resolver a promise com o ID da preferência\n       resolve(response.preference_id);\n     })\n     .catch((error) => {\n       // lidar com a resposta de erro ao tentar criar a preferência\n       reject();\n     });\n });\n};\n\n\nconst onError = async (error) => {\n // callback chamado para todos os casos de erro do Brick\n console.log(error);\n};\n\n\nconst onReady = async () => {\n /*\n   Callback chamado quando o Brick estiver pronto.\n   Aqui você pode ocultar loadings do seu site, por exemplo.\n */\n};\n```\n\n----------------------------------------\n\nTITLE: Processing Money Out Transaction - Mercado Pago API - curl\nDESCRIPTION: This snippet illustrates how to send a POST request to process a Money Out transaction, including necessary headers like Authorization and X-Idempotency-Key, as well as the transaction details in JSON format.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.es.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    'https://api.mercadopago.com/v1/transaction-intents/process'\\\\n    -H 'Content-Type: application/json' \\\n       -H 'X-Idempotency-Key: {{idempotency_key}}' \\\n       -H 'x-Signature: true' \\\n       -H 'x-enforce-signature: false' \\\n       -H 'Authorization: Bearer TEST-7434*********159-03141*********cee51edf8*********f94f589-1*********' \\\n    -d '{\\n  \"external_reference\": \"MP0001\",\\n  \"point_of_interaction\": {\"type\":\"PSP_TRANSFER\"},\\n  \"seller_configuration\": {\\n    \"notification_info\": {\\n      \"notification_url\": \"http://ejemplo.com.br/notification\"\\n    }\\n  },\\n  \"transaction\": {\\n    \"from\": {\\n      \"accounts\": [\\n        {\\n          \"amount\": 100\\n        }\\n      ]\\n    },\\n    \"to\": {\\n      \"accounts\": [\\n        {\\n          \"type\": \"current\",\\n          \"amount\": 100,\\n          \"bank_id\": \"99999004\",\\n          \"branch\": \"0001\",\\n          \"holder\": \"Jonh Doe\",\\n          \"provider_id\": \"spi\",\\n          \"currency_id\": \"BRL\",\\n          \"number\": \"10266732\",\\n          \"owner\": {\\n            \"identification\": {\\n              \"type\": \"CPF\",\\n              \"number\": \"1234567890\"\\n            }\\n          }\\n        }\\n      ]\\n    },\\n    \"total_amount\": 100\\n  }\\n}'\n```\n\n----------------------------------------\n\nTITLE: Installing Mercado Pago SDK with npm\nDESCRIPTION: This code snippet shows how to install the Mercado Pago SDK for Node.js using npm. npm is the package manager for Node.js.  The command `npm install mercadopago` adds the Mercado Pago SDK as a dependency to your Node.js project.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-development-environment.es.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\n\"npm install mercadopago\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Email Notification for Reports (curl)\nDESCRIPTION: This curl request sets up email notification for the generated reports. It specifies the recipient email address.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/reports/notifiers' \\\n--header 'Authorization: Bearer {{TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"type\": \"email\",\n    \"data\": {\n        \"recipients\": [\"test@mercadolibre.com\"]\n    },\n    \"description\": \"test notifier email\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing MercadoPago Card Payment Form\nDESCRIPTION: HTML structure for a complete credit card payment form with styling. Includes fields for card details, cardholder information, document details, and payment options like installments and issuer selection.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/partners.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    #form-checkout {\n      display: flex;\n      flex-direction: column;\n      max-width: 600px;\n    }\n    .container {\n      height: 18px;\n      display: inline-block;\n      border: 1px solid rgb(118, 118, 118);\n      border-radius: 2px;\n      padding: 1px 2px;\n    }\n</style>\n<form id=\"form-checkout\">\n  <fieldset>\n    <ul>\n      <li>\n        <label for=\"cardNumber\">Número do cartão:</label>\n        <input type=\"text\" name=\"cardNumber\" id=\"form-checkout__cardNumber\" />\n      </li>\n      <li>\n        <label for=\"cardExpirationMonth\">Mês de vencimento:</label>\n        <input type=\"text\" name=\"cardExpirationMonth\" id=\"form-checkout__cardExpirationMonth\" value=\"12\" />\n      </li>\n      <li>\n        <label for=\"cardExpirationYear\">Ano de vencimento:</label>\n        <input type=\"text\" name=\"cardExpirationYear\" id=\"form-checkout__cardExpirationYear\" value=\"24\" />\n      </li>\n      <li>\n        <label for=\"cardholderName\">Nome do titular:</label>\n        <input type=\"text\" name=\"cardholderName\" id=\"form-checkout__cardholderName\" value=\"APRO\" />\n      </li>\n      <li>\n        <label for=\"cardholderEmail\">Email:</label>\n        <input type=\"email\" name=\"cardholderEmail\" id=\"form-checkout__cardholderEmail\" value=\"test_user_60077763@testuser.com\" />\n      </li>\n      <li>\n        <label for=\"securityCode\">Código de segurança:</label>\n        <input type=\"text\" name=\"securityCode\" id=\"form-checkout__securityCode\" value=\"123\" />\n      </li>\n      <li>\n        <label for=\"issuer\">Emissor:</label>\n        <select name=\"issuer\" id=\"form-checkout__issuer\"></select>\n      </li>\n      <li>\n        <label for=\"identificationType\">Tipo do documento:</label>\n        <select name=\"identificationType\" id=\"form-checkout__identificationType\"></select>\n      </li>\n      <li>\n        <label for=\"identificationNumber\">Número do documento:</label>\n        <input type=\"text\" name=\"identificationNumber\" id=\"form-checkout__identificationNumber\" value=\"12345678909\" />\n      </li>\n      <li>\n        <label for=\"installments\">Parcelas:</label>\n        <select name=\"installments\" id=\"form-checkout__installments\"></select>\n      </li>\n      <li>\n        <button type=\"submit\" id=\"form-checkout__submit\">Pagar</button>\n      </li>\n      <li>\n        <progress value=\"0\" class=\"progress-bar\">Carregando...</progress>\n      </li>\n    </ul>\n  </fieldset>   \n</form>\n```\n\n----------------------------------------\n\nTITLE: Transaction Information Response (MLM)\nDESCRIPTION: This JSON snippet represents a successful response from the Mercado Pago API when retrieving transaction information. It includes various details about the transaction, such as creation and update dates, external reference, ID, point of interaction, seller configuration, status, and transaction details. This response is specific to the MLM region.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.es.md#2025-04-18_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_date\": \"2024-11-13T14:18:07.052+00:00\",\n  \"external_reference\": \"12345\",\n  \"id\": \"22dvqmseu6a\",\n  \"last_updated_date\": \"2024-11-13T14:18:07.663+00:00\",\n  \"point_of_interaction\": {\n    \"type\": \"PSP_TRANSFER\"\n  },\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://example.mx/notification\"\n    }\n  },\n  \"status\": \"processed\",\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": 25,\n          \"status_details\": []\n        }\n      ]\n    },\n    \"paid_amount\": 0,\n    \"payer\": {\n      \"id\": 1992483662\n    },\n    \"refunded_amount\": 0,\n    \"to\": {\n      \"accounts\": [\n        {\n          \"amount\": 25,\n          \"description\": \"envio de 25\",\n          \"origin_id\": \"01JCJY70ACGJ2AP8433JGG0ZRY\",\n          \"status_details\": []\n        }\n      ]\n    },\n    \"total_amount\": 25,\n    \"statement_descriptor\": \"\",\n    \"binary_mode\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Intent Filter for Launcher Activity in AndroidManifest.xml\nDESCRIPTION: This XML snippet demonstrates how to add an intent filter to the main activity in AndroidManifest.xml, setting it as the application launcher.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/first-steps.en.md#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter>\n\n   ...\n\n   <category android:name=\"android.intent.category.LAUNCHER\" />\n\n   <category android:name=\"android.intent.category.HOME\" />\n\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Inicializando a biblioteca Mercado Pago para Checkout Bricks em React\nDESCRIPTION: Inicializa a biblioteca Mercado Pago para utilizar Checkout Bricks em React. Requer a importação da função initMercadoPago e a substituição de 'YOUR_PUBLIC_KEY' pela chave pública real do Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/common-initialization.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { initMercadoPago } from '@mercadopago/sdk-react';\ninitMercadoPago('YOUR_PUBLIC_KEY');\n```\n\n----------------------------------------\n\nTITLE: Capturing Device Information in Swift\nDESCRIPTION: Shows various methods to obtain device information in Swift using MercadoPagoDevicesSDK. Different formats are available including Codable object, JSON, JSON string, and Dictionary.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.en.md#2025-04-18_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nMercadoPagoDevicesSDK.shared.getInfo() // Returns a Codable Device Object\nMercadoPagoDevicesSDK.shared.getInfoAsJson() // Returns a JSON Library Data Object\nMercadoPagoDevicesSDK.shared.getInfoAsJsonString() // Returns a JSON String\nMercadoPagoDevicesSDK.shared.getInfoAsDictionary() // Returns a Dictionary<String,Any>\n```\n\n----------------------------------------\n\nTITLE: Cancel Payment Intent Response\nDESCRIPTION: This JSON snippet shows the expected response after successfully cancelling an open payment intent via the API. It returns the `id` of the cancelled payment intent.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/payment-processing.en.md#2025-04-18_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n \"id\": \"7d8c70b6-2ac8-4c57-a441-c319088ca3ca\"\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct and Incorrect List Punctuation in Markdown\nDESCRIPTION: This snippet shows the correct way to format a simple list without commas at the end of each item, and an incorrect version with periods. It uses Markdown syntax for lists and line breaks.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/style-guide/punctuation.es.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n✅ **Puedes integrar de dos formas: <br> • Manual,<br> • Automática.** <br> <br>\n❌ Puedes integrar de dos formas <br> • Manual. <br> • Automática.\n```\n\n----------------------------------------\n\nTITLE: Encryption Example for Newland Devices\nDESCRIPTION: Shows the encryption process for 'newland' PoI devices using 3DES and ECB operation mode with a working key. Includes input data and expected output for PAN, expiration date, cardholder info, and track1 data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/secure_payments/responses.en.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Example |\n|---|\n| Track1 = EE9CB14C4F92A690D68CD81F3C3FBEF37A1656DF0635B3DFD297B4BF74A3756224C4F86A48A0F130612FAB419023C9D73EBFFD5FF48AA36BD1920EA92F5B6A40 |\n| Working key = 22222222222222222222222222222222 |\n\n| Result |\n|---|\n| PAN = 340431451910745 |\n| Expiration date = 01/2022 |\n| Cardholder = TESTTEST TESTER NICOLAS |\n| Track1 = B340431451910745^TESTTEST/TESTER NICOLAS ^2201201170191641 |\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Item Preference in Ruby\nDESCRIPTION: This Ruby code shows how to create a preference with multiple items using MercadoPago's SDK. It initializes the SDK with an access token, creates a preference data hash with two items, and then creates the preference using the SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n# Create preference data with items\npreference_data = {\n  items: [\n    {\n      title: 'Mi producto 1',\n      quantity: 1,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 75.56\n    },\n    {\n      title: 'Mi producto 2',\n      quantity: 2,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 96.56\n    }\n  ]\n}\n\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Manual Report Generation Response\nDESCRIPTION: This JSON response confirms the successful creation of a manual marketplace seller sales report request. It includes a status code and a unique statement ID for reference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.es.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status_code\": 201,\n    \"request_id\": {{statement_id}},\n    \"message\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response with Access Token\nDESCRIPTION: This JSON snippet shows the expected response from the /oauth/token endpoint after successfully obtaining an Access Token. It includes the access_token, token_type, expires_in, scope, user_id, and live_mode parameters.  The Access Token should be stored securely and used in subsequent API calls to Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/interoperable-accepting-flow-configuration.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n {\n   \"access_token\": \"{ACCESS_TOKEN}\",\n   \"token_type\": \"Bearer\",\n   \"expires_in\": 21600,\n   \"scope\": \"offline_access read write\",\n   \"user_id\": {USER_ID},\n   \"live_mode\": true\n }\n```\n\n----------------------------------------\n\nTITLE: Initializing QR Code Scanner in Point Smart SDK (Kotlin/Java)\nDESCRIPTION: This code shows how to initialize the QR code scanner using the CameraScanner class from the MPManager. It uses the legacy initQRCodeScanner method, which triggers the camera through startActivityForResult.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/camscanner-legacy.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval cameraScanner = MPManager.cameraScanner\ncameraScanner.initQRCodeScanner(this@YourActivity)\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal CameraScanner cameraScanner = MPManager.INSTANCE.getCameraScanner();\ncameraScanner.initQRCodeScanner(this);\n```\n\n----------------------------------------\n\nTITLE: Checking Enabled Notification Channels - cURL\nDESCRIPTION: This cURL command retrieves the current status of notification channels for an integrator, allowing verification of the email channel configuration. The request requires an access token for authorization.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/notifications-pdv.en.md#2025-04-18_snippet_5\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request GET 'https://api.mercadopago.com/point/integration-api/integrator' \\\n--h 'Authorization: Bearer YOUR_ACCESS_TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Inicializando el SDK de Dispositivos en Swift\nDESCRIPTION: Código para inicializar el SDK de dispositivos de Mercado Pago en una aplicación iOS usando Swift. Se recomienda inicializarlo en el evento didFinishLaunchingWithOptions del AppDelegate.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.es.md#2025-04-18_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport MercadoPagoDevicesSDK\n...\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        ...        \n        MercadoPagoDevicesSDK.shared.execute()\n        ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Intent Response in RDCPass (JSON)\nDESCRIPTION: Example JSON response for creating a payment intent in RDCPass local integration. It includes transaction details, payment method information, acquisition data, and electronic receipt information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/annex-response-examples.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"ESTADO\":\"APROBADO\",\n   \"TOTAL\":\"5566\",\n   \"PROPINA\":\"0\",\n   \"MEDIO_PAGO\":\"DEBITO\",\n   \"CODAUT\":\"388153\",\n   \"FECHA&HORA\":\"20230817&111955\",\n   \"MENSAJE_VISOR\":\"APROBADO (00)\",\n   \"DATOS_ADQUIRENCIA_CLIENTE\":{\n      \"RETAILER_ID\":\"39200562\",\n      \"FECHA&HORA\":\"20230817&111955\",\n      \"TERMINAL\":\"3261\",\n      \"NUM_TARJETA\":\"********4199\",\n      \"TOTAL\":\"5566\",\n      \"PROPINA\":\"0\",\n      \"NUM_OPER\":\"00000812\",\n      \"COD_AUTO\":\"388153\",\n      \"NUM_UNICO\":\"246636\",\n      \"TIPO_TARJETA\":\"DEBITO\",\n      \"TIPO_LECTURA\":\"E-DB\"\n   },\n   \"DATOS_ADQUIRENCIA_CLIENTE_IMPRIMIR\":\"{s}39200562 -    2.62.03          TARJETA DE DEBITO{\\/s}{br}{s}17\\/08\\/2023    11:19:55                     3261{\\/s}{br}{s}********4199    {s} E-DB{br}{s}MONTO COMPRA                              $5.566{\\/s}{br}{s}TOTAL                                    $ 5.566{\\/s}{br}{s}NUM OPER    00000812       COD AUTO       388153{\\/s}{br}{s}NUMERO UNICO                              246636{\\/s}{br}{center}{s}ACEPTO PAGAR SEGUN CONTRATO CON EMISOR{\\/s}\",\n   \"DATOS_ADQUIRENCIA_COMERCIO\":{\n      \"RETAILER_ID\":\"39200562\",\n      \"FECHA&HORA\":\"20230817&111955\",\n      \"TERMINAL\":\"3261\",\n      \"NUM_TARJETA\":\"********4199\",\n      \"TOTAL\":\"5566\",\n      \"PROPINA\":\"0\",\n      \"NUM_OPER\":\"00000812\",\n      \"COD_AUTO\":\"388153\",\n      \"NUM_UNICO\":\"246636\"\n   },\n   \"DATOS_ADQUIRENCIA_COMERCIO_IMPRIMIR\":\"{center}COMPROBANTE DE VENTA{br}{center}TARJETA DE DEBITO{br}{br}{center}{s}REDELKONG{\\/s}{br}{center}{s}TEST 2050, SANTIAGO{\\/s}{br}{center}{s} - 2.62.03{\\/s}{br}{br}{s}FECHA         HORA                     TERMINAL{\\/s}{br}{s}17\\/08\\/2023    11:19:55                     3261{\\/s}{br}{br}{s}NUMERO DE TARJETA   NUM DE CUENTA    E-DB{\\/s}{br}{s}********4199          {\\/s}{br}{s}MONTO COMPRA                              $5.566{\\/s}{br}{s}PROPINA                                       $0{\\/s}{br}{s}TOTAL                                    $ 5.566{\\/s}{br}{s}NUMERO DE OPERACION    :                00000812{\\/s}{br}{s}CODIGO DE AUTORIZACION :                  388153{\\/s}{br}{s}NUMERO UNICO :                            246636{\\/s}{br}{center}{s}ORIGINAL COMERCIO{\\/s}{br}{center}{s}ACEPTO PAGAR SEGUN CONTRATO CON EMISOR{\\/s}\",\n   \"BOLETA\":{\n      \"RUBRO\":\"VENTA AL POR MENOR DE COMPUTADORES, EQUIPO PERIFERICO, PROGRAMAS INFOR\",\n      \"DIRECCION\":\"PADRE MARIANO 391 OF 704 7P Providencia \",\n      \"SUCURSAL\":\"81228911\",\n      \"CAF\":\"12444098\",\n      \"TED1\":\"<TED version=\\\"1.0\\\"><DD><RE>13924206-8<\\/RE><TD>39<\\/TD><F>12444098<\\/F><FE>2023-08-17<\\/FE><RR>66666666-6<\\/RR><RSR>SII Boleta<\\/RSR><MNT>5566<\\/MNT><IT1>Venta<\\/IT1><CAF version=\\\"1.0\\\"><DA><RE>76123174-K<\\/RE><RS>REDELCOM S.A.<\\/RS><TD>39<\\/TD><RNG><D>1<\\/D><H>100<\\/H><\\/RNG><FA>2017-08-07<\\/FA><RSAPK><M>0ts6Ek7exNXpPnY\\/8OfC5G1k0eaK1olAfrK5Q68fD4uWdcmNetiSUyZ3pKK4uRxWJCfWB9fdG2bbFzPQqQL0MQ==<\\/M><E>Aw==<\\/E><\\/RSAPK><IDK>100<\\/IDK><\\/DA><FRMA algoritmo=\\\"SHA1withRSA\\\">Hjeprfm4y6SWTTMPx5Xd348MnV0CV5x1kLVY2mreJFms6WHlabnRZISABDqwpc9JzVQCfYVaFdVbJq6hTRUz0A==<\\/FRMA><\\/CAF><TSTED>2023-08-17T11:19:23<\\/TSTED><\\/DD><FRMT algoritmo=\\\"SHA1withRSA\\\">UYSvOH22AKI4S8D+z6E7NiCkQg3y8cR\\/Ane+m2N3mPG+nGpLBt+NmpmCudBHhn4Ujscl6tQLCur4\\no2EqibfPzg==\\n<\\/FRMT><\\/TED>\",\n      \"TED2\":\"UYSvOH22AKI4S8D+z6E7NiCkQg3y8cR\\/Ane+m2N3mPG+nGpLBt+NmpmCudBHhn4Ujscl6tQLCur4\\no2EqibfPzg==\\n\"\n   },\n   \"SALDO_TERMINAL\":\"11736999\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Unauthorized Cross Border Account in JSON\nDESCRIPTION: This JSON snippet shows the error response received when attempting to use Cross Border features with a Mercado Pago account that is not configured for Cross Border operations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.es.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"not allowed\",\n    \"error\": \"cbt_not_allowed\",\n    \"status\": 400,\n    \"cause\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Cross Border Payment Response in JSON\nDESCRIPTION: This JSON snippet demonstrates the counter_currency object in a successful Cross Border payment response, including the USD amount, conversion rate, and refund information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.es.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"counter_currency\": {\n\t\"currency_id\": \"USD\",\n    \"rate\": 18.22539135,\n    \"amount\": 4.99,\n    \"amount_refunded\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Notification URL with MercadoPago SDK in PHP\nDESCRIPTION: This PHP snippet demonstrates setting up a payment request with a notification URL using the MercadoPago SDK. Ensure the SDK is installed and configured with necessary dependencies. Replace placeholder values such as 'token' and 'notification_url' with actual values. Inputs: transaction amount, token, description, installments, payment method, payer information. Outputs: None.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.en.md#2025-04-18_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php \\n$client = new PaymentClient();\\n\\n        $body = [\\n            'transaction_amount' => 100,\\n            'token' => 'token',\\n            'description' => 'description',\\n            'installments' => 1,\\n            'payment_method_id' => 'visa',\\n            'notification_url' => 'http://test.com',\\n            'payer' => array(\\n                'email' => 'test@test.com',\\n                'identification' => array(\\n                    'type' => 'CPF',\\n                    'number' => '19119119100'\\n                )\\n            )\\n        ];\\n\\n$client->create(body);\\n?>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pix Payment Button Link in HTML\nDESCRIPTION: HTML code for creating a payment button that redirects to a Pix payment window containing QR code and payment instructions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pix.es.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://www.mercadopago.com.br/payments/123456789/ticket?caller_id=123456&hash=123e4567-e89b-12d3-a456-426655440000\" target=\"_blank\">Pagar con Pix</a>\n```\n\n----------------------------------------\n\nTITLE: Integration Quality Measurement Table\nDESCRIPTION: Markdown table showing the different aspects evaluated during integration quality measurement, including buyer experience, financial reconciliation, payment approval, scalability and security.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/homologator/homologator.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Aspects | Description |\n|---|---|\n| Buyer Experience | To grow and maintain the user rate in your integration, you must offer a good payment experience. The suggestions provided by Mercado Pago in the quality measurement will guide you to achieve the best results. |\n| Financial Reconciliation | Consistency in the financial verification of transactions registered in Mercado Pago aims to maintain data integrity in your system, making it important to implement necessary measures and suggested best practices in your measurement results. |\n| Payment Approval | To ensure a good payment approval rate, it is important to validate each field highlighted as needing improvement, as well as implementing best practices suggested by Mercado Pago. This way, our fraud tools will have more elements to conduct a detailed evaluation. |\n| Scalability | When measuring the quality of your integration, ensure you have the most updated versions of our APIs and official libraries for better results. |\n| Security | At Mercado Pago, we aim to ensure the confidentiality of each piece of data involved in a purchase process. The improvements indicated or best practices suggested in your measurement results will allow you to obtain necessary data safely and reliably. |\n```\n\n----------------------------------------\n\nTITLE: Customized External Resource URL with Pre-selection Parameters\nDESCRIPTION: Example of an external_resource_url with query parameters to pre-select the financial institution and customer username, improving the payment experience by reducing manual data entry.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-simplified.es.md#2025-04-18_snippet_9\n\nLANGUAGE: external_resource_url\nCODE:\n```\nhttps://www.mercadopago.cl/sandbox/payments/1319503224/bank_transfer/fintoc?caller_id=[…]b96-ab4bcf820559&username=JohnDoe&instutuion_id=cl_banco_estado\n```\n\n----------------------------------------\n\nTITLE: Processing Payments with Mercado Pago SDK in Java\nDESCRIPTION: Use the Mercado Pago SDK to process payments in a Java Android application. This includes setting up success and error URIs, and launching the payment flow.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/first-steps.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nPaymentFlow paymentFlow = MPManager.INSTANCE.getPaymentFlow();\n\nHashMap<String, String> metadata = new HashMap<>();\n\nUri uriSuccess = paymentFlow.buildCallbackUri(\n \"mercadopago://launcher_native_app\",\n \"success\",\n metadata,\n \"demo_app\"\n);\n\nUri uriError = paymentFlow.buildCallbackUri(\n \"mercadopago://launcher_native_app\",\n \"error\",\n metadata,\n \"demo_app\"\n);\n\nFunction1<MPResponse, Unit> callback = (MPResponse response) -> {\n return;\n};\n\npaymentFlow.launchPaymentFlowActivity(\n \"1\",\n \"My Payment Description\",\n uriSuccess,\n uriError,\n getApplicationContext(),\n \"credit\",\n callback\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Payer Token with cURL\nDESCRIPTION: API request to create a payment token by sending a POST request to the Mercado Pago Wallet Connect endpoint with required headers and payload\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/create-payer-token.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n      'https://api.mercadopago.com/v2/wallet_connect/agreements/<AGREEMENT.ID>/payer_token'\\\n       -H 'Content-Type: application/json' \\\n       -H 'x-platform-id: YOUR_PLATFORM_ID' \\\n       -H 'Authorization: Bearer TEST-3322*********190-03031*********46528954c*********0339910-1*********' \\\n       -d '{\n  \"code\": \"aeecea3e11f2545d1e7790eb6591ff68df74c57930551ed980239f4538a7e530\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Generando token Yape con MercadoPago.js\nDESCRIPTION: Función JavaScript que utiliza el método mp.yape.create para generar un token de pago Yape a partir del OTP y número de teléfono capturados en el formulario.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.es.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n(async function handleYape () {\n  const otp = docment.getElementById(\"form-checkout__payerOTP\").value;\n  const phoneNumber = docment.getElementById(\"form-checkout__payerPhone\").value;\n  const yapeOptions = {\n    otp,\n    phoneNumber\n  };\n  const yape = mp.yape(yapeOptions);\n  const yapeToken = await yape.create();\n  return yapeToken;\n});\n```\n\n----------------------------------------\n\nTITLE: Downloading Settlement Report File with Mercado Pago API\nDESCRIPTION: This code snippet demonstrates how to download a settlement report file by sending a GET request to the Mercado Pago API. The file name should be specified in the URL.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/:file_name'\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$response = Requests::get('https://api.mercadopago.com/v1/account/settlement_report/:file_name', $headers);\n```\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report/:file_name\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"GET\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\nresponse = requests.get('https://api.mercadopago.com/v1/account/settlement_report/:file_name', headers=headers)\n```\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report/:file_name',\n    method: 'GET',\n    headers: headers,\n};\n\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\n\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Creating and Submitting 3DS Challenge Iframe\nDESCRIPTION: This JavaScript code snippet creates an iframe, constructs a form with hidden input fields, and submits the form to initiate the 3DS challenge. It extracts the `external_resource_url` and `creq` values from the payment object.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction doChallenge(payment) {\n  try {\n    const {\n      status,\n      status_detail,\n      three_ds_info: { creq, external_resource_url },\n    } = payment;\n    if (status === \"pending\" && status_detail === \"pending_challenge\") {\n      var iframe = document.createElement(\"iframe\");\n      iframe.name = \"myframe\";\n      iframe.id = \"myframe\";\n      document.body.appendChild(iframe);\n\n      var idocument = iframe.contentWindow.document;\n\n      var myform = idocument.createElement(\"form\");\n      myform.name = \"myform\";\n      myform.setAttribute(\"target\", \"myframe\");\n      myform.setAttribute(\"method\", \"post\");\n      myform.setAttribute(\"action\", external_resource_url);\n\n      var hiddenField = idocument.createElement(\"input\");\n      hiddenField.setAttribute(\"type\", \"hidden\");\n      hiddenField.setAttribute(\"name\", \"creq\");\n      hiddenField.setAttribute(\"value\", creq);\n      myform.appendChild(hiddenField);\n      iframe.appendChild(myform);\n\n      myform.submit();\n    }\n  } catch (error) {\n    console.log(error);\n    alert(\"Error doing Challenge, try again later.\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Integrator and Platform IDs in Ruby for Mercado Pago SDK\nDESCRIPTION: This code snippet demonstrates how to set the platform ID and integrator ID using the Mercado Pago Ruby SDK. It allows developers to identify their integrations for metrics and benefits.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/metrics/integration-metrics.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequest_options = Mercadopago::RequestOptions.new()\nrequest_options.platform_id = 'PLATFORM_ID'\nrequest_options.integrator_id = 'INTEGRATOR_ID'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN', request_options: request_options)\n```\n\n----------------------------------------\n\nTITLE: Initializing Card Payment Brick\nDESCRIPTION: This JavaScript code initializes the Card Payment Brick.  It sets up the initialization settings, including the amount to be processed, payer information, and styling options. The callbacks object handles events like onReady, onSubmit (for processing the payment), and onError.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-clientside.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n \n   const mp = new MercadoPago('YOUR_PUBLIC_KEY');\nconst bricksBuilder = mp.bricks();\nconst renderPaymentBrick = async (bricksBuilder) => {\n   const settings = {\n       initialization: {\n           amount: 100, //valor do processamento a ser realizado\n           payer: {\n           email: '<PAYER_EMAIL_HERE>',\n       },\n       },\n       style: {\n           theme: 'default' // | 'dark' | 'bootstrap' | 'flat'\n       },\n       callbacks: {\n           onReady: () => {\n           // callback chamado quando o Brick estiver pronto\n           },\n           onSubmit: ({paymentType, formData}) => {\n           // callback chamado o usuário clicar no botão de submissão dos dados\n           // ejemplo de envío de los datos recolectados por el Brick a su servidor\n           return new Promise((resolve, reject) => {\n               fetch(\"/processar-pago\", {\n                   method: \"POST\",\n                   headers: {\n                       \"Content-Type\": \"application/json\",\n                   },\n                   body: JSON.stringify(formData)\n               })\n               .then((response) => {\n                   // receber o resultado do pagamento\n                   resolve();\n               })\n               .catch((error) => {\n                   // lidar com a resposta de erro ao tentar criar o pagamento\n                   reject();\n               })\n               });\n           },\n           onError: (error) => {\n           // callback chamado para todos os casos de erro do Brick\n           },\n       },\n   };\n   window.cardPaymentBrickController = await bricksBuilder.create('payment', 'paymentBrick_container', settings);\n};\nrenderPaymentBrick(bricksBuilder);\n```\n\n----------------------------------------\n\nTITLE: Implementing Recharge Payment Intent - Android\nDESCRIPTION: Creates a method to send recharge payment requests to RDCPass. Takes service name, service ID, customer ID, and amount as parameters. The method configures and launches an intent that initiates the recharge payment process.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-pay-telecommunications.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: android\nCODE:\n```\nprivate void sendRecarga(String nombre_servicio, String id_servicio, String id_cliente, String  monto) { \n    Intent recargaIntent = new Intent(\"enviaRecarga\"); \n    recargaIntent.setClassName(\"redelcom.cl.rdcpass\", \"redelcom.cl.rdcpass.MainActivity\"); \n    recargaIntent.putExtra(\"packageName\", context.getPackageName()); \n    recargaIntent.putExtra(\"className\", getClass().toString().split(\" \")[1]); \n    recargaIntent.putExtra(\"NumberRecharge\", id_cliente); \n    recargaIntent.putExtra(\"AmountRecharge\", monto); \n    recargaIntent.putExtra(\"CompanyRecharge\", id_servicio); \n    recargaIntent.putExtra(\"CompanyNameRecharge\", nombre_servicio); \n    startActivity(recargaIntent); \n}\n```\n\n----------------------------------------\n\nTITLE: Importing MercadoPago.js Library\nDESCRIPTION: Code examples showing how to import the MercadoPago.js library in your project either via HTML script tag or using npm package manager.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n```\n\n----------------------------------------\n\nTITLE: Available Payments Configuration for Uruguay (mlu)\nDESCRIPTION: This snippet defines the available payment methods for Uruguay (mlu). The `available_payments` field lists the supported payment methods. This allows for customizing the payment options offered in each country.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/woocommerce/landing.es.md#2025-04-18_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\n----[mlu]---- \n\n---\navailable_payments: credit, efectivo\n\n----\n------------\n```\n\n----------------------------------------\n\nTITLE: Customizing Device ID Output in HTML\nDESCRIPTION: This code demonstrates how to customize the output variable for the Device ID when using the Mercado Pago security script.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\" output=\"deviceId\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with wallet_purchase in C#\nDESCRIPTION: This C# code snippet shows how to create a preference with the `wallet_purchase` purpose using the Mercado Pago C# SDK.  A `PreferenceRequest` object is created and populated with item details and the `Purpose` property set to `wallet_purchase`. This enforces that only logged in users can make payments. A `PreferenceClient` is used to send the request and create the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-onsubmit.en.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Create the preference request object\nvar request = new PreferenceRequest\n{\n  // o Purpose = 'wallet_purchase', allow only logged payments\n  // to allow guest payments you can omit this property\n    Purpose = \"wallet_purchase\",\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"My product\",\n            Quantity = 1,\n            CurrencyId = \"BRL\",\n            UnitPrice = 75.56,\n        },\n    },\n};\n \n// Create the preference using the client\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n\n```\n\n----------------------------------------\n\nTITLE: Available Payments Configuration (MLM)\nDESCRIPTION: This snippet configures the available payment methods for Mexico (mlm) within the Mini Apps environment. It specifies 'credit', 'debit', and 'mercadopago' as accepted payment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/landing.es.md#2025-04-18_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n\"---\\navailable_payments: credit, debit, mercadopago\\n---\"\n```\n\n----------------------------------------\n\nTITLE: Bad Request Error Response\nDESCRIPTION: This JSON snippet represents an error response from the Mercado Pago API when the request is invalid.  This can occur if any of the parameters within the request are incorrect or missing. The error message indicates that the \"splitter id\" is invalid, but the general structure applies to other bad request scenarios as well.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/refund-full-amount.es.md#2025-04-18_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"status\": \"400\",\n   \"error\":  \"bad_request\",\n   \"message\": \"Invalid splitter id.\",\n   \"cause\": [\n    {\n      \"code\":\"400048\",\n      \"message\": \"Invalid splitter id\",\n      \"data\": null\n    }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Refunding Total Amount Using cURL\nDESCRIPTION: This cURL command sends a POST request to the Mercado Pago API to refund the total amount of an advanced payment. It requires an `X-Idempotency-Key` for request idempotency and an `Authorization` header with the access token. The `ADVANCED_PAYMENT_ID` and `ACCESS_TOKEN` placeholders need to be replaced with actual values.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/refund-full-amount.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n'https://api.mercadopago.com/v1/advanced_payments/ADVANCED_PAYMENT_ID/refunds' \\\n  -H 'X-Idempotency-Key: IDEMPOTENCY-KEY' \\\n  -H 'Authorization: Bearer ACCESS_TOKEN' \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json' \n```\n\n----------------------------------------\n\nTITLE: Test Credit Card Information Tables\nDESCRIPTION: Tables containing test credit card numbers, security codes, and expiration dates for different countries in the Mercado Pago system. Includes cards for Mastercard, Visa, and American Express where applicable.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/Integration-test.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Card | Number | Security code | Expiration date |\n| :--- | :---: | :---: | :---: |\n| Mastercard | 5031 7557 3453 0604 | 123 | 11/25 |\n| Visa | 4509 9535 6623 3704 | 123 | 11/25 |\n| American Express | 3711 803032 57522 | 1234 | 11/25 |\n```\n\n----------------------------------------\n\nTITLE: Discount Promise Creation - Without Pre-added Coupon Option\nDESCRIPTION: Process for creating a discount promise without a specific coupon, based on existing promotional campaigns\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/discounts-intro.en.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* **Option 2: [Without pre-added coupon](/developers/en/docs/wallet-connect/discounts/create-discount-promise-without-preadd-coupon)**\n    * In this case, the request is made without a coupon. Here, the discount is requested based on an existing campaign. This is useful when discounts are offered as part of a general promotion, without the need for a specific coupon code.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Methods using MercadoPago SDK Java\nDESCRIPTION: This Java snippet utilizes the MercadoPago SDK to retrieve payment methods. The access token is set globally, and the payment methods are listed using the PaymentMethodClient. Outputs the available payment methods for transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pse-avanza.en.md#2025-04-18_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nPaymentMethodClient client = new PaymentMethodClient();\nclient.list();\n```\n\n----------------------------------------\n\nTITLE: Getting Paired Printer Devices using BluetoothDiscoverDevices in Java\nDESCRIPTION: This Java code snippet shows how to retrieve a list of paired Bluetooth printer devices using the `getPairedPrinterDevices` function of the `BluetoothDiscoverDevices` class. It gets the `BluetoothDiscoverDevices` instance from `MPManager` and uses a callback to process the response, checking for success or failure.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/manage-connections.es.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal BluetoothDiscoverDevices bluetoothDiscoverDevices = MPManager.INSTANCE.getBluetooth().getDiscover();\n\nfinal Function1<MPResponse<List<BluetoothDeviceModel>>, Unit> callback = (final MPResponse<List<BluetoothDeviceModel>> response) -> {\n if (response.getStatus() == ResponseStatus.SUCCESS) {\n   final List<BluetoothDeviceModel> printers = response.getData();\n   // Trabajar con la lista de dispositivos emparejados\n } else {\n   // Manejar el caso de error si es necesario\n }\n return Unit.INSTANCE;\n};\n\nbluetoothDiscoverDevices.getPairedPrinterDevices(callback);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with 3DS Optional Mode - cURL\nDESCRIPTION: This cURL snippet demonstrates how to create a payment with `three_d_secure_mode` set to \"optional\". Mercado Pago decides if a 3DS challenge is needed. It shows the raw HTTP request required and requires an access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.es.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'Authorization: <ENV_ACCESS_TOKEN>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"payer\": {\n        \"email\": \"<BUYER_EMAIL>\"\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"quantity\": <ITEM_QUANTITY>,\n                \"category_id\": <CATEGORY_ID>,\n                \"title\": <ITEM_TITLE>,\n                \"unit_price\": <TRANSACTION_AMOUNT>\n            }\n        ]\n    },\n    \"payment_method_id\": <PAYMENT_METHOD_ID>,\n    \"marketplace\": \"NONE\",\n    \"installments\": <INSTALLLMENTS_NUMBER>,\n    \"transaction_amount\": <TRANSACTION_AMOUNT>,\n    \"description\": \"<DESCRIPTION>\",\n    \"token\": \"CARD_TOKEN\",\n    \"three_d_secure_mode\": \"optional\",\n    \"capture\": true,\n    \"binary_mode\": false\n}'\n\n```\n\n----------------------------------------\n\nTITLE: Launching Payment Flow\nDESCRIPTION: Function to initiate payment flow with amount, optional metadata, and callback paths for success and error scenarios\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/comunication-commands.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlaunchPaymentFlow(amount, encodeURIComponent({\"attr\":\"123\"}),\n'response/congrats.html', 'response/error.html')\n```\n\n----------------------------------------\n\nTITLE: Cancellation Status Conditions in Markdown\nDESCRIPTION: Documentation outlining the conditions and requirements for canceling payments, including status requirements, expiration rules, and special considerations for boleto bancário payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/cancellations-and-refunds.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- **Payment status**: Cancellations can only be made if the payment status is Pending or In process. These statuses are displayed in the response of the Cancellation API call in the fields *Status* and *Status detail* respectively.\n\n- **Expiry date**: A payment expires after 30 days without confirmation and the cancellation is automatic. The final status of this transaction will appear as *Canceled* or *Expired*.\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment Form with Callbacks - JavaScript (Alternative)\nDESCRIPTION: This snippet, functionally similar to the first, sets up the payment form using the Mercado Pago library but with a different amount specified for reference. It takes care of input validation and response handling.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst cardForm = mp.cardForm({\n  amount: \"100.5\",\n  iframe: true,\n  form: {\n    id: \"form-checkout\",\n    cardNumber: {\n      id: \"form-checkout__cardNumber\",\n      placeholder: \"Número do cartão\",\n    },\n    expirationDate: {\n      id: \"form-checkout__expirationDate\",\n      placeholder: \"MM/YY\",\n    },\n    securityCode: {\n      id: \"form-checkout__securityCode\",\n      placeholder: \"Código de segurança\",\n    },\n    cardholderName: {\n      id: \"form-checkout__cardholderName\",\n      placeholder: \"Titular do cartão\",\n    },\n    issuer: {\n      id: \"form-checkout__issuer\",\n      placeholder: \"Banco emissor\",\n    },\n    installments: {\n      id: \"form-checkout__installments\",\n      placeholder: \"Parcelas\",\n    },        \n    cardholderEmail: {\n      id: \"form-checkout__cardholderEmail\",\n      placeholder: \"E-mail\",\n    },\n  },\n  callbacks: {\n    onFormMounted: error => {\n      if (error) return console.warn(\"Form Mounted handling error: \", error);\n      console.log(\"Form mounted\");\n    },\n    onSubmit: event => {\n      event.preventDefault();\n\n      const {\n        paymentMethodId: payment_method_id,\n        issuerId: issuer_id,\n        cardholderEmail: email,\n        amount,\n        token,\n        installments,\n        identificationNumber,\n        identificationType,\n      } = cardForm.getCardFormData();\n\n      fetch(\"/process_payment\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          token,\n          issuer_id,\n          payment_method_id,\n          transaction_amount: Number(amount),\n          installments: Number(installments),\n          description: \"Descrição do produto\",\n          payer: {\n            email,\n            identification: {\n              type: identificationType,\n              number: identificationNumber,\n            },\n          },\n        }),\n      });\n    },\n    onFetching: (resource) => {\n      console.log(\"Fetching resource: \", resource);\n\n      // Animate progress bar\n      const progressBar = document.querySelector('.progress-bar');\n      progressBar.removeAttribute('value');\n\n      return () => {\n        progressBar.setAttribute('value', '0');\n      };\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Formulario de tokenización de tarjetas con SDK Javascript de Mercado Pago\nDESCRIPTION: Implementación del formulario HTML que permite capturar los datos de la tarjeta del pagador y generar un token utilizando el SDK de Mercado Pago. Este token será utilizado posteriormente para crear el pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.es.md#2025-04-18_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://secure.mlstatic.com/sdk/javascript/v1/mercadopago.js\"></script>\n\n...\n<form action=\"\" method=\"post\" id=\"pay\" name=\"pay\" >\n    <fieldset>\n        <ul>\n            <li>\n                <label for=\"email\">Email</label>\n                <input id=\"email\" name=\"email\" value=\"test_user_19653727@testuser.com\" type=\"email\" placeholder=\"your email\"/>\n            </li>\n            <li>\n                <label for=\"cardNumber\">Credit card number:</label>\n                <input type=\"text\" id=\"cardNumber\" data-checkout=\"cardNumber\" placeholder=\"4509 9535 6623 3704\" />\n            </li>\n            <li>\n                <label for=\"securityCode\">Security code:</label>\n                <input type=\"text\" id=\"securityCode\" data-checkout=\"securityCode\" placeholder=\"123\" />\n            </li>\n            <li>\n                <label for=\"cardExpirationMonth\">Expiration month:</label>\n                <input type=\"text\" id=\"cardExpirationMonth\" data-checkout=\"cardExpirationMonth\" placeholder=\"12\" />\n            </li>\n            <li>\n                <label for=\"cardExpirationYear\">Expiration year:</label>\n                <input type=\"text\" id=\"cardExpirationYear\" data-checkout=\"cardExpirationYear\" placeholder=\"2015\" />\n            </li>\n            <li>\n                <label for=\"cardholderName\">Card holder name:</label>\n                <input type=\"text\" id=\"cardholderName\" data-checkout=\"cardholderName\" placeholder=\"APRO\" />\n            </li>\n         </ul>\n        <input type=\"submit\" value=\"Pay!\" />\n    </fieldset>\n</form>\n...\n```\n\n----------------------------------------\n\nTITLE: Pix Withdrawal Integration Test cURL Request\nDESCRIPTION: Example cURL request for testing Money Out transaction processing with predefined external reference state. Demonstrates how to send a test transaction to the Mercado Pago API using test credentials and headers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-test.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/transaction-intents/process' \\\n--header 'x-enforce-signature: false' \\\n--header 'Authorization: Bearer TEST-7719*********832-03141*********ec9309854*********f1e54b5-1*********' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Test-Token: true' \\\n--data '{\n    \"external_reference\": \"new\",\n    \"point_of_interaction\": {\n        \"type\": \"PSP_TRANSFER\"\n    },\n    \"seller_configuration\": {\n        \"notification_info\": {\n            \"notification_url\": \"https://webhook.site/c107a500-5bf2-4787-8c17-ec9fddcfd0f6\"\n        }\n    },\n    \"transaction\": {\n        \"from\": {\n            \"accounts\": [\n                {\n                    \"amount\": 10\n                }\n            ]\n        },\n        \"to\": {\n            \"accounts\": [\n                {\n                    \"amount\": 10,\n                    \"owner\": {\n                        \"identification\": {\n                            \"number\": \"38437455871\",\n                            \"type\": \"CPF\"\n                        }\n                    },\n                    \"chave\": {\n                        \"type\": \"CPF\",\n                        \"value\": \"38437455871\"\n                    }\n                }\n            ]\n        },\n        \"total_amount\": 10\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing URL Handling in AppDelegate.mm for iOS\nDESCRIPTION: This code must be added to the AppDelegate.mm file to enable URL handling in the iOS application. It uses RCTLinkingManager from React Native to process incoming URLs and route them to the appropriate handlers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-cli.en.md#2025-04-18_snippet_8\n\nLANGUAGE: AppDelegate.mm\nCODE:\n```\n// iOS 9.x or newer\n#import < React / RCTLinkingManager.h >\n\t-(BOOL) application: (UIApplication * ) application\nopenURL: (NSURL * ) url options: (NSDictionary < UIApplicationOpenURLOptionsKey, id > * ) options {\n\treturn [RCTLinkingManager application: application openURL: url options: options];\n}\n```\n\n----------------------------------------\n\nTITLE: PCI DSS Compliance Requirements Table in Markdown\nDESCRIPTION: A markdown table listing the main objectives and requirements of PCI DSS compliance, covering aspects such as network security, data protection, vulnerability management, access control, monitoring, and information security policy.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/pci-v1.es.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Objectivo** | **Requerimiento**\n------------- | ---------------\nCREAR Y MANTENER SISTEMAS Y UNA RED SEGUROS | Instalar y mantener un firewall configurado para proteger los datos de los titulares de tarjeta. <br> <br> No usar los valores predeterminados suministrados por el proveedor para las contraseñas de los sistemas y otros parámetros de seguridad.\nPROTEGER LOS DATOS DE LOS TITULARES DE TARJETA | Proteger los datos del titular almacenados. <br> <br>Cifrar la transmisión de los datos de titulares de tarjeta en las redes abiertas o públicas.\nMANTENER UN PROGRAMA DE GESTIÓN DE VULNERABILIDADES | Proteger todos los sistemas contra software maliciosos y actualizar periódicamente el software antivirus. <br> <br>Desarrollar y mantener sistemas y aplicaciones seguros.\nAPLICAR MEDIDAS SÓLIDAS DE CONTROL DE ACCESO | Restringir el acceso a los datos conforme a la necesidad de saber que tenga la organización. <br> <br>Identificar y autenticar el acceso a los componentes del sistema. Restringir el acceso físico a los datos de titulares de tarjeta.\nVIGILAR Y VERIFICAR PERIÓDICAMENTE LAS REDES | Rastrear y monitorizar todo el acceso a los recursos de la red y los datos de titulares de tarjeta. <br> <br>Verificar periódicamente los sistemas y procesos de seguridad.\nTENER UNA POLÍTICA DE SEGURIDAD DE LA INFORMACIÓN | Tener una política que contemple la seguridad de la información para todo el personal.\n```\n\n----------------------------------------\n\nTITLE: Initializing Card Payment Brick with Email in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Card Payment Brick with a payer's email address. When a valid email is provided, the email field is hidden in the Brick interface.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/initialize-data-on-the-bricks.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n   initialization: {\n       amount: number,\n       payer: {\n           email: 'string',\n       },\n   },\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Preferences - Java\nDESCRIPTION: This Java code snippet demonstrates the creation of a preference request using the MercadoPago SDK. It sets up excluded payment methods and payment types, defining the maximum installments, which allows for refined control over payment options during checkout.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nPreferenceClient client = new PreferenceClient();\n//...\nList<PreferencePaymentMethodRequest> excludedPaymentMethods = new ArrayList<>();\nexcludedPaymentMethods.add(PreferencePaymentMethodRequest.builder().id(\"master\").build());\nexcludedPaymentMethods.add(PreferencePaymentMethodRequest.builder().id(\"amex\").build());\n\nList<PreferencePaymentTypeRequest> excludedPaymentTypes = new ArrayList<>();\nexcludedPaymentTypes.add(PreferencePaymentTypeRequest.builder().id(\"ticket\").build());\n\nPreferencePaymentMethodsRequest paymentMethods =\n   PreferencePaymentMethodsRequest.builder()\n       .excludedPaymentMethods(excludedPaymentMethods)\n       .excludedPaymentTypes(excludedPaymentTypes)\n       .installments(12)\n       .build();\n\nPreferenceRequest request = PreferenceRequest.builder().paymentMethods(paymentMethods).build();\n\nclient.create(request);\n//...\n```\n\n----------------------------------------\n\nTITLE: Configuring Taxes in JSON\nDESCRIPTION: This JSON snippet demonstrates how to specify the tax configuration within the payment preference JSON object. It includes details on the tax type and value, following the specified format for correct structure. The example shows how to define taxes effectively.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"taxes\": [\n\t{\n\t\t\"type\": \"IVA\",\n\t\t\"value\": 16\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Searching Customers by Email in PHP\nDESCRIPTION: PHP implementation for searching a customer by email using Mercado Pago's SDK. It requires setting the access token and using the CustomerClient to perform the search.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/search-customers.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n  \n  $client = new CustomerClient();\n\n  $customer = $client->search(1, 0, [\"email\" => \"my.user@example.com\"]);\n?>\n```\n\n----------------------------------------\n\nTITLE: Configuring Integration Identifiers in MercadoPago Node.js SDK\nDESCRIPTION: Shows how to configure platform, integrator, and corporation IDs using the MercadoPago Node.js SDK. Replace the placeholder values with actual identification codes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integration-identification.es.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmercadopago.configure({\n    platform_id: 'PLATFORM_ID',\n    integrator_id: 'INTEGRATOR_ID',\n    corporation_id: 'CORPORATION_ID'\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Customer Cards with Ruby\nDESCRIPTION: Retrieves the list of customer cards using the Ruby SDK. It calls the `list` method on the `card` resource with the customer ID to retrieve the cards.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/get-cards-list.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ncards_response = sdk.card.list(customer_id)\ncards = cards_response[:response]\n```\n\n----------------------------------------\n\nTITLE: CSV Sample File with Mandatory Data for Debts\nDESCRIPTION: An example CSV file containing only the mandatory fields for uploading debts, excluding any conditional or optional information, as required by MercadoPago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/format-specifications.en.md#2025-04-18_snippet_5\n\nLANGUAGE: csv\nCODE:\n```\next2024030614313,521998672,,20250312,549.57,,,,,,,,,,\n```\n\n----------------------------------------\n\nTITLE: MercadoPago API Payment Integration in Java\nDESCRIPTION: Provides a Java-based implementation for integrating with MercadoPago API to capture payments. It demonstrates setting up PaymentClient and crafting a PaymentCreateRequest with necessary sub_merchant details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subcredenciadores-payfacs/integration-update.en.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.mercadopago;\n\nimport com.mercadopago.client.MercadoPagoClient;\nimport com.mercadopago.client.common.IdentificationRequest;\nimport com.mercadopago.client.common.SubMerchant;\nimport com.mercadopago.client.payment.*;\nimport com.mercadopago.core.MPRequestOptions;\nimport com.mercadopago.exceptions.MPApiException;\nimport com.mercadopago.exceptions.MPException;\nimport com.mercadopago.net.Headers;\nimport com.mercadopago.resources.payment.Payment;\n\nimport java.math.BigDecimal;\nimport java.util.HashMap;\nimport java.util.UUID;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        HashMap<String, String> headers = new HashMap<>();\n        headers.put(Headers.IDEMPOTENCY_KEY, UUID.randomUUID().toString());\n        MPRequestOptions requestOptions = MPRequestOptions\n            .builder()\n            .customHeaders(headers)\n            .accessToken(\"YOUR_ACCESS_TOKEN\").build();\n\n        PaymentClient client = new PaymentClient();\n        PaymentCreateRequest createRequest = PaymentCreateRequest.builder()\n            .transactionAmount(new BigDecimal(100))\n            .description(\"test_card\")\n            .paymentMethodId(\"visa\")\n            .token(\"c83cff0fe27a67ae53054fe8716b18bc\")\n            .installments(1)\n            .forwardData(PaymentForwardDataRequest.builder()\n                .subMerchant(SubMerchant.builder()\n                    .subMerchantId(\"345678\")\n                    .mcc(\"1234\")\n                    .country(\"BR\")\n                    .addressDoorNumber(\"123\")\n                    .zip(\"12345678\")\n                    .documentNumber(\"12345678901\")\n                    .city(\"Sao Paulo\")\n                    .addressStreet(\"Street\")\n                    .legalName(\"Business\")\n                    .regionCodeIso(\"SP\")\n                    .regionCode(\"SP\")\n                    .documentType(\"CPF\")\n                    .phone(\"1234567890\")\n                    .url(\"www.nomedofacilitador.com.br\").build()).build())\n            .payer(PaymentPayerRequest.builder()\n                .email(\"test_user_61213998@testuser.com\").build()).build();\n\n        try {\n            Payment payment = client.create(createRequest, requestOptions);\n            System.out.println(payment.getId());\n        } catch (MPApiException ex) {\n            System.out.printf(\n                \"MercadoPago Error. Status: %s, Content: %s%n\",\n                ex.getApiResponse().getStatusCode(), ex.getApiResponse().getContent());\n        } catch (MPException ex) {\n            ex.printStackTrace();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago Ruby SDK\nDESCRIPTION: This snippet demonstrates how to create a payment using the Mercado Pago Ruby SDK. It requires the mercadopago gem. It creates a payment request with transaction details, including amount, token, and payer information, and sends it to the Mercado Pago API using the payment.create method.  It configures custom headers to include the idempotency key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.es.md#2025-04-18_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_data = {\n transaction_amount: params[:transactionAmount].to_f,\n token: params[:token],\n description: params[:description],\n installments: params[:installments].to_i,\n payment_method_id: params[:paymentMethodId],\n payer: {\n   email: params[:email],\n   identification: {\n     type: params[:identificationType],\n     number: params[:identificationNumber]\n   }\n }\n}\n \npayment_response = sdk.payment.create(payment_data, custom_request_options)\npayment = payment_response[:response]\n \nputs payment\n \n\n```\n\n----------------------------------------\n\nTITLE: Activating Automatic Report Generation using PHP\nDESCRIPTION: This PHP code snippet demonstrates how to use the Requests library to send a POST request to the Mercado Pago API for activating report generation. It includes the appropriate headers required for the request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.es.md#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\\ninclude('vendor/rmccue/requests/library/Requests.php');\\nRequests::register_autoloader();\\n$headers = array(\\n    'accept' => 'application/json',\\n    'content-type' => 'application/json',\\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\\n);\\n$response = Requests::post('https://api.mercadopago.com/v1/account/release_report/schedule', $headers);\n```\n\n----------------------------------------\n\nTITLE: Generating Error Report in CSV for Mercado Pago Debt Processing\nDESCRIPTION: This CSV snippet demonstrates the format of an error report for failed or partially processed debt entries. It includes the line number, reference, and a detailed error description.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/format-specifications.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\n4,ext2024030615504,E008:Due last date must be after today\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Data in Go using MercadoPago SDK\nDESCRIPTION: Example of updating customer information such as email, name, phone, identification, and address details using the MercadoPago Go SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/modify-customer.en.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/customer\"\n)\n\nfunc main() {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := customer.NewClient(cfg)\n\n\trequest := customer.Request{\n\t\tEmail: \"user@user.com\",\n\t\tFirstName: \"John\",\n\t\tLastName: \"Wagner\",\n\t\tDefaultAddress: \"Casa\",\n\t\tPhone: &customer.PhoneRequest{\n\t\t\tAreaCode: \"11\",\n\t\t\tNumber: \"001234567\",\n\t\t},\n\t\tIdentification: &customer.IdentificationRequest{\n\t\t\tType: \"CPF\",\n\t\t\tNumber: \"12341234\",\n\t\t},\n\t\tAddress: &customer.AddressRequest{\n\t\t\tZipCode: \"52\",\n\t\t\tStreetName: \"Av. das Nações Unidas\",\n\t\t\tStreetNumber: \"2\",\n\t\t},\n\t\tDescription: \"Updated Description\",\n\t\tDefaultCard: \"None\",\n\t}\n\n\tresource, err := client.Update(context.Background(), \"<CUSTOMER_ID>\", request)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Payment Response in JSON\nDESCRIPTION: The JSON structure represents a response to a payment reserve authorization. It includes the payment ID, status indicating the payment is authorized, and details highlighting the payment is pending capture. Until captured, reserved payments cannot be utilized.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/make-value-reserve.en.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\"id\": PAYMENT_ID,\n...\n\"status\": \"authorized\",\n\"status_detail\": \"pending_capture\",\n...\n\"captured\": false,\n...\n}\n\n```\n\n----------------------------------------\n\nTITLE: JavaScript to Listen for iFrame Message Event\nDESCRIPTION: This JavaScript code snippet listens for a message event from the iframe that indicates the completion of the authentication challenge. If the challenge is complete, it navigates the user to a 'congrats' page.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-bigmerchants.en.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener(\"message\", (e) => {\n     if (e.data.status === \"COMPLETE\") {\n         window.open(\"congrats.html\");\n     }\n});\n```\n\n----------------------------------------\n\nTITLE: QR Code Data Generation\nDESCRIPTION: This snippet provides the data required to generate a QR code with an open amount.  This data needs to be used to create the QR code image that the user will scan.  The data is a string formatted in a specific way expected by Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/interoperable-accepting-flow-test.es.md#2025-04-18_snippet_0\n\nLANGUAGE: qr_data\nCODE:\n```\n\"00020101021143530016com.mercadolibre0129https://mpago.la/pos/2602959950150011273265943055204970053030325802AR5917Prueba Perfumeria6004CABA63047720\"\n```\n\n----------------------------------------\n\nTITLE: Changing Subscription Amount with PUT Request\nDESCRIPTION: Enables modification of an existing subscription's amount by sending a PUT request with updated transaction amount and currency details to the preapproval endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/subscription-management.en.md#2025-04-18_snippet_1\n\nLANGUAGE: rest\nCODE:\n```\nPUT /preapproval/{id}\n{\n    \"auto_recurring\": {\n        \"transaction_amount\": \"new_amount\",\n        \"currency_id\": \"currency_code\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Payment Query Intent Handler\nDESCRIPTION: Java method to create and send a payment query intent to RDCPass. Includes package configuration and transaction ID handling.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-payment-query.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: android\nCODE:\n```\npublic void shareRDCPass(String total, String intent) { \n\ttry { \n\t\tIntent sharingIntent = new Intent(intent); \n\t\tsharingIntent.setClassName(\"redelcom.cl.rdcpass\", \"redelcom.cl.rdcpass.MainActivity\"); \n\t\tsharingIntent.putExtra(\"packageName\", getPackageName()); \n\t\tsharingIntent.putExtra(\"className\", getClass().toString().split(\" \")[1]); \n\t\tsharingIntent.putExtra(\"userTransactionId\", \"DEMO1234\"); \n\t\tstartActivity(sharingIntent); \n\t} catch (Exception e) { \n\t\te.printStackTrace(); \n\t} \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Notifications for Reports in JSON\nDESCRIPTION: JSON array example showing how to configure email recipients who will receive notifications when reports are ready for download.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.es.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\"example@email.com\", \"john@example.com\"]\n```\n\n----------------------------------------\n\nTITLE: Capturing Device Information in Java for Android\nDESCRIPTION: Shows methods to obtain device information in Java using DeviceSDK. Available formats include Serializable Device Object, Map, and JSON string.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.en.md#2025-04-18_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nDevice device = DeviceSDK.getInstance().getInfo() // Returns a Serializable Device Object\nMap deviceMap = DeviceSDK.getInstance().getInfoAsMap()  // Returns a Map<String, Object>\nString jsonString = DeviceSDK.getInstance().getInfoAsJsonString() // Returns a JSON String\n```\n\n----------------------------------------\n\nTITLE: Free-form Receipt Printing with RedelCom API using cURL\nDESCRIPTION: This cURL command sends a POST request to print a free-form receipt using the RedelCom API. It requires authentication headers and a JSON payload containing the formatted print text and terminal ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/api-print-receipts.en.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl  -X POST \\ \n 'https://api-dev.redelcom.cl:20010/v2/impresion' \\\n--header 'X-Authentication: clientId;secret' \\\n--header 'Content-Type: application/json' \\\n--data '{\n   \"printText\": \"\"{w}   Roberta Pizzas       {/w} {br}      PUB RESTAURANT {br}       Vina del mar.Chile{br}{br}{w}  ADICION        MESA   {br}    1763            5          {/w}{br}     18/04/2023  T:1  9:26 pm{br}Atendido por :ASDRUBAL      ( 3){br}Invitados    :  5{br}--- Detalle del Consumo --------{br}Producto {s}(Cant x Precio){/s}        Total{br}--------------------------------{b}{br}RUCULA                   $10,900{br}GAMBA                    $11,700{br}BOTURA                   $11,900{br} {br} {br}{pdf417}www.google.cl{/pdf417}{br}\"\n\",\n   \"terminalId\": \"3127\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Form with HTML\nDESCRIPTION: This HTML form is designed to capture user payment and personal information for PSE transactions. It includes fields for zip code, address, neighborhood, city, and more, along with hidden inputs for transaction amount and description.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pse-avanza.en.md#2025-04-18_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<form id=\"form-checkout\" action=\"/process_payment\" method=\"post\">\n   ... \n</form>\n```\n\n----------------------------------------\n\nTITLE: Payer Token Response Format\nDESCRIPTION: Expected JSON response structure containing the generated payer token after successful API request\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/create-payer-token.es.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"payer_token\": \"abcdef1e23f4567d8e9123eb6591ff68df74c57930551ed980239f4538a7e530\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IPN URL with Query Parameter in Markdown\nDESCRIPTION: Example of how to add a query parameter to the IPN endpoint URL for identifying multiple seller accounts. This is shown as a note in Markdown format.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/ipn.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> NOTE\n>\n> Note\n>\n> If you need to identify multiple accounts, you can add the parameter `?cliente=(sellersname)` to the endpoint URL to identify the sellers.\n```\n\n----------------------------------------\n\nTITLE: Settlement Report CSV Sample Data\nDESCRIPTION: Sample CSV data showing settlement report fields including transaction details, amounts, fees and metadata.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: csv\nCODE:\n```\nEXTERNAL_REFERENCE;SOURCE_ID;USER_ID;PAYMENT_METHOD_TYPE;PAYMENT_METHOD;SITE;TRANSACTION_TYPE;TRANSACTION_AMOUNT;TRANSACTION_CURRENCY;TRANSACTION_DATE;FEE_AMOUNT;SETTLEMENT_NET_AMOUNT;SETTLEMENT_CURRENCY;SETTLEMENT_DATE;REAL_AMOUNT;COUPON_AMOUNT;METADATA;MKP_FEE_AMOUNT;FINANCING_FEE_AMOUNT;SHIPPING_FEE_AMOUNT;TAXES_AMOUNT;INSTALLMENTS;ORDER_ID;SHIPPING_ID;SHIPMENT_MODE;PACK_ID\n2112818453;5067634447;123456789;account_money;account_money;MLB;SETTLEMENT;79.00;BRL;2019-08-11T22:20:19.000-04:00;-8.85;70.15;BRL;2019-08-11T22:20:19.000-04:00;70.15;0.00;[{}];-8.85;0.00;0.00;0.00;1;2112818453;28067695419;me1;2E+15\n```\n\n----------------------------------------\n\nTITLE: Security Script Implementation\nDESCRIPTION: HTML script tag implementation for adding Mercado Pago's security features to different website sections.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.es.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"home\"></script>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Events for Marketplace Sellers Sales Reports using cURL\nDESCRIPTION: This cURL command retrieves all events for marketplace sellers sales reports. It requires an authorization token in the request header.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/queries-and-validations.en.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request GET 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/events' \\\n--header 'Authorization: Bearer {{TOKEN}}'\n```\n\n----------------------------------------\n\nTITLE: Associating Google Ads Tag with Checkout Pro Preference in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to associate a Google Ads conversion tag with a Checkout Pro preference. The 'CONVERSION_ID' and 'CONVERSION_LABEL' should be replaced with actual values from the Google Ads account.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  // Criar um objeto preferencia\n  $preference = new MercadoPago\\Preference();\n \n  // Associar sua tag do Google ads\n  $preference->tracks = array(\n    array(\n        'type' => 'google_ad',\n        'values' => array(\n          'conversion_id' => 'CONVERSION_ID',\n          'conversion_label' => 'CONVERSION_LABEL'\n        )\n    )\n  );\n\n  ...\n  // Salvar e postar a preferencia\n  $preference->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Inicializando MercadoPagoDevicesSDK en Swift\nDESCRIPTION: Código para inicializar el SDK de dispositivos de Mercado Pago en una aplicación iOS usando Swift. Se recomienda ejecutarlo en el evento didFinishLaunchingWithOptions del AppDelegate.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.es.md#2025-04-18_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport MercadoPagoDevicesSDK\n...\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        ...        \n        MercadoPagoDevicesSDK.shared.execute()\n        ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago API using cURL (MLM)\nDESCRIPTION: This cURL snippet (specific to MLM) demonstrates how to create a payment using the Mercado Pago API. It sends a POST request to the /v1/payments endpoint with JSON data containing transaction details, including the X-Idempotency-Key in the headers and payer identification without the 'type' field.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-cards.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n    -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n    'https://api.mercadopago.com/v1/payments' \\\n    -d '{\n          \"transaction_amount\": 100,\n          \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n          \"description\": \"Blue shirt\",\n          \"installments\": 1,\n          \"payment_method_id\": \"visa\",\n          \"issuer_id\": 310,\n          \"payer\": {\n            \"email\": \"PAYER_EMAIL_HERE\",\n            \"identification\": {\n                \"number\": 19119119100\n            }\n          }\n    }'\n\n```\n\n----------------------------------------\n\nTITLE: Payment Form HTML with CSS Styling\nDESCRIPTION: Complete HTML form with styled containers for capturing card payment details, including card number, expiration, security code, and other required fields\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.es.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  #form-checkout {\n    display: flex;\n    flex-direction: column;\n    max-width: 600px;\n  }\n\n  .container {\n    height: 18px;\n    display: inline-block;\n    border: 1px solid rgb(118, 118, 118);\n    border-radius: 2px;\n    padding: 1px 2px;\n  }\n</style>\n<form id=\"form-checkout\">\n  <div id=\"form-checkout__cardNumber\" class=\"container\"></div>\n  <div id=\"form-checkout__expirationDate\" class=\"container\"></div>\n  <div id=\"form-checkout__securityCode\" class=\"container\"></div>\n  <input type=\"text\" id=\"form-checkout__cardholderName\" />\n  <select id=\"form-checkout__issuer\"></select>\n  <select id=\"form-checkout__installments\"></select>\n  <select id=\"form-checkout__identificationType\"></select>\n  <input type=\"text\" id=\"form-checkout__identificationNumber\" />\n  <input type=\"email\" id=\"form-checkout__cardholderEmail\" />\n\n  <button type=\"submit\" id=\"form-checkout__submit\">Pagar</button>\n  <progress value=\"0\" class=\"progress-bar\">Cargando...</progress>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Install Expo-Web-Browser with Yarn\nDESCRIPTION: This command installs the expo-web-browser package using yarn. This package provides access to the native browser (Custom Tabs on Android, Safari View Controller on iOS) and handles redirection.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-expo-go.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: yarn\nCODE:\n```\nyarn add expo-web-browser\n```\n\n----------------------------------------\n\nTITLE: Generating QR Order Response with Pix Configuration\nDESCRIPTION: Example of a QR order response for a Mercado Pago account with Pix key configured, showing Pix-specific data structure\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/qr-dynamic-integration.es.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"qr_data\": \"00020101021226940014BR.GOV.BCB.PIX2572pix-qr.mercadopago.com/instore/o/v2/fdf9ece0-6137-4e1e-a49d-94f55ec9eee25204000053039865802BR5925FELIPE AAAAAA AAAAA 6009SAO PAULO62070503***6304B61D\"\n}\n```\n\n----------------------------------------\n\nTITLE: Launching URLs with Flutter Custom Tabs\nDESCRIPTION: This Dart code snippet demonstrates how to launch URLs using the `flutter_custom_tabs` package in a Flutter application. It defines a `MyApp` widget that includes a `TextButton` to trigger the URL launch.  The `_launchURL` function utilizes `launch` from the package to open a specified URL, customizing the appearance of the Custom Tabs using `CustomTabsOption` and `SafariViewControllerOption`. It also includes error handling in case the browser app is not installed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/flutter.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_custom_tabs/flutter_custom_tabs.dart';\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        body: Center(\n          child: TextButton(\n            child: const Text('Show Flutter homepage'),\n            onPressed: () => _launchURL(context),\n          ),\n        ),\n      ),\n    );\n  }\n\n  void _launchURL(BuildContext context) async {\n    try {\n      await launch(\n        'https://flutter.dev',\n        customTabsOption: CustomTabsOption(\n          toolbarColor: Theme.of(context).primaryColor,\n          enableDefaultShare: true,\n          enableUrlBarHiding: true,\n          showPageTitle: true,\n          animation: CustomTabsAnimation.slideIn(),\n          // or user defined animation.\n          animation: const CustomTabsAnimation(\n            startEnter: 'slide_up',\n            startExit: 'android:anim/fade_out',\n            endEnter: 'android:anim/fade_in',\n            endExit: 'slide_down',\n          ),\n          extraCustomTabs: const <String>[\n            // ref. https://play.google.com/store/apps/details?id=org.mozilla.firefox\n            'org.mozilla.firefox',\n            // ref. https://play.google.com/store/apps/details?id=com.microsoft.emmx\n            'com.microsoft.emmx',\n          ],\n        ),\n        safariVCOption: SafariViewControllerOption(\n          preferredBarTintColor: Theme.of(context).primaryColor,\n          preferredControlTintColor: Colors.white,\n          barCollapsingEnabled: true,\n          entersReaderIfAvailable: false,\n          dismissButtonStyle: SafariViewControllerDismissButtonStyle.close,\n        ),\n      );\n    } catch (e) {\n      // An exception is thrown if browser app is not installed on Android device.\n      debugPrint(e.toString());\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Preference with Different Unit Price in Python\nDESCRIPTION: Similar to the previous snippet, this code also creates a preference using the Mercado Pago SDK but with a different unit price for the item. It follows the same structure as the previous snippet, initializing the SDK and constructing the preference data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/preferences.en.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Mercado Pago SDK\nimport mercadopago\n# Add Your credentials\nsdk = mercadopago.SDK(\"PROD_ACCESS_TOKEN\")\n# Create a preference object\npreference_data = {\n    \"items\": [\n        {\n            \"title\": \"My Item\",\n            \"quantity\": 1,\n            \"unit_price\": 75\n        }\n    ]\n}\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Comparing MercadoPago API Parameters (Markdown Table)\nDESCRIPTION: A markdown table that maps parameters from the collections/notifications API to the v1/payments API. It includes field names, data types, and notes on fields that don't have direct equivalents.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/hidden-ipn-deprecated-collections.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| collections/notifications | v1/payments |\n|:---:|:---:|\n| `collection.id` | `id` (string) |\n| `collection.date_created` | `date_created` (datetime) |\n| `collection.date_approved` | `date_approved` (datetime) |\n| `collection.money_release_date` | `money_release_date` (datetime) |\n| `collection.last_modified` | `date_last_updated` (datetime) |\n| `collection.payer.id` | `payer.id` (string) |\n| `collection.payer.first_name` | `payer.first_name` (string) |\n| `collection.payer.last_name` | `payer.last_name` (string) |\n| `collection.payer.phone.area_code` | `payer.phone.area_code` (string) |\n| `collection.payer.phone.number` | `payer.phone.number` (string) |\n| `collection.payer.phone.extension` | `payer.phone.extension` (string) |\n| `collection.payer.identification.type` | `payer.identification.type` (string) |\n| `collection.payer.identification.number` | `payer.identification.number` (string) |\n| `collection.payer.email` | `payer.email` (string) |\n| `collection.payer.nickname` | Não existe este campo em _v1/payments_. |\n| `collection.order_id` | `order.id` (string) |\n| `collection.external_reference` | `external_reference` (string) |\n| `collection.merchant_order_id` | `order.id` (string) |\n| `collection.reason` | `description` (string) |\n| `collection.currency_id` | `currency_id` (string) |\n| `collection.transaction_amount` | `transaction_amount` (float64) |\n| `collection.net_received_amount` | `transaction_details.net_received_amount` (float64) |\n| `collection.total_paid_amount` | `transaction_details.total_paid_amount` (float64) |\n| `collection.shipping_cost` | `shipping_amount` (float64) |\n| `collection.coupon_amount` | `coupon_amount` (float64) |\n| `collection.coupon_fee` | `fee_details.amount` (float64). Se encontra neste campo quando o tipo de fee é `coupon_fee` e o pagamento está em estado de `approved`. Exemplo: em _v1/payments_ teremos:<br>\"fee_details\": [{<br>\"type\": \"coupon_fee\"<br>\"amount\": 10 <br>}] |\n| `collection.finance_fee` | `fee_details.amount` (float64). Se encontra neste campo quando o tipo de fee é `finance_fee` e o pagamento está em estado de `approved`. Exemplo: em _v1/payments_ teremos:<br>\"fee_details\": [{<br>\"type\": \"finance_fee\"<br>\"amount\": 10 <br>}] |\n| `collection.discount_fee` | `fee_details.amount` (float64). Se encontra neste campo quando o tipo de fee é `discount_fee` e o pagamento está em estado de `approved`. Exemplo: em _v1/payments_ teremos:<br>\"fee_details\": [{<br>\"type\": \"'discount_fee'\"<br>\"amount\": 10 <br>}] |\n| `collection.marketplace_fee` | `fee_details.amount` (float64). Se encontra neste campo quando o tipo de fee é `application_fee` e o pagamento está em estado de `approved`. Exemplo: em _v1/payments_ teremos:<br>\"fee_details\": [{<br>\"type\": \"application_fee\"<br>\"amount\": 10 <br>}] |\n| `collection.coupon_id` | `coupon_id` (string) |\n| `collection.status` | `status` (string) |\n| `collection.status_detail` | `status_detail` (string) |\n| `collection.installments` | `installments` (integer) |\n| `collection.issuer_id` | `issuer_id` (string) |\n| `collection.installment_amount` | `transaction_details.installment_amount` (float64) |\n| `collection.deferred_period` | Não existe em _v1/payments_, sempre se informa vazio. |\n| `collection.payment_type` | `payment_type_id` (string) |\n| `collection.payment_method_id` | `payment_method_id` (string) |\n| `collection.marketplace` | Não existe em _v1/payments_.|\n| `collection.operation_type` | `operation_type` (string) |\n| `collection.transaction_order_id` | Não existe em _v1/payments_, sempre se informa vazio. |\n| `collection.statement_descriptor` | `statement_descriptor` (string) |\n| `collection.cardholder.name` | `card.cardholder.name` (string) |\n| `collection.cardholder.identification.type` | `card.cardholder.identification.type` (string) |\n| `collection.cardholder.identification.number` | `card.cardholder.identification.number` (string) |\n| `collection.authorization_code` | `authorization_code` (string) |\n| `collection.last_four_digits` | `card.last_four_digits` (string) |\n| `collection.deduction_schema` | `deduction_schema` (string) |\n| `collection.refunds` | `refunds` (array) |\n| `collection.refunds.id` | `refunds.id` (string) |\n| `collection.refunds.gtw_refund_id` | `refunds.gtw_refund_id` (string) |\n| `collection.refunds.collection_id` | `refunds.collection_id` (string) |\n| `collection.refunds.movement_id` | `refunds.collector_movement_id` (string) |\n| `collection.refunds.metadata`  | `refunds.metadata` (object) |\n| `collection.refunds.amount` | `refunds.amount` (float64) |\n| `collection.refunds.source` | `refunds.source` (string) |\n| `collection.refunds.date_created` | `refunds.date_created` (datetime) |\n| `collection.amount_refunded` | `transaction_amount_refunded` (float64) |\n| `collection.site_id` | Não existe em _v1/payments_. |\n| `collection.last_modified_by_admin` | Não existe em _v1/payments_. |\n| `collection.api_version` | `api_version` (string) |\n| `collection.concept_id` | Não existe em _v1/payments_. |\n| `collection.concept_amount` | Não existe em _v1/payments_. |\n| `collection.collector.id` | `collector_id` (int64) |\n| `collection.collector.nickname` | Não existe em _v1/payments_. |\n```\n\n----------------------------------------\n\nTITLE: Not Found Error Response (Status 404)\nDESCRIPTION: This JSON snippet represents an error response with a status code of 404 (Not Found). This indicates that the advanced payment with the specified ID was not found. The 'message' field provides a description of the error.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/refund-partial-amount.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"status\": \"404\",\n   \"error\":  \"not_found\",\n   \"message\": \"Advanced payment not found.\",\n   \"cause\": [\n    {\n      \"code\":\"404002\",\n      \"message\": \"Advanced payment not found\",\n      \"data\": null\n    }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK in Java\nDESCRIPTION: Create a class that extends Application and initialize the Mercado Pago SDK with necessary configurations in Java.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/first-steps.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class MainApplication extends Application {\n\n @Override\n public void onCreate() {\n   super.onCreate();\n   MPConfig config = new MPConfigBuilder(this, \"123456789\")\n     .withBluetoothConfig()\n     .withBluetoothUIConfig()\n     .build();\n   MPManager.INSTANCE.initialize(this, config);\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Travel/Tourism Credit Card Payment with Mercado Pago API using cURL\nDESCRIPTION: This cURL request demonstrates how to create a payment for travel/tourism using Mercado Pago's API. It includes travel-specific details such as passenger information, route details, departure and arrival times, along with standard payment information like amount, installments, and payer data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/credit-card-travels.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'x-platform-id: {{PLATFORM_ID proporcionado por el equipo de Partners}}' \\\n--header 'Authorization: Bearer {{ACCESS_TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"transaction_amount\": 150.34,\n    \"installments\": 1,\n    \"statement_descriptor\": \"Tienda del vendedor\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": {{ID de su cuenta Mercado Pago referente a su plataforma}},\n    \"payment_method_id\": \"{{payment_method_id}}\",\n    \"token\":  \"{{card_token_id}}\",\n    \"external_reference\": \"Identificador de la plataforma\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"description\": \"Fecha (en formato dd/mm/aaaa) | Descripción del pasaje\",\n    \"payer\": {\n        \"first_name\": \"Nombre. Ejemplo: John\",\n        \"last_name\": \"Apellido. Ejemplo: Jones\",\n        \"email\": \"Ejemplo: test_user_1677282147@testuser.com\",\n        \"identification\": {\n            \"type\": \"Tipo de documento.\",\n            \"number\": \"Número del documento. Ejemplo: 19119119100\"\n        },\n        \"address\": {\n            \"zip_code\": \"Código postal. Ejemplo: 06233-200\",\n            \"street_name\": \"Nombre de la calle. Ejemplo: Av. das Nações Unidas\",\n            \"street_number\": \"Número. Ejemplo: 3003\",\n            \"neighborhood\": \"Barrio. Ejemplo: Bonfim\",\n            \"city\": \"Ciudad. Ejemplo: Osasco\",\n            \"federal_unit\": \"UF. Ejemplo: SP\"\n        }\n    },\n    \"additional_info\": {\n        \"referral_url\": \"URL de referencia. Ejemplo: www.sellertest123.com\",\n        \"drop_shipping\": false,\n        \"delivery_promise\": \"2022-11-20\",\n        \"contrated_plan\": \"premium\",\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"title\": \"Fecha (en formato dd/mm/aaaa) | Descripción del pasaje\",\n                \"description\": \"Fecha (en formato dd/mm/aaaa) | Descripción del pasaje\",\n                \"picture_url\": \"Ejemplo: www.google.com\",\n                \"category_id\": \"travels\",\n                \"category_descriptor\": {\n                    \"passenger\": {\n                        \"first_name\": \"Nombre. Ejemplo: John\",\n                        \"last_name\": \"Apellido. Ejemplo: Jones\"\n                    },\n                    \"route\": {\n                        \"departure\": \"Ejemplo: Osasco\",\n                        \"destination\": \"Ejemplo: Buenos Aires\",\n                        \"departure_date_time\": \"2023-03-12T12:58:41.425-04:00\",\n                        \"arrival_date_time\": \"2023-03-14T12:58:41.425-04:00\",\n                        \"company\": \"Companhia\"\n                    }\n                },\n                \"quantity\": 1,\n                \"unit_price\": 150.34\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nombre. Ejemplo: John\",\n            \"last_name\": \"Apellido. Ejemplo: Jones\",\n            \"is_prime_user\": \"1\",\n            \"is_first_purchase_online\": \"1\",\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"Código de área. Ejemplo: 11\",\n                \"number\": \"Número. Ejemplo: 987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"Codigo postal. Ejemplo: 06233-200\",\n                \"street_name\": \"Nombre de la calle. Ejemplo: Av. das Nações Unidas\",\n                \"street_number\": \"Número. Ejemplo: 3003\"\n            },\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"0\",\n            \"pick_up_on_seller\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"Código postal. Ejemplo: 06233-200\",\n                \"street_name\": \"Nombre de la calle. Ejemplo: Av. das Nações Unidas\",\n                \"street_number\": \"Número. Ejemplo: 3003\",\n                \"floor\": \"Piso (si es un apartamento). Ejemplo: Segundo\",\n                \"apartment\": \"Número del apartamento (si es un apartamento). Ejemplo: 93\"\n            }\n        }\n     }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Mercado Pago Integration Solutions and SAQ Types in Markdown\nDESCRIPTION: Markdown table showing the Self-Assessment Questionnaire (SAQ) types required for different Mercado Pago integration solutions, including Checkout Pro, Web Tokenize Checkout, and Checkout Transparente.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/pci-v2.en.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n**Solution** | **SAQ**\n------ | ------\nCheckout Pro | A\nWeb Tokenize Checkout | A-EP\nCheckout Transparente | A\n```\n\n----------------------------------------\n\nTITLE: Capturing Device Information in Android (Java)\nDESCRIPTION: These Java methods demonstrate how to obtain device information using the DeviceSDK in Android. They return the data in formats such as Serializable Object, Map, or JSON String.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.en.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nDevice device = DeviceSDK.getInstance().getInfo() // Returns a Serializable Device Object\nMap deviceMap = DeviceSDK.getInstance().getInfoAsMap()  // Returns a Map<String, Object>\nString jsonString = DeviceSDK.getInstance().getInfoAsJsonString() // Returns a JSON String\n```\n\n----------------------------------------\n\nTITLE: Creando contenedor para botón de pago en HTML\nDESCRIPTION: Este código HTML crea un contenedor donde se renderizará el botón de pago de Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-mp-wallet.es.md#2025-04-18_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"wallet_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Intent Filter for Recharge Payments - Android Manifest\nDESCRIPTION: Adds an intent-filter to the AndroidManifest.xml to enable the application to handle text data sharing for recharge payments. This configuration is required for payment processing functionality.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-pay-telecommunications.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter> \n    <action android:name=\"android.intent.action.SEND\" /> \n    <category android:name=\"android.intent.category.DEFAULT\" /> \n    <data android:mimeType=\"text/*\" /> \n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Processing Payments with Mercado Pago in Java\nDESCRIPTION: This Java snippet demonstrates processing a payment through the Mercado Pago SDK, requiring dependencies like MercadoPago SDK, PaymentClient, and necessary data classes. It covers setting transaction details and generating a payment request. The code outputs the payment status for further operations. Input data is typically fetched from a structured request object.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-serverside.en.md#2025-04-18_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nMercadoPago.SDK.setAccessToken(\"ENV_ACCESS_TOKEN\");\n//...\nPayment payment = new Payment();\npayment.setTransactionAmount(100f)\n       .setToken(token)\n       .setDescription(\"Blue shirt\")\n       .setInstallments(installments)\n       .setPaymentMethodId(payment_method_id)\n       .setIssuerId(issuer_id)\n       .setPayer(new Payer()\n         .setEmail(\"john@yourdomain.com\"));\n// Guarda y postea el pago\npayment.save();\n//...\n// Imprime el estado del pago\nSystem.out.println(payment.getStatus());\n//...\n```\n\nLANGUAGE: Java\nCODE:\n```\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest paymentCreateRequest =\n  PaymentCreateRequest.builder()\n      .transactionAmount(request.getTransactionAmount())\n      .token(request.getToken())\n      .installments(request.getInstallments())\n      .paymentMethodId(request.getPaymentMethodId())\n      .payer(\n          PaymentPayerRequest.builder()\n              .email(request.getPayer().getEmail())\n              .identification(\n                  IdentificationRequest.builder()\n                      .type(request.getPayer().getIdentification().getType())\n                      .number(request.getPayer().getIdentification().getNumber())\n                      .build())\n              .build())\n      .build();\n\nclient.create(paymentCreateRequest);\n```\n\n----------------------------------------\n\nTITLE: Defining future product availability for a specific country (MLA)\nDESCRIPTION: This snippet defines the future availability of Checkout Bricks products for Argentina (MLA).  It includes information such as the title, description, and card details for each available brick, including specific links and descriptions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/landing.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n------------\n----[mla]----\n\n---\nfuture_product_avaible:\n - title: Bricks\n - description: Conheça todos os módulos do Checkout Bricks e as suas disponibilidades.\n - card_avaible: true\n - card_icon: Pay\n - card_title: Payment Brick\n - card_description: Ofereça diversos métodos de pagamento para os clientes escolherem, com a capacidade de salvar dados do cartão para compras futuras. Teste a demonstração do Brick antes de integrá-lo.\n - card_button: /developers/pt/docs/checkout-bricks/payment-brick/introduction\n - card_buttonDescription: Saiba mais\n - card_pillText: DISPONÍVEL\n - card_linkAvailable: true\n - card_linkProof: /developers/pt/live-demo/payment-brick\n - card_linkProofDescription: Acessar demonstração\n - card_avaible: true\n - card_icon: Wallet\n - card_title: Wallet Brick\n - card_description: Vincule a conta Mercado Pago e permita pagamentos registrados. Teste a demonstração do Brick antes de integrá-lo.\n - card_button: /developers/pt/docs/checkout-bricks/wallet-brick/introduction\n - card_buttonDescription: Saiba mais\n - card_pillText: DISPONÍVEL\n - card_linkAvailable: true\n - card_linkProof: /developers/pt/live-demo/wallet-brick\n - card_linkProofDescription: Acessar demonstração\n - card_avaible: true\n - card_icon: Card\n - card_title: Card Payment Brick\n - card_description: Ofereça pagamentos com cartão de crédito e débito. Teste a demonstração do Brick antes de integrá-lo.\n - card_button: /developers/pt/docs/checkout-bricks/card-payment-brick/introduction\n - card_buttonDescription: Saiba mais\n - card_pillText: DISPONÍVEL\n - card_linkAvailable: true\n - card_linkProof: /developers/pt/live-demo/card-payment-brick\n - card_linkProofDescription: Acessar demonstração\n - card_avaible: true\n - card_icon: Loading\n - card_title: Status Screen Brick\n - card_description: Informe os clientes dos resultados do processo de compra após efetuar o pagamento. Teste a demonstração do Brick antes de integrá-lo.\n - card_button: /developers/pt/docs/checkout-bricks/status-screen-brick/introduction\n - card_buttonDescription: Saiba mais\n - card_pillText: DISPONÍVEL\n - card_linkAvailable: true\n - card_linkProof: /developers/pt/live-demo/status-screen-brick\n - card_linkProofDescription: Acessar demonstração\n - card_avaible: true\n - card_icon: User\n - card_title: Brand Brick\n - card_description: Comunique diferentes mensagens relacionadas às formas de pagamento disponíveis via Mercado Pago em sua loja.\n - card_button: /developers/pt/docs/checkout-bricks/brand-brick/introduction\n - card_buttonDescription: Saiba mais\n - card_pillText: DISPONÍVEL\n - card_linkAvailable: true\n - card_linkProof: /developers/pt/live-demo/brand-brick\n - card_linkProofDescription: Acessar demonstração\n - card_avaible: true\n - card_icon: Check\n - card_title: Review & Confirm\n - card_description: Exiba um resumo de todo o processo de compra com as informações mais relevantes, assim os clientes poderão analisar antes de confirmar a compra.\n - card_button: /developers/pt/docs/checkout-bricks/payment-brick/advanced-features/add-confirmation-step\n - card_buttonDescription: Saiba mais\n - card_pillText: DISPONÍVEL\n - card_linkAvailable: false\n - card_linkProof:\n - card_linkProofDescription:\n - card_avaible: false\n - card_icon: User\n - card_title: User Info Brick\n - card_description: Colete os dados dos clientes para deduzir aqueles que serão necessários no processo de compra.\n - card_button:\n - card_buttonDescription:\n - card_pillText: EM BREVE\n - card_linkAvailable: false\n - card_linkProof:\n - card_linkProofDescription:\n - card_avaible: false\n - card_icon: Truck\n - card_title: Shipping Brick\n - card_description: Colete dados de envio dos clientes e exiba as opções de entrega disponíveis, além de seus benefícios.\n - card_button:\n - card_buttonDescription:\n - card_pillText: EM BREVE\n - card_linkAvailable: false\n - card_linkProof:\n - card_linkProofDescription:\n---\n\n```\n\n----------------------------------------\n\nTITLE: Processing IVA in In-Person Payments via Mercado Pago API\nDESCRIPTION: This code shows how to implement IVA tax calculations for in-person transactions using Mercado Pago's QR code payment system. It demonstrates how to include the total IVA amount for all items in the order, with the taxes field containing the specific tax value.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/iva-colombia.es.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PUT \\\n    'https://api.mercadopago.com/instore/qr/seller/collectors/{user_id}/stores/{external_store_id}/pos/{external_pos_id}/orders' \\\n    -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n  \"external_reference\": 12345,\n  \"title\": \"Product order\",\n  \"notification_url\": \"www.yourserver.com\",\n  \"total_amount\": 6000,\n  \"items\": [\n    {\n      \"sku_number\": \"A123K9191938\",\n      \"category\": \"marketplace\",\n      \"title\": \"Item 1\",\n      \"description\": \"Item\",\n      \"unit_price\": 3000,\n      \"quantity\": 2,\n      \"unit_measure\": \"unit\",\n      \"total_amount\": 6000\n    }\n  ],\n  \"taxes\": [\n    {\n      \"value\": 1140,\n      \"type\": \"IVA\"\n    }\n  ],\n  \"sponsor\": {\n    \"id\": 446566691\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Hiding Payment Button in Card Payment Brick (React JSX)\nDESCRIPTION: This snippet shows how to hide the default payment button in the Card Payment Brick using React JSX. It sets the 'hidePaymentButton' property to true in the customization object.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/hide-element.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n   hidePaymentButton: true\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Button Visual Properties in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to customize the visual properties of the Wallet button, including background color and border radius, during rendering.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-appearance.es.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n ...,\n customization: {\n      visual: {\n          buttonBackground: 'black',\n          borderRadius: '16px',\n      },\n },\n}\n```\n\n----------------------------------------\n\nTITLE: CSV Result File for Successful Payment Links\nDESCRIPTION: An example of a result CSV file returned by MercadoPago indicating successful processing of payment links, showing a reference and the corresponding payment link.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/format-specifications.en.md#2025-04-18_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\n\"ext2024030615501\", \"https://mpago.la/2WTWRHT\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Payment Button Theme and Style - General Markets\nDESCRIPTION: Code example showing how to customize the payment button's theme, colors, and dimensions using customStyle properties. Demonstrates setting dark theme, practicality value prop, and custom padding/radius.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-appearance.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n        theme:'dark',\n        customStyle: {\n            valueProp: 'practicality',\n            valuePropColor: 'black',\n            borderRadius: '10px',\n            verticalPadding: '10px',\n            horizontalPadding: '10px',\n        }\n    }\n}\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n    theme:'dark',\n    customStyle: {\n        valueProp: 'practicality',\n        valuePropColor: 'black',\n        borderRadius: '10px',\n        verticalPadding: '10px',\n        horizontalPadding: '10px',\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing React-Native-InAppBrowser using npm\nDESCRIPTION: This snippet demonstrates how to install the React-Native-InAppBrowser package using npm, which is essential for integrating a browser within a React Native application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-cli.en.md#2025-04-18_snippet_0\n\nLANGUAGE: npm\nCODE:\n```\nnpm install react-native-inappbrowser-reborn --save\n```\n\n----------------------------------------\n\nTITLE: Processing PSE Payment with Node.js SDK\nDESCRIPTION: Implementation of PSE payment processing using Mercado Pago's Node.js SDK. This code shows how to create a payment object with transaction details, payer information, and other required fields. It includes proper error handling and uses idempotency key for safe requests.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pse.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nimport { Payment, MercadoPagoConfig } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\nconst payment = new Payment(client);\n\nconst requestOptions = {\n\tidempotencyKey: '<IDEMPOTENCY_KEY>',\n};\n\nconst body = {\n  transaction_amount: 5000,\n  description: 'Product description',\n  payment_method_id: 'pse',\n  callback_url: 'http://www.your-site.com',\n  notification_url: 'http://www.your-site.com',\n  payer: {\n    entity_type: 'individual',\n    email: req.body.email,\n    first_name: req.body.firstName,\n    last_name: req.body.lastName,\n    identification: {\n      type: req.body.identificationType,\n      number: req.body.identificationNumber\n    },\n    address: {\n      zip_code: req.body.zipCode,\n      street_name: req.body.streetName,\n      street_number: req.body.streetNumber,\n      neighborhood: req.body.neighborhood,\n      city: req.body.city,\n      federal_unit: req.body.federalUnit\n    },\n    phone: {\n      area_code: req.body.phoneAreaCode,\n      number: req.body.phoneNumber\n    }\n  },\n  additional_info: {\n    ip_address: '127.0.0.1'\n  },\n  transaction_details: {\n    financial_institution: req.body.financialInstitution\n  }\n};\n\npayment.create({body, requestOptions})\n  .then(function (response) {\n    console.info(response)\n  })\n  .catch(function (error) {\n    console.error(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Invalid Coupon Validation Response\nDESCRIPTION: This JSON response indicates that the coupon is invalid and does not have an associated discount. It returns a status indicating the coupon is invalid with status code 200.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/coupon-validation-responses.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"status\": \"invalid\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inicializando o SDK com Public Key via ES Module\nDESCRIPTION: Carrega o SDK do Mercado Pago utilizando ES Modules e inicializa com a Public Key da conta.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/mp-js-v2.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loadMercadoPago } from \"@mercadopago/sdk-js\";\n\n\nawait loadMercadoPago();\nconst mp = new window.MercadoPago(\"YOUR_PUBLIC_KEY\");\n\n```\n\n----------------------------------------\n\nTITLE: Validation Payment with Small Amount in Mercado Pago\nDESCRIPTION: cURL command for creating a validation payment with a small amount to verify card validity. This approach is used as an alternative when Zero Dollar Auth is not available.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.en.md#2025-04-18_snippet_8\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n   -H 'accept: application/json' \\\n   -H 'content-type: application/json' \\\n   -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n   -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n   'https://api.mercadopago.com/v1/payments' \\\n   -d '{\n         \"transaction_amount\": 100,\n         \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n         \"description\": \"Blue shirt\",\n         \"installments\": 1,\n         \"payment_method_id\": \"visa\",\n         \"issuer_id\": 310,\n         \"payer\": {\n           \"email\": \"PAYER_EMAIL\"\n         }\n   }'\n```\n\n----------------------------------------\n\nTITLE: Account Balance Report Documentation in Markdown\nDESCRIPTION: Markdown documentation detailing how to access, download and use the Account Balance Report in Mercado Pago. The document includes navigation paths, report descriptions, and links to country-specific rate and term pages.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/introduction.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Account balance report\n\nThe Account balance report is a **downloadable report that allows you to view the operations that affected the money in your account**, that is, the movements that affected the balance of your money in Mercado Pago.\n\nIt contains, for example, the detail of your payments, money receipts, chargebacks and reimbursements in a period of time with its gross and net breakdown. It is made up of available and unavailable money. That is to say, the money you have released to withdraw and the money to be released according to your chosen ----[mla]---- [rates and terms](https://www.mercadopago.com.ar/settings/release-options) ------------ ----[mlm]---- [rates and terms](https://www.mercadopago.com.mx/settings/release-options) ------------ ----[mlu]---- [rates and terms](https://www.mercadopago.com.uy/settings/release-options) ------------ ----[mlc]---- [rates and terms](https://www.mercadopago.com.cl/settings/release-options) ------------ ----[mco]---- [rates and terms](https://www.mercadopago.com.co/settings/release-options) ------------ ----[mpe]---- [rates and terms](https://www.mercadopago.com.pe/settings/release-options) ------------ ----[mlb]---- [rates and terms](https://www.mercadopago.com.br/settings/release-options) ------------.\n\n## Download report\n\nFollow this path to learn how to generate and download the All transactions report:\n[Sales and billing](https://www.mercadopago[FAKER][URL][DOMAIN]/balance/reports) > **Sales and account statement reports > [All transactions](https://www.mercadopago[FAKER][URL][DOMAIN]/balance/reports/settlement)** > **Generate report**.\n\n## Report values\n\nMoney movements are automatically impacted in the report when the operation is approved. Pending or rejected operations will not be.\n\n## Using the report\n\nThe report is an essential tool for both reconciliation and analysis of your financial history. This report is **used to reconcile approved money movements** and includes the transactions that comprise it. At the same time, you can use it to see the status of your account. In addition, you can use the report to view the history of your account balance between two dates and see the detail of the events that affect it, such as disputes, chargebacks, reimbursements, shipments, among others.\n\n> NOTE\n>\n> Note\n>\n> Have the [Glossary of the Account balance report](https://www.mercadopago[FAKER][URL][DOMAIN]/developers/en/guides/additional-content/reports/account-money/glossary) on hand to review it when needed or want to review a technical term.\n```\n\n----------------------------------------\n\nTITLE: HTML Form for Displaying Installment Information\nDESCRIPTION: HTML form structure for displaying installment options and financial information including total cash price, total financed price, TEA and CFT values as required by Resolution E 51/2017.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/considerations-argentina.en.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/pay\" method=\"GET\">\n    <fieldset>\n      <ul>\n        <li>\n          <label for=\"installments\">Cuotas</label>\n          <select id=\"installments\"></select>\n        </li>\n      </ul>\n    </fieldset>\n    <p id=\"summary\">\n      Total al contado: <span id=\"total\">$100</span>\n      Total financiado: <span id=\"total-financed\">$100</span>\n      TEA: <span id=\"tea\">0%</span>\n      CFT: <span id=\"cft\">0%</span>\n    </p>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Importing MercadoPago.js Library\nDESCRIPTION: Code snippets showing how to import the MercadoPago JavaScript SDK either via CDN or NPM package.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n```\n\n----------------------------------------\n\nTITLE: CSV Example: Error Processing Result\nDESCRIPTION: Sample CSV file demonstrating an error report from Mercado Pago during file processing\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/format-specifications.es.md#2025-04-18_snippet_3\n\nLANGUAGE: csv\nCODE:\n```\n4,ext2024030615504,E008:Due last date must be after today\n```\n\n----------------------------------------\n\nTITLE: Bad Request Response in JSON\nDESCRIPTION: This JSON response indicates a bad request error (status code 400) due to incorrect or missing parameters during the refund request. The error message specifies a potential cause like 'Invalid splitter id'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/refund-full-amount.en.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"status\": \"400\",\n   \"error\":  \"bad_request\",\n   \"message\": \"Invalid splitter id.\",\n   \"cause\": [\n    {\n      \"code\":\"400048\",\n      \"message\": \"Invalid splitter id\",\n      \"data\": null\n    }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Shopify Landing Page Configuration - Main Section\nDESCRIPTION: YAML configuration for the main section of the Shopify landing page, defining the title, message, and media image.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/shopify/landing.en.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncontent_section_with_media: \n - title: Shopify\n - message: Shopify is an e-commerce platform that offers all the features you need to sell online.\n - media_image: /landings-docs/media-image-landing.png\n```\n\n----------------------------------------\n\nTITLE: Configuring Callbacks in React\nDESCRIPTION: This React JSX snippet shows how to configure onError, onReady, and onSubmit callbacks as props when using a Brick component. The onError callback logs error information, the onReady callback is triggered when the Brick is ready, and the onSubmit callback is executed when the user clicks the button.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/additional-callbacks.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\n<Wallet\n    ...,\n  onError={(error) => {\n        // acionado quando ocorre um erro\n        console.log(error)\n    }}\n  onReady={() => {\n        // acionado quando o Brick está pronto\n    }}\n    onSubmit={() => {\n        // acionado quando o botão é clicado\n    }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Example Response Structure for Money Out Transaction - JSON\nDESCRIPTION: This JSON structure represents a successful response from the Money Out transaction endpoint, containing transaction identifiers, status, and detailed account information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"created_date\": \"2021-01-01T00:00:00.000Z\",\\n  \"external_reference\": \"123456\",\\n  \"id\": \"0d5020ed\",\\n  \"last_updated_date\": \"2021-01-01T00:00:00.000Z\",\\n  \"point_of_interaction\": {\\n    \"type\": \"{\\\"type\\\":\\\"PSP_TRANSFER\\\"}\"\\n  },\\n  \"seller_configuration\": {\\n    \"notification_info\": {\\n      \"notification_url\": \"http://example.com.br/notification\"\\n    }\\n  },\\n  \"status\": \"approved\",\\n  \"transaction\": {\\n    \"from\": {\\n      \"accounts\": [\\n        {\\n          \"amount\": \"100,00\"\\n        }\\n      ]\\n    },\\n    \"paid_amount\": 100,\\n    \"payer\": {\\n      \"id\": 123456543\\n    },\\n    \"refunded_amount\": 1,\\n    \"to\": {\\n      \"accounts\": [\\n        {\\n          \"amount\": \"100,00\",\\n          \"origin_id\": \"01AAAM001A1AY43FBR8WCM9CES\",\\n          \"status_details\": [\\n            {}\\n          ],\\n          \"owner\": {\\n            \"identification\": {\\n              \"number\": \"1234567890\",\\n              \"type\": \"CPF\"\\n            }\\n          }\\n        }\\n      ]\\n    },\\n    \"total_amount\": 100,\\n    \"statement_descriptor\": \"test\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Card Token with Mercado Pago SDK V1\nDESCRIPTION: In the V1 version of Mercado Pago SDK, the createToken method is used to generate a card token by passing the form and a callback function. The function makes a request to create the token, and upon success, invokes the callback function to handle the token appropriately.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.en.md#2025-04-18_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.Mercadopago.createToken($form, setCardTokenAndPay);\n```\n\n----------------------------------------\n\nTITLE: Adding Card Payment Form using HTML\nDESCRIPTION: This HTML snippet provides a form layout to capture card payment information via MercadoPago.js's CardForm. It includes various input fields for card details, maintaining a maximum width of 600px and a flex-column layout. CSS styles define the appearance of form containers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.en.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n  <style>\n    #form-checkout {\n      display: flex;\n      flex-direction: column;\n      max-width: 600px;\n    }\n\n    .container {\n      height: 18px;\n      display: inline-block;\n      border: 1px solid rgb(118, 118, 118);\n      border-radius: 2px;\n      padding: 1px 2px;\n    }\n  </style>\n  <form id=\"form-checkout\">\n    <div id=\"form-checkout__cardNumber\" class=\"container\"></div>\n    <div id=\"form-checkout__expirationDate\" class=\"container\"></div>\n    <div id=\"form-checkout__securityCode\" class=\"container\"></div>\n    <input type=\"text\" id=\"form-checkout__cardholderName\" />\n    <select id=\"form-checkout__issuer\"></select>\n    <select id=\"form-checkout__installments\"></select>\n    <select id=\"form-checkout__identificationType\"></select>\n    <input type=\"text\" id=\"form-checkout__identificationNumber\" />\n    <input type=\"email\" id=\"form-checkout__cardholderEmail\" />\n\n    <button type=\"submit\" id=\"form-checkout__submit\">Pay</button>\n    <progress value=\"0\" class=\"progress-bar\">Loading...</progress>\n  </form>\n```\n\n----------------------------------------\n\nTITLE: Creating Checkout Preference for Home & Deco Products using MercadoPago API (cURL)\nDESCRIPTION: This cURL request creates a checkout preference for a home & deco product. It includes detailed buyer information, shipment details, and product specifics including warranty information. The request is sent to the MercadoPago API endpoint with an authorization token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/industry-data/additional-info.en.md#2025-04-18_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/checkout/preferences' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--data-raw '{\n    \"auto_return\": \"approved\",\n    \"back_urls\": {\n        \"failure\": \"https://www.mercadopago.com/home/failure\",\n        \"pending\": \"https://www.mercadopago.com/home/pending\",\n        \"success\": \"https://www.mercadopago.com/home/success\"\n    },\n    \"notification_url\": \"https://webhook.site/xyz\",\n    \"expires\": false,\n    \"external_reference\": \"order-123\",\n    \"date_of_expiration\": \"2025-03-12T12:58:41.425-04:00\",\n    \"items\": [\n        {\n            \"id\": \"1234\",\n            \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n            \"title\": \"Product\",\n            \"picture_url\": \"\",\n            \"description\": \"Product Description\",\n            \"category_id\": \"home\",\n            \"quantity\": 1,\n            \"unit_price\": 150,\n            \"warranty\": false,\n        }\n    ],\n    \"payer\": {\n        \"phone\": {\n            \"area_code\": \"11\",\n            \"number\": \"[FAKER][PHONE_NUMBER][CELL_PHONE]\"\n        },\n        \"address\": {\n            \"zip_code\": \"[FAKER][ADDRESS][ZIP_CODE]\",\n            \"street_name\": \"[FAKER][ADDRESS][STREET_NAME]\",\n            \"street_number\": 1000\n        },\n        \"identification\": {\n          \"identification_type\": \"[FAKER][IDENTIFICATION][TYPE]\",\n          \"identification_number\": \"12345678\"\n        },\n        \"email\": \"john@yourdomain.com\",\n        \"first_name\": \"[FAKER][NAME][FIRST_NAME]\",\n        \"last_name\": \"[FAKER][NAME][LAST_NAME]\",\n        \"date_created\": \"\",\n        \"authentication_type\": \"Facebook\",\n        \"registration date\": \"2015-06-02T12:58:41.425-04:00\",\n        \"is_prime_user\": false,\n        \"is_first_purchase_online\": false,\n        \"last_purchase\": \"2020-01-02T12:58:41.425-04:00\"\n    },\n    \"payment_methods\": {\n        \"excluded_payment_methods\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"default_installments\": null,\n        \"default_payment_method_id\": null,\n        \"excluded_payment_types\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"installments\": null\n    },\n    \"shipments\": {\n        \"mode\": \"not_specified\",\n        \"receiver_address\": {\n            \"zip_code\": \"[FAKER][ADDRESS][ZIP_CODE]\",\n            \"street_name\": \"[FAKER][ADDRESS][STREET_NAME]\",\n            \"city_name\": \"[FAKER][ADDRESS][CITY]\",\n            \"state_name\": \"[FAKER][ADDRESS][STATE]\",\n            \"street_number\": 1000\n        },\n        \"express_shipment\": false,\n        \"local_pickup\": false\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Internal Server Error Response\nDESCRIPTION: Represents a generic server-side error indicating problems with the Mercado Pago service. Returns an internal error message and status code.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/discount-promise-no-coupon-responses.en.md#2025-04-18_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"error\": \"internal_error\",\n  \"message\": \"internal server error\",\n  \"status\": 500\n}\n```\n\n----------------------------------------\n\nTITLE: Get payment method V2\nDESCRIPTION: Shows how to get the payment method when using SDK V2. It also shows the event listener for the card number field.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.en.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ncardNumberElement.on('binChange', guessPaymentMethod);\n\n```\n\n----------------------------------------\n\nTITLE: Querying Release Report Configurations in MercadoPago API\nDESCRIPTION: This snippet demonstrates how to query the current release report configuration using the MercadoPago API. It sends a GET request to the /v1/account/release_report/config endpoint to retrieve the existing configuration details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.es.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/release_report/config' \\\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$response = Requests::get('https://api.mercadopago.com/v1/account/release_report/config', $headers);\n```\n\nLANGUAGE: java\nCODE:\n```\n URL url = new URL(\"https://api.mercadopago.com/v1/account/release_report/config\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"GET\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\nresponse = requests.get('https://api.mercadopago.com/v1/account/release_report/config', headers=headers)\n```\n\nLANGUAGE: node.js\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/release_report/config',\n    headers: headers\n};\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Creando preferencia con atributo purpose para Cuenta de Mercado Pago en Java\nDESCRIPTION: Este código Java crea una preferencia de pago con el atributo 'purpose' configurado para 'wallet_purchase', habilitando el modo Cuenta de Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-mp-wallet.es.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Crea un objeto de preferencia\nPreferenceClient client = new PreferenceClient();\n\n// Crea un ítem en la preferencia\nPreferenceItemRequest item =\n   PreferenceItemRequest.builder()\n       .title(\"Mi producto\")\n       .quantity(1)\n       .unitPrice(new BigDecimal(\"75\"))\n       .build();\n\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nList<PreferenceItemRequest> items = new ArrayList<>();\nitems.add(item);\n\nPreferenceRequest request =\n   PreferenceRequest.builder().items(items).purpose(\"wallet_purchase\").build();\n\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Creating Money Out Transaction via Pix with cURL\nDESCRIPTION: This cURL command demonstrates how to create a Money Out transaction via Pix using the Mercado Pago API. It sends a POST request to the `/v1/transaction-intents/process` endpoint, including necessary headers like `Authorization` (with a Test Access Token), `Content-Type`, and `X-Test-Token`. The JSON payload specifies the transaction details, including the `external_reference` which determines the transaction status.  A successful call will create a temporary transaction with a status defined by the `external_reference` value. This test transaction is not stored permanently.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-test.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/transaction-intents/process' \\\n--header 'x-enforce-signature: false' \\\n--header 'Authorization: Bearer TEST-7719*********832-03141*********ec9309854*********f1e54b5-1*********' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Test-Token: true' \\\n--data '{\n    \"external_reference\": \"new\",\n    \"point_of_interaction\": {\n        \"type\": \"PSP_TRANSFER\"\n    },\n    \"seller_configuration\": {\n        \"notification_info\": {\n            \"notification_url\": \"https://webhook.site/c107a500-5bf2-4787-8c17-ec9fddcfd0f6\"\n        }\n    },\n    \"transaction\": {\n        \"from\": {\n            \"accounts\": [\n                {\n                    \"amount\": 10\n                }\n            ]\n        },\n        \"to\": {\n            \"accounts\": [\n                {\n                    \"amount\": 10,\n                    \"owner\": {\n                        \"identification\": {\n                            \"number\": \"38437455871\",\n                            \"type\": \"CPF\"\n                        }\n                    },\n                    \"chave\": {\n                        \"type\": \"CPF\",\n                        \"value\": \"38437455871\"\n                    }\n                }\n            ]\n        },\n        \"total_amount\": 10\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Successful Refund Response (Status 200)\nDESCRIPTION: This JSON snippet shows the successful response structure for a partial refund request. It includes the refund ID, payment ID, amount refunded, source details, creation date, and status. A status of \"approved\" indicates the refund was processed successfully.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/refund-partial-amount.en.md#2025-04-18_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n[\n    {\n        \"id\": 1242469925,\n        \"payment_id\": 51617407254,\n        \"amount\": 25,\n        \"source\": {\n            \"id\": 783789745,\n            \"name\": \"Test Test\",\n            \"type\": \"collector\"\n        },\n        \"date_created\": \"2022-11-18T08:48:06.768-04:00\",\n        \"status\": \"approved\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Webhooks Configuration Table\nDESCRIPTION: Markdown table showing different configuration types for webhooks and their descriptions\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Tipo de configuração | Descrição |\n|---|---|\n| [Configuração via Suas integrações](/developers/pt/docs/your-integrations/notifications/webhooks#configuraoviasuasintegraes) | Permite configurar notificações para cada aplicação, identificar contas diferentes se necessário, e validar a origem da notificação utilizando uma assinatura secreta----[mla, mlb, mlu, mlc]---- (exceto para notificações de integrações com Código QR)------------. |\n| [Configuração durante a criação de pagamentos](/developers/pt/docs/your-integrations/notifications/webhooks#configuraoduranteacriaodepagamentos) | Permite a configuração específica das notificações para cada pagamento, preferência ou pedidos comerciais. ----[mla, mlb, mlm]----Não é permitido configurar para integrações com Mercado Pago Point------------.|\n```\n\n----------------------------------------\n\nTITLE: Creating CashOut Order in Mercado Pago API\nDESCRIPTION: JSON payload for creating a cashout order with item details, total amount, and specific cashout amount. Includes support for various QR models and transaction types.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/hidden-cashout.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"external_reference\": \"order-id-1234\",\n    \"title\": \"Title\",\n    \"description\": \"Mercado Pago\",\n    \"notification_url\": \"https://www.yourserver.com\",\n    \"expiration_date\": \"2023-08-22T16:34:56.559-04:00\",\n    \"total_amount\": 1390,\n    \"items\": [\n        {\n            \"sku_number\": \"KS955RUR\",\n            \"category\": \"FOOD\",\n            \"title\": \"Item1\",\n            \"description\": \"Item1 Mercado Pago\",\n            \"unit_price\": 238,\n            \"quantity\": 5,\n            \"unit_measure\": \"unit\",\n            \"total_amount\": 1190\n        }\n    ],\n    \"sponsor\": {\n            \"id\": 820480089\n            },\n    \"cash_out\": {\n                \"amount\": 200\n            }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MercadoPago Wallet with Callbacks in React\nDESCRIPTION: This snippet shows how to implement a MercadoPago wallet integration with auxiliary callbacks using a React component. It includes onReady, onSubmit, and onError callbacks as props.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/auxiliary-callbacks.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Wallet\n  initialization={{ preferenceId: '<PREFERENCE_ID>', redirectMode: 'self' }}\n  onReady={() => {}}\n  onError={() => {}}\n  onSubmit={() => {}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Mercado Pago as Gateway using Spreedly API in curl\nDESCRIPTION: This snippet demonstrates how to configure Mercado Pago as a payment gateway via the Spreedly API. Required dependencies include valid Mercado Pago credentials and the appropriate API URL. Key parameters include 'gateway_type', 'country', and 'access_token', which define the gateway settings. The operation involves making a POST request to the Spreedly API, and the expected output is a JSON object detailing the gateway configuration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/spreedly/spreedly.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\n$ curl https://core.spreedly.com/v1/gateways.json \\\n-u 'C7cRfNJGODKh4Iu5Ox3PToKjniY:4UIuWybmdythfNGPqAqyQnYha6s451ri0fYAo4p3drZUi7q2Jf4b7HKg8etDtoKJ' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"gateway_type\": \"mercado_pago\",\n        \"country\": \"AR\",\n        \"access_token\": \"ENV_ACCESS_TOKEN\"\n      }'\n```\n\n----------------------------------------\n\nTITLE: Implementing Mercado Pago Security Script in HTML\nDESCRIPTION: Adds the Mercado Pago security script to your page for improved security validation. The 'view' attribute should be replaced with the name of the section (e.g., home, search, item).\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"home\"></script>\n```\n\n----------------------------------------\n\nTITLE: Inicializando MercadoPagoDevicesSDK en Objective-C\nDESCRIPTION: Código para inicializar el SDK de dispositivos de Mercado Pago en una aplicación iOS usando Objective-C. Se recomienda ejecutarlo en el evento didFinishLaunchingWithOptions del AppDelegate.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.es.md#2025-04-18_snippet_8\n\nLANGUAGE: objective-c\nCODE:\n```\n@import 'MercadoPagoDevicesSDK';\n...\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    ...\n    [[MercadoPagoDevicesSDK shared] execute];\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Fintoc Payment in PHP\nDESCRIPTION: Creates a new Fintoc payment using Mercado Pago's PHP SDK. Sets up payment details including transaction amount, callback URL, and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-simplified.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nMercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n    \n$client = new PaymentClient();\n\n$createRequest = [\n  \"description\" => \"Product title\",\n  \"payer\" => [\n     \"email\" => \"test_user_123@testuser.com\",\n  ],\n  \"payment_method_id\" => \"fintoc\",\n  \"transaction_amount\" => 5000,\n  \"callback_url\" => \"https://www.your-site.com\",\n  \"point_of_interaction\" => [\n    \"type\" => \"CHECKOUT\",\n    \"sub_type\" => \"INTER_PSP\"\n  ]\n];\n\n    $client->create($createRequest, $request_options);\n\n```\n\n----------------------------------------\n\nTITLE: Argentina Payment Methods Banner Implementation\nDESCRIPTION: HTML code for displaying Mercado Pago payment method banners for Argentina (MLA) in various dimensions including 785x40, 575x40, 468x60, 125x125, 120x240, and 120x600 pixels.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/all.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/banners/ar/medios/785X40.jpg\" \ntitle=\"Mercado Pago - Medios de pago\" alt=\"Mercado Pago - Medios de pago\" \nwidth=\"785\" height=\"40\"/>\n```\n\n----------------------------------------\n\nTITLE: Enabling OAuth in AndroidManifest.xml\nDESCRIPTION: This snippet shows the configuration required in AndroidManifest.xml to enable OAuth flow for secure access to seller account information.  Setting the `com.mercadolibre.android.sdk.OAUTH_ENABLED` metadata to `true` activates the OAuth functionality.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/migrate-via-main-apps.en.md#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data\nname='com.mercadolibre.android.sdk.OAUTH_ENABLED'\nvalue='true'>\n</meta-data>\n```\n\n----------------------------------------\n\nTITLE: Setting Marketplace Fee for Checkout Pro (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to set the marketplace fee when using Checkout Pro.  The `marketplace_fee` parameter specifies the amount to be charged for each payment preference created via the /checkout/preferences API.  This fee is deducted from the seller's earnings before the marketplace commission.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/integrate-marketplace.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"items\": [\n        {\n            \"id\": \"item-ID-1234\",\n            \"title\": \"Meu produto\",\n            \"currency_id\": \"BRL\",\n            \"quantity\": 1,\n            \"unit_price\": 75.76\n        }\n    ],\n    \"marketplace_fee\": 10\n    }\n```\n\n----------------------------------------\n\nTITLE: Criando pagamento PagoEfectivo ATM com C#\nDESCRIPTION: Implementação em C# para criar um pagamento com método PagoEfectivo ATM usando o SDK do Mercado Pago. O código demonstra a configuração de cabeçalhos de idempotência e os parâmetros necessários para processar a transação.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mpe.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\n \nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = 100,\n    Description = \"Product title\",\n    PaymentMethodId = \"pagoefectivo_atm\",\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"test@test.com\",\n    },\n    Metadata = new Dictionary<string, object>\n    {\n\t[\"payment_mode\"] = \"online\",\n    }\n};\n \nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Information in Mercado Pago Java SDK\nDESCRIPTION: Shows how to update an existing customer's details using the CustomerClient and CustomerRequest builder. Allows modifying customer information such as contact details, address, and identification.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/customers.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nCustomerClient client = new CustomerClient();\n\nString customerId = \"247711297-jxOV430go9fx2e\";\n\nCustomerRequest customerRequest =\n   CustomerRequest.builder()\n       .email(\"jhon@doe.com\")\n       .firstName(\"Jhon\")\n       .lastName(\"Doe\")\n       .phone(PhoneRequest.builder().areaCode(\"55\").number(\"991234567\").build())\n       .identification(\n           IdentificationRequest.builder().type(\"CPF\").number(\"12345678900\").build())\n       .defaultAddress(\"Home\")\n       .address(\n           CustomerAddressRequest.builder()\n               .id(\"123123\")\n               .zipCode(\"01234567\")\n               .streetName(\"Rua Exemplo\")\n               .streetNumber(123)\n               .build())\n       .dateRegistred(OffsetDateTime.of(2000, 1, 18, 0, 0, 0, 0, ZoneOffset.UTC))\n       .build();\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK in Python\nDESCRIPTION: This Python code snippet initializes the Mercado Pago SDK by creating an SDK instance with your access token.  The `mercadopago.SDK` function is called with your access token to configure the SDK. Replace `\"PROD_ACCESS_TOKEN\"` with your actual production access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-development-environment.es.md#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n\"# SDK de Mercado Pago\nimport mercadopago\n# Agrega credenciales\nsdk = mercadopago.SDK(\\\"PROD_ACCESS_TOKEN\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Respuesta de pago aprobado de Mercado Pago\nDESCRIPTION: Ejemplo de respuesta JSON de un pago aprobado. Incluye información detallada como ID de transacción, estado del pago, detalles de la tarjeta, comisiones aplicadas y datos del comprador.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.es.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 3637181430,\n    \"date_created\": \"2018-04-17T09:26:39.000-04:00\",\n    \"date_approved\": \"2018-04-17T09:26:40.000-04:00\",\n    \"date_last_updated\": \"2018-04-17T09:26:40.000-04:00\",\n    \"date_of_expiration\": null,\n    \"money_release_date\": \"2018-04-29T09:26:40.000-04:00\",\n    \"operation_type\": \"regular_payment\",\n    \"issuer_id\": \"160\",\n    \"payment_method_id\": \"visa\",\n    \"payment_type_id\": \"credit_card\",\n    \"status\": \"approved\",\n    \"status_detail\": \"accredited\",\n    \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n    \"description\": \"Title of what you are paying for\",\n    \"live_mode\": true,\n    \"sponsor_id\": null,\n    \"authorization_code\": \"1234567\",\n    \"money_release_schema\": null,\n    \"counter_currency\": {\n        \"currency_id\": \"USD\",\n        \"rate\": 18.22539135,\n        \"amount\": 4.99,\n        \"amount_refunded\": 0\n    },\n    \"collector_id\": 307467332,\n    \"payer\": {\n        \"type\": \"guest\",\n        \"id\": null,\n        \"email\": \"test_user_33759716@testuser.com\",\n        \"identification\": {\n            \"type\": \"RFC\",\n            \"number\": \"800825569\"\n        },\n        \"phone\": {\n            \"area_code\": \"01\",\n            \"number\": \"1111-1111\",\n            \"extension\": \"\"\n        },\n        \"first_name\": \"Test\",\n        \"last_name\": \"Test\",\n        \"entity_type\": null\n    },\n    \"metadata\": {\n        \"key2\": \"value2\",\n        \"key1\": \"value1\"\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"item-ID-1234\",\n                \"title\": \"Title of what you are paying for\",\n                \"description\": \"Item description\",\n                \"picture_url\": \"https://www.mercadopago.com/org-img/MP3/home/logomp3.gif\",\n                \"category_id\": \"others\",\n                \"quantity\": \"1\",\n                \"unit_price\": \"100\"\n            }\n        ],\n        \"payer\": {\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"4444-4444\"\n            },\n            \"address\": {\n                \"zip_code\": \"5700\",\n                \"street_name\": \"Street\",\n                \"street_number\": \"123\"\n            },\n            \"first_name\": \"user-name\",\n            \"last_name\": \"user-surname\"\n        },\n        \"shipments\": {\n            \"receiver_address\": {\n                \"zip_code\": \"5700\",\n                \"street_name\": \"Street\",\n                \"street_number\": \"123\",\n                \"floor\": \"4\",\n                \"apartment\": \"C\"\n            }\n        }\n    },\n    \"order\": {},\n    \"external_reference\": \"Reference_1234\",\n    \"transaction_amount\": 100,\n    \"transaction_amount_refunded\": 0,\n    \"coupon_amount\": 0,\n    \"differential_pricing_id\": null,\n    \"deduction_schema\": null,\n    \"transaction_details\": {\n        \"net_received_amount\": 90.96,\n        \"total_paid_amount\": 100,\n        \"overpaid_amount\": 0,\n        \"external_resource_url\": null,\n        \"installment_amount\": 100,\n        \"financial_institution\": null,\n        \"payment_method_reference_id\": \"1234567\",\n        \"payable_deferral_period\": null,\n        \"acquirer_reference\": null\n    },\n    \"fee_details\": [\n        {\n            \"type\": \"mercadopago_fee\",\n            \"amount\": 9.04,\n            \"fee_payer\": \"collector\"\n        }\n    ],\n    \"captured\": true,\n    \"binary_mode\": false,\n    \"call_for_authorize_id\": null,\n    \"statement_descriptor\": \"MERCADOPAGO\",\n    \"installments\": 1,\n    \"card\": {\n        \"id\": null,\n        \"first_six_digits\": \"494133\",\n        \"last_four_digits\": \"9283\",\n        \"expiration_month\": 12,\n        \"expiration_year\": 2020,\n        \"date_created\": \"2018-04-17T09:26:39.000-04:00\",\n        \"date_last_updated\": \"2018-04-17T09:26:39.000-04:00\",\n        \"cardholder\": {\n            \"name\": \"APRO\",\n            \"identification\": {\n                \"number\": null,\n                \"type\": null\n            }\n        }\n    },\n    \"notification_url\": \"https://www.your-site.com/webhooks\",\n    \"refunds\": [],\n    \"processing_mode\": \"aggregator\",\n    \"merchant_account_id\": null,\n    \"acquirer\": null,\n    \"merchant_number\": null,\n    \"acquirer_reconciliation\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Card Token Before Payment Submission with JavaScript\nDESCRIPTION: This code snippet is responsible for creating a secure token for the credit card before submitting the payment form. It ensures that the card details are encapsulated securely and should not be sent directly through the form.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/secure-fields-core.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Step #createCardToken\nconst formElement = document.getElementById('form-checkout');\n  formElement.addEventListener('submit', e => createCardToken(e));\n  const createCardToken = async (event) => {\n    try {\n      const tokenElement = document.getElementById('token');\n      if (!tokenElement.value) {\n        event.preventDefault();\n        const token = await mp.fields.createCardToken({\n          cardholderName: document.getElementById('form-checkout__cardholderName').value,\n          identificationType: document.getElementById('form-checkout__identificationType').value,\n          identificationNumber: document.getElementById('form-checkout__identificationNumber').value,\n        });\n        tokenElement.value = token.id;\n        formElement.requestSubmit();\n      }\n    } catch (e) {\n      console.error('error creating card token: ', e)\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Expiration Date for Payment Preferences in JSON\nDESCRIPTION: This JSON snippet illustrates how to set an expiration date for payment preferences. It specifies the required format for the date and details the importance of having an expiration to avoid payment issues. Proper formatting is essential for compliance.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"date_of_expiration\": \"2020-05-30T23:59:59.000-04:00\"\n```\n\n----------------------------------------\n\nTITLE: Creating Secure Card Token for Payment Processing\nDESCRIPTION: Event-driven function to generate a secure card token containing sensitive payment information. Prevents form submission until token is created and saves token ID in a hidden form field.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/secure-fields-core.en.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Step #createCardToken\nconst formElement = document.getElementById('form-checkout');\n  formElement.addEventListener('submit', e => createCardToken(e));\n  const createCardToken = async (event) => {\n    try {\n      const tokenElement = document.getElementById('token');\n      if (!tokenElement.value) {\n        event.preventDefault();\n        const token = await mp.fields.createCardToken({\n          cardholderName: document.getElementById('form-checkout__cardholderName').value,\n          identificationType: document.getElementById('form-checkout__identificationType').value,\n          identificationNumber: document.getElementById('form-checkout__identificationNumber').value,\n        });\n        tokenElement.value = token.id;\n        formElement.requestSubmit();\n      }\n    } catch (e) {\n      console.error('error creating card token: ', e)\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Listing Payment Methods with Java SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of available payment methods using the Mercado Pago Java SDK. It initializes a `PaymentMethodClient` and then calls the `list()` method to fetch the payment methods. No specific parameters are required for this method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/payment-methods.es.md#2025-04-18_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nPaymentMethodClient client = new PaymentMethodClient();\nclient.list();\n```\n\n----------------------------------------\n\nTITLE: CardForm Migration Overview\nDESCRIPTION: Instructions for transitioning from CardForm integration to Checkout Bricks, focusing on country-specific checkout methods and document type collection\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/howto-migrate.en.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [CardForm](/developers/en/docs/checkout-bricks/how-tos/how-to-migrate/cardform/clientside)\n```\n\n----------------------------------------\n\nTITLE: Open Finance Payment Response JSON Example\nDESCRIPTION: This JSON snippet shows the expected response format for an Open Finance payment. It highlights the specific values returned in the point_of_interaction object, including the linked_to value and transaction_data with the ticket_url for completing the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/advanced-openFinance.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"point_of_interaction\": {\n    \"linked_to\": \"openfinance\",\n    \"transaction_data\": {\n      \"qr_code\": null,\n      \"ticket_url\": \"https://mercadopago.com.br/payments/1111111111/openfinance?caller_id=11111111&hash=1111\",\n      \"qr_code_base64\": null\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Bank Withdrawal - Alternative Request 1\nDESCRIPTION: This alternative snippet demonstrates a similar transaction process using a different set of parameters including a different external reference and account details for the transaction. This use case highlights dynamic transaction data configuration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-test.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\n  --url https://api.mercadopago.com/v1/transaction-intents/process \\n  --header 'Authorization: Bearer TEST-461396*********1-111215-*********cd39015a8*********bc3cb-1*********' \\n  --header 'content-type: application/json' \\n  --header 'x-enforce-signature: false' \\n  --data '{\\n  \"external_reference\": \"external_ref_1234\",\\n  \"point_of_interaction\": {\\n    \"type\": \"PSP_TRANSFER\"\\n  },\\n  \"seller_configuration\": {\\n    \"notification_info\": {\\n      \"notification_url\": \"http://example.com.ar/notification\"\\n    }\\n  },\\n  \"transaction\": {\\n    \"from\": {\\n      \"accounts\": [\\n        {\\n          \"amount\": 25\\n        }\\n      ]\\n    },\\n    \"to\": {\\n      \"total_amount\": 25,\\n      \"accounts\": [\\n        {\\n          \"amount\": 25,\\n          \"bank_id\": \"015\",\\n          \"number\": \"0150533701000132688355\",\\n          \"holder\": \"Victor Hugo\",\\n          \"owner\": {\\n              \"identification\": {\\n                  \"number\": \"20209642647\",\\n                  \"type\": \"CUIT\"\\n              }\\n          },\\n          \"type\": \"savings_account\",\\n          \"description\": \"envio de 25\"\\n        }\\n      ]\\n    },\\n    \"total_amount\": 25\\n  }\\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Bancário Payment with Node.js\nDESCRIPTION: This Node.js code snippet shows how to create a boleto bancário payment using Mercado Pago's SDK. It sets up the client with an access token, creates a payment object with transaction details, and includes an idempotency key in the request options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, Payments } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<YOUR_ACCESS_TOKEN>' });\nconst payments = new Payments(client);\n\npayments.create({\nbody: {\n       transaction_amount: '<TRANSACTION_AMOUNT>',\n       payment_method_id: '<PAYMENT_METHOD_ID>',\n       payer: {\n           email: '<EMAIL>',\n           first_name: '<NOMBRE>',\n           last_name: '<APELLIDO>',\n           identification:{\n               type:'<TIPO DE DOCUMENTO>',\n               number:'<NUMERO_DOCUMENTO>'\n       },\n           address:{\n               zip_code: '<CEP>',\n               city: '<CIUDAD>',\n               neighborhood: '<BARRIO>',\n               street_name: '<CALLE>',\n               street_number: '<NÚMERO>',\n               federal_unit: '<SIGLA ESTADO>'\n       }\n           }\n},\n   requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n   .then((result) => console.log(result))\n   .catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: PageState Lifecycle Events\nDESCRIPTION: Tracks the state of the Mini App page, including readiness and back button interactions\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/mini-apps-lifecycle.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pageStates = {\n  ready: 'Mini app is ready but might have been backgrounded before full load',\n  back: 'User pressed back button when back action is enabled in manifest'\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Generic Bad Request Errors in JSON\nDESCRIPTION: This JSON code block highlights the structure of a generic 400 Bad Request API response. Key elements include a message describing the issue and a 'cause' providing detailed error coding and description for corrective measures.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/api-responses.en.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"<BADREQUEST MESSAGE>\",\n    \"error\": \"bad_request\",\n    \"status\": 400,\n    \"cause\": [\n        {\n            \"code\": <error_code>,\n            \"description\": \"<detail error description>\",\n            \"data\": \"12-01-2023T15:27:07UTC;bcd3be45-fcb4-4647-ba35-a0396cd71b90\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Report Generation PHP\nDESCRIPTION: This PHP script uses the Requests library to send a POST request to schedule a settlement report. It includes setting up headers with the necessary authorization token and expects a JSON response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$response = Requests::post('https://api.mercadopago.com/v1/account/settlement_report/schedule', $headers);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Merchant Order in PHP\nDESCRIPTION: Fetches complete payment information for a specific order using its unique identifier via Mercado Pago SDK\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/orders.es.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new MerchantOrderClient();\n  $client->get(123456789);\n?>\n```\n\n----------------------------------------\n\nTITLE: Configuring Marketplace Settings in Checkout Bricks Initialization\nDESCRIPTION: JavaScript code snippet for initializing Checkout Bricks with marketplace functionality enabled. This configuration includes setting the amount, preference ID, and enabling the marketplace feature.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-wallet.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n  initialization : {\n    amount: 100,\n    preferenceId: \"<PREFERENCE_ID>\",\n    marketplace: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Payment Response JSON Structure from MercadoPago API\nDESCRIPTION: Example JSON response from the MercadoPago API after creating a payment. Shows the payment status, details, and the external resource URL that contains payment instructions for the customer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n[\n {\n    ...,\n    \"id\": 5466310457,\n    \"status\": \"pending\",\n    \"status_detail\": \"pending_waiting_payment\",\n    ...,\n    \"transaction_details\": {\n        \"payment_method_reference_id\": \"24304329\",\n        \"verification_code\": \"882430432923032000100001\",\n        \"net_received_amount\": 0,\n        \"total_paid_amount\": 100,\n        \"overpaid_amount\": 0,\n        \"external_resource_url\": \"https://www.mercadopago.com/mlm/payments/sandbox/ticket/helper?payment_id=1234&payment_method_reference_id=12345678&caller_id=1234&hash=aaaaaa-bbb-cccc-dddd-eeeeeeee\",\n        \"installment_amount\": 0,\n        \"financial_institution\": \"\",\n        \"payable_deferral_period\": null,\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating 3DS Payment with MercadoPago SDK\nDESCRIPTION: Code examples demonstrating how to create a payment with 3DS verification enabled using MercadoPago's SDK across different programming languages. The implementation includes setting the three_d_secure_mode as optional and handling necessary payment parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.es.md#2025-04-18_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\MercadoPagoConfig;\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['transactionAmount'],\n    \"token\" => $_POST['token'],\n    \"description\" => $_POST['description'],\n    \"installments\" => $_POST['installments'],\n    \"payment_method_id\" => $_POST['paymentMethodId'],\n    \"issuer_id\" => $_POST['issuer'],\n    \"payer\" => [\n      \"email\" => $_POST['email'],\n      \"identification\" => [\n        \"type\" => $_POST['identificationType'],\n        \"number\" => $_POST['number']\n      ]\n    ],\n    \"three_d_secure_mode\" => \"optional\"\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\nLANGUAGE: nodejs\nCODE:\n```\nimport { MercadoPagoConfig, Payment } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: 'YOUR_ACCESS_TOKEN' });\nconst payment = new Payment(client);\n\nconst body = {\ntransaction_amount: req.transaction_amount,\n  token: req.token,\n  description: req.description,\n  installments: req.installments,\n  payment_method_id: req.paymentMethodId,\n  issuer_id: req.issuer,\n  payer: {\n    email: req.email,\n    identification: {\n      type: req.identificationType,\n      number: req.number\n    }\n  },\n  three_d_secure_mode: 'optional' \n};\n\npayment.create({ body: body, requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' } }).then(console.log).catch(console.log);\n```\n\nLANGUAGE: java\nCODE:\n```\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest paymentCreateRequest =\n   PaymentCreateRequest.builder()\n       .transactionAmount(request.getTransactionAmount())\n       .token(request.getToken())\n       .description(request.getDescription())\n       .installments(request.getInstallments())\n       .paymentMethodId(request.getPaymentMethodId())\n       .payer(\n           PaymentPayerRequest.builder()\n               .email(request.getPayer().getEmail())\n               .firstName(request.getPayer().getFirstName())\n               .identification(\n                   IdentificationRequest.builder()\n                       .type(request.getPayer().getIdentification().getType())\n                       .number(request.getPayer().getIdentification().getNumber())\n                       .build())\n               .build())\n       .threeDSecureMode(\"optional\")\n       .build();\n\nclient.create(paymentCreateRequest);\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n \npayment_data = {\n transaction_amount: params[:transactionAmount].to_f,\n token: params[:token],\n description: params[:description],\n installments: params[:installments].to_i,\n payment_method_id: params[:paymentMethodId],\n payer: {\n   email: params[:email],\n   identification: {\n     type: params[:identificationType],\n     number: params[:identificationNumber]\n   }\n three_d_secure_mode: \"optional\",\n }\n}\n \npayment_response = sdk.payment.create(payment_data)\npayment = payment_response[:response]\n \nputs payment\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n \nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n \nvar paymentRequest = new PaymentCreateRequest\n{\n   TransactionAmount = decimal.Parse(Request[\"transactionAmount\"]),\n   Token = Request[\"token\"],\n   Description = Request[\"description\"],\n   Installments = int.Parse(Request[\"installments\"]),\n   PaymentMethodId = Request[\"paymentMethodId\"],\n   Payer = new PaymentPayerRequest\n   {\n       Email = Request[\"email\"],\n       Identification = new IdentificationRequest\n       {\n           Type = Request[\"identificationType\"],\n           Number = Request[\"identificationNumber\"],\n       },\n   },\nThreeDSecureMode = \"optional\",\n};\n \nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest);\n \nConsole.WriteLine(payment.Status);\n```\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n \npayment_data = {\n   \"transaction_amount\": float(request.POST.get(\"transaction_amount\")),\n   \"token\": request.POST.get(\"token\"),\n   \"description\": request.POST.get(\"description\"),\n   \"installments\": int(request.POST.get(\"installments\")),\n   \"payment_method_id\": request.POST.get(\"payment_method_id\"),\n   \"payer\": {\n       \"email\": request.POST.get(\"email\"),\n       \"identification\": {\n           \"type\": request.POST.get(\"type\"), \n           \"number\": request.POST.get(\"number\")\n       }\n   }\n   \"three_d_secure_mode\": \"optional\"\n}\n \npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n \nprint(payment)\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/payment\"\n)\n\nfunc processPayment(r *http.Request) {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := payment.NewClient(cfg)\n\n\trequest := payment.Request{\n\t\tTransactionAmount: r.FormValue(\"transactionAmount\"),\n\t\tToken: r.FormValue(\"token\"),\n            Description: r.FormValue(\"description\"),\n\t\tPaymentMethodID:   r.FormValue(\"paymentMethodId\"),\n\t\tPayer: &payment.PayerRequest{\n\t\t\tEmail: r.FormValue(\"email\"),\n\t\t\tIdentification: &payment.IdentificationRequest{\n\t\t\t\tType: r.FormValue(\"type\"),\n\t\t\t\tNumber: r.FormValue(\"number\"),\n\t\t\t},\n\t\t},\n\t}\n\n\tresource, err := client.Create(context.Background(), request)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'Authorization: <ENV_ACCESS_TOKEN>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"payer\": {\n        \"email\": \"<BUYER_EMAIL>\"\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"quantity\": <ITEM_QUANTITY>,\n                \"category_id\": <CATEGORY_ID>,\n                \"title\": <ITEM_TITLE>,\n                \"unit_price\": <TRANSACTION_AMOUNT>\n            }\n        ]\n    },\n    \"payment_method_id\": <PAYMENT_METHOD_ID>,\n    \"marketplace\": \"NONE\",\n    \"installments\": <INSTALLLMENTS_NUMBER>,\n    \"transaction_amount\": <TRANSACTION_AMOUNT>,\n    \"description\": \"<DESCRIPTION>\",\n    \"token\": \"CARD_TOKEN\",\n    \"three_d_secure_mode\": \"optional\",\n    \"capture\": true,\n    \"binary_mode\": false\n}'\n```\n\n----------------------------------------\n\nTITLE: Replacing CardForm HTML with Payment Brick Container\nDESCRIPTION: Replace the existing CardForm HTML structure with a simple container div for the Payment Brick.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/cardform-clientside.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"paymentBrick_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Defining Customization Settings in JavaScript\nDESCRIPTION: This snippet demonstrates how to define customization settings for a value proposition in JavaScript. It specifies the value prop to be used for displaying messages on a banner. The customization object must be passed as a parameter in the create() method. This allows developers to easily change the displayed message based on the selected value proposition.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/brand-brick/value-prop.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    customization: {\n      text: {\n        valueProp: \"payment_methods\", // optional \"installments\" | \"payment_methods\" | \"security\" | \"payment_methods_logos\" | \"credits\"\n      },\n    },\n  };\n```\n\n----------------------------------------\n\nTITLE: Adding Counter Currency Parameter for Cross Border Payments in Mercado Pago\nDESCRIPTION: This code snippet shows the required counter_currency parameter that must be added to payment or preference creation when using Cross Border. The parameter specifies USD as the currency for receiving funds.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"counter_currency\": {\n\t\"currency_id\": \"USD\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment for Utilities with Additional Data using cURL\nDESCRIPTION: This cURL request demonstrates how to create a payment for a utility service, including additional buyer and item information to improve payment approval rates. It uses the Mercado Pago API and includes details such as transaction amount, payment method, buyer identification, and utility service specifics.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/utilities.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}} \\\n--data-raw '{\n    \"transaction_amount\": 150.00,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"debvisa\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Pedido01\",\n    \"description\": \"PEDIDO NOVO\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"payer\": {\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"12345678909\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"title\": \"Serviço\",\n                \"category_id\": \"service\",\n                \"quantity\": 1,\n                \"unit_price\": 150\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_prime_user\": true,\n            \"is_first_purchase_online\": true,\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"206233-2002\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"3003\"\n            },\n            \"authentication_type\": \"Facebook\",\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Response for Modifying Event Configuration in MercadoPago API\nDESCRIPTION: This JSON response shows the updated event configuration after a successful PUT request to modify an event in the MercadoPago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/modifications.es.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": {{event_id}},\n    \"type\": \"frequency\",\n    \"data\": {\n        \"period\": \"daily\",\n        \"value\": 0,\n        \"hour\": 11,\n        \"skip_non_working_days\": false\n    },\n    \"description\": \"Evento para envío los viernes \",\n    \"structure_id\": {{structure_id}},\n    \"notifiers\": [\n        {{notifier_id}}\n    ],\n    \"status\": \"ACTIVE\",\n    \"version\": 1,\n    \"user_id\": {{user_id}}\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Updated Payment Status (JavaScript)\nDESCRIPTION: This JavaScript code fetches the updated payment status from the server using a GET request to `/get_payment/{paymentId}`.  It retrieves the `paymentId` from local storage and updates the content of the `congrats-div` element with the payment ID and status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-bigmerchants.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener(\"DOMContentLoaded\", async function (e) {\n init();\n});\n\nasync function init() {\n const id = localStorage.getItem(\"paymentId\");\n\n try {\n   const response = await fetch(\"/get_payment/\" + id, {\n     method: \"GET\",\n   });\n   const result = await response.json();\n   if (result.status != 200) throw new Error(\"error getting payment\");\n   document.getElementById(\"congrats-div\").innerHTML =\n     \"Pagamento \" + result.data.id + \" -> Status: \" + result.data.status;\n } catch (error) {\n   alert(\"Unexpected error\\n\" + JSON.stringify(error));\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Mercado Pago 575x40 Banner for Chile (MLC)\nDESCRIPTION: HTML code to embed a 575x40 pixel Mercado Pago banner for Chile, showcasing 6 interest-free installment payment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/seis.en.md#2025-04-18_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://www.mercadopago.cl/banner/575x40_banner_psj_6x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"575\" height=\"40\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Discounts\nDESCRIPTION: Example of configuring discount information including total discount amount and list of individual discounts.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/add-confirmation-step.en.md#2025-04-18_snippet_5\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n  // ...\n  initialization: {\n    discounts: {\n      totalDiscountsAmount: 3,\n      discountsList: [\n        {\n          name: \"<DISCOUNT_NAME>\",\n          value: 3,\n        },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Embedding Mercado Pago 735x40 Banner for Brazil (MLB)\nDESCRIPTION: HTML code to embed a 735x40 pixel Mercado Pago banner for Brazil, showcasing 6 interest-free installment payment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/seis.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/PSJ/735x40_banner_psj_6x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"735\" height=\"40\"/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Checkout\nDESCRIPTION: Initializes the Mercado Pago checkout with the preference ID and customization options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/installments-without-card.en.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmp.bricks().create(\"wallet\", \"wallet_container\", {\n  initialization: {\n    preferenceId: \"<PREFERENCE_ID>\",\n  },\n  customization: {\n    texts: {\n      valueProp: \"convenience\",\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding Value Proposition Text\nDESCRIPTION: Example showing how to hide the value proposition text by setting hideValueProp to true while maintaining default theme.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-appearance.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n\t   theme: 'default',\n        customStyle: {\n            hideValueProp: true,\n        }\n    }\n}\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n    theme: 'default',\n    customStyle: {\n        hideValueProp: true,\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago Preference in .NET\nDESCRIPTION: Creates a basic Mercado Pago preference with a single product item using the Mercado Pago SDK. Demonstrates setting up access token, configuring item details, and creating preference client.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/preferences.es.md#2025-04-18_snippet_0\n\nLANGUAGE: dotnet\nCODE:\n```\n// SDK de Mercado Pago\nusing MercadoPago.Config;\nusing MercadoPago.Client.Preference;\nusing MercadoPago.Resource.Preference;\n// Agrega credenciales\nMercadoPagoConfig.AccessToken = \"PROD_ACCESS_TOKEN\";\n// Crea el objeto de request de la preference\nvar request = new PreferenceRequest\n{\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"Mi producto\",\n            Quantity = 1,\n            CurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\n            UnitPrice = 75.56m,\n        },\n    },\n};\n// Crea la preferencia usando el client\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Transaction Update Notification Format\nDESCRIPTION: JSON structure for transaction update notifications from Mercado Pago, including transaction ID, notification status, and timing information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.en.md#2025-04-18_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"transaction_intent.updated\",\n  \"api_version\": \"v1\",\n  \"data\": {\n    \"id\": \"1108917506-01GGTH198RP0K71H133EK9BJAT\"\n  },\n  \"date_created\": \"2022-11-01T17:19:53.915-04:00\",\n  \"id\": \"103686918006\",\n  \"last_updated\": \"2022-11-01T17:19:55.001-04:00\",\n  \"status\": \"partially_processed\",\n  \"type\": \"transaction_intent\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MercadoPago Credentials with HTML\nDESCRIPTION: HTML script for initializing the MercadoPago SDK with public key credentials. This is essential for securely identifying your integration when processing payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  const mp = new MercadoPago(\"YOUR_PUBLIC_KEY\");\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Packages in Flutter\nDESCRIPTION: This code snippet imports the necessary packages for interacting with the Android platform and retrieving package information in a Flutter application. The `package_info` package is used to get the application's package name, and `android_intent` is used to send intents to native Android components.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/cross-platform-flutter.en.md#2025-04-18_snippet_1\n\nLANGUAGE: flutter\nCODE:\n```\n\"import 'package:package_info/package_info.dart'; \nimport 'package:android_intent/android_intent.dart';  \"\n```\n\n----------------------------------------\n\nTITLE: Implementing Mercado Pago Security Script\nDESCRIPTION: Code snippet for adding Mercado Pago's security script to a website. The script requires a 'view' parameter that specifies the section where it's being implemented (e.g., home, search, item). The view parameter can be left empty if no specific section value is available.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/chargebacks/how-to-prevent.es.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"home\"></script>\n```\n\n----------------------------------------\n\nTITLE: Inicializando Card Payment Brick con documento de identificación en JavaScript\nDESCRIPTION: Este snippet ilustra cómo configurar el objeto settings para inicializar el Card Payment Brick con el tipo y número de documento de identificación del pagador. Cuando se proporcionan datos válidos, el campo de documento se autocompleta.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/initialize-data-on-the-bricks.es.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n   initialization: {\n       amount: number,\n       payer: {\n           identification: {\n               type: 'string',\n               number: 'string',\n           },\n       },\n   },\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference with cURL\nDESCRIPTION: Create a Mercado Pago payment preference using cURL with wallet purchase purpose and a product item\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/default-rendering.en.md#2025-04-18_snippet_18\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n'https://api.mercadopago.com/checkout/preferences' \\\n-H 'Content-Type: application/json' \\\n-H 'cache-control: no-cache' \\\n-H 'Authorization: Bearer **PROD_ACCESS_TOKEN**' \\\n-d '{\n  \"purpose\": \"wallet_purchase\",\n  \"items\": [\n      {\n          \"title\": \"My product\",\n          \"quantity\": 1,\n          \"unit_price\": 75.76\n      }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Point Smart Device Information\nDESCRIPTION: Command to obtain device details such as serial number, brand, and model for Point Smart devices\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/comunication-commands.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"method\": 'info_device',\n    \"args\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Transaction (MLC) with cURL\nDESCRIPTION: This cURL command demonstrates how to create a transaction using the Mercado Pago API for Chile (MLC).  It sends a POST request to the `/v1/transaction-intents/process` endpoint with the necessary headers and a JSON payload containing transaction details, including account information, amounts, and notification URL. The `Authorization` header requires a valid Bearer token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.es.md#2025-04-18_snippet_8\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    'https://api.mercadopago.com/v1/transaction-intents/process'\\\n    -H 'Content-Type: application/json' \\\n       -H 'X-Idempotency-Key: {{idempotency_key}}' \\\n       -H 'x-Signature: true' \\\n       -H 'x-enforce-signature: false' \\\n       -H 'Authorization: Bearer TEST-7719*********832-03141*********ec9309854*********f1e54b5-1*********' \\\n    -d '{\n  \"external_reference\": \"MP0001\",\n  \"point_of_interaction\": \"{\"type\":\"PSP_TRANSFER\"}\",\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://exemplo.cl/notification\"\n    }\n  },\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": 100\n        }\n      ]\n    },\n    \"to\": {\n      \"accounts\": [\n        {\n          \"amount\": 100,\n          \"bank_id\": \"99999004\",\n          \"type\": \"current\",\n          \"number\": \"10266732\",\n          \"owner\": {\n            \"identification\": {\n              \"type\": \"RUT\",\n              \"number\": \"111111111111\"\n            }\n          }\n        }\n      ]\n    },\n    \"total_amount\": 100\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Multiple Item Preference in C#\nDESCRIPTION: Create a Mercado Pago preference with multiple items using a list of PreferenceItemRequest objects\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/preference-multiple-items.es.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Crea el request con múltiples ítems\nvar request = new PreferenceRequest\n{\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"Mi producto 1\",\n            Quantity = 1,\n            CurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\n            UnitPrice = 75.56m,\n        },\n        new PreferenceItemRequest\n        {\n            Title = \"Mi producto 2\",\n            Quantity = 2,\n            CurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\n            UnitPrice = 96.56m,\n        },\n        // ...\n    },\n};\n\n// Crea un objeto client\nvar client = new PreferenceClient();\n\n// Crea la preferencia\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Resultado de la ejecución del script SFTP en Mercado Pago\nDESCRIPTION: Este snippet muestra el resultado de la ejecución del script SFTP para la carga automática de archivos. Proporciona feedback sobre el proceso de carga en el servidor SFTP de Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/upload-a-file.es.md#2025-04-18_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\nUY0FVGW103Q0SP: ~ user$ sftp -b upload_sftp_script pg_sap@sftp-qa.mercadolibre.io sftp> ls\nselfserviceinput\tselfserviceoutput\nsftp> cd selfserviceinput\nsftp> put /Users/user/debt_589_6_20230804.csv\nsftp> ls\ndebt_589_6_20230804.csv\nsftp> bye\nUY0FVFGW103Q05P:~ user$\n```\n\n----------------------------------------\n\nTITLE: Configurando Data de Vencimento em Java\nDESCRIPTION: Código Java para definir a data de vencimento de um pagamento em dinheiro usando o formato ISO 8601. A data deve estar entre 1 e 30 dias a partir da emissão.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_49\n\nLANGUAGE: java\nCODE:\n```\n===\nA data usa o formato ISO 8601: yyyy-MM-dd'T'HH:mm:ssz\n===\n\npayment.setDateOfExpiration(\"2020-05-30T23:59:59.000-04:00\")\n```\n\n----------------------------------------\n\nTITLE: Deleting a MercadoPago Report Structure using cURL\nDESCRIPTION: This cURL command deletes a specific report structure in MercadoPago's system. It requires the structure_id and an authorization token. A successful request will not return a response, while an error will return a 404 status code.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/deactivation.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request DELETE 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/structures/{{structure_id}}' \\\n--header 'Authorization: Bearer {{TOKEN}}'\n```\n\n----------------------------------------\n\nTITLE: Creating Report Structure with Mercado Pago API (curl)\nDESCRIPTION: This curl request creates the structure for a marketplace sales report. It defines the timezone, file format, and columns to be included in the report.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/structures' \\\n--header 'Authorization: Bearer {{TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"display_timezone\": \"GMT-03\",\n    \"name\": \"Structure de mi marketplace\",\n    \"file_format\": {\n        \"prefix\": \"marketplace\",\n        \"column_separator\": \";\",\n        \"decimal_separator\": \".\"\n    },\n    \"columns\": [\n        {\n            \"key\": \"COLLECTOR\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"COLLECTOR_NICKNAME\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"PAYMENT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"STATUS_DESCRIPTION\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"STATUS_DETAIL\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"PURCHASE_ORDER\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"PAYMENT_METHOD_TYPE\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"TRANSACTION_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"DATE_CREATED\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"DATE_APPROVED\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"MARKETPLACE_FEE_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"MERCADOPAGO_FEE_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"TOTAL_PAID_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"NET_RECEIVED_AMOUNT\",\n            \"alias\": \"\"\n        }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment for Tickets & Entertainment with Additional Data\nDESCRIPTION: This cURL request demonstrates how to create a payment for a ticket purchase, including additional data fields specific to the Tickets & Entertainment industry. It shows how to structure the request body with detailed information about the item, buyer, and shipping.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--data-raw '{\n    \"transaction_amount\": 12.34,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"master\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Pedido 01\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"description\": \"PEDIDO NOVO - INGRESSO\",\n    \"payer\": {\n        \"first_name\": \"Nome\",\n        \"last_name\": \"Sobrenome\",\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"19119119100\"\n        },\n        \"address\": {\n            \"zip_code\": \"06233200\",\n            \"street_name\": \"Av. das Nações Unidas\",\n            \"street_number\": \"3003\",\n            \"neighborhood\": \"Bonfim\",\n            \"city\": \"Osasco\",\n            \"federal_unit\": \"SP\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"1941\",\n                \"title\": \"25/08/2022 | Pista Inteira5 lote - GREEN VALLEY GRAMADO 2022\",\n                \"description\": \"25/08/2022 | Pista Inteira5 lote - GREEN VALLEY GRAMADO 2022\",\n                \"picture_url\": null,\n                \"category_id\": \"Tickets\",\n                \"quantity\": 1,\n                \"unit_price\": 100.00,\n                \"event_date\": \"2019-12-25T19:30:00.000-03:00\"\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_prime_user\": \"1\",\n            \"is_first_purchase_online\": \"1\",\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"06233-200\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"3003\"\n            },\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"0\",\n            \"pick_up_on_seller\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"06233-200\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"3003\",\n                \"floor\": \"\",\n                \"apartment\": \"\"\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Enabling OAuth in Android Manifest\nDESCRIPTION: This snippet shows how to enable OAuth in the AndroidManifest.xml file for secure seller account information retrieval. This requires enabling the OAuth flow.  This step allows the app to securely obtain seller account information through OAuth.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/migrate-via-main-apps.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data\nname='com.mercadolibre.android.sdk.OAUTH_ENABLED'\nvalue='true'>\n</meta-data>\n```\n\n----------------------------------------\n\nTITLE: Creating Pix Payments with cURL\nDESCRIPTION: cURL command to create Pix payments by directly calling Mercado Pago's API. The request includes authorization headers with the access token, an idempotency key, and a JSON payload with transaction details including amount, payment method, and payer email.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pix.es.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n    'https://api.mercadopago.com/v1/payments' \\\n    -d '{\n      \"transaction_amount\": 100,\n      \"payment_method_id\": \"pix\",\n      \"payer\": {\n        \"email\": \"PAYER_EMAIL_HERE\"\n      }\n    }'\n```\n\n----------------------------------------\n\nTITLE: Error Response for Missing Counter Currency in JSON\nDESCRIPTION: This JSON snippet demonstrates the error response received when the counter_currency field is not included in the payment request for Cross Border transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.es.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"missing counter_currency\",\n    \"error\": \"invalid_counter_currency\",\n    \"status\": 400,\n    \"cause\": []\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript to Handle 3DS Challenge Submission\nDESCRIPTION: This JavaScript function initiates the 3DS challenge by creating an iframe and a form. It submits the form with the 'creq' value and the action URL for processing the challenge, when the payment status is 'pending' with a corresponding status detail.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-bigmerchants.en.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction doChallenge(payment) {\n  try {\n    const {\n      status,\n      status_detail,\n      three_ds_info: { creq, external_resource_url },\n    } = payment;\n    if (status === \"pending\" && status_detail === \"pending_challenge\") {\n      var iframe = document.createElement(\"iframe\");\n      iframe.name = \"myframe\";\n      iframe.id = \"myframe\";\n      document.body.appendChild(iframe);\n\n      var idocument = iframe.contentWindow.document;\n\n      var myform = idocument.createElement(\"form\");\n      myform.name = \"myform\";\n      myform.setAttribute(\"target\", \"myframe\");\n      myform.setAttribute(\"method\", \"post\");\n      myform.setAttribute(\"action\", external_resource_url);\n\n      var hiddenField = idocument.createElement(\"input\");\n      hiddenField.setAttribute(\"type\", \"hidden\");\n      hiddenField.setAttribute(\"name\", \"creq\");\n      hiddenField.setAttribute(\"value\", creq);\n      myform.appendChild(hiddenField);\n      iframe.appendChild(myform);\n\n      myform.submit();\n    }\n  } catch (error) {\n    console.log(error);\n    alert(\"Error doing challenge, try again later.\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Intent Filter for POS Money Loading - Android Manifest\nDESCRIPTION: Android Manifest configuration required for enabling money loading functionality in POS terminals. This intent filter setup allows the app to handle text data sharing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-load-money.en.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter> \n\t<action android:name=\"android.intent.action.SEND\" /> \n\t<category android:name=\"android.intent.category.DEFAULT\" /> \n\t<data android:mimeType=\"text/*\" /> \n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Launching Camera Scanner with Kotlin\nDESCRIPTION: This Kotlin snippet shows how to launch the camera scanner for QR codes and barcodes using the `MPManager.cameraScanner.launchScanner` method. It uses a callback to handle the response, differentiating between success and error scenarios.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/camscanner-callback.en.md#2025-04-18_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval cameraScanner = MPManager.cameraScanner\n/**\n* launch camera for QR scanner code\n**/\ncameraScanner.launchScanner(ScanType.CAMERA_SCANNER_QR) { response ->\n   response\n       .doIfSuccess { result -> // Handling the successful scanner result result.message }\n\n       .doIfError { error -> // Handling the error resulting from the scanner error.message.orEmpty() }\n\n}\n\n/**\n* launch camera for Barcode scanner\n**/\n\ncameraScanner.launchScanner(ScanType.CAMERA_SCANNER_BARCODE) { response ->\n   response\n       .doIfSuccess { result -> // Handling the successful scanner result result.message }\n\n       .doIfError { error -> // Handling the error resulting from the scanner error.message.orEmpty() }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Card Number Event Listener (V2)\nDESCRIPTION: JavaScript code snippet demonstrating how to attach a `binChange` event listener to the cardNumberElement in Mercado Pago SDK V2. The `on` method is used to bind the `guessPaymentMethod` function to the event which is triggered when the BIN changes. The `cardNumberElement` is a secure field.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ncardNumberElement.on('binChange', guessPaymentMethod);\n```\n\n----------------------------------------\n\nTITLE: Mercado Pago API Response for Pix Payment Creation via Open Finance (JSON)\nDESCRIPTION: This JSON response shows the structure and data returned by Mercado Pago's API after creating a Pix payment via Open Finance. It includes payment details, status, payer information, and transaction data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/advanced-openFinance.en.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 22831702804,\n    \"date_created\": \"2022-06-02T10:17:13.865-04:00\",\n    \"date_approved\": null,\n    \"date_last_updated\": \"2022-06-02T10:17:13.865-04:00\",\n    \"date_of_expiration\": \"2022-06-03T10:17:13.536-04:00\",\n    \"money_release_date\": null,\n    \"operation_type\": \"regular_payment\",\n    \"issuer_id\": null,\n    \"payment_method_id\": \"pix\",\n    \"payment_type_id\": \"bank_transfer\",\n    \"status\": \"pending\",\n    \"status_detail\": \"pending_waiting_transfer\",\n    \"currency_id\": \"BRL\",\n    \"description\": \"Pagamento Openfinace\",\n    \"live_mode\": true,\n    \"sponsor_id\": null,\n    \"authorization_code\": null,\n    \"money_release_schema\": null,\n    \"taxes_amount\": 0,\n    \"counter_currency\": null,\n    \"brand_id\": null,\n    \"shipping_amount\": 0,\n    \"pos_id\": null,\n    \"store_id\": null,\n    \"integrator_id\": null,\n    \"platform_id\": null,\n    \"corporation_id\": null,\n    \"collector_id\": 456852241,\n    \"payer\": {\n        \"type\": null,\n        \"id\": \"435906493\",\n        \"operator_id\": null,\n        \"email\": null,\n        \"identification\": {\n            \"type\": null,\n            \"number\": null\n        },\n        \"phone\": {\n            \"area_code\": null,\n            \"number\": null,\n            \"extension\": null\n        },\n        \"first_name\": null,\n        \"last_name\": null,\n        \"entity_type\": null\n    },\n    \"marketplace_owner\": null,\n    \"metadata\": {},\n    \"additional_info\": {\n        \"available_balance\": null,\n        \"nsu_processadora\": null,\n        \"authentication_code\": null\n    },\n    \"order\": {},\n    \"external_reference\": \"45ba90f2-a37f-4d57-bce2-e46aae3c3b04\",\n    \"transaction_amount\": 5,\n    \"transaction_amount_refunded\": 0,\n    \"coupon_amount\": 0,\n    \"differential_pricing_id\": null,\n    \"deduction_schema\": null,\n    \"callback_url\": null,\n    \"installments\": 1,\n    \"transaction_details\": {\n        \"payment_method_reference_id\": null,\n        \"net_received_amount\": 0,\n        \"total_paid_amount\": 5,\n        \"overpaid_amount\": 0,\n        \"external_resource_url\": null,\n        \"installment_amount\": 0,\n        \"financial_institution\": null,\n        \"payable_deferral_period\": null,\n        \"acquirer_reference\": null,\n        \"bank_transfer_id\": null,\n        \"transaction_id\": null\n    },\n    \"fee_details\": [],\n    \"charges_details\": [],\n    \"captured\": true,\n    \"binary_mode\": false,\n    \"call_for_authorize_id\": null,\n    \"statement_descriptor\": null,\n    \"card\": {},\n    \"notification_url\": null,\n    \"refunds\": [],\n    \"processing_mode\": \"aggregator\",\n    \"merchant_account_id\": null,\n    \"merchant_number\": null,\n    \"acquirer_reconciliation\": [],\n    \"point_of_interaction\": {\n        \"type\": \"OPENPLATFORM\",\n        \"linked_to\": \"openfinance\",\n        \"business_info\": {\n            \"unit\": \"online_payments\",\n            \"sub_unit\": \"default\"\n        },\n        \"application_data\": {\n            \"name\": null,\n            \"version\": null\n        },\n        \"transaction_data\": {\n            \"qr_code\": null,\n            \"bank_transfer_id\": null,\n            \"transaction_id\": null,\n            \"financial_institution\": null,\n            \"ticket_url\": null,\n            \"bank_info\": {\n                \"payer\": {\n                    \"account_id\": null,\n                    \"id\": null,\n                    \"long_name\": null,\n                    \"external_account_id\": null\n                },\n                \"collector\": {\n                    \"account_id\": null,\n                    \"long_name\": null,\n                    \"account_holder_name\": \"Salazar Tucker\",\n                    \"transfer_account_id\": null\n                },\n                \"is_same_bank_account_owner\": null,\n                \"origin_bank_id\": null,\n                \"origin_wallet_id\": null\n            },\n            \"infringement_notification\": {\n                \"type\": null,\n                \"status\": null\n            },\n          \"qr_code_base64\":null\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Payment Response Example\nDESCRIPTION: Example JSON response showing the payment status and transaction details including the external resource URL for payment completion.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mla.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n {\n    ...,\n    \"id\": 5466310457,\n    \"status\": \"pending\",\n    \"status_detail\": \"pending_waiting_payment\",\n    ...,\n    \"transaction_details\": {\n        \"net_received_amount\": 0,\n        \"total_paid_amount\": 100,\n        \"overpaid_amount\": 0,\n        \"external_resource_url\": \"https://www.mercadopago.com.ar/payments/123456/ticket?caller_id=123456&payment_method_id=rapipago&payment_id=123456&payment_method_reference_id=123456\",\n        \"installment_amount\": 0,\n        \"financial_institution\": null,\n        \"payment_method_reference_id\": \"1234567890\"\n    }\n }\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Shipping Cost to Preference in JSON\nDESCRIPTION: This JSON snippet shows how to add a shipping cost to a MercadoPago preference. It demonstrates setting a fixed shipping cost and specifying the shipping mode as 'not_specified'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"shipments\":{\n        \"cost\": 1000,\n        \"mode\": \"not_specified\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Open Finance Payment with PHP SDK\nDESCRIPTION: This code demonstrates how to create an Open Finance payment using Mercado Pago's PHP SDK. It includes setting the transaction amount, description, payment method (Pix), payer information, and the crucial 'linked_to' parameter set to 'openfinance'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/advanced-openFinance.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nMercadoPago\\SDK::setAccessToken(\"access_token\");\n$payment = new MercadoPago\\Payment();\n$payment->transaction_amount = 100;\n$payment->description = \"Título do produto\";\n$payment->payment_method_id = \"pix\";\n$payment->payer = array(\n    \"email\" => \"test@test.com\",\n    \"first_name\" => \"Test\",\n    \"last_name\" => \"User\",\n    \"identification\" => array(\n        \"type\" => \"CPF\",\n        \"number\" => \"19119119100\"\n    ),\n);\n$payment->point_of_interaction = array(\n\"linked_to\" => \"openfinance\"\n);\n$payment->save();\n```\n\n----------------------------------------\n\nTITLE: Get Payment Methods JavaScript\nDESCRIPTION: This snippet retrieves payment methods based on the card's BIN (Bank Identification Number) and populates the form with the relevant information, including the payment method ID, issuer, and installments. It uses the `cardNumberElement.on('binChange')` event listener to trigger the retrieval when the BIN changes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/secure-fields-core.en.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction clearHTMLSelectChildrenFrom(element) {\n    const currOptions = [...element.children];\n    currOptions.forEach(child => child.remove());\n}\n\n// Step #getPaymentMethods\ncardNumberElement.on('binChange', async (data) => {\n    const { bin } = data;\n    try {\n      const paymentMethodElement = document.getElementById('paymentMethodId');\n      const issuerElement = document.getElementById('form-checkout__issuer');\n      const installmentsElement = document.getElementById('form-checkout__installments');\n\n      if (!bin && paymentMethodElement.value) {\n        clearHTMLSelectChildrenFrom(issuerElement)\n        clearHTMLSelectChildrenFrom(installmentsElement)\n        paymentMethodElement.value = \"\";\n        return\n      }\n      \n      if (bin && !paymentMethodElement.value) {\n        const paymentMethods = await mp.getPaymentMethods({ bin });\n        const { id: paymentMethodId, additional_info_needed, issuer } = paymentMethods.results[0];\n        // Assign payment method ID to a hidden input.\n        paymentMethodElement.value = paymentMethodId;\n        // If 'issuer_id' is needed, we fetch all issuers (getIssuers()) from bin.\n        // Otherwise we just create an option with the unique issuer and call getInstallments().\n        additional_info_needed.includes('issuer_id') ? getIssuers(bin) : (() => {\n          const issuerElement = document.getElementById('form-checkout__issuer');\n          createSelectOptions(issuerElement, [issuer]);\n          getInstallments(bin);\n        })()\n      }\n    } catch (e) {\n      console.error('error getting payment methods: ', e)\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Zero Dollar Authentication Request with MercadoPago API\nDESCRIPTION: Example of implementing Zero Dollar Authentication (ZDA) for card validation using MercadoPago's API. Shows how to validate cards without charging actual amounts.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.es.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Card-Validation: card_validation' \\\n--data-raw '{\n    \"token\": \"TOKEN\",\n    \"payment_method_id\": \"master\",\n    \"payer\": {\n        \"id\": \"{{customer_id}}\",\n        \"type\" : \"customer\",\n    },\n    \"description\": \"validação de cartão com valor zero dollar\",\n    \"transaction_amount\": 0\n}'\n```\n\n----------------------------------------\n\nTITLE: Rendering Status Screen Brick for 3DS Challenge\nDESCRIPTION: Shows how to integrate Status Screen Brick to handle 3DS authentication challenge, including payment ID and additional 3DS information\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/how-to-integrate-3ds.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst renderStatusScreenBrick = async (bricksBuilder) => {\n const settings = {\n   initialization: {\n     paymentId: \"<PAYMENT_ID>\",\n     additionalInfo: {\n       externalResourceURL: \"<EXTERNAL_RESOURCE_URL>\",\n       creq: \"<C_REQ>\",\n     },\n   },\n   callbacks: {\n     onReady: () => {},\n     onError: (error) => {\n       console.error(error);\n     },\n   },\n };\n window.statusScreenBrickController = await bricksBuilder.create(\n   \"statusScreen\",\n   \"statusScreenBrick_container\",\n   settings\n );\n};\nrenderStatusScreenBrick(bricksBuilder);\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet Preference in Javascript\nDESCRIPTION: This snippet demonstrates how to create a preference in a callback function when the Wallet Brick button is clicked. It sets up the necessary settings for the Brick and includes error handling for network requests.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/create-preference-submit.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nconst renderWalletBrick = async (bricksBuilder) => {\n  const settings = {\n    callbacks: {\n      onSubmit: (formData) => {\n        // callback called when clicking on Wallet Brick\n        // this is possible because Brick is a button\n        // at this submission moment, you should create the preference\n        const yourRequestBodyHere = {\n          items: [\n            {\n              id: '202809963',\n              title: 'Dummy title',\n              description: 'Dummy description',\n              quantity: 1,\n              unit_price: 10,\n            },\n          ],\n          purpose: 'wallet_purchase',\n        };\n        return new Promise((resolve, reject) => {\n          fetch('/create_preference', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(formData),\n          })\n            .then((response) => response.json())\n            .then((response) => {\n              // resolve the promise with the preference ID\n              resolve(response.preference_id);\n            })\n            .catch((error) => {\n              // handle the error response when attempting to create the preference\n              reject();\n            });\n        });\n      },\n    },\n  };\n  window.walletBrickController = await bricksBuilder.create(\n    'wallet',\n    'walletBrick_container',\n    settings,\n  );\n};\nrenderWalletBrick(bricksBuilder);\n```\n\n----------------------------------------\n\nTITLE: Launching Camera Scanner for QR and Barcode in Kotlin\nDESCRIPTION: This snippet demonstrates how to initialize and launch the camera scanner for both QR codes and barcodes using Kotlin. It uses the MPManager.cameraScanner object and the launchScanner method with callbacks to handle success and error cases.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/camscanner-callback.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval cameraScanner = MPManager.cameraScanner\n/**\n* iniciar câmera para escanear código QR\n**/\ncameraScanner.launchScanner(ScanType.CAMERA_SCANNER_QR) { response ->\n   response\n       .doIfSuccess { result -> // Manuseio do resultado de sucesso do scanner result.message } \n\n       .doIfError { error -> // Manuseio do erro resultante do scanner error.message.orEmpty() }\n\n}\n\n/**\n* iniciar câmera para escanear código de barras\n**/\n\ncameraScanner.launchScanner(ScanType.CAMERA_SCANNER_BARCODE) { response ->\n   response\n       .doIfSuccess { result -> // Manuseio do resultado de sucesso do scanner result.message } \n\n       .doIfError { error -> // Manuseio do erro resultante do scanner error.message.orEmpty() }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Report Field Documentation\nDESCRIPTION: The code block defines fields and descriptions for various financial report components, showing the structure of financial calculations and balance tracking.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/how-to-use.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Report field | Description |\n| --- | --- |\n| Initial Available Balance |<br/> Initial balance. Indicates the amount available on the initial date of the period you selected for reconciliation. <br/><br/>|\n| Release |<br/>Details of releases of money, including the initial balance and transactions impacting the total balance. <br/><br/> |\n| Block | <br/>Money blocks due to disputes.<br/><br/> |\n| Unblock |<br/> Unblocks after dispute resolution.<br/><br/>|\n| Subtotal | <br/>Sum of transactions within each section.<br/><br/>|\n| Total| <br/> Final result composed of the sum of all subtotals. <br/><br/>In other words:<br/> subtotal `Release` + subtotal `Block` + subtotal `Unblock` = total result. <br/><br/>It is the difference between the total credited net amount and the total debited net amount. |\n```\n\n----------------------------------------\n\nTITLE: Creating PSE Payment with MercadoPago in Java\nDESCRIPTION: This Java code snippet demonstrates how to create a PSE payment using MercadoPago SDK. It includes setting up payer information, transaction details, and additional data required for PSE transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-migrate-pse.en.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  PaymentClient client = new PaymentClient();\n\n  IdentificationRequest identification =\n  \tIdentificationRequest.builder()\n  \t.type(request.getIdentificationType())\n  \t.number(request.getIdentificationNumber())\n  \t.build();\n\n  PaymentPayerAddressRequest address =\n      PaymentPayerAddressRequest.builder()\n      .zipCode(request.getZipCode())\n      .streetName(request.getStreetName())\n      .streetNumber(request.getStretNumber())\n      .neighborhood(request.getNeighborhood())\n      .city(request.getCity())\n      .federalUnit(request.getFederalUnit())\n      .build();\n\n  PaymentPayerPhoneRequest phone =\n      PaymentPayerPhoneRequest.builder()\n      .areaCode(request.getPhoneAreaCode())\n      .number(request.getPhoneNumber())\n      .build();\n\n  PaymentPayerRequest payer =\n  \tPaymentPayerRequest.builder()\n  \t.email(request.getEmail())\n  \t.entityType(\"individual\")\n  \t.identification(identification)\n      .address(address)\n      .phone(phone)\n  \t.build();\n\n  PaymentAdditionalInfoRequest additionalInfo =\n  \tPaymentAdditionalInfoRequest.builder()\n  \t.ipAddress(\"127.0.0.1\")\n  \t.build();\n\n  PaymentTransactionDetailsRequest transactionDetails = PaymentTransactionDetailsRequest.builder()\n  \t.financialInstitution(request.getFinancialInstitution())\n  \t.build();\n\n  PaymentCreateRequest paymentCreateRequest = PaymentCreateRequest.builder()\n  \t.transactionAmount(new BigDecimal(5000))\n  \t.description(\"Product description\")\n  \t.paymentMethodId(\"pse\")\n  \t.additionalInfo(additionalInfo)\n  \t.transactionDetails(transactionDetails)\n  \t.notificationUrl(\"https://your-site.com\")\n  \t.payer(payer)\n  \t.build();\n\n  client.create(paymentCreateRequest);\n```\n\n----------------------------------------\n\nTITLE: Implementing POS Balance Loading Intent Function\nDESCRIPTION: Android implementation of shareRDCPass function that handles balance loading transactions. Includes configuration for transaction amount, payment type, and balance loading flags.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-load-money.es.md#2025-04-18_snippet_1\n\nLANGUAGE: android\nCODE:\n```\npublic void shareRDCPass(String total, String intent, Boolean esCarga) { \n\ttry { \n\t\tIntent sharingIntent = new Intent(intent); \n\t\tsharingIntent.setClassName(\"redelcom.cl.rdcpass\", \"redelcom.cl.rdcpass.MainActivity\");  \n\t\tsharingIntent.putExtra(\"packageName\", getPackageName()); \n\t\tsharingIntent.putExtra(\"className\", getClass().toString().split(\" \")[1]); \n\t\tsharingIntent.putExtra(Intent.EXTRA_TEXT, total); \n\t\tif (esCarga){ \n\t\t\tsharingIntent.putExtra(\"recargaSaldo\", true); \n\t\t\tsharingIntent.putExtra(\"payment_type\", \"TARJETA\"); \n\t\t} \n\t\tstartActivity(sharingIntent); \n\t} catch (Exception e) { \n\t\te.printStackTrace(); \n\t} \n}\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Multiple Items - Ruby\nDESCRIPTION: This Ruby snippet shows how to create a MercadoPago preference with multiple items. It initializes the MercadoPago SDK, creates a preference data hash with an array of item hashes, each including title, quantity, currency, and unit price, and then uses the SDK to create the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n# Create preference data with items\npreference_data = {\n  items: [\n    {\n      title: 'Meu produto 1',\n      quantity: 1,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 75.56\n    },\n    {\n      title: 'Meu produto 2',\n      quantity: 2,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 96.56\n    }\n  ]\n}\n\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Updated Payment Processing with MercadoPago using CURL\nDESCRIPTION: This CURL command allows users to create payments by sending a POST request to the MercadoPago API with all required payment data and authorization in the headers. Replace placeholder values with actual credentials and parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.en.md#2025-04-18_snippet_12\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/payments' \\\n    -d '{\n          \"transaction_amount\": 100,\n          \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n          \"description\": \"Blue shirt\",\n          \"installments\": 1,\n          \"payment_method_id\": \"visa\",\n          \"issuer_id\": 310,\n          \"payer\": {\n            \"email\": \"test@test.com\"\n          }\n    }'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Link in Info.plist\nDESCRIPTION: XML configuration for defining custom URL schemes in iOS application's Info.plist file to enable deep linking functionality.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/swift.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<dict>\n     …\n\t<key>CFBundleURLTypes</key>\n\t<array>\n\t\t<dict>\n\t\t\t<key>CFBundleTypeRole</key>\n\t\t\t<string>Editor</string>\n\t\t\t<key>CFBundleURLName</key>\n\t\t\t<string>your_identifier_here</string>\n\t\t\t<key>CFBundleURLSchemes</key>\n\t\t\t<array>\n\t\t\t\t<string>iosapp</string>\n\t\t\t</array>\n\t\t</dict>\n\t</array>\n    …\n\t\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Initializing Checkout Elements - JavaScript\nDESCRIPTION: This JavaScript snippet initializes the checkout by setting the PSE options and updating the document types when the page finishes loading.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-migrate-pse.en.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n(function initCheckout() {\n    try {\n        const docTypeElement = document.getElementById('form-checkout__identificationType');\n        setPse();\n        updateSelectOptions('natural')\n    }catch(e) {\n        return console.error('Error getting identificationTypes: ', e);\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Downloading Files Using SFTP Console in Terminal\nDESCRIPTION: This code snippet demonstrates how to download files using manual SFTP commands in the terminal. It requires an established SFTP connection to the Mercado Libre server. The snippet includes navigating directories, listing files, and downloading a specific file. Prerequisites include SFTP access credentials and directory paths. Input involves directory and file commands, and the output is the retrieved file.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/download-a-file.en.md#2025-04-18_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nUY0FVFGW103Q05P:~ user$ cd $HOME/demo\nUY0FVFGW103Q05P:~ user$ ls\nUY0FVFGW103Q05P:~ user$ sftp pg_sap@sftp-qa.mercadolibre.io\nConnected to sftp-qa.mercadolibre.io.\nsftp> ls\nselfserviceinput\tselfserviceoutput\nsftp> cd selfserviceoutput\nsftp> ls\nreport_589_216_20230804.zip\tresult_589_6_20230804.zip\nsftp> get result_589_216_20230804.zip\nFetching /selfserviceoutput/result_589_6_20230804.zip to result_589_6_20230804.zip\n/selfserviceoutput/result_589_6_20230804.zip\n/Users/user/debt_589_6_20230804.zip\nsftp> bye\nUY0FVFGW103Q05P:~ demo user$ ls\nreport_589_216_20230804.zip result_589_6_20230804.zip\n```\n\n----------------------------------------\n\nTITLE: Renovando Access Token con Java en Mercado Pago\nDESCRIPTION: Este código Java muestra cómo renovar un Access Token utilizando la clase OauthClient. Se crea una instancia del cliente y se llama al método createCredential con el refresh token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/renewal.es.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nOauthClient client = new OauthClient();\n\nString refreshtoken = \"TG-XXXXXXXX-241983636\";\nclient.createCredential(refreshtoken, null);\n```\n\n----------------------------------------\n\nTITLE: Setting Payment Expiration Date in Python\nDESCRIPTION: Code to set the expiration date for a cash payment in Python. The date uses ISO 8601 format and must be between 1 and 30 days from the payment issue date.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n\"date_of_expiration\": \"2020-05-30T23:59:59.000-04:00\"\n```\n\n----------------------------------------\n\nTITLE: Resposta JSON para Criação de Intenção de Pagamento no RDCPass\nDESCRIPTION: Exemplo de resposta JSON para a criação de uma intenção de pagamento na integração local do RDCPass. Inclui detalhes da transação, dados de aquisição do cliente e do comerciante, e informações da boleta eletrônica.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/annex-response-examples.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"ESTADO\":\"APROBADO\",\n   \"TOTAL\":\"5566\",\n   \"PROPINA\":\"0\",\n   \"MEDIO_PAGO\":\"DEBITO\",\n   \"CODAUT\":\"388153\",\n   \"FECHA&HORA\":\"20230817&111955\",\n   \"MENSAJE_VISOR\":\"APROBADO (00)\",\n   \"DATOS_ADQUIRENCIA_CLIENTE\":{\n      \"RETAILER_ID\":\"39200562\",\n      \"FECHA&HORA\":\"20230817&111955\",\n      \"TERMINAL\":\"3261\",\n      \"NUM_TARJETA\":\"********4199\",\n      \"TOTAL\":\"5566\",\n      \"PROPINA\":\"0\",\n      \"NUM_OPER\":\"00000812\",\n      \"COD_AUTO\":\"388153\",\n      \"NUM_UNICO\":\"246636\",\n      \"TIPO_TARJETA\":\"DEBITO\",\n      \"TIPO_LECTURA\":\"E-DB\"\n   },\n   \"DATOS_ADQUIRENCIA_CLIENTE_IMPRIMIR\":\"{s}39200562 -    2.62.03          TARJETA DE DEBITO{\\/s}{br}{s}17\\/08\\/2023    11:19:55                     3261{\\/s}{br}{s}********4199    {s} E-DB{br}{s}MONTO COMPRA                              $5.566{\\/s}{br}{s}TOTAL                                    $ 5.566{\\/s}{br}{s}NUM OPER    00000812       COD AUTO       388153{\\/s}{br}{s}NUMERO UNICO                              246636{\\/s}{br}{center}{s}ACEPTO PAGAR SEGUN CONTRATO CON EMISOR{\\/s}\",\n   \"DATOS_ADQUIRENCIA_COMERCIO\":{\n      \"RETAILER_ID\":\"39200562\",\n      \"FECHA&HORA\":\"20230817&111955\",\n      \"TERMINAL\":\"3261\",\n      \"NUM_TARJETA\":\"********4199\",\n      \"TOTAL\":\"5566\",\n      \"PROPINA\":\"0\",\n      \"NUM_OPER\":\"00000812\",\n      \"COD_AUTO\":\"388153\",\n      \"NUM_UNICO\":\"246636\"\n   },\n   \"DATOS_ADQUIRENCIA_COMERCIO_IMPRIMIR\":\"{center}COMPROBANTE DE VENTA{br}{center}TARJETA DE DEBITO{br}{br}{center}{s}REDELKONG{\\/s}{br}{center}{s}TEST 2050, SANTIAGO{\\/s}{br}{center}{s} - 2.62.03{\\/s}{br}{br}{s}FECHA         HORA                     TERMINAL{\\/s}{br}{s}17\\/08\\/2023    11:19:55                     3261{\\/s}{br}{br}{s}NUMERO DE TARJETA   NUM DE CUENTA    E-DB{\\/s}{br}{s}********4199          {\\/s}{br}{s}MONTO COMPRA                              $5.566{\\/s}{br}{s}PROPINA                                       $0{\\/s}{br}{s}TOTAL                                    $ 5.566{\\/s}{br}{s}NUMERO DE OPERACION    :                00000812{\\/s}{br}{s}CODIGO DE AUTORIZACION :                  388153{\\/s}{br}{s}NUMERO UNICO :                            246636{\\/s}{br}{center}{s}ORIGINAL COMERCIO{\\/s}{br}{center}{s}ACEPTO PAGAR SEGUN CONTRATO CON EMISOR{\\/s}\",\n   \"BOLETA\":{\n      \"RUBRO\":\"VENTA AL POR MENOR DE COMPUTADORES, EQUIPO PERIFERICO, PROGRAMAS INFOR\",\n      \"DIRECCION\":\"PADRE MARIANO 391 OF 704 7P Providencia \",\n      \"SUCURSAL\":\"81228911\",\n      \"CAF\":\"12444098\",\n      \"TED1\":\"<TED version=\\\"1.0\\\"><DD><RE>13924206-8<\\/RE><TD>39<\\/TD><F>12444098<\\/F><FE>2023-08-17<\\/FE><RR>66666666-6<\\/RR><RSR>SII Boleta<\\/RSR><MNT>5566<\\/MNT><IT1>Venta<\\/IT1><CAF version=\\\"1.0\\\"><DA><RE>76123174-K<\\/RE><RS>REDELCOM S.A.<\\/RS><TD>39<\\/TD><RNG><D>1<\\/D><H>100<\\/H><\\/RNG><FA>2017-08-07<\\/FA><RSAPK><M>0ts6Ek7exNXpPnY\\/8OfC5G1k0eaK1olAfrK5Q68fD4uWdcmNetiSUyZ3pKK4uRxWJCfWB9fdG2bbFzPQqQL0MQ==<\\/M><E>Aw==<\\/E><\\/RSAPK><IDK>100<\\/IDK><\\/DA><FRMA algoritmo=\\\"SHA1withRSA\\\">Hjeprfm4y6SWTTMPx5Xd348MnV0CV5x1kLVY2mreJFms6WHlabnRZISABDqwpc9JzVQCfYVaFdVbJq6hTRUz0A==<\\/FRMA><\\/CAF><TSTED>2023-08-17T11:19:23<\\/TSTED><\\/DD><FRMT algoritmo=\\\"SHA1withRSA\\\">UYSvOH22AKI4S8D+z6E7NiCkQg3y8cR\\/Ane+m2N3mPG+nGpLBt+NmpmCudBHhn4Ujscl6tQLCur4\\no2EqibfPzg==\\n<\\/FRMT><\\/TED>\",\n      \"TED2\":\"UYSvOH22AKI4S8D+z6E7NiCkQg3y8cR\\/Ane+m2N3mPG+nGpLBt+NmpmCudBHhn4Ujscl6tQLCur4\\no2EqibfPzg==\\n\"\n   },\n   \"SALDO_TERMINAL\":\"11736999\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with PagoEfectivo\nDESCRIPTION: This PHP snippet demonstrates how to create a payment using the Mercado Pago API. It uses the PaymentClient to send a POST request with transaction details, payment method, and payer information. It requires the MercadoPago PHP SDK and sets a custom header for idempotency.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['<TRANSACTION_AMOUNT>'],\n    \"payment_method_id\" => $_POST['<PAYMENT_METHOD_ID>'],\n    \"payer\" => [\n      \"email\" => $_POST['<EMAIL>']\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n\n```\n\n----------------------------------------\n\nTITLE: Service Response for Order Not Available\nDESCRIPTION: JSON response when order information is not yet available, returned with HTTP 202 status code\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/hidden-qr-unattended-part-b.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": {\n    \"status_detail\": \"<STATUS_DETAIL_TYPE>\",\n    \"message\": \"<MESSAGE>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Unauthorized Cross Border Account in Mercado Pago\nDESCRIPTION: This snippet shows the error response returned when attempting to use Cross Border features with a Mercado Pago account that is not configured for Cross Border operations. The API returns a 400 status with a specific error code.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.en.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"not allowed\",\n    \"error\": \"cbt_not_allowed\",\n    \"status\": 400,\n    \"cause\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Bad Request Error Response (Invalid Coupon ID)\nDESCRIPTION: This JSON response represents a 'Bad Request' error (status code 400), indicating that the `coupon_id` sent in the request is invalid. It includes a specific error message related to the invalid coupon ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/coupon-validation-responses.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"bad_request\",\n  \"message\": \"Invalid coupon_id.\",\n  \"status\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Making In-Person Payment Request with Mercado Pago API using cURL\nDESCRIPTION: This cURL command demonstrates how to make a POST request to Mercado Pago's Secure Payments API for processing an in-person payment using an MPOST device. It includes encrypted card information and device-specific data in the request body.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/secure_payments/integration.en.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl - X POST\\ -\n  H 'X-Caller-Scopes: payments'\\ -\n  H 'accept: application/json'\\ -\n  H 'Authorization: Bearer YOUR_ACCESS_TOKEN'\\ -\n  -H 'X-Caller-Scopes: payments'\\ -\n  -d '{\n\"binary_mode\": true,\n\"capture\": true,\n\"card_present\":\n{\n  \"card_data_entry_mode\": \"2\",\n  \"card_sequence_number\": \"02\",\n  \"track2\": \"107547ee4bad13deb793c8f04ddc4a70c88913e2680856c38f8f48b4a5ab64c213d0512428a73f6d\",\n  \"ksn\": \"0d040b76543210e001f8\",\n  \"icc_related_data\": \"5010414D45524943414E204558505245535382025C008408A0000000250108018E180000000000000000420141035E035F0300000000000000008F01C9950502000080009A032011199B02E8009C010091005F201041454950532032332F56455220322E305F24032412315F25031711015F2A0209865F300202015F3401029F02060000000033009F03060000000000009F0608A0000000250108019F0702FF009F090200019F0D05FC50ECA8009F0E0500000000009F0F05FC78FCF8009F100706020103A400009F160F4D45524348414E54303030303030319F1A0200769F1C085445524D303030319F1E0830373030303034319F26087F490A8F139D58BA9F2701809F3303E0F0E89F34034103029F3501229F360204019F37049325DA479F4104000000019F4502DAC1\",\n  \"fallback_indicator\": false,\n  \"poi\": \"8701012007000041\",\n  \"poi_signature\": \"0c074a2b [APP_PRO2]:aa6d737ff3faef73b9c96b868a83e6f11e959950095b8045a02a9467\",\n  \"poi_type\": \"GERTEC_MP35P\",\n  \"trx_id\": \"1754288142011191155248701012007000041\",\n  \"tag\": \"chip\",\n  \"has_chip\": \"true\",\n  \"app_version\": \"1.2.1\"\n},\n\"cardholder\":\n{\n  \"name\": \"AEIPS 23/VER 2.0\"\n},\n\"security_code\": \"0000\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Customizing Brick Text Labels in JavaScript and React\nDESCRIPTION: These code snippets demonstrate how to customize text labels for general errors, card errors, and return buttons in Mercado Pago Bricks. Empty strings will use default text, while custom text will replace the default. Note that text exceeding available space will be truncated with ellipsis.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/status-screen-brick/change-texts.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    customization: {\n        visual: {\n            texts: {\n                ctaGeneralErrorLabel: \"\",\n                ctaCardErrorLabel: \"\",\n                ctaReturnLabel: \"\",\n            },\n        },\n    },\n};\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n    visual: {\n        texts: {\n            ctaGeneralErrorLabel: \"\",\n            ctaCardErrorLabel: \"\",\n            ctaReturnLabel: \"\",\n        },\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing MercadoPago.js SDK via NPM\nDESCRIPTION: The Bash snippet provides the command to install the MercadoPago.js SDK using npm. This step is essential for developers using a Node.js environment to manage dependencies.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.en.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n\n```\n\n----------------------------------------\n\nTITLE: Fixing Build Tools 32.0.0 Corruption in Android SDK\nDESCRIPTION: Terminal commands to resolve the 'Installed Build Tools revision 32.0.0 is corrupted' error by renaming d8 files to dx files in the Android SDK directory.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/restrictions.en.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/Library/Android/sdk/build-tools/32.0.0 \\\n  && mv d8 dx \\\n  && cd lib  \\\n  && mv d8.jar dx.jar\n```\n\n----------------------------------------\n\nTITLE: Adicionando Código de Segurança do Mercado Pago em HTML\nDESCRIPTION: Este snippet demonstra como adicionar o script de segurança do Mercado Pago a uma página web. O atributo 'view' deve ser substituído pelo nome da seção onde o script será adicionado, como 'home', 'search' ou 'item'. Se não houver um valor disponível para a seção, pode-se deixá-lo vazio.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/chargebacks/how-to-prevent.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"home\"></script>\n```\n\n----------------------------------------\n\nTITLE: Handling RDCPass Intent Response in Android\nDESCRIPTION: Method for processing the response from RDCPass intent, extracting account, recharge, and terminal balance information. Triggered when the intent action is 'IR_INICIO'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-query-multiservice-parameters.en.md#2025-04-18_snippet_1\n\nLANGUAGE: android\nCODE:\n```\nIntent intent = getIntent(); \nString action = intent.getAction(); \nif (\"IR_INICIO\".equals(action)) { \n    String respuestaCuentas = intent.getStringExtra(\"respuestaCuentas\"); \n    String respuestaRecargas = intent.getStringExtra(\"respuestaCompanies\"); \n    String SALDO_TERMINAL = intent.getStringExtra(\"SALDO_TERMINAL\"); \n}\n```\n\n----------------------------------------\n\nTITLE: Setting Payment Expiration Date in Node.js\nDESCRIPTION: Code to set the expiration date for a cash payment in Node.js. The date uses ISO 8601 format and must be between 1 and 30 days from the payment issue date.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_15\n\nLANGUAGE: node\nCODE:\n```\ndate_of_expiration: \"2020-05-30T23:59:59.000-04:00\",\n```\n\n----------------------------------------\n\nTITLE: Including MercadoPago.js Library - HTML\nDESCRIPTION: This code snippet demonstrates how to include the MercadoPago.js library via a script tag in the HTML body to enable the card payment functionality.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago Card Form (MLA, MLU, MPE, MCO, MLB)\nDESCRIPTION: This JavaScript code snippet initializes the Mercado Pago card form with specific configurations for the MLA, MLU, MPE, MCO, and MLB regions. It defines the form's structure, including the ID and placeholder for each input field (card number, expiration date, etc.). The `onSubmit` callback captures the card form data, including the token, and sends it to the `/process_payment` endpoint for payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.es.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n\n    const cardForm = mp.cardForm({\n      amount: \"100.5\",\n      iframe: true,\n      form: {\n        id: \"form-checkout\",\n        cardNumber: {\n          id: \"form-checkout__cardNumber\",\n          placeholder: \"Numero de tarjeta\",\n        },\n        expirationDate: {\n          id: \"form-checkout__expirationDate\",\n          placeholder: \"MM/YY\",\n        },\n        securityCode: {\n          id: \"form-checkout__securityCode\",\n          placeholder: \"Código de seguridad\",\n        },\n        cardholderName: {\n          id: \"form-checkout__cardholderName\",\n          placeholder: \"Titular de la tarjeta\",\n        },\n        issuer: {\n          id: \"form-checkout__issuer\",\n          placeholder: \"Banco emisor\",\n        },\n        installments: {\n          id: \"form-checkout__installments\",\n          placeholder: \"Cuotas\",\n        },        \n        identificationType: {\n          id: \"form-checkout__identificationType\",\n          placeholder: \"Tipo de documento\",\n        },\n        identificationNumber: {\n          id: \"form-checkout__identificationNumber\",\n          placeholder: \"Número del documento\",\n        },\n        cardholderEmail: {\n          id: \"form-checkout__cardholderEmail\",\n          placeholder: \"E-mail\",\n        },\n      },\n      callbacks: {\n        onFormMounted: error => {\n          if (error) return console.warn(\"Form Mounted handling error: \", error);\n          console.log(\"Form mounted\");\n        },\n        onSubmit: event => {\n          event.preventDefault();\n\n          const {\n            paymentMethodId: payment_method_id,\n            issuerId: issuer_id,\n            cardholderEmail: email,\n            amount,\n            token,\n            installments,\n            identificationNumber,\n            identificationType,\n          } = cardForm.getCardFormData();\n\n          fetch(\"/process_payment\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              token,\n              issuer_id,\n              payment_method_id,\n              transaction_amount: Number(amount),\n              installments: Number(installments),\n              description: \"Descripción del producto\",\n              payer: {\n                email,\n                identification: {\n                  type: identificationType,\n                  number: identificationNumber,\n                },\n              },\n            }),\n          });\n        },\n        onFetching: (resource) => {\n          console.log(\"Fetching resource: \", resource);\n\n          // Animate progress bar\n          const progressBar = document.querySelector(\".progress-bar\");\n          progressBar.removeAttribute(\"value\");\n\n          return () => {\n            progressBar.setAttribute(\"value\", \"0\");\n          };\n        }\n      },\n    });\n```\n```\n\n----------------------------------------\n\nTITLE: Unprocessable Entity Response (422)\nDESCRIPTION: This JSON snippet represents an \"Unprocessable Entity\" response (HTTP status code 422) from the Mercado Pago API. This error indicates that there is an error or missing information during payment creation, failing the idempotency process. As a result, the request is rejected.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/idempotency-returns.es.md#2025-04-18_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"status\": \"422\",\n   \"error\":  \"Unprocessable entity\",\n   \"message\": \"Idempotency key already used.\",\n   \"cause\": [\n    {\n      \"code\":\"422001\",\n      \"message\": \"Idempotency key already used.\",\n      \"data\": null\n    }\n   ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Compiling Module Dependencies\nDESCRIPTION: Command to compile the module's dependency injection configuration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/adobe-commerce/installation-composer.en.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/magento setup:di:compile\n```\n\n----------------------------------------\n\nTITLE: Creating Mercado Pago Preference in Ruby\nDESCRIPTION: This Ruby code creates a preference using the Mercado Pago SDK. It sets up the 'wallet_purchase' purpose for logged payments and includes an item with title, unit price, and quantity. The preference ID is then extracted for use in the Brick startup.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.en.md#2025-04-18_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\n# Create a preference object\npreference_data = {\n  # the purpose: 'wallet_purchase', allows only logged payments\n  # to allow guest payments you can omit this property\n  purpose: 'wallet_purchase',\n  items: [\n    {\n      title: 'Meu produto',\n      unit_price: 75, // item unit price, must be an integer.\n      quantity: 1\n    }\n  ]\n}\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n\n# This value is the preferenceId you will use in the HTML on Brick startup\n@preference_id = preference['id']\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Information API Request\nDESCRIPTION: cURL command to retrieve transaction information using the Mercado Pago API endpoint, requiring an access token and transaction ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.en.md#2025-04-18_snippet_13\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request GET 'https://api.mercadopago.com/v1/transaction-intents/{{transaction_intent_id}}' \\\n--header 'Authorization: Bearer {{access_token}}'\n```\n\n----------------------------------------\n\nTITLE: Importing Safari Services Framework in Swift\nDESCRIPTION: Import SafariServices library to enable Safari View Controller functionality in iOS applications. Required for web-based interactions and URL presentations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/swift.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport SafariServices\n```\n\n----------------------------------------\n\nTITLE: Implementing 785x40 Mercado Pago Payment Methods Banner\nDESCRIPTION: HTML code to embed a 785x40 pixel banner showing supported payment methods through Mercado Pago\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/online.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/banners/ar/medios/online/785X40.jpg\" \ntitle=\"Mercado Pago - Medios de pago\" alt=\"Mercado Pago - Medios de pago\" \nwidth=\"785\" height=\"40\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating an Order with MercadoPago SDK - Node.js\nDESCRIPTION: This Node.js snippet demonstrates how to create a new order using the MercadoPago SDK. The dependencies include the 'MercadoPagoConfig' and 'MerchantOrder' classes, and an access token is required for authentication. Key parameters include the external reference, preference identification, payer details, site ID, and item details. The output is the created order details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/orders.en.md#2025-04-18_snippet_0\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst merchantOrder = new MerchantOrder(client);\n\nconst item = [{\n\tid: 'item id',\n\tcategory_id: 'item category',\n\tcurrency_id: 'BRL',\n\tdescription: 'item description',\n\tpicture_url: 'item picture',\n\tquantity: 1,\n\tunit_price: 5,\n\ttitle: 'item title'\n}];\n\nconst createRequest = {\n\texternal_reference: 'default',\n\tpreference_id: 'Preference identification',\n\tpayer: {\n\t\tid: 123,\n\t\tnickname: 'JOHN'\n\t},\n\tsite_id: 'MLA',\n\titems: item,\n\tapplication_id: '10000000000000000'\n};\n\nmerchantOrderClient.create({ body: createRequest }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Setting Statement Descriptor in JSON\nDESCRIPTION: This code snippet shows how to set the `statement_descriptor` parameter in a JSON payload. The `statement_descriptor` field is used to define the name of the establishment that will be displayed on the buyer's invoice. This allows easy identification of the business and avoids unnecessary disputes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/invoice-description.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"statement_descriptor\": \"MEUNEGOCIO\"\n```\n\n----------------------------------------\n\nTITLE: Notifying HTML Readiness for Printing\nDESCRIPTION: This snippet demonstrates how to use the `notifyHtmlReadyToPrint()` function. This function is called when the HTML receipt is ready to be printed. The example shows triggering the function after an image from a service has loaded.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/point-smart-printer.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img onload=\"notifyHtmlReadyToPrint()\"\nsrc=\"https://mp.mp/code.aspx?tpcodigo=qrcode&vcodigo=abcd\">\n```\n\n----------------------------------------\n\nTITLE: Creating Mercado Pago Preference in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to create a Mercado Pago preference with a single item and sets the `purpose` to `wallet_purchase`, restricting payments to registered users. It creates a preference data hash with item details and the `wallet_purchase` purpose, then sends the request to Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-onsubmit.es.md#2025-04-18_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n\"# Crear un objeto de preferencia\\npreference_data = {\\n  # el purpose: 'wallet_purchase' solo permite pagos registrados\\n  # para permitir pagos de invitados, puedes omitir esta propiedad\\n  purpose: 'wallet_purchase',\\n  items: [\\n    {\\n      title: 'Mi producto',\\n      unit_price: 75.56,\\n      quantity: 1\\n    }\\n  ]\\n}\\npreference_response = sdk.preference.create(preference_data)\\npreference = preference_response[:response]\\n \\n# Este valor es el ID de preferencia que usará en el HTML al iniciar en Brick\\n@preference_id = preference['id']\"\n```\n\n----------------------------------------\n\nTITLE: Setting Statement Descriptor in Payment Preferences in JSON\nDESCRIPTION: This JSON snippet allows adding a statement descriptor for payment preferences. This descriptor will appear on the purchaser's card statement, helping with transaction identification. It enhances user experience by providing business identification.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"statement_descriptor\": \"MINEGOCIO\"\n```\n\n----------------------------------------\n\nTITLE: Setting Payment Notification URL in MercadoPago\nDESCRIPTION: Example of creating a payment with a notification URL configured. Demonstrates how to set up the notification_url parameter when creating a new payment across different SDK implementations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/ipn.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n   require_once 'vendor/autoload.php';\n\n   MercadoPago\\SDK::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n   $payment = new MercadoPago\\Payment();\n   $payment->transaction_amount = (float)$_POST['transactionAmount'];\n   $payment->token = $_POST['token'];\n   $payment->description = $_POST['description'];\n   $payment->installments = (int)$_POST['installments'];\n   $payment->payment_method_id = $_POST['paymentMethodId'];\n   $payment->issuer_id = (int)$_POST['issuer'];\n   $payment->notification_url = `http://requestbin.fullcontact.com/1ogudgk1`;\n   ...\n   $response = array(\n       'status' => $payment->status,\n       'status_detail' => $payment->status_detail,\n       'id' => $payment->id\n   );\n   echo json_encode($response);\n\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nvar mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nvar payment_data = {\n transaction_amount: Number(req.body.transactionAmount),\n token: req.body.token,\n description: req.body.description,\n installments: Number(req.body.installments),\n payment_method_id: req.body.paymentMethodId,\n issuer_id: req.body.issuer,\n notification_url: \"http://requestbin.fullcontact.com/1ogudgk1\",\n payer: {\n   email: req.body.email,\n   identification: {\n     type: req.body.docType,\n     number: req.body.docNumber\n   }\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Report Structure via API in Mercado Pago\nDESCRIPTION: This curl request creates a structure for marketplace seller sales reports by defining time zone, file format, and columns. The structure determines the characteristics of the generated report including column layout and separators.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/structures' \\\n--header 'Authorization: Bearer {{TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"display_timezone\": \"GMT-03\",\n    \"name\": \"My Marketplace Structure\",\n    \"file_format\": {\n        \"prefix\": \"marketplace\",\n        \"column_separator\": \";\",\n        \"decimal_separator\": \".\"\n    },\n    \"columns\": [\n        {\n            \"key\": \"COLLECTOR\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"COLLECTOR_NICKNAME\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"PAYMENT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"STATUS_DESCRIPTION\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"STATUS_DETAIL\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"PURCHASE_ORDER\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"PAYMENT_METHOD_TYPE\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"TRANSACTION_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"DATE_CREATED\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"DATE_APPROVED\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"MARKETPLACE_FEE_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"MERCADOPAGO_FEE_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"TOTAL_PAID_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"NET_RECEIVED_AMOUNT\",\n            \"alias\": \"\"\n        }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment Value with Python\nDESCRIPTION: This snippet shows how to capture a partial amount from a previously authorized payment using Python. It captures 75 units of currency from the original authorized amount.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\npayment_data = {\n    \"transaction_amount\": 75,\n    \"capture\": True\n}\n\npayment_response = sdk.payment().update(payment_id, payment_data)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Example Mercado Pago Payment Response (JSON)\nDESCRIPTION: This JSON snippet shows an example response from the Mercado Pago Payments API after creating a payment with the Boleto Bancário method. It shows the payment's `id`, `status` (pending), `status_detail` (pending_waiting_payment), and transaction details, including the `external_resource_url` which provides instructions for the payer to complete the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n[\n {\n    \"id\": 5466310457,\n    \"status\": \"pending\",\n    \"status_detail\": \"pending_waiting_payment\",\n    \"transaction_details\": {\n        \"net_received_amount\": 0,\n        \"total_paid_amount\": 100,\n        \"overpaid_amount\": 0,\n        \"external_resource_url\": \"https://www.mercadopago.com/mlb/payments/ticket/helper?payment_id=123456789&payment_method_reference_id= 123456789&caller_id=123456\",\n        \"installment_amount\": 0,\n        \"financial_institution\": null,\n        \"payment_method_reference_id\": \"1234567890\"\n    }\n }\n]\n\n```\n\n----------------------------------------\n\nTITLE: Creating Payment using MercadoPago API - Node.js\nDESCRIPTION: This Node.js example illustrates how to create a payment using the MercadoPago SDK. It initializes the MercadoPagoConfig with an access token, then uses the Payments class to construct and send a payment request with payer information and transaction details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.es.md#2025-04-18_snippet_12\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, Payments } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<YOUR_ACCESS_TOKEN>' });\nconst payments = new Payments(client);\n\npayments.create({\nbody: {\n       transaction_amount: '<TRANSACTION_AMOUNT>',\n       payment_method_id: '<PAYMENT_METHOD_ID>',\n       payer: {\n           email: '<EMAIL>',\n           first_name: '<NOMBRE>',\n           last_name: '<APELLIDO>',\n           identification:{\n               type:'<TIPO DE DOCUMENTO>',\n               number:'<NUMERO_DOCUMENTO>'\n       },\n           address:{\n               zip_code: '<CEP>',\n               city: '<CIUDAD>',\n               neighborhood: '<BARRIO>',\n               street_name: '<CALLE>',\n               street_number: '<NÚMERO>',\n               federal_unit: '<SIGLA ESTADO>'\n       }\n           }\n},\n   requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n   .then((result) => console.log(result))\n   .catch((error) => console.log(error));\n\n```\n\n----------------------------------------\n\nTITLE: Listing Settlement Reports with Mercado Pago API\nDESCRIPTION: Retrieves a list of all generated settlement reports via a GET request to the Mercado Pago API. The request requires authentication via an access token. This endpoint returns details about each report including ID, file name, and creation date.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.es.md#2025-04-18_snippet_17\n\nLANGUAGE: curl\nCODE:\n```\ncurl -G \\\n    -H 'accept: application/json' \\\n    -d 'access_token=ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/list'\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json'\n);\n$data = array(\n    'access_token' => 'ENV_ACCESS_TOKEN'\n);\n$response = Requests::get('https://api.mercadopago.com/v1/account/settlement_report/list', $headers, $data);\n```\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report/list\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"GET\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = { \n    'accept': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\nresponse = requests.get('https://api.mercadopago.com/v1/account/settlement_report/list', headers=headers)\n```\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\nvar headers = { 'accept': 'application/json'};\nvar dataString = 'access_token=ENV_ACCESS_TOKEN';\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report/list',\n    method: 'GET',\n    headers: headers,\n    body: dataString\n};\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Error Codes and Descriptions\nDESCRIPTION: A markdown table listing error codes, their descriptions, and causes for various content-level controls in payment processing. It includes validation checks for required fields, date formats, amount validations, and specific country requirements.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/validations.es.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Código de error | Descripción                                                                         | Causa                                                                                      |\n|-----------------|-------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------|\n| E001            | Field {fieldname} not present                                                       | Uno de los campos requeridos no está presente.                                              |\n| E002            | Invalid format in field {fieldname}                                                 | Uno de los campos cargados no respeta el formato indicado.                                  |\n| E003            | Due last date must be after today                                                   | La fecha de vencimiento debe ser posterior a la actual.                                     |\n| E004            | Second Due date must be after first due date                                        | La segunda fecha de vencimiento debe ser posterior a la primera.                            |\n| E005            | Third Due date must be after second due date                                        | La tercera fecha de vencimiento debe ser posterior a la segunda.                            |\n| E006            | Second due date is missing                                                          | Existe el importe del segundo vencimiento, pero falta la segunda fecha de vencimiento.      |\n| E007            | First Due amount not present or is not greater than 0                               | Falta el importe del primer vencimiento.                                                    |\n| E008            | Second Due amount not present or is not greater than 0                              | Existe fecha de segundo vencimiento, pero falta el importe del segundo vencimiento.         |\n| E009            | Third Due amount not present or is not greater than 0                               | Existe fecha de tercer vencimiento, pero falta el importe del tercer vencimiento.           |\n| E010            | Amount has decimals, only integers are allowed                                      | Para Chile y Colombia. Alguno de los montos contiene decimales, y no están permitidos.                                  |\n| E012            | Reason length must be less than or equal to 100                                     | El campo `motivo` supera los 100 caracteres.                                                |\n| E013            | External Reference length must be less than or equal to 50                          | El campo `reference` supera los 50 caracteres.                                             |\n| E014            | Tax must be 0, 5 or 19                                                              | Para Colombia. Valores de `taxes` deben ser del listado de valores posibles.                  |\n```\n\n----------------------------------------\n\nTITLE: Refunding with Mercado Pago in PHP\nDESCRIPTION: This PHP snippet demonstrates how to set the access token, instantiate the PaymentRefundClient, and create a refund for a specified payment ID. It includes basic error handling and outputs the refund ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentRefundClient;\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n  \n  $client = new PaymentRefundClient();\n  $refund = $client->refund($payment_id, 20);\n  echo $refund->id;\n?>\n```\n\n----------------------------------------\n\nTITLE: Generating Public and Private Keys in Linux/MacOS\nDESCRIPTION: OpenSSL command to generate public and private encryption keys for secure Mercado Pago transactions. Creates two files: mpprivate.pem and mppublic.pem for secure key management.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/encryption.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nopenssl genpkey -algorithm ed25519 -out mpprivate.pem && \nopenssl pkey -in mpprivate.pem -pubout -out mppublic.pem\n```\n\n----------------------------------------\n\nTITLE: Run Tests\nDESCRIPTION: This command executes the unit tests for the Mercado Pago SDK using the `unittest` module. It discovers and runs all tests located in the `tests/` directory.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.es.md#2025-04-18_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m unittest discover tests/\n```\n\n----------------------------------------\n\nTITLE: Creating PSE Payment in Ruby with Mercado Pago\nDESCRIPTION: Ruby implementation for processing PSE payments with Mercado Pago SDK. This code shows how to set up custom headers with idempotency key and create the payment request object with all required payer information and financial institution details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pse.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\nrequest_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\nbody = {\n  transaction_amount: 5000,\n  description: \"Product description\",\n  payment_method_id: \"pse\",\n  callback_url: \"https://your-site.com\",\n  notification_url: \"https://your-site.com\",\n  additional_info: {\n    ip_address: \"127.0.0.1\"\n  },\n  transaction_details: {\n    financial_institution: params[:financialInstitution]\n  },\n  payer: {\n    email: params[:email],\n    entity_type: \"individual\",\n    first_name: params[:firstName],\n    last_name: params[:lastName],\n    identification: {\n      type: params[:identificationType],\n      number: params[:identificationNumber]\n    }\n    address: {\n      zip_code: params[:zipCode],\n      street_name: params[:streetName],\n      street_number: params[:streetNumber],\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Identification Types with cURL for PSE Payments\nDESCRIPTION: cURL command to fetch available identification types from Mercado Pago's API, which is needed to validate the payer.identification.type field in PSE payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-migrate-pse.en.md#2025-04-18_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\ \n'https://api.mercadopago.com/v1/identification_types' \\ \n-H 'Authorization: Bearer **YOUR_PUBLIC_KEY**'\n```\n\n----------------------------------------\n\nTITLE: Executing Full Refund Using MercadoPago API in curl\nDESCRIPTION: This snippet demonstrates how to send a POST request to the MercadoPago API to refund the full amount of an advanced payment. It requires an endpoint URL and appropriate headers like 'Authorization', 'X-Idempotency-Key'. No request body is needed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/refund-full-amount.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n'https://api.mercadopago.com/v1/advanced_payments/ADVANCED_PAYMENT_ID/refunds' \\\n  -H 'X-Idempotency-Key: IDEMPOTENCY-KEY' \\\n  -H 'Authorization: Bearer ACCESS_TOKEN' \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Webhook Notification Response Structure in JSON\nDESCRIPTION: Example of a webhook notification response body received by the server after a payment event. Contains payment action, API version, data ID, creation date, and other relevant information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"payment.updated\",\n  \"api_version\": \"v1\",\n  \"data\": {\n    \"id\": \"123456\"\n  },\n  \"date_created\": \"2021-11-01T02:02:02Z\",\n  \"id\": \"123456\",\n  \"live_mode\": false,\n  \"type\": \"payment\",\n  \"user_id\": 724484980\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Transaction Date Hiding Configuration\nDESCRIPTION: Demonstrates the customization object for hiding transaction date in a React component using Mercado Pago Brick\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/status-screen-brick/hide-transaction-date.es.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n   hideTransactionDate: true\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Available Payments for MLA\nDESCRIPTION: This section specifies the available payment methods for the MLA region when using Mercado Pago with Tiendanube. It includes credit cards, debit cards, Mercado Pago balance, Efectivo, ATM, and installment payments without a card.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/nuvemshop/landing.en.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"available_payments: credit, debit, mercadopago, efectivo, atm, cuotas_sin_tarjeta\"\n```\n\n----------------------------------------\n\nTITLE: Capturing Total Payment Value with Go\nDESCRIPTION: This code demonstrates how to create and then capture a payment using Go. It shows both the payment creation with capture set to false and the subsequent capture operation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/payment\"\n)\n\nfunc main() {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := payment.NewClient(cfg)\n\n\t// Create payment.\n\trequest := payment.Request{\n\t\tTransactionAmount: 105.1,\n\t\tPayer: &payment.PayerRequest{\n\t\t\tEmail: \"{{EMAIL}}\",\n\t\t},\n\t\tToken:        \"{{CARD_TOKEN}}\",\n\t\tInstallments: 1,\n\t\tCapture:      false,\n\t}\n\n\tresource, err := client.Create(context.Background(), request)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\t// Capture.\n\tresource, err = client.Capture(context.Background(), resource.ID)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Error Code Table in Markdown\nDESCRIPTION: This snippet defines a markdown table listing error codes, their descriptions, and causes for various content control validations in Self Service processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/validations.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Error code | Description                                      | Cause                                                                                     |\n|------------|--------------------------------------------------|-------------------------------------------------------------------------------------------|\n| E001       | Field {fieldname} not present                   | One of the required fields is not present.                                                 |\n| E002       | Invalid format in field {fieldname}             | One of the fields does not respect the indicated format.                                   |\n| E003       | Due last date must be after today               | The due date must be after the current date.                                               |\n| E004       | Second Due date must be after first due date    | The second due date must be after the first.                                               |\n| E005       | Third Due date must be after second due date    | The third due date must be after the second.                                               |\n| E006       | Second due date is missing                      | The second due amount is present, but the second due date is missing.                      |\n| E007       | First Due amount not present or is not greater than 0 | The first due amount is missing or not greater than 0.                                      |\n| E008       | Second Due amount not present or is not greater than 0 | The second due date is present, but the second due amount is missing.                       |\n| E009       | Third Due amount not present or is not greater than 0 | The third due date is present, but the third due amount is missing.                         |\n| E010       | Amount has decimals, only integers are allowed  | For Chile and Colômbia. Some of the amounts contain decimals.                                   |\n| E012       | Reason length must be less than or equal to 100 | The `reason` field exceeds 100 characters.                                                 |\n| E013       | External Reference length must be less than or equal to 50 | The `reference` field exceeds 50 characters.                                               |\n| E014       | Tax must be 0, 5 or 19                          | For Colombia. `taxes` values must be from the list of possible values.                         |\n```\n\n----------------------------------------\n\nTITLE: Modifying Report Structure using PUT Request in MercadoPago API\nDESCRIPTION: This curl command demonstrates how to modify an existing report structure using a PUT request to the MercadoPago API. It includes parameters for timezone, name, file format, and columns.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/modifications.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request PUT 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/structures/{{structure_id}}' \\\n--header 'Authorization: Bearer {{TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n\n    \"display_timezone\": \"GMT-05\",\n    \"name\": \"Structure 2 marketplace\",\n    \"file_format\": {\n        \"prefix\": \"mkp-\",\n        \"column_separator\": \";\",\n        \"decimal_separator\": \".\"\n    },\n    \"columns\": [\n        {\n            \"key\": \"COLLECTOR\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"COLLECTOR_NICKNAME\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"PAYMENT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"STATUS_DESCRIPTION\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"STATUS_DETAIL\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"PURCHASE_ORDER\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"PAYMENT_METHOD_TYPE\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"TRANSACTION_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"DATE_CREATED\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"DATE_APPROVED\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"MARKETPLACE_FEE_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"MERCADOPAGO_FEE_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"TOTAL_PAID_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"NET_RECEIVED_AMOUNT\",\n            \"alias\": \"\"\n        }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing MercadoPago Banner - 575x40px\nDESCRIPTION: HTML code to embed a 575x40 pixel MercadoPago payment methods banner showing 9 interest-free installments option.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/nove.en.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/PSJ/575x40_banner_psj_9x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"575\" height=\"40\"/>\n```\n\n----------------------------------------\n\nTITLE: Payment Intent Response Example\nDESCRIPTION: Example JSON response containing payment status, transaction details, and acquirer data including customer and merchant voucher information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/api-query-payment-intent.es.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"ESTADO\": \"APROBADO\",\n   \"TOTAL\": \"46900\",\n   \"PROPINA\": \"0\",\n   \"MEDIO_PAGO\": \"DEBITO\",\n   \"CODAUT\": \"231403\",\n   \"FECHA&HORA\": \"20230905&214300\",\n   \"MENSAJE_VISOR\": \"APROBADO (00)\",\n   \"DATOS_ADQUIRENCIA_CLIENTE\": {\n       \"RETAILER_ID\": \"61000010\",\n       \"FECHA&HORA\": \"20230905&214300\",\n       \"TERMINAL\": \"102\",\n       \"NUM_TARJETA\": \"********5706\",\n       \"TOTAL\": \"46900\",\n       \"PROPINA\": \"0\",\n       \"NUM_OPER\": \"00000108\",\n       \"COD_AUTO\": \"231403\",\n       \"NUM_UNICO\": \"255207\",\n       \"TIPO_TARJETA\": \"DEBITO\",\n       \"TIPO_LECTURA\": \"C-DB\"\n   },\n   \"DATOS_ADQUIRENCIA_CLIENTE_IMPRIMIR\": \"{s}61000010 -    2.62.03          TARJETA DE DEBITO{/s}{br}{s}05/09/2023    21:43:00                      102{/s}{br}{s}********5706    {s} C-DB{br}{s}MONTO COMPRA                             $46.900{/s}{br}{s}TOTAL                                   $ 46.900{/s}{br}{s}NUM OPER    00000108       COD AUTO       231403{/s}{br}{s}NUMERO UNICO                              255207{/s}{br}{center}{s}ACEPTO PAGAR SEGUN CONTRATO CON EMISOR{/s}\",\n   \"DATOS_ADQUIRENCIA_COMERCIO\": {\n       \"RETAILER_ID\": \"61000010\",\n       \"FECHA&HORA\": \"20230905&214300\",\n       \"TERMINAL\": \"102\",\n       \"NUM_TARJETA\": \"********5706\",\n       \"TOTAL\": \"46900\",\n       \"PROPINA\": \"0\",\n       \"NUM_OPER\": \"00000108\",\n       \"COD_AUTO\": \"231403\",\n       \"NUM_UNICO\": \"255207\"\n   },\n   \"DATOS_ADQUIRENCIA_COMERCIO_IMPRIMIR\": \"{center}COMPROBANTE DE VENTA{br}{center}TARJETA DE DEBITO{br}{br}{center}{s}REDELCOM{/s}{br}{center}{s}COYANCURA 2241, SANTIAGO{/s}{br}{center}{s}61000010 - 2.62.03{/s}{br}{br}{s}FECHA         HORA                     TERMINAL{/s}{br}{s}05/09/2023    21:43:00                      102{/s}{br}{br}{s}NUMERO DE TARJETA   NUM DE CUENTA    C-DB{/s}{br}{s}********5706          {/s}{br}{s}MONTO COMPRA                             $46.900{/s}{br}{s}PROPINA                                       $0{/s}{br}{s}TOTAL                                   $ 46.900{/s}{br}{s}NUMERO DE OPERACION    :                00000108{/s}{br}{s}CODIGO DE AUTORIZACION :                  231403{/s}{br}{s}NUMERO UNICO :                            255207{/s}{br}{center}{s}ORIGINAL COMERCIO{/s}{br}{center}{s}ACEPTO PAGAR SEGUN CONTRATO CON EMISOR{/s}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resposta JSON para Consulta de Pagamento de Contas no RDCPass\nDESCRIPTION: Exemplo de resposta JSON para consulta de pagamento de contas na integração local do RDCPass. Inclui status da resposta, código de autorização e lista de contas que podem ser pagas.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/annex-response-examples.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \n \"estatus\":\"OK\", \n \"codaut\":\"00112233445566778899aabbccddeeff\",  \"id_tx\":\"\", \n \"saldo\":-1, \n \"datos\":[ \n { \n \"rubro\":\"HIPOTECARIOS\", \n \"meta_rubro\":\"SERVICIOS FINANCIEROS\",  \"rubro_id\":12, \n \"descripcion\":\"\", \n \"nombre\":\"Compania 1 - PLAN Q\", \n \"company\":\"COMPANIA1\", \n \"datos_captura\":\"0=NUMERO DE RUT=2\",  \"id\":6151, \n \"id_tarjeta\":40 \n}, \n { \n \"rubro\":\"HIPOTECARIOS\", \n \"meta_rubro\":\"SERVICIOS FINANCIEROS\",  \"rubro_id\":12, \n \"descripcion\":\"\", \n \"nombre\":\"Leasing en Compania 12\",  \"company\":\"COMPANIA12\", \n \"datos_captura\":\"0=NUMERO DE RUT=2\",  \"id\":6152, \n \"id_tarjeta\":40 \n }, \n... \n ], \n \"mensaje\":\"Carga de Cuentas Recaudaciones  Exitosa\" \n} \n```\n\n----------------------------------------\n\nTITLE: Initializing Rapipago/Pago Fácil Payment Forms with Complete Payer Data in React\nDESCRIPTION: React implementation to pre-populate all payer fields for Rapipago and Pago Fácil payments in Argentina. Includes personal information, identification, email, and full address details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/initialize-data-on-the-bricks.en.md#2025-04-18_snippet_7\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst initialization = {\n ...,\n payer: {\n   firstName: '<PAYER_FIRST_NAME_HERE>',\n   lastName: '<PAYER_LAST_NAME_HERE>',\n   identification: {\n    \"type\": \"<PAYER_DOC_TYPE_HERE>\",\n    \"number\": \"<PAYER_DOC_NUMBER_HERE>\",\n   },\n   email: '<PAYER_EMAIL_HERE>',\n   address: {\n     zipCode: '<PAYER_ZIP_CODE_HERE>',\n     federalUnit: '<PAYER_FED_UNIT_HERE>',\n     city: '<PAYER_CITY_HERE>',\n     neighborhood: '<PAYER_NEIGHBORHOOD_HERE>',\n     streetName: '<PAYER_STREET_NAME_HERE>',\n     streetNumber: '<PAYER_STREET_NUMBER_HERE>',\n     complement: '<PAYER_COMPLEMENT_HERE>',\n   }\n },\n};\n```\n\n----------------------------------------\n\nTITLE: Available Payments for MCO\nDESCRIPTION: This section specifies the available payment methods for the MCO region when using Mercado Pago with Tiendanube. It includes credit cards, debit cards, Mercado Pago balance, Efectivo, and ATM.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/nuvemshop/landing.en.md#2025-04-18_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"available_payments: credit, debit, mercadopago, efectivo, atm\"\n```\n\n----------------------------------------\n\nTITLE: Enviando Documentação para Disputa via API do Mercado Pago (cURL)\nDESCRIPTION: Este snippet demonstra como enviar documentos para uma disputa de contestação usando a API do Mercado Pago. Permite o upload de múltiplos arquivos (PNG, JPG, PDF) com limite total de 10MB. Requer um ACCESS_TOKEN válido e o ID da contestação.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/chargebacks/how-to-manage.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST  \\\n-F 'files[]=@/path/to/file/file1.png' \\\n-F 'files[]=@/path/to/file/file2.pdf' \\\n-H 'Authorization: Bearer <ACCESS_TOKEN>' \\\nhttps://api.mercadopago.com/v1/chargebacks/ID/documentation\n```\n\n----------------------------------------\n\nTITLE: MercadoPago Banner Implementation - 120x600px\nDESCRIPTION: HTML code for displaying a 120x600 pixel MercadoPago payment methods banner. The image shows 12 interest-free installment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/doze.en.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/PSJ/120x600_banner_psj_12x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"120\" height=\"600\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Wallet Brick with redirectMode in JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure the Wallet Brick to open in a new page using the `redirectMode` property set to `blank`.  It defines the `settings` object which is passed to the `bricksBuilder.create` method during the Wallet Brick initialization.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/opening-mode.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nconst renderComponent = async (bricksBuilder) => {\n const settings = {\n   initialization: {\n     preferenceId: '<PREFERENCE_ID>',\n     redirectMode: 'blank'\n   }\n };\n const brickController = await bricksBuilder.create(\n   'wallet',\n   'wallet_container',\n   settings\n );\n};\nrenderComponent (bricksBuilder);\n```\n\n----------------------------------------\n\nTITLE: Test Account Configuration - Markdown Documentation\nDESCRIPTION: A snippet that appears to be a placeholder or reference to test integration documentation related to creating test users.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/test-accounts.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[TXTSNIPPET][/guides/snippets/test-integration/create-test-users]\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with wallet_purchase using cURL\nDESCRIPTION: This cURL command demonstrates how to create a preference with the `wallet_purchase` purpose using the Mercado Pago API. The command sends a POST request to the `/checkout/preferences` endpoint with a JSON payload containing the `purpose` set to `wallet_purchase` and item details.  It requires a `PROD_ACCESS_TOKEN` for authentication.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-onsubmit.en.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n'https://api.mercadopago.com/checkout/preferences' \\\n-H 'Content-Type: application/json' \\\n-H 'cache-control: no-cache' \\\n-H 'Authorization: Bearer **PROD_ACCESS_TOKEN**' \\\n-d '{\n  \"purpose\": \"wallet_purchase\",\n  \"items\": [\n      {\n          \"title\": \"My product\",\n          \"quantity\": 1,\n          \"unit_price\": 75.76\n      }\n  ]\n}'\n\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Telecommunication Companies Query\nDESCRIPTION: This JSON example shows a typical response structure when querying telecommunication companies. It contains details about available telecommunication services including mobile recharges and broadband payments, with information about payment amounts, identification requirements, and display parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/annex-response-examples.es.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \n \"estatus\":\"OK\", \n \"codaut\":\"00112233445566778899aabbccddeeff\",  \"id_tx\":\"\", \n \"saldo\":-1, \n \"datos\":[ \n { \n \"secuencia\":1, \n \"categoria_id\":\"RCEL\", \n  \n         \"montos\":\"2000&3600&5000&10000&15000& \n20000&25000\", \n \"monto_min\":\"750\", \n \"tipo_dato\":\"CEL\", \n \"usa_reimpresion\":\"1\", \n \"id\":\"EJ1FibraOptica\", \n \"largo_telefono\":9, \n \"operador\":\"EJEMPLO1\", \n \"nombre\":\"Ejemplo 1\",  \n \"monto_max\":\"25000\" \n }, \n { \n \"secuencia\":2, \n \"categoria_id\":\"RBA\", \n \"montos\":\"\", \n \"monto_min\":\"500\", \n \"tipo_dato\":\"RUT\", \n \"usa_reimpresion\":\"1\", \n \"id\":\"Ejem2Movil\", \n \"largo_telefono\":10, \n \"operador\":\"EJEMPLO2\", \n \"nombre\":\"Ejemplo 2\", \n \"monto_max\":\"45000\" \n }, \n... \n ], \n \"mensaje\":\"Carga de recargasCompany exitosa\" } \n\n```\n\n----------------------------------------\n\nTITLE: Create Mercado Pago Payment with Boleto using cURL\nDESCRIPTION: This code snippet shows how to create a payment using cURL to directly interact with the Mercado Pago API.  It sends a POST request to the `/v1/payments` endpoint with the necessary headers, including the `Authorization` header with the access token and a JSON payload containing payment details such as transaction amount, description, payment method (bolbradesco), and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_11\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/payments' \\\n    -d '{\n      \"transaction_amount\": 100,\n      \"description\": \"Título del producto\",\n      \"payment_method_id\": \"bolbradesco\",\n      \"payer\": {\n        \"email\": \"test@test.com\",\n        \"first_name\": \"Test\",\n        \"last_name\": \"User\",\n        \"identification\": {\n            \"type\": \"DNI\",\n            \"number\": \"19119119\"\n        },\n        \"address\": {\n            \"zip_code\": \"1264\",\n            \"street_name\": \"Av. Caseros\",\n            \"street_number\": \"3039\",\n            \"neighborhood\": \"Parque Patricios\",\n            \"city\": \"Buenos Aires\",\n            \"federal_unit\": \"BA\"\n        }\n      }\n    }'\n\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Shipment Details via API using curl\nDESCRIPTION: This snippet demonstrates how to create a Mercado Pago checkout preference using a curl request. It includes defining shipping details such as receiver address, zip code, state name, city name, and street number. The request also sets up back URLs, notification URL, expiration settings, item details, payer information, and payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/industry-data/additional-info.en.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/checkout/preferences' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--data-raw '{ \n    \"auto_return\": \"approved\",\n    \"back_urls\": {\n        \"failure\": \"https://www.mercadopago.com/home/failure\",\n        \"pending\": \"https://www.mercadopago.com/home/pending\",\n        \"success\": \"https://www.mercadopago.com/home/success\"\n    },\n    \"notification_url\": \"https://webhook.site/xyz\",\n    \"expires\": false,\n    \"external_reference\": \"order-123\",\n    \"date_of_expiration\": \"2025-03-12T12:58:41.425-04:00\",\n    \"items\": [\n        {\n            \"id\": \"1234\",\n            \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n            \"title\": \"Service\",\n            \"picture_url\": \"\",\n            \"description\": \"Service description\",\n            \"category_id\": \"services\",\n            \"quantity\": 1,\n            \"unit_price\": 150,\n            \"category_descriptor\":{\n                \"event_date\": \"2022-03-12T12:58:41.425-04:00\"\n            },\n        }\n    ],\n    \"payer\": {\n        \"phone\": {\n            \"area_code\": \"11\",\n            \"number\": \"[FAKER][PHONE_NUMBER][CELL_PHONE]\"\n        },\n        \"address\": {\n            \"zip_code\": \"[FAKER][ADDRESS][ZIP_CODE]\",\n            \"street_name\": \"[FAKER][ADDRESS][STREET_NAME]\",\n            \"street_number\": 1000\n        },\n        \"identification\": {\n          \"identification_type\": \"[FAKER][IDENTIFICATION][TYPE]\",\n          \"identification_number\": \"12345678\"\n        },\n        \"email\": \"john@yourdomain.com\",\n        \"name\": \"[FAKER][NAME][FIRST_NAME]\",\n        \"surname\": \"[FAKER][NAME][LAST_NAME]\",\n        \"date_created\": \"\",\n        \"authentication_type\": \"Facebook\",\n        \"registration date\": \"2015-06-02T12:58:41.425-04:00\",\n        \"is_prime_user\": false,\n        \"is_first_purchase_online\": false,\n        \"last_purchase\": \"2020-01-02T12:58:41.425-04:00\"\n    },\n    \"payment_methods\": {\n        \"excluded_payment_methods\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"default_installments\": null,\n        \"default_payment_method_id\": null,\n        \"excluded_payment_types\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"installments\": null\n    },\n    \"shipments\": {\n        \"mode\": \"not_specified\",\n        \"receiver_address\": {\n            \"zip_code\": \"[FAKER][ADDRESS][ZIP_CODE]\",\n            \"street_name\": \"[FAKER][ADDRESS][STREET_NAME]\",\n            \"city_name\": \"[FAKER][ADDRESS][CITY]\",\n            \"state_name\": \"[FAKER][ADDRESS][STATE]\",\n            \"street_number\": 1000\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Multiple Items\nDESCRIPTION: This C# code snippet demonstrates how to create a Mercado Pago preference with multiple items. It constructs a `PreferenceRequest` object and populates its `Items` property with a list of `PreferenceItemRequest` objects, each defining the item's title, quantity, currency, and unit price.  The preference is then created asynchronously using the `PreferenceClient`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Cria o request com múltiplos itens\nvar request = new PreferenceRequest\n{\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"Meu produto 1\",\n            Quantity = 1,\n            CurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\n            UnitPrice = 75.56m,\n        },\n        new PreferenceItemRequest\n        {\n            Title = \"Meu produto 2\",\n            Quantity = 2,\n            CurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\n            UnitPrice = 96.56m,\n        },\n        // ...\n    },\n};\n\n// Cria um objeto client\nvar client = new PreferenceClient();\n\n// Cria a preferência\nPreference preference = await client.CreateAsync(request);\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Settlement Report Generation with Python\nDESCRIPTION: Python implementation using the requests library to disable automatic generation of settlement reports. This code sets up the required headers and makes a DELETE request to the scheduling endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.en.md#2025-04-18_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\nresponse = requests.delete('https://api.mercadopago.com/v1/account/settlement_report/schedule', headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Available Payments for MLC\nDESCRIPTION: This section specifies the available payment methods for the MLC region when using Mercado Pago with Tiendanube. It includes credit cards, debit cards, Mercado Pago balance, Efectivo, and ATM.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/nuvemshop/landing.en.md#2025-04-18_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"available_payments: credit, debit, mercadopago, efectivo, atm\"\n```\n\n----------------------------------------\n\nTITLE: Implementing 120x240 Mercado Pago Payment Methods Banner\nDESCRIPTION: HTML code to embed a 120x240 pixel banner showing supported payment methods through Mercado Pago\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/online.en.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/banners/ar/medios/online/120X240.jpg\" \ntitle=\"Mercado Pago - Medios de pago\" alt=\"Mercado Pago - Medios de pago\" \nwidth=\"120\" height=\"240\"/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Brick Callbacks in JavaScript\nDESCRIPTION: Demonstrates setting up the onReady callback for Brick, typically used to perform actions after Brick component has finished loading\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/brand-brick/callbacks.es.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n   callbacks: {\n      onReady: () => {\n        /*\n          Callback llamado cuando Brick esté listo.\n          Aquí puedes ocultar los cargadores de tu sitio, por ejemplo.\n        */\n      },\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring OAUTH_ENABLED Metadata in AndroidManifest.xml\nDESCRIPTION: Sets up the OAUTH_ENABLED metadata in the AndroidManifest.xml file to activate the OAuth authorization protocol for using devices with different accounts.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/first-steps.es.md#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<application\n    ...>\n\n    <meta-data\n\n        android:name=\"com.mercadolibre.android.sdk.OAUTH_ENABLED\"\n        android:value=\"true\" />\n\n    <!-- Otras configuraciones de la aplicación -->\n\n</application>\n```\n\n----------------------------------------\n\nTITLE: Handling DTE Print Completion\nDESCRIPTION: Android code block for handling the completion of DTE printing operation and returning control to the integrator application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-print-dte.es.md#2025-04-18_snippet_2\n\nLANGUAGE: android\nCODE:\n```\nif (Intent.ACTION_SENDTO.equals(action)) { \n\t// Define what to do after printing the DTE \n}\n```\n\n----------------------------------------\n\nTITLE: Mercado Pago Module Configuration (MLB)\nDESCRIPTION: This snippet configures the Mercado Pago module for Tiendanube, focusing on payment options for the Brazilian market (MLB). It details Checkout Pro and Checkout Transparente (API) options, including supported payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/nuvemshop/landing.es.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"bullet_section_with_media:\\n - title: Pago\n - type: normal\n - message: Con el módulo de Mercado Pago puedes configurar pagos mediante:\n - benefit_title: Checkout Pro\n - benefit_message: Los compradores podrán pagar con una cuenta de Mercado Pago y todo el proceso de compra se realizará en nuestro entorno, lo que facilita el pago con tarjetas de débito, de crédito y otros medios de pago (Pix, boleto bancário, pago en lotería sin boleto, cuenta Mercado Pago y Linha de Crédito).\n - benefit_title: Checkout Transparente\n - benefit_message: El pago se realiza sin salir de tu tienda virtual con Pix, tarjeta de crédito y boleto bancário.\n - image: /nuvemshop/landing-2.png \"\n```\n\n----------------------------------------\n\nTITLE: Encryption Example for Bbpos Devices\nDESCRIPTION: Illustrates the encryption process for 'Bbpos' PoI devices using 3DES and CBC operation mode with KSN. Provides input data and expected output for PAN, expiration date, cardholder info, and track1 data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/secure_payments/responses.en.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Example |\n|---|\n| Track1 = A3F5E85954E0D9C992D5E1C04A60242D295945E0DD2C974C |\n| KSN = FFFF9876543210E000F9 |\n\n| Result |\n|---|\n| PAN = 4540750031789984 |\n| Expiration date = 10/2019 |\n| Cardholder = \"\" |\n| Track1 = 4540750031789984=19102016010000000000 |\n```\n\n----------------------------------------\n\nTITLE: Instantiate Mercado Pago SDK V1\nDESCRIPTION: Illustrates the instantiation of the Mercado Pago SDK in version 1 using `window.Mercadopago.setPublishableKey`. It sets the publishable key for the Mercado Pago instance, which is essential for making API requests.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n \n   window.Mercadopago.setPublishableKey(\"YOUR_PUBLIC_KEY\");\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Request for Online Platform\nDESCRIPTION: cURL request for sending a payment transaction with detailed buyer and item information to Mercado Pago API\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/applications-online-platforms.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}} \\\n--data-raw '{\n    \"transaction_amount\": 150.00,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"debvisa\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Pedido01\",\n    \"description\": \"PEDIDO NOVO\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"payer\": {\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"12345678909\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"title\": \"Serviço\",\n                \"category_id\": \"games\",\n                \"quantity\": 1,\n                \"unit_price\": 150\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_prime_user\": true,\n            \"is_first_purchase_online\": true,\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"206233-2002\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"230032\"\n            },\n            \"authentication_type\": \"Facebook\",\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: MercadoPago Banner Implementation - 575x40px\nDESCRIPTION: HTML code for displaying a 575x40 pixel MercadoPago payment methods banner. The image shows 12 interest-free installment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/doze.en.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/PSJ/575x40_banner_psj_12x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"575\" height=\"40\"/>\n```\n\n----------------------------------------\n\nTITLE: Failed Invalid Destination Account Transaction Status\nDESCRIPTION: Transaction scenario where the transaction is rejected due to incorrect destination account details. The status will be 'failed' with a status_detail of 'invalid_destination_account'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-test.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"failed\",\n  \"status_detail\": \"invalid_destination_account\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Request for Home & Deco Products\nDESCRIPTION: Comprehensive cURL request demonstrating how to submit a payment with detailed item, payer, and shipment information for Mercado Pago API\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/home-and-deco.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}} \\\n--data-raw '{...}'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"transaction_amount\": 150.00,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"payment_method_id\": \"debvisa\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Pedido01\",\n    \"description\": \"PEDIDO NOVO\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {...},\n    \"payer\": {...},\n    \"additional_info\": {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Integrator ID in Node.js for Mercado Pago SDK\nDESCRIPTION: This code snippet shows how to set the integrator ID using the Mercado Pago Node.js SDK. It allows developers to identify their integrations for metrics and benefits.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/metrics/integration-metrics.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst  requestOptions = {\n'integratorId': 'INTEGRATOR_ID',\n};\n```\n\n----------------------------------------\n\nTITLE: Defining available countries\nDESCRIPTION: This snippet defines a list of countries where the Checkout Bricks are available. The countries are represented by their ISO country codes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/landing.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n\n---available_countries: mla, mlb, mlm, mlu, mlc, mco, mpe\n---\n\n```\n\n----------------------------------------\n\nTITLE: Mercado Pago Module Configuration (MLM)\nDESCRIPTION: This snippet configures the Mercado Pago module for Tiendanube, focusing on payment options for the Mexican market (MLM). It details Checkout Pro and Checkout API options, including supported payment methods such as credit/debit cards and cash payments, and 'Meses sin Tarjeta'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/nuvemshop/landing.es.md#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"bullet_section_with_media:\\n - title: Pago\n - type: normal\n - message: Con el módulo de Mercado Pago puedes configurar pagos mediante:\n - benefit_title: Checkout Pro\n - benefit_message: Los compradores podrán pagar con una cuenta de Mercado Pago y todo el proceso de compra se realizará en nuestro entorno, lo que facilita el pago con tarjetas de débito, de crédito y otros medios de pago (redes de pago en efectivo y Meses sin Tarjeta).\n - benefit_title: Checkout API\n - benefit_message: El pago se realiza sin salir de tu tienda virtual con tarjetas (crédito y debito) y redes de pago en efectivo.\n - image: /nuvemshop/landing-2.png \"\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Request with 3DS in Python\nDESCRIPTION: In this Python snippet, the Mercado Pago SDK is employed to create a payment request with 3DS integration. It specifies the required parameters for the transaction and payer details for secure processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"<ENV_ACCESS_TOKEN>\")\npayment_data = {\n    \"transaction_amount\": <TRANSACTION_AMOUNT>,\n    \"token\": \"<CARD_TOKEN>\",\n    \"description\": \"<DESCRIPTION>\",\n    \"installments\": <INSTALLMENTS_NUMBER>,\n    \"payer\": {\n        \"email\": \"<BUYER_EMAIL>\",\n    },\n    \"three_d_secure_mode\": \"optional\"\n}\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Adding Redelcom plugins in Flutter\nDESCRIPTION: These are the package dependencies required in pubspec.yaml to communicate with the RDCPass system. These packages provide functionalities to fetch the package information and trigger native android intents.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/cross-platform-flutter.en.md#2025-04-18_snippet_0\n\nLANGUAGE: flutter\nCODE:\n```\n\"Package_info 0.4.3+4 => (https:// pub.dev/packages/package_info) \n\nandroid_intent 0.3.7+7 => (https:// pub.dev/packages/android_intent)\"\n```\n\n----------------------------------------\n\nTITLE: Not Found Error Response\nDESCRIPTION: This JSON snippet shows an error response from the Mercado Pago API when the specified advanced payment is not found.  The \"Advanced payment not found\" message indicates that the provided ID does not correspond to an existing advanced payment in the system. This commonly occurs when an incorrect ID is used.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/refund-full-amount.es.md#2025-04-18_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"status\": \"404\",\n   \"error\":  \"not_found\",\n   \"message\": \"Advanced payment not found.\",\n   \"cause\": [\n    {\n      \"code\":\"404002\",\n      \"message\": \"Advanced payment not found\",\n      \"data\": null\n    }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Exemplo de resposta JSON da API Redelcom para consulta de status de pagamento\nDESCRIPTION: Este snippet mostra um exemplo de resposta JSON da API Redelcom após uma consulta de status de pagamento. Inclui informações detalhadas sobre a transação, como estado, valor total, método de pagamento e dados de aquisição para o cliente e o comerciante.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/api-query-payment-intent.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"ESTADO\": \"APROBADO\",\n   \"TOTAL\": \"46900\",\n   \"PROPINA\": \"0\",\n   \"MEDIO_PAGO\": \"DEBITO\",\n   \"CODAUT\": \"231403\",\n   \"FECHA&HORA\": \"20230905&214300\",\n   \"MENSAJE_VISOR\": \"APROBADO (00)\",\n   \"DATOS_ADQUIRENCIA_CLIENTE\": {\n       \"RETAILER_ID\": \"61000010\",\n       \"FECHA&HORA\": \"20230905&214300\",\n       \"TERMINAL\": \"102\",\n       \"NUM_TARJETA\": \"********5706\",\n       \"TOTAL\": \"46900\",\n       \"PROPINA\": \"0\",\n       \"NUM_OPER\": \"00000108\",\n       \"COD_AUTO\": \"231403\",\n       \"NUM_UNICO\": \"255207\",\n       \"TIPO_TARJETA\": \"DEBITO\",\n       \"TIPO_LECTURA\": \"C-DB\"\n   },\n   \"DATOS_ADQUIRENCIA_CLIENTE_IMPRIMIR\": \"{s}61000010 -    2.62.03          TARJETA DE DEBITO{/s}{br}{s}05/09/2023    21:43:00                      102{/s}{br}{s}********5706    {s} C-DB{br}{s}MONTO COMPRA                             $46.900{/s}{br}{s}TOTAL                                   $ 46.900{/s}{br}{s}NUM OPER    00000108       COD AUTO       231403{/s}{br}{s}NUMERO UNICO                              255207{/s}{br}{center}{s}ACEPTO PAGAR SEGUN CONTRATO CON EMISOR{/s}\",\n   \"DATOS_ADQUIRENCIA_COMERCIO\": {\n       \"RETAILER_ID\": \"61000010\",\n       \"FECHA&HORA\": \"20230905&214300\",\n       \"TERMINAL\": \"102\",\n       \"NUM_TARJETA\": \"********5706\",\n       \"TOTAL\": \"46900\",\n       \"PROPINA\": \"0\",\n       \"NUM_OPER\": \"00000108\",\n       \"COD_AUTO\": \"231403\",\n       \"NUM_UNICO\": \"255207\"\n   },\n   \"DATOS_ADQUIRENCIA_COMERCIO_IMPRIMIR\": \"{center}COMPROBANTE DE VENTA{br}{center}TARJETA DE DEBITO{br}{br}{center}{s}REDELCOM{/s}{br}{center}{s}COYANCURA 2241, SANTIAGO{/s}{br}{center}{s}61000010 - 2.62.03{/s}{br}{br}{s}FECHA         HORA                     TERMINAL{/s}{br}{s}05/09/2023    21:43:00                      102{/s}{br}{br}{s}NUMERO DE TARJETA   NUM DE CUENTA    C-DB{/s}{br}{s}********5706          {/s}{br}{s}MONTO COMPRA                             $46.900{/s}{br}{s}PROPINA                                       $0{/s}{br}{s}TOTAL                                   $ 46.900{/s}{br}{s}NUMERO DE OPERACION    :                00000108{/s}{br}{s}CODIGO DE AUTORIZACION :                  231403{/s}{br}{s}NUMERO UNICO :                            255207{/s}{br}{center}{s}ORIGINAL COMERCIO{/s}{br}{center}{s}ACEPTO PAGAR SEGUN CONTRATO CON EMISOR{/s}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Event by ID for Marketplace Sellers Sales Reports using cURL\nDESCRIPTION: This cURL command retrieves a specific event by its ID for marketplace sellers sales reports. It requires an authorization token in the request header and the event_id as a path parameter.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/queries-and-validations.en.md#2025-04-18_snippet_5\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request GET 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/events/:event_id' \\\n--header 'Authorization: Bearer {{TOKEN}}'\n```\n\n----------------------------------------\n\nTITLE: Install Mercado Pago SDK\nDESCRIPTION: This command installs the Mercado Pago SDK for Python using pip3. It's required to use the SDK's functionalities.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.es.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install mercadopago\n```\n\n----------------------------------------\n\nTITLE: Searching Payments with cURL in MercadoPago API\nDESCRIPTION: This cURL command demonstrates how to search for payments using the MercadoPago API. It includes query parameters for filtering results by status, offset, and limit.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/retrieving-payments.es.md#2025-04-18_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl -G -X GET \\\n-H \"accept: application/json\" \\\n\"https://api.mercadopago.com/v1/payments/search\" \\\n-d \"access_token=ACCESS_TOKEN\" \\\n-d \"status=approved\" \\\n-d \"offset=0\" \\\n-d \"limit=10\"\n```\n\n----------------------------------------\n\nTITLE: Activating Automatic Report Generation using CURL\nDESCRIPTION: This CURL command activates the automatic generation of a report by sending a POST request to the Mercado Pago API. It includes necessary headers such as content type and authorization.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.es.md#2025-04-18_snippet_5\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/release_report/schedule'\n```\n\n----------------------------------------\n\nTITLE: Defining Customization Settings in React\nDESCRIPTION: This snippet showcases how to define customization settings for a value proposition in React. Similar to the JavaScript snippet, it allows for selecting a specific value prop to customize the banner messages shown to users. This customization is required when calling the create() method within a React component to ensure the correct message is rendered.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/brand-brick/value-prop.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n   text: {\n   valueProp: \"payment_methods\", // optional \"installments\" | \"payment_methods\" | \"security\" | \"payment_methods_logos\" | \"credits\"\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Marketplace Statement Response Structure in JSON\nDESCRIPTION: Detailed JSON schema showing the response format for a marketplace statement. Includes statement ID, date ranges, file download URLs, notification settings, and status information. Contains nested objects for report details, file formats, origin data, and notifier configurations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/queries-and-validations.es.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": {{statement_id}},\n    \"date_start\": \"2023-07-18T00:00:00Z\",\n    \"date_end\": \"2023-07-20T19:00:00Z\",\n    \"date_created\": \"2023-07-21T17:25:25.764122Z\",\n    \"created_by\": \"automatic\",\n    \"description\": \"statement de pruebas\",\n    \"report\": {\n        \"id\": \"marketplace_sellers_sales\",\n        \"name\": \"Marketplace OP\",\n        \"topic\": \"financial_statements\",\n        \"version\": \"1\"\n    },\n    \"files\": [\n        {\n            \"type\": \"json\",\n            \"url\": \"https://api.mercadopago.com/v1/reporting/reports/marketplace_sellers_sales/statements/{{statement_id}}/download?format=json\"\n        },\n        {\n            \"type\": \"csv\",\n            \"url\": \"https://api.mercadopago.com/v1/reporting/reports/marketplace_sellers_sales/statements/{{statement_id}}/download?format=csv\"\n        }\n    ],\n    \"event\": null,\n    \"origin\": {\n        \"type\": \"date_range\",\n        \"data\": {\n            \"date_end\": \"2023-07-20T19:00:00Z\",\n            \"date_start\": \"2023-07-18T00:00:00Z\"\n        }\n    },\n    \"report_extra_data\": {},\n    \"structure\": {\n        \"id\": {{structure_id}},\n        \"version\": 0\n    },\n    \"notifiers\": [\n        {\n            \"id\": {{notifier_id_1}},\n            \"version\": 0,\n            \"type\": \"email\",\n            \"data\": {}\n        },\n        {\n            \"id\": {{notifier_id_n}},\n            \"version\": 0,\n            \"type\": \"ftp\",\n            \"data\": {}\n        }\n    ],\n    \"status\": \"available\",\n    \"reason_code\": {\n        \"code\": \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating QR Order Response - Standard EMVCo\nDESCRIPTION: Example of a successful QR order generation response containing the QR data string for creating a QR code\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/qr-dynamic-integration.es.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"qr_data\": \"00020101021243650016COM.MERCADOLIBRE02013063638f1192a-5fd1-4180-a180-8bcae3556bc35204000053039865802BR5925IZABEL AAAA DE MELO6007BARUERI62070503***63040B6D\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Container for Payment Brick\nDESCRIPTION: This HTML code snippet defines a div element with the id 'paymentBrick_container'.  This id should correspond to the value used in the method `create()` when initializing the Payment Brick, acting as the placeholder where the Brick will be rendered.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/default-rendering.en.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"paymentBrick_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment Amount in C# with Mercado Pago SDK\nDESCRIPTION: This snippet demonstrates how to capture a partial amount of 75 from a previously reserved payment using C#. It configures the Mercado Pago SDK, initializes a PaymentClient, and calls the CaptureAsync method with the payment ID and the amount to capture.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.es.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar client = new PaymentClient();\nPayment payment = await client.CaptureAsync(paymentId, 75);\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Production Credentials Types\nDESCRIPTION: Table showing types and descriptions of production credentials including Public Key and Access Token\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/credentials/credentials.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Type | Description |\n|---|---|\n| Public Key | The application's public key is generally used in the frontend. It allows, for example, access to information about payment methods and encrypt card data. |\n| Access Token | Application's private key that should always be used in the backend to generate payments. It is essential to keep this information safe on your servers. |\n```\n\n----------------------------------------\n\nTITLE: Setting Expiration Date for Cash Payments with Mercado Pago\nDESCRIPTION: Examples of how to set the expiration date for cash payments across different programming languages. The date must be in ISO 8601 format and can be set between 1 and 30 days from the issue date.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n===\nThe date uses the ISO 8601 format: yyyy-MM-dd'T'HH:mm:ssz\n===\n\n$payment->date_of_expiration = \"2020-05-30T23:59:59.000-04:00\";\n```\n\nLANGUAGE: node\nCODE:\n```\n===\nThe date uses the ISO 8601 format: yyyy-MM-dd'T'HH:mm:ssz\n===\n\ndate_of_expiration: \"2020-05-30T23:59:59.000-04:00\",\n```\n\nLANGUAGE: java\nCODE:\n```\n===\nThe date uses the ISO 8601 format: yyyy-MM-dd'T'HH:mm:ssz\n===\n\npayment.setDateOfExpiration(\"2020-05-30T23:59:59.000-04:00\")\n```\n\nLANGUAGE: ruby\nCODE:\n```\n===\nThe date uses the ISO 8601 format: yyyy-MM-dd'T'HH:mm:ssz\n===\n\ndate_of_expiration: '2020-05-30T23:59:59.000-04:00',\n```\n\nLANGUAGE: csharp\nCODE:\n```\n===\nThe date uses the ISO 8601 format: yyyy-MM-dd'T'HH:mm:ssz\n===\n\npaymentCreateRequest.DateOfExpiration = DateTime.Parse(\"2020-05-30T23:59:59.000-04:00\");\n```\n\nLANGUAGE: python\nCODE:\n```\n===\nThe date uses the ISO 8601 format: yyyy-MM-dd'T'HH:mm:ssz\n===\n\n\"date_of_expiration\": \"2020-05-30T23:59:59.000-04:00\"\n```\n\nLANGUAGE: curl\nCODE:\n```\n===\nThe date uses the ISO 8601 format: yyyy-MM-dd'T'HH:mm:ssz\n===\n\n\"date_of_expiration\": \"2020-05-30T23:59:59.000-04:00\",\n```\n\n----------------------------------------\n\nTITLE: CSV Example: Full Payment Links Data Entry\nDESCRIPTION: Sample CSV file with all optional and mandatory fields completed for payment links creation\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/format-specifications.es.md#2025-04-18_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\next2024030614313,521998672,1002,20250312,549.57,20250315,778.87,20250318,801.87,Miss Kristopher Kautzer, 1138225523,felica.walsh@example.com,Cuota,Ref2024,5\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with 3DS in Mercado Pago C# SDK\nDESCRIPTION: This C# code snippet shows how to initiate a payment process with Mercado Pago, embedding 3DS authentication data. MercadoPago SDK setup with access token is essential. The snippet needs specific data inputs including transaction amount, token, payer details, and a 3DS authentication object.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-external-mpi.en.md#2025-04-18_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\nMercadoPagoConfig.AccessToken = \"<ENV_ACCESS_TOKEN>\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = <TRANSACTION_AMOUNT>,\n    Token = \"<CARD_TOKEN>\",\n    Description = \"<DESCRIPTION>\",\n    Installments = <INSTALLLMENTS_NUMBER>,\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"<BUYER_EMAIL>\",\n    },\n    PaymentMethodRequest = new PaymentMethodRequest\n    {\n        Type = \"credit_card\",\n        Data = new PaymentDataRequest\n        {\n            Authentication = new PaymentAuthenticationRequest\n            {\n                Type = \"external_threeds\",\n                Cryptogram = \"<<String>>\",\n                ThreeDsServerTransId = \"<<String>>\",\n                Eci = \"<<String>>\",\n                DsTransId = \"<<String>>\",\n                AcsTransId =  \"<<String>>\",\n                ThreeDsVersion = \"<<String>>\",\n                AuthenticationStatus = \"<<String>>\"\n            }\n        }\n    }\n};\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Activating Bluetooth Using MPManager (Kotlin)\nDESCRIPTION: This snippet demonstrates how to activate the Bluetooth feature on a Smart POS device using the turnOn method of the BluetoothIgnitor class. The result of the activation is managed through a callback that processes success and error cases.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/manage-status.en.md#2025-04-18_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval bluetoothIgnitor = MPManager.bluetooth.ignitor\n\nbluetoothIgnitor.turnOn { response ->\n   response\n       .doIfSuccess { result ->\n           if (result) {\n               // Bluetooth was successfully activated\n               // Perform additional actions if necessary\n           } else {\n               // It wasn’t possible to activate the bluetooth\n           }\n       }.doIfError {\n           // Manage the error case if necessary\n       }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing MercadoPago Banner - 468x60px\nDESCRIPTION: HTML code to embed a 468x60 pixel MercadoPago payment methods banner showing 9 interest-free installments option.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/nove.en.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/PSJ/468x60_banner_psj_9x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"468\" height=\"60\"/>\n```\n\n----------------------------------------\n\nTITLE: Webhook Event Format\nDESCRIPTION: Webhook notifications are sent in JSON format via HTTP POST to the specified URL. Events represent updates on reported objects including status changes and attribute modifications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.en.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nHTTP POST with JSON payload\n```\n\n----------------------------------------\n\nTITLE: Card Creation Response Structure\nDESCRIPTION: This JSON example shows the response structure returned by the Mercado Pago API when successfully adding a card to a customer. It includes details about the card such as expiration date, card number digits, payment method information, and cardholder details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"1493990563105\",\n    \"expiration_month\": 12,\n    \"expiration_year\": 2020,\n    \"first_six_digits\": \"503175\",\n    \"last_four_digits\": \"0604\",\n    \"payment_method\": {\n        \"id\": \"master\",\n        \"name\": \"master\",\n        \"payment_type_id\": \"credit_card\",\n        \"thumbnail\": \"http://img.mlstatic.com/org-img/MP3/API/logos/master.gif\",\n        \"secure_thumbnail\": \"https://www.mercadopago.com/org-img/MP3/API/logos/master.gif\"\n    },\n    \"security_code\": {\n        \"length\": 3,\n        \"card_location\": \"back\"\n    },\n    \"issuer\": {\n        \"id\": 3,\n        \"name\": \"Mastercard\"\n    },\n    \"cardholder\": {\n        \"name\": \"Card holdername\",\n\n        \"identification\": {\n            \"number\": \"12345678\",\n            \"type\": \"DNI\"\n        }\n\n    },\n    \"date_created\": \"2017-05-05T09:22:30.893-04:00\",\n    \"date_last_updated\": \"2017-05-05T09:22:30.893-04:00\",\n    \"customer_id\": \"255276729-yLOTNHQjpDWw1X\",\n    \"user_id\": \"255276729\",\n    \"live_mode\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Payment Response from MercadoPago API\nDESCRIPTION: This JSON response shows a successful payment transaction from the MercadoPago API. It includes the order ID, status, payment details, and transaction information. The status 'processed' with status_detail 'accredited' indicates the payment was successful.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.en.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"01JAQD7X1BXGY2Q59VYKRV90W8\",\n    \"type\": \"online\",\n    \"processing_mode\": \"automatic\",\n    \"external_reference\": \"ext_ref_1234\",\n    \"total_amount\": \"200.00\",\n    \"country_code\": \"BRA\",\n    \"status\": \"processed\",\n    \"status_detail\": \"accredited\",\n    \"capture_mode\": \"automatic\",\n    \"created_date\": \"2024-10-21T11:26:19.17922368Z\",\n    \"last_updated_date\": \"2024-10-21T11:26:20.923603158Z\",\n    \"integration_data\": {\n        \"application_id\": \"874202490252970\"\n    },\n    \"payer\": {\n        \"email\": \"{{EMAIL}}\"\n    },\n    \"transactions\": {\n        \"payments\": [\n            {\n                \"id\": \"pay_01JAQD7X1BXGY2Q59VYP036JDN\",\n                \"amount\": \"200.00\",\n                \"reference_id\": \"0001hyhhbz\",\n                \"status\": \"processed\",\n                \"status_detail\": \"accredited\",\n                \"payment_method\": {\n                    \"id\": \"master\",\n                    \"type\": \"credit_card\",\n                    \"token\": \"e607133fe7acf46ff35cd5f7810f7eb2\",\n                    \"installments\": 1\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PSE Payment in Node.js with Mercado Pago\nDESCRIPTION: Node.js implementation for processing PSE payments with Mercado Pago SDK. This code creates a payment request with all required fields including transaction amount, payer identification data, and the financial institution selected for the transaction.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pse.en.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Payment, MercadoPagoConfig } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\nconst payment = new Payment(client);\n\nconst requestOptions = {\n\tidempotencyKey: '<IDEMPOTENCY_KEY>',\n};\n\nconst body = {\n  transaction_amount: 5000,\n  description: 'Product description',\n  payment_method_id: 'pse',\n  callback_url: 'http://www.your-site.com',\n  notification_url: 'http://www.your-site.com',\n  payer: {\n    entity_type: 'individual',\n    email: req.body.email,\n    first_name: req.body.firstName,\n    last_name: req.body.lastName,\n    identification: {\n      type: req.body.identificationType,\n      number: req.body.identificationNumber\n    },\n    address: {\n      zip_code: req.body.zipCode,\n      street_name: req.body.streetName,\n      street_number: req.body.streetNumber,\n      neighborhood: req.body.neighborhood,\n      city: req.body.city,\n      federal_unit: req.body.federalUnit\n    },\n    phone: {\n      area_code: req.body.phoneAreaCode,\n      number: req.body.phoneNumber\n    }\n  },\n  additional_info: {\n    ip_address: '127.0.0.1'\n  },\n  transaction_details: {\n    financial_institution: req.body.financialInstitution\n  }\n};\n\npayment.create({body, requestOptions})\n  .then(function (response) {\n    console.info(response)\n  })\n  .catch(function (error) {\n    console.error(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining product_landing_how_works Component in YAML\nDESCRIPTION: This YAML snippet demonstrates the structure of the `product_landing_how_works` component in YAML. It outlines how a product works, guiding the user through the process with a title, message, optional subtitle, image, image link/text, a list of steps, and a button with a description and link.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/readme/product-overview.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nproduct_landing_how_works:\n - title: Cómo funciona\n - message: La persona compra el producto en tu sitio y es redirigida a un entorno seguro de Mercado Pago para pagar.\n - sub_title: Conoce los pasos del proceso de cobro\n - image: https://http2.mlstatic.com/storage/dx-devsite/docs-assets/custom-upload/2025/1/20/1740032685728-image450.png\n - image_text: Simula el procesamiento de pago\n - image_text_link: /live-demo/checkout-pro\n - list_title: El comprador elige pagar con Mercado Pago y es redirigido al flujo de pagos de Mercado Pago.\n - list_title: Elige si inicia sesión en su cuenta de Mercado Pago o continúa como usuario invitado sin loguearse.\n - list_title: Selecciona el método de pago de su preferencia, pudiendo incluso dividir el pago entre más de un método.\n - list_title: Después de completar la compra, es redirigido automáticamente a la tienda online.\n - button_description: Cómo integrar\n - button_link: /docs/checkout-pro/landing\n---\n```\n\n----------------------------------------\n\nTITLE: Available Payments Configuration (MPE)\nDESCRIPTION: This snippet specifies the available payment methods for Peru (MPE) when using the Mercado Pago integration with Tiendanube. It includes credit cards, debit cards, Mercado Pago account payments, cash payments and ATM payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/nuvemshop/landing.es.md#2025-04-18_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n\"available_payments: credit, debit, mercadopago, efectivo, atm\"\n```\n\n----------------------------------------\n\nTITLE: Implementing MercadoPago Banner - 735x40px\nDESCRIPTION: HTML code to embed a 735x40 pixel MercadoPago payment methods banner showing 9 interest-free installments option.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/nove.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/PSJ/735x40_banner_psj_9x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"735\" height=\"40\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pix Payment Options in JSON\nDESCRIPTION: This JSON snippet represents the configuration needed to set up Pix as a payment option in Mercado Pago. It outlines parameters like payment ID, type, and status, with URLs for secure transactional images. There are no mandatory dependencies, but proper validation and compliance with Mercado Pago’s API are required. Input includes the payment parameter details, and the output is typically seen as new options in their payment system.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/pix-intro.en.md#2025-04-18_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n    {\n        \"id\": \"pix\",\n        \"name\": \"PIX\",\n        \"payment_type_id\": \"bank_transfer\",\n        \"status\": \"active\",\n        \"secure_thumbnail\": \"https://www.mercadopago.com/org-img/MP3/API/logos/pix.gif\",\n        \"thumbnail\": \"https://www.mercadopago.com/org-img/MP3/API/logos/pix.gif\",\n        \"deferred_capture\": \"does_not_apply\",\n        \"settings\": [],\n        \"additional_info_needed\": []\n    },\n    {\n        \"...\": \"...\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet Container\nDESCRIPTION: Creates a container element for the Mercado Pago wallet button.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/installments-without-card.en.md#2025-04-18_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"wallet_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Updating Brick Initialization Data Example (Javascript)\nDESCRIPTION: Demonstrates the proper way to update initialization data for a Brick by unmounting the previous instance and creating a new one with updated settings. This example shows updating a preference ID in Payment Brick, but the pattern applies to any Brick initialization data update.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/possible-errors.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\n//First render\nconst renderPaymentBrick = async (bricksBuilder) => {\n      const settings = {\n        initialization: {\n          amount: 100,\n          preferenceId: \"<YOUR_FIRST_PREFERENCE_ID>\"\n        },\n...\nwindow.paymentBrickController = await bricksBuilder.create(\n   \"payment\",\n   \"paymentBrick_container\",\n   settings\n );\n\n    };\n\nawait renderPaymentBrick(bricksBuilder);\n\n//Second render\nwindow.paymentBrickController.unmount()\n\nconst secondRenderPaymentBrick = async (bricksBuilder) => {\n      const settings = {\n        initialization: {\n          amount: 100,\n          preferenceId: \"<YOUR_SECOND_PREFERENCE_ID>\"\n        },\n...\nwindow.paymentBrickController = await bricksBuilder.create(\n   \"payment\",\n   \"paymentBrick_container\",\n   settings\n );\n\n    };\n\nawait secondRenderPaymentBrick(bricksBuilder);\n\n...\n\n// Brick Container\n<div id=\"paymentBrick_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Setting Mercado Pago Credentials in Java\nDESCRIPTION: This Java snippet demonstrates how to import the Mercado Pago configuration and set the access token necessary for API calls.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.en.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// Mercado Pago SDK\nimport com.mercadopago.MercadoPagoConfig;\n// Add Your credentials\nMercadoPagoConfig.setAccessToken(\"PROD_ACCESS_TOKEN\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods in Mercado Pago Node.js\nDESCRIPTION: This Node.js snippet demonstrates how to create a payment preference object with excluded payment methods and types, as well as defining installments. The code utilizes a JavaScript object to structure the preference settings. No external libraries are specified in this snippet.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar preference = {}\npreference = {\n//...\n\"payment_methods\": {\n    \"excluded_payment_methods\": [\n        {\n            \"id\": \"master\"\n        }\n    ],\n    \"excluded_payment_types\": [\n        {\n            \"id\": \"ticket\"\n        }\n    ],\n    \"installments\": 12\n\t}\n//...\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Coupon Response\nDESCRIPTION: This JSON response indicates that the submitted coupon is invalid and does not have a discount associated with it. The 'status' field is set to 'invalid', providing a simple way to identify coupons that cannot be used. No further details about the discount are included, as the coupon is not valid.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/coupon-validation-responses.en.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status\": \"invalid\"\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Navigation History\nDESCRIPTION: Command to clear the navigation history with optional callback for handling result\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/comunication-commands.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"method\": 'clear_history',\n    \"args\": {},\n    \"callback\": callbackResult\n}\n\nfunction callbackResult(result, error) {\n   if (result == 'success') {\n       // Chamada de sucesso\n   } else {\n       //'error' tem informações de erro detalhadas\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Refund CSV Output Example\nDESCRIPTION: Sample CSV file demonstrating the required structure for batch refund processing with sequential order, external reference, amount, refund status, refund details, and payment ID\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/batch-payments-vault-migration/batch-refunds/output-format-batch-refunds.es.md#2025-04-18_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nsequential_order;external_reference;amount;refund_status;refund_detail;payment_id\n1;ext_ref1;20398.00;refunded;refunded;1885556855\n2;ext_ref2;10423.00;refunded;refunded;1885556854\n3;ext_ref3;874.00;refunded;refunded;1885556853\n```\n\n----------------------------------------\n\nTITLE: Installing MercadoPago SDK via NPM\nDESCRIPTION: Command to install the official MercadoPago JavaScript SDK using npm package manager for JavaScript projects\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.es.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n```\n\n----------------------------------------\n\nTITLE: Activating Automatic Report Generation using Java\nDESCRIPTION: This Java snippet establishes an HTTPS connection to the Mercado Pago API for activating report generation. It sets the required HTTP method and headers for the request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.es.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/release_report/schedule\");\\n\\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\\n\\nconnection.setRequestMethod(\"POST\");\\nconnection.setRequestProperty(\"Accept\", \"application/json\");\\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\\n\\nSystem.out.println(connection.getResponseCode());\\nSystem.out.println(connection.getResponseMessage());\\nSystem.out.println(connection.getInputStream());\n```\n\n----------------------------------------\n\nTITLE: Adding Mercado Pago Security Code to Checkout Page\nDESCRIPTION: Implement the Mercado Pago security JavaScript to generate a unique Device ID for tracking and security purposes on the checkout page\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/device-id.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest for Recharge Payment Intent\nDESCRIPTION: XML configuration for AndroidManifest.xml to handle payment intents. Adds an intent-filter for handling text data through Android's ACTION.SEND intent.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-pay-telecommunications.en.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter> \n    <action android:name=\"android.intent.action.SEND\" /> \n    <category android:name=\"android.intent.category.DEFAULT\" /> \n    <data android:mimeType=\"text/*\" /> \n</intent-filter>\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Mercado Pago Button Action and Value Proposition in JavaScript\nDESCRIPTION: This snippet demonstrates how to customize both the action text and value proposition of the Mercado Pago payment button using JavaScript. It sets the action to 'buy' and the value proposition to 'security_details'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-texts.en.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n ...,\n customization: {\n      texts: {\n          action: 'buy',\n          valueProp: 'security_details',\n      },\n },\n}\n```\n\n----------------------------------------\n\nTITLE: Bad Request Response (Status 400)\nDESCRIPTION: This JSON snippet shows the response structure for a bad request error. It typically indicates an issue with the request parameters, such as an invalid ID. The \"message\" and \"cause\" fields provide details about the error.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/refund-partial-amount.en.md#2025-04-18_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"status\": \"400\",\n   \"error\":  \"bad_request\",\n   \"message\": \"Invalid splitter id.\",\n   \"cause\": [\n    {\n      \"code\":\"400048\",\n      \"message\": \"Invalid splitter id\",\n      \"data\": null\n    }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Intent Response in Flutter\nDESCRIPTION: This Flutter code snippet sets up a MethodChannel to receive data shared from a native Android app.  It initializes the channel and defines a method `getSharedIntent` that invokes a native method to retrieve shared text.  The received data is then stored in the `data` variable and updates the UI.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/cross-platform-flutter.en.md#2025-04-18_snippet_3\n\nLANGUAGE: flutter\nCODE:\n```\n\"static const platform = const MethodChannel('app.channel.shared.data'); String data = \\\"No hay datos\\\"; \n\n@Override \nvoid initState() { \n\tsuper.initState(); \n\tgetSharedIntent(); \n} \n getSharedIntent() async { \n\t\tvar sharedData = await platform.invokeMethod(\\\"getSharedText\\\"); \n\t\tif (sharedData != null) { \n\t\t\tsetState(() { \n\t\t\t\tdata = sharedData; \n\t\t\t\t// Do something… \n\t\t\t}); \n\t\t} \n } \n \n\"\n```\n\n----------------------------------------\n\nTITLE: Activating Automatic Settlement Report Generation with Java\nDESCRIPTION: Java implementation for enabling automatic settlement report generation using HttpsURLConnection. The code configures a POST request with the necessary headers for authentication and content type.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.en.md#2025-04-18_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report/schedule\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"POST\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\n----------------------------------------\n\nTITLE: Listing Customer Cards\nDESCRIPTION: Retrieves the list of saved cards for a customer using their customer ID. It uses the CustomerClient class to interact with the Mercado Pago API and then prints the resulting array.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/get-cards-list.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $customer_client = new CustomerClient();\n  $cards = $client->list(\"customer_id\");\n  echo implode ($cards);\n?>\n```\n\n----------------------------------------\n\nTITLE: Searching Customers with Mercado Pago Python SDK\nDESCRIPTION: This snippet shows how to search for customers using the Mercado Pago Python SDK. It creates a filter dictionary with the email to search for and then calls the `customer().search()` method with the filter.  The response contains a list of customer objects that match the filter.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/customers.es.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfilters = {\n    \"email\": \"test_payer_12345@testuser.com\"\n}\n\ncustomers_response = sdk.customer().search(filters=filters)\ncustomers = customers_response[\"response\"]\n\n```\n\n----------------------------------------\n\nTITLE: Response for Modifying Report Structure in MercadoPago API\nDESCRIPTION: This JSON response shows the updated structure after a successful PUT request to modify a report structure in the MercadoPago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/modifications.es.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": {{structure_id}},\n    \"version\": 1,\n    \"date_created\": \"2023-07-19T19:34:33Z\",\n    \"date_last_updated\": \"2023-09-13T17:54:38Z\",\n    \"display_timezone\": \"GMT-03\",\n    \"name\": \"Structure marketplace\",\n    \"file_format\": {\n        \"prefix\": \"marketplace-op\",\n        \"column_separator\": \";\",\n        \"decimal_separator\": \".\"\n    },\n    \"columns\": [\n        {\n            \"key\": \"COLLECTOR\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"COLLECTOR_NICKNAME\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"PAYMENT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"STATUS_DESCRIPTION\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"STATUS_DETAIL\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"PURCHASE_ORDER\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"PAYMENT_METHOD_TYPE\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"TRANSACTION_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"DATE_CREATED\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"DATE_APPROVED\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"MARKETPLACE_FEE_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"MERCADOPAGO_FEE_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"TOTAL_PAID_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"NET_RECEIVED_AMOUNT\",\n            \"alias\": \"\"\n        }\n    ],\n    \"file_config\": null,\n    \"report_translation\": null,\n    \"include_withdraw\": null,\n    \"refund_detailed\": null,\n    \"show_fee_prevision\": null,\n    \"coupon_detailed\": null,\n    \"show_chargeback_cancel\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Payment Form in HTML with Styling\nDESCRIPTION: The HTML snippet comprises the structure and minimal styling for the card payment form, capturing necessary card details and connecting with the MercadoPago.js CardForm. It includes inputs for card number, expiry date, security code, and more.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.en.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n  <style>\n    #form-checkout {\n      display: flex;\n      flex-direction: column;\n      max-width: 600px;\n    }\n\n    .container {\n      height: 18px;\n      display: inline-block;\n      border: 1px solid rgb(118, 118, 118);\n      border-radius: 2px;\n      padding: 1px 2px;\n    }\n  </style>\n  <form id=\\\"form-checkout\\\">\\n    <div id=\\\"form-checkout__cardNumber\\\" class=\\\"container\\\"></div>\n    <div id=\\\"form-checkout__expirationDate\\\" class=\\\"container\\\"></div>\n    <div id=\\\"form-checkout__securityCode\\\" class=\\\"container\\\"></div>\n    <input type=\\\"text\\\" id=\\\"form-checkout__cardholderName\\\" />\n    <select id=\\\"form-checkout__issuer\\\"></select>\n    <select id=\\\"form-checkout__installments\\\"></select>\n    <select id=\\\"form-checkout__identificationType\\\"></select>\n    <input type=\\\"text\\\" id=\\\"form-checkout__identificationNumber\\\" />\n    <input type=\\\"email\\\" id=\\\"form-checkout__cardholderEmail\\\" />\n\n    <button type=\\\"submit\\\" id=\\\"form-checkout__submit\\\">Pay</button>\n    <progress value=\\\"0\\\" class=\\\"progress-bar\\\">Loading...</progress>\n  </form>\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK in Go\nDESCRIPTION: This Go code snippet initializes the Mercado Pago SDK by creating a new configuration. It uses the `config.New` function, passing in your access token.  Replace `{{ACCESS_TOKEN}}` with your actual access token.  It also includes error handling to catch any issues during configuration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-development-environment.es.md#2025-04-18_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n\"import (\n\t\\\"github.com/mercadopago/sdk-go/pkg/config\\\"\n)\n\ncfg, err := config.New(\\\"{{ACCESS_TOKEN}}\\\")\nif err != nil {\n\tfmt.Println(err)\n}\"\n```\n\n----------------------------------------\n\nTITLE: CSV Error File for Payment Links\nDESCRIPTION: This CSV file example shows an error report returned by MercadoPago when processing payment links fails. The file includes the line number and a description of the error encountered.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/format-specifications.en.md#2025-04-18_snippet_3\n\nLANGUAGE: csv\nCODE:\n```\n4,ext2024030615504,E008:Due last date must be after today\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods in Node.js for Mercado Pago\nDESCRIPTION: Node.js implementation for excluding specific payment methods and types in Mercado Pago Checkout Pro, with a maximum of 12 installments\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/payment-methods.es.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nvar preference = {}\npreference = {\n//...\n\"payment_methods\": {\n    \"excluded_payment_methods\": [\n        {\n            \"id\": \"master\"\n        }\n    ],\n    \"excluded_payment_types\": [\n        {\n            \"id\": \"ticket\"\n        }\n    ],\n    \"installments\": 12\n\t}\n//...\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Bluetooth UI Settings in Mercado Pago (Kotlin)\nDESCRIPTION: This snippet demonstrates how to use the BluetoothUiSettings class to launch the Bluetooth settings interface in Kotlin. It requires the MPManager instance and a context object.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/access-settings.en.md#2025-04-18_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval bluetoothUiSettings = MPManager.bluetoothUiSettings\n\nbluetoothUiSettings.launch(context)\n```\n\n----------------------------------------\n\nTITLE: Pix Payment Response Structure\nDESCRIPTION: Example of a successful Pix payment creation response from Mercado Pago API. It includes the payment status, transaction details, and Pix payment data like QR code in base64 format, plain text QR code, and a ticket URL for the buyer to complete the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pix.en.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n...,\n\"id\": 5466310457,\n\"status\": \"pending\",\n\"status_detail\": \"pending_waiting_transfer\",\n...,\n\"transaction_details\": {\n\"net_received_amount\": 0,\n\"total_paid_amount\": 100,\n\"overpaid_amount\": 0,\n\"external_resource_url\": null,\n\"installment_amount\": 0,\n\"financial_institution\": null\n},\n\"point_of_interaction\": {\n\"type\": \"PIX\",\n\"sub_type\": null,\n\"application_data\": {\n\"name\": \"NAME_SDK\",\n\"version\": \"VERSION_NUMBER\"\n},\n\"transaction_data\": {\n\"qr_code_base64\": \"iVBORw0KGgoAAAANSUhEUgAABRQAAAUUCAYAAACu5p7oAAAABGdBTUEAALGPC/xhBQAAAAFzUkdCAK7OHOkAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAIABJREFUeJzs2luO3LiWQNFmI+Y/Zd6vRt36KGNXi7ZOBtcagHD4kNLeiLX33v8DAAAAABD879sDAAAAAAA/h6AIAAAAAGSCIgAAAACQCYoAAAAAQCYoAgAAAACZoAgAAAAAZIIiAAAAAJAJigAAAABAJigCAAAAAJmgCAAAAABkgiIAAAAAkAmKAAAAAEAmKAIAAAAAmaAIAAAAAGSCIgAAAACQCYoAAAAAQCYoAgAAAACZoAgAAAAAZIIiAAAAAJAJigAAAABAJigCA...\",\n\"qr_code\": \"00020126600014br.gov.bcb.pix0117john@yourdomain.com0217additional data520400005303986540510.005802BR5913Maria Silva6008Brasilia62070503***6304E2CA\",\n\"ticket_url\": \"https://www.mercadopago.com.br/payments/123456789/ticket?caller_id=123456&hash=123e4567-e89b-12d3-a456-426655440000\"\n}\n}\n...,\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment Form with Integer Amount - JavaScript\nDESCRIPTION: This snippet is similar to the previous one but initializes the form with a payment amount specified as an integer. All functionalities remain as described, providing a solid structure for payment processing through the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst cardForm = mp.cardForm({\n  amount: \"100\", // O valor deve ser um número inteiro.\n  iframe: true,\n  form: {\n    id: \"form-checkout\",\n    cardNumber: {\n      id: \"form-checkout__cardNumber\",\n      placeholder: \"Número do cartão\",\n    },\n    expirationDate: {\n      id: \"form-checkout__expirationDate\",\n      placeholder: \"MM/YY\",\n    },\n    securityCode: {\n      id: \"form-checkout__securityCode\",\n      placeholder: \"Código de segurança\",\n    },\n    cardholderName: {\n      id: \"form-checkout__cardholderName\",\n      placeholder: \"Titular do cartão\",\n    },\n    issuer: {\n      id: \"form-checkout__issuer\",\n      placeholder: \"Banco emissor\",\n    },\n    installments: {\n      id: \"form-checkout__installments\",\n      placeholder: \"Parcelas\",\n    },        \n    identificationType: {\n      id: \"form-checkout__identificationType\",\n      placeholder: \"Tipo de documento\",\n    },\n    identificationNumber: {\n      id: \"form-checkout__identificationNumber\",\n      placeholder: \"Número do documento\",\n    },\n    cardholderEmail: {\n      id: \"form-checkout__cardholderEmail\",\n      placeholder: \"E-mail\",\n    },\n  },\n  callbacks: {\n    onFormMounted: error => {\n      if (error) return console.warn(\"Form Mounted handling error: \", error);\n      console.log(\"Form mounted\");\n    },\n    onSubmit: event => {\n      event.preventDefault();\n\n      const {\n        paymentMethodId: payment_method_id,\n        issuerId: issuer_id,\n        cardholderEmail: email,\n        amount,\n        token,\n        installments,\n        identificationNumber,\n        identificationType,\n      } = cardForm.getCardFormData();\n\n      fetch(\"/process_payment\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          token,\n          issuer_id,\n          payment_method_id,\n          transaction_amount: Number(amount),\n          installments: Number(installments),\n          description: \"Descrição do produto\",\n          payer: {\n            email,\n            identification: {\n              type: identificationType,\n              number: identificationNumber,\n            },\n          },\n        }),\n      });\n    },\n    onFetching: (resource) => {\n      console.log(\"Fetching resource: \", resource);\n\n      // Animate progress bar\n      const progressBar = document.querySelector('.progress-bar');\n      progressBar.removeAttribute('value');\n\n      return () => {\n        progressBar.setAttribute('value', '0');\n      };\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Bad Request Error Response (General)\nDESCRIPTION: This JSON response represents a 'Bad Request' error (status code 400), indicating that the request was malformed. It includes an error code, a detailed error message, and the HTTP status code.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/coupon-validation-responses.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"error\": \"bad_request\",\n  \"message\": \"mensagem de erro detalhada\",\n  \"status\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Settlement Report Configuration with Mercado Pago API (PHP)\nDESCRIPTION: This PHP code updates the settlement report configuration using the Mercado Pago API. It uses the Requests library to send a PUT request with the configuration data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$data = '{\n        \"file_name_prefix\": \"settlement-report-USER_ID\",\n        \"show_fee_prevision\": false,\n        \"show_chargeback_cancel\": true,\n        \"detailed\": true,\n        \"coupon_detailed\": true,\n        \"shipping_detail\": true,\n        \"refund_detailed\": true,\n        \"extended\": false,\n        \"frequency\": {\n            \"hour\": 0,\n            \"type\": \"monthly\",\n            \"value\": 1\n        }\n    }';\n$response = Requests::put('https://api.mercadopago.com/v1/account/settlement_report/config', $headers, $data);\n```\n\n----------------------------------------\n\nTITLE: API Response for Rejected Payment in Mercado Pago\nDESCRIPTION: Example of a JSON response from the Mercado Pago API showing a rejected payment due to insufficient funds. The status field indicates the payment was rejected, while status_detail provides the specific reason.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/payment-rejections.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status\": \"rejected\",\n    \"status_detail\": \"cc_rejected_insufficient_amount\",\n    \"id\": 47198050,\n    \"payment_method_id\": \"master\",\n    \"payment_type_id\": \"credit_card\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Fintoc Integration Options in Markdown\nDESCRIPTION: This markdown snippet outlines the two integration options for Fintoc with Mercado Pago: simplified and advanced. It includes conditional text for different country-specific versions of the Checkout API or Checkout Transparente.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc.es.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Fintoc\n\nFintoc es una aplicación que permite recibir pagos y realizar cobros recurrentes con cualquier banco en Chile, cuya conciliación sucede de manera automática. \n\nCon Checkout ----[mla, mlm, mlu, mco, mlc, mpe]----API----------------[mlb]---- Transparente------------ es posible ofrecer esta opción de pago realizando dos tipos de integración distintos:  \n\n * [Integración simplificada](/developers/es/docs/checkout-api/integration-configuration/fintoc/simplified-integration): es una manera sencilla de configurar tu integración, basada en la redirección a Mercado Pago, donde el cliente podrá pagar mediante un *widget* ya preparado. Esta integración puede ser utilizada tanto para web, sea en modelo *desktop* o responsivo, como para *mobile*, a través del modelo *WebView*.\n\n * [Integración avanzada](/developers/es/docs/checkout-api/integration-configuration/fintoc/advanced-integration): permite controlar de manera completa y transparente el flujo de la experiencia dentro de la tienda, gracias a la disponibilización de métodos específicos en nuestros SDKs. Esta integración solo puede ser utilizada en navegadores web.\n\nSelecciona el tipo de integración más adecuado a tus necesidades y sigue el paso a paso para ofrecer Fintoc como medio de pago en Checkout  ----[mla, mlm, mlu, mco, mlc, mpe]----API----------------[mlb]---- Transparente------------.\n```\n\n----------------------------------------\n\nTITLE: Configuring Intent Filter for Payment Queries in Android Manifest\nDESCRIPTION: XML configuration for adding the ANSWER intent-filter to AndroidManifest.xml to enable payment queries. Includes both SEND and ANSWER actions with default category and text mime type.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-payment-query.en.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter> \n\t<action android:name=\"android.intent.action.SEND\" /> \n\t<action android:name=\"android.intent.action.ANSWER\" /> \n\t<category android:name=\"android.intent.category.DEFAULT\" /> \n\t<data android:mimeType=\"text/*\" /> \n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Testing Mercado Pago Cards Integration\nDESCRIPTION: Instructions for testing card payments using test credentials and test card information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/shopify/integration-test.en.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n11. Access store\n12. Make purchase with test information\n   - Use buyer test account email and phone\n   - Select OTHER for Document type\n   - Enter 9 digits for document\n   - Use test cards from documentation\n```\n\n----------------------------------------\n\nTITLE: Building and Checking Out the Payment Brick Visual Experience - Markdown\nDESCRIPTION: This section provides instructions for building and testing the Payment Brick visual experience in real time. It includes links to a live demo and an option to download or copy the generated code.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/introduction.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n---\nlive_demo_code_action:\n - title: Try our Brick\n - description: Build and check out the Payment Brick visual experience in real time. When you are ready, download or copy the generated code.\n - link: /developers/en/live-demo/payment-brick\n - image: /checkout-bricks/live-demo-payment-bricks.png\n - linkName: Demo\n - buttonDescription: Build your Payment Brick\n---\n```\n\n----------------------------------------\n\nTITLE: Example of Payment Response Structure\nDESCRIPTION: This JSON snippet describes the structure of a successful payment response from the Mercado Pago API, highlighting key fields such as payment ID, transaction status, and details of the payer. It is useful for understanding the expected output of a payment request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-external-mpi.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \"send_advice\": false,\\n    \"id\": 69306088555,\\n    \"date_created\": \"2023-12-26T18:04:10.711-04:00\",\\n    \"date_approved\": \"2023-12-26T18:04:11.351-04:00\",\\n    \"date_last_updated\": \"2023-12-26T18:04:11.351-04:00\",\\n    \"money_release_date\": \"2023-12-26T18:04:11.351-04:00\",\\n    \"collector_id\": 219830831,\\n    \"operation_type\": \"regular_payment\",\\n    \"issuer_id\": \"205\",\\n    \"payment_method_id\": \"visa\",\\n    \"payment_type_id\": \"credit_card\",\\n    \"status\": \"approved\",\\n    \"status_detail\": \"accredited\",\\n    \"currency_id\": \"COP\",\\n    \"description\": \"Payment test\",\\n    \"live_mode\": true,\\n    \"payer\": {\\n        \"phone\": {},\\n        \"id\": \"1608786725\",\\n        \"email\": \"test_user_11653412@testuser.com\",\\n        \"identification\": {\\n            \"number\": \"123456767\",\\n            \"type\": \"CC\"\\n        }\\n    },\\n    \"order\": {},\\n    \"transaction_amount\": 1234.56,\\n    \"transaction_amount_refunded\": 0,\\n    \"coupon_amount\": 0,\\n    \"transaction_details\": {\\n        \"acquirer_reference\": null,\\n        \"external_resource_url\": null,\\n        \"financial_institution\": null,\\n        \"installment_amount\": 1234.56,\\n        \"net_received_amount\": 234.17,\\n        \"overpaid_amount\": 0,\\n        \"payable_deferral_period\": null,\\n        \"payment_method_reference_id\": null,\\n        \"total_paid_amount\": 1234.56\\n    },\\n    \"fee_details\": [\\n        {\\n            \"type\": \"mercadopago_fee\",\\n            \"fee_payer\": \"collector\",\\n            \"amount\": 1000.39\\n        }\\n    ],\\n    \"captured\": true,\\n    \"binary_mode\": true,\\n    \"statement_descriptor\": \"Mercadopago*fake\",\\n    \"installments\": 1,\\n    \"card\": {\\n        \"first_six_digits\": \"401354\",\\n        \"last_four_digits\": \"6260\",\\n        \"expiration_month\": 11,\\n        \"expiration_year\": 2025,\\n        \"date_last_updated\": \"2023-12-26T18:04:10.000-04:00\",\\n        \"date_created\": \"2023-12-26T18:04:10.000-04:00\",\\n        \"cardholder\": {\\n            \"identification\": {\\n                \"number\": \"123456767\",\\n                \"type\": \"CC\"\\n            },\\n            \"name\": \"APRO\"\\n        }\\n    },\\n    \"refunds\": [],\\n    \"additional_info\": {\\n        \"authentication_code\": null,\\n        \"available_balance\": null,\\n        \"nsu_processadora\": null\\n    },\\n    \"processing_mode\": \"aggregator\",\\n    \"taxes_amount\": 0,\\n    \"shipping_amount\": 0,\\n    \"is_test\": false,\\n    \"authorization_code\": \"301299\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Add new fields to payment form\nDESCRIPTION: This HTML snippet demonstrates the structure of a payment form including the newly required fields for address and phone information of the payer. These fields are necessary for the updated PSE integration in the Checkout API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-migrate-pse.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<form id=\"form-checkout\" action=\"/process_payment\" method=\"post\">\n    <div>\n      <div>\n        <label for=\"zipCode\">Zip Code</label>\n        <input id=\"form-checkout__zipCode\" name=\"zipCode\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"streetName\">Street Name</label>\n        <input id=\"form-checkout__streetName\" name=\"streetName\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"streetNumber\">Street Number</label>\n        <input id=\"form-checkout__streetNumber\" name=\"streetNumber\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"neighborhood\">Neighborhood</label>\n        <input id=\"form-checkout__neighborhood\" name=\"neighborhood\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"city\">Ciudad</label>\n        <input id=\"form-checkout__city\" name=\"city\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"federalUnit\">Unidad Federal</label>\n        <input id=\"form-checkout__federalUnit\" name=\"federalUnit\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"phoneAreaCode\">PhoneAreaCode</label>\n        <input id=\"form-checkout__phoneAreaCode\" name=\"phoneAreaCode\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"phoneNumber\">PhoneNumber</label>\n        <input id=\"form-checkout__phoneNumber\" name=\"phoneNumber\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"email\">E-mail</label>\n        <input id=\"form-checkout__email\" name=\"email\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"personType\">Tipo de persona</label>\n        <select id=\"form-checkout__personType\" name=\"personType\" type=\"text\">\n          <option value=\"natural\">Natural</option>\n          <option value=\"juridica\">Jurídica</option>\n        </select>\n      </div>\n      <div>\n        <label for=\"identificationType\">Tipo de documento</label>\n        <select id=\"form-checkout__identificationType\" name=\"identificationType\" type=\"text\"></select>\n      </div>\n      <div>\n        <label for=\"identificationNumber\">Número del documento</label>\n        <input id=\"form-checkout__identificationNumber\" name=\"identificationNumber\" type=\"text\">\n      </div>\n    </div>\n    <div>\n      <div>\n        <label for=\"banksList\">Banco</label>\n        <div id=\"banksList\"></div> \n      </div>\n    </div>\n    <div>\n      <div>\n        <input type=\"hidden\" name=\"transactionAmount\" id=\"transactionAmount\" value=\"100\">\n        <input type=\"hidden\" name=\"description\" id=\"description\" value=\"Nome do Produto\">\n        <br>\n        <button type=\"submit\">Pagar</button>\n      </div>\n    </div>\n  </form>\n\n```\n\n----------------------------------------\n\nTITLE: Device List Response for Argentina (MLA)\nDESCRIPTION: This JSON response shows the structure of the data returned when retrieving the list of devices for Argentina. It includes device details such as ID, POS ID, store ID, and operating mode.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/payment-processing.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"devices\": [\n        {\n            \"id\": \"PAX_A910__SMARTPOS1234345545\",\n            \"pos_id\": 47792476,\n            \"store_id\": \"47792479\",\n            \"external_pos_id\": \"SUC0101POS\",\n            \"operating_mode\": \"PDV\"\n        },\n        {\n            \"id\": \"INGENICO_MOVE2500__ING-ARG-12348394345\",\n            \"pos_id\": 47792476,\n            \"store_id\": \"47792476\",\n            \"external_pos_id\": \"SUC0102POS\",\n            \"operating_mode\": \"STANDALONE\"\n        },\n        {\n            \"id\": \"INGENICO_MOVE2500__ING-ARG-4782743403\",\n            \"operating_mode\": \"PDV\",\n            \"pos_id\": 47792476,\n            \"store_id\": \"47792478\",\n            \"external_pos_id\": \"SUC0103POS\"\n        },\n        {\n            \"id\": \"PAX_A910__SMARTPOS849233453\",\n            \"pos_id\": 47792476,\n            \"store_id\": \"47792472\",\n            \"external_pos_id\": \"SUC0104POS\",\n            \"operating_mode\": \"STANDALONE\"\n        }\n    ],\n    \"paging\": {\n        \"total\": 4,\n        \"limit\": 50,\n        \"offset\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Close Safari View Controller with Expo-Web-Browser (iOS)\nDESCRIPTION: This code shows how to manually close the Safari View Controller on iOS after a deep link is received. It uses the Linking API to listen for URL changes and the WebBrowser API to dismiss the browser when a specific deep link is detected.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-expo-go.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n\tStatusBar\n} from \"expo-status-bar\";\nimport {\n\tStyleSheet,\n\tButton,\n\tView,\n\tLinking,\n\tPlatform\n} from \"react-native\";\nimport {\n\topenBrowserAsync\n} from \"expo-web-browser\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport {\n\tuseEffect\n} from \"react\";\nexport default function App() {\n\tuseEffect(() => {\n\t\tLinking.addEventListener(\"url\", (event) => {\n\t\t\tconst {\n\t\t\t\turl\n\t\t\t} = event;\n\t\t\tif (url !== null && url.includes(\"myapp://\")) {\n\t\t\t\tPlatform.OS === \"ios\" && WebBrowser.dismissBrowser();\n\t\t\t}\n\t\t});\n\t}, []);\n\tconst url = \"https://url-to-open.com\";\n\treturn ( <\n\t\tView style = {styles.container} >\n\t\t<\n\t\tButton title = \"Open Browser\"\n\t\tonPress = {\n\t\t\t() => openBrowserAsync(url)\n\t\t}\n\t\t/> <\n\t\tStatusBar style = \"auto\" / > < /View>\n\t);\n}\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tbackgroundColor: \"#fff\",\n\t\talignItems: \"center\",\n\t\tjustifyContent: \"center\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Mercado Pago SDK for React Projects\nDESCRIPTION: Demonstrates the command for installing the Mercado Pago SDK for React using npm. This is required to enable payment functionalities within React applications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-checkout.en.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-react\n```\n\n----------------------------------------\n\nTITLE: Exemplo de Notificação de Chargeback em JSON\nDESCRIPTION: Exemplo de payload de notificação enviada quando um chargeback é iniciado ou seu status é atualizado. Inclui detalhes sobre o chargeback e o pagamento associado.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/notification-additional-info.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"actions\":[\"changed_case_status\"],\n    \"api_version\":\"v1\",\n    \"application_id\":9007201037432480,\n    \"data\":{\n        \"checkout\":\"PRO\",\n        \"date_updated\":\"0001-01-01T00:00:00Z\",\n        \"id\":217000061307271000,\n        \"payment_id\":81034165129,\n        \"product_id\":\"BC32A57TRPP001U8NHHG\",\n        \"site_id\":\"MLA\",\n        \"transaction_intent_id\":\"\"\n        },\n    \"date_created\":\"2024-07-02T22:03:24-04:00\",\n    \"id\":114544942708,\n    \"live_mode\":true,\n    \"type\":\"topic_chargebacks_wh\",\n    \"user_id\":425424311,\n    \"version\":1720427447\n}\n```\n\n----------------------------------------\n\nTITLE: Creando pago con boleto bancario usando cURL\nDESCRIPTION: Comando cURL para crear un pago con boleto bancario llamando directamente a la API de Mercado Pago. Incluye los encabezados de autorización e idempotencia necesarios.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mlb.es.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n    'https://api.mercadopago.com/v1/payments' \\\n    -d '{\n      \"transaction_amount\": 100,\n      \"description\": \"Título do produto\",\n      \"payment_method_id\": \"bolbradesco\",\n      \"payer\": {\n        \"email\": \"PAYER_EMAIL_HERE\",\n        \"first_name\": \"Test\",\n        \"last_name\": \"User\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"19119119100\"\n        },\n        \"address\": {\n            \"zip_code\": \"06233200\",\n            \"street_name\": \"Av. das Nações Unidas\",\n            \"street_number\": \"3003\",\n            \"neighborhood\": \"Bonfim\",\n            \"city\": \"Osasco\",\n            \"federal_unit\": \"SP\"\n        }\n      }\n    }'\n```\n\n----------------------------------------\n\nTITLE: Managing Invalid Installment Configuration Error\nDESCRIPTION: Error triggered when attempting to process payments with unactivated rates. Requires setting payment method rates to \"Automatic\" in VTEX configuration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/vtex/common-errors.en.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`invalid installments`\n```\n\n----------------------------------------\n\nTITLE: Posting Transaction Intent with cURL\nDESCRIPTION: This cURL command is used to send a request to create a transaction intent for a payment. It includes transaction details such as amounts, bank information, and sender/receiver account data, ensuring all necessary headers are correctly set up for the API interaction.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-test.en.md#2025-04-18_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\ \n  --url https://api.mercadopago.com/v1/transaction-intents/process \\ \n  --header 'Authorization: Bearer TEST-6133*********794-11121*********edd13abd8*********82868e9-1*********' \\ \n  --header 'content-type: application/json' \\ \n  --header 'x-enforce-signature: false' \\ \n  --data ' {\n  \"external_reference\": \"12345\",\n  \"point_of_interaction\": {\n    \"type\": \"PSP_TRANSFER\"\n  },\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://example.mx/notification\"\n    }\n  },\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": 25\n        }\n      ]\n    },\n    \"to\": {\n      \"total_amount\": 25,\n      \"accounts\": [\n        {\n          \"amount\": 25,\n          \"bank_id\": \"646\",\n          \"number\": \"646180110400000007\",\n          \"holder\": \"JUAN JOSE MARIA\",\n          \"type\": \"savings_account\",\n          \"description\": \"envio de 25\"\n        }\n      ]\n    },\n    \"total_amount\": 25\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Buscando Pagamentos com PHP\nDESCRIPTION: Este trecho de código PHP utiliza a biblioteca do Mercado Pago para buscar pagamentos. Neste exemplo, a busca é realizada usando o campo 'external_reference'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/retrieving-payments.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\trequire ('mercadopago.php');\n\n\t$mp = new MP (\"ENV_ACCESS_TOKEN\");\n\n\t$payment = $mp->get(\n\t\t\"/v1/payments/search\",\n\t\tarray(\n\t\t\t\"external_reference\" => \"123456789\"\n\t\t)\n\t);\n?>\n```\n\n----------------------------------------\n\nTITLE: Displaying Region-Specific Chargeback Information in Markdown\nDESCRIPTION: This code snippet demonstrates how to display region-specific information about seller protection and chargeback handling using Markdown. It includes conditional blocks for different regions (MLB vs MLA, MLU, MCO, MPE, MLC, MLM) with links to relevant help pages.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/chargebacks/introduction.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n----[mlb]----\n[Click here](https://www.mercadopago[FAKER][URL][DOMAIN]/ajuda/Como-protegemos-os-vendedores_500) for more details on how we protect our sellers.\n\n> NOTE\n>\n> Important\n>\n> For more information on what to do when you receive a chargeback, see [our help page](https://www.mercadopago[FAKER][URL][DOMAIN]/ajuda/reclamacao-comprador_583).\n\n------------\n----[mla, mlu, mco, mpe, mlc, mlm]----\n[Click here](https://www.mercadopago[FAKER][URL][DOMAIN]/ayuda/Como-protegemos-a-los-vendedores_500) for more details on how we protect our sellers.\n\n> NOTE\n>\n> Important\n>\n> For more information on what to do when you receive a chargeback, see [our help page](https://www.mercadopago[FAKER][URL][DOMAIN]/ayuda/reclamo-comprador_583).\n\n------------\n```\n\n----------------------------------------\n\nTITLE: CSV Sample File with All Data for Payment Links\nDESCRIPTION: This snippet shows an example of a CSV file prepared with all the necessary data for processing payment links in MercadoPago. It includes mandatory and optional fields that might be required depending on company policies.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/format-specifications.en.md#2025-04-18_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\next2024030614313,521998672,1002,20250312,549.57,20250315,778.87,20250318,801.87,Miss Kristopher Kautzer,1138225523,felica.walsh@example.com,Cuota,Ref2024,5\n```\n\n----------------------------------------\n\nTITLE: Searching for Customers with MercadoPago SDK in PHP\nDESCRIPTION: This snippet shows how to search for customers using MercadoPago's CustomerClient. It creates a search request with pagination parameters (both set to 0) and filters by customer email.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/customers.en.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new CustomerClient();\n  $search_request = new MPSearchRequest(0, 0, [\"email\" => \"test_payer_12345@testuser.com\"]);\n  $client->search($search_request);\n?>\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Client Credentials Types\nDESCRIPTION: Table showing types and descriptions of Client ID and Client Secret credentials\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/credentials/credentials.en.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Type | Description |\n|---|---|\n| Client ID | Unique identifier that represents your integration. |\n| Client Secret | Private key used in some plugins to generate payments. It is extremely important to keep this information secure on your servers and not allow access to any user of the system or intruder. |\n```\n\n----------------------------------------\n\nTITLE: Activating Automatic Settlement Report Generation with Mercado Pago API\nDESCRIPTION: This code snippet demonstrates how to schedule automatic generation of settlement reports using the Mercado Pago API. It sends a POST request to the /v1/account/settlement_report/schedule endpoint with appropriate headers. The response includes details of the scheduled report.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.es.md#2025-04-18_snippet_20\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/schedule'\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$response = Requests::post('https://api.mercadopago.com/v1/account/settlement_report/schedule', $headers);\n```\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report/schedule\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"POST\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\nresponse = requests.post('https://api.mercadopago.com/v1/account/settlement_report/schedule', headers=headers)\n```\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report/schedule',\n    method: 'POST',\n    headers: headers\n};\n\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\n\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Menu for Multiple Regions\nDESCRIPTION: YAML configuration defining the anchored menu structure for multiple regions (MLB, MLM, MLU, MLC, MCO, MPE) with links to various Brick demos.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/landing.en.md#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nanchored_menu: \n - title: Card Payment Brick\n - link: /developers/en/live-demo/card-payment-brick\n - title: Payment Brick\n - link: /developers/en/live-demo/payment-brick\n - title: Status Screen Brick\n - link: /developers/en/live-demo/status-screen-brick\n - title: Wallet Brick\n - link: /developers/en/live-demo/wallet-brick\n```\n\n----------------------------------------\n\nTITLE: Credit Card Payment Method Configuration\nDESCRIPTION: Detailed configuration steps for setting up credit card payment options, including interest rates, installment configurations, and payment flags in Mercado Pago\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/linx/configure-payment-method.es.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n| Campos | Datos |\n| --- | --- |\n| Porcentaje de interés | Completa el porcentaje de interés que quieras agregar. |\n| Tipo de interés | Emisor - Incluye intereses en el pedido total. |\n| Número total de cuotas | Ingresa el número total de cuotas que quieres ofrecer. |\n```\n\n----------------------------------------\n\nTITLE: Closing Fintoc Widget\nDESCRIPTION: Function to close the Fintoc iframe without destroying the widget instance.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-advanced.es.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction closeFintoc() {\n      fintoc.close()\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Value Proposition Text in JavaScript\nDESCRIPTION: This code snippet demonstrates how to hide the value proposition text on the Wallet Brick button using JavaScript. It sets the hideValueProp property to true within the customization object.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-appearance.en.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n\t   theme: 'default',\n        customStyle: {\n            hideValueProp: true,\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Card Creation in Mercado Pago\nDESCRIPTION: Sample JSON response returned after successfully adding a new card to a customer. Contains card details including expiration date, payment method information, security code details, issuer information, and cardholder data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/add-new-cards-to-customer.es.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"1493990563105\",\n    \"expiration_month\": 12,\n    \"expiration_year\": 2020,\n    \"first_six_digits\": \"503175\",\n    \"last_four_digits\": \"0604\",\n    \"payment_method\": {\n        \"id\": \"master\",\n        \"name\": \"master\",\n        \"payment_type_id\": \"credit_card\",\n        \"thumbnail\": \"http://img.mlstatic.com/org-img/MP3/API/logos/master.gif\",\n        \"secure_thumbnail\": \"https://www.mercadopago.com/org-img/MP3/API/logos/master.gif\"\n    },\n    \"security_code\": {\n        \"length\": 3,\n        \"card_location\": \"back\"\n    },\n    \"issuer\": {\n        \"id\": 3,\n        \"name\": \"Mastercard\"\n    },\n    \"cardholder\": {\n        \"name\": \"Card holdername\",\n\n        \"identification\": {\n            \"number\": \"12345678\",\n            \"type\": \"DNI\"\n        }\n\n    },\n    \"date_created\": \"2017-05-05T09:22:30.893-04:00\",\n    \"date_last_updated\": \"2017-05-05T09:22:30.893-04:00\",\n    \"customer_id\": \"255276729-yLOTNHQjpDWw1X\",\n    \"user_id\": \"255276729\",\n    \"live_mode\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling Payments in C#\nDESCRIPTION: This C# code demonstrates how to cancel a payment using the MercadoPago SDK. It sets the access token, creates request options with custom headers, and calls the CancelAsync method on the PaymentClient instance.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/cancel-reserve.en.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n\nvar client = new PaymentClient();\nPayment payment = await client.CancelAsync(paymentId, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Listing Connected Devices on Windows\nDESCRIPTION: Command to list connected Android devices using ADB on Windows.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/how-to-install-android-macos-windows.en.md#2025-04-18_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\nadb.exe devices\n```\n\n----------------------------------------\n\nTITLE: Retrieving Rejected Payment Status via Mercado Pago API\nDESCRIPTION: This JSON response example shows a rejected payment with insufficient funds as the reason. The response includes the payment status, detailed rejection reason, payment ID, and payment method information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/payment-rejections.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status\": \"rejected\",\n    \"status_detail\": \"cc_rejected_insufficient_amount\",\n    \"id\": 47198050,\n    \"payment_method_id\": \"master\",\n    \"payment_type_id\": \"credit_card\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Hidden Input for Device ID in HTML\nDESCRIPTION: This snippet shows how to create a hidden input field to store the Device ID value.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"hidden\" id=\"deviceId\">\n```\n\n----------------------------------------\n\nTITLE: Pix Refund Response JSON\nDESCRIPTION: Successful refund response containing refund details including ID, amount, timestamp, and status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/pix-payments/payment-refund.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"1656015124\",\n    \"valor\": \"0.10\",\n    \"horario\": {\n        \"solicitacao\": \"2022-06-23T20:12:05.103Z\",\n        \"liquidacao\": \"2022-06-23T20:12:10.210Z\"\n    },\n    \"status\": \"DEVOLVIDO\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Intent Statuses in Markdown\nDESCRIPTION: This snippet creates a markdown table to define the possible statuses of payment intents, refund intents, and impressions in Mercado Pago's system. It includes statuses such as Open, On_Terminal, Processing, Processed, Finished, Confirmation_required, Canceled, Error, and Abandoned.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/glossary.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Status                  | Descrição                                                                                                                            | Intenção de pagamento | Intenção de reembolso | Impressões |\n|-------------------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------------------|-----------------------|-------------|\n| `Open`                  | Status inicial de uma intenção ao criá-la a partir do PDV.                                                                           | ✔                     | ✔                     | ✔           |\n| `On_Terminal`           | Status intermediário de uma intenção ao obtê-la do dispositivo Point.                                                                | ✔                     | ✔                     | ✔           |\n| `Processing`            | Status provisório de intenção no momento da reconciliação com uma instituição financeira.                                             | ✔                     | ✔                     | -           |\n| `Processed`             | Status provisório de intenção de pagamento no momento de finalizar a reconciliação com uma instituição financeira.                    | ✔                     | -                     | -           |\n| `Finished`              | Status final de uma intenção quando a transação termina.                                                                             | ✔                     | ✔                     | ✔           |\n| `Confirmation_required` | Status final de uma intenção de pagamento quando concluiu sem recever um status do pagamento. Uma vez obtido, esse status não mudará. Ao recebê-lo, você deve confirmar em seu dispositivo qual é o status do pagamento, usando o `payment_id` recebido na resposta, antes de entregar seu produto ou serviço.                                        | ✔                     | -                     | ✔           |\n| `Canceled`              | Status final de uma intenção quando ela é cancelada.                                                                                 | ✔                     | ✔                     | ✔           |\n| `Error`                 | Status final de uma intenção quando ocorre um erro de transação.                                                                     | ✔                     | ✔                     | ✔           |\n| `Abandoned`             | Status final de uma intenção quando ela não é processada após um certo tempo.                                                        | ✔                     | ✔                     | ✔           |\n```\n\n----------------------------------------\n\nTITLE: Initializing Card Payment Brick with Email in React\nDESCRIPTION: This React-specific code shows how to set up the initialization object for the Card Payment Brick, including the payer's email. The email field will be pre-filled and hidden when a valid email is provided.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/initialize-data-on-the-bricks.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst initialization = {\n ...,\n payer: {\n   ...,\n   email: '<PAYER_EMAIL_HERE>',\n },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Mercado Pago Button Action and Value Proposition in React\nDESCRIPTION: This snippet shows how to customize both the action text and value proposition of the Mercado Pago payment button using React JSX. It sets the action to 'buy' and the value proposition to 'security_details'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-texts.en.md#2025-04-18_snippet_3\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n texts: {\n   action: 'buy',\n   valueProp: 'security_details',\n },\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an Event in Mercado Pago Reports API\nDESCRIPTION: This command shows how to delete a specific event from the marketplace sellers sales reports using its event_id. Authorization via Bearer token is required.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/deactivation.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request DELETE 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/events/{{event_id}}' \\\n--header 'Authorization: Bearer {{TOKEN}}'\n```\n\n----------------------------------------\n\nTITLE: Webhook Event: User Confirmation\nDESCRIPTION: This code snippet shows the JSON structure of a webhook notification sent when a user confirms an agreement. The `data` field contains the `id` of the agreement and the `status` is set to `confirmed_by_user`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/notifications.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\n\n```curl\n{\n  \"id\": \"22abcd1235ed497f945f755fcaba3c6c\",\n  \"type\": \"wallet_connect\",\n  \"entity\": \"agreement\",\n  \"action\": \"status.updated\",\n  \"date\": \"2021-09-30T23:24:44Z\",\n  \"model_version\": 1,\n  \"version\": 0,\n  \"data\": {\n    \"id\": \"22abcd1235ed497f945f755fcaba3c6c\",\n    \"status\": \"confirmed_by_user\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Web Tokenize Checkout V2 with Saved Cards\nDESCRIPTION: This JavaScript snippet shows the initialization of the Web Tokenize Checkout V2 when saved cards are used. It includes parameters to define customerId and cardIds.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-clientside.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<script>\n  mp.checkout({\n    tokenizer: {\n        totalAmount: 4000,\n        backUrl: 'https://www.mi-sitio.com/process',\n        savedCards: {\n            cardIds: '1518023392627,1518023332143' // IDs de las tarjetas\n            customerId: '209277402-FqRqgEc3XItrxs' // Tu customer ID\n        }\n    },\n    render: {\n        container: ‘.tokenizer-container’,\n        label: ‘Pagar’\n    }\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Invalid Coupon Code Response with Mercado Pago API\nDESCRIPTION: This snippet shows the JSON response when an invalid coupon code is provided. The error message indicates that no campaign matches the given code.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/discount-campaigns.en.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"invalid parameters\",\n    \"error\": \"bad_request\",\n    \"status\": 400,\n    \"cause\": [\n        {\n            \"code\": \"campaign_code_doesnt_match\",\n            \"description\": \"doesn't find a campaign with the given code\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: X-Signature Header Format from Mercado Pago\nDESCRIPTION: Example of the x-signature header format sent by Mercado Pago in webhook notifications, containing a timestamp and signature value.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.es.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n`ts=1742505638683,v1=ced36ab6d33566bb1e16c125819b8d840d6b8ef136b0b9127c76064466f5229b`\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods for Brazil (MLB)\nDESCRIPTION: YAML configuration specifying available payment methods for Brazil, including credit, debit, mercadopago, boleto, and pix.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/landing.en.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\navailable_payments: credit, debit, mercadopago, boleto, pix\n```\n\n----------------------------------------\n\nTITLE: Configuring Back URLs in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to configure back URLs and auto-return for a MercadoPago preference. It sets up success, failure, and pending URLs, and enables automatic return for approved payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$preference = new MercadoPago\\Preference();\n//...\n$preference->back_urls = array(\n    \"success\" => \"https://www.tu-sitio/success\",\n    \"failure\" => \"http://www.tu-sitio/failure\",\n    \"pending\" => \"http://www.tu-sitio/pending\"\n);\n$preference->auto_return = \"approved\";\n// ...\n?>\n```\n\n----------------------------------------\n\nTITLE: Sample Pending Challenge Payment Response (JSON)\nDESCRIPTION: This JSON snippet shows the structure of a payment response when the payment is pending a 3DS challenge.  The `three_ds_info` object contains the URL for the challenge and a `creq` value that needs to be posted to the URL. The `status` will be `pending` and `status_detail` will be `pending_challenge` until the challenge is completed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-bigmerchants.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 52044997115,\n    ...\n    \"status\": \"pending\",\n    \"status_detail\": \"pending_challenge\",\n    ...\n    \"three_ds_info\":\n    {\n        \"external_resource_url\": \"https://acs-public.tp.mastercard.com/api/v1/browser_Challenges\",\n        \"creq\": \"eyJ0aHJlZURTU2VydmVyVHJhbnNJRCI6ImJmYTVhZjI0LTliMzAtNGY1Yi05MzQwLWJkZTc1ZjExMGM1MCIsImFjc1RyYW5zSUQiOiI3MDAwYTI2YS1jYWQ1LTQ2NjQtOTM0OC01YmRlZjUwM2JlOWYiLCJjaGFsbGVuZ2VXaW5kb3dTaXplIjoiMDQiLCJtZXNzYWdlVHlwZSI6IkNSZXEiLCJtZXNzYWdlVmVyc2lvbiI6IjIuMS4wIn0\"\n    },\n    \"owner\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Expo Web Browser Implementation\nDESCRIPTION: Example of implementing Expo Web Browser in a React Native component with a button to open web content\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-expo-go.es.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n\tStatusBar\n} from \"expo-status-bar\";\nimport {\n\tStyleSheet,\n\tButton,\n\tView\n} from \"react-native\";\nimport {\n\topenBrowserAsync\n} from \"expo-web-browser\";\nexport default function ExpoWebBrowserExample(url) {\n\treturn ( <\n\t\tView style = {\n\t\t\tstyles.container\n\t\t} > < Button title = \"Open Browser\"\n\t\tonPress = {\n\t\t\t() => openBrowserAsync('YOUR-URL-PREFERENCE')\n\t\t}\n\t\t/> <StatusBar style=\"auto\" / >\n\t\t<\n\t\t/View> );\n\t}\n\tconst styles = StyleSheet.create({\n\t\tcontainer: {\n\t\t\tflex: 1,\n\t\t\tbackgroundColor: \"#fff\",\n\t\t\talignItems: \"center\",\n\t\t\tjustifyContent: \"center\",\n\t\t},\n\t});\n```\n\n----------------------------------------\n\nTITLE: Implementing PSE Payment with MercadoPago in Python\nDESCRIPTION: This Python code creates a PSE payment using MercadoPago SDK. It sets up the payment with transaction amount, payer details, and additional information required for PSE transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-migrate-pse.en.md#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n import mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n \npayment_data = {\n   \"transaction_amount\": 5000,\n   \"description\": \"Product description\",\n   \"payment_method_id\": \"pse\",\n   \"additional_info\": {\n      \"ip_address\": \"127.0.0.1\"\n   },\n   \"transaction_details\": {\n      \"financial_institution\": request.POST.get(\"financialInstitution\")\n   },\n   \"callback_url\": \"https://your-site.com\"\n   \"payer\": {\n       \"email\": request.POST.get(\"email\"),\n       \"entity_type\": \"individual\",\n       \"identification\": {\n           \"type\": request.POST.get(\"identificationType\"), \n           \"number\": request.POST.get(\"identificationNumber\")\n       }\n       \"address\": {\n                 \"zip_code\": request.POST.get(\"zipCode\"),\n                 \"street_name\": request.POST.get(\"streetName\"),\n                 \"street_number\": request.POST.get(\"streetNumber\"),\n                 \"neighborhood\": request.POST.get(\"neighborhood\"),\n                 \"city\": request.POST.get(\"city\"),\n                 \"federal_unit\": request.POST.get(\"federalUnit\")\n       },\n       \"phone\": {\n                 \"area_code\": request.POST.get(\"phoneAreaCode\"),\n                 \"number\": request.POST.get(\"phoneNumber\")\n       }\n   }\n}\n \npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Integrating Form with Saved Cards\nDESCRIPTION: This HTML form snippet connects to the Web Tokenize Checkout V1 using specific customer and card IDs, essential for facilitating payments from saved card details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-clientside.en.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/procesar-pago\" method=\"POST\">\n   <script\n     src=\"https://www.mercadopago.com.ar/integrations/v1/web-tokenize-checkout.js\"\n     data-public-key=\"ENV_PUBLIC_KEY\"\n     data-transaction-amount=\"100.00\"\n     data-customer-id=\"209277402-FqRqgEc3XItrxs\"\n     data-card-ids=\"1518023392627,1518023332143\">\n   </script>\n </form>\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Python\nDESCRIPTION: This Python snippet requires code completion. The code has not been provided\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.pt.md#2025-04-18_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment Amount in Ruby with Mercado Pago SDK\nDESCRIPTION: This snippet shows how to capture a partial amount of 75 from a previously reserved payment using Ruby. It initializes the Mercado Pago SDK, creates a request object with the transaction amount and capture flag, and updates the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.es.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\nrequest = {\n  transaction_amount: 75,\n  capture: true\n}\n\npayment_response = sdk.payment.update(payment_id, request)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins in app.modules.ts for Redelcom Integration\nDESCRIPTION: Steps to add the installed plugins as services to the providers array in the @NgModule decorator of app.modules.ts.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/cross-platform-ionic.es.md#2025-04-18_snippet_1\n\nLANGUAGE: ionic\nCODE:\n```\nimport { WebIntent } from '@ionic-native/web-intent/ngx'; \nimport { AppVersion } from '@ionic-native/app-version/ngx'; \n… \nproviders: [ \n \tWebIntent, \n \tAppVersion \n], \n…\n```\n\n----------------------------------------\n\nTITLE: Chile Payment Methods Banner Implementation\nDESCRIPTION: HTML code for displaying Mercado Pago payment method banners for Chile (MLC) in various dimensions including 785x40, 575x40, 468x60, 125x125, 120x240, and 120x600 pixels.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/all.en.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://www.mercadopago.cl/banner/785x40_banner.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"735\" height=\"40\"/>\n```\n\n----------------------------------------\n\nTITLE: Associating Google Ads with a Preference in Mercado Pago SDK - C#\nDESCRIPTION: This snippet shows how to associate Google Ads tracking parameters with a preference using the Mercado Pago SDK. It requires replacing the conversion ID and label with the relevant tag data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/preferences.en.md#2025-04-18_snippet_3\n\nLANGUAGE: dotnet\nCODE:\n```\n// Associate your tag\nvar tracks = new List<PreferenceTrackRequest>\n{\n    new PreferenceTrackRequest\n    {\n        Type = \"google_ad\",\n        Values = new PreferenceTrackValuesRequest\n        {\n            ConversionId = \"CONVERSION_ID\",\n            ConversionLabel = \"CONVERSION_LABEL\",\n        },\n    },\n};\nvar request = new PreferenceRequest\n{\n    // ...\n    Tracks = tracks,\n};\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: CSV Example for Vault Migration\nDESCRIPTION: This CSV example demonstrates the format for the output file used during vault migration to tokenization. It includes fields for status, customer ID, card ID, reference ID, and status detail, showcasing successful (FINALIZED) and failed (REJECTED) migration attempts along with relevant details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/batch-payments-vault-migration/vault-migration/output-format-vault-migration.es.md#2025-04-18_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\n\"STATUS\",\"CUSTOMER_ID\",\"CARD_ID\",\"REFERENCE_ID\",\"STATUS_DETAIL\"\n\"FINALIZED\",\"1234-cust_id\",\"270\",\"ref_id_externa_2p_1800008\",\"Se actualizó el card id\"\n\"FINALIZED\",\"1234-cust_id,270\",\"ref_id_externa_2p_1800010\",\"\"\",\"\"\n\"FINALIZED\",\"1234-cust_id,270\",\"ref_id_externa_2p_1800007\",\"Se actualizó el card id\"\n\"FINALIZED\",\"1234-cust_id,270\",\"ref_id_externa_2p_1800006\",\"Se actualizó el card id\"\n\"FINALIZED\",\"1234-cust_id,270\",\"ref_id_externa_2p_1800009\",\"Se actualizó el card id\"\n\"REJECTED\",\"\"\",\"\"\",\"0005123500001\",\"Fecha de tarjeta expirada\"\n\"REJECTED\",\"\"\",\"\"\",\"0017683000001\",\"Sintaxis del email inválida\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Test Credentials Types\nDESCRIPTION: Table showing types and descriptions of test credentials\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/credentials/credentials.en.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Type | Description |\n|---|---|\n| Public Key | The application's public key is generally used in the frontend. It allows, for example, access to information about payment methods and encrypt card data. |\n| Access Token | Application's private key that should always be used in the backend to generate payments. It is essential to keep this information safe on your servers. |\n```\n\n----------------------------------------\n\nTITLE: Uploading File Using SFTP Console in Terminal\nDESCRIPTION: This snippet demonstrates the process of logging into SFTP, navigating to the correct directory, uploading a file, and verifying the upload. It includes commands for connecting, listing directories, changing directories, uploading files, and disconnecting.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/upload-a-file.en.md#2025-04-18_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nUY0FVFGW103Q05P: ~ user$ sftp pg_sap@sftp-qa.mercadolibre.io\nConnected to sftp-qa.mercadolibre.io.\nsftp> ls\nselfserviceinput\tselfserviceoutput\nsftp> cd selfserviceinput\nsftp> ls\nsftp> put /\tUsers/user/debt_589_6_20230804.csv\nUploading /Users/user/debt_589_6_20230804.csv to /selfserviceinput/debt_589_6_20230804.csv\n/Users/user/debt_589_6_20230804.csv\nsftp> ls\ndebt_589_6_20230804.csv\nsftp> bye\n```\n\n----------------------------------------\n\nTITLE: Updating Settlement Report Configuration with Mercado Pago API (Node.js)\nDESCRIPTION: This Node.js code updates the settlement report configuration using the Mercado Pago API. It uses the request library to send a PUT request with the configuration data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar dataString = '{\n        \"file_name_prefix\": \"settlement-report-USER_ID\",\n        \"show_fee_prevision\": false,\n        \"show_chargeback_cancel\": true,\n        \"detailed\": true,\n        \"coupon_detailed\": true,\n        \"shipping_detail\": true,\n        \"refund_detailed\": true,\n        \"extended\": false,\n        \"frequency\": {\n            \"hour\": 0,\n            \"type\": \"monthly\",\n            \"value\": 1\n        }\n    }';\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report/config',\n    method: 'PUT',\n    headers: headers,\n    body: dataString\n};\n\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\n\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Initializing MercadoPago SDK in React\nDESCRIPTION: This snippet shows how to initialize the MercadoPago SDK in a React application using the public key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-checkout.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { initMercadoPago, Wallet } from '@mercadopago/sdk-react'\ninitMercadoPago('YOUR_PUBLIC_KEY');\n```\n\n----------------------------------------\n\nTITLE: Example Webhook Notification for Transaction Creation\nDESCRIPTION: JSON example of a webhook notification sent when a transaction is created. The notification includes the transaction ID, creation date, and status information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.en.md#2025-04-18_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"transaction_intent.created\",\n  \"api_version\": \"v1\",\n  \"data\": {\n    \"id\": \"1108917506-01GGTH198RP0K71H133EK9BJAT\" // ID of the transaction intent\n  },\n  \"date_created\": \"2022-11-01T17:19:53.915-04:00\",\n  \"id\": \"103686924004\", // ID of the notification\n  \"last_updated\": \"0001-01-01T00:00:00Z\",\n  \"status\": \"new\",\n  \"type\": \"transaction_intent\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Form for Yape Data Capture\nDESCRIPTION: HTML form implementation for capturing the required Yape payment data: phone number and OTP (One-time password). The form includes input fields and a submission button that triggers the handleYape function.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form id=\"form-checkout\">\n  <div>\n    <label for=\"payerPhone\">Phone Number</label>\n    <input id=\"form-checkout__payerPhone\" name=\"payerPhone\" type=\"text\" />\n  </div>\n  <div>\n    <label for=\"payerOTP\">OTP</label>\n    <input id=\"form-checkout__payerOTP\" name=\"payerOTP\" type=\"text\" />\n  </div>\n  <div>\n    <button onclick=\"handleYape()\">Create YAPE</button>\n  </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: MercadoPago Refunds and Cancellations API Endpoints\nDESCRIPTION: API endpoint reference table documenting available actions for managing refunds and cancellations, including retrieving chargeback information, creating refunds, listing refunds for payments, and cancelling sales.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/apiref-refunds.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Refunds\n\n|Action|Description|\n|---|---|\n|[Get chargeback](https://www.mercadopago[FAKER][URL][DOMAIN]/developers/en/reference/chargebacks/_chargebacks_id/get)|Check all the information related to a chargeback for your product or service with the ID of the chargeback you want.|\n|[Create refund](https://www.mercadopago[FAKER][URL][DOMAIN]/developers/en/reference/chargebacks/_payments_id_refunds/post)|Create Partial/Full Refund for a specific payment.|\n|[Get refunds list](https://www.mercadopago[FAKER][URL][DOMAIN]/developers/en/reference/chargebacks/_payments_id_refunds/get)|Get all Refunds for a specific payment.|\n|[Get specific refund](https://www.mercadopago[FAKER][URL][DOMAIN]/developers/en/reference/chargebacks/_payments_id_refunds_refund_id/get)|Get a specific Refund from a specific payment.|\n\n### Cancellations\n\n|Action|Description|\n|---|---|\n|[Create cancellation](https://www.mercadopago[FAKER][URL][DOMAIN]/developers/en/reference/chargebacks/_payments_payment_id/put)|Cancel a sale for a specific payment.|\n```\n\n----------------------------------------\n\nTITLE: Integrating Facebook Pixel ID with Checkout Pro Preference in Node.js\nDESCRIPTION: This code snippet shows how to associate a Facebook pixel ID with a Checkout Pro preference using Node.js. It enables tracking of ad conversions from Facebook campaigns.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.es.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\n// Configura tu preferencia\nvar preference = {\n\n  // Asocia tu píxel de Facebook\n  tracks: [\n        {\n          type: \"facebook_ad\",\n          values: {\n            \"pixel_id\": 'PIXEL_ID'\n          }\n        }\n      ]\n  //...\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Mercado Pago Module via Composer\nDESCRIPTION: Command to download and install the Mercado Pago payment module using Composer package manager.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/adobe-commerce/installation-composer.en.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require mercadopago/adb-payment\n```\n\n----------------------------------------\n\nTITLE: HTML Form for OTP and Phone Number Capture\nDESCRIPTION: HTML form implementation to collect the phone number and OTP (one-time password) required for Yape token generation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.en.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form id=\"form-checkout\">\n  <div>\n    <label for=\"payerPhone\">Phone Number</label>\n    <input id=\"form-checkout__payerPhone\" name=\"payerPhone\" type=\"text\" />\n  </div>\n  <div>\n    <label for=\"payerOTP\">OTP</label>\n    <input id=\"form-checkout__payerOTP\" name=\"payerOTP\" type=\"text\" />\n  </div>\n  <div>\n    <button onclick=\"handleYape()\">Create YAPE</button>\n  </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Initializing Wallet Brick with Redirect Mode in React\nDESCRIPTION: This React code snippet initializes the Wallet Brick with the `redirectMode` set to `blank`, which opens the checkout in a new page.  It requires a `<PREFERENCE_ID>`. The `<Wallet>` component is used to render the wallet brick with the specified initialization properties.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/opening-mode.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\n<Wallet initialization={{ preferenceId: '<PREFERENCE_ID>', redirectMode: 'blank' }} />\n```\n\n----------------------------------------\n\nTITLE: Parsing Payment Response Kotlin\nDESCRIPTION: This Kotlin code snippet shows how to parse the payment response using the `parseResponse` function of the `PaymentFlow` class, and check the `paymentReference` to manage success or error scenarios.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/payment-flow-legacy-support.en.md#2025-04-18_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nintent.data?.let { data ->\n   val response = paymentFlow.parseResponse(data)\n   if (response.paymentReference.isNotEmpty()) {\n       // Payment management with success case\n   } else {\n       // Payment management with an error\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing First Subscription Payment - cURL\nDESCRIPTION: Makes a direct API call to create a first-time subscription payment using cURL. Demonstrates the raw HTTP request format with all required subscription parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/subscription-messaging.en.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"description\": \"{{description}}\",\n    \"token\": \"{{card_token}}\",\n    \"payer\": {\n        \"id\": \"{{customer_id}}\",\n        \"type\": \"{{type}}\"\n    },\n    \"payment_method_id\": \"{{payment_method_id}}\",\n    \"transaction_amount\": {{transaction_amount}},\n    \"point_of_interaction\": {\n        \"type\": \"{{type}}\",\n        \"transaction_data\": {\n            \"first_time_use\": {{first_time_use}},\n            \"subscription_id\": \"{{subscription_id}}\",\n            \"subscription_sequence\": {\n                \"number\": {{subscription_number}},\n                \"total\": {{subscription_total}}\n            },\n            \"invoice_period\": {\n                \"period\": {{invoice_period}},\n                \"type\": \"{{invoice_type}}\"\n            },\n            \"billing_date\": \"{{billing_date}}\",\n            \"user_present\": {{user_present}}\n```\n\n----------------------------------------\n\nTITLE: Modifying Email Notifier using PUT Request in MercadoPago API\nDESCRIPTION: This curl command demonstrates how to modify an existing email notifier using a PUT request to the MercadoPago API. It includes parameters for notifier type, recipient data, and description.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/modifications.es.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request PUT 'https://api.mercadopago.com/v1/reports/notifiers/{{notifier_id}}' \\\n--header 'Authorization: Bearer {{TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"type\": \"email\",\n    \"data\": {\n        \"recipients\": [\"test@mercadolibre.com\"]\n    },\n    \"description\": \"test notifier email\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Token with cURL\nDESCRIPTION: Send a POST request to generate a payment token for a specific agreement, requiring authorization headers and a code parameter\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/create-payer-token.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n      'https://api.mercadopago.com/v2/wallet_connect/agreements/<AGREEMENT.ID>/payer_token'\\\n       -H 'Content-Type: application/json' \\\n       -H 'x-platform-id: YOUR_PLATFORM_ID' \\\n       -H 'Authorization: Bearer TEST-3322*********190-03031*********46528954c*********0339910-1*********' \\\n       -d '{\n  \"code\": \"aeecea3e11f2545d1e7790eb6591ff68df74c57930551ed980239f4538a7e530\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Create Mercado Pago Payment with Boleto in PHP\nDESCRIPTION: This code snippet demonstrates how to create a payment using the Mercado Pago SDK in PHP.  It initializes the SDK with an access token, sets the payment details like transaction amount, description, payment method (bolbradesco), and payer information. It then saves the payment object, which sends the request to the Mercado Pago API to create the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n require_once 'vendor/autoload.php';\n MercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n $payment = new MercadoPago\\Payment();\n $payment->transaction_amount = 100;\n $payment->description = \"Título del producto\";\n $payment->payment_method_id = \"bolbradesco\";\n $payment->payer = array(\n     \"email\" => \"test@test.com\",\n     \"first_name\" => \"Test\",\n     \"last_name\" => \"User\",\n     \"identification\" => array(\n         \"type\" => \"DNI\",\n         \"number\" => \"19119119\"\n      ),\n     \"address\"=>  array(\n         \"zip_code\" => \"1264\",\n         \"street_name\" => \"Av. Caseros\",\n         \"street_number\" => \"3039\",\n         \"neighborhood\" => \"Parque Patricios\",\n         \"city\" => \"Buenos Aires\",\n         \"federal_unit\" => \"BA\"\n      )\n   );\n $payment->save();\n?>\n\n```\n\n----------------------------------------\n\nTITLE: Successful Payment Intent Response in JSON\nDESCRIPTION: This JSON snippet shows the structure of a successful response when creating a payment intent. It includes the rdcTransactionId, which is important for future reference and queries.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/api-create-payment-intent.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"rdcTransactionId\": \"294-3727-16384\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Money Out Transfer to Bank Account (Argentina)\nDESCRIPTION: This cURL request demonstrates how to initiate a Money Out transfer to a bank account in Argentina using the Mercado Pago API. It includes the necessary headers and JSON payload with transaction details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.es.md#2025-04-18_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\\n  --url https://api.mercadopago.com/v1/transaction-intents/process \\\n  --header 'Authorization: Bearer TEST-4613*********761-11121*********92cd39015*********7bbc3cb-1*********' \\\n  --header 'content-type: application/json' \\\n  --header 'x-enforce-signature: false' \\\n  --data '{\n  \"external_reference\": \"external_ref_1234\",\n  \"point_of_interaction\": {\n    \"type\": \"PSP_TRANSFER\"\n  },\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://example.com.ar/notification\"\n    }\n  },\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": 25\n        }\n      ]\n    },\n    \"to\": {\n      \"total_amount\": 25,\n      \"accounts\": [\n        {\n          \"amount\": 25,\n          \"bank_id\": \"015\",\n          \"number\": \"0150533701000132688355\",\n          \"holder\": \"Victor Hugo\",\n          \"owner\": {\n              \"identification\": {\n                  \"number\": \"20209642647\",\n                  \"type\": \"CUIT\"\n              }\n          },\n          \"type\": \"savings_account\",\n          \"description\": \"envio de 25\"\n        }\n      ]\n    },\n    \"total_amount\": 25\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Android Manifest Deep Link Configuration\nDESCRIPTION: XML configuration for deep linking in Android's AndroidManifest.xml file.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-expo-go.en.md#2025-04-18_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<activity ....> ....\n<intent-filter data-generated=\"true\">\n<action android:name=\"android.intent.action.VIEW\"/>\n<data android:scheme=\"myapp\" android:host=\"checkout\" android:pathPrefix=\"/congrats\"/> <category android:name=\"android.intent.category.BROWSABLE\"/>\n<category android:name=\"android.intent.category.DEFAULT\"/> </intent-filter>\n....\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Sub-merchant Data Structure in JSON\nDESCRIPTION: This JSON snippet illustrates the structure for sending sub-merchant data within the `forward_data` property when creating a payment. The sub-merchant object contains fields such as `sub_merchant_id`, `mcc`, `country`, and `document_number` which are required for compliance with regulations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subcredenciadores-payfacs/integration-update.es.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"payer\": {...},\n  \"forward_data\": {\n    \"sub_merchant\": {\n      \"sub_merchant_id\": 123123,\n      \"mcc\": \"5462\",\n      \"country\": \"BRA\",\n      \"address_door_number\": 1,\n      \"zip\": \"2222222\",\n      \"document_number\": \"222222222222222\",\n      \"city\": \"SÃO PAULO\",\n      \"address_street\": \"RUA A\",\n\t    \"legal_name\": \"LOJINHA DO ZÉ\",\n      \"region_code_iso\": \"BR-MG\",\n      \"region_code\": \"BR\",\n      \"document_type\": \"CNPJ\",\n      \"phone\": \"123123123\",\n      \"url\": \"www.nomedofacilitador.com.br\"\n    }\n  },\n  \"transaction_amount\": 20,\n  \"description\": \"...\",\n  \"token\": \"....\",\n  \"statement_descriptor\": \"PRUEBA\",\n  \"issuer_id\": ...,\n  \"payment_method_id\": \"...\",\n  \"amounts\": {...},\n  \"installments\": 1,\n  \"pos_id\": \"....\",\n  \"external_reference\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Pix Payment via Open Finance using Mercado Pago API (cURL)\nDESCRIPTION: This cURL request demonstrates how to create a Pix payment using Mercado Pago's API with Open Finance integration. It includes required fields such as payment method, amount, payer information, and callback URL.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/advanced-openFinance.en.md#2025-04-18_snippet_9\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\\n  --url 'https://api.mercadopago.com/v1/payments?access_token=XXX' \\\n  --data '{\n  \"payment_method_id\": \"pix\",\n  \"transaction_amount\": 50,\n  \"description\": \"Open Finance Payment\",\n  \"payer\": {\n    \"email\": \"test_user_58128038@testuser.com\",\n    \"identification\": {\n      \"number\": \"15635614680\",\n      \"type\": \"CPF\"\n    },\n  },\n  \"point_of_interaction\": {\n    \"linked_to\": \"openfinance\",\n       \"transaction_data\": {\n\t\t\"bank_info\": {\n\t\t\t\"origin_bank_id\": \"81d8e591-8b4a-9819e4739fd9\"\n\t }\n  },\n  \"token\": \"45ba90f2-a37f-4d57-bce2-e46aae3c3b04\",\n  \"callback_url\": \"https://example.com\"\n}'\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for Payment Status\nDESCRIPTION: This JSON snippet outlines the structure of a response received when initiating a payment challenge. It contains the payment ID, status, and specific 3DS information necessary for challenge processing, such as the external resource URL and challenge request (creq).\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-bigmerchants.en.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 52044997115,\n    ...\n    \"status\": \"pending\",\n    \"status_detail\": \"pending_challenge\",\n    ...\n    \"three_ds_info\":\n    {\n        \"external_resource_url\": \"https://acs-public.tp.mastercard.com/api/v1/browser_Challenges\",\n        \"creq\": \"eyJ0aHJlZURTU2VydmVyVHJhbnNJRCI6ImJmYTVhZjI0LTliMzAtNGY1Yi05MzQwLWJkZTc1ZjExMGM1MCIsImFjc1RyYW5zSUQiOiI3MDAwYTI2YS1jYWQ1LTQ2NjQtOTM0OC01YmRlZjUwM2JlOWYiLCJjaGFsbGVuZ2VXaW5kb3dTaXplIjoiMDQiLCJtZXNzYWdlVHlwZSI6IkNSZXEiLCJtZXNzYWdlVmVyc2lvbiI6IjIuMS4wIn0\"\n    },\n    \"owner\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mercado Pago Preference in Python\nDESCRIPTION: This snippet demonstrates how to create a preference object using the Mercado Pago SDK in Python. It sets up an item with a title, quantity, and unit price, and includes the 'wallet_purchase' purpose for logged-in payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.en.md#2025-04-18_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Create an item in the preference\npreference_data = {\n  # the \"purpose\": \"wallet_purchase\", allows only logged in payments\n  # to allow guest payments, you can omit this property\n    \"purpose\": \"wallet_purchase\",\n    \"items\": [\n        {\n            \"title\": \"My Item\",\n            \"quantity\": 1,\n            \"unit_price\": 75 // item unit price, must be an integer.\n        }\n    ]\n}\n\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Information with Mercado Pago PHP SDK\nDESCRIPTION: This snippet shows how to update an existing customer's information using the Mercado Pago CustomerClient. It includes updating personal details, contact information, address, and other customer attributes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/customers.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new CustomerClient();\n  $customerRequest = [\n    'email' => 'jhon@doe.com',\n    'first_name' => 'Jhon',\n    'last_name' => 'Doe',\n    'phone' => [\n        'area_code' => '55',\n        'number' => '991234567'\n    ],\n    'identification' => [\n        'type' => 'CPF',\n        'number' => '12345678900'\n    ],\n    'default_address' => 'Home',\n    'address' => [\n        'id' => '123123',\n        'zip_code' => '01234567',\n        'street_name' => 'Rua Exemplo',\n        'street_number' => 123,\n        'city' => []\n    ],\n    'date_registered' => '2023-09-07T11:37:30.000-04:00',\n    'description' => 'Description del user',\n    'default_card' => 'None'\n  ];\n\n  $client->update('247711297-jxOV430go9fx2e', $customerRequest)\n?>\n```\n\n----------------------------------------\n\nTITLE: Error: Missing Pix Key for QR Rendering\nDESCRIPTION: Triggered when a seller has not created a Pix key in their Mercado Pago account. Requires creating a Pix key before QR transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/vtex/common-errors.es.md#2025-04-18_snippet_5\n\nLANGUAGE: error-code\nCODE:\n```\nCollector user without key enabled for QR render\n```\n\n----------------------------------------\n\nTITLE: Formateando una nota de aclaración en Markdown\nDESCRIPTION: Este snippet ilustra cómo formatear una nota de aclaración en Markdown. Se usa para brindar aclaraciones sobre pasos del proceso, redirigir al lector o mencionar alternativas útiles.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/style-guide/notes.en.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> NOTE\n>\n> Título\n>\n> Cuerpo de la nota.\n```\n\n----------------------------------------\n\nTITLE: Enviando el Device ID en el encabezado HTTP\nDESCRIPTION: Ejemplo del encabezado HTTP que debe incluirse al realizar una solicitud de pago para enviar el Device ID a los servidores de Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.es.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\nX-meli-session-id: device_id\n```\n\n----------------------------------------\n\nTITLE: Refunds Snippet Inclusion\nDESCRIPTION: This snippet indicates the inclusion of a code snippet related to refunds. The snippet is located at `/guides/snippets/test-integration/refunds` within the TXTSNIPPET environment. The actual code for the refunds process will be found in the external snippet file.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/qr-refunds.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"[TXTSNIPPET][/guides/snippets/test-integration/refunds]\"\n```\n\n----------------------------------------\n\nTITLE: Inicializando SDK do Mercado Pago em Objective-C\nDESCRIPTION: Código Objective-C para inicializar o SDK do Mercado Pago para coleta de Device ID em aplicações iOS.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-chopro.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: objective-c\nCODE:\n```\n@import 'MercadoPagoDevicesSDK';\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    [[MercadoPagoDevicesSDK shared] execute];\n    return YES;\n}\n```\n\n----------------------------------------\n\nTITLE: Personalizando la Variable de Salida del Código de Seguridad en HTML\nDESCRIPTION: Ejemplo de cómo personalizar el nombre de la variable que almacenará el device ID, utilizando el atributo 'output' en el script de seguridad de Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.es.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\" output=\"deviceId\"></script>\n```\n\n----------------------------------------\n\nTITLE: Verifying Order Status via GET Request with Merchant Order ID\nDESCRIPTION: This snippet describes how to verify the status of a merchant order by sending a GET request to the `/merchant_orders` endpoint. The merchant order ID, received in the notification, is used to retrieve the order's status.  The status can be either `closed` (paid successfully) or `opened` (not yet paid).\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/qr-attended-test-purchase.es.md#2025-04-18_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /merchant_orders/{merchant_order_id}\n```\n\n----------------------------------------\n\nTITLE: Colombia Payment Methods Banner Implementation\nDESCRIPTION: HTML code for displaying Mercado Pago payment method banners for Colombia (MCO) in various dimensions including 120x240, 120x600, 125x125, 468x60, 575x40, and 785x40 pixels.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/all.en.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://secure.mlstatic.com/developers/site/cloud/banners/co/120x240_Todos-los-medios-de-pago.jpg\" \ntitle=\"Mercado Pago - Medios de pago\" alt=\"Mercado Pago - Medios de pago\" \nwidth=\"120\" height=\"240\"/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Customer by ID with MercadoPago SDK in PHP\nDESCRIPTION: This code demonstrates how to retrieve a specific customer's details using their unique identifier with MercadoPago's CustomerClient.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/customers.en.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new CustomerClient();\n  $client->get(\"247711297-jxOV430go9fx2e\");\n?>\n```\n\n----------------------------------------\n\nTITLE: Argentina Market Button Customization\nDESCRIPTION: Specific customization example for the Argentina market, showing how to modify button background and border radius properties.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-appearance.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n ...,\n customization: {\n      visual: {\n          buttonBackground: 'black',\n          borderRadius: '16px',\n      },\n },\n}\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n     buttonBackground: 'black',\n     borderRadius: '6px',\n },\n}\n```\n\n----------------------------------------\n\nTITLE: Settlement Report Configuration - API Response\nDESCRIPTION: Example JSON response from the MercadoPago API after successfully creating a new settlement report configuration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.es.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"file_name_prefix\": \"settlement-report-USER_ID\",\n    \"show_fee_prevision\": false,\n    \"show_chargeback_cancel\": true,\n    \"scheduled\": false,\n    \"coupon_detailed\": true,\n    \"include_withdraw\": true,\n    \"shipping_detail\": true,\n    \"refund_detailed\": true,\n    \"display_timezone\": \"GMT-04\",\n    \"notification_email_list\": [\n        \"example@email.com\",\n        \"john@example.com\"\n    ],\n    \"frequency\": {\n        \"hour\": 0,\n        \"type\": \"monthly\",\n        \"value\": 1\n    },\n    \"columns\": [\n        {\n            \"key\": \"TRANSACTION_DATE\"\n        },\n        {\n            \"key\": \"SOURCE_ID\"\n        },\n        {\n            \"key\": \"EXTERNAL_REFERENCE\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Mercado Pago Notifications Dashboard\nDESCRIPTION: The Notifications Dashboard provides visibility into events triggered on your integration, including delivery status, configured URLs, and event types. It displays notification details and allows filtering by delivery status and time period.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.en.md#2025-04-18_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n## Notifications dashboard\n\nThe notification dashboard allows the user to view the events triggered on a specific integration, check the status, and obtain detailed information about these events.\n\nThis dashboard will be displayed once you configure your Webhooks notifications, and you can access it anytime by clicking on **Webhooks** within the [Your integrations](/developers/panel/app).\n\nAmong the available information, you will find the percentage of notifications delivered, as well as a quick view of which URLs and events are configured.\n\nAdditionally, you will find a complete list of the latest notifications sent and their details, such as **delivery status** (success or failure), **action** (action associated with the triggered event), **event** (type of triggered event), and **date and time**. If desired, you can filter these displayed results by **delivery status** and by period (**date and time**).\n\n![notifications dashboard](/images/dashboard/notification-dashboard-es.png)\n```\n\n----------------------------------------\n\nTITLE: Error Response for Invalid Discount\nDESCRIPTION: JSON error response indicating an invalid or incorrect discount configuration, providing error details and status code\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/process-payments-with-discounts.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"bad_request\",\n  \"message\": \"discount doesn't exist or amount is incorrect\",\n  \"status\": 400,\n  \"cause\": [\n    {\n      \"code\": 400136,\n      \"description\": \"discount doesn't exist or amount is incorrect\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago API in Ruby\nDESCRIPTION: This Ruby code shows how to create a payment using the Mercado Pago API.  It initializes the MercadoPago SDK with the access token, defines a payment object including the transaction amount, token, description, installments, payment method ID, issuer ID, and payer email. The payment is created using the SDK, and the payment object from the response is extracted.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-serverside.es.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\npayment_object = {\n   transaction_amount: 100,\n   token: token,\n   description: 'Blue shirt',\n   installments: installments,\n   payment_method_id: payment_method_id,\n   issuer_id: issuer_id,\n   payer: {\n      email: 'john@yourdomain.com'\n  }\n}\npayment_response = sdk.payment.create(payment_object)\npayment = payment_response[:response]\n\n```\n\n----------------------------------------\n\nTITLE: Renovando Access Token con Node.js en Mercado Pago\nDESCRIPTION: Este ejemplo en Node.js demuestra cómo renovar un Access Token utilizando la clase OAuth. Se configura el cliente con un token de acceso y opciones, y luego se llama al método refresh con las credenciales del cliente y el refresh token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/renewal.es.md#2025-04-18_snippet_2\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token', options: { timeout: 5000 } });\n\nconst oauth = new OAuth(client);\n\noauth.refresh({\n\t'client_secret': 'your-client-secret',\n\t'client_id': 'your-client-id',\n\t'refresh_token': 'refresh-token'\n}).then((result) => console.log(result))\n\t.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Request\nDESCRIPTION: Example of a payment creation request to Mercado Pago's API. Includes transaction details, payer information, item details, and shipping information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.en.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"transaction_amount\": 100,\n\t\"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n\t\"description\": \"Title of what you are paying for\",\n\t\"installments\": 1,\n\t\"payment_method_id\": \"visa\",\n\t\"payer\": {\n\t\t\"email\": \"test_user_33759716@testuser.com\"\n\t},\n\t\"external_reference\": \"Reference_1234\",\n\t\"metadata\": {\n\t\t\"key1\": \"value1\",\n\t\t\"key2\": \"value2\"\n\t},\n\t\"notification_url\": \"https://www.your-site.com/webhooks\",\n\t\"additional_info\": {\n\t\t\"items\": [\n\t\t\t{\n\t\t\t\t\"id\": \"item-ID-1234\",\n\t\t\t\t\"title\": \"Title of what you are paying for\",\n\t\t\t\t\"picture_url\": \"https://www.mercadopago.com/org-img/MP3/home/logomp3.gif\",\n\t\t\t\t\"description\": \"Item description\",\n\t\t\t\t\"category_id\": \"others\",\n\t\t\t\t\"quantity\": 1,\n\t\t\t\t\"unit_price\": 100\n\t\t\t}\n\t\t],\n\t\t\"payer\": {\n\t\t\t\"first_name\": \"user-name\",\n\t\t\t\"last_name\": \"user-surname\",\n\t\t\t\"phone\": {\n\t\t\t\t\"area_code\": \"11\",\n\t\t\t\t\"number\": \"4444-4444\"\n\t\t\t},\n\t\t\t\"address\": {\n\t\t\t\t\"street_name\": \"Street\",\n\t\t\t\t\"street_number\": 123,\n\t\t\t\t\"zip_code\": \"5700\"\n\t\t\t}\n\t\t},\n\t\t\"shipments\": {\n\t\t\t\"receiver_address\": {\n\t\t\t\t\"zip_code\": \"5700\",\n\t\t\t\t\"street_name\": \"Street\",\n\t\t\t\t\"street_number\": 123,\n\t\t\t\t\"floor\": 4,\n\t\t\t\t\"apartment\": \"C\"\n\t\t\t}\n\t\t}\n\t},\n\t\"counter_currency\": {\n\t\t\"currency_id\": \"USD\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Populating Document Types\nDESCRIPTION: JavaScript function that retrieves available identification types from MercadoPago API and populates the document type dropdown in the payment form. This ensures the form displays valid document types for customer selection.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.es.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createSelectOptions(elem, options, labelsAndKeys = { label : \"name\", value : \"id\"}){\n   const {label, value} = labelsAndKeys;\n   elem.options.length = 0;\n   const tempOptions = document.createDocumentFragment();\n   options.forEach( option => {\n       const optValue = option[value];\n       const optLabel = option[label];\n       const opt = document.createElement('option');\n       opt.value = optValue;\n       opt.textContent = optLabel;\n       tempOptions.appendChild(opt);\n   });\n   elem.appendChild(tempOptions);\n}\n// Get Identification Types\n(async function getIdentificationTypes () {\n   try {\n       const identificationTypes = await mp.getIdentificationTypes();\n       const docTypeElement = document.getElementById('docType');\n       createSelectOptions(docTypeElement, identificationTypes)\n   }catch(e) {\n       return console.error('Error getting identificationTypes: ', e);\n   }\n})()\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with 3DS (Optional) using Curl\nDESCRIPTION: This cURL command demonstrates how to create a payment with the `three_d_secure_mode` set to `optional` using the Mercado Pago API. It sends a POST request to the `/v1/payments` endpoint with the required headers and a JSON payload containing transaction details, payer information, and item details.  It requires an access token for authorization.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.pt.md#2025-04-18_snippet_12\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'Authorization: <ENV_ACCESS_TOKEN>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"payer\": {\n        \"email\": \"<BUYER_EMAIL>\"\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"quantity\": <ITEM_QUANTITY>,\n                \"category_id\": <CATEGORY_ID>,\n                \"title\": <ITEM_TITLE>,\n                \"unit_price\": <TRANSACTION_AMOUNT>\n            }\n        ]\n    },\n    \"payment_method_id\": <PAYMENT_METHOD_ID>,\n    \"marketplace\": \"NONE\",\n    \"installments\": <INSTALLLMENTS_NUMBER>,\n    \"transaction_amount\": <TRANSACTION_AMOUNT>,\n    \"description\": \"<DESCRIPTION>\",\n    \"token\": \"CARD_TOKEN\",\n    \"three_d_secure_mode\": \"optional\",\n    \"capture\": true,\n    \"binary_mode\": false\n}'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Return URLs in Ruby for Mercado Pago Checkout Pro\nDESCRIPTION: This Ruby code snippet demonstrates how to configure return URLs and auto-return behavior for a Mercado Pago Checkout Pro preference. It defines URLs for success, failure, and pending payment scenarios within a preference data hash.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-return-urls.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# ...\npreference_data = {\n  # ...\n  back_urls = {\n    success: 'https://www.tu-sitio/success',\n    failure: 'https://www.tu-sitio/failure',\n    pending: 'https://www.tu-sitio/pendings'\n  },\n  auto_return: 'approved'\n  # ...\n}\n# ...\n```\n\n----------------------------------------\n\nTITLE: Implementing POS Money Loading Function - Android\nDESCRIPTION: Implementation of the shareRDCPass function that handles money loading into POS terminals. The function configures transaction details including amount, payment type, and balance loading flags.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-load-money.en.md#2025-04-18_snippet_1\n\nLANGUAGE: android\nCODE:\n```\npublic void shareRDCPass(String total, String intent, Boolean esCarga) { \n\ttry { \n\t\tIntent sharingIntent = new Intent(intent); \n\t\tsharingIntent.setClassName(\"redelcom.cl.rdcpass\", \"redelcom.cl.rdcpass.MainActivity\");  \n\t\tsharingIntent.putExtra(\"packageName\", getPackageName()); \n\t\tsharingIntent.putExtra(\"className\", getClass().toString().split(\" \")[1]); \n\t\tsharingIntent.putExtra(Intent.EXTRA_TEXT, total); \n\t\tif (esCarga){ \n\t\t\tsharingIntent.putExtra(\"recargaSaldo\", true); \n\t\t\tsharingIntent.putExtra(\"payment_type\", \"TARJETA\"); \n\t\t} \n\t\tstartActivity(sharingIntent); \n\t} catch (Exception e) { \n\t\te.printStackTrace(); \n\t} \n}\n```\n\n----------------------------------------\n\nTITLE: Importing MercadoPago.js SDK in HTML\nDESCRIPTION: The HTML snippet demonstrates how to import the MercadoPago.js SDK by adding its script to the HTML file. This is a prerequisite for integrating card payments using MercadoPago.js.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\\\"https://sdk.mercadopago.com/js/v2\\\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Creating Partial Refund Using Mercado Pago SDK in Java\nDESCRIPTION: This snippet shows how to create a partial refund using the Mercado Pago SDK. It requires configuration with a valid access token and the payment ID associated with the refund to be created. This process involves instantiating a 'Refund' object and saving it.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/refunds.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMercadoPago.SDK.configure(\"YOUR_ACCESS_TOKEN\");\n \nRefund refund = new Refund();\nrefund.setPaymentId(\"payment_id\");\nrefund.save();\n```\n\n----------------------------------------\n\nTITLE: Creating Container for MercadoPago Wallet in HTML\nDESCRIPTION: This HTML snippet creates a container div for rendering the MercadoPago wallet button.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-checkout.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"wallet_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Creating Card Payment with Mercado Pago Node.js SDK\nDESCRIPTION: Demonstrates how to create a card payment using the Mercado Pago Node.js SDK. Sets up the client with an access token and sends a payment request with transaction details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.en.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Payment, MercadoPagoConfig } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\n\npayment.create({\n    body: { \n        transaction_amount: req.transaction_amount,\n        token: req.token,\n        description: req.description,\n        installments: req.installments,\n        payment_method_id: req.paymentMethodId,\n        issuer_id: req.issuer,\n            payer: {\n            email: req.email,\n            identification: {\n        type: req.identificationType,\n        number: req.number\n    }}},\n    requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n.then((result) => console.log(result))\n.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Opening URL with SFSafariViewController in SwiftUI\nDESCRIPTION: Demonstrates opening a URL in a SFSafariViewController from a SwiftUI view. The example configures a button to present a Safari view controller using a URL string when tapped. It is accompanied by a preview for SwiftUI design.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/swift.en.md#2025-04-18_snippet_1\n\nLANGUAGE: SwiftUI\nCODE:\n```\nimport SwiftUI\nimport SafariServices\n\nstruct ContentView: View {\n    var body: some View {\n        VStack {\n            Button(\"Open Preference\" ) {\n                if let url = URL(string:\"YOUR-URL-PREFERENCE\")\n                {\n                    if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene {\n                        if let rootViewController = windowScene.windows.first?.rootViewController {\n                            let safariVC = SFSafariViewController(url: url)\n                            rootViewController.present(safariVC, animated: true, completion: nil)\n                        }\n                    }\n                    \n                }\n                \n            }\n        }\n        .padding()\n    }\n}\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Inclusive Language Usage in Spanish\nDESCRIPTION: This snippet demonstrates correct and incorrect ways of using inclusive language in Spanish, focusing on avoiding gender stereotypes and using neutral terms.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/style-guide/pronouns.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n✅ *Si estás desarrollando esta feature...* \n❌ *Si eres desarrollador...*\n\n✅ **Las personas que desarrollan** *- Quienes realicen compras/quienes accedan a la tienda* \n❌ **Los desarrolladores**  *- Los clientes*\n\n✅ *El equipo de Mercado Pago.* \n❌ *Los integrantes de Mercado Pago.*\n```\n\n----------------------------------------\n\nTITLE: Include MercadoPago.js Library\nDESCRIPTION: This snippet includes the MercadoPago.js library, which provides the necessary functions for accessing the Mercado Pago API and securely collecting card data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/secure-fields-core.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Payment Expiration Date in cURL\nDESCRIPTION: This cURL command snippet illustrates how to set the date_of_expiration for a payment. The ISO 8601 format is mandatory.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_27\n\nLANGUAGE: curl\nCODE:\n```\n\"date_of_expiration\": \"2020-05-30T23:59:59.000-04:00\",\n```\n\n----------------------------------------\n\nTITLE: Zero Dollar Auth Card Validation Implementation\nDESCRIPTION: Code for implementing card validation using Zero Dollar Auth flow for Visa and Master cards. This process validates the card without charging any amount by sending a special header 'X-Card-Validation: card_validation'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\MercadoPagoConfig;\n\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Card-Validation: card_validation\"]);\n\n  $payment = $client->create([\n    \"token\" => $_POST['token'],\n    \"payment_method_id\" => $_POST['paymentMethodId'],\n    \"payer\" => [\n      \"id\" => $_POST['id'],\n      \"type\" => $_POST['type']\n    ],\n    \"description\" => $_POST['description'],\n    \"transaction_amount\" => (float) $_POST['transactionAmount']\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nimport { Payment, MercadoPagoConfig } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\n\npayment.create({\n    body: { \n        token: req.token,\n        payment_method_id: req.payment_method_id,\n        payer: {\n            id: req.id,\n            type: req.type\n        },\n        description: req.description,\n        transaction_amount: req.transaction_amount,\n    },\n    requestOptions: { \n        X-Card-Validation: 'card_validation' }\n})\n.then((result) => console.log(result))\n.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Available Payments Configuration for Peru (mpe)\nDESCRIPTION: This snippet defines the available payment methods for Peru (mpe). The `available_payments` field lists the supported payment methods. This allows for customizing the payment options offered in each country.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/woocommerce/landing.es.md#2025-04-18_snippet_14\n\nLANGUAGE: YAML\nCODE:\n```\n----[mpe]---- \n\n---\navailable_payments: mercadopago, atm, credit, debit\n\n----\n------------\n```\n\n----------------------------------------\n\nTITLE: Capturing Device Information in iOS (Objective-C)\nDESCRIPTION: These Objective-C methods show how to obtain device information using the MercadoPagoDevicesSDK. They return the data in formats such as JSON Object, JSON String, or Dictionary.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.en.md#2025-04-18_snippet_6\n\nLANGUAGE: objective-c\nCODE:\n```\n[[[MercadoPagoDevicesSDK] shared] getInfoAsJson] // Returns a JSON Library Data Object\n[[[MercadoPagoDevicesSDK] shared] getInfoAsJsonString] // Returns a JSON String\n[[[MercadoPagoDevicesSDK] shared] getInfoAsDictionary] // Returns a Dictionary<String,Any>\n```\n\n----------------------------------------\n\nTITLE: Example Webhook Notification JSON Structure\nDESCRIPTION: Sample JSON structure of a payment notification webhook sent by Mercado Pago, showing the basic fields including ID, type, and payment data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.en.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n \"id\": 12345,\n \"live_mode\": true,\n \"type\": \"payment\",\n \"date_created\": \"2015-03-25T10:04:58.396-04:00\",\n \"user_id\": 44444,\n \"api_version\": \"v1\",\n \"action\": \"payment.created\",\n \"data\": {\n     \"id\": \"999999999\"\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing End-to-end Encryption in Go\nDESCRIPTION: Go language implementation for reading private key, signing request body, and adding signature to HTTP request headers using Ed25519 cryptographic algorithm. Demonstrates secure request preparation for Mercado Pago transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/encryption.en.md#2025-04-18_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n    \"bytes\"\n    \"crypto/ed25519\"\n    \"encoding/base64\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n)\n\nfunc main() {\n    // Path to the file storing the private key\n    privateKeyFile := \"private.key\"\n\n    // Read the private key from the file\n    privateKeyBytes, err := ioutil.ReadFile(privateKeyFile)\n    if err != nil {\n        fmt.Println(\"Error reading private key:\", err)\n        return\n    }\n\n    // Convert the private key bytes to a PrivateKey\n    privateKey := ed25519.PrivateKey(privateKeyBytes)\n\n    // Define your request body\n    requestBody := []byte(`{\"key\": \"value\"}`)\n\n    // Sign the request body with the private key\n    signature := ed25519.Sign(privateKey, requestBody)\n\n    // Encode the signature to base64\n    signatureBase64 := base64.StdEncoding.EncodeToString(signature)\n\n    // Create a new HTTP request\n    req, err := http.NewRequest(\"POST\", \"https://example.com/api/endpoint\", bytes.NewBuffer(requestBody))\n    if err != nil {\n        fmt.Println(\"Error creating request:\", err)\n        return\n    }\n\n    // Add the x-signature header with the base64 encoded signature\n    req.Header.Set(\"x-signature\", signatureBase64)\n\n    // Send the request\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        fmt.Println(\"Error sending request:\", err)\n        return\n    }\n    defer resp.Body.Close()\n\n    // Read the response body\n    responseBody, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        fmt.Println(\"Error reading response body:\", err)\n        return\n    }\n\n    // Print the response body\n    fmt.Println(\"Response:\", string(responseBody))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Customer with MercadoPago SDK in Node.js\nDESCRIPTION: This code snippet demonstrates how to create a new customer using the MercadoPago SDK in Node.js. It requires the MercadoPagoConfig and Customer classes, along with an access token for authentication. The input includes various customer details like email, phone, and address, and the output is the creation response from the SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/customers.en.md#2025-04-18_snippet_0\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerClient = new Customer(client);\n\nconst body = {\n\temail: 'jhon@doe.com',\n\tfirst_name: 'Jhon',\n\tlast_name: 'Doe',\n\tphone: {\n\t\tarea_code: '55',\n\t\tnumber: '991234567'\n\t},\n\tidentification: {\n\t\ttype: 'CPF',\n\t\tnumber: '12345678900'\n\t},\n\tdefault_address: 'Home',\n\taddress: {\n\t\tid: '123123',\n\t\tzip_code: '01234567',\n\t\tstreet_name: 'Rua Exemplo',\n\t\tstreet_number: '123',\n\t\tcity: {}\n\t},\n\tdate_registered: '2021-10-20T11:37:30.000-04:00',\n\tdescription: 'Description del user',\n\tdefault_card: 'None'\n};\n\ncustomerClient.create({ body: body }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Error: Invalid Installment Configuration\nDESCRIPTION: Occurs when attempting to process a payment with an unactivated financing rate. Requires setting payment method rates to \"Automatic\" in VTEX configuration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/vtex/common-errors.es.md#2025-04-18_snippet_1\n\nLANGUAGE: error-code\nCODE:\n```\ninvalid installments\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment Brick in JavaScript\nDESCRIPTION: Replace the CardForm initialization code with the new Payment Brick initialization. This includes setting up the MercadoPago instance, configuring the brick, and handling callbacks.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/cardform-clientside.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mp = new MercadoPago('YOUR_PUBLIC_KEY');\nconst bricksBuilder = mp.bricks();\nconst renderPaymentBrick = async (bricksBuilder) => {\n   const settings = {\n       initialization: {\n           amount: 100, //valor do processamento a ser realizado\n           payer: {\n           email: '<PAYER_EMAIL_HERE>',\n       },\n       },\n       style: {\n           theme: 'default' // | 'dark' | 'bootstrap' | 'flat'\n       },\n       callbacks: {\n           onReady: () => {\n           // callback chamado quando o Brick estiver pronto\n           },\n           onSubmit: ({paymentType, formData}) => {\n           // callback chamado o usuário clicar no botão de submissão dos dados\n           // ejemplo de envío de los datos recolectados por el Brick a su servidor\n           return new Promise((resolve, reject) => {\n               fetch(\"/processar-pago\", {\n                   method: \"POST\",\n                   headers: {\n                       \"Content-Type\": \"application/json\",\n                   },\n                   body: JSON.stringify(formData)\n               })\n               .then((response) => {\n                   // receber o resultado do pagamento\n                   resolve();\n               })\n               .catch((error) => {\n                   // lidar com a resposta de erro ao tentar criar o pagamento\n                   reject();\n               })\n               });\n           },\n           onError: (error) => {\n           // callback chamado para todos os casos de erro do Brick\n           },\n       },\n   };\n   window.cardPaymentBrickController = await bricksBuilder.create('payment', 'paymentBrick_container', settings);\n};\nrenderPaymentBrick(bricksBuilder);\n```\n\n----------------------------------------\n\nTITLE: Configuring Mercado Pago Credentials in JavaScript\nDESCRIPTION: This JavaScript snippet initializes Mercado Pago's SDK with the public key for handling payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.en.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst mp = new MercadoPago('YOUR_PUBLIC_KEY');\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with Reserved Values in Node.js\nDESCRIPTION: Uses Mercado Pago's Node.js SDK to create a payment with the capture flag set to false. Configures a payment request with transaction amount, token, and other required details to authorize without capturing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/make-value-reserve.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, Payment } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: 'YOUR_ACCESS_TOKEN' });\nconst payment = new Payment(client);\n\nconst body = {\ntransaction_amount: 100,\ntoken: '123456',\ndescription: 'My product',\ninstallments: 1,\npayment_method_id: 'visa',\npayer: {\nemail: 'my.user@example.com',\n},\ncapture: false\n};\n\npayment.create({ body: body, requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' } }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Processing Payments with Mercado Pago in Ruby\nDESCRIPTION: The Ruby code for processing payments with Mercado Pago demonstrates setting up a payment using the SDK. It entails creating a payment object with necessary transaction information and executing it through the SDK's methods. Requires the 'mercadopago' Ruby gem to function properly, with inputs from parameters and an output of the payment response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-serverside.en.md#2025-04-18_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\npayment_object = {\n   transaction_amount: 100,\n   token: token,\n   description: 'Blue shirt',\n   installments: installments,\n   payment_method_id: payment_method_id,\n   issuer_id: issuer_id,\n   payer: {\n      email: 'john@yourdomain.com'\n  }\n}\npayment_response = sdk.payment.create(payment_object)\npayment = payment_response[:response]\n\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\npayment_data = {\n transaction_amount: params[:transactionAmount].to_f,\n token: params[:token],\n installments: params[:installments].to_i,\n payment_method_id: params[:paymentMethodId],\n payer: {\n   email: params[:payer][:email],\n   identification: {\n     type: params[:payer][:identification][:type],\n     number: params[:payer][:identification][:number]\n   },\n }\n}\n\npayment_response = sdk.payment.create(payment_data)\npayment = payment_response[:response]\n\nputs payment\n```\n\n----------------------------------------\n\nTITLE: Initiating Pix Payment Refund with cURL\nDESCRIPTION: API request to process a partial refund for a Pix payment using the end-to-end ID. Requires authentication token and mTLS certificate.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/pix-payments/payment-refund.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request PUT 'https://pix-api.mercadopago.com/pix/E10573521202206211501YtU7ltDrM72/devolucao/1656015086' \\\n--header 'Authorization: Bearer TOKEN' \\\n--header 'Content-Type: application/json' \\\n--cert PATH_TO_mTLS --key PATH_TO_KEY \\\n--data-raw '{\n    \"valor\":\"0.10\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Customizing Device ID Variable Output in Security Script\nDESCRIPTION: Adds the Mercado Pago security script with a custom output variable name. The 'output' attribute specifies a custom variable name to store the device ID instead of using the default MP_DEVICE_SESSION_ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.en.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\" output=\"deviceId\"></script>\n```\n\n----------------------------------------\n\nTITLE: Associating Google Ads Tag with MercadoPago Preference\nDESCRIPTION: This code shows how to associate a Google Ads conversion tracking tag with a MercadoPago payment preference. The code includes the tracks configuration with conversion ID and label parameters that should be replaced with actual values.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/preferences.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Criar um objeto preferência\nvar preference = {\n \n  // Associar sua tag do Google ads\n  tracks: [\n        {\n            type: \"google_ad\",\n            values: {\n              conversion_id: \"CONVERSION_ID\",\n              conversion_label: \"CONVERSION_LABEL\"\n            } \n        }\n      ]\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Information with MercadoPago SDK in Ruby\nDESCRIPTION: This snippet demonstrates how to update customer information using the MercadoPago SDK. It creates a detailed customer request object with various fields like email, name, address, and identification, then uses the customer.update method to apply the changes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ruby/customers.en.md#2025-04-18_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustomer_request = {\n  email: 'user@user.com',\n  first_name: 'john',\n  last_name: 'wagner',\n  default_address: 'Casa',\n  phone: {\n    area_code: '[FAKER][PHONE_NUMBER][AREA_CODE]',\n    number: '001234567'\n  },\n  identification: {\n    type: '[FAKER][IDENTIFICATION][TYPE]',\n    number: '12341234'\n  },\n  address: {\n    zip_code: '[FAKER][ADDRESS][ZIP_CODE]',\n    street_name: '[FAKER][ADDRESS][STREET_NAME]',\n    street_number: '2'\n  },\n  description: 'Informações do cliente',\n  default_card: 'None'\n}\ncustomer_response = sdk.customer.update(customer_id ,customer_request)\ncustomer = customer_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Creating SFTP Batch Script for Automated File Download\nDESCRIPTION: Shows how to create a batch script for automated SFTP file download, demonstrating batch scripting commands for file retrieval\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/download-a-file.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\ncd selfserviceoutput\nget result_589_6_20230804.zip\nbye\n```\n\nLANGUAGE: terminal\nCODE:\n```\nUY0FVFGW103Q05P: demo user$ sftp -b download_sftp_script pg_sap@sftp-qa.mercadolibre.io\nsftp> cd selfserviceoutput\nsftp> get result_589_6_20230804.zip\nsftp> get report_589_216_20230804.zip\nsftp> bye\nUY0FVFGW103Q05P:demo user$ ls\nreport_589_216_20230804.zip\tresult_589_6_20230804.zip\n```\n\n----------------------------------------\n\nTITLE: Response Format for Marketplace Seller Sales Report\nDESCRIPTION: This code block shows the structure of the CSV response from the MercadoPago API when downloading a marketplace seller sales report. It includes various fields such as collector information, payment details, transaction amounts, and fee information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/download-report.en.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCOLLECTOR;COLLECTOR_NICKNAME;PAYMENT;STATUS_DESCRIPTION;STATUS_DETAIL;PURCHASE_ORDER;PAYMENT_METHOD_TYPE;TRANSACTION_AMOUNT;DATE_CREATED;DATE_APPROVED;MARKETPLACE_FEE_AMOUNT;MERCADOPAGO_FEE_AMOUNT;TOTAL_PAID_AMOUNT;NET_RECEIVED_AMOUNT\n{{report rows}}\n```\n\n----------------------------------------\n\nTITLE: Inicializando el SDK de Dispositivos en Android\nDESCRIPTION: Inicializa el SDK de Dispositivos de Mercado Pago en la clase MainApplication para capturar información del dispositivo en aplicaciones Android.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-chopro.es.md#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nimport com.mercadolibre.android.device.sdk.DeviceSDK;\nDeviceSDK.getInstance().execute(this);\n```\n\n----------------------------------------\n\nTITLE: Implementing sendConsulta function in Android\nDESCRIPTION: This code snippet shows the implementation of the `sendConsulta` function in Android. This function creates an intent to communicate with the Redelcom RDCPass application, setting various parameters such as `idCategoria`, `id`, `nombreCuenta`, and `hint`.  These parameters are used to identify the account and the customer or document to be paid. The function handles potential exceptions during the intent creation and activity start process.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-query-and-pay-bills.es.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic void sendConsulta(String id_cliente, String id_cuenta, String datos_captura_substring,  String nombre) { \n\ttry { \n\t\tIntent consultaCuentaIntent = new Intent(intent); \n\t\tconsultaIdCuenta.setClassName(\"redelcom.cl.rdcpass\",  \"redelcom.cl.rdcpass.MainActivity\"); \n\t\tconsultaCuentaIntent.putExtra(\"packageName\", getPackageName()); \n\t\tconsultaCuentaIntent.putExtra(\"className\", getClass().toString().split(\" \")[1]);   \n\t\n\t\tconsultaCuentaIntent.putExtra(\"idCategoria\", id_cuenta); \n\t\tconsultaCuentaIntent.putExtra(\"id\", id_cliente); \n\t\tconsultaCuentaIntent.putExtra(\"nombreCuenta\", nombre); \n\t\tconsultaCuentaIntent.putExtra(\"hint\", datos_captura_substring); \n\t\n\t\tstartActivity(consultaCuentaIntent); \n\t} catch (Exception e) { \n \t\te.printStackTrace(); \n\t} \n} \n \n```\n\n----------------------------------------\n\nTITLE: Setting Expiration Date for Boleto Bancário in Mercado Pago\nDESCRIPTION: Example of the date_of_expiration field format using ISO 8601 standard for Boleto Bancário payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/bank-slip.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\n\"date_of_expiration\": \"2023-01-28T22:59:59.000-04:00\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods in Payment Brick using JavaScript\nDESCRIPTION: This code snippet demonstrates how to customize the payment methods available in Payment Brick by configuring the paymentMethods object within the customization settings. The example shows enabling all credit card options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/manage-payment-methods.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n ...,\n customization: {\n   paymentMethods: {\n     ...,\n     creditCard: \"all\",\n   },\n },\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up Constructor for Redelcom Integration in Ionic\nDESCRIPTION: Example of adding dependencies to the constructor of the main class for Redelcom integration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/cross-platform-ionic.es.md#2025-04-18_snippet_2\n\nLANGUAGE: ionic\nCODE:\n```\nimport { Component } from '@angular/core'; \nimport { WebIntent, Intent } from '@ionic-native/web-intent/ngx'; \nimport { AppVersion } from '@ionic-native/app-version/ngx'; \n… \nconstructor( \n \tprivate intent: WebIntent \n \t, private app: AppVersion \n) \n{…}\n```\n\n----------------------------------------\n\nTITLE: Querying Payment Details for Boleto Second Copy\nDESCRIPTION: This snippet demonstrates how to generate a second copy of a boleto by querying the Mercado Pago Payments API using the GET method. It requires the payment ID and the seller's Access Token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/faqs/payments.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.mercadopago.com/v1/payments/PAYMENT_ID\n```\n\n----------------------------------------\n\nTITLE: Handling Agreement Cancellation Webhook for Wallet Connect in Mercado Pago\nDESCRIPTION: This example shows the payload sent when a user cancels a connection with your application. When this happens, the payer_token is invalidated and no further charges can be made to the user.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/notifications.es.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\n{\n  \"id\": \"22abcd1235ed497f945f755fcaba3c6c\",\n  \"type\": \"wallet_connect\",\n  \"entity\": \"agreement\",\n  \"action\": \"status.updated\",\n  \"date\": \"2021-09-30T23:24:44Z\",\n  \"model_version\": 1,\n  \"version\": 0,\n  \"data\": {\n    \"id\": \"22abcd1235ed497f945f755fcaba3c6c\",\n    \"status\": \"cancelled\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Pix Refund Response JSON\nDESCRIPTION: Sample JSON response after creating a Pix refund. This response shows an in-process refund with status 'in_process' and labels indicating it's in contingency. The response includes details such as refund ID, payment ID, amount, and transaction identifiers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n \"id\": 1150873004,\n \"payment_id\": 23443394602,\n \"amount\": 20,\n \"metadata\": {},\n \"source\": {\n     \"id\": \"475845652\",\n     \"name\": \"Test Test\",\n     \"type\": \"collector\"\n },\n \"date_created\": \"2022-06-24T16:09:03.944-04:00\",\n \"unique_sequence_number\": null,\n \"refund_mode\": \"standard\",\n \"adjustment_amount\": 0,\n \"status\": \"in_process\",\n \"reason\": \"1\",\n \"labels\": [\n     \"hidden\",\n     \"contingency\"\n ],\n \"amount_refunded_to_payer\": 20,\n \"e2e_id\": \"D00000000202312220000abcdefghijklm\",\n \"partition_details\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Barcode Scanner in Java\nDESCRIPTION: Uses the initBarcodeScanner function of the CameraScanner class to start reading barcodes with the Point Smart device.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/camscanner-legacy.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal CameraScanner cameraScanner = MPManager.INSTANCE.getCameraScanner();\ncameraScanner.initBarcodeScanner(this);\n```\n\n----------------------------------------\n\nTITLE: Payment Request Body (JSON)\nDESCRIPTION: This JSON payload is used as the request body for creating a payment with a credit card through the Mercado Pago API. It includes details such as transaction amount, installments, payer information, additional information about the items being purchased, and shipment details. The structure provides a comprehensive set of parameters to customize the payment process.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/credit-card-events.en.md#2025-04-18_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"{ \n    \\\"transaction_amount\\\": 120.34,\n    \\\"installments\\\": 1,\n    \\\"statement_descriptor\\\": \\\"Seller's store\\\",\n    \\\"capture\\\": true,\n    \\\"binary_mode\\\": false,\n    \\\"sponsor_id\\\": {{ID of your Mercado Pago account related to your platform}},\n    \\\"payment_method_id\\\": \\\"{{payment_method_id}}\\\",\n    \\\"token\\\":  \\\"{{card_token_id}}\\\",\n    \\\"external_reference\\\": \\\"Platform identifier\\\",\n    \\\"notification_url\\\": \\\"{{notification_url}}\\\",\n    \\\"description\\\": \\\"Date (in the format dd/mm/yyyy) | Event name\\\",\n    \\\"payer\\\": {\n        \\\"first_name\\\": \\\"Name. Example: John\\\",\n        \\\"last_name\\\": \\\"Last name. Example: Jones\\\",\n        \\\"email\\\": \\\"Example: test_user_1677281849@testuser.com\\\",\n        \\\"identification\\\": {\n            \\\"type\\\": \\\"Document type. Example: CPF\\\",\n            \\\"number\\\": \\\"Document number. Example: 19119119100\\\"\n        },\n        \\\"address\\\": {\n            \\\"zip_code\\\": \\\"Zip code. Example: 06233-200\\\",\n            \\\"street_name\\\": \\\"Street name. Example: Av. das Nações Unidas\\\",\n            \\\"street_number\\\": \\\"Number. Example: 3003\\\",\n            \\\"neighborhood\\\": \\\"Neighborhood. Example: Bonfim\\\",\n            \\\"city\\\": \\\"City. Example: Osasco\\\",\n            \\\"federal_unit\\\": \\\"Federal unit. Example: SP\\\"\n        }\n    },\n    \\\"additional_info\\\": {\n        \\\"referral_url\\\": \\\"Referral URL. Example: www.sellertest123.com\\\",\n        \\\"drop_shipping\\\": false,\n        \\\"delivery_promise\\\": \\\"2022-11-20\\\",\n        \\\"contrated_plan\\\": \\\"premium\\\",\n        \\\"items\\\": [\n            {\n                \\\"id\\\": \\\"1941\\\",\n                \\\"title\\\": \\\"Date (in the format dd/mm/yyyy) | Event name\\\",\n                \\\"description\\\": \\\"Date (in the format dd/mm/yyyy) | Event name\\\",\n                \\\"picture_url\\\": null,\n                \\\"category_id\\\": \\\"Category. Example: tickets\\\",\n                \\\"quantity\\\": 1,\n                \\\"unit_price\\\": 120.34,\n                \\\"event_date\\\": \\\"2019-12-25T19:30:00.000-03:00\\\"\n            }\n        ],\n        \\\"payer\\\": {\n            \\\"first_name\\\": \\\"Name. Example: John\\\",\n            \\\"last_name\\\": \\\"Last name. Example: Jones\\\",\n            \\\"is_prime_user\\\": \\\"1\\\",\n            \\\"is_first_purchase_online\\\": \\\"1\\\",\n            \\\"last_purchase\\\": \\\"2020-10-25T19:30:00.000-03:00\\\",\n            \\\"phone\\\": {\n                \\\"area_code\\\": \\\"Area code. Example: 11\\\",\n                \\\"number\\\": \\\"Phone number. Example: 987654321\\\"\n            },\n            \\\"address\\\": {\n                \\\"zip_code\\\": \\\"Zip code. Example: 06233-200\\\",\n                \\\"street_name\\\": \\\"Street name. Example: Av. das Nações Unidas\\\",\n                \\\"street_number\\\": \\\"Number. Example: 3003\\\"\n            },\n            \\\"registration_date\\\": \\\"2013-08-06T09:25:04.000-03:00\\\"\n        },\n        \\\"shipments\\\": {\n            \\\"express_shipment\\\": \\\"0\\\",\n            \\\"pick_up_on_seller\\\": \\\"1\\\",\n            \\\"receiver_address\\\": {\n                \\\"zip_code\\\": \\\"Zip code. Example: 95630000\\\",\n                \\\"street_name\\\": \\\"Street name. Example: São Luiz\\\",\n                \\\"street_number\\\": \\\"Number. Example: 15\\\",\n                \\\"floor\\\": \\\"Floor (in case it is an apartment). Example: Second\\\",\n                \\\"apartment\\\": \\\"Apartment number (in case it is an apartment). Example: 93\\\"\n            }\n        }\n    }  \n}\"\n```\n\n----------------------------------------\n\nTITLE: Create PCI Fields JavaScript\nDESCRIPTION: This snippet creates the PCI-compliant fields for capturing sensitive card data (card number, expiration date, and security code) using Mercado Pago's Fields API. The `mount` method attaches these fields to the specified containers in the HTML form.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/secure-fields-core.en.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  // Step #createPCIFields\n  const cardNumberElement = mp.fields.create('cardNumber', {\n    placeholder: \"Card number\",\n  }).mount('form-checkout__cardNumber-container');\n \n  const expirationDateElement = mp.fields.create('expirationDate', {\n    placeholder: \"MM/YYYY\"\n  }).mount('form-checkout__expirationDate-container');\n \n  const securityCodeElement = mp.fields.create('securityCode', {\n    placeholder: \"CVV\"  \n  }).mount('form-checkout__securityCode-container');\n```\n\n----------------------------------------\n\nTITLE: Consulting Chargeback by ID using Mercado Pago API (cURL)\nDESCRIPTION: This snippet demonstrates how to retrieve chargeback information using the chargeback ID. It sends a GET request to the Mercado Pago API endpoint for chargebacks.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/chargebacks-management/manage-chargeback.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --globoff 'https://api.mercadopago.com/v1/chargebacks/{id}' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{access_token}}'\n```\n\n----------------------------------------\n\nTITLE: Pending Coupon Response\nDESCRIPTION: This JSON response confirms that a coupon is ready to be used in a payment transaction. Similar to the success response, it contains details about the discount, a customer-facing description, and a link to the legal terms associated with the coupon. The status indicates that the coupon is awaiting application during the payment process.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/coupon-validation-responses.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status\": \"pending\",\n    \"description\": \"Description of the coupon, as displayed to customers in interfaces, invoices, or receipts.\",\n    \"legal_terms\": \"URL of the terms and conditions for legal purposes.\",\n    \"details\": {\n       \"value\": 10.0,\n       \"type\": \"percent\",\n       \"cap\": 1000.0,\n       \"min_payment_amount\": 100.0,\n       \"max_payment_amount\": 10000.0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS for Responsive iFrame\nDESCRIPTION: This CSS styling ensures that the iframe presenting the 3DS Challenge is responsive. It defines width and height parameters for different screen sizes, maintaining an optimal user interface for various devices.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-bigmerchants.en.md#2025-04-18_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n#myframe{\n    width: 500px;\n    height: 600px;\n    border: none;\n}\n@media only screen and (width <= 980px) {\n    #myframe{\n        width: 100%;\n        height: 440px;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Expiration date field V1\nDESCRIPTION: Shows the HTML code for the expiration date fields when using SDK V1\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.en.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <input type=\"text\" placeholder=\"MM\" id=\"cardExpirationMonth\" data-checkout=\"cardExpirationMonth\">\n  <span class=\"date-separator\">/</span>\n  <input type=\"text\" placeholder=\"YY\" id=\"cardExpirationYear\" data-checkout=\"cardExpirationYear\">\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Activating Automatic Report Generation using Node.js\nDESCRIPTION: This Node.js snippet demonstrates how to use the request module to send a POST request to the Mercado Pago API for activating report generation, including necessary headers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.es.md#2025-04-18_snippet_9\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\\n\\nvar headers = {\\n    'accept': 'application/json',\\n    'content-type': 'application/json',\\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\\n};\\n\\nvar options = {\\n    url: 'https://api.mercadopago.com/v1/account/release_report/schedule',\\n    method: 'POST',\\n    headers: headers\\n};\\n\\nfunction callback(error, response, body) {\\n    if (!error && response.statusCode == 200) {\\n        console.log(body);\\n    }\\n}\\n\\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer Data with Mercado Pago\nDESCRIPTION: This snippet shows how to retrieve customer data using Mercado Pago's API. It sends a GET request to the /v1/customers/search endpoint with the customer's email as a filter. The response includes customer details such as ID, address, and registration date.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.en.md#2025-04-18_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n  \n  $client = new CustomerClient();\n\n  $customer = $client->search(1, 0, [\"email\" => \"my.user@example.com\"]);\n?>\n```\n\n----------------------------------------\n\nTITLE: Searching Subscriptions with GET Request\nDESCRIPTION: Allows searching for subscriptions across different statuses using the Mercado Pago preapproval search endpoint. Retrieves subscription information based on specified parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/subscription-management.en.md#2025-04-18_snippet_0\n\nLANGUAGE: rest\nCODE:\n```\nGET /preapproval/search\n```\n\n----------------------------------------\n\nTITLE: Hiding Value Proposition Text (MLA)\nDESCRIPTION: This snippet demonstrates how to hide the value proposition text in the Wallet Brick for MLA configurations by setting `customization.visual.hideValueProp` to `true`. Hiding this text can simplify the user interface of the payment brick.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/change-appearance.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n         visual: {\n             hideValueProp: true\n         },\n    },\n}\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n   hideValueProp: true\n }\n};\n\n```\n\n----------------------------------------\n\nTITLE: Next.js Payment Brick Implementation Component\nDESCRIPTION: Implements the Payment Brick component for Next.js using the Mercado Pago React SDK, configuring initialization, customization, and callback handlers for payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/possible-errors.en.md#2025-04-18_snippet_3\n\nLANGUAGE: React\nCODE:\n```\n//checkoutMercadoPago.tsx\n\nimport { initMercadoPago, Payment } from \"@mercadopago/sdk-react\";\n\ninitMercadoPago(\"<YOUR_PUBLIC_KEY>\");\n\nconst CheckoutMercadoPago = () => {\n  const initialization = {\n    amount: <YOUR_AMOUNT>,\n    preferenceId: \"<YOUR_PREFERENCE_ID>\"\n  };\n  const customization = {\n    paymentMethods: {\n      ticket: \"all\",\n      bankTransfer: \"all\",\n      creditCard: \"all\",\n      debitCard: \"all\",\n      mercadoPago: \"all\",\n    },\n  };\n  const onSubmit = async ({ selectedPaymentMethod, formData }) => {\n   \n // callback called when clicking the submit data button\n    return new Promise((resolve, reject) => {\n      fetch(\"/process_payment\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(formData),\n      })\n        .then((response) => response.json())\n        .then((response) => {\n          // receive payment result\n          resolve();\n        })\n        .catch((error) => {\n          // handle error response when trying to create payment\n          reject();\n        });\n    });\n  };\n  const onError = async (error) => {\n    // callback called for all Brick error cases\n    console.log(error);\n  };\n  const onReady = async () => {\n    /*\n     Callback called when Brick is ready.\n     Here you can hide loadings from your site, for example.\n    */\n  };\n\n  return (\n    <Payment\n      initialization={initialization}\n      customization={customization}\n      onSubmit={onSubmit}\n      onReady={onReady}\n      onError={onError}\n    />\n  );\n};\nexport default CheckoutMercadoPago;\n```\n\n----------------------------------------\n\nTITLE: Internal Server Error Response (Status 500)\nDESCRIPTION: This JSON snippet represents an error response with a status code of 500 (Internal Server Error). This indicates that an error occurred on the server side while processing the request. The 'message' and 'cause' fields provide information about the internal error.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/refund-partial-amount.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"status\": \"500\",\n   \"error\":  \"internal_server_error\",\n   \"message\": \"Invalid splitter id.\",\n   \"cause\": [\n    {\n      \"code\":\"500000\",\n      \"message\": \"Internal server error\",\n      \"data\": null\n    }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MercadoPagoDevicesSDK in Swift\nDESCRIPTION: This code demonstrates how to initialize the MercadoPagoDevicesSDK in a Swift iOS application. It's recommended to do this in the AppDelegate's didFinishLaunchingWithOptions method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport MercadoPagoDevicesSDK\n...\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        ...        \n        MercadoPagoDevicesSDK.shared.execute()\n        ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Interest-Free Installments in Mercado Pago Account\nDESCRIPTION: Process for setting up interest-free installments through the Mercado Pago account settings for different regional variants\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/nuvemshop/discounts-installment-payments.en.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. Log in to your Mercado Pago account\n2. Select **Your Business > Fees and Installments**\n3. Select **Checkout**\n4. Choose \"Installments\" and then **Offer**\n5. **Activate** the button next to \"Offer seller installments\"\n6. Choose maximum number of installments\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer with Java SDK\nDESCRIPTION: This snippet illustrates how to retrieve a customer's information using their unique identifier with the Mercado Pago SDK. It utilizes the get method of the CustomerClient to fetch the customer's details based on their ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/customers.es.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nCustomerClient customerClient = new CustomerClient();\n\nString customerId = \"247711297-jxOV430go9fx2e\";\ncustomerClient.get(customerId);\n```\n\n----------------------------------------\n\nTITLE: Test Accounts Creation and Setup Process\nDESCRIPTION: Step-by-step process for creating test seller and buyer accounts in Mercado Pago, configuring credentials, and enabling test mode in Shopify.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/shopify/integration-test.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Access **[Your integrations](https://www.mercadopago[FAKER][URL][DOMAIN]/developers/panel/app)**\n2. Click on **Test accounts**\n3. Create two test accounts (seller and buyer)\n4. Login with seller test account in incognito window\n5. Create new application in Developer panel\n6. Copy `public_key` and `access_token`\n7. Configure in Shopify Settings > Payments\n8. Enter credentials\n9. Save credentials\n10. Enable test mode\n```\n\n----------------------------------------\n\nTITLE: Defining Glossary Terms in Markdown\nDESCRIPTION: This snippet creates a markdown table to define key terms used in Mercado Pago's payment processing system. It includes terms such as Access token, Integrator, Payment intent, Poi, PDV, Self-service, and Webhook.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/glossary.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Termo | Descrição |\n| --- | --- |\n| Access token | Chave privada com a qual você pode gerar cobranças. Você deve usá-la para se identificar em suas integrações. É muito importante que esses dados estejam protegidos em seus servidores e não sejam acessíveis a qualquer usuário ou invasor. |\n| Integrador | Pessoa ou entidade que deseja processar um pagamento por meio de nossa API.|\n| Intenção de pagamento | Contém os detalhes da transação.|\n| Poi | Série do dispositivo. Você pode ver na parte de trás do seu dispositivo (SN, NS). |\n| Poi Type | Tipo de dispositivo. |\n| PDV | Ponto de venda.|\n| Self-service | Traduz-se como autoatendimento. É o modelo onde o cliente pode fazer uso dos dispositivos de forma autônoma e autogerida. Por favor, tenha em mente que o uso desses dispositivos é desaconselhado e, se implementado, será de total responsabilidade do comércio. |\n| Webhook | É uma notificação que é enviada do nosso servidor para o integrador através de uma chamada HTTP POST em relação às suas transações. |\n```\n\n----------------------------------------\n\nTITLE: Mercado Pago SDK Script Tag\nDESCRIPTION: Script tag for including the Mercado Pago JavaScript SDK, which is required for accessing the installments API and other Mercado Pago functionalities.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/considerations-argentina.en.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://secure.mlstatic.com/sdk/javascript/v1/mercadopago.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Reconciliation Reports Integration\nDESCRIPTION: Integration method for Mercado Pago reconciliation reports to synchronize sales data and track account movements across different markets. Enables comprehensive financial tracking and reporting.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/qr-advanced-integration.en.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Reconciliation Reports Integration\n[Mercado Pago reconciliation reports](/developers/en/guides/additional-content/reports/general-considerations/reconciliation-reports)\n```\n\n----------------------------------------\n\nTITLE: Canceling or Pausing Subscription with PUT Request\nDESCRIPTION: Provides functionality to cancel or pause an existing subscription by updating its status through a PUT request to the preapproval endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/subscription-management.en.md#2025-04-18_snippet_3\n\nLANGUAGE: rest\nCODE:\n```\nPUT /preapproval/{id}\n{\n    \"status\": \"canceled\" // or \"paused\"\n}\n```\n\n----------------------------------------\n\nTITLE: Bad Request Error Response\nDESCRIPTION: Represents an error response for malformed or incomplete API requests. Returns an error type, descriptive message, and status code.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/discount-promise-no-coupon-responses.en.md#2025-04-18_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"error\": \"bad_request\",\n  \"message\": \"<bad_request_message>\",\n  \"status\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Chargeback by Payment ID with cURL\nDESCRIPTION: API request to retrieve chargeback information using a payment ID. Returns similar information as the ID query but in a paginated results format.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/chargebacks-management/manage-chargeback.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/chargebacks/search?payment_id={payment_id}' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{access_token}}'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"paging\": {\n        \"offset\": 0,\n        \"limit\": 25,\n        \"total\": 1\n    },\n    \"results\": [\n        {\n            \"id\": \"234000062890459000\",\n            \"payments\": [\n                86439942806\n            ],\n            \"currency\": \"ARS\",\n            \"amount\": 1000.5,\n            \"reason\": \"general\",\n            \"coverage_applied\": null,\n            \"coverage_elegible\": true,\n            \"documentation_required\": false,\n            \"documentation_status\": \"not_supplied\",\n            \"documentation\": [],\n            \"date_documentation_deadline\": null,\n            \"date_created\": null,\n            \"date_last_updated\": \"2024-10-17T12:48:24.000-04:00\",\n            \"live_mode\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript to Fetch and Display Payment Status\nDESCRIPTION: This JavaScript code runs after the DOM is fully loaded and fetches the latest payment status using an ID stored in local storage. It then displays the result on the confirmation screen. Proper error handling is included to manage possible issues during fetching.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-bigmerchants.en.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener(\"DOMContentLoaded\", async function (e) {\n heat();\n});\n\nasync function init() {\n const id = localStorage.getItem(\"paymentId\");\n\n try {\n   const response = await fetch(\"/get_payment/\" + id, {\n     method: \"GET\",\n   });\n   const result = await response.json();\n   if (result.status != 200) throw new Error(\"error getting payment\");\n   document.getElementById(\"congrats-div\").innerHTML =\n     \"Pagamento \" + result.data.id + \" -> Status: \" + result.data.status;\n } catch (error) {\n   alert(\"Unexpected error\\n\" + JSON.stringify(error));\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Payment Brick Review Sample - Node.js\nDESCRIPTION: GitHub repository for Mercado Pago Payment Brick with an additional confirmation step, providing a detailed payment flow implementation\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/github-project.en.md#2025-04-18_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n* [Functional project - Payment Brick with confirmation step](https://github.com/mercadopago/payment-bricks-review-sample-node)\n```\n\n----------------------------------------\n\nTITLE: Implementing 468x60 Mercado Pago Payment Methods Banner\nDESCRIPTION: HTML code to embed a 468x60 pixel banner showing supported payment methods through Mercado Pago\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/online.en.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/banners/ar/medios/online/468X60.jpg\" \ntitle=\"Mercado Pago - Medios de pago\" alt=\"Mercado Pago - Medios de pago\" \nwidth=\"468\" height=\"60\"/>\n```\n\n----------------------------------------\n\nTITLE: HTML Container for Card Payment Brick\nDESCRIPTION: HTML div element to host the Card Payment Brick, with matching container ID for rendering\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/default-rendering.es.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"cardPaymentBrick_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for Terminal ID Query\nDESCRIPTION: This JSON snippet shows the expected response format when querying a terminal's ID. The 'terminal' field contains the unique numerical ID of the device.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/api-get-terminal.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"terminal\": \"3127\"\n}\n```\n\n----------------------------------------\n\nTITLE: Security code field V1\nDESCRIPTION: Shows the HTML code for the security code field when using SDK V1\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.en.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<input id=\"securityCode\" data-checkout=\"securityCode\" type=\"text\" />\n\n```\n\n----------------------------------------\n\nTITLE: Example of Generated SSH Public Key\nDESCRIPTION: This snippet shows an example of a generated SSH public key. It consists of three parts: the algorithm (ssh-rsa), the public key value, and a comment (usually user@host). This format is what should be shared with Mercado Pago for SFTP access configuration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/public-and-private-key.en.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nssh-rsa CCCCB3NzaC1yc2EAAAADAQABAAABgQDIuC0emFLk1nGC1MCmJDqHzJy9N3WGJFCrDY8EuhcrpCP+5R6X/LnVESwn291IR2B7cO6jZtv6v8OohdWl9nCfNndm5w9HRuujrbpPebADGbrG89srHCuQVLY8zg+/cvLk0yGGvsSkpCZsJDm74VHngkwxdnR3T0dfpHFG/JcFjeNPpCW4d9N9gfkpmclBpfB14VMLoQ2K2xwLbujaxra0p0EbEbc/eq1vdN+m2Ja7WyR1L+66Cp3NKw1+suFIlP2H58kn7988JZ4baenfwOv8qQZu6WqsyJTecSwDgBn6Jr7WbpKfq2+nARif96nip5rFwxKWkHs7pDGu2XniurzlGe7MQaRc/XLdeAewS1qkt9qS51b1hy816KvcBFC5zPOH2P3yFWTcEFDT3WUfJ0o1MQk22eAHuCSK1tjRdDCGoB5sCjYYGCPonIaRc85CRNi/5CpD0i+xmopW1gOK6Q7dZSj6kSaphK1WK47Mdn20Eeu+OADLqnWN/np2qWyK/68= user@host\n```\n\n----------------------------------------\n\nTITLE: Processing Scanner Response in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to handle the scanner response in the onActivityResult method. It uses the handleScannerResponse function of the CameraScanner class to process the result and handle success or error cases.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/camscanner-legacy.es.md#2025-04-18_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n   super.onActivityResult(requestCode, resultCode, data)\n\n   val cameraScanner = MPManager.cameraScanner\n\n   cameraScanner.handleScannerResponse(this, resultCode, data) { response ->\n       response.doIfSuccess { result ->\n           // Manejar la respuesta exitosa\n           val status = result.status\n           val message = result.message\n           // ... Hacer algo con la respuesta\n       }.doIfError { error ->\n           // Manejar el error en la respuesta\n           val errorMessage = error.message\n           // ... Hacer algo con el error\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Malformed Request Error Response\nDESCRIPTION: This JSON response represents an error condition where the request was poorly formulated. It includes an 'error' code (bad_request), a detailed 'message' explaining the error, and the corresponding HTTP 'status' code (400). This type of error typically indicates issues with the request structure or data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/coupon-validation-responses.en.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"bad_request\",\n  \"message\": \"detailed error message\",\n  \"status\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with MercadoPago PHP\nDESCRIPTION: This snippet demonstrates how to create a preference object with MercadoPago using PHP. It sets the item details and the 'purpose' to 'wallet_purchase', allowing only registered payments.  The code requires the MercadoPago PHP SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-startup.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Crear un objeto de preferencia\n$preference = new MercadoPago\\Preference();\n \n// Crear un elemento en la preferencia\n$item = new MercadoPago\\Item();\n$item->title = 'Mi producto';\n$item->quantity = 1;\n$item->unit_price = 75.56;\n$preference->items = array($item);\n \n// el $preference->purpose = 'wallet_purchase'; solo permite pagos registrados\n// para permitir pagos de invitados, puedes omitir esta propiedad\n$preference->purpose = 'wallet_purchase';\n$preference->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference in Ruby\nDESCRIPTION: Create a Mercado Pago payment preference using Ruby with wallet purchase purpose and a product item\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/default-rendering.en.md#2025-04-18_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\npreference_data = {\n  purpose: 'wallet_purchase',\n  items: [\n    {\n      title: 'Meu produto',\n      unit_price: 75.56,\n      quantity: 1\n    }\n  ]\n}\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n\n@preference_id = preference['id']\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme in React JSX Component\nDESCRIPTION: This snippet demonstrates how to set the theme within a customization object using React JSX syntax. It supports the same four theme options as the JavaScript implementation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/set-theme.en.md#2025-04-18_snippet_2\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n   style: {\n     theme: 'dark' | 'default' | 'bootstrap' | 'flat'\n   }\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Adding MercadoPagoDevicesSDK Dependency for iOS\nDESCRIPTION: Adds the MercadoPagoDevicesSDK dependency to the iOS project's Podfile to implement Device ID functionality in a native iOS application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.en.md#2025-04-18_snippet_5\n\nLANGUAGE: ios\nCODE:\n```\nuse_frameworks!\npod 'MercadoPagoDevicesSDK'\n```\n\n----------------------------------------\n\nTITLE: Rendering Pix QR Code in HTML\nDESCRIPTION: HTML code snippet for rendering a Pix QR code directly on the checkout page. It uses the base64-encoded QR code data to display the image that can be scanned by the buyer's banking app.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pix.en.md#2025-04-18_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<img src={`data:image/jpeg;base64,${qr_code_base64}`}/>\n```\n\n----------------------------------------\n\nTITLE: Available Payments Configuration (MLM)\nDESCRIPTION: This snippet specifies the available payment methods for Mexico (MLM) when using the Mercado Pago integration with Tiendanube. It includes credit cards, debit cards, Mercado Pago account payments, cash payments, ATM and installments without a card.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/nuvemshop/landing.es.md#2025-04-18_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n\"available_payments: credit, debit, mercadopago, efectivo, atm, cuotas_sin_tarjeta_mlm\"\n```\n\n----------------------------------------\n\nTITLE: Installing Mercado Pago SDK with Composer\nDESCRIPTION: This code snippet demonstrates how to install the Mercado Pago SDK for PHP using Composer.  Composer is a dependency management tool for PHP. The command `php composer.phar require \"mercadopago/dx-php\"` adds the Mercado Pago SDK as a dependency to your project.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-development-environment.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"php composer.phar require \\\"mercadopago/dx-php\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Methods using MercadoPago SDK Python\nDESCRIPTION: This Python snippet shows how to use the MercadoPago SDK to obtain payment methods. The sdk object is initialized with an access token, and the list_all method retrieves the available payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pse-avanza.en.md#2025-04-18_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\npayment_methods_response = sdk.payment_methods().list_all()\npayment_methods = payment_methods_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Create Partial Refund with Mercado Pago Node.js SDK\nDESCRIPTION: This snippet demonstrates how to create a partial refund for a payment using the Mercado Pago Node.js SDK. It configures the `mercadopago` object with an access token and then uses the `mercadopago.refund.create` method to create the refund, specifying the payment ID and the refund amount. The `amount` property is set to 0.0.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/refunds.en.md#2025-04-18_snippet_1\n\nLANGUAGE: node.js\nCODE:\n```\nvar refund = {\n payment_id: payment_id,\n amount: 0.0\n};\nmercadopago.configure({\n access_token: 'YOUR_ACCESS_TOKEN'\n});\n \nmercadopago.refund.create(refund).then((result) => {\n console.log(result.response.id)\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Payment by ID with Mercado Pago PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve payment information by its ID using the Mercado Pago PHP SDK. It initializes a `PaymentClient` and calls the `get()` method with the payment ID as an argument. The returned `$payment` object contains all the information related to that specific payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/create-payments.en.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new PaymentClient();\n  $payment = $client->get(id);\n?>\n```\n\n----------------------------------------\n\nTITLE: Generating Yape Token via API\nDESCRIPTION: cURL request example for generating a Yape token directly through the API. This approach requires phoneNumber, OTP code, and a requestId. This method is an alternative to using the JavaScript SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/platforms/pci/yape/v1/payment?public_key=<PUBLIC_KEY>' \\\n--header 'Content-Type: application/json' \\\n--data '{\n   \"phoneNumber\": \"123214234342\",\n   \"otp\": \"123344\",\n   \"requestId\": \"3127367123234234\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Embedding Mercado Pago 120x600 Banner for Brazil (MLB)\nDESCRIPTION: HTML code to embed a 120x600 pixel Mercado Pago banner for Brazil, showcasing 6 interest-free installment payment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/seis.en.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/PSJ/120x600_banner_psj_6x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"120\" height=\"600\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Callbacks in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to configure onError, onReady, and onSubmit callbacks within the settings object when initializing a Brick. The onError callback logs error information, the onReady callback is triggered when the Brick is ready, and the onSubmit callback is executed when the user clicks the button.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/additional-callbacks.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst settings = {\n   ...,\n   callbacks: {\n       onError: (error) => {\n           // acionado quando ocorre um erro\n           console.log(error);\n       },\n       onReady: () => {\n           // acionado quando o Brick está pronto\n       },\n       onSubmit: () => {\n           // acionado quando o botão é clicado\n       },\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: Payment Methods Table - Argentina (MLA)\nDESCRIPTION: Markdown table listing available payment methods for Argentina, including Cards, 2 Cards, Account balance, and offline payment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/adobe-commerce/checkout-api.en.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Payment Method | Description |\n|---|---|\n| Cards | Allows integration with credit and debit cards |\n| 2 Cards | Allows integration with 2 cards, whether they are credit or debit cards.|\n| Mercado Pago account balance | Allows payments with money available in the Mercado Pago customer's account. |\n| Rapipago | Offline method |\n| Pago Fácil | Offline method |\n| Up to 12 installments without a card with Mercado Pago | Allows the customer the option to finance a purchase without a card, while the seller receives the total amount of the money thanks to this Mercado Pago administrated credit line. |\n```\n\n----------------------------------------\n\nTITLE: Obtendo Informações de Pagamento por ID com cURL\nDESCRIPTION: Este snippet demonstra como fazer uma requisição GET para obter detalhes de um pagamento específico usando seu ID. Utiliza autenticação via token de acesso e inclui parâmetros adicionais como status, offset e limit.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/retrieving-payments.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -G -X GET \\\n-H \"accept: application/json\" \\\n-H 'Authorization: Bearer ACCESS_TOKEN' \\\n\"https://api.mercadopago.com/v1/payments/<payment_id>\" \\\n-d \"status=approved\" \\\n-d \"offset=0\" \\\n-d \"limit=10\"`\n```\n\n----------------------------------------\n\nTITLE: Creating Cash Payment with C# in MercadoPago\nDESCRIPTION: C# implementation for creating a payment request using MercadoPago's C# SDK. Sets transaction amount, description, payment method (OXXO), and payer email to process a cash payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = 100,\n    Description = \"Título do produto\",\n    PaymentMethodId = \"oxxo\",\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"test_user_82045343@testuser.com\",\n    },\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Paginated Search - PHP Implementation\nDESCRIPTION: PHP implementation demonstrating payment search with pagination, sorting, and filtering options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/retrieving-payments.en.md#2025-04-18_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\trequire ('mercadopago.php');\n\n\t$mp = new MP (\"ENV_ACCESS_TOKEN\");\n\n\t$payment = $mp->get(\n\t\t\"/v1/payments/search\",\n\t\tarray(\n\t\t\t\"external_reference\" => \"123456789\",\n\t\t\t\"limit\" => 50,\n\t\t\t\"offset\" => 200,\n\t\t\t\"sort\" => \"id\",\n\t\t\t\"criteria\" => \"desc\"\n\t\t)\n\t);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with 3DS Optional Mode - C#\nDESCRIPTION: This C# snippet illustrates creating a payment with `ThreeDSecureMode` set to \"optional\".  Mercado Pago determines if a 3DS challenge is required. The snippet uses the Mercado Pago .NET SDK and requires an access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.es.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\nMercadoPagoConfig.AccessToken = \"<ENV_ACCESS_TOKEN>\";\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = <TRANSACTION_AMOUNT>,\n    Token = \"<CARD_TOKEN>\",\n    Description = \"<DESCRIPTION>\",\n    Installments = <INSTALLLMENTS_NUMBER>,\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"<BUYER_EMAIL>\",\n    },\n    ThreeDSecureMode = \"optional\",\n};\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\n\n```\n\n----------------------------------------\n\nTITLE: Rejected Payment API Response Example\nDESCRIPTION: Example of a rejected payment response from the API showing the status and rejection details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.es.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status\": \"rejected\",\n    \"status_detail\": \"cc_rejected_insufficient_amount\",\n    \"id\": 47198050,\n    \"payment_method_id\": \"master\",\n    \"payment_type_id\": \"credit_card\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Payment Methods Table - Chile (MLC)\nDESCRIPTION: Markdown table listing available payment methods for Chile, including Cards and 2 Cards options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/adobe-commerce/checkout-api.en.md#2025-04-18_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Payment Method | Description |\n| --- | --- |\n| Cards | Allows integration with credit and debit cards. |\n| 2 Cards | Allows integration with 2 credit and debit cards. |\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago Checkout Bricks in cURL\nDESCRIPTION: This cURL command demonstrates how to create a payment using the Mercado Pago API. It sends a POST request to the Mercado Pago API endpoint, including the access token in the Authorization header and the payment details in the JSON body.  The payment details include transaction amount, token, description, installments, payment method ID, issuer ID, and payer email.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-serverside.es.md#2025-04-18_snippet_12\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/payments' \\\n    -d '{\n          \"transaction_amount\": 100,\n          \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n          \"description\": \"Blue shirt\",\n          \"installments\": 1,\n          \"payment_method_id\": \"visa\",\n          \"issuer_id\": 310,\n          \"payer\": {\n            \"email\": \"test@test.com\"\n          }\n    }'\n\n```\n\n----------------------------------------\n\nTITLE: Implementing React-Native-InAppBrowser for Android\nDESCRIPTION: This JavaScript snippet illustrates how to set up a button in a React Native application to open a URL using the React-Native-InAppBrowser when available, integrating various customization options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-cli.en.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n\tButton,\n\tLinking\n} from 'react-native';\nimport InAppBrowser from 'react-native-inappbrowser-reborn';\nconst ButtonCustomTabs = () => {\n\tconst openUrl = async (url) => {\n\t\tif (await InAppBrowser.isAvailable()) {\n\t\t\tInAppBrowser.open(url, {\n\t\t\t\t// iOS Properties\n\t\t\t\tdismissButtonStyle: 'cancel',\n\t\t\t\tpreferredBarTintColor: '#453AA4',\n\t\t\t\tpreferredControlTintColor: 'white',\n\t\t\t\treaderMode: false,\n\t\t\t\tanimated: true,\n\t\t\t\tmodalEnabled: true,\n\t\t\t\t// Android Properties\n\t\t\t\tshowTitle: true,\n\t\t\t\ttoolbarColor: '#6200EE',\n\t\t\t\tsecondaryToolbarColor: 'black',\n\t\t\t\tenableUrlBarHiding: true,\n\t\t\t\tenableDefaultShare: true,\n\t\t\t\tforceCloseOnRedirection: false, // Animation\n\t\t\t\tanimations: {\n\t\t\t\t\tstartEnter: 'slide_in_right',\n\t\t\t\t\tstartExit: 'slide_out_left',\n\t\t\t\t\tendEnter: 'slide_in_left',\n\t\t\t\t\tendExit: 'slide_out_right',\n\t\t\t\t},\n\t\t\t});\n\t\t} else {\n\t\t\tLinking.openURL(url);\n\t\t}\n\t};\n\treturn ( < Button title = \"Press Me\"\n\t\t\t\t\t onPress = {\n\t\t\t\t\t\t() =>\n\t\t\t\t\t\topenUrl('YOUR-URL-PREFERENCE')\n\t\t\t\t\t}\n\t\t\t\t\t/> );\n};\nexport default ButtonCustomTabs;\n```\n\n----------------------------------------\n\nTITLE: Defining product_landing_hero Component in YAML\nDESCRIPTION: This YAML snippet demonstrates the `product_landing_hero` component, which is used to create the main hero section on the product landing page. It includes a title, message, image URL, benefit icons and titles, and an additional information field with a link. The image should be a high-quality PNG.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/readme/product-overview.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nproduct_landing_hero:\n - title: Integra Checkout Pro fácilmente\n - message: Incorpora esta solución de cobro que permite a tus clientes pagar en Mercado Pago sin necesidad de iniciar sesión.\n - image: https://http2.mlstatic.com/storage/dx-devsite/docs-assets/custom-upload/2025/1/26/1740592108112-imgchopro4x.png\n - benefit_icon: recurring-payments\n - benefit_title: Para pagos online\n - benefit_icon: categories\n - benefit_title: Simple de integrar\n - benefit_icon: link\n - benefit_title: Redirección a Mercado Pago\n - benefit_icon: edit\n - benefit_title: Baja personalización\n - info: ¿Buscas opciones más fáciles? Explora nuestras [soluciones sin desarrollo](/docs#online-payments).\n---\n```\n\n----------------------------------------\n\nTITLE: Responsive Challenge Iframe CSS Styling\nDESCRIPTION: CSS for creating a responsive iframe to display 3DS authentication challenge, with media query for mobile devices\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.es.md#2025-04-18_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n#myframe{\n  width: 500px;\n  height: 600px;\n  border: none;\n}\n@media only screen and (width <= 980px) {\n  #myframe{\n    width: 100%;\n    height: 440px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Report Column Definitions Table\nDESCRIPTION: Markdown table defining the columns, descriptions, and data types for the available balance report including transaction tags, operation IDs, financial values and payment details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/glossary.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Nome da coluna do relatório | O que significa | Tipo de dado <br> (longitude máxima) |\n|---|---|---|\n| Data da liberação (`DATE`) | Data de liberação da transação. É o momento em que essa transação afeta o saldo disponível na conta do usuário. | DateTime <br> (yyyy-MM-dd'T'HH:mm:ssZ) |\n```\n\n----------------------------------------\n\nTITLE: Configuring Shipping Cost in MercadoPago Preference\nDESCRIPTION: This JSON snippet demonstrates how to add shipping cost to a MercadoPago preference. It includes a 'shipments' node with the cost value and sets the mode to 'not_specified', allowing merchants to display shipping costs separately from the total price.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"shipments\":{\n        \"cost\": 1000,\n        \"mode\": \"not_specified\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exemplo de Notificação de Card Updater em JSON\nDESCRIPTION: Exemplo de payload de notificação enviada quando um cartão de cliente é atualizado pelo Card Updater. Inclui informações como o ID do cliente, novo e antigo ID do cartão.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/notification-additional-info.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"card.updated\",\n  \"api_version\": \"v1\",\n  \"application_id\": 8339021212080291,\n  \"data\": {\n    \"customer_id\": \"12345678-aluyasdhfyt\",\n    \"new_card_id\": 50000102202,\n    \"old_card_id\": 50000006036\n  },\n  \"date_created\": \"2024-01-11T15:23:53-03:00\",\n  \"id\": \"a47fc06844bf4e418a03aeab1479c496\",\n  \"live_mode\": true,\n  \"type\": \"automatic-payments\",\n  \"user_id\": 1197520450,\n  \"version\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Canceling Refund Intent (JSON)\nDESCRIPTION: This JSON response shows the structure of the data returned when successfully canceling a refund intent. It includes the ID of the canceled refund intent.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/refund-processing.en.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"75j8sfa-euu6-4x56-slk8-a341f71ba2f1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Marketplace Sales Report with cURL\nDESCRIPTION: API request to download a marketplace sellers sales report. Requires a statement_id from report creation and accepts an optional format parameter (csv/json). Returns sales data including collector details, payment info, and fee amounts.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/download-report.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request GET 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/statements/{{statement_id}}/download?format=csv' \\\n--header 'Authorization: Bearer {{TOKEN}}'\n```\n\nLANGUAGE: text\nCODE:\n```\nCOLLECTOR;COLLECTOR_NICKNAME;PAYMENT;STATUS_DESCRIPTION;STATUS_DETAIL;PURCHASE_ORDER;PAYMENT_METHOD_TYPE;TRANSACTION_AMOUNT;DATE_CREATED;DATE_APPROVED;MARKETPLACE_FEE_AMOUNT;MERCADOPAGO_FEE_AMOUNT;TOTAL_PAID_AMOUNT;NET_RECEIVED_AMOUNT\n{{report rows}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirection URLs in MercadoPago Preference with C#\nDESCRIPTION: This C# code demonstrates how to configure back URLs and auto-return for a MercadoPago preference. It creates a PreferenceBackUrlsRequest with URLs for different payment outcomes and sets the auto-return property to approved for automatic redirection.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nvar request = new PreferenceRequest\n{\n    // ...\n    BackUrls = new PreferenceBackUrlsRequest\n    {\n        Success = \"https://www.tu-sitio/success\",\n        Failure = \"http://www.tu-sitio/failure\",\n        Pending = \"http://www.tu-sitio/pendings\",\n    },\n    AutoReturn = \"approved\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Pending Payment Subscription Using POST Request - curl\nDESCRIPTION: This snippet demonstrates how to create a new subscription with a pending payment status by sending a POST request to the MercadoPago API endpoint '/preapproval'. It requires an access token for authorization and specifies the subscription details, including the frequency, currency, and payer's email.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/subscription-no-associated-plan-pending-payments.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/preapproval' \\\n--header 'Authorization: Bearer YOU_ACCESS_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\\n    \"reason\": \"Yoga classes\",\\n    \"external_reference\": \"YG-1234\",\\n    \"payer_email\": \"test_user_75650838@testuser.com\",\\n    \"auto_recurring\": {\\n        \"frequency\": 1,\\n        \"frequency_type\": \"months\",\\n        \"end_date\": \"2023-07-20T15:59:52.581Z\",\\n        \"transaction_amount\": 10,\\n        \"currency_id\": \"BRL\"\\n    },\\n    \"back_url\": \"https://www.yoursite.com\",\\n    \"status\": \"pending\"\\n}'\n```\n\n----------------------------------------\n\nTITLE: Cancellation Order Status Conditions\nDESCRIPTION: Defines the key prerequisites for cancelling a Mercado Pago order, including expiration criteria and valid payment statuses\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/cancellations.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- **Expiration date**: an order expires after 30 days without confirmation and the cancellation is automatic.\n- **Payment status**: cancellations can only be made if the payment status is `action_required` or `created`.\n```\n\n----------------------------------------\n\nTITLE: Criando Nota Simples em Markdown\nDESCRIPTION: Implementa uma nota simples para destacar dicas ou recomendações. Utiliza a sintaxe de blockquote do Markdown.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/style-guide/notes.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> Este é um exemplo de nota.\n```\n\n----------------------------------------\n\nTITLE: Script SFTP para carga automática de archivos en Mercado Pago\nDESCRIPTION: Este snippet muestra los comandos SFTP necesarios para crear un script de carga automática de archivos. Se utiliza para automatizar el proceso de carga de archivos en el servidor SFTP de Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/upload-a-file.es.md#2025-04-18_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nls\ncd selfserviceinput\nput /Users/user/debt_589_6_20230804.csv\nls\nbye\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkout API Testing Environment\nDESCRIPTION: Instructions for setting up and testing the Checkout API integration using sandbox credentials and test payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/adobe-commerce/integration-test.en.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Access Your integrations in Mercado Pago admin\n2. Copy test access_token and public_key\n3. Configure Adobe Commerce panel\n4. Select Sandbox mode\n5. Enter test credentials\n6. Save configuration\n7. Perform test purchase with test cards\n```\n\n----------------------------------------\n\nTITLE: Failed Payment Response from MercadoPago API\nDESCRIPTION: This JSON response shows a failed payment transaction from the MercadoPago API. It includes error details, order information, and transaction data. The status 'failed' with status_detail 'rejected_by_issuer' indicates the payment was rejected by the card issuer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.en.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"code\": \"failed\",\n      \"message\": \"The following transactions failed\",\n      \"details\": [\n        \"pay_01JE71J4APB80344T8QMSZK48V: rejected_by_issuer\"\n      ]\n    }\n  ],\n  \"data\": {\n    \"id\": \"01JE71J4APB80344T8QHV6W42A\",\n    \"type\": \"online\",\n    \"processing_mode\": \"automatic\",\n    \"external_reference\": \"ext_ref_1234\",\n    \"capture_mode\": \"automatic\",\n    \"total_amount\": \"200.00\",\n    \"country_code\": \"BRA\",\n    \"status\": \"failed\",\n    \"status_detail\": \"failed\",\n    \"created_date\": \"2024-12-03T19:57:07.798976826Z\",\n    \"last_updated_date\": \"2024-12-03T19:57:10.276894389Z\",\n    \"integration_data\": {\n      \"application_id\": \"130106526144588\"\n    },\n    \"payer\": {\n      \"email\": \"test_user_9835778@testuser.com\"\n    },\n    \"transactions\": {\n      \"payments\": [\n        {\n          \"id\": \"pay_01JE71J4APB80344T8QMSZK48V\",\n          \"amount\": \"200.00\",\n          \"status\": \"failed\",\n          \"status_detail\": \"rejected_by_issuer\",\n          \"reference_id\": \"22dvqmsfohy\",\n          \"payment_method\": {\n            \"id\": \"master\",\n            \"type\": \"credit_card\",\n            \"token\": \"756bf5ae9e03b14a47c7afd8e77ab7f8\",\n            \"installments\": 1\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Credentials - JavaScript\nDESCRIPTION: This JavaScript snippet initializes the MercadoPago SDK with a public key, which serves as a unique identifier for integrating payments securely.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mp = new MercadoPago(\"YOUR_PUBLIC_KEY\");\n```\n\n----------------------------------------\n\nTITLE: Client Credentials Table\nDESCRIPTION: Markdown table defining Client ID and Client Secret credentials used in OAuth integrations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/credentials/credentials.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Tipo | Descrição |\n|---|---|\n| Client ID | Identificador único que representa sua integração. |\n| Client Secret | Chave privada utilizada em alguns complementos para gerar pagamentos. É extremamente importante manter esta informação segura em seus servidores e não permitir o acesso a nenhum usuário do sistema ou intruso. |\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with Reserved Values using cURL\nDESCRIPTION: Uses a cURL command to create a payment with capture=false via the Mercado Pago API. Sends a POST request with headers and a JSON payload containing transaction amount, token, and other required parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/make-value-reserve.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n    'https://api.mercadopago.com/v1/payments' \\\n    -d '\n{\n   \"transaction_amount\":100,\n   \"token\":\"ff8080814c11e237014c1ff593b57b4d\",\n   \"description\":\"Product title\",\n   \"installments\":1,\n   \"payment_method_id\":\"visa\",\n   \"payer\":{\n      \"email\":\"test_user_3931694@testuser.com\"\n   },\n   \"capture\":false\n}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Fintoc Sandbox Mode\nDESCRIPTION: Initialization of Fintoc widget in sandbox mode for testing purposes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-advanced.es.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst fintoc = mp.fintoc({sandbox: true});\n```\n\n----------------------------------------\n\nTITLE: Cleaning Adobe Commerce Cache\nDESCRIPTION: Command to clear the Adobe Commerce cache after module installation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/adobe-commerce/installation-composer.en.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbin/magento cache:clean\n```\n\n----------------------------------------\n\nTITLE: Inicializando SDK do Mercado Pago em Java para Android\nDESCRIPTION: Código Java para inicializar o SDK do Mercado Pago para coleta de Device ID em aplicações Android.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-chopro.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport com.mercadolibre.android.device.sdk.DeviceSDK;\n\nDeviceSDK.getInstance().execute(this);\n```\n\n----------------------------------------\n\nTITLE: MercadoPago Banner Implementation - 125x125px\nDESCRIPTION: HTML code for displaying a 125x125 pixel MercadoPago payment methods banner. The image shows 12 interest-free installment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/doze.en.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/PSJ/125x125_banner_psj_12x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"125\" height=\"125\"/>\n```\n\n----------------------------------------\n\nTITLE: Cargando archivo usando Consola SFTP en Mercado Pago\nDESCRIPTION: Este snippet muestra los comandos para conectarse a SFTP, navegar al directorio correcto, cargar un archivo y verificar la carga. Se utiliza para cargar manualmente archivos en el servidor SFTP de Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/upload-a-file.es.md#2025-04-18_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nUY0FVFGW103Q05P: ~ user$ sftp pg_sap@sftp-qa.mercadolibre.io\nConnected to sftp-qa.mercadolibre.io.\nsftp> ls\nselfserviceinput\tselfserviceoutput\nsftp> cd selfserviceinput\nsftp> ls\nsftp> put /\tUsers/user/debt_589_6_20230804.csv\nUploading /Users/user/debt_589_6_20230804.csv to /selfserviceinput/debt_589_6_20230804.csv\n/Users/user/debt_589_6_20230804.csv\nsftp> ls\ndebt_589_6_20230804.csv\nsftp> bye\n```\n\n----------------------------------------\n\nTITLE: Activating Automatic Settlement Report Generation with cURL\nDESCRIPTION: API request to enable automatic generation of settlement reports based on the configured frequency. When this endpoint is called, the 'scheduled' property is automatically set to 'true'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.en.md#2025-04-18_snippet_8\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/schedule'\n```\n\n----------------------------------------\n\nTITLE: Instantiate Mercado Pago SDK V2\nDESCRIPTION: Illustrates the instantiation of the Mercado Pago SDK in version 2 using `new MercadoPago()`.  It sets the public key during instantiation which is essential for making API requests.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n \n   const mp = new MercadoPago(\"YOUR_PUBLIC_KEY\"); \n```\n\n----------------------------------------\n\nTITLE: Configuring Back URLs in Python\nDESCRIPTION: This Python code snippet shows how to set up back URLs and auto-return for a MercadoPago preference. It defines success, failure, and pending URLs within a preference data dictionary, and enables automatic return for approved payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_25\n\nLANGUAGE: python\nCODE:\n```\npreference_data = {\n    \"back_urls\": {\n        \"success\": \"https://www.tu-sitio/success\",\n        \"failure\": \"https://www.tu-sitio/failure\",\n        \"pending\": \"https://www.tu-sitio/pendings\"\n    },\n    \"auto_return\": \"approved\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with 3DS in C#\nDESCRIPTION: This C# code snippet demonstrates how to create a payment with 3DS enabled using the Mercado Pago SDK. It sets the access token, creates a payment client, and sends a payment creation request with the `ThreeDSecureMode` set to `optional`. It requires the Mercado Pago C# SDK and uses the `PaymentClient` and `PaymentCreateRequest` to create the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-bigmerchants.en.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\nMercadoPagoConfig.AccessToken = \"<ENV_ACCESS_TOKEN>\";\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = <TRANSACTION_AMOUNT>,\n    Token = \"<CARD_TOKEN>\",\n    Description = \"<DESCRIPTION>\",\n    Installments = <INSTALLLMENTS_NUMBER>,\n    Payer = new PaymentPayerRequest\n    {\n        Email = \"<BUYER_EMAIL>\",\n    },\n    ThreeDSecureMode = \"optional\",\n};\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Adding Coupon Before Payment - Mercado Pago API - curl\nDESCRIPTION: This snippet shows how to add a coupon to a transaction before confirming the payment. It requires the authorization token, payer token, transaction amount, and coupon code. The response can vary depending on the success or failure of the request, detailing the outcome or any encountered errors.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/create-discount-promise-with-coupon.es.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n  'https://api.mercadopago.com/v2/wallet_connect/discounts' \\\n  --header 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --header 'x-payer-token: <PAYER_TOKEN>' \\\n  --header 'Content-Type: application/json' \\\n  -d '{\\n      \"amount\": 550,\\n      \"coupon\": \"<COUPON>\"\\n  }'\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Custom Tabs Package\nDESCRIPTION: Command to add flutter_custom_tabs dependency to a Flutter project using the pub package manager.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/flutter.en.md#2025-04-18_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ flutter pub add flutter_custom_tabs\n```\n\n----------------------------------------\n\nTITLE: Creando pagos con PagoEfectivo usando Mercado Pago SDK en PHP\nDESCRIPTION: Código PHP para crear un pago con PagoEfectivo utilizando el SDK de Mercado Pago. Incluye configuración del token de acceso, creación del cliente de pago, y envío de la solicitud con los datos del pagador y del método de pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mpe.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\Client\\Common\\RequestOptions;\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['transactionAmount'],\n    \"token\" => $_POST['token'],\n    \"description\" => $_POST['description'],\n    \"installments\" => $_POST['installments'],\n    \"payment_method_id\" => $_POST['paymentMethodId'],\n    \"issuer_id\" => $_POST['issuer'],\n    \"payer\" => [\n      \"email\" => $_POST['email'],\n      \"first_name\" => $_POST['payerFirstName'],\n      \"last_name\" => $_POST['payerLastName'],\n      \"identification\" => [\n        \"type\" => $_POST['identificationType'],\n        \"number\" => $_POST['number']\n      ]\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Bancário Payment with Discounts, Fines, and Interest in Python\nDESCRIPTION: This Python code snippet shows how to create a boleto bancário payment with discounts, fines, and interest using the Mercado Pago SDK. It configures the payment details, payer information, and payment rules for discounts, fines, and interest.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"YOUR_ACCESS_TOKEN\")\npayment_data = {\n    \"description\": \"Titulo do produto\",\n    \"date_of_expiration\": \"2022-12-24T15:37:48.000-03:00\",\n    \"payment_method_id\": \"bolbradesco\",\n    \"transaction_amount\": 100,\n    \"payer\": {\n        \"first_name\": \"Test\",\n        \"last_name\": \"User\",\n        \"email\": \"test_user_123456@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"19119119100\"\n        }\n    },\n    \"payment_method\": {\n        \"data\": {\n            \"rules\": {\n                \"discounts\": [\n                    {\n                        \"value\": 5,\n                        \"type\": \"fixed\",\n                        \"limit_date\": \"2022-12-10\"\n                    }\n                ],\n                \"fine\": {\n                    \"value\": 2,\n                    \"type\": \"percentage\"\n                },\n                \"interest\": {\n                    \"value\": 0.03,\n                    \"type\": \"percentage\"\n                }\n            }\n        }\n    }\n}\nresult = sdk.payment().create(payment_data)\nprint(result[\"response\"][\"transaction_details\"][\"external_resource_url\"])\n```\n\n----------------------------------------\n\nTITLE: Capturing Total Reserved Amount in MercadoPago - Curl\nDESCRIPTION: This Curl command captures the full reserved payment amount using MercadoPago's API. Required headers include authorization and idempotency key, formatted for a PUT request to update payment status. It assumes that 'curl' is installed on the system.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/capture-authorized-payment.en.md#2025-04-18_snippet_6\n\nLANGUAGE: Curl\nCODE:\n```\ncurl -X PUT \\\n  'https://api.mercadopago.com/v1/payments/PAYMENT_ID' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n  -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n  -d '{\"capture\": true}'\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago Checkout Bricks in C#\nDESCRIPTION: This C# code uses Mercado Pago's Checkout Bricks to create a payment.  It retrieves payment details from the Request object (transaction amount, token, installments, payment method ID, and payer information), constructs a PaymentCreateRequest, and then uses a PaymentClient to create the payment.  The status of the payment is then printed to the console.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-serverside.es.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\nvar paymentRequest = new PaymentCreateRequest\n{\n   TransactionAmount = decimal.Parse(Request[\"transactionAmount\"]),\n   Token = Request[\"token\"],\n   Installments = int.Parse(Request[\"installments\"]),\n   PaymentMethodId = Request[\"paymentMethodId\"],\n   Payer = new PaymentPayerRequest\n   {\n       Email = Request[\"payer\"][\"email\"],\n       Identification = new IdentificationRequest\n       {\n           Type = Request[\"payer\"][\"identification\"][\"type\"],\n           Number = Request[\"payer\"][\"identification\"][\"number\"],\n       },\n   },\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest);\n\nConsole.WriteLine(payment.Status);\n\n```\n\n----------------------------------------\n\nTITLE: Criando Pagamento com SDK do Mercado Pago em Ruby\nDESCRIPTION: Este snippet ilustra como criar um pagamento usando o SDK do Mercado Pago em Ruby. Ele configura o SDK com o token de acesso, define opções de requisição personalizadas, e envia os detalhes do pagamento para a API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/payment-submission.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_data = {\n  transaction_amount: params[:transactionAmount].to_f,\n  token: params[:token],\n  installments: params[:installments].to_i,\n  payment_method_id: params[:paymentMethodId],\n  payer: {\n    email: params[:cardholderEmail],\n    identification: {\n      type: params[:identificationType],\n      number: params[:identificationNumber]\n    }\n  }\n}\n\npayment_response = sdk.payment.create(payment_data, custom_request_options)\npayment = payment_response[:response]\n\nputs payment\n```\n\n----------------------------------------\n\nTITLE: Importing MercadoPago.js SDK in HTML\nDESCRIPTION: Adds the MercadoPago.js library to the HTML body to enable Fintoc integration and widget initialization.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-advanced.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Item Preference in C#\nDESCRIPTION: This C# code demonstrates creating a preference with multiple items using MercadoPago's SDK. It creates a PreferenceRequest object with a list of PreferenceItemRequest objects, each representing a different product, and then uses a PreferenceClient to create the preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n// Crea el request con múltiples ítems\nvar request = new PreferenceRequest\n{\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"Mi producto 1\",\n            Quantity = 1,\n            CurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\n            UnitPrice = 75.56m,\n        },\n        new PreferenceItemRequest\n        {\n            Title = \"Mi producto 2\",\n            Quantity = 2,\n            CurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\n            UnitPrice = 96.56m,\n        },\n        // ...\n    },\n};\n\n// Crea un objeto client\nvar client = new PreferenceClient();\n\n// Crea la preferencia\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Adobe Commerce Platform Configuration YAML\nDESCRIPTION: YAML configuration defining the Adobe Commerce platform section with title and descriptive message about the e-commerce platform capabilities.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/adobe-commerce/landing.en.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncontent_section_with_media:\n - title: Adobe Commerce\n - message: Adobe Commerce is an e-commerce platform that allows you to create a customizable online store, ideal for large companies that want to offer a unique experience. Adobe Commerce is the latest version of this platform, offering a user-friendly interface, higher speed, built-in cache cleaning support, and more stability.\n - media_image: /adobe-commerce/magento2-landing.png\n```\n\n----------------------------------------\n\nTITLE: Downloading Files via SFTP Console Interactive Mode\nDESCRIPTION: Demonstrates step-by-step process of manually downloading files using SFTP console, including login, navigation, and file retrieval\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/download-a-file.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nUY0FVFGW103Q05P:~ user$ cd $HOME/demo\nUY0FVFGW103Q05P:~ user$ ls\nUY0FVFGW103Q05P:~ user$ sftp pg_sap@sftp-qa.mercadolibre.io\nConnected to sftp-qa.mercadolibre.io.\nsftp> ls\nselfserviceinput\tselfserviceoutput\nsftp> cd selfserviceoutput\nsftp> ls\nreport_589_216_20230804.zip\tresult_589_6_20230804.zip\nsftp> get result_589_216_20230804.zip\nFetching /selfserviceoutput/result_589_6_20230804.zip to result_589_6_20230804.zip\n/selfserviceoutput/result_589_6_20230804.zip\n/Users/user/debt_589_6_20230804.zip\nsftp> bye\nUY0FVFGW103Q05P:~ demo user$ ls\nreport_589_216_20230804.zip result_589_6_20230804.zip\n```\n\n----------------------------------------\n\nTITLE: Gerando Nota de Precaução em Markdown\nDESCRIPTION: Produz uma nota de precaução para alertar o leitor sobre etapas importantes ou limitações. Utiliza múltiplas linhas de blockquote com a palavra-chave 'WARNING'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/style-guide/notes.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n> WARNING\n>\n> Título\n>\n> Corpo da nota.\n```\n\n----------------------------------------\n\nTITLE: Embedding Mercado Pago 468x60 Banner for Chile (MLC)\nDESCRIPTION: HTML code to embed a 468x60 pixel Mercado Pago banner for Chile, showcasing 6 interest-free installment payment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/seis.en.md#2025-04-18_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://www.mercadopago.cl/banner/468x60_banner_psj_6x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"468\" height=\"60\"/>\n```\n\n----------------------------------------\n\nTITLE: Example Payment Intent Response (MLM)\nDESCRIPTION: This JSON represents an example response body when retrieving a payment intent's information in the MLM region. It contains details such as `state`, `id`, `device_id`, `amount`, `payment` information (id), and `additional_info` including `external_reference`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/payment-processing.en.md#2025-04-18_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"state\": \"FINISHED\",\n    \"id\": \"0aa0519d-d985-4e83-b62d-dda123456789\",\n    \"device_id\": \"PAX_A910__SMARTPOS1234567890123\",\n    \"amount\": 600,\n    \"payment\": {\n        \"id\": \"11123456789\"\n    },\n    \"additional_info\": {\n        \"external_reference\": \"4561ads-das4das4-das4754-das456\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Payment Methods Configuration by Country\nDESCRIPTION: YAML configuration defining available payment methods for different countries.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/shopify/landing.en.md#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\navailable_payments: credit, debit, mercadopago, boleto, pix, moneda\n```\n\n----------------------------------------\n\nTITLE: Setting Notification URL with MercadoPago API using CURL\nDESCRIPTION: Send a payment request using CURL to set a notification URL on MercadoPago. Requires setting authorization with a bearer token. Inputs: payment details in JSON format. Outputs: response from MercadoPago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.en.md#2025-04-18_snippet_16\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\n   -H 'accept: application/json' \\n   -H 'content-type: application/json' \\n   -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\n   'https://api.mercadopago.com/v1/payments' \\n   -d '{\\n         \"transaction_amount\": 100,\\n         \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\\n         \"description\": \"Blue shirt\",\\n         \"installments\": 1,\\n         \"payment_method_id\": \"visa\",\\n         \"issuer_id\": 310,\\n         \"notification_url\": \"http://requestbin.fullcontact.com/1ogudgk1\",\\n         \"payer\": {\\n           \"email\": \"test@test.com\"\\n\\n\\n         }\\n   }'\\n\\n\n```\n\n----------------------------------------\n\nTITLE: Webhook Notification Response Example in JSON\nDESCRIPTION: Example of a webhook notification payload sent by Mercado Pago to the configured endpoint when a payment event occurs. Shows the structure of the notification including action type, API version, payment data, timestamps, and user information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.es.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"payment.updated\",\n  \"api_version\": \"v1\",\n  \"data\": {\n    \"id\": \"123456\"\n  },\n  \"date_created\": \"2021-11-01T02:02:02Z\",\n  \"id\": \"123456\",\n  \"live_mode\": false,\n  \"type\": \"payment\",\n  \"user_id\": 724484980\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Webhook Configuration Types\nDESCRIPTION: Table describing two different methods for configuring webhooks: through Your integrations panel and during payment creation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Configuration type | Description |\n|---|---|\n| [Configuration through Your integrations](/developers/en/docs/your-integrations/notifications/webhooks#bookmark_configuration_through_your_integrations) | Allows configuring notifications for each one of your applications, identifying different accounts if necessary, and validating the notification origin using the secret signature ----[mla, mlb, mlu, mlc]----(except notifications for QR Code integrations)------------. |\n| [Configuration during payment creation](/developers/en/docs/your-integrations/notifications/webhooks#bookmark_configuration_during_payment_creation) | Allows specific configuration of notifications for each payment, preference or order ----[mlb, mla, mlm]----This configuration is not allowed for Mercado Pago Point------------. |\n```\n\n----------------------------------------\n\nTITLE: Updating Document Type Options with JavaScript\nDESCRIPTION: This JavaScript function adjusts the available document types in a select element based on the person type selected by the user. It handles both 'natural' and 'juridica' types and dynamically updates the options accordingly.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pse-avanza.en.md#2025-04-18_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\ndocument.getElementById('form-checkout__personType').addEventListener('change', e => {\n\tconst personTypesElement = document.getElementById('form-checkout__personType');\n\tupdateSelectOptions(personTypesElement.value);\n});\n\nfunction updateSelectOptions(selectedValue) {\n\n\tconst naturalDocTypes = [\n\t\tnew Option('C.C', 'CC'),\n\t\tnew Option('C.E.', 'CE'),\n\t\tnew Option('Pasaporte', 'PAS'),\n\t\tnew Option('Tarjeta de Extranjería', 'TE'),\n\t\tnew Option('Tarjeta de Identidad ', 'TI'),\n\t\tnew Option('Registro Civil', 'RC'),\n\t\tnew Option('Documento de Identificación', 'DI')\n\t];\n\tconst juridicaDocTypes = [\n\t\tnew Option('NIT', 'NIT')\n\t];\n\tconst idDocTypes = document.getElementById('form-checkout__identificationType');\n\n\tif (selectedValue === 'natural') {\n\t\tidDocTypes.options.length = 0;\n\t\tnaturalDocTypes.forEach(item => idDocTypes.options.add(item, undefined));\n\t} else {\n\t\tidDocTypes.options.length = 0;\n\t\tjuridicaDocTypes.forEach(item => idDocTypes.options.add(item, undefined));\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Mercado Pago SDK with Pip\nDESCRIPTION: This code snippet shows how to install the Mercado Pago SDK for Python using Pip. Pip is the package installer for Python. The command `pip3 install mercadopago` installs the Mercado Pago SDK for use in your Python projects.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-development-environment.es.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"pip3 install mercadopago\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Settlement Report Generation with Java\nDESCRIPTION: Java implementation for disabling automatic settlement report generation using HttpsURLConnection. The code configures a DELETE request with the necessary headers for authentication and content type.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.en.md#2025-04-18_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report/schedule\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"DELETE\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\n----------------------------------------\n\nTITLE: Searching Preferences with MercadoPago Node.js SDK\nDESCRIPTION: Initializes the MercadoPago client and searches for preferences using various filter options including sponsor_id, external_reference, site_id, and marketplace parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/preferences.en.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token', options: { timeout: 5000 } });\n\nconst preference = new Preference(client);\n\npreference.search({ options: {\n  sponsor_id: '0',\n  external_reference: '',\n  site_id: 'MLA',\n  marketplace: 'NONE'\n},\n}).then((result) => console.log(result))\n  .catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Preference ID Response Example\nDESCRIPTION: Example showing the format of a preference identifier returned in the API response after creating a payment preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-preferences.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"id\": \"787997534-6dad21a1-6145-4f0d-ac21-66bf7a5e7a58\"\n```\n\n----------------------------------------\n\nTITLE: Inicializando o SDK com Public Key via Script HTML\nDESCRIPTION: Configura o SDK do Mercado Pago com a Public Key da conta para identificação durante a conexão com a API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/mp-js-v2.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  const mp = new MercadoPago(\"YOUR_PUBLIC_KEY\");\n</script>\n```\n\n----------------------------------------\n\nTITLE: Android Device SDK Implementation\nDESCRIPTION: Java code for implementing the Mercado Pago Devices SDK in Android applications, including dependency configuration and initialization.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.en.md#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport com.mercadolibre.android.device.sdk.DeviceSDK;\n\n\nDeviceSDK.getInstance().execute(this);\n```\n\n----------------------------------------\n\nTITLE: Get document types based on person type\nDESCRIPTION: This JavaScript code retrieves the selected person type (natural or juridica) from a dropdown and updates the document type select element with the appropriate options. It dynamically populates the document type dropdown based on whether the selected person is an individual or a company.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-migrate-pse.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ndocument.getElementById('form-checkout__personType').addEventListener('change', e => {\n\tconst personTypesElement = document.getElementById('form-checkout__personType');\n\tupdateSelectOptions(personTypesElement.value);\n});\n\nfunction updateSelectOptions(selectedValue) {\n\n\tconst naturalDocTypes = [\n\t\tnew Option('C.C', 'CC'),\n\t\tnew Option('C.E.', 'CE'),\n\t\tnew Option('Pasaporte', 'PAS'),\n\t\tnew Option('Tarjeta de Extranjería', 'TE'),\n\t\tnew Option('Tarjeta de Identidad ', 'TI'),\n\t\tnew Option('Registro Civil', 'RC'),\n\t\tnew Option('Documento de Identificación', 'DI')\n\t];\n\tconst juridicaDocTypes = [\n\t\tnew Option('NIT', 'NIT')\n\t];\n\tconst idDocTypes = document.getElementById('form-checkout__identificationType');\n\n\tif (selectedValue === 'natural') {\n\t\tidDocTypes.options.length = 0;\n\t\tnaturalDocTypes.forEach(item => idDocTypes.options.add(item, undefined));\n\t} else {\n\t\tidDocTypes.options.length = 0;\n\t\tjuridicaDocTypes.forEach(item => idDocTypes.options.add(item, undefined));\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Create Mercado Pago Payment with Boleto in Java\nDESCRIPTION: This code snippet demonstrates how to create a payment using the Mercado Pago SDK in Java. It uses the `PaymentClient` to create a payment request with details such as transaction amount, description, payment method (bolbradesco), expiration date, and payer information including identification details.  The `client.create` method sends the payment creation request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nPaymentClient client = new PaymentClient();\nPaymentCreateRequest paymentCreateRequest =\n   PaymentCreateRequest.builder()\n       .transactionAmount(new BigDecimal(\"100\"))\n       .description(\"Título del producto\")\n       .paymentMethodId(\"bolbradesco\")\n       .dateOfExpiration(OffsetDateTime.of(2023, 1, 10, 10, 10, 10, 0, ZoneOffset.UTC))\n       .payer(\n           PaymentPayerRequest.builder()\n               .email(\"test@test.com\")\n               .firstName(\"Test\")\n               .lastName(\"User\")\n               .identification(\n                   IdentificationRequest.builder().type(\"CPF\").number(\"19119119100\").build())\n               .build())\n       .build();\nclient.create(paymentCreateRequest);\n\n```\n\n----------------------------------------\n\nTITLE: Checkout Configuration YAML for Other Countries\nDESCRIPTION: YAML configuration block defining the Checkout API section for other supported countries (MLA, MLM, MLU, MCO, MLC, MPE) with title, message, and media components.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/landing.en.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncontent_section_with_media:\n - title: Checkout API\n - message: Mercado Pago's Checkout API allows the entire checkout process, from filling in user data to making the payment, to take place in a single environment, without the need to redirect to a page outside your store.\n - media_image: /landings-docs/media-image-landing.png\n```\n\n----------------------------------------\n\nTITLE: Collector Not Whitelisted Response\nDESCRIPTION: This JSON response is returned when the collector is not found in the Whitelist. It indicates that the request is forbidden.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/api-responses-test.en.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"message\": \"Forbidden\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Rejection Reasons Table in Markdown\nDESCRIPTION: A markdown table detailing various rejection reasons for payments, including account errors, insufficient funds, exceeded limits, and settlement failures, along with suggested messages for each scenario.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/advanced-openFinance.pt.md#2025-04-18_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| Status                     | Cenário                                                                                       | Mensagem sugerida                                                                                                                         |\n|----------------------------|-----------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n|   REJECTED_ACCOUNT_ERROR   | Cenários em que há algum tipo de erro na conta do usuário.                                    | Não foi possível realizar a transação devido a um problema na sua conta. Entre em contato com o seu banco e tente novamente.              |\n|     INSUFFICIENT_AMOUNT    |        Cenários em que usuário pagador não tem saldo em conta para efetuar o pagamento.       | Saldo insuficiente na conta que você escolheu. Escolha outra conta e tente novamente.                                                     |\n|    REJECTED_CAP_EXCEEDED   |                   Cenários em que o limite de valores do Pix é ultrapassado.                  | Esse valor excede o seu limite diário de Pix. Volte para a {{instituição detentora}} e escolha um valor menor, ou tente novamente amanhã. |\n| REJECTED_SETTLEMENT_FAILED | Cenários onde o cliente não autorizou o pagamento e/ou teve algum erro durante a autorização. | No momento, não é possível realizar essa transação. Pedimos desculpas por isso. Tente novamente mais tarde.                               |\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Item Preference in Node.js\nDESCRIPTION: This Node.js code shows how to create a preference with multiple items using MercadoPago's SDK. It sets up a preference object with two items, each having different quantities and prices, and then creates a payment button.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_13\n\nLANGUAGE: node\nCODE:\n```\n// Configura tu preferencia\nvar preference = {\n  items: [\n      { title: 'Mi producto',\n      quantity: 1,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 75.56 },\n\t{ title: 'Mi producto 2',\n      quantity: 2,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 96.56 }\n    ]\n};\n// Crea un botón de pago en tu sitio\nmercadopago.preferences.create(preference)\n.then(function(preference){\n  // Este valor reemplazará el string \"$$init_point$$\" en tu HTML\n  global.init_point = preference.body.init_point;\n}).catch(function(error){\n  console.log(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Java\nDESCRIPTION: This Java snippet shows how to create a payment using the Mercado Pago Java SDK. It sets the access token, creates a PaymentClient and a PaymentCreateRequest with necessary parameters (token, payment method, payer info, description, transaction amount).  It also includes the 'X-Card-Validation' header via `MPRequestOptions`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/integration.es.md#2025-04-18_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nMap<String, String> customHeaders = new HashMap<>();\ncustomHeaders.put(\"X-Card-Validation\", \"card_validation\");\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest paymentCreateRequest =\n   PaymentCreateRequest.builder()\n       .transactionAmount(request.getTransactionAmount())\n       .token(request.getToken())\n       .description(request.getDescription())\n       .paymentMethodId(request.getPaymentMethodId())\n       .payer(\n           PaymentPayerRequest.builder()\n               .email(request.getPayer().getEmail())\n               .type(request.getPayer().getType())\n               .build())\n       .build();\n\nclient.create(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Configuring CLIENT_ID Metadata in AndroidManifest.xml\nDESCRIPTION: Sets up the CLIENT_ID metadata in the AndroidManifest.xml file to identify integrator transactions using the assigned Client ID credential.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/first-steps.es.md#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<application\n    ...>\n\n    <meta-data\n\n        android:name=\"com.mercadolibre.android.sdk.CLIENT_ID\"\n        android:value=\"123456789L\" />\n\n    <!-- Otras configuraciones de la aplicación -->\n</application>\n```\n\n----------------------------------------\n\nTITLE: Configuring Launcher Activity in AndroidManifest.xml\nDESCRIPTION: Define the main activity as the launcher for the application in AndroidManifest.xml by adding specific intent filters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/first-steps.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter>\n\n   ...\n\n   <category android:name=\"android.intent.category.LAUNCHER\" />\n\n   <category android:name=\"android.intent.category.HOME\" />\n\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Payment Intent Response for Argentina (MLA)\nDESCRIPTION: This JSON response shows the structure of the data returned when creating a payment intent for Argentina. It includes the payment intent ID, device ID, amount, and additional information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/payment-processing.en.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n \"id\": \"7d8c70b6-2ac8-4c57-a441-c319088ca3ca\",\n \"device_id\": \"INGENICO_MOVE2500__ING-ARG-14886780\",\n \"amount\": 1500,\n \"additional_info\": {\n     \"external_reference\": \"4561ads-das4das4-das4754-das456\",\n     \"print_on_terminal\": true,\n     \"ticket_number\": \"S0392JED\"\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Java\nDESCRIPTION: This Java snippet creates a preference object using the Mercado Pago SDK.  It constructs a `PreferenceRequest` with a list of `PreferenceItemRequest` objects.  The `purpose` is set to `wallet_purchase`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.pt.md#2025-04-18_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n// Cria um objeto de preferência\nPreferenceClient client = new PreferenceClient();\n \n// Cria um item na preferência\nList<PreferenceItemRequest> items = new ArrayList<>();\nPreferenceItemRequest item =\n   PreferenceItemRequest.builder()\n       .title(\"Meu produto\")\n       .quantity(1)\n       .unitPrice(new BigDecimal(\"100\"))\n       .build();\nitems.add(item);\n \nPreferenceRequest request = PreferenceRequest.builder()\n  // o .purpose('wallet_purchase') permite apenas pagamentos logados\n  // para permitir pagamentos como guest, você pode omitir essa linha\n  .purpose('wallet_purchase')\n  .items(items).build();\n \nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Hyperlink Formatting in Markdown for Mercado Pago Terms\nDESCRIPTION: Markdown formatted hyperlinks to various Mercado Pago terms and conditions documents, including QR Code, Gateway, and Point service terms.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/legal/terms-and-conditions.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [Mercado Pago Terms and Conditions](https://www.mercadopago.com.mx/ayuda/_299)\n* [QR Code Usage Terms and Conditions](https://www.mercadopago.com.mx/ayuda/_4269)\n* [Mercado Pago Gateway Terms and Conditions](https://www.mercadopago.com.mx/ayuda/_3529)\n* [Mercado Pago Point Terms and Conditions](https://www.mercadopago.com.mx/ayuda/_1772)\n```\n\n----------------------------------------\n\nTITLE: Installing APK on MacOS\nDESCRIPTION: Command to install an Android application package (APK) using ADB on MacOS.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/how-to-install-android-macos-windows.en.md#2025-04-18_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\nadb install prueba.apk\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Types in Info.plist for iOS Deep Links\nDESCRIPTION: This snippet shows the XML configuration that should be added to the Info.plist file to define URL schemes for Deep Links in an iOS application. It registers URL schemes that the app will respond to when invoked externally.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-cli.en.md#2025-04-18_snippet_7\n\nLANGUAGE: info.plist\nCODE:\n```\n<key>CFBundleURLTypes</key>\n    <array>\n        <dict> <key>CFBundleURLSchemes\n            </key>\n            <array>\n                <string>myapp</string>\n                <string>com.test.TestExpoBrowser</string>\n            </array>\n        </dict> \n    </array>\n```\n\n----------------------------------------\n\nTITLE: Configuring Client ID in AndroidManifest.xml\nDESCRIPTION: Add metadata to AndroidManifest.xml to configure the Client ID. This is crucial for identifying transactions from integrators.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/first-steps.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<application\n    ...>\n\n    <meta-data\n        android:name=\"com.mercadolibre.android.sdk.CLIENT_ID\"\n        android:value=\"123456789L\" />\n\n    <!-- Outras configurações da aplicação -->\n</application>\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Item Preference with cURL\nDESCRIPTION: This cURL command demonstrates how to create a preference with multiple items by making a POST request to MercadoPago's API. It includes the necessary headers and a JSON payload with two items, each having different quantities and prices.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_18\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n  'https://api.mercadopago.com/checkout/preferences' \\\n  -H 'Content-Type: application/json' \\\n  -H 'cache-control: no-cache' \\\n  -H 'Authorization: Bearer PROD_ACCESS_TOKEN' \\\n  -d '{\n\t\"items\": [\n\t{\n\t\t\"id_product\":1,\n\t\t\"quantity\":1,\n\t\t\"unit_price\": 234.33,\n\t\t\"titulo\":\"Mi producto\"\n\t},\n\t{\n\t\t\"id_product\":2,\n\t\t\"quantity\":2,\n\t\t\"unit_price\": 255.33,\n\t\t\"titulo\":\"Mi producto 2\"\n\t}\n]\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Payroll Payment\nDESCRIPTION: API request example for creating a payroll payment with concept_id.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/money-transfer.en.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n$ curl https://api.mercadopago.com/v1/payments \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Cache-Control: no-cache' \\\n  -H 'Authorization: Bearer ACCESS_TOKEN' \\\n  -d '\n  {\n\t\"transaction_amount\": 100,\n\t\"operation_type\": \"money_transfer\",\n\t\"concept_id\": \"payroll\",\n\t\"description\": \"Title of what you are paying for\",\n\t\"installments\": 1,\n\t\"marketplace\": \"NONE\",\n\t\"payment_method_id\": \"account_money\",\n\t\"collector\": {\n\t\t\"id\": \"399606359\"\n\t},\n\t\"external_reference\": \"Reference_1234\",\n\t\"notification_url\": \"https://www.your-site.com/webhooks\",\n}'\n```\n\n----------------------------------------\n\nTITLE: Responding to Mercado Pago Webhook Notifications\nDESCRIPTION: Mercado Pago expects an HTTP STATUS 200 (OK) or 201 (CREATED) response within 22 seconds of sending a notification. Without confirmation, the system will retry sending every 15 minutes for three attempts before extending the interval.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.en.md#2025-04-18_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n## Necessary actions after receiving a notification\n\nWhen you receive a notification on your platform, Mercado Pago expects a response to validate that you received it correctly. To do this, you need to return an `HTTP STATUS 200 (OK)` or `201 (CREATED)` status.\n\nThe **waiting time** for confirmation of receipt of notifications is **22 seconds**. If this confirmation is not sent, the system will understand that the notification was not received and will **retry sending every 15 minutes** until a response is received. After the third attempt, the interval will be extended, but the attempts will continue.\n```\n\n----------------------------------------\n\nTITLE: Initializing Ticket Payment Form with Basic Payer Data in Javascript for Mexico\nDESCRIPTION: Configuration to pre-populate basic payer fields for ticket payments in Mexico. Includes first name, last name, and email address.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/initialize-data-on-the-bricks.en.md#2025-04-18_snippet_8\n\nLANGUAGE: Javascript\nCODE:\n```\nsettings = {\n  ...,\n  initialization: {\n    ...,\n    payer: {\n      email: '<PAYER_EMAIL_HERE>',\n      firstName: '<PAYER_FIRST_NAME_HERE>',\n      lastName: '<PAYER_LAST_NAME_HERE>',\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Scheduled Report Generation Node\nDESCRIPTION: Node.js code utilizing the Request module to delete an existing report schedule from the MercadoPago service. It sets the necessary headers and processes the response with a callback.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_20\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report/schedule',\n    method: 'DELETE',\n    headers: headers\n};\n\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\n\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Notifier by ID using cURL\nDESCRIPTION: This cURL command retrieves a specific notifier by its ID. It requires an authorization token in the request header and the notifier_id as a path parameter.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/queries-and-validations.en.md#2025-04-18_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request GET 'https://api.mercadopago.com/v1/reports/notifiers/:notifier:id' \\\n--header 'Authorization: Bearer {{TOKEN}}'\n```\n\n----------------------------------------\n\nTITLE: Capturando Información del Dispositivo en Swift\nDESCRIPTION: Métodos disponibles en Swift para obtener la información del dispositivo en diferentes formatos: objeto Device, JSON, string o diccionario.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.es.md#2025-04-18_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nMercadoPagoDevicesSDK.shared.getInfo() // devuelve un objeto Device que es Codable\nMercadoPagoDevicesSDK.shared.getInfoAsJson() // devuelve un objeto Data de la librería de JSON\nMercadoPagoDevicesSDK.shared.getInfoAsJsonString() // devuelve el json en formato de String\nMercadoPagoDevicesSDK.shared.getInfoAsDictionary() // devuelve un Dictionary<String,Any>\n```\n\n----------------------------------------\n\nTITLE: Scheduling Report Generation Curl\nDESCRIPTION: This snippet demonstrates how to schedule automatic settlement report generation using a POST request via Curl. It requires authorization with a Bearer token and expects an HTTP STATUS 200 response when successful.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_11\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/schedule'\n```\n\n----------------------------------------\n\nTITLE: Creating a Subscription Plan via API Request\nDESCRIPTION: This curl command creates a subscription plan using the Mercado Pago API. It defines the billing frequency, amount, and other relevant details for subscriptions associated with this plan.  The `preapproval_plan_id` obtained from the response is required to create a subscription.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/subscriptions-associated-plan.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n\n      'https://api.mercadopago.com/preapproval_plan' \\\n      -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n      -H 'Content-Type: application/json' \\ \n      -d '{\n  \"reason\": \"Yoga classes\",\n  \"auto_recurring\": {\n    \"frequency\": 1,\n    \"frequency_type\": \"months\",\n    \"repetitions\": 12,\n    \"billing_day\": 10,\n    \"billing_day_proportional\": true,\n    \"free_trial\": {\n      \"frequency\": 1,\n      \"frequency_type\": \"months\"\n    },\n    \"transaction_amount\": 10,\n    \"currency_id\": \"ARS\"\n  },\n  \"payment_methods_allowed\": {\n    \"payment_types\": [\n      {}\n    ],\n    \"payment_methods\": [\n      {}\n    ]\n  },\n  \"back_url\": \"https://www.yoursite.com\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago Checkout Bricks in Java\nDESCRIPTION: This Java code creates a payment using the Mercado Pago API with Checkout Bricks. It leverages the PaymentClient and PaymentCreateRequest to define payment parameters such as transaction amount, token, installments, payment method ID, and payer information. This example highlights the use of builder patterns for constructing the request object.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-serverside.es.md#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest paymentCreateRequest =\n  PaymentCreateRequest.builder()\n      .transactionAmount(request.getTransactionAmount())\n      .token(request.getToken())\n      .installments(request.getInstallments())\n      .paymentMethodId(request.getPaymentMethodId())\n      .payer(\n          PaymentPayerRequest.builder()\n              .email(request.getPayer().getEmail())\n              .identification(\n                  IdentificationRequest.builder()\n                      .type(request.getPayer().getIdentification().getType())\n                      .number(request.getPayer().getIdentification().getNumber())\n                      .build())\n              .build())\n      .build();\n\nclient.create(paymentCreateRequest);\n\n```\n\n----------------------------------------\n\nTITLE: Installing Required Plugins for Redelcom Integration in Ionic\nDESCRIPTION: Instructions for installing the AppVersion and WebIntent plugins necessary for communication with the RDCPass system.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/cross-platform-ionic.es.md#2025-04-18_snippet_0\n\nLANGUAGE: ionic\nCODE:\n```\nAppVersion => (https://ionicframework.com/docs/native/app-version) \n\nWebIntent => (https://ionicframework.com/docs/native/web-intent)\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago SDK in PHP\nDESCRIPTION: This code snippet demonstrates how to create a payment using the Mercado Pago SDK in PHP. It sets up the payment client, configures request options with an idempotency key, and sends the payment data to the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/payment-submission.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\Client\\Common\\RequestOptions;\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['<TRANSACTION_AMOUNT>'],\n    \"token\" => $_POST['<TOKEN>'],\n    \"description\" => $_POST['<DESCRIPTION>'],\n    \"installments\" => $_POST['<INSTALLMENTS>'],\n    \"payment_method_id\" => $_POST['<PAYMENT_METHOD_ID'],\n    \"issuer_id\" => $_POST['<ISSUER>'],\n    \"payer\" => [\n      \"email\" => $_POST['<EMAIL>'],\n      \"identification\" => [\n        \"type\" => $_POST['<IDENTIFICATION_TYPE'],\n        \"number\" => $_POST['<NUMBER>']\n      ]\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Defining future product availability for a specific country (MLM)\nDESCRIPTION: This snippet defines the future availability of Checkout Bricks products for Mexico (MLM). It includes information such as the title, description, and card details for each available brick.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/landing.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\n------------\n----[mlm]----\n\n---\nfuture_product_avaible: \n - title: Bricks\n - description: Conheça todos os módulos do Checkout Bricks e as suas disponibilidades.\n - card_avaible: true\n - card_icon: Pay\n - card_title: Payment Brick\n - card_description: Ofereça diversos métodos de pagamento para os clientes escolherem, com a capacidade de salvar dados do cartão para compras futuras. Teste a demonstração do Brick antes de integrá-lo.\n - card_button: /developers/pt/docs/checkout-bricks/payment-brick/introduction\n - card_buttonDescription: Saiba mais\n - card_pillText: DISPONÍVEL\n - card_linkAvailable: true\n - card_linkProof: /developers/pt/live-demo/payment-brick\n - card_linkProofDescription: Acessar demonstração\n - card_avaible: true\n - card_icon: Wallet\n - card_title: Wallet Brick\n - card_description: Vincule a conta Mercado Pago e permita pagamentos registrados. Teste a demonstração do Brick antes de integrá-lo.\n - card_button: /developers/pt/docs/checkout-bricks/wallet-brick/introduction\n - card_buttonDescription: Saiba mais\n - card_pillText: DISPONÍVEL\n - card_linkAvailable: true\n - card_linkProof: /developers/pt/live-demo/wallet-brick\n - card_linkProofDescription: Acessar demonstração\n - card_avaible: true\n - card_icon: Loading\n - card_title: Status Screen Brick\n - card_description: Informe os clientes dos resultados do processo de compra após efetuar o pagamento. Teste a demonstração do Brick antes de integrá-lo.\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Item Details for MercadoPago\nDESCRIPTION: Examples demonstrating how to set up item information including ID, title, quantity, currency and unit price. This data structure is required when creating a payment preference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.pt.md#2025-04-18_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $item = new MercadoPago\\Item();\n  $item->id = \"1234\";\n  $item->title = \"Heavy Duty Plastic Table\";\n  $item->quantity = 7;\n  $item->currency_id = \"[FAKER][CURRENCY][ACRONYM]\";\n  $item->unit_price = 75.56;\n  // ...\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\n// ...\nitems: [\n    {\n      id: '1234',\n      title: 'Lightweight Paper Table',\n      quantity: 3,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 55.41\n    }\n  ]// ...\n```\n\n----------------------------------------\n\nTITLE: Extracting Signature from Header for HMAC Validation - PHP\nDESCRIPTION: This PHP snippet demonstrates how to extract the x-signature and x-request-id from notification headers, parse the x-signature to retrieve the timestamp and hash, and validate these against a generated HMAC using the provided secret key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Obtain the x-signature value from the header\n$xSignature = $_SERVER['HTTP_X_SIGNATURE'];\n$xRequestId = $_SERVER['HTTP_X_REQUEST_ID'];\n\n// Obtain Query params related to the request URL\n$queryParams = $_GET;\n\n// Extract the \"data.id\" from the query params\ndataID = isset($queryParams['data.id']) ? $queryParams['data.id'] : ''; // Separating the x-signature into parts\n$parts = explode(',', $xSignature);\n\n// Initializing variables to store ts and hash\n$ts = null;\n$hash = null;\n\n// Iterate over the values to obtain ts and v1\nforeach ($parts as $part) {\n    // Split each part into key and value\n    $keyValue = explode('=', $part, 2);\n    if (count($keyValue) == 2) {\n        $key = trim($keyValue[0]);\n        $value = trim($keyValue[1]);\n        if ($key === \"ts\") {\n            $ts = $value;\n        } elseif ($key === \"v1\") {\n            $hash = $value;\n        }\n    }\n}\n\n// Obtain the secret key for the user/application from Mercadopago developers site\n$secret = \"your_secret_key_here\";\n\n// Generate the manifest string\n$manifest = \"id:$dataID;request-id:$xRequestId;ts:$ts;\";\n\n// Create an HMAC signature defining the hash type and the key as a byte array\n$sha = hash_hmac('sha256', $manifest, $secret);\nif ($sha === $hash) {\n    // HMAC verification passed\n    echo \"HMAC verification passed\";\n} else {\n    // HMAC verification failed\n    echo \"HMAC verification failed\";\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Mercado Pago Preference in C#\nDESCRIPTION: This C# code snippet demonstrates how to create a Mercado Pago preference with a single item and sets the `Purpose` to `wallet_purchase`, restricting payments to registered users. It creates a `PreferenceRequest` object with item details and the `wallet_purchase` purpose, then sends the request to Mercado Pago using the `PreferenceClient`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-onsubmit.es.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n\"// Crear el objeto de solicitud de preferencia\\nvar request = new PreferenceRequest\\n{\\n  // el Purpose = 'wallet_purchase', solo permite pagos registrados\\n  // para permitir pagos de invitados, puedes omitir esta propiedad\\n    Purpose = \\\"wallet_purchase\\\",\\n    Items = new List<PreferenceItemRequest>\\n    {\\n        new PreferenceItemRequest\\n        {\\n            Title = \\\"Mi producto\\\",\\n            Quantity = 1,\\n            CurrencyId = \\\"BRL\\\",\\n            UnitPrice = 75.56,\\n        },\\n    },\\n};\\n \\n// Crea la preferencia usando el cliente\\nvar client = new PreferenceClient();\\nPreference preference = await client.CreateAsync(request);\"\n```\n\n----------------------------------------\n\nTITLE: Get number of installments V1\nDESCRIPTION: Shows how to get the number of installments when using SDK V1. It shows the function call and the callback function.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.en.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.Mercadopago.getInstallments({\n       \"payment_method_id\": paymentMethodId,\n       \"amount\": parseFloat(transactionAmount),\n       \"issuer_id\": parseInt(issuerId)\n   }, callbackFn\n);\n\nfunction callBackFn(status, response) {\n   if (status == 200) {\n      response[0].payer_costs.forEach( payerCost => {\n        ...\n       });\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Android Deep Link Configuration in app.json\nDESCRIPTION: Configuration for handling deep links in Android through app.json file.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-expo-go.en.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n\"expo\": {\n\"android\": { \"intentFilters\": [\n{\n\"action\": \"VIEW\", \"data\": [\n{\n\"scheme\": \"myapp\", \"host\": \"checkout\", \"pathPrefix\": \"/congrats\"\n} ],\n\"category\": [\"BROWSABLE\", \"DEFAULT\"]\n} ]\n} }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to Cybersecurity Incident Notification Form in Markdown\nDESCRIPTION: This code snippet provides a hyperlink to a Google Form for developers to notify Mercado Pago of cybersecurity incidents. It uses Markdown syntax to create the link.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/legal/terms-and-conditions.en.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[this form](https://docs.google.com/forms/d/e/1FAIpQLSeHWBN3reOqGm7H_ZqYtlLQBP9drp_KlekNH-4PAilGXru70g/viewform?usp=sf_link)\n```\n\n----------------------------------------\n\nTITLE: Brazil Payment Methods Banner Implementation\nDESCRIPTION: HTML code for displaying Mercado Pago payment method banners for Brazil (MLB) in various dimensions including 735x40, 575x40, 468x60, 125x125, 120x240, and 120x600 pixels.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/all.en.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/tipo2_735X40.jpg?v=1\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"735\" height=\"40\"/>\n```\n\n----------------------------------------\n\nTITLE: Error Report for Failed Debt Creation in CSV (Mercado Pago)\nDESCRIPTION: This CSV snippet demonstrates the format of an error report file returned by Mercado Pago when debt creation fails. It includes the line number, reference, and a description of the error encountered.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/format-specifications.en.md#2025-04-18_snippet_7\n\nLANGUAGE: csv\nCODE:\n```\n4,ext2024030615504,E008:Due last date must be after today\n```\n\n----------------------------------------\n\nTITLE: Handling RDCPass Payment Query Response in Android\nDESCRIPTION: Java code for receiving and processing the response from RDCPass payment query. Extracts payload and transaction ID from the received intent.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-payment-query.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\ntry{ \n\tIntent intent = getIntent(); \n\tString action = intent.getAction(); \n\tString payload = new JSONObject(intent.getStringExtra(\"payload\")); \n\tString userTransactionId= new JSONObject(intent.getStringExtra(\"userTransactionId\")); \n\tif (Intent.ACTION_ANSWER.equals(action)) { \n\t\t// Define what to do with the received data \"payload\" \n\t} \n} catch (Exception e) { \n\te.printStackTrace(); \n} \n```\n\n----------------------------------------\n\nTITLE: Setting Access Token for Ruby Integration\nDESCRIPTION: This Ruby snippet initializes the Mercado Pago SDK with the access token and retrieves the available payment methods from the SDK. Requires the 'mercadopago' gem.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\npayment_methods_response = sdk.payment_methods.get()\npayment_methods = payment_methods_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Response for Scheduling Automatic Reports (JSON)\nDESCRIPTION: This JSON response shows the result of scheduling an automatic report. It includes the event ID, type, frequency data, description, structure ID, status, and user ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.en.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": {{event_id}},\n    \"type\": \"frequency\",\n    \"data\": {\n        \"period\": \"daily\",\n        \"value\": 0,\n        \"hour\": 20,\n        \"skip_non_working_days\": false\n    },\n    \"description\": \"event test\",\n    \"structure_id\": {{structure_id}},\n    \"notifiers\": [],\n    \"status\": \"ACTIVE\",\n    \"version\": 0,\n    \"user_id\": {{user_id}}\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Generating Reports with MercadoPago API (curl)\nDESCRIPTION: This curl command shows how to manually generate an on-demand report by creating a statement. It specifies the time interval, structure ID, and notifier ID for the report generation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.en.md#2025-04-18_snippet_8\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/statements' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{TOKEN}}' \\\n--data-raw '{\n    \"user_description\": \"\",\n    \"created_by\": \"automatic\",\n    \"origin\": {\n        \"type\": \"date_range\",\n        \"data\": {\n            \"date_start\": \"2023-04-01T03:00:00Z\",\n            \"date_end\": \"2023-04-02T02:27:44Z\"\n        }\n    },\n    \"structure_id\": {{structure_id}},\n    \"notifiers_id\": [{{notifier_id}}]\n}'\n```\n\n----------------------------------------\n\nTITLE: Transaction Update Notification Structure\nDESCRIPTION: This JSON snippet shows the structure of a transaction update notification sent by Mercado Pago. It contains information about the event, transaction ID, notification ID, status, and timestamp. The `data.id` field is the ID of the transaction being notified.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"transaction_intent.updated\",\n  \"api_version\": \"v1\",\n  \"data\": {\n    \"id\": \"1108917506-01GGTH198RP0K71H133EK9BJAT\" // ID da transaction intent\n  },\n  \"date_created\": \"2022-11-01T17:19:53.915-04:00\",\n  \"id\": \"103686918006\", // ID da notificação\n  \"last_updated\": \"2022-11-01T17:19:55.001-04:00\",\n  \"status\": \"partially_processed\",\n  \"type\": \"transaction_intent\"\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Transaction Info Response (MLA)\nDESCRIPTION: This JSON snippet shows a sample response from the Mercado Pago API when querying transaction information in Argentina (MLA). It includes details such as creation date, external reference, ID, status, and transaction specifics.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_date\": \"2024-11-13T15:04:25.699+00:00\",\n  \"external_reference\": \"external_ref_1234\",\n  \"id\": \"22dvqmseu9m\",\n  \"last_updated_date\": \"2024-11-13T15:04:31.256+00:00\",\n  \"point_of_interaction\": {\n    \"type\": \"PSP_TRANSFER\"\n  },\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://example.ar/notification\"\n    }\n  },\n  \"status\": \"processed\",\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": 25,\n          \"status_details\": []\n        }\n      ]\n    },\n    \"paid_amount\": 25,\n    \"payer\": {\n      \"id\": 1992483656\n    },\n    \"refunded_amount\": 0,\n    \"to\": {\n      \"accounts\": [\n        {\n          \"amount\": 25,\n          \"description\": \"envio de 25\",\n          \"origin_id\": \"01JCK0VSV3TBSAADAGJQKG4GTY\",\n          \"status_details\": [\n            \"approved\"\n          ]\n        }\n      ]\n    },\n    \"total_amount\": 25,\n    \"statement_descriptor\": \"\",\n    \"binary_mode\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Payment Expiration Date in Node.js\nDESCRIPTION: This snippet shows how to define the payment expiration date in a Node.js application. The date is expected in ISO 8601 format.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_22\n\nLANGUAGE: node\nCODE:\n```\ndate_of_expiration: \"2020-05-30T23:59:59.000-04:00\",\n```\n\n----------------------------------------\n\nTITLE: Retrieving Credit Card Installments in JavaScript\nDESCRIPTION: Asynchronous function to fetch available payment installments based on card BIN number. Populates installment select options dynamically with recommended installment details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/secure-fields-core.en.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Step #getInstallments\nconst getInstallments = async (bin) => {\n    try {\n      const installmentsElement = document.getElementById('form-checkout__installments')\n      const installments = await mp.getInstallments({\n        amount: document.getElementById('transactionAmount').value,\n        bin,\n        paymentTypeId: 'credit_card'\n      });\n      createSelectOptions(installmentsElement, installments[0].payer_costs, { label: 'recommended_message', value: 'installments' })\n    } catch (e) {\n      console.error('error getting installments: ', e)\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Zero Dollar Auth Payment with cURL\nDESCRIPTION: REST API request to create a zero dollar authentication payment using cURL, demonstrating the payment creation process with required parameters\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/integration.en.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Card-Validation: card_validation' \\\n--data-raw '{\n    \"token\": \"TOKEN\",\n    \"payment_method_id\": \"master\",\n    \"payer\": {\n        \"email\": \"{{payer_email}}\",\n        \"type\" : \"guest\",\n    },\n    \"description\": \"validação de cartão com valor zero dollar master\",\n    \"transaction_amount\": 0\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Bancário Payment with MercadoPago API via cURL\nDESCRIPTION: This cURL command demonstrates how to create a Boleto Bancário payment by directly calling the MercadoPago API. It includes all necessary headers and the JSON payload with payment details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n--header 'X-Idempotency-Key: <SOME_UNIQUE_VALUE>' \\\n--header 'X-Product-Id: <SOME_UNIQUE_VALUE>' \\\n--data-raw '{\n   \"transaction_amount\": 100,\n   \"description\": \"Titulo do produto\",\n   \"payment_method_id\": \"bolbradesco\",\n   \"payer\": {\n       \"email\": \"test_user_12345@testuser.com\",\n       \"first_name\": \"Test\",\n       \"last_name\": \"User\",\n       \"identification\": {\n           \"type\": \"CPF\",\n           \"number\": \"01234567890\"\n       }\n       \"address\": {\n           \"zip_code\": \"88000000\",\n           \"street_name\": \"Nombre de calle\",\n           \"street_number\": \"123\",\n           \"neighborhood\": \"Barrio\",\n           \"city\": \"Ciudad\",\n           \"federal_unit\": \"UF\"\n       }\n   }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with MercadoPago SDK (PHP)\nDESCRIPTION: This PHP snippet creates a payment using data received via POST request and the MercadoPago SDK.  It retrieves parameters, creates payer details and saves them, returning a JSON response with status, status detail and ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.es.md#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  require_once 'vendor/autoload.php';\n  MercadoPago\\SDK::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n  $payment = new MercadoPago\\Payment();\n  $payment->transaction_amount = (float)$_POST['transactionAmount'];\n  $payment->token = $_POST['token'];\n  $payment->installments = (int)$_POST['installments'];\n  $payment->payment_method_id = $_POST['paymentMethodId'];\n  $payment->issuer_id = (int)$_POST['issuer'];\n  $payer = new MercadoPago\\Payer();\n  $payer->email = $parsed_body['payer']['email'];\n  $payer->identification = array(\n     \"type\" => $parsed_body['payer']['identification']['type'],\n     \"number\" => $parsed_body['payer']['identification']['number']\n   );\n  $payment->payer = $payer;\n  $payment->save();\n  $response = array(\n      'status' => $payment->status,\n      'status_detail' => $payment->status_detail,\n      'id' => $payment->id\n  );\n  echo json_encode($response);\n\n?>\n```\n\n----------------------------------------\n\nTITLE: Processing Payments with MercadoPago in PHP\nDESCRIPTION: This snippet demonstrates how to initialize the MercadoPago SDK, create a payment object, and save the payment transaction. The necessary payment details such as transaction amount, token, and payer info are specified. It requires the MercadoPago SDK installation via Composer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php  \n    require_once 'vendor/autoload.php';\n\n    MercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n    //...\n    $payment = new MercadoPago\\Payment();\n    $payment->transaction_amount = 100;\n    $payment->token = $token;\n    $payment->description = \"Blue shirt\";\n    $payment->installments = $installments;\n    $payment->payment_method_id = $payment_method_id;\n    $payment->issuer_id = $issuer_id;\n    $payment->payer = array(\n    \"email\" => \"john@yourdomain.com\"\n    );\n    // Guarda y postea el pago\n    $payment->save();\n    //...\n    // Imprime el estado del pago\n    echo $payment->status;\n    //...\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago Checkout Bricks in Ruby\nDESCRIPTION: This Ruby code creates a payment using the Mercado Pago API and integrates Checkout Bricks. It initializes the MercadoPago SDK, extracts payment details from the params hash (including transaction amount, token, installments, payment method ID, and payer information), and sends the request to the Mercado Pago API to create the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-serverside.es.md#2025-04-18_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\npayment_data = {\n transaction_amount: params[:transactionAmount].to_f,\n token: params[:token],\n installments: params[:installments].to_i,\n payment_method_id: params[:paymentMethodId],\n payer: {\n   email: params[:payer][:email],\n   identification: {\n     type: params[:payer][:identification][:type],\n     number: params[:payer][:identification][:number]\n   },\n }\n}\n\npayment_response = sdk.payment.create(payment_data)\npayment = payment_response[:response]\n\nputs payment\n\n```\n\n----------------------------------------\n\nTITLE: Creating payment order with credit card using Mercado Pago API in cURL\nDESCRIPTION: This cURL request creates a payment order by sending a POST request to the Mercado Pago API endpoint. It includes necessary headers for content type, idempotency key, and authorization, along with payment details in the request body.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    'https://api.mercadopago.com/v1/orders'\\\n    -H 'Content-Type: application/json' \\\n       -H 'X-Idempotency-Key: {{SOME_UNIQUE_VALUE}}' \\\n       -H 'Authorization: Bearer {{YOUR_ACCESS_TOKEN}}' \\\n    -d '{\n    \"type\": \"online\",\n    \"processing_mode\": \"automatic\",\n    \"total_amount\": \"200.00\",\n    \"external_reference\": \"ext_ref_1234\",\n    \"payer\": {\n        \"email\": \"{{EMAIL}}\"\n    },\n    \"transactions\": {\n        \"payments\": [\n            {\n                \"amount\": \"200.00\",\n                \"payment_method\": {\n                    \"id\": \"master\",\n                    \"type\": \"credit_card\",\n                    \"token\": \"1223123\",\n                    \"installments\": 1\n                }\n            }\n        ]\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Bancário Payment with MercadoPago Python SDK\nDESCRIPTION: This Python code demonstrates how to create a Boleto Bancário payment using the MercadoPago Python SDK. It initializes the SDK, sets up request options, and sends the payment data to the API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n    \"transaction_amount\": 100,\n    \"description\": \"Título del producto\",\n    \"payment_method_id\": \"bolbradesco\",\n    \"payer\": {\n        \"email\": \"PAYER_EMAIL\",\n        \"first_name\": \"Test\",\n        \"last_name\": \"User\",\n        \"identification\": {\n            \"type\": \"DNI\",\n            \"number\": \"19119119\"\n        },\n        \"address\": {\n            \"zip_code\": \"1264\",\n            \"street_name\": \"Av. Caseros\",\n            \"street_number\": \"3039\",\n            \"neighborhood\": \"Parque Patricios\",\n            \"city\": \"Buenos Aires\",\n            \"federal_unit\": \"BA\"\n        }\n    }\n}\n\npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Querying Bill Payment Response in RDCPass (JSON)\nDESCRIPTION: Example JSON response for querying bill payments in RDCPass local integration. It includes status information, authorization code, and a list of available bill payment options with their respective details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/annex-response-examples.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \n \"estatus\":\"OK\", \n \"codaut\":\"00112233445566778899aabbccddeeff\",  \"id_tx\":\"\", \n \"saldo\":-1, \n \"datos\":[ \n { \n \"rubro\":\"HIPOTECARIOS\", \n \"meta_rubro\":\"SERVICIOS FINANCIEROS\",  \"rubro_id\":12, \n \"descripcion\":\"\", \n \"nombre\":\"Compania 1 - PLAN Q\", \n \"company\":\"COMPANIA1\", \n \"datos_captura\":\"0=NUMERO DE RUT=2\",  \"id\":6151, \n \"id_tarjeta\":40 \n}, \n { \n \"rubro\":\"HIPOTECARIOS\", \n \"meta_rubro\":\"SERVICIOS FINANCIEROS\",  \"rubro_id\":12, \n \"descripcion\":\"\", \n \"nombre\":\"Leasing en Compania 12\",  \"company\":\"COMPANIA12\", \n \"datos_captura\":\"0=NUMERO DE RUT=2\",  \"id\":6152, \n \"id_tarjeta\":40 \n }, \n... \n ], \n \"mensaje\":\"Carga de Cuentas Recaudaciones  Exitosa\" \n}\n```\n\n----------------------------------------\n\nTITLE: Creating 3DS Payment with Optional Authentication\nDESCRIPTION: Code examples for creating a payment with 3DS authentication set to optional mode. Includes handling transaction amount, token, payer information, and 3DS configuration across different programming languages.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-bigmerchants.en.md#2025-04-18_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\MercadoPagoConfig;\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['transactionAmount'],\n    \"token\" => $_POST['token'],\n    \"description\" => $_POST['description'],\n    \"installments\" => $_POST['installments'],\n    \"payment_method_id\" => $_POST['paymentMethodId'],\n    \"issuer_id\" => $_POST['issuer'],\n    \"payer\" => [\n      \"email\" => $_POST['email'],\n      \"identification\" => [\n        \"type\" => $_POST['identificationType'],\n        \"number\" => $_POST['number']\n      ]\n    ],\n    \"three_d_secure_mode\" => \"optional\"\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nimport { MercadoPagoConfig, Payment } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: 'YOUR_ACCESS_TOKEN' });\nconst payment = new Payment(client);\n\nconst body = {\ntransaction_amount: req.transaction_amount,\n  token: req.token,\n  description: req.description,\n  installments: req.installments,\n  payment_method_id: req.paymentMethodId,\n  issuer_id: req.issuer,\n  payer: {\n    email: req.email,\n    identification: {\n      type: req.identificationType,\n      number: req.number\n    }\n  },\n  three_d_secure_mode: 'optional' \n};\n\npayment.create({ body: body, requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' } }).then(console.log).catch(console.log);\n```\n\nLANGUAGE: java\nCODE:\n```\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest paymentCreateRequest =\n   PaymentCreateRequest.builder()\n       .transactionAmount(request.getTransactionAmount())\n       .token(request.getToken())\n       .description(request.getDescription())\n       .installments(request.getInstallments())\n       .paymentMethodId(request.getPaymentMethodId())\n       .payer(\n           PaymentPayerRequest.builder()\n               .email(request.getPayer().getEmail())\n               .firstName(request.getPayer().getFirstName())\n               .identification(\n                   IdentificationRequest.builder()\n                       .type(request.getPayer().getIdentification().getType())\n                       .number(request.getPayer().getIdentification().getNumber())\n                       .build())\n               .build())\n       .threeDSecureMode(\"optional\")\n       .build();\n\nclient.create(paymentCreateRequest);\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n \npayment_data = {\n transaction_amount: params[:transactionAmount].to_f,\n token: params[:token],\n description: params[:description],\n installments: params[:installments].to_i,\n payment_method_id: params[:paymentMethodId],\n payer: {\n   email: params[:email],\n   identification: {\n     type: params[:identificationType],\n     number: params[:identificationNumber]\n   }\n three_d_secure_mode: \"optional\",\n }\n}\n \npayment_response = sdk.payment.create(payment_data)\npayment = payment_response[:response]\n \nputs payment\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n \nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n \nvar paymentRequest = new PaymentCreateRequest\n{\n   TransactionAmount = decimal.Parse(Request[\"transactionAmount\"]),\n   Token = Request[\"token\"],\n   Description = Request[\"description\"],\n   Installments = int.Parse(Request[\"installments\"]),\n   PaymentMethodId = Request[\"paymentMethodId\"],\n   Payer = new PaymentPayerRequest\n   {\n       Email = Request[\"email\"],\n       Identification = new IdentificationRequest\n       {\n           Type = Request[\"identificationType\"],\n           Number = Request[\"identificationNumber\"],\n       },\n   },\nThreeDSecureMode = \"optional\",\n};\n \nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest);\n \nConsole.WriteLine(payment.Status);\n```\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n \npayment_data = {\n   \"transaction_amount\": float(request.POST.get(\"transaction_amount\")),\n   \"token\": request.POST.get(\"token\"),\n   \"description\": request.POST.get(\"description\"),\n   \"installments\": int(request.POST.get(\"installments\")),\n   \"payment_method_id\": request.POST.get(\"payment_method_id\"),\n   \"payer\": {\n       \"email\": request.POST.get(\"email\"),\n       \"identification\": {\n           \"type\": request.POST.get(\"type\"), \n           \"number\": request.POST.get(\"number\")\n       }\n   }\n   \"three_d_secure_mode\": \"optional\"\n}\n \npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n \nprint(payment)\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/payment\"\n)\n\nfunc processPayment(r *http.Request) {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := payment.NewClient(cfg)\n\n\trequest := payment.Request{\n\t\tTransactionAmount: r.FormValue(\"transactionAmount\"),\n\t\tToken: r.FormValue(\"token\"),\n            Description: r.FormValue(\"description\"),\n\t\tPaymentMethodID:   r.FormValue(\"paymentMethodId\"),\n\t\tPayer: &payment.PayerRequest{\n\t\t\tEmail: r.FormValue(\"email\"),\n\t\t\tIdentification: &payment.IdentificationRequest{\n\t\t\t\tType: r.FormValue(\"type\"),\n\t\t\t\tNumber: r.FormValue(\"number\"),\n\t\t\t},\n\t\t},\n\t}\n\n\tresource, err := client.Create(context.Background(), request)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n   -H 'accept: application/json' \\\n   -H 'content-type: application/json' \\\n   -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n   'https://api.mercadopago.com/v1/payments' \\\n   -d '{\n         \"transaction_amount\": 100,\n         \"token\": \"CARD_TOKEN\",\n         \"description\": \"Blue shirt\",\n         \"installments\": 1,\n         \"payment_method_id\": \"master\",\n         \"issuer_id\": 310,\n         \"payer\": {\n           \"email\": \"PAYER_EMAIL\"\n         },\n         \"three_d_secure_mode\": \"optional\"\n   }'\n```\n\n----------------------------------------\n\nTITLE: Installing Mercado Pago React SDK via npm\nDESCRIPTION: Install the Mercado Pago React SDK using npm. This allows integration of Mercado Pago features in a React application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/common-initialization.en.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-react\n```\n\n----------------------------------------\n\nTITLE: Defining Main Activity as Launcher in AndroidManifest.xml\nDESCRIPTION: Adds intent-filter to set the main activity as the launcher for the app in the AndroidManifest.xml file.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/first-steps.es.md#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter>\n\n   ...\n\n   <category android:name=\"android.intent.category.LAUNCHER\" />\n\n   <category android:name=\"android.intent.category.HOME\" />\n\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Handling Bad Request Response Due to Invalid Parameters\nDESCRIPTION: This JSON snippet represents a failed response with HTTP status code 400, indicating a bad request due to invalid or missing parameters. The error message specifies that some parameters are invalid for the search, helping clients debug issues related to request formats or missing fields.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/idempotency-returns.en.md#2025-04-18_snippet_1\n\nLANGUAGE: Json\nCODE:\n```\n{\n   \"status\": \"400\",\n   \"error\":  \"bad_request\",\n   \"message\": \"Some parameters are invalid for search.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Smart Device Information in Java\nDESCRIPTION: Shows how to use MPManager's smartInformationTools to retrieve device and integration details using Java's callback-based approach\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/get-information.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal SmartInformationTools smartInformationTools = MPManager.INSTANCE.getSmartInformationTools();\\n\\nfinal Function1<MPResponse<SmartInformation>, Unit> callback = (final MPResponse<SmartInformation> response) -> {\\n if (response.getStatus() == ResponseStatus.SUCCESS) {\\n   // Manage information on the device and integration\\n   final String deviceSerialNumber = response.getData().getSmartDevice().getSerialNumber();\\n   final String brandName = response.getData().getSmartDevice().getBrandName();\\n   final String modelName = response.getData().getSmartDevice().getModelName();\\n   final String paymentModuleVersion = response.getData().getSmartDevice().getPaymentModuleVersion();\\n\\n   final String sdkVersion = response.getData().getIntegration().getNativeSdkVersion();\\n } else {\\n   // Manage error in information request \\n }\\n return Unit.INSTANCE;\\n};\\n\\nsmartInformationTools.getInformation(callback);\n```\n\n----------------------------------------\n\nTITLE: CSV Response Format for Marketplace Seller Sales Reports\nDESCRIPTION: This example shows the expected structure of the CSV response when downloading a marketplace seller sales report. The response includes details about collectors, payments, status, fees, and amounts.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/download-report.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCOLLECTOR;COLLECTOR_NICKNAME;PAYMENT;STATUS_DESCRIPTION;STATUS_DETAIL;PURCHASE_ORDER;PAYMENT_METHOD_TYPE;TRANSACTION_AMOUNT;DATE_CREATED;DATE_APPROVED;MARKETPLACE_FEE_AMOUNT;MERCADOPAGO_FEE_AMOUNT;TOTAL_PAID_AMOUNT;NET_RECEIVED_AMOUNT\n{{report rows}}\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Bancário Payment with MercadoPago Ruby SDK\nDESCRIPTION: This Ruby code snippet illustrates how to create a Boleto Bancário payment using the MercadoPago Ruby SDK. It sets up the SDK, defines custom headers, and sends the payment request to the API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_request = {\n  transaction_amount: 100,\n  description: 'Título del producto',\n  payment_method_id: 'bolbradesco',\n  payer: {\n    email: 'PAYER_EMAIL',\n    first_name: 'Test',\n    last_name: 'User',\n    identification: {\n      type: 'DNI',\n      number: '19119119',\n    },\n    address: {\n      zip_code: '1264',\n      street_name: 'Av. Caseros',\n      street_number: '3039',\n      neighborhood: 'Parque Patricios',\n      city: 'Buenos Aires',\n      federal_unit: 'BA'\n    }\n  }\n}\n\npayment_response = sdk.payment.create(payment_request, custom_request_options)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Creating a Supplier Payment Transfer\nDESCRIPTION: API request to create a money transfer specifically for paying suppliers, using the 'supply' concept_id. This helps identify the specific purpose of the money transfer for business categorization.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/money-transfer.es.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n$ curl https://api.mercadopago.com/v1/payments \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Cache-Control: no-cache' \\\n  -H 'Authorization: Bearer ACCESS_TOKEN' \\\n  -d '\n  {\n\t\"transaction_amount\": 100,\n\t\"operation_type\": \"money_transfer\",\n\t\"concept_id\": \"supply\",\n\t\"description\": \"Title of what you are paying for\",\n\t\"installments\": 1,\n\t\"marketplace\": \"NONE\",\n\t\"payment_method_id\": \"account_money\",\n\t\"collector\": {\n\t\t\"id\": \"399606359\"\n\t},\n\t\"external_reference\": \"Reference_1234\",\n\t\"notification_url\": \"https://www.your-site.com/webhooks\",\n}'\n```\n\n----------------------------------------\n\nTITLE: Configure Brand Brick with JavaScript\nDESCRIPTION: This JavaScript code configures the Brand Brick using the `bricksBuilder.create()` method. It specifies the brick type as \"brand\" and assigns it to the HTML element with the ID \"brandBrick_container\".  The `bricksBuilder` object is assumed to be available from the common initialization steps.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/brand-brick/default-rendering.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbricksBuilder.create(\n    \"brand\",\n    \"brandBrick_container\"\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Fixing Build Tools 32.0.0 Installation\nDESCRIPTION: Shell commands to resolve the \"Build Tools revision 32.0.0 is corrupted\" error by renaming d8 files to dx files in the Android SDK directory.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/restrictions.es.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/Library/Android/sdk/build-tools/32.0.0 \\\n  && mv d8 dx \\\n  && cd lib  \\\n  && mv d8.jar dx.jar\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Preferences - PHP\nDESCRIPTION: This PHP code snippet creates a new MercadoPago preference object and configures it to exclude specific payment methods and set the maximum number of installments allowed for transactions. This setup is crucial for customizing payment options for users.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$preference = new MercadoPago\\Preference();\n// ...\n$preference->payment_methods = array(\n  \"excluded_payment_methods\" => array(\n    array(\"id\" => \"master\")\n  ),\n  \"excluded_payment_types\" => array(\n    array(\"id\" => \"ticket\")\n  ),\n  \"installments\" => 12\n);\n// ...\n?>\n```\n\n----------------------------------------\n\nTITLE: Importando MercadoPago.js en proyecto\nDESCRIPTION: Código para importar la biblioteca MercadoPago.js, necesaria para la integración de pagos con Yape. Se muestran dos opciones: importación directa vía HTML o instalación mediante NPM.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.es.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n```\n\n----------------------------------------\n\nTITLE: Get issuing bank V2\nDESCRIPTION: Demonstrates how to retrieve issuing banks in Mercado Pago SDK V2 using a promise. It takes paymentMethodId and bin as parameters and returns the issuers when the promise is resolved.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.en.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getIssuers(paymentMethodId, bin) {\n    const issuears = await mp.getIssuers({paymentMethodId, bin });\n    ...\n};\n\n```\n\n----------------------------------------\n\nTITLE: Consultando transferência PIX realizada via API do Mercado Pago usando curl\nDESCRIPTION: Requisição GET para consultar uma cobrança PIX já concluída. Requer autenticação via Bearer Token e certificados mTLS para acesso seguro à API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/pix-payments/consult-transfer.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request GET 'https://pix-api.mercadopago.com/cobv/1656013899' \\\n--header 'Authorization: Bearer TOKEN' \\\n--cert PATH_TO_mTLS --key PATH_TO_KEY\n```\n\n----------------------------------------\n\nTITLE: Eliminando un Notificador en Mercado Pago API usando cURL\nDESCRIPTION: Este comando cURL elimina un notificador específico. Requiere autenticación mediante un token de acceso y el ID del notificador a eliminar.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/deactivation.es.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request DELETE 'https://api.mercadopago.com/v1/reports/{{notifier_id}}' \\\n--header 'Authorization: Bearer {{TOKEN}}'\n```\n\n----------------------------------------\n\nTITLE: Consultando Emissores de Cartão com API do Mercado Pago em PHP\nDESCRIPTION: Este snippet demonstra como obter a lista de emissores de cartão usando a API do Mercado Pago. O código faz uma requisição GET para o endpoint /v1/payment_methods/card_issuers, passando o tipo de cartão ('visa') e o BIN ('424242') como parâmetros.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/issuers.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\trequire ('mercadopago.php');\n\t$mp = new MP ('ACCESS_TOKEN');\n\t$card_issuers = $mp->get('/v1/payment_methods/card_issuers', 'visa', '424242');\n\tprint_r ($card_issuers);\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating a Customer with MercadoPago SDK in Node.js\nDESCRIPTION: This snippet demonstrates how to update an existing customer's information using MercadoPago's SDK. It initializes the client, defines the updated customer details, and calls the update method with the customer ID and new information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/customers.es.md#2025-04-18_snippet_3\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerClient = new Customer(client);\n\nconst customerRequest = {\n\temail: 'jhon@doe.com',\n\tfirst_name: 'Jhon',\n\tlast_name: 'Doe',\n\tphone: {\n\t\tarea_code: '55',\n\t\tnumber: '991234567'\n\t},\n\tidentification: {\n\t\ttype: 'CPF',\n\t\tnumber: '12345678900'\n\t},\n\tdefault_address: 'Home',\n\taddress: {\n\t\tid: '123123',\n\t\tzip_code: '01234567',\n\t\tstreet_name: 'Rua Exemplo',\n\t\tstreet_number: '123',\n\t\tcity: {}\n\t},\n\tdate_registered: '2021-10-20T11:37:30.000-04:00',\n\tdescription: 'Description del user',\n\tdefault_card: 'None'\n};\n\ncustomerClient.update({ customerId: '247711297-jxOV430go9fx2e', body: customerRequest,\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Processing In-Person Payments with IVA Tax via MercadoPago API\nDESCRIPTION: Example of creating an in-person payment order with IVA tax information through MercadoPago's POS API. Demonstrates how to include tax information for physical point-of-sale transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/iva-colombia.en.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PUT \\\n    'https://api.mercadopago.com/instore/qr/seller/collectors/{user_id}/stores/{external_store_id}/pos/{external_pos_id}/orders' \\\n    -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n  \"external_reference\": 12345,\n  \"title\": \"Product order\",\n  \"notification_url\": \"www.yourserver.com\",\n  \"total_amount\": 6000,\n  \"items\": [\n    {\n      \"sku_number\": \"A123K9191938\",\n      \"category\": \"marketplace\",\n      \"title\": \"Item 1\",\n      \"description\": \"Item\",\n      \"unit_price\": 3000,\n      \"quantity\": 2,\n      \"unit_measure\": \"unit\",\n      \"total_amount\": 6000\n    }\n  ],\n  \"taxes\": [\n    {\n      \"value\": 1140,\n      \"type\": \"IVA\"\n    }\n  ],\n  \"sponsor\": {\n    \"id\": 446566691\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Processing Card Payments with cURL for MLM (Mexico)\nDESCRIPTION: This cURL request demonstrates how to create a payment for the Mexican market using MercadoPago's API. It sends a POST request to the /v1/payments endpoint with an access token and idempotency key in the headers, and includes payment details in the request body.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-cards.en.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n    -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n    'https://api.mercadopago.com/v1/payments' \\\n    -d '{\n          \"transaction_amount\": 100,\n          \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n          \"description\": \"Blue shirt\",\n          \"installments\": 1,\n          \"payment_method_id\": \"visa\",\n          \"issuer_id\": 310,\n          \"payer\": {\n            \"email\": \"PAYER_EMAIL_HERE\",\n            \"identification\": {\n                \"number\": 19119119100\n            }\n          }\n    }'\n```\n\n----------------------------------------\n\nTITLE: MercadoPago SPEI Transfer API Response\nDESCRIPTION: Example response from MercadoPago's API after creating a SPEI transfer payment. The JSON response includes the payment ID, creation date, payment method details, external resource URL for completing the payment, and pending status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.es.md#2025-04-18_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 51096146182,\n    \"version\": null,\n    \"date_created\": \"2023-05-10T13:43:14.586-04:00\",\n    ...\n    \"payment_method_id\": \"clabe\",\n    \"payment_type_id\": \"bank_transfer\",\n    \"payment_method\": {\n        \"id\": \"clabe\",\n        \"type\": \"bank_transfer\",\n        \"data\": {\n            \"reference_id\": \"6410293433784980810\",\n            \"external_reference_id\": \"1009\",\n            \"external_resource_url\": \"https://www.mercadopago.com.mx/payments/51096146182/ticket?caller_id=34728475&hash=f3a8630a-f06a-48e4-b2a6-f95750af7346\"\n        }\n    },\n    \"status\": \"pending\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Application Fee for Checkout API/Transparente (cURL)\nDESCRIPTION: This cURL command demonstrates how to set the application fee when using the Checkout API/Transparente. The `application_fee` parameter specifies the amount to be charged for each payment created via the /payments API. The `Authorization` header includes the OAuth access token of the seller.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/integrate-marketplace.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'accept: application/json' \\\n--header 'content-type: application/json' \\\n--header 'Authorization: Bearer {{oauth_access_token}}' \\\n--data-raw '{\n    \"description\": \"Pagamento de teste 3\",\n    \"installments\": 1,\n    \"token\": \"{{card_token}}\",\n    \"payer\": {\n        \"email\": \"{{payer_email}}\"\n    },\n    \"payment_method_id\": \"master\",\n    \"transaction_amount\": 25,\n    \"application_fee\": 10\n}'\n```\n\n----------------------------------------\n\nTITLE: Encryption Model for Various Devices (3DES CBC)\nDESCRIPTION: Illustrates the encryption process for multiple device types using 3DES with CBC mode. It demonstrates how to extract card-present data including PAN, expiration date, cardholder information, and track1 data using a derived key and KSN.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/secure_payments/responses.es.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Ejemplo |\n|---|\n| Track1 = 4596CEF2DB0337030FB06765410ACDDB87AC1104CF9ED81C11D3BD831D12A68D6F289E61C588A7C6A79EC1DE4D056BF6 |\n| KSN = 0A010BF0000000000002 |\n\n| Resultado |\n|---|\n| PAN = 5413330089020011 |\n| Fecha expiracion = 12/2025 |\n| Titular de la tarjeta = John Doe |\n| Track1 = B4000340099900505^John/Doe ^22251110000123000 |\n```\n\n----------------------------------------\n\nTITLE: Initiating Money Out Transfer to Bank Account (Mexico)\nDESCRIPTION: This cURL request shows how to initiate a Money Out transfer to a bank account in Mexico using the Mercado Pago API. It includes the necessary headers and JSON payload with transaction details specific to Mexico.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.es.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\\n  --url https://api.mercadopago.com/v1/transaction-intents/process \\\n  --header 'Authorization: Bearer TEST-6133*********794-11121*********edd13abd8*********82868e9-1*********' \\\n  --header 'content-type: application/json' \\\n  --header 'x-enforce-signature: false' \\\n  --data '{\n  \"external_reference\": \"12345\",\n  \"point_of_interaction\": {\n    \"type\": \"PSP_TRANSFER\"\n  },\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://example.mx/notification\"\n    }\n  },\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": 25\n        }\n      ]\n    },\n    \"to\": {\n      \"total_amount\": 25,\n      \"accounts\": [\n        {\n          \"amount\": 25,\n          \"bank_id\": \"646\",\n          \"number\": \"646180110400000007\",\n          \"holder\": \"JUAN JOSE MARIA\",\n          \"type\": \"savings_account\",\n          \"description\": \"envio de 25\"\n        }\n      ]\n    },\n    \"total_amount\": 25\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Criando Pagamento com SDK do Mercado Pago em C#\nDESCRIPTION: Este snippet demonstra como criar um pagamento usando o SDK do Mercado Pago em C#. Ele configura o token de acesso, define opções de requisição personalizadas, cria uma solicitação de pagamento, e envia para a API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/payment-submission.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n\nvar paymentRequest = new PaymentCreateRequest\n{\n    TransactionAmount = decimal.Parse(Request[\"transaction_amount\"]),\n    Token = Request[\"token\"],\n    Installments = int.Parse(Request[\"installments\"]),\n    PaymentMethodId = Request[\"payment_method_id\"],\n    Payer = new PaymentPayerRequest\n    {\n        Email = Request[\"payer\"][\"email\"],\n        Identification = new IdentificationRequest\n        {\n            Type = Request[\"payer\"][\"identification\"][\"type\"],\n            Number = Request[\"payer\"][\"identification\"][\"number\"],\n        },\n    },\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest, requestOptions);\n\nConsole.WriteLine(payment.Status);\n```\n\n----------------------------------------\n\nTITLE: Generating QR Code Data for Open Amount Scenario\nDESCRIPTION: This QR data represents a code with an open amount that needs to be completed by the user. It includes merchant information and payment details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/interoperable-accepting-flow-test.en.md#2025-04-18_snippet_6\n\nLANGUAGE: qr_data\nCODE:\n```\n00020101021143530016com.mercadolibre0129https://mpago.la/pos/2602959950150011273265943055204970053030325802AR5917Prueba Perfumeria6004CABA63047720\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Printing JSON payload for Point Terminals\nDESCRIPTION: Example payload demonstrating how to create a custom printing configuration with formatted text, tags, and delivery receipt details using the Mercado Pago Point Printing API\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/configure-printing.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"print\",\n  \"config\": {\n    \"point\": {\n      \"terminal_id\": \"{{device.id}}\",\n      \"subtype\": \"custom\"\n    }\n  },\n  \"external_reference\": \"8a42e06e45d5\",\n  \"content\": \"{br}--------------------------------{br}{center}{w} DELIVERY RECEIPT{/w}{br}{br}{s} Order No:12345{/s}{br}{s} Store: Test Store{/s}{br}--------------------------------{br}{s}***DISPATCHED ITEM(S)***{/s}{br}{s}SKU / ITEM                       QUANTITY   {/s}{br}{s}----------------------------------------------{/s}{br}{s}4065432630504 / FOOTBALL WUCL LGE EHV240424   1{br}{s}DELIVER ON: 06/06/2024{/s}{br}{s}ADDRESS: METROPOLITANA  {/s}{br}{s}RECEIVER: John{/s}{br}{s}delivery to client in the morning{/s}{br}--------------------------------{br}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing 'sendConsulta' Function in Android\nDESCRIPTION: This function prepares and starts an Intent for querying and paying a bill via RDCPass, using parameters obtained from previous multiservice queries. It requires valid account and parameter substrings as inputs, and handles exceptions during Intent creation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-query-and-pay-bills.en.md#2025-04-18_snippet_1\n\nLANGUAGE: android\nCODE:\n```\npublic void sendConsulta(String id_cliente, String id_cuenta, String datos_captura_substring,  String nombre) { \n\ttry { \n\t\tIntent consultaCuentaIntent = new Intent(intent); \n\t\tconsultaIdCuenta.setClassName(\"redelcom.cl.rdcpass\",  \"redelcom.cl.rdcpass.MainActivity\"); \n\t\tconsultaCuentaIntent.putExtra(\"packageName\", getPackageName()); \n\t\tconsultaCuentaIntent.putExtra(\"className\", getClass().toString().split(\" \")[1]);   \n\t\n\t\tconsultaCuentaIntent.putExtra(\"idCategoria\", id_cuenta); \n\t\tconsultaCuentaIntent.putExtra(\"id\", id_cliente); \n\t\tconsultaCuentaIntent.putExtra(\"nombreCuenta\", nombre); \n\t\tconsultaCuentaIntent.putExtra(\"hint\", datos_captura_substring); \n\t\n\t\tstartActivity(consultaCuentaIntent); \n\t} catch (Exception e) { \n \t\te.printStackTrace(); \n\t} \n} \n\n```\n\n----------------------------------------\n\nTITLE: OAuth Token Response JSON Structure\nDESCRIPTION: JSON response structure containing Access Token details after successful authentication. Includes token, expiration, scope, and user information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/interoperable-accepting-flow-configuration.es.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_token\": \"{ACCESS_TOKEN}\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 21600,\n  \"scope\": \"offline_access read write\",\n  \"user_id\": {USER_ID},\n  \"live_mode\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Facebook Pixel ID with Checkout Pro Preference in C#\nDESCRIPTION: This code snippet demonstrates how to associate a Facebook pixel ID with a Checkout Pro preference using C#. It enables tracking of ad conversions from Facebook campaigns.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.es.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Asocia tu píxel de Facebook\nvar tracks = new List<PreferenceTrackRequest>\n{\n    new PreferenceTrackRequest\n    {\n        Type = \"facebook_ad\",\n        Values = new PreferenceTrackValuesRequest\n        {\n            PixelId = \"PIXEL_ID\",\n        },\n    },\n};\n\nvar request = new PreferenceRequest\n{\n    // ...\n    Tracks = tracks,\n};\n\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Downloading Report File - API Request\nDESCRIPTION: Makes a GET request to download a specific settlement report file using its file_name. Returns the report data in CSV format.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_10\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/:file_name'\n```\n\nLANGUAGE: csv\nCODE:\n```\nEXTERNAL_REFERENCE;SOURCE_ID;USER_ID;PAYMENT_METHOD_TYPE;PAYMENT_METHOD;SITE;TRANSACTION_TYPE;TRANSACTION_AMOUNT;TRANSACTION_CURRENCY;TRANSACTION_DATE;FEE_AMOUNT;SETTLEMENT_NET_AMOUNT;SETTLEMENT_CURRENCY;SETTLEMENT_DATE;REAL_AMOUNT;COUPON_AMOUNT;METADATA;MKP_FEE_AMOUNT;FINANCING_FEE_AMOUNT;SHIPPING_FEE_AMOUNT;TAXES_AMOUNT;INSTALLMENTS;ORDER_ID;SHIPPING_ID;SHIPMENT_MODE;PACK_ID\n2112818453;5067634447;123456789;account_money;account_money;MLB;SETTLEMENT;79.00;BRL;2019-08-11T22:20:19.000-04:00;-8.85;70.15;BRL;2019-08-11T22:20:19.000-04:00;70.15;0.00;[{}];-8.85;0.00;0.00;0.00;1;2112818453;28067695419;me1;2E+15\n```\n\n----------------------------------------\n\nTITLE: Payment Response with All Buyer Discount Details\nDESCRIPTION: This snippet shows the JSON response for a payment processed with a discount campaign applied. It includes details such as the `id`, `description`, `payer` information, `transaction_amount`, `currency_id`, `coupon_amount`, and `transaction_details`, including the `total_paid_amount` after the discount.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/discount-campaigns.en.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"id\": 25417,\n\t\"description\": \"Title of what you are paying for\",\n\t\"payment_method_id\": \"master\",\n\t\"payer\": {\n\t\t\"email\": \"test_user_23700775@testuser.com\",\n\t\t...\n\t},\n\t\"transaction_amount\": 299.99,\n\t\"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n\t\"coupon_amount\": 30,\n\t\"transaction_details\": {\n\t\t\"total_paid_amount\": 269.99,\n\t\t...\n\t},\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Processing SPEI Bank Transfer Payments with C#\nDESCRIPTION: C# implementation for processing SPEI bank transfers with Mercado Pago SDK. The code sets up a payment request with transaction amount, payment method, and payer details, then creates the payment and gets the external resource URL.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.pt.md#2025-04-18_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ACCESS_TOKEN\";\n\nvar client = new PaymentClient();\n\nvar payer = new PaymentPayerRequest() {\n    Type = \"customer\",\n    Email = request.Email,\n    EntityType = \"individual\",\n    FirstName = request.PayerFirstName,\n    LastName = request.PayerLastName\n};\n\nvar paymentCreateRequest = new PaymentCreateRequest() {\n  TransactionAmount = 5000,\n    Description = \"description\",\n    PaymentMethodId = \"clabe\",\n    AdditionalInfo = additionalInfo,\n    CallbackUrl = \"https://your-site.com\",\n    Payer = payer\n};\n\nvar payment = await client.CreateAsync(paymentCreateRequest);\nvar paymentLink = payment.TransactionDetails.externalResourceUrl;\n```\n\n----------------------------------------\n\nTITLE: Successful Refund Response (Status 200)\nDESCRIPTION: This JSON snippet represents a successful response after requesting a partial refund. It includes the refund ID, payment ID, amount refunded, source information, creation date, and status. A status of 'approved' indicates that the refund was processed successfully.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/refund-partial-amount.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n[\n    {\n        \"id\": 1242469925,\n        \"payment_id\": 51617407254,\n        \"amount\": 25,\n        \"source\": {\n            \"id\": 783789745,\n            \"name\": \"Test Test\",\n            \"type\": \"collector\"\n        },\n        \"date_created\": \"2022-11-18T08:48:06.768-04:00\",\n        \"status\": \"approved\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Responsive CSS Styling for 3DS Challenge iframe\nDESCRIPTION: CSS styles for responsive display of the 3DS Challenge iframe with different screen size adaptations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds.en.md#2025-04-18_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n#myframe{\n  width: 500px;\n  height: 600px;\n  border: none;\n}\n@media only screen and (width <= 980px) {\n  #myframe{\n    width: 100%;\n    height: 440px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Information in Mercado Pago Node.js SDK\nDESCRIPTION: Demonstrates how to update an existing customer's information using Mercado Pago's SDK. Requires the customer's unique ID and supports comprehensive profile modification.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/customers.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerClient = new Customer(client);\n\nconst customerRequest = {\n\temail: 'jhon@doe.com',\n\tfirst_name: 'Jhon',\n\tlast_name: 'Doe',\n\tphone: {\n\t\tarea_code: '55',\n\t\tnumber: '991234567'\n\t},\n\tidentification: {\n\t\ttype: 'CPF',\n\t\tnumber: '12345678900'\n\t},\n\tdefault_address: 'Home',\n\taddress: {\n\t\tid: '123123',\n\t\tzip_code: '01234567',\n\t\tstreet_name: 'Rua Exemplo',\n\t\tstreet_number: '123',\n\t\tcity: {}\n\t},\n\tdate_registered: '2021-10-20T11:37:30.000-04:00',\n\tdescription: 'Description del user',\n\tdefault_card: 'None'\n};\n\ncustomerClient.update({ customerId: '247711297-jxOV430go9fx2e', body: customerRequest,\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Integrating Google Ads Conversion Tracking with Checkout Pro Preference in Java\nDESCRIPTION: This code snippet illustrates how to associate Google Ads conversion tracking with a Checkout Pro preference using Java. It enables tracking of ad conversions from Google Ads campaigns.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.es.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// Crea un objeto preferencia\nPreferenceClient client = new PreferenceClient();\n\n// Asocia tu etiqueta\nList<PreferenceTrackRequest> tracks = new ArrayList<>();\nPreferenceTrackRequest trackGoogle =\n   PreferenceTrackRequest.builder()\n       .type(\"google_ad\")\n       .values(\n           PreferenceTrackValuesRequest.builder()\n               .conversionId(\"CONVERSION_ID\")\n               .conversionLabel(\"CONVERSION_LABEL\")\n               .build())\n       .build();\ntracks.add(trackGoogle);\n\nPreferenceRequest request = PreferenceRequest.builder().tracks(tracks).build();\n\n// Guardar y postear la preferencia\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Consultar configuración de reportes con curl\nDESCRIPTION: Realiza una solicitud GET a la API de Mercado Pago para obtener la configuración actual de los reportes de liquidación utilizando curl.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.es.md#2025-04-18_snippet_10\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/config' \\\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago SDK in Python\nDESCRIPTION: This code snippet shows how to create a payment using the Mercado Pago SDK in Python. It sets up the SDK, configures custom headers with an idempotency key, and sends the payment data to the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/payment-submission.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\nrequest_values = request.get_json()\n    \npayment_data = {\n    \"transaction_amount\": float(request_values[\"transaction_amount\"]),\n    \"token\": request_values[\"token\"],\n    \"installments\": int(request_values[\"installments\"]),\n    \"payment_method_id\": request_values[\"payment_method_id\"],\n    \"issuer_id\": request_values[\"issuer_id\"],\n    \"payer\": {\n        \"email\": request_values[\"payer\"][\"email\"],\n        \"identification\": {\n            \"type\": request_values[\"payer\"][\"identification\"][\"type\"], \n            \"number\": request_values[\"payer\"][\"identification\"][\"number\"]\n        }\n    }\n}\n\npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n\nprint(\"status =>\", payment[\"status\"])\nprint(\"status_detail =>\", payment[\"status_detail\"])\nprint(\"id =>\", payment[\"id\"])\n```\n\n----------------------------------------\n\nTITLE: Setting Notification URL with MercadoPago SDK in Go\nDESCRIPTION: Go snippet for setting up payment with notification URL using MercadoPago SDK. Set access token and configure client. Inputs: transaction details and payer's identification. Outputs: printed resource or error message.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.en.md#2025-04-18_snippet_15\n\nLANGUAGE: go\nCODE:\n```\naccessToken := \"{{ACCESS_TOKEN}}\"\\n\\n\\ncfg, err := config.New(accessToken)\\nif err != nil {\\n   fmt.Println(err)\\n   return\\n}\\n\\n\\nclient := payment.NewClient(cfg)\\n\\n\\nrequest := payment.Request{\\n   TransactionAmount: <transactionAmount>,\\n   Token: <token>,\\n   Description: <description>,\\n   Installments: <installments>,\\n   PaymentMethodID:   <paymentMethodId>,\\n   NotificationURL: \"https:/mysite.com/notifications/new\",\\n   Payer: &payment.PayerRequest{\\n      Email: <email>,\\n      Identification: &payment.IdentificationRequest{\\n         Type: <type>,\\n         Number: <number>,\\n      },\\n   },\\n}\\n\\n\\nresource, err := client.Create(context.Background(), request)\\nif err != nil {\\nfmt.Println(err)\\n}\\n\\n\\nfmt.Println(resource)\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Mercado Pago Credentials\nDESCRIPTION: JavaScript code to initialize the Mercado Pago SDK with your public key. This step is necessary to authenticate your integration with Mercado Pago's services.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mp = new MercadoPago('YOUR_PUBLIC_KEY');\n```\n\n----------------------------------------\n\nTITLE: Preference Configuration JSON (MLA, MLB, MLC, MLM, MLU, MPE)\nDESCRIPTION: This JSON snippet defines a complete Mercado Pago preference configuration.  It includes details about the items being purchased, the payer's information, URLs for success/failure/pending scenarios, payment method exclusions, and expiration settings. This configuration is applicable for MLA, MLB, MLC, MLM, MLU, and MPE.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"items\": [\n        {\n            \"id\": \"item-ID-1234\",\n            \"title\": \"Mi producto\",\n            \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n            \"picture_url\": \"https://www.mercadopago.com/org-img/MP3/home/logomp3.gif\",\n            \"description\": \"Descripción del Item\",\n            \"category_id\": \"art\",\n            \"quantity\": 1,\n            \"unit_price\": 75.76\n        }\n    ],\n    \"payer\": {\n        \"name\": \"Juan\",\n        \"surname\": \"Lopez\",\n        \"email\": \"user@email.com\",\n        \"phone\": {\n            \"area_code\": \"11\",\n            \"number\": \"4444-4444\"\n        },\n        \"identification\": {\n            \"type\": \"DNI\",\n            \"number\": \"12345678\"\n        },\n        \"address\": {\n            \"street_name\": \"Street\",\n            \"street_number\": 123,\n            \"zip_code\": \"5700\"\n        }\n    },\n    \"back_urls\": {\n        \"success\": \"https://www.success.com\",\n        \"failure\": \"http://www.failure.com\",\n        \"pending\": \"http://www.pending.com\"\n    },\n    \"auto_return\": \"approved\",\n    \"payment_methods\": {\n        \"excluded_payment_methods\": [\n            {\n                \"id\": \"master\"\n            }\n        ],\n        \"excluded_payment_types\": [\n            {\n                \"id\": \"ticket\"\n            }\n        ],\n        \"installments\": 12\n    },\n    \"notification_url\": \"https://www.your-site.com/ipn\",\n    \"statement_descriptor\": \"MINEGOCIO\",\n    \"external_reference\": \"Reference_1234\",\n    \"expires\": true,\n    \"expiration_date_from\": \"2016-02-01T12:00:00.000-04:00\",\n    \"expiration_date_to\": \"2016-02-28T12:00:00.000-04:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Associating Google Ads to Preference .NET\nDESCRIPTION: This C# code snippet illustrates how to associate a Google Ads tag to a Mercado Pago preference. It creates a `PreferenceTrackRequest` with the type \"facebook_ad\" (typo in original code, should probably be google_ad or similar) and includes the `ConversionId` and `ConversionLabel` in the `PreferenceTrackValuesRequest`. This enables conversion tracking for Google Ads.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/preferences.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// Associe sua tag do Google ads\nvar tracks = new List<PreferenceTrackRequest>\n{\n    new PreferenceTrackRequest\n    {\n        Type = \"facebook_ad\",\n        Values = new PreferenceTrackValuesRequest\n        {\n            ConversionId = \"CONVERSION_ID\",\n            ConversionLabel = \"CONVERSION_LABEL\",\n        },\n    },\n};\nvar request = new PreferenceRequest\n{\n    // ...\n    Tracks = tracks,\n};\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment in C#\nDESCRIPTION: Implements partial payment capture using MercadoPago C# SDK. Configures client with access token and captures payment asynchronously.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar client = new PaymentClient();\nPayment payment = await client.CaptureAsync(paymentId, 75);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment by ID with PHP in MercadoPago API\nDESCRIPTION: This PHP code snippet shows how to use the MercadoPago library to retrieve payment information by its ID. It requires the 'mercadopago.php' file and uses the MP class.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/retrieving-payments.es.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\trequire ('mercadopago.php');\n\n\t$mp = new MP (\"ENV_ACCESS_TOKEN\");\n\n\t$payment = $mp->get(\n\t\t\"/v1/payments/\". $paymentId\n\t);\n?>\n```\n\n----------------------------------------\n\nTITLE: GlobalState Lifecycle Events\nDESCRIPTION: Represents the overall state of the Mini App, tracking visibility and foreground/background status\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/mini-apps-lifecycle.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst globalStates = {\n  shown: 'Mini app is visible and in foreground',\n  hidden: 'Mini app is not visible and moved to background',\n  error: 'Mini app is in an invalid state'\n}\n```\n\n----------------------------------------\n\nTITLE: Country Availability Configuration\nDESCRIPTION: This snippet defines the countries where the Mercado Pago integration is available.  The `available_countries` field lists the country codes for which the integration is supported.  The country codes are comma-separated.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/woocommerce/landing.es.md#2025-04-18_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\navailable_countries: mla, mlb, mlm, mlu, mlc, mco, mpe\n---\n```\n\n----------------------------------------\n\nTITLE: Replacing CardForm HTML Structure with Payment Brick Container\nDESCRIPTION: This snippet shows how to replace the existing CardForm HTML structure with a simple container div for the Payment Brick.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/cardform-clientside.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"paymentBrick_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Available Payments for MPE\nDESCRIPTION: This section specifies the available payment methods for the MPE region when using Mercado Pago with Tiendanube. It includes credit cards, debit cards, Mercado Pago balance, Efectivo, and ATM.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/nuvemshop/landing.en.md#2025-04-18_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n\"available_payments: credit, debit, mercadopago, efectivo, atm\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment Brick Controller with Update Method\nDESCRIPTION: Example showing how to create a payment brick controller instance and use the update method for editing payment data. The controller allows managing payment information updates and navigation through payment steps.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/add-confirmation-step.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.paymentBrickController = await bricksBuilder.create(\n   \"payment\",\n   \"paymentBrick_container\",\n   settings\n );\n\n...\n\n window.paymentBrickController.update((paymentData) => {\n   ...\n})\n```\n\n----------------------------------------\n\nTITLE: Processing Pix Refunds with MercadoPago API using cURL\nDESCRIPTION: cURL command for creating a payment refund with the MercadoPago API. This example shows how to set the X-Render-In-Process-Refunds header to properly handle refunds that may be in contingency status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments/{payment_id}/refunds \\\n\n-H 'X-Render-In-Process-Refunds: true' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n-H 'X-Idempotency-Key: {idempotency_key}' \\\n--data-raw '{\n    \"amount\": 20\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme in JavaScript Settings Object\nDESCRIPTION: This example demonstrates how to set the theme within a settings configuration object using JavaScript. It supports four theme options: dark, default, bootstrap, and flat.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/set-theme.en.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n        visual: {\n            style: {\n                theme: 'dark' | 'default' | 'bootstrap' | 'flat'\n           }\n        }\n    }    \n}\n```\n\n----------------------------------------\n\nTITLE: Criando Pagamento com SDK do Mercado Pago em Python\nDESCRIPTION: Este snippet mostra como criar um pagamento usando o SDK do Mercado Pago em Python. Ele configura o SDK com o token de acesso, define opções de requisição personalizadas, e envia os detalhes do pagamento para a API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/payment-submission.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\nrequest_values = request.get_json()\n    \npayment_data = {\n    \"transaction_amount\": float(request_values[\"transaction_amount\"]),\n    \"token\": request_values[\"token\"],\n    \"installments\": int(request_values[\"installments\"]),\n    \"payment_method_id\": request_values[\"payment_method_id\"],\n    \"issuer_id\": request_values[\"issuer_id\"],\n    \"payer\": {\n        \"email\": request_values[\"payer\"][\"email\"],\n        \"identification\": {\n            \"type\": request_values[\"payer\"][\"identification\"][\"type\"], \n            \"number\": request_values[\"payer\"][\"identification\"][\"number\"]\n        }\n    }\n}\n\npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n\nprint(\"status =>\", payment[\"status\"])\nprint(\"status_detail =>\", payment[\"status_detail\"])\nprint(\"id =>\", payment[\"id\"])\n```\n\n----------------------------------------\n\nTITLE: Estructura de respuesta JSON para configuración de reportes\nDESCRIPTION: Muestra la estructura JSON de la respuesta de la API al consultar la configuración de reportes de liquidación. Incluye detalles como prefijo del nombre de archivo, configuración de visualización y columnas incluidas.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.es.md#2025-04-18_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"file_name_prefix\": \"settlement-report-USER_ID\",\n    \"show_fee_prevision\": false,\n    \"show_chargeback_cancel\": true,\n    \"scheduled\": false,\n    \"coupon_detailed\": true,\n    \"include_withdraw\": true,\n    \"shipping_detail\": true,\n    \"refund_detailed\": true,\n    \"display_timezone\": \"GMT-04\",\n    \"frequency\": {\n        \"hour\": 0,\n        \"type\": \"monthly\",\n        \"value\": 1\n    },\n    \"columns\": [\n        {\n            \"key\": \"TRANSACTION_DATE\"\n        },\n        {\n            \"key\": \"SOURCE_ID\"\n        },\n        {\n            \"key\": \"EXTERNAL_REFERENCE\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tabs in Kotlin\nDESCRIPTION: Code for launching a Custom Tab with a payment preference URL in Kotlin.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/java-kotlin.en.md#2025-04-18_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nval url = \"URL-PREFERENCE\"\n    val intent = CustomTabsIntent.Builder()\n        .build()\n    intent.launchUrl(this@MainActivity, Uri.parse(url))\n```\n\n----------------------------------------\n\nTITLE: Buscando Pagamentos por Data com PHP\nDESCRIPTION: Este exemplo mostra como buscar pagamentos atualizados nas últimas 2 horas até a data atual, ordenados de forma decrescente. Utiliza a variável 'NOW' combinada com 'HOURS' para definir o intervalo de tempo.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/retrieving-payments.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\trequire ('mercadopago.php');\n\n\t$mp = new MP (\"ENV_ACCESS_TOKEN\");\n\n\t$payment = $mp->get(\n\t\t\"/v1/payments/search\",\n\t\tarray(\n\t\t\t\"begin_date\" => \"NOW-2HOURS\",\n\t\t\t\"end_date\" => \"NOW\",\n\t\t\t\"range\" => \"date_last_updated\",\n\t\t\t\"sort\" => \"date_last_updated\",\n\t\t\t\"criteria\" => \"desc\"\n\t\t)\n\t);\n?>\n```\n\n----------------------------------------\n\nTITLE: Opening Fintoc Payment Widget\nDESCRIPTION: This asynchronous function opens the Fintoc payment widget using the `fintoc.open()` method. It requires parameters such as `institutionId`, `username`, `widgetToken`, and callback functions for success, exit, and event handling. The `try...catch` block ensures that any errors during the opening process are caught and logged to the console.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-advanced.en.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nasync function openFintoc() {\n  try {\n    await fintoc.open({\n      institutionId: <INSTITUTION_ID>,\n      username: <USERNAME>\n      widgetToken: <EXTERNAL_REFERENCE_ID>\n      onSuccess,\n      onExit,\n      onEvent,\n    })\n  } catch(e) {\n    console.error(e)\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Mercado Pago Preference in Python\nDESCRIPTION: This Python code snippet demonstrates how to create a Mercado Pago preference with a single item and sets the `purpose` to `wallet_purchase`, restricting payments to registered users. It creates a preference data dictionary with item details and the `wallet_purchase` purpose, then sends the request to Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-onsubmit.es.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"# Crear un ítem en la preferencia\\npreference_data = {\\n  # el \\\"purpose\\\": \\\"wallet_purchase\\\", solo permite pagos registrados\\n  # para permitir pagos de invitados, puedes omitir esta propiedad\\n    \\\"purpose\\\": \\\"wallet_purchase\\\",\\n    \\\"items\\\": [\\n        {\\n            \\\"title\\\": \\\"Mi ítem\\\",\\n            \\\"quantity\\\": 1,\\n            \\\"unit_price\\\": 75.76\\n        }\\n    ]\\n}\\n \\npreference_response = sdk.preference().create(preference_data)\\npreference = preference_response[\\\"response\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Multiple Items - cURL\nDESCRIPTION: This cURL snippet demonstrates creating a Mercado Pago preference with multiple items using a POST request. It sends a JSON payload with an array of item objects, each containing properties like id_product, quantity, unit_price, and titulo, to the Mercado Pago API endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_20\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n  'https://api.mercadopago.com/checkout/preferences' \\\n  -H 'Content-Type: application/json' \\\n  -H 'cache-control: no-cache' \\\n  -H 'Authorization: Bearer PROD_ACCESS_TOKEN' \\\n  -d '{\n\t\"items\": [\n\t{\n\t\t\"id_product\":1,\n\t\t\"quantity\":1,\n\t\t\"unit_price\": 234.33,\n\t\t\"titulo\":\"Meu produto\"\n\t},\n\t{\n\t\t\"id_product\":2,\n\t\t\"quantity\":2,\n\t\t\"unit_price\": 255.33,\n\t\t\"titulo\":\"Meu produto 2\"\n\t}\n]\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment with 3DS using Mercado Pago JavaScript SDK\nDESCRIPTION: This snippet demonstrates configuring a payment with the 'three_d_secure_mode' set to 'optional' using the Mercado Pago JavaScript SDK. It includes setting an access token and handling the payment response. It requires the 'mercadopago' library, and assumes 'req.body' contains payment details. Output: JSON response with payment status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/how-to-integrate-3ds.en.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nconst paymentData = {\n...req.body,\nthree_d_secure_mode: 'optional'\n};\n\nmercadopago.payment.save(paymentData)\n  .then(function(response) {\n    const { status, status_detail, id } = response.body;\n    res.status(response.status).json({ status, status_detail, id });\n  })\n  .catch(function(error) {\n    console.error(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: CSV Example: Successful Payment Link Generation Result\nDESCRIPTION: Sample CSV file showing a successful payment link generation with reference and generated link\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/format-specifications.es.md#2025-04-18_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\n\"ext2024030615501\", \"https://mpago.la/2WTWRHT\"\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with PagoEfectivo\nDESCRIPTION: This Java snippet demonstrates how to create a payment using the Mercado Pago API. It uses the PaymentClient to send a POST request with transaction details, payment method, and payer information. It requires the MercadoPago Java SDK and sets a custom header for idempotency.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_37\n\nLANGUAGE: java\nCODE:\n```\nPaymentCreateRequest paymentCreateRequest = PaymentCreateRequest.builder()\n          .transactionAmount(new BigDecimal(\"<TRANSACTION_AMOUNT>\"))\n          .paymentMethodId(\"<PAYMENT_METHOD_ID>\")\n          .payer(\n              PaymentPayerRequest.builder()\n                  .email(\"<EMAIL>\").build()\n          ).build();\n\nMap<String, String> customHeaders = new HashMap<>();\ncustomHeaders.put(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n\nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders).build();\n\nPaymentClient client = new PaymentClient();\nclient.create(paymentCreateRequest, requestOptions);\n\n```\n\n----------------------------------------\n\nTITLE: Launching Camera Scanner with Java\nDESCRIPTION: This Java snippet shows how to launch the camera scanner using `MPManager.INSTANCE.getCameraScanner()` and a callback function. It handles both successful responses and errors, extracting the result or error message from the `MPResponse` object.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/camscanner-callback.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal CameraScanner cameraScanner = MPManager.INSTANCE.getCameraScanner();\nfinal Function<MPResponse<CameraScannerResponse>, Unit> callback = new Function<MPResponse<CameraScannerResponse>, Unit>() {\n   @Override\n   public Unit apply(MPResponse<CameraScannerResponse> response) {\n       if (response.getStatus() == ResponseStatus.SUCCESS) {\n\n           // Handle the successful response\n           CameraScannerResponse cameraScannerResponse = response.getData();\n\n           String result = cameraScannerResponse.getMessage();\n           // ... Do something with the result\n       } else {\n\n           // Handle the error in the response\n           String errorMessage = response.getError();\n           // ... Do something with the error\n       }\n       return Unit.INSTANCE;\n   }\n};\n\n/**\n* Launch the camera scanner for QR or Barcode with the callback: ScanType.CAMERA_SCANNER_QR - ScanType.CAMERA_SCANNER_BARCODE\n*/\n\ncameraScanner.launchScanner(ScanType.CAMERA_SCANNER_QR, callback);\n```\n\n----------------------------------------\n\nTITLE: Transaction Report Field Reference\nDESCRIPTION: Comprehensive list of field names, formats and descriptions used in Mercado Pago transaction reports. Includes field types, maximum lengths, and country-specific variations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/glossary.es.md#2025-04-18_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\nreserve_for_embargo_invested\nreserve_for_bpp_shipping_return\nreserve_for_debt_payment\nreserve_for_refund\nreserve_for_cbk_cross_recovery\nreserve_for_payment\njudgment_bacen\nfraud\ntrava_de_recibibles\ntip\ndigitalchange_transaction\n```\n\n----------------------------------------\n\nTITLE: Embedding Mercado Pago 785x40 Banner for Chile (MLC)\nDESCRIPTION: HTML code to embed a 785x40 pixel Mercado Pago banner for Chile, showcasing 6 interest-free installment payment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/seis.en.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://www.mercadopago.cl/banner/785x40_banner_psj_6x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"735\" height=\"40\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing RDCPass Payment Sharing Function\nDESCRIPTION: Android method implementation for sharing payment information with RDCPass system. Handles intent creation and parameter passing for DTE printing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-print-dte.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic void shareRDCPass(String total, String intent) { \n\ttry { \n\t\tIntent sharingIntent = new Intent(intent); \n\t\tsharingIntent.setClassName(\"redelcom.cl.rdcpass\", \"redelcom.cl.rdcpass.MainActivity\"); \n\t\tsharingIntent.putExtra(\"packageName\", getPackageName()); \n\t\tsharingIntent.putExtra(\"className\", getClass().toString().split(\" \")[1]);  \n\t\tsharingIntent.putExtra(\"payload\", \"RESULTADO_PAGO_REALIZADO\"); \n\t\tsharingIntent.putExtra(\"dte\", dte); \n\t\tstartActivity(sharingIntent); \n\t} catch (Exception e) { \n\t\te.printStackTrace(); \n\t} \n}\n```\n\n----------------------------------------\n\nTITLE: Generating Transaction Certificate Key and CSR File with OpenSSL\nDESCRIPTION: This script generates the necessary key file and CSR (Certificate Signing Request) file for a transaction certificate. The script requires CUST_ID (last block of digits from ACCESS_TOKEN) and APP_ID to be defined before execution.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/pix-payments/certificate-creation.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: script\nCODE:\n```\nopenssl genrsa -out \"$key_file\" 2048 2>/dev/null\n\n\nopenssl req -new \\\n-key \"$key_file\" \\ # Nome do Arquivo para cadastro no Postman (*.pem) csr_subject=\"/CN=urn:users:$user_id\" # Fixo\n-out \"$csr_file\" # Nome do Arquivo para cadastro no Postman (*.pem)\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK with Public Key\nDESCRIPTION: Code to initialize the Mercado Pago SDK after installation. This requires your Public key to identify your account when connecting to Mercado Pago services.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/mp-js-v2.en.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  const mp = new MercadoPago(\"YOUR_PUBLIC_KEY\");\n</script>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loadMercadoPago } from \"@mercadopago/sdk-js\";\n\n\nawait loadMercadoPago();\nconst mp = new window.MercadoPago(\"YOUR_PUBLIC_KEY\");\n\n```\n\n----------------------------------------\n\nTITLE: PIX Payment Response Structure\nDESCRIPTION: Example JSON response showing the payment status and PIX transaction data including QR code information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pix.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...,\n \"id\": 5466310457,\n \"status\": \"pending\",\n \"status_detail\": \"pending_waiting_transfer\",\n ...,\n \"transaction_details\": {\n     \"net_received_amount\": 0,\n     \"total_paid_amount\": 100,\n     \"overpaid_amount\": 0,\n     \"external_resource_url\": null,\n     \"installment_amount\": 0,\n     \"financial_institution\": null,\n     \"transaction_id\": null\n },\n \"point_of_interaction\": {\n     \"type\": \"PIX\",\n     \"sub_type\": null,\n     \"application_data\": {\n       \"name\": \"NAME_SDK\",\n       \"version\": \"VERSION_NUMBER\"\n     },\n     \"transaction_data\": {\n       \"qr_code_base64\": \"iVBORw0KGgoAAAANSUhEUgAABRQAAAUUCAYAAACu5p7oAAAABGdBTUEAALGPC/xhBQAAAAFzUkdCAK7OHOkAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAIABJREFUeJzs2luO3LiWQNFmI+Y/Zd6vRt36KGNXi7ZOBtcagHD4kNLeiLX33v8DAAAAABD879sDAAAAAAA/h6AIAAAAAGSCIgAAAACQCYoAAAAAQCYoAgAAAACZoAgAAAAAZIIiAAAAAJAJigAAAABAJigCAAAAAJmgCAAAAABkgiIAAAAAkAmKAAAAAEAmKAIAAAAAmaAIAAAAAGSCIgAAAACQCYoAAAAAQCYoAgAAAACZoAgAAAAAZIIiAAAAAJAJigAAAABAJigCA...\",\n       \"qr_code\": \"00020126600014br.gov.bcb.pix0117john@yourdomain.com0217additional data520400005303986540510.005802BR5913Maria Silva6008Brasilia62070503***6304E2CA\",\n       \"ticket_url\": \"https://www.mercadopago.com.br/payments/123456789/ticket?caller_id=123456&hash=123e4567-e89b-12d3-a456-426655440000\",\n       \"transaction_id\": null\n     }\n }\n ...,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Settlement Report Configuration in MercadoPago API\nDESCRIPTION: Makes a POST request to create a new settlement report configuration. Includes parameters for file naming, report details, timezone, notification emails, frequency settings and column specifications. Returns a 201 Created status on success.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/config' \\\n    -d '{\n            \"file_name_prefix\": \"settlement-report-USER_ID\",\n            \"show_fee_prevision\": false,\n            \"show_chargeback_cancel\": true,\n            \"coupon_detailed\": true,\n            \"include_withdraw\": true,\n            \"shipping_detail\": true,\n            \"refund_detailed\": true,\n            \"display_timezone\": \"GMT-04\",\n            \"notification_email_list\": [\n                \"example@email.com\",\n                \"john@example.com\"\n            ],\n            \"frequency\": {\n                \"hour\": 0,\n                \"type\": \"monthly\",\n                \"value\": 1\n            },\n            \"columns\": [\n                {\n                    \"key\": \"TRANSACTION_DATE\"\n                },\n                {\n                    \"key\": \"SOURCE_ID\"\n                },\n                {\n                    \"key\": \"EXTERNAL_REFERENCE\"\n                }\n            ]\n    }'\n```\n\n----------------------------------------\n\nTITLE: Setting Up SFTP Notification for Reports (curl)\nDESCRIPTION: This curl request sets up SFTP notification for the generated reports. It specifies the SFTP server details and credentials.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/reports/notifiers?type=ftp' \\\n--header 'Authorization: Bearer {{TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"type\": \"ftp\",\n    \"data\": {\n        \"ip\": \"test.files.com\",\n        \"port\": 22,\n        \"password\": \"test\",\n        \"protocol\": \"SFTP\",\n        \"username\": \"test@mercadolibre.com\",\n        \"remote_dir\": \"/\"\n    },\n    \"description\": \"test notifier sftp\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment Value with Ruby\nDESCRIPTION: This snippet shows how to capture a partial amount from a previously authorized payment using Ruby. It captures 75 units of currency from the original authorized amount.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\nrequest = {\n  transaction_amount: 75,\n  capture: true\n}\n\npayment_response = sdk.payment.update(payment_id, request)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with 3DS in Mercado Pago Ruby SDK\nDESCRIPTION: This Ruby code snippet demonstrates how to perform a payment operation in Mercado Pago by utilizing previously provided 3DS data. Integration requires MercadoPago SDK and an access token. Critical input fields include transaction amount, token, description, and 3DS authentication parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-external-mpi.en.md#2025-04-18_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('<ENV_ACCESS_TOKEN>')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_request = {\n  token: '<CARD_TOKEN>',\n  installments: <INSTALLLMENTS_NUMBER>,\n  transaction_amount: <TRANSACTION_AMOUNT>,\n  description: '<DESCRIPTION>',\n  payer: {\n    email: '<BUYER_EMAIL>',\n  },\n  payment_method: {\n    type: 'credit_card',\n    data: {\n      authentication: {\n        type: 'external_threeds',\n        cryptogram: '<<String>>',\n        three_ds_server_trans_id: '<<String>>',\n        eci: '<<String>>',\n        ds_trans_id: '<<String>>',\n        acs_trans_id: '<<String>>',\n        three_ds_version: '<<String>>',\n        authentication_status: '<<String>>'\n      }\n    }\n  }\n}\npayment_response = sdk.payment.create(payment_request,\n                                      custom_request_options)\n\npayment = payment_response[:response]\n\n```\n\n----------------------------------------\n\nTITLE: Complete PHP Implementation\nDESCRIPTION: Full PHP implementation for validating Mercado Pago webhook notifications using HMAC\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.es.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Obtain the x-signature value from the header\n$xSignature = $_SERVER['HTTP_X_SIGNATURE'];\n$xRequestId = $_SERVER['HTTP_X_REQUEST_ID'];\n\n// Obtain Query params related to the request URL\n$queryParams = $_GET;\n\n// Extract the \"data.id\" from the query params\n$dataID = isset($queryParams['data.id']) ? $queryParams['data.id'] : '';\n\n// Separating the x-signature into parts\n$parts = explode(',', $xSignature);\n\n// Initializing variables to store ts and hash\n$ts = null;\n$hash = null;\n\n// Iterate over the values to obtain ts and v1\nforeach ($parts as $part) {\n    // Split each part into key and value\n    $keyValue = explode('=', $part, 2);\n    if (count($keyValue) == 2) {\n        $key = trim($keyValue[0]);\n        $value = trim($keyValue[1]);\n        if ($key === \"ts\") {\n            $ts = $value;\n        } elseif ($key === \"v1\") {\n            $hash = $value;\n        }\n    }\n}\n\n// Obtain the secret key for the user/application from Mercadopago developers site\n$secret = \"your_secret_key_here\";\n\n// Generate the manifest string\n$manifest = \"id:$dataID;request-id:$xRequestId;ts:$ts;\";\n\n// Create an HMAC signature defining the hash type and the key as a byte array\n$sha = hash_hmac('sha256', $manifest, $secret);\nif ($sha === $hash) {\n    // HMAC verification passed\n    echo \"HMAC verification passed\";\n} else {\n    // HMAC verification failed\n    echo \"HMAC verification failed\";\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Create and Mount Secure Fields (V2)\nDESCRIPTION: JavaScript code to create and mount secure fields for card number, expiration date, and security code using Mercado Pago SDK V2 with Secure Fields.  It uses the `mp.fields.create` method to generate the secure iframes and `mount` to render them inside the specified HTML divs.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n\n  const cardNumberElement = mp.fields.create('cardNumber', {\n  placeholder: \"Número do cartão\"\n}).mount('cardNumber');\n\nconst expirationDateElement = mp.fields.create('expirationDate', {\n  placeholder: \"MM/YY\",\n}).mount('expirationDate');\n\nconst securityCodeElement = mp.fields.create('securityCode', {\n  placeholder: \"Código de segurança\"\n}).mount('securityCode');\n```\n\n----------------------------------------\n\nTITLE: Creating Preference in C#\nDESCRIPTION: This C# snippet shows how to create a Mercado Pago preference using the C# SDK. It creates a `PreferenceRequest` with item details and sets the `Purpose` to `wallet_purchase`, allowing only logged-in payments. The code uses `PreferenceClient` to create the preference asynchronously.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-onsubmit.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Cria o objeto de request da preferência\nvar request = new PreferenceRequest\n{\n  // o Purpose = 'wallet_purchase', permite apenas pagamentos logados\n  // para permitir pagamentos como guest, você pode omitir essa propriedade\n    Purpose = \"wallet_purchase\",\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"Meu produto\",\n            Quantity = 1,\n            CurrencyId = \"BRL\",\n            UnitPrice = 75.56,\n        },\n    },\n};\n \n// Cria a preferência usando o client\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Criando Pagamento com SDK do Mercado Pago em Java\nDESCRIPTION: Este snippet demonstra como criar um pagamento usando o SDK do Mercado Pago em Java. Ele configura opções de requisição personalizadas, cria um cliente de pagamento, e envia os detalhes do pagamento para a API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/payment-submission.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest paymentCreateRequest =\n   PaymentCreateRequest.builder()\n       .transactionAmount(request.getTransactionAmount())\n       .token(request.getToken())\n       .installments(request.getInstallments())\n       .paymentMethodId(request.getPaymentMethodId())\n       .payer(\n           PaymentPayerRequest.builder()\n               .email(request.getPayer().getEmail())\n               .identification(\n                   IdentificationRequest.builder()\n                       .type(request.getPayer().getIdentification().getType())\n                       .number(request.getPayer().getIdentification().getNumber())\n                       .build())\n               .build())\n       .build();\n\nclient.create(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Defining CSV Format for Batch Refunds\nDESCRIPTION: This CSV file format is required for processing batch refunds. The file must include a semicolon-separated format with necessary fields such as payment_id, external_reference, and amount. Amount field formatting differs based on the seller's location. The file must adhere to a strict naming convention and structure for successful processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/batch-payments-vault-migration/batch-refunds/input-format-batch-refunds.en.md#2025-04-18_snippet_0\n\nLANGUAGE: CSV\nCODE:\n```\npayment_id;external_reference;amount\n123;ext_ref_1;100\n1234;ext_ref_2;200\n```\n\n----------------------------------------\n\nTITLE: PointPayment Lifecycle Events\nDESCRIPTION: Represents the payment flow state, tracking successful payments and user cancellations\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/mini-apps-lifecycle.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst paymentStates = {\n  success: 'Payment flow completed successfully',\n  error: 'Payment flow interrupted by user pressing back button'\n}\n```\n\n----------------------------------------\n\nTITLE: Generating XML Structure for Chilean Electronic Tax Document (DTE)\nDESCRIPTION: This XML structure represents a complete Electronic Tax Document (DTE) used in Chile's tax system. It includes document identification, issuer and receiver details, transaction totals, line items, tax information, and digital signatures for authentication and validation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/annex-xml-for-printing.en.md#2025-04-18_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<DTE version=\"1.0\" xmlns=\"http://www.sii.cl/SiiDte\">\n\t<Documento ID=\"F60T33\">\n\t\t<Encabezado>\n\t\t\t<IdDoc>\n\t\t\t\t<TipoDTE>33</TipoDTE>\n\t\t\t\t<Folio>60</Folio>\n\t\t\t\t<FchEmis>2003-10-13</FchEmis>\n\t\t\t</IdDoc>\n\t\t\t<Emisor>\n\t\t\t\t<RUTEmisor>97975000-5</RUTEmisor>\n\t\t\t\t<RznSoc>RUT DE PRUEBA</RznSoc>\n\t\t\t\t<GiroEmis>Insumos de Computacion</GiroEmis>\n\t\t\t\t<Acteco>31341</Acteco>\n\t\t\t\t<CdgSIISucur>1234</CdgSIISucur>\n\t\t\t\t<DirOrigen>Teatinos 120, Piso 4</DirOrigen>\n\t\t\t\t<CmnaOrigen>Santiago</CmnaOrigen>\n\t\t\t\t<CiudadOrigen>Santiago</CiudadOrigen>\n\t\t\t</Emisor>\n\t\t\t<Receptor>\n\t\t\t\t<RUTRecep>77777777-7</RUTRecep>\n\t\t\t\t<RznSocRecep>EMPRESA  LTDA</RznSocRecep>\n\t\t\t\t<GiroRecep>COMPUTACION</GiroRecep>\n\t\t\t\t<DirRecep>SAN DIEGO 2222</DirRecep>\n\t\t\t\t<CmnaRecep>LA FLORIDA</CmnaRecep>\n\t\t\t\t<CiudadRecep>SANTIAGO</CiudadRecep>\n\t\t\t</Receptor>\n\t\t\t<Totales>\n\t\t\t\t<MntNeto>100000</MntNeto>\n\t\t\t\t<TasaIVA>19</TasaIVA>\n\t\t\t\t<IVA>19000</IVA>\n\t\t\t\t<MntTotal>119000</MntTotal>\n\t\t\t</Totales>\n\t\t</Encabezado>\n\t\t<Detalle>\n\t\t\t<NroLinDet>1</NroLinDet>\n\t\t\t<CdgItem>\n\t\t\t\t<TpoCodigo>INT1</TpoCodigo>\n\t\t\t\t<VlrCodigo>011</VlrCodigo>\n\t\t\t</CdgItem>\n\t\t\t<NmbItem>Parlantes Multimedia 180W.</NmbItem>\n\t\t\t<DscItem/>\n\t\t\t<QtyItem>20</QtyItem>\n\t\t\t<PrcItem>4500</PrcItem>\n\t\t\t<MontoItem>90000</MontoItem>\n\t\t</Detalle>\n\t\t<Detalle>\n\t\t\t<NroLinDet>2</NroLinDet>\n\t\t\t<CdgItem>\n\t\t\t\t<TpoCodigo>INT1</TpoCodigo>\n\t\t\t\t<VlrCodigo>0231</VlrCodigo>\n\t\t\t</CdgItem>\n\t\t\t<NmbItem>Mouse Inalambrico PS/2</NmbItem>\n\t\t\t<DscItem/>\n\t\t\t<QtyItem>1</QtyItem>\n\t\t\t<PrcItem>5000</PrcItem>\n\t\t\t<MontoItem>5000</MontoItem>\n\t\t</Detalle>\n\t\t<Detalle>\n\t\t\t<NroLinDet>3</NroLinDet>\n\t\t\t<CdgItem>\n\t\t\t\t<TpoCodigo>INT1</TpoCodigo>\n\t\t\t\t<VlrCodigo>1515</VlrCodigo>\n\t\t\t</CdgItem>\n\t\t\t<NmbItem>Caja de Diskettes 10 Unidades</NmbItem>\n\t\t\t<DscItem/>\n\t\t\t<QtyItem>5</QtyItem>\n\t\t\t<PrcItem>1000</PrcItem>\n\t\t\t<MontoItem>5000</MontoItem>\n\t\t</Detalle>\n\t\t<TED version=\"1.0\">\n\t\t\t<DD>\n\t\t\t\t<RE>97975000-5</RE>\n\t\t\t\t<TD>33</TD>\n\t\t\t\t<F>60</F>\n\t\t\t\t<FE>2003-10-13</FE>\n\t\t\t\t<RR>77777777-7</RR>\n\t\t\t\t<RSR>EMPRESA  LTDA</RSR>\n\t\t\t\t<MNT>119000</MNT>\n\t\t\t\t<IT1>Parlantes Multimedia 180W.</IT1>\n\t\t\t\t<CAF version=\"1.0\">\n\t\t\t\t\t<DA>\n\t\t\t\t\t\t<RE>97975000-5</RE>\n\t\t\t\t\t\t<RS>RUT DE PRUEBA</RS>\n\t\t\t\t\t\t<TD>33</TD>\n\t\t\t\t\t\t<RNG>\n\t\t\t\t\t\t\t<D>1</D>\n\t\t\t\t\t\t\t<H>200</H>\n\t\t\t\t\t\t</RNG>\n\t\t\t\t\t\t<FA>2003-09-04</FA>\n\t\t\t\t\t\t<RSAPK>\n\t\t\t\t\t\t\t<M>0a4O6Kbx8Qj3K4iWSP4w7KneZYeJ+g/prihYtIEolKt3cykSxl1zO8vSXu397QhTmsX7SBEudTUx++2zDXBhZw==</M>\n\t\t\t\t\t\t\t<E>Aw==</E>\n\t\t\t\t\t\t</RSAPK>\n\t\t\t\t\t\t<IDK>100</IDK>\n\t\t\t\t\t</DA>\n\t\t\t\t\t<FRMA algoritmo=\"SHA1withRSA\">g1AQX0sy8NJugX52k2hTJEZAE9Cuul6pqYBdFxj1N17umW7zG/hAavCALKByHzdYAfZ3LhGTXCai5zNxOo4lDQ==</FRMA>\n\t\t\t\t</CAF>\n\t\t\t\t<TSTED>2003-10-13T09:33:20</TSTED>\n\t\t\t</DD>\n\t\t\t<FRMT algoritmo=\"SHA1withRSA\">GbmDcS9e/jVC2LsLIe1iRV12Bf6lxsILtbQiCkh6mbjckFCJ7fj/kakFTS06Jo8i\nS4HXvJj3oYZuey53Krniew==</FRMT>\n\t\t</TED>\n\t\t<TmstFirma>2003-10-13T09:33:20</TmstFirma>\n\t</Documento>\n<Signature xmlns=\"http://www.w3.org/2000/09/xmldsig#\">\n<SignedInfo>\n<CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"/>\n<SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/>\n<Reference URI=\"#F60T33\">\n<Transforms>\n<Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"/>\n</Transforms>\n<DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/>\n<DigestValue>hlmQtu/AyjUjTDhM3852wvRCr8w=</DigestValue>\n</Reference>\n</SignedInfo>\n<SignatureValue>JG1Ig0pvSIH85kIKGRZUjkyX6CNaY08Y94j4UegTgDe8+wl61GzqjdR1rfOK9BGn93AMOo6aiAgolW0k/XklNVtM/ZzpNNS3d/fYVa1q509mAMSXbelxSM3bjoa7H6Wzd/mV1PpQ8zK5gw7mgMMP4IKxHyS92G81GEguSmzcQmA=</SignatureValue>\n<KeyInfo>\n<KeyValue>\n<RSAKeyValue>\n<Modulus>\ntNEknkb1kHiD1OOAWlLKkcH/UP5UGa6V6MYso++JB+vYMg2OXFROAF7G8BNFFPQx\niuS/7y1azZljN2xq+bW3bAou1bW2ij7fxSXWTJYFZMAyndbLyGHM1e3nVmwpgEpx\nBHhZzPvwLb55st1wceuKjs2Ontb13J33sUb7bbJMWh0=\n</Modulus>\n<Exponent>\nAQAB\n</Exponent>\n</RSAKeyValue>\n</KeyValue>\n<X509Data>\n<X509Certificate>MIIEgjCCA+ugAwIBAgIEAQAApzANBgkqhkiG9w0BAQUFADCBtTELMAkGA1UEBhMC\nQ0wxHTAbBgNVBAgUFFJlZ2lvbiBNZXRyb3BvbGl0YW5hMREwDwYDVQQHFAhTYW50\naWFnbzEUMBIGA1UEChQLRS1DRVJUQ0hJTEUxIDAeBgNVBAsUF0F1dG9yaWRhZCBD\nZXJ0aWZpY2Fkb3JhMRcwFQYDVQQDFA5FLUNFUlRDSElMRSBDQTEjMCEGCSqGSIb3\nDQEJARYUZW1haWxAZS1jZXJ0Y2hpbGUuY2wwHhcNMDMxMDAxMTg1ODE1WhcNMDQw\nOTMwMDAwMDAwWjCBuDELMAkGA1UEBhMCQ0wxFjAUBgNVBAgUDU1ldHJvcG9saXRh\nbmExETAPBgNVBAcUCFNhbnRpYWdvMScwJQYDVQQKFB5TZXJ2aWNpbyBkZSBJbXB1\nZXN0b3MgSW50ZXJub3MxDzANBgNVBAsUBlBpc28gNDEjMCEGA1UEAxQaV2lsaWJh\nbGRvIEdvbnphbGV6IENhYnJlcmExHzAdBgkqhkiG9w0BCQEWEHdnb256YWxlekBz\naWkuY2wwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALxZlVh1xr9sKQIBDF/6\nVa+lsHQSG5AAmCWvtNTIOXN3E9EQCy7pOPHrDg6EusvoHyesZSKJbc0TnIFXZp78\nq7mbdHijzKqvMmyvwbdP7KK8LQfwf84W4v9O8MJeUHlbJGlo5nFACrPAeTtONbHa\nReyzeMDv2EganNEDJc9c+UNfAgMBAAGjggGYMIIBlDAjBgNVHREEHDAaoBgGCCsG\nAQQBwQEBoAwWCjA3ODgwNDQyLTQwCQYDVR0TBAIwADA8BgNVHR8ENTAzMDGgL6At\nhitodHRwOi8vY3JsLmUtY2VydGNoaWxlLmNsL2UtY2VydGNoaWxlY2EuY3JsMCMG\nA1UdEgQcMBqgGAYIKwYBBAHBAQKgDBYKOTY5MjgxODAtNTAfBgNVHSMEGDAWgBTg\nKP3S4GBPs0brGsz1CJEHcjodCDCB0AYDVR0gBIHIMIHFMIHCBggrBgEEAcNSBTCB\ntTAvBggrBgEFBQcCARYjaHR0cDovL3d3dy5lLWNlcnRjaGlsZS5jbC8yMDAwL0NQ\nUy8wgYEGCCsGAQUFBwICMHUac0VsIHRpdHVsYXIgaGEgc2lkbyB2YWxpZG8gZW4g\nZm9ybWEgcHJlc2VuY2lhbCwgcXVlZGFuZG8gZWwgQ2VydGlmaWNhZG8gcGFyYSB1\nc28gdHJpYnV0YXJpbywgcGFnb3MsIGNvbWVyY2lvIHkgb3Ryb3MwCwYDVR0PBAQD\nAgTwMA0GCSqGSIb3DQEBBQUAA4GBABMfCyJF0mNXcov8iEWvjGFyyPTsXwvsYbbk\nOJ41wjaGOFMCInb4WY0ngM8BsDV22bGMs8oLyX7rVy16bGA8Z7WDUtYhoOM7mqXw\n/Hrpqjh3JgAf8zqdzBdH/q6mAbdvq/yb04JHKWPC7fMFuBoeyVWAnhmuMZfReWQi\nMUEHGGIW</X509Certificate>\n</X509Data>\n</KeyInfo>\n</Signature></DTE>\n```\n\n----------------------------------------\n\nTITLE: Sample Mercado Pago API Response (JSON)\nDESCRIPTION: This JSON snippet shows a sample response from the Mercado Pago API after creating an order using the buyer model QR code.  It contains information about the order, including its ID, status, items, and payment details. The response indicates whether the payment was approved and includes details like transaction amount, payment method, and associated identifiers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/hidden-qr-buyer-part-b.es.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"id\": 2574846382,\n   \"status\": \"approved\",\n   \"items\": [\n       {\n            \"sku_number\": \"KS955RUR\",\n            \"category\": \"FOOD\",\n            \"title\": \"Item1\",\n            \"description\": \"Item1 Mercado Pago\",\n            \"unit_price\": 20,\n            \"quantity\": 5,\n            \"unit_measure\": \"unit\",\n            \"total_amount\": 100\n        }\n   ],\n   \"payments\": [\n       {\n           \"id\": 14527153428,\n           \"status\": \"approved\",\n           \"status_detail\": \"accredited\",\n           \"payment_type_id\": \"account_money\",\n           \"payment_method_id\": \"account_money\",\n           \"token\": null,\n           \"transaction_amount\": 100,\n           \"installments\": 1,\n           \"processing_mode\": null,\n           \"issuer_id\": null,\n           \"coupon_amount\": 0,\n           \"campaign_id\": null,\n           \"coupon_code\": null,\n           \"description\": \"Mercado Pago\",\n           \"external_reference\": \"order-id-1234\",\n           \"statement_descriptor\": null,\n           \"date_of_expiration\": null,\n           \"merchant_account_id\": null,\n           \"payment_method_option_id\": null,\n           \"additional_info\": null,\n           \"net_amount\": null,\n           \"transaction_details\": {\n               \"external_resource_url\": null,\n               \"total_paid_amount\": 100\n           }\n\n```\n\n----------------------------------------\n\nTITLE: Upgrading Adobe Commerce Setup\nDESCRIPTION: Command to upgrade the Adobe Commerce installation after adding the new module.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/adobe-commerce/installation-composer.en.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/magento setup:upgrade\n```\n\n----------------------------------------\n\nTITLE: Network Transaction ID Response Format\nDESCRIPTION: Example response showing the structure of network transaction ID return\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/network-transaction-id.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"expanded\": {\n   \"gateway\": {\n \t  \"reference\": {\n \t\t \"network_transaction_id\": \"n7w-c0d3-t7d\"\n \t    }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validation Payment with cURL - Refund Step\nDESCRIPTION: cURL command for the second step of a validation payment where the small amount charged is refunded. This completes the validation process without leaving a charge on the customer's card.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n'https://api.mercadopago.com/v1/payments/12345678901/refunds'\\\n-H 'Content-Type: application/json' \\\n-H 'X-Idempotency-Key: 77e1c83b-7bb0-437b-bc50-a7a58e5660ac' \\\n-H 'Authorization: Bearer TEST-4397********912-08011*********50d74305b*********a2f9ec0-1********' \\\n-d '{\n\"amount\": 5\n}'\n```\n\n----------------------------------------\n\nTITLE: Hiding Form Title in Payment Brick\nDESCRIPTION: Configuration settings to hide the default form title in Payment Brick using hideFormTitle property. Demonstrates implementation in both JavaScript and React.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/hide-element.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n   ...,\n   customization: {\n       visual: {\n           hideFormTitle: true\n       }\n   }\n}\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n   hideFormTitle: true\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Generating SSH RSA Key Pair using Terminal\nDESCRIPTION: This command generates a 4096-bit RSA key pair for SSH authentication. The -t flag specifies the type (RSA), and -b sets the key size to 4096 bits, which is recommended but not mandatory.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/public-and-private-key.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nssh-keygen -t rsa -b 4096\n```\n\n----------------------------------------\n\nTITLE: Scheduling Automated Marketplace Seller Sales Reports\nDESCRIPTION: This cURL request demonstrates how to schedule automated marketplace seller sales reports using the Mercado Pago API. It sets up a daily report generation event with specific configuration parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.es.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/events' \\\n--header 'Authorization: Bearer {{TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"type\": \"frequency\",\n    \"data\": {\n        \"period\": \"daily\",\n        \"value\": 0,\n        \"hour\": 0\n    },\n    \"description\": \"event test\",\n    \"structure_id\": {{structure_id}},\n    \"notifiers\": [      \n       {{notifier_id}}\n    ],\n    \"status\": \"ACTIVE\",\n    \"version\": 0\n}'\n```\n\n----------------------------------------\n\nTITLE: Building Callback URI Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to use the `buildCallbackUri` function from the `PaymentFlow` class to create a URI with specified callback, method callback, metadata, and app ID. The resulting URI is intended to be used for deeplinking in payment flows.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/payment-flow-legacy-support.en.md#2025-04-18_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval paymentFlow = MPManager.paymentFlow\n\nval uriResult = paymentFlow.buildCallbackUri(\n   callback = \"tuHost://tuApp/result\",\n   methodCallback = \"error\",\n   metadata = hashMapOf(\"message\" to \"result\"),\n   appID = \"demo.app\"\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Rejected Payment Response in JSON\nDESCRIPTION: Example of API response showing a rejected payment due to insufficient funds. Demonstrates the structure of rejection status and details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status\": \"rejected\",\n    \"status_detail\": \"cc_rejected_insufficient_amount\",\n    \"id\": 47198050,\n    \"payment_method_id\": \"master\",\n    \"payment_type_id\": \"credit_card\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Device ID in HTML for Checkout\nDESCRIPTION: HTML code to implement device ID generation for checkout process in Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\"></script>\n```\n\n----------------------------------------\n\nTITLE: Criando Pagamento com Efecty usando Ruby\nDESCRIPTION: Código Ruby para criar um pagamento via Efecty usando o SDK do Mercado Pago. Especifica o valor da transação, descrição, método de pagamento e email do pagador.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\npayment_request = {\n  transaction_amount: 5000,\n  description: 'Título do produto',\n  payment_method_id: 'efecty',\n  payer: {\n    email: 'test_user_19549678@testuser.com',\n  }\n}\n\npayment_response = sdk.payment.create(payment_request)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Adding Payment Form - HTML\nDESCRIPTION: This snippet provides the HTML structure for the payment form, including fields for customer information and transaction details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pix.en.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<form id=\"form-checkout\" action=\"/process_payment\" method=\"post\">\n<div>\n<div>\n<label for=\"payerFirstName\">Name</label>\n<input id=\"form-checkout__payerFirstName\" name=\"payerFirstName\" type=\"text\">\n</div>\n<div>\n<label for=\"payerLastName\">Surname</label>\n<input id=\"form-checkout__payerLastName\" name=\"payerLastName\" type=\"text\">\n</div>\n<div>\n<label for=\"email\">Email</label>\n<input id=\"form-checkout__email\" name=\"email\" type=\"text\">\n</div>\n<div>\n<label for=\"identificationType\">Document type</label>\n<select id=\"form-checkout__identificationType\" name=\"identificationType\" type=\"text\"></select>\n</div>\n<div>\n<label for=\"identificationNumber\">Document number</label>\n<input id=\"form-checkout__identificationNumber\" name=\"identificationNumber\" type=\"text\">\n</div>\n</div>\n\n<div>\n<div>\n<input type=\"hidden\" name=\"transactionAmount\" id=\"transactionAmount\" value=\"100\">\n<input type=\"hidden\" name=\"description\" id=\"description\" value=\"Product Name\">\n<br>\n<button type=\"submit\">Pay</button>\n</div>\n</div>\n</form>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Mercado Pago Integration Credentials\nDESCRIPTION: Step-by-step process for setting up integration credentials in Mercado Pago account, including public key, access token, and test mode configuration\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/linx/configure-payment-method.en.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsites_supported:\n  - mlb\n```\n\n----------------------------------------\n\nTITLE: Configuring Columns for Releases Report - JSON\nDESCRIPTION: JSON array specifying the columns to be included in the Releases report. Each object in the array represents a column, with the 'key' property indicating the column identifier.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[{\"key\": \"DATE\"}, {\"key\": \"SOURCE_ID\"}]\n```\n\n----------------------------------------\n\nTITLE: Initializing Web Tokenize Checkout for Saved Cards with MercadoPago\nDESCRIPTION: This snippet sets up the Web Tokenize Checkout for processing payments using saved cards. It configures parameters such as total amount, callback URL, and includes saved card IDs and customer ID for retrieving stored card information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-clientside.en.md#2025-04-18_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<script>\n  mp.checkout({\n    tokenizer: {\n        totalAmount: 4000,\n        backUrl: 'https://www.mi-sitio.com/process',\n        savedCards: {\n            cardIds: '1518023392627,1518023332143' // IDs de las tarjetas\n            customerId: '209277402-FqRqgEc3XItrxs' // Tu customer ID\n        }\n    },\n    render: {\n        container: ‘.tokenizer-container’,\n        label: ‘Pagar’\n    }\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Validating Coupon Before Payment - Mercado Pago API - curl\nDESCRIPTION: This snippet demonstrates how to validate a coupon by sending a POST request to the Mercado Pago API. It requires the authorization token, payer token, and coupon ID. Expected output includes a validation response indicating whether the coupon is valid and detailing the applicable discount, if any.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/create-discount-promise-with-coupon.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n'https://api.mercadopago.com/v2/wallet_connect/coupons' \\\n--header 'Authorization: <Bearer YOUR_ACCESS_TOKEN>' \\\n--header 'x-payer-token: <PAYER_TOKEN>' \\\n--header 'Content-Type: application/json' \\\n-d '{\\n    \"id\": \"<COUPON>\"\\n }'\n```\n\n----------------------------------------\n\nTITLE: Purpose Attribute Configuration for Wallet Purchases in JSON\nDESCRIPTION: This JSON snippet shows how to configure the purpose attribute for payment preferences to restrict transactions to registered users only. It indicates that setting 'purpose' to 'wallet_purchase' ensures compliance with the desired functionality. JSON format is utilized here.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"purpose\": \"wallet_purchase\",\n    \"items\": [\n        {\n            \"title\": \"Mi producto\",\n            \"quantity\": 1,\n            \"unit_price\": 75.76\n        }\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MercadoPagoDevicesSDK in iOS (Swift)\nDESCRIPTION: This Swift code initializes the MercadoPagoDevicesSDK in the AppDelegate of an iOS application. It's recommended to execute this in the didFinishLaunchingWithOptions event.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.en.md#2025-04-18_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport MercadoPagoDevicesSDK\n...\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        ...        \n        MercadoPagoDevicesSDK.shared.execute()\n        ...\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Payment Preferences in Java\nDESCRIPTION: Demonstrates searching and filtering payment preferences using multiple criteria like sponsor ID, external reference, site ID, and marketplace. Allows pagination with limit and offset parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/preferences.es.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nPreferenceClient client = new PreferenceClient();\n\nMap<String, Object> filters = new HashMap<>();\nfilters.put(\"sponsor_id\", \"undefined\");\nfilters.put(\"external_reference\", \"undefined\");\nfilters.put(\"site_id\", \"undefined\");\nfilters.put(\"marketplace\", \"undefined\");\n\nMPSearchRequest searchRequest =\n   MPSearchRequest.builder().limit(0).offset(0).filters(filters).build();\n\nclient.search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Creating Hidden Input Field for Device ID\nDESCRIPTION: Creates a hidden HTML input field with ID 'deviceId' that will automatically be populated with the device ID value by the Mercado Pago security script.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.en.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"hidden\" id=\"deviceId\">\n```\n\n----------------------------------------\n\nTITLE: Downloading a Settlement Report with Mercado Pago API\nDESCRIPTION: Downloads a specific settlement report file using its file name via a GET request to the Mercado Pago API. The request requires authentication via an access token. Replace :file_name with the actual filename retrieved from the list endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.es.md#2025-04-18_snippet_19\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\ \n    'https://api.mercadopago.com/v1/account/settlement_report/:file_name'\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json'\n);\n$data = array(\n    'access_token' => 'ENV_ACCESS_TOKEN'\n);\n$response = Requests::post('https://api.mercadopago.com/v1/account/settlement_report/:file_name', $headers, $data);\n```\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report/:file_name\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"GET\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\nresponse = requests.get('https://api.mercadopago.com/v1/account/settlement_report/:file_name', headers=headers)\n```\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report/:file_name',\n    method: 'GET',\n    headers: headers\n};\n\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\n\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Token - PHP Implementation\nDESCRIPTION: PHP implementation for refreshing Mercado Pago access tokens using the OAuth client. Requires client secret, client ID and refresh token as parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/renewal.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new OauthClient();\n  $request = new OAuthRefreshRequest();\n    $request->client_secret = \"CLIENT_SECRET\";\n    $request->client_id = \"CLIENT_ID\";\n    $request->refresh_token = \"REFRESH_TOKEN\";\n\n  $client->refresh($request);\n?>\n```\n\n----------------------------------------\n\nTITLE: CSV Structure Example for Batch Collection Processing\nDESCRIPTION: Example CSV file structure showing the required fields and format for batch collection processing. Fields are separated by semicolons and include payment details such as external reference, card ID, payer ID, amount, reason, echo data, and soft descriptor.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/batch-payments-vault-migration/batch-payments/input-format-batch-payments.en.md#2025-04-18_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nexternal_reference;card_id;payer_id;amount;reason;echo_data;soft_descriptor\n24324234332;3154;1234-1234;299;Example payment;random data;CompanyName\n24324234332;3154;1234-1234;Example payment;random data;CompanyName\n24324234332;3154;1234-1234;299;Example payment;random data;CompanyName\n24324234332;3154;1234-1234;299;Example payment;random data;CompanyName\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Methods using MercadoPago SDK Ruby\nDESCRIPTION: This Ruby snippet employs the MercadoPago SDK to get payment methods by setting an access token. It calls the payment_methods method and retrieves a response that contains the available payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pse-avanza.en.md#2025-04-18_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\npayment_methods_response = sdk.payment_methods.get()\npayment_methods = payment_methods_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago SDK in Java\nDESCRIPTION: This code snippet demonstrates how to create a payment using the Mercado Pago SDK in Java. It sets up custom headers, configures the payment client, and sends the payment data to the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/payment-submission.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest paymentCreateRequest =\n   PaymentCreateRequest.builder()\n       .transactionAmount(request.getTransactionAmount())\n       .token(request.getToken())\n       .installments(request.getInstallments())\n       .paymentMethodId(request.getPaymentMethodId())\n       .payer(\n           PaymentPayerRequest.builder()\n               .email(request.getPayer().getEmail())\n               .identification(\n                   IdentificationRequest.builder()\n                       .type(request.getPayer().getIdentification().getType())\n                       .number(request.getPayer().getIdentification().getNumber())\n                       .build())\n               .build())\n       .build();\n\nclient.create(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Markdown Site Configuration\nDESCRIPTION: YAML frontmatter defining supported sites/regions for the documentation\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/extra/reports-information-details.en.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsites_supported:\n  - mla\n  - mlb\n```\n\n----------------------------------------\n\nTITLE: Adding Intent Filter to AndroidManifest.xml\nDESCRIPTION: This snippet demonstrates how to add an intent filter to the AndroidManifest.xml file. This filter allows the application to receive intents for sending text data, which is necessary for initiating the account consultation process with Redelcom. It defines the action as `android.intent.action.SEND`, the category as `android.intent.category.DEFAULT`, and the data type as `text/*`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-query-and-pay-bills.es.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter> \n\t<action android:name=\"android.intent.action.SEND\" /> \n\t<category android:name=\"android.intent.category.DEFAULT\" /> \n\t<data android:mimeType=\"text/*\" /> \n</intent-filter>\n\n```\n\n----------------------------------------\n\nTITLE: Bad Request Error Response (Status 400)\nDESCRIPTION: This JSON snippet represents an error response with a status code of 400 (Bad Request). This indicates that one or more parameters in the request were incorrect or missing, such as an invalid splitter ID. The 'message' and 'cause' fields provide details about the error.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/refund-partial-amount.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"status\": \"400\",\n   \"error\":  \"bad_request\",\n   \"message\": \"Invalid splitter id.\",\n   \"cause\": [\n    {\n      \"code\":\"400048\",\n      \"message\": \"Invalid splitter id\",\n      \"data\": null\n    }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Criando Pagamento com API REST do Mercado Pago usando cURL\nDESCRIPTION: Este snippet demonstra como criar um pagamento usando a API REST do Mercado Pago diretamente com cURL. Ele envia uma requisição POST para o endpoint de pagamentos com os detalhes necessários no corpo da requisição.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/payment-submission.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n    -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n    'https://api.mercadopago.com/v1/payments' \\\n    -d '{\n          \"transaction_amount\": 100,\n          \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n          \"installments\": 1,\n          \"payment_method_id\": \"visa\",\n          \"issuer_id\": 310,\n          \"payer\": {\n            \"email\": \"PAYER_EMAIL_HERE\"\n          }\n    }'\n```\n\n----------------------------------------\n\nTITLE: Updating Payment Amount - React\nDESCRIPTION: This React component illustrates how to leverage the usePaymentBrick hook to update the payment amount when a button is clicked. It demonstrates the integration of a Payment component that handles payment submissions and takes customization options for payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/update-data.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { Payment, usePaymentBrick } from \"@mercadopago/sdk-react\";\nconst App = () => {\n  const { update } = usePaymentBrick();\n  const customization = {\n    paymentMethods: {\n      creditCard: \"all\",\n      debitCard: \"all\",\n    },\n  };\n  return (\n    <>\n      <button type=\"button\" onClick={() => update({ amount: 95 })}>\n        Update amount\n      </button>\n      <Payment\n        initialization={{ amount: 100 }}\n        customization={customization}\n        onSubmit={async (param) => {\n          console.log(param);\n        }}\n      />\n    </>\n  );\n};\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Structure Creation Response\nDESCRIPTION: The JSON response returned when successfully creating a report structure, containing the structure ID and other configuration details that will be used when generating reports.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": {{structure_id}},\n    \"version\": 0,\n    \"date_created\": null,\n    \"date_last_updated\": null,\n    \"name\": null,\n    \"file_format\": null,\n    \"columns\": null,\n    \"file_config\": null,\n    \"report_translation\": null,\n    \"include_withdraw\": null,\n    \"refund_detailed\": null,\n    \"show_fee_prevision\": null,\n    \"coupon_detailed\": null,\n    \"show_chargeback_cancel\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Available Banks for PSE Transactions with JavaScript\nDESCRIPTION: This JavaScript function fetches available payment methods and populates a select element with banks for PSE transactions. It highlights filtering banks from the retrieved payment methods and dynamically creating select options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pse-avanza.en.md#2025-04-18_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction setPse() {\n    fetch('/payment_methods')\n        .then(async function(response) {\n            const paymentMethods = await response.json();\n            const pse = paymentMethods.filter((method) => method.id === 'pse')[0];\n            const banksList = pse.financial_institutions;\n            const banksListElement = document.getElementById('banksList');\n            const selectElement = document.createElement('select');\n            selectElement.name = 'financialInstitution';\n\n            banksList.forEach(bank => {\n                const option = document.createElement('option');\n                option.value = bank.id;\n                option.textContent = bank.description;\n                selectElement.appendChild(option);\n            });\n\n            banksListElement.appendChild(selectElement);\n\n        }).catch(function(reason) {\n            console.error('Failed to get payment methods', reason);\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Mercado Pago API using cURL\nDESCRIPTION: This code snippet demonstrates how to create a payment using the Mercado Pago API directly with a cURL request. It sets up the necessary headers, including authorization and idempotency key, and sends the payment data to the API endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/payment-submission.en.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n    -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n    'https://api.mercadopago.com/v1/payments' \\\n    -d '{\n          \"transaction_amount\": 100,\n          \"token\": \"ff8080814c11e237014c1ff593b57b4d\",\n          \"installments\": 1,\n          \"payment_method_id\": \"visa\",\n          \"issuer_id\": 310,\n          \"payer\": {\n            \"email\": \"PAYER_EMAIL_HERE\"\n          }\n    }'\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Settlement Report List\nDESCRIPTION: Example JSON response from the settlement report list endpoint. The response contains an array of report objects, each with information like ID, user ID, date range, file name, creation method, and creation timestamp.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.es.md#2025-04-18_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"id\": 12345678,\n        \"user_id\": USER-ID,\n        \"begin_date\": \"2015-05-01T00:00:00Z\",\n        \"end_date\": \"2015-06-01T23:59:59Z\",\n        \"file_name\": \"settlement-report-USER_ID-2016-01-20-131015.csv\",\n        \"created_from\": \"manual\",\n        \"date_created\": \"2016-01-20T10:07:53.000-04:00\"\n    },\n    {\n        ...\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating PIX Payment Request\nDESCRIPTION: Code examples showing how to create a PIX payment request across different programming languages. Includes setting transaction amount, payer information, and handling idempotency keys for safe retries.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pix.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\Client\\Common\\RequestOptions;\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n \"transaction_amount\" => (float) $_POST['<TRANSACTION_AMOUNT>'],\n    \"payment_method_id\" => $_POST['<PAYMENT_METHOD_ID>'],\n    \"payer\" => [\n      \"email\" => $_POST['<EMAIL>']\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nimport { Payment, MercadoPagoConfig } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\nconst payment = new Payment(client);\n\npayment.create({\n    body: { \n        transaction_amount: req.transaction_amount,\n        description: req.description,\n        payment_method_id: req.paymentMethodId,\n            payer: {\n            email: req.email,\n            identification: {\n        type: req.identificationType,\n        number: req.number\n    }}},\n    requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n.then((result) => console.log(result))\n.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Creando pago con boleto bancario en Java\nDESCRIPTION: Código Java para crear un pago con boleto bancario utilizando el SDK de Mercado Pago. Incluye configuración de fecha de vencimiento, datos del pagador e identificación.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mlb.es.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest paymentCreateRequest =\n   PaymentCreateRequest.builder()\n       .transactionAmount(new BigDecimal(\"100\"))\n       .description(\"Título do produto\")\n       .paymentMethodId(\"bolbradesco\")\n       .dateOfExpiration(OffsetDateTime.of(2023, 1, 10, 10, 10, 10, 0, ZoneOffset.UTC))\n       .payer(\n           PaymentPayerRequest.builder()\n               .email(\"test@test.com\")\n               .firstName(\"Test\")\n               .lastName(\"User\")\n               .identification(\n                   IdentificationRequest.builder().type(\"CPF\").number(\"19119119100\").build())\n               .build())\n       .build();\n\nclient.create(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Get Issuer ID from Card BIN using Mercado Pago\nDESCRIPTION: This JavaScript function `getIssuers` retrieves the issuer bank ID based on the card's Bank Identification Number (BIN). It uses the Mercado Pago JavaScript SDK (`mp.getIssuers`) to fetch the issuer options. The function also calls `getInstallments` to update installment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/secure-fields-core.es.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Step #getIssuers\nconst getIssuers = async (bin) => {\n    try {\n      const paymentMethodId = document.getElementById('paymentMethodId').value;\n      const issuerElement = document.getElementById('form-checkout__issuer');\n      const issuers = await mp.getIssuers({ paymentMethodId, bin });\n      createSelectOptions(issuerElement, issuers);\n      getInstallments(bin);\n    } catch (e) {\n      console.error('error getting issuers: ', e)\n    }\n  };\n```\n\n----------------------------------------\n\nTITLE: Getting Paired Bluetooth Devices with MPManager SDK\nDESCRIPTION: Demonstrates how to retrieve a list of all paired bluetooth devices using the BluetoothDiscoverDevices class through MPManager. Returns an MPResponse containing a list of BluetoothDeviceModel objects.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/manage-connections.en.md#2025-04-18_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval bluetoothDiscoverDevices = MPManager.bluetooth.discover\n\nbluetoothDiscoverDevices.getPairedDevices { result ->\n   result\n       .doIfSuccess { devices ->\n           // Work with the list of paired devices\n       }\n       .doIfError { error ->\n           // Manage the error case if necessary\n       }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal BluetoothDiscoverDevices bluetoothDiscoverDevices = MPManager.INSTANCE.getBluetooth().getDiscover();\n\nfinal Function1<MPResponse<List<BluetoothDeviceModel>>, Unit> callback = (final MPResponse<List<BluetoothDeviceModel>> response) -> {\n if (response.getStatus() == ResponseStatus.SUCCESS) {\n   final List<BluetoothDeviceModel> devices = response.getData();\n   // Work with the list of paired devices\n } else {\n   // Manage the error case if necessary\n }\n return Unit.INSTANCE;\n};\n\nbluetoothDiscoverDevices.getPairedDevices(callback);\n```\n\n----------------------------------------\n\nTITLE: Processing Payments with MercadoPago in Java\nDESCRIPTION: This Java snippet shows how to set the access token and create a payment object for MercadoPago. The payment transaction details are configured and the payment is saved, with status output to the console. Requires MercadoPago Java SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMercadoPago.SDK.setAccessToken(\"ENV_ACCESS_TOKEN\");\n//...\nPayment payment = new Payment();\npayment.setTransactionAmount(100f)\n       .setToken(token)\n       .setDescription(\"Blue shirt\")\n       .setInstallments(installments)\n       .setPaymentMethodId(payment_method_id)\n       .setIssuerId(issuer_id)\n       .setPayer(new Payer()\n         .setEmail(\"john@yourdomain.com\"));\n// Save and create the payment\npayment.save();\n//...\n// Shows payment stauts\nSystem.out.println(payment.getStatus());\n//...\n```\n\n----------------------------------------\n\nTITLE: Settlement Report Configuration Response\nDESCRIPTION: This JSON response shows the updated configuration settings for settlement reports after a successful API request. It includes details on file naming, report content, timezone, notification emails, and report frequency.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.en.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"file_name_prefix\": \"settlement-report-USER_ID\",\n    \"show_fee_prevision\": false,\n    \"show_chargeback_cancel\": true,\n    \"scheduled\": false,\n    \"coupon_detailed\": true,\n    \"include_withdraw\": true,\n    \"shipping_detail\": true,\n    \"refund_detailed\": true,\n    \"display_timezone\": \"GMT-04\",\n    \"notification_email_list\": [\n        \"example@email.com\",\n        \"john@example.com\"\n    ],\n    \"frequency\": {\n        \"hour\": 0,\n        \"type\": \"monthly\",\n        \"value\": 1\n    },\n    \"columns\": [\n        {\n            \"key\": \"TRANSACTION_DATE\"\n        },\n        {\n            \"key\": \"SOURCE_ID\"\n        },\n        {\n            \"key\": \"EXTERNAL_REFERENCE\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Scanner Response in Java\nDESCRIPTION: This Java snippet shows how to handle the scanner response in the onActivityResult method. It uses the handleScannerResponse function of the CameraScanner class to process the result and handle success or error cases.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/camscanner-legacy.es.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void onActivityResult(final int requestCode, final int resultCode, final Intent data) {\n super.onActivityResult(requestCode, resultCode, data);\n\n final CameraScanner cameraScanner = MPManager.INSTANCE.getCameraScanner();\n final Function1<MPResponse<CameraScannerResponse>, Unit> callback = (final MPResponse<CameraScannerResponse> response) -> {\n\n   if (response.getStatus() == ResponseStatus.SUCCESS) {\n     final CameraScannerResponse cameraScannerResponse = response.getData();\n     // Manejar la respuesta exitosa\n     final String result = response.getData().getMessage();\n     // ... Hacer algo con la respuesta\n   } else {\n     // Manejar el error en la respuesta\n     final Exception errorMessage = response.getError();\n     // ... Hacer algo con el error\n   }\n   return Unit.INSTANCE;\n };\n\n cameraScanner.handleScannerResponse(this, resultCode, data, callback);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Settlement Report Configuration with Mercado Pago API (cURL)\nDESCRIPTION: This cURL request updates the settlement report configuration using the Mercado Pago API. It sets various attributes like file name prefix, detailed reporting options, and report frequency.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PUT \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/config' \\\n    -d '{\n        \"file_name_prefix\": \"settlement-report-USER_ID\",\n        \"show_fee_prevision\": false,\n        \"show_chargeback_cancel\": true,\n        \"detailed\": true,\n        \"coupon_detailed\": true,\n        \"shipping_detail\": true,\n        \"refund_detailed\": true,\n        \"extended\": false,\n        \"frequency\": {\n            \"hour\": 0,\n            \"type\": \"monthly\",\n            \"value\": 1\n        }\n    }'\n```\n\n----------------------------------------\n\nTITLE: Adding Mercado Pago as a Gateway - cURL\nDESCRIPTION: This cURL command is used to add Mercado Pago as a payment gateway to Spreedly. It includes the necessary authentication and payload structure that specifies the gateway type, country, and access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/spreedly/spreedly.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\n$ curl https://core.spreedly.com/v1/gateways.json \\\n-u 'C7cRfNJGODKh4Iu5Ox3PToKjniY:4UIuWybmdythfNGPqAqyQnYha6s451ri0fYAo4p3drZUi7q2Jf4b7HKg8etDtoKJ' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\\n        \"gateway_type\": \"mercado_pago\",\\n        \"country\": \"AR\",\\n        \"access_token\": \"ENV_ACCESS_TOKEN\"\\n      }'\n```\n\n----------------------------------------\n\nTITLE: Including Required Scripts for HTML Receipt Printing - HTML\nDESCRIPTION: This snippet demonstrates how to include the necessary JavaScript files to enable HTML printing functionality with the Point Smart printer. Ensure these scripts are included before the closing </body> tag.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/point-smart-printer.es.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"share/mobilewebkit.js\" type=\"text/javascript\"></script>\n<script src=\"share/smart_webkit.js\" type=\"text/javascript\"></script>\n```\n\n----------------------------------------\n\nTITLE: Implementing 575x40px Payment Method Banner\nDESCRIPTION: HTML code for embedding a 575x40 pixel Mercado Pago payment methods banner advertising 10 interest-free installments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/dez.en.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/PSJ/575x40_banner_psj_10x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"575\" height=\"40\"/>\n```\n\n----------------------------------------\n\nTITLE: Test Credentials Table\nDESCRIPTION: Markdown table describing test environment Public Key and Access Token credentials.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/credentials/credentials.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Tipo | Descrição |\n|---|---|\n| Public Key | A chave pública da aplicação é geralmente utilizada no frontend. Permite, por exemplo, acessar informações sobre os meios de pagamento e criptografar os dados do cartão. |\n| Access Token | Chave privada da aplicação que sempre deve ser utilizada no backend para gerar pagamentos. É essencial manter essa informação segura em seus servidores. |\n```\n\n----------------------------------------\n\nTITLE: Terminal ID Response Format\nDESCRIPTION: JSON response structure from the terminal ID query endpoint. Returns a terminal field containing the unique numerical identifier for the device.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/api-get-terminal.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"terminal\": \"3127\"\n}\n```\n\n----------------------------------------\n\nTITLE: Spreedly Purchase Request\nDESCRIPTION: This curl command demonstrates how to make a purchase request to the Spreedly API, specifying the gateway token, payment method token, amount, and currency code. It also includes authentication credentials and content type header.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/spreedly/spreedly.en.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\n$ curl https://core.spreedly.com/v1/gateways/6DqX57I6fHgIuUkVN2HGszjDSu1/purchase.json \\\n  -u 'C7cRfNJGODKh4Iu5Ox3PToKjniY:4UIuWybmdythfNGPqAqyQnYha6s451ri0fYAo4p3drZUi7q2Jf4b7HKg8etDtoKJ' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"transaction\": {\n          \"payment_method_token\": \"3uAIR1sSCVJG90obnCN1Ip1BY3b\",\n          \"amount\": 100,\n          \"currency_code\": \"[FAKER][CURRENCY][ACRONYM]\",\n          \"retain_on_success\": true\n        }\n      }'\n```\n\n----------------------------------------\n\nTITLE: MercadoPago.js Library Import\nDESCRIPTION: Demonstrates methods for importing the MercadoPago JavaScript SDK into web projects using HTML script tag or npm package\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.es.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<body>\n<script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n```\n\n----------------------------------------\n\nTITLE: Criando Pagamento com SDK do Mercado Pago em Node.js\nDESCRIPTION: Este snippet mostra como criar um pagamento usando o SDK do Mercado Pago em Node.js. Ele configura o cliente com o token de acesso, cria um objeto de pagamento, e envia os detalhes do pagamento para a API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/payment-submission.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nconst mercadopago = require('mercadopago');\nimport { MercadoPagoConfig, Payment } from '@src/index';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>', options: { timeout: 5000 } });\n\nconst payment = new Payment(client);\n\npayment\n  .create({\n    body: {\n      transaction_amount: 100,\n      token: '<TOKEN>',\n      description: '<DESCRIPTION>',\n      installments: 1,\n      payment_method_id: '<PAYMENT_METHOD_ID>',\n      issuer_id: 310,\n      payer: {\n        email: '<EMAIL>',\n        identification: {\n          number: '12345678909',\n          type: 'CPF',\n        },\n      },\n    },\n  }).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Requesting User Authorization - Mercado Pago Argentina\nDESCRIPTION: This curl command requests user authorization for payment management in Argentina. It uses the client ID, response type, platform ID, and redirect URI. Ensure that <APP_ID> and <REDIRECT_URI> are replaced with valid values.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/configuration.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl \"https://auth.mercadopago.com.ar/authorization?client_id=<APP_ID>&response_type=code&platform_id=mp&redirect_uri=<REDIRECT_URI>\"\n```\n\n----------------------------------------\n\nTITLE: Available Payments for MLU\nDESCRIPTION: This section specifies the available payment methods for the MLU region when using Mercado Pago with Tiendanube. It includes credit cards, debit cards, Mercado Pago balance, Efectivo, and ATM.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/nuvemshop/landing.en.md#2025-04-18_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"available_payments: credit, debit, mercadopago, efectivo, atm\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Brick Button Text and Action in React\nDESCRIPTION: This snippet shows how to customize both the action and value proposition texts of the Wallet Brick button using React JSX. It sets the action to 'buy' and the value proposition to 'security_details'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-texts.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n texts: {\n   action: 'buy',\n   valueProp: 'security_details',\n },\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Scanner Response in Kotlin\nDESCRIPTION: Implements the onActivityResult method to handle the response from the QR code or barcode scanning activity using the handleScannerResponse function of the CameraScanner class.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/camscanner-legacy.en.md#2025-04-18_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n   super.onActivityResult(requestCode, resultCode, data)\n\n   val cameraScanner = MPManager.cameraScanner\n\n   cameraScanner.handleScannerResponse(this, resultCode, data) { response ->\n       response.doIfSuccess { result ->\n           // Manage successful response\n           val status = result.status\n           val message = result.message\n           // ... Do something with the response\n       }.doIfError { error ->\n           // Manage the error in the response\n           val errorMessage = error.message\n           // ... Do something with the error\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining Credentials via OAuth API\nDESCRIPTION: This snippet shows how to obtain user credentials using the OAuth API. It requires `client_id`, `client_secret`, `authorization_code`, `redirect_uri`, and a unique `state` value.  The request grants access to manage the user's sales.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/configuration.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: curl\nCODE:\n```\n\"curl -X POST \\\n     -H 'accept: application/json' \\\n     -H 'content-type: application/x-www-form-urlencoded' \\\n     'https://api.mercadopago.com/oauth/token' \\\n     -d 'client_id=<CLIENT_ID>' \\\n     -d 'client_secret=<CLIENT_SECRET>' \\\n     -d 'grant_type=authorization_code' \\\n     -d 'code=<AUTHORIZATION_CODE>' \\\n     -d 'redirect_uri=<REDIRECT_URI>' \\\n     -d 'state=<RANDOM_ID>'\"\n```\n\n----------------------------------------\n\nTITLE: Criando pagamento PagoEfectivo ATM com Java\nDESCRIPTION: Exemplo em Java para criar um pagamento PagoEfectivo ATM usando o Mercado Pago SDK. O código configura cabeçalhos personalizados para idempotência e envia os parâmetros necessários para processar o pagamento.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mpe.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\nPaymentCreateRequest paymentCreateRequest =\n   PaymentCreateRequest.builder()\n       .transactionAmount(new BigDecimal(\"100\"))\n       .description(\"Product title\")\n       .paymentMethodId(\"pagoefectivo_atm\")\n       .payer(\n          PaymentPayerRequest.builder()\n              .email(\"test@test.com\").build()\n       )\n\t.metadata(\n          Map.of(\"payment_mode\", \"online\")\n       )\n      .build();\nclient.create(paymentCreateRequest, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Card Updater Notification Example in JSON\nDESCRIPTION: Example of a Webhooks notification sent when a card is updated through the Card Updater feature. It includes details such as customer ID, new and old card IDs, and other metadata.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/notification-additional-info.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"card.updated\",\n  \"api_version\": \"v1\",\n  \"application_id\": 8339021212080291,\n  \"data\": {\n    \"customer_id\": \"12345678-aluyasdhfyt\",\n    \"new_card_id\": 50000102202,\n    \"old_card_id\": 50000006036\n  },\n  \"date_created\": \"2024-01-11T15:23:53-03:00\",\n  \"id\": \"a47fc06844bf4e418a03aeab1479c496\",\n  \"live_mode\": true,\n  \"type\": \"automatic-payments\",\n  \"user_id\": 1197520450,\n  \"version\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Back URLs in Node.js\nDESCRIPTION: This Node.js code snippet shows how to set up back URLs and auto-return for a MercadoPago preference. It defines success, failure, and pending URLs, and enables automatic return for approved payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_21\n\nLANGUAGE: node\nCODE:\n```\nvar preference = {}\npreference = {\n  // ...\n  \"back_urls\": {\n        \"success\": \"https://www.tu-sitio/success\",\n        \"failure\": \"http://www.tu-sitio/failure\",\n        \"pending\": \"http://www.tu-sitio/pending\"\n    },\n    \"auto_return\": \"approved\",\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Reserved Amount in MercadoPago - Node.js\nDESCRIPTION: This Node.js example showcases capturing a partial payment value from a reserved amount using the 'mercadopago' package. The code configures a capture with specific transaction details and executes the operation asynchronously.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/capture-authorized-payment.en.md#2025-04-18_snippet_9\n\nLANGUAGE: Node\nCODE:\n```\nvar Mercadopago = require('mercadopago');\nMercadopago.configurations.setAccessToken(config.access_token);\n\nlet captureInfo = {id: 123, transaction_amount: 5}\n\nMercadopago.payment.capturePartial(captureInfo, Mercadopago, (error, response) => {\nif (error){\nconsole.log(error);\n}else{\nconsole.log(response)\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Customer and Card in MercadoPago using multiple languages\nDESCRIPTION: This code demonstrates how to create a customer and associate a card in MercadoPago using their API. It requires setting an access token, creating a customer with an email, and then associating a card token with that customer. The implementation helps store payment information securely for future purchases.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/create-customer-and-card.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n  \n  $client_customer = new CustomerClient();\n  $customer = $client_customer->create([\"email\" => \"my.user@example.com\"]);\n  $client = new CustomerCardClient();\n  $customer_card = $client->create($customer->id, [\"token\" => \"your_card_token\"]);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'YOUR_ACCESS_TOKEN' });\nconst customer = new Customer(client);\n\nconst body = {\n  email: \"my.user@example.com\"\n};\n\ncustomer.create({ body: body }).then((result) => {\n  const customerCard = new CustomerCard(client);\n\n  const body = {\n    token : result.token,\n  };\n\n  customerCard.create({ customerId: 'customer_id', body })\n     .then((result) => console.log(result));\n})\n```\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nCustomerClient customerClient = new CustomerClient();\nCustomerCardClient customerCardClient = new CustomerCardClient();\n\nCustomerRequest customerRequest = CustomerRequest.builder()\n   .email(\"john@test.com\")\n   .build();\nCustomer customer = customerClient.create(customerRequest);\n\nCustomerCardIssuer issuer = CustomerCardIssuer.builder()\n   .id(\"3245612\")\n   .build();\n\nCustomerCardCreateRequest cardCreateRequest = CustomerCardCreateRequest.builder()\n   .token(\"9b2d63e00d66a8c721607214cedaecda\")\n   .issuer(issuer)\n   .paymentMethodId(\"debit_card\")\n   .build();\n\ncustomerCardClient.create(customer.getId(), cardCreateRequest);\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustomer_request = {\n  email: 'john@yourdomain.com'\n}\ncustomer_response = sdk.customer.create(customer_request)\ncustomer = customer_response[:response]\n\ncard_request = {\n  token: '9b2d63e00d66a8c721607214cedaecda',\n  payment_method_id: 'visa'\n}\ncard_response = sdk.card.create(customer['id'], card_request)\ncard = card_response[:response]\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar customerRequest = new CustomerRequest\n{\n    Email = \"test_payer_12345@testuser.com\",\n};\nvar customerClient = new CustomerClient();\nCustomer customer = await customerClient.CreateAsync(customerRequest);\n\nvar cardRequest = new CustomerCardCreateRequest\n{\n    Token = \"9b2d63e00d66a8c721607214cedaecda\"\n};\nCustomerCard card = await customerClient.CreateCardAsync(customer.Id, cardRequest);\n```\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\ncustomer_data = {\n  \"email\": \"test_payer_12345@testuser.com\"\n}\ncustomer_response = sdk.customer().create(customer_data)\ncustomer = customer_response[\"response\"]\n\ncard_data = {\n  \"token\": \"9b2d63e00d66a8c721607214cedaecda\",\n  \"payment_method_id\": \"visa\"\n}\ncard_response = sdk.card().create(customer[\"id\"], card_data)\ncard = card_response[\"response\"]\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/customercard\"\n)\n\nfunc main() {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tcustomerClient := customer.NewClient(cfg)\n\tcustomerCardClient := customercard.NewClient(cfg)\n\n\tcustomerRequest := customer.Request{Email: \"{{EMAIL}}\"}\n\n\tcustomerResource, err := customerClient.Create(context.Background(), customerRequest)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tcardRequest := customercard.Request{Token: \"{{CARD_TOKEN}}\"}\n\n\tcardResource, err := customerCardClient.Create(context.Background(), customerResource.ID, cardRequest)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(cardResource)\n}\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n  'https://api.mercadopago.com/v1/customers/CUSTOMER_ID/cards' \\\n  -d '{\"token\": \"9b2d63e00d66a8c721607214cedaecda\", \"payment_method_id\": \"visa\"}'\n```\n\n----------------------------------------\n\nTITLE: Chargebacks Notification Example in JSON\nDESCRIPTION: Example of a Webhooks notification sent when a chargeback is initiated or its status is changed. It includes details about the chargeback, payment, and associated metadata.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/notification-additional-info.en.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"actions\":[\"changed_case_status\"],\n    \"api_version\":\"v1\",\n    \"application_id\":9007201037432480,\n    \"data\":{\n        \"checkout\":\"PRO\",\n        \"date_updated\":\"0001-01-01T00:00:00Z\",\n        \"id\":217000061307271000,\n        \"payment_id\":81034165129,\n        \"product_id\":\"BC32A57TRPP001U8NHHG\",\n        \"site_id\":\"MLA\",\n        \"transaction_intent_id\":\"\"\n        },\n    \"date_created\":\"2024-07-02T22:03:24-04:00\",\n    \"id\":114544942708,\n    \"live_mode\":true,\n    \"type\":\"topic_chargebacks_wh\",\n    \"user_id\":425424311,\n    \"version\":1720427447\n}\n```\n\n----------------------------------------\n\nTITLE: Exchange Rate API Response for Mercado Pago Cross Border\nDESCRIPTION: This snippet shows a sample response from the Exchange Rate API. It includes creation date, base and quote currencies, a unique ID, inverse rate, and the conversion rate between USD and the local currency.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.en.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"creation_date\": \"2018-04-13T05:15:19.752-04:00\",\n  \"currency_base\": \"USD\",\n  \"currency_quote\": \"[FAKER][CURRENCY][ACRONYM]\",\n  \"id\": \"95f77580-602a-4086-9cec-c3b5afad2c5f\",\n  \"inv_rate\": 0.05458033,\n  \"rate\": 18.3216177\n}\n```\n\n----------------------------------------\n\nTITLE: Payment Operations Reference Table in Markdown\nDESCRIPTION: A markdown table listing the main payment API endpoints and their purposes, including links to detailed documentation for creating, searching, retrieving, and updating payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/apiref-payments.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Action|Description|\n|---|---|\n|[Create payment](https://www.mercadopago[FAKER][URL][DOMAIN]/developers/en/reference/payments/_payments/post)|Create a payment and add all the information you need.|\n|[Search payments](https://www.mercadopago[FAKER][URL][DOMAIN]/developers/en/reference/payments/_payments_search/get)|Search and return payments made in the last twelve months from the search date.|\n|[Get payment](https://www.mercadopago[FAKER][URL][DOMAIN]/developers/en/reference/payments/_payments_id/get)|See all the information of a payment through the payment ID.|\n|[Update payment](https://www.mercadopago[FAKER][URL][DOMAIN]/developers/en/reference/payments/_payments_id/put)|Renew the details of a payment when you need it.|\n```\n\n----------------------------------------\n\nTITLE: Setting Mercado Pago Credentials in Python\nDESCRIPTION: This Python snippet demonstrates how to import the Mercado Pago SDK and configure it with the appropriate access token for handling payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.en.md#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Mercado Pago SDK\nimport mercadopago\n# Add Your credentials\nsdk = mercadopago.SDK(\"PROD_ACCESS_TOKEN\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Back URLs in Mercado Pago SDK - Ruby\nDESCRIPTION: A Ruby example demonstrating how to specify back URLs for different payment outcomes using the Mercado Pago SDK. The snippet also shows how to use the auto_return attribute for redirection upon approval. No special dependencies other than the Mercado Pago Ruby SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/redirection.en.md#2025-04-18_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\n# ...\\npreference_data = {\\n  # ...\\n  back_urls = {\\n    success: 'https://www.tu-sitio/success',\\n    failure: 'https://www.tu-sitio/failure',\\n    pending: 'https://www.tu-sitio/pendings'\\n  },\\n  auto_return: 'approved'\\n  # ...\\n}\\n# ...\n```\n\n----------------------------------------\n\nTITLE: Payment Response Structure\nDESCRIPTION: Example JSON response showing the structure of a payment object returned by the API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/retrieving-payments.en.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 2798247250,\n  \"date_created\": \"2017-06-16T21:10:06.000-04:00\",\n  \"date_approved\": \"2017-06-16T21:10:06.000-04:00\",\n  \"date_last_updated\": \"2017-06-28T19:39:41.000-04:00\",\n  \"date_of_expiration\": null,\n  \"money_release_date\": \"2017-06-21T21:10:06.000-04:00\",\n  \"operation_type\": \"regular_payment\",\n  \"payment_method_id\": \"visa\",\n  \"payment_type_id\": \"credit_card\",\n  \"status\": \"approved\",\n  \"status_detail\": \"accredited\",\n  \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n  \"description\": \"Telefono Celular iPhone 7\",\n  ...,\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Store External ID with PUT Request - JavaScript\nDESCRIPTION: This snippet demonstrates how to perform a PUT request to update the external ID for a specified store using its store ID and OAuth access token. It includes the endpoint and highlights the requirement for proper authentication.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-delivery/change-store-external-id.en.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst storeId = 'exampleStoreId';\nconst accessToken = 'exampleAccessToken';\nconst externalId = 'exampleExternalId';\n\nfetch(`https://api.example.com/proximity-integration/stores/${storeId}/external_id`, {\n    method: 'PUT',\n    headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ external_id: externalId })\n}).then(response => response.json()).then(data => console.log(data)).catch(error => console.error('Error:', error));\n```\n\n----------------------------------------\n\nTITLE: Creating Open Finance Payment with PHP SDK\nDESCRIPTION: Code to create a payment using Open Finance through Mercado Pago's PHP SDK. The example shows how to initialize a payment with required parameters including the point_of_interaction field set to 'openfinance'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/advanced-openFinance.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nMercadoPago\\SDK::setAccessToken(\"access_token\");\n$payment = new MercadoPago\\Payment();\n$payment->transaction_amount = 100;\n$payment->description = \"Título do produto\";\n$payment->payment_method_id = \"pix\";\n$payment->payer = array(\n    \"email\" => \"test@test.com\",\n    \"first_name\" => \"Test\",\n    \"last_name\" => \"User\",\n    \"identification\" => array(\n        \"type\" => \"CPF\",\n        \"number\" => \"19119119100\"\n    ),\n);\n$payment->point_of_interaction = array(\n\"linked_to\" => \"openfinance\"\n);\n$payment->save();\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Bancario Payment Form\nDESCRIPTION: HTML form for capturing customer and payment information for boleto bancario payments. The form includes fields for customer personal information, document type and number, and hidden fields for transaction amount and description.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.es.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form id=\"form-checkout\" action=\"/process_payment\" method=\"post\">\n    <div>\n      <div>\n        <label for=\"payerFirstName\">Nombre</label>\n        <input id=\"form-checkout__payerFirstName\" name=\"payerFirstName\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"payerLastName\">Appelido</label>\n        <input id=\"form-checkout__payerLastName\" name=\"payerLastName\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"email\">E-mail</label>\n        <input id=\"form-checkout__email\" name=\"email\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"identificationType\">Tipo de documento</label>\n        <select id=\"form-checkout__identificationType\" name=\"identificationType\" type=\"text\"></select>\n      </div>\n      <div>\n        <label for=\"identificationNumber\">Número del documento</label>\n        <input id=\"form-checkout__identificationNumber\" name=\"identificationNumber\" type=\"text\">\n      </div>\n    </div>\n\n    <div>\n      <div>\n        <input type=\"hidden\" name=\"transactionAmount\" id=\"transactionAmount\" value=\"100\">\n        <input type=\"hidden\" name=\"description\" id=\"description\" value=\"Nome do Produto\">\n        <br>\n        <button type=\"submit\">Pagar</button>\n      </div>\n    </div>\n  </form>\n```\n\n----------------------------------------\n\nTITLE: Initiating HTML Printer with URL\nDESCRIPTION: This Javascript code shows how to initiate the HTML printer using the `launchPrint` function, providing a URL as the data parameter. The `callbackResult` function handles the result of the printing operation. It checks for success or error and provides error details if the printing fails.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/point-smart-printer.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlaunchPrint(\"receipt/index.html?product_value=300&taxes=45&total=345\",      \n    callbackResult);\n\nfunction callbackResult(result, error) {\n   if (result == 'success') {\n       // Escreva o código com sucesso aqui\n   } else {\n       //'error' tem informações detalhadas de erro, como \"outOfPaper\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Payment Expiration Date in Multiple Languages\nDESCRIPTION: Demonstrates how to set the payment expiration date using ISO 8601 date format across different programming languages. The expiration date must be between 1-30 days from the invoice date.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$payment->date_of_expiration = \"2020-05-30T23:59:59.000-04:00\";\n```\n\nLANGUAGE: node\nCODE:\n```\ndate_of_expiration: \"2020-05-30T23:59:59.000-04:00\",\n```\n\nLANGUAGE: java\nCODE:\n```\npayment.setDateOfExpiration(\"2020-05-30T23:59:59.000-04:00\")\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndate_of_expiration: '2020-05-30T23:59:59.000-04:00',\n```\n\nLANGUAGE: csharp\nCODE:\n```\npaymentCreateRequest.DateOfExpiration = DateTime.Parse(\"2020-05-30T23:59:59.000-04:00\");\n```\n\nLANGUAGE: python\nCODE:\n```\n\"date_of_expiration\": \"2020-05-30T23:59:59.000-04:00\"\n```\n\nLANGUAGE: curl\nCODE:\n```\n\"date_of_expiration\": \"2020-05-30T23:59:59.000-04:00\",\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Request Using cURL\nDESCRIPTION: This cURL command illustrates how to send a payment creation request to the Mercado Pago API. It includes authentication headers, payment details, and customer information in JSON format. The command also incorporates optional parameters for payment authentication.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-external-mpi.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: cURL\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\\n--header 'x-idempotency-key: {IDEMPOTENCY_KEY} \\\\n--header 'Authorization: Bearer {ACCESS_TOKEN}' \\\\n--header 'Content-Type: application/json' \\\\n--data-raw '{\\n   \"description\": \"{PAYMENT_DESCRIPTION}\",\\n   \"installments\": 1,\\n   \"payer\": {\\n       \"first_name\": \"{FIRST_NAME}\\\",\\n       \"last_name\": \"{LAST_NAME}\\\",\\n       \"address\": {},\\n       \"identification\": {\\n           \"number\": \"{IDENTIFICATION_NUMBER}\\\",\\n           \"type\": \"{IDENTIFICATION_TYPE}\"\\n       },\\n       \"email\": \"{EMAIL}\"\\n   },\\n   \"payment_method_id\": \"{PAYMENT_METHOD_ID}\",\\n   \"token\": \"{CARD_TOKEN}\"\\n   \"payment_method\": {\\n      \"type\": \"credit_card\",\\n      \"data\": {\\n         \"authentication\": {\\n            \"type\": \"external_threeds\",\\n            \"cryptogram\": \"<<String>>\",\\n            \"three_ds_server_trans_id\": \"<<String>>\",\\n            \"eci\": \"<<String>>\",\\n            \"ds_trans_id\": \"<<String>>\",\\n            \"acs_trans_id\": \"<<String>>\",\\n            \"three_ds_version\": \"<<String>>\",\\n            \"authentication_status\": \"<<String>>\"\\n         }\\n      }\\n   },\\n   \"statement_descriptor\": \"{STATEMENT_DESCRIPTOR}\\\",\\n   \"transaction_amount\": {AMOUNT}\\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Item Preference with cURL\nDESCRIPTION: This snippet demonstrates creating a preference with multiple items using a cURL command. It shows how to send a POST request to the Mercado Pago API with the preference data in JSON format.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_19\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n  'https://api.mercadopago.com/checkout/preferences' \\\n  -H 'Content-Type: application/json' \\\n  -H 'cache-control: no-cache' \\\n  -H 'Authorization: Bearer PROD_ACCESS_TOKEN' \\\n  -d '{\n\t\"items\": [\n\t{\n\t\t\"id_product\":1,\n\t\t\"quantity\":1,\n\t\t\"unit_price\": 234.33,\n\t\t\"titulo\":\"Mi producto\"\n\t},\n\t{\n\t\t\"id_product\":2,\n\t\t\"quantity\":2,\n\t\t\"unit_price\": 255.33,\n\t\t\"titulo\":\"Mi producto 2\"\n\t}\n]\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Card Payment with Mercado Pago Ruby SDK\nDESCRIPTION: Demonstrates creating a card payment using the Mercado Pago Ruby SDK. Sets up the SDK with an access token, configures custom headers, and sends a payment request with transaction and payer information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-cardform.en.md#2025-04-18_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_data = {\ntransaction_amount: params[:transactionAmount].to_f,\ntoken: params[:token],\ndescription: params[:description],\ninstallments: params[:installments].to_i,\npayment_method_id: params[:paymentMethodId],\npayer: {\nemail: params[:email],\nidentification: {\ntype: params[:identificationType],\nnumber: params[:identificationNumber]\n}\n}\n}\n \npayment_response = sdk.payment.create(payment_data, custom_request_options)\npayment = payment_response[:response]\n \nputs payment\n```\n\n----------------------------------------\n\nTITLE: Retrieve Transaction Information via API (cURL)\nDESCRIPTION: This cURL command demonstrates how to retrieve transaction information from the Mercado Pago API. It sends a GET request to the specified endpoint with an authorization header containing the access token.  The `transaction_intent_id` and `access_token` placeholders need to be replaced with actual values.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.es.md#2025-04-18_snippet_11\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request GET 'https://api.mercadopago.com/v1/transaction-intents/{{transaction_intent_id}}' \\\n--header 'Authorization: Bearer {{access_token}}'\n```\n\n----------------------------------------\n\nTITLE: Uploading Documentation for Chargeback Dispute via Mercado Pago API\nDESCRIPTION: This cURL command demonstrates how to upload documentation for a chargeback dispute to Mercado Pago's API. It allows sending multiple files as part of the dispute evidence. The files can be .jpg, .png, or .pdf and should not exceed 10mb in total size.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/chargebacks/how-to-manage.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST  \\\n-F 'files[]=@/path/to/file/file1.png' \\\n-F 'files[]=@/path/to/file/file2.pdf' \\\n-H 'Authorization: Bearer <ACCESS_TOKEN>' \\\nhttps://api.mercadopago.com/v1/chargebacks/ID/documentation\n```\n\n----------------------------------------\n\nTITLE: Performing GET Request to Print Receipt PDF\nDESCRIPTION: This snippet outlines how to send a GET request to print a receipt in PDF format using shipment_id and access_token. Dependencies include OAuth for generating the access_token. The expected input parameters are shipment_id and access_token, and the output will be a PDF receipt. It is important to note that this operation is not allowed if the order status is canceled or sent.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-delivery/print-order-receipt.en.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /proximity-integration/shipments/{shipment_id}/print_label_pdf\n```\n\n----------------------------------------\n\nTITLE: Activating PDV Mode via PATCH Request\nDESCRIPTION: This snippet demonstrates how to activate Point of Sale (PDV) mode on a Mercado Pago Point device using a PATCH request to the `/point/integration-api/devices/{device-id}` endpoint. The `device-id` should be replaced with the actual device ID obtained from the 'Obter dispositivos' API call. The request includes the `Authorization` header with the user's access token and sets the `operating_mode` to `PDV` in the request body.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/configure-devices-pdv.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PATCH \\\n      'https://api.mercadopago.com/point/integration-api/devices/{device-id}' \\\n       --h 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n       -H 'Content-Type: application/json' \\\n      -d '{\n  \"operating_mode\": \"PDV\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Preference for Wallet Purchase in C#\nDESCRIPTION: This C# snippet demonstrates how to create a Mercado Pago preference for Wallet purchases. It uses the `PreferenceClient` from the Mercado Pago .NET SDK and sets the `Purpose` property to `wallet_purchase`. The code defines the preference items and creates a `PreferenceRequest` before creating the preference asynchronously.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mp-wallet.en.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Create the preference request object\nvar request = new PreferenceRequest\n{\nItems = new List<PreferenceItemRequest>\n{\nnew PreferenceItemRequest\n{\nTitle = \"My product,\nquantity = 1,\nCurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\nUnitPrice = 75m,\n},\n},\nPurpose = \"wallet_purchase\",\n};\n// Create the preference\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Partial Refund Request using cURL\nDESCRIPTION: This snippet demonstrates how to make a partial refund request to the Mercado Pago API using cURL. It specifies the endpoint, headers (including authorization and idempotency key), and the JSON payload containing the refund amount. The request is a POST request to the refunds endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/refund-partial-amount.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n'https://api.mercadopago.com/v1/advanced_payments/ADVANCED_PAYMENT_ID/refunds' \\\n  -H 'X-Idempotency-Key: IDEMPOTENCY_KEY' \\\n  -H 'Authorization: Bearer ACCESS_TOKEN' \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json' \\\n  -d '{\n        \"amount\":25\n      }'\n```\n\n----------------------------------------\n\nTITLE: Payment Response Structure\nDESCRIPTION: Example JSON response structure from the Mercado Pago API after creating a cash payment. Shows payment status, transaction details, and external resource URL for payment instructions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mlm.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n {\n    ...,\n    \"id\": 5466310457,\n    \"status\": \"pending\",\n    \"status_detail\": \"pending_waiting_payment\",\n    ...,\n    \"transaction_details\": {\n        \"net_received_amount\": 0,\n        \"total_paid_amount\": 100,\n        \"overpaid_amount\": 0,\n        \"external_resource_url\": \"https://www.mercadopago.com.mx/payments/123456/ticket?caller_id=123456&payment_method_id=oxxo&payment_id=123456&payment_method_reference_id=123456\",\n        \"installment_amount\": 0,\n        \"financial_institution\": null,\n        \"payment_method_reference_id\": \"1234567890\"\n    }\n }\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment with MercadoPago SDK (Python)\nDESCRIPTION: This Python snippet initializes a payment using the MercadoPago SDK. It defines payment parameters like transaction amount, token, description, installments, payment method ID, issuer ID, and payer email. It then creates the payment and retrieves its response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.es.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npayment_data = {\n    \"transaction_amount\": 100,\n    \"token\": token,\n    \"description\": \"Blue shirt\",\n    \"installments\": installments,\n    \"payment_method_id\": payment_method_id,\n    \"issuer_id\": issuer_id,\n    \"payer\": {\n        \"email\": \"john@yourdomain.com\"\n    }\n}\n\n# Save and create the payment\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n\n```\n\n----------------------------------------\n\nTITLE: Dynamically Importing Checkout Component in Next.js\nDESCRIPTION: This snippet demonstrates how to dynamically import the CheckoutMercadoPago component within a Next.js page while disabling server-side rendering. The component is responsible for rendering the payment interface provided by Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/possible-errors.es.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n//index.tsx\n\nimport Head from \"next/head\";\nimport styles from \"../styles/Home.module.css\";\nimport dynamic from \"next/dynamic\";\n\nconst CheckoutMercadoPago = dynamic(() => import(\"./checkoutMercadoPago\"), {\n  ssr: false,\n});\n\nexport default function Home() {\n  return (\n    <>\n      <Head>\n        <title>Checkout Brick + NextJS</title>\n        <meta name=\"description\" content=\"Generated by create next app\" />\n      </Head>\n      <main className={styles.main}>\n        <CheckoutMercadoPago />\n      </main>\n    </>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Refunding with Mercado Pago in Ruby\nDESCRIPTION: This Ruby snippet initializes the Mercado Pago SDK with the access token and constructs a refund request with the appropriate headers. It includes data for the refund amount and utilizes custom request options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.es.md#2025-04-18_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\ndata = {\n amount: 20\n}\n\ncustom_headers = {\n 'X-Render-In-Process-Refunds': 'true'\n}\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\nrefund = sdk.refund.create(payment_id, refund_data: data, request_options: custom_request_options)\n```\n\n----------------------------------------\n\nTITLE: Creating Mercado Pago Preference using cURL\nDESCRIPTION: This cURL command creates a preference by sending a POST request to the Mercado Pago API. It includes an authorization token, sets the content type, and provides item details in the request body.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.en.md#2025-04-18_snippet_18\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n'https://api.mercadopago.com/checkout/preferences' \\\n-H 'Content-Type: application/json' \\\n-H 'cache-control: no-cache' \\\n-H 'Authorization: Bearer **PROD_ACCESS_TOKEN**' \\\n-d '{\n  \"purpose\": \"wallet_purchase\",\n  \"items\": [\n      {\n          \"title\": \"My product\",\n          \"quantity\": 1,\n          \"unit_price\": 75 // item unit price, must be an integer.\n      }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Open Finance Payment with Node.js SDK\nDESCRIPTION: This code shows how to implement Open Finance payments using Mercado Pago's Node.js SDK. It configures a payment with the necessary parameters including transaction amount, payment method as Pix, and the Open Finance indicator.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/advanced-openFinance.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmercadopago.configurations.setAccessToken(\"access_token\");\nvar payment = {\n    transaction_amount: 100,\n    description: 'description',\n    payment_method_id: 'pix',\n    payer: {\n        email: 'test@test.com'\n        identification: {\n            number: '12345678909',\n            type: 'CPF'\n       }\n    },\n    point_of_interaction: {\n        linked_to: \"openfinance\"\n    }\n};\nmercadopago.payment.create(payment).then(function (data) {\n    console.log(data.response);\n}).catch(function (error) {\n    console.log(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Additional Data in JavaScript Payment Submission\nDESCRIPTION: This snippet demonstrates how to use the onSubmit callback with additionalData in a JavaScript implementation. It shows logging additionalData and sending cardFormData to a server for payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/additional-data.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n ...,\n callbacks: {\n   onSubmit: (cardFormData, additionalData) => {\n     // callback called the user to click on the data submit button\n     // the additionalData parameter is optional, you can remove it if you want    \n     console.log(additionalData);\n     // example of sending the data collected by Brick to your server\n     return new Promise((resolve, reject) => {\n       fetch(\"/process_payment\", {\n         method: \"POST\",\n         headers: {\n             \"Content-Type\": \"application/json\",\n         },\n         body: JSON.stringify(cardFormData)\n       })\n       .then((response) => {\n         // receive payment result\n         resolve();\n       })\n       .catch((error) => {\n         // handle error response when trying to create payment\n         reject();\n       })\n     });\n   },\n },\n}\n```\n\n----------------------------------------\n\nTITLE: Creando pagos con PagoEfectivo usando Mercado Pago SDK en Python\nDESCRIPTION: Código Python para crear un pago con PagoEfectivo utilizando el SDK de Mercado Pago. Inicializa el SDK con el token de acceso, configura opciones de solicitud con idempotencia y crea el pago con los datos necesarios.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mpe.es.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\nrequest_options = mercadopago.config.RequestOptions()\nrequest_options.custom_headers = {\n    'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\npayment_data = {\n    \"transaction_amount\": 100,\n    \"description\": \"Product title\",\n    \"payment_method_id\": \"pagoefectivo_atm\",\n    \"payer\": {\n        \"email\": \"test@test.com\",\n    },\n    \"metadata\": {\n        \"payment_mode\": \"online\",\n    }\n}\npayment_response = sdk.payment().create(payment_data, request_options)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Gradle configuration for Android Support\nDESCRIPTION: This Groovy snippet provides the necessary configurations for the android/build.gradle file when using Android Support libraries, including versions for build tools and SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-cli.en.md#2025-04-18_snippet_2\n\nLANGUAGE: Groovy\nCODE:\n```\nbuildscript {\n  ext {\n    buildToolsVersion = \"28.0.3\"\n    minSdkVersion = 16\n    compileSdkVersion = 28\n    targetSdkVersion = 28\n    // Only using Android Support libraries\n    supportLibVersion = \"28.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Payment Methods in Checkout Transparente\nDESCRIPTION: This code snippet shows how to filter payment methods to exclude boleto in the Checkout Transparente integration by using the payment_type_id parameter.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/faqs/payments.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"payment_type_id\" = credit_card\n```\n\n----------------------------------------\n\nTITLE: Payment Methods Table - Colombia (MCO)\nDESCRIPTION: Markdown table listing available payment methods for Colombia, including Cards, 2 Cards, and PSE offline method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/adobe-commerce/checkout-api.en.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Payment Method | Description |\n| --- | --- |\n| Cards | Allows integration with credit and debit cards. |\n| 2 Cards | Allows integration with 2 credit and debit cards. |\n| Offline methods | PSE |\n```\n\n----------------------------------------\n\nTITLE: Response for Creating Report Structure (JSON)\nDESCRIPTION: This JSON response is returned after successfully creating a report structure. It includes the structure ID and other details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": {{structure_id}},\n    \"version\": 0,\n    \"date_created\": null,\n    \"date_last_updated\": null,\n    \"name\": null,\n    \"file_format\": null,\n    \"columns\": null,\n    \"file_config\": null,\n    \"report_translation\": null,\n    \"include_withdraw\": null,\n    \"refund_detailed\": null,\n    \"show_fee_prevision\": null,\n    \"coupon_detailed\": null,\n    \"show_chargeback_cancel\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Identification Types in JavaScript\nDESCRIPTION: This JavaScript snippet retrieves the types of identification for users by calling the Mercado Pago SDK and populates the corresponding options in a select element.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.en.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n(async function getIdentificationTypes() {\ntry {\nconst identificationTypes = await mp.getIdentificationTypes();\nconst identificationTypeElement = document.getElementById('form-checkout__identificationType');\n\ncreateSelectOptions(identificationTypeElement, identificationTypes);\n} catch (e) {\nreturn console.error('Error getting identificationTypes: ', e);\n}\n})();\n\nfunction createSelectOptions(elem, options, labelsAndKeys = { label: \"name\", value: \"id\" }) {\nconst { label, value } = labelsAndKeys;\n\nelem.options.length = 0;\n\nconst tempOptions = document.createDocumentFragment();\n\noptions.forEach(option => {\nconst optValue = option[value];\nconst optLabel = option[label];\n\nconst opt = document.createElement('option');\nop.value = optValue;\nop.textContent = optLabel;\n\ntempOptions.appendChild(opt);\n});\n\nelem.appendChild(tempOptions);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updated Payment Processing with MercadoPago in Ruby\nDESCRIPTION: In this Ruby snippet, payment data is constructed using parameters derived from incoming requests, making it adaptable to various inputs while still processing payments via the MercadoPago SDK. It requires the mercadopago gem.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.en.md#2025-04-18_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\n\npayment_data = {\n transaction_amount: params[:transactionAmount].to_f,\n token: params[:token],\n installments: params[:installments].to_i,\n payment_method_id: params[:paymentMethodId],\n payer: {\n   email: params[:payer][:email],\n   identification: {\n     type: params[:payer][:identification][:type],\n     number: params[:payer][:identification][:number]\n   },\n }\n}\npayment_response = sdk.payment.create(payment_data)\npayment = payment_response[:response]\nputs payment\n\n```\n\n----------------------------------------\n\nTITLE: Encryption Model for ABECS Devices (3DES CBC)\nDESCRIPTION: Demonstrates the encryption process for ABECS devices using 3DES with CBC mode. It shows how to extract card-present data including PAN, expiration date, cardholder information, and track1 data using a working key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/secure_payments/responses.es.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Ejemplo |\n|---|\n| Track1 = B73BEB4ADF6A3B7A3^TEST MARCELO            ^171220100000        00510000000 |\n| Working key = 22222222222222222222222222222222 |\n\n| Resultado |\n|---|\n| PAN = 4074090252161538 |\n| Fecha expiracion = 12/2017 |\n| Titular de la tarjeta = TEST MARCELO |\n| Track1 = B4074090252161538^TEST MARCELO            ^171220100000        00510000000 |\n```\n\n----------------------------------------\n\nTITLE: Obteniendo Información del Dispositivo en Swift\nDESCRIPTION: Métodos disponibles en Swift para obtener la información del dispositivo en diferentes formatos (objeto Device, JSON, String o Dictionary) utilizando el SDK de Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-chopro.es.md#2025-04-18_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nMercadoPagoDevicesSDK.shared.getInfo() // devuelve un objeto Device que es Codable\nMercadoPagoDevicesSDK.shared.getInfoAsJson() // devuelve un objeto Data de la librería de JSON\nMercadoPagoDevicesSDK.shared.getInfoAsJsonString() // devuelve el json en formato de String\nMercadoPagoDevicesSDK.shared.getInfoAsDictionary() // devuelve un Dictionary<String,Any>\n```\n\n----------------------------------------\n\nTITLE: Searching Payments with Mercado Pago SDK in Java\nDESCRIPTION: This snippet demonstrates how to search for payments using specific filters like sort order and external reference. The request is built using the Mercado Pago SDK, which manages the payment details retrieval based on the provided parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/create-payments.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nPaymentClient client = new PaymentClient();\n\nMap<String, Object> filters = new HashMap<>();\nfilters.put(\"sort\", \"date_created\");\nfilters.put(\"criteria\", \"desc\");\nfilters.put(\"external_reference\", \"ID_REF\");\n\nMPSearchRequest searchRequest =\n   MPSearchRequest.builder().offset(0).limit(0).filters(filters).build();\n\nclient.search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Creating Preference for Onboarding Credits with cURL\nDESCRIPTION: This cURL snippet demonstrates how to create a Mercado Pago preference for onboarding credits via a direct API request. It sends a POST request to the `/checkout/preferences` endpoint with the item details and sets the `purpose` to `onboarding_credits`.  It requires a `PROD_ACCESS_TOKEN` for authorization.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_8\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n  'https://api.mercadopago.com/checkout/preferences' \\\n  -H 'Content-Type: application/json' \\\n  -H 'cache-control: no-cache' \\\n  -H 'Authorization: Bearer **PROD_ACCESS_TOKEN**' \\\n  -d '{\n    \"items\": [\n        {\n            \"title\": \"Meu produto\",\n            \"quantity\": 1,\n            \"unit_price\": 75\n        }\n    ],\n    \"purpose\": \"onboarding_credits\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Setting DIAN Tax Rate\nDESCRIPTION: Example of how to modify the DIAN (Colombian Tax Authority) tax rate for products or services.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n\"taxes\": [\n\t{\n\t\t\"type\": \"IVA\",\n\t\t\"value\": 16\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Store API Request\nDESCRIPTION: API request to create a store location using productive Access Token and user ID from the application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/test-integration-configuration.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\n/users/user_id/stores\n```\n\n----------------------------------------\n\nTITLE: Capturing Total Reserved Amount in MercadoPago - Java\nDESCRIPTION: This Java code shows how to completely capture a reserved payment in MercadoPago. It involves setting an access token, specifying custom headers, and invoking the capture method using a payment client and the payment ID. Required dependencies include 'mercadopago.sdk'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/capture-authorized-payment.en.md#2025-04-18_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nLong paymentId = 123456789L;\n\nMap<String, String> customHeaders = new HashMap<>();\n    customHeaders.put(\"x-idempotency-key\", <SOME_UNIQUE_VALUE>);\n \nMPRequestOptions requestOptions = MPRequestOptions.builder()\n    .customHeaders(customHeaders)\n    .build();\n\nPaymentClient client = new PaymentClient();\nclient.capture(paymentId, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment Flow with Callback - Chile Implementation\nDESCRIPTION: Example of initializing payment flow for Chile region using PaymentFlow class with callback handling. Demonstrates basic payment flow setup without installments option.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/payment-flow-callback.es.md#2025-04-18_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval paymentFlow = MPManager.paymentFlow\n\nval paymentFlowRequestData = PaymentFlowRequestData(\n   amount = 10.0,\n   description = \"test description\",\n   paymentMethod = PaymentMethod.CREDIT_CARD.name,\n   printOnTerminal = false // campo opcional si lanza el pago sin impresión en la terminal\n)\n\npaymentFlow.launchPaymentFlow(\n   paymentFlowRequestData = paymentFlowRequestData\n) { response ->\n   response.doIfSuccess { result ->\n       // manejo de éxito utilizando un mensaje\n   }.doIfError { error ->\n       // manejo del error\n   }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal PaymentFlow paymentFlow = MPManager.INSTANCE.getPaymentFlow();\n\nfinal String amount = \"2.0\";\n\nfinal String description = \"Payment description\";\n\nfinal PaymentFlowData paymentFlowData = new PaymentFlowData(\n   amount,\n   description,\n   PaymentMethod.CREDIT_CARD.name(),\n   6, // optional field if launching the payment in installments. \n   false // optional field if launching the payment without printing in terminal\n);\n\nfinal Function1<MPResponse<PaymentResponse>, Unit> callback = (final MPResponse<PaymentResponse> response) -> {\n if (response.getStatus() == ResponseStatus.SUCCESS) {\n   // Success handling using a message\n } else {\n   // Error handling \n }\n return Unit.INSTANCE;\n};\n\npaymentFlow.launchPaymentFlow(paymentFlowData, callback);\n```\n\n----------------------------------------\n\nTITLE: Modifying Event Configuration using PUT Request in MercadoPago API\nDESCRIPTION: This curl command shows how to modify an existing event configuration using a PUT request to the MercadoPago API. It includes parameters for event type, data, description, structure ID, and notifiers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/modifications.es.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request PUT 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/events/{{event_id}}' \\\n--header 'Authorization: Bearer {{TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"type\": \"frequency\",\n    \"data\": {\n        \"period\": \"daily\",\n        \"value\": 0,\n        \"hour\": 0\n    },\n    \"description\": \"test event\",\n    \"structure_id\": {{structure_id}},\n    \"notifiers\": [{{notifier_id}}],\n    \"status\": \"ACTIVE\",\n    \"version\": 0\n}'\n```\n\n----------------------------------------\n\nTITLE: Customizing Card Payment Brick Texts in JavaScript\nDESCRIPTION: This code snippet demonstrates how to customize text elements for the Card Payment Brick using JavaScript. It includes options for form titles, section titles, input labels, and placeholders for various form fields.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/change-texts.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    customization: {\n        visual: {\n            texts: {\n                formTitle: \"\",\n                emailSectionTitle: \"\",\n                installmentsSectionTitle: \"\",\n                cardholderName: {\n                    label: \"\",\n                    placeholder: \"\",\n                },\n                email: {\n                    label: \"\",\n                    placeholder: \"\",\n                },\n                cardholderIdentification: {\n                    label: \"\",\n                },\n                cardNumber: {\n                    label: \"\",\n                },\n                expirationDate: {\n                    label: \"\",\n                },\n                securityCode: {\n                    label: \"\",\n                },\n                selectInstallments: \"\",\n                selectIssuerBank: \"\",\n                formSubmit: \"\",\n            },\n        },\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Payment Form HTML Template\nDESCRIPTION: Provides a structured HTML form for capturing customer payment details with essential input fields\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.es.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form id=\"form-checkout\" action=\"/process_payment\" method=\"post\">\n    <div>\n      <div>\n        <label for=\"payerFirstName\">Name</label>\n        <input id=\"form-checkout__payerFirstName\" name=\"payerFirstName\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"payerLastName\">Last name</label>\n        <input id=\"form-checkout__payerLastName\" name=\"payerLastName\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"email\">E-mail</label>\n        <input id=\"form-checkout__email\" name=\"email\" type=\"text\">\n      </div>\n    <div>\n      <div>\n        <input type=\"hidden\" name=\"transactionAmount\" id=\"transactionAmount\" value=\"5000\">\n        <input type=\"hidden\" name=\"description\" id=\"description\" value=\"Nome do Produto\">\n        <br>\n        <button type=\"submit\">Pay</button>\n      </div>\n    </div>\n  </form>\n```\n\n----------------------------------------\n\nTITLE: Creando pagos con PagoEfectivo usando Mercado Pago SDK en Ruby\nDESCRIPTION: Código Ruby para crear un pago con PagoEfectivo utilizando el SDK de Mercado Pago. Configura el SDK con el token de acceso, define headers personalizados para idempotencia y crea la solicitud de pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mpe.es.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_request = {\n  transaction_amount: 100,\n  description: 'Product title',\n  payment_method_id: 'pagoefectivo_atm',\n  payer: {\n    email: 'test@test.com',\n  },\n  metadata: {\n    payment_mode: 'online',\n  }\n}\npayment_response = sdk.payment.create(payment_request, custom_request_options)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Internal Server Error Response (Status 500)\nDESCRIPTION: This JSON snippet shows the response structure for an internal server error. It indicates a server-side issue that prevented the request from being processed. The \"message\" and \"cause\" fields provide details about the error.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/refund-partial-amount.en.md#2025-04-18_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"status\": \"500\",\n   \"error\":  \"internal_server_error\",\n   \"message\": \"Invalid splitter id.\",\n   \"cause\": [\n    {\n      \"code\":\"500000\",\n      \"message\": \"Internal server error\",\n      \"data\": null\n    }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Fintoc Payment with MercadoPago Node.js SDK\nDESCRIPTION: Shows how to create a Fintoc payment using the MercadoPago Node.js SDK, including setting up payment details and handling the response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-advanced.en.md#2025-04-18_snippet_4\n\nLANGUAGE: node\nCODE:\n```\nconst mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(config.access_token);\n\nvar payment = req.body;\n\nvar payment_data = {\n  transaction_amount: 5000,\n  callback_url: 'https://www.your-site.com',\n  point_of_interaction: {\n   type: 'CHECKOUT',\n   sub_type: 'INTER_PSP'\n  },\n  description: 'Product title',\n  payment_method_id: 'fintoc',\n  payer: {\n    email: payment.email,\n  }\n};\n\nvar payment = mercadopago.payment.save(payment_data)\n  .then(function (response) {\n    res.status(response.status).json({\n      status: response.body.status,\n      status_detail: response.body.status_detail,\n      id: respose.body.id,\n    });\n  })\n  .catch(function (error) {\n    res.status(error.status).send(error);\n});\n\nvar payment_link = payment.transaction_details.external_resource_url;\n```\n\n----------------------------------------\n\nTITLE: Deactivate Automatic Report Schedule API Request\nDESCRIPTION: API request to deactivate automatic generation of settlement reports. Sets the 'scheduled' property to false.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X DELETE \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/schedule'\n```\n\n----------------------------------------\n\nTITLE: Setting Payment Preferences with Marketplace Fee - JSON\nDESCRIPTION: This JSON code snippet demonstrates how to set up payment preferences in a marketplace using Checkout Pro on Mercado Pago. It specifies the items being sold along with their details and includes the marketplace fee, which is the amount charged by the marketplace on each payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/marketplace/integrate-marketplace.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"items\": [\n        {\n            \"id\": \"item-ID-1234\",\n            \"title\": \"Meu produto\",\n            \"currency_id\": \"BRL\",\n            \"quantity\": 1,\n            \"unit_price\": 75.76\n        }\n    ],\n    \"marketplace_fee\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Transaction Intent with cURL\nDESCRIPTION: This cURL command sends a POST request to the Mercado Pago API to create a transaction intent. It includes necessary headers for authorization and specifies the transaction details, including the sender and receiver account information. The external_reference field signifies a unique transaction reference.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-test.en.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/transaction-intents/process' \\ \n--header 'x-enforce-signature: false' \\ \n--header 'Authorization: Bearer TEST-7719*********832-03141*********ec9309854*********f1e54b5-1*********' \\ \n--header 'Content-Type: application/json' \\ \n--header 'X-Test-Token: true' \\ \n--data '{\n    \"external_reference\": \"new\",\n    \"point_of_interaction\": {\n        \"type\": \"PSP_TRANSFER\"\n    },\n    \"seller_configuration\": {\n        \"notification_info\": {\n            \"notification_url\": \"https://webhook.site/c107a500-5bf2-4787-8c17-ec9fddcfd0f6\"\n        }\n    },\n    \"transaction\": {\n        \"from\": {\n            \"accounts\": [\n                {\n                    \"amount\": 5\n                }\n            ]\n        },\n        \"to\": {\n            \"accounts\": [\n                {\n                    \"type\": \"current\",\n                    \"amount\": 5,\n                    \"bank_id\": \"99999004\",\n                    \"branch\": \"0001\",\n                    \"currency_id\": \"BRL\",\n                    \"holder\": \"EWALD DAVIS\",\n                    \"number\": \"10266732\",\n                    \"provider_id\": \"spi\",\n                    \"owner\": {\n                        \"identification\": {\n                            \"number\": \"38437455871\",\n                            \"type\": \"CPF\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"total_amount\": 5\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Listing Saved Cards with Mercado Pago API\nDESCRIPTION: Code samples in multiple languages for retrieving the list of saved cards associated with a customer. This is the first step to display available payment options to the customer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/receive-payments-with-saved-cards.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $customer_client = new CustomerClient();\n  $cards = $client->list(\"customer_id\");\n  echo implode ($cards);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerCard = new CustomerCard(client);\n\ncustomerCard.list({ customerId: '<CUSTOMER_UD>' }).then(console.log).catch(console.log);\n```\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nCustomerClient customerClient = new CustomerClient();\n\nCustomer customer = customerClient.get(\"247711297-jxOV430go9fx2e\");\ncustomerClient.listCards(customer.getId());\n```\n\nLANGUAGE: ruby\nCODE:\n```\ncards_response = sdk.card.list(customer_id)\ncards = cards_response[:response]\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar customerClient = new CustomerClient();\nResourcesList<CustomerCard> customerCards = await customerClient.ListCardsAsync(\"CUSTOMER_ID\");\n```\n\nLANGUAGE: python\nCODE:\n```\ncards_response = sdk.card().list_all(customer_id)\ncards = cards_response[\"response\"]\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/customercard\"\n)\n\nfunc main() {\n\taccessToken := \"{{ACCESS_TOKEN}}\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := customercard.NewClient(cfg)\n\n\tresources, err := client.List(context.Background(), \"<CUSTOMER_ID>\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfor _, v := range resources {\n\t\tfmt.Println(v)\n\t}\n}\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n  -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n  'https://api.mercadopago.com/v1/customers/CUSTOMER_ID/cards' \\\n```\n\n----------------------------------------\n\nTITLE: Implementing Telecommunications Recharge Intent Handler\nDESCRIPTION: Android method for sending telecommunications recharge requests to RDCPass. Handles service name, service ID, customer ID, and amount parameters for processing recharge payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-pay-telecommunications.en.md#2025-04-18_snippet_1\n\nLANGUAGE: android\nCODE:\n```\nprivate void sendRecarga(String nombre_servicio, String id_servicio, String id_cliente, String  monto) { \n    Intent recargaIntent = new Intent(\"enviaRecarga\"); \n    recargaIntent.setClassName(\"redelcom.cl.rdcpass\", \"redelcom.cl.rdcpass.MainActivity\"); \n    recargaIntent.putExtra(\"packageName\", context.getPackageName()); \n    recargaIntent.putExtra(\"className\", getClass().toString().split(\" \")[1]); \n    recargaIntent.putExtra(\"NumberRecharge\", id_cliente); \n    recargaIntent.putExtra(\"AmountRecharge\", monto); \n    recargaIntent.putExtra(\"CompanyRecharge\", id_servicio); \n    recargaIntent.putExtra(\"CompanyNameRecharge\", nombre_servicio); \n    startActivity(recargaIntent); \n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Customizations for Mercado Pago Banner in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to configure visual customizations for the Mercado Pago banner. It showcases options for hiding the logo, aligning content, setting background and border properties, and customizing text alignment, font, size, weight, and color. These settings are applied when creating the banner using the `create()` method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/brand-brick/visual-customizations.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst renderBrandBrick = async (bricksBuilder) => {\n  const settings = {\n    customization: {\n      // the visual changes only apply to the banner, the modal is always default\n      visual: {\n        hideMercadoPagoLogo: false, // optional boolean.\n        contentAlign: \"center\", // optional \"left\" | \"center\" | \"right\".\n        backgroundColor: \"white\", // optional \"white\" | \"mercado_pago_primary\" | \"mercado_pago_secondary\" | \"black\" | \"transparent\"\n        border: false, // optional boolean\n        borderColor: \"dark\", // optional \"dark\" | \"light\"\n        borderWidth: \"1px\", // optional \"1px\" | \"2px\"\n        borderRadius: \"0px\", // optional  string format: \"Npx\"\n        verticalPadding: \"8px\", // optional  string format: \"Npx\". max \"40px\"\n        horizontalPadding: \"16px\", // optional  string format: \"Npx\". max \"40px\"\n      },\n      text: {\n        align: \"left\", // optional \"left\" | \"center\" | \"right\",\n        useCustomFont: false, // optional boolean. OBS: If is true the Brick inheriths the font from the parent\n        size: \"medium\", // optional \"extra_small\" | \"small\" | \"medium\" | \"large\".\n        fontWeight: \"semibold\", // optional \"regular\" | \"semibold\".\n        color: \"secondary\", // optional \"primary\" | \"secondary\" |\"inverted\".\n      },\n    },\n  };\n};\n\n```\n\n----------------------------------------\n\nTITLE: Listing Payment Methods using Node.js SDK\nDESCRIPTION: This Node.js snippet utilizes the Mercado Pago SDK to list all available payment methods. It requires the `mercadopago` module and sets the access token using `mercadopago.configurations.setAccessToken()`.  The snippet uses an async function to handle the asynchronous request and retrieves the payment methods from the response body.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/consult-payment-methods.en.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nvar mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(config.access_token);\n \nvar response = await mercadopago.payment_methods.listAll();\nvar payment_methods = response.body;\n```\n\n----------------------------------------\n\nTITLE: Setting Back URLs for Redirection\nDESCRIPTION: This Node.js code snippet shows how to configure back URLs in a Mercado Pago preference to redirect the user based on the payment status (success, failure, or pending). It also sets the `auto_return` property to 'approved' for automatic redirection on successful payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.pt.md#2025-04-18_snippet_9\n\nLANGUAGE: node\nCODE:\n```\nvar preference = {}\npreference = {\n  // ...\n  \"back_urls\": {\n        \"success\": \"https://www.seu-site/success\",\n        \"failure\": \"http://www.seu-site/failure\",\n        \"pending\": \"http://www.seu-site/pending\"\n    },\n    \"auto_return\": \"approved\",\n  // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: OAuth Authorization URL (MPE)\nDESCRIPTION: This snippet shows the OAuth authorization URL for Peru (MPE). It's used to redirect users to authorize the marketplace to manage their sales. Replace `<APP_ID>` with the application ID and `<REDIRECT_URI>` with the configured redirect URI.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/configuration.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\n\"https://auth.mercadopago.com.pe/authorization?client_id=<APP_ID>&response_type=code&platform_id=mp&redirect_uri=<REDIRECT_URI>\"\n```\n\n----------------------------------------\n\nTITLE: PagoEfectivo Payment Response Example\nDESCRIPTION: Example JSON response showing the payment status and external resource URL for PagoEfectivo payment completion. The response includes transaction details and payment reference information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mpe.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n {\n    ...,\n    \"id\": 5466310457,\n    \"status\": \"pending\",\n    \"status_detail\": \"pending_waiting_payment\",\n    ...,\n    \"transaction_details\": {\n        \"net_received_amount\": 0,\n        \"total_paid_amount\": 100,\n        \"overpaid_amount\": 0,\n        \"external_resource_url\": \"https://www.mercadopago.com.pe/payments/123456/ticket?caller_id=123456&payment_method_id=pagoefectivo_atm&payment_id=123456&payment_method_reference_id=123456\",\n        \"installment_amount\": 0,\n        \"financial_institution\": null,\n        \"payment_method_reference_id\": \"1234567890\"\n    }\n }\n]\n```\n\n----------------------------------------\n\nTITLE: Handling Credential Environment Mismatch\nDESCRIPTION: Error occurs when mixing test and production credentials or environments incorrectly. Requires maintaining consistent credential usage.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/vtex/common-errors.en.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`Invalid users involved`\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for OAuth Access Token\nDESCRIPTION: This JSON snippet shows a sample response when a successful request for an Access Token is made to the Mercado Pago API. Key parameters include an Access Token, expiration time, and user ID, crucial for accessing Mercado Pago's API resources.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/interoperable-accepting-flow-configuration.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n \"access_token\": \"{ACCESS_TOKEN}\",\n \"token_type\": \"Bearer\",\n \"expires_in\": 21600,\n \"scope\": \"offline_access read write\",\n \"user_id\": {USER_ID},\n \"live_mode\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Partial Payment Capture Response Structure\nDESCRIPTION: Example of the JSON response structure when a partial payment amount is successfully captured. The response includes the captured transaction amount and confirmation of the capture.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.en.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n...\n\"status\": \"approved\",\n\"status_detail\": \"accredited\",\n...\n\"transaction_amount\": 75,\n...\n\"captured\": true,\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with MercadoPago C#\nDESCRIPTION: This snippet shows how to create a preference object with MercadoPago in C#. It sets the 'Purpose' to 'wallet_purchase', allowing only registered payments. The code utilizes the MercadoPago C# SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-startup.es.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Crear el objeto de solicitud de preferencia\nvar request = new PreferenceRequest\n{\n  // el Purpose = 'wallet_purchase', solo permite pagos registrados\n  // para permitir pagos de invitados, puedes omitir esta propiedad\n    Purpose = \"wallet_purchase\",\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"Mi producto\",\n            Quantity = 1,\n            CurrencyId = \"BRL\",\n            UnitPrice = 75.56,\n        },\n    },\n};\n \n// Crea la preferencia usando el cliente\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Installing expo-web-browser with Yarn\nDESCRIPTION: Command to install the expo-web-browser dependency using Yarn package manager.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-expo-go.en.md#2025-04-18_snippet_0\n\nLANGUAGE: yarn\nCODE:\n```\nyarn add expo-web-browser\n```\n\n----------------------------------------\n\nTITLE: Rendering Wallet Brick in Legacy JavaScript\nDESCRIPTION: Similar to the previous JavaScript example, this snippet presents an alternate rendering method for the Wallet Brick, highlighting usage in legacy settings.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.en.md#2025-04-18_snippet_2\n\nLANGUAGE: Javascript\nCODE:\n```\nconst renderWalletBrick = async (bricksBuilder) => {\n    await bricksBuilder.create('wallet', 'walletBrick_container', {\n        initialization: {\n            preferenceId: \"<PREFERENCE_ID>\",\n        },\n        customization: {\n            texts: {\n                valueProp: 'smart_option'\n            },\n            ...\n        },\n    });\n};\n\nrenderWalletBrick(bricksBuilder);\n```\n\n----------------------------------------\n\nTITLE: Payment Response Example for Efecty\nDESCRIPTION: Sample JSON response from Mercado Pago after creating an Efecty payment. The response includes important information such as the payment status, verification code, and the external resource URL where the buyer can complete the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n[\n{\n...,\n\"id\": 5466310457,\n\"status\": \"pending\",\n\"status_detail\": \"pending_waiting_payment\",\n...,\n\"transaction_details\": {\n\"payment_method_reference_id\": \"24308386\",\n\"verification_code\": \"24308386\",\n\"net_received_amount\": 0,\n\"total_paid_amount\": 5000,\n\"overpaid_amount\": 0,\n\"external_resource_url\": \"https://www.mercadopago.com/mco/payments/sandbox/ticket/helper?payment_id=1234&payment_method_reference_id=12345678&caller_id=1234&hash=aaaaaa-bbb-cccc-dddd-eeeeeeee\",\n\"installment_amount\": 0,\n\"financial_institution\": \"\",\n\"payable_deferral_period\": null,\n\"acquirer_reference\": null\n}\n}\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Invoice Description in JSON\nDESCRIPTION: This code demonstrates how to add a description for the business that will appear on the buyer's card invoice using the 'statement_descriptor' attribute.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"statement_descriptor\": \"MYBUSINESS\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Document Types\nDESCRIPTION: Async function to retrieve and populate available document types in the form select element.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n(async function getIdentificationTypes() {\n      try {\n        const identificationTypes = await mp.getIdentificationTypes();\n        const identificationTypeElement = document.getElementById('form-checkout__identificationType');\n\n        createSelectOptions(identificationTypeElement, identificationTypes);\n      } catch (e) {\n        return console.error('Error getting identificationTypes: ', e);\n      }\n    })();\n\n    function createSelectOptions(elem, options, labelsAndKeys = { label: \"name\", value: \"id\" }) {\n      const { label, value } = labelsAndKeys;\n\n      elem.options.length = 0;\n\n      const tempOptions = document.createDocumentFragment();\n\n      options.forEach(option => {\n        const optValue = option[value];\n        const optLabel = option[label];\n\n        const opt = document.createElement('option');\n        opt.value = optValue;\n        opt.textContent = optLabel;\n\n        tempOptions.appendChild(opt);\n      });\n\n      elem.appendChild(tempOptions);\n    }\n```\n\n----------------------------------------\n\nTITLE: Obtaining Issuer ID with JavaScript\nDESCRIPTION: This function retrieves the issuer ID based on the provided BIN during the payment processing. It interacts with the Mercado Pago SDK to fetch the issuers and updates the issuer select element in the form.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/secure-fields-core.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Step #getIssuers\nconst getIssuers = async (bin) => {\n    try {\n      const paymentMethodId = document.getElementById('paymentMethodId').value;\n      const issuerElement = document.getElementById('form-checkout__issuer');\n      const issuers = await mp.getIssuers({ paymentMethodId, bin });\n      createSelectOptions(issuerElement, issuers);\n      getInstallments(bin);\n    } catch (e) {\n      console.error('error getting issuers: ', e)\n    }\n  };\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with PagoEfectivo\nDESCRIPTION: This Python snippet demonstrates how to create a payment using the Mercado Pago API. It uses the SDK to send a POST request with transaction details, payment method, and payer information. It requires the MercadoPago Python SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nimport market\nsdk = Mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\npayment_data = {\n\"transaction_amount\": 100,\n\"description\": \"Product title\",\n\"payment_method_id\": \"payment_atm\",\n\"payer\": {\n\"email\": \"test_user_42972582@testuser.com\"\n}\n}\n\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n\n```\n\n----------------------------------------\n\nTITLE: Creating Cash Payment with PHP in MercadoPago\nDESCRIPTION: Complete PHP implementation for creating a payment request for cash payment methods like OXXO. Includes transaction amount, payment method ID, and payer email with idempotency key header.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['<TRANSACTION_AMOUNT>'],\n    \"payment_method_id\" => $_POST['<PAYMENT_METHOD_ID>'],\n    \"payer\" => [\n      \"email\" => $_POST['<EMAIL>']\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment with MercadoPago SDK (Ruby)\nDESCRIPTION: This Ruby snippet initializes a payment using the MercadoPago SDK. It sets the access token, defines payment parameters like transaction amount, token, description, installments, payment method ID, issuer ID, and payer email. It then creates the payment and retrieves its response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-serverside.es.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\npayment_object = {\n   transaction_amount: 100,\n   token: token,\n   description: 'Blue shirt',\n   installments: installments,\n   payment_method_id: payment_method_id,\n   issuer_id: issuer_id,\n   payer: {\n      email: 'john@yourdomain.com'\n  }\n}\npayment_response = sdk.payment.create(payment_object)\npayment = payment_response[:response]\n\n```\n\n----------------------------------------\n\nTITLE: Rejected Zero Dollar Auth Response\nDESCRIPTION: This JSON snippet represents a rejected Zero Dollar Auth response. The status field is set to \"rejected\", and the status_detail field provides more information about the rejection reason, like \"cc_rejected_other_reason\".\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/api-responses-test.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 0000000000,\n    \"version\": null,\n    \"date_created\": \"2023-01-12T11:36:19.497-04:00\",\n    \"date_approved\": \"2023-01-12T11:36:20.345-04:00\",\n    \"date_last_updated\": \"2023-01-12T11:36:20.345-04:00\",\n    \"date_of_expiration\": null,\n    \"money_release_date\": \"2023-01-12T11:36:20.345-04:00\",\n    \"operation_type\": \"card_validation\",\n    \"issuer_id\": \"205\",\n    \"payment_method_id\": \"master\",\n    \"payment_type_id\": \"credit_card\",\n    \"status\": \"rejected\",\n    \"status_detail\": \"cc_rejected_other_reason\",\n    \"transaction_amount\": 0,\n…\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Facebook Ads Tracking to Mercado Pago Preference\nDESCRIPTION: Demonstrates how to associate a Facebook pixel with a Mercado Pago preference for tracking ad conversions. Includes setting up tracking information and creating the preference with tracking data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/preferences.es.md#2025-04-18_snippet_1\n\nLANGUAGE: dotnet\nCODE:\n```\n// Asocia tu píxel de Facebook\nvar tracks = new List<PreferenceTrackRequest>\n{\n    new PreferenceTrackRequest\n    {\n        Type = \"facebook_ad\",\n        Values = new PreferenceTrackValuesRequest\n        {\n            PixelId = \"PIXEL_ID\",\n        },\n    },\n};\nvar request = new PreferenceRequest\n{\n    // ...\n    Tracks = tracks,\n};\nvar client = new PreferenceClient();\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Downloading Report PHP\nDESCRIPTION: This PHP code uses the Requests library to download a report file with a GET request. It requires an authorization token passed in the headers to access the MercadoPago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n   'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$response = Requests::get('https://api.mercadopago.com/v1/account/settlement_report/:file_name', $headers);\n```\n\n----------------------------------------\n\nTITLE: Creating Settlement Report via API (Multiple Languages)\nDESCRIPTION: Send a POST request to generate a new settlement report for a specific date range. The API requires authentication and accepts JSON payload with begin and end dates.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.en.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report' \\\n    -d '{\n            \"begin_date\": \"2019-05-01T00:00:00Z\",\n            \"end_date\": \"2019-06-01T00:00:00Z\"\n    }'\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$data ='{\"begin_date\": \"2019-05-01T00:00:00Z\",\"end_date\": \"2019-06-01T00:00:00Z\"}';\n\n$response = Requests::post(\"https://api.mercadopago.com/v1/account/settlement_report\", $headers, $data);\n```\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"POST\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\nconnection.setDoOutput(true);\n\nString body = \"{\\\"begin_date\\\":\\\"2019-05-01T00:00:00Z\\\",\\\"end_date\\\": \\\"2019-06-01T00:00:00Z\\\"}\";\n\ntry(OutputStream os = connection.getOutputStream()) {\n    byte[] input = body.getBytes(\"utf-8\");\n    os.write(input, 0, input.length);\n}\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\ndata = '{ \"begin_date\": \"2019-05-01T00:00:00Z\", \"end_date\": \"2019-06-01T00:00:00Z\" }'\n\nresponse = requests.post('https://api.mercadopago.com/v1/account/settlement_report', headers=headers, data=data)\n```\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = { \n    'accept': 'application/json', \n    'content-type': 'application/json', \n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar dataString = '{ \"begin_date\": \"2019-05-01T00:00:00Z\", \"end_date\": \"2019-06-01T00:00:00Z\" }';\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report',\n    method: 'POST',\n    headers: headers,\n    body: dataString\n};\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Implementing Mercado Pago Security Script\nDESCRIPTION: Adds the Mercado Pago security script to your webpage with the 'view' parameter set to the current section. This helps in risk analysis and fraud prevention. If no specific section value is available, it can be left empty.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/chargebacks/how-to-prevent.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"home\"></script>\n```\n\n----------------------------------------\n\nTITLE: Associating Google Ads Tag with Checkout Pro in PHP\nDESCRIPTION: This PHP snippet outlines the integration of Google Ads conversion identifiers with a Mercado Pago preference. Necessary components include MercadoPago\\Preference and identifiers such as conversion ID and conversion label for tracking Google Ad conversions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.en.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Create a preference object\n$preference = new MercadoPago\\Preference();\n\n// Associate your Google ads tag\n$preference->tracks = array(\narray(\n'type' => 'google_ad',\n'values' => array(\n'conversion_id' => 'CONVERSION_ID',\n'conversion_label' => 'CONVERSION_LABEL'\n)\n)\n);\n\n...\n// Save and post the preference\n$preference->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Brick Button Text in JavaScript\nDESCRIPTION: This snippet demonstrates how to customize the theme and value proposition of the Wallet Brick button using JavaScript. It sets the theme to 'default' and the value proposition to 'practicality'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-texts.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n        theme: 'default',\n        customStyle: {\n            valueProp: 'practicality',\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payment in Node.js with Mercado Pago SDK\nDESCRIPTION: Implementation of payment creation in Node.js using Mercado Pago SDK, configuring transaction details and payer information\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.es.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nvar payment_data = {\n  transaction_amount: Number(req.body.transactionAmount),\n  token: req.body.token,\n  description: req.body.description,\n  installments: Number(req.body.installments),\n  payment_method_id: req.body.paymentMethodId,\n  issuer_id: req.body.issuer,\n  payer: {\n    email: req.body.email,\n    identification: {\n      type: req.body.identificationType,\n      number: req.body.identificationNumber\n    }\n  }\n};\n\nmercadopago.payment.save(payment_data)\n  .then(function(response) {\n    res.status(response.status).json({\n      status: response.body.status,\n      status_detail: response.body.status_detail,\n      id: response.body.id\n    });\n  })\n  .catch(function(error) {\n    console.error(error)\n  });\n```\n\n----------------------------------------\n\nTITLE: OAuth API Response Example\nDESCRIPTION: This snippet showcases the expected JSON response from the OAuth API. It includes the `access_token`, `public_key`, `refresh_token`, `user_id`, and other relevant information for managing the user's Mercado Pago account.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/configuration.pt.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"{\n    \\\"access_token\\\": \\\"SELLER_PAYER_TOKEN\\\",\n    \\\"public_key\\\": \\\"PUBLIC_KEY\\\",\n    \\\"refresh_token\\\": \\\"TG-XXXXXXXXX-XXXXX\\\",\n    \\\"live_mode\\\": true,\n    \\\"user_id\\\": \\\"COLLECTOR_ID DE PAGO\\\",\n    \\\"token_type\\\": \\\"bearer\\\",\n    \\\"expires_in\\\": 15552000,\n    \\\"scope\\\": \\\"offline_access payments write\\\" \n}\"\n```\n\n----------------------------------------\n\nTITLE: Setting custom CSS variables with JavaScript\nDESCRIPTION: This JavaScript snippet shows how to set custom CSS variables for a Mercado Pago Brick. It includes the `customization.visual.style.customVariables` property within the settings object. The variables like `textPrimaryColor` and `textSecondaryColor` can be customized by replacing the string value.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/modify-variables.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n        visual: {\n            style: {\n                customVariables: {\n                    textPrimaryColor: 'string',\n                    textSecondaryColor: 'string',\n                    ...,\n                },\n            },\n        }\n        ...,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Saving a Card Reference with Mercado Pago SDK in PHP\nDESCRIPTION: Creates a stored reference to a customer's card using the CustomerCardClient. The code accepts a token representing the card and associates it with a specific customer ID. This operation allows for secure storage of payment methods for future use.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/cards.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new CustomerCardClient();\n  $request = [\"token\" => \"9b2d63e00d66a8c721607214ceda233a\"];\n  $client->create('123456789', $request);\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Data with cURL using MercadoPago API\nDESCRIPTION: Example of updating customer information such as email, name, phone, identification, and address details using cURL to access the MercadoPago REST API directly.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/modify-customer.en.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PUT \\\n'https://api.mercadopago.com/v1/customers/{id}' \\\n-H 'Authorization: Bearer ACCESS_TOKEN_ENV' \\\n-d '{\n\"email\": \"user@user.com\",\n\"first_name\": \"john\",\n\"last_name\": \"wagner\",\n\"address\": {\n\"zip_code\": \"[FAKER][ADDRESS][ZIP_CODE]\",\n\"street_name\": \"[FAKER][ADDRESS][STREET_NAME]\",\n\"street_number\": \"2\"\n},\n\"phone\": {\n\"area_code\": \"[FAKER][PHONE_NUMBER][AREA_CODE]\",\n\"number\": \"001234567\"\n},\n\"identification\": {\n\"type\": \"[FAKER][IDENTIFICATION][TYPE]\",\n\"number\": \"12341234\"\n},\n\"description\": \"Customer Information\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Test User with Mercado Pago API using cURL\nDESCRIPTION: HTTP POST request to create a test user account in Mercado Pago. Requires TEST_ACCESS_TOKEN for authentication and includes site_id and description in the request body.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/create-test-users-old.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H 'Authorization: Bearer ${TEST_ACCESS_TOKEN}' \\\n\"https://api.mercadopago.com/users/test\" \\\n-d '{\"site_id\":\"[FAKER][GLOBALIZE][UPPER_SITE_ID]\",\"description\" : \"a description\"}'\n```\n\n----------------------------------------\n\nTITLE: Searching Payments by Date Range with PHP in MercadoPago API\nDESCRIPTION: This PHP code snippet demonstrates how to search for payments within a specific date range using the MercadoPago API. It uses the 'NOW' keyword with time offsets for dynamic date filtering.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/retrieving-payments.es.md#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\trequire ('mercadopago.php');\n\n\t$mp = new MP (\"ENV_ACCESS_TOKEN\");\n\n\t$payment = $mp->get(\n\t\t\"/v1/payments/search\",\n\t\tarray(\n\t\t\t\"begin_date\" => \"NOW-2HOURS\",\n\t\t\t\"end_date\" => \"NOW\",\n\t\t\t\"range\" => \"date_last_updated\",\n\t\t\t\"sort\" => \"date_last_updated\",\n\t\t\t\"criteria\" => \"desc\"\n\t\t)\n\t);\n?>\n```\n\n----------------------------------------\n\nTITLE: Implementing HMAC Verification in Go for Webhook Signatures\nDESCRIPTION: This Go snippet implements a web server that handles incoming requests, extracts necessary information from headers and query parameters, computes an HMAC hash, and verifies it against the received hash. It uses the crypto/hmac and crypto/sha256 packages for hash computation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.es.md#2025-04-18_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"crypto/hmac\"\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// Obtain the x-signature value from the header\n\t\txSignature := r.Header.Get(\"x-signature\")\n\t\txRequestId := r.Header.Get(\"x-request-id\")\n\n\t\t// Obtain Query params related to the request URL\n\t\tqueryParams := r.URL.Query()\n\n\t\t// Extract the \"data.id\" from the query params\n\t\tdataID := queryParams.Get(\"data.id\")\n\n\t\t// Separating the x-signature into parts\n\t\tparts := strings.Split(xSignature, \",\")\n\n\t\t// Initializing variables to store ts and hash\n\t\tvar ts, hash string\n\n\t\t// Iterate over the values to obtain ts and v1\n\t\tfor _, part := range parts {\n\t\t\t// Split each part into key and value\n\t\t\tkeyValue := strings.SplitN(part, \"=\", 2)\n\t\t\tif len(keyValue) == 2 {\n\t\t\t\tkey := strings.TrimSpace(keyValue[0])\n\t\t\t\tvalue := strings.TrimSpace(keyValue[1])\n\t\t\t\tif key == \"ts\" {\n\t\t\t\t\tts = value\n\t\t\t\t} else if key == \"v1\" {\n\t\t\t\t\thash = value\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Get secret key/token for specific user/application from Mercadopago developers site\n\t\tsecret := \"your_secret_key_here\"\n\n\t\t// Generate the manifest string\n\t\tmanifest := fmt.Sprintf(\"id:%v;request-id:%v;ts:%v;\", dataID, xRequestId, ts)\n\n\t\t// Create an HMAC signature defining the hash type and the key as a byte array\n\t\thmac := hmac.New(sha256.New, []byte(secret))\n\t\thmac.Write([]byte(manifest))\n\n\t\t// Obtain the hash result as a hexadecimal string\n\t\tsha := hex.EncodeToString(hmac.Sum(nil))\n\nif sha == hash {\n    // HMAC verification passed\n    fmt.Println(\"HMAC verification passed\")\n} else {\n    // HMAC verification failed\n    fmt.Println(\"HMAC verification failed\")\n}\n\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect URLs in JavaScript\nDESCRIPTION: Demonstrates how to set up custom back URLs for error and return scenarios in Mercado Pago Status Screen Brick configuration using JavaScript\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/status-screen-brick/configure-redirect-urls.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n   initialization: {\n       paymentId: 100, // payment id generated by Mercado Pago\n   },\n   callbacks: {\n       onReady: () => {\n           // callback called when Brick is ready\n       },\n       onError: (error) => {\n           // callback called for all Brick error cases\n       },\n   },\n   customization: {\n       backUrls: {\n           'error': '<http://<seu dominio>/error>',\n           'return': '<http://<seu dominio>/homepage>'\n       }\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Customer with Java SDK\nDESCRIPTION: This snippet demonstrates how to update an existing customer's information using the Mercado Pago SDK. It fetches a customer ID and builds a new CustomerRequest with updated information, then applies the update through the client.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/customers.es.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nCustomerClient client = new CustomerClient();\n\nString customerId = \"247711297-jxOV430go9fx2e\";\n\nCustomerRequest customerRequest =\n   CustomerRequest.builder()\n       .email(\"jhon@doe.com\")\n       .firstName(\"Jhon\")\n       .lastName(\"Doe\")\n       .phone(PhoneRequest.builder().areaCode(\"55\").number(\"991234567\").build())\n       .identification(\n           IdentificationRequest.builder().type(\"CPF\").number(\"12345678900\").build())\n       .defaultAddress(\"Home\")\n       .address(\n           CustomerAddressRequest.builder()\n               .id(\"123123\")\n               .zipCode(\"01234567\")\n               .streetName(\"Rua Exemplo\")\n               .streetNumber(123)\n               .build())\n       .dateRegistred(OffsetDateTime.of(2000, 1, 18, 0, 0, 0, 0, \nZoneOffset.UTC))\n       .description(\"Description del user\")\n       .defaultCard(\"None\")\n       .build();\n\nclient.update(customerId, customerRequest);\n```\n\n----------------------------------------\n\nTITLE: OAuth Authorization URL (MLB)\nDESCRIPTION: This snippet shows the OAuth authorization URL for Brazil (MLB). It's used to redirect users to authorize the marketplace to manage their sales. Replace `<APP_ID>` with the application ID and `<REDIRECT_URI>` with the configured redirect URI.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/configuration.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\n\"https://auth.mercadopago.com.br/authorization?client_id=<APP_ID>&response_type=code&platform_id=mp&redirect_uri=<REDIRECT_URI>\"\n```\n\n----------------------------------------\n\nTITLE: Refund Partial Amount with Mercado Pago API using curl\nDESCRIPTION: This snippet demonstrates how to refund a partial amount by sending a POST request to the Mercado Pago API endpoint. It requires the `ADVANCED_PAYMENT_ID`, `IDEMPOTENCY_KEY`, and `ACCESS_TOKEN`. The `amount` parameter specifies the partial amount to be refunded.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/refund-partial-amount.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n'https://api.mercadopago.com/v1/advanced_payments/ADVANCED_PAYMENT_ID/refunds' \\\n  -H 'X-Idempotency-Key: IDEMPOTENCY_KEY' \\\n  -H 'Authorization: Bearer ACCESS_TOKEN' \\\n  -H 'accept: application/json' \\\n  -H 'content-type: application/json' \\\n  -d '{\n        \"amount\":25\n      }'\n```\n\n----------------------------------------\n\nTITLE: Pix Payment Response with QR Code Data\nDESCRIPTION: JSON response structure from a successful Pix payment creation request. It includes the payment status, transaction details, and most importantly the transaction_data object containing the QR code information (both as base64 image and as text) that needs to be displayed to the customer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pix.es.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...,\n  \"id\": 5466310457,\n  \"status\": \"pending\",\n  \"status_detail\": \"pending_waiting_transfer\",\n  ...,\n  \"transaction_details\": {\n      \"net_received_amount\": 0,\n      \"total_paid_amount\": 100,\n      \"overpaid_amount\": 0,\n      \"external_resource_url\": null,\n      \"installment_amount\": 0,\n      \"financial_institution\": null\n  },\n  \"point_of_interaction\": {\n      \"type\": \"PIX\",\n      \"sub_type\": null,\n      \"application_data\": {\n        \"name\": \"NAME_SDK\",\n        \"version\": \"VERSION_NUMBER\"\n      },\n      \"transaction_data\": {\n        \"qr_code_base64\": \"iVBORw0KGgoAAAANSUhEUgAABRQAAAUUCAYAAACu5p7oAAAABGdBTUEAALGPC/xhBQAAAAFzUkdCAK7OHOkAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAIABJREFUeJzs2luO3LiWQNFmI+Y/Zd6vRt36KGNXi7ZOBtcagHD4kNLeiLX33v8DAAAAABD879sDAAAAAAA/h6AIAAAAAGSCIgAAAACQCYoAAAAAQCYoAgAAAACZoAgAAAAAZIIiAAAAAJAJigAAAABAJigCAAAAAJmgCAAAAABkgiIAAAAAkAmKAAAAAEAmKAIAAAAAmaAIAAAAAGSCIgAAAACQCYoAAAAAQCYoAgAAAACZoAgAAAAAZIIiAAAAAJAJigAAAABAJigCA...\",\n        \"qr_code\": \"00020126600014br.gov.bcb.pix0117john@yourdomain.com0217additional data520400005303986540510.005802BR5913Maria Silva6008Brasilia62070503***6304E2CA\",\n        \"ticket_url\": \"https://www.mercadopago.com.br/payments/123456789/ticket?caller_id=123456&hash=123e4567-e89b-12d3-a456-426655440000\"\n      }\n  }\n  ...,\n}\n```\n\n----------------------------------------\n\nTITLE: Result of SFTP Batch Script Execution in Terminal\nDESCRIPTION: This snippet shows the output of executing an SFTP batch script. It includes the connection process, directory navigation, file upload, and disconnection steps, demonstrating the successful execution of the script.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/upload-a-file.en.md#2025-04-18_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\nUY0FVGW103Q0SP: ~ user$ sftp -b upload_sftp_script pg_sap@sftp-qa.mercadolibre.io sftp> ls\nselfserviceinput\tselfserviceoutput\nsftp> cd selfserviceinput\nsftp> put /Users/user/debt_589_6_20230804.csv\nsftp> ls\ndebt_589_6_20230804.csv\nsftp> bye\nUY0FVFGW103Q05P:~ user$\n```\n\n----------------------------------------\n\nTITLE: Downloading Report Java\nDESCRIPTION: A Java example to perform a GET request to download a settlement report file. The connection is set up to include the relevant authorization token and retrieves the report using file name in the URL.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report/:file_name\");\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\nconnection.setRequestMethod(\"GET\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\n----------------------------------------\n\nTITLE: Updating a Payment with Mercado Pago SDK\nDESCRIPTION: This snippet demonstrates how to update an existing payment's data using the Mercado Pago SDK. It initializes the MercadoPagoConfig with the access token and then uses the Payment class's capture method to update the payment, setting the transaction amount and idempotency key.  Replace placeholders with actual values.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/nodejs/create-payments.es.md#2025-04-18_snippet_3\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst payment = new Payment(client);\n\npayment.capture({\n\tid: '<PAYMENT_ID>',\n\ttransaction_amount: 100,\n\trequestOptions: {\n\t\tidempotencyKey: '<IDEMPOTENCY_KEY>'\n\t}\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creating Preference Object in Java\nDESCRIPTION: This code snippet demonstrates how to create a preference object in Java using the Mercado Pago SDK. It creates a preference item with title, quantity, and unit price, then builds a preference request setting the purpose to 'wallet_purchase'.  To allow guest payments, omit setting the purpose.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-startup.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Create a preference object\nPreferenceClient client = new PreferenceClient();\n \n// Create an item in the preference\nList<PreferenceItemRequest> items = new ArrayList<>();\nPreferenceItemRequest item =\n   PreferenceItemRequest.builder()\n       .title(\"My product\")\n       .quantity(1)\n       .unitPrice(new BigDecimal(\"100\"))\n       .build();\nitems.add(item);\n \nPreferenceRequest request = PreferenceRequest.builder()\n  // the .purpose('wallet_purchase') only allows logged payments\n  // to allow guest payments you can omit this line\n  .purpose('wallet_purchase')\n  .items(items).build();\n \nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Downloading Marketplace Seller Sales Report with MercadoPago API using cURL\nDESCRIPTION: This cURL command retrieves a marketplace seller sales report from the MercadoPago API. It requires the statement_id obtained from the report creation response and allows specifying the download format (csv or json). The request uses bearer token authentication.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/download-report.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request GET 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/statements/{{statement_id}}/download?format=csv' \\\n--header 'Authorization: Bearer {{TOKEN}}'\n```\n\n----------------------------------------\n\nTITLE: Creating Pix Refunds with Custom Headers in .NET\nDESCRIPTION: C# example for creating a refund with the X-Render-In-Process-Refunds header. This code configures the MercadoPago client with an access token, sets up request options with custom headers, and processes a partial refund of 20 monetary units.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/refund-pix.en.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\nPaymentRefundClient client = new PaymentRefundClient();\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"X-Render-In-Process-Refunds\", \"true\");\n\nvar refund = client.Refund(paymentId, 20, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Creating Yape Payment in Go\nDESCRIPTION: Go implementation for creating a Yape payment using MercadoPago SDK with token, transaction amount, and payer details\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.pt.md#2025-04-18_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/payment\"\n)\n\nfunc main() {\n\taccessToken := \"ENV_ACCESS_TOKEN\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := payment.NewClient(cfg)\n\n\trequest := payment.Request{\n\t\tTransactionAmount: 5000,\n            Description: \"Titulo del producto\",\n\t\tPaymentMethodID:   \"yape\",\n\t\tPayer: &payment.PayerRequest{\n\t\t\tEmail: \"test_user_123@testuser.com\",\n\t\t},\n\t\tToken:        \"ff8080814c11e237014c1ff593b57b4d\",\n\t\tInstallments: 1,\n\t}\n\n\tresource, err := client.Create(context.Background(), request)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Device Fingerprint Script to VTEX Checkout\nDESCRIPTION: This code snippet dynamically creates a script element to load the Device Fingerprint security script from Mercado Pago. It sets necessary attributes such as 'output' and 'view' to ensure the script functions correctly in the checkout context.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/vtex/device-fingerprint.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar script = document.createElement(\"script\");\nscript.src = \"https://www.mercadopago.com/v2/security.js\";\nscript.setAttribute(\"output\",\"vtex.deviceFingerprint\");\nscript.setAttribute(\"view\",\"checkout\");\ndocument.body.appendChild(script);\n```\n\n----------------------------------------\n\nTITLE: Opening Fintoc Payment Widget in Sandbox\nDESCRIPTION: This asynchronous function opens the Fintoc payment widget within the sandbox environment. It reuses the same structure as opening the widget in the production environment, but it expects the `fintoc` object to be initialized in sandbox mode.  The `try...catch` block is used for error handling.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-advanced.en.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nasync function openFintoc() {\n                  try {\n                    await fintoc.open({...})\n                  } catch(e) {\n                    console.error(e)\n                  }\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Fintoc in Sandbox Mode\nDESCRIPTION: This code snippet initializes the Fintoc widget in sandbox mode by setting the `sandbox` parameter to `true` when calling `mp.fintoc()`. This allows developers to test the integration with pre-established test credentials and a simulated environment. It assumes the `mp` object is already available in the scope.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-advanced.en.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n const fintoc = mp.fintoc({sandbox: true});\n```\n\n----------------------------------------\n\nTITLE: Fetching Payment Methods using Ruby SDK\nDESCRIPTION: This Ruby snippet initializes the Mercado Pago SDK with an access token and retrieves payment methods. It uses `Mercadopago::SDK.new()` to create an SDK instance and calls `sdk.payment_methods.get()` to fetch the payment methods. The payment methods are extracted from the `[:response]` key of the response hash.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/consult-payment-methods.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n \npayment_methods_response = sdk.payment_methods.get()\npayment_methods = payment_methods_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Scheduling Report Generation Java\nDESCRIPTION: This Java example creates a POST request to schedule the generation of settlement reports. It sets up an HTTPS connection with the required headers and prints the HTTP response code, message, and content.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report/schedule\");\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\nconnection.setRequestMethod(\"POST\");\nconnection.setRequestProperty(\"Accept\", \"application/json\");\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\n----------------------------------------\n\nTITLE: Get Payment Information\nDESCRIPTION: This code retrieves information about a specific payment using its ID. It uses the `payment().get()` method to fetch the payment details from the Mercado Pago API and returns the information if the request is successful (status 200).\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.es.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\n    \n    def index(req, **kwargs):\n        sdk = mercadopago.SDK(\"ACCESS_TOKEN\")\n\n        payment_info = sdk.payment().get(kwargs[\"id\"])\n\n        if payment_info[\"status\"] == 200:\n            return json.dumps(payment_info[\"response\"], indent=4)\n        else:\n            return None\n```\n\n----------------------------------------\n\nTITLE: Dynamic Document Type Selection\nDESCRIPTION: Implements an asynchronous function to dynamically populate document type options in a form using MercadoPago SDK\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.es.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n(async function getIdentificationTypes() {\ntry {\nconst identificationTypes = await mp.getIdentificationTypes();\nconst identificationTypeElement = document.getElementById('form-checkout__identificationType');\n\ncreateSelectOptions(identificationTypeElement, identificationTypes);\n} catch (e) {\nreturn console.error('Error getting identificationTypes: ', e);\n}\n})();\n\nfunction createSelectOptions(elem, options, labelsAndKeys = { label: \"name\", value: \"id\" }) {\nconst { label, value } = labelsAndKeys;\n\nelem.options.length = 0;\n\nconst tempOptions = document.createDocumentFragment();\n\noptions.forEach(option => {\nconst optValue = option[value];\nconst optLabel = option[label];\n\nconst opt = document.createElement('option');\nopt.value = optValue;\nopt.textContent = optLabel;\n\ntempOptions.appendChild(opt);\n});\n\nelem.appendChild(tempOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: Criando preferência de pagamento com Ruby no Mercado Pago\nDESCRIPTION: Este snippet demonstra como criar uma preferência de pagamento usando o SDK do Mercado Pago em Ruby. Ele configura um item com título, preço unitário e quantidade, e obtém o ID da preferência criada.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-preferences.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# Cria um objeto de preferência\npreference_data = {\n  items: [\n    {\n      title: 'Meu produto',\n      unit_price: 75.56,\n      quantity: 1\n    }\n  ]\n}\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n\n# Este valor substituirá a string \"<%= @preference_id %>\" no seu HTML\n@preference_id = preference['id']\n```\n\n----------------------------------------\n\nTITLE: Get Transaction Information via API (cURL)\nDESCRIPTION: This cURL command demonstrates how to retrieve transaction information from the Mercado Pago API using a GET request. It requires an `access_token` and the `transaction_intent_id`. Replace `{{transaction_intent_id}}` and `{{access_token}}` with the actual values.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request GET 'https://api.mercadopago.com/v1/transaction-intents/{{transaction_intent_id}}' \\\n--header 'Authorization: Bearer {{access_token}}'\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Format for Batch Payment Processing\nDESCRIPTION: Example CSV structure showing the required format with semicolon-separated fields including external reference, card ID, payer ID, amount, reason, echo data, and soft descriptor.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/batch-payments-vault-migration/batch-payments/input-format-batch-payments.es.md#2025-04-18_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nexternal_reference;card_id;payer_id;amount;reason;echo_data;soft_descriptor\n24324234332;3154;1234-1234;299;Ejemplo payment;dato random;CompanyName\n24324234332;3154;1234-1234;Ejemplo payment;dato random;CompanyName\n24324234332;3154;1234-1234;299;Ejemplo payment;dato random;CompanyName\n24324234332;3154;1234-1234;299;Ejemplo payment;dato random;CompanyName\n```\n\n----------------------------------------\n\nTITLE: Opening Safari View Controller in SwiftUI\nDESCRIPTION: Demonstrates how to present a Safari View Controller in a SwiftUI application with dynamic URL handling and view presentation logic.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/swift.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: SwiftUI\nCODE:\n```\nimport SwiftUI\nimport SafariServices\n\nstruct ContentView: View {\n    var body: some View {\n        VStack {\n            Button(\"Open Preference\" ) {\n                if let url = URL(string:\"YOUR-URL-PREFERENCE\")\n                {\n                    if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene {\n                        if let rootViewController = windowScene.windows.first?.rootViewController {\n                            let safariVC = SFSafariViewController(url: url)\n                            rootViewController.present(safariVC, animated: true, completion: nil)\n                        }\n                    }\n                    \n                }\n                \n            }\n        }\n        .padding()\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Parsing Payment Response Java\nDESCRIPTION: This Java code snippet shows how to parse the payment response using the `parseResponse` function of the `PaymentFlow` class, and check the `paymentReference` to manage success or error scenarios.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/payment-flow-legacy-support.en.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nfinal PaymentFlow paymentFlow = MPManager.INSTANCE.getPaymentFlow();\n\nfinal Uri resultUri = getIntent().getData();\nfinal PaymentResponse response = paymentFlow.parseResponse(resultUri);\n\nif (!response.getPaymentReference().isEmpty()) {\n // Payment management with success case\n} else {\n // Payment management with an error\n}\n```\n\n----------------------------------------\n\nTITLE: Mercado Pago Test Credentials Table - Public Key and Access Token\nDESCRIPTION: Markdown table showing the description of Public Key and Access Token test credentials used in Mercado Pago integrations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/credentials/credentials.es.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Tipo | Descripción |\n|---|---|\n| Public Key | La clave pública de la aplicación se utiliza generalmente en el frontend. Permite, por ejemplo, acceder a información sobre los medios de pago y cifrar los datos de la tarjeta. |\n| Access Token | Clave privada de la aplicación que siempre se debe utilizar en el backend para generar pagos. Es esencial mantener esta información segura en tus servidores. |\n```\n\n----------------------------------------\n\nTITLE: Defining Preference Validity - JSON\nDESCRIPTION: This snippet shows how to define the validity period for a Mercado Pago preference using `expires`, `expiration_date_from`, and `expiration_date_to`.  The dates must be in ISO 8601 format. Setting `expires` to true enables the expiration dates.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"expires\": true,\n\"expiration_date_from\": \"2017-02-01T12:00:00.000-04:00\",\n\"expiration_date_to\": \"2017-02-28T12:00:00.000-04:00\"\n```\n\n----------------------------------------\n\nTITLE: Card Tokenization Migration CSV Example\nDESCRIPTION: Sample CSV output showing the migration of card tokens with status, customer ID, card ID, reference ID, and status details\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/batch-payments-vault-migration/vault-migration/output-format-vault-migration.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nSTATUS,CUSTOMER_ID,CARD_ID,REFERENCE_ID,STATUS_DETAIL\nFINALIZED,1234-cust_id,270,ref_id_externa_2p_1800008,ID do cartão atualizado\nFINALIZED,1234-cust_id,270,ref_id_externa_2p_1800010,\nFINALIZED,1234-cust_id,270,ref_id_externa_2p_1800007,ID do cartão atualizado\nFINALIZED,1234-cust_id,270,ref_id_externa_2p_1800006,ID do cartão atualizado\nFINALIZED,1234-cust_id,270,ref_id_externa_2p_1800009,ID do cartão atualizado\n```\n\n----------------------------------------\n\nTITLE: Create Customer\nDESCRIPTION: This code creates a new customer.  The `customer_data` dictionary must include the customer's email address. The `customer().create()` method sends the customer data to the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python.es.md#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncustomer_data = {\n        \"email\": \"email@test.com\"\n    }\n\n    sdk.customer().create(customer_data)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Methods with Mercado Pago SDKs\nDESCRIPTION: Code examples to retrieve available payment methods from Mercado Pago's API using various programming languages and SDKs. These snippets make a GET request to the /v1/payment_methods endpoint using the account's access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  MercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n  $payment_methods = MercadoPago::get(\"/v1/payment_methods\");\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nvar mercadopago = require('mercadopago');\nmercadopago.configurations.setAccessToken(config.access_token);\nvar response = await mercadopago.payment_methods.listAll();\nvar payment_methods = response.body;\n```\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\nPaymentMethodClient client = new PaymentMethodClient();\nclient.list();\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\npayment_methods_response = sdk.payment_methods.get()\npayment_methods = payment_methods_response[:response]\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Client.PaymentMethod;\nusing MercadoPago.Config;\nusing MercadoPago.Resource;\nusing MercadoPago.Resource.PaymentMethod;\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\nvar client = new PaymentMethodClient();\nResourcesList<PaymentMethod> paymentMethods = await client.ListAsync();\n```\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ACCESS_TOKEN\")\npayment_methods_response = sdk.payment_methods().list_all()\npayment_methods = payment_methods_response[\"response\"]\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/payment_methods' \\\n```\n\n----------------------------------------\n\nTITLE: Inicializando checkout de Mercado Pago en JavaScript\nDESCRIPTION: Este código JavaScript inicializa el checkout de Mercado Pago utilizando el ID de preferencia y el contenedor especificado.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-mp-wallet.es.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmp.bricks().create(\"wallet\", \"wallet_container\", {\n  initialization: {\n    preferenceId: \"<PREFERENCE_ID>\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Checkout Preference for Entertainment Products using MercadoPago API (cURL)\nDESCRIPTION: This cURL request creates a checkout preference for an entertainment product. It includes detailed buyer information, shipment details, and product specifics. The request is sent to the MercadoPago API endpoint with an authorization token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/industry-data/additional-info.en.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/checkout/preferences' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n--data-raw '{\n    \"auto_return\": \"approved\",\n    \"back_urls\": {\n        \"failure\": \"https://www.mercadopago.com/home/failure\",\n        \"pending\": \"https://www.mercadopago.com/home/pending\",\n        \"success\": \"https://www.mercadopago.com/home/success\"\n    },\n    \"notification_url\": \"https://webhook.site/xyz\",\n    \"expires\": false,\n    \"external_reference\": \"order-123\",\n    \"date_of_expiration\": \"2025-03-12T12:58:41.425-04:00\",\n    \"items\": [\n        {\n            \"id\": \"1234\",\n            \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n            \"title\": \"Product\",\n            \"category_id\": \"entertainment\",\n            \"quantity\": 1,\n            \"unit_price\": 150,\n            \"category_descriptor\":{\n                \"event_date\": \"2022-03-12T12:58:41.425-04:00\"\n            },\n        }\n    ],\n    \"payer\": {\n        \"phone\": {\n            \"area_code\": \"11\",\n            \"number\": \"[FAKER][PHONE_NUMBER][CELL_PHONE]\"\n        },\n        \"identification\": {\n          \"identification_type\": \"[FAKER][IDENTIFICATION][TYPE]\",\n          \"identification_number\": \"12345678\"\n        },\n        \"email\": \"john@yourdomain.com\",\n        \"first_name\": \"[FAKER][NAME][FIRST_NAME]\",\n        \"last_name\": \"[FAKER][NAME][LAST_NAME]\",\n        \"date_created\": \"\",\n        \"authentication_type\": \"Facebook\",\n        \"registration date\": \"2015-06-02T12:58:41.425-04:00\",\n        \"is_prime_user\": false,\n        \"is_first_purchase_online\": false,\n        \"last_purchase\": \"2020-01-02T12:58:41.425-04:00\"\n    },\n    \"payment_methods\": {\n        \"excluded_payment_methods\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"default_installments\": null,\n        \"default_payment_method_id\": null,\n        \"excluded_payment_types\": [\n            {\n                \"id\": \"\"\n            }\n        ],\n        \"installments\": null\n    },\n    \"shipments\": {\n        \"mode\": \"not_specified\",\n        \"receiver_address\": {\n            \"zip_code\": \"[FAKER][ADDRESS][ZIP_CODE]\",\n            \"street_name\": \"[FAKER][ADDRESS][STREET_NAME]\",\n            \"city_name\": \"[FAKER][ADDRESS][CITY]\",\n            \"state_name\": \"[FAKER][ADDRESS][STATE]\",\n            \"street_number\": 1000\n        },\n        \"express_shipment\": false,\n        \"local_pickup\": false\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Mercado Pago Tokenize Checkout\nDESCRIPTION: HTML implementation for creating a checkout form that uses Mercado Pago's web tokenize checkout script. Requires a public key and transaction amount to be specified.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.en.md#2025-04-18_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"/>\n    <form action=\"https://www.your-site.com/process-payment\" method=\"POST\">\n      <script\n\t      src=\"https://www.mercadopago.com.ar/integrations/v1/web-tokenize-checkout.js\"\n\t      data-public-key=\"<PUBLIC_KEY>\"\n\t      data-transaction-amount=\"100\"\n\t      data-button-label=\"Confirmar\">\n      </script>\n    </form>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring FTP Notifier for Marketplace Seller Sales Reports\nDESCRIPTION: This JSON response shows the configuration of an FTP notifier for receiving marketplace seller sales reports. It includes details such as protocol, server information, and credentials.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.es.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": {{notifier_id}},\n    \"type\": \"ftp\",\n    \"data\": {\n        \"protocol\": \"SFTP\",\n        \"ip\": \"test.files.com\",\n        \"username\": \"test@mercadolibre.com\",\n        \"password\": \"test\",\n        \"remote_dir\": \"/\",\n        \"port\": 22\n    },\n    \"description\": null,\n    \"version\": 0,\n    \"status\": \"ACTIVE\",\n    \"is_pii_data\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Fields to Payment Form - HTML\nDESCRIPTION: This HTML snippet adds new input fields to the payment form necessary for the PSE integration, including address and phone number fields.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-migrate-pse.en.md#2025-04-18_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<form id=\"form-checkout\" action=\"/process_payment\" method=\"post\">\n    <div>\n      <div>\n        <label for=\"zipCode\">Zip Code</label>\n        <input id=\"form-checkout__zipCode\" name=\"zipCode\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"streetName\">Street Name</label>\n        <input id=\"form-checkout__streetName\" name=\"streetName\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"streetNumber\">Street Number</label>\n        <input id=\"form-checkout__streetNumber\" name=\"streetNumber\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"neighborhood\">Neighborhood</label>\n        <input id=\"form-checkout__neighborhood\" name=\"neighborhood\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"city\">Ciudad</label>\n        <input id=\"form-checkout__city\" name=\"city\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"federalUnit\">Unidad Federal</label>\n        <input id=\"form-checkout__federalUnit\" name=\"federalUnit\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"phoneAreaCode\">PhoneAreaCode</label>\n        <input id=\"form-checkout__phoneAreaCode\" name=\"phoneAreaCode\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"phoneNumber\">PhoneNumber</label>\n        <input id=\"form-checkout__phoneNumber\" name=\"phoneNumber\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"email\">E-mail</label>\n        <input id=\"form-checkout__email\" name=\"email\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"personType\">Tipo de persona</label>\n        <select id=\"form-checkout__personType\" name=\"personType\" type=\"text\">\n          <option value=\"natural\">Natural</option>\n          <option value=\"juridica\">Jurídica</option>\n        </select>\n      </div>\n      <div>\n        <label for=\"identificationType\">Tipo de documento</label>\n        <select id=\"form-checkout__identificationType\" name=\"identificationType\" type=\"text\"></select>\n      </div>\n      <div>\n        <label for=\"identificationNumber\">Número del documento</label>\n        <input id=\"form-checkout__identificationNumber\" name=\"identificationNumber\" type=\"text\">\n      </div>\n    </div>\n    <div>\n      <div>\n        <label for=\"banksList\">Banco</label>\n        <div id=\"banksList\"></div> \n      </div>\n    </div>\n    <div>\n      <div>\n        <input type=\"hidden\" name=\"transactionAmount\" id=\"transactionAmount\" value=\"100\">\n        <input type=\"hidden\" name=\"description\" id=\"description\" value=\"Nome do Produto\">\n        <br>\n        <button type=\"submit\">Pagar</button>\n      </div>\n    </div>\n  </form>\n\n```\n\n----------------------------------------\n\nTITLE: Respuesta JSON del token Yape generado\nDESCRIPTION: Ejemplo de la respuesta JSON obtenida al generar un token de pago Yape, que incluye información como el identificador del token, fecha de creación y otros datos necesarios para procesar el pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.es.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"live_mode\": true,\n    \"luhn_validation\": null,\n    \"require_esc\": null,\n    \"cloned\": false,\n    \"cardholder\": {\n        \"identification\": {\n            \"number\": null,\n            \"type\": null,\n            \"subtype\": null\n        },\n        \"name\": \"yape\"\n    },\n    \"security_code_id\": 8069792005119486812,\n    \"security_code_length\": 6,\n    \"card_number_length\": 9,\n    \"expiration_month\": 5,\n    \"expiration_year\": 2024,\n    \"card_present_id\": null,\n    \"card_id\": null,\n    \"client_id\": 7775327892346559,\n    \"present\": null,\n    \"id\": \"45d013f72bf42717a1625f4c508fc20f\",\n    \"card_number_id\": \"FFTSHQTOSJTXGFVFGJKCBAIVOUISTFZBDRTQWLYJ\",\n    \"creation_date\": null,\n    \"due_date\": null,\n    \"last_modified_date\": null,\n    \"product_id\": null,\n    \"trust_level\": \"unknown\",\n    \"public_key\": \"APP_USR-352587ca-674b-4ae4-a348-8583ab39b4ac\",\n    \"site_id\": \"MPE\",\n    \"status\": \"active\",\n    \"transaction_id\": null,\n    \"trunc_card_number\": null,\n    \"used_date\": null,\n    \"bin\": \"111111\",\n    \"version\": 0,\n    \"client_header\": null,\n    \"first_six_digits\": \"111111\",\n    \"last_four_digits\": \"6789\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Invalid Discount in Mercado Pago API\nDESCRIPTION: JSON error response received when attempting to process a payment with an invalid discount. The response indicates the discount doesn't exist or the amount is incorrect, providing a specific error code (400136) to help with troubleshooting.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/process-payments-with-discounts.en.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"bad_request\",\n  \"message\": \"discount doesn't exist or amount is incorrect\",\n  \"status\": 400,\n  \"cause\": [\n    {\n      \"code\": 400136,\n      \"description\": \"discount doesn't exist or amount is incorrect\",\n      \"data\": null\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling Payments in Node.js\nDESCRIPTION: This Node.js code demonstrates how to cancel a payment reservation using the MercadoPago SDK by creating an instance of MercadoPagoConfig with the access token, and utilizing the Payment class to execute the cancellation with request options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/cancel-reserve.en.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MercadoPagoConfig, Payment } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: 'YOUR_ACCESS_TOKEN' });\nconst payment = new Payment(client);\n\npayment.cancel({\nid: '<PAYMENT_ID>',\nrequestOptions: {\nidempotencyKey: '<IDEMPOTENCY_KEY>'\n},\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Formulario HTML para captura de datos Yape\nDESCRIPTION: Formulario HTML para capturar el número de teléfono y el código OTP (One-time password) del usuario, necesarios para generar el token de pago con Yape.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.es.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form id=\"form-checkout\">\n  <div>\n    <label for=\"payerPhone\">Phone Number</label>\n    <input id=\"form-checkout__payerPhone\" name=\"payerPhone\" type=\"text\" />\n  </div>\n  <div>\n    <label for=\"payerOTP\">OTP</label>\n    <input id=\"form-checkout__payerOTP\" name=\"payerOTP\" type=\"text\" />\n  </div>\n  <div>\n    <button onclick=\"handleYape()\">Create YAPE</button>\n  </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Conditional Configuration for Brazil (mlb)\nDESCRIPTION: This snippet provides a specific configuration block for Brazil (mlb).  It is used to customize features or settings based on the country.  This ensures that the integration behaves correctly in different regions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/woocommerce/landing.es.md#2025-04-18_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n----[mlb]----\n---\nbullet_section_with_media: \n - title: Personaliza los pagos con Checkout Transparente\n - type: reversed\n - message: Integra nuestro Checkout Transparente y haz que el comprador realice todo el proceso de pago dentro del entorno de tu tienda.\n - image: /shopify/mini-landing-4.png\n---\n------------\n```\n\n----------------------------------------\n\nTITLE: CFBundleURLTypes Configuration in info.plist (iOS)\nDESCRIPTION: This XML snippet shows the CFBundleURLTypes configuration in the info.plist file for iOS. It specifies the URL schemes that the application can handle. This allows the application to respond to deep links with the defined scheme.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-expo-go.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<key>CFBundleURLTypes</key>\n    <array>\n        <dict> <key>CFBundleURLSchemes\n            </key>\n            <array>\n                <string>myapp</string>\n                <string>com.test.TestExpoBrowser</string>\n            </array>\n        </dict> \n    </array>\n```\n\n----------------------------------------\n\nTITLE: Exchange Rate API Response in JSON\nDESCRIPTION: This JSON snippet shows a sample response from the Exchange Rate API, providing currency conversion information between USD and the local currency.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.es.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"creation_date\": \"2018-04-13T05:15:19.752-04:00\",\n  \"currency_base\": \"USD\",\n  \"currency_quote\": \"[FAKER][CURRENCY][ACRONYM]\",\n  \"id\": \"95f77580-602a-4086-9cec-c3b5afad2c5f\",\n  \"inv_rate\": 0.05458033,\n  \"rate\": 18.3216177\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Customers by Email in Java\nDESCRIPTION: Java implementation for searching a customer by email using Mercado Pago's SDK. It creates a CustomerClient, sets up the search filters with the email, builds a search request with offset and limit parameters, and executes the search.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/search-customers.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nCustomerClient client = new CustomerClient();\n\nMap<String, Object> filters = new HashMap<>();\nfilters.put(\"email\", \"test_payer_12345@testuser.com\");\n\nMPSearchRequest searchRequest =\nMPSearchRequest.builder().offset(0).limit(0).filters(filters).build();\n\nclient.search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Python HMAC Signature Verification\nDESCRIPTION: Creates and verifies an HMAC signature using SHA-256 hashing in Python. Takes a secret key and manifest as input, generates a hash, and compares it with an expected hash value for verification.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Create an HMAC signature defining the hash type and the key as a byte array\nhmac_obj = hmac.new(secret.encode(), msg=manifest.encode(), digestmod=hashlib.sha256)\n\n# Obtain the hash result as a hexadecimal string\nsha = hmac_obj.hexdigest()\nif sha == hash:\n    # HMAC verification passed\n    print(\"HMAC verification passed\")\nelse:\n    # HMAC verification failed\n    print(\"HMAC verification failed\")\n```\n\n----------------------------------------\n\nTITLE: Associating Google Ads Tag with Checkout Pro Preference in Python\nDESCRIPTION: This Python code demonstrates how to associate a Google Ads conversion tag with a Checkout Pro preference. The 'CONVERSION_ID' and 'CONVERSION_LABEL' should be replaced with actual values from the Google Ads account.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.pt.md#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Associar sua tag do Google ads\npreference_data = {\n    # ...\n    \"tracks\": [\n        {\n            \"type\": \"google_ad\",\n            \"values\": {\n                \"conversion_id\": \"CONVERSION_ID\",\n                \"conversion_label\": \"CONVERSION_LABEL\"\n            }\n        }\n    ]\n}\n\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Launching URLs with Flutter Custom Tabs\nDESCRIPTION: This code snippet demonstrates how to launch a URL using Flutter Custom Tabs. It utilizes the `flutter_custom_tabs` package to open a URL within a custom tab in the user's browser.  It includes options for customizing the toolbar color, enabling share functionality, and configuring animations. It also includes options for iOS using SafariViewControllerOption.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/flutter.es.md#2025-04-18_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_custom_tabs/flutter_custom_tabs.dart';\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        body: Center(\n          child: TextButton(\n            child: const Text('Show Flutter homepage'),\n            onPressed: () => _launchURL(context),\n          ),\n        ),\n      ),\n    );\n  }\n\n  void _launchURL(BuildContext context) async {\n    try {\n      await launch(\n        'https://flutter.dev',\n        customTabsOption: CustomTabsOption(\n          toolbarColor: Theme.of(context).primaryColor,\n          enableDefaultShare: true,\n          enableUrlBarHiding: true,\n          showPageTitle: true,\n          animation: CustomTabsAnimation.slideIn(),\n          // or user defined animation.\n          animation: const CustomTabsAnimation(\n            startEnter: 'slide_up',\n            startExit: 'android:anim/fade_out',\n            endEnter: 'android:anim/fade_in',\n            endExit: 'slide_down',\n          ),\n          extraCustomTabs: const <String>[\n            // ref. https://play.google.com/store/apps/details?id=org.mozilla.firefox\n            'org.mozilla.firefox',\n            // ref. https://play.google.com/store/apps/details?id=com.microsoft.emmx\n            'com.microsoft.emmx',\n          ],\n        ),\n        safariVCOption: SafariViewControllerOption(\n          preferredBarTintColor: Theme.of(context).primaryColor,\n          preferredControlTintColor: Colors.white,\n          barCollapsingEnabled: true,\n          entersReaderIfAvailable: false,\n          dismissButtonStyle: SafariViewControllerDismissButtonStyle.close,\n        ),\n      );\n    } catch (e) {\n      // An exception is thrown if browser app is not installed on Android device.\n      debugPrint(e.toString());\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Brick Appearance in React\nDESCRIPTION: This snippet shows how to customize the Wallet Brick button appearance using React. It configures the theme and custom style properties similar to the JavaScript example.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-appearance.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n    theme:'dark',\n    customStyle: {\n        valueProp: 'practicality',\n        valuePropColor: 'black',\n        borderRadius: '10px',\n        verticalPadding: '10px',\n        horizontalPadding: '10px',\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment Flow for Chile\nDESCRIPTION: Implementation of payment flow initialization for Chilean market using PaymentFlow class. Shows how to create payment request data and handle responses through callbacks.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/payment-flow-callback.en.md#2025-04-18_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval paymentFlow = MPManager.paymentFlow\n\nval paymentFlowRequestData = PaymentFlowRequestData(\n\n   amount = 10.0,\n\n   description = \"test description\",\n\n   paymentMethod = PaymentMethod.CREDIT_CARD.name,\n\n   printOnTerminal = false // optional field if it processes the payment without printing at the terminal\n\n)\n\npaymentFlow.launchPaymentFlow(\n\n   paymentFlowRequestData = paymentFlowRequestData\n\n) { response ->\n\n   response.doIfSuccess { result ->\n\n       // success handling using a message\n\n   }.doIfError { error ->\n\n       // error handling\n   }\n\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal PaymentFlow paymentFlow = MPManager.INSTANCE.getPaymentFlow();\n\nfinal String amount = \"2.0\";\n\nfinal String description = \"Payment description\";\n\nfinal PaymentFlowData paymentFlowData = new PaymentFlowData(\n\n   amount,\n\n   description,\n\n   PaymentMethod.CREDIT_CARD.name(),\n\n   6, // optional field if launching the payment in installments. \n\n   false // optional field if launching the payment without printing in terminal\n\n);\n\n\n\nfinal Function1<MPResponse<PaymentResponse>, Unit> callback = (final MPResponse<PaymentResponse> response) -> {\n\n if (response.getStatus() == ResponseStatus.SUCCESS) {\n\n   // Success handling using a message\n\n } else {\n\n   // Error handling \n\n }\n\n return Unit.INSTANCE;\n\n};\n\npaymentFlow.launchPaymentFlow(paymentFlowData, callback);\n```\n\n----------------------------------------\n\nTITLE: Response Schema for Marketplace Sellers Sales Statement\nDESCRIPTION: Detailed JSON response structure for a financial statement API call, including statement metadata, report details, download URLs for different formats, and notification configurations. The response includes temporal information, statement status, and various IDs for referencing related resources.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/queries-and-validations.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": {{statement_id}},\n    \"date_start\": \"2023-07-18T00:00:00Z\",\n    \"date_end\": \"2023-07-20T19:00:00Z\",\n    \"date_created\": \"2023-07-21T17:25:25.764122Z\",\n    \"created_by\": \"automatic\",\n    \"description\": \"statement de pruebas\",\n    \"report\": {\n        \"id\": \"marketplace_sellers_sales\",\n        \"name\": \"Marketplace OP\",\n        \"topic\": \"financial_statements\",\n        \"version\": \"1\"\n    },\n    \"files\": [\n        {\n            \"type\": \"json\",\n            \"url\": \"https://api.mercadopago.com/v1/reporting/reports/marketplace_sellers_sales/statements/{{statement_id}}/download?format=json\"\n        },\n        {\n            \"type\": \"csv\",\n            \"url\": \"https://api.mercadopago.com/v1/reporting/reports/marketplace_sellers_sales/statements/{{statement_id}}/download?format=csv\"\n        }\n    ],\n    \"event\": null,\n    \"origin\": {\n        \"type\": \"date_range\",\n        \"data\": {\n            \"date_end\": \"2023-07-20T19:00:00Z\",\n            \"date_start\": \"2023-07-18T00:00:00Z\"\n        }\n    },\n    \"report_extra_data\": {},\n    \"structure\": {\n        \"id\": {{structure_id}},\n        \"version\": 0\n    },\n    \"notifiers\": [\n        {\n            \"id\": {{notifier_id_1}},\n            \"version\": 0,\n            \"type\": \"email\",\n            \"data\": {}\n        },\n        {\n            \"id\": {{notifier_id_n}},\n            \"version\": 0,\n            \"type\": \"ftp\",\n            \"data\": {}\n        }\n    ],\n    \"status\": \"available\",\n    \"reason_code\": {\n        \"code\": \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Node.js\nDESCRIPTION: This Node.js snippet creates a preference object using the Mercado Pago SDK. It defines the `purpose` as `wallet_purchase` (requiring logged-in payments), and includes an item with its ID, title, quantity, and unit price.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.pt.md#2025-04-18_snippet_11\n\nLANGUAGE: node\nCODE:\n```\n// Cria um objeto de preferência\nlet preference = {\n  // o \"purpose\": \"wallet_purchase\" permite apenas pagamentos logados\n  // para permitir pagamentos como guest, você pode omitir essa propriedade\n  \"purpose\": \"wallet_purchase\",\n  \"items\": [\n    {\n      \"id\": \"item-ID-1234\",\n      \"title\": \"Meu produto\",\n      \"quantity\" => 1,\n      \"unit_price\" => 75\n    }\n  ]\n};\n \nmercadopago.preferences.create(preference)\n  .then(function (response) {\n    // Este valor é o preferenceId que será enviado para o Brick na inicialização\n    const preferenceId = response.body.id;\n  }).catch(function (error) {\n    console.log(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Initializing Pix Payment Form with Pre-filled Email in React\nDESCRIPTION: React implementation to pre-populate the email field for Pix payments in Brazil. This object configuration initializes the Brick with the payer's email address.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/initialize-data-on-the-bricks.en.md#2025-04-18_snippet_3\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst initialization = {\n ...,\n payer: {\n   ...,\n   email: '<PAYER_EMAIL_HERE>',\n },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with Retail Data using cURL\nDESCRIPTION: This cURL command demonstrates how to create a payment with additional retail-specific information. It includes headers for content type, idempotency, authorization, and session ID, along with a JSON payload containing transaction details, payer information, item details, and shipping information. The command sends a POST request to the Mercado Pago payments API endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/industry-data/retail.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/v1/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'X-Idempotency-Key: {{uuid}}' \\\n--header 'Authorization: Bearer ACCESS_TOKEN' \\\n--header 'X-Meli-Session-Id: {{device_id}} \\\\n--data-raw '{ \n    \"transaction_amount\": 150.00,\n    \"installments\": 1,\n    \"statement_descriptor\": \"LOJA 123\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": null,\n    \"application_fee\": null,\n    \"payment_method_id\": \"debvisa\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Pedido01\",\n    \"description\": \"PEDIDO NOVO\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"metadata\": {\n        \"order_number\": \"order_01\"\n    },\n    \"payer\": {\n        \"email\": \"test_user_123456789@testuser.com\",\n        \"identification\": {\n            \"type\": \"CPF\",\n            \"number\": \"12345678909\"\n        }\n    },\n    \"additional_info\": {\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"title\": \"Serviço\",\n                \"picture_url\": \"{{picture_url}}\",\n                \"description\": \"Descrição de serviço\",\n                \"category_id\": \"pantry\",\n                \"quantity\": 1,\n                \"unit_price\": 150\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nome\",\n            \"last_name\": \"Sobrenome\",\n            \"is_prime_user\": true,\n            \"is_first_purchase_online\": true,\n            \"last_purchase\": \"2019-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"11\",\n                \"number\": \"987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"206233-2002\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"3003\"\n            },\n            \"authentication_type\": \"Facebook\",\n            \"registration_date\": \"2020-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"306233-2003\",\n                \"street_name\": \"Av. das Nações Unidas\",\n                \"street_number\": \"3003\",\n                \"floor\": \"5\",\n                \"apartment\": \"502\",\n                \"state_name\": \"DF\",\n                \"city_name\": \"Bogota\"\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Deleting a MercadoPago Report Event using cURL\nDESCRIPTION: This cURL command deletes a specific report event in MercadoPago's system. It requires the event_id and an authorization token. A successful request will not return a response, while an error will return a 404 status code.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/deactivation.en.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request DELETE 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/events/{{event_id}}' \\\n--header 'Authorization: Bearer {{TOKEN}}'\n```\n\n----------------------------------------\n\nTITLE: Criando preferência de pagamento com Go no Mercado Pago\nDESCRIPTION: Este snippet demonstra como criar uma preferência de pagamento usando o SDK do Mercado Pago em Go. Ele configura um item com título, quantidade e preço unitário, e cria a preferência usando um cliente.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-preferences.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nclient := preference.NewClient(cfg)\n\nrequest := preference.Request{\n\tItems: []preference.ItemRequest{\n\t\t{\n\t\t\tTitle:       \"Meu produto\",\n\t\t\tQuantity:    1,\n\t\t\tUnitPrice:   75.76,\n\t\t},\n\t},\n}\n\nresource, err := client.Create(context.Background(), request)\nif err != nil {\n\tfmt.Println(err)\n\treturn\n}\n\nfmt.Println(resource)\n```\n\n----------------------------------------\n\nTITLE: Rendering Wallet Brick with JavaScript\nDESCRIPTION: This code snippet demonstrates how to render the Wallet Brick using JavaScript. It utilizes the `bricksBuilder.create` method to initialize the brick with a preference ID and customization options, including theme and custom styles.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nconst renderWalletBrick = async (bricksBuilder) => {\n    await bricksBuilder.create(\"wallet\", \"walletBrick_container\", {\n        initialization: {\n            preferenceId: \"<PREFERENCE_ID>\",\n        },\n        customization: {\n            theme: \"default\",\n            customStyle: {\n                valueProp: \"practicality\",\n                valuePropColor: \"white\",\n            },\n        },\n    });\n};\n\nrenderWalletBrick(bricksBuilder);\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods in Multiple Languages\nDESCRIPTION: Examples of how to configure payment methods preferences including excluded payment types, methods and installment limits. Shows implementation across different programming languages with Mercado Pago SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.es.md#2025-04-18_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$preference = new MercadoPago\\Preference();\n// ...\n$preference->payment_methods = array(\n  \"excluded_payment_methods\" => array(\n    array(\"id\" => \"master\")\n  ),\n  \"excluded_payment_types\" => array(\n    array(\"id\" => \"ticket\")\n  ),\n  \"installments\" => 12\n);\n// ...\n?>\n```\n\nLANGUAGE: Node.js\nCODE:\n```\nvar preference = {}\npreference = {\n//...\n\"payment_methods\": {\n    \"excluded_payment_methods\": [\n        {\n            \"id\": \"master\"\n        }\n    ],\n    \"excluded_payment_types\": [\n        {\n            \"id\": \"ticket\"\n        }\n    ],\n    \"installments\": 12\n\t}\n//...\n}\n```\n\nLANGUAGE: Java\nCODE:\n```\nPreferenceClient client = new PreferenceClient();\n//...\nList<PreferencePaymentMethodRequest> excludedPaymentMethods = new ArrayList<>();\nexcludedPaymentMethods.add(PreferencePaymentMethodRequest.builder().id(\"master\").build());\nexcludedPaymentMethods.add(PreferencePaymentMethodRequest.builder().id(\"amex\").build());\n\nList<PreferencePaymentTypeRequest> excludedPaymentTypes = new ArrayList<>();\nexcludedPaymentTypes.add(PreferencePaymentTypeRequest.builder().id(\"ticket\").build());\n\nPreferencePaymentMethodsRequest paymentMethods =\n   PreferencePaymentMethodsRequest.builder()\n       .excludedPaymentMethods(excludedPaymentMethods)\n       .excludedPaymentTypes(excludedPaymentTypes)\n       .installments(12)\n       .build();\n\nPreferenceRequest request = PreferenceRequest.builder().paymentMethods(paymentMethods).build();\n\nclient.create(request);\n//...\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n#...\npreference_data = {\n  # ...\n  payment_methods: {\n    excluded_payment_methods: [\n      { id: 'master' }\n    ],\n    excluded_payment_types: [\n      { id: 'ticket' }\n    ],\n    installments: 12\n  }\n  # ...\n}\n#...\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar paymentMethods = new PreferencePaymentMethodsRequest\n{\n    ExcludedPaymentMethods = new List<PreferencePaymentMethodRequest>\n    {\n        new PreferencePaymentMethodRequest\n        {\n            Id = \"master\",\n        },\n    },\n    ExcludedPaymentTypes = new List<PreferencePaymentTypeRequest>\n    {\n        new PreferencePaymentTypeRequest\n        {\n            Id = \"ticket\",\n        },\n    },\n    Installments = 12,\n};\n\nvar request = new PreferenceRequest\n{\n    // ...\n    PaymentMethods = paymentMethods,\n};\n```\n\nLANGUAGE: Python\nCODE:\n```\n#...\npreference_data = {\n    \"excluded_payment_methods\": [\n        { \"id\": \"master\" }\n    ],\n    \"excluded_payment_types\": [\n        { \"id\": \"ticket\" }\n    ],\n    \"installments\": 12\n}\n#...\n```\n\n----------------------------------------\n\nTITLE: Rendering Status Screen Brick Container HTML\nDESCRIPTION: This HTML code snippet shows the basic container element where the Status Screen Brick will be rendered. The `id` attribute, `statusScreenBrick_container`, is crucial as it needs to match the container ID used during the Brick's initialization in the JavaScript code.  This div acts as the placeholder for the Brick's UI.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/status-screen-brick/default-rendering.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"statusScreenBrick_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Initialize Checkout Elements\nDESCRIPTION: This JavaScript code initializes the checkout elements by setting the PSE banks and updating the document type options. It ensures that the PSE bank list and document type select options are populated when the page finishes loading.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-migrate-pse.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n(function initCheckout() {\n    try {\n        const docTypeElement = document.getElementById('form-checkout__identificationType');\n        setPse();\n        updateSelectOptions('natural')\n    }catch(e) {\n        return console.error('Error getting identificationTypes: ', e);\n    }\n })();\n\n```\n\n----------------------------------------\n\nTITLE: Renovando Access Token con PHP en Mercado Pago\nDESCRIPTION: Este snippet demuestra cómo renovar un Access Token utilizando PHP y la clase OauthClient. Se configura una solicitud con las credenciales del cliente y el refresh token, y luego se llama al método refresh.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/renewal.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new OauthClient();\n  $request = new OAuthRefreshRequest();\n    $request->client_secret = \"CLIENT_SECRET\";\n    $request->client_id = \"CLIENT_ID\";\n    $request->refresh_token = \"REFRESH_TOKEN\";\n\n  $client->refresh($request);\n?>\n```\n\n----------------------------------------\n\nTITLE: Searching Customers with MercadoPago SDK in Python\nDESCRIPTION: This snippet demonstrates how to search for customers using specific filters with the MercadoPago SDK in Python. By applying filters like email, the search method returns a list of customers that match the criteria. Requires the MercadoPago SDK initialized with valid credentials.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/python/customers.en.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfilters = {\n    \"email\": \"test_payer_12345@testuser.com\"\n}\n\ncustomers_response = sdk.customer().search(filters=filters)\ncustomers = customers_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Card Number Event Listener (V1)\nDESCRIPTION: JavaScript code snippet demonstrating how to add an event listener to the card number field to guess the payment method using Mercado Pago SDK V1. The `addEventListener()` method is called on the cardNumber element to listen for the 'change' event.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById('cardNumber').addEventListener('change', guessPaymentMethod);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Structure by ID for Marketplace Sellers Sales Reports using cURL\nDESCRIPTION: This cURL command retrieves a specific structure by its ID for marketplace sellers sales reports. It requires an authorization token in the request header and the structure_id as a path parameter.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/queries-and-validations.en.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request GET 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/structures/:structure_id' \\\n--header 'Authorization: Bearer {{TOKEN}}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Brick Transaction Date Visibility in JavaScript\nDESCRIPTION: Provides a complete configuration object to hide transaction date in Mercado Pago Brick payment interface, including initialization settings, callbacks, and visual customization\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/status-screen-brick/hide-transaction-date.es.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n initialization: {\n   paymentId: 100, // id de pago generado por Mercado Pago\n },\n callbacks: {\n   onReady: () => {\n     // callback llamado cuando Brick está listo\n   },\n   onError: (error) => {\n     // callback llamado para todos los casos de error de Brick\n   },\n },\n customization: {\n   visual: {\n       hideTransactionDate: true\n   }\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Partial Refund Using MercadoPago SDK in C#\nDESCRIPTION: This snippet shows how to create a partial refund using the MercadoPago SDK. Similar to the full refund, it initializes the SDK and uses the PaymentRefundClient, but it calls the RefundAsync method to handle the operation asynchronously, allowing for a specific amount to be refunded. The expected inputs include the payment ID and the amount to refund, which can be set to zero for a full refund.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/refunds.en.md#2025-04-18_snippet_1\n\nLANGUAGE: dotnet\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n \nvar client = new MercadoPago.Client.Payment.PaymentRefundClient();\nMercadoPago.Resource.Payment.PaymentRefund refund = await client.RefundAsync(payment_id, (decimal?)0.0);\n```\n\n----------------------------------------\n\nTITLE: Configuring Marketplace Settings in Checkout Bricks Initialization (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to configure marketplace settings during the initialization of Checkout Bricks. It includes setting the amount, preferenceId, and enabling the marketplace functionality through the marketplace: true parameter.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-wallet.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n  initialization : {\n    amount: 100,\n    preferenceId: \"<PREFERENCE_ID>\",\n    marketplace: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Field Types and Formats\nDESCRIPTION: Field type specifications for key transaction data fields including amounts, dates, and identifiers\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/glossary.es.md#2025-04-18_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\nNET_CREDIT_AMOUNT: Numeric(17,2)\nNET_DEBIT_AMOUNT: Numeric(17,2)\nSELLER_AMOUNT: Numeric(17,2)\nGROSS_AMOUNT: Numeric(17,2)\nMETADATA: String(JSON)\nMP_FEE_AMOUNT: Numeric(17,2)\nFINANCING_FEE_AMOUNT: Numeric(17,2)\nSHIPPING_FEE_AMOUNT: Numeric(17,2)\n```\n\n----------------------------------------\n\nTITLE: Destroying Fintoc Widget Instance\nDESCRIPTION: This function eliminates the Fintoc widget instance from the application using the `fintoc.destroy()` method.  This action completely removes the widget, requiring re-initialization before it can be used again. It requires the `fintoc` object to be initialized beforehand.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-advanced.en.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfunction destroyFintoc() {\n      fintoc.destroy()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creando preferencia con atributo purpose para Cuenta de Mercado Pago en PHP\nDESCRIPTION: Este código crea una preferencia de pago con el atributo 'purpose' configurado para 'wallet_purchase', lo que habilita el modo Cuenta de Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-mp-wallet.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Crea un objeto de preferencia\n$preference = new MercadoPago\\Preference();\n\n// Crea un ítem en la preferencia\n$item = new MercadoPago\\Item();\n$item->title = 'Mi producto';\n$item->quantity = 1;\n$item->unit_price = 75;\n$preference->items = array($item);\n$preference->purpose = 'wallet_purchase';\n$preference->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: CSV Example: Full Debt Entry\nDESCRIPTION: Sample CSV file with all optional and mandatory fields completed for debt creation\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/format-specifications.es.md#2025-04-18_snippet_4\n\nLANGUAGE: csv\nCODE:\n```\next2024030614313,521998672,1002,20250312,549.57,20250315,778.87,20250318,801.87,Miss Kristopher Kautzer, 1138225523,felica.walsh@example.com,Cuota,Ref2024,5\n```\n\n----------------------------------------\n\nTITLE: Criando preferência de pagamento com Python no Mercado Pago\nDESCRIPTION: Este snippet ilustra como criar uma preferência de pagamento usando o SDK do Mercado Pago em Python. Ele configura um item com título, quantidade e preço unitário, e cria a preferência.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-preferences.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Cria um item na preferência\npreference_data = {\n    \"items\": [\n        {\n            \"title\": \"Meu produto\",\n            \"quantity\": 1,\n            \"unit_price\": 75.76,\n        }\n    ]\n}\n\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Associating Facebook Pixel with Checkout Pro Preference in Python\nDESCRIPTION: This Python code demonstrates how to associate a Facebook Pixel ID with a Checkout Pro preference. The 'PIXEL_ID' should be replaced with the actual Facebook Pixel identifier.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Associar seu pixel do Facebook\npreference_data = {\n    # ...\n    \"tracks\": [\n        {\n            \"type\": \"facebook_ad\",\n            \"values\": {\n                \"pixel_id\": \"PIXEL_ID\"\n            }\n        }\n    ]\n}\n\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Obteniendo Información del Dispositivo en Objective-C\nDESCRIPTION: Métodos disponibles en Objective-C para obtener la información del dispositivo en diferentes formatos (JSON, String o Dictionary) utilizando el SDK de Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-chopro.es.md#2025-04-18_snippet_10\n\nLANGUAGE: objective-c\nCODE:\n```\n[[[MercadoPagoDevicesSDK] shared] getInfoAsJson] // devuelve un objeto Data de la librería JSON\n[[[MercadoPagoDevicesSDK] shared] getInfoAsJsonString] // devuelve el json en formato de String\n[[[MercadoPagoDevicesSDK] shared] getInfoAsDictionary] // devuelve un Dictionary<String,Any>\n```\n\n----------------------------------------\n\nTITLE: Customizing Panel Order\nDESCRIPTION: Example of customizing the order of information panels in the review step using the reviewCardsOrder property.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/add-confirmation-step.en.md#2025-04-18_snippet_6\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n  // ...\n  customization: {\n    reviewCardsOrder: ['shipping','payment_method', 'billing'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Settlement Report Generation with Node.js\nDESCRIPTION: Node.js implementation using the request library to disable automatic generation of settlement reports. The code configures the headers and request options for making a DELETE request to the scheduling endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.en.md#2025-04-18_snippet_18\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report/schedule',\n    method: 'DELETE',\n    headers: headers\n};\n\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\n\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Generando token Yape mediante API con cURL\nDESCRIPTION: Petición cURL para generar un token de pago Yape directamente a través de la API. Requiere enviar el número de teléfono, OTP y requestId como parámetros.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.es.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/platforms/pci/yape/v1/payment?public_key=<PUBLIC_KEY>' \\\n--header 'Content-Type: application/json' \\\n--data '{\n   \"phoneNumber\": \"123214234342\",\n   \"otp\": \"123344\",\n   \"requestId\": \"3127367123234234\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling Payments in Ruby\nDESCRIPTION: This Ruby snippet illustrates how to cancel a payment using the MercadoPago Ruby SDK by setting the access token, defining custom headers, and invoking the update method on the payment instance.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/cancel-reserve.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new(ENV_ACCESS_TOKEN)\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\nrequest = {\n  status: 'canceled'\n}\n\npayment_response = sdk.payment.update(payment_id, request, custom_request_options)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Links in Android Manifest\nDESCRIPTION: AndroidManifest.xml configuration for setting up Deep Links in an Android application, including intent filters and URI scheme definition.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/java-kotlin.es.md#2025-04-18_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<activity\n   android:name=\".Congrats\"\n   android:exported=\"true\"\n   android:label=\"@string/deeplink\"\n   android:theme=\"@style/Theme.MyApplication.NoActionBar\" >\n\n   <intent-filter>\n       <action android:name=\"android.intent.action.VIEW\" />\n       <category android:name=\"android.intent.category.DEFAULT\" />\n       <category android:name=\"android.intent.category.BROWSABLE\" />\n       <!-- Accepts URIs that begin with \"yourapp://congrats\" -->\n       <data android:scheme=\"yourapp\"\n           android:host=\"congrats\" />\n\n   </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Searching Customers in Mercado Pago Java SDK\nDESCRIPTION: Illustrates how to search for customers using filters in the Mercado Pago Java SDK. Demonstrates creating a search request with specific parameters like email and setting pagination limits.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/customers.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nCustomerClient client = new CustomerClient();\n\nMap<String, Object> filters = new HashMap<>();\nfilters.put(\"email\", \"test_payer_12345@testuser.com\");\n\nMPSearchRequest searchRequest =\n   MPSearchRequest.builder().offset(0).limit(0).filters(filters).build();\n\nclient.search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Creating Email Notification Method for Reports\nDESCRIPTION: This curl request configures email notification for report delivery. It specifies recipient email addresses where generated reports will be sent automatically.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.en.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/reports/notifiers' \\\n--header 'Authorization: Bearer {{TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"type\": \"email\",\n    \"data\": {\n        \"recipients\": [\"test@mercadolibre.com\"]\n    },\n    \"description\": \"test notifier email\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Closing Fintoc Iframe\nDESCRIPTION: This function closes the Fintoc iframe using the `fintoc.close()` method.  This action hides the widget from the user without destroying its instance, allowing it to be reopened later. It requires the `fintoc` object to be initialized beforehand.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-advanced.en.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction closeFintoc() {\n      fintoc.close()\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Facebook Pixel ID with Checkout Pro Preference in Java\nDESCRIPTION: This code snippet illustrates how to associate a Facebook pixel ID with a Checkout Pro preference using Java. It allows tracking of ad conversions from Facebook campaigns.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.es.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Crea un objeto preferencia\nPreferenceClient client = new PreferenceClient();\n\n// Asocia tu píxel de Facebook\nList<PreferenceTrackRequest> tracks = new ArrayList<>();\nPreferenceTrackRequest trackFacebook = PreferenceTrackRequest.builder()\n   .type(\"facebook_ad\")\n   .values(PreferenceTrackValuesRequest.builder().pixelId(\"PIXEL_ID\").build())\n   .build();\ntracks.add(trackFacebook);\n\nPreferenceRequest request = PreferenceRequest.builder().tracks(tracks).build();\n\n// Guardar y postear la preferencia\nclient.create(request);\n```\n\n----------------------------------------\n\nTITLE: Get Identification Types (V2)\nDESCRIPTION: JavaScript code snippet illustrating how to retrieve identification types using Mercado Pago SDK V2 using async/await. An IIFE (Immediately Invoked Function Expression) is used to call the async function directly after the render. The retrieved identification types are then used to populate a select element.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n (async function getIdentificationTypes() {\n      try {\n        const identificationTypes = await mp.getIdentificationTypes();\n\n        const identificationTypeElement = document.getElementById('docType');\n\n        createSelectOptions(identificationTypeElement, identificationTypes);\n\n      } catch (e) {\n        return console.error('Error getting identificationTypes: ', e);\n      }\n})();\n\nfunction createSelectOptions(elem, options, labelsAndKeys = { label: \"name\", value: \"id\" }) {\n\n      const { label, value } = labelsAndKeys;\n\n      elem.options.length = 0;\n\n      const tempOptions = document.createDocumentFragment();\n\n      options.forEach(option => {\n        const optValue = option[value];\n        const optLabel = option[label];\n\n        const opt = document.createElement('option');\n        opt.value = optValue;\n        opt.textContent = optLabel;\n\n        tempOptions.appendChild(opt);\n      });\n\n      elem.appendChild(tempOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment Flow with Callback - Chile Version\nDESCRIPTION: Implementation of payment flow for Chilean market using PaymentFlow class with callback handling. Includes payment request configuration and response processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/payment-flow-callback.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval paymentFlow = MPManager.paymentFlow\n\nval paymentFlowRequestData = PaymentFlowRequestData(\n\n   amount = 10.0,\n\n   description = \"test description\",\n\n   paymentMethod = PaymentMethod.CREDIT_CARD.name,\n\n   printOnTerminal = false // Campo opcional se lança o pagamento sem impressão na terminal\n\n)\n\npaymentFlow.launchPaymentFlow(\n\n   paymentFlowRequestData = paymentFlowRequestData\n\n) { response ->\n\n   response.doIfSuccess { result ->\n\n       // manutenção bem-sucedida utilizando uma mensagem\n\n   }.doIfError { error ->\n\n       // manutenção de erro\n\n   }\n\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal PaymentFlow paymentFlow = MPManager.INSTANCE.getPaymentFlow();\n\nfinal String amount = \"2.0\";\n\nfinal String description = \"Payment description\";\n\nfinal PaymentFlowData paymentFlowData = new PaymentFlowData(\n\n   amount,\n\n   description,\n\n   PaymentMethod.CREDIT_CARD.name(),\n\n   6, // optional field if launching the payment in installments. \n\n   false // optional field if launching the payment without printing in terminal\n\n);\n\n\n\nfinal Function1<MPResponse<PaymentResponse>, Unit> callback = (final MPResponse<PaymentResponse> response) -> {\n\n if (response.getStatus() == ResponseStatus.SUCCESS) {\n\n   // Success handling using a message\n\n } else {\n\n   // Error handling \n\n }\n\n return Unit.INSTANCE;\n\n};\n\npaymentFlow.launchPaymentFlow(paymentFlowData, callback);\n```\n\n----------------------------------------\n\nTITLE: Eliminando un Evento en Mercado Pago API usando cURL\nDESCRIPTION: Este comando cURL elimina un evento específico del reporte de ventas de vendedores del marketplace. Requiere autenticación mediante un token de acceso y el ID del evento a eliminar.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/deactivation.es.md#2025-04-18_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request DELETE 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/events/{{event_id}}' \\\n--header 'Authorization: Bearer {{TOKEN}}'\n```\n\n----------------------------------------\n\nTITLE: Pairing Bluetooth Device with Point Smart\nDESCRIPTION: Implementation for pairing a Bluetooth device using the BluetoothDevicesPairing class through MPManager. The code handles both success and error cases, providing bond state and device model information upon successful pairing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/pair-unpair.en.md#2025-04-18_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval bluetoothPairing = MPManager.bluetooth.paring\n\nbluetoothPairing.pairDevice(address) { response ->\n   response.doIfSuccess { result ->\n       // Manage pairing success\n       val bondState = result.first\n       val deviceModel = result.second\n       // ... Perform additional actions if necessary \n   }.doIfError { error ->\n       // Manage the error case if necessary\n   }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal BluetoothDevicesPairing bluetoothPairing = MPManager.INSTANCE.getBluetooth().getParing();\n\nfinal Function1<MPResponse<Pair<BluetoothBondState, BluetoothDeviceModel>>, Unit> callback =\n   (final MPResponse<Pair<BluetoothBondState, BluetoothDeviceModel>> response) -> {\n     if (response.getStatus() == ResponseStatus.SUCCESS) {\n       final BluetoothBondState bondState = response.getData().getFirst();\n       final BluetoothDeviceModel deviceModel = response.getData().getSecond();\n       // Perform additional actions if necessary \n     } else {\n       // Manage the error case if necessary\n     }\n     return Unit.INSTANCE;\n   };\n\nbluetoothPairing.pairDevice(address, callback);\n```\n\n----------------------------------------\n\nTITLE: API Response for High Risk Payment Rejection in Mercado Pago\nDESCRIPTION: Example of a JSON response from the Mercado Pago API showing a payment rejected due to high fraud risk. This demonstrates how the fraud prevention system flags suspicious transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/payment-rejections.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n {\n    \"status\": \"rejected\",\n    \"status_detail\": \"cc_rejected_high_risk\",\n    \"id\": 47198050,\n    \"payment_method_id\": \"master\",\n    \"payment_type_id\": \"credit_card\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Mercado Pago Gateway via Spreedly API (cURL)\nDESCRIPTION: This cURL command demonstrates how to add Mercado Pago as a gateway in Spreedly. It requires your Spreedly API credentials, the Mercado Pago country code, and your Mercado Pago access token. Replace placeholders with your actual credentials.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/spreedly/spreedly.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\n$ curl https://core.spreedly.com/v1/gateways.json \\\n-u 'C7cRfNJGODKh4Iu5Ox3PToKjniY:4UIuWybmdythfNGPqAqyQnYha6s451ri0fYAo4p3drZUi7q2Jf4b7HKg8etDtoKJ' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"gateway_type\": \"mercado_pago\",\n        \"country\": \"AR\",\n        \"access_token\": \"ENV_ACCESS_TOKEN\"\n      }'\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Brick Appearance in JavaScript\nDESCRIPTION: This snippet demonstrates how to customize the appearance of the Wallet Brick button using JavaScript. It sets the theme to dark and adjusts various style properties like color, border radius, and padding.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-appearance.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n        theme:'dark',\n        customStyle: {\n            valueProp: 'practicality',\n            valuePropColor: 'black',\n            borderRadius: '10px',\n            verticalPadding: '10px',\n            horizontalPadding: '10px',\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling Payments with cURL\nDESCRIPTION: This cURL command demonstrates how to cancel a payment by invoking a PUT request to the MercadoPago API with the necessary headers, including the access token and idempotency key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/cancel-reserve.en.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PUT \\\n  'https://api.mercadopago.com/v1/payments/PAYMENT_ID' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n  -H 'X-Idempotency-Key: SOME_UNIQUE_VALUE' \\\n  -d '{\"status\": \"cancelled\"}'\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Item Preference in Ruby\nDESCRIPTION: Initialize a Mercado Pago preference with two items, setting title, quantity, currency, and unit price\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/preference-multiple-items.es.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n# Create preference data with items\npreference_data = {\n  items: [\n    {\n      title: 'Mi producto 1',\n      quantity: 1,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 75.56\n    },\n    {\n      title: 'Mi producto 2',\n      quantity: 2,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 96.56\n    }\n  ]\n}\n\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Adding Mercado Pago SDK Dependency in Gradle for Android\nDESCRIPTION: This code snippet shows how to include the Mercado Pago SDK in an Android application using Gradle. Developers need to add the provided line to their application's 'build.gradle' file to resolve the SDK dependencies.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/android.es.md#2025-04-18_snippet_0\n\nLANGUAGE: Groovy\nCODE:\n```\ncompile 'com.mercadopago:sdk:3.4.1'\n```\n\n----------------------------------------\n\nTITLE: Response for Creating Refund Intent (JSON)\nDESCRIPTION: This JSON response shows the structure of the data returned when successfully creating a refund intent. It includes the refund intent ID, payment ID, and device ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/refund-processing.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"75j8sfa-euu6-4x56-slk8-a341f71ba2f1\",\n   \"payment_id\": \"93921210001\",\n   \"device_id\": \"PAX_A910__SMARTPOS1490451054\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Open Finance Payment with Java SDK\nDESCRIPTION: Java implementation for creating an Open Finance payment through Mercado Pago. The example demonstrates how to build a payment request with the necessary Open Finance configuration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/advanced-openFinance.en.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"access_token\");\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest createRequest =\nPaymentCreateRequest.builder()\n    .transactionAmount(new BigDecimal(100))\n    .description(\"description\")\n    .paymentMethodId(\"pix\")\n    .pointOfInteraction(\n        PaymentPointOfInteractionRequest.builder().linkedTo(\"openfinance\").build())\n    .payer(PaymentPayerRequest.builder().email(\"test@test.com\").build())\n    .build();\n\nPayment payment = client.create(createRequest);\n```\n\n----------------------------------------\n\nTITLE: Response for Setting Up SFTP Notification (JSON)\nDESCRIPTION: This JSON response is returned after successfully setting up SFTP notification. It includes the notifier ID and other details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": {{notifier_id}},\n    \"type\": \"ftp\",\n    \"data\": {\n        \"protocol\": \"SFTP\",\n        \"ip\": \"test.files.com\",\n        \"username\": \"test@mercadolibre.com\",\n        \"password\": \"test\",\n        \"remote_dir\": \"/\",\n        \"port\": 22\n    },\n    \"description\": null,\n    \"version\": 0,\n    \"status\": \"ACTIVE\",\n    \"is_pii_data\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Valid Coupon Code Discount Response with Mercado Pago API\nDESCRIPTION: This snippet shows the JSON response for a valid discount coupon. It returns discount details like `id`, `name`, `percent_off`, `amount_off`, `coupon_amount`, and `currency_id`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/discount-campaigns.en.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1117,\n    \"name\": \"Test coupon campaign\",\n    \"percent_off\": 10,\n    \"amount_off\": 0,\n    \"coupon_amount\": 100,\n    \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Available Payments Configuration (MLC)\nDESCRIPTION: This snippet specifies the available payment methods for Chile (MLC) when using the Mercado Pago integration with Tiendanube. It includes credit cards, debit cards, Mercado Pago account payments, cash payments and ATM payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/nuvemshop/landing.es.md#2025-04-18_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n\"available_payments: credit, debit, mercadopago, efectivo, atm\"\n```\n\n----------------------------------------\n\nTITLE: Create Full Refund with Mercado Pago .NET SDK\nDESCRIPTION: This snippet demonstrates how to create a full refund for a given payment ID using the Mercado Pago .NET SDK. It requires setting the access token and then calling the `Refund` method on the `PaymentRefundClient`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/dotnet/refunds.es.md#2025-04-18_snippet_0\n\nLANGUAGE: .NET\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n \nvar client = new MercadoPago.Client.Payment.PaymentRefundClient();\nclient.Refund(payment_id);\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Brick Button Style in React\nDESCRIPTION: This snippet shows how to customize the Wallet Brick button appearance using React. It defines a customization object with properties for theme, value proposition, colors, and dimensions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-appearance.es.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n    theme:'dark',\n    customStyle: {\n        valueProp: 'practicality',\n        valuePropColor: 'black',\n        borderRadius: '10px',\n        verticalPadding: '10px',\n        horizontalPadding: '10px',\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Scheduling Report Generation Python\nDESCRIPTION: Using the Requests library in Python, this snippet schedules a report by sending a POST request to the MercadoPago API. It includes the necessary headers and requires an authorization token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\nresponse = requests.post('https://api.mercadopago.com/v1/account/settlement_report/schedule', headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Configuring Excluded Payment Methods in React JSX for Card Payment Brick\nDESCRIPTION: This code snippet shows how to set up the customization object in React JSX to exclude specific payment method types for Card Payment Brick. In this case, debit cards are excluded from the accepted payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/configure-payment-methods.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n paymentMethods: {\n   types: {\n     excluded: ['debit_card'],\n   },\n },\n};\n```\n\n----------------------------------------\n\nTITLE: Associating Facebook Ads Pixel with Checkout Pro in Node.js\nDESCRIPTION: This Node.js snippet shows how to add a Facebook Ads pixel to a Mercado Pago preference for tracking ad conversions. The snippet requires the pixel ID and integrates with Mercado Pago using the Node.js SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/ads-conversion.en.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\n// Create a preference object\nvar preference = {\n\n// Associate your Facebook pixel\ntracks: [\n{\ntype: \"facebook_ad\",\nvalues: {\n\"pixel_id\": 'PIXEL_ID'\n}\n}\n]\n//...\n};\n```\n\n----------------------------------------\n\nTITLE: Configurando Data de Vencimento em PHP\nDESCRIPTION: Código PHP para definir a data de vencimento de um pagamento em dinheiro usando o formato ISO 8601. A data deve estar entre 1 e 30 dias a partir da emissão.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n===\nA data usa o formato ISO 8601: yyyy-MM-dd'T'HH:mm:ssz\n===\n\n$payment->date_of_expiration = \"2020-05-30T23:59:59.000-04:00\";\n```\n\n----------------------------------------\n\nTITLE: Building Callback URI with PaymentFlow in Kotlin\nDESCRIPTION: This snippet illustrates how to construct a valid URI using the `buildCallbackUri` function for opening a specific activity based on the deeplink strategy. It shows how to create a callback URI with specific parameters like callback URL, method callback type (error), metadata, and app ID, using the PaymentFlow instance.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/payment-flow-legacy-support.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval paymentFlow = MPManager.paymentFlow\n\nval uriResult = paymentFlow.buildCallbackUri(\n   callback = \"tuHost://tuApp/result\",\n   methodCallback = \"error\",\n   metadata = hashMapOf(\"message\" to \"result\"),\n   appID = \"demo.app\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Multiple Items\nDESCRIPTION: This Python code snippet demonstrates how to create a Mercado Pago preference with multiple items. It defines a dictionary `preference_data` containing an array of item dictionaries, each including a title, quantity, and unit price. The Mercado Pago SDK is used to create the preference using this data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Cria itens na preferência\npreference_data = {\n    \"items\": [\n        {\n            \"title\": \"Mi producto\",\n            \"quantity\": 1,\n            \"unit_price\": 75.56\n        },\n        {\n            \"title\": \"Mi producto2\",\n            \"quantity\": 2,\n            \"unit_price\": 96.56\n        }\n    ]\n}\n\n# Cria a preferência\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n\n```\n\n----------------------------------------\n\nTITLE: Available Payments Configuration for Mexico (mlm)\nDESCRIPTION: This snippet defines the available payment methods for Mexico (mlm). The `available_payments` field lists the supported payment methods. This allows for customizing the payment options offered in each country.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/woocommerce/landing.es.md#2025-04-18_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\n----[mlm]---- \n\n---\navailable_payments: credit, debit, mercadopago, efectivo, atm, moneda, cuotas_sin_tarjeta_mlm\n\n----\n------------\n```\n\n----------------------------------------\n\nTITLE: Notifying HTML Ready for Print - HTML\nDESCRIPTION: This code shows how to notify that the HTML is ready to be printed. The 'notifyHtmlReadyToPrint' function should be called once the image is loaded, indicating that the receipt is ready for printing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/point-smart-printer.es.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img onload=\"notifyHtmlReadyToPrint()\" \nsrc=\"https://mp.mp/code.aspx?tpcodigo=qrcode&vcodigo=abcd\">\n```\n\n----------------------------------------\n\nTITLE: Creating Preference Object in Ruby\nDESCRIPTION: This code snippet creates a preference object in Ruby, setting the `purpose` to 'wallet_purchase' to allow only logged-in payments. It defines an item with title, unit price, and quantity.  Omitting the `purpose` property allows guest payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-startup.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# Create a preference object\npreference_data = {\n  # the purpose: 'wallet_purchase', allow only logged payments\n   # to allow guest payments you can omit this property\n  purpose: 'wallet_purchase',\n  items: [\n    {\n      title: 'My product',\n      unit_price: 75.56,\n      quantity: 1\n    }\n  ]\n}\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n \n# This value is the preferenceId you will use in the HTML on startup in Brick\n@preference_id = preference['id']\n```\n\n----------------------------------------\n\nTITLE: Webhook Notification Signature Validation in Java\nDESCRIPTION: Example of how to validate the signature of a webhook notification for report generation using BCrypt in Java. This code snippet demonstrates the process of verifying the authenticity of notifications from Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/generate.es.md#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nBCrypt.checkpw(transaction_id + '-' + password_for_encryption + '-' + generation_date, payload_signature)\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods for iOS project\nDESCRIPTION: This snippet shows the necessary terminal commands to install CocoaPods, a dependency manager for Swift and Objective-C, ensuring that MercadoPagoSDK can be utilized in iOS projects.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ios.en.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo gem install cocoapods\n$ pod setup\n```\n\n----------------------------------------\n\nTITLE: Notificación de reclamos en JSON\nDESCRIPTION: Ejemplo de estructura JSON para una notificación de reclamos, que se envía cuando se inicia un reclamo o contracargo.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/notification-additional-info.es.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"action\": \"Created\",\n    \"api_version\": \"v1\",\n    \"data\": {\n        \"description\": \"desc\",\n        \"merchant_order\": 249940988000,\n        \"payment_id\": 58980959081,\n        \"site_id\": \"MLA\"\n    },\n    \"date_created\": \"2022-07-23T23:03:5704:00\",\n    \"id\": \"58980959081\",\n    \"live_mode\": true,\n    \"type\": \"stop_delivery_op_wh\",\n    \"user_id\": 224403329,\n    \"version\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Device Information in Objective-C\nDESCRIPTION: These methods demonstrate different ways to capture device information using the MercadoPagoDevicesSDK in Objective-C.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: objective-c\nCODE:\n```\n[[[MercadoPagoDevicesSDK] shared] getInfoAsJson] // Returns a JSON object\n[[[MercadoPagoDevicesSDK] shared] getInfoAsJsonString] // Returns the JSON as a String\n[[[MercadoPagoDevicesSDK] shared] getInfoAsDictionary] // Returns a Dictionary<String,Any> object\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Brick Appearance (MLA)\nDESCRIPTION: This snippet shows how to customize the visual appearance of the Wallet Brick specifically for the MLA region. It allows setting the button background and border radius using the `customization.visual` property. This affects the button's appearance.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/change-appearance.es.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n         visual: {\n             buttonBackground: 'black',\n             borderRadius: '16px',\n         },\n    },\n}\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n   buttonBackground: 'black',\n   borderRadius: '16px',\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Available Payments Configuration (MCO)\nDESCRIPTION: This snippet specifies the available payment methods for Colombia (MCO) when using the Mercado Pago integration with Tiendanube. It includes credit cards, debit cards, Mercado Pago account payments, cash payments and ATM payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/nuvemshop/landing.es.md#2025-04-18_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n\"available_payments: credit, debit, mercadopago, efectivo, atm\"\n```\n\n----------------------------------------\n\nTITLE: Importing MercadoPago.js Library\nDESCRIPTION: Examples showing how to import the MercadoPago.js library either via script tag or npm installation. This is required for payment data capture in both Transparent Checkout and API Checkout implementations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n```\n\n----------------------------------------\n\nTITLE: Getting Payment Methods with Mercado Pago SDK\nDESCRIPTION: This PHP snippet initializes the Mercado Pago SDK with an access token and retrieves a list of available payment methods using the `MercadoPago::get()` method. The `ENV_ACCESS_TOKEN` placeholder should be replaced with the actual access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/consult-payment-methods.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n \n  MercadoPago\\SDK::setAccessToken(\"ENV_ACCESS_TOKEN\");\n \n  $payment_methods = MercadoPago::get(\"/v1/payment_methods\");\n \n?>\n```\n\n----------------------------------------\n\nTITLE: Deactivate Report Success Response\nDESCRIPTION: Sample JSON response after successfully deactivating a scheduled settlement report.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.pt.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 2787882,\n    \"begin_date\": \"2019-08-15T06:00:00Z\",\n    \"created_from\": \"schedule\",\n    \"end_date\": \"2019-08-16T05:59:59Z\",\n    \"generation_date\": \"2019-08-16T02:00:00.000-04:00\",\n    \"last_modified\": \"2019-08-15T15:41:53.681-04:00\",\n    \"report_type\": \"settlement\",\n    \"retries\": 0,\n    \"status\": \"deleted\",\n    \"user_id\": USER_ID\n}\n```\n\n----------------------------------------\n\nTITLE: Obtendo Informações de Pagamento por ID com PHP\nDESCRIPTION: Este trecho de código PHP utiliza a biblioteca do Mercado Pago para fazer uma requisição GET e obter detalhes de um pagamento específico usando seu ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/retrieving-payments.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\trequire ('mercadopago.php');\n\n\t$mp = new MP (\"ENV_ACCESS_TOKEN\");\n\n\t$payment = $mp->get(\n\t\t\"/v1/payments/\". $paymentId\n\t);\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK in Kotlin\nDESCRIPTION: Create a class that extends Application and initialize the Mercado Pago SDK with necessary configurations in Kotlin.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/first-steps.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainApplication : Application() {\n   override fun onCreate() {\n       super.onCreate()\n       val config = MPConfigBuilder(this, \"123456789\")\n           .withBluetoothConfig()\n           .withBluetoothUIConfig()\n           .build()\n       MPManager.initialize(this, config)\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Forbidden Responses in JSON\nDESCRIPTION: This JSON snippet shows an example response when a merchant lacks the necessary permissions, resulting in a '403 Forbidden' status. This condition is typically communicated via a 'message' for action.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/api-responses.en.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"message\": \"Forbidden\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Mercado Pago Credentials in PHP\nDESCRIPTION: This PHP example demonstrates how to set up the Mercado Pago SDK by requiring the autoload file and setting the access token for API interactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.en.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Mercado Pago SDK\nrequire __DIR__ .  '/vendor/autoload.php';\n// Add Your credentials\nMercadoPago\\SDK::setAccessToken('PROD_ACCESS_TOKEN');\n?>\n```\n\n----------------------------------------\n\nTITLE: Adding Security Code for Device ID Generation in Web Checkout\nDESCRIPTION: Adds the Mercado Pago security script to generate device IDs on your checkout page. This script creates a global JavaScript variable named MP_DEVICE_SESSION_ID containing the device ID value.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.en.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\"></script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK with Node.js\nDESCRIPTION: This code snippet initializes the Mercado Pago SDK in Node.js by requiring the `mercadopago` module and configuring it with the access token. The access token is crucial for authenticating API requests.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: node\nCODE:\n```\n// SDK do Mercado Pago\nconst mercadopago = require ('mercadopago');\n// Adicione as credenciais\nmercadopago.configure({\n  access_token: 'PROD_ACCESS_TOKEN'\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying TLS Protocol Version in Java\nDESCRIPTION: This Java code creates an SSLSocket connection to api.mercadopago.com and prints the protocol version being used, allowing developers to confirm TLS 1.2 or higher is in use.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/pci-compliant-merchants/disabling-tls-10.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSSLSocket ss = (SSLSocket) SSLSocketFactory.getDefault().createSocket(\"api.mercadopago.com\", 443);\nSystem.out.println(\"protocol: \" + ss.getSession().getProtocol());\n```\n\n----------------------------------------\n\nTITLE: Creating Test User with Mercado Pago API using cURL\nDESCRIPTION: POST request to create a test user account in Mercado Pago. Requires authentication via TEST_ACCESS_TOKEN and includes site_id and description parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/create-test-users-old.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H 'Authorization: Bearer ${TEST_ACCESS_TOKEN}' \\\n\"https://api.mercadopago.com/users/test\" \\\n-d '{\"site_id\":\"[FAKER][GLOBALIZE][UPPER_SITE_ID]\",\"description\" : \"a description\"}'\n```\n\n----------------------------------------\n\nTITLE: Deleting a Structure in Mercado Pago Reports API\nDESCRIPTION: This command demonstrates how to delete a specific structure from the marketplace sellers sales reports using its structure_id. Authorization via Bearer token is required.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/deactivation.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request DELETE 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/structures/{{structure_id}}' \\\n--header 'Authorization: Bearer {{TOKEN}}'\n```\n\n----------------------------------------\n\nTITLE: Excluding MercadoPago SDK from ProGuard Optimization\nDESCRIPTION: Instructions for configuring ProGuard to exclude the MercadoPago SDK from optimization processes, which is crucial for preserving the SDK's functionality and ensuring proper integration. Requires a ProGuard configuration file set up for the project.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/android.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: Plain Text\nCODE:\n```\n-keep class com.mercadopago.** { *; }\n```\n\n----------------------------------------\n\nTITLE: Claims Notification Example in JSON\nDESCRIPTION: Example of a Webhooks notification sent when a claim or chargeback is initiated. It includes details about the order, payment, and claim type.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/notification-additional-info.en.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"action\": \"Created\",\n    \"api_version\": \"v1\",\n    \"data\": {\n        \"description\": \"desc\",\n        \"merchant_order\": 249940988000,\n        \"payment_id\": 58980959081,\n        \"site_id\": \"MLA\"\n    },\n    \"date_created\": \"2022-07-23T23:03:5704:00\",\n    \"id\": \"58980959081\",\n    \"live_mode\": true,\n    \"type\": \"stop_delivery_op_wh\",\n    \"user_id\": 224403329,\n    \"version\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Container for Checkout Button Placement\nDESCRIPTION: HTML snippet for creating a div container which acts as a point of render for the payment button. This container is essential for rendering the checkout component on web pages.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-checkout.en.md#2025-04-18_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"wallet_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Methods in Mercado Pago C#\nDESCRIPTION: In this C# snippet, payment methods are configured for a Mercado Pago preference using C# lists. It provides details on the excluded payment methods and payment types, and allows setting installment limits. It requires the appropriate Mercado Pago .NET SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar paymentMethods = new PreferencePaymentMethodsRequest\n{\n    ExcludedPaymentMethods = new List<PreferencePaymentMethodRequest>\n    {\n        new PreferencePaymentMethodRequest\n        {\n            Id = \"master\",\n        },\n    },\n    ExcludedPaymentTypes = new List<PreferencePaymentTypeRequest>\n    {\n        new PreferencePaymentTypeRequest\n        {\n            Id = \"ticket\",\n        },\n    },\n    Installments = 12,\n};\n\nvar request = new PreferenceRequest\n{\n    // ...\n    PaymentMethods = paymentMethods,\n};\n```\n\n----------------------------------------\n\nTITLE: Timeout Transaction Status\nDESCRIPTION: Transaction scenario where the transaction is processed but received after 2 minutes. The status will be 'processed'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-test.pt.md#2025-04-18_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"processed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Mercado Pago Module Update via Composer\nDESCRIPTION: Command to update the Mercado Pago payment module through Composer package manager.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/adobe-commerce/upgrade-to-the-new-version.en.md#2025-04-18_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncomposer update mercadopago/adb-payment\n```\n\n----------------------------------------\n\nTITLE: Payment Methods Table - Mexico (MLM)\nDESCRIPTION: Markdown table listing available payment methods for Mexico, including Cards, 2 Cards, Offline methods, and installment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/adobe-commerce/checkout-api.en.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Payment Method | Description |\n|---|---|\n| Cards | Allows integration with credit and debit cards |\n| 2 Cards | Allows integration with 2 cards, whether they are credit or debit cards. |\n| Offline methods | Paycash |\n| Up to 12 installments without a card with Mercado Pago | Allows the customer the option to finance a purchase without a card, while the seller receives the total amount of the money thanks to this Mercado Pago administrated credit line. |\n```\n\n----------------------------------------\n\nTITLE: Creando una nota de prevención en Markdown\nDESCRIPTION: Este snippet demuestra cómo crear una nota de prevención en Markdown. Se utiliza para llamar la atención del lector sobre pasos importantes, limitaciones o cambios en versiones.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/style-guide/notes.en.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n> WARNING\n>\n> Título\n>\n> Cuerpo de la nota.\n```\n\n----------------------------------------\n\nTITLE: Consultar configuración de reportes con PHP\nDESCRIPTION: Utiliza la biblioteca Requests en PHP para realizar una solicitud GET a la API de Mercado Pago y obtener la configuración de reportes de liquidación.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.es.md#2025-04-18_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$response = Requests::get('https://api.mercadopago.com/v1/account/settlement_report/config', $headers);\n```\n\n----------------------------------------\n\nTITLE: Configurar URLs de retorno en Java para Checkout Pro\nDESCRIPTION: Ejemplo de cómo configurar las URLs de retorno en Java para la preferencia de pago de Checkout Pro. Utiliza el builder pattern para definir URLs para escenarios de éxito, fallo y pendiente.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-return-urls.es.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nPreferenceBackUrlsRequest backUrls =\n// ...\n   PreferenceBackUrlsRequest.builder()\n       .success(\"https://www.seu-site/success\")\n       .pending(\"https://www.seu-site/pending\")\n       .failure(\"https://www.seu-site/failure\")\n       .build();\n\nPreferenceRequest request = PreferenceRequest.builder().backUrls(backUrls).build();\n// ...\n```\n\n----------------------------------------\n\nTITLE: Get number of installments V2\nDESCRIPTION: Demonstrates how to retrieve installment options in Mercado Pago SDK V2 using a promise. It takes amount, bin and paymentTypeId as parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.en.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getInstallments(paymentMethodId, bin) {\n    const installments = await mp.getInstallments({\n        amount: document.getElementById('transactionAmount').value,\n        bin,\n        paymentTypeId: 'credit_card'\n    });\n    ...\n};\n\n```\n\n----------------------------------------\n\nTITLE: Batch Refund CSV Input Example\nDESCRIPTION: Demonstrates the required CSV file structure for batch refunds with mandatory fields: payment_id, external_reference, and amount. Each field has specific formatting and validation requirements.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/batch-payments-vault-migration/batch-refunds/input-format-batch-refunds.es.md#2025-04-18_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\npayment_id;external_reference;amount\n123;ext_ref_1;100\n1234;ext_ref_2;200\n```\n\n----------------------------------------\n\nTITLE: Loading MercadoPago SDK - JavaScript\nDESCRIPTION: This snippet demonstrates how to load the MercadoPago SDK asynchronously and initialize it with a public key, ensuring that the SDK is available for use in your payment form.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loadMercadoPago } from \"@mercadopago/sdk-js\";\n\nawait loadMercadoPago();\nconst mp = new window.MercadoPago(\"YOUR_PUBLIC_KEY\");\n```\n\n----------------------------------------\n\nTITLE: Inicializando Card Payment Brick con email del pagador en JavaScript\nDESCRIPTION: Este snippet muestra cómo configurar el objeto settings para inicializar el Card Payment Brick con el email del pagador. Cuando se proporciona un email válido, el campo de email se oculta en el formulario.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/initialize-data-on-the-bricks.es.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n   initialization: {\n       amount: number,\n       payer: {\n           email: 'string',\n       },\n   },\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Integration Metrics in Python SDK\nDESCRIPTION: Configures platform, integrator, and corporation IDs using Mercado Pago Python SDK. Creates request options object and initializes SDK with access token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integration-identification.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport market\nfrom Mercadopago.config import RequestOptions\n\nrequest_options = RequestOptions(\ncorporation_id=\"CORPORATION_ID\",\nintegrator_id=\"INTEGRATOR_ID\",\nplatform_id=\"PLATFORM_ID\"\n)\nsdk = Mercadopago.SDK(\"ENV_ACCESS_TOKEN\", request_options=request_options)\n```\n\n----------------------------------------\n\nTITLE: Setting Public Key for MercadoPago.js V1\nDESCRIPTION: After including the SDK, you need to configure it with your Public Key to identify your Mercado Pago account during API connections. This key authenticates your frontend requests to Mercado Pago services.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/mp-js-v1.en.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.Mercadopago.setPublishableKey(\"YOUR_PUBLIC_KEY\");\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Reserved Amount in MercadoPago - Python\nDESCRIPTION: The Python snippet captures a partial payment amount reserved on MercadoPago using the 'mercadopago' SDK. Requires configuring with an 'ENV_ACCESS_TOKEN' and executing an update on a transaction amount.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/capture-authorized-payment.en.md#2025-04-18_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nimport market\nsdk = Mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\npayment_data = {\n\"transaction_amount\": 75,\n\"capture\": True\n}\n\npayment_response = sdk.payment().update(payment_id, payment_data)\npayment = payment_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Querying Release Reports via API GET Request\nDESCRIPTION: Retrieve a list of generated release reports using a GET or POST request to the Mercado Pago API. Requires an access token for authentication.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.en.md#2025-04-18_snippet_12\n\nLANGUAGE: curl\nCODE:\n```\ncurl -G \\\n    -H 'accept: application/json' \\\n    -d 'access_token=ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/release_report/list'\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = { \n    'accept': 'application/json', \n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\nresponse = requests.post('https://api.mercadopago.com/v1/account/release_report/list', headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Processing Payment Response in Android\nDESCRIPTION: Shows how to handle and parse payment response using parseResponse function to extract payment details including payment method, reference, amount and card information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/payment-flow-legacy-support.es.md#2025-04-18_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nintent.data?.let { data ->\n   val response = paymentFlow.parseResponse(data)\n   if (response.paymentReference.isNotEmpty()) {\n       //  Manejo de pago con un resultado de éxito\n   } else {\n       // Manejo de pago con un resultado de error\n   }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal PaymentFlow paymentFlow = MPManager.INSTANCE.getPaymentFlow();\n\nfinal Uri resultUri = getIntent().getData();\nfinal PaymentResponse response = paymentFlow.parseResponse(resultUri);\n\nif (!response.getPaymentReference().isEmpty()) {\n //  Manejo de pago con un resultado de éxito\n} else {\n // Manejo de pago con un resultado de error\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Build Tools 32.0.0 Installation on Android SDK\nDESCRIPTION: Shell commands to resolve the \"Build Tools revision 32.0.0 is corrupted\" error by renaming d8 files to dx in the Android SDK directory. This fixes build tool corruption issues in Android SDK installation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/restrictions.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/Library/Android/sdk/build-tools/32.0.0 \\\n  && mv d8 dx \\\n  && cd lib  \\\n  && mv d8.jar dx.jar\n```\n\n----------------------------------------\n\nTITLE: Searching Customers by Email in Python\nDESCRIPTION: Python implementation for searching a customer by email using Mercado Pago's SDK. It defines a filters dictionary with the email and uses the customer module to perform the search and extract the results.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/search-customers.en.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfilters = {\n\"email\": \"test_payer_12345@testuser.com\"\n}\n\ncustomers_response = sdk.customer().search(filters=filters)\ncustomers = customers_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Payment Status Test Configuration\nDESCRIPTION: Tables showing different payment status codes and their descriptions, along with required identity document information for testing different payment scenarios and responses.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/Integration-test.en.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Payment Status | Description | Identity document |\n| --- | --- | --- |\n| `APRO` | Approved payment | (DNI) 12345678|\n| `OTHE` | Declined for general error | (DNI) 12345678 |\n| `CONT` | Pending payment | - |\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Mode in Payment Preferences in JSON\nDESCRIPTION: This JSON configuration enables binary mode for payment preferences. Activating this mode simplifies integration but may affect approval rates for transactions. It serves a specific use case where instant payment approval is required.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.es.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"binary_mode\": true\n```\n\n----------------------------------------\n\nTITLE: Embedding Mercado Pago 575x40 Banner for Brazil (MLB)\nDESCRIPTION: HTML code to embed a 575x40 pixel Mercado Pago banner for Brazil, showcasing 6 interest-free installment payment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/seis.en.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/PSJ/575x40_banner_psj_6x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"575\" height=\"40\"/>\n```\n\n----------------------------------------\n\nTITLE: Partial Payment Capture Response\nDESCRIPTION: Example JSON response showing successful partial payment capture with updated status and amount.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"status\": \"approved\",\n  \"status_detail\": \"accredited\",\n  ...\n  \"transaction_amount\": 75,\n  ...\n  \"captured\": true,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Payment Intent API Request\nDESCRIPTION: API endpoint for retrieving details of a specific payment intent using its ID\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/test-payments-processing.en.md#2025-04-18_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /point_integration-api/payment-intents/{paymentIntentId}\n```\n\n----------------------------------------\n\nTITLE: Canceling a MercadoPago Payment Reservation in Java\nDESCRIPTION: This code snippet demonstrates how to cancel a payment reservation in MercadoPago using Java. It requires the MercadoPago SDK, an access token, and a payment ID. The code initializes a PaymentClient and calls the cancel method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/cancel-reserve.es.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n\nLong paymentId = 123456789L;\n\nPaymentClient client = new PaymentClient();\nclient.cancel(paymentId);\n```\n\n----------------------------------------\n\nTITLE: Failed Compliance Transaction Status\nDESCRIPTION: Transaction scenario where the transaction is rejected for non-compliance with regulations. The status will be 'failed' with a status_detail of 'by_compliance'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-test.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"failed\",\n  \"status_detail\": \"by_compliance\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pro Rata Billing for Subscriptions\nDESCRIPTION: Send a POST request to the preapproval_plan endpoint with billing_day and billing_day_proportional parameters to enable proportional billing for subscriptions started on non-standard billing dates.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/payment-methods.en.md#2025-04-18_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /preapproval_plan\n{\n  \"billing_day\": 15,\n  \"billing_day_proportional\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Rejected Payment Responses in JSON\nDESCRIPTION: This snippet details a rejected payment response from the Mercado Pago API. It highlights reasons such as insufficient funds and lack of authorization. Key parameters include payment IDs and status details explaining refusal. The response assists developers in understanding and debugging payment issues.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/capture-payment-returns.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"id\":80458724,\n   \"status\":\"rejected\",\n   \"wallet_payment\":{\n      \"transaction_amount\":700.50,\n      \"description\":\"Payment for the purchase of furniture\"\n   },\n   \"payments\":[\n      {\n         \"id\":3870106238,\n         \"status\":\"rejected\",\n         \"status_detail\":\"cc_rejected_other_reason\",\n         \"payment_type_id\":\"credit_card\",\n         \"payment_method_id\":\"visa\",\n         \"transaction_amount\":700.50,\n         \"installments\":1,\n         \"issuer_id\":25,\n         \"description\":\"Payment for the purchase of furniture\",\n         \"capture\":true\n      }\n   ],\n   \"disbursements\": [\n       {\n         \"collector_id\": \"ID_COLLECTOR\"\n       }\n   ],\n   \"payer\":{\n      \"id\":786547\n   },\n   \"site_id\": \"MLM\",\n   \"binary_mode\":true\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"id\":90458724,\n   \"status\":\"rejected\",\n   \"wallet_payment\":{\n      \"transaction_amount\":700.50,\n      \"description\":\"Payment for the purchase of furniture\"\n   },\n   \"payments\":[\n      {\n         \"id\":null,\n         \"status\":\"rejected\",\n         \"status_detail\":\"insufficient_money\",\n         \"payment_type_id\":\"account_money\",\n         \"payment_method_id\":\"account_money\",\n         \"transaction_amount\":700.50,\n         \"description\":\"Payment for the purchase of furniture\",\n         \"capture\":true\n      }\n   ],\n   \"disbursements\": [\n       {\n         \"collector_id\": \"ID_COLLECTOR\"\n       }\n   ],\n   \"payer\":{\n      \"id\":786547\n   }\n   \"site_id\": \"MLM\",\n   \"binary_mode\":true \n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"status\": \"401\",\n   \"error\":  \"unauthorized\",\n   \"message\": \"Invalid payer token.\",\n   \"cause\": [\n    {\n      \"code\":\"401003\",\n      \"message\": \"Invalid payer token\",\n      \"data\": null\n    }\n   ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"status\": \"400\",\n   \"error\":  \"bad request\",\n   \"message\": \"Missing header parameter.\",\n   \"cause\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Additional Data Using JavaScript Method\nDESCRIPTION: This snippet demonstrates how to use the getAdditionalData method to retrieve additional payment data. It's useful when not using the native submit Brick form button.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/additional-data.en.md#2025-04-18_snippet_2\n\nLANGUAGE: Javascript\nCODE:\n```\n// variable where the Brick controller is saved\ncardPaymentBrickController.getAdditionalData()\n        .then((additionalData) => {\n            console.log(\"Additional data:\", additionalData);\n        })\n        .catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Available Payments Configuration for Brazil (mlb)\nDESCRIPTION: This snippet defines the available payment methods for Brazil (mlb).  The `available_payments` field lists the supported payment methods.  This allows for customizing the payment options offered in each country.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/woocommerce/landing.es.md#2025-04-18_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\n----[mlb]----\n\n---\navailable_payments: credit, debit, mercadopago, boleto, pix, moneda, cuotas_sin_tarjeta\n\n---\n------------\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK\nDESCRIPTION: Code examples for initializing the Mercado Pago SDK with production access tokens. These snippets demonstrate how to configure the SDK with authentication credentials in different programming languages.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-development-environment.en.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Mercado Pago SDK\nuse MercadoPago\\MercadoPagoConfig;\n// Add credentials\nMercadoPagoConfig::setAccessToken(\"PROD_ACCESS_TOKEN\");\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\n// Mercado Pago SDK\nimport { MercadoPagoConfig, Preference } from 'mercadopago';\n// Add credentials\nconst client = new MercadoPagoConfig({ accessToken: 'YOUR_ACCESS_TOKEN' });\n```\n\nLANGUAGE: java\nCODE:\n```\n// Mercado Pago SDK\nimport com.mercadopago.MercadoPagoConfig;\n// Add credentials\nMercadoPagoConfig.setAccessToken(\"PROD_ACCESS_TOKEN\");\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Mercado Pago SDK\nrequire 'mercadopago'\n# Add credentials\nsdk = Mercadopago::SDK.new('PROD_ACCESS_TOKEN')\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Mercado Pago SDK\n using MercadoPago.Config;\n // Add credentials\nMercadoPagoConfig.AccessToken = \"PROD_ACCESS_TOKEN\";\n```\n\nLANGUAGE: python\nCODE:\n```\n# Mercado Pago SDK\nimport mercadopago\n# Add credentials\nsdk = mercadopago.SDK(\"PROD_ACCESS_TOKEN\")\n```\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n)\n\ncfg, err := config.New(\"{{ACCESS_TOKEN}}\")\nif err != nil {\n\tfmt.Println(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Configurando textos personalizados en Brick con React\nDESCRIPTION: Implementación en React para personalizar los textos de mensajes de error y retorno en Brick usando el objeto customization. Los valores en blanco mostrarán el texto predeterminado del layout.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/status-screen-brick/change-texts.es.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n    visual: {\n        texts: {\n            ctaGeneralErrorLabel: \"\",\n            ctaCardErrorLabel: \"\",\n            ctaReturnLabel: \"\",\n        },\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference via API\nDESCRIPTION: Creates a payment preference by directly calling the Mercado Pago API using cURL.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/installments-without-card.en.md#2025-04-18_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n  'https://api.mercadopago.com/checkout/preferences' \\\n  -H 'Content-Type: application/json' \\\n  -H 'cache-control: no-cache' \\\n  -H 'Authorization: Bearer **PROD_ACCESS_TOKEN**' \\\n  -d '{\n    \"items\": [\n        {\n            \"title\": \"Meu produto\",\n            \"quantity\": 1,\n            \"unit_price\": 75\n        }\n    ],\n    \"purpose\": \"onboarding_credits\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth Credential with Refresh Token in Java\nDESCRIPTION: This Java code snippet shows how to create a new OAuth credential using a refresh token. It instantiates an OauthClient and calls the createCredential method with the refresh token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/security/oauth/renewal.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nOauthClient client = new OauthClient();\n\nString refreshtoken = \"TG-XXXXXXXX-241983636\";\nclient.createCredential(refreshtoken, null);\n```\n\n----------------------------------------\n\nTITLE: Configurar URLs de retorno en C# para Checkout Pro\nDESCRIPTION: Ejemplo de cómo configurar las URLs de retorno y auto_return en C# para la preferencia de pago de Checkout Pro. Define URLs para escenarios de éxito, fallo y pendiente.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/configure-return-urls.es.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar request = new PreferenceRequest\n{\n    // ...\n    BackUrls = new PreferenceBackUrlsRequest\n    {\n        Success = \"https://www.tu-sitio/success\",\n        Failure = \"http://www.tu-sitio/failure\",\n        Pending = \"http://www.tu-sitio/pendings\",\n    },\n    AutoReturn = \"approved\",\n};\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for SPEI Transfer Payment\nDESCRIPTION: Sample JSON response from the Mercado Pago API after creating a SPEI transfer payment. It includes payment ID, creation date, payment method details with the external resource URL, and a 'pending' status indicating the payment awaits completion by the buyer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.en.md#2025-04-18_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 51096146182,\n    \"version\": null,\n    \"date_created\": \"2023-05-10T13:43:14.586-04:00\",\n    ...\n    \"payment_method_id\": \"clabe\",\n    \"payment_type_id\": \"bank_transfer\",\n    \"payment_method\": {\n        \"id\": \"clabe\",\n        \"type\": \"bank_transfer\",\n        \"data\": {\n            \"reference_id\": \"6410293433784980810\",\n            \"external_reference_id\": \"1009\",\n            \"external_resource_url\": \"https://www.mercadopago.com.mx/payments/51096146182/ticket?caller_id=34728475&hash=f3a8630a-f06a-48e4-b2a6-f95750af7346\"\n        }\n    },\n    \"status\": \"pending\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Credit Card Payment Method Configuration\nDESCRIPTION: Detailed configuration steps for setting up credit card payment options, including interest rates, installment settings, and card flag activation\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/linx/configure-payment-method.en.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Fields | Data |\n| --- | --- |\n| Interest percentage | Fill out interest percentage you want to add. If you don't want to add any, leave 0.00. |\n| Type of interest | Issuer - Interest included in total order.<br> Issuer - Interest accrued by issuer.<br> Seller -Interest included in total order. |\n```\n\n----------------------------------------\n\nTITLE: Email Notifier Creation Response\nDESCRIPTION: The JSON response returned after creating an email notification configuration, containing the notifier ID and confirmation of the recipient email addresses.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/generate.en.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": {{notifier_id}},\n    \"type\": \"email\",\n    \"data\": {\n        \"recipients\": [\n            \"test@mercadolibre.com\"\n        ]\n    },\n    \"description\": null,\n    \"version\": 0,\n    \"status\": \"ACTIVE\",\n    \"is_pii_data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Payment Button (HTML)\nDESCRIPTION: This HTML snippet shows how to add a custom payment button to replace the hidden default button. It includes an onclick event that calls a createPayment function.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/hide-element.es.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\" onclick=\"createPayment();\">Custom Payment Button</button>\n```\n\n----------------------------------------\n\nTITLE: Hiding Value Proposition Text in React\nDESCRIPTION: This snippet shows how to hide the value proposition text on the Wallet Brick button using React. It configures the customization object with the hideValueProp property set to true.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-appearance.en.md#2025-04-18_snippet_3\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n    theme: 'default',\n    customStyle: {\n        hideValueProp: true,\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Importing MercadoPago.js via HTML Script Tag\nDESCRIPTION: HTML code for importing the MercadoPago JavaScript SDK using a script tag. This is required to capture payment data for the Checkout integration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n\n```\n\n----------------------------------------\n\nTITLE: Launching Bluetooth UI Settings in Mercado Pago (Java)\nDESCRIPTION: This snippet shows how to use the BluetoothUiSettings class to launch the Bluetooth settings interface in Java. It requires the MPManager instance and a context object.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/access-settings.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal BluetoothUiSettings bluetoothUiSettings = MPManager.INSTANCE.getBluetoothUiSettings();\n\nbluetoothUiSettings.launch(context);\n```\n\n----------------------------------------\n\nTITLE: SFTP Batch Script Commands for File Upload\nDESCRIPTION: This snippet shows the SFTP commands used in a batch script for automating file uploads. It includes commands for listing directories, changing directories, uploading files, and exiting the SFTP session.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/upload-a-file.en.md#2025-04-18_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nls\ncd selfserviceinput\nput /Users/user/debt_589_6_20230804.csv\nls\nbye\n```\n\n----------------------------------------\n\nTITLE: Security Code Div (V2)\nDESCRIPTION: HTML div element that will be used to mount the secure field for security code in Mercado Pago SDK V2 with Secure Fields.  The Mercado Pago SDK will render the secure iframe within this div.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"securityCode\"> </div>\n```\n\n----------------------------------------\n\nTITLE: Downloading Release Reports via Mercado Pago API (Multiple Languages)\nDESCRIPTION: Sends a GET request to the Mercado Pago API to download a specific release report file. Requires authorization token and file name.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.es.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/release_report/:file_name'\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json'\n);\n$data = array(\n    'access_token' => 'ENV_ACCESS_TOKEN'\n);\n$response = Requests::post('https://api.mercadopago.com/v1/account/release_report/:file_name', $headers, $data);\n```\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/release_report/:file_name\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"GET\");\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n}\n\nresponse = requests.get('https://api.mercadopago.com/v1/account/release_report/:file_name', headers=headers)\n```\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\nvar headers = {\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\n};\n\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/release_report/:file_name',\n    headers: headers,\n};\n\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\n\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Configuring Mercado Pago Credentials\nDESCRIPTION: Example of how to initialize the MercadoPago object with your public key. The public key should be replaced with your actual production key from the 'Your Integrations' section.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mp = new MercadoPago(\"YOUR_PUBLIC_KEY\");\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Form - HTML\nDESCRIPTION: This snippet provides the HTML structure for a payment form that captures cardholder details and payment information. It uses div elements as containers for PCI fields, ensuring compliance with security standards.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/secure-fields-card.en.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Step #2 -->\n<style>\n  #form-checkout {\n    display: flex;\n    flex-direction: column;\n    max-width: 600px;\n  }\n\n  .container {\n    height: 18px;\n    display: inline-block;\n    border: 1px solid rgb(118, 118, 118);\n    border-radius: 2px;\n    padding: 1px 2px;\n  }\n</style>\n<form id=\"form-checkout\">\n   <div id=\"form-checkout__cardNumber-container\" class=\"container\"></div>\n   <div id=\"form-checkout__expirationDate-container\" class=\"container\"></div>\n   <input type=\"text\" name=\"cardholderName\" id=\"form-checkout__cardholderName\"/>\n   <input type=\"email\" name=\"cardholderEmail\" id=\"form-checkout__cardholderEmail\"/>\n   <div id=\"form-checkout__securityCode-container\" class=\"container\"></div>\n   <select name=\"issuer\" id=\"form-checkout__issuer\"></select>----[mla, mlb, mlu, mlc, mpe, mco]----\n   <select name=\"identificationType\" id=\"form-checkout__identificationType\"></select>------------\n   <input type=\"text\" name=\"identificationNumber\" id=\"form-checkout__identificationNumber\"/>\n   <select name=\"installments\" id=\"form-checkout__installments\"></select>\n   <button type=\"submit\" id=\"form-checkout__submit\">Pay</button>\n   <progress value=\"0\" class=\"progress-bar\">Loading...</progress>\n </form>\n```\n\n----------------------------------------\n\nTITLE: Initializing PagoEfectivo Payment Form with Email in Javascript for Peru\nDESCRIPTION: Configuration to pre-populate the email field for PagoEfectivo payments in Peru. This allows you to initialize the Brick with the payer's email address.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/initialize-data-on-the-bricks.en.md#2025-04-18_snippet_10\n\nLANGUAGE: Javascript\nCODE:\n```\nsettings = {\n  ...,\n  initialization: {\n    ...,\n    payer: {\n      ...,\n      email: '<PAYER_EMAIL_HERE>',\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Document Types for Form Validation\nDESCRIPTION: JavaScript function to retrieve document types from Mercado Pago API and populate the document type selector in the payment form. This ensures that users can select valid document types required for Boleto Bancário payments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n(async function getIdentificationTypes() {\ntry {\nconst identificationTypes = await mp.getIdentificationTypes();\nconst identificationTypeElement = document.getElementById('form-checkout__identificationType');\ncreateSelectOptions(identificationTypeElement, identificationTypes);\n} catch (e) {\nreturn console.error('Error getting identificationTypes: ', e);\n}\n})();\nfunction createSelectOptions(elem, options, labelsAndKeys = { label: \"name\", value: \"id\" }) {\nconst { label, value } = labelsAndKeys;\nelem.options.length = 0;\nconst tempOptions = document.createDocumentFragment();\noptions.forEach(option => {\nconst optValue = option[value];\nconst optLabel = option[label];\nconst opt = document.createElement('option');\nopt.value = optValue;\nopt.textContent = optLabel;\ntempOptions.appendChild(opt);\n});\nelem.appendChild(tempOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting X-Expand-Responde-Nodes Header\nDESCRIPTION: Header configuration to retrieve network_transaction_id in the response\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/network-transaction-id.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n--header 'X-Expand-Responde-Nodes: gateway.reference'\\\n```\n\n----------------------------------------\n\nTITLE: Response for Modifying SFTP Notifier in MercadoPago API\nDESCRIPTION: This JSON response shows the updated SFTP notifier configuration after a successful PUT request to modify a notifier in the MercadoPago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/modifications.es.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": {{notifier_id}},\n    \"type\": \"ftp\",\n    \"data\": {\n         \"ip\": \"test.files.com\",\n        \"port\": 22,\n        \"password\": \"test\",\n        \"protocol\": \"SFTP\",\n        \"username\": \"test@mercadolibre.com\",\n        \"remote_dir\": \"/\"\n    },\n    \"description\": \"test notifier sftp 1\",\n    \"version\": 1,\n    \"status\": \"ACTIVE\",\n    \"is_pii_data\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Expiration Date Div (V2)\nDESCRIPTION: HTML div element that will be used to mount the secure field for expiration date in Mercado Pago SDK V2 with Secure Fields.  The Mercado Pago SDK will render the secure iframe within this div.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"expirationDate\"></div>\n```\n\n----------------------------------------\n\nTITLE: Creando un Campo Oculto para el Device ID en HTML\nDESCRIPTION: Ejemplo de cómo crear un elemento input oculto con ID 'deviceId' para almacenar el identificador del dispositivo generado por el script de seguridad de Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.es.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"hidden\" id=\"deviceId\">\n```\n\n----------------------------------------\n\nTITLE: Processing RDCPass Payment Query Response\nDESCRIPTION: Code block for handling the response from RDCPass payment query. Processes the returned payload and transaction ID data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-payment-query.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: android\nCODE:\n```\ntry{ \n\tIntent intent = getIntent(); \n\tString action = intent.getAction(); \n\tString payload = new JSONObject(intent.getStringExtra(\"payload\")); \n\tString userTransactionId= new JSONObject(intent.getStringExtra(\"userTransactionId\")); \n\tif (Intent.ACTION_ANSWER.equals(action)) { \n\t\t// Define what to do with the received data \"payload\" \n\t} \n} catch (Exception e) { \n\te.printStackTrace(); \n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Scheduled Report Generation PHP\nDESCRIPTION: PHP script using the Requests library to send a DELETE request to cancel a scheduled settlement report. Requires bearer token authorization in the headers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$response = Requests::delete('https://api.mercadopago.com/v1/account/settlement_report/schedule', $headers);\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with Multiple Items - C#\nDESCRIPTION: This C# snippet shows how to create a MercadoPago preference with multiple items.  It initializes a PreferenceRequest object with a list of PreferenceItemRequest objects, setting properties such as Title, Quantity, CurrencyId, and UnitPrice, and uses the PreferenceClient to create the preference asynchronously.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.pt.md#2025-04-18_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n// Cria o request com múltiplos itens\nvar request = new PreferenceRequest\n{\n    Items = new List<PreferenceItemRequest>\n    {\n        new PreferenceItemRequest\n        {\n            Title = \"Meu produto 1\",\n            Quantity = 1,\n            CurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\n            UnitPrice = 75.56m,\n        },\n        new PreferenceItemRequest\n        {\n            Title = \"Meu produto 2\",\n            Quantity = 2,\n            CurrencyId = \"[FAKER][CURRENCY][ACRONYM]\",\n            UnitPrice = 96.56m,\n        },\n        // ...\n    },\n};\n\n// Cria um objeto client\nvar client = new PreferenceClient();\n\n// Cria a preferência\nPreference preference = await client.CreateAsync(request);\n```\n\n----------------------------------------\n\nTITLE: Payment Response Object Structure\nDESCRIPTION: Definition of the PaymentResponse object structure that contains transaction details returned after payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/payment-flow-callback.en.md#2025-04-18_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval paymentResponse = PaymentResponse(\n    paymentType = \"paymentType\",\n    paymentReference = \"paymentReference\",\n    paymentCreationDate = \"paymentCreationDate\",\n    paymentAmount = 123,\n    paymentSnDevice = \"paymentSnDevice\",\n    paymentInstallments = \"paymentInstallments\",\n    paymentBrandName = \"paymentBrandName\",\n    paymentLastFourDigits = \"paymentLastFourDigits\",\n    statusError = \"\"\n)\n```\n\nLANGUAGE: java\nCODE:\n```\nPaymentResponse paymentResponse = new PaymentResponse(\n            \"paymentType\",\n            \"paymentReference\",\n            \"paymentCreationDate\",\n            123,\n            \"paymentSnDevice\",\n            \"paymentInstallments\",\n            \"paymentBrandName\",\n            \"paymentLastFourDigits\",\n            \"statusError\"\n        );\n```\n\n----------------------------------------\n\nTITLE: Get Installments (V2)\nDESCRIPTION: JavaScript code snippet demonstrating how to retrieve installments using Mercado Pago SDK V2 using async/await. The `getInstallments()` method is called with an object containing amount, bin, and paymentTypeId.  The paymentTypeId must always be set to `credit_card`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getInstallments(paymentMethodId, bin) {\n    const installments = await mp.getInstallments({\n        amount: document.getElementById('transactionAmount').value,\n        bin,\n        paymentTypeId: 'credit_card'\n    });\n    ...\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Payment Expiration Date in Ruby\nDESCRIPTION: Code to set the expiration date for a cash payment in Ruby. The date uses ISO 8601 format and must be between 1 and 30 days from the payment issue date.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\ndate_of_expiration: '2020-05-30T23:59:59.000-04:00',\n```\n\n----------------------------------------\n\nTITLE: Card Number Div (V2)\nDESCRIPTION: HTML div element that will be used to mount the secure field for card number in Mercado Pago SDK V2 with Secure Fields.  The Mercado Pago SDK will render the secure iframe within this div.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"cardNumber\"></div>\n```\n\n----------------------------------------\n\nTITLE: Setting Payment Expiration Date in cURL\nDESCRIPTION: Code to set the expiration date for a cash payment in cURL. The date uses ISO 8601 format and must be between 1 and 30 days from the payment issue date.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_20\n\nLANGUAGE: curl\nCODE:\n```\n\"date_of_expiration\": \"2020-05-30T23:59:59.000-04:00\",\n```\n\n----------------------------------------\n\nTITLE: Checkout Configuration YAML for Brazil\nDESCRIPTION: YAML configuration block defining the Checkout Transparente section for Brazil (MLB) with title, message, and media components.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/landing.en.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncontent_section_with_media:\n - title: Checkout Transparente\n - message: Mercado Pago's Checkout Transparente allows the entire checkout process, from filling in user data to making the payment, to take place in a single environment, without the need to redirect to a page outside your store.\n - media_image: /landings-docs/media-image-landing.png\n```\n\n----------------------------------------\n\nTITLE: Requesting User Authorization - Mercado Pago Chile\nDESCRIPTION: This curl command requests user authorization for payment management in Chile. Ensure to replace <APP_ID> and <REDIRECT_URI> before use.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/configuration.es.md#2025-04-18_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl \"https://auth.mercadopago.cl/authorization?client_id=<APP_ID>&response_type=code&platform_id=mp&redirect_uri=<REDIRECT_URI>\"\n```\n\n----------------------------------------\n\nTITLE: URL Parameter Addition for Seller Identification\nDESCRIPTION: Optional URL parameter that can be added to webhook endpoints to identify different sellers. The parameter format is ?cliente=(sellersname) and should be appended to the endpoint URL.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.en.md#2025-04-18_snippet_1\n\nLANGUAGE: http\nCODE:\n```\n?cliente=(sellersname)\n```\n\n----------------------------------------\n\nTITLE: Implementing Device ID on Checkout Page in HTML\nDESCRIPTION: This code adds the Mercado Pago security script to the checkout page, generating a device ID. It can be customized to output the device ID to a specific variable.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.en.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\"></script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\" output=\"deviceId\"></script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"hidden\" id=\"deviceId\">\n```\n\n----------------------------------------\n\nTITLE: Initializing QR Code Scanner in Kotlin and Java\nDESCRIPTION: This snippet shows how to initialize the QR code scanner using the CameraScanner class from the MPManager instance. It's implemented in both Kotlin and Java.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/camscanner-legacy.es.md#2025-04-18_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval cameraScanner = MPManager.cameraScanner\ncameraScanner.initQRCodeScanner(this@YourActivity)\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal CameraScanner cameraScanner = MPManager.INSTANCE.getCameraScanner();\ncameraScanner.initQRCodeScanner(this);\n```\n\n----------------------------------------\n\nTITLE: Adicionando Script de Segurança do Mercado Pago em HTML\nDESCRIPTION: Código para adicionar o script de segurança do Mercado Pago na página de checkout para coletar o Device ID. Este script cria uma variável global com o Device ID.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-chopro.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Integration Metrics in PHP SDK\nDESCRIPTION: Configures platform, integrator, and corporation IDs using Mercado Pago PHP SDK. Replace placeholder values with actual identification codes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integration-identification.en.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nMercadoPago\\SDK::setPlatformId(\"PLATFORM_ID\");\nMercadoPago\\SDK::setIntegratorId(\"INTEGRATOR_ID\");\nMercadoPago\\SDK::setCorporationId(\"CORPORATION_ID\");\n```\n\n----------------------------------------\n\nTITLE: Import Flutter Custom Tabs Package\nDESCRIPTION: This import statement allows you to use the Flutter Custom Tabs package in your Dart code. It is necessary to access the functionalities provided by the flutter_custom_tabs library.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/flutter.es.md#2025-04-18_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n\"import 'package:flutter_custom_tabs/flutter_custom_tabs.dart';\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Report Curl\nDESCRIPTION: This Curl command uses a GET request to download a settlement report file from MercadoPago. It requires an authorization token and specifies the report by file name in the URL.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_21\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n'https://api.mercadopago.com/v1/account/settlement_report/:file_name'\n```\n\n----------------------------------------\n\nTITLE: Initializing Barcode Scanner in Kotlin and Java\nDESCRIPTION: This snippet demonstrates how to initialize the barcode scanner using the CameraScanner class from the MPManager instance. It's implemented in both Kotlin and Java.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/camscanner-legacy.es.md#2025-04-18_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval cameraScanner = MPManager.cameraScanner\ncameraScanner.initBarcodeScanner(this@YourActivity)\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal CameraScanner cameraScanner = MPManager.INSTANCE.getCameraScanner();\ncameraScanner.initBarcodeScanner(this);\n```\n\n----------------------------------------\n\nTITLE: Capturando Información del Dispositivo en Objective-C\nDESCRIPTION: Métodos disponibles en Objective-C para obtener la información del dispositivo en diferentes formatos: JSON, string o diccionario.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.es.md#2025-04-18_snippet_11\n\nLANGUAGE: objective-c\nCODE:\n```\n[[[MercadoPagoDevicesSDK] shared] getInfoAsJson] // devuelve un objeto Data de la librería JSON\n[[[MercadoPagoDevicesSDK] shared] getInfoAsJsonString] // devuelve el json en formato de String\n[[[MercadoPagoDevicesSDK] shared] getInfoAsDictionary] // devuelve un Dictionary<String,Any>\n```\n\n----------------------------------------\n\nTITLE: Import MercadoPago.js Library\nDESCRIPTION: This snippet demonstrates how to import the MercadoPago.js library into your HTML project. This is a necessary first step for integrating card payments with Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency for Mercado Pago Android SDK - Gradle\nDESCRIPTION: This snippet demonstrates how to add the Mercado Pago SDK dependency to an Android project using Gradle. It is essential for enabling payment processing capabilities in the app.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/android.en.md#2025-04-18_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ncompile 'com.mercadopago:sdk:3.4.1'\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment Form with Email in React for Colombia\nDESCRIPTION: React implementation to pre-populate the email field for various payment methods in Colombia. This object configuration initializes the Brick with the payer's email address.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/initialize-data-on-the-bricks.en.md#2025-04-18_snippet_13\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst initialization = {\n ...,\n payer: {\n   email: '<PAYER_EMAIL>',\n },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Integration Metrics in Node.js SDK\nDESCRIPTION: Configures platform, integrator, and corporation IDs using Mercado Pago Node.js SDK. Replace placeholder values with actual identification codes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integration-identification.en.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMercadopago.configure({\nplatform_id: 'PLATFORM_ID',\nintegrator_id: 'INTEGRATOR_ID',\ncorporation_id: 'CORPORATION_ID'\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Integration Metrics in C# SDK\nDESCRIPTION: Configures platform, integrator, and corporation IDs using Mercado Pago C# SDK. Replace placeholder values with actual identification codes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integration-identification.en.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.PlatformId = \"PLATFORM_ID\";\nMercadoPagoConfig.IntegratorId = \"INTEGRATOR_ID\";\nMercadoPagoConfig.CorporationId = \"CORPORATION_ID\";\n```\n\n----------------------------------------\n\nTITLE: Configuring MercadoPago Credentials\nDESCRIPTION: Initialization of MercadoPago client with public key, shown both for HTML script tag and JavaScript module imports.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-core-methods.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  const mp = new MercadoPago(\"YOUR_PUBLIC_KEY\");\n</script>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loadMercadoPago } from \"@mercadopago/sdk-js\";\n\nawait loadMercadoPago();\nconst mp = new window.MercadoPago(\"YOUR_PUBLIC_KEY\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Payment Option with JavaScript\nDESCRIPTION: This snippet demonstrates how to set a default payment option within the Payment Brick's settings using JavaScript. It shows an example of enabling the walletForm as the default. Only one option among walletForm, creditCardForm, debitCardForm, savedCardForm, and ticketForm should be enabled.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/default-payment-method.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsettings = {\n ...,\n customization: {\n   ...,\n   visual: {\n     ...,\n     defaultPaymentOption: {\n       walletForm: true,\n       // creditCardForm: true,\n       // debitCardForm: true,\n       // savedCardForm: 'card id sent in the initialization',\n       // ticketForm: true,\n     },\n   },\n }\n}\n```\n\n----------------------------------------\n\nTITLE: MercadoPago Banner Implementation - 468x60px\nDESCRIPTION: HTML code for displaying a 468x60 pixel MercadoPago payment methods banner. The image shows 12 interest-free installment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/doze.en.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/PSJ/468x60_banner_psj_12x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"468\" height=\"60\"/>\n```\n\n----------------------------------------\n\nTITLE: Querying Terminal ID using cURL\nDESCRIPTION: This cURL command sends a GET request to the Redelcom API to retrieve the terminal ID based on the device's serial number. It requires authentication headers and the terminal code.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/api-get-terminal.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n'https://api-dev.redelcom.cl:20010/v2/terminal?serialNumber={terminalCode}' \\\n--header 'X-Authentication: clientId;secret'\n```\n\n----------------------------------------\n\nTITLE: Launch Payment Flow with URL Callbacks\nDESCRIPTION: This snippet demonstrates how to initiate a payment flow with URL callbacks for success and error scenarios. The `launchPaymentFlow` function is used with an amount and relative paths for the success and error callbacks.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/start-payment-flow.es.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlaunchPaymentFlow(15.50, null,'congrats.html','error.html')\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Intent API Request\nDESCRIPTION: API endpoint for creating a payment intent with specific parameters including deviceId and external_reference\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/test-payments-processing.en.md#2025-04-18_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /point_integration-api/devices/{deviceId}/payment-intents\n```\n\n----------------------------------------\n\nTITLE: Mercado Pago Transaction Response Example\nDESCRIPTION: Example JSON response received after successfully initiating a bank transfer transaction, demonstrating the structure and key attributes returned by the Mercado Pago API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.en.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_date\": \"2021-01-01T00:00:00.000Z\",\n  \"external_reference\": \"123456\",\n  \"id\": \"0d5020ed\",\n  \"last_updated_date\": \"2021-01-01T00:00:00.000Z\",\n  \"point_of_interaction\": {\n    \"type\": \"{\\\"type\\\":\\\"PSP_TRANSFER\\\"}\"\n  },\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://example.com.br/notification\"\n    }\n  },\n  \"status\": \"approved\",\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": \"100,00\"\n        }\n      ]\n    },\n    \"paid_amount\": 100,\n    \"payer\": {\n      \"id\": 123456543\n    },\n    \"refunded_amount\": 1,\n    \"to\": {\n      \"accounts\": [\n        {\n          \"amount\": \"100,00\",\n          \"origin_id\": \"01AAAM001A1AY43FBR8WCM9CES\",\n          \"status_details\": [\n            {}\n          ],\n          \"owner\": {\n            \"identification\": {\n              \"number\": \"1234567890\",\n              \"type\": \"CPF\"\n            }\n          },\n          \"bank_id\": \"0000014\",\n          \"type\": \"checking_account\",\n          \"number\": \"123456\"\n        }\n      ]\n    },\n    \"total_amount\": 100,\n    \"statement_descriptor\": \"test\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Print with URL - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to initiate the printing process by calling 'launchPrint' with a URL that points to the HTML file. It includes a callback function to handle the print result.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/point-smart-printer.es.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlaunchPrint(\"receipt/index.html?product_value=300&taxes=45&total=345\",      \n    callbackResult);\n\nfunction callbackResult(result, error) {\n   if (result == 'success') {\n       // Escribe el código con éxito aquí\n   } else {\n       //'error' tiene información de error detallada, como \"outOfPaper\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Transaction Response - JSON\nDESCRIPTION: This JSON snippet shows the expected response when a Money Out transaction is successfully processed, including details of the transaction such as created date, status, and amounts involved.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.es.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"created_date\": \"2021-01-01T00:00:00.000Z\",\\n  \"external_reference\": \"123456\",\\n  \"id\": \"0d5020ed\",\\n  \"last_updated_date\": \"2021-01-01T00:00:00.000Z\",\\n  \"point_of_interaction\": {\\n    \"type\": \"{\\\"type\\\":\\\"PSP_TRANSFER\\\"}\"\\n  },\\n  \"seller_configuration\": {\\n    \"notification_info\": {\\n      \"notification_url\": \"http://example.com.br/notification\"\\n    }\\n  },\\n  \"status\": \"approved\",\\n  \"transaction\": {\\n    \"from\": {\\n      \"accounts\": [\\n        {\\n          \"amount\": \"100,00\"\\n        }\\n      ]\\n    },\\n    \"paid_amount\": 100,\\n    \"payer\": {\\n      \"id\": 123456543\\n    },\\n    \"refunded_amount\": 1,\\n    \"to\": {\\n      \"accounts\": [\\n        {\\n          \"amount\": \"100,00\",\\n          \"origin_id\": \"01AAAM001A1AY43FBR8WCM9CES\",\\n          \"status_details\": [\\n            {}\\n          ],\\n          \"owner\": {\\n            \"identification\": {\\n              \"number\": \"1234567890\",\\n              \"type\": \"CPF\"\\n            }\\n          },\\n          \"bank_id\": \"0000014\",\\n          \"type\": \"checking_account\",\\n          \"number\": \"123456\"\\n        }\\n      ]\\n    },\\n    \"total_amount\": 100,\\n    \"statement_descriptor\": \"cobro de prueba\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: PSE Payment Response Example in JSON\nDESCRIPTION: Example JSON response for a PSE payment transaction. It includes details such as payment status, transaction ID, and external resource URL for redirecting the buyer to complete the payment flow.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-migrate-pse.es.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1312147735,\n     ..., \n    \"operation_type\": \"regular_payment\",\n    \"payment_method_id\": \"pse\",\n    \"payment_type_id\": \"bank_transfer\",\n    \"payment_method\": {\n        \"id\": \"pse\",\n        \"type\": \"bank_transfer\"\n    },\n    \"status\": \"pending\",\n    \"status_detail\": \"pending_waiting_transfer\",\n     ...\n    \"description\": \"Título del producto\",\n     ... \n    \"callback_url\": \"http://www.your-site.com\",\n    \"installments\": 1,\n    \"transaction_details\": {\n     ...\n        \"total_paid_amount\": 5000,\n     ...\n        \"external_resource_url\": \"https://www.mercadopago.com.co/sandbox/payments/1312147735/bank_transfer?caller_id=1148920820&hash=f41dd14f-b3a6-4ac4-9b78-5cfeb5a35e77\",\n     ...\n        \"financial_institution\": \"1009\",\n     ...\n        \"bank_transfer_id\": 129229,\n        \"transaction_id\": \"10022214\"\n    }, \n}\n```\n\n----------------------------------------\n\nTITLE: Requesting User Authorization - Mercado Pago Peru\nDESCRIPTION: This curl command requests user authorization for payment management in Peru, similar to others, using specific endpoint for Peru.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/configuration.es.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl \"https://auth.mercadopago.com.pe/authorization?client_id=<APP_ID>&response_type=code&platform_id=mp&redirect_uri=<REDIRECT_URI>\"\n```\n\n----------------------------------------\n\nTITLE: Preventing Invalid User Payment Errors\nDESCRIPTION: Error occurs when attempting to pay with the same user account being charged. Requires using a different payer email to complete the transaction.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/vtex/common-errors.en.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`invalid_users`\n```\n\n----------------------------------------\n\nTITLE: Security Code Input (V1)\nDESCRIPTION: HTML input field for capturing card security code in Mercado Pago SDK V1. The `data-checkout` attribute is used to identify the field for Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<input id=\"securityCode\" data-checkout=\"securityCode\" type=\"text\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing 468x60px Payment Method Banner\nDESCRIPTION: HTML code for embedding a 468x60 pixel Mercado Pago payment methods banner advertising 10 interest-free installments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/dez.en.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/PSJ/468x60_banner_psj_10x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"468\" height=\"60\"/>\n```\n\n----------------------------------------\n\nTITLE: Conditional Benefit Message for Brazil (mlb)\nDESCRIPTION: This snippet configures a benefit message specifically for Brazil (mlb) regarding the Checkout Pro or Checkout Transparente.  It emphasizes that customers don't need to log in to their Mercado Pago account to make payments.  This is country-specific to reflect available features.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/woocommerce/landing.es.md#2025-04-18_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n ----[mlb]----\n - benefit_message: Con el Checkout Pro o el Checkout Transparente, su cliente no necesita iniciar sesión en su cuenta de Mercado Pago para realizar el pago en su tienda.\n\n ------------\n```\n\n----------------------------------------\n\nTITLE: Searching Payments by External Reference using Mercado Pago API\nDESCRIPTION: This curl command demonstrates how to search for payments using the external reference and access token. It queries the /v1/payments/search endpoint to retrieve payment information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/shopify/how-tos-change-endpoint.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request GET 'https://api.mercadopago.com/v1/payments/search?access_token={{AccessToken}}&sort=date_created&criteria=desc&external_reference=njzY7fKb5HH5TgYwXO6jsh2xp&status=approved' \\\n```\n\n----------------------------------------\n\nTITLE: Configuring SFTP Information for Report Delivery - JSON\nDESCRIPTION: JSON object containing SFTP server details for report delivery. It includes server address, authentication credentials, remote directory, and port number for establishing the connection.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.en.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"server\": \"sftp.myserver.com\", \"password\": \"mypassword\", \"remote_dir\": \"/myfolder\", \"port\": 22, \"username\": \"myusername\"}\n```\n\n----------------------------------------\n\nTITLE: Integrando el SDK de Dispositivos de Mercado Pago en iOS con CocoaPods\nDESCRIPTION: Agrega la dependencia del SDK de Dispositivos de Mercado Pago al archivo Podfile para capturar información del dispositivo en aplicaciones iOS.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-chopro.es.md#2025-04-18_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nuse_frameworks!\npod 'MercadoPagoDevicesSDK'\n```\n\n----------------------------------------\n\nTITLE: Updating Report Settings with Java\nDESCRIPTION: The Java code snippet shows how to make a PUT request to the Mercado Pago API to update the report configuration, including setting the frequency and notification emails.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.en.md#2025-04-18_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/release_report/config\");\\\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\\\nconnection.setRequestMethod(\"PUT\");\\\nconnection.setRequestProperty(\"Accept\", \"application/json\");\\\nconnection.setRequestProperty(\"Content-Type\", \"application/json\");\\\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\\\nconnection.setDoOutput(true);\\\nString body = \"{\\\n                \\\"file_name_prefix\\\": \\\"release-report-USER_ID\\\",\\\n                \\\"include_withdrawal_at_end\\\": true,\\\n                \\\"execute_after_withdrawal\\\": false,\\\n                \\\"display_timezone\\\": \\\"GMT-04\\\",\\\n                \\\"notification_email_list\\\": [\\\n                    \\\"example@email.com\\\",\\\n                    \\\"john@example.com\\\",\\\n                ],\\\n                \\\"frequency\\\": {\\\n                    \\\"hour\\\": 0,\\\n                    \\\"type\\\": \\\"monthly\\\",\\\n                    \\\"value\\\": 1\\\n                },\\\n                \\\"columns\\\": [\\\n                    { \\\"key\\\": \\\"DATE\\\" },\\\n                    { \\\"key\\\": \\\"SOURCE_ID\\\" },\\\n                    { \\\"key\\\": \\\"EXTERNAL_REFERENCE\\\" },\\\n                ]\\\n            }\";\\\ntry(OutputStream os = connection.getOutputStream()) {\\\n    byte[] input = body.getBytes(\"utf-8\");\\\n    os.write(input, 0, input.length);\\\n}\\\nSystem.out.println(connection.getResponseCode());\\\nSystem.out.println(connection.getResponseMessage());\\\nSystem.out.println(connection.getInputStream());\n```\n\n----------------------------------------\n\nTITLE: Retrieving Notifiers for Reports using cURL\nDESCRIPTION: This cURL command retrieves all notifiers for reports. It requires an authorization token in the request header.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/queries-and-validations.en.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request GET 'https://api.mercadopago.com/v1/reports/notifiers' \\\n--header 'Authorization: Bearer {{TOKEN}}'\n```\n\n----------------------------------------\n\nTITLE: Requesting User Authorization - Mercado Pago Uruguay\nDESCRIPTION: This curl command requests user authorization for payment management in Uruguay. Update the placeholders <APP_ID> and <REDIRECT_URI>.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/configuration.es.md#2025-04-18_snippet_5\n\nLANGUAGE: curl\nCODE:\n```\ncurl \"https://auth.mercadopago.com.uy/authorization?client_id=<APP_ID>&response_type=code&platform_id=mp&redirect_uri=<REDIRECT_URI>\"\n```\n\n----------------------------------------\n\nTITLE: Mercado Pago Instance V2\nDESCRIPTION: Demonstrates the instantiation of Mercado Pago in version 2, creating a new `MercadoPago` object with the public key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.en.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n \n   const mp = new MercadoPago(\"YOUR_PUBLIC_KEY\");\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Methods using MercadoPago SDK Node.js\nDESCRIPTION: This Node.js snippet uses the MercadoPago SDK to fetch payment methods. The SDK is initialized with an access token, and the payment methods are obtained via an asynchronous call. Outputs the list of payment methods as a response.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pse-avanza.en.md#2025-04-18_snippet_1\n\nLANGUAGE: Node.js\nCODE:\n```\nimport MercadoPago, { PaymentMethod } from 'mercadopago';\n\nconst client = new MercadoPago({ accessToken: '<ACCESS_TOKEN>' });\nconst paymentMethod = new PaymentMethod(client);\n\npaymentMethod.get()\n  .then(paymentMethods => res.status(200).json(paymentMethods))\n  .catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: HTML Container for Brand Brick\nDESCRIPTION: This HTML code defines a `div` element with the ID `brandBrick_container`. The Brand Brick will be rendered within this container. Ensure the ID matches the one used in the `bricksBuilder.create()` method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/brand-brick/default-rendering.es.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"brandBrick_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Implementing onBinChange Callback in React\nDESCRIPTION: Shows how to implement the onBinChange callback using React JSX syntax with the Payment component to monitor card bin changes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/additional-callbacks.es.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\n<Payment\n ...,\n onBinChange={bin => {\n   console.log(bin);\n }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting MercadoPago Public Key\nDESCRIPTION: Code to initialize the MercadoPago SDK with your account's public key. This is required to identify your integration when connecting to Mercado Pago's services.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/mp-js-v1.es.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.Mercadopago.setPublishableKey(\"YOUR_PUBLIC_KEY\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tabs in Android\nDESCRIPTION: Example code for launching Custom Tabs in both Java and Kotlin. The URL parameter represents the checkout init URL.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/java-kotlin.es.md#2025-04-18_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nString url = \"URL-PREFERENCE\";\nCustomTabsIntent intent = new CustomTabsIntent.Builder()\n       .build();\nintent.launchUrl(MainActivity.this, Uri.parse(url));\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nval url = \"URL-PREFERENCE\"\n    val intent = CustomTabsIntent.Builder()\n        .build()\n    intent.launchUrl(this@MainActivity, Uri.parse(url))\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Preference in Python\nDESCRIPTION: Create a Mercado Pago payment preference using Python with wallet purchase purpose and a product item\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/default-rendering.en.md#2025-04-18_snippet_17\n\nLANGUAGE: python\nCODE:\n```\npreference_data = {\n    \"purpose\": \"wallet_purchase\",\n    \"items\": [\n        {\n            \"title\": \"My Item\",\n            \"quantity\": 1,\n            \"unit_price\": 75.76\n        }\n    ]\n}\n\npreference_response = sdk.preference().create(preference_data)\npreference = preference_response[\"response\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring MercadoPago Credentials\nDESCRIPTION: Code examples showing how to initialize MercadoPago with public key credentials for secure payment processing in both HTML and JavaScript environments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  const mp = new MercadoPago(\"YOUR_PUBLIC_KEY\");\n</script>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loadMercadoPago } from \"@mercadopago/sdk-js\";\n\nawait loadMercadoPago();\nconst mp = new window.MercadoPago(\"YOUR_PUBLIC_KEY\");\n\n```\n\n----------------------------------------\n\nTITLE: Terminal Endpoints for Point Integration\nDESCRIPTION: Collection of API endpoints for managing Mercado Pago Point terminals, including retrieving terminal list, updating operation mode, creating orders, and managing transactions\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/migrate-via-api.es.md#2025-04-18_snippet_0\n\nLANGUAGE: Endpoint List\nCODE:\n```\n- Get terminals\n- Update terminal operation mode\n- Create order\n- Get order by ID\n- Cancel order by ID\n- Refund order\n```\n\n----------------------------------------\n\nTITLE: Available Countries List\nDESCRIPTION: This section lists the countries where the Tiendanube integration with Mercado Pago is available. It specifies the country codes that are supported by the integration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/nuvemshop/landing.en.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"available_countries: mlb, mla, mlm, mlu, mco, mlc, mpe\"\n```\n\n----------------------------------------\n\nTITLE: Resolving Payment Method Detection Issues\nDESCRIPTION: Error happens when incorrect card type is used for payment. Requires selecting the proper card type matching the payment method.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/vtex/common-errors.en.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`Cannot infer Payment Method`\n```\n\n----------------------------------------\n\nTITLE: Specifying Mercado Pago SDK in Podfile - Ruby\nDESCRIPTION: This snippet is the content that should be added to the Podfile to include the Mercado Pago SDK as a dependency, specifying the source and version.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ios.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nsource 'https://github.com/CocoaPods/Specs.git'\nuse_frameworks!\nplatform :ios, '8.0'\npod 'MercadoPagoSDK', '3.4.1'\n```\n\n----------------------------------------\n\nTITLE: Adding Mercado Pago Library via HTML Script Tag\nDESCRIPTION: Include the Mercado Pago SDK in an HTML file using a script tag. This allows access to Mercado Pago features on the client-side.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/common-initialization.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configurando credenciales de Mercado Pago\nDESCRIPTION: Código para configurar la credencial pública (Public Key) de Mercado Pago, necesaria para identificar la integración y capturar pagos de forma segura.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.es.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mp = new MercadoPago(\"YOUR_PUBLIC_KEY\");\n```\n\n----------------------------------------\n\nTITLE: Including MercadoPago SDK for Bricks\nDESCRIPTION: This snippet imports the MercadoPago SDK JavaScript file, a required step to utilize the Bricks framework for managing payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v1-clientside.en.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with Idempotency Key in cURL\nDESCRIPTION: Demonstrates how to send a payment request with a unique idempotency key to prevent duplicate transactions. The request includes wallet payment details, transaction amount, and payer token.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/idempotency.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n    -H 'X-Idempotency-Key: IDEMPOTENCY_KEY' \\\n    -H 'Authorization: Bearer ACCESS_TOKEN'\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    'https://api.mercadopago.com/v1/advanced_payments' \\\n    -d '{\n        \"wallet_payment\":{\n           \"transaction_amount\":700.50,\n           \"description\":\"Payment Description\",\n           \"external_reference\":\"Pago_123\"     \n        },\n       \"payer\":{\n           \"token\":\"PAYER_TOKEN\",\n           \"type_token\": \"wallet-token\"\n        }\n      }'\n```\n\n----------------------------------------\n\nTITLE: Settlement Report Configuration Response\nDESCRIPTION: Example JSON response showing the updated settlement report configuration after successful update. Returns HTTP 200 status code with the current configuration settings.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.es.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"file_name_prefix\": \"settlement-report-USER_ID\",\n    \"show_fee_prevision\": false,\n    \"show_chargeback_cancel\": true,\n    \"detailed\": true,\n    \"scheduled\": false,\n    \"coupon_detailed\": true,\n    \"shipping_detail\": true,\n    \"refund_detailed\": true,\n    \"extended\": false,\n    \"frequency\": {\n        \"hour\": 0,\n        \"type\": \"monthly\",\n        \"value\": 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Invalid Discount in Mercado Pago\nDESCRIPTION: This JSON error response is returned when there's an issue with the discount being applied. The error indicates that the discount doesn't exist or the amount specified is incorrect, with the corresponding error code and HTTP status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/process-payments-with-discounts.es.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"bad_request\",\n  \"message\": \"discount doesn't exist or amount is incorrect\",\n  \"status\": 400,\n  \"cause\": [\n    {\n      \"code\": 400136,\n      \"description\": \"discount doesn't exist or amount is incorrect\",\n      \"data\": null\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizando Variável de Saída do Device ID em HTML\nDESCRIPTION: Exemplo de como personalizar a variável de saída do Device ID usando o atributo 'output' no script de segurança do Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-chopro.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\" output=\"deviceId\"></script>\n```\n\n----------------------------------------\n\nTITLE: Implementando el Código de Seguridad de Mercado Pago en HTML\nDESCRIPTION: Este snippet muestra cómo agregar el código de seguridad de Mercado Pago a tu sitio web para mejorar la seguridad en las transacciones. Se debe reemplazar 'view' con el nombre de la sección donde se implementa.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations.es.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"home\"></script>\n```\n\n----------------------------------------\n\nTITLE: Modifying Pro Rata Setting for Existing Subscription\nDESCRIPTION: Send a PUT request to update an existing subscription's pro rata billing configuration by changing the billing_day_proportional parameter.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/payment-methods.en.md#2025-04-18_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPUT /preapproval_plan/{id}\n{\n  \"billing_day_proportional\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Deactivating Bluetooth Using MPManager (Java)\nDESCRIPTION: This Java snippet demonstrates how to deactivate Bluetooth on a Smart POS device using the turnOff method of the BluetoothIgnitor class. A callback function processes the result of the operation, indicating success or handling errors.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/manage-status.en.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal BluetoothIgnitor bluetoothIgnitor = MPManager.INSTANCE.getBluetooth().getIgnitor();\n\nfinal Function1<MPResponse<Boolean>, Unit> callback = (final MPResponse<Boolean> response) -> {\n if (response.getStatus() == ResponseStatus.SUCCESS) {\n   if (!response.getData()) {\n     // Bluetooth was successfully deactivated\n     // Perform additional actions if necessary\n   } else {\n     // It wasn’t possible to deactivate the bluetooth\n   }\n } else {\n   // Manage the error case if necessary\n }\n return Unit.INSTANCE;\n};\n\nbluetoothIgnitor.turnOff(callback);\n\n```\n\n----------------------------------------\n\nTITLE: Successful Payment Response with Discount\nDESCRIPTION: Example JSON response for a successful discounted payment, showing approved status, payment details, transaction information, and applied discount parameters\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/process-payments-with-discounts.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1234567,\n  \"status\": \"approved\",\n  \"payments\": [\n    {\n      \"id\": \"PAYMENT-ID\",\n      \"status\": \"approved\",\n      \"transaction_amount\": 500,\n      \"coupon_amount\": 10.0,\n      \"description\": \"Payment Wallet\"\n    }\n  ],\n  \"wallet_payment\": {\n    \"transaction_amount\": 550,\n    \"discount\": {\n      \"amount\": 50.0,\n      \"detail\": {\n        \"value\": 10.0,\n        \"type\": \"percent\",\n        \"cap\": 100000.0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Template for Signature Validation\nDESCRIPTION: Template to construct the string that will be hashed for signature validation, containing the data ID, request ID, and timestamp.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.es.md#2025-04-18_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nid:[data.id_url];request-id:[x-request-id_header];ts:[ts_header];\n```\n\n----------------------------------------\n\nTITLE: Capturing Device Information in Objective-C\nDESCRIPTION: Objective-C code snippets to capture device information using Mercado Pago Devices SDK in various formats.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.pt.md#2025-04-18_snippet_9\n\nLANGUAGE: objective-c\nCODE:\n```\n[[[MercadoPagoDevicesSDK] shared] getInfoAsJson] // Devolve um objeto em JSON\n[[[MercadoPagoDevicesSDK] shared] getInfoAsJsonString] // Devolve o JSON em formato de String\n[[[MercadoPagoDevicesSDK] shared] getInfoAsDictionary] // Deolve um objeto Dictionary<String,Any>\n```\n\n----------------------------------------\n\nTITLE: Initiating QR Code Scanner in Java\nDESCRIPTION: Uses the initQRCodeScanner function of the CameraScanner class to start reading QR codes with the Point Smart device.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/camscanner-legacy.en.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal CameraScanner cameraScanner = MPManager.INSTANCE.getCameraScanner();\ncameraScanner.initQRCodeScanner(this);\n```\n\n----------------------------------------\n\nTITLE: Get payment methods V2 (Promise)\nDESCRIPTION: Demonstrates how to retrieve payment methods in Mercado Pago SDK V2 using a promise.  It takes bin as a parameter and returns an array of payment methods.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.en.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getPaymentMethods(data) {\n    const { bin } = date\n    const { results } = await mp.getPaymentMethods({ bin });\n        // The payment id will be in results[0].id\n    …\n}\n\n```\n\n----------------------------------------\n\nTITLE: Security code field V2\nDESCRIPTION: Shows the HTML code for the security code field when using SDK V2\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.en.md#2025-04-18_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"securityCode\"> </div>\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago Library in React\nDESCRIPTION: Initialize the Mercado Pago library in a React application using the SDK. This setup is required to use Checkout Bricks in a React environment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/common-initialization.en.md#2025-04-18_snippet_3\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { initMercadoPago } from '@mercadopago/sdk-react';\ninitMercadoPago('YOUR_PUBLIC_KEY');\n```\n\n----------------------------------------\n\nTITLE: Importing MercadoPago.js Library\nDESCRIPTION: Code to import the MercadoPago.js library in your project either via HTML script tag or NPM package installation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n```\n\n----------------------------------------\n\nTITLE: Replacing CardForm HTML with Bricks Payment Container\nDESCRIPTION: This snippet shows how to replace the existing CardForm HTML structure with a simple container div for the Bricks Payment component.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/cardform-clientside.es.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"paymentBrick_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Integrating MercadoPago JavaScript SDK V2\nDESCRIPTION: Loads the MercadoPago JavaScript SDK V2 into the HTML document. This script enables the implementation of card payment functionality on a website.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/partners.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Updating Amount in Card Payment Brick using JavaScript\nDESCRIPTION: This snippet demonstrates how to update the payment amount in Card Payment Brick using JavaScript. It uses the cardPaymentBrickController.update() method to set a new amount of 95.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/update-data.es.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet amount = 95;\ncardPaymentBrickController.update({ amount });\n```\n\n----------------------------------------\n\nTITLE: Creating Partial Refund in PHP\nDESCRIPTION: Method to process a partial refund for a specific payment using Mercado Pago SDK. Requires payment ID and refund amount as input parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/refunds.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n $refund_client = new PaymentRefundClient();\n $refund_client->refund(123456789, 100);\n?>\n```\n\n----------------------------------------\n\nTITLE: Error Response for Null Transaction Amount\nDESCRIPTION: This JSON response signifies a bad request caused by a null value for the transaction amount. It highlights the need for a valid transaction amount greater than zero.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/create-discount-promise-with-coupon.en.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"error\": \"bad_request\",\\n  \"message\": \"transaction_amount must not be null.\",\\n  \"status\": 400\\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Device ID Output Variable\nDESCRIPTION: Demonstrates how to customize the Device ID output variable by using the 'output' attribute in the security script.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/device-id.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\" output=\"deviceId\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Order for Mercado Pago Point\nDESCRIPTION: Endpoint for creating a payment order associated with a specific terminal using its unique ID\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/migrate-via-api.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /order/in-person-payments/point/create\n```\n\n----------------------------------------\n\nTITLE: Canceling Order via API Endpoint\nDESCRIPTION: Cancels a previously accepted shipment in the POS system by sending a PUT request with the shipment ID and access token. Requires OAuth authentication and specific endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-delivery/cancel-order.en.md#2025-04-18_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPUT /proximity-integration/shipment/{shipment_id}/cancel\n```\n\n----------------------------------------\n\nTITLE: OAuth Authorization URL (MLC)\nDESCRIPTION: This snippet shows the OAuth authorization URL for Chile (MLC). It's used to redirect users to authorize the marketplace to manage their sales. Replace `<APP_ID>` with the application ID and `<REDIRECT_URI>` with the configured redirect URI.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/configuration.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\n\"https://auth.mercadopago.com.cl/authorization?client_id=<APP_ID>&response_type=code&platform_id=mp&redirect_uri=<REDIRECT_URI>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Notification URL with MercadoPago SDK in Ruby\nDESCRIPTION: This Ruby snippet demonstrates using the MercadoPago SDK to set up a payment with a notification URL. The SDK must be installed and configured. Inputs: payment data from user parameters. Outputs: payment response printed to console.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.en.md#2025-04-18_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\\nsdk = Mercadopago::SDK.new('YOUR_ACCESS_TOKEN')\\n\\n\\npayment_data = {\\n transaction_amount: params[:transactionAmount].to_f,\\n token: params[:token],\\n description: params[:description],\\n installments: params[:installments].to_i,\\n payment_method_id: params[:paymentMethodId],\\n notification_url: \"http://requestbin.fullcontact.com/1ogudgk1\",\\n payer: {\\n   email: params[:email],\\n   identification: {----[mla, mlb, mlu, mlc, mpe, mco]----\\n     type: params[:docType],------------\\n     number: params[:docNumber]\\n   }\\n }\\n}\\n\\n\\npayment_response = sdk.payment.create(payment_data)\\npayment = payment_response[:response]\\n\\n\\nputs payment\\n\\n\n```\n\n----------------------------------------\n\nTITLE: Handling Rejected Payment Response in JSON\nDESCRIPTION: Example of a JSON response for a rejected payment, showing the status and reason for rejection.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status\": \"rejected\",\n    \"status_detail\": \"cc_rejected_insufficient_amount\",\n    \"id\": 47198050,\n    \"payment_method_id\": \"master\",\n    \"payment_type_id\": \"credit_card\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pix Code Copy Feature in HTML\nDESCRIPTION: HTML code for creating a read-only input field containing the Pix payment code that users can copy.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pix.es.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<label for=\"copiar\">Copiar Hash:</label>\n<input type=\"text\" id=\"copiar\" value={qr_code} readonly/>\n```\n\n----------------------------------------\n\nTITLE: Mercado Pago Instance V1\nDESCRIPTION: Illustrates how to instantiate Mercado Pago in version 1 of the SDK, setting the publishable key globally.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.en.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n \n   window.Mercadopago.setPublishableKey(\"YOUR_PUBLIC_KEY\");\n\n```\n\n----------------------------------------\n\nTITLE: Installing MercadoPago.js - Bash\nDESCRIPTION: This snippet demonstrates how to install the MercadoPago.js SDK using npm, which is necessary for JavaScript integration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pix.en.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n\n```\n\n----------------------------------------\n\nTITLE: Testing TLS Protocol Version in PHP\nDESCRIPTION: This PHP snippet uses cURL to check the SSL version being used for connections.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/pci-compliant-merchants/disabling-tls-10.es.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $curl_info = curl_version();\n  echo \"protocol: \" . $curl_info['ssl_version'];\n?>\n```\n\n----------------------------------------\n\nTITLE: Feature Disabled Response\nDESCRIPTION: This JSON response is returned when the Zero Dollar Auth feature is temporarily disabled. It includes a message indicating that the feature is unavailable.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/api-responses-test.en.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"This feature is temporarily off\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Binary Mode in JSON\nDESCRIPTION: This code demonstrates how to enable binary mode for instant payment approval by setting the 'binary_mode' attribute to true.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/preferences.en.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"binary_mode\": true\n```\n\n----------------------------------------\n\nTITLE: Internal Server Error Transaction Status\nDESCRIPTION: Transaction scenario where system errors cause the transaction to fail, resulting in a 500 Error.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-test.pt.md#2025-04-18_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 500 Internal Server Error\n```\n\n----------------------------------------\n\nTITLE: Available Countries Configuration\nDESCRIPTION: This snippet configures the available countries for Mini Apps, specifying the country codes. The countries are represented by their respective ISO codes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/landing.es.md#2025-04-18_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n\"--- \\navailable_countries: mla, mlb, mlm\\n---\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Brick Appearance (MLB/MLC/MLM/MPE/MCO/MLU)\nDESCRIPTION: This snippet demonstrates how to customize the appearance of the Wallet Brick, including setting the theme, value proposition color, border radius, and padding. The `customization` object is used to define these visual properties.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/change-appearance.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n        theme:'dark',\n        customStyle: {\n            valueProp: 'practicality',\n            valuePropColor: 'black',\n            borderRadius: '10px',\n            verticalPadding: '10px',\n            horizontalPadding: '10px',\n        }\n    }\n}\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n    theme:'dark',\n    customStyle: {\n        valueProp: 'practicality',\n        valuePropColor: 'black',\n        borderRadius: '10px',\n        verticalPadding: '10px',\n        horizontalPadding: '10px',\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: GET Request to Mercado Pago API using cURL\nDESCRIPTION: This cURL command demonstrates how to make a GET request to the Mercado Pago endpoint to retrieve payment methods using an access token for authentication.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n-H 'accept: application/json' \\\n-H 'content-type: application/json' \\\n-H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n'https://api.mercadopago.com/v1/payment_methods' \\\n```\n\n----------------------------------------\n\nTITLE: Implementing 125x125 Mercado Pago Payment Methods Banner\nDESCRIPTION: HTML code to embed a 125x125 pixel banner showing supported payment methods through Mercado Pago\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/online.en.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/banners/ar/medios/online/125X125.jpg\" \ntitle=\"Mercado Pago - Medios de pago\" alt=\"Mercado Pago - Medios de pago\" \nwidth=\"125\" height=\"125\"/>\n```\n\n----------------------------------------\n\nTITLE: Generating a Generic Error from QR Resolution in curl\nDESCRIPTION: This snippet allows for the resolution of a QR code to generate a generic error, demonstrating error handling capabilities within the API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/interoperable-accepting-flow-test.en.md#2025-04-18_snippet_5\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/instore/v2/beta/external/resolve?data=00020101021143520016com.mercadolibre0128https://mpago.la/pos/1525865501300091234567895204970053030325802AR5909FULL NAME6010CITY LEGAL630481BA' \\\n--header 'Authorization: Bearer {access_token_wallet}'\n```\n\n----------------------------------------\n\nTITLE: Updating Merchant Order in Java\nDESCRIPTION: Update existing merchant order details by providing the order ID and new information. Allows modifying payer details, items, and other order metadata using Mercado Pago SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/orders.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nMerchantOrderClient client = new MerchantOrderClient();\n\nLong orderId = 123456789L;\n\nList<MerchantOrderItemRequest> items = new ArrayList<>();\n\nMerchantOrderItemRequest item =\n   MerchantOrderItemRequest.builder()\n       .id(\"item id\")\n       .categoryId(\"item category\")\n       .currencyId(\"BRL\")\n       .description(\"item description\")\n       .pictureUrl(\"item picture\")\n       .quantity(1)\n       .unitPrice(new BigDecimal(\"5\"))\n       .title(\"item title\")\n       .build();\n\nitems.add(item);\n\nMerchantOrderUpdateRequest updateRequest =\n   MerchantOrderUpdateRequest.builder()\n       .externalReference(\"default\")\n       .payer(MerchantOrderPayerRequest.builder().id(123L).nickname(\"JOHN\").build())\n       .siteId(\"MLA\")\n       .items(items)\n       .build();\n\nclient.update(orderId, updateRequest);\n```\n\n----------------------------------------\n\nTITLE: Success Response for Adding Coupon\nDESCRIPTION: An example JSON response that illustrates a successful operation when a coupon is added. This response contains details about the transaction amount, currency, discount amount, and legal terms related to the discount applied.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/create-discount-promise-with-coupon.en.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"transaction_amount\": 550.0,\\n  \"currency_id\": \"ARS\",\\n  \"discount\": {\\n    \"amount\": 55.0,\\n    \"detail\": {\\n      \"value\": 10.0,\\n      \"type\": \"percent\",\\n      \"cap\": 1000.0\\n    },\\n   \"legal_terms\":\"https://mp.com/legal\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MercadoPago SDK - Bash\nDESCRIPTION: This snippet shows how to install the MercadoPago SDK for JavaScript using npm, which is necessary before using the SDK in your project.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Reserve in Ruby\nDESCRIPTION: This Ruby code snippet uses MercadoPago's SDK to send a reserve authorization request. It sets a custom idempotency key, forms the payment request with necessary parameters like transaction amount and capture flag turned off to ensure the value is reserved.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/make-value-reserve.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\ncustom_headers = {\n 'x-idempotency-key': '<SOME_UNIQUE_VALUE>'\n}\n\ncustom_request_options = Mercadopago::RequestOptions.new(custom_headers: custom_headers)\n\npayment_request = {\ntransaction_amount: 100,\ntoken: 'ff8080814c11e237014c1ff593b57b4d',\ndescription: 'Product title',\ninstallments: 1,\npayment_method_id: 'visa',\npayer: {\nemail: 'test_user_19653727@testuser.com'\n},\ncapture: false\n}\n\npayment_response = sdk.payment.create(payment_request, custom_request_options)\npayment = payment[:response]\n```\n\n----------------------------------------\n\nTITLE: Payment Brick Project - Node.js Sample\nDESCRIPTION: GitHub repository for Mercado Pago Payment Brick implementation sample in Node.js, demonstrating payment integration across multiple regions\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/github-project.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n* [Functional project - Payment Brick](https://github.com/mercadopago/payment-bricks-sample-node)\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK\nDESCRIPTION: Initializes Mercado Pago SDK with public key credentials using either HTML script or JavaScript module approach.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-mp-wallet.en.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  const mp = new MercadoPago(\"YOUR_PUBLIC_KEY\");\n</script>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loadMercadoPago } from \"@mercadopago/sdk-js\";\n\n\nawait loadMercadoPago();\nconst mp = new window.MercadoPago(\"YOUR_PUBLIC_KEY\");\n```\n\n----------------------------------------\n\nTITLE: Handling DTE Print Action\nDESCRIPTION: Code block for handling the DTE printing action in RDCPass. Implements the action handler for SENDTO intent.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-print-dte.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nif (Intent.ACTION_SENDTO.equals(action)) { \n\t// Define what to do after printing the DTE \n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Missing Customer ID in MercadoPago API\nDESCRIPTION: Example of an error response when attempting to update a customer without providing the required customer_id parameter in MercadoPago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/modify-customer.en.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n\"message\": \"missing customer id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating HMAC Signature in PHP\nDESCRIPTION: Code snippet demonstrating how to generate an HMAC-SHA256 signature in PHP using a secret key and data string.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.es.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$cyphedSignature = hash_hmac('sha256', $data, $key);\n```\n\n----------------------------------------\n\nTITLE: Integrando SDK de Mercado Pago en HTML\nDESCRIPTION: Este código HTML incluye el SDK de Mercado Pago en el proyecto para habilitar la funcionalidad de pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-mp-wallet.es.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: React CardPayment Component Import and Usage\nDESCRIPTION: React import and component usage for Card Payment Brick with prop configuration\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/default-rendering.es.md#2025-04-18_snippet_3\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { CardPayment } from '@mercadopago/sdk-react';\n\n<CardPayment\n   initialization={initialization}\n   onSubmit={onSubmit}\n   onReady={onReady}\n   onError={onError}\n/>\n```\n\n----------------------------------------\n\nTITLE: Changing the script import V2\nDESCRIPTION: Shows how the script import should be made when using SDK V2\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.en.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n\n```\n\n----------------------------------------\n\nTITLE: Including MercadoPago SDK in HTML\nDESCRIPTION: This snippet shows how to include the MercadoPago SDK in an HTML file using a script tag.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-checkout.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- SDK MercadoPago.js -->\n<script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Intent Filter for POS Balance Loading\nDESCRIPTION: Configuration for AndroidManifest.xml to enable text-based data sharing between the app and RDCPass system for balance loading transactions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-load-money.es.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter> \n\t<action android:name=\"android.intent.action.SEND\" /> \n\t<category android:name=\"android.intent.category.DEFAULT\" /> \n\t<data android:mimeType=\"text/*\" /> \n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Implement Flutter Custom Tabs\nDESCRIPTION: This example demonstrates how to implement Flutter Custom Tabs within a Flutter application to display a webpage. It includes configuring CustomTabsOption and SafariViewControllerOption for platform-specific customization and error handling for cases where the browser app is not installed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/flutter.es.md#2025-04-18_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n\"import 'package:flutter/material.dart';\nimport 'package:flutter_custom_tabs/flutter_custom_tabs.dart';\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        body: Center(\n          child: TextButton(\n            child: const Text('Show Flutter homepage'),\n            onPressed: () => _launchURL(context),\n          ),\n        ),\n      ),\n    );\n  }\n\n  void _launchURL(BuildContext context) async {\n    try {\n      await launch(\n        'https://flutter.dev',\n        customTabsOption: CustomTabsOption(\n          toolbarColor: Theme.of(context).primaryColor,\n          enableDefaultShare: true,\n          enableUrlBarHiding: true,\n          showPageTitle: true,\n          animation: CustomTabsAnimation.slideIn(),\n          // or user defined animation.\n          animation: const CustomTabsAnimation(\n            startEnter: 'slide_up',\n            startExit: 'android:anim/fade_out',\n            endEnter: 'android:anim/fade_in',\n            endExit: 'slide_down',\n          ),\n          extraCustomTabs: const <String>[\n            // ref. https://play.google.com/store/apps/details?id=org.mozilla.firefox\n            'org.mozilla.firefox',\n            // ref. https://play.google.com/store/apps/details?id=com.microsoft.emmx\n            'com.microsoft.emmx',\n          ],\n        ),\n        safariVCOption: SafariViewControllerOption(\n          preferredBarTintColor: Theme.of(context).primaryColor,\n          preferredControlTintColor: Colors.white,\n          barCollapsingEnabled: true,\n          entersReaderIfAvailable: false,\n          dismissButtonStyle: SafariViewControllerDismissButtonStyle.close,\n        ),\n      );\n    } catch (e) {\n      // An exception is thrown if browser app is not installed on Android device.\n      debugPrint(e.toString());\n    }\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Response Example for Pending Cash Payment in JSON\nDESCRIPTION: Example of a response object returned when creating a cash payment that shows the pending status and external resource URL that should be shared with the customer.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n[\n{\n...,\n\"id\": 5466310457,\n\"status\": \"pending\",\n\"status_detail\": \"pending_waiting_payment\",\n...,\n\"transaction_details\": {\n\"net_received_amount\": 0,\n\"total_paid_amount\": 100,\n\"overpaid_amount\": 0,\n\"external_resource_url\": \"https://www.mercadopago.com/mla/payments/ticket/helper?payment_id=123456789&payment_method_reference_id= 123456789&caller_id=123456\",\n\"installment_amount\": 0,\n\"financial_institution\": null,\n\"payment_method_reference_id\": \"1234567890\"\n}\n}\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Credentials - HTML\nDESCRIPTION: This snippet initializes the MercadoPago object with your public key to configure credentials for payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-pix.en.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  const mp = new MercadoPago(\"YOUR_PUBLIC_KEY\");\n</script>\n\n```\n\n----------------------------------------\n\nTITLE: Importing MercadoPago.js HTML\nDESCRIPTION: This HTML snippet demonstrates how to include the MercadoPago.js library in your project to initialize card payment integration. It's an essential initial step before adding any payment functionality.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integration-via-cardform.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\\\"https://sdk.mercadopago.com/js/v2\\\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Listing Main App Distribution Steps in Markdown\nDESCRIPTION: A numbered list outlining the steps for distributing a main app solution integrated with Mercado Pago. It includes sharing device information, setting up OAuth, digitally signing the app, and submitting the APK for review.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/distribution.es.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Comparte con tu asesor de Mercado Pago la lista de dispositivos, personas usuarias, cajas y tiendas que la app usará. Así, podremos hacer la pre-configuración de los lectores.\n2. Si integras en representación de un vendedor y quieres obtener información o hacer operaciones sobre su cuenta, define la validación del [flujo de OAuth](/developers/es/docs/main-apps/additional-content/security/oauth/introduction) como parte del _onboarding_.\n3. Para subir tu solución al ecosistema de Mercado Pago, garantizando la seguridad de la app y de tus posteriores versiones, suscribe al certificado de manera digital. Este documento debe ser el mismo tanto para el paquete inicial, como para cada una de las actualizaciones. Android disponibiliza [un paso a paso de cómo suscribir digitalmente la app](https://developer.android.com/studio/publish/app-signing?hl=es-419#generate-key), con el certificado generado por la persona desarrolladora.\n4. Comparte el paquete **.apk** com el equipo de soporte de Mercado Pago, que hará una serie de validaciones y avisará a la empresa integradora del resultado.\n```\n\n----------------------------------------\n\nTITLE: Adding Intent Filter to AndroidManifest.xml for Redelcom Integration\nDESCRIPTION: XML code to add an intent-filter to the AndroidManifest.xml file of the compiled app, enabling it to receive intents from the Redelcom system.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/cross-platform-ionic.es.md#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter> \n \t<action android:name=\"android.intent.action.SEND\" /> \n \t<category android:name=\"android.intent.category.DEFAULT\" /> \n \t<data android:mimeType=\"text/*\" /> \n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Configuring Mercado Pago Credentials\nDESCRIPTION: Code to initialize the MercadoPago SDK with your public key credentials for secure payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.en.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mp = new MercadoPago(\"YOUR_PUBLIC_KEY\");\n```\n\n----------------------------------------\n\nTITLE: Canceling Scheduled Report Generation Curl\nDESCRIPTION: This Curl command deletes a scheduled settlement report, sending a DELETE request to the specified MercadoPago API endpoint with the necessary authorization.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/v1/api.en.md#2025-04-18_snippet_16\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X DELETE \\\n    -H 'accept: application/json' \\\n    -H 'content-type: application/json' \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/schedule'\n```\n\n----------------------------------------\n\nTITLE: Configuring Mercado Pago Point Terminal Operation Mode\nDESCRIPTION: Endpoint for updating terminal operation mode from STANDALONE to PDV (Point of Sale) to enable API integration\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/migrate-via-api.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPATCH /order/in-person-payments/point/change-operation-mode\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago Devices SDK in Objective-C\nDESCRIPTION: Objective-C code to initialize the Mercado Pago Devices SDK in an iOS application's AppDelegate.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.pt.md#2025-04-18_snippet_6\n\nLANGUAGE: objective-c\nCODE:\n```\n@import 'MercadoPagoDevicesSDK';\n...\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    ...\n    [[MercadoPagoDevicesSDK shared] execute];\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating HMAC Signature in Java\nDESCRIPTION: Code snippet demonstrating how to generate an HMAC-SHA256 signature in Java using the HmacUtils class.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/notifications.es.md#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nString cyphedSignature = new HmacUtils(\"HmacSHA256\", secret).hmacHex(signedTemplate);\n```\n\n----------------------------------------\n\nTITLE: Including Mercado Pago SDK\nDESCRIPTION: Instructions for including the Mercado Pago JavaScript SDK either via CDN or NPM.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/installments-without-card.en.md#2025-04-18_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n```\n\n----------------------------------------\n\nTITLE: Hiding Form Title in Payment Brick\nDESCRIPTION: Configuration to hide the form title using the hideFormTitle property in both JavaScript and React implementations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/hide-element.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n   ...,\n   customization: {\n       visual: {\n           hideFormTitle: true\n       }\n   }\n}\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n   hideFormTitle: true\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MercadoPago Credentials in HTML\nDESCRIPTION: Initializing MercadoPago instance with a public key for secure payment integration in web applications\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.es.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  const mp = new MercadoPago(\"YOUR_PUBLIC_KEY\");\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Intents in Android (Java)\nDESCRIPTION: This Java code snippet, intended for `MainActivity.java`, handles incoming intents in an Android application and configures a Flutter engine method channel for communication. It processes `ACTION_SEND` intents to extract shared text and uses a MethodChannel to send data back to the Flutter app. The sharedIntent variable stores the data sent from the Redelcom app.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/cross-platform-flutter.en.md#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n\"private String sharedIntent; \nprivate static final String CHANNEL = \\\"app.channel.shared.data\\\"; \n\n@Override \nprotected void onCreate(Bundle savedInstanceState) { \n\tsuper.onCreate(savedInstanceState); \n\ttry { \n\t\t\tIntent intent = getIntent(); \n\t\t\tString action = intent.getAction(); \n\t\t\tif (action != null && Intent.ACTION_SEND.equals(action)) {  \n\t\t\t\t\thandleSend(intent); \n\t\t\t} \n\t} catch (Exception e) { \n\t\t\te.printStackTrace(); \n\t} \n}\n@Override \n public void configureFlutterEngine(@NonNull FlutterEngine flutterEngine) {  \n\t\tGeneratedPluginRegistrant.registerWith(flutterEngine); \n\t\tnew MethodChannel(flutterEngine.getDartExecutor().getBinaryMessenger(), CHANNEL)  .setMethodCallHandler( \n\t\t(call, result) -> { \n\t\t\tif (call.method.contentEquals(\\\"getSharedText\\\")) { \n\t\t\t\tresult.success(sharedIntent); \n\t\t\t\tsharedIntent = null; \n\t\t\t} \n\t\t} \n\t\t); \n } \n void handleSend(Intent intent) { \n\t\tsharedIntent = intent.getStringExtra(Intent.EXTRA_TEXT); \n } \n\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Installments via Mercado Pago Plugin\nDESCRIPTION: Detailed steps for setting maximum installment numbers for Checkout Pro and Checkout API/Transparente in Tiendanube\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/nuvemshop/discounts-installment-payments.en.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the Administrative Panel of your store on Tiendanube, go to **My apps**.\n2. Find the Mercado Pago plugin in the list of applications and click on **Actions > Configure**.\n3. In the list of payment methods, locate the Mercado Pago plugin and click on **Edit configuration**.\n4. Scroll to the bottom of the page and click on **More settings on the Mercado Pago website**.\n5. Find the payment method and click on **Configure**.\n6. Define the maximum number of installments\n```\n\n----------------------------------------\n\nTITLE: Successful Refund Response\nDESCRIPTION: This JSON snippet represents a successful response from the Mercado Pago API after a refund request.  It includes details about the refund, such as the refund ID, payment ID, amount refunded, source information, creation date, and status.  A status of \"approved\" indicates that the refund was processed successfully.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/refund-full-amount.es.md#2025-04-18_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n[\n    {\n        \"id\": 1242469925,\n        \"payment_id\": 51617407254,\n        \"amount\": 25,\n        \"source\": {\n            \"id\": 783789745,\n            \"name\": \"Test Test\",\n            \"type\": \"collector\"\n        },\n        \"date_created\": \"2022-11-18T08:48:06.768-04:00\",\n        \"status\": \"approved\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Test Cards Table Format\nDESCRIPTION: Markdown table format showing test card details including card type, flag, number, security code, and expiration date for different countries in Mercado Pago's system\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-cross/test-cards.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Card type | Flag | Number | Security code | Expiration date |\n| :--- | :---: | :---: | :---: | :---: |\n| Credit card | Mastercard | 5031 7557 3453 0604 | 123 | 11/30 |\n| Credit card | Visa | 4509 9535 6623 3704 | 123 | 11/30 |\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK with Public Key in HTML\nDESCRIPTION: Configures the Mercado Pago SDK with your public key to authenticate the connection with Mercado Pago services.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/mp-js-v2.es.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  const mp = new MercadoPago(\"YOUR_PUBLIC_KEY\");\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Payment with C# SDK\nDESCRIPTION: C# implementation for creating payments with Mercado Pago SDK. It configures the access token, sets up request options with an idempotency key, creates a payment request with transaction details, and processes the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing MercadoPago.Client.Common;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Config;\nusing MercadoPago.Resource.Payment;\n \nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\nvar requestOptions = new RequestOptions();\nrequestOptions.CustomHeaders.Add(\"x-idempotency-key\", \"<SOME_UNIQUE_VALUE>\");\n \nvar paymentRequest = new PaymentCreateRequest\n{\n   TransactionAmount = decimal.Parse(Request[\"transactionAmount\"]),\n   Token = Request[\"token\"],\n   Description = Request[\"description\"],\n   Installments = int.Parse(Request[\"installments\"]),\n   PaymentMethodId = Request[\"paymentMethodId\"],\n   Payer = new PaymentPayerRequest\n   {\n       Email = Request[\"email\"],\n       Identification = new IdentificationRequest\n       {\n           Type = Request[\"identificationType\"],\n           Number = Request[\"identificationNumber\"],\n       },\n   },\n};\n \nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(paymentRequest, requestOptions);\n \nConsole.WriteLine(payment.Status);\n```\n\n----------------------------------------\n\nTITLE: Invalid Coupon ID Error Response\nDESCRIPTION: This JSON response represents an error indicating that the provided `coupon_id` is invalid. It returns an 'error' code, a specific error 'message' (\"Invalid coupon_id.\"), and the HTTP 'status' code (400) to signify a bad request. This response informs the client that the specified coupon ID is not recognized or valid.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/coupon-validation-responses.en.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"bad_request\",\n  \"message\": \"Invalid coupon_id.\",\n  \"status\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Bank Slip (Boleto Bancário) Payment Configuration\nDESCRIPTION: Configuration process for enabling and customizing bank slip payment method in Mercado Pago integration, including activation and ordering settings\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/linx/configure-payment-method.es.md#2025-04-18_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Successful Debt Creation Result in CSV (Mercado Pago)\nDESCRIPTION: This CSV snippet shows the format of a success result file returned by Mercado Pago after processing a debt creation request. It includes the reference number and a success status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/format-specifications.en.md#2025-04-18_snippet_6\n\nLANGUAGE: csv\nCODE:\n```\n\"ext2024030615501\", \"Success\"\n```\n\n----------------------------------------\n\nTITLE: Importing MercadoPago.js for Checkout Integration\nDESCRIPTION: This HTML snippet includes the MercadoPago.js library within the body tag to enable checkout functionalities.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.en.md#2025-04-18_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<body>\n<script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Expiration date field V2\nDESCRIPTION: Shows the HTML code for the expiration date field when using SDK V2\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.en.md#2025-04-18_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"expirationDate\"></div>\n\n```\n\n----------------------------------------\n\nTITLE: Defining an onReady Callback in JavaScript\nDESCRIPTION: This snippet defines an 'onReady' callback function within a settings object for Brick integration. It specifies behavior for when the Brick has finished loading, enabling the developer to implement UI adjustments, such as hiding loading indicators.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/brand-brick/callbacks.en.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n   callbacks: {\n      onReady: () => {\n        /*\n          Callback called when Brick is ready.\n          Here you can hide loadings on your site, for example.\n        */\n      },\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Boleto Payment Response Example\nDESCRIPTION: Example JSON response showing the payment status and external resource URL for Boleto payment completion.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-other-payment-methods-mlb.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n{\n...,\n\"id\": 5466310457,\n\"status\": \"pending\",\n\"status_detail\": \"pending_waiting_payment\",\n...,\n\"transaction_details\": {\n\"net_received_amount\": 0,\n\"total_paid_amount\": 100,\n\"overpaid_amount\": 0,\n\"external_resource_url\": \"https://www.mercadopago.com/mla/payments/ticket/helper?payment_id=123456789&payment_method_reference_id= 123456789&caller_id=123456\",\n\"installment_amount\": 0,\n\"financial_institution\": null,\n\"payment_method_reference_id\": \"1234567890\"\n}\n}\n]\n```\n\n----------------------------------------\n\nTITLE: Handling Deep Links in UIKit Scene Delegate\nDESCRIPTION: Deep link handling implementation in UIKit's SceneDelegate to manage URL navigation and view presentation based on incoming deep links.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/swift.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: UIKit\nCODE:\n```\nfunc scene(_ scene: UIScene, openURLContexts URLContexts: Set<UIOpenURLContext>) {\n    if let urlContext = URLContexts.first {\n        let url = urlContext.url\n\n        if let components = URLComponents(url: url, resolvingAgainstBaseURL: false),\n           components.scheme == \"iosapp\",\n           components.host == \"congrat\",\n           components.path.contains(\"success\") {\n            \n            if let rootViewController = window?.rootViewController {\n                let successViewController = SuccessViewController {\n                    rootViewController.dismiss(animated: true, completion: nil)\n                }\n                \n                if let presentingViewController = rootViewController.presentedViewController {\n                    presentingViewController.dismiss(animated: true) {\n                        rootViewController.present(successViewController, animated: true, completion: nil)\n                    }\n                } else {\n                    rootViewController.present(successViewController, animated: true, completion: nil)\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Adobe Commerce Module Setup\nDESCRIPTION: Command to upgrade the module setup in Adobe Commerce system.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/adobe-commerce/upgrade-to-the-new-version.en.md#2025-04-18_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nbin/magento setup:upgrade\n```\n\n----------------------------------------\n\nTITLE: Error Handling Table for Mercado Pago API\nDESCRIPTION: Provides a structured overview of potential API errors, including status codes, error codes, and troubleshooting guidance for different request scenarios\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/integration-errors.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Error Type | Status | Code | Description and possible solutions |\n```\n\n----------------------------------------\n\nTITLE: Criando Pagamento com SDK do Mercado Pago em PHP\nDESCRIPTION: Este snippet demonstra como criar um pagamento usando o SDK do Mercado Pago em PHP. Ele configura o token de acesso, cria um cliente de pagamento, define opções de requisição, e envia os detalhes do pagamento para a API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/payment-submission.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\Client\\Common\\RequestOptions;\n  use MercadoPago\\MercadoPagoConfig;\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['<TRANSACTION_AMOUNT>'],\n    \"token\" => $_POST['<TOKEN>'],\n    \"description\" => $_POST['<DESCRIPTION>'],\n    \"installments\" => $_POST['<INSTALLMENTS>'],\n    \"payment_method_id\" => $_POST['<PAYMENT_METHOD_ID'],\n    \"issuer_id\" => $_POST['<ISSUER>'],\n    \"payer\" => [\n      \"email\" => $_POST['<EMAIL>'],\n      \"identification\" => [\n        \"type\" => $_POST['<IDENTIFICATION_TYPE'],\n        \"number\" => $_POST['<NUMBER>']\n      ]\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\n----------------------------------------\n\nTITLE: Conditional Configuration for Multiple Countries\nDESCRIPTION: This snippet provides a specific configuration block for multiple countries (mla, mlm, mlu, mpe, mco, mlc). It allows customizing features or settings that apply to a group of countries. This avoids redundancy by applying the same configuration to several regions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/woocommerce/landing.es.md#2025-04-18_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n----[mla, mlm, mlu, mpe, mco, mlc]----\n---\nbullet_section_with_media: \n - title: Personaliza los pagos con Checkout API\n - type: reversed\n - message: Integra nuestro Checkout API y haz que el comprador realice todo el proceso de pago dentro del entorno de tu tienda.\n - image: /shopify/mini-landing-4.png\n---\n------------\n```\n\n----------------------------------------\n\nTITLE: Deactivation Success Response\nDESCRIPTION: JSON response returned after successfully disabling automatic report generation. The response includes details about the deactivated report, with status updated to 'deleted' and other information about the report configuration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.en.md#2025-04-18_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 2787882,\n    \"begin_date\": \"2019-08-15T06:00:00Z\",\n    \"created_from\": \"schedule\",\n    \"end_date\": \"2019-08-16T05:59:59Z\",\n    \"generation_date\": \"2019-08-16T02:00:00.000-04:00\",\n    \"last_modified\": \"2019-08-15T15:41:53.681-04:00\",\n    \"report_type\": \"settlement\",\n    \"retries\": 0,\n    \"status\": \"deleted\",\n    \"user_id\": USER_ID\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Folder Permissions\nDESCRIPTION: Command to set required folder permissions for proper module functionality.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/adobe-commerce/installation-composer.en.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nchmod 777 -R var/ pub/ generated/\n```\n\n----------------------------------------\n\nTITLE: Creating Discount Promise - cURL\nDESCRIPTION: This cURL command demonstrates how to initiate a discount promise without a pre-added coupon. It requires the user's access token, payer token, and the amount of the transaction, which need to be included in the headers and payload. The command allows for the automatic application of discounts based on defined rules or conditions without relying on pre-entered coupon codes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/create-discount-promise-without-coupon.en.md#2025-04-18_snippet_0\n\nLANGUAGE: cURL\nCODE:\n```\ncurl -X POST \\\n'https://api.mercadopago.com/v2/wallet_connect/payment/discounts' \\\n--header 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n--header 'x-payer-token: <PAYER_TOKEN>' \\\n--header 'Content-Type: application/json' \\\n-d '{\\n    \"amount\": 550\\n}'\n```\n\n----------------------------------------\n\nTITLE: Printing Custom Tags with Point Smart Printer\nDESCRIPTION: Implementation of custom tag printing using the BitmapPrinter class. Supports printing custom formatted text with control tags and optional parameters for payment method name and PDF417 barcode printing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/print-on-device.en.md#2025-04-18_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval bitmapPrinter = MPManager.bitmapPrinter\n\nval customTagToPrint: String = \"{br}{b}this is a test text{/s}\" \n\nval paymentMethodName: String? = null // Optional parameter that allows printing the name of the payment method used.\n\nval printPdf417InReceipt: Boolean? = null // Optional parameter that allows printing the pdf417 barcode (the stain). Default value: null\n\nbitmapPrinter.print(customTagToPrint, paymentMethodName, printPdf417InReceipt) { response ->\n   response.doIfSuccess { printResult ->\n       // Handle the successful print\n\n   }.doIfError { error ->\n       // Handle the error in the print operation\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal BitmapPrinter bitmapPrinter = MPManager.INSTANCE.getBitmapPrinter();\n\nfinal String customTagToPrint = \"{br}{b}this is a test text{/s}\"\n\n@Nullable\nfinal String paymentMethodName; // Optional parameter that allows printing the name of the payment method.\n\n@Nullable\nfinal Boolean printPdf417InReceipt; // Optional parameter that allows printing the pdf417 barcode (the stain).\n\nfinal Function1<MPResponse<String>, Unit> callback = (final MPResponse<String> response) -> {\n if (response.getStatus() == ResponseStatus.SUCCESS) {\n   // Handle the successful print\n } else {\n   // Handle the error in the print operation\n\n }\n return Unit.INSTANCE;\n};\n\nbitmapPrinter.print(customTagToPrint, paymentMethodName, printPdf417InReceipt, callback);\n```\n\n----------------------------------------\n\nTITLE: Checking Refund Intent Status via API (curl)\nDESCRIPTION: This curl command demonstrates how to check the status of a refund intent using its ID. It's an alternative to using integration notifications for tracking refund intent status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/refund-processing.en.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request GET 'https://api.mercadopago.com/point/integration-api/refund/{intentid}' \\\n--h 'Authorization: Bearer YOUR_ACCESS_TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Merchant Order in Java\nDESCRIPTION: Fetch detailed payment information for a specific merchant order using its unique order ID. Provides a simple method to retrieve order details through Mercado Pago SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/orders.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMerchantOrderClient client = new MerchantOrderClient();\n\nLong orderId = 123456789L;\nclient.get(orderId);\n```\n\n----------------------------------------\n\nTITLE: Setting Payment Expiration Date in PHP\nDESCRIPTION: This snippet demonstrates how to set the payment expiration date using PHP. The date must be formatted according to ISO 8601 standards.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$payment->date_of_expiration = \"2020-05-30T23:59:59.000-04:00\";\n```\n\n----------------------------------------\n\nTITLE: Example Response with Network Transaction ID\nDESCRIPTION: Response structure showing the network_transaction_id in the expanded parameter\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/network-transaction-id.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"expanded\": {\n   \"gateway\": {\n \t  \"reference\": {\n \t\t \"network_transaction_id\": \"n7w-c0d3-t7d\"\n \t    }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Back URLs for Redirection\nDESCRIPTION: This Ruby code snippet illustrates how to set back URLs and auto-return settings in a MercadoPago preference.  It defines a hash `preference_data` which includes the `back_urls` settings for success, failure, and pending scenarios, as well as setting `auto_return` to 'approved'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.pt.md#2025-04-18_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# ...\npreference_data = {\n  # ...\n  back_urls = {\n    success: 'https://www.tu-sitio/success',\n    failure: 'https://www.tu-sitio/failure',\n    pending: 'https://www.tu-sitio/pendings'\n  },\n  auto_return: 'approved'\n  # ...\n}\n# ...\n\n```\n\n----------------------------------------\n\nTITLE: Searching Merchant Orders in PHP\nDESCRIPTION: Retrieves merchant orders using a specific order ID through Mercado Pago's PHP SDK\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/orders.es.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new MerchantOrderClient();\n  $client->get(123456789);\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating a Merchant Order with Mercado Pago PHP SDK\nDESCRIPTION: This code snippet illustrates how to update an existing merchant order using the Mercado Pago PHP SDK. It initializes a MerchantOrderClient, defines an array with the fields to update (in this case, notification_url), and then calls the update method with the order ID and the update request array. The Mercado Pago PHP SDK must be installed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/orders.en.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $client = new MerchantOrderClient();\n\n    $request = [\n      \"notification_url\" => \"https://www.test.com\"\n    ];\n\n  $client->update(123456789, $request);\n?>\n```\n\n----------------------------------------\n\nTITLE: Transaction Update Notification Message\nDESCRIPTION: This JSON snippet represents a notification message received when a transaction intent is updated in Mercado Pago. It includes information such as the action type, API version, transaction ID, notification ID, date created, last updated timestamp, status, and type.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.es.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"transaction_intent.updated\",\n  \"api_version\": \"v1\",\n  \"data\": {\n    \"id\": \"1108917506-01GGTH198RP0K71H133EK9BJAT\" // ID del transaction intent\n  },\n  \"date_created\": \"2022-11-01T17:19:53.915-04:00\",\n  \"id\": \"103686918006\", // ID de la notificacion\n  \"last_updated\": \"2022-11-01T17:19:55.001-04:00\",\n  \"status\": \"partially_processed\",\n  \"type\": \"transaction_intent\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Boleto Bancário Payment with MercadoPago Node.js SDK\nDESCRIPTION: This code snippet shows how to create a Boleto Bancário payment using the MercadoPago Node.js SDK. It sets up the client, defines payment details, and sends the request to the API.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.en.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MercadoPagoConfig, Payments } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<YOUR_ACCESS_TOKEN>' });\nconst payments = new Payments(client);\n\npayments.create({\nbody: {\n       transaction_amount: '<TRANSACTION_AMOUNT>',\n       payment_method_id: '<PAYMENT_METHOD_ID>',\n       payer: {\n           email: '<EMAIL>',\n           first_name: '<NOMBRE>',\n           last_name: '<APELLIDO>',\n           identification:{\n               type:'<TIPO DE DOCUMENTO>',\n               number:'<NUMERO_DOCUMENTO>'\n       },\n           address:{\n               zip_code: '<CEP>',\n               city: '<CIUDAD>',\n               neighborhood: '<BARRIO>',\n               street_name: '<CALLE>',\n               street_number: '<NÚMERO>',\n               federal_unit: '<SIGLA ESTADO>'\n       }\n           }\n},\n   requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n   .then((result) => console.log(result))\n   .catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Adding Mercado Pago Security Script for Web\nDESCRIPTION: Implements Device ID generation by adding a security script to the checkout page. Creates a global JavaScript variable with the unique device identifier.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/device-id.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.mercadopago.com/v2/security.js\" view=\"checkout\"></script>\n```\n\n----------------------------------------\n\nTITLE: OAuth Authorization URL (MLM)\nDESCRIPTION: This snippet shows the OAuth authorization URL for Mexico (MLM). It's used to redirect users to authorize the marketplace to manage their sales. Replace `<APP_ID>` with the application ID and `<REDIRECT_URI>` with the configured redirect URI.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/configuration.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\n\"https://auth.mercadopago.com.mx/authorization?client_id=<APP_ID>&response_type=code&platform_id=mp&redirect_uri=<REDIRECT_URI>\"\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for Telecommunication Companies Query\nDESCRIPTION: Example JSON response from a telecommunication companies query API. The response contains status information, authorization code, and a list of available telecommunication products that can be paid or recharged, including their attributes like minimum/maximum amounts, identification requirements, and display information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/annex-response-examples.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \n \"estatus\":\"OK\", \n \"codaut\":\"00112233445566778899aabbccddeeff\",  \"id_tx\":\"\", \n \"saldo\":-1, \n \"datos\":[ \n { \n \"secuencia\":1, \n \"categoria_id\":\"RCEL\", \n  \n         \"montos\":\"2000&3600&5000&10000&15000& \n20000&25000\", \n \"monto_min\":\"750\", \n \"tipo_dato\":\"CEL\", \n \"usa_reimpresion\":\"1\", \n \"id\":\"EJ1FibraOptica\", \n \"largo_telefono\":9, \n \"operador\":\"EJEMPLO1\", \n \"nombre\":\"Ejemplo 1\",  \n \"monto_max\":\"25000\" \n }, \n { \n \"secuencia\":2, \n \"categoria_id\":\"RBA\", \n \"montos\":\"\", \n \"monto_min\":\"500\", \n \"tipo_dato\":\"RUT\", \n \"usa_reimpresion\":\"1\", \n \"id\":\"Ejem2Movil\", \n \"largo_telefono\":10, \n \"operador\":\"EJEMPLO2\", \n \"nombre\":\"Ejemplo 2\", \n \"monto_max\":\"45000\" \n }, \n... \n ], \n \"mensaje\":\"Carga de recargasCompany exitosa\" } \n\n```\n\n----------------------------------------\n\nTITLE: Configuring Mercado Pago Credentials\nDESCRIPTION: JavaScript code to initialize the MercadoPago object with the public key. This configuration is required to authenticate the integration and enable secure payment processing.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mp = new MercadoPago('YOUR_PUBLIC_KEY');\n```\n\n----------------------------------------\n\nTITLE: Capturing Device Information in Swift\nDESCRIPTION: Swift code snippets to capture device information using Mercado Pago Devices SDK in various formats.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nMercadoPagoDevicesSDK.shared.getInfo() // Devolve um objeto Device que é Codificável\nMercadoPagoDevicesSDK.shared.getInfoAsJson() // Devolve um objeto em JSON\nMercadoPagoDevicesSDK.shared.getInfoAsJsonString() // Devolve o JSON em formato de String\nMercadoPagoDevicesSDK.shared.getInfoAsDictionary() // Devolve um objeto Dictionary<String,Any>\n```\n\n----------------------------------------\n\nTITLE: HMAC Signature Generation in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to generate an HMAC signature using the `hash_hmac` function. It takes the SHA256 hash of the provided data using a secret key. The resulting signature is used for verifying the authenticity of messages.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/notifications.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$cyphedSignature = hash_hmac('sha256', $data, $key);\n```\n\n----------------------------------------\n\nTITLE: Test Debit Card Configuration for Argentina (MLA)\nDESCRIPTION: Provides test Mastercard and Visa card numbers with specific payment status simulation options for the Argentine market\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/test-cards.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Card | Number | Security code | Expiration date |\n| :--- | :---: | :---: | :---: |\n| Mastercard | 5287 3383 1025 3304 | 123 | 11/30 |\n| Visa | 4002 7686 9439 5619 | 123 | 11/30 |\n```\n\n----------------------------------------\n\nTITLE: Handling Rejected Card Validation Responses in JSON\nDESCRIPTION: This JSON code snippet illustrates the structure of an API response for a rejected Zero Dollar Auth validation. The primary focus is on the 'status' field and its value, 'rejected', which indicates an unsuccessful validation attempt, and contains a detailed status_reason to aid troubleshooting.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/api-responses.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 0000000000,\n    \"version\": null,\n    \"date_created\": \"2023-01-12T11:36:19.497-04:00\",\n    \"date_approved\": \"2023-01-12T11:36:20.345-04:00\",\n    \"date_last_updated\": \"2023-01-12T11:36:20.345-04:00\",\n    \"date_of_expiration\": null,\n    \"money_release_date\": \"2023-01-12T11:36:20.345-04:00\",\n    \"operation_type\": \"card_validation\",\n    \"issuer_id\": \"205\",\n    \"payment_method_id\": \"master\",\n    \"payment_type_id\": \"credit_card\",\n    \"status\": \"rejected\",\n    \"status_detail\": \"cc_rejected_other_reason\",\n    \"transaction_amount\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Shipping Cost in Preference\nDESCRIPTION: This JSON snippet shows how to configure the shipping cost in a Mercado Pago preference.  The `shipments` object includes the `cost` attribute to define the shipping fee and the `mode` attribute set to `not_specified`, indicating that the shipping mode is not specified through Mercado Pago's shipping options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/preferences.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"shipments\":{\n        \"cost\": 1000,\n        \"mode\": \"not_specified\",\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implement Expo-Web-Browser (iOS)\nDESCRIPTION: This code snippet demonstrates the implementation of Expo-Web-Browser for opening a URL in Safari View Controller on iOS. It imports necessary components and defines a functional component that opens a specified URL when a button is pressed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-expo-go.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n\tStatusBar\n} from \"expo-status-bar\";\nimport {\n\tStyleSheet,\n\tButton,\n\tView\n} from \"react-native\";\nimport {\n\topenBrowserAsync\n} from \"expo-web-browser\";\nexport default function ExpoWebBrowserExample(url) {\n\treturn ( <\n\t\tView style = {styles.container} > < Button title = \"Open Browser\"\n\t\tonPress = {\n\t\t\t() => openBrowserAsync('https://url-to-open.com')\n\t\t}\n\t\t/> <StatusBar style=\"auto\" / >\n\t\t< /View> );\n\t}\n\tconst styles = StyleSheet.create({\n\t\tcontainer: {\n\t\t\tflex: 1,\n\t\t\tbackgroundColor: \"#fff\",\n\t\t\talignItems: \"center\",\n\t\t\tjustifyContent: \"center\",\n\t\t},\n\t});\n```\n\n----------------------------------------\n\nTITLE: Importing Flutter Custom Tabs Package\nDESCRIPTION: Import statement to include the flutter_custom_tabs package in a Dart file.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/flutter.en.md#2025-04-18_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter_custom_tabs/flutter_custom_tabs.dart';\n```\n\n----------------------------------------\n\nTITLE: Importing MercadoPago.js Library\nDESCRIPTION: HTML code to import the MercadoPago.js v2 library into a web project. This script is essential for securely capturing payment data in the Transparent Checkout integration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Network Transaction ID Response Structure\nDESCRIPTION: Example response showing the network_transaction_id in the expanded parameter\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/network-transaction-id.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"expanded\": {\n   \"gateway\": {\n \t  \"reference\": {\n \t\t \"network_transaction_id\": \"n7w-c0d3-t7d\"\n \t    }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Financing Option for Mexico (mlm)\nDESCRIPTION: This snippet configures a specific financing option, \"Meses sin Tarjeta\", for Mexico (mlm).  It highlights the benefit of reaching a larger audience with active credit and a high approval rate.  This configuration is specific to the Mexican market.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/woocommerce/landing.es.md#2025-04-18_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n ----[mlm]----\n - benefit_title: Financiación sin tarjeta\n - benefit_message: Al activar Meses sin Tarjeta en el checkout, llega a más de 12 millones de personas con crédito activo, sin costos adicionales, además de obtener una tasa de aprobación de aproximadamente el 98% en las ventas.\n\n ------------\n```\n\n----------------------------------------\n\nTITLE: Get document types V1\nDESCRIPTION: Shows the Javascript code to get the document types when using SDK V1\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.en.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n window.Mercadopago.getIdentificationTypes();\n\n```\n\n----------------------------------------\n\nTITLE: Transaction Response Example (MLM)\nDESCRIPTION: This is an example of a transaction response from Mercado Pago for Mexico (MLM).  It provides details about a processed transaction including IDs, amounts and involved accounts. Note the difference in `notification_url` and `origin_id` compared to the MLA example.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.es.md#2025-04-18_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"created_date\": \"2024-11-13T14:18:07.052+00:00\",\n  \"external_reference\": \"12345\",\n  \"id\": \"22dvqmseu6a\",\n  \"last_updated_date\": \"2024-11-13T14:18:07.663+00:00\",\n  \"point_of_interaction\": {\n    \"type\": \"PSP_TRANSFER\"\n  },\n  \"seller_configuration\": {\n    \"notification_info\": {\n      \"notification_url\": \"http://example.mx/notification\"\n    }\n  },\n  \"status\": \"processed\",\n  \"transaction\": {\n    \"from\": {\n      \"accounts\": [\n        {\n          \"amount\": 25,\n          \"status_details\": []\n        }\n      ]\n    },\n    \"paid_amount\": 0,\n    \"payer\": {\n      \"id\": 1992483662\n    },\n    \"refunded_amount\": 0,\n    \"to\": {\n      \"accounts\": [\n        {\n          \"amount\": 25,\n          \"description\": \"envio de 25\",\n          \"origin_id\": \"01JCJY70ACGJ2AP8433JGG0ZRY\",\n          \"status_details\": []\n        }\n      ]\n    },\n    \"total_amount\": 25,\n    \"statement_descriptor\": \"\",\n    \"binary_mode\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Expo-Web-Browser\nDESCRIPTION: This code snippet demonstrates how to use the Expo-Web-Browser package to open a URL in the native browser. It imports necessary components from react-native and expo-web-browser and defines a functional component that renders a button to trigger the browser opening.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-expo-go.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n\tStatusBar\n} from \"expo-status-bar\";\nimport {\n\tStyleSheet,\n\tButton,\n\tView\n} from \"react-native\";\nimport {\n\topenBrowserAsync\n} from \"expo-web-browser\";\nexport default function ExpoWebBrowserExample(url) {\n\treturn ( <\n\t\tView style = {styles.container} > < Button title = \"Open Browser\"\n\t\tonPress = {\n\t\t\t() => openBrowserAsync('YOUR-URL-PREFERENCE')\n\t\t}\n\t\t/> <StatusBar style=\"auto\" / >\n\t\t< /View> );\n\t}\n\tconst styles = StyleSheet.create({\n\t\tcontainer: {\n\t\t\tflex: 1,\n\t\t\tbackgroundColor: \"#fff\",\n\t\t\talignItems: \"center\",\n\t\t\tjustifyContent: \"center\",\n\t\t},\n\t});\n```\n\n----------------------------------------\n\nTITLE: Example Response for PDV Mode Activation\nDESCRIPTION: This JSON snippet shows the expected response after successfully changing the operating mode of a Mercado Pago Point device to PDV.  It confirms that the `operating_mode` has been set to \"PDV\".\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point/integration-api/configure-devices-pdv.es.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"operating_mode\": \"PDV\"\n}\n```\n\n----------------------------------------\n\nTITLE: Not Found Response (Status 404)\nDESCRIPTION: This JSON snippet shows the response structure when the advanced payment is not found. It indicates that the provided `ADVANCED_PAYMENT_ID` does not correspond to an existing payment. The \"message\" and \"cause\" fields provide details about the error.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/refund-partial-amount.en.md#2025-04-18_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"status\": \"404\",\n   \"error\":  \"not_found\",\n   \"message\": \"Advanced payment not found.\",\n   \"cause\": [\n    {\n      \"code\":\"404002\",\n      \"message\": \"Advanced payment not found\",\n      \"data\": null\n    }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response for Generating Payment Method (JSON)\nDESCRIPTION: This JSON is a sample response after successfully generating a payment method in Spreedly. The `payment_method` object contains the token and masked card details.  The `transaction` object provides details of the add payment method transaction.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/spreedly/spreedly.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"transaction\": {\n        \"token\": \"7jhO6alDqP3YEyt1ihve6vLWT8e\",\n        \"created_at\": \"2018-01-08T21:03:39Z\",\n        \"updated_at\": \"2018-01-08T21:03:39Z\",\n        \"succeeded\": true,\n        \"transaction_type\": \"AddPaymentMethod\",\n        \"retained\": false,\n        \"state\": \"succeeded\",\n        \"message_key\": \"messages.transaction_succeeded\",\n        \"message\": \"Succeeded!\",\n        \"payment_method\": {\n            \"token\": \"3uAIR1sSCVJG90obnCN1Ip1BY3b\",\n            \"created_at\": \"2018-01-08T21:03:39Z\",\n            \"updated_at\": \"2018-01-08T21:03:39Z\",\n            \"email\": \"[FAKER][INTERNET][FREE_EMAIL]\",\n            \"data\": null,\n            \"storage_state\": \"cached\",\n            \"test\": false,\n            \"last_four_digits\": \"CARD LAST FOUR DIGITS\",\n            \"first_six_digits\": \"CARD FIRST SIX DIGITS\",\n            \"card_type\": \"PAYMENT_METHO_ID\",\n            \"first_name\": \"TEST\",\n            \"last_name\": \"TEST\",\n            \"month\": CARD EXPIRATION MONTH,\n            \"year\": CARD EXPIRATION YEAR,\n            \"address1\": null,\n            \"address2\": null,\n            \"city\": null,\n            \"state\": null,\n            \"zip\": null,\n            \"country\": null,\n            \"phone_number\": null,\n            \"company\": null,\n            \"full_name\": \"TEST TEST\",\n            \"eligible_for_card_updater\": true,\n            \"shipping_address1\": null,\n            \"shipping_address2\": null,\n            \"shipping_city\": null,\n            \"shipping_state\": null,\n            \"shipping_zip\": null,\n            \"shipping_country\": null,\n            \"shipping_phone_number\": null,\n            \"payment_method_type\": \"credit_card\",\n            \"errors\": [],\n            \"fingerprint\": \"0efdb1b335007d2bf8b4bf8adff9274b934b\",\n            \"verification_value\": \"XXX\",\n            \"number\": \"XXXX-XXXX-XXXX-CARD LAST FOUR DIGITS\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Adobe Commerce Cache\nDESCRIPTION: Command to clean the Adobe Commerce cache after module update.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/adobe-commerce/upgrade-to-the-new-version.en.md#2025-04-18_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\nbin/magento cache:clean\n```\n\n----------------------------------------\n\nTITLE: Updating Email Notifier via PUT Request in curl\nDESCRIPTION: This snippet demonstrates how to modify an existing email notifier using a PUT request. It includes mandatory parameters such as type, data (recipients), and description. The request updates the email notification settings.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/modifications.en.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request PUT 'https://api.mercadopago.com/v1/reports/notifiers/{{notifier_id}}' \\\n--header 'Authorization: Bearer {{TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"type\": \"email\",\n    \"data\": {\n        \"recipients\": [\"test@mercadolibre.com\"]\n    },\n    \"description\": \"test notifier email\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Getting Paired Devices using BluetoothDiscoverDevices in Java\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of paired Bluetooth devices using the `getPairedDevices` function of the `BluetoothDiscoverDevices` class in Java. It retrieves the `BluetoothDiscoverDevices` instance from the `MPManager` and defines a callback function to handle the response, checking for success or error status.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/manage-connections.es.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal BluetoothDiscoverDevices bluetoothDiscoverDevices = MPManager.INSTANCE.getBluetooth().getDiscover();\n\nfinal Function1<MPResponse<List<BluetoothDeviceModel>>, Unit> callback = (final MPResponse<List<BluetoothDeviceModel>> response) -> {\n if (response.getStatus() == ResponseStatus.SUCCESS) {\n   final List<BluetoothDeviceModel> devices = response.getData();\n   // Trabajar con la lista de dispositivos emparejados\n } else {\n   // Manejar el caso de error si es necesario\n }\n return Unit.INSTANCE;\n};\n\nbluetoothDiscoverDevices.getPairedDevices(callback);\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Payment Method in JavaScript\nDESCRIPTION: JavaScript configuration object for setting a default payment method in Payment Brick. Only one payment method can be enabled as default using properties like walletForm, creditCardForm, debitCardForm, savedCardForm, or ticketForm.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/default-payment-method.en.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nsettings = {\n ...,\n customization: {\n   ...,\n   visual: {\n     ...,\n     defaultPaymentOption: {\n       walletForm: true,\n       // creditCardForm: true,\n       // debitCardForm: true,\n       // savedCardForm: 'card id sent in the initialization',\n       // ticketForm: true,\n     },\n   },\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Conflict Response Analysis for Repeated Payment Attempts\nDESCRIPTION: This JSON snippet illustrates an HTTP status code 409 response when a payment is being processed or already completed, thus causing a conflict. The idempotency process gets rejected with a message advising retry once the payment process is completed.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/idempotency-returns.en.md#2025-04-18_snippet_2\n\nLANGUAGE: Json\nCODE:\n```\n{\n   \"status\": \"409\",\n   \"error\":  \"Conflict\",\n   \"message\": \"The process has not been completed yet. Try again later.\",\n   \"cause\": [\n    {\n      \"code\":\"401001\",\n      \"message\": \"The process has not been completed yet. Try again later.\",\n      \"data\": null\n    }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Language via SDK in React\nDESCRIPTION: This code shows how to set the language through the Mercado Pago SDK when using React. It imports and initializes the SDK with Portuguese (Brazil) as the specified language.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/select-language.en.md#2025-04-18_snippet_3\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { initMercadoPago } from '@mercadopago/sdk-react';\ninitMercadoPago('YOUR_PUBLIC_KEY', {locale: 'pt-BR'});\n```\n\n----------------------------------------\n\nTITLE: Creating Credit Card Payment for Events/Tickets with Mercado Pago API\nDESCRIPTION: This cURL request demonstrates how to create a payment for event tickets using the Mercado Pago API. The request includes transaction amount, payment method details, cardholder information, and event-specific data in the additional_info field. It requires an Access Token and includes specific parameters for event ticket sales.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/integration-guide-for-partners/credit-card-events.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://api.mercadopago.com/v1/payments' \\\n--header 'x-platform-id: {{PLATFORM_ID proporcionado por el equipo de Partners}}' \\\n--header 'Authorization: Bearer {{ACCESS_TOKEN}}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"transaction_amount\": 120.34,\n    \"installments\": 1,\n    \"statement_descriptor\": \"Tienda del vendedor\",\n    \"capture\": true,\n    \"binary_mode\": false,\n    \"sponsor_id\": {{ID de su cuenta Mercado Pago referente a su plataforma}},\n    \"payment_method_id\": \"{{payment_method_id}}\",\n    \"token\": \"{{card_token_id}}\",\n    \"external_reference\": \"Identificador de la plataforma\",\n    \"notification_url\": \"{{notification_url}}\",\n    \"description\": \"Fecha (en el formato dd/mm/aaaa) | Nombre del evento\",\n    \"payer\": {\n        \"first_name\": \"Nombre. Ejemplo: John\",\n        \"last_name\": \"Apellido. Ejemplo: Jones\",\n        \"email\": \"Ejemplo: test_user_1677281849@testuser.com\",\n        \"identification\": {\n            \"type\": \"Tipo de documento.\",\n            \"number\": \"Número del documento. Ejemplo: 19119119100\"\n        },\n        \"address\": {\n            \"zip_code\": \"Código postal. Ejemplo: 06233-200\",\n            \"street_name\": \"Nome de la calle. Ejemplo: Av. das Nações Unidas\",\n            \"street_number\": \"Número. Ejemplo: 3003\",\n            \"neighborhood\": \"Barrio. Ejemplo: Bonfim\",\n            \"city\": \"Ciudad. Ejemplo: Osasco\",\n            \"federal_unit\": \"UF. Ejemplo: SP\"\n        }\n    },\n    \"additional_info\": {\n        \"referral_url\": \"URL de referencia. Ejemplo: www.sellertest123.com\",\n        \"drop_shipping\": false,\n        \"delivery_promise\": \"2022-11-20\",\n        \"contrated_plan\": \"premium\",\n        \"items\": [\n            {\n                \"id\": \"1941\",\n                \"title\": \"Fecha (en el formato dd/mm/aaaa) | Nombre del evento\",\n                \"description\": \"Fecha (en el formato dd/mm/aaaa) | Nombre del evento\",\n                \"picture_url\": null,\n                \"category_id\": \"Categoría. Ejemplo: tickets\",\n                \"quantity\": 1,\n                \"unit_price\": 120.34,\n                \"event_date\": \"2019-12-25T19:30:00.000-03:00\"\n            }\n        ],\n        \"payer\": {\n            \"first_name\": \"Nombre. Ejemplo: John\",\n            \"last_name\": \"Apellido. Ejemplo: Jones\",\n            \"is_prime_user\": \"1\",\n            \"is_first_purchase_online\": \"1\",\n            \"last_purchase\": \"2020-10-25T19:30:00.000-03:00\",\n            \"phone\": {\n                \"area_code\": \"Código de área. Ejemplo: 11\",\n                \"number\": \"Número. Ejemplo: 987654321\"\n            },\n            \"address\": {\n                \"zip_code\": \"Código postal. Ejemplo: 06233-200\",\n                \"street_name\": \"Nombre de la calle. Ejemplo: Av. das Nações Unidas\",\n                \"street_number\": \"Número. Ejemplo: 3003\"\n            },\n            \"registration_date\": \"2013-08-06T09:25:04.000-03:00\"\n        },\n        \"shipments\": {\n            \"express_shipment\": \"0\",\n            \"pick_up_on_seller\": \"1\",\n            \"receiver_address\": {\n                \"zip_code\": \"Código postal. Ejemplo: 95630000\",\n                \"street_name\": \"Nombre de la calle. Ejemplo: São Luiz\",\n                \"street_number\": \"Number. Ejemplo: 15\",\n                \"floor\": \"Piso (si es un apartamento). Ejemplo: Segundo\",\n                \"apartment\": \"Número del apartamento (si es un apartamento). Ejemplo: 93\"\n            }\n        }\n    }  \n}'\n```\n\n----------------------------------------\n\nTITLE: Bad Request Response (400)\nDESCRIPTION: This JSON snippet represents a \"Bad Request\" response (HTTP status code 400) from the Mercado Pago API. This response indicates that one or more parameters in the request are invalid or missing.  It typically occurs when required parameters are not sent in the request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/idempotency-returns.es.md#2025-04-18_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"status\": \"400\",\n   \"error\":  \"bad_request\",\n   \"message\": \"Some parameters are invalid for search.\",\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configurando cuotas mínimas y máximas en Card Payment Brick\nDESCRIPTION: Este snippet muestra cómo configurar las cuotas mínimas y máximas al renderizar Card Payment Brick. Se utilizan las propiedades minInstallments y maxInstallments dentro del objeto de configuración.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/max-and-min-installments.es.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n        paymentMethods: {\n            minInstallments: number,\n            maxInstallments: number,\n        },\n    },\n}\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n  paymentMethods: {\n   minInstallments: number,\n   maxInstallments: number,\n },\n};\n```\n\n----------------------------------------\n\nTITLE: Available Payments for MLM\nDESCRIPTION: This section specifies the available payment methods for the MLM region when using Mercado Pago with Tiendanube. It includes credit cards, debit cards, Mercado Pago balance, Efectivo, ATM, and installment payments without a card (MLM specific).\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/nuvemshop/landing.en.md#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"available_payments: credit, debit, mercadopago, efectivo, atm, cuotas_sin_tarjeta_mlm\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Banks - Mercado Pago API - curl\nDESCRIPTION: This snippet demonstrates how to retrieve a list of available banks for Money Out transactions. It sends a GET request using the provided access token to the appropriate API endpoint.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-configuration.es.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request GET \\\n  --url https://api.mercadopago.com/open-banking/payments/v1/banks \\\n  --header 'Authorization: Bearer <ENV_ACCESS_TOKEN>'\n```\n\n----------------------------------------\n\nTITLE: Mercado Pago Credential Types Table\nDESCRIPTION: Markdown tables showing the different types of credentials (Public Key, Access Token, Client ID, Client Secret) and their descriptions for both production and test environments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/credentials/credentials.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Tipo | Descrição |\n|---|---|\n| Public Key | A chave pública da aplicação é geralmente utilizada no frontend. Permite, por exemplo, acessar informações sobre os meios de pagamento e criptografar os dados do cartão. |\n| Access Token | Chave privada da aplicação que sempre deve ser utilizada no backend para gerar pagamentos. É essencial manter esta informação segura em seus servidores. |\n```\n\n----------------------------------------\n\nTITLE: Deep Link Configuration in AndroidManifest.xml\nDESCRIPTION: This XML snippet shows the deep link configuration in the AndroidManifest.xml file.  It includes an intent filter with the scheme, host, and pathPrefix, ensuring that the application can handle the specified deep link. This is an automatically generated file upon prebuild.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/mobile-integration/react-native-expo-go.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: AndroidManifest.xml\nCODE:\n```\n<activity ....> ....\n<intent-filter data-generated=\"true\">\n<action android:name=\"android.intent.action.VIEW\"/>\n<data android:scheme=\"myapp\" android:host=\"checkout\" android:pathPrefix=\"/congrats\"/> <category android:name=\"android.intent.category.BROWSABLE\"/>\n<category android:name=\"android.intent.category.DEFAULT\"/> </intent-filter>\n....\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Getting Payment Data from URL Callback (Success)\nDESCRIPTION: This code snippet demonstrates how to retrieve payment data from the URL query string after a successful payment using URL callback. It uses the `URLSearchParams` API to parse the query string and extract the `payment_type`, `payment_reference`, and `metadata` parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/callback-handling.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet urlQueryString = window.location.search;\nlet urlParams = new URLSearchParams(urlQueryString);\n// Obtendo erro de dados de pagamento a partir de dados de evento\nlet paymentType = urlParams.get('payment_type');\nlet paymentReference = urlParams.get('payment_reference');\nlet metadata = urlParams.get('metadata');\n\t\n/**  \n* Escreva o código aqui...\n**/ \t\n```\n\n----------------------------------------\n\nTITLE: Get Payment Method (V1)\nDESCRIPTION: JavaScript code snippet demonstrating how to retrieve payment methods using Mercado Pago SDK V1 using a callback. The `getPaymentMethod()` method is called with the bin and a callback function.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.Mercadopago.getPaymentMethod({\n    \"bin\": bin\n}, callbackFn);\n```\n\n----------------------------------------\n\nTITLE: QR Data for Open Value QR Code\nDESCRIPTION: This snippet shows the format of the qr_data string for an open value QR code.  This QR code requires the user to input the amount to be paid.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/qr-code/interoperable-accepting-flow-test.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: qr_data\nCODE:\n```\n\"00020101021143530016com.mercadolibre0129https://mpago.la/pos/2602959950150011273265943055204970053030325802AR5917Prueba Perfumeria6004CABA63047720\"\n```\n\n----------------------------------------\n\nTITLE: OAuth Authorization URL (MLU)\nDESCRIPTION: This snippet shows the OAuth authorization URL for Uruguay (MLU). It's used to redirect users to authorize the marketplace to manage their sales. Replace `<APP_ID>` with the application ID and `<REDIRECT_URI>` with the configured redirect URI.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/split-payment/configuration.pt.md#2025-04-18_snippet_5\n\nLANGUAGE: curl\nCODE:\n```\n\"https://auth.mercadopago.com.uy/authorization?client_id=<APP_ID>&response_type=code&platform_id=mp&redirect_uri=<REDIRECT_URI>\"\n```\n\n----------------------------------------\n\nTITLE: Available Payments Configuration (MLB)\nDESCRIPTION: This snippet configures the available payment methods for Brazil (mlb) within the Mini Apps environment. It specifies 'credit', 'debit', and 'mercadopago' as accepted payment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/landing.es.md#2025-04-18_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n\"---\\navailable_payments: credit, debit, mercadopago\\n---\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Card Payment Brick Texts in React JSX\nDESCRIPTION: This code snippet shows how to customize text elements for the Card Payment Brick using React JSX. It provides a structure for customizing form titles, section titles, input labels, and placeholders for various form fields.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/change-texts.en.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n    visual: {\n        texts: {\n            formTitle: \"\",\n            emailSectionTitle: \"\",\n            installmentsSectionTitle: \"\",\n            cardholderName: {\n                label: \"\",\n                placeholder: \"\",\n            },\n            email: {\n                label: \"\",\n                placeholder: \"\",\n            },\n            cardholderIdentification: {\n                label: \"\",\n            },\n            cardNumber: {\n                label: \"\",\n            },\n            expirationDate: {\n                label: \"\",\n            },\n            securityCode: {\n                label: \"\",\n            },\n            selectInstallments: \"\",\n            selectIssuerBank: \"\",\n            formSubmit: \"\",\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Downloading Settlement Report via API (Multiple Languages)\nDESCRIPTION: Send a GET request to download a specific settlement report file. The API requires authentication and the file name as a parameter in the URL.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.en.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n    -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n    'https://api.mercadopago.com/v1/account/settlement_report/:file_name'\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json'\n);\n$data = array(\n    'access_token' => 'ENV_ACCESS_TOKEN'\n);\n$response = Requests::post('https://api.mercadopago.com/v1/account/settlement_report/:file_name', $headers, $data);\n```\n\nLANGUAGE: java\nCODE:\n```\nURL url = new URL(\"https://api.mercadopago.com/v1/account/settlement_report/:file_name\");\n\nHttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\nconnection.setRequestProperty(\"Authorization\", \"Bearer ENV_ACCESS_TOKEN\");\n\nconnection.setRequestMethod(\"GET\");\n\nSystem.out.println(connection.getResponseCode());\nSystem.out.println(connection.getResponseMessage());\nSystem.out.println(connection.getInputStream());\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = { \n    'Authorization: Bearer ENV_ACCESS_TOKEN'\n}\n\nresponse = requests.get('https://api.mercadopago.com/v1/account/settlement_report/:file_name', headers=headers)\n```\n\nLANGUAGE: node\nCODE:\n```\nvar request = require('request');\n\n\nvar headers = { \n    'Authorization: Bearer ENV_ACCESS_TOKEN',\n};\n\nvar options = {\n    url: 'https://api.mercadopago.com/v1/account/settlement_report/:file_name'\n    method: 'GET',\n    headers: headers,\n};\n\nfunction callback(error, response, body) {\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n}\n\nrequest(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Capturing Total Payment Value with Java\nDESCRIPTION: This code demonstrates how to capture the total value of a previously authorized payment using Java. It utilizes the PaymentClient from the Mercado Pago SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\n\nLong paymentId = 123456789L;\n\nPaymentClient client = new PaymentClient();\nclient.capture(paymentId);\n```\n\n----------------------------------------\n\nTITLE: HTML Select Tag (V1)\nDESCRIPTION: HTML select tag with `id='docType'` used to dynamically populate the document types in the V1 version of Mercado Pago SDK. This select tag gets automatically populated after calling `getIdentificationTypes()`.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<body \n   <select id=\"docType\" name=\"docType\" data-checkout=\"docType\" type=\"text\"></select>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Creating Preference with MercadoPago Ruby\nDESCRIPTION: This snippet demonstrates how to create a preference object with MercadoPago using Ruby. It sets the 'purpose' to 'wallet_purchase', restricting payments to registered users. The code utilizes the MercadoPago Ruby SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/code-example-startup.es.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# Crear un objeto de preferencia\npreference_data = {\n  # el purpose: 'wallet_purchase' solo permite pagos registrados\n  # para permitir pagos de invitados, puedes omitir esta propiedad\n  purpose: 'wallet_purchase',\n  items: [\n    {\n      title: 'Mi producto',\n      unit_price: 75.56,\n      quantity: 1\n    }\n  ]\n}\npreference_response = sdk.preference.create(preference_data)\npreference = preference_response[:response]\n \n# Este valor es el ID de preferencia que usará en el HTML al iniciar en Brick\n@preference_id = preference['id']\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Button Appearance for Argentina in React\nDESCRIPTION: This snippet shows how to customize the Wallet Button appearance for Argentina (MLA) using React. It sets the button background color to black and adjusts the border radius.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-appearance.en.md#2025-04-18_snippet_5\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n     buttonBackground: 'black',\n     borderRadius: '6px',\n },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Discounts in Tiendanube Admin Panel\nDESCRIPTION: Step-by-step process for setting up payment method-specific discounts through the Tiendanube Admin Panel using Mercado Pago plugin\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/nuvemshop/discounts-installment-payments.en.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. In your Nuvemshop store's Admin Panel, go to **My apps**.\n2. Locate the Mercado Pago plugin in the list of applications and click on **Actions > Configure**.\n3. In the list of payment methods, find the Mercado Pago plugin and click on **Edit settings**\n```\n\n----------------------------------------\n\nTITLE: Configuring Report Columns in JSON Format\nDESCRIPTION: JSON array example for defining which columns to include in a Mercado Pago report. Each column is specified by its key attribute.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.es.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[ { \"key\": \"DATE\" }, { \"key\": \"SOURCE_ID\" } ]\n```\n\n----------------------------------------\n\nTITLE: HMAC Validation Template\nDESCRIPTION: Template string used to generate HMAC validation hash with notification data\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/webhooks.es.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nid:[data.id_url];request-id:[x-request-id_header];ts:[ts_header];\n```\n\n----------------------------------------\n\nTITLE: Submitting Payment with Card Token\nDESCRIPTION: This snippet demonstrates how to create a card token and submit a payment form. It prevents the default form submission, creates a card token using `mp.fields.createCardToken`, adds the token to the form as a hidden input field, and then submits the form.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.es.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndoSubmit = false;\ndocument.getElementById('paymentForm').addEventListener('submit', getCardToken);\n\nasync function getCardToken(event) {\n    event.preventDefault();\n    if (!doSubmit) {\n        let $form = document.getElementById('paymentForm');\n        const token = await mp.fields.createCardToken({\n            cardholderName: document.getElementById('cardholderName').value,\n            identificationType: document.getElementById('docType').value,\n            identificationNumber: document.getElementById('docNumber').value,\n        })\n        setCardTokenAndPay(token.id)\n    }\n};\n\nfunction setCardTokenAndPay(token) {\n    let form = document.getElementById('paymentForm');\n    let card = document.createElement('input');\n    card.setAttribute('name', 'token');\n    card.setAttribute('type', 'hidden');\n    card.setAttribute('value', token);\n    form.appendChild(card);\n    doSubmit = true;\n    form.submit();\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Store Information - REST API - HTTP\nDESCRIPTION: This snippet describes the process of querying the API to retrieve information about a specific store by using the store's ID and OAuth access token. The response includes additional data about the store's current status (enabled, paused, or disabled).\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-delivery/store-data.en.md#2025-04-18_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /proximity-integration/stores/{StoreID}\nAuthorization: Bearer {access_token}\n\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation for Installment Information Display\nDESCRIPTION: JavaScript code that configures the Mercado Pago SDK, retrieves installment information from the API, populates the installment dropdown, and updates the financial information display when a user selects an installment option.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/considerations-argentina.en.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<script type=\"text/javascript\">\n\n    // Configurá tu Public Key\n    Mercadopago.setPublishableKey(\"TEST-59c64ee8-7a6d-4dbc-bfb0-317e24534eea\");\n\n    // Consultá el recurso de installments\n    Mercadopago.getInstallments({\n        \"payment_method_id\": \"visa\",\n        \"bin\": 424242,\n        \"amount\": 100\n    }, showInstallments);\n\n    // Mostrá las cuotas\n    function showInstallments(status, response){\n      var selectorInstallments = document.getElementById('installments'),\n          fragment = document.createDocumentFragment();\n      selectorInstallments.options.length = 0;\n      if (response.length > 0){\n        var option = new Option(\"Elija una cuota...\", '-1'),\n            payerCosts = response[0].payer_costs;\n        fragment.appendChild(option);\n        for (var i = 0; i < payerCosts.length; i++) {\n            option = new Option(payerCosts[i].recommended_message || payerCosts[i].installments, payerCosts[i].installments);\n            var tax = payerCosts[i].labels;\n            if(tax.length > 0){\n              for (var l = 0; l < tax.length; l++) {\n                if (tax[l].indexOf('CFT_') !== -1){\n                  option.setAttribute('data-tax', tax[l]);\n                }\n              }\n            }\n            fragment.appendChild(option);\n        }\n        selectorInstallments.appendChild(fragment);\n        selectorInstallments.removeAttribute('disabled');\n      }\n      else {\n        console.log('Error: Could not get installments');\n      }\n    }\n\n    // Actualizá el resumen cuando el usuario elija las cuotas\n    document.getElementById('installments').onchange = function(){\n      var cur_i = this.options[this.selectedIndex].getAttribute('data-tax');\n      if(cur_i != null){\n        document.getElementById('total-financed').innerHTML = this.options[this.selectedIndex].text;\n        showTaxes(cur_i);\n      }\n    };\n    function showTaxes(tax){\n      var tax_split = tax.split('|');\n          var CFT = tax_split[0].replace('CFT_', ''),\n          TEA = tax_split[1].replace('TEA_', '');\n      document.getElementById('cft').innerHTML = CFT;\n      document.getElementById('tea').innerHTML = TEA;\n    }\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Payment Request Example with Network Transaction ID\nDESCRIPTION: Complete JSON example of a payment request including network transaction ID and subscription details\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/network-transaction-id.en.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"TESTE\",\n    \"external_reference\": \"MP_genova_master\",\n    \"installments\": 1,\n    \"token\": \"{{token}}\",\n    \"payer\": {\n        \"id\": \"{{customer_id}}\",\n        \"entity_type\": \"individual\",\n        \"type\": \"customer\"\n    },\n    \"payment_method_id\": \"master\",\n    \"transaction_amount\": 1,\n    \"point_of_interaction\": {\n        \"type\": \"SUBSCRIPTIONS\",\n        \"transaction_data\": {\n            \"first_time_use\": true,\n            \"subscription_id\": \"mlb-suscripcions-genova-1\",\n            \"subscription_sequence\": {\n                \"number\": 1\n            },\n            \"invoice_period\": {\n                \"period\": 1,\n                \"type\": \"monthly\"\n            },\n            \"billing_date\": \"2024-07-29\",\n            \"user_present\": true\n        }\n    },\n    \"forward_data\": {\n        \"network_transaction_data\": {\n            \"network_transaction_id\": \"n7w-c0d3-t7d\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with 3DS in Go\nDESCRIPTION: This Go code snippet demonstrates how to create a payment with 3DS enabled using the Mercado Pago SDK. It sets the access token, creates a payment client, and sends a payment creation request with the `ThreeDSecureMode` field set to `optional`. It requires the Mercado Pago Go SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-integrate-3ds-bigmerchants.en.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/mercadopago/sdk-go/pkg/config\"\n\t\"github.com/mercadopago/sdk-go/pkg/payment\"\n)\n\nfunc main() {\n\taccessToken := \"<ENV_ACCESS_TOKEN>\"\n\n\tcfg, err := config.New(accessToken)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := payment.NewClient(cfg)\n\n\trequest := payment.Request{\n\t\tTransactionAmount:<TRANSACTION_AMOUNT>,\n\t\tPayer: &payment.PayerRequest{\n\t\t\tEmail: \"<BUYER_EMAIL>\",\n\t\t},\n\t\tToken:        \"<CARD_TOKEN>\",\n\t\tInstallments: <INSTALLLMENTS_NUMBER>,\n\t\tDescription: \"<DESCRIPTION>\",\n\t\tThreeDSecureMode: \"optional\",\n\t}\n\n\tresource, err := client.Create(context.Background(), request)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(resource)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MercadoPago.js Library\nDESCRIPTION: HTML snippet to include the Mercado Pago JavaScript SDK in your web page. This library is essential for securely capturing payment details and integrating with Mercado Pago's services.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.en.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<body>\n<script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Hiding Value Proposition Text (MLB/MLC/MLM/MPE/MCO/MLU)\nDESCRIPTION: This snippet illustrates how to hide the value proposition text in the Wallet Brick by setting the `customStyle.hideValueProp` property to `true`. This provides a way to simplify the visual presentation and focus on the core payment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/change-appearance.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n\t   theme: 'default',\n        customStyle: {\n            hideValueProp: true,\n        }\n    }\n}\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n    theme: 'default',\n    customStyle: {\n        hideValueProp: true,\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago SDK with C#\nDESCRIPTION: This code snippet initializes the Mercado Pago SDK in C# by using `MercadoPago.Config` and setting the `AccessToken`. The access token is necessary for authenticating API requests.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/default-rendering.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// SDK do Mercado Pago\nusing MercadoPago.Config;\n // Adicione as credenciais\nMercadoPagoConfig.AccessToken = \"PROD_ACCESS_TOKEN\";\n```\n\n----------------------------------------\n\nTITLE: Example of Generated SSH Public Key\nDESCRIPTION: This snippet shows an example of a generated SSH public key. It consists of three parts: the algorithm (ssh-rsa), the public key value, and the host/comment. This public key should be shared with Mercado Pago for SFTP access configuration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/recaudos/public-and-private-key.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: ssh-rsa\nCODE:\n```\nssh-rsa CCCCB3NzaC1yc2EAAAADAQABAAABgQDIuC0emFLk1nGC1MCmJDqHzJy9N3WGJFCrDY8EuhcrpCP+5R6X/LnVESwn291IR2B7cO6jZtv6v8OohdWl9nCfNndm5w9HRuujrbpPebADGbrG89srHCuQVLY8zg+/cvLk0yGGvsSkpCZsJDm74VHngkwxdnR3T0dfpHFG/JcFjeNPpCW4d9N9gfkpmclBpfB14VMLoQ2K2xwLbujaxra0p0EbEbc/eq1vdN+m2Ja7WyR1L+66Cp3NKw1+suFIlP2H58kn7988JZ4baenfwOv8qQZu6WqsyJTecSwDgBn6Jr7WbpKfq2+nARif96nip5rFwxKWkHs7pDGu2XniurzlGe7MQaRc/XLdeAewS1qkt9qS51b1hy816KvcBFC5zPOH2P3yFWTcEFDT3WUfJ0o1MQk22eAHuCSK1tjRdDCGoB5sCjYYGCPonIaRc85CRNi/5CpD0i+xmopW1gOK6Q7dZSj6kSaphK1WK47Mdn20Eeu+OADLqnWN/np2qWyK/68= user@host\n```\n\n----------------------------------------\n\nTITLE: Building Callback URI for Payment Flow in Android\nDESCRIPTION: Demonstrates how to construct a valid URI for opening specific activities using the buildCallbackUri function from PaymentFlow class.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/payment-flow-legacy-support.es.md#2025-04-18_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval paymentFlow = MPManager.paymentFlow\n\nval uriResult = paymentFlow.buildCallbackUri(\n   callback = \"tuHost://tuApp/result\",\n   methodCallback = \"error\",\n   metadata = hashMapOf(\"message\" to \"result\"),\n   appID = \"demo.app\"\n)\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal PaymentFlow paymentFlow = MPManager.INSTANCE.getPaymentFlow();\n\nfinal HashMap<String, String> resultMetadata = new HashMap<>();\nresultMetadata.put(\"message\", \"result\");\n\nfinal Uri uriResult = paymentFlow.buildCallbackUri(\n   \"tuHost://tuApp/result\",\n   \"error\",\n   resultMetadata,\n   \"demo.app\"\n);\n```\n\n----------------------------------------\n\nTITLE: Notificación de alerta de fraude en JSON\nDESCRIPTION: Ejemplo de estructura JSON para una notificación de alerta de fraude, que se envía cuando se detecta una actividad sospechosa.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/notification-additional-info.es.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"action\": \"Created\",\n    \"api_version\": \"v1\",\n    \"data\": {\n        \"description\": \"desc\",\n        \"merchant_order\": 249940988000,\n        \"payment_id\": 58980959081,\n        \"site_id\": \"MLA\"\n    },\n    \"date_created\": \"2022-07-23T23:03:5704:00\",\n    \"id\": \"58980959081\",\n    \"live_mode\": true,\n    \"type\": \"stop_delivery_op_wh\",\n    \"user_id\": 224403329,\n    \"version\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Wallet Brick Button and Value Proposition Text in JavaScript\nDESCRIPTION: This snippet demonstrates how to customize both the action text and value proposition of the Wallet Brick button using JavaScript. It sets the action to 'buy' and the value proposition to 'security_details'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/change-button-texts.es.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n ...,\n customization: {\n      texts: {\n          action: 'buy',\n          valueProp: 'security_details',\n      },\n },\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Server Error Response in JSON\nDESCRIPTION: This JSON response indicates an internal server error (status code 500). This occurs when a server-side issue prevents the refund from being processed successfully.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/refund-full-amount.en.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"status\": \"500\",\n   \"error\":  \"internal_server_error\",\n   \"message\": \"Invalid splitter id.\",\n   \"cause\": [\n    {\n      \"code\":\"500000\",\n      \"message\": \"Internal server error\",\n      \"data\": null\n    }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response with TEA and CFT Values\nDESCRIPTION: Sample JSON response from the installments API call showing the structure of the data returned, including the 'labels' attribute that contains the CFT and TEA information for each installment option.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/considerations-argentina.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t...,\n    \"payer_costs\": [\n          {\n            \"installments\": 1,\n            \"installment_rate\": 0,\n            \"discount_rate\": 0,\n            \"labels\": [\n               \"CFT_0,0%|TEA_0,0%\"\n            ],\n            \"min_allowed_amount\": 0,\n            \"max_allowed_amount\": 250000,\n            \"recommended_message\": \"1 cuota de $ 1.000,00 ($ 1.000,00)\",\n            \"installment_amount\": 1000,\n            \"total_amount\": 1000\n          },\n          {\n            \"installments\": 3,\n            \"installment_rate\": 0,\n            \"discount_rate\": 0,\n            \"labels\": [\n               \"CFT_70,21%|TEA_89,43%\"\n            ],\n            \"min_allowed_amount\": 2,\n            \"max_allowed_amount\": 250000,\n            \"recommended_message\": \"3 cuotas de $ 369,90 ($ 1.109,70)\",\n            \"installment_amount\": 369.90,\n            \"total_amount\": 1109.70\n          }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Brand Brick with JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to create the Brand Brick using the `bricksBuilder.create()` method. It takes the brick type \"brand\" and the container ID \"brandBrick_container\" as arguments. This assumes that `bricksBuilder` is initialized elsewhere.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/brand-brick/default-rendering.es.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbricksBuilder.create(\n    \"brand\",\n    \"brandBrick_container\"\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing MercadoPago.js via npm\nDESCRIPTION: This bash command installs the MercadoPago.js SDK using npm for use in JavaScript projects.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.en.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n\n```\n\n----------------------------------------\n\nTITLE: Adding Mercado Pago Device Fingerprint Script to VTEX\nDESCRIPTION: This JavaScript code snippet creates a script element, sets its source to the Mercado Pago security script URL, and appends it to the document body. This enables the Device Fingerprint functionality for fraud prevention. The script also sets the 'output' and 'view' attributes which may be used by the Mercado Pago script.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/vtex/device-fingerprint.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar script = document.createElement(\"script\");\nscript.src = \"https://www.mercadopago.com/v2/security.js\";\nscript.setAttribute(\"output\",\"vtex.deviceFingerprint\");\nscript.setAttribute(\"view\",\"checkout\");\ndocument.body.appendChild(script);\n```\n\n----------------------------------------\n\nTITLE: Notificación de Card Updater en JSON\nDESCRIPTION: Ejemplo de estructura JSON para una notificación de Card Updater, que se envía cuando se actualiza la tarjeta de un cliente.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/notification-additional-info.es.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"card.updated\",\n  \"api_version\": \"v1\",\n  \"application_id\": 8339021212080291,\n  \"data\": {\n    \"customer_id\": \"12345678-aluyasdhfyt\",\n    \"new_card_id\": 50000102202,\n    \"old_card_id\": 50000006036\n  },\n  \"date_created\": \"2024-01-11T15:23:53-03:00\",\n  \"id\": \"a47fc06844bf4e418a03aeab1479c496\",\n  \"live_mode\": true,\n  \"type\": \"automatic-payments\",\n  \"user_id\": 1197520450,\n  \"version\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Benefit Message for mla, mlm, mlu, mpe, mco, mlc\nDESCRIPTION: This snippet configures a benefit message specifically for a group of countries (mla, mlm, mlu, mpe, mco, mlc) regarding the Checkout Pro or Checkout API.  It emphasizes that customers don't need to log in to their Mercado Pago account to make payments.  This is country-specific to reflect available features.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/woocommerce/landing.es.md#2025-04-18_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n ----[mla, mlm, mlu, mpe, mco, mlc]----\n - benefit_message: Con el Checkout Pro o el Checkout API, su cliente no necesita iniciar sesión en su cuenta de Mercado Pago para realizar el pago en su tienda.\n\n ------------\n```\n\n----------------------------------------\n\nTITLE: Importing MercadoPago.js Library\nDESCRIPTION: HTML snippet for importing the MercadoPago JavaScript library in the body section of the webpage. This is required to securely capture payment information in the Transparent Checkout flow.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.es.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Format for Vault Migration to Tokenization in Mercado Pago\nDESCRIPTION: Example CSV file format for migrating card vaults to tokenization. The file must be comma-separated with specific required fields including customer references, email, card details, and expiration information. All fields are required, even if some must be filled with placeholder data.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/batch-payments-vault-migration/vault-migration/input-format-vault-migration.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nFiller,external_reference,customer_email,Filler,Filler,card_number,expiration_month,expiration_year,cardholder_name,Filler\n,217307543,test1@gmail.com,,,4356141052114191,11,25,Mary Meir,\n,485342254,test2@gmail.com,,,4356141052114192,02,28,Jhon Doe,\n```\n\n----------------------------------------\n\nTITLE: Hiding Payment Button in Card Payment Brick\nDESCRIPTION: This code shows how to hide the default payment button in the Card Payment Form Brick. It uses the customization.visual.hidePaymentButton property set to true and includes callback functions for ready and error states.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/hide-element.en.md#2025-04-18_snippet_1\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n    ...,\n    callbacks: {\n        onReady: () => {\n            // callback called when brick is ready\n        },\n        onError: (error) => { \n            // callback called for all Brick error cases\n        },\n    },\n    customization: {\n        visual: {\n            hidePaymentButton: true\n        }\n    }\n}\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n   hidePaymentButton: true\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Inicializando el SDK de Dispositivos en Objective-C\nDESCRIPTION: Inicializa el módulo MercadoPagoDevicesSDK en el evento didFinishLaunchingWithOptions del AppDelegate para aplicaciones iOS desarrolladas en Objective-C.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-chopro.es.md#2025-04-18_snippet_7\n\nLANGUAGE: objective-c\nCODE:\n```\n@import 'MercadoPagoDevicesSDK';\n...\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    ...\n    [[MercadoPagoDevicesSDK shared] execute];\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Saved Card\nDESCRIPTION: Example of the JSON response structure when retrieving saved cards. It includes card details such as ID, expiration date, and partial card number information.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/receive-payments-with-saved-cards.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[{\n    \"id\": \"1490022319978\",\n    \"expiration_month\": 12,\n    \"expiration_year\": 2020,\n    \"first_six_digits\": \"415231\",\n    \"last_four_digits\": \"0001\",\n    ...\n}]\n```\n\n----------------------------------------\n\nTITLE: Retrieving High Risk Payment Rejection via Mercado Pago API\nDESCRIPTION: This JSON response example demonstrates a payment rejected due to high fraud risk detection. The response includes the rejection status, the high risk detail code, payment ID, and the payment method details.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/payment-rejections.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n {\n    \"status\": \"rejected\",\n    \"status_detail\": \"cc_rejected_high_risk\",\n    \"id\": 47198050,\n    \"payment_method_id\": \"master\",\n    \"payment_type_id\": \"credit_card\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Inicializando DeviceSDK en Android\nDESCRIPTION: Código para inicializar el SDK de dispositivos de Mercado Pago en una aplicación Android. Se recomienda ejecutarlo en la clase MainApplication.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.es.md#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nimport com.mercadolibre.android.device.sdk.DeviceSDK;\nDeviceSDK.getInstance().execute(this);\n```\n\n----------------------------------------\n\nTITLE: Hiding Payment Button in Card Payment Brick (React JSX)\nDESCRIPTION: This snippet illustrates how to hide the default payment button in the Card Payment Brick using React JSX. It sets the 'hidePaymentButton' property to true in the customization object.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/hide-element.es.md#2025-04-18_snippet_3\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n   hidePaymentButton: true\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Card Form with Mercado Pago SDK\nDESCRIPTION: This HTML snippet demonstrates how to create a card form to collect payer's credit card details using the Mercado Pago JavaScript SDK. The form includes fields for email, card number, security code, expiration date, and cardholder name, all linked to Mercado Pago's data attributes for secure tokenization.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.en.md#2025-04-18_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://secure.mlstatic.com/sdk/javascript/v1/mercadopago.js\"></script>\n\n...\n<form action=\"\" method=\"post\" id=\"pay\" name=\"pay\" >\n    <fieldset>\n        <ul>\n            <li>\n                <label for=\"email\">Email</label>\n                <input id=\"email\" name=\"email\" value=\"test_user_19653727@testuser.com\" type=\"email\" placeholder=\"your email\"/>\n            </li>\n            <li>\n                <label for=\"cardNumber\">Credit card number:</label>\n                <input type=\"text\" id=\"cardNumber\" data-checkout=\"cardNumber\" placeholder=\"4509 9535 6623 3704\" />\n            </li>\n            <li>\n                <label for=\"securityCode\">Security code:</label>\n                <input type=\"text\" id=\"securityCode\" data-checkout=\"securityCode\" placeholder=\"123\" />\n            </li>\n            <li>\n                <label for=\"cardExpirationMonth\">Expiration month:</label>\n                <input type=\"text\" id=\"cardExpirationMonth\" data-checkout=\"cardExpirationMonth\" placeholder=\"12\" />\n            </li>\n            <li>\n                <label for=\"cardExpirationYear\">Expiration year:</label>\n                <input type=\"text\" id=\"cardExpirationYear\" data-checkout=\"cardExpirationYear\" placeholder=\"2015\" />\n            </li>\n            <li>\n                <label for=\"cardholderName\">Card holder name:</label>\n                <input type=\"text\" id=\"cardholderName\" data-checkout=\"cardholderName\" placeholder=\"APRO\" />\n            </li>\n         </ul>\n        <input type=\"submit\" value=\"Pay!\" />\n    </fieldset>\n</form>\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing 735x40px Payment Method Banner\nDESCRIPTION: HTML code for embedding a 735x40 pixel Mercado Pago payment methods banner advertising 10 interest-free installments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/dez.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/PSJ/735x40_banner_psj_10x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"735\" height=\"40\"/>\n```\n\n----------------------------------------\n\nTITLE: Pix Key Configuration Error\nDESCRIPTION: Error for Mercado Pago sellers who have not created a Pix key in their account. Requires setting up Pix key before QR code rendering.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/vtex/common-errors.en.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n`Collector user without key enabled for QR render`\n```\n\n----------------------------------------\n\nTITLE: Android Device SDK Implementation\nDESCRIPTION: Implementation of the Mercado Pago Devices SDK in Android applications.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.es.md#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport com.mercadolibre.android.device.sdk.DeviceSDK;\n\n\nDeviceSDK.getInstance().execute(this);\n```\n\n----------------------------------------\n\nTITLE: Creating and Editing a CocoaPods Podfile\nDESCRIPTION: Command to create a Podfile and open it in Xcode for adding Mercado Pago SDK dependencies. Xcode usage is recommended over TextEdit to prevent syntax errors from incorrect quote replacements.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/ios.es.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ touch Podfile\n$ open -a Xcode Podfile\n```\n\n----------------------------------------\n\nTITLE: Activating Automatic Report Generation using Python\nDESCRIPTION: This Python code snippet utilizes the Requests library to send a POST request to Mercado Pago's API endpoint to activate report generation, including necessary headers for authorization.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/released-money/api.es.md#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport requests\\n\\nheaders = {\\n    'accept': 'application/json',\\n    'content-type': 'application/json',\\n    'Authorization': 'Bearer ENV_ACCESS_TOKEN'\\n}\\n\\nresponse = requests.post('https://api.mercadopago.com/v1/account/release_report/schedule', headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Settlement Report Generation with PHP\nDESCRIPTION: PHP implementation to disable automatic generation of settlement reports. This code makes a DELETE request to the scheduling endpoint using the Requests library.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/account-money/api.en.md#2025-04-18_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude('vendor/rmccue/requests/library/Requests.php');\nRequests::register_autoloader();\n$headers = array(\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n    'Authorization' => 'Bearer ENV_ACCESS_TOKEN'\n);\n$response = Requests::delete('https://api.mercadopago.com/v1/account/settlement_report/schedule', $headers);\n```\n\n----------------------------------------\n\nTITLE: Listing Refunds in PHP\nDESCRIPTION: Method to retrieve a list of all refunds for a specific payment using Mercado Pago SDK. Requires payment ID as input parameter.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/php/refunds.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  $refund_client = new PaymentRefundClient();\n  $refund_client->list('123456789');\n?>\n```\n\n----------------------------------------\n\nTITLE: Boleto Bancário Payment Form HTML Structure\nDESCRIPTION: HTML form structure for collecting payer information required for a Boleto Bancário payment. The form includes fields for personal information, document type, and document number, along with hidden fields for transaction amount and description.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/boleto-bancario.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n  <form id=\"form-checkout\" action=\"/process_payment\" method=\"post\">\n    <div>\n      <div>\n        <label for=\"payerFirstName\">Nome</label>\n        <input id=\"form-checkout__payerFirstName\" name=\"payerFirstName\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"payerLastName\">Sobrenome</label>\n        <input id=\"form-checkout__payerLastName\" name=\"payerLastName\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"email\">E-mail</label>\n        <input id=\"form-checkout__email\" name=\"email\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"identificationType\">Tipo de documento</label>\n        <select id=\"form-checkout__identificationType\" name=\"identificationType\" type=\"text\"></select>\n      </div>\n      <div>\n        <label for=\"identificationNumber\">Número do documento</label>\n        <input id=\"form-checkout__identificationNumber\" name=\"identificationNumber\" type=\"text\">\n      </div>\n    </div>\n\n    <div>\n      <div>\n        <input type=\"hidden\" name=\"transactionAmount\" id=\"transactionAmount\" value=\"100\">\n        <input type=\"hidden\" name=\"description\" id=\"description\" value=\"Nome do Produto\">\n        <br>\n        <button type=\"submit\">Pagar</button>\n      </div>\n    </div>\n  </form>\n```\n\n----------------------------------------\n\nTITLE: Fetching Migrated Subscription Details Using CURL\nDESCRIPTION: This code snippet demonstrates how to retrieve the migrated details of subscriptions, plans, or invoices using a GET request to the Mercado Pago API. Replace `<RESOURCE>` and `<ID>` with appropriate values for plans or subscriptions to get their new identifiers after migration. This is essential for updating your internal records post-migration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/subscription-migration.en.md#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location \\\n--request GET 'https://api.mercadopago.com/subscriptions/migrations/<RESOURCE>/<ID>'\n```\n\n----------------------------------------\n\nTITLE: Sending Payment - PHP\nDESCRIPTION: This PHP snippet outlines how to send a payment request using the new PSE implementation, including the required fields to include in the request.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/how-to-migrate-pse.en.md#2025-04-18_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse MercadoPago\\Client\\Payment\\PaymentClient;\nuse MercadoPago\\MercadoPagoConfig;\n\nMercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n$client = new PaymentClient();\n$payment = $client->create([\n  \"transaction_amount\" => 5000,\n  \"description\" => \"Product description\",\n  \"payment_method_id\" => \"pse\",\n\n```\n\n----------------------------------------\n\nTITLE: MercadoPago.js SDK V2 Documentation\nDESCRIPTION: Technical documentation and repository for the MercadoPago JavaScript SDK version 2, providing integration tools for payment processing\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/github-project.en.md#2025-04-18_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n* [Technical documentation - SDK MercadoPago.js V2](https://github.com/mercadopago/sdk-js)\n```\n\n----------------------------------------\n\nTITLE: Importing MercadoPago SDK in HTML\nDESCRIPTION: Script tag to include MercadoPago JavaScript SDK version 2 in a web page, enabling client-side payment integration\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/order/online-payments/card-payments.es.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Get Identification Types (V1)\nDESCRIPTION: JavaScript code snippet demonstrating how to retrieve identification types using Mercado Pago SDK V1. The `getIdentificationTypes()` method is called to fetch the identification types.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n window.Mercadopago.getIdentificationTypes();\n```\n\n----------------------------------------\n\nTITLE: Installing MercadoPago.js via npm\nDESCRIPTION: Command to install the MercadoPago JavaScript SDK using npm package manager. This allows you to include the SDK as a dependency in your JavaScript or TypeScript project.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.es.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n```\n\n----------------------------------------\n\nTITLE: Including Test Cards Documentation Snippet\nDESCRIPTION: Markdown include statement to embed test cards documentation from a snippet file\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/your-integrations/test-cards.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[TXTSNIPPET][/guides/snippets/test-integration/test-cards]\n```\n\n----------------------------------------\n\nTITLE: Implementing MercadoPago Banner - 120x600px\nDESCRIPTION: HTML code to embed a 120x600 pixel MercadoPago payment methods banner showing 9 interest-free installments option.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/nove.en.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/PSJ/120x600_banner_psj_9x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"120\" height=\"600\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating Fintoc Payment with MercadoPago C# SDK\nDESCRIPTION: Shows how to create a Fintoc payment using the MercadoPago C# SDK, including setting up the payment request and handling the asynchronous client creation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-fintoc-advanced.en.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nMercadoPagoConfig.AccessToken = \"YOUR_ACCESS_TOKEN\"\n\nvar paymentPayerRequest = new PaymentPayerRequest\n{\n    Email = \"test_user_123@testuser.com\",\n};\n\nvar paymentPointOfInteractionRequest = new PaymentPointOfInteraction\n{\n    Type = \"CHECKOUT\",\n    SubType = \"INTER_PSP\"\n};\n\nvar request = new PaymentCreateRequest\n{\n    Description = \"Product title\",\n    Payer = paymentPayerRequest,\n    PaymentMethodId = \"fintoc\",\n    TransactionAmount = (decimal?)5000,\n    CallbackUrl = \"https://www.your-site.com\",\n    PointOfInteraction = paymentPointOfInteractionRequest\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request, requestOptions);\n```\n\n----------------------------------------\n\nTITLE: Listando Métodos de Pagamento usando Go\nDESCRIPTION: Código Go para listar métodos de pagamento disponíveis usando o SDK do Mercado Pago. Configura o cliente com o token de acesso e processa a resposta.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/other-payment-methods.pt.md#2025-04-18_snippet_44\n\nLANGUAGE: go\nCODE:\n```\naccessToken := \"{{ACCESS_TOKEN}}\"\n\n\ncfg, err := config.New(accessToken)\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nclient := paymentmethod.NewClient(cfg)\n\n\nresources, err := client.List(context.Background())\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nfor _, v := range resources {\n   fmt.Println(v)\n}\n```\n\n----------------------------------------\n\nTITLE: Error: Unauthorized Live Credentials Usage\nDESCRIPTION: Indicates that production credentials for the Mercado Pago account are not activated. Requires manual activation of credentials in the credentials page.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/vtex/common-errors.es.md#2025-04-18_snippet_0\n\nLANGUAGE: error-code\nCODE:\n```\nunauthorized_use_of_live_credentials\n```\n\n----------------------------------------\n\nTITLE: Initializing Pix Payment Form with Pre-filled Email in Javascript\nDESCRIPTION: Configuration to pre-populate the email field for Pix payments in Brazil. This allows you to initialize the Brick with the payer's email address.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/initialize-data-on-the-bricks.en.md#2025-04-18_snippet_2\n\nLANGUAGE: Javascript\nCODE:\n```\nsettings = {\n  ...,\n  initialization: {\n   ...,\n  payer: {\n  email: '<PAYER_EMAIL_HERE>'\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Country Availability Configuration\nDESCRIPTION: YAML configuration specifying the countries where the integration is available.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/shopify/landing.en.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\navailable_countries: mla, mlb, mlm, mlu, mlc, mco, mpe\n```\n\n----------------------------------------\n\nTITLE: Expiration Date Input (V1)\nDESCRIPTION: HTML input fields for capturing card expiration month and year in Mercado Pago SDK V1. The `data-checkout` attributes are used to identify the fields for Mercado Pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <input type=\"text\" placeholder=\"MM\" id=\"cardExpirationMonth\" data-checkout=\"cardExpirationMonth\">\n  <span class=\"date-separator\">/</span>\n  <input type=\"text\" placeholder=\"YY\" id=\"cardExpirationYear\" data-checkout=\"cardExpirationYear\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Hiding Value Proposition Text (MLA)\nDESCRIPTION: This snippet shows how to hide the value proposition text for the MLA region's Wallet Brick. It uses `customization.visual.hideValueProp` set to `true` to achieve this.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/wallet-brick/change-appearance.es.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n    ...,\n    customization: {\n         visual: {\n             hideValueProp: true\n         },\n    },\n}\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n visual: {\n   hideValueProp: true\n }\n};\n\n```\n\n----------------------------------------\n\nTITLE: GET Request to Check Publication Status - REST\nDESCRIPTION: This snippet demonstrates how to make a GET request to the API endpoint to check the status of a catalog publication using the publication_id and access_token as parameters. The access_token must be included in the header for authentication. The expected output includes the status of the publication process which may indicate processing, error, or success.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-delivery/check-publication.en.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /proximity/integration/v1/catalog/{publication_id}\nHeaders:\n  Authorization: Bearer {access_token}\n```\n\n----------------------------------------\n\nTITLE: Response for Updating SFTP Notifier in JSON\nDESCRIPTION: This snippet displays the JSON response received after successfully updating an SFTP notifier. It includes details such as the notifier ID, type, data (ip, port, password, protocol, username, remote_dir), description, version, status, and PII data flag.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/modifications.en.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": {{notifier_id}},\n    \"type\": \"ftp\",\n    \"data\": {\n         \"ip\": \"test.files.com\",\n        \"port\": 22,\n        \"password\": \"test\",\n        \"protocol\": \"SFTP\",\n        \"username\": \"test@mercadolibre.com\",\n        \"remote_dir\": \"/\"\n    },\n    \"description\": \"test notifier sftp 1\",\n    \"version\": 1,\n    \"status\": \"ACTIVE\",\n    \"is_pii_data\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Security Code for Saved Cards in Mercado Pago\nDESCRIPTION: JavaScript code for capturing the security code and creating a card token. This script handles the form submission event, creates a card token using Mercado Pago's SDK, and stores it in a hidden input field.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/receive-payments-with-saved-cards.es.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n const formElement = document.getElementById('form-checkout');\n    formElement.addEventListener('submit', e => createCardToken(e));\n    const createCardToken = async (event) => {\n      try {\n        const tokenElement = document.getElementById('token');\n        if (!tokenElement.value) {\n          event.preventDefault();\n          const token = await mp.fields.createCardToken({\n            cardId: document.getElementById('form-checkout__cardId').value\n          });\n          tokenElement.value = token.id;\n          console.log(tokenElement);\n        }\n      } catch (e) {\n        console.error('error creating card token: ', e)\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing 125x125px Payment Method Banner\nDESCRIPTION: HTML code for embedding a 125x125 pixel Mercado Pago payment methods banner advertising 10 interest-free installments.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/dez.en.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/PSJ/125x125_banner_psj_10x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"125\" height=\"125\"/>\n```\n\n----------------------------------------\n\nTITLE: Available Countries Configuration\nDESCRIPTION: YAML configuration defining the list of countries where the checkout solution is available.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/landing.en.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\navailable_countries: mla, mlb, mlm, mlu, mco, mlc, mpe\n```\n\n----------------------------------------\n\nTITLE: Mercado Pago Credentials Table - Client ID and Client Secret\nDESCRIPTION: Markdown table showing the description of Client ID and Client Secret credentials used in Mercado Pago OAuth integrations.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/credentials/credentials.es.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Tipo | Descripción |\n|---|---|\n| Client ID | Identificador único que representa tu integración. |\n| Client Secret | Clave privada utilizada en algunos complementos para generar pagos. Es extremadamente importante mantener esta información segura en tus servidores y no permitir el acceso a ningún usuario del sistema o intruso. |\n```\n\n----------------------------------------\n\nTITLE: Creating Payments with Saved Cards in Mercado Pago\nDESCRIPTION: Code to create a payment using a token generated from a saved card. This implementation sends the transaction amount, token, and customer ID to Mercado Pago's API to process the payment.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/receive-payments-with-saved-cards.es.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $customer_client = new CustomerClient();\n  $cards = $client->list(\"customer_id\");\n  \n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => 100.0,\n    \"token\" => $cards[0]-> token,\n    \"description\" => \"My product\",\n    \"installments\" => 1,\n    \"payment_method_id\" => \"visa\",\n    \"payer\" => [\n      \"type\" => \"customer\",\n      \"id\" => \"1234\"\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'access_token' });\nconst customerClient = new Customer(client);\n\ncustomerClient.listCards({ customerId: '<CUSTOMER_ID>' })\n\t.then((result) => {\n\n  const payment = new Payment(client);\n\n  const body = {\n    transaction_amount: 100,\n    token: result[0].token,\n    description: 'My product',\n    installments: 1,\n    payment_method_id: 'visa',\n    payer: {\n      type: 'customer',\n      id: '123'\n  }\n};\n\n  payment.create({ body: body }).then((result) => console.log(result));\n});\n```\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"ENV_ACCESS_TOKEN\");\n\nPaymentClient client = new PaymentClient();\n\nPaymentCreateRequest request = PaymentCreateRequest.builder()\n   .transactionAmount(new BigDecimal(\"100\"))\n   .installments(1)\n   .token(\"ff8080814c11e237014c1ff593b57b4d\")\n   .payer(PaymentPayerRequest.builder()\n       .type(\"customer\")\n       .id(\"247711297-jxOV430go9fx2e\")\n       .build())\n   .build();\n\nclient.create(request);\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\npayment_request = {\n  token: 'ff8080814c11e237014c1ff593b57b4d',\n  installments: 1,\n  transaction_amount: 100,\n  payer: {\n    type: 'customer',\n    id: '123456789-jxOV430go9fx2e'\n  }\n}\npayment_response = sdk.payment.create(payment_request)\npayment = payment_response[:response]\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing MercadoPago.Config;\nusing MercadoPago.Client.Payment;\nusing MercadoPago.Resource.Payment;\n\nMercadoPagoConfig.AccessToken = \"ENV_ACCESS_TOKEN\";\n\nvar request = new PaymentCreateRequest\n{\n    TransactionAmount = 100,\n    Token = \"ff8080814c11e237014c1ff593b57b4d\",\n    Installments = 1,\n    Payer = new PaymentPayerRequest\n    {\n        Type = \"customer\",\n        Email = \"test_payer_12345@testuser.com\",\n    },\n};\n\nvar client = new PaymentClient();\nPayment payment = await client.CreateAsync(request);\n```\n\nLANGUAGE: python\nCODE:\n```\nimport mercadopago\nsdk = mercadopago.SDK(\"ENV_ACCESS_TOKEN\")\n\npayment_data = {\n    \"transaction_amount\": 100,\n    \"token\": 'ff8080814c11e237014c1ff593b57b4d',\n    \"installments\": 1,\n    \"payer\": {\n        \"type\": \"customer\",\n        \"id\": \"123456789-jxOV430go9fx2e\"\n    }\n}\n\npayment_response = sdk.payment().create(payment_data)\npayment = payment_response[\"response\"]\n```\n\nLANGUAGE: go\nCODE:\n```\naccessToken := \"{{ACCESS_TOKEN}}\"\n\n\ncfg, err := config.New(accessToken)\nif err != nil {\n   fmt.Println(err)\n   return\n}\n\n\nclient := payment.NewClient(cfg)\n\n\nrequest := payment.Request{\n   TransactionAmount: 100,\n   Token: \"ff8080814c11e237014c1ff593b57b4d\",\n   Description: \"My product\",\n   Installments: 1,\n   PaymentMethodID:  \"master\",\n   Payer: &payment.PayerRequest{\n      Email: \"test_user_12345@testuser.com\",\n      Identification: &payment.IdentificationRequest{\n         Type: \"CPF\",\n         Number: \"01234567890\",\n      },\n   },\n}\n\n\nresource, err := client.Create(context.Background(), request)\nif err != nil {\n   fmt.Println(err)\n}\n\n\nfmt.Println(resource)\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer ENV_ACCESS_TOKEN' \\\n  'https://api.mercadopago.com/v1/payments' \\\n  -d '{\n  transaction_amount: 100,\n  token: \"ff8080814c11e237014c1ff593b57b4d\",\n  installments: 1,\n  payer: {\n      type: \"customer\",\n    id: \"123456789-jxOV430go9fx2e\"\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Get document types V1\nDESCRIPTION: Shows the HTML code for the select tag and the javascript code to get the document types when using SDK V1\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.en.md#2025-04-18_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<body\n   <select id=\"docType\" name=\"docType\" data-checkout=\"docType\" type=\"text\"></select>\n</body>\n\n```\n\n----------------------------------------\n\nTITLE: Updating Amount in Card Payment Brick using React\nDESCRIPTION: This React component shows how to update the payment amount in Card Payment Brick. It imports necessary components from '@mercadopago/sdk-react', uses the useCardPaymentBrick hook, and provides a button to update the amount to 95.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/card-payment-brick/update-data.es.md#2025-04-18_snippet_1\n\nLANGUAGE: react-jsx\nCODE:\n```\nimport { CardPayment, useCardPaymentBrick } from \"@mercadopago/sdk-react\";\nconst App = () => {\n  const { update } = useCardPaymentBrick();\n  return (\n    <>\n      <button type=\"button\" onClick={() => update({ amount: 95 })}>\n        Update amount\n      </button>\n      <CardPayment\n        initialization={{ amount: 100 }}\n        onSubmit={async (param) => {\n          console.log(param);\n        }}\n      />\n    </>\n  );\n};\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Handling Global Payment Success Event\nDESCRIPTION: This code snippet demonstrates how to listen for the `PointPayment.Success` global event to handle successful payment outcomes. It extracts payment details from the `event.detail` object, including payment type, reference, creation date, amount, device serial number, and metadata. Conditional logic is applied to retrieve installment and brand information when applicable.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-mini-apps/callback-handling.pt.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener(\"PointPayment.Success\", (event) => {\n\n   let data=event.detail;\n   // Obtendo erro de dados de pagamento a partir de dados de evento\n   let paymentType = data[\"payment_type\"];\n   let paymentReference = data[\"payment_reference\"];\n   let paymentCreationDate = data[\"payment_creation_date\"];\n   let paymentAmount = data[\"payment_amount\"];\n   let serialNumberDevice = data[\"payment_sn_device\"];\n\n   let metadata = data['metadata'];\n\n   if(paymentType == \"credit\" || paymentType == \"debit\" || paymentType == \"voucher\"){\n       let installments = data[\"payment_installments\"];\n       let brandName = data[\"payment_brand_name\"];\n   }\n\n   // Seu código aqui...\n});\n```\n\n----------------------------------------\n\nTITLE: Get Installment Options from Mercado Pago\nDESCRIPTION: The `getInstallments` function fetches available installment options based on the card BIN and transaction amount. It uses `mp.getInstallments` from the Mercado Pago SDK. The function updates the `installments` select element with the returned options, using `createSelectOptions` to populate the element.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/secure-fields-core.es.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Step #getInstallments\nconst getInstallments = async (bin) => {\n    try {\n      const installmentsElement = document.getElementById('form-checkout__installments')\n      const installments = await mp.getInstallments({\n        amount: document.getElementById('transactionAmount').value,\n        bin,\n        paymentTypeId: 'credit_card'\n      });\n      createSelectOptions(installmentsElement, installments[0].payer_costs, { label: 'recommended_message', value: 'installments' })\n    } catch (e) {\n      console.error('error getting installments: ', e)\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Standard Payment Processing Implementation\nDESCRIPTION: Implementation for processing regular card payments with Mercado Pago, including transaction amount, token, payment method details, and payer information. Uses idempotency key for safe retries.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/recurring-charges.en.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n  use MercadoPago\\Client\\Payment\\PaymentClient;\n  use MercadoPago\\MercadoPagoConfig;\n\n\n  MercadoPagoConfig::setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n  $client = new PaymentClient();\n  $request_options = new RequestOptions();\n  $request_options->setCustomHeaders([\"X-Idempotency-Key: <SOME_UNIQUE_VALUE>\"]);\n\n  $payment = $client->create([\n    \"transaction_amount\" => (float) $_POST['transactionAmount'],\n    \"token\" => $_POST['token'],\n    \"description\" => $_POST['description'],\n    \"installments\" => $_POST['installments'],\n    \"payment_method_id\" => $_POST['paymentMethodId'],\n    \"issuer_id\" => $_POST['issuer'],\n    \"payer\" => [\n      \"email\" => $_POST['email'],\n      \"identification\" => [\n        \"type\" => $_POST['identificationType'],\n        \"number\" => $_POST['number']\n      ]\n    ]\n  ], $request_options);\n  echo implode($payment);\n?>\n```\n\nLANGUAGE: node\nCODE:\n```\nimport { Payment, MercadoPagoConfig } from 'mercadopago';\n\nconst client = new MercadoPagoConfig({ accessToken: '<ACCESS_TOKEN>' });\n\npayment.create({\n    body: { \n        transaction_amount: req.transaction_amount,\n        token: req.token,\n        description: req.description,\n        installments: req.installments,\n        payment_method_id: req.paymentMethodId,\n        issuer_id: req.issuer,\n            payer: {\n            email: req.email,\n            identification: {\n        type: req.identificationType,\n        number: req.number\n    }}},\n    requestOptions: { idempotencyKey: '<SOME_UNIQUE_VALUE>' }\n})\n.then((result) => console.log(result))\n.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Tiendanube E-commerce Platform Integration\nDESCRIPTION: This snippet describes Tiendanube as an e-commerce platform that enables receiving payments via Mercado Pago. It highlights the platform's adaptability to different business types.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/nuvemshop/landing.es.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"content_section_with_media:\\n - title: Tiendanube\n - message: Es una plataforma de e-commerce que permite recibir pagos con Mercado Pago. Tiendanube se adapta a cada tipo de negocio de diferentes formas, permitiendo que la disposición de las tiendas sea única.\n - media_image: /nuvemshop/landing-1.png \"\n```\n\n----------------------------------------\n\nTITLE: Response for Updating Report Structure in JSON\nDESCRIPTION: This snippet shows the JSON response received after successfully updating a report structure. It includes details such as the structure ID, version, creation and update dates, timezone, name, file format specifications, and column definitions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/modifications.en.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": {{structure_id}},\n    \"version\": 1,\n    \"date_created\": \"2023-07-19T19:34:33Z\",\n    \"date_last_updated\": \"2023-09-13T17:54:38Z\",\n    \"display_timezone\": \"GMT-03\",\n    \"name\": \"Structure marketplace\",\n    \"file_format\": {\n        \"prefix\": \"marketplace-op\",\n        \"column_separator\": \";\",\n        \"decimal_separator\": \".\"\n    },\n    \"columns\": [\n        {\n            \"key\": \"COLLECTOR\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"COLLECTOR_NICKNAME\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"PAYMENT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"STATUS_DESCRIPTION\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"STATUS_DETAIL\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"PURCHASE_ORDER\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"PAYMENT_METHOD_TYPE\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"TRANSACTION_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"DATE_CREATED\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"DATE_APPROVED\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"MARKETPLACE_FEE_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"MERCADOPAGO_FEE_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"TOTAL_PAID_AMOUNT\",\n            \"alias\": \"\"\n        },\n        {\n            \"key\": \"NET_RECEIVED_AMOUNT\",\n            \"alias\": \"\"\n        }\n    ],\n    \"file_config\": null,\n    \"report_translation\": null,\n    \"include_withdraw\": null,\n    \"refund_detailed\": null,\n    \"show_fee_prevision\": null,\n    \"coupon_detailed\": null,\n    \"show_chargeback_cancel\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Data in Node.js using MercadoPago SDK\nDESCRIPTION: Example of updating customer information such as email, name, phone, identification, and address details using the MercadoPago Node.js SDK.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/modify-customer.en.md#2025-04-18_snippet_1\n\nLANGUAGE: node\nCODE:\n```\nconst client = new MercadoPagoConfig({ accessToken: 'YOUR_ACCESS_TOKEN' });\nconst customer = new Customer(client);\n\nconst body = {\n  email: \"my.user@example.com\"\n  first_name: \"john\",\n  last_name: \"wagner\",\n  phone: {\n    area_code: \"11\",\n    number: \"001234567\"\n  }\n  identification: {\n    type: \"CPF\",\n    number: \"12341234\"\n  },\n  default_address: \"Casa\",\n  address: {\n    zip_code: \"52\",\n    street_name: \"Av. das Nações Unidas\"\n    street_number: \"3033\"\n  }\n};\n\ncustomer.update({ customerId: '<CUSTOMER_ID>', body: body,\n}).then(console.log).catch(console.log);\n```\n\n----------------------------------------\n\nTITLE: Implementing ShareRDCPass Function for DTE Printing\nDESCRIPTION: Java method implementation for sharing DTE information with RDCPass application. Handles intent creation, package information setting, and payment result payload configuration.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/local-print-dte.en.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic void shareRDCPass(String total, String intent) { \n\ttry { \n\t\tIntent sharingIntent = new Intent(intent); \n\t\tsharingIntent.setClassName(\"redelcom.cl.rdcpass\", \"redelcom.cl.rdcpass.MainActivity\"); \n\t\tsharingIntent.putExtra(\"packageName\", getPackageName()); \n\t\tsharingIntent.putExtra(\"className\", getClass().toString().split(\" \")[1]);  \n\t\tsharingIntent.putExtra(\"payload\", \"RESULTADO_PAGO_REALIZADO\"); \n\t\tsharingIntent.putExtra(\"dte\", dte); \n\t\tstartActivity(sharingIntent); \n\t} catch (Exception e) { \n\t\te.printStackTrace(); \n\t} \n}\n```\n\n----------------------------------------\n\nTITLE: Test User Creation Response Format - Mercado Pago API\nDESCRIPTION: Example JSON response structure when creating a test user, containing user details like ID, nickname, password, email, and creation dates.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/snippets/test-integration/create-test-users-old.es.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 123456,\n    \"nickname\": \"TT123456\",\n    \"password\": \"qatest123456\",\n    \"site_status\": \"active\",\n    \"site_id\": \"[FAKER][GLOBALIZE][UPPER_SITE_ID]\",\n    \"description\": \"a description\",\n    \"email\": \"test_user_123456@testuser.com\",\n    \"date_created\": \"2021-11-04T12:02:35Z\",\n    \"date_last_updated\": \"2021-11-04T12:02:35Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MercadoPago SDK and Initializing with JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the loading and initialization of MercadoPago SDK using a public key. Importing the MercadoPago module and invoking the asynchronous load function are required before creating an instance with the public key.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/subscriptions/cardtoken.en.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loadMercadoPago } from \"@mercadopago/sdk-js\";\n\nawait loadMercadoPago();\nconst mp = new window.MercadoPago(\"YOUR_PUBLIC_KEY\");\n\n```\n\n----------------------------------------\n\nTITLE: Payment Response Example\nDESCRIPTION: Example of a payment response containing detailed information about the transaction, including payment status, payer details, transaction amounts, and fees.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/localization/crossborder-integration.en.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"acquirer_reconciliation\": [],\n  \"statement_descriptor\": \"MERCADOPAGO\",\n  \"captured\": true,\n  \"date_last_updated\": \"2018-04-17T09:16:40.000-04:00\",\n  \"merchant_account_id\": null,\n  \"payer_id\": 300444925,\n  \"issuer_id\": \"160\",\n  \"description\": \"Title of what you are paying for. It will be displayed in the payment process.\",\n  \"transaction_amount\": 100,\n  \"card\": {\n    \"id\": null,\n    \"first_six_digits\": \"494133\",\n    \"expiration_month\": 2,\n    \"cardholder\": {\n      \"identification\": {\n        \"number\": null,\n        \"type\": null\n      },\n      \"name\": \"APRO\"\n    },\n    \"date_last_updated\": \"2018-04-17T09:16:38.000-04:00\",\n    \"date_created\": \"2018-04-17T09:16:38.000-04:00\",\n    \"expiration_year\": 2021,\n    \"last_four_digits\": \"9283\"\n  },\n  \"transaction_details\": {\n    \"total_paid_amount\": 100,\n    \"acquirer_reference\": null,\n    \"payment_method_reference_id\": \"1234567\",\n    \"net_received_amount\": 90.96,\n    \"financial_institution\": null,\n    \"payable_deferral_period\": null,\n    \"installment_amount\": 100,\n    \"external_resource_url\": null,\n    \"overpaid_amount\": 0\n  },\n  \"client_id\": \"6122032597128314\",\n  \"coupon_amount\": 0,\n  \"metadata\": {},\n  \"money_release_schema\": null,\n  \"collector_id\": 307467332,\n  \"status\": \"approved\",\n  \"financing_type\": null,\n  \"processing_mode\": \"aggregator\",\n  \"status_detail\": \"accredited\",\n  \"transaction_id\": \"6608447860_776736357f767f777777\",\n  \"installments\": 1,\n  \"internal_metadata\": {\n    \"processed_by\": \"checkout-off-v1\"\n  },\n  \"refunds\": [],\n  \"payment_type_id\": \"debit_card\",\n  \"counter_currency\": {\n    \"amount\": 4.99,\n    \"currency_id\": \"USD\",\n    \"rate\": 18.22539135,\n    \"amount_refunded\": 0\n  },\n  \"profile_id\": \"bancomer\",\n  \"payer_tags\": [],\n  \"reserve_id\": null,\n  \"coupon_id\": null,\n  \"shipping_amount\": 0,\n  \"fee_details\": [\n    {\n      \"amount\": 9.04,\n      \"fee_payer\": \"collector\",\n      \"type\": \"mercadopago_fee\"\n    }\n  ],\n  \"acquirer\": null,\n  \"date_created\": \"2018-04-17T09:16:38.000-04:00\",\n  \"id\": 3637024689,\n  \"collector\": {\n    \"id\": 307467332,\n    \"first_name\": \"TEST CBT OFF Pruebas\",\n    \"phone\": {\n      \"extension\": null,\n      \"area_code\": \"11\",\n      \"number\": \"32808879\"\n    },\n    \"email\": \"test.cbt.off.merchantcbt@test.com\",\n    \"identification\": {\n      \"number\": \"25060337\",\n      \"type\": \"RFC\"\n    },\n    \"last_name\": \"TEST MPFRONT\"\n  },\n  \"date_of_expiration\": null,\n  \"money_release_days\": null,\n  \"order\": {\n    \"id\": \"710534062\",\n    \"type\": \"mercadopago\"\n  },\n  \"external_reference\": \"Reference_1234\",\n  \"available_actions\": [\n    \"refund\"\n  ],\n  \"application_id\": 6122032597128314,\n  \"marketplace\": \"NONE\",\n  \"merchant_number\": null,\n  \"call_for_authorize_id\": null,\n  \"risk_execution_id\": 14940341296,\n  \"api_version\": \"2\",\n  \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n  \"sponsor_id\": null,\n  \"deduction_schema\": null,\n  \"payment_method_id\": \"debvisa\",\n  \"additional_info\": {},\n  \"site_id\": \"MLM\",\n  \"binary_mode\": false,\n  \"operation_type\": \"regular_payment\",\n  \"differential_pricing_id\": null,\n  \"money_release_date\": \"2018-04-29T09:16:40.000-04:00\",\n  \"payer\": {\n    \"id\": \"300444925\",\n    \"first_name\": \"Test\",\n    \"phone\": {\n      \"extension\": null,\n      \"area_code\": \"01\",\n      \"number\": \"1111-1111\"\n    },\n    \"email\": \"test_user_33759716@testuser.com\",\n    \"identification\": {\n      \"number\": \"800825569\",\n      \"type\": \"RFC\"\n    },\n    \"last_name\": \"Test\",\n    \"entity_type\": null,\n    \"type\": \"registered\"\n  },\n  \"notification_url\": \"https://www.your-site.com/ipn\",\n  \"transaction_amount_refunded\": 0,\n  \"collector_tags\": [],\n  \"authorization_code\": \"1234567\",\n  \"date_approved\": \"2018-04-17T09:16:40.000-04:00\",\n  \"live_mode\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Partially Processed Transaction Status\nDESCRIPTION: Transaction scenario where processing is not yet complete. The status will be 'partially_processed'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-test.pt.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"partially_processed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Issuers (V2)\nDESCRIPTION: JavaScript code snippet demonstrating how to retrieve issuers using Mercado Pago SDK V2 using async/await. The `getIssuers()` method is called with an object containing the paymentMethodId and bin.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/howto-migrate.pt.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getIssuers(paymentMethodId, bin) {\n    const issuears = await mp.getIssuers({paymentMethodId, bin });\n    ...\n};\n```\n\n----------------------------------------\n\nTITLE: MercadoPago Banner Implementation - 735x40px\nDESCRIPTION: HTML code for displaying a 735x40 pixel MercadoPago payment methods banner. The image shows 12 interest-free installment options.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/doze.en.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/PSJ/735x40_banner_psj_12x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"735\" height=\"40\"/>\n```\n\n----------------------------------------\n\nTITLE: Handling Scanner Response in Point Smart SDK (Java)\nDESCRIPTION: This code illustrates how to handle the scanner response in the onActivityResult method using the handleScannerResponse function in Java. It processes the result, checks for success or error, and provides appropriate handling for each case.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/camscanner-legacy.pt.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void onActivityResult(final int requestCode, final int resultCode, final Intent data) {\n super.onActivityResult(requestCode, resultCode, data);\n\n final CameraScanner cameraScanner = MPManager.INSTANCE.getCameraScanner();\n final Function1<MPResponse<CameraScannerResponse>, Unit> callback = (final MPResponse<CameraScannerResponse> response) -> {\n\n   if (response.getStatus() == ResponseStatus.SUCCESS) {\n     final CameraScannerResponse cameraScannerResponse = response.getData();\n     // Gerenciar resposta bem-sucedida\n     final String result = response.getData().getMessage();\n     // ... Fazer algo com a resposta\n   } else {\n     // Gerenciar o erro na resposta\n     final Exception errorMessage = response.getError();\n     // ... Fazer algo com o erro\n   }\n   return Unit.INSTANCE;\n };\n\n cameraScanner.handleScannerResponse(this, resultCode, data, callback);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MercadoPago.js SDK via npm\nDESCRIPTION: This bash command shows how to install the Mercado Pago JavaScript SDK using npm, which is required for the integration of Mercado Pago in a web application.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/integrate-stp.pt.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mercadopago/sdk-js\n\n```\n\n----------------------------------------\n\nTITLE: Capturing Partial Payment in Ruby\nDESCRIPTION: Performs partial payment capture using MercadoPago Ruby SDK. Initializes SDK with access token and updates payment with new transaction amount.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/capture-authorized-payment.pt.md#2025-04-18_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\nrequest = {\n  transaction_amount: 75,\n  capture: true\n}\n\npayment_response = sdk.payment.update(payment_id, request)\npayment = payment_response[:response]\n```\n\n----------------------------------------\n\nTITLE: Compiling Adobe Commerce Module Files\nDESCRIPTION: Command to compile the module files in Adobe Commerce system.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/adobe-commerce/upgrade-to-the-new-version.en.md#2025-04-18_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nbin/magento setup:di:compile\n```\n\n----------------------------------------\n\nTITLE: Installing Mercado Pago SDK for Frontend Integration\nDESCRIPTION: This snippet includes both HTML and bash examples to include the Mercado Pago SDK in a project. For HTML, the SDK is added via a CDN, and for React, it is installed using npm. These steps are prerequisites for integrating Mercado Pago's checkout button.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-pro/integrate-checkout.en.md#2025-04-18_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://sdk.mercadopago.com/js/v2\"></script>\n```\n\n----------------------------------------\n\nTITLE: Available Payments Configuration (MLA)\nDESCRIPTION: This snippet specifies the available payment methods for Argentina (MLA) when using the Mercado Pago integration with Tiendanube. It includes credit cards, debit cards, Mercado Pago account payments, cash payments, ATM and installments without a card.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/nuvemshop/landing.es.md#2025-04-18_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n\"available_payments: credit, debit, mercadopago, efectivo, atm, cuotas_sin_tarjeta\"\n```\n\n----------------------------------------\n\nTITLE: Financial Statement Response Structure in JSON\nDESCRIPTION: Demonstrates the complete response structure for a financial statement API call. Includes statement ID, date ranges, report details, available download formats, notification settings and status information. Contains placeholders for dynamic values like statement_id and notifier IDs.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/queries-and-validations.en.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": {{statement_id}},\n    \"date_start\": \"2023-07-18T00:00:00Z\",\n    \"date_end\": \"2023-07-20T19:00:00Z\",\n    \"date_created\": \"2023-07-21T17:25:25.764122Z\",\n    \"created_by\": \"automatic\",\n    \"description\": \"statement de pruebas\",\n    \"report\": {\n        \"id\": \"marketplace_sellers_sales\",\n        \"name\": \"Marketplace OP\",\n        \"topic\": \"financial_statements\",\n        \"version\": \"1\"\n    },\n    \"files\": [\n        {\n            \"type\": \"json\",\n            \"url\": \"https://api.mercadopago.com/v1/reporting/reports/marketplace_sellers_sales/statements/{{statement_id}}/download?format=json\"\n        },\n        {\n            \"type\": \"csv\",\n            \"url\": \"https://api.mercadopago.com/v1/reporting/reports/marketplace_sellers_sales/statements/{{statement_id}}/download?format=csv\"\n        }\n    ],\n    \"event\": null,\n    \"origin\": {\n        \"type\": \"date_range\",\n        \"data\": {\n            \"date_end\": \"2023-07-20T19:00:00Z\",\n            \"date_start\": \"2023-07-18T00:00:00Z\"\n        }\n    },\n    \"report_extra_data\": {},\n    \"structure\": {\n        \"id\": {{structure_id}},\n        \"version\": 0\n    },\n    \"notifiers\": [\n        {\n            \"id\": {{notifier_id_1}},\n            \"version\": 0,\n            \"type\": \"email\",\n            \"data\": {}\n        },\n        {\n            \"id\": {{notifier_id_n}},\n            \"version\": 0,\n            \"type\": \"ftp\",\n            \"data\": {}\n        }\n    ],\n    \"status\": \"available\",\n    \"reason_code\": {\n        \"code\": \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reverted Transaction Status\nDESCRIPTION: Transaction scenario where the transaction is fully refunded. The status will be 'reverted' with a status_detail of 'refunded'.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/money-out/integration-test.pt.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"reverted\",\n  \"status_detail\": \"refunded\"\n}\n```\n\n----------------------------------------\n\nTITLE: Obteniendo información del dispositivo en Objective-C\nDESCRIPTION: Métodos disponibles en Objective-C para obtener la información del dispositivo en diferentes formatos, como JSON, String o Dictionary.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/improve-approval-recommendations-choapi.es.md#2025-04-18_snippet_11\n\nLANGUAGE: objective-c\nCODE:\n```\n[[[MercadoPagoDevicesSDK] shared] getInfoAsJson] // devuelve un objeto Data de la librería JSON\n[[[MercadoPagoDevicesSDK] shared] getInfoAsJsonString] // devuelve el json en formato de String\n[[[MercadoPagoDevicesSDK] shared] getInfoAsDictionary] // devuelve un Dictionary<String,Any>\n```\n\n----------------------------------------\n\nTITLE: Reserving Payment Values with Mercado Pago in Ruby\nDESCRIPTION: Creates a payment with 'capture=false' to reserve the value on the card without completing the transaction. This Ruby implementation initializes the Mercado Pago SDK and configures the payment request with the capture parameter set to false.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/make-value-reserve.en.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'mercadopago'\n\nsdk = Mercadopago::SDK.new('ENV_ACCESS_TOKEN')\n\npayment_request = {\ntransaction_amount: 100,\ntoken: 'ff8080814c11e237014c1ff593b57b4d',\ndescription: 'Product title',\ninstallments: 1,\npayment_method_id: 'visa',\npayer: {\nemail: 'test_user_19653727@testuser.com'\n},\ncapture: false\n}\n\npayment_response = sdk.payment.create(payment_request)\npayment = payment[:response]\n```\n\n----------------------------------------\n\nTITLE: Date-Based Search - PHP Implementation\nDESCRIPTION: PHP implementation for searching payments within a specific date range using relative time expressions.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/retrieving-payments.en.md#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\trequire ('mercadopago.php');\n\n\t$mp = new MP (\"ENV_ACCESS_TOKEN\");\n\n\t$payment = $mp->get(\n\t\t\"/v1/payments/search\",\n\t\tarray(\n\t\t\t\"begin_date\" => \"NOW-2HOURS\",\n\t\t\t\"end_date\" => \"NOW\",\n\t\t\t\"range\" => \"date_last_updated\",\n\t\t\t\"sort\" => \"date_last_updated\",\n\t\t\t\"criteria\" => \"desc\"\n\t\t)\n\t);\n?>\n```\n\n----------------------------------------\n\nTITLE: Response for Updating Email Notifier in JSON\nDESCRIPTION: This snippet shows the JSON response received after successfully updating an email notifier. It includes details such as the notifier ID, type, data (recipients), description, version, status, and PII data flag.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/modifications.en.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": {{notifier_id}},\n    \"type\": \"email\",\n    \"data\": {\n        \"recipients\": [\n            \"test@mercadolibre.com\"\n        ]\n    },\n    \"description\": null,\n    \"version\": 1,\n    \"status\": \"ACTIVE\",\n    \"is_pii_data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Payment Status Fields in Mercado Pago API\nDESCRIPTION: Fields returned by the Get Payment API endpoint that indicate payment status. The status field shows if payment was approved, while status_detail provides specific rejection reasons.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/how-tos/plugins/all/improve-approval.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"rejected\",\n  \"status_detail\": \"cc_rejected_bad_filled_date\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Statements for Marketplace Sellers Sales Reports using cURL\nDESCRIPTION: This cURL command retrieves all statements for marketplace sellers sales reports. It requires an authorization token and content-type in the request headers.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/reports/marketplace-sales/queries-and-validations.en.md#2025-04-18_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request GET 'https://api.mercadopago.com/v1/reports/marketplace_sellers_sales/statements' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{TOKEN}}'\n```\n\n----------------------------------------\n\nTITLE: Card Payment Brick with saved cards\nDESCRIPTION: This JavaScript code initializes the MercadoPago SDK and then renders the Card Payment Brick, configured to receive payments from saved cards. It provides the customer_id and card_ids of the saved cards. It configures the Brick with appropriate settings and callbacks (onReady, onSubmit, onError) to handle different stages of the payment process.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/web-tokenize-checkout-v2-clientside.es.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"<script>\\n   const mp = new MercadoPago('YOUR_PUBLIC_KEY');\\nconst bricksBuilder = mp.bricks();\\nconst renderCardPaymentBrick = async (bricksBuilder) => {\\n   const settings = {\\n       initialization: {\\n           amount: 100, //valor do processamento a ser realizado\\n           payer: {\\n           customer_id: \\\"209277402-FqRqgEc3XItrxs\\\",\\n\\tcard_ids: [“1518023392627”,”1518023332143”]\\n       },\\n       },\\n       style: {\\n           theme: 'default' // | 'dark' | 'bootstrap' | 'flat'\\n       },\\n       callbacks: {\\n           onReady: () => {\\n           // callback chamado quando o Brick estiver pronto\\n           },\\n           onSubmit: ({paymentType, formData}) => {\\n           // callback chamado o usuário clicar no botão de submissão dos dados\\n           // ejemplo de envío de los datos recolectados por el Brick a su servidor\\n           return new Promise((resolve, reject) => {\\n               fetch(\\\"/processar-pago\\\", {\\n                   method: \\\"POST\\\",\\n                   headers: {\\n                       \\\"Content-Type\\\": \\\"application/json\\\",\\n                   },\\n                   body: JSON.stringify(formData)\\n               })\\n               .then((response) => {\\n                   // receber o resultado do pagamento\\n                   resolve();\\n               })\\n               .catch((error) => {\\n                   // lidar com a resposta de erro ao tentar criar o pagamento\\n                   reject();\\n               })\\n               });\\n           },\\n           onError: (error) => {\\n           // callback chamado para todos os casos de erro do Brick\\n           },\\n       },\\n   };\\n   window.cardPaymentBrickController = await bricksBuilder.create('cardPayment', 'cardPaymentBrick_container', settings);\\n};\\nrenderCardPaymentBrick(bricksBuilder);\\n</script>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Item Details for MercadoPago Payment\nDESCRIPTION: Examples showing how to structure item/product information including ID, title, quantity, currency and price. These details are required when creating a payment preference in MercadoPago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/sales-processing/payment-rejections.es.md#2025-04-18_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n  $item = new MercadoPago\\Item();\n  $item->id = \"1234\";\n  $item->title = \"Heavy Duty Plastic Table\";\n  $item->quantity = 7;\n  $item->currency_id = \"[FAKER][CURRENCY][ACRONYM]\";\n  $item->unit_price = 75.56;\n  // ...\n?>\n```\n\nLANGUAGE: Node.js\nCODE:\n```\n// ...\nitems: [\n    {\n      id: '1234',\n      title: 'Lightweight Paper Table',\n      quantity: 3,\n      currency_id: '[FAKER][CURRENCY][ACRONYM]',\n      unit_price: 55.41\n    }\n  ]// ...\n```\n\nLANGUAGE: Python\nCODE:\n```\n# ...\npreference_data = {\n    \"items\": [\n        {\n            \"id\": '1234',\n            \"title\": 'Lightweight Paper Table',\n            \"quantity\": 3,\n            \"currency_id\": '[FAKER][CURRENCY][ACRONYM]',\n            \"unit_price\": 55.41\n        }\n    ]\n    # ...\n}\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configurando URLs de Redirección en Status Screen Brick\nDESCRIPTION: Configuración de parámetros para el Status Screen Brick que incluye URLs de redirección para casos de éxito y error. Permite redirigir al usuario a diferentes páginas dentro del mismo dominio después de intentar un pago.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/status-screen-brick/configure-redirect-urls.es.md#2025-04-18_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nconst settings = {\n   initialization: {\n       paymentId: 100, // id de pago generado por Mercado Pago\n   },\n   callbacks: {\n       onReady: () => {\n           // callback llamado cuando Brick está listo\n       },\n       onError: (error) => {\n           // callback llamado para todos los casos de error de Brick\n       },\n   },\n   customization: {\n       backUrls: {\n           'error': '<http://<seu dominio>/error>',\n           'return': '<http://<seu dominio>/homepage>'\n       }\n   }\n};\n```\n\nLANGUAGE: react-jsx\nCODE:\n```\nconst customization = {\n backUrls: {\n   error: '<http://<your_domain>/error>',\n   return: '<http://<your_domain>/homepage>',\n },\n};\n```\n\n----------------------------------------\n\nTITLE: Searching Payment Preferences with Mercado Pago SDK in Java\nDESCRIPTION: This snippet illustrates how to search for payment preferences using specific filters with the Mercado Pago SDK. It initializes a PreferenceClient, sets up the filter criteria in a MPSearchRequest, and performs the search. Required dependencies include the SDK’s client classes.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/sdks-v2/official/java/preferences.pt.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nPreferenceClient client = new PreferenceClient();\n\nMap<String, Object> filters = new HashMap<>();\nfilters.put(\"sponsor_id\", \"undefined\");\nfilters.put(\"external_reference\", \"undefined\");\nfilters.put(\"site_id\", \"undefined\");\nfilters.put(\"marketplace\", \"undefined\");\n\nMPSearchRequest searchRequest =\n   MPSearchRequest.builder().limit(0).offset(0).filters(filters).build();\n\nclient.search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment Flow with Installments\nDESCRIPTION: Implementation for Argentina, Brazil, and Mexico markets including installments option in payment flow initialization.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/payment-flow-callback.en.md#2025-04-18_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval paymentFlow = MPManager.paymentFlow\n\nval paymentFlowRequestData = PaymentFlowRequestData(\n\n   amount = 10.0,\n\n   description = \"test description\",\n\n   paymentMethod = PaymentMethod.CREDIT_CARD.name,\n\n   installments = 6, // optional field if it processes the payment in installments\n\n   printOnTerminal = false // optional field if it processes the payment without printing at the terminal\n\n)\n\npaymentFlow.launchPaymentFlow(\n\n   paymentFlowRequestData = paymentFlowRequestData\n\n) { response ->\n\n   response.doIfSuccess { result ->\n\n       // success handling using a message\n\n   }.doIfError { error ->\n\n       // error handling\n\n   }\n\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal PaymentFlow paymentFlow = MPManager.INSTANCE.getPaymentFlow();\n\nfinal String amount = \"2.0\";\n\nfinal String description = \"Payment description\";\n\nfinal PaymentFlowData paymentFlowData = new PaymentFlowData(\n\n   amount,\n\n   description,\n\n   PaymentMethod.CREDIT_CARD.name(),\n\n   6, // optional field if launching the payment in installments. \n\n   false // optional field if launching the payment without printing in terminal\n\n);\n\n\n\nfinal Function1<MPResponse<PaymentResponse>, Unit> callback = (final MPResponse<PaymentResponse> response) -> {\n\n if (response.getStatus() == ResponseStatus.SUCCESS) {\n\n   // Success handling using a message\n\n } else {\n\n   // Error handling \n\n }\n\n return Unit.INSTANCE;\n\n};\n\npaymentFlow.launchPaymentFlow(paymentFlowData, callback);\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Telecommunications Companies Query\nDESCRIPTION: This JSON structure represents a sample response from a telecommunications companies query API. It contains information about available services, payment options, and recharge details for different telecom products.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/annex-response-examples.en.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \n \"estatus\":\"OK\", \n \"codaut\":\"00112233445566778899aabbccddeeff\",  \"id_tx\":\"\", \n \"saldo\":-1, \n \"datos\":[ \n { \n \"secuencia\":1, \n \"categoria_id\":\"RCEL\", \n  \n         \"montos\":\"2000&3600&5000&10000&15000& \n20000&25000\", \n \"monto_min\":\"750\", \n \"tipo_dato\":\"CEL\", \n \"usa_reimpresion\":\"1\", \n \"id\":\"EJ1FibraOptica\", \n \"largo_telefono\":9, \n \"operador\":\"EJEMPLO1\", \n \"nombre\":\"Ejemplo 1\",  \n \"monto_max\":\"25000\" \n }, \n { \n \"secuencia\":2, \n \"categoria_id\":\"RBA\", \n \"montos\":\"\", \n \"monto_min\":\"500\", \n \"tipo_dato\":\"RUT\", \n \"usa_reimpresion\":\"1\", \n \"id\":\"Ejem2Movil\", \n \"largo_telefono\":10, \n \"operador\":\"EJEMPLO2\", \n \"nombre\":\"Ejemplo 2\", \n \"monto_max\":\"45000\" \n }, \n... \n ], \n \"mensaje\":\"Carga de recargasCompany exitosa\" } \n\n```\n\n----------------------------------------\n\nTITLE: Implementing MercadoPago Banner - 120x240px\nDESCRIPTION: HTML code to embed a 120x240 pixel MercadoPago payment methods banner showing 9 interest-free installments option.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/additional-content/resources/banners/nove.en.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://imgmp.mlstatic.com/org-img/MLB/MP/BANNERS/PSJ/120x240_banner_psj_9x.jpg\" \nalt=\"Mercado Pago - Meios de pagamento\" title=\"Mercado Pago - Meios de pagamento\" \nwidth=\"120\" height=\"240\"/>\n```\n\n----------------------------------------\n\nTITLE: Network Transaction ID Response Example\nDESCRIPTION: Example response showing the network transaction ID in the expanded parameter\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/automatic-payments/network-transaction-id.en.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"expanded\": {\n   \"gateway\": {\n \t  \"reference\": {\n \t\t \"network_transaction_id\": \"n7w-c0d3-t7d\"\n \t    }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Feature Disabled Responses in JSON\nDESCRIPTION: This JSON message template is used when a feature, specifically Zero Dollar Auth, is temporarily disabled. The response communicates the status with a 'message' indicating temporary unavailability.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/zero-dollar-auth/api-responses.en.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"This feature is temporarily off\"\n}\n```\n\n----------------------------------------\n\nTITLE: Wallet Brick Sample Project\nDESCRIPTION: GitHub repository showcasing the implementation of Mercado Pago Wallet Brick for payment and brand integration\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/github-project.en.md#2025-04-18_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n* [Functional project - Wallet Brick](https://github.com/mercadopago/wallet-brand-bricks-sample)\n```\n\n----------------------------------------\n\nTITLE: Creating Hidden Input for Device ID\nDESCRIPTION: Add a hidden HTML input element with a specific ID to automatically capture and store the Device ID value\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/wallet-connect/device-id.en.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"hidden\" id=\"deviceId\">\n```\n\n----------------------------------------\n\nTITLE: Processing PSE Payment with Java SDK\nDESCRIPTION: Java implementation for PSE payment processing using Mercado Pago's SDK. This code demonstrates how to build a payment request using builder pattern with all required PSE fields including transaction details, financial institution, payer information and notification URLs.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-bricks/payment-brick/payment-submission-pse.pt.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMercadoPagoConfig.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n        Map<String, String> customHeaders = Map.of(\"X-Idempotency-Key\", \"...\");\n        MPRequestOptions requestOptions = MPRequestOptions.builder().customHeaders(customHeaders).build();\n\n        PaymentClient client = new PaymentClient();\n\n        IdentificationRequest identification = IdentificationRequest.builder()\n                .type(request.getIdentificationType())\n                .number(request.getIdentificationNumber())\n                .build();\n\n        PaymentPayerAddressRequest address = PaymentPayerAddressRequest.builder()\n                .zipCode(request.getZipCode())\n                .streetName(request.getStreetName())\n                .streetNumber(request.getStretNumber())\n                .neighborhood(request.getNeighborhood())\n                .city(request.getCity())\n                .federalUnit(request.getFederalUnit())\n                .build();\n\n        PaymentPayerPhoneRequest phone = PaymentPayerPhoneRequest.builder()\n                .areaCode(request.getPhoneAreaCode())\n                .number(request.getPhoneNumber())\n                .build();\n\n        PaymentPayerRequest payer = PaymentPayerRequest.builder()\n                .email(request.getEmail())\n                .entityType(\"individual\")\n                .firstName(\"firstName\")\n                .lastName(\"lastName\")\n                .identification(identification)\n                .address(address)\n                .phone(phone)\n                .build();\n\n        PaymentAdditionalInfoRequest additionalInfo = PaymentAdditionalInfoRequest.builder()\n                .ipAddress(\"127.0.0.1\")\n                .build();\n\n        PaymentTransactionDetailsRequest transactionDetails = PaymentTransactionDetailsRequest.builder()\n                .financialInstitution(request.getFinancialInstitution())\n                .build();\n\n        PaymentCreateRequest paymentCreateRequest = PaymentCreateRequest.builder()\n                .transactionAmount(new BigDecimal(5000))\n                .description(\"Product description\")\n                .paymentMethodId(\"pse\")\n                .additionalInfo(additionalInfo)\n                .transactionDetails(transactionDetails)\n                .callbackUrl(\"https://your-site.com\")\n                .notificationUrl(\"https://your-site.com\")\n                .payer(payer)\n                .build();\n\n        client.create(paymentCreateRequest);\n```\n\n----------------------------------------\n\nTITLE: Payment Response Structure\nDESCRIPTION: Example response object returned after successful payment creation.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/money-transfer.en.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 4637181430,\n    \"date_created\": \"2018-04-17T09:26:39.000-04:00\",\n    \"date_approved\": \"2018-04-17T09:26:40.000-04:00\",\n    \"date_last_updated\": \"2018-04-17T09:26:40.000-04:00\",\n    \"date_of_expiration\": null,\n    \"money_release_date\": \"2018-04-29T09:26:40.000-04:00\",\n    \"operation_type\": \"money_transfer\",\n    \"issuer_id\": null,\n    \"payment_method_id\": \"account_money\",\n    \"payment_type_id\": \"account_money\",\n    \"status\": \"approved\",\n    \"status_detail\": \"accredited\",\n    \"currency_id\": \"[FAKER][CURRENCY][ACRONYM]\",\n    \"description\": \"Title of what you are paying for\",\n    \"live_mode\": true,\n    \"sponsor_id\": null,\n    \"authorization_code\": \"1234567\",\n    \"money_release_schema\": null,\n    \"collector_id\": 307467332,\n    \"payer\": { \n\t    \"email\": \"test_user_77371011@testuser.com\",\n\t    \"entity_type\": null,\n\t    \"first_name\": \"Test\",\n\t    \"id\": \"399605060\",\n\t    \"identification\": { \n\t\t    \"number\": \"32659430\",\n\t\t    \"type\": \"DNI\" \n\t     },\n\t    \"last_name\": \"Test\",\n\t    \"operator_id\": null,\n\t    \"phone\": { \n\t\t    \"area_code\": \"01\",\n\t\t    \"extension\": null,\n\t\t    \"number\": \"1111-1111\" \n\t    },\n\t    \"type\": \"guest\" \n\t},\n    \"additional_info\": {\n    },\n    \"order\": {},\n    \"external_reference\": \"Reference_1234\",\n    \"transaction_amount\": 100,\n    \"transaction_amount_refunded\": 0,\n    \"coupon_amount\": 0,\n    \"differential_pricing_id\": null,\n    \"deduction_schema\": null,\n    \"transaction_details\": {\n        \"net_received_amount\": 90.96,\n        \"total_paid_amount\": 100,\n        \"overpaid_amount\": 0,\n        \"external_resource_url\": null,\n        \"installment_amount\": 100,\n        \"financial_institution\": null,\n        \"payment_method_reference_id\": \"null\",\n        \"payable_deferral_period\": null,\n        \"acquirer_reference\": null\n    },\n    \"fee_details\": [\n        {\n            \"type\": \"mercadopago_fee\",\n            \"amount\": 9.04,\n            \"fee_payer\": \"collector\"\n        }\n    ],\n    \"captured\": true,\n    \"binary_mode\": false,\n    \"call_for_authorize_id\": null,\n    \"statement_descriptor\": \"MERCADOPAGO\",\n    \"installments\": 1,\n    \"card\": {\n    },\n    \"notification_url\": \"https://www.your-site.com/webhooks\",\n    \"refunds\": [],\n    \"processing_mode\": \"aggregator\",\n    \"merchant_account_id\": null,\n    \"acquirer\": null,\n    \"merchant_number\": null,\n    \"acquirer_reconciliation\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Tags for Document Printing\nDESCRIPTION: This JSON snippet outlines the structure and usage of custom tags for formatting a printed document via a POST request. It details how to specify the 'subtype' as 'custom' and includes formatted text with various tags for style, such as bold, large, and small text. The required fields include the 'type', 'config', and 'content', which contains the tagged text for the print output. The input is a structured JSON, and the output is a formatted print document.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/migrate-via-api.en.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"print\",\n  \"config\": {\n    \"point\": {\n      \"terminal_id\": \"{{device.id}}\",\n      \"subtype\": \"custom\"\n    }\n  },\n  \"external_reference\": \"8a42e06e45d5\",\n  \"content\": \"{br}--------------------------------{br}{center}{w} DELIVERY RECEIPT{/w}{br}{br}{s} Order No:12345{/s}{br}{s} Store: Test Store{/s}{br}--------------------------------{br}{s}***DISPATCHED ITEM(S)***{/s}{br}{s}SKU / ITEM                       QUANTITY   {/s}{br}{s}----------------------------------------------{/s}{br}{s}4065432630504 / FOOTBALL WUCL LGE EHV240424   1{br}{s}DELIVER ON: 06/06/2024{/s}{br}{s}ADDRESS: METROPOLITANA  {/s}{br}{s}RECEIVER: John{/s}{br}{s}delivery to client in the morning{/s}{br}--------------------------------{br}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Barcode Scanner in Point Smart SDK (Kotlin/Java)\nDESCRIPTION: This snippet demonstrates how to initialize the barcode scanner using the CameraScanner class from the MPManager. It uses the legacy initBarcodeScanner method, which triggers the camera through startActivityForResult.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/mp-point-main-apps/camscanner-legacy.pt.md#2025-04-18_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval cameraScanner = MPManager.cameraScanner\ncameraScanner.initBarcodeScanner(this@YourActivity)\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal CameraScanner cameraScanner = MPManager.INSTANCE.getCameraScanner();\ncameraScanner.initBarcodeScanner(this);\n```\n\n----------------------------------------\n\nTITLE: Listing Connected ADB Devices\nDESCRIPTION: Command to list all Android devices connected to the computer via ADB.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/redelcom/how-to-install-android-macos-windows.en.md#2025-04-18_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nadb devices\n```\n\n----------------------------------------\n\nTITLE: Generating Yape Token via API with cURL\nDESCRIPTION: cURL request example for generating a Yape token through API, requiring phone number, OTP, and requestId parameters.\nSOURCE: https://github.com/mercadopago/devsite-docs.git/blob/development/guides/checkout-api-v2/yape.en.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'https://api.mercadopago.com/platforms/pci/yape/v1/payment?public_key=<PUBLIC_KEY>' \\\n--header 'Content-Type: application/json' \\\n--data '{\n   \"phoneNumber\": \"123214234342\",\n   \"otp\": \"123344\",\n   \"requestId\": \"3127367123234234\"\n}\n```"
  }
]