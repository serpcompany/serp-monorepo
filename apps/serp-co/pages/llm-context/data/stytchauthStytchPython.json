[
  {
    "owner": "stytchauth",
    "repo": "stytch-python",
    "content": "TITLE: Initializing the Stytch B2C Client\nDESCRIPTION: This code initializes the Stytch B2C client with your project ID and secret.  Replace the placeholder values with your actual Stytch API credentials, which can be found in the Stytch Dashboard.\nSOURCE: https://github.com/stytchauth/stytch-python/blob/main/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport stytch\n\nclient = stytch.Client(\n    project_id=\"project-live-c60c0abe-c25a-4472-a9ed-320c6667d317\",\n    secret=\"secret-live-80JASucyk7z_G8Z-7dVwZVGXL5NT_qGAQ2I=\",\n)\n```\n\n----------------------------------------\n\nTITLE: Installing the Stytch Python Library\nDESCRIPTION: This command installs the Stytch Python library using pip, the Python package installer. This is a necessary first step to using the library in your Python projects.\nSOURCE: https://github.com/stytchauth/stytch-python/blob/main/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install stytch\n```\n\n----------------------------------------\n\nTITLE: Sending a Magic Link by Email (B2C)\nDESCRIPTION: This code snippet demonstrates how to send a magic link by email using the Stytch Python library. It uses the `login_or_create` method to either log in an existing user or create a new user.  The `email`, `login_magic_link_url`, and `signup_magic_link_url` parameters are required. The response is a pydantic object.\nSOURCE: https://github.com/stytchauth/stytch-python/blob/main/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlogin_or_create_resp = client.magic_links.email.login_or_create(\n    email=\"sandbox@stytch.com\",\n    login_magic_link_url=\"https://example.com/authenticate\",\n    signup_magic_link_url=\"https://example.com/authenticate\",\n)\n# Responses are fully-typed `pydantic` objects\nprint(login_or_create_resp)\n```\n\n----------------------------------------\n\nTITLE: Authenticating a Magic Link Token (B2C)\nDESCRIPTION: This snippet shows how to authenticate a magic link token received from the user. It uses the `authenticate` method, passing the token as a parameter. The response contains user information and session details.\nSOURCE: https://github.com/stytchauth/stytch-python/blob/main/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nauth_resp = client.magic_links.authenticate(\n    token=\"DOYoip3rvIMMW5lgItikFK-Ak1CfMsgjuiCyI7uuU94=\",\n)\nprint(auth_resp)\n```\n\n----------------------------------------\n\nTITLE: Handling Stytch API Errors\nDESCRIPTION: This code demonstrates how to handle errors returned by the Stytch API. It uses a `try...except` block to catch `StytchError` exceptions. The error details can be accessed through the `.details` property of the `StytchError` object, allowing for specific error handling based on the `error_type`.\nSOURCE: https://github.com/stytchauth/stytch-python/blob/main/README.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom stytch.core.response_base import StytchError\n\ntry:\n    auth_resp = await client.magic_links.authenticate_async(token=\"token\")\nexcept StytchError as error:\n    # Handle Stytch errors here\n    if error.details.error_type == \"invalid_token\":\n        print(\"Whoops! Try again?\")\nexcept Exception as error:\n    # Handle other errors here\n    pass\n```\n\n----------------------------------------\n\nTITLE: Define Python Dependencies\nDESCRIPTION: This snippet defines the Python dependencies for the project, specifying the required packages and their version constraints. It ensures that the necessary libraries are installed with compatible versions to avoid conflicts and ensure proper functionality.\nSOURCE: https://github.com/stytchauth/stytch-python/blob/main/requirements.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\naiohttp~=3.8\nrequests~=2.7\npydantic~=2.0\npyjwt[crypto]~=2.4\n```\n\n----------------------------------------\n\nTITLE: Sending a Magic Link Asynchronously (B2C)\nDESCRIPTION: This demonstrates how to send and authenticate a magic link asynchronously using the `_async` versions of the methods.  This requires an `async` context and awaits the result of the asynchronous calls.\nSOURCE: https://github.com/stytchauth/stytch-python/blob/main/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nlogin_or_create_resp = await client.magic_links.email.login_or_create_async(\n    email=\"sandbox@stytch.com\",\n    login_magic_link_url=\"https://example.com/authenticate\",\n    signup_magic_link_url=\"https://example.com/authenticate\",\n)\nprint(login_or_create_resp)\n\nauth_resp = await client.magic_links.authenticate(\n    token=\"DOYoip3rvIMMW5lgItikFK-Ak1CfMsgjuiCyI7uuU94=\",\n)\nprint(resp)\n```\n\n----------------------------------------\n\nTITLE: Logging In/Signing Up a User via Magic Link (B2B)\nDESCRIPTION: This snippet demonstrates how to log in or sign up a user via a magic link in a B2B context. It uses the `magic_links.email.login_or_signup` method, requiring parameters like `organization_id`, `email_address`, `login_redirect_url`, and `signup_redirect_url`.\nSOURCE: https://github.com/stytchauth/stytch-python/blob/main/README.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.magic_links.email.login_or_signup(\n    organization_id=\"ORGANIZATION_ID_FROM_RESPONSE\",\n    email_address=\"admin@acme.co\",\n    login_redirect_url=\"https://example.com/authenticate\",\n    signup_redirect_url=\"https://example.com/authenticate\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing the Stytch B2B Client\nDESCRIPTION: This code initializes the Stytch B2B client with your project ID and secret. Replace the placeholder values with your actual Stytch API credentials. The `B2BClient` class is used instead of the regular `Client`.\nSOURCE: https://github.com/stytchauth/stytch-python/blob/main/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport stytch\n\nclient = stytch.B2BClient(\n    project_id=\"project-live-c60c0abe-c25a-4472-a9ed-320c6667d317\",\n    secret=\"secret-live-80JASucyk7z_G8Z-7dVwZVGXL5NT_qGAQ2I=\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Organization (B2B)\nDESCRIPTION: This code creates a new organization using the `organizations.create` method. It requires parameters such as `organization_name`, `organization_slug`, and `email_allowed_domains`.\nSOURCE: https://github.com/stytchauth/stytch-python/blob/main/README.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.organizations.create(\n    organization_name=\"Acme Co\",\n    organization_slug=\"acme-co\",\n    email_allowed_domains=[\"acme.co\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Install Development Requirements (Python)\nDESCRIPTION: Installs the necessary development dependencies using pip from the `requirements_dev.txt` file. This includes tools and libraries needed for development, testing, and code generation.\nSOURCE: https://github.com/stytchauth/stytch-python/blob/main/DEVELOPMENT.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install -r requirements_dev.txt\n```\n\n----------------------------------------\n\nTITLE: Generate API (Shell)\nDESCRIPTION: Runs the `generate-api.sh` script to regenerate the API client code based on the API specification. This script automatically applies default formatters and avoids overwriting manual implementation methods, ensuring the client is up-to-date with the latest API changes.\nSOURCE: https://github.com/stytchauth/stytch-python/blob/main/DEVELOPMENT.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbin/generate-api.sh\n```\n\n----------------------------------------\n\nTITLE: Run Core Unit Tests (Python)\nDESCRIPTION: Executes the core unit tests for the Stytch library using the `unittest` module. This command discovers and runs tests located within the `stytch/` directory, validating the core functionality of the library.\nSOURCE: https://github.com/stytchauth/stytch-python/blob/main/DEVELOPMENT.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython -m unittest discover -s stytch/ -t .\n```\n\n----------------------------------------\n\nTITLE: Run Codegen Unit Tests (Python)\nDESCRIPTION: Executes unit tests specifically for the codegen functionality of the Stytch library using the `unittest` module. This command discovers and runs tests located within the `codegen/` directory, ensuring the code generation process functions correctly.\nSOURCE: https://github.com/stytchauth/stytch-python/blob/main/DEVELOPMENT.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython -m unittest discover -s codegen/ -t .\n```\n\n----------------------------------------\n\nTITLE: Run Integration Tests (Python)\nDESCRIPTION: Runs integration tests for the Stytch library using the `unittest` module. These tests interact with the Stytch test API and require the following environment variables to be set: `STYTCH_PYTHON_RUN_INTEGRATION_TESTS=1`, `STYTCH_PROJECT_ID`, and `STYTCH_SECRET`.\nSOURCE: https://github.com/stytchauth/stytch-python/blob/main/DEVELOPMENT.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython -m unittest discover -s test/ -t .\n```\n\n----------------------------------------\n\nTITLE: Run Coverage Report (Shell)\nDESCRIPTION: Runs tests with coverage and generates a coverage report, excluding test files. This command uses the `coverage` tool to measure the code coverage of the tests and provides a summary report. It omits files in `*test/*` to avoid including test code in the coverage analysis.\nSOURCE: https://github.com/stytchauth/stytch-python/blob/main/DEVELOPMENT.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncoverage run -m unittest  && coverage report --omit=\"*test/*\" --sort=cover\n```\n\n----------------------------------------\n\nTITLE: Run Integration Tests with Coverage (Shell)\nDESCRIPTION: Runs integration tests with coverage enabled, and generates an HTML coverage report, excluding test files. This command sets the `STYTCH_PYTHON_RUN_INTEGRATION_TESTS` environment variable, runs tests using `coverage`, and then generates an HTML report.  It requires `STYTCH_PROJECT_ID` and `STYTCH_SECRET` to be set in the environment.\nSOURCE: https://github.com/stytchauth/stytch-python/blob/main/DEVELOPMENT.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nenv STYTCH_PYTHON_RUN_INTEGRATION_TESTS=1 coverage run -m unittest && coverage html --omit=\"*test/*\"\n```\n\n----------------------------------------\n\nTITLE: Generate Coverage Report (Shell)\nDESCRIPTION: A convenience script to run integration tests with coverage and generate an HTML report. This script simplifies the process of running coverage analysis with integration tests and producing a detailed HTML report for code coverage assessment.\nSOURCE: https://github.com/stytchauth/stytch-python/blob/main/DEVELOPMENT.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nbin/generate-coverage.sh\n```\n\n----------------------------------------\n\nTITLE: Dependencies for distribution\nDESCRIPTION: This specifies the build package and its version for distributing the stytch-python package.  It ensures the package can be built and distributed correctly.\nSOURCE: https://github.com/stytchauth/stytch-python/blob/main/requirements_dev.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nbuild==1.2.2.post1\n```\n\n----------------------------------------\n\nTITLE: Dependencies for type checking and testing\nDESCRIPTION: These are development dependencies required for static type checking using mypy and code formatting with black. types-requests provides type annotations for the requests library.\nSOURCE: https://github.com/stytchauth/stytch-python/blob/main/requirements_dev.txt#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nblack==24.3.0\nmypy==0.991\ntypes-requests==2.28.11.5\n```"
  }
]