[
  {
    "owner": "briefhq",
    "repo": "drizzle-zero",
    "content": "TITLE: Converting Drizzle schema to Zero schema\nDESCRIPTION: Example of converting a Drizzle schema to a Zero schema using the createZeroSchema function, including configuration options for casing, table inclusion, and debug mode.\nSOURCE: https://github.com/BriefHQ/drizzle-zero/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createZeroSchema } from \"drizzle-zero\";\nimport * as drizzleSchema from \"./drizzle-schema\";\n\n// Convert to Zero schema\nexport const schema = createZeroSchema(drizzleSchema, {\n  // Specify the casing style to use for the schema.\n  // This is useful for when you want to use a different casing style than the default.\n  // This works in the same way as the `casing` option in the Drizzle ORM.\n  //\n  // @example\n  // casing: \"snake_case\",\n\n  // Specify which tables and columns to include in the Zero schema.\n  // This allows for the \"expand/migrate/contract\" pattern recommended in the Zero docs.\n  // When a column is first added, it should be set to false, and then changed to true\n  // once the migration has been run.\n\n  // All tables/columns must be defined, but can be set to false to exclude them from the Zero schema.\n  // Column names match your Drizzle schema definitions\n  tables: {\n    // this can be set to false\n    // e.g. user: false,\n    users: {\n      id: true,\n      name: true,\n    },\n    posts: {\n      // or this can be set to false\n      // e.g. id: false,\n      id: true,\n      content: true,\n      // Use the JavaScript field name (authorId), not the DB column name (author_id)\n      authorId: true,\n    },\n  },\n  // enable debug mode to log the schema\n  debug: true,\n});\n\n// Define permissions with the inferred types from Drizzle\ntype Schema = typeof schema;\ntype User = Row<typeof schema.tables.users>;\n\nexport const permissions = definePermissions<{}, Schema>(schema, () => {\n  // ...further permissions definitions\n});\n```\n\n----------------------------------------\n\nTITLE: Using the generated Zero schema in a React component\nDESCRIPTION: Example of using the generated Zero schema in a React component to query posts with their authors and display them.\nSOURCE: https://github.com/BriefHQ/drizzle-zero/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useQuery, useZero } from \"@rocicorp/zero/react\";\n\nfunction PostList() {\n  const z = useZero();\n\n  // Build a query for posts with their authors\n  const postsQuery = z.query.post.related(\"author\").limit(10);\n\n  const [posts] = useQuery(postsQuery);\n\n  return (\n    <div>\n      {posts.map((post) => (\n        <div key={post.id} className=\"post\">\n          {/* Access the JSON content from Drizzle */}\n          <p>{post.content.textValue}</p>\n          <p>By: {post.author?.name}</p>\n        </div>\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Drizzle ORM schema with relationships\nDESCRIPTION: Example of defining a Drizzle ORM schema with users and posts tables, including relations between them.\nSOURCE: https://github.com/BriefHQ/drizzle-zero/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { relations } from \"drizzle-orm\";\nimport { pgTable, text, jsonb } from \"drizzle-orm/pg-core\";\n\nexport const users = pgTable(\"user\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\"),\n});\n\nexport const usersRelations = relations(users, ({ many }) => ({\n  posts: many(posts),\n}));\n\nexport const posts = pgTable(\"post\", {\n  id: text(\"id\").primaryKey(),\n  // this JSON type will be passed to Zero\n  content: jsonb(\"content\").$type<{ textValue: string }>().notNull(),\n  authorId: text(\"author_id\").references(() => users.id),\n});\n\nexport const postsRelations = relations(posts, ({ one }) => ({\n  author: one(users, {\n    fields: [posts.authorId],\n    references: [users.id],\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Many-to-Many Relationships in Zero schema\nDESCRIPTION: Examples of configuring many-to-many relationships in the Zero schema, including a simple configuration and an extended configuration for more complex scenarios like self-referential relationships.\nSOURCE: https://github.com/BriefHQ/drizzle-zero/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const schema = createZeroSchema(drizzleSchema, {\n  tables: {\n    user: {\n      id: true,\n      name: true,\n    },\n    usersToGroup: {\n      userId: true,\n      groupId: true,\n    },\n    group: {\n      id: true,\n      name: true,\n    },\n  },\n  manyToMany: {\n    user: {\n      // Simple format: [junction table, target table]\n      // Do not use the same name as any existing relationships\n      groups: [\"usersToGroup\", \"group\"],\n    },\n  },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const schema = createZeroSchema(drizzleSchema, {\n  tables: {\n    user: {\n      id: true,\n      name: true,\n    },\n    friendship: {\n      requestingId: true,\n      acceptingId: true,\n    },\n  },\n  manyToMany: {\n    user: {\n      // Extended format with explicit field mappings\n      friends: [\n        {\n          sourceField: [\"id\"],\n          destTable: \"friendship\",\n          destField: [\"requestingId\"],\n        },\n        {\n          sourceField: [\"acceptingId\"],\n          destTable: \"user\",\n          destField: [\"id\"],\n        },\n      ],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Many-to-Many Relationships in Zero\nDESCRIPTION: Example of querying many-to-many relationships in Zero, demonstrating how to skip the junction table and directly access related entities.\nSOURCE: https://github.com/BriefHQ/drizzle-zero/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst userQuery = z.query.user.where(\"id\", \"=\", \"1\").related(\"groups\").one();\n\nconst [user] = useQuery(userQuery);\n\nconsole.log(user);\n// {\n//   id: \"user_1\",\n//   name: \"User 1\",\n//   groups: [\n//     { id: \"group_1\", name: \"Group 1\" },\n//     { id: \"group_2\", name: \"Group 2\" },\n//   ],\n// }\n```\n\n----------------------------------------\n\nTITLE: Installing drizzle-zero package\nDESCRIPTION: Commands to install the drizzle-zero package using npm, yarn, or pnpm package managers.\nSOURCE: https://github.com/BriefHQ/drizzle-zero/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install drizzle-zero\n# or\nyarn add drizzle-zero\n# or\npnpm add drizzle-zero\n```"
  }
]