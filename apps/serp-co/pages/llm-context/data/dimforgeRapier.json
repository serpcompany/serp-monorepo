[
  {
    "owner": "dimforge",
    "repo": "rapier",
    "content": "TITLE: Creating a Ray-Cast Vehicle Controller in Rapier Physics Engine\nDESCRIPTION: Using DynamicRayCastVehicleController to create a vehicle controller based on ray-casting and dynamic rigid-bodies (port of the vehicle controller from Bullet physics).\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_19\n\nLANGUAGE: Rust\nCODE:\n```\nDynamicRayCastVehicleController\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Rigid Bodies in Rapier Physics Engine\nDESCRIPTION: Using RigidBody::set_enabled, RigidBody::is_enabled, and RigidBodyBuilder::enabled to enable/disable a rigid-body without having to delete it.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: Rust\nCODE:\n```\nRigidBody::set_enabled\n```\n\nLANGUAGE: Rust\nCODE:\n```\nRigidBody::is_enabled\n```\n\nLANGUAGE: Rust\nCODE:\n```\nRigidBodyBuilder::enabled\n```\n\n----------------------------------------\n\nTITLE: Enabling CCD for Rigid Bodies in Rapier\nDESCRIPTION: Shows how to enable Continuous Collision Detection (CCD) for a rigid body in Rapier.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_26\n\nLANGUAGE: Rust\nCODE:\n```\nRigidBodyBuilder::ccd_enabled()\n```\n\n----------------------------------------\n\nTITLE: Creating a Kinematic Rigid Body in Rapier\nDESCRIPTION: Demonstrates how to create a kinematic rigid body in Rapier, either position-based or velocity-based.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_25\n\nLANGUAGE: Rust\nCODE:\n```\nRigidBodyBuilder::new_kinematic_position_based()\nRigidBodyBuilder::new_kinematic_velocity_based()\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Colliders in Rapier Physics Engine\nDESCRIPTION: Using Collider::set_enabled, Collider::is_enabled, and ColliderBuilder::enabled to enable/disable a collider without having to delete it.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_17\n\nLANGUAGE: Rust\nCODE:\n```\nCollider::set_enabled\n```\n\nLANGUAGE: Rust\nCODE:\n```\nCollider::is_enabled\n```\n\nLANGUAGE: Rust\nCODE:\n```\nColliderBuilder::enabled\n```\n\n----------------------------------------\n\nTITLE: Setting Rigid Body Translation in Rapier\nDESCRIPTION: Shows how to set the translation of a rigid body using a vector in Rapier.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_24\n\nLANGUAGE: Rust\nCODE:\n```\nRigidBodyBuilder::translation(vector)\n```\n\n----------------------------------------\n\nTITLE: Setting Additional Solver Iterations for Rigid Bodies in Rapier Physics Engine\nDESCRIPTION: Using RigidBodyBuilder::additional_solver_iterations and RigidBodyBuilder::set_additional_solver_iterations to specify additional solver iterations for specific rigid-bodies, allowing higher-accuracy on subsets of the physics scene.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: Rust\nCODE:\n```\nRigidBodyBuilder::additional_solver_iterations\n```\n\nLANGUAGE: Rust\nCODE:\n```\nRigidBodyBuilder::set_additional_solver_iterations\n```\n\n----------------------------------------\n\nTITLE: Creating a Halfspace Collider in Rapier\nDESCRIPTION: Demonstrates how to create a collider with an unbounded plane shape in Rapier.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_27\n\nLANGUAGE: Rust\nCODE:\n```\nColliderBuilder::halfspace()\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Joints in Rapier Physics Engine\nDESCRIPTION: Using SpringJoint and SpringJointBuilder to simulate springs with customizable stiffness and damping coefficients.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: Rust\nCODE:\n```\nSpringJoint\n```\n\nLANGUAGE: Rust\nCODE:\n```\nSpringJointBuilder\n```\n\n----------------------------------------\n\nTITLE: Configuring Spherical Joints in Rapier Physics Engine\nDESCRIPTION: Using SphericalJoint::local_frame1/2, ::set_local_frame1/2, and SphericalJointBuilder::local_frame1/2 to set both the joint's anchor and reference orientation.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: Rust\nCODE:\n```\nSphericalJoint::local_frame1\n```\n\nLANGUAGE: Rust\nCODE:\n```\nSphericalJoint::local_frame2\n```\n\nLANGUAGE: Rust\nCODE:\n```\nSphericalJoint::set_local_frame1\n```\n\nLANGUAGE: Rust\nCODE:\n```\nSphericalJoint::set_local_frame2\n```\n\nLANGUAGE: Rust\nCODE:\n```\nSphericalJointBuilder::local_frame1\n```\n\nLANGUAGE: Rust\nCODE:\n```\nSphericalJointBuilder::local_frame2\n```\n\n----------------------------------------\n\nTITLE: Enabling Soft CCD Prediction in Rapier Physics Engine\nDESCRIPTION: Using RigidBodyBuilder::soft_ccd_prediction and RigidBody::set_soft_ccd_prediction to enable soft-ccd, a form of continuous collision detection based on predictive contacts for moderately fast moving objects.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: Rust\nCODE:\n```\nRigidBodyBuilder::soft_ccd_prediction\n```\n\nLANGUAGE: Rust\nCODE:\n```\nRigidBody::set_soft_ccd_prediction\n```\n\n----------------------------------------\n\nTITLE: Accessing User-Applied Forces on Rigid Bodies in Rapier Physics Engine\nDESCRIPTION: Using RigidBody::user_force and RigidBody::user_torque to read the forces or torques added by the user to a dynamic rigid-body.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_20\n\nLANGUAGE: Rust\nCODE:\n```\nRigidBody::user_force\n```\n\nLANGUAGE: Rust\nCODE:\n```\nRigidBody::user_torque\n```\n\n----------------------------------------\n\nTITLE: Setting Contact Skin for Colliders in Rapier Physics Engine\nDESCRIPTION: Using ColliderBuilder::contact_skin, Collider::set_contact_skin, and Collider::contact_skin to maintain a gap between colliders, improving performance and stability for thin objects like triangle meshes.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: Rust\nCODE:\n```\nColliderBuilder::contact_skin\n```\n\nLANGUAGE: Rust\nCODE:\n```\nCollider::set_contact_skin\n```\n\nLANGUAGE: Rust\nCODE:\n```\nCollider::contact_skin\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Joints in Rapier Physics Engine\nDESCRIPTION: Using GenericJoint::set_enabled and GenericJoint::is_enabled to enable/disable a joint without having to delete it.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_18\n\nLANGUAGE: Rust\nCODE:\n```\nGenericJoint::set_enabled\n```\n\nLANGUAGE: Rust\nCODE:\n```\nGenericJoint::is_enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring Vehicle Wheel Side Friction in Rapier Physics Engine\nDESCRIPTION: Using Wheel::side_friction_stiffness to customize the side friction applied to the vehicle controller's wheel.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: Rust\nCODE:\n```\nWheel::side_friction_stiffness\n```\n\n----------------------------------------\n\nTITLE: Character Controller Code Example\nDESCRIPTION: Example showing usage of PdController and PidController for controlling dynamic rigid-bodies at the velocity level, useful for implementing character controllers.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Predicting Rigid Body Position in Rapier Physics Engine\nDESCRIPTION: Example usage of the RigidBody::predict_position_using_velocity method to predict the next position of a rigid-body based only on its current velocity.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\nRigidBody::predict_position_using_velocity\n```\n\n----------------------------------------\n\nTITLE: Building a Triangle Mesh with Specific Flags in Rapier Physics Engine\nDESCRIPTION: Using ColliderBuilder::trimesh_with_flags to build a triangle mesh with specific flags controlling its initialization.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_22\n\nLANGUAGE: Rust\nCODE:\n```\nColliderBuilder::trimesh_with_flags\n```\n\n----------------------------------------\n\nTITLE: Checking Character Sliding Status in Rapier Physics Engine\nDESCRIPTION: Using EffectiveCharacterMovement::is_sliding_down_slope to check if the character controlled by the kinematic character controller is sliding on a slope that is too steep.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: Rust\nCODE:\n```\nEffectiveCharacterMovement::is_sliding_down_slope\n```\n\n----------------------------------------\n\nTITLE: Accessing Wheel Raycast Information in Rapier Physics Engine\nDESCRIPTION: Using Wheel::raycast_info to access more wheel information relative to the ground.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: Rust\nCODE:\n```\nWheel::raycast_info\n```\n\n----------------------------------------\n\nTITLE: Accessing Locked Axes of Rigid Bodies in Rapier Physics Engine\nDESCRIPTION: Using RigidBody::locked_axes to get the rigid-body axes that were locked by the user.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_21\n\nLANGUAGE: Rust\nCODE:\n```\nRigidBody::locked_axes\n```\n\n----------------------------------------\n\nTITLE: Setting Length Units for Integration Parameters in Rapier Physics Engine\nDESCRIPTION: Using IntegrationParameters::length_units to automatically adjust internal thresholds when the user relies on custom length units (e.g. pixels in 2D).\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: Rust\nCODE:\n```\nIntegrationParameters::length_units\n```\n\n----------------------------------------\n\nTITLE: Copying Collider Attributes in Rapier Physics Engine\nDESCRIPTION: Example usage of the Collider::copy_from method to copy most collider attributes to an existing collider.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\nCollider::copy_from\n```\n\n----------------------------------------\n\nTITLE: Copying Rigid Body Attributes in Rapier Physics Engine\nDESCRIPTION: Example usage of the RigidBody::copy_from method to copy most rigid-body attributes to an existing rigid-body.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: Rust\nCODE:\n```\nRigidBody::copy_from\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Renderer Color Multiplier in Rapier Physics Engine\nDESCRIPTION: Using DebugRenderStyle::disabled_color_multiplier to make the debug-renderer color disabled objects differently.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: Rust\nCODE:\n```\nDebugRenderStyle::disabled_color_multiplier\n```\n\n----------------------------------------\n\nTITLE: Importing Rapier Prelude in Rust\nDESCRIPTION: Demonstrates how to import the Rapier prelude to simplify common imports in Rust code.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_23\n\nLANGUAGE: Rust\nCODE:\n```\nuse rapier::prelude::*;\n```\n\n----------------------------------------\n\nTITLE: Running Rapier Examples in Cargo\nDESCRIPTION: Commands to run the 2D and 3D example applications that demonstrate Rapier's capabilities. These examples can be found in the examples2d/ and examples3d/ directories.\nSOURCE: https://github.com/dimforge/rapier/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --release --bin all_examples2\ncargo run --release --bin all_examples3\n```\n\n----------------------------------------\n\nTITLE: Running Rust Tests and Examples for Rapier\nDESCRIPTION: Commands for testing Rust changes to Rapier, including running tests and examples in both 2D and 3D modes with various feature flags.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo test\ncargo run --release --bin all_examples2\ncargo run --release --bin all_examples3\ncargo run --release --bin all_examples2 --features parallel,simd-stable\ncargo run --release --bin all_examples3 --features parallel,simd-stable\n```\n\n----------------------------------------\n\nTITLE: Running 2D Examples in Rapier\nDESCRIPTION: Command to run all 2D examples showcasing Rapier's capabilities.\nSOURCE: https://github.com/dimforge/rapier/blob/master/ARCHITECTURE.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --release --bin all_examples2\n```\n\n----------------------------------------\n\nTITLE: Running 3D Examples in Rapier\nDESCRIPTION: Command to run all 3D examples showcasing Rapier's capabilities.\nSOURCE: https://github.com/dimforge/rapier/blob/master/ARCHITECTURE.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --release --bin all_examples3\n```\n\n----------------------------------------\n\nTITLE: Building and Testing JavaScript/TypeScript Bindings for Rapier\nDESCRIPTION: Shell commands for building and testing changes to the Rapier JavaScript/TypeScript bindings, including building WASM modules and running the test environment.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd rapier3d; npm install; ./build_all.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\n./build_rust.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\n./build_typescript.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd testbed3d; npm install; npm link ../rapier3d/pkg; npm run start\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running the Rapier Documentation Website Locally\nDESCRIPTION: Commands for installing dependencies and starting the Docusaurus-based documentation website locally for testing changes.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd website; yarn install; yarn start;\n```\n\n----------------------------------------\n\nTITLE: Rapier 3D Mesh Loader v0.4.0 Changes\nDESCRIPTION: Details the changes in version 0.4.0, including the crate renaming and addition of Collada and Wavefront file support via feature flags.\nSOURCE: https://github.com/dimforge/rapier/blob/master/crates/rapier3d-meshloader/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.4.0\n\nRenamed the crate from `rapier3d-stl` to `rapier3d-meshloader`, to better reflect its support for multiple formats.\n\n### Added\n\n- Add optional support for Collada and Wavefront files through new feature flags `collada` and `wavefront`.\n\n### Modified\n\n- Support for STL is now optional through feature `stl`.\n- Features `stl`, `wavefront` and `collada` are enabled by default.\n```\n\n----------------------------------------\n\nTITLE: Rapier 3D STL v0.3.0 Initial Release\nDESCRIPTION: Documents the initial release features of the rapier3d-stl crate, including file loading capabilities and mesh creation functions.\nSOURCE: https://github.com/dimforge/rapier/blob/master/crates/rapier3d-meshloader/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.0\n\nThis is the initial release of the `rapier3d-stl` crate.\n\n### Added\n\n- Add `load_from_path` for creating a shape from a stl file.\n- Add `load_from_reader` for creating a shape from an object implementing `Read`.\n- Add `load_from_raw_mesh` for creating a shape from an already loaded `IndexedMesh`.\n```\n\n----------------------------------------\n\nTITLE: Implementing PartialEq for IntegrationParameters\nDESCRIPTION: Added PartialEq trait implementation for IntegrationParameters to enable equality comparisons.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Implementing Copy for MeshConverter\nDESCRIPTION: Added Copy trait implementation for the MeshConverter struct to allow it to be copied.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CHANGELOG.md#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Dimforge Code of Conduct\nDESCRIPTION: Markdown document detailing community standards, conduct guidelines, and moderation policies for all Dimforge project spaces including Discord, GitHub, and other platforms.\nSOURCE: https://github.com/dimforge/rapier/blob/master/CODE_OF_CONDUCT.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# The Dimforge Code of Conduct\n\n## Conduct\n\n- We are committed to providing a friendly, safe and welcoming environment for all, regardless of level of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other similar characteristic.\n- On Discord, the forums, IRC, GitHub, or any other community area, please avoid using overtly sexual nicknames or other nicknames that might detract from a friendly, safe and welcoming environment for all.\n- Please be kind and courteous. There's no need to be mean or rude.\n- Respect that people have differences of opinion and that every design or implementation choice carries a trade-off and numerous costs. There is seldom a right answer.\n- Please keep unstructured critique to a minimum. If you have solid ideas you want to experiment with, make a fork and see how it works.\n- We will exclude you from interaction if you insult, demean or harass anyone. That is not welcome behavior; we strive to be inclusive. In particular, we don't tolerate behavior that excludes people in socially marginalized groups.\n- Private harassment is also unacceptable. No matter who you are, if you feel you have been or are being harassed or made uncomfortable by a community member, please contact one of the channel ops or any of the [Dimforge moderation team][mods] immediately. Whether you're a regular contributor or a newcomer, we care about making this community a safe place for you and we've got your back.\n- Likewise any spamming, trolling, flaming, baiting or other attention-stealing behavior is not welcome.\n- Keep political and religious discussions out of the public Dimforge spaces.\n\n## Moderation\n\nThese are the policies for upholding our community's standards of conduct. If you feel that a thread needs moderation, please contact the [Dimforge moderation team][mods].\n\n1. Remarks that violate the Dimforge standards of conduct, including hateful, hurtful, oppressive, or exclusionary remarks, are not allowed. (Cursing in general is discouraged, and never tolerated if targeting another user, and never in a hateful manner.)\n1. Remarks that moderators find inappropriate, whether listed in the code of conduct or not, are also not allowed.\n1. Moderators will first respond to such remarks with a warning.\n1. If the warning is unheeded, the user will be \"kicked,\" i.e., kicked out of the communication channel to cool off.\n1. If the user comes back and continues to make trouble, they will be banned, i.e., indefinitely excluded.\n1. Moderators may choose at their discretion to un-ban the user if it was a first offense and they offer the offended party a genuine apology.\n1. If a moderator bans someone and you think it was unjustified, please take it up with that moderator, or with a different moderator, **in private**. Complaints about bans in-channel are not allowed.\n1. Moderators, organization members, and anyone closely involved with the Dimforge projects are held to a higher standard than other community members. If a moderator creates an inappropriate situation, they should expect less leeway than others.\n\nIn the Dimforge community we strive to go the extra step to look out for each other. Don't just aim to be technically unimpeachable, try to be your best self. In particular, avoid flirting with offensive or sensitive issues, particularly if they're off-topic; this all too often leads to unnecessary fights, hurt feelings, and damaged trust; worse, it can drive people away from the community entirely.\n\nAnd if someone takes issue with something you said or d resist the urge to be defensive. Just stop doing what it was they complained about and apologize. Even if you feel you were misinterpreted or unfairly accused, chances are good there was something you could've communicated better — remember that it's your responsibility to make your fellow Dimforge community members comfortable. Everyone wants to get along and we are all here first and foremost because we want to talk about making games. You will find that people will be eager to assume good intent and forgive as long as you earn their trust.\n\nThe enforcement policies listed above apply to all official Dimforge venues; including all Dimforge Discord channels; GitHub repositories under Dimforge.\n\n_This Code of Conduct is based on the Rust Code of Conduct, available here: https://www.rust-lang.org/conduct.html_\n\n[mods]: mailto:mods@dimforge.com\n```"
  }
]