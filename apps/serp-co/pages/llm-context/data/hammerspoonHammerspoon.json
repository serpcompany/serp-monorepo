[
  {
    "owner": "hammerspoon",
    "repo": "hammerspoon",
    "content": "TITLE: Opening a Serial Port and Sending Data in Objective-C\nDESCRIPTION: This snippet demonstrates how to open a serial port, set its baud rate, send data, and close the port using the ORSSerialPort library in Objective-C. It illustrates the ease of establishing a connection for device communication.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/ORSSerialPort/README.md#2025-04-16_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\nORSSerialPort *serialPort = [ORSSerialPort serialPortWithPath:@\"/dev/cu.KeySerial1\"];\nserialPort.baudRate = @4800;\n[serialPort open];\n[serialPort sendData:someData]; // someData is an NSData object\n[serialPort close]; // Later, when you're done with the port\n```\n\n----------------------------------------\n\nTITLE: Opening a Serial Port and Sending Data in Swift\nDESCRIPTION: This snippet illustrates the same functionality as the Objective-C example but in Swift. It shows how to create an ORSSerialPort instance, configure the baud rate, send data, and close the port.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/ORSSerialPort/README.md#2025-04-16_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet serialPort = ORSSerialPort(path: \"/dev/cu.KeySerial1\")\nserialPort.baudRate = 4800\nserialPort.open()\nserialPort.sendData(someData) // someData is an NSData object\nserialPort.close() // Later, when you're done with the port\n```\n\n----------------------------------------\n\nTITLE: Sending MIDI Commands to a Destination Endpoint in Swift\nDESCRIPTION: This code snippet illustrates how to create and send MIDI Note On and Note Off commands to a specified destination endpoint using the MIKMIDIDeviceManager. It creates `MIKMIDINoteOnCommand` and `MIKMIDINoteOffCommand` instances with specified parameters, then sends them as an array to the `destinationEndpoint`.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/MIKMIDI/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n\"let noteOn = MIKMIDINoteOnCommand(note: 60, velocity: 127, channel: 0, timestamp: Date())\nlet noteOff = MIKMIDINoteOffCommand(note: 60, velocity: 127, channel: 0, timestamp: Date().advanced(by: 0.5))\ntry MIKMIDIDeviceManager.shared.send([noteOn, noteOff], to: destinationEndpoint)\"\n```\n\n----------------------------------------\n\nTITLE: Getting Available MIDI Devices in Swift\nDESCRIPTION: This snippet demonstrates how to retrieve a list of available MIDI devices using the MIKMIDIDeviceManager singleton. The `availableDevices` property returns an array of `MIKMIDIDevice` objects representing the connected MIDI devices.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/MIKMIDI/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n\"let availableDevices = MIKMIDIDeviceManager.shared.availableDevices\"\n```\n\n----------------------------------------\n\nTITLE: Initializing MIKMIDIEndpointSynthesizer in Swift\nDESCRIPTION: This code snippet demonstrates how to initialize a MIKMIDIEndpointSynthesizer with a MIDI source. It retrieves the first source from the first entity of a MIDI device and uses it to create a synthesizer. The synthesizer will then synthesize incoming MIDI messages from the specified endpoint.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/MIKMIDI/README.md#2025-04-16_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet endpoint = midiDevice.entities.first!.sources.first!\nlet synth = try MIKMIDIEndpointSynthesizer(midiSource: endpoint)\n```\n\n----------------------------------------\n\nTITLE: Defining Spoon Hotkey Mapping Structure in Lua\nDESCRIPTION: Example of the table structure used for mapping hotkeys to Spoon features\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/SPOONS.md#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n{ someFeature = {{\"cmd\", \"alt\"}, \"f\"},\n  otherFeature = {{\"shift\", \"ctrl\"}, \"b\"}}\n```\n\n----------------------------------------\n\nTITLE: Using CocoaLumberjack in Swift\nDESCRIPTION: This Swift code snippet illustrates how to add loggers, configure file logging, and log messages at various levels. This demonstrates the core functionality of CocoaLumberjack for logging in Swift applications.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/CocoaLumberjack/README.md#2025-04-16_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nDDLog.add(DDOSLogger.sharedInstance) // Uses os_log\n\nlet fileLogger: DDFileLogger = DDFileLogger() // File Logger\nfileLogger.rollingFrequency = 60 * 60 * 24 // 24 hours\nfileLogger.logFileManager.maximumNumberOfLogFiles = 7\nDDLog.add(fileLogger)\n\n...\n\nDDLogVerbose(\"Verbose\")\nDDLogDebug(\"Debug\")\nDDLogInfo(\"Info\")\nDDLogWarn(\"Warn\")\nDDLogError(\"Error\")\n```\n\n----------------------------------------\n\nTITLE: Using CocoaLumberjack in Objective-C\nDESCRIPTION: This Objective-C code snippet shows how to set up and utilize loggers within an Objective-C project. It includes configuration of file logging and demonstrates message logging with various verbosity levels.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/CocoaLumberjack/README.md#2025-04-16_snippet_5\n\nLANGUAGE: objective-c\nCODE:\n```\n[DDLog addLogger:[DDOSLogger sharedInstance]]; // Uses os_log\n\nDDFileLogger *fileLogger = [[DDFileLogger alloc] init]; // File Logger\nfileLogger.rollingFrequency = 60 * 60 * 24; // 24 hour rolling\nfileLogger.logFileManager.maximumNumberOfLogFiles = 7;\n[DDLog addLogger:fileLogger];\n\n...\n\nDDLogVerbose(@\"Verbose\");\nDDLogDebug(@\"Debug\");\nDDLogInfo(@\"Info\");\nDDLogWarn(@\"Warn\");\nDDLogError(@\"Error\");\n```\n\n----------------------------------------\n\nTITLE: Request/Response API for Serial Communication in Objective-C\nDESCRIPTION: This snippet demonstrates how to implement a command-response sequence using ORSSerialRequest and ORSSerialPort to read temperature data from a connected device.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/ORSSerialPort/README.md#2025-04-16_snippet_6\n\nLANGUAGE: objective-c\nCODE:\n```\n- (void)readTemperature\n{\n    NSData *command = [@\"$TEMP?;\" dataUsingEncoding:NSASCIIStringEncoding];\n    ORSSerialPacketDescriptor *responseDescriptor = \n    [[ORSSerialPacketDescriptor alloc] initWithMaximumPacketLength:9\n                                                  userInfo:nil\n                                         responseEvaluator:^BOOL(NSData *data) {\n        return [self temperatureFromResponsePacket:data] != nil;\n    }];\n    ORSSerialRequest *request = \n        [ORSSerialRequest requestWithDataToSend:command\n                                       userInfo:nil\n                                timeoutInterval:kTimeoutDuration\n                             responseDescriptor:responseDescriptor];\n    [self.serialPort sendRequest:request];\n}\n\n- (void)serialPort:(ORSSerialPort *)port didReceiveResponse:(NSData *)data toRequest:(ORSSerialRequest *)request\n{\n    NSString *response = [[NSString alloc] initWithData:data usingEncoding:NSASCIIStringEncoding];\n    NSLog(@\"response = %@\", response);\n    self.temperature = [self temperatureFromResponsePacket:data];\n}\n\n- (void)serialPort:(ORSSerialPort *)port requestDidTimeout:(ORSSerialRequest *)request\n{\n    NSLog(@\"command timed out!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry SDK in Swift\nDESCRIPTION: This snippet demonstrates how to initialize the Sentry SDK in a Swift-based iOS application. Key dependencies include the Sentry framework, and initialization should occur early, ideally in the `applicationDidFinishLaunching` method in `AppDelegate`. Developers must provide a DSN and can enable the debug mode to monitor the process. Inputs include configuration options for DSN and debug mode, with no direct outputs.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/Sentry/README.md#2025-04-16_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Sentry\n\n// ....\n\nSentrySDK.start { options in\n    options.dsn = \"___PUBLIC_DSN___\"\n    options.debug = true // Helpful to see what's going on\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry SDK in Objective-C\nDESCRIPTION: This snippet provides the initialization process for the Sentry SDK in an Objective-C-based iOS application. The code should be placed early in the app lifecycle, preferably in the `applicationDidFinishLaunching` method in `AppDelegate`. It requires the Sentry framework, and configuration options must include a DSN and optionally enable debug mode. The snippet sets these inputs without producing direct outputs.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/Sentry/README.md#2025-04-16_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\n@import Sentry;\n\n// ....\n\n[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {\n    options.dsn = @\"___PUBLIC_DSN___\";\n    options.debug = @YES; // Helpful to see what's going on\n}];\n```\n\n----------------------------------------\n\nTITLE: Generating HTML/Markdown Documentation (Bash)\nDESCRIPTION: This command generates HTML and Markdown documentation for a Hammerspoon Spoon using a Python script. It requires cloning the Hammerspoon repository and installing Python dependencies. The script searches for `.lua` files, extracts docstrings, and writes `docs.json`, HTML, and Markdown outputs to the current directory.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/SPOONS.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n/path/to/hammerspoon_repo/scripts/docs/bin/build_docs.py --templates /path/to/hammerspoon_repo/scripts/docs/templates/ --output_dir . --json --html --markdown --standalone .\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Serial Port in Objective-C\nDESCRIPTION: This snippet shows how to initialize ORSSerialPort with more specific settings, including baud rate and flow control. It provides a robust example of how to configure the serial port before use.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/ORSSerialPort/README.md#2025-04-16_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\nport.baudRate = @9600;\nport.parity = ORSSerialPortParityNone;\nport.numberOfStopBits = 1;\nport.usesRTSCTSFlowControl = YES;\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Client in Objective-C\nDESCRIPTION: Demonstrates how to create and use a WebSocket client using PSWebSocket. Shows connection setup, message handling, and delegate implementation for managing WebSocket lifecycle events.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/PocketSocket/README.md#2025-04-16_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\n#import <PSWebSocket/PSWebSocket.h>\n\n@interface AppDelegate() <PSWebSocketDelegate>\n\n@property (nonatomic, strong) PSWebSocket *socket;\n\n@end\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];\n    self.window.backgroundColor = [UIColor whiteColor];\n    [self.window makeKeyAndVisible];\n    \n    // create the NSURLRequest that will be sent as the handshake\n    NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:@\"wss://example.com\"]];\n    \n    // create the socket and assign delegate\n    self.socket = [PSWebSocket clientSocketWithRequest:request];\n    self.socket.delegate = self;\n    \n    // open socket\n    [self.socket open];\n    \n    return YES;\n}\n\n#pragma mark - PSWebSocketDelegate\n\n- (void)webSocketDidOpen:(PSWebSocket *)webSocket {\n    NSLog(@\"The websocket handshake completed and is now open!\");\n    [webSocket send:@\"Hello world!\"];\n}\n- (void)webSocket:(PSWebSocket *)webSocket didReceiveMessage:(id)message {\n    NSLog(@\"The websocket received a message: %@\", message);\n}\n- (void)webSocket:(PSWebSocket *)webSocket didFailWithError:(NSError *)error {\n    NSLog(@\"The websocket handshake/connection failed with an error: %@\", error);\n}\n- (void)webSocket:(PSWebSocket *)webSocket didCloseWithCode:(NSInteger)code reason:(NSString *)reason wasClean:(BOOL)wasClean {\n    NSLog(@\"The websocket closed with code: %@, reason: %@, wasClean: %@\", @(code), reason, (wasClean) ? @\"YES\" : @\"NO\");\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Playing a MIDI File with MIKMIDISequencer in Swift\nDESCRIPTION: This code shows how to load a MIDI file into a MIKMIDISequence and play it using a MIKMIDISequencer. It initializes a sequencer with the loaded sequence and then starts playback. This assumes that midiFileURL is a valid URL pointing to a MIDI file.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/MIKMIDI/README.md#2025-04-16_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet sequence = try! MIKMIDISequence(fileAt: midiFileURL)\nlet sequencer = MIKMIDISequencer(sequence: sequence)\nsequencer.startPlayback()\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Server in Objective-C\nDESCRIPTION: Shows how to implement a WebSocket server using PSWebSocketServer. Includes server setup, connection acceptance handling, and delegate methods for managing multiple WebSocket connections.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/PocketSocket/README.md#2025-04-16_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\n#import <PSWebSocket/PSWebSocketServer.h>\n\n@interface AppDelegate() <PSWebSocketServerDelegate>\n\n@property (nonatomic, strong) PSWebSocketServer *server;\n\n@end\n@implementation AppDelegate\n\n- (void)applicationDidFinishLaunching:(NSNotification *)notification {\n    _server = [PSWebSocketServer serverWithHost:nil port:9001];\n    _server.delegate = self;\n    [_server start];\n}\n\n#pragma mark - PSWebSocketServerDelegate\n\n- (void)serverDidStart:(PSWebSocketServer *)server {\n    NSLog(@\"Server did start…\");\n}\n- (void)serverDidStop:(PSWebSocketServer *)server {\n    NSLog(@\"Server did stop…\");\n}\n- (BOOL)server:(PSWebSocketServer *)server acceptWebSocketWithRequest:(NSURLRequest *)request {\n    NSLog(@\"Server should accept request: %@\", request);\n    return YES;\n}\n- (void)server:(PSWebSocketServer *)server webSocket:(PSWebSocket *)webSocket didReceiveMessage:(id)message {\n    NSLog(@\"Server websocket did receive message: %@\", message);\n}\n- (void)server:(PSWebSocketServer *)server webSocketDidOpen:(PSWebSocket *)webSocket {\n    NSLog(@\"Server websocket did open\");\n}\n- (void)server:(PSWebSocketServer *)server webSocket:(PSWebSocket *)webSocket didCloseWithCode:(NSInteger)code reason:(NSString *)reason wasClean:(BOOL)wasClean {\n    NSLog(@\"Server websocket did close with code: %@, reason: %@, wasClean: %@\", @(code), reason, @(wasClean));\n}\n- (void)server:(PSWebSocketServer *)server webSocket:(PSWebSocket *)webSocket didFailWithError:(NSError *)error {\n    NSLog(@\"Server websocket did fail with error: %@\", error);\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Creating NSImage from ASCII representation\nDESCRIPTION: This method creates an NSImage from an array of strings representing ASCII art.  It takes an array of strings, a color, and a boolean indicating whether to antialias the image.  The resulting image will have single points, polygons, and ellipses filled with the specified color, while lines will be stroked with that color.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/ASCIImage/README.md#2025-04-16_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\n\"+ (PARImage *)imageWithASCIIRepresentation:(NSArray *)rep\n                                         color:(PARColor *)color\n                               shouldAntialias:(BOOL)shouldAntialias;\"\n```\n\n----------------------------------------\n\nTITLE: Receiving Data from Serial Port in Objective-C\nDESCRIPTION: This snippet implements the ORSSerialPortDelegate protocol to handle incoming data. It shows how to append received data to a text view in an Objective-C application.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/ORSSerialPort/README.md#2025-04-16_snippet_4\n\nLANGUAGE: objective-c\nCODE:\n```\n- (void)serialPort:(ORSSerialPort *)serialPort didReceiveData:(NSData *)data\n{\n    NSString *string = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n    [self.receivedDataTextView.textStorage.mutableString appendString:string];\n    [self.receivedDataTextView setNeedsDisplay:YES];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating NSImage with context handler\nDESCRIPTION: This method provides more advanced options for creating an NSImage from an ASCII representation using a context handler block. The context handler block allows you to modify the drawing context for each shape in the image. The dictionary passed to the block initially contains the ASCIIContextShapeIndex key.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/ASCIImage/README.md#2025-04-16_snippet_3\n\nLANGUAGE: objective-c\nCODE:\n```\n\"+ (PARImage *)imageWithASCIIRepresentation:(NSArray *)rep\n                                contextHandler:(void(^)(NSMutableDictionary *ctx))handler;\"\n```\n\n----------------------------------------\n\nTITLE: SocketRocket SRWebSocket Interface\nDESCRIPTION: This code defines the interface for SRWebSocket, the main WebSocket class in SocketRocket. It includes methods for initializing, opening, closing, and sending data/strings over the WebSocket connection. The delegate property allows you to receive WebSocket events.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/SocketRocket/README.md#2025-04-16_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\n```objective-c\n@interface SRWebSocket : NSObject\n\n// Make it with this\n- (instancetype)initWithURLRequest:(NSURLRequest *)request;\n\n// Set this before opening\n@property (nonatomic, weak) id <SRWebSocketDelegate> delegate;\n\n// Open with this\n- (void)open;\n\n// Close it with this\n- (void)close;\n\n// Send a Data\n- (void)sendData:(nullable NSData *)data error:(NSError **)error;\n\n// Send a UTF8 String\n- (void)sendString:(NSString *)string error:(NSError **)error;\n\n@end\n```\n```\n\n----------------------------------------\n\nTITLE: Sending Data through Serial Port in Objective-C\nDESCRIPTION: This snippet demonstrates sending data from a text field as NSData to the serial port using ORSSerialPort. It shows a practical example of converting a string input to NSData format.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/ORSSerialPort/README.md#2025-04-16_snippet_3\n\nLANGUAGE: objective-c\nCODE:\n```\nNSData *dataToSend = [self.sendTextField.stringValue dataUsingEncoding:NSUTF8StringEncoding];\n[self.serialPort sendData:dataToSend];\n```\n\n----------------------------------------\n\nTITLE: SocketRocket SRWebSocketDelegate Protocol\nDESCRIPTION: This code defines the SRWebSocketDelegate protocol, which allows you to receive callbacks for WebSocket events. It includes methods for when the WebSocket opens, receives a message (string or data), fails with an error, or closes.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/SocketRocket/README.md#2025-04-16_snippet_3\n\nLANGUAGE: objective-c\nCODE:\n```\n```objective-c\n@protocol SRWebSocketDelegate <NSObject>\n\n@optional\n\n- (void)webSocketDidOpen:(SRWebSocket *)webSocket;\n\n- (void)webSocket:(SRWebSocket *)webSocket didReceiveMessageWithString:(NSString *)string;\n- (void)webSocket:(SRWebSocket *)webSocket didReceiveMessageWithData:(NSData *)data;\n\n- (void)webSocket:(SRWebSocket *)webSocket didFailWithError:(NSError *)error;\n- (void)webSocket:(SRWebSocket *)webSocket didCloseWithCode:(NSInteger)code reason:(nullable NSString *)reason wasClean:(BOOL)wasClean;\n\n@end\n```\n```\n\n----------------------------------------\n\nTITLE: CocoaLumberjack as a swift-log backend\nDESCRIPTION: This Swift code snippet shows how to integrate CocoaLumberjack as a backend for the swift-log package. It configures the logger upon application startup to ensure all log messages are handled by CocoaLumberjack.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/CocoaLumberjack/README.md#2025-04-16_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport CocoaLumberjack\nimport CocoaLumberjackSwiftLogBackend\nimport Logging\n\n// In your application's entry point (e.g. AppDelegate):\nDDLog.add(DDOSLogger.sharedInstance) // Configure loggers\nLoggingSystem.bootstrapWithCocoaLumberjack() // Use CocoaLumberjack as swift-log backend\n```\n\n----------------------------------------\n\nTITLE: Initializing Test Suite Setup in Objective-C\nDESCRIPTION: Shows how to set up a test class for a Hammerspoon extension using XCTest framework. The code demonstrates the basic structure of a test file and how to load associated Lua test files.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/CONTRIBUTING.md#2025-04-16_snippet_5\n\nLANGUAGE: objective-c\nCODE:\n```\n[super setUpWithRequire:@\"test_foo\"];\n```\n\n----------------------------------------\n\nTITLE: Detailed Custom Default Error Handler in Lua\nDESCRIPTION: Provides a comprehensive example of a custom default error handler. It handles various error codes, generates an appropriate HTML response, and includes server information.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/extensions/doc/hsdocs/hsminweb/functions.md#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nserver._errorHandlers[\"default\"] = function(code, method, path, headers)\n    if type(code) == \"number\" then code = tostring(code) end\n\n    -- remember that the actual response code returned must be an integer\n    local responseCode = math.floor(tonumber(code))\n    local defaultTitle = hs.httpserver.hsminweb.statusCodes[code]\n    if not defaultTitle then\n        responseCode = 500\n        defaultTitle = \"Unrecognized Status Code\"\n    end\n\n    local responseBody = [[\n<html>\n  <head>\n    <title>]] .. defaultTitle .. [[</title>\n  </head>\n  <body>\n    <H1>HTTP/1.1 ]] .. tostring(responseCode) .. [[ ]] .. defaultTitle .. [[</H1>\n    Requesting the resource, ]] .. headers._.pathParts.URL .. [[, resulted in an error.\n    <br/>]]\n\n    if responseCode ~= math.floor(tonumber(code)) then\n        responseBody = responseBody .. [[\n    In addition, the specified status code, ]] .. code .. [[, is unrecognized.<br/>\n]]\n    end\n\n    responseBody = responseBody .. [[\n    <br/>\n    <hr/>\n    <div align=\"right\">\n      <i>]] .. headers._.serverSoftware .. [[ at ]] .. headers._.queryDate .. [[</i>\n    </div>\n  </body>\n</html>\n]]\n\n    return responseBody, responseCode, headers._.minimalHTMLResponseHeaders\nend\n```\n\n----------------------------------------\n\nTITLE: Detailed Custom 404 Error Handler in Lua\nDESCRIPTION: Provides a more comprehensive example of a custom 404 error handler. It generates an HTML response with details about the requested resource and server information.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/extensions/doc/hsdocs/hsminweb/functions.md#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nserver._errorHandlers[\"404\"] = function(method, path, headers)\n    local responseCode = 404\n    local responseBody = [[\n<html>\n  <head>\n    <title>Not Found</title>\n  </head>\n  <body>\n    <H1>HTTP/1.1 404 Not Found</H1>\n    The requested resource, ]] .. headers._.pathParts.URL .. [[, was not found or is not available.\n    <br/>\n    <br/>\n    <hr/>\n    <div align=\"right\">\n      <i>]] .. headers._.serverSoftware .. [[ at ]] .. headers._.queryDate .. [[</i>\n    </div>\n  </body>\n</html>\n]]\n    local responseHeaders = headers._.minimalHTMLResponseHeaders\n    return responseBody, responseCode, responseHeaders\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing hs.httpserver.hsminweb Server Instance in Lua\nDESCRIPTION: Creates a barebones server instance using hs.httpserver.hsminweb and starts it. The server's port can be identified using the port() method.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/extensions/doc/hsdocs/hsminweb/functions.md#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nserver = require(\"hs.httpserver.hsminweb\").new():start()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Default Error Handler in Lua\nDESCRIPTION: Defines a custom default error handler function that serves as a catch-all for errors without specific handlers. It takes an additional argument for the error code.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/extensions/doc/hsdocs/hsminweb/functions.md#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nserver._errorHandlers[\"default\"] = function(code, method, path, headers)\n    local responseBody, responseCode, responseHeaders = \"\", code, {}\n\n    ... code to fill responseBody and responseHeaders ...\n\n    return responseBody, responseCode, responseHeaders\nend\n```\n\n----------------------------------------\n\nTITLE: Getting the Resource Path (Lua)\nDESCRIPTION: This Lua code snippet retrieves the absolute path to a resource file bundled with the Spoon using the `hs.spoons.resourcePath()` function. The function takes the relative path to the resource within the Spoon's resource directory as input.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/SPOONS.md#2025-04-16_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n-- Get path to a resource bundled with the Spoon\nobj.imagePath = hs.spoons.resourcePath(\"images/someImage.png\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Handler for 404 in Lua\nDESCRIPTION: Defines a custom error handler function for 404 (Not Found) errors. The function generates a response body, sets the response code, and returns headers.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/extensions/doc/hsdocs/hsminweb/functions.md#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nserver._errorHandlers[\"404\"] = function(method, path, headers)\n    local responseBody, responseCode, responseHeaders = \"\", 404, {}\n\n    ... code to fill responseBody and responseHeaders ...\n\n    return responseBody, responseCode, responseHeaders\nend\n```\n\n----------------------------------------\n\nTITLE: Loading Lua Files in a Spoon (Lua)\nDESCRIPTION: This Lua code snippet demonstrates how to load and execute an additional Lua file within a Hammerspoon Spoon using `dofile()` and `hs.spoons.resourcePath()`.  This approach is required instead of `require()`.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/SPOONS.md#2025-04-16_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\ndofile(hs.spoons.resourcePath(\"someCode.lua\"))\n```\n\n----------------------------------------\n\nTITLE: Documenting Functions in Lua\nDESCRIPTION: This snippet shows the documentation format for functions in Lua extensions for Hammerspoon. It includes the function name, parameters, return values, and optional notes.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/CONTRIBUTING.md#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n```lua\n--- hs.foo.someFunction(bar[, baz]) -> string or nil\n--- Function\n--- This is a one-line description of the function\n---\n--- Parameters:\n---  * bar - A value for doing something\n---  * baz - Some optional other value. Defaults to 'abc'\n---\n--- Returns:\n---  * A string with some important result, or nil if an error occurred\n---\n--- Notes:\n---  * An important first note\n---  * Another important note\n```\n```\n\n----------------------------------------\n\nTITLE: Getting the Spoon's Script Path (Lua)\nDESCRIPTION: This Lua code snippet retrieves the absolute path to the Spoon's `init.lua` script using the `hs.spoons.scriptPath()` function. This is useful for locating other files relative to the main script.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/SPOONS.md#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n-- Get path to Spoon's init.lua script\nobj.spoonPath = hs.spoons.scriptPath()\n```\n\n----------------------------------------\n\nTITLE: Documenting Methods in Lua\nDESCRIPTION: This snippet shows the documentation format for methods in Lua extensions for Hammerspoon. It includes the method name, parameters, return values, and optional notes. Methods are differentiated by the presence of a `:`. \nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/CONTRIBUTING.md#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n```lua\n--- hs.foo:someMethod() -> bool\n--- Method\n--- This is a one-line description of the method\n---\n--- Parameters:\n---  * None\n---\n--- Returns:\n---  * Boolean indicating whether the operation succeeded.\n```\n```\n\n----------------------------------------\n\nTITLE: Documenting Variables in Lua\nDESCRIPTION: This snippet shows the documentation format for variables in Lua extensions for Hammerspoon. It includes the variable name, type, and a description.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n```lua\n--- hs.foo.someVariable\n--- Variable\n--- This lets you influence the behaviour of this extension\n```\n```\n\n----------------------------------------\n\nTITLE: Adding SocketRocket to Podfile with CocoaPods\nDESCRIPTION: This code snippet shows how to add SocketRocket to your Podfile using CocoaPods. CocoaPods is a dependency manager for Swift and Objective-C Cocoa projects. Adding this line to your Podfile will install SocketRocket as a dependency.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/SocketRocket/README.md#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n```ruby\npod 'SocketRocket'\n```\n```\n\n----------------------------------------\n\nTITLE: Documenting Constants in Lua\nDESCRIPTION: This snippet shows the documentation format for constants in Lua extensions for Hammerspoon.  It includes the constant name, type, and a description.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua\n--- hs.foo.someConstant\n--- Constant\n--- This defines the value of a thing\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Spoon Hotkey Binding Method in Lua\nDESCRIPTION: Shows how to implement the bindHotKeys method using hs.spoons.bindHotkeysToSpec\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/SPOONS.md#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nfunction MySpoon:bindHotKeys(mapping)\n  local spec = {\n    show = hs.fnutils.partial(self.showMethod, self),\n    hide = hs.fnutils.partial(self.hideMethod, self),\n  }\n  hs.spoons.bindHotkeysToSpec(spec, mapping)\n  return self\nend\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaLumberjack with CocoaPods for Objective-C\nDESCRIPTION: This snippet shows the installation of CocoaLumberjack in an Objective-C project using CocoaPods. It sets the iOS platform version and specifies the required pod for CocoaLumberjack.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/CocoaLumberjack/README.md#2025-04-16_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nplatform :ios, '11.0'\n\ntarget 'SampleTarget' do\n    pod 'CocoaLumberjack'\nend\n```\n\n----------------------------------------\n\nTITLE: Example Spoon Hotkey Configuration in Lua\nDESCRIPTION: Demonstrates the structure for configuring hotkeys with optional alert messages\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/SPOONS.md#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n{\n    show={{\"cmd\", \"alt\"}, \"s\", message=\"Show\"},\n    hide={{\"cmd\", \"alt\"}, \"h\"}\n  }\n```\n\n----------------------------------------\n\nTITLE: Generating docs.json for Hammerspoon Spoon (Bash)\nDESCRIPTION: This command generates a `docs.json` file containing the docstrings for a Hammerspoon Spoon. It uses the Hammerspoon command-line tool `hs` with the `hs.doc.builder.genJSON` function to extract docstrings and filters out lines starting with `--`.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/SPOONS.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd /path/too/your/Spoon\nhs -c \"hs.doc.builder.genJSON(\"$(pwd)\")\" | grep -v \"^--\" > docs.json\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaLumberjack with Swift Package Manager\nDESCRIPTION: This snippet allows integration of CocoaLumberjack using Swift Package Manager. It provides the required package dependency URL that needs to be added to a Package.swift file.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/CocoaLumberjack/README.md#2025-04-16_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n.package(url: \"https://github.com/CocoaLumberjack/CocoaLumberjack.git\", from: \"3.8.0\"),\n```\n\n----------------------------------------\n\nTITLE: Data Logging Example\nDESCRIPTION: This example demonstrates how user data might be logged using CocoaLumberjack. It's important to be aware of potential data collection through the framework and comply with Apple's privacy details policy.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/CocoaLumberjack/README.md#2025-04-16_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n\"_Example_: `DDLogInfo(\\\"User: \\\\\\(myUser)\\\")` will add the `myUser` info to the logs, so if those are forwarded to a 3rd party or sent via email, that may qualify as data collection.\"\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaLumberjack with CocoaPods for Swift\nDESCRIPTION: This snippet demonstrates how to set up CocoaLumberjack in a Swift project using CocoaPods. The given code block specifies the platform and the target settings that integrate CocoaLumberjack as a Swift dependency.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/CocoaLumberjack/README.md#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nplatform :ios, '11.0'\n\ntarget 'SampleTarget' do\n  use_frameworks!\n  pod 'CocoaLumberjack/Swift'\nend\n```\n\n----------------------------------------\n\nTITLE: Using ORSSerialPortManager in Objective-C\nDESCRIPTION: This snippet shows how to access the available serial ports using ORSSerialPortManager and can be useful for applications that need to detect and utilize multiple serial devices.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/ORSSerialPort/README.md#2025-04-16_snippet_5\n\nLANGUAGE: objective-c\nCODE:\n```\nNSArray *ports = [[ORSSerialPortManager sharedSerialPortManager] availablePorts];\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaLumberjack with Carthage\nDESCRIPTION: This code snippet demonstrates how to set up CocoaLumberjack using Carthage by indicating the repository URL in a Cartfile. It simplifies dependency management for Swift and Objective-C.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/CocoaLumberjack/README.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ngithub \"CocoaLumberjack/CocoaLumberjack\"\n```\n\n----------------------------------------\n\nTITLE: Objective-C Import\nDESCRIPTION: This snippet shows how to import CocoaAsyncSocket in Objective-C.  It illustrates both the Clang Modules import and the traditional `#import` method for GCDAsyncSocket and GCDAsyncUdpSocket.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/CocoaAsyncSocket/README.markdown#2025-04-16_snippet_3\n\nLANGUAGE: obj-c\nCODE:\n```\n```obj-c\n// When using Clang Modules:\n@import CocoaAsyncSocket; \n\n// or when not:\n#import \"GCDAsyncSocket.h\" // for TCP\n#import \"GCDAsyncUdpSocket.h\" // for UDP\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Hammerspoon Documentation with Make\nDESCRIPTION: Commands to install required Python dependencies and generate Hammerspoon documentation. The output will be generated in the build/ directory as a Dash docset bundle and HTML docs.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/scripts/docs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install --user -r requirements.txt\n$ make docs\n```\n\n----------------------------------------\n\nTITLE: CocoaPods Installation\nDESCRIPTION: This snippet demonstrates how to install CocoaAsyncSocket using CocoaPods. It includes the `use_frameworks!` directive, which is necessary for projects targeting iOS 8+ or using Swift. It specifies the dependency on the CocoaAsyncSocket pod.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/CocoaAsyncSocket/README.markdown#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n````ruby\nuse_frameworks! # Add this if you are targeting iOS 8+ or using Swift\npod 'CocoaAsyncSocket'  \n````\n```\n\n----------------------------------------\n\nTITLE: Swift Package Manager Dependency\nDESCRIPTION: This snippet demonstrates how to add CocoaAsyncSocket as a Swift Package Manager dependency.  It specifies the URL of the GitHub repository and the minimum version (7.6.4) from which to fetch the library. This allows the project to depend on \"CocoaAsyncSocket\" in necessary targets.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/CocoaAsyncSocket/README.markdown#2025-04-16_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n```swift\ndependencies: [\n    .package(url: \"https://github.com/robbiehanson/CocoaAsyncSocket\", from: \"7.6.4\")\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Setting up virtualenv for TestChat server\nDESCRIPTION: This code snippet shows how to set up a virtual environment in the SocketRocket root directory.  It uses virtualenv to isolate dependencies.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/SocketRocket/README.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n```bash\nmake test\n```\n```\n\n----------------------------------------\n\nTITLE: Carthage Installation\nDESCRIPTION: This snippet shows how to add CocoaAsyncSocket as a dependency using Carthage.  It specifies the GitHub repository and the 'master' branch to use for fetching the library. The resultant frameworks will be stored in the Carthage/Build directory.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/CocoaAsyncSocket/README.markdown#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ngithub \"robbiehanson/CocoaAsyncSocket\" \"master\"\n```\n```\n\n----------------------------------------\n\nTITLE: Swift Import\nDESCRIPTION: This snippet shows how to import the CocoaAsyncSocket library in Swift.  It uses the `import` keyword followed by the module name.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/CocoaAsyncSocket/README.markdown#2025-04-16_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n```swift\nimport CocoaAsyncSocket\n```\n```\n\n----------------------------------------\n\nTITLE: Starting the TestChat Server with Python\nDESCRIPTION: This command starts the Python-based TestChat server. The server listens for WebSocket connections and broadcasts messages between connected clients.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/SocketRocket/README.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n```bash\npython TestChatServer/py/chatroom.py\n```\n```\n\n----------------------------------------\n\nTITLE: Installing ASCIImage via CocoaPods\nDESCRIPTION: This code snippet shows how to add ASCIImage to your project using CocoaPods. It requires a Podfile to be present in your project directory. Once the pod is added, running pod install will download and integrate the ASCIImage framework into your project.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/ASCIImage/README.md#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npod \"ASCIImage\"\n```\n\n----------------------------------------\n\nTITLE: Example ASCII Art Representation - Objective-C\nDESCRIPTION: This code snippet provides an example of how to create an ASCII representation of an image using an NSArray in Objective-C. Each string in the array represents a row of the ASCII art, where spaces are ignored, and the arrangement creates a visual representation.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/ASCIImage/README.md#2025-04-16_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\nNSArray *asciiRepresentation =\n@[\n@\"· · · 1 2 · · · · · \",\n@\"· · · A # # · · · · \",\n@\"· · · · # # # · · · \",\n@\"· · · · · # # # · · \",\n@\"· · · · · · 9 # 3 · \",\n@\"· · · · · · 8 # 4 · \",\n@\"· · · · · # # # · · \",\n@\"· · · · # # # · · · \",\n@\"· · · 7 # # · · · · \",\n@\"· · · 6 5 · · · · · \",\n];\n```\n\n----------------------------------------\n\nTITLE: ASCIImage Context Keys\nDESCRIPTION: These are the keys for the dictionary context passed to the contextHandler block. These keys are used to modify the appearance of each shape. They allow you to control the fill color, stroke color, line width, whether to close the shape, and whether to antialias the shape.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/ASCIImage/README.md#2025-04-16_snippet_4\n\nLANGUAGE: objective-c\nCODE:\n```\n \"extern NSString * const ASCIIContextShapeIndex;\n    extern NSString * const ASCIIContextFillColor;\n    extern NSString * const ASCIIContextStrokeColor;\n    extern NSString * const ASCIIContextLineWidth;\n    extern NSString * const ASCIIContextShouldClose;\n    extern NSString * const ASCIIContextShouldAntialias;\"\n```\n\n----------------------------------------\n\nTITLE: Adding SocketRocket to Cartfile with Carthage\nDESCRIPTION: This code snippet shows how to add SocketRocket to your Cartfile using Carthage. Carthage is a decentralized dependency manager for Swift and Objective-C Cocoa projects. Adding this line to your Cartfile will allow Carthage to build SocketRocket and integrate it into your project.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/SocketRocket/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n```\ngithub \"facebook/SocketRocket\"\n```\n```\n\n----------------------------------------\n\nTITLE: Running Short Tests with Make\nDESCRIPTION: This code snippet shows how to run the short tests from the command line using the `make test` command. This command executes a predefined set of tests for the SocketRocket library.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/SocketRocket/README.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n```bash\n  make test\n```\n```\n\n----------------------------------------\n\nTITLE: Running All Tests with Make\nDESCRIPTION: This code snippet shows how to run all tests, including performance tests, using the `make test_all` command. This command executes the complete test suite for the SocketRocket library.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/SocketRocket/README.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n```bash\n  make test_all\n```\n```\n\n----------------------------------------\n\nTITLE: Activating virtualenv and installing tornado for TestChat Server\nDESCRIPTION: These commands activate the virtual environment and install the Tornado web framework, which is required to run the Python TestChat server. The `source` command activates the environment, and `pip install` installs the necessary Tornado package.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/SocketRocket/README.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n```bash\nsource .env/bin/activate\npip install git+https://github.com/tornadoweb/tornado.git\n```\n```\n\n----------------------------------------\n\nTITLE: Running the TestChat Server with Go\nDESCRIPTION: These commands navigate to the Go implementation of the TestChat server and then runs it. The Go server provides the same functionality as the Python version but is implemented in Go.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/SocketRocket/README.md#2025-04-16_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n```bash\ncd TestChatServer/go\ngo run chatroom.go\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Spoon Path in Lua\nDESCRIPTION: Shows how to modify the package.path to include additional directories for Spoon loading\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/SPOONS.md#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Look for Spoons in ~/.hammerspoon/MySpoons as well\npackage.path = package.path .. \";\" ..  hs.configdir .. \"/MySpoons/?.spoon/init.lua\"\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Hammerspoon using script\nDESCRIPTION: This snippet shows the command to run the rebuild script for Hammerspoon. Running this script streamlines the build process, making local rebuilds more convenient.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\".\\/scripts/rebuild.sh\"\n```\n\n----------------------------------------\n\nTITLE: Running Lua Tests with XCTest Macro\nDESCRIPTION: Macro used within test methods to execute corresponding Lua test functions. The macro matches the Objective-C test method name with a Lua function name.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/CONTRIBUTING.md#2025-04-16_snippet_6\n\nLANGUAGE: objective-c\nCODE:\n```\nRUN_LUA_TEST()\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests in GitHub Actions\nDESCRIPTION: Macro used to skip specific tests when running in GitHub Actions environment, typically for tests requiring special hardware or network resources.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/CONTRIBUTING.md#2025-04-16_snippet_7\n\nLANGUAGE: objective-c\nCODE:\n```\nSKIP_IN_GITHUB_ACTIONS()\n```\n\n----------------------------------------\n\nTITLE: Handling Objective-C ARC Semantic Issue\nDESCRIPTION: This Objective-C snippet addresses a common build issue related to ARC when integrating CocoaLumberjack. The suggested code will help to define a legacy message tag to prevent conflicts.\nSOURCE: https://github.com/Hammerspoon/hammerspoon/blob/master/Pods/CocoaLumberjack/README.md#2025-04-16_snippet_6\n\nLANGUAGE: objective-c\nCODE:\n```\n#define DD_LEGACY_MESSAGE_TAG 0\n```"
  }
]