[
  {
    "owner": "futunnopen",
    "repo": "py-futu-api",
    "content": "TITLE: Futu API Quick Start Example\nDESCRIPTION: This Python snippet demonstrates how to use the Futu API for basic market data retrieval and trading operations. It initializes quote and trade contexts, retrieves market data, executes a trade, and then closes the contexts. Requires the `futu` package to be installed.\nSOURCE: https://github.com/futunnopen/py-futu-api/blob/master/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# 导入futu-api\nimport futu as ft\n\n# 实例化行情上下文对象\nquote_ctx = ft.OpenQuoteContext(host=\"127.0.0.1\", port=11111)\n\n# 上下文控制\nquote_ctx.start()              # 开启异步数据接收\nquote_ctx.set_handler(ft.TickerHandlerBase())  # 设置用于异步处理数据的回调对象(可派生支持自定义)\n\n# 低频数据接口\nmarket = ft.Market.HK\ncode = 'HK.00123'\ncode_list = [code]\nplate = 'HK.BK1107'\nprint(quote_ctx.get_trading_days(market, start=None, end=None))   # 获取交易日\nprint(quote_ctx.get_stock_basicinfo(market, stock_type=ft.SecurityType.STOCK))   # 获取股票信息\nprint(quote_ctx.get_autype_list(code_list))                                  # 获取复权因子\nprint(quote_ctx.get_market_snapshot(code_list))                              # 获取市场快照\nprint(quote_ctx.get_plate_list(market, ft.Plate.ALL))                         # 获取板块集合下的子板块列表\nprint(quote_ctx.get_plate_stock(plate))                         # 获取板块下的股票列表\n\n# 高频数据接口\nquote_ctx.subscribe(code, [ft.SubType.QUOTE, ft.SubType.TICKER, ft.SubType.K_DAY, ft.SubType.ORDER_BOOK, ft.SubType.RT_DATA, ft.SubType.BROKER])\nprint(quote_ctx.get_stock_quote(code))  # 获取报价\nprint(quote_ctx.get_rt_ticker(code))   # 获取逐笔\nprint(quote_ctx.get_cur_kline(code, num=100, ktype=ft.KLType.K_DAY))   #获取当前K线\nprint(quote_ctx.get_order_book(code))       # 获取摆盘\nprint(quote_ctx.get_rt_data(code))          # 获取分时数据\nprint(quote_ctx.get_broker_queue(code))     # 获取经纪队列\n\n# 停止异步数据接收\nquote_ctx.stop()\n\n# 关闭对象\nquote_ctx.close()\n\n# 实例化港股交易上下文对象\ntrade_hk_ctx = ft.OpenHKTradeContext(host=\"127.0.0.1\", port=11111)\n\n# 交易接口列表\nprint(trade_hk_ctx.unlock_trade(password='123456'))                # 解锁接口\nprint(trade_hk_ctx.accinfo_query(trd_env=ft.TrdEnv.SIMULATE))      # 查询账户信息\nprint(trade_hk_ctx.place_order(price=1.1, qty=2000, code=code, trd_side=ft.TrdSide.BUY, order_type=ft.OrderType.NORMAL, trd_env=ft.TrdEnv.SIMULATE))  # 下单接口\nprint(trade_hk_ctx.order_list_query(trd_env=ft.TrdEnv.SIMULATE))      # 查询订单列表\nprint(trade_hk_ctx.position_list_query(trd_env=ft.TrdEnv.SIMULATE))    # 查询持仓列表\n\ntrade_hk_ctx.close()\n\n```\n\n----------------------------------------\n\nTITLE: Installing Futu API with pip\nDESCRIPTION: This snippet shows how to install the futu-api package using pip. This command is necessary to use the Futu OpenAPI Python library.\nSOURCE: https://github.com/futunnopen/py-futu-api/blob/master/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install futu-api\n```\n\n----------------------------------------\n\nTITLE: Defining FtEnum Abstract Base Class - Python\nDESCRIPTION: This code defines an abstract base class `FtEnum` that provides a structure for creating enumerations.  It includes methods `to_number` and `to_string` for converting between string and integer representations of enum values. The `load_dic` method is an abstract method meant to be implemented by subclasses to define the mapping between strings and numbers.\nSOURCE: https://github.com/futunnopen/py-futu-api/blob/master/futu/tools/template_head.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# -*- coding: utf-8 -*-\n\"\"\"\n    Constant collection\n\"\"\"\n\nfrom abc import abstractmethod\n\nclass FtEnum(object):\n\n    def __init__(self):\n        self.str_dic = self.load_dic()\n        \"\"\"逆转kv对\"\"\"\n        self.number_dic = dict()\n        for k, v in self.str_dic.items():\n            self.number_dic[v] = k\n\n    @abstractmethod\n    def load_dic(self):\n        return {\n        }\n\n    @classmethod\n    def to_number(cls, str_value):\n        obj = cls()\n        if not isinstance(str_value, str):\n            return False, obj.__class__.__name__ + \" input parameter must str!\"\n\n        if str_value in obj.str_dic:\n            return True, obj.str_dic[str_value]\n        else:\n            return False, obj.__class__.__name__ + \" input parameter is incorrect!\"\n\n    @classmethod\n    def to_string(cls, number_value):\n        obj = cls()\n        if not isinstance(number_value, int):\n            return False, obj.__class__.__name__ + \" input parameter must int!\"\n\n        if number_value in obj.number_dic:\n            return True, obj.number_dic[number_value]\n        else:\n            return False, str(number_value) + \" cannot be converted to SortField Type!\"\n\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Class Structure - Python\nDESCRIPTION: This code snippet defines the structure of an Enum class. It includes a class definition inheriting from FtEnum, a placeholder for variable code, and a method 'load_dic' that returns a dictionary. The '{classname}', '{variablecode}', and '{diccode}' are intended to be replaced with actual values to generate the Enum class.\nSOURCE: https://github.com/futunnopen/py-futu-api/blob/master/futu/tools/template_code.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# {classdescription}\nclass {classname}(FtEnum):\n{variablecode}\n\n    def load_dic(self):\n        return {{\n{diccode}\n        }}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example\nDESCRIPTION: This shows the directory structure of the futu-api project.  It gives a high level overview of where common framework code, examples, quote interfaces, and trade interfaces can be found.\nSOURCE: https://github.com/futunnopen/py-futu-api/blob/master/README.md#_snippet_2\n\nLANGUAGE: tree\nCODE:\n```\n.\n├── futu\n│   ├── common #主要框架代码\n│   │   ├── callback_executor.py\n│   │   ├── comm_add_path.py\n│   │   ├── conn_key.txt\n│   │   ├── conn_mng.py\n│   │   ├── constant.py\n│   │   ├── err.py\n│   │   ├── ft_logger.py\n│   │   ├── handler_context.py\n│   │   ├── __init__.py\n│   │   ├── network_manager.py\n│   │   ├── open_context_base.py\n│   │   ├── pb\n│   │   │   └── __init__.py\n│   │   ├── pbjson.py\n│   │   ├── sys_config.py\n│   │   └── utils.py\n│   ├── examples #一些简单的演示demo\n│   │   ├── analysis\n│   │   │   ├── broker_analysis.py\n│   │   │   ├── orderbook_analysis.py\n│   │   │   └── ticker_analysis.py\n│   │   ├── check_all_get_push.py\n│   │   ├── __init__.py\n│   │   ├── loop_get_mkt_snapshot.py\n│   │   ├── macd.py\n│   │   ├── simple.py\n│   │   ├── stocksell.py\n│   │   └── tiny_quant #这里是一个历史遗留的复杂回测框架，暂时继续保留两个demo，这里建议开发者自己找好用的回测框架，不要再依赖这个破碎框架（裁剪自vnpy）\n│   │       ├── demo\n│   │       │   ├── __init__.py\n│   │       │   ├── tq_macd\n│   │       │   │   ├── __init__.py\n│   │       │   │   ├── setting.json\n│   │       │   │   └── TinyStrateMACD.py\n│   │       │   └── tq_sample\n│   │       │       ├── __init__.py\n│   │       │       ├── setting.json\n│   │       │       └── TinyStrateSample.py\n│   │       ├── __init__.py\n│   │       └── tiny_quant_frame #裁剪自vnpy\n│   │           ├── event\n│   │           │   ├── eventEngine.py\n│   │           │   ├── eventType.py\n│   │           │   └── __init__.py\n│   │           ├── FutuDataEvent.py\n│   │           ├── FutuMarketEvent.py\n│   │           ├── __init__.py\n│   │           ├── setting.json\n│   │           ├── TinyDefine.py\n│   │           ├── TinyQuantBase.py\n│   │           ├── TinyQuantFrame.py\n│   │           ├── TinyStrateBase.py\n│   │           └── TinyStrateSample.py\n│   ├── __init__.py\n│   ├── quote #行情相关接口代码\n│   │   ├── __init__.py\n│   │   ├── open_quote_context.py\n│   │   ├── quote_query.py\n│   │   └── quote_response_handler.py\n│   ├── trade #交易相关接口代码\n│   │   ├── __init__.py\n│   │   ├── open_trade_context.py\n│   │   ├── trade_query.py\n│   │   └── trade_response_handler.py\n│   └── VERSION.txt\n├── setup\n│   ├── PyCrypto-Wheels.url\n│   └── .url\n└── setup.py\n\n```\n\n----------------------------------------\n\nTITLE: Importing Protobuf Modules - Python\nDESCRIPTION: This code imports the `Qot_Common_pb2` module from the `futu.common.pb` package. This module likely contains protobuf definitions used within the Futu API for data serialization and communication.\nSOURCE: https://github.com/futunnopen/py-futu-api/blob/master/futu/tools/template_head.txt#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom futu.common.pb import Qot_Common_pb2\n```\n\n----------------------------------------\n\nTITLE: RSA Private Key PEM\nDESCRIPTION: This is an RSA private key encoded using PEM (Privacy Enhanced Mail) format. This format is commonly used to store cryptographic keys, certificates, and other data. The key is enclosed between the \"-----BEGIN RSA PRIVATE KEY-----\" and \"-----END RSA PRIVATE KEY-----\" markers, and the content is base64 encoded.\nSOURCE: https://github.com/futunnopen/py-futu-api/blob/master/futu/common/conn_key.txt#_snippet_0\n\nLANGUAGE: PEM\nCODE:\n```\n-----BEGIN RSA PRIVATE KEY-----\\nMIICXAIBAAKBgQCx3W78hx5dQxg47hGMEj02JAJYP+HdKGWD8QilzeK4eL6QJ9QP\\n+uVYGA5Jp0Ed2AaV+zQrT/BCe6z5j/Qd5B0eY2cFlgk+/hbAt7A4wcSAbby8nONw\\n0fZTglU78FhLUih84Int5HO0Fr3WLUDvpE+TgS3l/2u5ym6H6fvsdrdNCwIDAQAB\\nAoGAHep/s2vKmKcjWNf6DZQ3xXZzCoLcK4WS5YlSCglCHAL7EmYQjguGLbYGGS9P\\njYR7Pxi8YpiUcao5otQqnCh1GRFouU397D3h+bf/bQXINZcv3sxKFrXm9MNVaBJD\\nW4BcC3HGfnlaIVTKU+qGkeA1BydP5AQyxsGOq00IUeGK4uECQQD/5xHLDwhwYFyc\\nMK4xMnlrvne8TSlPBciWfrxQ7V/X0eP/HQ20VkVxc0tFD91aLrCap6OYcNV9jwJN\\nwTQLt5wbAkEAse7C75LKW0+cMcROvAR3qLV2LbGjLW+cH6WmEP9CEGxi0aJg4Gs3\\noSRYfaC/RLI87sSb0DC5+mTswXduLGpB0QJAJk0ec6cHW1KA6fu7Rq/ITqEOaMef\\nxC0YbbYAV5h/vNy0ZE2j7HbxI97eyDJsrf/I/QzURo+01HsgHCUrtglAOwJBAKiW\\ncA7sh1zS5kxlErCkjvfDz1BmIhT3zfZSTjGGmYLUHyE/eAjKra+5rzqA5xjgxEj6\\n8iLlOCFeJND+Jt5gYzECQH+HtFilF1SxGS4AHrJomHaMhk/IazjtUnLuFM/DuZ/h\\nsxTqXpBBCtTqcAotMlx4ZJQYL3f2PmI2Q/o0NUMt40w=\\n-----END RSA PRIVATE KEY-----\n```"
  }
]