[
  {
    "owner": "alonrbar",
    "repo": "easy-template-x",
    "content": "TITLE: Generating Documents with Node.js using easy-template-x\nDESCRIPTION: Example showing how to read a template file, process it with data, and save the output document in Node.js. Uses fs module for file operations and demonstrates basic template processing.\nSOURCE: https://github.com/alonrbar/easy-template-x/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as fs from 'fs';\nimport { TemplateHandler } from 'easy-template-x';\n\n// 1. read template file\nconst templateFile = fs.readFileSync('myTemplate.docx');\n\n// 2. process the template\nconst data = {\n    posts: [\n        { author: 'Alon Bar', text: 'Very important\\ntext here!' },\n        { author: 'Alon Bar', text: 'Forgot to mention that...' }\n    ]\n};\n\nconst handler = new TemplateHandler();\nconst doc = await handler.process(templateFile, data);\n\n// 3. save output\nfs.writeFileSync('myTemplate - output.docx', doc);\n```\n\n----------------------------------------\n\nTITLE: Generating Documents in Browser using easy-template-x\nDESCRIPTION: Example demonstrating document template processing in browser environment using fetch API to load template and blob handling for saving the output file.\nSOURCE: https://github.com/alonrbar/easy-template-x/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TemplateHandler } from 'easy-template-x';\n\n// 1. read template file\nconst response = await fetch('http://somewhere.com/myTemplate.docx');\nconst templateFile = await response.blob();\n\n// 2. process the template\nconst data = {\n    posts: [\n        { author: 'Alon Bar', text: 'Very important\\ntext here!' },\n        { author: 'Alon Bar', text: 'Forgot to mention that...' }\n    ]\n};\n\nconst handler = new TemplateHandler();\nconst doc = await handler.process(templateFile, data);\n\n// 3. save output\nsaveFile('myTemplate - output.docx', doc);\n\nfunction saveFile(filename, blob) {\n    const blobUrl = URL.createObjectURL(blob);\n    let link = document.createElement(\"a\");\n    link.download = filename;\n    link.href = blobUrl;\n    document.body.appendChild(link);\n    link.click();\n    setTimeout(() => {\n        link.remove();\n        window.URL.revokeObjectURL(blobUrl);\n        link = null;\n    }, 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Handler Options in Easy Template X\nDESCRIPTION: Demonstrates the full set of configuration options available when creating a new TemplateHandler instance, including plugins, content types, delimiters, and extensions.\nSOURCE: https://github.com/alonrbar/easy-template-x/blob/master/README.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst handler = new TemplateHandler({\n\n    plugins: createDefaultPlugins(), // TemplatePlugin[]\n\n    defaultContentType: TEXT_CONTENT_TYPE, // string \n\n    containerContentType: LOOP_CONTENT_TYPE, // string\n\n    delimiters: { // Partial<Delimiters>\n        tagStart: \"{\",\n        tagEnd: \"}\",\n        containerTagOpen: \"#\",\n        containerTagClose: \"/\",\n        tagOptionsStart: \"[\",\n        tagOptionsEnd: \"]\"\n    },\n\n    maxXmlDepth: 20,\n\n    extensions: { // ExtensionOptions\n        beforeCompilation: undefined, // TemplateExtension[]\n        afterCompilation: undefined // TemplateExtension[]\n    },\n\n    scopeDataResolver: undefined // ScopeDataResolver\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Plugins for easy-template-x\nDESCRIPTION: This example demonstrates how to create a custom plugin by extending the TemplatePlugin class. The example shows the implementation of the RawXmlPlugin which inserts raw XML into the document.\nSOURCE: https://github.com/alonrbar/easy-template-x/blob/master/README.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { officeMarkup, xml } from \"easy-template-x\";\n\n/**\n * A plugin that inserts raw xml to the document.\n */\nexport class RawXmlPlugin extends TemplatePlugin {\n\n    // Declare the unique \"content type\" this plugin handles\n    public readonly contentType = 'rawXml';\n\n    // Plugin logic goes here:\n    public simpleTagReplacements(tag: Tag, data: ScopeData): void {\n        \n        // Get the value to use from the input data.\n        const value = data.getScopeData<RawXmlContent>();\n        if (value && typeof value.xml === 'string') {\n\n            // Tag.xmlTextNode always reference the actual xml text node.\n            // In MS Word each text node is wrapped by a <w:t> node so we retrieve that.\n            const wordTextNode = officeMarkup.query.containingTextNode(tag.xmlTextNode);\n\n            // If the input data contains an \"xml\" string property, parse it and insert \n            // the content next to the placeholder tag.\n            const newNode = xml.parser.parse(value.xml);\n            xml.modify.insertBefore(newNode, wordTextNode);\n        }\n\n        // Remove the placeholder tag.\n        officeMarkup.modify.removeTag(tag.xmlTextNode);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Scope Resolution in Document Templates\nDESCRIPTION: This example demonstrates how to use scope resolution to reference data from an outer scope within a nested loop. This allows defining common data at the top level for use throughout the document.\nSOURCE: https://github.com/alonrbar/easy-template-x/blob/master/README.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"Company\": \"Contoso Ltd.\",\n    \"Employees\": [\n        { \"Surname\": \"Gates\", \"Given name\": \"William\" },\n        { \"Surname\": \"Nadella\", \"Given name\": \"Satya\" },\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Angular-like Expressions with Easy Template X\nDESCRIPTION: Demonstrates how to use a custom scope data resolver to support Angular-like expressions in templates. This enables more advanced template syntax.\nSOURCE: https://github.com/alonrbar/easy-template-x/blob/master/README.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createResolver } from \"easy-template-x-angular-expressions\"\n\nconst handler = new TemplateHandler({\n    scopeDataResolver: createResolver()\n})\n```\n\n----------------------------------------\n\nTITLE: Embedding Images in Documents with easy-template-x\nDESCRIPTION: This code demonstrates how to use the image plugin to embed images into a document. The example shows the data structure required, including image source, format, dimensions, and optional properties like alt text and transparency.\nSOURCE: https://github.com/alonrbar/easy-template-x/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"Kung Fu Hero\": {\n        _type: \"image\",\n        source: fs.readFileSync(\"hero.png\"),\n        format: MimeType.Png,\n        width: 200,\n        height: 200,\n        altText: \"Kung Fu Hero\", // Optional\n        transparencyPercent: 80 // Optional\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Tags in a Template Document\nDESCRIPTION: This example shows how to retrieve the list of tags present in a template document. This can be useful for validating templates or understanding what data needs to be provided.\nSOURCE: https://github.com/alonrbar/easy-template-x/blob/master/README.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TemplateHandler } from 'easy-template-x';\n\nconst templateFile = fs.readFileSync('myTemplate.docx');\n\nconst handler = new TemplateHandler();\nconst tags = await handler.parseTags(templateFile);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Tag Delimiters in Easy Template X\nDESCRIPTION: Shows how to customize tag delimiters and container marks used for loops and conditions in templates. The example changes from the default syntax to Angular-style double braces.\nSOURCE: https://github.com/alonrbar/easy-template-x/blob/master/README.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst handler = new TemplateHandler({\n    delimiters: {\n        tagStart: \"{{\",\n        tagEnd: \"}}\",\n        containerTagOpen: \">>\",\n        containerTagClose: \"<<\"\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Hyperlinks in Documents with easy-template-x\nDESCRIPTION: This code shows how to use the link plugin to insert hyperlinks into a document. The link plugin preserves the original text style while making it clickable with the specified target URL.\nSOURCE: https://github.com/alonrbar/easy-template-x/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"easy\": {\n        _type: 'link',\n        text: 'super easy',  // Optional - if not specified the `target` property will be used\n        target: 'https://github.com/alonrbar/easy-template-x'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extensions in Easy Template X\nDESCRIPTION: Shows how to configure and load extensions in the TemplateHandler. Extensions can be specified to run before or after the standard template processing.\nSOURCE: https://github.com/alonrbar/easy-template-x/blob/master/README.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst handler = new TemplateHandler({\n    extensions: {\n        afterCompilation: [\n            new DataBindingExtension()\n        ]\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Line, Bar & Column Charts in Documents\nDESCRIPTION: This example demonstrates how to use the chart plugin to create line, bar, and column charts. The data structure includes categories for X-axis values, series for Y-axis values, and optional properties for customization like title and colors.\nSOURCE: https://github.com/alonrbar/easy-template-x/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    MyChart: {\n        _type: \"chart\",\n        title: \"Easy Chart\", // Optional\n        categories: {\n            names: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"]\n        },\n        series: [\n            { \n                name: \"Earnings\",  // Optional\n                color: \"#34d399\", // Optional\n                values: [100, 210, 150, 170] \n            },\n            { \n                name: \"Expenses\",\n                color: \"#f87171\",\n                values: [170, 165, 169, 155] \n            },\n        ],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Raw XML to Documents\nDESCRIPTION: This example shows how to use the raw XML plugin to insert custom XML into a document. This can be used for special formatting or features like page breaks that aren't available through other plugins.\nSOURCE: https://github.com/alonrbar/easy-template-x/blob/master/README.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"Dont worry be happy\": {\n        _type: 'rawXml',\n        xml: '<w:sym w:font=\"Wingdings\" w:char=\"F04A\"/>',\n        replaceParagraph: false,  // Optional - should the plugin replace an entire paragraph or just the tag itself\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loop Plugin Data Example\nDESCRIPTION: Sample JSON data structure for the loop plugin demonstrating how to format data for iterating over table rows.\nSOURCE: https://github.com/alonrbar/easy-template-x/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Beers\": [\n        { \"Brand\": \"Carlsberg\", \"Price\": 1 },\n        { \"Brand\": \"Leaf Blonde\", \"Price\": 2 },\n        { \"Brand\": \"Weihenstephan\", \"Price\": 1.5 }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Text Plugin Data Example\nDESCRIPTION: Sample JSON data structure for the text plugin showing how to format input data for text replacement in templates.\nSOURCE: https://github.com/alonrbar/easy-template-x/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"First Tag\": \"Quis et ducimus voluptatum\\nipsam id.\",\n    \"Second Tag\": \"Dolorem sit voluptas magni dolorem molestias.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Pie & Doughnut Charts in Documents\nDESCRIPTION: This code shows how to use the chart plugin to create pie and doughnut charts. These chart types use the same data format as line charts but expect only a single series of values.\nSOURCE: https://github.com/alonrbar/easy-template-x/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    Chart1: {\n        _type: \"chart\",\n        title: \"Easy Chart\", // Optional\n        categories: {\n            names: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"]\n        },\n        series: [\n            { values: [100, 210, 150, 170] },\n        ],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Charts in Documents\nDESCRIPTION: This example shows how to use the chart plugin to create scatter charts. Unlike other chart types, scatter charts don't use categories but instead require x and y coordinates for each data point.\nSOURCE: https://github.com/alonrbar/easy-template-x/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    scatter: {\n        _type: \"chart\",\n        title: \"Easy Scatter Chart\", // Optional\n        series: [\n            { \n                name: \"Earnings\", // Optional\n                color: \"#34d399\", // Optional\n                values: [\n                    { x: 1, y: 310 },\n                    { x: 3, y: 450 },\n                    { x: 4, y: 200 },\n                    { x: 6, y: 200 },\n                ],\n            },\n            { \n                name: \"Expenses\",\n                color: \"#f87171\",\n                values: [\n                    { x: 1, y: 410 },\n                    { x: 2, y: 450 },\n                    { x: 3, y: 200 },\n                    { x: 5, y: 350 },\n                ],\n            },\n        ],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bubble Charts in Documents\nDESCRIPTION: This code demonstrates how to use the chart plugin to create bubble charts. Bubble charts are similar to scatter charts but have an additional size property for each data point that determines the bubble size.\nSOURCE: https://github.com/alonrbar/easy-template-x/blob/master/README.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    bubble: {\n        _type: \"chart\",\n        title: \"Bubble Chart\", // Optional\n        series: [\n            { \n                name: \"Earnings\", // Optional\n                color: \"#34d399\", // Optional\n                values: [\n                    { x: 1, y: 10, size: 10 },\n                    { x: 2, y: 10, size: 20 },\n                    { x: 3, y: 8, size: 40 },\n                    { x: 4, y: 8, size: 30 },\n                ],\n            },\n            { \n                name: \"Expenses\",\n                color: \"#f87171\",\n                values: [\n                    { x: 1, y: 4, size: 40 },\n                    { x: 2, y: 4, size: 20 },\n                    { x: 3, y: 3, size: 30 },\n                ],\n            },\n        ],\n    }\n}\n```"
  }
]