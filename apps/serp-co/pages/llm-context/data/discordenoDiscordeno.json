[
  {
    "owner": "discordeno",
    "repo": "discordeno",
    "content": "TITLE: Add Role to User - Discordeno\nDESCRIPTION: This snippet demonstrates how to add a role to a user when a reaction role button is clicked. It extracts the role ID from the button's custom ID, then uses bot.helpers.addRole to assign the role to the user.  A private message confirms the role addition.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nconst roleId = BigInt(\n    interaction.data.customId.slice('reactionRoles-role-'.length),\n  )\n\n  await interaction.bot.helpers.addRole(\n    interaction.guildId,\n    interaction.user.id,\n    roleId,\n    `Reaction role button for role id ${roleId}`,\n  )\n  await interaction.respond(`I added to you the <@&${roleId}> role.`, {\n    isPrivate: true,\n  })\n```\n\n----------------------------------------\n\nTITLE: Complete Reaction Role Command Definition - Typescript\nDESCRIPTION: This snippet showcases the complete definition of the reaction role command with role, emoji, color, and label options. It utilizes `CreateApplicationCommand` from `@discordeno/types` to define the command structure, including subcommands and options. This provides a single object containing all the data to be registered with Discord.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  CreateApplicationCommand,\n  ApplicationCommandOptionTypes,\n  ButtonStyles,\n} from '@discordeno/types'\n\nconst command: CreateApplicationCommand = {\n  name: 'roles',\n  description: 'Role management on your server.',\n  options: [\n    {\n      name: 'reactions',\n      description: 'Manage the role reactions on your server.',\n      type: ApplicationCommandOptionTypes.SubCommandGroup,\n      options: [\n        {\n          name: 'create',\n          description: 'Create a reaction role on your server.',\n          type: ApplicationCommandOptionTypes.SubCommand,\n          options: [\n            {\n              name: 'role',\n              description: 'What role would you like to set for this button?',\n              type: ApplicationCommandOptionTypes.Role,\n              required: true,\n            },\n            {\n              name: 'emoji',\n              description: \"What would you like to set as this button's emoji?\",\n              type: ApplicationCommandOptionTypes.String,\n              required: true,\n            },\n            {\n              name: 'color',\n              description:\n                \"What color would you like to set as this button's color?\",\n              type: ApplicationCommandOptionTypes.Integer,\n              required: true,\n              choices: [\n                { name: 'Blue', value: ButtonStyles.Primary },\n                { name: 'Green', value: ButtonStyles.Success },\n                { name: 'Grey', value: ButtonStyles.Secondary },\n                { name: 'Red', value: ButtonStyles.Danger },\n              ],\n            },\n            {\n              name: 'label',\n              description:\n                'What would you like to set for the name on this button?',\n              type: ApplicationCommandOptionTypes.String,\n            },\n          ],\n        },\n      ],\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Toggle Role on Button Click - Discordeno\nDESCRIPTION: This snippet demonstrates how to toggle a role on a button click, adding the role if the user doesn't have it and removing it if they do. It checks if the user already has the role, and then either adds or removes the role using bot.helpers.addRole or bot.helpers.removeRole accordingly. A private message is sent to the user confirming the action.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nconst alreadyHasRole = !!interaction.member.roles.find(\n    role => role === roleId,\n  )\n\n  if (alreadyHasRole) {\n    await interaction.bot.helpers.removeRole(\n      interaction.guildId,\n      interaction.user.id,\n      roleId,\n      `Reaction role button for role id ${roleId}`,\n    )\n    await interaction.respond(`I removed from you the <@&${roleId}> role.`, {\n      isPrivate: true,\n    })\n    return\n  }\n\n  await interaction.bot.helpers.addRole(\n    interaction.guildId,\n    interaction.user.id,\n    roleId,\n    `Reaction role button for role id ${roleId}`,\n  )\n  await interaction.respond(`I added to you the <@&${roleId}> role.`, {\n    isPrivate: true,\n  })\n```\n\n----------------------------------------\n\nTITLE: Registering Commands Using the Commands Map in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `commands` map created in the previous step to register Discordeno bot commands. It imports the `commands` map and uses the `upsertGuildApplicationCommands` method from `discordeno/bot` to register all commands in the map for a specific guild ID. It replaces the previous direct command array with the new map.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bot } from './index.js'\n// remove-next-line\nimport roles from './commands/roles.js'\n// insert-next-line\nimport commands from './commands/index.js'\n\n// By now this variable should have your server guild id instead of REPLACE WITH YOUR GUILD ID\nconst guildId = 'REPLACE WITH YOUR GUILD ID'\n\n// remove-next-line\nawait bot.rest.upsertGuildApplicationCommands(guildId, [roles])\n// insert-next-line\nawait bot.rest.upsertGuildApplicationCommands(guildId, [...commands.values()])\n```\n\n----------------------------------------\n\nTITLE: Handle Interaction Create Event Typescript\nDESCRIPTION: This code snippet demonstrates how to handle the `interactionCreate` event in Discordeno. It checks if the interaction type is an application command and then executes the corresponding command with parsed options. This event listener is crucial for handling user commands.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport commands from '../commands/index.js'\nimport { bot } from '../bot.js'\nimport { commandOptionsParser } from '@discordeno/bot'\n\nexport const event: typeof bot.events.interactionCreate = async (interaction) => {\n  if (interaction.type === InteractionTypes.ApplicationCommand) {\n    if (!interaction.data) return\n\n    const command = commands.get(interaction.data.name)\n    if (!command) return\n\n    await command.execute(interaction, commandOptionsParser(interaction))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Item Collector Class in TypeScript\nDESCRIPTION: This code defines an `ItemCollector` class using NodeJS's `EventEmitter` to collect and process Discord interactions. The `onItem` method registers a callback to be executed when an item is collected, and the `collect` method emits the 'item' event, triggering the registered callbacks. The class is designed to collect Discord Interactions.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventEmitter } from 'node:events'\nimport { Interaction } from '@discordeno/bot'\n\nexport class ItemCollector extends EventEmitter {\n  onItem(callback: (item: Interaction) => unknown): void {\n    this.on('item', callback)\n  }\n\n  collect(item: Interaction): void {\n    this.emit('item', item)\n  }\n}\n\nexport default class ItemCollector\n```\n\n----------------------------------------\n\nTITLE: Registering Guild Application Commands - Typescript\nDESCRIPTION: This snippet demonstrates how to register application commands to a specific guild (server) using Discordeno. It imports the `bot` instance and the previously defined `roles` command object. It then uses `bot.rest.upsertGuildApplicationCommands` to register the commands to the specified guild ID.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bot } from './index.js'\nimport roles from './commands/roles.js'\n\n// insert-next-line\nconst guildId = 'REPLACE WITH YOUR GUILD ID'\n\n// insert-next-line\nawait bot.rest.upsertGuildApplicationCommands(guildId, [roles])\n```\n\n----------------------------------------\n\nTITLE: Preparing Gateway Manager in Discordeno (TS)\nDESCRIPTION: Creates a gateway manager instance with specified intents, shards per worker, and total workers. Requires `@discordeno/gateway`, `@discordeno/types`, and a REST manager connection.  The `shardsPerWorker` property determines how many shards will run per server, while the `totalWorkers` property dictates how many servers are available for shards.  Ensure the environment variable `TOKEN` is set.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-3-gateway.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createGatewayManager } from '@discordeno/gateway'\nimport { GatewayIntents } from '@discordeno/types'\nimport { REST } from '../rest.ts'\n\nexport const GATEWAY = createGatewayManager({\n  token: process.env.TOKEN,\n  intents: GatewayIntents.Guilds | GatewayIntents.GuildMessages,\n  shardsPerWorker: 500,\n  totalWorkers: 10,\n  connection: await REST.getSessionInfo(),\n})\n\nGATEWAY.spawnShards()\n```\n\n----------------------------------------\n\nTITLE: Handle Modal Interaction - Discordeno\nDESCRIPTION: This snippet demonstrates how to handle a modal interaction. It extracts the emoji and label values from the input text components, updates the roles array, edits the original message to reflect the changes, and sends a private confirmation message to the user.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nif (i.data?.customId === 'reactionRoles-add-modal') {\n  const emoji = i.data.components?.[0]?.components?.[0].value\n  const label = i.data.components?.[1]?.components?.[0].value\n\n  partialRoleInfo.emoji = emoji\n  partialRoleInfo.label = label\n\n  roles.push(partialRoleInfo)\n\n  await bot.helpers.editMessage(interaction.channelId, roleMessage.id, {\n    components: getRoleButtons(roles),\n  })\n\n  partialRoleInfo = undefined\n\n  await interaction.edit({\n    content: 'Use the buttons in this message to edit the message below.',\n    components: [messageActionRow],\n  })\n\n  await i.respond(\n    'Reaction role created successfully. You can use the message above to add/remove a role',\n    { isPrivate: true },\n  )\n\n  return\n}\n```\n\n----------------------------------------\n\nTITLE: Create a Discord Bot with Node.js\nDESCRIPTION: This code snippet demonstrates how to create a simple Discord bot using Discordeno in a Node.js environment. It imports the necessary modules, configures the bot with a token from environment variables, defines a ready event handler, and starts the bot.  It requires the `@discordeno/bot` and `dotenv` packages.  The bot token must be available in the environment variables.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/node.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport dotenv from 'dotenv'\nimport { createBot } from '@discordeno/bot'\n\ndotenv.config()\n\nconst bot = createBot({\n  token: process.env.token,\n  events: {\n    ready: ({ shardId }) => console.log(`Shard ${shardId} ready`),\n  },\n})\n\nawait bot.start()\n```\n\n----------------------------------------\n\nTITLE: Creating a Discord Bot with Deno and Discordeno\nDESCRIPTION: This snippet demonstrates how to create a basic Discord bot using Deno and Discordeno. It imports necessary modules from Deno standard library for environment variable loading and Discordeno for bot creation. The code loads the bot token from environment variables, initializes the bot with the token and a ready event handler, and then starts the bot. This requires the installation of Discordeno and Deno.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/deno.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { load } from 'https://deno.land/std@0.212.0/dotenv/mod.ts'\nimport { createBot } from 'npm:@discordeno/bot@19.0.0'\n\nconst env = await load()\n\nconst bot = createBot({\n  token: env.token,\n  events: {\n    ready: ({ shardId }) => console.log(`Shard ${shardId} ready`),\n  },\n})\n\nawait bot.start()\n```\n\n----------------------------------------\n\nTITLE: Add Member Roles to Desired Properties - Discordeno\nDESCRIPTION: This snippet adds member roles to the desired properties, enabling the application to readily access the member's role information during interactions.  This is crucial for determining whether a user already possesses a role for toggle functionality.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nmember: {\n      roles: true,\n    }\n```\n\n----------------------------------------\n\nTITLE: Sending a message with Discordeno\nDESCRIPTION: This TypeScript code snippet shows how to send a message to a specific Discord channel using the `bot.helpers.sendMessage` method. It requires the channel ID and a message options object containing the message content. The method returns a promise that resolves to the sent message object.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/getting-started.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst message = await bot.helpers.sendMessage(channel.id, {\n  content: 'Hello world. This is test message from Discordeno.',\n})\n```\n\n----------------------------------------\n\nTITLE: Forwarding Gateway Requests to a Gateway Manager\nDESCRIPTION: This snippet shows how to forward gateway requests (specifically `requestMembers`) to a separate gateway manager process using `fetch`. The request is sent as a POST request with a JSON body containing the request type, guild ID, and options. It sets the `Content-Type` and `Authorization` headers for the request. The response is then parsed as text and any errors are caught and handled.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-4-bot.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nBOT.gateway.requestMembers = async function (guildId, options) {\n    await fetch(process.env.GATEWAY_MANAGER_URL, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": process.env.AUTHORIZATION,\n        },\n        body: JSON.stringify({ type: \"REQUEST_MEMBERS\", guildId, options });\n    })\n        .then(res => res.text())\n        .catch(() => undefined);\n}\n```\n\n----------------------------------------\n\nTITLE: Discord Bot Login with Bun\nDESCRIPTION: This code snippet demonstrates how to create a Discord bot using the `@discordeno/bot` package with Bun. It imports the `createBot` function, initializes the bot with the Discord token from environment variables, and sets up a ready event listener. The `bot.start()` function is then called to log the bot into Discord.  Requires `@discordeno/bot` to be installed.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/bun.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBot } from '@discordeno/bot'\n\nconst bot = createBot({\n  token: Bun.env.token,\n  events: {\n    ready: ({ shardId }) => console.log(`Shard ${shardId} ready`),\n  },\n})\n\nawait bot.start()\n```\n\n----------------------------------------\n\nTITLE: Creating Role Buttons Function in Discordeno\nDESCRIPTION: This function, `getRoleButtons`, takes an array of role information objects and generates an array of ActionRow components with buttons for each role. It handles the Discord limit of 5 buttons per action row by creating new action rows as needed. It returns an empty array of ActionRow if the `roles` array is empty.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getRoleButtons(\n  roles: Array<{\n    role: Role\n    emoji: string\n    color: ButtonStyles\n    label?: string | undefined\n  }>,\n): ActionRow[] {\n  const actionRows: ActionRow[] = []\n\n  if (roles.length === 0) return actionRows\n\n  // We add the components later, so we need to make typescript know that we are sure that it will be a compatible components array\n  actionRows.push({\n    type: MessageComponentTypes.ActionRow,\n    components: [] as unknown as ActionRow['components'],\n  })\n\n  for (const roleInfo of roles) {\n    let actionRow = actionRows.at(-1)\n\n    if (!actionRow) {\n      throw new Error('Unable to get actionRow')\n    }\n\n    if (actionRow.components.length === 5) {\n      actionRow = {\n        type: MessageComponentTypes.ActionRow,\n        components: [] as unknown as ActionRow['components'],\n      }\n      actionRows.push(actionRow)\n    }\n\n    actionRow?.components.push({\n      type: MessageComponentTypes.Button,\n      style: roleInfo.color,\n      emoji: {\n        name: roleInfo.emoji,\n      },\n      label: roleInfo.label,\n      customId: `reactionRoles-role-${roleInfo.role.id}`,\n    })\n  }\n\n  return actionRows\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Gateway Manager with Shard Communication\nDESCRIPTION: This code snippet initializes the gateway manager, sets the token, intents, shards per worker, total workers, and establishes a connection. It overrides the `tellWorkerToIdentify` method to communicate with workers via HTTP requests, sending shard identification information to a specified server URL.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-3-gateway.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const GATEWAY = createGatewayManager({\n  token: process.env.TOKEN,\n  intents: Intents.Guilds | Intents.GuildMessages,\n  shardsPerWorker: 500,\n  totalWorkers: 10,\n  connection: await REST.getSessionInfo(),\n})\n\nGATEWAY.tellWorkerToIdentify = async function (workerId, shardId, bucketId) {\n  const url = process.env[`SERVER_URL_${workerId}`]\n  if (!url)\n    return logger.error(\n      `No server URL found for server #${workerId}. Unable to start Shard #${shardId}`,\n    )\n\n  await fetch(url, {\n    method: 'POST',\n    headers: {\n      authorization: process.env.AUTHORIZATION,\n      'Content-type': 'application/json',\n    },\n    body: JSON.stringify({ type: 'IDENTIFY_SHARD', shardId }),\n  })\n    .then(res => res.json())\n    .catch(logger.error)\n}\n\nGATEWAY.spawnShards()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Bot to Gateway Communication (TS)\nDESCRIPTION: Sets up an Express server to handle communication between the bot and the gateway manager. Requires `dotenv`, `express`, and `@discordeno/utils` packages.  It authenticates requests using an authorization key from the headers and processes requests based on their type, such as `REQUEST_MEMBERS`.  Ensure `GATEWAY_MANAGER_PORT`, `GATEWAY_MANAGER_URL` and `AUTHORIZATION` environment variables are set.  Invalid authorization results in a 401 error.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-3-gateway.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logger } from '@discordeno/utils'\nimport dotenv from 'dotenv'\nimport express from 'express'\n\ndotenv.config()\n\nconst AUTHORIZATION = process.env.AUTHORIZATION as string\n\nconst app = express()\n\napp.use(\n  express.urlencoded({\n    extended: true,\n  }),\n)\n\napp.use(express.json())\n\napp.all('/*', async (req, res) => {\n  if (!AUTHORIZATION || AUTHORIZATION !== req.headers.authorization) {\n    return res.status(401).json({ error: 'Invalid authorization key.' })\n  }\n\n  try {\n    // Identify A Shard\n    switch (req.body.type) {\n      case 'REQUEST_MEMBERS': {\n        return await GATEWAY.requestMembers(req.body.guildId, req.body.options)\n      }\n      default:\n        logger.error(\n          `[Shard] Unknown request received. ${JSON.stringify(req.body)}`,\n        )\n        return res\n          .status(404)\n          .json({ message: 'Unknown request received.', status: 404 })\n    }\n  } catch (error: any) {\n    console.log(error)\n    res.status(500).json(error)\n  }\n})\n\napp.listen(process.env.GATEWAY_MANAGER_PORT, () => {\n  console.log(`Listening at ${process.env.GATEWAY_MANAGER_URL}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Configure Desired Properties Typescript\nDESCRIPTION: This code snippet demonstrates how to configure the `desiredProperties` in the Discordeno bot. This optimization tells Discordeno which properties of the interaction object should be cached, improving performance. This snippet shows how to specify the necessary properties from the interaction object, such as `id`, `data`, `type`, `token` and `channelId`.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// REST OF YOUR CODE\n\nexport const bot = createBot({\n  token,\n  // insert-start\n  desiredProperties: {\n    interaction: {\n      id: true,\n      data: true,\n      type: true,\n      token: true,\n      channelId: true,\n    }\n  }\n  // insert-end\n})\n\n// REST OF YOUR CODE\n```\n\n----------------------------------------\n\nTITLE: Using dd-cache-proxy\nDESCRIPTION: This snippet shows how to use the `dd-cache-proxy` package to cache data in Discordeno.  It initializes a bot with the cache proxy and defines caching configurations such as desired properties and in-memory/out-of-memory settings.  The setItem function shows how to persist data to an external cache like Redis or a database. It uses `createProxyCache` to enhance the existing bot object with caching capabilities.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/caching.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createProxyCache } from 'dd-cache-proxy';\nimport { createBot, Bot, Intents } from '@discordeno/bot';\n\n// Create a function for easier use and cleaner code.\nconst getProxyCacheBot = (bot: Bot) =>\n  createProxyCache(bot, {\n    // Define what properties of individual cache you wish to cache. Caches no props by default. Or you can use the `undesiredProps` prop to reverse the behavior of `desiredProps`.\n    desiredProps: {\n      // Example props that are cached in channels and other cache. Accepts an array of props of the cache. All props are optional.\n      guild: ['channels', 'icon', 'id', 'name', 'roles'],\n      user: ['avatar', 'id', 'username'],\n    },\n    // Define what to cache in memory. All props are optional except `default`. By default, all props inside `cacheInMemory` are set to `true`.\n    cacheInMemory: {\n      // Whether or not to cache guilds.\n      guild: true,\n      channel: true,\n      // Default value for the properties that are not provided inside `cacheInMemory`.\n      default: false,\n    },\n    // Define what to cache outside memory. All props are optional except `default`. By default, all props inside `cacheOutsideMemory` are set to `false`.\n    cacheOutsideMemory: {\n      // Whether or not to cache channels.\n      channel: false,\n      role: false,\n      // Default value for the properties that are not provided inside `cacheOutsideMemory`.\n      default: true,\n    },\n    // Function to get an item from outside cache. `getItem`, `setItem`, `removeItem` must be provided if you cache outside memory, can be omitted if you don't store outside memory.\n    setItem: (table, item) => {\n      if (table === 'channel') {\n        // Custom code to store data into your cache outside memory, say redis or a database or whichever you use.\n      }\n    },\n  });\n\n// Pass the created bot object to `getProxyCacheBot` so it can add the cache proxy to it.\nconst bot = getProxyCacheBot(\n  // Create the bot object.\n  createBot({\n    token,\n    intents: Intents.Guilds,\n  })\n);\n\n```\n\n----------------------------------------\n\nTITLE: Create Modal Response - Discordeno\nDESCRIPTION: This snippet shows how to create a modal response to an interaction. It includes setting a title, adding action rows with input text components (short style) for emoji and label, and defining a custom ID for the modal.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nawait i.respond({\n    title: 'Pick an emoji and label for the reaction role',\n    components: [\n      {\n        type: MessageComponentTypes.ActionRow,\n        components: [\n          {\n            type: MessageComponentTypes.InputText,\n            style: TextStyles.Short,\n            customId: 'reactionRoles-add-emoji',\n            label: 'Emoji for the reaction role',\n            required: true,\n          },\n        ],\n      },\n      {\n        type: MessageComponentTypes.ActionRow,\n        components: [\n          {\n            type: MessageComponentTypes.InputText,\n            style: TextStyles.Short,\n            customId: 'reactionRoles-add-label',\n            label: 'Label for the reaction role [OPTIONAL]',\n          },\n        ],\n      },\n    ],\n    customId: 'reactionRoles-add-modal',\n  })\n```\n\n----------------------------------------\n\nTITLE: Getting Event Handler URL From Shard ID\nDESCRIPTION: This function determines the URL of the event handler to which a specific shard should send events. It splits a comma-separated list of URLs from the `EVENT_HANDLER_URLS` environment variable into an array. It calculates an index based on the total number of shards and the shard ID and uses this index to select a URL from the array. If the index is out of bounds, it defaults to the first URL in the array.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-4-bot.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getUrlFromShardId(totalShards: number, shardId: number) {\n  const urls = process.env.EVENT_HANDLER_URLS?.split(',') ?? []\n  const index = totalShards % shardId\n\n  return urls[index] ?? urls[0]\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Initial Button Component with getRoleButtons in Discordeno\nDESCRIPTION: This snippet replaces the hardcoded button component from the previous message sending with the `getRoleButtons` function. The `getRoleButtons` function handles generating the proper action rows with the role buttons.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nlet roles = [args.reactions.create]\n\nconst roleMessage = await bot.helpers.sendMessage(interaction.channelId, {\n  content: 'Pick your roles',\n  // remove-start\n  components: [\n    {\n      type: MessageComponentTypes.ActionRow,\n      components: [\n        {\n          type: MessageComponentTypes.Button,\n          style: args.reactions.create.color,\n          emoji: {\n            name: args.reactions.create.emoji,\n          },\n          label: args.reactions.create.label,\n          customId: `reactionRoles-role-${args.reactions.create.role.id}`,\n        },\n      ],\n    },\n  ],\n  // remove-end\n  // insert-next-line\n  components: getRoleButtons(roles),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Desired Properties Example\nDESCRIPTION: This example demonstrates how to configure `desiredProperties` within the `createBot` function in Discordeno. It specifies that only `id`, `toggles` (containing the 'bot' flag), and `username` properties should be cached for user objects.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/desired-properties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst bot = createBot({\n  // Your usual createBot options, such as token and intents\n  desiredProperties: {\n    user: {\n      id: true,\n      toggles: true, // Toggles includes the \"bot\" flag\n      username: true,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Registering an Event Handler in Discordeno\nDESCRIPTION: This snippet shows how to register an event handler function (in this case, the `ready` handler) with the Discordeno bot instance. It imports the `createBot` function, the `ready` event handler from a local file, and assigns the imported handler to the `BOT.events.ready` property, effectively connecting the handler to the corresponding event.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-4-bot.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBot } from '@discordeno/bot'\nimport { ready } from './events/ready.js'\n\nexport const BOT = createBot({\n  token,\n})\n\nBOT.events.ready = ready;\n```\n\n----------------------------------------\n\nTITLE: Handling 'Add' Button Click Event and Role Select Menu in Discordeno\nDESCRIPTION: This snippet handles the 'add' button click. It resets `partialRoleInfo`, and displays a select menu for the user to select a role. It updates `partialRoleInfo` when a role is selected. `i.deferEdit()` is used to acknowledge the interaction.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nif (i.data?.customId === 'reactionRoles-remove-selectMenu') {\n  const roleToRemove = i.data?.values?.[0]\n\n  await i.deferEdit()\n\n  roles = roles.filter(roleInfo => roleInfo.role.id.toString() !== roleToRemove)\n\n  await bot.helpers.editMessage(interaction.channelId, roleMessage.id, {\n    components: getRoleButtons(roles),\n  })\n\n  await i.edit({\n    content: 'Use the buttons in this message to edit the message below.',\n    components: [messageActionRow],\n  })\n\n  return\n}\n\n// insert-start\nif (i.data?.customId === 'reactionRoles-add') {\n  await i.deferEdit()\n\n  partialRoleInfo = {}\n\n  await i.edit({\n    content: 'Pick a role for the new reaction role',\n    components: [\n      {\n        type: MessageComponentTypes.ActionRow,\n        components: [\n          {\n            type: MessageComponentTypes.SelectMenuRoles,\n            customId: 'reactionRoles-add-role',\n            maxValues: 1,\n            minValues: 1,\n            placeholder: 'Select a role',\n          },\n        ],\n      },\n    ],\n  })\n  return\n}\n\nif (i.data?.customId === 'reactionRoles-add-role') {\n  const roleToAdd = i.data?.resolved?.roles?.first()\n\n  partialRoleInfo.role = roleToAdd\n\n  await i.deferEdit()\n  await i.edit({\n    content: 'Pick a color for the reaction role',\n    components: [\n      {\n        type: MessageComponentTypes.ActionRow,\n        components: [\n          {\n            type: MessageComponentTypes.SelectMenu,\n            customId: 'reactionRoles-add-color',\n            options: [\n              { label: 'Blue', value: ButtonStyles.Primary.toString() },\n              { label: 'Green', value: ButtonStyles.Success.toString() },\n              { label: 'Grey', value: ButtonStyles.Secondary.toString() },\n```\n\n----------------------------------------\n\nTITLE: Sweeper Filter Example\nDESCRIPTION: This code shows an example usage of the sweeper filter option. It defines a filter that removes members from the cache if they haven't been accessed in the last 15 minutes and are not the bot's member.  It also sets an interval of 5 minutes for the sweeper to run.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/caching.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nsweeper: {\n    // Run the sweeper every 5 minutes\n    interval: 300000,\n    filter: {\n        member: (member) => {\n            // Remove member from cache if it hasn't been accessed in the last 15 minutes and if the member isn't bot member\n            if (Date.now() - member.lastInteractedTime > 900000 && member.id !== bot.id) return true;\n            else return false;\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up an HTTP Listener for Discordeno Events\nDESCRIPTION: This snippet sets up an Express.js HTTP listener to receive events from Discord shards. It initializes Express, configures middleware for URL-encoded and JSON data, and defines a route (`/*`) that handles all incoming requests. It checks for a valid authorization header before processing the event data and sends a success response. Error handling is included to catch and log any exceptions.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-4-bot.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport dotenv from 'dotenv'\nimport express from 'express'\n\ndotenv.config()\n\nconst AUTHORIZATION = process.env.AUTHORIZATION as string\n\nconst app = express()\n\napp.use(\n  express.urlencoded({\n    extended: true,\n  }),\n)\n\napp.use(express.json())\n\napp.all('/*', async (req, res) => {\n  if (!AUTHORIZATION || AUTHORIZATION !== req.headers.authorization) {\n    return res.status(401).json({ error: 'Invalid authorization key.' })\n  }\n\n  try {\n    // Add the code here in the next section\n    res.status(200).json({ success: true })\n  } catch (error: any) {\n    console.log(error)\n    res.status(500).json(error)\n  }\n})\n\napp.listen(BOT_PORT, () => {\n  console.log(`BOT listening at ${BOT_URL}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up InfluxDB Analytics\nDESCRIPTION: This snippet sets up InfluxDB for analytics. It requires the @influxdata/influxdb-client package. It retrieves the InfluxDB configuration from environment variables and creates a write API. It also sets up an interval to flush the data to InfluxDB every 30 seconds.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-2-rest.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InfluxDB, Point } from '@influxdata/influxdb-client'\nimport { REST } from './rest.ts'\n\nconst INFLUX_ORG = process.env.INFLUX_ORG as string\nconst INFLUX_BUCKET = process.env.INFLUX_BUCKET as string\nconst INFLUX_TOKEN = process.env.INFLUX_TOKEN as string\nconst INFLUX_URL = process.env.INFLUX_URL as string\n\nexport const influxDB =\n  INFLUX_URL && INFLUX_TOKEN\n    ? new InfluxDB({ url: INFLUX_URL, token: INFLUX_TOKEN })\n    : undefined\nexport const Influx = influxDB?.getWriteApi(INFLUX_ORG, INFLUX_BUCKET)\n\nlet savingAnalyticsId: NodeJS.Interval | undefined = undefined\nif (!saveAnalyticsId) {\n  setInterval(() => {\n    console.log(`[Influx - REST] Saving events...`)\n    Influx?.flush()\n      .then(() => {\n        console.log(`[Influx - REST] Saved events!`)\n      })\n      .catch(error => {\n        console.log(`[Influx - REST] Error saving events!`, error)\n      })\n    // Every 30seconds\n  }, 30000)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Discordeno Bot\nDESCRIPTION: This code initializes a Discordeno bot instance. It imports necessary modules like createBot from '@discordeno/bot' and config from 'dotenv'.  It then uses the bot token from environment variables to create and start the bot.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBot } from '@discordeno/bot'\nimport { config } from 'dotenv'\nconfig()\n\nexport const bot = createBot({\n  token: process.env.TOKEN,\n})\n\nawait bot.start()\n```\n\n----------------------------------------\n\nTITLE: Handling 'Remove' Button Click Event in Discordeno\nDESCRIPTION: This snippet handles the 'remove' button click. It creates a select menu with options for each existing reaction role, allowing the user to choose which role to remove. `i.deferEdit()` is used to acknowledge the interaction.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nitemCollector.onItem(async i => {\n  if (i.message?.id !== message.id) {\n    return\n  }\n\n  if (i.data?.customId === 'reactionRoles-save') {\n    collectors.delete(itemCollector)\n\n    await i.deferEdit()\n    await i.delete()\n\n    return\n  }\n\n  // insert-start\n  if (i.data?.customId === 'reactionRoles-remove') {\n    const options: SelectOption[] = []\n\n    for (const roleInfo of roles) {\n      options.push({\n        label: `${roleInfo.emoji} ${roleInfo.label}`,\n        value: roleInfo.role.id.toString(),\n      })\n    }\n\n    await i.deferEdit()\n    await i.edit({\n      content: 'Select what reaction role to remove',\n      components: [\n        {\n          type: MessageComponentTypes.ActionRow,\n          components: [\n            {\n              type: MessageComponentTypes.SelectMenu,\n              customId: 'reactionRoles-remove-selectMenu',\n              maxValues: 1,\n              minValues: 1,\n              placeholder: 'Select roles',\n              options,\n            },\n          ],\n        },\n      ],\n    })\n\n    return\n  }\n  // insert-end\n\n  // REST OF YOUR CODE\n})\n\n// REST OF YOUR CODE\n```\n\n----------------------------------------\n\nTITLE: Creating Base Command Object\nDESCRIPTION: This creates a base command object to define a new Discord command.  This object will be extended with properties like `name`, `description`, and `options` to define the behavior of the `/roles` command.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const command = {}\n\nexport default command\n```\n\n----------------------------------------\n\nTITLE: Setting Up Sharding Master Process with HTTP Listener\nDESCRIPTION: This code sets up an HTTP listener using Express to handle incoming requests from the gateway manager. It checks for valid authorization, identifies the type of request (specifically 'IDENTIFY_SHARD'), and forwards the request to the appropriate worker thread based on the shard ID. If a worker doesn't exist for the shard ID, it creates a new one.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-3-gateway.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport dotenv from 'dotenv'\nimport express from 'express'\nimport { Worker } from 'worker_threads'\n\ndotenv.config()\n\nconst AUTHORIZATION = process.env.AUTHORIZATION as string\n\n// Create workers\nconst WORKERS = new Collection<number, Worker>()\n\nconst app = express()\n\napp.use(\n  express.urlencoded({\n    extended: true,\n  }),\n)\n\napp.use(express.json())\n\napp.all('/*', async (req, res) => {\n  if (!AUTHORIZATION || AUTHORIZATION !== req.headers.authorization) {\n    return res.status(401).json({ error: 'Invalid authorization key.' })\n  }\n\n  try {\n    // Identify A Shard\n    switch (req.body.type) {\n      case 'IDENTIFY_SHARD': {\n        const workerId = Math.floor(req.body.shardId / 10)\n        let worker = WORKERS.get(workerId)\n\n        if (!worker) {\n          worker = new Worker('./worker.js', { workerData: { workerId } })\n\n          WORKERS.set(workerId, worker)\n        }\n\n        worker.postMessage(req.body)\n\n        return res.status(200).send()\n      }\n      default:\n        logger.error(\n          `[Sharding Master] Unknown request received. ${JSON.stringify(\n            req.body,\n          )}`,\n        )\n\n        return res\n          .status(404)\n          .json({ message: 'Unknown request received.', status: 404 })\n    }\n  } catch (error: any) {\n    console.log(error)\n    res.status(500).json(error)\n  }\n})\n\napp.listen(process.env.SHARD_SERVER_PORT, () => {\n  console.log(`[Sharding Master] Listening at ${process.env.SERVER_URL}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Sharding Worker Process to Identify Shards\nDESCRIPTION: This code sets up a sharding worker process that listens for messages from the master process. Upon receiving an 'IDENTIFY_SHARD' request, it either retrieves an existing shard from its cache or creates a new `DiscordenoShard` instance, then calls the `identify` method on the shard. This allows the worker to manage and identify shards independently.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-3-gateway.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscordenoShard } from '@discordeno/gateway'\nimport { logger } from '@discordeno/utils'\nimport { Intents } from '@discordeno/types'\nimport { parentPort, workerData } from 'worker_threads'\nimport dotenv from 'dotenv'\n\ndotenv.config()\n\nif (!parentPort) throw new Error('Parent port is null')\n\nconst SHARDS = new Collection<number, DiscordenoShard>()\n\nfunction getUrlFromShardId(totalShards: number, shardId: number) {\n  const urls = process.env.EVENT_HANDLER_URLS?.split(',') ?? []\n  const index = totalShards % shardId\n\n  return urls[index] ?? urls[0]\n}\n\nparentPort.on('message', async data => {\n  try {\n    switch (data.type) {\n      // Identify A Shard\n      case 'IDENTIFY_SHARD': {\n        logger.info(\n          `[Sharding Worker #${workerData.workerId}] identifying ${\n            SHARDS.has(data.shardId) ? 'existing' : 'new'\n          } shard (${data.shardId})`,\n        )\n\n        const shard =\n          SHARDS.get(data.shardId) ??\n          new DiscordenoShard({\n            id: data.shardId,\n            connection: {\n              compress: data.compress,\n              intents: data.intents,\n              properties: data.properties,\n              token: data.token,\n              totalShards: data.totalShards,\n              url: data.url,\n              version: data.version,\n            },\n            // Enable this in the next portion of the guide.\n            // events,\n          })\n\n        SHARDS.set(shard.id, shard)\n\n        await shard.identify()\n      }\n      default:\n        logger.error(\n          `[Sharding Worker #${\n            workerData.workerId\n          }] Unknown request received. ${JSON.stringify(data)}`,\n        )\n    }\n  } catch (error: any) {\n    console.log(error)\n  }\n})\n\nconsole.log(\n  `[Sharding Worker #${workerData.workerId}] Sharding Worker Started.`,\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing environment variables in Node.js\nDESCRIPTION: This snippet demonstrates how to access environment variables in Node.js using the `process.env` object. The variable name is used as a key to access its corresponding value from the `process.env` object.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/beginner/env.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst dbHost = process.env.DB_HOST\nconst dbUser = process.env.DB_USER\nconst dbPass = process.env.DB_PASS\n```\n\n----------------------------------------\n\nTITLE: Handling 'Save' Button Click Event in Discordeno\nDESCRIPTION: This snippet demonstrates handling a 'save' button click event.  It deletes the menu message and the collector, effectively closing the menu. `i.deferEdit()` is used to acknowledge the interaction.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nitemCollector.onItem(async i => {\n  if (i.message?.id !== message.id) {\n    return\n  }\n\n  // remove-next-line\n  await i.respond('Hello world')\n\n  // insert-start\n  if (i.data?.customId === 'reactionRoles-save') {\n    collectors.delete(itemCollector)\n\n    await i.deferEdit()\n    await i.delete()\n\n    return\n  }\n  // insert-end\n\n  // REST OF YOUR CODE\n})\n\n// REST OF YOUR CODE\n```\n\n----------------------------------------\n\nTITLE: Adding Optional Label Option - Typescript\nDESCRIPTION: This code snippet adds an optional label option for the reaction role button. It utilizes `ApplicationCommandOptionTypes.String` to allow users to define a label for the button. The `required` property is omitted, making the option optional.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  required: true,\n  name: \"color\",\n  description: \"What color would you like to set as this button's color?\",\n  type: ApplicationCommandOptionTypes.Integer,\n  choices: [\n    { name: \"Blue\", value: ButtonStyles.Primary },\n    { name: \"Green\", value: ButtonStyles.Success },\n    { name: \"Grey\", value: ButtonStyles.Secondary },\n    { name: \"Red\", value: ButtonStyles.Danger },\n  ],\n},\n// insert-start\n{\n  name: \"label\",\n  description: \"What would you like to set for the name on this button?\",\n  type: ApplicationCommandOptionTypes.String,\n},\n// insert-end\n```\n\n----------------------------------------\n\nTITLE: Caching Guild IDs for GUILD_LOADED Event Typescript\nDESCRIPTION: This snippet shows how to create a local cache to store guild IDs, allowing the bot to differentiate between new guild additions and resumed/re-available guilds. This is essential for handling `GUILD_CREATE` events correctly.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-3-gateway.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst cache = {\n  guildIds: new Set<string>(),\n  loadingGuildIds: new Set<string>(),\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Inferred Types\nDESCRIPTION: This example demonstrates how to create a separate file that exports commonly used inferred types from `bot.transformers.$inferredTypes` under simplified names. This improves code readability and maintainability when working with multiple Discord object types.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/desired-properties.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bot } from './index.ts'\n\nexport type Guild = typeof bot.transformers.$inferredTypes.guild\nexport type Message = typeof bot.transformers.$inferredTypes.message\n\n// Repeat this for all other types you'd like\n```\n\n----------------------------------------\n\nTITLE: Configuring Automated Resharding in Discordeno\nDESCRIPTION: This code snippet demonstrates how to configure automated resharding within the `createGatewayManager` function in Discordeno. It shows how to enable resharding, set the shard full percentage, configure the check interval, and provide a method to get session info for gateway proxies. The `getSessionInfo` property is important for situations such as gateway proxies, where you need to actively get session info.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-3-gateway.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst GATEWAY = createGatewayManager({\n  ...\n  resharding: {\n    enabled: true,\n    shardsFullPercentage: 80,\n    checkInterval: 28800000, // 8 hours\n    getSessionInfo: REST.getSessionInfo(), // This option is necessary for gateway proxies (which is the case here)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Command to Use ItemCollector (TypeScript)\nDESCRIPTION: This code snippet shows how to update a command to use the `ItemCollector` to handle interactions, specifically button clicks. It creates an `ItemCollector` instance, adds it to the `collectors` set, and defines an `onItem` callback that responds to the interaction if it originates from the same message as the command's initial response. It also includes `interaction.defer` to acknowledge the interaction.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// THE REST OF YOUR CODE\n\n// insert-next-line\nimport ItemCollector from '../collector.js'\n// insert-next-line\nimport { collectors } from '../events/interactionCreate.js'\n\nasync execute(interaction, args: CommandArgs) {\n  // Create a reaction role\n  if (args.reactions?.create) {\n    // THE REST OF YOUR CODE\n\n    // remove-start\n    await interaction.respond(\n      {\n        // all the options we defined earlier\n      },\n      { isPrivate: true }\n    )\n    // remove-end\n    // insert-start\n    await interaction.defer(true);\n    const message = await interaction.respond(\n      {\n        // all the options we defined earlier\n      },\n      { isPrivate: true }\n    )\n\n    const itemCollector = new ItemCollector<Interaction>()\n    collectors.add(itemCollector)\n\n    itemCollector.onItem((i) => {\n      if (i.message?.id !== message.id) {\n        return\n      }\n\n      await i.respond(\"Hello world\");\n    })\n\n    // insert-end\n  }\n}\n\n// THE REST OF YOUR CODE\n```\n\n----------------------------------------\n\nTITLE: Creating REST Manager in Discordeno (TS)\nDESCRIPTION: Creates a REST manager instance for interacting with the Discord API through a proxy. Requires `@discordeno/rest` package and environment variables `TOKEN`, `REST_URL`, and `AUTHORIZATION`. The `baseUrl` should point to the REST manager server, ensuring requests are sent to the proxy REST process.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-3-gateway.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRestManager } from '@discordeno/rest'\n\nexport const REST = createRestManager({\n  // YOUR BOT TOKEN HERE\n  token: process.env.TOKEN,\n  proxy: {\n    baseUrl: process.env.REST_URL,\n    authorization: process.env.AUTHORIZATION,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Raw and Typed Events in Discordeno\nDESCRIPTION: This code snippet demonstrates how to trigger raw events and call specific event handlers based on the event type received in the request body.  It assumes that `req.body.payload` contains the event payload, `req.body.shardId` contains the shard ID, and `data.t` contains the event type. It then triggers the `raw` event (if a handler is defined) and calls the specific event handler associated with the event type.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-4-bot.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  // Trigger the raw event, you may remove this if you don't need it\n  bot.events.raw?.(req.body.payload, req.body.shardId)\n\n  if (data.t) {\n    bot.handlers[data.t]?.(bot, req.body.payload, req.body.shardId)\n  }\n\n  res.status(200).json({ success: true })\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Guild from Cache Manually\nDESCRIPTION: This snippet shows how to manually remove a guild from the cache when a `GUILD_DELETE` event is received. It overrides the default `GUILD_DELETE` handler, removes the guild from the cache, and then calls the original handler to ensure that other events are processed correctly.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/caching.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst { GUILD_DELETE } = bot.handlers;\n\nbot.handlers.GUILD_DELETE = (bot, data, shardId) => {\n  const payload = data.d as DiscordUnavailableGuild;\n  const id = bot.transformers.snowflake(payload.id);\n\n  // Remove the guild from cache\n  guilds.delete(id);\n\n  GUILD_DELETE(bot, data, shardId);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Adding Emoji Option for Reaction Role - Typescript\nDESCRIPTION: This snippet adds an emoji option to the reaction role slash command. The 'emoji' option accepts a string input from the user, allowing them to specify an emoji for the button. It uses `ApplicationCommandOptionTypes.String` and is set as `required: true`.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: 'role',\n  description: 'What role would you like to set for this button?',\n  type: ApplicationCommandOptionTypes.Role,\n  required: true,\n},\n// insert-start\n{\n  name: \"emoji\",\n  description: \"What would you like to set as this button's emoji?\",\n  type: ApplicationCommandOptionTypes.String,\n  required: true,\n},\n// insert-end\n```\n\n----------------------------------------\n\nTITLE: Add Desired Properties - Discordeno\nDESCRIPTION: This snippet shows how to add desired properties to the bot configuration.  These properties define which data from Discord's API will be cached for interactions and messages.  Specifically, this example adds properties for interaction, message, user, and role data.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\ndesiredProperties: {\n    interaction: {\n      id: true,\n      data: true,\n      type: true,\n      // insert-next-line\n      user: true,\n      token: true,\n      message: true,\n      // insert-next-line\n      guildId: true,\n      channelId: true,\n    },\n    message: {\n      id: true,\n    },\n    // insert-start\n    user: {\n      id: true,\n    },\n    role: {\n      id: true,\n    },\n    // insert-end\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Analytics for Failed Requests\nDESCRIPTION: This snippet implements analytics for when a request fails. It writes a point to InfluxDB with the request method, URL, bucket, status code, and status text. It requires the Influx object from the analytics.ts file.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-2-rest.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nInflux?.writePoint(\n        new Point('restEvents')\n            .timestamp(new Date())\n            .stringField('type', 'REQUEST_FAILED')\n            .tag('method', options.method)\n            .tag('url', options.url)\n            .tag('bucket', options.bucketId ?? 'NA')\n            .intField('status', error.status ?? 399)\n            .tag('statusText', error.statusText ?? \"Unknown\"),\n        );\n    console.log(error);\n    res.status(500).json(error);\n```\n\n----------------------------------------\n\nTITLE: Defining .env variables\nDESCRIPTION: This snippet shows the basic structure and syntax for defining environment variables within a `.env` file. Each variable is defined in the format `VAR_NAME=value`.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/beginner/env.md#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nDB_HOST = localhost\nDB_USER = admin\nDB_PASS = password123\n```\n\n----------------------------------------\n\nTITLE: Check Button Interaction Type - Discordeno\nDESCRIPTION: This snippet demonstrates how to check for a button interaction type and respond to it with a basic 'Hello world' message. It verifies that the interaction is a message component and specifically a button, and that the custom ID starts with 'reactionRoles-role-'.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nif (\n  interaction.type === InteractionTypes.MessageComponent &&\n  interaction.data?.componentType === MessageComponentTypes.Button\n) {\n  if (!interaction.data?.customId?.startsWith('reactionRoles-role-')) return\n\n  await interaction.respond('Hello world')\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Role Option for Reaction Role - Typescript\nDESCRIPTION: This snippet defines a role option within a Discord slash command. The 'role' option allows users to specify a Discord role. It utilizes `ApplicationCommandOptionTypes.Role` and is marked as `required: true`, forcing users to provide a role when using the command.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"create\",\n  description: \"Create a reaction role on your server.\",\n  type: ApplicationCommandOptionTypes.SubCommand,\n  // insert-start\n  options: [\n    {\n      name: 'role',\n      description: 'What role would you like to set for this button?',\n      type: ApplicationCommandOptionTypes.Role,\n      required: true,\n    },\n  ]\n  // insert-end\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Analytics for Successful Requests\nDESCRIPTION: This snippet implements analytics for when a request is successful. It writes a point to InfluxDB with the request method, URL, bucket, status code, and status text. It requires the Influx object from the analytics.ts file.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-2-rest.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nInflux?.writePoint(\n  new Point('restEvents')\n    .timestamp(new Date())\n    .stringField('type', 'REQUEST_FETCHING')\n    .tag('method', options.method)\n    .tag('url', options.url)\n    .tag('bucket', options.bucketId ?? 'NA'),\n)\nconst result = await REST.makeRequest(\n  req.method,\n  `${REST.baseUrl}${req.url}`,\n  req.body,\n)\nInflux?.writePoint(\n  new Point('restEvents')\n    .timestamp(new Date())\n    .stringField('type', 'REQUEST_FETCHED')\n    .tag('method', options.method)\n    .tag('url', options.url)\n    .tag('bucket', options.bucketId ?? 'NA')\n    .intField('status', response.status)\n    .tag('statusText', response.statusText),\n)\n```\n\n----------------------------------------\n\nTITLE: Typed dd-cache-proxy\nDESCRIPTION: This code demonstrates how to use generic types with `dd-cache-proxy` to define custom types for cached objects. This can be useful for providing better type safety and intellisense when working with cached data.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/caching.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { Bot } from '@discordeno/bot'\n\nconst bot = getProxyCacheBot<{ guilds: CachedGuild }, Bot>(...)\n\n```\n\n----------------------------------------\n\nTITLE: Tracking Identified and Resumed Events Typescript\nDESCRIPTION: This code snippet adds event tracking for `identified` and `resumed` gateway events. It logs these events to InfluxDB, providing insights into shard connection stability and bot uptime.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-3-gateway.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nevents: {\n  async message(shard, payload) {\n    // your code\n  },\n  identified() {\n    Influx?.writePoint(\n      new Point('gatewayEvents')\n        .timestamp(new Date())\n        .stringField('type', \"IDENTIFIED\"),\n        .tag('shard', shardId),\n    );\n  },\n  resumed() {\n    Influx?.writePoint(\n      new Point('gatewayEvents')\n        .timestamp(new Date())\n        .stringField('type', \"RESUMED\"),\n        .tag('shard', shardId),\n    );\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Removing TypeScript Clutter Example\nDESCRIPTION: This example demonstrates how to reduce TypeScript clutter by defining a custom `BotDesiredProperties` interface based on the `desiredProperties` object. This simplifies type definitions and improves code readability.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/desired-properties.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBot, createDesiredPropertiesObject } from '@discordeno/bot';\n\nconst desiredProperties = createDesiredPropertiesObject({\n  message: {\n    id: true,\n    author: true,\n  },\n  user: {\n    id: true,\n    toggles: true, // Toggles includes the \"bot\" flag\n    username: true,\n  },\n})\n\ninterface BotDesiredProperties extends Required<typeof desiredProperties> {}\n\nconst bot = createBot({\n  // Your usual createBot options, such as token and intents\n  desiredProperties: desiredProperties as BotDesiredProperties,\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Caching with `shouldCache`\nDESCRIPTION: This snippet shows how to use the `shouldCache` option to conditionally cache objects based on certain criteria. In this example, it only caches channels that belong to a guild.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/caching.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nshouldCache: {\n  channel: async (channel) => {\n    if (channel.guildId) return true;\n    else return false;\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implement Command Interface in Command File Typescript\nDESCRIPTION: This snippet shows how to implement the custom `Command` interface in a specific command file (e.g., `role.ts`). It changes the type of the command object from `CreateApplicationCommand` to `Command` and adds an `execute` method. This implementation ensures type safety and consistent command structure.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  // remove-next-line\n  CreateApplicationCommand,\n  ApplicationCommandOptionTypes,\n  ButtonStyles,\n} from '@discordeno/types'\n// insert-next-line\nimport type { Command } from './index.js'\n\n// Change from 'CreateApplicationCommand' to 'Command'\nconst command: Command = {\n  name: 'roles',\n  description: 'Role management on your server.',\n  options: [\n    // All the options we defined before\n  ],\n  async execute(interaction, args) {},\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Gateway Events with InfluxDB Typescript\nDESCRIPTION: This snippet demonstrates how to track gateway events by writing data points to InfluxDB. It captures the event type and shard ID, allowing for analysis of gateway performance and event distribution.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-3-gateway.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nevents: {\n  async message(shard, payload) {\n    Influx?.writePoint(\n      new Point('gatewayEvents')\n        .timestamp(new Date())\n        .stringField('type', payload.t ?? \"NA\")\n        .tag('shard', shardId),\n    );\n\n    await fetch(getUrlFromShardId(req.body.totalShards, shard.id), {\n+     method: 'POST',\n+     headers: {\n+       'Content-Type': 'application/json',\n+       authorization: AUTHORIZATION,\n+     },\n+     body: JSON.stringify({ payload, shardId: shard.id }),\n+   })\n+     .then(res => res.text())\n+     .catch(logger.error)\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Define Command Arguments Interface Typescript\nDESCRIPTION: This code defines a TypeScript interface `CommandArgs` to provide type safety and autocomplete for command arguments within the `execute` method.  This helps developers easily access and utilize the arguments passed to the command.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// Add the 'CommandArgs' for typescript\nasync execute(interaction, args: CommandArgs) {\n  // Create a reaction role\n  if (args.reactions?.create) {\n  }\n}\n\n// Place this somewhere at the bottom or top of the file.\n// Make sure to import all the following types as well.\ninterface CommandArgs {\n  reactions?: {\n    create?: {\n      role: Role\n      emoji: string\n      color: ButtonStyles\n      label?: string\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Analytics for Request Fetching\nDESCRIPTION: This snippet implements analytics for when a request is being fetched. It writes a point to InfluxDB with the request method, URL, and bucket. It requires the Influx object from the analytics.ts file.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-2-rest.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nInflux?.writePoint(\n  new Point('restEvents')\n    .timestamp(new Date())\n    .stringField('type', 'REQUEST_FETCHING')\n    .tag('method', options.method)\n    .tag('url', options.url)\n    .tag('bucket', options.bucketId ?? 'NA'),\n)\nconst result = await REST.makeRequest(\n  req.method,\n  `${REST.baseUrl}${req.url}`,\n  req.body,\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Useless MESSAGE_UPDATE Events Typescript\nDESCRIPTION: This code snippet implements a cache to ignore redundant `MESSAGE_UPDATE` events. It compares the current message content with a cached version and only processes the event if the content has changed, significantly reducing CPU usage in scenarios with frequent embed or link updates.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-3-gateway.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nif (payload.t === 'MESSAGE_UPDATE') {\n  const message = payload.d as DiscordMessage\n\n  const id = message.id\n  const content = message.content || ''\n  const cached = cache.editedMessages.get(id)\n\n  if (cached === content) return\n  else {\n    // Add to local cache for future events comparison\n    cache.editedMessages.set(id, content)\n    // Remove after 10 seconds from cache\n    setTimeout(() => {\n      cache.editedMessages.delete(id)\n    }, 10000)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing environment variables in Deno\nDESCRIPTION: This snippet demonstrates how to access environment variables in Deno using the object returned by the `load` function. The variable name is used as a key to access its corresponding value from the object.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/beginner/env.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst dbHost = env.DB_HOST\nconst dbUser = env.DB_USER\nconst dbPass = env.DB_PASS\n```\n\n----------------------------------------\n\nTITLE: Filtering GUILD_CREATE Events Typescript\nDESCRIPTION: This code snippet modifies the `GUILD_CREATE` event handling to differentiate between new guilds and resumed/available guilds. It checks if the guild ID is already in the cache and renames the event to `GUILD_LOADED_DD` for new guilds, preventing unnecessary processing of resumed guilds.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-3-gateway.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nif (payload.t === 'READY') {\n  // Marks which guilds the bot in when initial loading in cache\n  payload.d.guilds.forEach(g => cache.loadingGuildIds.add(g.id))\n}\n\nif (payload.t === 'GUILD_CREATE') {\n  // Check if this id is in cache\n  const existing = cache.guildIds.has(payload.d.id)\n  // If it already exists this was either a shard resume or unavailable guild became available etc...\n  if (existing) return\n\n  // add this id to cache or db\n  cache.guildIds.add(payload.d.id)\n\n  if (cache.loadingGuildIds.has(payload.d.id)) {\n    // SEND A CUSTOM EVENT. Name it whatever u want\n    payload.t = 'GUILD_LOADED_DD'\n    // Remove from cache\n    cache.loadingGuildIds.delete(id)\n  }\n\n  cache.guildIds.add(id)\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Guild from Cache\nDESCRIPTION: This snippet demonstrates how to retrieve a guild from the cache using the `dd-cache-proxy` package.  It accesses the `guilds` property under `bot.cache` and uses the `get` method to retrieve a guild by its ID.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/caching.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nawait bot.cache.guilds.get(guildId);\n\n```\n\n----------------------------------------\n\nTITLE: Initializing InfluxDB Client Typescript\nDESCRIPTION: This code snippet initializes the InfluxDB client using environment variables for the organization, bucket, token, and URL. It also sets up an interval to periodically flush the data to the InfluxDB server to persist the metrics.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-3-gateway.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InfluxDB, Point } from '@influxdata/influxdb-client'\n\nconst INFLUX_ORG = process.env.INFLUX_ORG as string\nconst INFLUX_BUCKET = process.env.INFLUX_BUCKET as string\nconst INFLUX_TOKEN = process.env.INFLUX_TOKEN as string\nconst INFLUX_URL = process.env.INFLUX_URL as string\n\nexport const influxDB =\n  INFLUX_URL && INFLUX_TOKEN\n    ? new InfluxDB({ url: INFLUX_URL, token: INFLUX_TOKEN })\n    : undefined\nexport const Influx = influxDB?.getWriteApi(INFLUX_ORG, INFLUX_BUCKET)\n\nlet savingAnalyticsId: NodeJS.Interval | undefined = undefined\nif (!saveAnalyticsId) {\n  setInterval(() => {\n    console.log(`[Influx - Gateway] Saving events...`)\n    Influx?.flush()\n      .then(() => {\n        console.log(`[Influx - Gateway] Saved events!`)\n      })\n      .catch(error => {\n        console.log(`[Influx - Gateway] Error saving events!`, error)\n      })\n    // Every 15 seconds\n  }, 15000)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Option with Choices - Typescript\nDESCRIPTION: This snippet defines a color option for the reaction role button, using predefined choices for valid color values. The 'color' option utilizes `ApplicationCommandOptionTypes.Integer` along with a `choices` array to restrict user input to a set of valid `ButtonStyles`. The `required` property is set to true.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"emoji\",\n  description: \"What would you like to set as this button's emoji?\",\n  type: ApplicationCommandOptionTypes.String,\n  required: true,\n},\n// insert-start\n{\n  name: \"color\",\n  description: \"What color would you like to set as this button's color?\",\n  type: ApplicationCommandOptionTypes.Integer,\n  required: true,\n  choices: [\n    { name: \"Blue\", value: ButtonStyles.Primary },\n    { name: \"Green\", value: ButtonStyles.Success },\n    { name: \"Grey\", value: ButtonStyles.Secondary },\n    { name: \"Red\", value: ButtonStyles.Danger },\n  ],\n},\n// insert-end\n```\n\n----------------------------------------\n\nTITLE: Accessing environment variables in Bun (Bun.env)\nDESCRIPTION: This snippet demonstrates how to access environment variables in Bun using the `Bun.env` object.  Bun automatically loads `.env` files in the current directory. The variable name is used as a key to access its corresponding value from the `Bun.env` object.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/beginner/env.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst dbHost = Bun.env.DB_HOST\nconst dbUser = Bun.env.DB_USER\nconst dbPass = Bun.env.DB_PASS\n```\n\n----------------------------------------\n\nTITLE: Ignoring Useless GUILD_DELETE Events Typescript\nDESCRIPTION: This snippet demonstrates how to ignore `GUILD_DELETE` events when the guild is unavailable. These events can be noisy and do not represent a true guild removal, so filtering them reduces unnecessary processing.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-3-gateway.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nif (payload.t === 'GUILD_DELETE') {\n  if ((payload.d as DiscordUnavailableGuild).unavailable) return\n}\n```\n\n----------------------------------------\n\nTITLE: Loading .env file with Node.js --env-file\nDESCRIPTION: This snippet demonstrates how to load a `.env` file in Node.js using the built-in `--env-file` option.  This feature requires Node.js v20.6 or newer.  The path to the `.env` file is specified as an argument to the `--env-file` flag when running the Node.js script.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/beginner/env.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode --env-file=.env index.js\n```\n\n----------------------------------------\n\nTITLE: Integrating Item Collector in interactionCreate Event (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to integrate the `ItemCollector` into the `interactionCreate` event. It imports the `ItemCollector` class and creates a `Set` to store collectors. When an interaction is received, it iterates through the collectors and calls the `collect` method on each, allowing them to handle the interaction.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// REST OF YOUR CODE HERE\n\n// insert-next-line\nimport ItemCollector from '../collector.js'\n\n// insert-next-line\nexport const collectors = new Set<ItemCollector>()\n\nexport const event: typeof bot.event.interactionCreate = async interaction => {\n  // insert-next-line\n  for (const collector of collectors) {\n    // insert-next-line\n    collector.collect(interaction)\n    // insert-next-line\n  }\n\n  // REST OF YOUR CODE HERE\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Listener with Express\nDESCRIPTION: This snippet creates an HTTP listener using Express to handle incoming requests and forward them to the REST manager. It requires the dotenv and express packages. It uses an authorization header to secure the endpoint. It also handles sending responses and errors back to the original process.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-2-rest.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport dotenv from 'dotenv'\nimport express from 'express'\n\ndotenv.config()\n\nimport { REST } from './rest.ts'\n\nconst AUTHORIZATION = process.env.AUTHORIZATION as string\n\nconst app = express()\n\napp.use(\n  express.urlencoded({\n    extended: true,\n  }),\n)\n\napp.use(express.json())\n\napp.all('/*', async (req, res) => {\n  if (!AUTHORIZATION || AUTHORIZATION !== req.headers.authorization) {\n    return res.status(401).json({ error: 'Invalid authorization key.' })\n  }\n\n  try {\n    const result = await REST.makeRequest(req.method, req.url.substring(4), {\n      body: req.method !== 'DELETE' && req.method !== 'GET' ? {} : req.body,\n    })\n\n    if (result) {\n      res.status(200).json(result)\n    } else {\n      res.status(204).json()\n    }\n  } catch (error: any) {\n    console.log(error)\n    res.status(500).json(error)\n  }\n})\n\napp.listen(REST_PORT, () => {\n  console.log(`REST listening at ${REST_URL}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Assign Events to Bot Object Typescript\nDESCRIPTION: This code demonstrates how to assign the collected events to the Discordeno bot object.  It imports the events from `./events/index.js` and sets them to the `bot.events` property.  This is necessary for Discordeno to recognize and utilize the defined events.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBot } from '@discordeno/bot'\nimport { config } from 'dotenv'\n// insert-next-line\nimport events from './events/index.js'\n\nconfig()\n\nexport const bot = createBot({\n  token: process.env.TOKEN,\n})\n\n// insert-next-line\nbot.events = events\n\n// ... REST OF THE FILE ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Desired Properties Behavior\nDESCRIPTION: This example shows how to configure the `desiredPropertiesBehavior` option in the `createBot` function. The behavior is set to `ChangeType`, which means that undesired properties will be typed with a string explaining why they are disabled.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/desired-properties.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst bot = createBot({\n  // Your usual createBot options, such as token and intents\n  desiredPropertiesBehavior: DesiredPropertiesBehavior.ChangeType,\n  desiredProperties: {\n    user: {\n      id: true,\n      toggles: true, // Toggles includes the \"bot\" flag\n      username: true,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring a REST Proxy for Discordeno\nDESCRIPTION: This snippet configures the Discordeno bot to use a REST proxy for making API requests. It sets the `baseUrl` and `authorization` properties within the `rest.proxy` configuration object, which tells the bot to route all REST requests through the specified proxy server.  The proxy URL and authorization token are obtained from environment variables.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-4-bot.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const BOT = createBot({\n  token,\n  rest: {\n    proxy: {\n      baseUrl: process.env.REST_URL,\n      authorization: process.env.AUTHORIZATION,\n    },\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding Gateway Request Members Function in Discordeno\nDESCRIPTION: This code overrides the default `requestMembers` function on the `BOT.gateway` object.  This allows custom handling of member requests, potentially redirecting them to a gateway manager.  In this example, the function is left as a placeholder for implementation.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-4-bot.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nBOT.gateway.requestMembers = async function (guildId, options) {\n  // TODO: Implement the change we need.\n}\n```\n\n----------------------------------------\n\nTITLE: Loading .env file in Deno\nDESCRIPTION: This snippet shows how to load a `.env` file in Deno using the `load` function from the `deno.land/std/dotenv` module. The `load` function is imported and then awaited to retrieve an object containing the environment variables.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/beginner/env.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { load } from 'https://deno.land/std@0.212.0/dotenv/mod.ts'\n\nconst env = await load()\n```\n\n----------------------------------------\n\nTITLE: Installing Discordeno using npm\nDESCRIPTION: This command installs the Discordeno library using npm. It is a prerequisite for using Discordeno in a Node.js environment.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install discordeno # Using npm\n```\n\n----------------------------------------\n\nTITLE: Define Custom Command Interface Typescript\nDESCRIPTION: This code defines a custom `Command` interface in TypeScript, extending the `CreateApplicationCommand` interface and adding an `execute` method. This interface ensures that all commands have a standardized execute handler, enabling consistent command execution.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CreateApplicationCommand, Interaction } from '@discordeno/types'\nimport roles from './roles.js'\n\n// remove-start\nexport const commands = new Map<string, CreateApplicationCommand>(\n  [roles].map(cmd => [cmd.name, cmd]),\n)\n// remove-end\n// insert-start\nexport const commands = new Map<string, Command>(\n  [roles].map(cmd => [cmd.name, cmd]),\n)\n// insert-end\n\nexport default commands\n\n// insert-start\nexport interface Command extends CreateApplicationCommand {\n  /** Handler that will be executed when this command is triggered */\n  execute(interaction: Interaction, args: Record<string, any>): Promise<any>\n}\n// insert-end\n```\n\n----------------------------------------\n\nTITLE: Implement Create Subcommand with Buttons Typescript\nDESCRIPTION: This code implements the `create` subcommand within the `/roles` command. It sends a message with a reaction role button and a private message to the user with buttons to edit the reaction roles. The code utilizes Discordeno's `sendMessage` and `interaction.respond` helpers along with message components.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApplicationCommandOptionTypes, ButtonStyles, MessageComponentTypes } from '@discordeno/types'\n\n// your other code here\n\nasync execute(interaction, args: CommandArgs) {\n  // Create a reaction role\n  if (args.reactions?.create) {\n    // Send the message that uses will use to get the role\n    const roleMessage = await bot.helpers.sendMessage(interaction.channelId, {\n      content: 'Pick your roles',\n      components: [\n        {\n          type: MessageComponentTypes.ActionRow,\n          components: [\n            {\n              type: MessageComponentTypes.Button,\n              style: args.reactions.create.color,\n              emoji: {\n                name: args.reactions.create.emoji,\n              },\n              label: args.reactions.create.label,\n              customId: `reactionRoles-role-${args.reactions.create.role.id}`,\n            }\n          ]\n        }\n      ],\n    })\n\n    await interaction.respond(\n      {\n        content: 'Use the buttons in this message to edit the message below.',\n        components: [\n          {\n            type: MessageComponentTypes.ActionRow,\n            components: [\n              {\n                type: MessageComponentTypes.Button,\n                style: ButtonStyles.Success,\n                customId: 'reactionRoles-add',\n                emoji: {\n                  name: '➕',\n                },\n                label: 'Add',\n              },\n              {\n                type: MessageComponentTypes.Button,\n                style: ButtonStyles.Danger,\n                customId: 'reactionRoles-remove',\n                emoji: {\n                  name: '➖',\n                },\n                label: 'Remove',\n              },\n              {\n                type: MessageComponentTypes.Button,\n                style: ButtonStyles.Success,\n                customId: 'reactionRoles-save',\n                emoji: {\n                  name: '✅',\n                },\n                label: 'Save',\n              },\n            ],\n          }\n        ],\n      },\n      { isPrivate: true }\n    )\n  }\n}\n\n// THE REST OF YOUR CODE\n```\n\n----------------------------------------\n\nTITLE: Handling 'Remove' Select Menu Selection in Discordeno\nDESCRIPTION: This snippet handles the selection from the 'remove' select menu. It filters the `roles` array to remove the selected role, updates the message components using `getRoleButtons`, and sends an updated message. `i.deferEdit()` is used to acknowledge the interaction.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nif (i.data?.customId === 'reactionRoles-remove') {\n  const options: SelectOption[] = []\n\n  for (const roleInfo of roles) {\n    options.push({\n      label: `${roleInfo.emoji} ${roleInfo.label}`,\n      value: roleInfo.role.id.toString(),\n    })\n  }\n\n  await i.deferEdit()\n  await i.edit({\n    content: 'Select what reaction role to remove',\n    components: [\n      {\n        type: MessageComponentTypes.ActionRow,\n        components: [\n          {\n            type: MessageComponentTypes.SelectMenu,\n            customId: 'reactionRoles-remove-selectMenu',\n            maxValues: 1,\n            minValues: 1,\n            placeholder: 'Select roles',\n            options,\n          },\n        ],\n      },\n    ],\n  })\n\n  return\n}\n\n// insert-start\nif (i.data?.customId === 'reactionRoles-remove-selectMenu') {\n  const roleToRemove = i.data?.values?.[0]\n\n  await i.deferEdit()\n\n  roles = roles.filter(roleInfo => roleInfo.role.id.toString() !== roleToRemove)\n\n  await bot.helpers.editMessage(interaction.channelId, roleMessage.id, {\n    components: getRoleButtons(roles),\n  })\n\n  await i.edit({\n    content: 'Use the buttons in this message to edit the message below.',\n    components: [messageActionRow],\n  })\n\n  return\n}\n// insert-end\n\n// REST OF YOUR CODE\n```\n\n----------------------------------------\n\nTITLE: Adding Guild to Cache Manually\nDESCRIPTION: This snippet demonstrates how to manually add a guild to a cache by overriding the `bot.transformers.customizers.guild` function.  This function is called every time a guild is received, allowing you to store the guild in your desired cache implementation.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/caching.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nbot.transformers.customizers.guild = (bot, payload, guild) => {\n  // Store the guild into cache\n  guilds.set(guild.id, guild);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Updating Desired Properties for Interactions and Messages (TypeScript)\nDESCRIPTION: This code snippet demonstrates updating the `desiredProperties` in the bot's configuration to include necessary properties for interactions and messages. It adds `message: true` to the interaction properties and `id: true` to the message properties, allowing the bot to access the message associated with an interaction and the ID of the message.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// REST OF YOUR CODE\n\nexport const bot = createBot({\n  token,\n  desiredProperties: {\n    interaction: {\n      id: true,\n      data: true,\n      type: true,\n      token: true,\n      // insert-next-line\n      message: true,\n      channelId: true,\n    },\n    // insert-start\n    message: {\n      id: true,\n    }\n    // insert-end\n  }\n})\n\n// REST OF YOUR CODE\n```\n\n----------------------------------------\n\nTITLE: Installing specific Discordeno packages\nDESCRIPTION: This command demonstrates how to install specific Discordeno packages, like @discordeno/types, using npm. This allows developers to selectively include only the necessary dependencies.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/getting-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @discordeno/types # Using npm\n```\n\n----------------------------------------\n\nTITLE: Using Inferred Types Example\nDESCRIPTION: This example showcases how to utilize the `bot.transformers.$inferredTypes` object to correctly type function parameters based on the configured `desiredProperties`. This ensures type safety when working with Discord objects and their properties.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/desired-properties.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst bot = createBot({\n  // Your usual createBot options, such as token and intents\n  desiredProperties: {\n    message: {\n      id: true,\n      author: true,\n    },\n    user: {\n      id: true,\n      toggles: true, // Toggles includes the \"bot\" flag\n      username: true,\n    },\n  },\n})\n\nbot.events.messageCreate = (message) => {\n  processMessage(message)\n}\n\nfunction processMessage(message: typeof bot.transformers.$inferredTypes.message) {\n  bot.logger.info(`Message with id ${message.id} has author @${message.author.username}, whose has id ${message.author.id} and ${message.author.bot ? 'is' : \"isn't\"} a bot`)\n\n  // Do some other work with the message\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dd-cache-proxy\nDESCRIPTION: This snippet demonstrates how to install the `dd-cache-proxy` package using yarn. This package provides a simplified way to cache data in Discordeno.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/caching.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add dd-cache-proxy\n```\n\n----------------------------------------\n\nTITLE: Accessing environment variables in Bun (process.env)\nDESCRIPTION: This snippet demonstrates how to access environment variables in Bun using the `process.env` object, similar to Node.js.  Bun automatically loads `.env` files in the current directory. The variable name is used as a key to access its corresponding value from the `process.env` object.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/beginner/env.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst dbHost = process.env.DB_HOST\nconst dbUser = process.env.DB_USER\nconst dbPass = process.env.DB_PASS\n```\n\n----------------------------------------\n\nTITLE: Run Integration Tests\nDESCRIPTION: This command executes integration tests that verify the interaction between different parts of the system without connecting to external services like Discord. They use fake data to ensure proper functioning.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/contributing.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:integration\n```\n\n----------------------------------------\n\nTITLE: Implementing a Ready Event Handler in Discordeno\nDESCRIPTION: This code defines a handler function for the `ready` event in Discordeno. It imports the `BOT` instance from a local file and defines an asynchronous function that logs a message indicating that a shard is ready, including its shard ID. The function conforms to the type definition for the `ready` event handler within the Discordeno `BOT.events` object.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-4-bot.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BOT } from '../bot.js'\n\nexport const ready: typeof BOT.events.ready = async ({ shardId }) => {\n  BOT.logger.info(`[READY] Shard ID #${shardId} is ready.`)\n}\n```\n\n----------------------------------------\n\nTITLE: Push Changes to GitHub\nDESCRIPTION: This command pushes the committed changes from your local repository to the remote GitHub repository. It requires Git to be installed and configured on your computer, and the local repository to be properly initialized and connected to the remote repository.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/beginner/github.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin main\n```\n\n----------------------------------------\n\nTITLE: Run Release Build\nDESCRIPTION: This command executes both the `build` and `build:type` scripts, performing a complete build of the project including both Javascript code and TypeScript type definitions.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/contributing.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn release-build\n```\n\n----------------------------------------\n\nTITLE: Initializing REST Manager with Discordeno\nDESCRIPTION: This snippet initializes the REST manager using the @discordeno/rest library. It requires the @discordeno/rest package and uses the bot token from the environment variables. The token is used to authenticate with the Discord API.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-2-rest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRestManager } from '@discordeno/rest'\n\nexport const REST = createRestManager({\n  // YOUR BOT TOKEN HERE\n  token: process.env.TOKEN,\n})\n```\n\n----------------------------------------\n\nTITLE: Lint Code\nDESCRIPTION: This command performs static analysis on the codebase to identify potential errors, enforce coding standards, and improve code quality.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/contributing.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Format Code\nDESCRIPTION: This command formats the codebase to adhere to the project's coding style, ensuring consistency across all files. It is often run automatically before commits using Husky and lint-staged.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/contributing.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn fmt\n```\n\n----------------------------------------\n\nTITLE: Adding Command Name and Description\nDESCRIPTION: This code snippet adds the `name` and `description` properties to the command object. The `name` is set to 'roles', which will be the main command name. The `description` provides a brief explanation of what the command does.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CreateApplicationCommand } from '@discordeno/types'\n\nexport const command: CreateApplicationCommand = {\n  // insert-start\n  name: 'roles',\n  description: 'Role management on your server.',\n  // insert-end\n}\n```\n\n----------------------------------------\n\nTITLE: Render React Component in Markdown\nDESCRIPTION: This snippet renders the 'Benchmark' React component within the Markdown file. This allows for dynamic content to be displayed, likely containing benchmark results.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/benchmark.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Benchmark />\n```\n\n----------------------------------------\n\nTITLE: Handling READY Event for Guild Caching Typescript\nDESCRIPTION: This snippet captures the `READY` event and stores the initial guild IDs in the `loadingGuildIds` cache. This cache is used to identify guilds the bot is already in when it starts, preventing duplicate processing of `GUILD_CREATE` events during startup.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-3-gateway.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nevents: {\n  async message(shrd, payload) {\n    Influx?.writePoint(\n      new Point('gatewayEvents')\n        .timestamp(new Date())\n        .stringField('type', payload.t ?? \"NA\")\n        .tag('shard', shardId),\n    );\n\n    if (payload.t === \"READY\") {\n      // Marks which guilds the bot in when initial loading in cache\n      payload.d.guilds.forEach((g) => cache.loadingGuildIds.add(g.id));\n    }\n\n    await fetch(getUrlFromShardId(req.body.totalShards, shard.id), {\n+     method: 'POST',\n+     headers: {\n+       'Content-Type': 'application/json',\n+       authorization: AUTHORIZATION,\n+     },\n+     body: JSON.stringify({ payload, shardId: shard.id }),\n+   })\n+     .then(res => res.text())\n+     .catch(logger.error)\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image\nDESCRIPTION: This command builds or rebuilds the Docker image for the bot. It ensures that the latest changes in the codebase are incorporated into the Docker image before deployment.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/examples/bigbot/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose build\n```\n\n----------------------------------------\n\nTITLE: Adding Subcommand to Subcommand Group\nDESCRIPTION: This snippet adds a 'create' subcommand to the 'reactions' subcommand group. This allows users to create reaction roles with the command `/roles reactions create`. The type is set to `ApplicationCommandOptionTypes.SubCommand`.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\noptions: [\n  {\n    name: 'reactions',\n    description: 'Manage the role reactions on your server.',\n    type: ApplicationCommandOptionTypes.SubCommandGroup,\n    // insert-start\n    options: [\n      {\n        name: 'create',\n        description: 'Create a reaction role on your server.',\n        type: ApplicationCommandOptionTypes.SubCommand,\n      },\n    ],\n    // insert-end\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Preparing Subcommand Group\nDESCRIPTION: This code adds an `options` array to the command object to define subcommands. It creates a 'reactions' subcommand group with a name, description, and type `ApplicationCommandOptionTypes.SubCommandGroup`.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const command: CreateApplicationCommand = {\n  name: 'roles',\n  description: 'Role management on your server.',\n  // insert-start\n  options: [\n    {\n      name: 'reactions',\n      description: 'Manage the role reactions on your server.',\n      type: ApplicationCommandOptionTypes.SubCommandGroup,\n    },\n  ],\n  // insert-end\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Command Type with TypeScript\nDESCRIPTION: This code snippet adds a TypeScript type definition to the command object, enabling autocompletion and type checking. It imports `CreateApplicationCommand` from `@discordeno/types` and assigns it to the `command` variable.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CreateApplicationCommand } from '@discordeno/types'\n\n// remove-next-line\nexport const command = {}\n// insert-next-line\nexport const command: CreateApplicationCommand = {}\n```\n\n----------------------------------------\n\nTITLE: Check TypeScript Types\nDESCRIPTION: This command checks TypeScript types to ensure type safety and prevent runtime errors. It verifies that all type annotations are correct and consistent.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/README.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn test:type\n```\n\n----------------------------------------\n\nTITLE: Initializing Roles Array in Discordeno\nDESCRIPTION: This snippet initializes an array named `roles` with an object containing reaction role information. It then sends a message with a button representing the reaction role using `bot.helpers.sendMessage`. The initial implementation creates an action row with the button, to later be refactored.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// insert-next-line\nlet roles = [args.reactions.create]\n\nconst roleMessage = await bot.helpers.sendMessage(interaction.channelId, {\n  content: 'Pick your roles',\n  components: [\n    {\n      type: MessageComponentTypes.ActionRow,\n      components: [\n        {\n          type: MessageComponentTypes.Button,\n          style: args.reactions.create.color,\n          emoji: {\n            name: args.reactions.create.emoji,\n          },\n          label: args.reactions.create.label,\n          customId: `reactionRoles-role-${args.reactions.create.role.id}`,\n        },\n      ],\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Message Event Handler to Shard\nDESCRIPTION: This code snippet demonstrates how to add a message event handler to the `DiscordenoShard`. When a message event is received, the handler sends the payload to an event listener URL. The URL is determined by the shard ID. This allows for processing incoming events and handling general message traffic.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-3-gateway.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst shard =\n  SHARDS.get(req.body.shardId) ??\n  new DiscordenoShard({\n    id: req.body.shardId,\n    connection: {\n      compress: req.body.compress,\n      intents: req.body.intents,\n      properties: req.body.properties,\n      token: req.body.token,\n      totalShards: req.body.totalShards,\n      url: req.body.url,\n      version: req.body.version,\n    },\n    events: {\n      async message(shard, payload) {\n        await fetch(getUrlFromShardId(req.body.totalShards, shard.id), {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            authorization: AUTHORIZATION,\n          },\n          body: JSON.stringify({ payload, shardId: shard.id }),\n        })\n          .then(res => res.text())\n          .catch(logger.error)\n      },\n    },\n  })\n```\n\n----------------------------------------\n\nTITLE: Run Unit Tests with Coverage\nDESCRIPTION: This command runs unit tests and generates a coverage report to evaluate the percentage of the codebase covered by the tests. The report is outputted to the console and a coverage folder.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/contributing.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:unit-coverage\n```\n\n----------------------------------------\n\nTITLE: Run Integration Tests\nDESCRIPTION: This command runs integration tests to verify that different parts of the system work together correctly. It ensures that the components interact as expected.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/README.md#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nyarn test:integration\n```\n\n----------------------------------------\n\nTITLE: Creating a Discordeno Bot Instance\nDESCRIPTION: This snippet demonstrates how to create a basic Discordeno bot instance using the `createBot` function. It imports the necessary function from the `@discordeno/bot` library and exports a `BOT` constant that represents the created bot instance.  The `token` variable is assumed to be defined elsewhere, likely through environment variables.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/bigbot/step-4-bot.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBot } from '@discordeno/bot'\n\nexport const BOT = createBot({\n  token,\n})\n```\n\n----------------------------------------\n\nTITLE: Run Bun Unit Tests\nDESCRIPTION: This command executes the unit tests using Bun as the runtime environment, ensuring compatibility and proper functionality within the Bun environment. Requires Bun to be installed.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/contributing.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:bun-unit\n```\n\n----------------------------------------\n\nTITLE: Creating Commands Index in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an index file to store and manage Discordeno bot commands. It imports command modules (like `roles.js`) and aggregates them into a `Map` called `commands`, making it easier to manage and register multiple commands at once.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CreateApplicationCommand } from '@discordeno/types'\nimport roles from './roles.js'\n\nexport const commands = new Map<string, CreateApplicationCommand>(\n  [roles].map(cmd => [cmd.name, cmd]),\n)\n\nexport default commands\n```\n\n----------------------------------------\n\nTITLE: Run Unit Tests with Deno\nDESCRIPTION: This command runs unit tests using the Deno runtime. This allows testing of code that is specifically designed to run in Deno.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/README.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nyarn test:deno-unit\n```\n\n----------------------------------------\n\nTITLE: Register Interaction Create Event in Index Typescript\nDESCRIPTION: This snippet demonstrates how to register the interactionCreate event with the Discordeno bot. It imports the event handler and assigns it to the corresponding event in the `bot.events` object. This registration is essential for the bot to listen for and process interaction events.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { bot } from '../bot.js'\nimport { event as interactionCreateEvent } from './interactionCreate.js'\n\nexport const events = {\n  interactionCreate: interactionCreateEvent,\n} as typeof bot.events\n\nexport default events\n```\n\n----------------------------------------\n\nTITLE: Importing dotenv package in Node.js\nDESCRIPTION: This snippet shows how to import and configure the `dotenv` package in a Node.js TypeScript file.  First, the `dotenv` package must be installed. Then, `dotenv.config()` is called to load environment variables from the `.env` file into `process.env`.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/beginner/env.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport dotenv from 'dotenv'\n\ndotenv.config()\n```\n\n----------------------------------------\n\nTITLE: Run Unit Tests with Bun\nDESCRIPTION: This command runs unit tests using the Bun runtime. This allows testing of code that is specifically designed to run in Bun.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/README.md#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nyarn test:bun-unit\n```\n\n----------------------------------------\n\nTITLE: Run End-to-End Tests\nDESCRIPTION: This command executes the end-to-end tests for the project, simulating real-world scenarios to ensure that the entire system is working correctly. This requires setting up environment variables.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/contributing.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:e2e\n```\n\n----------------------------------------\n\nTITLE: Respond to Interaction - Hello World\nDESCRIPTION: This snippet demonstrates how to respond to an interaction with a simple 'Hello world' message. It's a placeholder to ensure the basic interaction handling is functioning correctly before implementing more complex logic.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nawait i.respond({\n    content: 'Hello world',\n  })\n\n  return\n```\n\n----------------------------------------\n\nTITLE: Run End-to-End Tests\nDESCRIPTION: This command runs end-to-end (e2e) tests. E2E tests simulate real user scenarios to ensure that the application works correctly from start to finish.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/README.md#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nyarn test:e2e\n```\n\n----------------------------------------\n\nTITLE: Initializing Partial Role Info Variable in Discordeno\nDESCRIPTION: This snippet initializes a variable, `partialRoleInfo`, to store partial data for a new reaction role being created.  It is set to `undefined` initially.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/examples/reactionroles.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n// REST OF YOUR CODE\n\n// insert-next-line\nlet partialRoleInfo: Partial<(typeof roles)[number]> | undefined\n\nitemCollector.onItem(async i => {\n  // REST OF YOUR CODE\n})\n\n// REST OF YOUR CODE\n```\n\n----------------------------------------\n\nTITLE: Discordeno Event Example\nDESCRIPTION: This code snippet illustrates how Discordeno handles events using a functional approach. It calls the 'guildCreate' event handler directly, passing the bot and guild objects as arguments.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/faq.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Discordeno Example\nbot.events.guildCreate?.(bot, guild)\n```\n\n----------------------------------------\n\nTITLE: Run Type Tests\nDESCRIPTION: This command verifies that the tests do not have any type errors, ensuring type safety throughout the test suite.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/contributing.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:test-type\n```\n\n----------------------------------------\n\nTITLE: Start Local Development Server\nDESCRIPTION: This command starts the Docusaurus local development server. It opens a browser window and enables hot reloading, reflecting changes in real-time without restarting the server. This facilitates rapid development and testing.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Message Deduplication Plugin\nDESCRIPTION: This command enables the rabbitmq_message_deduplication plugin in RabbitMQ. It's necessary for the message deduplication functionality to work as intended. Depending on your setup, you might need sudo privileges.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/examples/bigbot/rabbitmq/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_message_deduplication\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with Yarn\nDESCRIPTION: This command installs all the necessary dependencies for the Docusaurus website using Yarn. It ensures that all required packages are available for local development and building the project.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Build Project Files and Types\nDESCRIPTION: This command builds all the files and types across all packages in the Discordeno project. It is an essential step in the development process to ensure that the code is compiled and the types are correctly generated.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn release-build\n```\n\n----------------------------------------\n\nTITLE: EventEmitter Example\nDESCRIPTION: This code snippet demonstrates how events are emitted using the EventEmitter pattern. It shows the emission of a 'guildCreate' event with the guild object as data.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/faq.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// EventEmitter Example\nEventEmitter.emit('guildCreate', guild)\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Containers\nDESCRIPTION: This command starts the Docker containers in detached mode. It runs the bot, InfluxDB, and RabbitMQ services as defined in the docker-compose.yml file in the background.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/examples/bigbot/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Message Deduplication Plugin\nDESCRIPTION: This command enables the RabbitMQ Message Deduplication plugin. It requires the plugin to be installed in RabbitMQ.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/examples/bigbot/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_message_deduplication\n```\n\n----------------------------------------\n\nTITLE: Discordeno Event Handler Update\nDESCRIPTION: This code demonstrates how to update event handlers in Discordeno. It assigns a new event handler function to the 'guildCreate' event, making it easy to modify event handling logic.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/faq.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbot.events.guildCreate = newGuildCreateEventHandler\n```\n\n----------------------------------------\n\nTITLE: Building the Code with Yarn\nDESCRIPTION: This command builds the TypeScript code into JavaScript using the configured build process (e.g., tsc). It prepares the code for execution.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/examples/bigbot/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Run Deno Unit Tests\nDESCRIPTION: This command executes the unit tests using Deno as the runtime environment, ensuring compatibility and proper functionality within the Deno environment. Requires Deno to be installed.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/contributing.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:deno-unit\n```\n\n----------------------------------------\n\nTITLE: Deploying Commands with Node.js\nDESCRIPTION: This command executes the `register-commands.js` script using Node.js. This script is responsible for registering the bot's commands with Discord.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/examples/bigbot/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnode dist/bot/register-commands.js\n```\n\n----------------------------------------\n\nTITLE: Run Unit Tests\nDESCRIPTION: This command executes the unit tests for the project to verify that the code changes haven't introduced any regressions. It runs tests in a Node.js environment.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/contributing.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:unit\n```\n\n----------------------------------------\n\nTITLE: Run Unit Tests with Coverage\nDESCRIPTION: This command runs unit tests and generates a coverage report. It helps identify areas of the code that are not adequately tested.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/README.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nyarn test:unit-coverage\n```\n\n----------------------------------------\n\nTITLE: Install Yarn Globally\nDESCRIPTION: This command installs Yarn globally using npm. Yarn is used as the package manager and workspace manager for the Discordeno project. This is a prerequisite for setting up the workspace.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g yarn\n```\n\n----------------------------------------\n\nTITLE: Install Yarn using Corepack\nDESCRIPTION: This command enables Corepack, a tool to manage Yarn versions, ensuring the correct version is used for the project.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/contributing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncorepack enable\n```\n\n----------------------------------------\n\nTITLE: Run Unit Tests on All Packages\nDESCRIPTION: This command runs unit tests on all packages within the Discordeno project. This is a crucial step to verify the correctness and reliability of the code.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn test:unit\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: This command installs all the necessary dependencies for the project using Yarn. It reads the dependencies from the package.json file and installs them into the node_modules directory.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/examples/bigbot/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Check Test File Types\nDESCRIPTION: This command checks TypeScript types specifically for test files. This ensures that the test code is also type-safe.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/README.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nyarn test:test-type\n```\n\n----------------------------------------\n\nTITLE: Starting the Bot with Yarn\nDESCRIPTION: This command starts the main bot process using the yarn script defined in package.json.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/examples/bigbot/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn start:bot\n```\n\n----------------------------------------\n\nTITLE: Check Code Style\nDESCRIPTION: This command checks the code style using a linter. It ensures that the code adheres to the project's coding standards.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Build Documentation for Website\nDESCRIPTION: This command builds the documentation for the Discordeno website. This ensures that the website always has the latest documentation available.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/README.md#_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nyarn build:doc\n```\n\n----------------------------------------\n\nTITLE: Install Project Dependencies\nDESCRIPTION: This command installs all project dependencies using Yarn. It is necessary to run this command to set up the workspace after cloning the repository.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Format Code\nDESCRIPTION: This command formats the code automatically. It helps maintain a consistent code style throughout the project.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/README.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn fmt\n```\n\n----------------------------------------\n\nTITLE: Starting the Gateway with Yarn\nDESCRIPTION: This command starts the Discord gateway process using the yarn script defined in package.json. It handles the real-time communication with Discord's gateway.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/examples/bigbot/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn start:gateway\n```\n\n----------------------------------------\n\nTITLE: Starting the REST Proxy with Yarn\nDESCRIPTION: This command starts the REST proxy using the yarn script defined in package.json. It's responsible for handling REST API requests.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/examples/bigbot/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn start:rest\n```\n\n----------------------------------------\n\nTITLE: Install Corepack Globally via NPM\nDESCRIPTION: This command installs Corepack globally using npm, which is necessary if Corepack is not already available in your environment.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/contributing.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g corepack\n```\n\n----------------------------------------\n\nTITLE: Build Static Website\nDESCRIPTION: This command builds the Docusaurus website into static content, which is then placed in the `build` directory. This output is suitable for deployment to any static content hosting service. No dependencies other than the installed yarn packages are required.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Import React Component in Markdown\nDESCRIPTION: This snippet imports a custom React component named 'Benchmark' from the '@site/src/components/Benchmark' path. This allows the Markdown file to render the React component.\nSOURCE: https://github.com/discordeno/discordeno/blob/main/website/docs/benchmark.mdx#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nimport Benchmark from '@site/src/components/Benchmark'\n```"
  }
]