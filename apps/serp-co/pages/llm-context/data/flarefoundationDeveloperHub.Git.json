[
  {
    "owner": "flare-foundation",
    "repo": "developer-hub.git",
    "content": "TITLE: Querying Multiple Feed Values in Wei - Solidity\nDESCRIPTION: Demonstrates the bulk retrieval of multiple feed values in wei (18 decimal places) from FTSOv2 using getFeedsByIdInWei. The caller supplies an array of feed IDs and may pay a fee. Returns arrays of values in wei and a single timestamp. Ideal for high-precision requirements or systems standardized on wei-based values.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/FtsoV2Interface.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getFeedsByIdInWei(\n    bytes21[] _feedIds\n) external payable returns (\n    uint256[] _values,\n    uint64 _timestamp\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Struct in Solidity\nDESCRIPTION: This snippet defines a Payment struct that represents the structure of a payment transaction. It includes fields for block information, address hashes, amount, reference, and status.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_20\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Payment {\n    uint64 blockNumber;\n    uint64 blockTimestamp;\n    bytes32 sourceAddressHash;\n    bytes32 receivingAddressHash;\n    int256 spentAmount;\n    bytes32 standardPaymentReference;\n    uint8 status;\n}\n```\n\n----------------------------------------\n\nTITLE: Claiming a Weather Insurance Policy as an Insurer\nDESCRIPTION: This script demonstrates how an insurer can claim a policy by depositing the coverage amount. It connects to the WeatherInsuranceAgency contract, approves the stablecoin transfer, and executes the claim operation.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/weather-insurance.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as dotenv from \"dotenv\";\nimport hre, { ethers } from \"hardhat\";\n\ndotenv.config();\n\nasync function main() {\n  // Get the address of the weather insurance agency contract\n  const agencyAddress = process.env.WEATHER_INSURANCE_AGENCY_ADDRESS ?? \"\";\n  // Get the address of the USDC stablecoin contract\n  const stablecoinAddress = process.env.STABLECOIN_ADDRESS ?? \"\";\n  // Get the policy ID\n  const policyId = parseInt(process.env.POLICY_ID ?? \"0\");\n  if (policyId === 0) {\n    throw new Error(\"POLICY_ID not set\");\n  }\n\n  const [, insurer] = await ethers.getSigners();\n  console.log(\"Claiming policy with the account:\", insurer.address);\n\n  const IStablecoin = new ethers.Interface([\n    \"function name() view returns (string)\",\n    \"function symbol() view returns (string)\",\n    \"function decimals() view returns (uint8)\",\n    \"function totalSupply() view returns (uint256)\",\n    \"function balanceOf(address) view returns (uint256)\",\n    \"function transfer(address to, uint256 amount) returns (bool)\",\n    \"function allowance(address owner, address spender) view returns (uint256)\",\n    \"function approve(address spender, uint256 amount) returns (bool)\",\n    \"function transferFrom(address from, address to, uint256 amount) returns (bool)\",\n  ]);\n  const stablecoin = new ethers.Contract(stablecoinAddress, IStablecoin, insurer);\n  console.log(\"stablecoin:\", await stablecoin.name(), await stablecoin.symbol());\n\n  const WeatherInsuranceAgency = await hre.ethers.getContractFactory(\"WeatherInsuranceAgency\");\n  const weatherInsuranceAgency = WeatherInsuranceAgency.attach(agencyAddress).connect(insurer);\n\n  const policy = await weatherInsuranceAgency.getPolicy(policyId);\n  console.log(\"Claiming policy:\", policyId);\n  console.log(\"Policy coverage:\", ethers.formatEther(policy.coverage));\n\n  console.log(\n    \"Approving stablecoin transfer to WeatherInsuranceAgency:\",\n    await weatherInsuranceAgency.getAddress()\n  );\n  const approveTx = await stablecoin.approve(await weatherInsuranceAgency.getAddress(), policy.coverage);\n  await approveTx.wait();\n\n  const tx = await weatherInsuranceAgency.claimPolicy(policyId);\n  await tx.wait();\n  console.log(\"Policy claimed. Tx hash:\", tx.hash);\n}\n\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n\n```\n\n----------------------------------------\n\nTITLE: Structuring FDC Attestation Request in JSON\nDESCRIPTION: Example JSON structure for preparing an attestation request to verify EVM transaction data through FDC. Includes attestationType, sourceId, and requestBody parameters with transaction-specific details.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/2-getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n  \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n  \"requestBody\": {\n    \"transactionHash\": \"0x4e636c6590b22d8dcdade7ee3b5ae5572f42edb1878f09b3034b2f7c3362ef3c\",\n    \"requiredConfirmations\": \"1\",\n    \"provideInput\": true,\n    \"listEvents\": true,\n    \"logIndices\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Attestation in Solidity using FdcHub\nDESCRIPTION: This snippet demonstrates how to submit an attestation request using the requestAttestation function from the FdcHub contract. Users need to format the request, pay the required fee, and track the submission for later retrieval.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/1-overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nrequestAttestation\n```\n\n----------------------------------------\n\nTITLE: Generating New Wallet using Cast (Bash)\nDESCRIPTION: This command uses the `cast` tool from the Foundry suite to generate a new Ethereum-compatible wallet, providing a public address and a private key.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/build-first-app.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncast wallet new\n```\n\n----------------------------------------\n\nTITLE: Defining ProofOfReserves Contract in Solidity\nDESCRIPTION: This snippet shows the main structure of the ProofOfReserves contract, including imports, event declarations, state variables, and the core verifyReserves function. It handles the verification of reserves by comparing total token supply against claimed reserves.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.25;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {IEVMTransaction} from \"@flarenetwork/flare-periphery-contracts/coston2/IEVMTransaction.sol\";\nimport {IJsonApi} from \"@flarenetwork/flare-periphery-contracts/coston2/IJsonApi.sol\";\nimport {ContractRegistry} from \"@flarenetwork/flare-periphery-contracts/coston2/ContractRegistry.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\n...\n\ncontract ProofOfReserves is Ownable {\n    event GoodPair(address reader, address token, uint256 totalSupply);\n    event BadPair(address reader, address token, uint256 totalSupply);\n\n    uint256 public debugTokenReserves = 0;\n    uint256 public debugClaimedReserves = 0;\n\n    mapping(address => address) public tokenStateReaders;\n\n    constructor() Ownable(msg.sender) {}\n\n    function updateAddress(address readerAddress, address tokenAddress) public onlyOwner {\n        tokenStateReaders[readerAddress] = tokenAddress;\n    }\n\n    function verifyReserves(IJsonApi.Proof calldata jsonProof, IEVMTransaction.Proof[] calldata transactionProofs)\n        external\n        returns (bool)\n    {\n        uint256 claimedReserves = readReserves(jsonProof);\n\n        uint256 totalTokenReserves = 0;\n        for (uint256 i = 0; i < transactionProofs.length; i++) {\n            totalTokenReserves += readReserves(transactionProofs[i]);\n        }\n        debugTokenReserves = totalTokenReserves;\n\n        return totalTokenReserves <= (claimedReserves * 1 ether);\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Expiring an Unclaimed Weather Insurance Policy\nDESCRIPTION: This script shows how to expire a policy that wasn't claimed by any insurer before its start time. It retrieves the policy information and calls the expirePolicy function on the WeatherInsuranceAgency contract.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/weather-insurance.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as dotenv from \"dotenv\";\nimport hre, { ethers } from \"hardhat\";\n\ndotenv.config();\n\nasync function main() {\n  // Get the address of the weather insurance agency contract\n  const agencyAddress = process.env.WEATHER_INSURANCE_AGENCY_ADDRESS ?? \"\";\n  // Get the policy ID\n  const policyId = parseInt(process.env.POLICY_ID ?? \"0\");\n  if (policyId === 0) {\n    throw new Error(\"POLICY_ID not set\");\n  }\n\n  const [deployer] = await ethers.getSigners();\n  console.log(\"Expiring policy with the account:\", deployer.address);\n\n  const WeatherInsuranceAgency = await hre.ethers.getContractFactory(\"WeatherInsuranceAgency\");\n  const weatherInsuranceAgency = WeatherInsuranceAgency.attach(agencyAddress);\n\n  const policy = await weatherInsuranceAgency.getPolicy(policyId);\n  console.log(\"Expiring policy:\", policyId);\n  console.log(\"Policy state:\", policy.state);\n  console.log(\"Policy start time:\", policy.startTime);\n  console.log(\"Current time:\", Math.floor(Date.now() / 1000));\n\n  const tx = await weatherInsuranceAgency.expirePolicy(policyId);\n  await tx.wait();\n  console.log(\"Policy expired. Tx hash:\", tx.hash);\n}\n\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n\n```\n\n----------------------------------------\n\nTITLE: Reading FTSOv2 Feeds with Test Interface in Solidity (Coston2)\nDESCRIPTION: This Solidity smart contract demonstrates how to read the latest price feeds for FLR/USD, BTC/USD, and ETH/USD from FTSOv2 on the Flare Testnet Coston2. It uses the `ContractRegistry` to find the FTSOv2 contract address and the `TestFtsoV2Interface` (intended for testing/read-only purposes) to query the data via `getFeedsByIndex`. The retrieved values include the feed prices, their decimal places, and the timestamp of the last update.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/1-getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {ContractRegistry} from \"@flarenetwork/flare-periphery-contracts/coston2/ContractRegistry.sol\";\nimport {TestFtsoV2Interface} from \"@flarenetwork/flare-periphery-contracts/coston2/TestFtsoV2Interface.sol\";\n\ncontract FtsoV2FeedConsumer {\n   // ContractRegistry allows querying the latest addresses of system contracts.\n   // TestFtsoV2Interface is used for read-only interactions with the FTSO V2 system contract.\n   TestFtsoV2Interface public ftsoV2;\n\n   // Indexes for FLR/USD, BTC/USD, and ETH/USD feeds on Flare Testnet Coston2.\n   // Feed details available at: https://docs.flare.network/tech/ftso/flare-feeds#available-feeds\n   uint256[] public feedIndexes = [0, 2, 9];\n\n   constructor() {\n      // Initialize the FTSO V2 interface using the ContractRegistry.\n      ftsoV2 = ContractRegistry.getFtsoV2();\n   }\n\n   /**\n    * @notice Retrieves the current feed values, decimals, and timestamp from the FTSO V2 contract.\n    * @return _feedValues The latest values for the feeds specified by feedIndexes.\n    * @return _decimals The number of decimal places for each feed value.\n    * @return _timestamp The timestamp of the last update for these feeds.\n    */\n   function getFtsoV2CurrentFeedValues()\n      external\n      view\n      returns (\n         uint256[] memory _feedValues,\n         int8[] memory _decimals,\n         uint64 _timestamp\n      )\n   {\n      /* Your custom feed consumption logic. In this example the values are just returned. */\n      return ftsoV2.getFeedsByIndex(feedIndexes);\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Main Insurance Policy Contract - Solidity\nDESCRIPTION: Introduces the MinTempAgency smart contract, containing the Policy struct, a registry array of policies, status management with PolicyStatus enum, and key events for state transitions. The Policy struct integrates both off-chain API data (location and minTemp) and on-chain parameters (holder, premium, etc.), maintaining unique IDs and insurer mapping for operational control. No functional logic is included here, just declarations and persistent storage setup.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/weather-insurance.mdx#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\ncontract MinTempAgency {\\n    Policy[] public registeredPolicies;\\n    mapping(uint256 => address) insurers;\\n\\n    enum PolicyStatus {\\n        Unclaimed,\\n        Open,\\n        Settled\\n    }\\n\\n    struct Policy {\\n        address holder;\\n        int256 latitude;\\n        int256 longitude;\\n        uint256 startTimestamp;\\n        uint256 expirationTimestamp;\\n        int256 minTempThreshold;\\n        uint256 premium;\\n        uint256 coverage;\\n        PolicyStatus status;\\n        uint256 id;\\n    }\\n\\n    event PolicyCreated(uint256 id);\\n    event PolicyClaimed(uint256 id);\\n    event PolicySettled(uint256 id);\\n    event PolicyExpired(uint256 id);\\n    event PolicyRetired(uint256 id);\\n\\n    ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Flare Wallet Account - Python\nDESCRIPTION: This Python script generates a new private key and public address pair for use on the Flare network. Useful for obtaining testnet tokens or deploying contracts. Requires secure handling (never commit keys to code) and may use libraries like 'web3' or 'eth_account'. Outputs both address and private key, typically for storage in environment variables.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-python-developers.mdx#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n{CreateAccount}\n```\n\n----------------------------------------\n\nTITLE: Resolving and Settling a Policy Using JSON Proof - Solidity\nDESCRIPTION: The resolvePolicy function validates and settles an active (Open) policy using off-chain weather proof data. It checks status, proof validity, and that the current timestamp falls within policy bounds, matching the proof's location and enforcing the min temperature constraint. If successful, the policy is marked as Settled and coverage is transferred to the holder. The function leverages isJsonApiProofValid and abi.decode for secure and type-safe data extraction. Event emission and guarded state transitions maintain auditability.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/weather-insurance.mdx#2025-04-22_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\n    function resolvePolicy(uint256 id, IJsonApi.Proof calldata proof) public {\\n        Policy memory policy = registeredPolicies[id];\\n        require(policy.status == PolicyStatus.Open, \\\"Policy not open\\\");\\n        require(isJsonApiProofValid(proof), \\\"Invalid proof\\\");\\n        DataTransportObject memory dto = abi.decode(proof.data.responseBody.abi_encoded_data, (DataTransportObject));\\n        require(\\n            block.timestamp >= policy.startTimestamp,\\n            string.concat(\\n                \\\"Policy not yet in effect: \\\",\\n                Strings.toString(block.timestamp),\\n                \\\" vs. \\\",\\n                Strings.toString(policy.startTimestamp)\\n            )\\n        );\\n        if (block.timestamp > policy.expirationTimestamp) {\\n            expirePolicy(id);\\n            return;\\n        }\\n\\n        require(\\n            dto.latitude == policy.latitude && dto.longitude == policy.longitude,\\n            string.concat(\\n                \\\"Invalid coordinates: \\\",\\n                Strings.toStringSigned(dto.latitude),\\n                \\\", \\\",\\n                Strings.toStringSigned(dto.longitude),\\n                \\\" vs. \\\",\\n                Strings.toStringSigned(policy.latitude),\\n                \\\", \\\",\\n                Strings.toStringSigned(policy.longitude)\\n            )\\n        );\\n\\n        require(\\n            dto.minTemp <= policy.minTempThreshold,\\n            string.concat(\\n                \\\"Minimum temperature not met: \\\",\\n                Strings.toStringSigned(dto.minTemp),\\n                \\\" vs. \\\",\\n                Strings.toStringSigned(policy.minTempThreshold)\\n            )\\n        );\\n\\n        policy.status = PolicyStatus.Settled;\\n        registeredPolicies[id] = policy;\\n        payable(policy.holder).transfer(policy.coverage);\\n        emit PolicySettled(id);\\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Lottery using Secure Random Numbers in Solidity\nDESCRIPTION: Solidity contract implementing a basic lottery where participants can enter, and a winner is chosen using a secure random number obtained from Flare's `RandomNumberV2` contract. Requires setting the EVM version to `london`.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/secure-random-numbers.mdx#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// Interface to obtain secure random numbers on Flare.\ninterface IRandomNumberV2 {\n    function getRandomNumberV2() external view returns (uint256 randomNumber, bool isSecure, uint256 timestamp);\n}\n\ncontract RandomNumberV2Lottery is Ownable {\n    // Flare mainnet, Coston2 and Songbird address\n    // https://dev.flare.network/ftso/address-list\n    IRandomNumberV2 constant randomNumberV2 = IRandomNumberV2(0xE0485523683136F6d42a222B9b25d170FFB0F252);\n\n    address[] public players;\n    address public winner;\n    uint256 public lotteryId;\n    mapping(uint256 => address) public lotteryHistory;\n\n    event LotteryWinner(uint256 lotteryId, address winner);\n\n    constructor() Ownable(msg.sender) {}\n\n    function getPlayers() public view returns (address[] memory) {\n        return players;\n    }\n\n    function enter() public {\n        // Basic requirement to avoid duplicate entries\n        // Real implementation might require payment, checks, etc.\n        bool alreadyEntered = false;\n        for (uint i = 0; i < players.length; i++) {\n            if (players[i] == msg.sender) {\n                alreadyEntered = true;\n                break;\n            }\n        }\n        require(!alreadyEntered, \"Player already entered\");\n        players.push(msg.sender);\n    }\n\n    function pickWinner() public onlyOwner {\n        require(players.length > 0, \"No players in the lottery\");\n\n        // Get the secure random number\n        (uint256 randomNumber, bool isSecure, ) = randomNumberV2.getRandomNumberV2();\n\n        // Ensure the random number is secure before using it\n        require(isSecure, \"Random number is not secure\");\n\n        // Use the random number to pick a winner\n        uint256 index = randomNumber % players.length;\n        winner = players[index];\n\n        // Record the winner for this lottery round\n        lotteryHistory[lotteryId] = winner;\n\n        // Emit event\n        emit LotteryWinner(lotteryId, winner);\n\n        // Reset the lottery for the next round\n        players = new address[](0);\n        lotteryId++;\n    }\n\n    // Function to allow withdrawal of funds if Ether were involved (example placeholder)\n    function withdraw() public onlyOwner {\n        // Implementation for withdrawing potential funds\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adapting FTSOv2 Consumer for Production in Solidity\nDESCRIPTION: This Solidity code snippet shows the necessary modifications to the `FtsoV2FeedConsumer` contract for production deployment. It replaces the `TestFtsoV2Interface` with `FtsoV2Interface`, which is suitable for real transactions and state modifications. The function `getFtsoV2CurrentFeedValues` is modified to be non-`view` (potentially `payable` as mentioned in the surrounding text, though not shown here) and fetches the `FtsoV2Interface` instance from the `ContractRegistry` within the function call. It uses `getFeedsById` (assuming `feedIds` is defined elsewhere) instead of `getFeedsByIndex` to retrieve feed data.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/1-getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nimport {ContractRegistry} from \"@flarenetwork/flare-periphery-contracts/coston2/ContractRegistry.sol\"\nimport {FtsoV2Interface} from \"@flarenetwork/flare-periphery-contracts/coston2/FtsoV2Interface.sol\";\n\ncontract FtsoV2FeedConsumer {\n   //...\n   function getFtsoV2CurrentFeedValues()\n      external\n      returns (\n         uint256[] memory _feedValues,\n         int8[] memory _decimals,\n         uint64 _timestamp\n      )\n   {\n      ftsoV2 = ContractRegistry.getFtsoV2();\n      /* Your custom feed consumption logic. In this example the values are just returned. */\n      return ftsoV2.getFeedsById(feedIds);\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a HelloWorld Smart Contract Using Solidity\nDESCRIPTION: This code snippet presents a basic Solidity smart contract named HelloWorld. The contract defines a public string state variable 'message', a constructor that initializes the message, and a function 'updateMessage' which allows updating the stored message. Dependencies require the Solidity compiler version >=0.8.0 and <0.9.0. The contract expects a string parameter at deployment for the initial message, and another string argument for updating. It does not implement access control, so any user can call updateMessage. Inputs are string messages; output is the public message state variable. Limitations include public mutability and reliance on standard Remix/MetaMask deployment workflows.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/1-getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity >=0.8.0 <0.9.0;\n\ncontract HelloWorld {\n    string public message;\n\n    constructor(string memory initialMessage) {\n        message = initialMessage;\n    }\n\n    function updateMessage(string memory newMessage) public {\n        message = newMessage;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a New Insurance Policy Entry - Solidity\nDESCRIPTION: Implements the createPolicy function, enabling users to register a new insurance policy with specified geographical and time conditions. The function ensures that a non-zero premium is attached (via Ether payment) and that the expiration follows the start time. It initializes a Policy struct, records it in storage, and emits a creation event. Key parameters include geographical coordinates, validity period, and the minimum temperature threshold for triggering payouts. Fails fast if usage rules are violated.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/weather-insurance.mdx#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\n    function createPolicy(\\n        int256 latitude,\\n        int256 longitude,\\n        uint256 startTimestamp,\\n        uint256 expirationTimestamp,\\n        int256 minTempThreshold,\\n        uint256 coverage\\n    ) public payable {\\n        require(msg.value > 0, \\\"No premium paid\\\");\\n        require(startTimestamp < expirationTimestamp, \\\"Value of startTimestamp larger than expirationTimestamp\\\");\\n\\n        Policy memory newPolicy = Policy({\\n            holder: msg.sender,\\n            latitude: latitude,\\n            longitude: longitude,\\n            startTimestamp: startTimestamp,\\n            expirationTimestamp: expirationTimestamp,\\n            minTempThreshold: minTempThreshold,\\n            premium: msg.value,\\n            coverage: coverage,\\n            status: PolicyStatus.Unclaimed,\\n            id: registeredPolicies.length\\n        });\\n\\n        registeredPolicies.push(newPolicy);\\n\\n        emit PolicyCreated(newPolicy.id);\\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Deployed Contract Address Environment Variable (Bash)\nDESCRIPTION: Exports the address of the deployed contract as an environment variable `$DEPLOYMENT_ADDRESS`. Replace `<deployed to address above>` with the actual contract address obtained from the `forge create` output.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/build-first-app.mdx#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nexport DEPLOYMENT_ADDRESS=<deployed to address above>\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat Project Dependencies with npm - Bash\nDESCRIPTION: This snippet uses npm to install all required node dependencies for the Hardhat starter kit. Prerequisites: Node.js and npm must be installed. Use this command in the project root after cloning. Installs dependencies listed in package.json, preparing the environment for compilation, testing, and deployment of smart contracts.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/hardhat-foundry-starter-kit.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining EVMTransaction Interface in Solidity\nDESCRIPTION: Complete Solidity interface definition for the EVMTransaction attestation type in Flare Data Connector. It includes data structures for requests, responses, and events, along with detailed comments explaining each field and its purpose.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-connectivity.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name EVMTransaction\n * @custom:id 0x06\n * @custom:supported ETH, FLR, SGB, testETH, testFLR, testSGB\n * @author Flare\n * @notice A relay of a transaction from an EVM chain.\n * This type is only relevant for EVM-compatible chains.\n * @custom:verification If a transaction with the `transactionId` is in a block on the main branch with at least `requiredConfirmations`, the specified data is relayed.\n * If an indicated event does not exist, the request is rejected.\n * @custom:lut `timestamp`\n */\ninterface EVMTransaction {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId  ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the Data Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for EVM transaction attestation type\n     * @custom:below Note that events (logs) are indexed in block not in each transaction. The contract that uses the attestation should specify the order of event logs as needed and the requestor should sort `logIndices`\n     * with respect to the set specifications. If possible, the contact should only require one `logIndex`.\n     * @param transactionHash Hash of the transaction(transactionHash).\n     * @param requiredConfirmations The height at which a block is considered confirmed by the requestor.\n     * @param provideInput If true, \"input\" field is included in the response.\n     * @param listEvents If true, events indicated by `logIndices` are included in the response. Otherwise, no events are included in the response.\n     * @param logIndices If `listEvents` is `false`, this should be an empty list, otherwise, the request is rejected. If `listEvents` is `true`, this is the list of indices (logIndex) of the events to be relayed (sorted by the requestor). The array should contain at most 50 indices. If empty, it indicates all events in order capped by 50.\n     */\n    struct RequestBody {\n        bytes32 transactionHash;\n        uint16 requiredConfirmations;\n        bool provideInput;\n        bool listEvents;\n        uint32[] logIndices;\n    }\n\n    /**\n     * @notice Response body for EVM transaction attestation type\n     * @custom:below The fields are in line with [transaction](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionbyhash) provided by EVM node.\n     * @param blockNumber Number of the block in which the transaction is included.\n     * @param timestamp Timestamp of the block in which the transaction is included.\n     * @param sourceAddress The address (from) that signed the transaction.\n     * @param isDeployment Indicate whether it is a contract creation transaction.\n     * @param receivingAddress The address (to) of the receiver of the initial transaction. Zero address if `isDeployment` is `true`.\n     * @param value The value transferred by the initial transaction in wei.\n     * @param input If `provideInput`, this is the data send along with the initial transaction. Otherwise it is the default value `0x00`.\n     * @param status Status of the transaction 1 - success, 0 - failure.\n     * @param events If `listEvents` is `true`, an array of the requested events. Sorted by the logIndex in the same order as `logIndices`. Otherwise, an empty array.\n     */\n    struct ResponseBody {\n        uint64 blockNumber;\n        uint64 timestamp;\n        address sourceAddress;\n        bool isDeployment;\n        address receivingAddress;\n        uint256 value;\n        bytes input;\n        uint8 status;\n        Event[] events;\n    }\n\n    /**\n     * @notice Event log record\n     * @custom:above An `Event` is a struct with the following fields:\n     * @custom:below The fields are in line with [EVM event logs](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\n     * @param logIndex The consecutive number of the event in block.\n     * @param emitterAddress The address of the contract that emitted the event.\n     * @param topics An array of up to four 32-byte strings of indexed log arguments.\n     * @param data Concatenated 32-byte strings of non-indexed log arguments. At least 32 bytes long.\n     * @param removed It is `true` if the log was removed due to a chain reorganization and `false` if it is a valid log.\n     */\n    struct Event {\n        uint32 logIndex;\n        address emitterAddress;\n        bytes32[] topics;\n        bytes data;\n        bool removed;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DA Layer Proof Request Handler\nDESCRIPTION: Function to post proof requests to the DA Layer with error handling and status monitoring capabilities.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/json-api.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nasync function postRequestToDALayer(\n  url: string,\n  request: any,\n  watchStatus: boolean = false,\n) {\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      //   \"X-API-KEY\": \"\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(request),\n  });\n  if (watchStatus && response.status != 200) {\n    throw new Error(\n      `Response status is not OK, status ${response.status} ${response.statusText}\\n`,\n    );\n  } else if (watchStatus) {\n    console.log(\"Response status is OK\\n\");\n  }\n  return await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting FDC Attestation Request – Flare, TypeScript\nDESCRIPTION: This TypeScript async function orchestrates the FDC attestation request submission process. It expects an abiEncodedRequest string as input, retrieves the deployed FdcHub contract, calculates the necessary fee using getFdcRequestFee, sends the requestAttestation transaction, and logs the resulting transaction and calculated voting round ID. Dependencies include prior setup functions (getFdcHub, getFdcRequestFee, calculateRoundId) and connected contract artifacts. It returns the numeric round ID, which is vital for tracking the attestation status. All EVM interaction logic, fee handling, and round monitoring URL construction are encapsulated here.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/evm-transaction.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nasync function submitAttestationRequest(abiEncodedRequest: string) {\\n  const fdcHub = await getFdcHub();\\n\\n  const requestFee = await getFdcRequestFee(abiEncodedRequest);\\n\\n  const transaction = await fdcHub.requestAttestation(abiEncodedRequest, {\\n    value: requestFee,\\n  });\\n  console.log(\\\"Submitted request:\\\", transaction.tx, \\\"\\\\n\\\");\\n\\n  const roundId = await calculateRoundId(transaction);\\n  console.log(\\n    `Check round progress at: https://${hre.network.name}-systems-explorer.flare.rocks/voting-epoch/${roundId}?tab=fdc\\\\n`,\\n  );\\n  return roundId;\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Claiming an Unclaimed Insurance Policy - Solidity\nDESCRIPTION: The claimPolicy function allows an insurer to accept an unclaimed policy, ensuring the coverage payment meets or exceeds the specified amount and that the policy is eligible (status and time). On success, it marks the policy as open, links it to the insurer, sends the premium to the claiming address, and logs the action via an event. Time checks and proper state update order prevent misuse and reentrancy vulnerabilities, especially with regard to fund transfers.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/weather-insurance.mdx#2025-04-22_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\n    function claimPolicy(uint256 id) public payable {\\n        Policy memory policy = registeredPolicies[id];\\n        require(policy.status == PolicyStatus.Unclaimed, \\\"Policy already claimed\\\");\\n        if (block.timestamp > policy.expirationTimestamp) {\\n            retireUnclaimedPolicy(id);\\n            revert(\\\"Policy already expired\\\");\\n        }\\n        require(msg.value >= policy.coverage, \\\"Insufficient coverage paid\\\");\\n\\n        policy.status = PolicyStatus.Open;\\n        registeredPolicies[id] = policy;\\n        insurers[id] = msg.sender;\\n\\n        payable(msg.sender).transfer(policy.premium);\\n\\n        emit PolicyClaimed(id);\\n    }\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts using Foundry Script - Bash\nDESCRIPTION: This command deploys smart contracts using a Foundry script, broadcasting the transaction and using credentials from environment variables. Replace <RPC_URL> with your own RPC endpoint. Requires Foundry and properly set .env. Outputs transaction and contract addresses upon successful deployment.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/hardhat-foundry-starter-kit.mdx#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nforge script script/Counter.s.sol --broadcast --private-key $PRIVATE_KEY --rpc-url <RPC_URL>\n```\n\n----------------------------------------\n\nTITLE: Consuming Secure Random Numbers in Solidity\nDESCRIPTION: Solidity contract demonstrating how to retrieve a secure random number, its security status (`isSecure`), and the generation timestamp from Flare's `RandomNumberV2` contract interface. Requires setting the EVM version to `london` during compilation.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/secure-random-numbers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\n// Interface to obtain secure random numbers on Flare.\ninterface IRandomNumberV2 {\n    function getRandomNumberV2() external view returns (uint256 randomNumber, bool isSecure, uint256 timestamp);\n}\n\ncontract SecureRandomConsumer {\n    // Flare mainnet, Coston2 and Songbird address\n    // https://dev.flare.network/ftso/address-list\n    IRandomNumberV2 constant randomNumberV2 = IRandomNumberV2(0xE0485523683136F6d42a222B9b25d170FFB0F252);\n\n    function getRandomNumber() public view returns (uint256 randomNumber, bool isSecure, uint256 timestamp) {\n        (randomNumber, isSecure, timestamp) = randomNumberV2.getRandomNumberV2();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Feed ID - Solidity\nDESCRIPTION: This snippet encodes the structured ID construction for feeds such as FLR/USD within a Solidity smart contract. It takes a category byte and feed name, converts the feed name to hexadecimal, concatenates, pads the result to 20 bytes, and outputs the final feed ID as a bytes20 value with a 0x prefix. Requires Solidity compiler, no external dependencies. Input parameters are the category and feed name (as string); output is a feed ID for use in on-chain verification or requests.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/_feed_explanation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.0;\n\ncontract GetFeedId {\n    function getFeedId(uint8 category, string memory feedName) public pure returns (bytes20) {\n        bytes memory feedNameBytes = bytes(feedName);\n        bytes memory result = new bytes(20);\n        result[0] = bytes1(category);\n        for (uint i = 0; i < feedNameBytes.length && i < 19; i++) {\n            result[i + 1] = feedNameBytes[i];\n        }\n        return bytes20(abi.decode(result, (bytes20)));\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Checking Available Agent Lots\nDESCRIPTION: Command to view all agents and their available lots for a specific FAsset type, useful for verifying your agent has sufficient collateral.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/3-create-fasset-agent-cli.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose --profile cli run user-bot agents --fasset FASSET\n```\n\n----------------------------------------\n\nTITLE: Submitting Attestation Request and Calculating Round ID - TypeScript\nDESCRIPTION: This function orchestrates the process of submitting an attestation request to the FdcHub contract by first acquiring the relevant contract instance, determining the required request fee, posting the request to the blockchain, and calculating the corresponding voting round ID. It requires the getFdcHub, getFdcRequestFee, and calculateRoundId utility functions and contract ABIs for runtime access. Takes one input parameter (abiEncodedRequest: string) and returns the calculated roundId. Logs transaction and round details for progress monitoring; make sure the network and contract addresses are configured per environment.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nasync function submitAttestationRequest(abiEncodedRequest: string) {\\n  const fdcHub = await getFdcHub();\\n\\n  const requestFee = await getFdcRequestFee(abiEncodedRequest);\\n\\n  const transaction = await fdcHub.requestAttestation(abiEncodedRequest, {\\n    value: requestFee,\\n  });\\n  console.log(\\\"Submitted request:\\\", transaction.tx, \\\"\\\\n\\\");\\n\\n  const roundId = await calculateRoundId(transaction);\\n  console.log(\\n    `Check round progress at: https://${hre.network.name}-systems-explorer.flare.rocks/voting-epoch/${roundId}?tab=fdc\\\\n`,\\n  );\\n  return roundId;\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Decoding ERC20 Balance Events in Solidity\nDESCRIPTION: Smart contract function that decodes ERC20 token balance events from transaction proofs. It validates event signatures, decodes event data and return values, and stores balance information in contract storage. The function intentionally skips proof verification for testing purposes but includes comprehensive event data validation.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-connectivity.mdx#2025-04-22_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction confirmBalanceEvent(EVMTransaction.Proof calldata transaction, address tokenAddress, address targetAddress, uint256 eventIndex) public\n{\n    // We explicitly ignore the proof here, but in production code, you should always verify the proof\n    // We ignore it so we can test the whole contract much faster on the same network using only the\n    // In this guide we will just use the `prepareResponse` endpoint which has everything we need but the proof\n    require(\n        true || isEVMTransactionProofValid(transaction),\n        \"Invalid proof\"\n    );\n\n    EVMTransaction.Event memory _event = transaction.data.responseBody.events[eventIndex];\n    // This just check the happy path - do kkep in mind, that this can possibly faked\n    // And keep in mind that the specification does not require the topic0 to be event signature\n    require(\n        _event.topics[0] == keccak256(\"CallResult(address,bool,bytes,bytes)\"),\n        \"Invalid event\"\n    );\n\n    // _event.emitterAddress should be the contract we \"trust\" to correctly call the ERC20 token\n\n    (address target, bool result, bytes memory callData, bytes memory returnData) = abi.decode(\n        _event.data,\n        (address, bool, bytes, bytes)\n    );\n\n    require(target == tokenAddress, \"Invalid token address\");\n\n\n    bytes memory expectedCalldata = abi.encodeWithSignature(\"balanceOf(address)\", targetAddress);\n    require(\n        keccak256(callData) == keccak256(expectedCalldata),\n        \"Invalid calldata\"\n    );\n      // If a tuple was returned from the call, we can unpack it using abi.decode in the same way as in the event data decoding\n    uint256 balance = abi.decode(returnData, (uint256));\n\n    balances[transaction.data.responseBody.blockNumber] = BalanceInfo({\n        holder: targetAddress,\n        token: tokenAddress,\n        amount: balance,\n        blockNumber: transaction.data.responseBody.blockNumber,\n        timestamp: transaction.data.responseBody.timestamp,\n        rawEvent: _event,\n        proofHash: keccak256(abi.encode(transaction))\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying and Consuming Flare Anchor Feeds Onchain in Solidity\nDESCRIPTION: An example Solidity smart contract for verifying and consuming anchor feed data onchain using the FtsoV2Interface. The contract expects feed data and Merkle proofs, calling FtsoV2Interface.verifyFeedData to validate the data against the onchain Merkle root. This is essential for applications integrating Flare's offchain pricing feeds securely into smart contracts. Requires Solidity support and appropriate Flare Network dependencies.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/2-getting-started.mdx#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\n{FtsoV2AnchorFeedConsumer}\n```\n\n----------------------------------------\n\nTITLE: Querying FTSO Config with ethers.js (Placeholder)\nDESCRIPTION: JavaScript code example using ethers.js and Flare Periphery Contract Artifacts to retrieve FTSOv2 feed configurations on the Flare Testnet Coston2. Requires Node.js environment and installed dependencies.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/query-feed-configuration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{FtsoConfigEthersJs}\n```\n\n----------------------------------------\n\nTITLE: Implementing Balance Decreasing Transaction Verification in Solidity\nDESCRIPTION: This Solidity contract verifies balance decreasing transactions using the Flare Data Connector. It utilizes the MerkleProof library to validate the proof against the stored Merkle root. The contract checks if the attestation type is correct and if the provided proof is valid for the given voting round.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/detect-balance-decrease.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"../../interface/types/BalanceDecreasingTransaction.sol\";\nimport \"../../interface/external/IMerkleRootStorage.sol\";\nimport \"./interface/IBalanceDecreasingTransactionVerification.sol\";\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\ncontract BalanceDecreasingTransactionVerification is IBalanceDecreasingTransactionVerification {\n   using MerkleProof for bytes32[];\n\n   IMerkleRootStorage public immutable merkleRootStorage;\n\n   constructor(IMerkleRootStorage _merkleRootStorage) {\n      merkleRootStorage = _merkleRootStorage;\n   }\n\n   function verifyBalanceDecreasingTransaction(\n      BalanceDecreasingTransaction.Proof calldata _proof\n   ) external view returns (bool _proved) {\n      return _proof.data.attestationType == bytes32(\"BalanceDecreasingTransaction\") &&\n         _proof.merkleProof.verify(\n            merkleRootStorage.merkleRoot(_proof.data.votingRound),\n            keccak256(abi.encode(_proof.data))\n         );\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing JsonApi Attestation Requests to Verifier with TypeScript\nDESCRIPTION: This function assembles a specialized request for the JsonApi verifier endpoint on Flare, composing the necessary fields (`url`, `postprocessJq`, `abiSignature`), and delegates the final POST to the `prepareAttestationRequestBase` function. It relies on constants (`verifierUrlBase`, `JQ_VERIFIER_API_KEY_TESTNET`, `attestationTypeBase`, `sourceIdBase`) being defined in its surrounding context. The function is designed for extensibility across attestation types by parameterizing the API and processing details. Outputs the attestation preparation result or throws on failure.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/json-api.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync function prepareAttestationRequest(\n  apiUrl: string,\n  postprocessJq: string,\n  abiSignature: string,\n) {\n  const requestBody = {\n    url: apiUrl,\n    postprocessJq: postprocessJq,\n    abi_signature: abiSignature,\n  };\n\n  const url = `${verifierUrlBase}JsonApi/prepareRequest`;\n  const apiKey = JQ_VERIFIER_API_KEY_TESTNET!;\n\n  return await prepareAttestationRequestBase(\n    url,\n    apiKey,\n    attestationTypeBase,\n    sourceIdBase,\n    requestBody,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Wallet and RPC Environment Variables (Bash)\nDESCRIPTION: Exports the generated wallet address, private key, and the Flare Coston2 RPC URL as environment variables. These variables are used by subsequent `cast` and `forge` commands to interact with the network and sign transactions. Replace `<address above>` and `<private key above>` with the actual values from the `cast wallet new` output.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/build-first-app.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nexport ACCOUNT=<address above>\nexport ACCOUNT_PRIVATE_KEY=<private key above>\nexport RPC_URL=\"https://coston2-api.flare.network/ext/C/rpc\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving FTSOv2 Feeds via ethers.js - JavaScript\nDESCRIPTION: Uses ethers.js and Flare Periphery Contract Artifacts to connect to a Flare RPC node and read FTSOv2 feed data for FLR/USD, BTC/USD, and ETH/USD. Dependencies are ethers and @flarenetwork/flare-periphery-contract-artifacts. Core parameters include the RPC endpoint, contract address, and feed IDs; results display current feed prices and timestamps. Required: correct ABI/artifact and a valid network endpoint.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/read-feeds-offchain.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ethers } from \"ethers\";\nimport FtsoV2Artifact from \"@flarenetwork/flare-periphery-contract-artifacts/build/contracts/FtsoV2.json\";\n\nconst RPC_ENDPOINT = \"<YOUR_RPC_ENDPOINT>\"; // e.g. https://coston2-api.flare.network/ext/bc/C/rpc\nconst FTSO_CONTRACT_ADDRESS = \"<FTSOV2_CONTRACT_ADDRESS>\";\nconst FEED_IDS = [\n  \"0x464c522f55534400000000000000000000000000000000000000000000000000\", // FLR/USD\n  \"0x4254432f55534400000000000000000000000000000000000000000000000000\", // BTC/USD\n  \"0x4554482f55534400000000000000000000000000000000000000000000000000\"  // ETH/USD\n];\n\nasync function main() {\n  const provider = new ethers.JsonRpcProvider(RPC_ENDPOINT);\n  const ftso = new ethers.Contract(FTSO_CONTRACT_ADDRESS, FtsoV2Artifact.abi, provider);\n\n  for (const feedId of FEED_IDS) {\n    const [value, timestamp] = await ftso.getCurrentFeed(feedId);\n    console.log(`FeedID: ${feedId}, Value: ${value.toString()}, Timestamp: ${timestamp.toString()}`);\n  }\n}\n\nmain().catch(console.error);\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving the FDC Request Fee - TypeScript\nDESCRIPTION: This async function calculates the request fee for a particular attestation by interacting with the FdcRequestFeeConfigurations contract, which is resolved through the Helpers contract. The function requires an ABI-encoded request as input and returns the Promise of the fee value. It utilizes FdcRequestFeeConfigurations contract instance methods. External dependencies include Helpers deployment and relevant contract artifacts; ensures correct configuration for cross-contract calls via the registry.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getFdcRequestFee(abiEncodedRequest: string) {\\n  const helpers: HelpersInstance = await getHelpers();\\n  const fdcRequestFeeConfigurationsAddress: string =\\n    await helpers.getFdcRequestFeeConfigurations();\\n  const fdcRequestFeeConfigurations: IFdcRequestFeeConfigurationsInstance =\\n    await FdcRequestFeeConfigurations.at(fdcRequestFeeConfigurationsAddress);\\n  return await fdcRequestFeeConfigurations.getRequestFee(abiEncodedRequest);\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing readReserves Function for JsonApi Proof in Solidity\nDESCRIPTION: This function processes JsonApi proofs by validating the proof, decoding the data, and returning the reserves value. It also updates the debugClaimedReserves state variable for transparency.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction readReserves(IJsonApi.Proof calldata proof) private returns (uint256) {\n    require(isValidProof(proof), \"Invalid json proof\");\n    DataTransportObject memory data = abi.decode(proof.data.responseBody.abi_encoded_data, (DataTransportObject));\n    debugClaimedReserves = data.reserves;\n\n    return data.reserves;\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Attestation Request to FDC Protocol - Solidity Foundry\nDESCRIPTION: Implements end-to-end submission of an ABI-encoded attestation request to the FDC smart contract, managing private key loading, contract lookups, broadcast sessions, request fee calculation, and payment. Uses the `ContractRegistry` library to find contract addresses and Foundry's VM methods for broadcasting. Requires contract interfaces (`IFdcRequestFeeConfigurations`, `IFdcHub`), a private key provisioned via `.env`, and previously encoded input data.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/address-validity.mdx#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction submitAttestationRequest(\n    bytes memory abiEncodedRequest\n) internal {\n    uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n    vm.startBroadcast(deployerPrivateKey);\n\n    IFdcRequestFeeConfigurations fdcRequestFeeConfigurations = ContractRegistry\n        .getFdcRequestFeeConfigurations();\n    uint256 requestFee = fdcRequestFeeConfigurations.getRequestFee(\n        abiEncodedRequest\n    );\n    console.log(\"request fee: %s\\n\", requestFee);\n    vm.stopBroadcast();\n\n    vm.startBroadcast(deployerPrivateKey);\n\n    IFdcHub fdcHub = ContractRegistry.getFdcHub();\n    console.log(\"fcdHub address:\");\n    console.log(address(fdcHub));\n    console.log(\"\\n\");\n\n    fdcHub.requestAttestation{value: requestFee}(abiEncodedRequest);\n    vm.stopBroadcast();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Voting Epoch Status from Flare DA Layer with Bash (curl)\nDESCRIPTION: Demonstrates the use of curl to perform a GET request on the Flare DA Layer endpoint for retrieving voting round status. The call returns start timestamps for the currently active and most recently finalized voting rounds. No dependencies beyond curl and network access are required. Output is a JSON object containing IDs and timestamps relevant for correlating feed data with epochs.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/2-getting-started.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'GET' \\\n  'https://flr-data-availability.flare.network/api/v0/fsp/status' \\\n  -H 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Rendering Tabbable Solidity Contract References with React Components in MDX\nDESCRIPTION: Renders an interactive tabbed UI for browsing Solidity contract references across multiple networks (Flare Mainnet, Testnet Coston2, Songbird, Songbird Testnet Coston) using React and custom imported components. Each tab populates the SolidityReference component with the appropriate network name and shared contractNames, creating a dynamic and interactive developer reference. Dependencies include the @theme/Tabs, @theme/TabItem, and a project-specific SolidityReference component. Inputs are tab state, network keys, and contract list props; outputs are tabbed contract reference tables in the documentation UI.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/4-solidity-reference.mdx#2025-04-22_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\n<Tabs block>\n    <TabItem value=\"flare\" label=\"Flare Mainnet\" default>\n\n        <SolidityReference\n            network=\"FlareMainnet\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n    <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\">\n\n        <SolidityReference\n            network=\"FlareTestnetCoston2\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n    <TabItem value=\"songbird\" label=\"Songbird Canary-Network\">\n\n        <SolidityReference\n            network=\"SongbirdCanaryNetwork\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n    <TabItem value=\"coston\" label=\"Songbird Testnet Coston\">\n\n\n        <SolidityReference\n            network=\"SongbirdTestnetCoston\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Creating a Weather Insurance Policy with Flare Data Connector\nDESCRIPTION: This script shows how to create a weather insurance policy using the deployed WeatherInsuranceAgency contract. It includes setting policy parameters like location, temperature threshold, period, and financial details.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/weather-insurance.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as dotenv from \"dotenv\";\nimport hre, { ethers } from \"hardhat\";\n\ndotenv.config();\n\nasync function main() {\n  // Get the address of the weather insurance agency contract\n  const agencyAddress = process.env.WEATHER_INSURANCE_AGENCY_ADDRESS ?? \"\";\n  // Get the address of the USDC stablecoin contract\n  const stablecoinAddress = process.env.STABLECOIN_ADDRESS ?? \"\";\n\n  const [deployer] = await ethers.getSigners();\n  console.log(\"Creating policy with the account:\", deployer.address);\n\n  // Set policy parameters\n  const latitude = 46.056946; // Ljubljana\n  const longitude = 14.505751;\n  const threshold = -10.0; // -10.0°C\n  const period = 86400 * 7; // 7 days\n  // const startTimeMs = Date.now() + 60 * 1000; // starts in 1 minute\n  const startTimeMs = Date.now() + 24 * 60 * 60 * 1000; // starts in 1 day\n  const startTime = Math.floor(startTimeMs / 1000);\n  const expiryTime = startTime + period;\n  const premium = ethers.parseEther(\"0.2\"); // 0.2 USDC\n  const coverage = ethers.parseEther(\"5\"); // 5 USDC\n  console.log(\"latitude:\", latitude);\n  console.log(\"longitude:\", longitude);\n  console.log(\"threshold:\", threshold);\n  console.log(\"period:\", period);\n  console.log(\"startTime:\", startTime);\n  console.log(\"expiryTime:\", expiryTime);\n  console.log(\"premium:\", ethers.formatEther(premium));\n  console.log(\"coverage:\", ethers.formatEther(coverage));\n\n  const IStablecoin = new ethers.Interface([\n    \"function name() view returns (string)\",\n    \"function symbol() view returns (string)\",\n    \"function decimals() view returns (uint8)\",\n    \"function totalSupply() view returns (uint256)\",\n    \"function balanceOf(address) view returns (uint256)\",\n    \"function transfer(address to, uint256 amount) returns (bool)\",\n    \"function allowance(address owner, address spender) view returns (uint256)\",\n    \"function approve(address spender, uint256 amount) returns (bool)\",\n    \"function transferFrom(address from, address to, uint256 amount) returns (bool)\",\n  ]);\n  const stablecoin = new ethers.Contract(stablecoinAddress, IStablecoin, deployer);\n  console.log(\"stablecoin:\", await stablecoin.name(), await stablecoin.symbol());\n\n  const WeatherInsuranceAgency = await hre.ethers.getContractFactory(\"WeatherInsuranceAgency\");\n  const weatherInsuranceAgency = WeatherInsuranceAgency.attach(agencyAddress);\n\n  console.log(\n    \"Approving stablecoin transfer to WeatherInsuranceAgency:\",\n    await weatherInsuranceAgency.getAddress()\n  );\n  const approveTx = await stablecoin.approve(await weatherInsuranceAgency.getAddress(), premium);\n  await approveTx.wait();\n\n  console.log(\"Creating policy\");\n  const tx = await weatherInsuranceAgency.createPolicy(\n    latitude * 1000000,\n    longitude * 1000000,\n    threshold * 10,\n    startTime,\n    expiryTime,\n    premium,\n    coverage,\n    stablecoinAddress\n  );\n  await tx.wait();\n  console.log(\"Policy created. Tx hash:\", tx.hash);\n}\n\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n\n```\n\n----------------------------------------\n\nTITLE: Verifying Attestation Proofs in Solidity using FdcVerification\nDESCRIPTION: This code represents the process of verifying attestation responses and proofs in a smart contract. It uses the FdcVerification contract to validate the response against the stored Merkle root, ensuring data integrity.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/1-overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nFdcVerification\n```\n\n----------------------------------------\n\nTITLE: Fallback Contract with Event Emission\nDESCRIPTION: Solidity contract that forwards calls to a target contract and emits events with the call result. Used for observing state changes on external chains.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/connect-evm-chains.mdx#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getState(address target, bytes calldata cdata) external payable {\n      // Just forward the call to the contract we want to interact with\n      // Caution - this is very unsafe, as the calldata can be anything\n      // If this contract were to had some tokens for example, the calldata could be used to transfer them.\n      (bool result, bytes memory returnData) = target.call{value: msg.value}(cdata);\n      emit CallResult(target, result, msg.data, returnData);\n      // A bit safer way would be to only allow specific functions to be called or use something like this: https://github.com/gnosis/util-contracts/blob/main/contracts/storage/StorageAccessible.sol\n  }\n```\n\n----------------------------------------\n\nTITLE: Querying Latest BlockNumber via RPC - Songbird Canary-Network cURL - Bash\nDESCRIPTION: Uses curl in Bash to send a POST JSON-RPC request to the Songbird Canary-Network endpoint for the current block number with \\\"eth_blockNumber\\\". Only curl is required. Input is the endpoint and JSON body; returns current block information as a JSON response.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/0-overview.mdx#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://songbird-api.flare.network/ext/C/rpc -X POST -H \"Content-Type: application/json\" --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}'\n```\n\n----------------------------------------\n\nTITLE: Creating FTSOv2 Price Feed Consumer Contract - Solidity\nDESCRIPTION: Implements a Solidity smart contract to consume FLR/USD price data from FTSOv2, meant to reside at src/FtsoV2FeedConsumer.sol. Relies on the flare-periphery package to interface with the oracle. Key parameters include specifying the price pair and interface dependency. Accepts no constructor arguments and returns a public price feed method. Outputs price value, decimals, and timestamp on query. Limitations: requires correct remappings and imports; needs Foundry-compatible Solidity version.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/build-first-app.mdx#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n{FtsoV2FeedConsumer}\n```\n\n----------------------------------------\n\nTITLE: Defining IReferencedPaymentNonexistence Interface in Solidity\nDESCRIPTION: This code snippet defines the IReferencedPaymentNonexistence interface, including structs for Request, Response, Proof, RequestBody, and ResponseBody. It specifies the structure for asserting that an agreed-upon payment has not been made by a certain deadline on external blockchains.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IReferencedPaymentNonexistence.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name IReferencedPaymentNonexistence\n * @custom:id 0x04\n * @custom:supported BTC, DOGE, XRP\n * @author Flare\n * @notice Assertion that an agreed-upon payment has not been made by a certain deadline.\n * A confirmed request shows that a transaction meeting certain criteria (address, amount, reference)\n * did not appear in the specified block range.\n *\n *\n * This type of attestation can be used to e.g. provide grounds to liquidate funds locked by a smart\n * contract on Flare when a payment is missed.\n *\n * @custom:verification If `firstOverflowBlock` cannot be determined or does not have a sufficient\n * number of confirmations, the attestation request is rejected.\n * If `firstOverflowBlockNumber` is higher or equal to `minimalBlockNumber`, the request is rejected.\n * The search range are blocks between heights including `minimalBlockNumber` and excluding `firstOverflowBlockNumber`.\n * If the verifier does not have a view of all blocks from `minimalBlockNumber` to `firstOverflowBlockNumber`,\n * the attestation request is rejected.\n *\n * The request is confirmed if no transaction meeting the specified criteria is found in the search range.\n * The criteria and timestamp are chain specific.\n * ### UTXO (Bitcoin and Dogecoin)\n *\n *\n * Criteria for the transaction:\n *\n *\n * - It is not coinbase transaction.\n * - The transaction has the specified standardPaymentReference.\n * - The sum of values of all outputs with the specified address minus the sum of values of all inputs with\n * the specified address is greater than `amount` (in practice the sum of all values of the inputs with the\n * specified address is zero).\n *\n *\n * Timestamp is `mediantime`.\n * ### XRPL\n *\n *\n *\n * Criteria for the transaction:\n * - The transaction is of type payment.\n * - The transaction has the specified standardPaymentReference,\n * - One of the following is true:\n *   - Transaction status is `SUCCESS` and the amount received by the specified destination address is\n * greater than the specified `value`.\n *   - Transaction status is `RECEIVER_FAILURE` and the specified destination address would receive an\n * amount greater than the specified `value` had the transaction been successful.\n *\n *\n * Timestamp is `close_time` converted to UNIX time.\n *\n * @custom:lut `minimalBlockTimestamp`\n * @custom:lutlimit `0x127500`, `0x127500`, `0x127500`\n */\ninterface IReferencedPaymentNonexistence {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response as defined.\n     * @param requestBody Data defining the request. Type and interpretation is determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction of the response\n     * body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for ReferencePaymentNonexistence attestation type\n     * @param minimalBlockNumber The start block of the search range.\n     * @param deadlineBlockNumber The blockNumber to be included in the search range.\n     * @param deadlineTimestamp The timestamp to be included in the search range.\n     * @param destinationAddressHash The standard address hash of the address to which the payment had to be done.\n     * @param amount The requested amount in minimal units that had to be paid.\n     * @param standardPaymentReference The requested standard payment reference.\n     * @param checkSourceAddresses If true, the source address root is checked (only full match).\n     * @param sourceAddressesRoot The root of the Merkle tree of the source addresses.\n     * @custom:below The `standardPaymentReference` should not be zero (as a 32-byte sequence).\n     */\n    struct RequestBody {\n        uint64 minimalBlockNumber;\n        uint64 deadlineBlockNumber;\n        uint64 deadlineTimestamp;\n        bytes32 destinationAddressHash;\n        uint256 amount;\n        bytes32 standardPaymentReference;\n        bool checkSourceAddresses;\n        bytes32 sourceAddressesRoot;\n    }\n\n    /**\n     * @notice Response body for ReferencePaymentNonexistence attestation type.\n     * @param minimalBlockTimestamp The timestamp of the minimalBlock.\n     * @param firstOverflowBlockNumber The height of the firstOverflowBlock.\n     * @param firstOverflowBlockTimestamp The timestamp of the firstOverflowBlock.\n     * @custom:below `firstOverflowBlock` is the first block that has block number higher than\n     * `deadlineBlockNumber` and timestamp later than `deadlineTimestamp`.\n     * The specified search range are blocks between heights including `minimalBlockNumber`\n     * and excluding `firstOverflowBlockNumber`.\n     */\n    struct ResponseBody {\n        uint64 minimalBlockTimestamp;\n        uint64 firstOverflowBlockNumber;\n        uint64 firstOverflowBlockTimestamp;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Confirming ERC20 Balance Event in Solidity\nDESCRIPTION: This function decodes an event containing ERC20 balance information, verifies its validity, and stores the balance in the contract storage. It demonstrates how to handle cross-chain state observations without relying on proofs for testing purposes.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/connect-evm-chains.mdx#2025-04-22_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction confirmBalanceEvent(EVMTransaction.Proof calldata transaction, address tokenAddress, address targetAddress, uint256 eventIndex) public\n{\n    // We explicitly ignore the proof here, but in production code, you should always verify the proof\n    // We ignore it so we can test the whole contract much faster on the same network using only the\n    // In this guide we will just use the `prepareResponse` endpoint which has everything we need but the proof\n    require(\n        true || isEVMTransactionProofValid(transaction),\n        \"Invalid proof\"\n    );\n\n    EVMTransaction.Event memory _event = transaction.data.responseBody.events[eventIndex];\n    // This just check the happy path - do kkep in mind, that this can possibly faked\n    // And keep in mind that the specification does not require the topic0 to be event signature\n    require(\n        _event.topics[0] == keccak256(\"CallResult(address,bool,bytes,bytes)\"),\n        \"Invalid event\"\n    );\n\n    // _event.emitterAddress should be the contract we \"trust\" to correctly call the ERC20 token\n\n    (address target, bool result, bytes memory callData, bytes memory returnData) = abi.decode(\n        _event.data,\n        (address, bool, bytes, bytes)\n    );\n\n    require(target == tokenAddress, \"Invalid token address\");\n\n\n    bytes memory expectedCalldata = abi.encodeWithSignature(\"balanceOf(address)\", targetAddress);\n    require(\n        keccak256(callData) == keccak256(expectedCalldata),\n        \"Invalid calldata\"\n    );\n      // If a tuple was returned from the call, we can unpack it using abi.decode in the same way as in the event data decoding\n    uint256 balance = abi.decode(returnData, (uint256));\n\n    balances[transaction.data.responseBody.blockNumber] = BalanceInfo({\n        holder: targetAddress,\n        token: tokenAddress,\n        amount: balance,\n        blockNumber: transaction.data.responseBody.blockNumber,\n        timestamp: transaction.data.responseBody.timestamp,\n        rawEvent: _event,\n        proofHash: keccak256(abi.encode(transaction))\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Making a Contract Query on Flare Mainnet - Python\nDESCRIPTION: This snippet performs a similar contract address lookup as above but targets the Flare mainnet. It uses web3.py and contract ABI information to fetch specific addresses from the contract registry on mainnet.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-python-developers.mdx#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n{MakeQueryFlare}\n```\n\n----------------------------------------\n\nTITLE: Defining FDC Contract Access via Helpers – Flare, Solidity\nDESCRIPTION: This Solidity contract, Helpers, provides convenient accessors to key Flare on-chain contracts (FdcHub, FdcRequestFeeConfigurations, FlareSystemsManager, Relay) via the ContractRegistry library. Dependencies include external Flare periphery interfaces and the ContractRegistry. All helper functions are public view and return contract interface instances, streamlining other contracts' and scripts' lookup and invocation of FDC-related functionality. This contract is intended to be deployed once and accessed by offchain scripts or other smart contracts requiring up-to-date contract addresses.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/evm-transaction.mdx#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport {console} from \\\"hardhat/console.sol\\\";\\nimport {ContractRegistry} from \\\"@flarenetwork/flare-periphery-contracts/coston2/ContractRegistry.sol\\\";\\nimport {IFdcHub} from \\\"@flarenetwork/flare-periphery-contracts/coston2/IFdcHub.sol\\\";\\nimport {IFdcRequestFeeConfigurations} from\\n    \\\"@flarenetwork/flare-periphery-contracts/coston2/IFdcRequestFeeConfigurations.sol\\\";\\nimport {IFlareSystemsManager} from \\\"@flarenetwork/flare-periphery-contracts/coston2/IFlareSystemsManager.sol\\\";\\nimport {IRelay} from \\\"@flarenetwork/flare-periphery-contracts/coston2/IRelay.sol\\\";\\n\\ncontract Helpers {\\n    function getFdcHub() public view returns (IFdcHub) {\\n        return ContractRegistry.getFdcHub();\\n    }\\n\\n    function getFdcRequestFeeConfigurations() public view returns (IFdcRequestFeeConfigurations) {\\n        return ContractRegistry.getFdcRequestFeeConfigurations();\\n    }\\n\\n    function getFlareSystemsManager() public view returns (IFlareSystemsManager) {\\n        return ContractRegistry.getFlareSystemsManager();\\n    }\\n\\n    function getRelay() public view returns (IRelay) {\\n        return ContractRegistry.getRelay();\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data and Proof from DA Layer - TypeScript\nDESCRIPTION: Implements the asynchronous logic to poll for round finalization, prepare a proof request, submit it to the DA Layer server, and retry until a valid proof is received. Depends on helper, relay, and HTTP utilities (getRelay, sleep, postRequestToDALayer), handles status checking and retries. Requires URL, ABI-encoded request, and round ID; returns proof data as received from the server.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/address-validity.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nasync function retrieveDataAndProofBase(\n  url: string,\n  abiEncodedRequest: string,\n  roundId: number,\n) {\n  console.log(\"Waiting for the round to finalize...\");\n  // We check every 10 seconds if the round is finalized\n  const relay: IRelayInstance = await getRelay();\n  while (!(await relay.isFinalized(200, roundId))) {\n    await sleep(10000);\n  }\n  console.log(\"Round finalized!\\n\");\n\n  const request = {\n    votingRoundId: roundId,\n    requestBytes: abiEncodedRequest,\n  };\n  console.log(\"Prepared request:\\n\", request, \"\\n\");\n\n  await sleep(10000);\n  var proof = await postRequestToDALayer(url, request, true);\n  console.log(\"Waiting for the DA Layer to generate the proof...\");\n  while (proof.response_hex == undefined) {\n    await sleep(5000);\n    proof = await postRequestToDALayer(url, request, false);\n  }\n  console.log(\"Proof generated!\\n\");\n\n  console.log(\"Proof:\", proof, \"\\n\");\n  return proof;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Verifier Attestation Response in Solidity\nDESCRIPTION: Defines an internal pure function `parseAttestationRequest` that takes raw byte data (presumably from an HTTP response), converts it to a string, parses it as JSON using Foundry's `vm.parseJson` cheatcode, and then decodes the JSON data into a custom `AttestationResponse` struct using `abi.decode`. It logs the status and the ABI-encoded request from the response.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\n```solidity title=\"scrip/fdcExample/Base.s.sol\"\nfunction parseAttestationRequest(\n bytes memory data\n) internal pure returns (AttestationResponse memory) {\n string memory dataString = string(data);\n bytes memory dataJson = vm.parseJson(dataString);\n\n AttestationResponse memory response = abi.decode(\n dataJson,\n (AttestationResponse)\n );\n\n console.log(\"response status: %s\\n\", response.status);\n console.log(\"response abiEncodedRequest: \");\n console.logBytes(response.abiEncodedRequest);\n console.log(\"\\n\");\n\n return response;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Current Feed Data by Index in Solidity\nDESCRIPTION: Defines the `fetchCurrentFeeds` view function in the `IFastUpdater` interface. It allows retrieving data for a specific subset of feeds by providing their index numbers (`_indices`). It returns the corresponding feed values (`_feeds`), decimal places (`_decimals`), and the last update timestamp (`_timestamp`). Sorting the input indices is recommended for better performance.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdater.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction fetchCurrentFeeds(\n    uint256[] _indices\n) external view returns (\n    uint256[] _feeds,\n    int8[] _decimals,\n    uint64 _timestamp\n);\n```\n\n----------------------------------------\n\nTITLE: Instantiating Helpers Contract – Flare, TypeScript\nDESCRIPTION: This TypeScript function asynchronously deploys (or fetches) an instance of the on-chain Helpers smart contract, returning a HelpersInstance for interaction. It requires the web3/truffle environment and the Helpers contract artifact. There are no input parameters, and the function returns a JS object suitable for subsequent calls to any Helpers contract method, simplifying access to all Flare contract addresses as needed. This function forms the foundational access pattern for contract address resolution throughout the rest of the scripts.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/evm-transaction.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getHelpers() {\\n  const helpers: HelpersInstance = await Helpers.new();\\n  return helpers;\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Querying a Single Feed by Id - Solidity\nDESCRIPTION: Demonstrates how to query a single feed from FTSOv2 by its bytes21 ID using the getFeedById function. This example requires that the target contract implements the FTSOv2 interface and the calling contract must be able to pay the required fee if applicable. Input is the feed ID; output includes the feed's value, decimals, and last update timestamp. The code assumes the caller handles payable semantics and interprets returned values correctly.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/FtsoV2Interface.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getFeedById(\n    bytes21 _feedId\n) external payable returns (\n    uint256 _value,\n    int8 _decimals,\n    uint64 _timestamp\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing FDC Json API Example Script\nDESCRIPTION: Main script structure for FDC JsonApi implementation that imports necessary dependencies and defines the main function workflow for preparing requests, submitting them, retrieving data and proofs, and interacting with a contract.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/json-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { run, web3 } from \"hardhat\";\nimport { TransferEventListenerInstance } from \"../../typechain-types\";\nimport {\n  prepareAttestationRequestBase,\n  submitAttestationRequest,\n  retrieveDataAndProofBase,\n} from \"./Base\";\n\nconst JsonApi = artifacts.require(\"TransferEventListener\");\n\nconst { VERIFIER_URL_TESTNET, VERIFIER_API_KEY_TESTNET, COSTON2_DA_LAYER_URL } =\n  process.env;\n\n...\n\nasync function main() {\n  const data = await prepareAttestationRequest(\n    apiUrl,\n    postprocessJq,\n    abiSignature\n  );\n  console.log(\"Data:\", data, \"\\n\");\n\n  const abiEncodedRequest = data.abiEncodedRequest;\n  const roundId = await submitAttestationRequest(abiEncodedRequest);\n\n  const proof = await retrieveDataAndProof(abiEncodedRequest, roundId);\n\n  const characterList: StarWarsCharacterListInstance =\n    await deployAndVerifyContract();\n\n  await interactWithContract(characterList, proof);\n}\n\nmain().then((data) => {\n  process.exit(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Current Epoch IDs - Flare Systems Manager Interface - Solidity\nDESCRIPTION: Contains interface functions to retrieve the current reward and voting epoch identifiers, using different integer types for backward compatibility and explicit type constraints. These view functions ensure clients and contracts can track the protocol's epoch advancement and transition points efficiently. No parameters are needed, and return types vary between uint24, uint32, and uint256.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IFlareSystemsManager.md#2025-04-22_snippet_1\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction getCurrentRewardEpoch(\n) external view returns (\n    uint256\n);\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction getCurrentRewardEpochId(\n) external view returns (\n    uint24\n);\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction getCurrentVotingEpochId(\n) external view returns (\n    uint32\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Transfer Event Listener Contract\nDESCRIPTION: Main contract implementation that processes and stores token transfers from verified Ethereum transactions. Includes validation and event processing logic.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_24\n\nLANGUAGE: solidity\nCODE:\n```\ncontract TransferEventListener is ITransferEventListener {\n    TokenTransfer[] public tokenTransfers;\n    address public USDC_CONTRACT = 0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238; // USDC contract address on sepolia\n\n    function isEVMTransactionProofValid(\n        IEVMTransaction.Proof calldata transaction\n    ) public view returns (bool) {\n        // Use the library to get the verifier contract and verify that this transaction was proved by state connector\n        IFdcVerification fdc = ContractRegistry.getFdcVerification();\n        console.log(\"transaction: %s\\n\", FdcStrings.toJsonString(transaction));\n        return true;\n        //return fdc.verifyEVMTransaction(transaction);\n    }\n\n    function collectTransferEvents(\n        IEVMTransaction.Proof calldata _transaction\n    ) external {\n        // 1. FDC Logic\n        // Check that this EVMTransaction has indeed been confirmed by the FDC\n        require(\n            isEVMTransactionProofValid(_transaction),\n            \"Invalid transaction proof\"\n        );\n\n        // 2. Business logic\n        // Go through all events\n        for (\n            uint256 i = 0;\n            i < _transaction.data.responseBody.events.length;\n            i++\n        ) {\n            // Get current event\n            IEVMTransaction.Event memory _event = _transaction\n                .data\n                .responseBody\n                .events[i];\n\n            // Disregard events that are not from the USDC contract\n            if (_event.emitterAddress != USDC_CONTRACT) {\n                continue;\n            }\n\n            // Disregard non Transfer events\n            if (\n                _event.topics.length == 0 || // No topics\n                // The topic0 doesn't match the Transfer event\n                _event.topics[0] !=\n                keccak256(abi.encodePacked(\"Transfer(address,address,uint256)\"))\n            ) {\n                continue;\n            }\n\n            // We now know that this is a Transfer event from the USDC contract - and therefore know how to decode topics and data\n            // Topic 1 is the sender\n            address sender = address(uint160(uint256(_event.topics[1])));\n            // Topic 2 is the receiver\n            address receiver = address(uint160(uint256(_event.topics[2])));\n            // Data is the amount\n            uint256 value = abi.decode(_event.data, (uint256));\n\n            // Add the transfer to the list\n            tokenTransfers.push(\n                TokenTransfer({from: sender, to: receiver, value: value})\n            );\n        }\n    }\n\n    function getTokenTransfers()\n        external\n        view\n        returns (TokenTransfer[] memory)\n    {\n        TokenTransfer[] memory result = new TokenTransfer[](\n            tokenTransfers.length\n        );\n        for (uint256 i = 0; i < tokenTransfers.length; i++) {\n            result[i] = tokenTransfers[i];\n        }\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching FAsset Lot Size with Solidity Smart Contract\nDESCRIPTION: A Solidity contract that interfaces with the FAssets system to fetch lot size information for FXRP. It imports the IAssetManager interface from Flare Periphery Contracts and provides a function to get lot size and decimals.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/developer-guides/2-fassets-asset-manager-settings-solidity.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n// Import the FLare Asset interface from the flare-periphery-contracts package:\nimport \"@flarenetwork/flare-periphery-contracts/contracts/fassets/interfaces/IAssetManager.sol\";\n\n/// @title FAssetsSettings: Fetch FAsset Lot Size and Value\n/// @notice This contract fethes the lot size of an FAsset and return both the lot size and the asset decimals\ncontract FAssetsSettings {\n    /// The AssetManager interface for FXRP from the flare-periphery-contracts package\n    IAssetManager public assetManager;\n\n    /// @notice The constructor initializes the contract with the AssetManager address\n    /// @param _assetManagerAddress The address of the FXRP Asset Manager contract\n    constructor(address _assetManagerAddress) {\n        assetManager = IAssetManager(_assetManagerAddress);\n    }\n\n    /// @notice Fetches the smallest transferable amount (lot size) and asset decimals\n    /// @return lotSizeAMG The minimum transferable amount in Asset Minimum Unit (AMG)\n    /// @return assetDecimals The number of decimal places in the asset\n    function getLotSize() external view returns (uint256 lotSizeAMG, uint8 assetDecimals) {\n        // Get settings which include the lot size\n        // Additional settings are available in the IAssetManager.AssetManagerSettings struct\n        IAssetManager.AssetManagerSettings memory settings = assetManager.getSettings();\n        \n        // Return the lot size (minUnderlyingBackingOutput) and decimals\n        return (settings.minUnderlyingBackingOutput, settings.assetDecimals);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data and Proofs in TypeScript\nDESCRIPTION: Defines a function to retrieve data and proofs for each attestation request. It waits for voting rounds to finalize, collects data and proofs from the Data Availability Layer, and stores the results in a Map.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nasync function retrieveDataAndProofs(\n  data: Map<string, string>,\n  roundIds: Map<string, number>\n) {\n  console.log(\"\\nRetrieving data and proofs...\\n\");\n\n  var proofs: Map<string, any> = new Map();\n\n  const url = `${COSTON2_DA_LAYER_URL}api/v1/fdc/proof-by-request-round-raw`;\n  console.log(\"Url:\", url, \"\\n\");\n  for (const [source, roundId] of roundIds.entries()) {\n    console.log(`(${source})\\n`);\n\n    console.log(\"Waiting for the round to finalize...\");\n    // We check every 10 seconds if the round is finalized\n    const relay: IRelayInstance = await getRelay();\n    while (!(await relay.isFinalized(200, roundId))) {\n      await sleep(10000);\n    }\n    console.log(\"Round finalized!\\n\");\n\n    const request = {\n      votingRoundId: roundId,\n      requestBytes: data.get(source),\n    };\n    console.log(\"Prepared request:\\n\", request, \"\\n\");\n\n    var proof = await postRequestToDALayer(url, request, true);\n    console.log(\"Waiting for the DA Layer to generate the proof...\");\n    while (proof.response_hex == undefined) {\n      await sleep(10000);\n      proof = await postRequestToDALayer(url, request, false);\n    }\n    console.log(\"Proof generated!\\n\");\n\n    console.log(\"Proof:\", proof, \"\\n\");\n    proofs.set(source, proof);\n  }\n  return proofs;\n}\n```\n\n----------------------------------------\n\nTITLE: Making Volatility Incentive Offer using web3.js (JavaScript)\nDESCRIPTION: This JavaScript snippet employs web3.js to interact with the Flare Testnet Coston2 FastUpdateIncentiveManager contract and submit a volatility incentive offer. Dependencies include web3.js and the correct contract ABI. Inputs required are the RPC endpoint, the manager contract address, signing key, and cost parameters; outputs include a submitted transaction with hash. The code must be run in a Node.js environment with access to an Ethereum-like node; ensure accounts are funded and keys are secure.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/make-volatility-incentive.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{VolIncentiveWeb3Js}\n```\n\n----------------------------------------\n\nTITLE: Parsing Verifier Server Response into Struct - Solidity Foundry\nDESCRIPTION: Defines a utility function to parse verifier response data into a custom `AttestationResponse` struct. Uses Foundry's `parseJson` and Solidity's `abi.decode` for data extraction. Expects an ABI-encoded JSON blob as input, logging key fields for traceability. Depends on the pre-defined struct and assumes the Foundry VM environment (`vm`, `console.log`). Returns the decoded struct instance.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/address-validity.mdx#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction parseAttestationRequest(\n bytes memory data\n) internal pure returns (AttestationResponse memory) {\n string memory dataString = string(data);\n bytes memory dataJson = vm.parseJson(dataString);\n\n AttestationResponse memory response = abi.decode(\n dataJson,\n (AttestationResponse)\n );\n\n console.log(\"response status: %s\\n\", response.status);\n console.log(\"response abiEncodedRequest: \");\n console.logBytes(response.abiEncodedRequest);\n console.log(\"\\n\");\n\n return response;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining IEVMTransaction Interface in Solidity\nDESCRIPTION: Complete definition of the IEVMTransaction interface used for relaying and verifying transactions from EVM-compatible blockchains. It includes all necessary structs for requests, responses, proofs, and event logs handling.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IEVMTransaction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name IEVMTransaction\n * @custom:id 0x06\n * @custom:supported ETH, FLR, SGB\n * @author Flare\n * @notice A relay of a transaction from an EVM chain.\n * This type is only relevant for EVM-compatible chains.\n * @custom:verification If a transaction with the `transactionId` is in a block on the main branch with\n * at least `requiredConfirmations`, the specified data is relayed.\n * If an indicated event does not exist, the request is rejected.\n * @custom:lut `timestamp`\n * @custom:lutlimit `0x41eb00`, `0x41eb00`, `0x41eb00`\n */\ninterface IEVMTransaction {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\n     * @param requestBody Data defining the request. Type (struct) and interpretation is\n     * determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction\n     * of the response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for EVM transaction attestation type\n     * @custom:below Note that events (logs) are indexed in block not in each transaction.\n     * The contract that uses the attestation should specify the order of event logs as needed and the requestor should\n     * sort `logIndices` with respect to the set specifications.\n     * If possible, the contact should require one `logIndex`.\n     * @param transactionHash Hash of the transaction(transactionHash).\n     * @param requiredConfirmations The height at which a block is considered confirmed by the requestor.\n     * @param provideInput If true, \"input\" field is included in the response.\n     * @param listEvents If true, events indicated by `logIndices` are included in the response.\n     * Otherwise, no events are included in the response.\n     * @param logIndices If `listEvents` is `false`, this should be an empty list, otherwise,\n     * the request is rejected. If `listEvents` is `true`, this is the list of indices (logIndex)\n     * of the events to be relayed (sorted by the requestor). The array should contain at most 50 indices.\n     * If empty, it indicates all events in order capped by 50.\n     */\n    struct RequestBody {\n        bytes32 transactionHash;\n        uint16 requiredConfirmations;\n        bool provideInput;\n        bool listEvents;\n        uint32[] logIndices;\n    }\n\n    /**\n     * @notice Response body for EVM transaction attestation type\n     * @custom:below The fields are in line with transaction provided by EVM node.\n     * @param blockNumber Number of the block in which the transaction is included.\n     * @param timestamp Timestamp of the block in which the transaction is included.\n     * @param sourceAddress The address (from) that signed the transaction.\n     * @param isDeployment Indicate whether it is a contract creation transaction.\n     * @param receivingAddress The address (to) of the receiver of the initial transaction.\n     * Zero address if `isDeployment` is `true`.\n     * @param value The value transferred by the initial transaction in wei.\n     * @param input If `provideInput`, this is the data send along with the initial transaction.\n     * Otherwise it is the default value `0x00`.\n     * @param status Status of the transaction 1 - success, 0 - failure.\n     * @param events If `listEvents` is `true`, an array of the requested events.\n     * Sorted by the logIndex in the same order as `logIndices`. Otherwise, an empty array.\n     */\n    struct ResponseBody {\n        uint64 blockNumber;\n        uint64 timestamp;\n        address sourceAddress;\n        bool isDeployment;\n        address receivingAddress;\n        uint256 value;\n        bytes input;\n        uint8 status;\n        Event[] events;\n    }\n\n    /**\n     * @notice Event log record\n     * @custom:above An `Event` is a struct with the following fields:\n     * @custom:below The fields are in line with EVM event logs.\n     * @param logIndex The consecutive number of the event in block.\n     * @param emitterAddress The address of the contract that emitted the event.\n     * @param topics An array of up to four 32-byte strings of indexed log arguments.\n     * @param data Concatenated 32-byte strings of non-indexed log arguments. At least 32 bytes long.\n     * @param removed It is `true` if the log was removed due to a chain reorganization\n     * and `false` if it is a valid log.\n     */\n    struct Event {\n        uint32 logIndex;\n        address emitterAddress;\n        bytes32[] topics;\n        bytes data;\n        bool removed;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Making Volatility Incentive Offer using ethers.js (JavaScript)\nDESCRIPTION: This JavaScript example uses the ethers.js library to submit a volatility incentive offer via FastUpdateIncentiveManager on Flare Coston2. It requires the ethers.js package, the contract ABI, the Flare RPC endpoint, wallet/private key, and cost parameters. The code handles contract instantiation and transaction signing and sending. Outputs include transaction receipts; execution environment should have network connectivity and wallet properly managed.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/make-volatility-incentive.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{VolIncentiveEthersJs}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fallback Contract for State Observation in Solidity\nDESCRIPTION: This Solidity function implements a fallback mechanism to forward calls to a target contract and emit the result as an event, allowing state observation on external chains.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-connectivity.mdx#2025-04-22_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getState(address target, bytes calldata cdata) external payable {\n    // Just forward the call to the contract we want to interact with\n    // Caution - this is very unsafe, as the calldata can be anything\n    // If this contract were to had some tokens for example, the calldata could be used to transfer them.\n    (bool result, bytes memory returnData) = target.call{value: msg.value}(cdata);\n    emit CallResult(target, result, msg.data, returnData);\n    // A bit safer way would be to only allow specific functions to be called or use something like this: https://github.com/gnosis/util-contracts/blob/main/contracts/storage/StorageAccessible.sol\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying and Verifying PaymentRegistry Contract in TypeScript\nDESCRIPTION: This function deploys the PaymentRegistry contract and verifies it on the network. It uses Hardhat's verify functionality to ensure the contract's bytecode matches the source code.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nasync function deployAndVerifyContract() {\n  const args: any[] = [];\n  const paymentRegistry: PaymentRegistryInstance = await Payment.new(...args);\n  try {\n    await run(\"verify:verify\", {\n      address: paymentRegistry.address,\n      constructorArguments: args,\n    });\n  } catch (e: any) {\n    console.log(e);\n  }\n  console.log(\"Payment deployed to\", paymentRegistry.address, \"\\n\");\n  return paymentRegistry;\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Solidity Contract to Flare via Geth in Go - Go\nDESCRIPTION: These Go snippets demonstrate deploying the FtsoV2FeedConsumer contract to the Flare network (testnet or mainnet) using finalized Go contract bindings with go-ethereum. The user must insert their keystore JSON and connect to a Flare RPC endpoint. Dependencies include the contract's Go bindings, ethclient, and a valid funded account. Inputs are contract binaries, ABI bindings, and keystore; expected output is the contract address upon successful deployment. Errors during deployment or network connectivity are handled in the code.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-go-developers.mdx#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n{DeployContractCoston2}\n```\n\nLANGUAGE: go\nCODE:\n```\n{DeployContractFlare}\n```\n\n----------------------------------------\n\nTITLE: Implementing Address Validation with Flare's FDC in Solidity\nDESCRIPTION: Complete example of a contract that uses Flare's Data Checker (FDC) to verify address validity on external blockchains. Demonstrates how to create and submit validation requests and verify proofs using the IAddressValidity interface.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IAddressValidity.mdx#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/IFdcHub.sol\";\nimport \"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/IFdcVerification.sol\";\nimport \"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/fdc/IAddressValidity.sol\";\n\ncontract AddressVerifier {\n    IFdcHub private fdcHub;\n    IFdcVerification private fdcVerification;\n\n    bytes32 private constant ATTESTATION_TYPE_ADDRESS_VALIDITY = 0x0500000000000000000000000000000000000000000000000000000000000000;\n    bytes32 private constant SOURCE_ID_BTC = 0x4254430000000000000000000000000000000000000000000000000000000000;\n\n    constructor(address _fdcHubAddress, address _fdcVerificationAddress) {\n        fdcHub = IFdcHub(_fdcHubAddress);\n        fdcVerification = IFdcVerification(_fdcVerificationAddress);\n    }\n\n    // Request address validation\n    function requestAddressValidation(string calldata _address) external payable {\n        // Create request body\n        IAddressValidity.RequestBody memory requestBody = IAddressValidity.RequestBody({\n            addressStr: _address\n        });\n\n        // Encode the full request\n        bytes memory encodedRequest = abi.encode(\n            ATTESTATION_TYPE_ADDRESS_VALIDITY,\n            SOURCE_ID_BTC,\n            bytes32(0), // messageIntegrityCode (would need to be calculated properly)\n            requestBody\n        );\n\n        // Submit the request with payment\n        fdcHub.requestAttestation{value: msg.value}(encodedRequest);\n    }\n\n    // Verify a provided proof\n    function verifyAddressProof(IAddressValidity.Proof calldata _proof) external view returns (\n        bool isValid,\n        string memory standardAddress,\n        bytes32 standardAddressHash\n    ) {\n        // Verify the proof using FdcVerification\n        bool proofVerified = fdcVerification.verifyAddressValidity(_proof);\n\n        if (proofVerified) {\n            // Extract data from the verified proof\n            isValid = _proof.data.responseBody.isValid;\n            standardAddress = _proof.data.responseBody.standardAddress;\n            standardAddressHash = _proof.data.responseBody.standardAddressHash;\n        }\n\n        return (isValid, standardAddress, standardAddressHash);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: FtsoV2FeedConsumer Smart Contract Inlined ABI - Solidity\nDESCRIPTION: This Solidity snippet provides an inlined source code for the FtsoV2FeedConsumer contract, suitable for use without interface import dependencies. It is designed for compilation and deploying on the Flare blockchain. Dependencies are inlined to avoid external import issues. The contract can be compiled and used for querying FTSOv2 feeds, with key parameters being the feed interfaces and consumer logic. Inputs/outputs depend on contract methods and deployment parameters.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-go-developers.mdx#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\n{FtsoV2FeedConsumerNoImports}\n```\n\n----------------------------------------\n\nTITLE: Claiming FlareDrop Rewards in Solidity\nDESCRIPTION: Function for claiming rewards from the Delegation Incentive Pool. This can be called by the reward owner or an approved executor to claim rewards for a specific month. The rewards can optionally be wrapped immediately.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IDistributionToDelegators.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction claim(\n    address _rewardOwner,\n    address _recipient,\n    uint256 _month,\n    bool _wrap\n) external returns (\n    uint256 _rewardAmount);\n```\n\n----------------------------------------\n\nTITLE: Generating Feed ID - Python\nDESCRIPTION: This snippet provides a Python implementation to create a feed ID by encoding the feed name into hexadecimal, combining it with the category byte, and left-padding the result to obtain a 20-byte value as a hex string. It is self-contained and requires no external dependencies. Function parameters are the category (int) and feed name (str); the output is a 0x-prefixed string suitable for database or API identifiers.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/_feed_explanation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# get_feed_id.py\ndef get_feed_id(category: int, feed_name: str) -> str:\n    feed_name_hex = feed_name.encode('utf-8').hex()\n    combined = f'{category:02x}' + feed_name_hex.ljust(38, '0')\n    return '0x' + combined\n\n# Example:\n# print(get_feed_id(1, 'FLR/USD'))\n\n```\n\n----------------------------------------\n\nTITLE: Querying Single Feed Value in Wei - Solidity\nDESCRIPTION: Shows how to query a single feed from FTSOv2 using getFeedByIdInWei to obtain the value denominated in wei (18 decimals). The caller provides a bytes21 feed ID and may need to pay a fee. Returns the value in wei and the associated update timestamp. The calling contract needs to interpret the result with correct precision.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/FtsoV2Interface.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getFeedByIdInWei(\n    bytes21 _feedId\n) external payable returns (\n    uint256 _value,\n    uint64 _timestamp\n);\n```\n\n----------------------------------------\n\nTITLE: Defining EVM Transaction Attestation Response Body and Event Structure in Solidity\nDESCRIPTION: This Solidity code defines the `ResponseBody` struct, which holds the data returned from an EVM transaction attestation request. It contains key transaction details like block number, timestamp, source/receiving addresses, value transferred, status, and flags indicating deployment. It also includes optional transaction input data and an array of `Event` structs if requested. The nested `Event` struct defines the structure for individual event logs, including log index, emitter address, topics, data, and a flag indicating if the log was removed due to chain reorganization.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-connectivity.mdx#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @notice Response body for EVM transaction attestation type\n     * @custom:below The fields are in line with [transaction](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionbyhash) provided by EVM node.\n     * @param blockNumber Number of the block in which the transaction is included.\n     * @param timestamp Timestamp of the block in which the transaction is included.\n     * @param sourceAddress The address (from) that signed the transaction.\n     * @param isDeployment Indicate whether it is a contract creation transaction.\n     * @param receivingAddress The address (to) of the receiver of the initial transaction. Zero address if `isDeployment` is `true`.\n     * @param value The value transferred by the initial transaction in wei.\n     * @param input If `provideInput`, this is the data send along with the initial transaction. Otherwise it is the default value `0x00`.\n     * @param status Status of the transaction 1 - success, 0 - failure.\n     * @param events If `listEvents` is `true`, an array of the requested events. Sorted by the logIndex in the same order as `logIndices`. Otherwise, an empty array.\n     */\n    struct ResponseBody {\n        uint64 blockNumber;\n        uint64 timestamp;\n        address sourceAddress;\n        bool isDeployment;\n        address receivingAddress;\n        uint256 value;\n        bytes input;\n        uint8 status;\n        Event[] events;\n    }\n\n    /**\n     * @notice Event log record\n     * @custom:above An `Event` is a struct with the following fields:\n     * @custom:below The fields are in line with [EVM event logs](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\n     * @param logIndex The consecutive number of the event in block.\n     * @param emitterAddress The address of the contract that emitted the event.\n     * @param topics An array of up to four 32-byte strings of indexed log arguments.\n     * @param data Concatenated 32-byte strings of non-indexed log arguments. At least 32 bytes long.\n     * @param removed It is `true` if the log was removed due to a chain reorganization and `false` if it is a valid log.\n     */\n    struct Event {\n        uint32 logIndex;\n        address emitterAddress;\n        bytes32[] topics;\n        bytes data;\n        bool removed;\n    }\n```\n\n----------------------------------------\n\nTITLE: Verifying Confirmed Block Height Existence in Solidity\nDESCRIPTION: This function verifies a proof that a specified block height exists and is confirmed. It takes an IConfirmedBlockHeightExists.Proof structure and returns a boolean indicating if the proof is valid.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IFdcVerification.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction verifyConfirmedBlockHeightExists(\n    struct IConfirmedBlockHeightExists.Proof _proof\n) external view returns (\n    bool _proved\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing PaymentRegistry Contract in Solidity\nDESCRIPTION: This contract allows for registering and verifying payment transactions using FDC. It includes functions to check the validity of a payment proof and register verified payments.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_21\n\nLANGUAGE: solidity\nCODE:\n```\ncontract PaymentRegistry is IPaymentRegistry {\n    Payment[] public verifiedPayments;\n\n    function isPaymentProofValid(\n        IPayment.Proof calldata transaction\n    ) public view returns (bool) {\n        // Use the library to get the verifier contract and verify that this transaction was proved by state connector\n        IFdcVerification fdc = ContractRegistry.getFdcVerification();\n        console.log(\"transaction: %s\\n\", FdcStrings.toJsonString(transaction));\n        // return true;\n        return fdc.verifyPayment(transaction);\n    }\n\n    function registerPayment(IPayment.Proof calldata _transaction) external {\n        // 1. FDC Logic\n        // Check that this Payment has indeed been confirmed by the FDC\n        require(isPaymentProofValid(_transaction), \"Invalid transaction proof\");\n\n        // 2. Business logic\n        Payment memory provedPayment = Payment(\n            _transaction.data.responseBody.blockNumber,\n            _transaction.data.responseBody.blockTimestamp,\n            _transaction.data.responseBody.sourceAddressHash,\n            _transaction.data.responseBody.receivingAddressHash,\n            _transaction.data.responseBody.spentAmount,\n            _transaction.data.responseBody.standardPaymentReference,\n            _transaction.data.responseBody.status\n        );\n\n        verifiedPayments.push(provedPayment);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting FDC Attestation Request in TypeScript\nDESCRIPTION: This asynchronous TypeScript function `submitAttestationRequest` handles the process of submitting an attestation request to the Flare Data Connector (FDC). It takes an ABI-encoded request string, fetches the FDC Hub contract instance, calculates the necessary fee, sends the transaction to `FdcHub.requestAttestation` with the fee, calculates the corresponding voting round ID, and returns the round ID. It relies on helper functions `getFdcHub`, `getFdcRequestFee`, `calculateRoundId`, and uses `console` for logging.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/json-api.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nasync function submitAttestationRequest(abiEncodedRequest: string) {\n  const fdcHub = await getFdcHub();\n\n  const requestFee = await getFdcRequestFee(abiEncodedRequest);\n\n  const transaction = await fdcHub.requestAttestation(abiEncodedRequest, {\n    value: requestFee,\n  });\n  console.log(\"Submitted request:\", transaction.tx, \"\\n\");\n\n  const roundId = await calculateRoundId(transaction);\n  console.log(\n    `Check round progress at: https://${hre.network.name}-systems-explorer.flare.rocks/voting-epoch/${roundId}?tab=fdc\\n`,\n  );\n  return roundId;\n}\n```\n\n----------------------------------------\n\nTITLE: Claiming Staking Rewards on Flare Network\nDESCRIPTION: This command starts the interactive process for claiming accumulated staking rewards. It allows users to specify the amount to claim and the receiving address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/using-flare-stake-tool.mdx#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nflare-stake-tool interactive\n```\n\n----------------------------------------\n\nTITLE: Bitcoin Base58 Address Structure\nDESCRIPTION: The format structure for decoded Bitcoin Base58 addresses showing the components.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/attestation-types/_addresses.mdx#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<leadingByte><hash><checksum>\n```\n\n----------------------------------------\n\nTITLE: Retrieving FTSOv2 Feeds via alloy-rs - Rust\nDESCRIPTION: This Rust snippet uses the alloy-rs suite to connect asynchronously to a Flare RPC endpoint, deploy the FtsoV2 smart contract interface, and fetch offchain price feeds. Dependencies are alloy, eyre, and tokio (with selected features). Inputs: RPC endpoint, contract address (pulled from a config or argument), and three asset feed IDs. The output is printed to the console as feed value and timestamp for each queried asset. Ensure you use the correct ABI-compatible wrapper for contract calls.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/read-feeds-offchain.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse alloy::providers::Provider;  // And further appropriate alloy use imports\nuse eyre::Result;\nuse std::str::FromStr;\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    let rpc_url = \"<YOUR_RPC_ENDPOINT>\"; // e.g., https://coston2-api.flare.network/ext/bc/C/rpc\n    let contract_address = \"<FTSOV2_CONTRACT_ADDRESS>\";\n    let feed_ids = [\n        \"0x464c522f55534400000000000000000000000000000000000000000000000000\", // FLR/USD\n        \"0x4254432f55534400000000000000000000000000000000000000000000000000\", // BTC/USD\n        \"0x4554482f55534400000000000000000000000000000000000000000000000000\"  // ETH/USD\n    ];\n\n    let provider = Provider::try_from(rpc_url)?;\n    // let contract = FtsoV2::new(contract_address.parse()?, provider);\n    // Assuming codegen and ABI present, insert main querying logic below\n    for feed_id in feed_ids.iter() {\n        // let (value, timestamp) = contract.get_current_feed(feed_id).await?;\n        // println!(\"FeedID: {} Value: {} Timestamp: {}\", feed_id, value, timestamp);\n    }\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Making Volatility Incentive Offer using go-ethereum (Go)\nDESCRIPTION: This Go snippet employs the go-ethereum SDK to construct and submit a volatility incentive offer transaction to the Flare Coston2 manager contract. Required dependencies are github.com/ethereum/go-ethereum modules, with ABI Go bindings generated via abigen and available in the project. Inputs include endpoint URL, contract address, cost, and account key; outputs provide transaction status. Project setup and ABI handling are essential; the code must be run in a Go-ethereum environment.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/make-volatility-incentive.mdx#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n{VolIncentiveGo}\n```\n\n----------------------------------------\n\nTITLE: Defining EVMTransaction Request Structure in Solidity\nDESCRIPTION: This snippet outlines the structure of an EVMTransaction request, including fields for transaction hash, required confirmations, input data inclusion, event listing, and log indices.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/attestation-types/evm-transaction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstruct EVMTransactionRequest {\n    bytes32 transactionHash;\n    uint16 requiredConfirmations;\n    bool provideInput;\n    bool listEvents;\n    uint32[] logIndices;\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Solidity Contract Using solc - Bash\nDESCRIPTION: This bash snippet demonstrates compiling a Solidity contract (FtsoV2FeedConsumer.sol) using solc, specifying London EVM compatibility and outputting ABI and binary files to the build directory. Prerequisites are solc installed and a valid Solidity source file. The inputs are the Solidity contract file and output directory; outputs are ABI and binary files used for deployment. Limitations: contract and options must match network targets.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-go-developers.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsolc --evm-version london --abi --bin FtsoV2FeedConsumer.sol -o build\\n\n```\n\n----------------------------------------\n\nTITLE: Accessing the Flare Relay Contract - TypeScript\nDESCRIPTION: Defines a function to retrieve an instance of the Flare 'Relay' contract using a helper module. This is used in the polling/finalization logic for attestation proofs. Requires the getHelpers utility and correct contract interfaces; returns a Promise for a relay instance.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/address-validity.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getRelay() {\n  const helpers: HelpersInstance = await getHelpers();\n  const relayAddress: string = await helpers.getRelay();\n  return await IRelay.at(relayAddress);\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic URL and JSON Body Construction - Solidity Foundry\nDESCRIPTION: Illustrates how to dynamically construct the verifier endpoint URL and the JSON request body in Solidity by concatenating base addresses and variables. This snippet demonstrates string manipulations for endpoint paths and body preparation, using `string.concat`. Essential for targeting different attestation types and sources programmatically. No on-chain interaction occurs at this step; intended for setup prior to API requests.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/address-validity.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory baseUrl = \"https://fdc-verifiers-testnet.flare.network/\";\nstring memory url = string.concat(\n baseUrl,\n \"verifier/\",\n baseSourceName,\n \"/\",\n attestationTypeName,\n \"/prepareRequest\"\n);\nconsole.log(\"url: %s\", url);\nstring memory requestBody = string.concat(\n '{\"addressStr\": \"',\n addressStr,\n '\"}'\n);\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Address Validity Proof Usage Onchain - Solidity\nDESCRIPTION: Shows how to build a Solidity smart contract that receives an address validity proof and stores the verified address on-chain. Uses Flare's contract registry and verification interfaces. The contract validates incoming proofs with FDC logic, extracts the standard address, and stores it in a verifiedAddresses array. Assumes deployment with access to the Flare contracts and the appropriate interfaces.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/address-validity.mdx#2025-04-22_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.25;\n\nimport {ContractRegistry} from \"@flarenetwork/flare-periphery-contracts/coston2/ContractRegistry.sol\";\nimport {IFdcVerification} from \"@flarenetwork/flare-periphery-contracts/coston2/IFdcVerification.sol\";\nimport {IAddressValidity} from \"@flarenetwork/flare-periphery-contracts/coston2/IAddressValidity.sol\";\n\ninterface IAddressRegistry {\n    function registerAddress(IAddressValidity.Proof memory _transaction) external;\n}\n\ncontract AddressRegistry is IAddressRegistry {\n    string[] public verifiedAddresses;\n\n    function isAddressValidityProofValid(IAddressValidity.Proof memory transaction) public view returns (bool) {\n        // Use the library to get the verifier contract and verify that this transaction was proved by state connector\n        IFdcVerification fdc = ContractRegistry.getFdcVerification();\n        return fdc.verifyAddressValidity(transaction);\n    }\n\n    function registerAddress(IAddressValidity.Proof memory _transaction) public {\n        // 1. FDC Logic\n        // Check that this AddressValidity has indeed been confirmed by the FDC\n        require(isAddressValidityProofValid(_transaction), \"Invalid transaction proof\");\n\n        // 2. Business logic\n        string memory provedAddress = _transaction.data.requestBody.addressStr;\n\n        verifiedAddresses.push(provedAddress);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Base Attestation Request Preparation\nDESCRIPTION: Function that handles the core logic of preparing and sending attestation requests to the verifier server with proper authentication and error handling.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/evm-transaction.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function prepareAttestationRequestBase(\n  url: string,\n  apiKey: string,\n  attestationTypeBase: string,\n  sourceIdBase: string,\n  requestBody: any,\n) {\n  console.log(\"Url:\", url, \"\\n\");\n  const attestationType = toUtf8HexString(attestationTypeBase);\n  const sourceId = toUtf8HexString(sourceIdBase);\n\n  const request = {\n    attestationType: attestationType,\n    sourceId: sourceId,\n    requestBody: requestBody,\n  };\n  console.log(\"Prepared request:\\n\", request, \"\\n\");\n\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"X-API-KEY\": apiKey,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(request),\n  });\n  if (response.status != 200) {\n    throw new Error(\n      `Response status is not OK, status ${response.status} ${response.statusText}\\n`,\n    );\n  }\n  console.log(\"Response status is OK\\n\");\n\n  return await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: JSON API Data and Proof Retrieval\nDESCRIPTION: Implementation of the retrieveDataAndProof function specifically for JSON API requests, utilizing the DA Layer's proof-by-request-raw endpoint.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/json-api.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nasync function retrieveDataAndProof(\n  abiEncodedRequest: string,\n  roundId: number,\n) {\n  const url = `${COSTON2_DA_LAYER_URL}api/v1/fdc/proof-by-request-round-raw`;\n  console.log(\"Url:\", url, \"\\n\");\n  return await retrieveDataAndProofBase(url, abiEncodedRequest, roundId);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Random Number, Quality, and Timestamp in Solidity\nDESCRIPTION: Defines an external view function getCurrentRandomWithQualityAndTimestamp returning the current random number, its secure status, and a timestamp of generation. This enables protocol users to perform advanced validation of randomness by considering timing and generation quality. Inputs: none. Outputs: _randomNumber (uint256), _isSecureRandom (bool), _randomTimestamp (uint256). Requires concrete contract implementation.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/ISubmission.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getCurrentRandomWithQualityAndTimestamp(\n) external view returns (\n    uint256 _randomNumber,\n    bool _isSecureRandom,\n    uint256 _randomTimestamp\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Address Validity Verification Contract in Solidity\nDESCRIPTION: This snippet defines a Solidity contract named AddressValidity that verifies address validity using FDC proofs. It includes functions to check proof validity and register verified addresses.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/address-validity.mdx#2025-04-22_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.25;\n\nimport {console} from \"dependencies/forge-std-1.9.5/src/console.sol\";\nimport {Strings} from \"@openzeppelin-contracts/utils/Strings.sol\";\nimport {ContractRegistry} from \"dependencies/flare-periphery-test-0.0.7/src/coston2/ContractRegistry.sol\";\nimport {IFdcHub} from \"dependencies/flare-periphery-test-0.0.7/src/coston2/IFdcHub.sol\";\nimport {IAddressValidity} from \"dependencies/flare-periphery-test-0.0.7/src/coston2/IAddressValidity.sol\";\nimport {IFdcVerification} from \"dependencies/flare-periphery-test-0.0.7/src/coston2/IFdcVerification.sol\";\nimport {FdcStrings} from \"src/utils/fdcStrings/AddressValidity.sol\";\n\nstruct EventInfo {\n address sender;\n uint256 value;\n bytes data;\n}\n\ncontract AddressValidity {\n string[] public verifiedAddresses;\n\n function isAddressValidityProofValid(\n IAddressValidity.Proof calldata transaction\n ) public view returns (bool) {\n // Use the library to get the verifier contract and verify that this transaction was proved by the state connector\n IFdcVerification fdc = ContractRegistry.getFdcVerification();\n console.log(\"transaction: %s\\n\", FdcStrings.toJsonString(transaction));\n // return true;\n return fdc.verifyAddressValidity(transaction);\n }\n\n function registerAddress(\n string calldata _addressStr,\n IAddressValidity.Proof calldata _transaction\n ) external {\n // 1. FDC Logic\n // Check that this AddressValidity has indeed been confirmed by the FDC\n require(\n isAddressValidityProofValid(_transaction),\n \"Invalid transaction proof\"\n );\n\n // 2. Business logic\n string provedAddress = _transaction.data.requestBody.addressStr;\n require(\n Strings.equal(provedAddress, _addressStr),\n string.concat(\n \"Invalid address.\\n\\tProvided: \",\n _addressStr,\n \"\\n\\tProoved: \",\n provedAddress\n )\n );\n verifiedAddresses.push(provedAddress);\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying EVM Transaction Proofs Using FdcVerification Contract\nDESCRIPTION: Demonstrates how to broadcast a transaction that verifies an EVM transaction proof against the on-chain Merkle root using the FdcVerification contract.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_19\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\nvm.startBroadcast(deployerPrivateKey);\n\nbool isValid = ContractRegistry\n .getFdcVerification()\n .verifyEVMTransaction(proof);\nconsole.log(\"proof is valid: %s\\n\", StringsBase.toString(isValid));\n\nvm.stopBroadcast();\n```\n\n----------------------------------------\n\nTITLE: Submitting an FDC Proof for Verification using TypeScript\nDESCRIPTION: A placeholder for a TypeScript code example (`verify_proof.ts`) demonstrating how to interact with a deployed smart contract (like `FDCTransferEventListener.sol`). This script would retrieve a proof from the DA Layer API and submit it to the contract's verification function.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/2-getting-started.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<CodeBlock language=\"typescript\" title=\"verify_proof.ts\">\n  {VerifyProof}\n</CodeBlock>\n```\n\n----------------------------------------\n\nTITLE: Monitoring and Enforcing Locked Address Compliance with Flare FDC - Solidity\nDESCRIPTION: This Solidity contract, LockMonitor, leverages Flare's FDC ecosystem to track and enforce the lock status of external addresses, particularly for use cases such as enforcing cross-chain collateral agreements. It imports interfaces from Flare's smart contracts, maintains a registry of locked addresses, and offers functions to initiate attestation requests and verify proofs for potential violations. Dependencies include the Flare FDC contracts and a running Flare network; key parameters are addresses to be locked, transaction identifiers, and proof structures. Registering addresses, checking possible violations (by submitting encoded attestation requests and associated payment), and verifying attestation proofs are key implementation areas. The contract expects encoded data and cross-chain proof inputs, and is designed to clear addresses from its locked registry only upon proven violations.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IBalanceDecreasingTransaction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/IFdcHub.sol\";\nimport \"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/IFdcVerification.sol\";\nimport \"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/fdc/IBalanceDecreasingTransaction.sol\";\n\ncontract LockMonitor {\n    IFdcHub private fdcHub;\n    IFdcVerification private fdcVerification;\n\n    bytes32 private constant ATTESTATION_TYPE_BALANCE_DECREASING = 0x0200000000000000000000000000000000000000000000000000000000000000;\n    bytes32 private constant SOURCE_ID_BTC = 0x4254430000000000000000000000000000000000000000000000000000000000;\n\n    mapping(bytes32 => bool) public lockedAddresses; // sourceAddressHash => isLocked\n\n    constructor(address _fdcHubAddress, address _fdcVerificationAddress) {\n        fdcHub = IFdcHub(_fdcHubAddress);\n        fdcVerification = IFdcVerification(_fdcVerificationAddress);\n    }\n\n    // Register an address as locked (should not spend funds)\n    function registerLockedAddress(bytes32 sourceAddressHash) external {\n        lockedAddresses[sourceAddressHash] = true;\n    }\n\n    // Request verification of a transaction that might violate lock agreement\n    function checkViolation(bytes32 transactionId, bytes32 sourceAddressIndicator) external payable {\n        // Create request body\n        IBalanceDecreasingTransaction.RequestBody memory requestBody = IBalanceDecreasingTransaction.RequestBody({\n            transactionId: transactionId,\n            sourceAddressIndicator: sourceAddressIndicator\n        });\n\n        // Encode the full request\n        bytes memory encodedRequest = abi.encode(\n            ATTESTATION_TYPE_BALANCE_DECREASING,\n            SOURCE_ID_BTC,\n            bytes32(0), // messageIntegrityCode (would need to be calculated properly)\n            requestBody\n        );\n\n        // Submit the request with payment\n        fdcHub.requestAttestation{value: msg.value}(encodedRequest);\n    }\n\n    // Verify a provided proof and take action if a locked address has spent funds\n    function verifyViolation(IBalanceDecreasingTransaction.Proof calldata _proof)\n        external\n        returns (bool isViolation)\n    {\n        // Verify the proof using FdcVerification\n        bool proofVerified = fdcVerification.verifyBalanceDecreasingTransaction(_proof);\n\n        if (proofVerified) {\n            // Extract the sourceAddressHash\n            bytes32 sourceAddressHash = _proof.data.responseBody.sourceAddressHash;\n            int256 spentAmount = _proof.data.responseBody.spentAmount;\n\n            // Check if this is a locked address and the amount spent is positive\n            if (lockedAddresses[sourceAddressHash] && spentAmount > 0) {\n                // Take action - e.g., liquidate collateral, notify stakeholders, etc.\n                lockedAddresses[sourceAddressHash] = false; // Remove from locked addresses\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing TransferEventListener Contract in Solidity\nDESCRIPTION: A Solidity contract that verifies Ethereum transaction proofs using FDC and extracts USDC token transfer events. The contract stores these events in an array and provides functions to access them.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/evm-transaction.mdx#2025-04-22_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\ncontract TransferEventListener is ITransferEventListener {\n    TokenTransfer[] public tokenTransfers;\n    address public USDC_CONTRACT = 0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238; // USDC contract address on sepolia\n\n    function isEVMTransactionProofValid(\n        IEVMTransaction.Proof calldata transaction\n    ) public view returns (bool) {\n        // Use the library to get the verifier contract and verify that this transaction was proved by state connector\n        IFdcVerification fdc = ContractRegistry.getFdcVerification();\n        console.log(\"transaction: %s\\n\", FdcStrings.toJsonString(transaction));\n        return true;\n        //return fdc.verifyEVMTransaction(transaction);\n    }\n\n    function collectTransferEvents(\n        IEVMTransaction.Proof calldata _transaction\n    ) external {\n        // 1. FDC Logic\n        // Check that this EVMTransaction has indeed been confirmed by the FDC\n        require(\n            isEVMTransactionProofValid(_transaction),\n            \"Invalid transaction proof\"\n        );\n\n        // 2. Business logic\n        // Go through all events\n        for (\n            uint256 i = 0;\n            i < _transaction.data.responseBody.events.length;\n            i++\n        ) {\n            // Get current event\n            IEVMTransaction.Event memory _event = _transaction\n                .data\n                .responseBody\n                .events[i];\n\n            // Disregard events that are not from the USDC contract\n            if (_event.emitterAddress != USDC_CONTRACT) {\n                continue;\n            }\n\n            // Disregard non Transfer events\n            if (\n                _event.topics.length == 0 || // No topics\n                // The topic0 doesn't match the Transfer event\n                _event.topics[0] !=\n                keccak256(abi.encodePacked(\"Transfer(address,address,uint256)\"))\n            ) {\n                continue;\n            }\n\n            // We now know that this is a Transfer event from the USDC contract - and therefore know how to decode topics and data\n            // Topic 1 is the sender\n            address sender = address(uint160(uint256(_event.topics[1])));\n            // Topic 2 is the receiver\n            address receiver = address(uint160(uint256(_event.topics[2])));\n            // Data is the amount\n            uint256 value = abi.decode(_event.data, (uint256));\n\n            // Add the transfer to the list\n            tokenTransfers.push(\n                TokenTransfer({from: sender, to: receiver, value: value})\n            );\n        }\n    }\n\n    function getTokenTransfers()\n        external\n        view\n        returns (TokenTransfer[] memory)\n    {\n        TokenTransfer[] memory result = new TokenTransfer[](\n            tokenTransfers.length\n        );\n        for (uint256 i = 0; i < tokenTransfers.length; i++) {\n            result[i] = tokenTransfers[i];\n        }\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting POST Request to Verifier - Solidity Foundry\nDESCRIPTION: This snippet shows how to perform an HTTP POST request to a verifier server using the `Surl` package in a Foundry script. It calls the `post` method on a URL with specified headers and body, returning the raw response data for further parsing. Requires the Surl Solidity library, imported and attached using `using Surl for *;`. Inputs include a prepared URL, headers, and the request body.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/address-validity.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n(\n, bytes memory data) = url.post(headers, body);\n\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Attestation Response Structure in Solidity\nDESCRIPTION: Defines the data structure returned upon a successful payment attestation. It provides details about the verified transaction, including block number and timestamp, standardized hashes for source and receiving addresses, amounts spent and received (and intended amounts if the transaction failed), the standard payment reference, whether it was a one-to-one transaction, and the final transaction status. Specific fields like `receivingAddressHash` and `intendedReceivingAddressHash` depend on the transaction's success status.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/attestation-types/payment.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Solidity\nCODE:\n```\n// Response structure for Payment Attestation\n// Field                          | Solidity Type | Description\n// ------------------------------ | ------------- | ------------------------------------------------------------------------------------------------------------------------------\n// `blockNumber`                  | `uint64`      | The block number in which the transaction is included.\n// `blockTimestamp`               | `uint64`      | The timestamp of the block containing the transaction.\n// `sourceAddressHash`            | `bytes32`     | Standardized address hash of the source address.\n// `sourceAddressesRoot`          | `bytes32`     | The root of the Merkle tree of the source addresses.\n// `receivingAddressHash`         | `bytes32`     | Standardized address hash of the receiving address. Returns zero if status is not successful.\n// `intendedReceivingAddressHash` | `bytes32`     | Standardized address hash of the intended receiving address if the transaction failed.\n// `spentAmount`                  | `int256`      | Amount (in minimal units) spent by the source address.\n// `intendedSpentAmount`          | `int256`      | Intended amount (in minimal units) to be spent if the transaction status is unsuccessful.\n// `receivedAmount`               | `int256`      | Amount (in minimal units) received by the receiving address.\n// `intendedReceivedAmount`       | `int256`      | Intended amount (in minimal units) to be received if the transaction failed.\n// `standardPaymentReference`     | `bytes32`     | Standard payment reference (defaults to zero if none).\n// `oneToOne`                     | `bool`        | Indicates if the transaction involves only one source and one receiver.\n// `status`                       | `uint8`       | Transaction success status.\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Feeds by Id - Solidity\nDESCRIPTION: Illustrates batched retrieval of multiple feed data from FTSOv2 using getFeedsById. Accepts an array of bytes21 feed IDs and returns arrays of values and decimals for each feed, along with a common timestamp. Useful when querying several feeds at once, with fees potentially required. Caller must handle the returned array lengths and mapping.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/FtsoV2Interface.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getFeedsById(\n    bytes21[] _feedIds\n) external payable returns (\n    uint256[] _values,\n    int8[] _decimals,\n    uint64 _timestamp\n);\n```\n\n----------------------------------------\n\nTITLE: Making Volatility Incentive Offer using alloy-rs (Rust)\nDESCRIPTION: This Rust example utilizes the alloy, tokio, and eyre crates to interact asynchronously with Flare's incentive manager contract, submitting a volatility incentive offer. Before running, users must add dependencies via Cargo and acquire the contract ABI. Required inputs are the contract address, endpoint URL, and private key or signer credentials. Outputs include transaction status; this code should be run in a Rust async environment and is subject to network and key management constraints.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/make-volatility-incentive.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n{VolIncentiveRust}\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to ABI-Compatible UTF8 Hex with TypeScript\nDESCRIPTION: This helper function prefixes the output of `toHex` with '0x', resulting in a properly ABI-compatible UTF8 hex string. It depends on the `toHex` function described above. Input is a string and output is an '0x'-prefixed, 32-byte zero-padded hexadecimal encoding. It is used throughout the request-preparation process to ensure correct ABI field formatting.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/json-api.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toUtf8HexString(data: string) {\n  return \"0x\" + toHex(data);\n}\n```\n\n----------------------------------------\n\nTITLE: JsonApi Request Structure in Solidity\nDESCRIPTION: Defines the structure of request fields for making JSON API calls, including URL, JQ transformation filter, and ABI signature specification.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/attestation-types/json-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstruct JsonApiRequest {\n    string url;           // URL of the JSON API endpoint to query\n    string postprocessJq;  // JQ filter expression to transform the retrieved JSON data\n    string abi_signature; // ABI signature defining the struct format for encoding\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Attestation Request to FDC Hub in Solidity\nDESCRIPTION: Defines an internal function `submitAttestationRequest` that orchestrates the submission of an attestation request to the FDC protocol. It retrieves the deployer's private key from environment variables, gets the required fee from `FdcRequestFeeConfigurations`, finds the `FdcHub` contract address via `ContractRegistry`, and then broadcasts a transaction calling `FdcHub.requestAttestation`, sending the `abiEncodedRequest` along with the calculated fee (`msg.value`). Uses Foundry `vm` cheatcodes for environment variables and transaction broadcasting.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\n```solidity title=\"scrip/fdcExample/Base.s.sol\"\nfunction submitAttestationRequest(\n AttestationResponse memory response\n) internal {\n uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n vm.startBroadcast(deployerPrivateKey);\n IFdcRequestFeeConfigurations fdcRequestFeeConfigurations = ContractRegistry\n .getFdcRequestFeeConfigurations();\n uint256 requestFee = fdcRequestFeeConfigurations.getRequestFee(\n response.abiEncodedRequest\n );\n console.log(\"request fee: %s\\n\", requestFee);\n vm.stopBroadcast();\n\n vm.startBroadcast(deployerPrivateKey);\n\n IFdcHub fdcHub = ContractRegistry.getFdcHub();\n console.log(\"fcdHub address:\");\n console.log(address(fdcHub));\n console.log(\"\\n\");\n fdcHub.requestAttestation{value: requestFee}(response.abiEncodedRequest);\n vm.stopBroadcast();\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Depositing Native Tokens in IWNat Solidity Interface\nDESCRIPTION: Allows depositing native tokens and minting equivalent WNat ERC20 tokens to the sender's address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deposit(\n) external payable;\n```\n\n----------------------------------------\n\nTITLE: Requesting and Verifying Block Confirmations with FdcHub in Solidity\nDESCRIPTION: This Solidity snippet defines a smart contract, BlockchainMonitor, that demonstrates how to request a confirmed block height attestation from the FdcHub and then verify the proof using FdcVerification. Dependencies include the IFdcHub, IFdcVerification, and IConfirmedBlockHeightExists interfaces from the Flare Foundation smart contracts. The requestBlockConfirmation function constructs and encodes the request, submitting it (with payment) through FdcHub, while verifyBlockAndCalculateRate checks the proof's validity and calculates the average block time. Functions expect addresses to initialized contract interfaces, take block and window parameters as inputs, and return a boolean and block time as outputs. Correct calculation of messageIntegrityCode is left as a placeholder. Compatible with Solidity ^0.8.0.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IConfirmedBlockHeightExists.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/IFdcHub.sol\\\";\\nimport \\\"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/IFdcVerification.sol\\\";\\nimport \\\"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/fdc/IConfirmedBlockHeightExists.sol\\\";\\n\\ncontract BlockchainMonitor {\\n    IFdcHub private fdcHub;\\n    IFdcVerification private fdcVerification;\\n\\n    bytes32 private constant ATTESTATION_TYPE_CONFIRMED_BLOCK = 0x0200000000000000000000000000000000000000000000000000000000000000;\\n    bytes32 private constant SOURCE_ID_BTC = 0x4254430000000000000000000000000000000000000000000000000000000000;\\n\\n    constructor(address _fdcHubAddress, address _fdcVerificationAddress) {\\n        fdcHub = IFdcHub(_fdcHubAddress);\\n        fdcVerification = IFdcVerification(_fdcVerificationAddress);\\n    }\\n\\n    // Request confirmation of a block\\n    function requestBlockConfirmation(uint64 blockNumber, uint64 queryWindow) external payable {\\n        // Create request body\\n        IConfirmedBlockHeightExists.RequestBody memory requestBody = IConfirmedBlockHeightExists.RequestBody({\\n            blockNumber: blockNumber,\\n            queryWindow: queryWindow\\n        });\\n\\n        // Encode the full request\\n        bytes memory encodedRequest = abi.encode(\\n            ATTESTATION_TYPE_CONFIRMED_BLOCK,\\n            SOURCE_ID_BTC,\\n            bytes32(0), // messageIntegrityCode (would need to be calculated properly)\\n            requestBody\\n        );\\n\\n        // Submit the request with payment\\n        fdcHub.requestAttestation{value: msg.value}(encodedRequest);\\n    }\\n\\n    // Verify a provided proof and calculate block rate\\n    function verifyBlockAndCalculateRate(IConfirmedBlockHeightExists.Proof calldata _proof)\\n        external view\\n        returns (\\n            bool blockConfirmed,\\n            uint64 avgBlockTimeSeconds\\n        )\\n    {\\n        // Verify the proof using FdcVerification\\n        bool proofVerified = fdcVerification.verifyConfirmedBlockHeightExists(_proof);\\n\\n        if (proofVerified) {\\n            // Extract data for calculation\\n            uint64 blockNumber = _proof.data.requestBody.blockNumber;\\n            uint64 blockTimestamp = _proof.data.responseBody.blockTimestamp;\\n            uint64 lowestNumber = _proof.data.responseBody.lowestQueryWindowBlockNumber;\\n            uint64 lowestTimestamp = _proof.data.responseBody.lowestQueryWindowBlockTimestamp;\\n\\n            // Calculate average block time\\n            uint64 blocksProduced = blockNumber - lowestNumber;\\n            uint64 timeElapsed = blockTimestamp - lowestTimestamp;\\n\\n            if (blocksProduced > 0) {\\n                avgBlockTimeSeconds = timeElapsed / blocksProduced;\\n            }\\n\\n            return (true, avgBlockTimeSeconds);\\n        }\\n\\n        return (false, 0);\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Fetching and Verifying Flare Anchor Feed Data Onchain in Rust\nDESCRIPTION: Demonstrates how to fetch Flare DA Layer feed values and Merkle proofs in Rust, then interact with a Flare smart contract to verify the data onchain. Depends on crates such as reqwest for HTTP, serde/serde_json for parsing, and ethers-rs or similar for blockchain interaction. The example encapsulates both DA Layer integration and contract function invocation in a strongly-typed Rust environment.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/2-getting-started.mdx#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n{FetchAndVerifyAnchorOnchainRs}\n```\n\n----------------------------------------\n\nTITLE: Deploying a Smart Contract on Flare Testnet Coston2 with web3.js - JavaScript\nDESCRIPTION: This code deploys a compiled smart contract to the Flare Coston2 testnet using web3.js. It loads the ABI and bytecode, creates a contract deployment transaction from an account, and sends it to the network. Requires the ABI, bytecode, funded account, and correct testnet RPC endpoint. Outputs the deployed contract address upon success.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-javascript-developers.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/* Code for DeployContractCoston2 loaded from external file - not shown here */\n```\n\n----------------------------------------\n\nTITLE: Defining EVMTransaction Response Structure in Solidity\nDESCRIPTION: This snippet defines the structure of an EVMTransaction response, including transaction details such as block number, timestamp, addresses involved, value, input data, status, and associated events.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/attestation-types/evm-transaction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstruct EVMTransactionResponse {\n    uint64 blockNumber;\n    uint64 timestamp;\n    address sourceAddress;\n    bool isDeployment;\n    address receivingAddress;\n    uint256 value;\n    bytes input;\n    uint8 status;\n    Event[] events;\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with PaymentRegistry Contract in TypeScript\nDESCRIPTION: This function demonstrates how to interact with the deployed PaymentRegistry contract. It decodes the proof, constructs an IPayment.Proof object, and calls the registerPayment function on the contract.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nasync function interactWithContract(\n  paymentRegistry: PaymentRegistryInstance,\n  proof: any,\n) {\n  console.log(\"Proof hex:\", proof.response_hex, \"\\n\");\n\n  // A piece of black magic that allows us to read the response type from an artifact\n  const IPaymentVerification = await artifacts.require(\"IPaymentVerification\");\n  const responseType =\n    IPaymentVerification._json.abi[0].inputs[0].components[1];\n  console.log(\"Response type:\", responseType, \"\\n\");\n\n  const decodedResponse = web3.eth.abi.decodeParameter(\n    responseType,\n    proof.response_hex,\n  );\n  console.log(\"Decoded proof:\", decodedResponse, \"\\n\");\n  const transaction = await paymentRegistry.registerPayment({\n    merkleProof: proof.proof,\n    data: decodedResponse,\n  });\n  console.log(\"Transaction:\", transaction.tx, \"\\n\");\n  console.log(\n    \"Verified payment:\",\n    await paymentRegistry.verifiedPayments(0),\n    \"\\n\",\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with the Contract using TypeScript\nDESCRIPTION: A TypeScript function that interacts with the deployed TransferEventListener contract. It decodes the proof data, submits it to the contract for verification, and retrieves processed token transfer events.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/evm-transaction.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nasync function interactWithContract(\n  eventListener: TransferEventListenerInstance,\n  proof: any,\n) {\n  console.log(\"Proof hex:\", proof.response_hex, \"\\n\");\n\n  // A piece of black magic that allows us to read the response type from an artifact\n  const IEVMTransactionVerification = await artifacts.require(\n    \"IEVMTransactionVerification\",\n  );\n  const responseType =\n    IEVMTransactionVerification._json.abi[0].inputs[0].components[1];\n  console.log(\"Response type:\", responseType, \"\\n\");\n\n  const decodedResponse = web3.eth.abi.decodeParameter(\n    responseType,\n    proof.response_hex,\n  );\n  console.log(\"Decoded proof:\", decodedResponse, \"\\n\");\n  const transaction = await eventListener.collectTransferEvents({\n    merkleProof: proof.proof,\n    data: decodedResponse,\n  });\n  console.log(\"Transaction:\", transaction.tx, \"\\n\");\n  console.log(\"Token transfer:\", await eventListener.tokenTransfers(0), \"\\n\");\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Attestation Requests in TypeScript\nDESCRIPTION: Defines a function to prepare attestation requests for different sources. It uses helper functions from the flare-hardhat-starter repository to process JSON API and transaction-based requests, storing the results in a Map.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nasync function prepareAttestationRequests(transactions: AttestationRequest[]) {\n  console.log(\"\\nPreparing data...\\n\");\n  var data: Map<string, string> = new Map();\n\n  for (const transaction of transactions) {\n    console.log(`(${transaction.source})\\n`);\n\n    if (transaction.source === \"jsonApi\") {\n      const responseData = await prepareJsonApiAttestationRequest(transaction);\n      console.log(\"Data:\", responseData, \"\\n\");\n      data.set(transaction.source, responseData.abiEncodedRequest);\n    } else {\n      const responseData = await prepareTransactionAttestationRequest(\n        transaction\n      );\n      console.log(\"Data:\", responseData, \"\\n\");\n      data.set(transaction.source, responseData.abiEncodedRequest);\n    }\n  }\n\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ReferencedPaymentNonexistence Interface in Solidity\nDESCRIPTION: This Solidity interface defines the ReferencedPaymentNonexistence attestation type (ID 0x04), which verifies that an agreed-upon payment has not been made by a certain deadline. It supports BTC, DOGE, XRP, and their test versions. The interface includes request, response, and proof structures along with detailed verification rules for UTXO and XRPL blockchains.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/verify-payment-nonexistence.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name ReferencedPaymentNonexistence\n * @custom:id 0x04\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\n * @author Flare\n * @notice Assertion that an agreed-upon payment has not been made by a certain deadline.\n * A confirmed request shows that a transaction meeting certain criteria (address, amount, reference) did not appear in the specified block range.\n *\n *\n * This type of attestation can be used to e.g. provide grounds to liquidate funds locked by a smart contract on Flare when a payment is missed.\n *\n * @custom:verification If `firstOverflowBlock` cannot be determined or does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\n * If `firstOverflowBlockNumber` is higher or equal to `minimalBlockNumber`, the request is rejected.\n * The search range are blocks between heights including `minimalBlockNumber` and excluding `firstOverflowBlockNumber`.\n * If the verifier does not have a view of all blocks from `minimalBlockNumber` to `firstOverflowBlockNumber`, the attestation request is rejected.\n *\n * The request is confirmed if no transaction meeting the specified criteria is found in the search range.\n * The criteria and timestamp are chain specific.\n * ### UTXO (Bitcoin and Dogecoin)\n *\n *\n * Criteria for the transaction:\n *\n *\n * - It is not coinbase transaction.\n * - The transaction has the specified [standardPaymentReference](/specs/attestations/external-chains/standardPaymentReference.md#btc-and-doge-blockchains).\n * - The sum of values of all outputs with the specified address minus the sum of values of all inputs with the specified address is greater than `amount` (in practice the sum of all values of the inputs with the specified address is zero).\n *\n *\n * Timestamp is `mediantime`.\n\n * ### XRPL\n *\n *\n *\n * Criteria for the transaction:\n * - The transaction is of type payment.\n * - The transaction has the specified [standardPaymentReference](/specs/attestations/external-chains/standardPaymentReference.md#xrp),\n * - One of the following is true:\n *   - Transaction status is `SUCCESS` and the amount received by the specified destination address is greater than the specified `value`.\n *   - Transaction status is `RECEIVER_FAILURE` and the specified destination address would receive an amount greater than the specified `value` had the transaction been successful.\n *\n *\n * Timestamp is `close_time` converted to UNIX time.\n *\n * @custom:lut `minimalBlockTimestamp`\n */\ninterface ReferencedPaymentNonexistence {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response as defined.\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the Data Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for ReferencePaymentNonexistence attestation type\n     * @param minimalBlockNumber The start block of the search range.\n     * @param deadlineBlockNumber The blockNumber to be included in the search range.\n     * @param deadlineTimestamp The timestamp to be included in the search range.\n     * @param destinationAddressHash The standard address hash of the address to which the payment had to be done.\n     * @param amount The requested amount in minimal units that had to be paid.\n     * @param standardPaymentReference The requested standard payment reference.\n     * @custom:below The `standardPaymentReference` should not be zero (as a 32-byte sequence).\n     */\n    struct RequestBody {\n        uint64 minimalBlockNumber;\n        uint64 deadlineBlockNumber;\n        uint64 deadlineTimestamp;\n        bytes32 destinationAddressHash;\n        uint256 amount;\n        bytes32 standardPaymentReference;\n    }\n\n    /**\n     * @notice Response body for ReferencePaymentNonexistence attestation type.\n     * @param minimalBlockTimestamp The timestamp of the minimalBlock.\n     * @param firstOverflowBlockNumber The height of the firstOverflowBlock.\n     * @param firstOverflowBlockTimestamp The timestamp of the firstOverflowBlock.\n     * @custom:below `firstOverflowBlock` is the first block that has block number higher than `deadlineBlockNumber` and timestamp later than `deadlineTimestamp`.\n     * The specified search range are blocks between heights including `minimalBlockNumber` and excluding `firstOverflowBlockNumber`.\n     */\n    struct ResponseBody {\n        uint64 minimalBlockTimestamp;\n        uint64 firstOverflowBlockNumber;\n        uint64 firstOverflowBlockTimestamp;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Attestation in Solidity\nDESCRIPTION: Payable function to request an attestation from the Flare Data Connector. Requires a fee based on the attestation type and accepts ABI encoded attestation request data.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IFdcHub.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction requestAttestation(\n    bytes _data\n) external payable;\n```\n\n----------------------------------------\n\nTITLE: Claiming Rewards for User (claim) - Solidity Interface\nDESCRIPTION: Specifies the 'claim' function signature, supporting direct reward claims and transfer to a specified recipient. Requires addresses for owner and recipient, reward epoch id, wrap option, and proof array. Returns total amount claimed in wei. Interfaces with RewardsV2Interface dependencies, expects merkle proofs, and supports optional wrapping via WNat contract.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRewardManager.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction claim(\n    address _rewardOwner,\n    address payable _recipient,\n    uint24 _rewardEpochId,\n    bool _wrap,\n    struct RewardsV2Interface.RewardClaimWithProof[] _proofs\n) external returns (\n    uint256 _rewardAmountWei\n);\n```\n\n----------------------------------------\n\nTITLE: Claiming Rewards in Solidity\nDESCRIPTION: Function for claiming rewards on behalf of a reward owner and transferring them to a recipient. Supports wrapped rewards and requires proof validation.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/RewardsV2Interface.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction claim(\n    address _rewardOwner,\n    address payable _recipient,\n    uint24 _rewardEpochId,\n    bool _wrap,\n    struct RewardsV2Interface.RewardClaimWithProof[] _proofs\n) external returns (\n    uint256 _rewardAmountWei\n);\n```\n\n----------------------------------------\n\nTITLE: Expiring Weather Insurance Policy in Solidity\nDESCRIPTION: This function expires an open policy if the current timestamp is past the expiration date. It marks the policy as settled, transfers the coverage to the insurer, and emits a PolicyExpired event.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/weather-insurance.mdx#2025-04-22_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction expirePolicy(uint256 id) public {\n    Policy memory policy = registeredPolicies[id];\n    require(policy.status == PolicyStatus.Open, \"Policy not open\");\n    require(block.timestamp > policy.expirationTimestamp, \"Policy not yet expired\");\n    policy.status = PolicyStatus.Settled;\n    registeredPolicies[id] = policy;\n    payable(insurers[id]).transfer(policy.coverage);\n    emit PolicyExpired(id);\n}\n```\n\n----------------------------------------\n\nTITLE: Address Validator Implementation Example in Solidity\nDESCRIPTION: Complete example showing how to implement an address validator contract using the IFdcHub interface. Demonstrates address validation request creation and submission.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IFdcHub.md#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/IFdcHub.sol\";\nimport \"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/fdc/IAddressValidity.sol\";\n\ncontract AddressValidator {\n    IFdcHub private fdcHub;\n\n    constructor(address _fdcHubAddress) {\n        fdcHub = IFdcHub(_fdcHubAddress);\n    }\n\n    function validateAddress(string memory addressStr, bytes32 sourceId) external payable {\n        // Create address validity request\n        IAddressValidity.RequestBody memory requestBody = IAddressValidity.RequestBody({\n            addressStr: addressStr\n        });\n\n        // Encode the full request\n        bytes memory encodedRequest = abi.encode(\n            bytes32(0x05), // attestationType for AddressValidity\n            sourceId,\n            bytes32(0), // messageIntegrityCode - should be calculated properly\n            requestBody\n        );\n\n        // Submit the request with appropriate fee\n        fdcHub.requestAttestation{value: msg.value}(encodedRequest);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Address Registry Contract in Solidity\nDESCRIPTION: This snippet shows a Solidity script for deploying the AddressRegistry contract. It uses the Forge scripting system to deploy the contract and save its address to a file.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/address-validity.mdx#2025-04-22_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\ncontract DeployContract is Script {\n    function run() external {\n        uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n        vm.startBroadcast(deployerPrivateKey);\n\n        AddressRegistry addressRegistry = new AddressRegistry();\n        address _address = address(addressRegistry);\n\n        vm.stopBroadcast();\n\n        Base.writeToFile(\n            dirPath,\n            string.concat(attestationTypeName, \"_address\"),\n            StringsBase.toHexString(abi.encodePacked(_address)),\n            true\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Hardhat Tests with yarn - Bash\nDESCRIPTION: Executes all smart contract tests using Hardhat managed by yarn. Assumes test files exist in the test directory. Outputs test results to the CLI, useful for CI/CD or manual validation workflows. No parameters are required.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/hardhat-foundry-starter-kit.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn hardhat test\n```\n\n----------------------------------------\n\nTITLE: Formatting EVM Transaction Proof Data in Solidity\nDESCRIPTION: Creates an IEVMTransaction.Proof struct containing Merkle proofs and response data needed for verification.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\nIEVMTransaction.Proof memory _proof = IEVMTransaction.Proof(\n proof.proofs,\n proofResponse\n);\n```\n\n----------------------------------------\n\nTITLE: JsonApi Response Structure in Solidity\nDESCRIPTION: Defines the response structure containing ABI-encoded data after JSON retrieval and transformation.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/attestation-types/json-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstruct JsonApiResponse {\n    bytes abi_encoded_data; // ABI-encoded data result after JQ transformation\n}\n```\n\n----------------------------------------\n\nTITLE: Making a Contract Query on Flare Testnet (Coston2) - Python\nDESCRIPTION: This Python snippet shows how to perform a query on the FlareContractRegistry contract on Coston2 using web3.py and a fetched contract ABI. It demonstrates looking up another contract's address by name. Requires previous ABI retrieval and a valid web3.py setup.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-python-developers.mdx#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n{MakeQueryCoston2}\n```\n\n----------------------------------------\n\nTITLE: Submitting Attestation Request in TypeScript\nDESCRIPTION: Shows how to submit an attestation request to the FDC smart contract and calculate the roundId using TypeScript and ethers.js.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/2-getting-started.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ethers } from 'ethers';\n\n// FDC contract address and ABI\nconst FDC_ADDRESS = '0x1000000000000000000000000000000000000001';\nconst FDC_ABI = ['function requestAttestation(bytes calldata _data) external'];\n\n// Connect to the network and contract\nconst provider = new ethers.providers.JsonRpcProvider('https://flare-api.flare.network/ext/C/rpc');\nconst signer = new ethers.Wallet('YOUR_PRIVATE_KEY', provider);\nconst fdcContract = new ethers.Contract(FDC_ADDRESS, FDC_ABI, signer);\n\n// Submit the attestation request\nasync function submitRequest(encodedRequest: string) {\n  const tx = await fdcContract.requestAttestation(encodedRequest);\n  const receipt = await tx.wait();\n  console.log('Attestation request submitted. Transaction hash:', receipt.transactionHash);\n\n  // Calculate the roundId\n  const blockNumber = receipt.blockNumber;\n  const roundId = Math.floor(blockNumber / 100) * 100;\n  console.log('Calculated roundId:', roundId);\n\n  return roundId;\n}\n\n// Usage\nconst encodedRequest = '0x...';\nsubmitRequest(encodedRequest);\n\n```\n\n----------------------------------------\n\nTITLE: Setting Autoclaiming in Solidity\nDESCRIPTION: Sets up executors for automated claiming and optionally enables a delegation account. A fee must be paid when setting registered executors.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setAutoClaiming(\n    address[] _executors,\n    bool _enableDelegationAccount\n) external payable;\n```\n\n----------------------------------------\n\nTITLE: Creating a New Flare Account with web3.js - JavaScript\nDESCRIPTION: This snippet generates a new Flare-compatible account using web3.js. It generates a new private key and account address, then outputs the pair. Ensure that private keys are never committed to code or shared. Requires web3.js installed; output can be stored in environment variables if needed. For real usage, fund the new account accordingly.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-javascript-developers.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/* Code for CreateAccount loaded from external file - not shown here */\n```\n\n----------------------------------------\n\nTITLE: Fetching and Verifying Flare Anchor Feed Data Onchain in JavaScript\nDESCRIPTION: Explains how to fetch pricing data and Merkle proofs using the Flare DA Layer API, then verify them onchain by interacting with a Flare smart contract in JavaScript. Dependencies include libraries for HTTP requests and web3/Ethereum interactions (e.g., ethers.js or web3.js). The code demonstrates constructing a transaction for submitting feed data and proofs, ensuring end-to-end integrity for dApps. Input consists of feed IDs; output is the contract call result or receipt.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/2-getting-started.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{FetchAndVerifyAnchorOnchainJs}\n```\n\n----------------------------------------\n\nTITLE: Creating a Signature for Sortition Key Registration\nDESCRIPTION: This command generates a signature using the sortition key's private key and an identity address, which is required when registering the sortition key via the EntityManager contract.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm ghcr.io/flare-foundation/fast-updates/go-client:latest keygen --key <sortitionKeyPrivateKey> --address <identityAddress>\n```\n\n----------------------------------------\n\nTITLE: Main EVM Transaction Script Implementation\nDESCRIPTION: Main script file that orchestrates the EVM transaction data collection process, including preparing requests, submitting attestations, and contract interaction.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/evm-transaction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { run, web3 } from \"hardhat\";\nimport { TransferEventListenerInstance } from \"../../typechain-types\";\nimport {\n  prepareAttestationRequestBase,\n  submitAttestationRequest,\n  retrieveDataAndProofBase,\n} from \"./Base\";\n\nconst EVMTransaction = artifacts.require(\"TransferEventListener\");\n\nconst { VERIFIER_URL_TESTNET, VERIFIER_API_KEY_TESTNET, COSTON2_DA_LAYER_URL } =\n  process.env;\n\n...\n\nasync function main() {\n  const data = await prepareAttestationRequest(transactionHash);\n  console.log(\"Data:\", data, \"\\n\");\n\n  const abiEncodedRequest = data.abiEncodedRequest;\n  const roundId = await submitAttestationRequest(abiEncodedRequest);\n\n  const proof = await retrieveDataAndProof(abiEncodedRequest, roundId);\n\n  const eventListener: TransferEventListenerInstance =\n    await deployAndVerifyContract();\n\n  await interactWithContract(eventListener, proof);\n}\n\nmain().then((data) => {\n  process.exit(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Submitting Data and Proofs to Proof of Reserves Contract in TypeScript\nDESCRIPTION: Defines a function to interact with the Proof of Reserves smart contract. It updates registered addresses, prepares the data and proofs, and submits them to the contract for verification of stablecoin reserves.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nasync function submitDataAndProofsToProofOfReserves(data: Map<string, any>) {\n  const proofOfReserves: ProofOfReservesInstance = await ProofOfReserves.at(\n    proofOfReservesAddress\n  );\n\n  for (const source of tokenAddresses.keys()) {\n    await proofOfReserves.updateAddress(\n      readerAddresses.get(source),\n      tokenAddresses.get(source)\n    );\n  }\n\n  const [jsonProof, transactionProofs] = await prepareDataAndProofs(data);\n\n  await proofOfReserves.verifyReserves(jsonProof, transactionProofs);\n  const sufficientReserves: boolean = true;\n  return sufficientReserves;\n}\n```\n\n----------------------------------------\n\nTITLE: Star Wars Character List Contract Implementation\nDESCRIPTION: Smart contract that manages Star Wars character data with proof verification, character addition and retrieval functionality.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/json-api.mdx#2025-04-22_snippet_20\n\nLANGUAGE: solidity\nCODE:\n```\ncontract StarWarsCharacterList {\n    mapping(uint256 => StarWarsCharacter) public characters;\n    uint256[] public characterIds;\n\n    function isJsonApiProofValid(\n        IJsonApi.Proof calldata _proof\n    ) private view returns (bool) {\n        return\n            ContractRegistry.auxiliaryGetIJsonApiVerification().verifyJsonApi(\n                _proof\n            );\n    }\n\n    function addCharacter(IJsonApi.Proof calldata data) public {\n        require(isJsonApiProofValid(data), \"Invalid proof\");\n\n        DataTransportObject memory dto = abi.decode(\n            data.data.responseBody.abi_encoded_data,\n            (DataTransportObject)\n        );\n\n        require(characters[dto.apiUid].apiUid == 0, \"Character already exists\");\n\n        StarWarsCharacter memory character = StarWarsCharacter({\n            name: dto.name,\n            numberOfMovies: dto.numberOfMovies,\n            apiUid: dto.apiUid,\n            bmi: (dto.mass * 100 * 100) / (dto.height * dto.height)\n        });\n\n        characters[dto.apiUid] = character;\n        characterIds.push(dto.apiUid);\n    }\n\n    function getAllCharacters()\n        public\n        view\n        returns (StarWarsCharacter[] memory)\n    {\n        StarWarsCharacter[] memory result = new StarWarsCharacter[](\n            characterIds.length\n        );\n        for (uint256 i = 0; i < characterIds.length; i++) {\n            result[i] = characters[characterIds[i]];\n        }\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Balance Decreasing Transaction in Solidity\nDESCRIPTION: This function verifies a proof for a balance decreasing transaction attestation. It takes an IBalanceDecreasingTransaction.Proof structure and returns a boolean indicating if the proof is valid.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IFdcVerification.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction verifyBalanceDecreasingTransaction(\n    struct IBalanceDecreasingTransaction.Proof _proof\n) external view returns (\n    bool _proved\n);\n```\n\n----------------------------------------\n\nTITLE: Verifying Feed Data Proofs - Solidity\nDESCRIPTION: Presents a view function for verifying that supplied feed data, wrapped in a FeedDataWithProof struct, is valid and confirmed within the FTSOv2 Merkle tree. No fees are required; returns a boolean indicating verification result. Inputs require the full structure with accompanying Merkle proof, and outputs true if valid.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/FtsoV2Interface.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction verifyFeedData(\n    struct FtsoV2Interface.FeedDataWithProof _feedData\n) external view returns (\n    bool\n);\n```\n\n----------------------------------------\n\nTITLE: Verifying Attestation API Responses for XRP Ledger Payments in JSON\nDESCRIPTION: This JSON block demonstrates sample attestation API responses following the submission of a payment and the subsequent existence/non-existence verification requests. It illustrates result formats for valid payment proofs, failed non-existence proofs, and valid non-existence proofs with alternate parameters. Keys detail status, attestation types, source IDs, involved block numbers/timestamps, address hashes, references, and amounts. The responses assume a running attestation verifier and serve as logged outputs expected by the code snippet. Inputs are blockchain and attestation request parameters; outputs are structured status and response objects indicating proof success or failure.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/verify-payment-nonexistence.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// See transaction at https://testnet.xrpl.org/transactions/C2B493B8AE2E3C105D004D8AFBB4AFB5CA758608504CCE895C9331291DA19D75\n// Payment:\n{\n  status: 'VALID',\n  response: {\n    attestationType: '0x5061796d656e7400000000000000000000000000000000000000000000000000',\n    sourceId: '0x7465737458525000000000000000000000000000000000000000000000000000',\n    votingRound: '0',\n    lowestUsedTimestamp: '1708830051',\n    requestBody: {\n      transactionId: '0xC2B493B8AE2E3C105D004D8AFBB4AFB5CA758608504CCE895C9331291DA19D75',\n      inUtxo: '0',\n      utxo: '0'\n    },\n    responseBody: {\n      blockNumber: '45680731',\n      blockTimestamp: '1708830051',\n      sourceAddressHash: '0xa1ca3089c3e9f4c6e9ccf2bfb65bcf3e9d7544a092c79d642d5d34a54e0267e1',\n      receivingAddressHash: '0x0555194538763da400394fc7184432e9a006565fa710392ea1a86486eb83920f',\n      intendedReceivingAddressHash: '0x0555194538763da400394fc7184432e9a006565fa710392ea1a86486eb83920f',\n      standardPaymentReference: '0x48656C6C6F20776F726C64210000000000000000000000000000000000000000',\n      spentAmount: '22',\n      intendedSpentAmount: '22',\n      receivedAmount: '10',\n      intendedReceivedAmount: '10',\n      oneToOne: true,\n      status: '0'\n    }\n  }\n}\nFailing non existence proof:\n{ status: 'INVALID' }\nSuccessful non existence proofs:\n{\n  status: 'VALID',\n  response: {\n    attestationType: '0x5265666572656e6365645061796d656e744e6f6e6578697374656e6365000000',\n    sourceId: '0x7465737458525000000000000000000000000000000000000000000000000000',\n    votingRound: '0',\n    lowestUsedTimestamp: '1708830033',\n    requestBody: {\n      minimalBlockNumber: '45680726',\n      deadlineBlockNumber: '45680732',\n      deadlineTimestamp: '1708830054',\n      destinationAddressHash: '0x0555194538763da400394fc7184432e9a006565fa710392ea1a86486eb83920f',\n      amount: '10',\n      standardPaymentReference: '0x48656C6C6F20776F726C64211111111111111111111111111111111111111111'\n    },\n    responseBody: {\n      minimalBlockTimestamp: '45680726',\n      firstOverflowBlockNumber: '45680733',\n      firstOverflowBlockTimestamp: '1708830060'\n    }\n  }\n}\n{\n  status: 'VALID',\n  response: {\n    attestationType: '0x5265666572656e6365645061796d656e744e6f6e6578697374656e6365000000',\n    sourceId: '0x7465737458525000000000000000000000000000000000000000000000000000',\n    votingRound: '0',\n    lowestUsedTimestamp: '1708830033',\n    requestBody: {\n      minimalBlockNumber: '45680726',\n      deadlineBlockNumber: '45680732',\n      deadlineTimestamp: '1708830054',\n      destinationAddressHash: '0x0555194538763da400394fc7184432e9a006565fa710392ea1a86486eb83920f',\n      amount: '11',\n      standardPaymentReference: '0x48656C6C6F20776F726C64210000000000000000000000000000000000000000'\n    },\n    responseBody: {\n      minimalBlockTimestamp: '45680726',\n      firstOverflowBlockNumber: '45680733',\n      firstOverflowBlockTimestamp: '1708830060'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Number - Flare Network - JavaScript\nDESCRIPTION: Provides a JavaScript implementation to retrieve the current block number from the Flare Mainnet using an Ethereum-compatible RPC library (such as ethers.js or web3.js). Requires an RPC endpoint for Flare Mainnet and installation of the required library. Input is implicitly the network endpoint; output is the latest block number. The code demonstrates network connectivity and basic JSON-RPC interaction.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/0-overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ethers } from \"ethers\";\n\nconst flareRpcUrl = \"<FLARE_MAINNET_RPC_URL>\";\nconst provider = new ethers.JsonRpcProvider(flareRpcUrl);\n\nasync function getBlockNumber() {\n  const blockNumber = await provider.getBlockNumber();\n  console.log(\"Flare block number:\", blockNumber);\n}\n\ngetBlockNumber();\n```\n\n----------------------------------------\n\nTITLE: Rendering FDC Contract References with React Components\nDESCRIPTION: Uses React components to create a tabbed interface showing the deployed FDC contracts across different Flare networks. The SolidityReference component displays contract details for each network: Flare Mainnet, Flare Testnet Coston2, Songbird Canary-Network, and Songbird Testnet Coston.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/5-reference.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs block>\n    <TabItem value=\"flare\" label=\"Flare Mainnet\" default>\n\n        <SolidityReference\n            network=\"FlareMainnet\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n    <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\">\n\n        <SolidityReference\n            network=\"FlareTestnetCoston2\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n    <TabItem value=\"songbird\" label=\"Songbird Canary-Network\">\n\n        <SolidityReference\n            network=\"SongbirdCanaryNetwork\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n\n    <TabItem value=\"coston\" label=\"Songbird Testnet Coston\">\n\n        <SolidityReference\n            network=\"SongbirdTestnetCoston\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Submitting Attestation Requests to FDC in TypeScript\nDESCRIPTION: Implements a function to submit prepared attestation requests to the Flare Data Contract (FDC). It calculates request fees, submits transactions, and stores the resulting round IDs for each source in a Map.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nasync function submitAttestationRequests(data: Map<string, string>) {\n  console.log(\"\\nSubmitting attestation requests...\\n\");\n\n  const fdcHub = await getFdcHub();\n  var roundIds: Map<string, number> = new Map();\n\n  for (const [source, abiEncodedRequest] of data.entries()) {\n    console.log(`(${source})\\n`);\n\n    const requestFee = await getFdcRequestFee(abiEncodedRequest);\n    const transaction = await fdcHub.requestAttestation(abiEncodedRequest, {\n      value: requestFee,\n    });\n    console.log(\"Submitted request:\", transaction.tx, \"\\n\");\n\n    const roundId = await calculateRoundId(transaction);\n    console.log(\n      `Check round progress at: https://${hre.network.name}-systems-explorer.flare.rocks/voting-epoch/${roundId}?tab=fdc\\n`\n    );\n    roundIds.set(source, roundId);\n  }\n\n  return roundIds;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching FDC Request Fee in Solidity\nDESCRIPTION: This snippet retrieves the required fee for submitting an attestation request to the FDC. It gets an instance of the `IFdcRequestFeeConfigurations` contract using `ContractRegistry` and then calls the `getRequestFee` function, passing the `abiEncodedRequest` as an argument.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\n```solidity\n        IFdcRequestFeeConfigurations fdcRequestFeeConfigurations = ContractRegistry\n            .getFdcRequestFeeConfigurations();\n        uint256 requestFee = fdcRequestFeeConfigurations.getRequestFee(\n            response.abiEncodedRequest\n        );\n\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Address Validity Attestation Request in TypeScript\nDESCRIPTION: Specific implementation for preparing an address validity attestation request, which configures the request body with the target address and constructs the appropriate verifier endpoint URL.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/address-validity.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync function prepareAttestationRequest(addressStr: string) {\n  const requestBody = {\n    addressStr: addressStr,\n  };\n\n  const url = `${verifierUrlBase}verifier/${urlTypeBase}/AddressValidity/prepareRequest`;\n  const apiKey = VERIFIER_API_KEY ?? \"\";\n\n  return await prepareAttestationRequestBase(\n    url,\n    apiKey,\n    attestationTypeBase,\n    sourceIdBase,\n    requestBody,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flare Systems Manager Contract Instance in TypeScript\nDESCRIPTION: This TypeScript function `getFlareSystemsManager` asynchronously retrieves an instance of the `FlareSystemsManager` contract. It uses the `getHelpers` function to get an instance of the `Helpers` contract, calls the `getFlareSystemsManager` view function on it to obtain the deployed contract address, and finally returns a `FlareSystemsManager` contract instance connected to that address via `FlareSystemsManager.at`.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/json-api.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getFlareSystemsManager() {\n  const helpers: HelpersInstance = await getHelpers();\n  const flareSystemsManagerAddress: string =\n    await helpers.getFlareSystemsManager();\n  return await FlareSystemsManager.at(flareSystemsManagerAddress);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Reward Offer Structure in Solidity\nDESCRIPTION: Defines the `Offer` struct within the `IFtsoRewardOffersManager` interface scope. This structure is used to encapsulate the data for a single reward offer, including the amount, target feed ID, minimum turnout required (in BIPS), primary and secondary reward band parameters (in PPM), and the address for potential claim backs. It is used as an input parameter type for the `offerRewards` function.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/solidity-reference/IFtsoRewardOffersManager.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Offer {\n  uint120 amount;\n  bytes21 feedId;\n  uint16 minRewardedTurnoutBIPS;\n  uint24 primaryBandRewardSharePPM;\n  uint24 secondaryBandWidthPPM;\n  address claimBackAddress;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IConfirmedBlockHeightExists Interface in Solidity\nDESCRIPTION: Complete interface definition for IConfirmedBlockHeightExists which allows verification of confirmed blocks on external blockchains. The interface includes structs for request, response, proof, and the specific request and response bodies needed for block height confirmation. It supports Bitcoin, Dogecoin, and XRP chains with their specific confirmation requirements.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IConfirmedBlockHeightExists.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name IConfirmedBlockHeightExists\n * @custom:id 0x02\n * @custom:supported BTC, DOGE, XRP\n * @author Flare\n * @notice An assertion that a block with `blockNumber` is confirmed.\n * It also provides data to compute the block production rate in the given time range.\n * @custom:verification It is checked that the block with `blockNumber` is confirmed by at\n * least `numberOfConfirmations`.\n * If it is not, the request is rejected. We note a block on the tip of the chain is confirmed by 1 block.\n * Then `lowestQueryWindowBlock` is determined and its number and timestamp are extracted.\n *\n *\n * Current confirmation heights consensus:\n *\n *\n * | `Chain` | `chainId` | `numberOfConfirmations` | `timestamp ` |\n * | ------- | --------- | ----------------------- | ------------ |\n * | `BTC`   | 0         | 6                       | mediantime   |\n * | `DOGE`  | 2         | 60                      | mediantime   |\n * | `XRP`   | 3         | 3                       | close_time   |\n *\n *\n * @custom:lut `lowestQueryWindowBlockTimestamp`\n * @custom:lutlimit `0x127500`, `0x127500`, `0x127500`\n */\ninterface IConfirmedBlockHeightExists {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response as defined.\n     * @param requestBody Data defining the request. Type and interpretation is determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction of the\n     * response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for ConfirmedBlockHeightExistsType attestation type\n     * @param blockNumber The number of the block the request wants a confirmation of.\n     * @param queryWindow The length of the period in which the block production rate is to be computed.\n     */\n    struct RequestBody {\n        uint64 blockNumber;\n        uint64 queryWindow;\n    }\n\n    /**\n     * @notice Response body for ConfirmedBlockHeightExistsType attestation type\n     * @custom:below `blockNumber`, `lowestQueryWindowBlockNumber`, `blockTimestamp`, `lowestQueryWindowBlockTimestamp`\n     * can be used to compute the average block production time in the specified block range.\n     * @param blockTimestamp The timestamp of the block with `blockNumber`.\n     * @param numberOfConfirmations The depth at which a block is considered confirmed depending on the chain.\n     * All attestation providers must agree on this number.\n     * @param lowestQueryWindowBlockNumber The block number of the latest block that has a timestamp strictly smaller\n     * than `blockTimestamp` - `queryWindow`.\n     * @param lowestQueryWindowBlockTimestamp The timestamp of the block at height `lowestQueryWindowBlockNumber`.\n     */\n    struct ResponseBody {\n        uint64 blockTimestamp;\n        uint64 numberOfConfirmations;\n        uint64 lowestQueryWindowBlockNumber;\n        uint64 lowestQueryWindowBlockTimestamp;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Attestation Request On-Chain in Solidity (Foundry)\nDESCRIPTION: Defines an internal function `submitAttestationRequest` within a Foundry script to submit the prepared attestation request to the FDC protocol on-chain. It retrieves the deployer's private key, fetches the required request fee from `FdcRequestFeeConfigurations` (via `ContractRegistry`), gets the `FdcHub` contract instance, and calls `requestAttestation` on `FdcHub`, passing the `abiEncodedRequest` and attaching the calculated `requestFee` as msg.value. It uses `vm.startBroadcast`/`vm.stopBroadcast` to manage the transaction submission.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction submitAttestationRequest(bytes memory abiEncodedRequest) internal {\n    uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n    vm.startBroadcast(deployerPrivateKey);\n    IFdcRequestFeeConfigurations fdcRequestFeeConfigurations = ContractRegistry\n            .getFdcRequestFeeConfigurations();\n    uint256 requestFee = fdcRequestFeeConfigurations.getRequestFee(\n        abiEncodedRequest\n    );\n    console.log(\"request fee: %s\\n\", requestFee);\n    vm.stopBroadcast();\n\n    vm.startBroadcast(deployerPrivateKey);\n\n    // address fdcHubAddress = 0x48aC463d7975828989331F4De43341627b9c5f1D;\n    IFdcHub fdcHub = ContractRegistry.getFdcHub();\n    console.log(\"fcdHub address:\");\n    console.log(address(fdcHub));\n    console.log(\"\\n\");\n\n    fdcHub.requestAttestation{value: requestFee}(abiEncodedRequest);\n    vm.stopBroadcast();\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Anchor Feed Data from Flare DA Layer in JavaScript\nDESCRIPTION: Shows how to use JavaScript (Node.js) for retrieving anchor feed data with proof from the Flare DA Layer API by making an HTTP POST request. The code requires common JavaScript libraries for HTTP requests (e.g., axios or fetch). Inputs include a list of feed IDs, and the output is a JSON object with pricing data, voting round IDs, and Merkle proofs. May require async/await; ensure compatibility with Node.js or browsers.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/2-getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{FetchAnchorFeedsJs}\n```\n\n----------------------------------------\n\nTITLE: Deploy and Verify FAssets Redeem Contract\nDESCRIPTION: Deploys and verifies the FAssets redemption contract on the network with the asset manager address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/developer-guides/3-fassets-redeem.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function deployAndVerifyContract() {\n  const FAssetsRedeem = artifacts.require(\"FAssetsRedeem\");\n  const args = [ASSET_MANAGER_ADDRESS];\n  const fAssetsRedeem: FAssetsRedeemInstance = await FAssetsRedeem.new(...args);\n\n  const fAssetsRedeemAddress = await fAssetsRedeem.address;\n\n  try {\n    await run(\"verify:verify\", {\n      address: fAssetsRedeemAddress,\n      constructorArguments: args,\n    });\n  } catch (e: any) {\n    console.log(e);\n  }\n\n  console.log(\"FAssetsRedeem deployed to:\", fAssetsRedeemAddress);\n\n  return fAssetsRedeem;\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying a Smart Contract on Flare Mainnet with web3.js - JavaScript\nDESCRIPTION: This snippet deploys a compiled smart contract to the Flare mainnet using web3.js, similar to the Coston2 variant but targeting mainnet endpoints and contracts. Requires proper ABI, bytecode, mainnet RPC endpoint, and a funded account. Outputs contract address after successful deployment.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-javascript-developers.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/* Code for DeployContractFlare loaded from external file - not shown here */\n```\n\n----------------------------------------\n\nTITLE: Voter Addresses Structure Definition in Solidity\nDESCRIPTION: Structure definition for storing voter-related addresses including submit address, submit signatures address, and signing policy address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_39\n\nLANGUAGE: solidity\nCODE:\n```\nstruct VoterAddresses {\n  address submitAddress;\n  address submitSignaturesAddress;\n  address signingPolicyAddress;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving FTSOv2 Feeds via web3.py - Python\nDESCRIPTION: Demonstrates use of web3.py to access the Flare FtsoV2 contract and read feed data for FLR/USD, BTC/USD, and ETH/USD. Requires installation of the web3 Python package, the FtsoV2 contract ABI, the RPC endpoint, and the appropriate feed IDs. The code outputs feed value and latest timestamp for each asset pair; ensure your ABI and network details match the targeted chain.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/read-feeds-offchain.mdx#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3\nimport json\n\n# Load ABI from path or as a string\nwith open('FtsoV2.abi', 'r') as f:\n    FTSO_ABI = json.load(f)\n\nRPC_ENDPOINT = '<YOUR_RPC_ENDPOINT>'  # e.g. https://coston2-api.flare.network/ext/bc/C/rpc\nFTSO_CONTRACT_ADDRESS = '<FTSOV2_CONTRACT_ADDRESS>'\nFEED_IDS = [\n    '0x464c522f55534400000000000000000000000000000000000000000000000000',  # FLR/USD\n    '0x4254432f55534400000000000000000000000000000000000000000000000000',  # BTC/USD\n    '0x4554482f55534400000000000000000000000000000000000000000000000000'   # ETH/USD\n]\n\nw3 = Web3(Web3.HTTPProvider(RPC_ENDPOINT))\nftso = w3.eth.contract(address=FTSO_CONTRACT_ADDRESS, abi=FTSO_ABI)\n\nfor feed_id in FEED_IDS:\n    value, timestamp = ftso.functions.getCurrentFeed(feed_id).call()\n    print(f\"FeedID: {feed_id}, Value: {value}, Timestamp: {timestamp}\")\n\n```\n\n----------------------------------------\n\nTITLE: Preparing Proof Request Data in Solidity (Foundry)\nDESCRIPTION: This snippet shows the setup within the `run` function of a `RetrieveDataAndProof` Foundry script. It loads configuration (DA Layer URL, API key) from environment variables and reads previously saved request data (request bytes, voting round ID) from files using Foundry cheatcodes. It then prepares HTTP headers using a `Base.prepareHeaders` helper and constructs the JSON body for the proof request, logging intermediate values for debugging.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\ncontract RetrieveDataAndProof is Script {\n using Surl for *;\n\n function run() external {\n    string memory daLayerUrl = vm.envString(\"COSTON2_DA_LAYER_URL\");\n    string memory apiKey = vm.envString(\"X_API_KEY\");\n\n    string memory requestBytes = vm.readLine(\n        string.concat(\n            dirPath,\n            attestationTypeName,\n            \"_abiEncodedRequest\",\n            \".txt\"\n        )\n    );\n    string memory votingRoundId = vm.readLine(\n        string.concat(\n            dirPath,\n            attestationTypeName,\n            \"_votingRoundId\",\n            \".txt\"\n        )\n    );\n\n    console.log(\"votingRoundId: %s\\n\", votingRoundId);\n    console.log(\"requestBytes: %s\\n\", requestBytes);\n\n    string[] memory headers = Base.prepareHeaders(apiKey);\n    string memory body = string.concat(\n        '{\"votingRoundId\":',\n        votingRoundId,\n        ',\"requestBytes\":\"',\n        requestBytes,\n        '\"}'\n    );\n    console.log(\"body: %s\\n\", body);\n    console.log(\n        \"headers: %s\",\n        string.concat(\"{\", headers[0], \", \", headers[1]),\n        \"}\\n\"\n    );\n\n\n ...\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Strings to Zero-Padded Hex with TypeScript\nDESCRIPTION: This function converts an input string to a hexadecimal representation of its UTF-8 byte values, right-pads the result to 32 bytes (64 hex characters), and returns the string. No external dependencies are required. The function is useful for ABI encoding values for attestation requests, especially when fixed-length 32-byte padding is necessary. The input must be a string, and the output is a zero-padded hex string suitable for ABI use. The function does not handle multi-byte UTF-8 characters differently from ASCII.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/json-api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toHex(data: string) {\n  var result = \"\";\n  for (var i = 0; i < data.length; i++) {\n    result += data.charCodeAt(i).toString(16);\n  }\n  return result.padEnd(64, \"0\");\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying the Weather Insurance Agency Contract with Hardhat\nDESCRIPTION: This TypeScript snippet demonstrates how to deploy a WeatherInsuranceAgency contract using Hardhat. It sets up the necessary configuration for interacting with the Flare Data Connector (FDC) service and deploys the contract with specific parameters.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/weather-insurance.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as dotenv from \"dotenv\";\nimport hre, { ethers } from \"hardhat\";\nimport { FDC_MINIMUM_TEMPERATURE_API } from \"./fdc_minimum_temperature\";\n\ndotenv.config();\n\nasync function main() {\n  // Deploy weather insurance agency contract\n  const network = await ethers.provider.getNetwork();\n  const [deployer] = await ethers.getSigners();\n  console.log(\"Deploying contracts with the account:\", deployer.address);\n\n  // FDC service that will be used for requesting data\n  const attestationProviderAddress = FDC_MINIMUM_TEMPERATURE_API.attestationProviderAddress;\n  const apiEndpoint = FDC_MINIMUM_TEMPERATURE_API.apiEndpoint;\n  const requestTimeout = 60; // How long before one can retry the request\n  const minimumAttestations = 1; // How many independent attestations required\n\n  // Set policy parameters\n  const gracePeriod = 3 * 24 * 60 * 60; // 3 days\n  const claimWindow = 60 * 60; // 1 hour\n  const minStablecoinBalance = ethers.parseEther(\"0.1\");\n  console.log(\"gracePeriod:\", gracePeriod);\n  console.log(\"claimWindow:\", claimWindow);\n  console.log(\"minStablecoinBalance:\", ethers.formatEther(minStablecoinBalance));\n\n  const WeatherInsuranceAgency = await ethers.getContractFactory(\"WeatherInsuranceAgency\");\n  const weatherInsuranceAgency = await WeatherInsuranceAgency.deploy(\n    attestationProviderAddress,\n    apiEndpoint,\n    requestTimeout,\n    minimumAttestations,\n    gracePeriod,\n    claimWindow,\n    minStablecoinBalance\n  );\n  await weatherInsuranceAgency.waitForDeployment();\n  console.log(\"WeatherInsuranceAgency deployed to:\", await weatherInsuranceAgency.getAddress());\n}\n\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ERC20 Stablecoin in Solidity\nDESCRIPTION: This contract creates an ERC20-compatible token with additional functionality for burning tokens and controlled minting. It inherits from OpenZeppelin's ERC20, ERC20Burnable, Ownable, and ERC20Permit contracts.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.25;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {ERC20Burnable} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport {ERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MyStablecoin is ERC20, ERC20Burnable, Ownable, ERC20Permit {\n    constructor(address recipient, address initialOwner)\n        ERC20(\"MyStablecoin\", \"MST\")\n        Ownable(initialOwner)\n        ERC20Permit(\"MyStablecoin\")\n    {\n        _mint(recipient, 666 * 10 ** decimals());\n    }\n\n    function mint(address to, uint256 amount) public onlyOwner {\n        _mint(to, amount);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feed Category and Name from Feed ID in Solidity\nDESCRIPTION: Defines a pure interface function that, given a feed ID (as bytes21), returns its associated category (uint8) and name (string). This facilitates reverse-lookup operations on feeds. No state is accessed or mutated, and the function is intended for implementation in contracts that manage multiple categorized feeds. Requires Solidity, and assumes the feed ID encoding/decoding logic is properly implemented in the contract.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFtsoFeedIdConverter.md#2025-04-22_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction getFeedCategoryAndName(\n    bytes21 _feedId\n) external pure returns (\n    uint8 _category,\n    string _name\n);\n```\n\n----------------------------------------\n\nTITLE: Obtaining Incentive Duration Using Solidity View Function\nDESCRIPTION: This snippet provides the interface definition for `getIncentiveDuration`, a view function that externally exposes the incentive period's length. The function returns a `uint256`, representing duration in seconds or other agreed units, and requires no input parameters. Primarily for external monitoring or calculations, this function is read-only and does not alter contract state.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdateIncentiveManager.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getIncentiveDuration(\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Decoded Attestation Proof with Merkle Inclusion - JSON\nDESCRIPTION: These JSON snippets represent the output after validating proofs via the State Connector and processing payment collection on the Flare network. Each snippet includes the decoded transaction attestation as 'data', and an array of 'merkleProof' hashes that cryptographically prove transaction inclusion. These proofs are submitted to the Solidity contract for on-chain payment accounting and validation. Expected input: full attestation object plus correct Merkle proof array. Outputs: validation status and decoded event details.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/connect-evm-chains.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"lowestUsedTimestamp\": \"1708907688\",\n    \"requestBody\": {\n      \"listEvents\": true,\n      \"logIndices\": [],\n      \"provideInput\": true,\n      \"requiredConfirmations\": \"1\",\n      \"transactionHash\": \"0xac640ab047aa1097ddd473e5940921eb500a9912b33072b8532617692428830e\"\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5363670\",\n      \"events\": [],\n      \"input\": \"0x0123456789\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0xFf02F742106B8a25C26e65C1f0d66BEC3C90d429\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8a6ab01Eb142C8655F373\",\n      \"status\": \"1\",\n      \"timestamp\": \"1708907688\",\n      \"value\": \"10\"\n    },\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"809307\"\n  },\n  \"merkleProof\": [\n    \"0x56faf895bbcb0b2a6f3bc283ea5e1793b224dca8b4b99240a34cee6d9bf1b8f3\",\n    \"0x13ef0de709e7b0485f7623f5a0ad5b56aa23626fbffe5e7f4502bb7be5e0bf7e\",\n    \"0xf72c31824174676516a9c5d9713cb1ae8866cac71462fe2b1a3c1e1b9418a94f\"\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"lowestUsedTimestamp\": \"1708907712\",\n    \"requestBody\": {\n      \"listEvents\": true,\n      \"logIndices\": [],\n      \"provideInput\": true,\n      \"requiredConfirmations\": \"1\",\n      \"transactionHash\": \"0x7eb54cde238fc700be31c98af7e4df8c4fc96fd5c634c490183ca612a481efcc\"\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5363672\",\n      \"events\": [\n        {\n          \"data\": \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000059876543210000000000000000000000000000000000000000000000000000000\",\n          \"emitterAddress\": \"0xeBBf567beDe2D8842dF538Cf64E0bE9976183853\",\n          \"logIndex\": \"160\",\n          \"removed\": false,\n          \"topics\": [\n            \"0xaca09dd456ca888dccf8cc966e382e6e3042bb7e4d2d7815015f844edeafce42\"\n          ]\n        }\n      ],\n      \"input\": \"0x9876543210\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0xeBBf567beDe2D8842dF538Cf64E0bE9976183853\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"status\": \"1\",\n      \"timestamp\": \"1708907712\",\n      \"value\": \"10\"\n    },\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"809307\"\n  },\n  \"merkleProof\": [\n    \"0x56faf895bbcb0b2a6f3bc283ea5e1793b224dca8b4b99240a34cee6d9bf1b8f3\",\n    \"0x13ef0de709e7b0485f7623f5a0ad5b56aa23626fbffe5e7f4502bb7be5e0bf7e\",\n    \"0xf72c31824174676516a9c5d9713cb1ae8866cac71462fe2b1a3c1e1b9418a94f\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Number - Flare Network - Rust\nDESCRIPTION: Illustrates how to fetch the current block number from the Flare blockchain using Rust with an Ethereum RPC client crate (e.g., ethers-rs). Requires network endpoint configuration and necessary crates in Cargo.toml. Outputs the block number as a u64 integer.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/0-overview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse ethers_providers::{Provider, Http};\nuse std::convert::TryFrom;\n\n#[tokio::main]\nasync fn main() -> eyre::Result<()> {\n    let flare_rpc_url = \"<FLARE_MAINNET_RPC_URL>\";\n    let provider = Provider::<Http>::try_from(flare_rpc_url)?;\n    let block_number = provider.get_block_number().await?;\n    println!(\"Flare block number: {}\", block_number);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ParsableProof Struct in Solidity\nDESCRIPTION: Defines a Solidity struct `ParsableProof` used to structure and decode the raw byte data returned from the DA Layer proof request. It includes fields for the `attestationType` (bytes32), an array of Merkle `proofs` (bytes32[]), and the ABI-encoded `responseHex` (bytes) specific to the attestation type.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/address-validity.mdx#2025-04-22_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nstruct ParsableProof {\n bytes32 attestationType;\n bytes32[] proofs;\n bytes responseHex;\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Current FDC Voting Round ID in Solidity\nDESCRIPTION: This snippet determines the current voting epoch (round) ID within the FDC protocol. It gets an instance of the `IFlareSystemsManager` contract via the `ContractRegistry` and calls `getCurrentVotingEpochId` to retrieve the ID. The round ID is then logged.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\n```solidity\n       // Calculating roundId\n       IFlareSystemsManager flareSystemsManager = ContractRegistry\n           .getFlareSystemsManager();\n\n       uint32 roundId = flareSystemsManager.getCurrentVotingEpochId();\n       console.log(\"roundId: %s\\n\", Strings.toString(roundId));\n\n```\n```\n\n----------------------------------------\n\nTITLE: Constructing Verifier URL and Request Body in Solidity\nDESCRIPTION: This snippet demonstrates building the full URL for the verifier endpoint and the JSON request body dynamically in Solidity. It concatenates strings to form the URL using a base URL and parameters like `baseSourceName` and `attestationTypeName`. The request body is a simple JSON containing `addressStr`. It logs the constructed URL for debugging purposes.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory baseUrl = \"https://fdc-verifiers-testnet.flare.network/\";\nstring memory url = string.concat(\n baseUrl,\n \"verifier/\",\n baseSourceName,\n \"/\",\n attestationTypeName,\n \"/prepareRequest\"\n);\nconsole.log(\"url: %s\", url);\nstring memory requestBody = string.concat(\n '{\"addressStr\": \"',\n addressStr,\n '\"}'\n);\n```\n\n----------------------------------------\n\nTITLE: Running ProofOfReserves Deployment Script using Yarn and Hardhat\nDESCRIPTION: This shell command executes the `deployProofOfReserves.ts` Hardhat script using Yarn, specifically targeting the 'coston2' network. This deploys the `ProofOfReserves` contract only to the Coston2 chain as per the guide's instructions.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nyarn hardhat run scripts/proofOfReserves/deployProofOfReserves.ts --network coston2\n```\n```\n\n----------------------------------------\n\nTITLE: Attesting XRP Ledger Payment Existence and Nonexistence with TypeScript\nDESCRIPTION: This TypeScript code connects to the XRP Ledger testnet, sends a payment with a memo, submits attestation requests to an external verifier API, and analyzes both existence and non-existence proofs for the specified payment. It covers payment preparation, memo handling, conversion utilities, and fine-tuned parameterization for proving both the inclusion and absence of payments based on standardized references. The implementation depends on the 'xrpl' and 'web3' libraries, requires relevant environment variables for signing and API access, and expects a running verifier that understands the prepared HTTP requests. It processes all attestation responses, demonstrates parameter manipulation to fail/succeed proofs, and logs detailed outcomes for inspection. Inputs include payment message, amount, and recipient; outputs are attestation responses and on-chain/external verification statuses.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/verify-payment-nonexistence.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst xrpl = require(\"xrpl\");\n\nconst { XRPL_PRIVATE_KEY, ATTESTATION_URL, ATTESTATION_API_KEY } = process.env;\nconst receiverAddress = \"r9RLXvWuRro3RX33pk4xsN58tefYZ8Tvbj\";\n\nfunction toHex(data: string): string {\n  var result = \"\";\n  for (var i = 0; i < data.length; i++) {\n    result += data.charCodeAt(i).toString(16);\n  }\n  return \"0x\" + result.padEnd(64, \"0\");\n}\n\nfunction fromHex(data: string): string {\n  data = data.replace(/^(0x\\.)/, \"\");\n  return data\n    .split(/(\\w\\w)/g)\n    .filter((p) => !!p)\n    .map((c) => String.fromCharCode(parseInt(c, 16)))\n    .join(\"\");\n}\n\nasync function prepareAttestationResponse(\n  attestationType: string,\n  network: string,\n  sourceId: string,\n  requestBody: any,\n): Promise<AttestationResponse> {\n  const response = await fetch(\n    `${ATTESTATION_URL}/verifier/${network}/${attestationType}/prepareResponse`,\n    {\n      method: \"POST\",\n      headers: {\n        \"X-API-KEY\": ATTESTATION_API_KEY as string,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        attestationType: toHex(attestationType),\n        sourceId: toHex(sourceId),\n        requestBody: requestBody,\n      }),\n    },\n  );\n  const data = await response.json();\n  return data;\n}\n\nasync function getXRPLclient(): Promise<any> {\n  const client = new xrpl.Client(\"wss://s.altnet.rippletest.net:51233\");\n  await client.connect();\n\n  return client;\n}\n\nasync function sendXRPLTransaction(\n  message: string = \"\",\n  amount: number = 10,\n  target: string = \"r9RLXvWuRro3RX33pk4xsN58tefYZ8Tvbj\",\n): Promise<string> {\n  const client = await getXRPLclient();\n\n  const test_wallet = xrpl.Wallet.fromSeed(XRPL_PRIVATE_KEY);\n\n  // Standard payment reference must be 32 bytes - so we right pad with 0\n  const MemoData = xrpl.convertStringToHex(message).padEnd(64, \"0\");\n  const MemoType = xrpl.convertStringToHex(\"Text\");\n  const MemoFormat = xrpl.convertStringToHex(\"text/plain\");\n\n  let memos = [];\n  if (message) {\n    memos.push({\n      Memo: {\n        MemoType: MemoType,\n        MemoData: MemoData,\n        MemoFormat: MemoFormat,\n      },\n    });\n  }\n\n  const transaction = await client.autofill({\n    TransactionType: \"Payment\",\n    Account: test_wallet.address,\n    Amount: amount.toString(),\n    Destination: target,\n    Memos: memos,\n  });\n\n  const signed = test_wallet.sign(transaction);\n  console.log(\n    `See transaction at https://testnet.xrpl.org/transactions/${signed.hash}`,\n  );\n  await client.submitAndWait(signed.tx_blob);\n\n  await client.disconnect();\n\n  // sleep for 10 seconds to allow the transaction to be processed\n  await new Promise((resolve) => setTimeout(resolve, 10 * 1000));\n  console.log(\"Payment:\");\n  // 1. prove the payment:\n  const resultPayment = await prepareAttestationResponse(\n    \"Payment\",\n    \"xrp\",\n    \"testXRP\",\n    {\n      transactionId: \"0x\" + signed.hash,\n      inUtxo: \"0\",\n      utxo: \"0\",\n    },\n  );\n\n  if (resultPayment.status != \"VALID\") {\n    console.log(\"Something wrong when confirming payment\");\n  }\n  console.log(resultPayment);\n  if (\n    resultPayment.response.responseBody.standardPaymentReference !=\n    \"0x\" + MemoData\n  ) {\n    console.log(\"Something wrong with message reference\");\n    console.log(resultPayment.response.responseBody.standardPaymentReference);\n    console.log(MemoData);\n  }\n  if (\n    resultPayment.response.responseBody.receivingAddressHash !=\n    web3.utils.soliditySha3(target)\n  ) {\n    console.log(\"Something wrong with target address hash\");\n  }\n\n  // Get information about transaction: block and block timestamp -> we will need this to create the range, where the transaction has happened\n  console.log(\"Failing non existence proof:\");\n  const blockNumber = Number(resultPayment.response.responseBody.blockNumber);\n  const blockTimestamp = Number(\n    resultPayment.response.responseBody.blockTimestamp,\n  );\n\n  const targetRange = {\n    minimalBlockNumber: (blockNumber - 5).toString(), // Search few block before\n    deadlineBlockNumber: (blockNumber + 1).toString(), // Search a few blocks after, but not too much, as they need to already be indexed by attestation clients\n    deadlineTimestamp: (blockTimestamp + 3).toString(), // Search a bit after\n    destinationAddressHash: web3.utils.soliditySha3(target), // The target address for transaction\n  };\n\n  // Try to verify non existence for a transaction and correct parameters\n  // This should not verify it\n\n  const resultFailedNonExistence = await prepareAttestationResponse(\n    \"ReferencedPaymentNonexistence\",\n    \"xrp\",\n    \"testXRP\",\n    {\n      ...targetRange,\n      amount: amount.toString(),\n      standardPaymentReference: \"0x\" + MemoData,\n    },\n  );\n\n  console.log(resultFailedNonExistence);\n\n  if (resultFailedNonExistence.status != \"INVALID\") {\n    console.log(\"Something wrong with failed non existence\");\n  }\n\n  console.log(\"Successful non existence proofs:\");\n\n  // Change the memo field a bit and successfully prove non existence\n  let wrongMemoData = xrpl.convertStringToHex(message).padEnd(64, \"1\"); // We pad 1 instead of 0\n  const resultWrongMemoNonExistence = await prepareAttestationResponse(\n    \"ReferencedPaymentNonexistence\",\n    \"xrp\",\n    \"testXRP\",\n    {\n      ...targetRange,\n      amount: amount.toString(),\n      standardPaymentReference: \"0x\" + wrongMemoData,\n    },\n  );\n\n  console.log(resultWrongMemoNonExistence);\n\n  if (resultWrongMemoNonExistence.status != \"VALID\") {\n    console.log(\"Something wrong with wrong memo non existence\");\n  }\n\n  // Change the value and successfully prove non existence.\n\n  const resultWrongAmountNonExistence = await prepareAttestationResponse(\n    \"ReferencedPaymentNonexistence\",\n    \"xrp\",\n    \"testXRP\",\n    {\n      ...targetRange,\n      amount: (amount + 1).toString(), // Increase the amount, so the transaction we made is now invalid\n      standardPaymentReference: \"0x\" + MemoData,\n    },\n  );\n\n  console.log(resultWrongAmountNonExistence);\n\n  if (resultWrongAmountNonExistence.status != \"VALID\") {\n    console.log(\"Something wrong with wrong amount non existence\");\n  }\n}\n\nasync function main() {\n  await sendXRPLTransaction(\"Hello world!\");\n}\n\nmain().then(() => process.exit(0));\n```\n\n----------------------------------------\n\nTITLE: Querying Chain ID on Flare Testnet (Coston2) - Python\nDESCRIPTION: This snippet demonstrates how to connect to the Flare Coston2 testnet using web3.py and retrieve the blockchain chain id. Requires 'web3' Python package installed and the Coston2 public RPC endpoint. Returns the chain id of the connected network.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-python-developers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{ChainIdCoston2}\n```\n\n----------------------------------------\n\nTITLE: Depositing Both Vault and Pool Collateral Together\nDESCRIPTION: Command to calculate and deposit the minimum required collateral (both vault and pool) to back the specified number of lots for an agent.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/3-create-fasset-agent-cli.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose --profile cli run agent-bot depositCollaterals AGENT_ADDRESS LOTS --fasset FASSET\n```\n\n----------------------------------------\n\nTITLE: Resolving a Weather Insurance Policy with FDC Data\nDESCRIPTION: This script demonstrates how to resolve a policy by requesting temperature data from the FDC service. It initiates the resolution process which will pay out based on actual weather conditions.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/weather-insurance.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as dotenv from \"dotenv\";\nimport hre, { ethers } from \"hardhat\";\n\ndotenv.config();\n\nasync function main() {\n  // Get the address of the weather insurance agency contract\n  const agencyAddress = process.env.WEATHER_INSURANCE_AGENCY_ADDRESS ?? \"\";\n  // Get the policy ID\n  const policyId = parseInt(process.env.POLICY_ID ?? \"0\");\n  if (policyId === 0) {\n    throw new Error(\"POLICY_ID not set\");\n  }\n\n  const [deployer] = await ethers.getSigners();\n  console.log(\"Resolving policy with the account:\", deployer.address);\n\n  const WeatherInsuranceAgency = await hre.ethers.getContractFactory(\"WeatherInsuranceAgency\");\n  const weatherInsuranceAgency = WeatherInsuranceAgency.attach(agencyAddress);\n\n  const policy = await weatherInsuranceAgency.getPolicy(policyId);\n  console.log(\"Resolving policy:\", policyId);\n  console.log(\"Policy state:\", policy.state);\n  console.log(\"Policy latitude:\", policy.latitude / 1000000);\n  console.log(\"Policy longitude:\", policy.longitude / 1000000);\n  console.log(\"Policy threshold:\", policy.threshold / 10, \"°C\");\n  console.log(\"Policy start time:\", policy.startTime);\n  console.log(\"Policy expiry time:\", policy.expiryTime);\n\n  const tx = await weatherInsuranceAgency.requestResolution(policyId);\n  await tx.wait();\n  console.log(\"Resolution requested. Tx hash:\", tx.hash);\n}\n\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n\n```\n\n----------------------------------------\n\nTITLE: Running Payment Script with Hardhat in Bash\nDESCRIPTION: This command runs the Payment.ts script using Hardhat, which deploys the contract, verifies it, and interacts with it to register a payment.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nyarn hardhat run scripts/fdcExample/Payment.ts\n```\n\n----------------------------------------\n\nTITLE: Posting Proof Requests to DA Layer via Fetch API - TypeScript\nDESCRIPTION: Implements a function 'postRequestToDALayer' for submitting proof requests to a DA Layer endpoint using the Fetch API. Accepts the request URL, body, and an optional 'watchStatus' flag; if 'watchStatus' is true, throws if the HTTP response is not 200. Returns the parsed JSON response. Requires browser or Node.js Fetch API support. Handles JSON serialization and application/json headers.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nasync function postRequestToDALayer(\n  url: string,\n  request: any,\n  watchStatus: boolean = false,\n) {\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      //   \"X-API-KEY\": \"\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(request),\n  });\n  if (watchStatus && response.status != 200) {\n    throw new Error(\n      `Response status is not OK, status ${response.status} ${response.statusText}\\n`,\n    );\n  } else if (watchStatus) {\n    console.log(\"Response status is OK\\n\");\n  }\n  return await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Struct Definition for FTSO Configuration - Solidity\nDESCRIPTION: Defines the FtsoConfiguration struct encapsulating parameters relevant to FTSO inflation settings. It includes fields for feed IDs, inflation share, minimum rewarded turnout, primary band reward share, secondary band widths, and mode. Types include bytes, uint16, and uint24 for storage optimization. Proper serialization and understanding of type widths are required for integration.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/solidity-reference/IFtsoInflationConfigurations.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nstruct FtsoConfiguration {\n  bytes feedIds;\n  uint24 inflationShare;\n  uint16 minRewardedTurnoutBIPS;\n  uint24 primaryBandRewardSharePPM;\n  bytes secondaryBandWidthPPMs;\n  uint16 mode;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ethers.js Dependencies via npm\nDESCRIPTION: Installs the ethers.js library and Flare Periphery Contract Artifacts using npm, required for interacting with the Flare network and FTSO contracts using ethers.js.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/query-feed-configuration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ethers\nnpm install @flarenetwork/flare-periphery-contract-artifacts\n```\n\n----------------------------------------\n\nTITLE: Declaring Time Query Functions - Flare Systems Manager Interface - Solidity\nDESCRIPTION: Declares read-only interface functions for retrieving timestamps related to the start of the first reward and voting epochs. These functions require no input parameters and return UNIX epoch seconds as unsigned 64-bit integers. Used for downstream contracts or dApps to determine event chronologies without requiring storage access.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IFlareSystemsManager.md#2025-04-22_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction firstRewardEpochStartTs(\n) external view returns (\n    uint64\n);\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction firstVotingRoundStartTs(\n) external view returns (\n    uint64\n);\n```\n\n----------------------------------------\n\nTITLE: Self-Minting from Underlying Assets\nDESCRIPTION: Command to mint FAssets directly using newly deposited underlying assets without requiring public availability.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot selfMintFromUnderlying <agentVaultAddress> <numberOfLots>\n```\n\n----------------------------------------\n\nTITLE: Parsing Returned Proof Data in Solidity\nDESCRIPTION: Parses the data received from the DA Layer into a ParsableProof struct and extracts the specific attestation response (in this case, a payment response) using ABI decoding.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_21\n\nLANGUAGE: solidity\nCODE:\n```\nbytes memory dataJson = parseData(data);\nParsableProof memory proof = abi.decode(dataJson, (ParsableProof));\n\nIPayment.Response memory proofResponse = abi.decode(\n proof.responseHex,\n (IPayment.Response)\n);\n```\n\n----------------------------------------\n\nTITLE: Querying FlareContractRegistry Address via alloy-rs - Rust\nDESCRIPTION: These Rust code snippets allow querying the FlareContractRegistry contract on the Flare network (both testnet and mainnet) to retrieve registered contract addresses, such as the WNat address. Prerequisites include the contract address and ABI (provided as a JSON file), and alloy-rs for async contract calls. Key parameters are the registry contract's address and the ABI details in 'FlareContractRegistry.json'. Inputs are network configuration and target method; output is the address of the queried contract, printed to stdout. Limitations include the need to keep ABI files in sync with deployed contract versions.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-rust-developers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n{MakeQueryCoston2}\n```\n\nLANGUAGE: rust\nCODE:\n```\n{MakeQueryFlare}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Random Number in Solidity\nDESCRIPTION: Defines an external view function getCurrentRandom that, when called, returns the current random number as a uint256. The function will revert execution if the secure random number was not generated. This interface method is dependency-free but depends on implementation contracts providing secure randomness. Input: none. Output: _randomNumber (uint256).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/ISubmission.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getCurrentRandom(\n) external view returns (\n    uint256 _randomNumber\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Proof Validation Functions in Solidity\nDESCRIPTION: These functions validate JsonApi and EVMTransaction proofs using the ContractRegistry library to access the appropriate verification contracts.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isValidProof(IJsonApi.Proof calldata proof) private view returns (bool) {\n    return ContractRegistry.auxiliaryGetIJsonApiVerification().verifyJsonApi(proof);\n}\n\nfunction isValidProof(IEVMTransaction.Proof calldata proof) private view returns (bool) {\n    return ContractRegistry.getFdcVerification().verifyEVMTransaction(proof);\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying node operation with health checks\nDESCRIPTION: Commands to verify the node is running correctly, including running health checks and displaying detailed status information about the node.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/4-GCP-marketplace-nodes.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Run health checks\nsudo nodectl health\n# Display detailed node information\nsudo nodectl status\n```\n\n----------------------------------------\n\nTITLE: Generating Standard Address Hash using Keccak256 in Solidity\nDESCRIPTION: This snippet demonstrates how to generate a standard address hash using the keccak256 function in Solidity. The function takes a standardAddress string as input and returns its hash.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/attestation-types/_standard_address_hash.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nkeccak256(standardAddress)\n```\n\n----------------------------------------\n\nTITLE: Implementing FAssets Settings Retrieval in TypeScript\nDESCRIPTION: TypeScript code to fetch FAssets configuration settings, retrieve the XRP/USD price from FTSO, and calculate the USD value of an FXRP lot.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/developer-guides/1-fassets-asset-manager-settings-node.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ethers } from \"ethers\";\nimport { IAssetManager__factory } from \"../typechain/factories/IAssetManager__factory.js\";\nimport { IFlareContractRegistry__factory } from \"../typechain/factories/IFlareContractRegistry__factory.js\";\nimport { FtsoV2Interface__factory } from \"../typechain/factories/FtsoV2Interface__factory.js\";\n\nconst COSTON_RPC = \"https://coston-api.flare.network/ext/C/rpc\";\nconst ASSET_MANAGER_ADDRESS = \"0xeEd82b8390880af0b6Cb6Dd398a7E361cc30E8e2\";\nconst REGISTRY_ADDRESS = \"0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019\";\nconst XRP_USD_FEED_ID = \"0x015852502f55534400000000000000000000000000\";\n\nasync function getSettings() {\n  const provider = new ethers.JsonRpcProvider(COSTON_RPC);\n  const assetManager = IAssetManager__factory.connect(\n    ASSET_MANAGER_ADDRESS,\n    provider,\n  );\n\n  const settings = await assetManager.getSettings();\n  const lotSizeFXRP =\n    Number(settings.lotSizeAMG) / Math.pow(10, Number(settings.assetDecimals));\n  console.log(\"Lot Size (FXRP):\", lotSizeFXRP);\n\n  const registry = IFlareContractRegistry__factory.connect(\n    REGISTRY_ADDRESS,\n    provider,\n  );\n  const ftsoAddress = await registry.getContractAddressByName(\"FtsoV2\");\n  const ftsoV2 = FtsoV2Interface__factory.connect(ftsoAddress, provider);\n  const priceFeed = await ftsoV2.getFeedById.staticCall(XRP_USD_FEED_ID);\n\n  const xrpUsdPrice = Number(priceFeed[0]) / Math.pow(10, Number(priceFeed[1]));\n  const lotValueUSD = lotSizeFXRP * xrpUsdPrice;\n\n  console.log(\"XRP/USD Price:\", xrpUsdPrice);\n  console.log(\"Lot value in USD:\", lotValueUSD);\n  console.log(\"Timestamp:\", priceFeed[2].toString());\n}\n\ngetSettings();\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Request Body for FDC Attestation in Solidity\nDESCRIPTION: Helper functions to prepare formatted JSON requests for the FDC verifiers. Handles headers with API key authentication and constructs the proper request body with attestation type, source ID, and request-specific data.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction prepareAttestationRequest(\n string memory attestationType,\n string memory sourceId,\n string memory requestBody\n) internal view returns (string[] memory, string memory) {\n // We read the API key from the .env file\n string memory apiKey = vm.envString(\"VERIFIER_API_KEY\");\n\n // Preparing headers\n string[] memory headers = prepareHeaders(apiKey);\n // Preparing body\n string memory body = prepareBody(\n attestationType,\n sourceId,\n requestBody\n );\n\n console.log(\n \"headers: %s\",\n string.concat(\"{\", headers[0], \", \", headers[1]),\n \"}\\n\"\n );\n console.log(\"body: %s\\n\", body);\n return (headers, body);\n}\n\nfunction prepareHeaders(\n string memory apiKey\n) internal pure returns (string[] memory) {\n string[] memory headers = new string[](2);\n headers[0] = string.concat('\"X-API-KEY\": ', apiKey);\n headers[1] = '\"Content-Type\": \"application/json\"';\n return headers;\n}\n\nfunction prepareBody(\n string memory attestationType,\n string memory sourceId,\n string memory body\n) internal pure returns (string memory) {\n return\n string.concat(\n '{\"attestationType\": ',\n '\"',\n attestationType,\n '\"',\n ', \"sourceId\": ',\n '\"',\n sourceId,\n '\"',\n ', \"requestBody\": ',\n body,\n \"}\"\n );\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying ProofOfReserves Contract with Hardhat in TypeScript\nDESCRIPTION: This script deploys the 'ProofOfReserves' contract using Hardhat and Truffle artifacts. Following the established pattern, it defines an `deployAndVerify` function that deploys the contract (without constructor arguments), attempts verification via the `verify:verify` Hardhat task, handles potential verification errors, and logs the deployed contract address and network name.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript title=\"scripts/proofOfReserves/deployProofOfReserves.ts\"\nimport hre, { run } from \"hardhat\";\nimport { ProofOfReservesInstance } from \"../../typechain-types\";\n\nconst ProofOfReserves = artifacts.require(\"ProofOfReserves\");\n\nasync function deployAndVerify() {\n  const args: any[] = [];\n  const proofOfReserves: ProofOfReservesInstance = await ProofOfReserves.new(\n    ...args,\n  );\n  try {\n    await run(\"verify:verify\", {\n      address: proofOfReserves.address,\n      constructorArguments: args,\n    });\n  } catch (e: any) {\n    console.log(e);\n  }\n  console.log(\n    `(${hre.network.name}) ProofOfReserves deployed to`,\n    proofOfReserves.address,\n    \"\\n\",\n  );\n}\n\ndeployAndVerify().then((data) => {\n  process.exit(0);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Loading Private Key from Environment in Solidity (Foundry)\nDESCRIPTION: This snippet shows how to read a private key, stored as an environment variable named `PRIVATE_KEY`, into a `uint256` variable within a Solidity script using Foundry's `vm.envUint` cheatcode. This is essential for signing and broadcasting transactions.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\n       uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n```\n\n----------------------------------------\n\nTITLE: Submitting an FDC Attestation Request in TypeScript\nDESCRIPTION: This asynchronous TypeScript function `submitAttestationRequest` handles the process of submitting an FDC request. It takes an ABI-encoded request string, retrieves the `FdcHub` instance, calculates the required fee using `getFdcRequestFee`, submits the request to the `FdcHub` contract with the calculated fee, and finally calculates the voting round ID for the submitted request using `calculateRoundId`. It logs the transaction hash and a link to explore the round progress.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/address-validity.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nasync function submitAttestationRequest(abiEncodedRequest: string) {\n  const fdcHub = await getFdcHub();\n\n  const requestFee = await getFdcRequestFee(abiEncodedRequest);\n\n  const transaction = await fdcHub.requestAttestation(abiEncodedRequest, {\n    value: requestFee,\n  });\n  console.log(\"Submitted request:\", transaction.tx, \"\\n\");\n\n  const roundId = await calculateRoundId(transaction);\n  console.log(\n    `Check round progress at: https://${hre.network.name}-systems-explorer.flare.rocks/voting-epoch/${roundId}?tab=fdc\\n`,\n  );\n  return roundId;\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating a Derived FTSO Feed in Solidity (Test)\nDESCRIPTION: This Solidity contract (`FtsoV2ChangeQuoteFeed.sol`) demonstrates how to fetch the latest prices and decimals for two different FTSO feeds (e.g., BTC/USD and ETH/USD) and calculate a derived price (e.g., BTC/ETH) while preserving the correct number of decimals. It initially uses the `TestFtsoV2Interface` for easier testing without gas costs or state changes.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/change-quote-feed.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {TestFtsoV2Interface} from \"@flarenetwork/flare-periphery-contracts/coston2/TestFtsoV2Interface.sol\";\n\ncontract FtsoV2ChangeQuoteFeed {\n  // Test interface for FTSO V2\n  TestFtsoV2Interface internal ftsoV2;\n\n  /**\n   * @notice Constructor initializes the FTSO V2 test interface.\n   * @dev This uses a hardcoded address for the TestFtsoV2 contract on the Coston2 testnet.\n   *      For production, use the ContractRegistry to get the FtsoV2 address.\n   */\n  constructor() {\n    // Address of TestFtsoV2 on Coston2\n    ftsoV2 = TestFtsoV2Interface(0xC80775746094193d5314975756A0013e7065387A);\n  }\n\n  /**\n   * @notice Fetches the latest prices for two feeds and calculates the price of the base asset in terms of the quote asset.\n   * @dev Example: To get BTC/ETH, fetch BTC/USD (baseFeedId) and ETH/USD (quoteFeedId).\n   *      The result is (BTC/USD) / (ETH/USD) with adjusted decimals.\n   * @param baseFeedId The feed ID for the base asset (e.g., BTC/USD).\n   * @param quoteFeedId The feed ID for the quote asset (e.g., ETH/USD).\n   * @return price The calculated price of the base asset in terms of the quote asset.\n   * @return decimals The number of decimals for the calculated price.\n   */\n  function getPrice(uint256 baseFeedId, uint256 quoteFeedId) public view returns (uint256 price, uint8 decimals) {\n    // Fetch the latest price and decimals for the base feed (e.g., BTC/USD)\n    (uint256 basePrice, , uint8 baseDecimals) = ftsoV2.getCurrentPrice(baseFeedId);\n\n    // Fetch the latest price and decimals for the quote feed (e.g., ETH/USD)\n    (uint256 quotePrice, , uint8 quoteDecimals) = ftsoV2.getCurrentPrice(quoteFeedId);\n\n    // Ensure quotePrice is not zero to avoid division by zero\n    require(quotePrice > 0, \"Quote price cannot be zero\");\n\n    // Calculate the new price: (basePrice / quotePrice) * 10^newDecimals\n    // Determine the number of decimals for the new price feed\n    // Aim for a standard number of decimals, e.g., 18, adjusting as necessary\n    decimals = 18; // Target decimals for the result\n\n    // Calculate the price, adjusting for decimals:\n    // newPrice = (basePrice * 10^quoteDecimals * 10^decimals) / (quotePrice * 10^baseDecimals)\n    // To prevent overflow, rearrange calculation:\n    // newPrice = (basePrice * 10^(quoteDecimals + decimals)) / (quotePrice * 10^baseDecimals)\n    // If (quoteDecimals + decimals) >= baseDecimals:\n    // newPrice = (basePrice * 10^(quoteDecimals + decimals - baseDecimals)) / quotePrice\n    // If baseDecimals > (quoteDecimals + decimals):\n    // newPrice = basePrice / (quotePrice * 10^(baseDecimals - quoteDecimals - decimals))\n\n    // Use a safe scaling factor to maintain precision during intermediate calculations\n    uint256 scalingFactor = 10**uint256(decimals);\n\n    // Calculate the price adjusted for the target number of decimals\n    // price = (basePrice * scalingFactor * (10**quoteDecimals)) / (quotePrice * (10**baseDecimals))\n    // To avoid large intermediate numbers, we can simplify:\n    // price = (basePrice * scalingFactor) / quotePrice * (10**quoteDecimals) / (10**baseDecimals)\n    // price = (basePrice * 10^decimals / quotePrice) * 10^quoteDecimals / 10^baseDecimals\n\n    // Calculate the price using fixed-point arithmetic simulation\n    // Multiply basePrice by 10^decimals first to maintain precision\n    uint256 scaledBasePrice = basePrice * scalingFactor;\n\n    // Calculate the intermediate ratio, adjusted for quote decimals\n    // intermediate = (scaledBasePrice * 10^quoteDecimals) / quotePrice\n    // To avoid potential overflow with 10^quoteDecimals, adjust calculation order:\n    // intermediate = (scaledBasePrice / quotePrice) * 10^quoteDecimals\n    // If quoteDecimals > baseDecimals:\n    // price = (basePrice * 10^decimals * 10^(quoteDecimals - baseDecimals)) / quotePrice\n    // If baseDecimals > quoteDecimals:\n    // price = (basePrice * 10^decimals) / (quotePrice * 10^(baseDecimals - quoteDecimals))\n\n    if (quoteDecimals >= baseDecimals) {\n      uint256 decimalDifference = uint256(quoteDecimals - baseDecimals);\n      price = (scaledBasePrice * (10**decimalDifference)) / quotePrice;\n    } else {\n      uint256 decimalDifference = uint256(baseDecimals - quoteDecimals);\n      price = scaledBasePrice / (quotePrice * (10**decimalDifference));\n    }\n  }\n\n  /**\n   * @notice Fetches the latest price and decimals for a single feed ID.\n   * @param _feedId The feed ID to query.\n   * @return price The latest price for the feed.\n   * @return timestamp The timestamp of the price epoch.\n   * @return decimals The number of decimals for the price.\n   */\n  function getFeed(uint256 _feedId) public view returns (uint256 price, uint256 timestamp, uint8 decimals) {\n    return ftsoV2.getCurrentPrice(_feedId);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a New Ethereum Account Keystore Using Go - Go\nDESCRIPTION: This Go snippet creates a new Ethereum account, generating and saving the keystore file in the current directory using go-ethereum's keystore package. The function prints the account address. Prerequisites are the go-ethereum/keystore package and write access to the file system. The input is password (prompt or constant, depending on implementation); output is the keystore file and printed address. The code is for development use—protect all generated private keys.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-go-developers.mdx#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n{CreateAccount}\n```\n\n----------------------------------------\n\nTITLE: Getting Historical Random Number in Solidity\nDESCRIPTION: Declares the `getRandomNumberHistorical` function in the IRelay interface. This view function retrieves a historical random number, its security status, and timestamp for a specific `_votingRoundId`. It reverts if no finalization occurred in that round.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRelay.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getRandomNumberHistorical(\n    uint256 _votingRoundId\n) external view returns (\n    uint256 _randomNumber,\n    bool _isSecureRandom,\n    uint256 _randomTimestamp\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Solidity Helper Contract for FDC Interaction\nDESCRIPTION: This Solidity contract, `Helpers`, provides view functions to retrieve instances of essential Flare Data Connector (FDC) related contracts (`FdcHub`, `FdcRequestFeeConfigurations`, `FlareSystemsManager`, `Relay`) by leveraging the `@flarenetwork/flare-periphery-contracts` package's `ContractRegistry`. It simplifies access to these contracts from other contracts or off-chain scripts.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/address-validity.mdx#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.25;\n\nimport {console} from \"hardhat/console.sol\";\nimport {ContractRegistry} from \"@flarenetwork/flare-periphery-contracts/coston2/ContractRegistry.sol\";\nimport {IFdcHub} from \"@flarenetwork/flare-periphery-contracts/coston2/IFdcHub.sol\";\nimport {IFdcRequestFeeConfigurations} from\n    \"@flarenetwork/flare-periphery-contracts/coston2/IFdcRequestFeeConfigurations.sol\";\nimport {IFlareSystemsManager} from \"@flarenetwork/flare-periphery-contracts/coston2/IFlareSystemsManager.sol\";\nimport {IRelay} from \"@flarenetwork/flare-periphery-contracts/coston2/IRelay.sol\";\n\ncontract Helpers {\n    function getFdcHub() public view returns (IFdcHub) {\n        return ContractRegistry.getFdcHub();\n    }\n\n    function getFdcRequestFeeConfigurations() public view returns (IFdcRequestFeeConfigurations) {\n        return ContractRegistry.getFdcRequestFeeConfigurations();\n    }\n\n    function getFlareSystemsManager() public view returns (IFlareSystemsManager) {\n        return ContractRegistry.getFlareSystemsManager();\n    }\n\n    function getRelay() public view returns (IRelay) {\n        return ContractRegistry.getRelay();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Signing Policy Initialization Block in Solidity\nDESCRIPTION: Defines the `newSigningPolicyInitializationStartBlockNumber` function interface. This view function returns the block number at which the initialization for the new signing policy begins for a given reward epoch. This block acts as a snapshot for the voter addresses. Returns zero if the specified reward epoch is not supported.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IVoterRegistry.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction newSigningPolicyInitializationStartBlockNumber(\n    uint256 _rewardEpochId\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Tests for FTSOv2 Consumer Contract - Solidity\nDESCRIPTION: Provides a Solidity test suite for the FTSOv2FeedConsumer contract, intended for src/test/FtsoV2FeedConsumer.t.sol. Uses Foundry's forge-std testing framework. Covers test cases for verifying price readout and fee logic. All dependencies must be installed, including forge-std and flare-periphery. Expected input: deployed contract. Output: test results indicating contract correctness, logs. Limitations: must be used with Foundry's forge test tools.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/build-first-app.mdx#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\n{FtsoV2FeedConsumerTest}\n```\n\n----------------------------------------\n\nTITLE: Defining EVM Transaction Attestation Request Body in Solidity\nDESCRIPTION: This Solidity code defines the `RequestBody` struct used to structure a request for attesting to an EVM transaction's details. It includes fields for the transaction hash, required block confirmations, flags to optionally include transaction input data (`provideInput`) and event logs (`listEvents`), and an array (`logIndices`) to specify which event logs should be included in the response (up to 50). An empty `logIndices` array when `listEvents` is true requests all events (capped at 50).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-connectivity.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @notice Request body for EVM transaction attestation type\n     * @custom:below Note that events (logs) are indexed in block not in each transaction. The contract that uses the attestation should specify the order of event logs as needed and the requestor should sort `logIndices`\n     * with respect to the set specifications. If possible, the contact should only require one `logIndex`.\n     * @param transactionHash Hash of the transaction(transactionHash).\n     * @param requiredConfirmations The height at which a block is considered confirmed by the requestor.\n     * @param provideInput If true, \"input\" field is included in the response.\n     * @param listEvents If true, events indicated by `logIndices` are included in the response. Otherwise, no events are included in the response.\n     * @param logIndices If `listEvents` is `false`, this should be an empty list, otherwise, the request is rejected. If `listEvents` is `true`, this is the list of indices (logIndex) of the events to be relayed (sorted by the requestor). The array should contain at most 50 indices. If empty, it indicates all events in order capped by 50.\n     */\n    struct RequestBody {\n        bytes32 transactionHash;\n        uint16 requiredConfirmations;\n        bool provideInput;\n        bool listEvents;\n        uint32[] logIndices;\n    }\n```\n\n----------------------------------------\n\nTITLE: Fetching Contract ABI from Flare Explorer API - Mainnet - JavaScript\nDESCRIPTION: This code fetches the contract ABI from the Flare Blockchain Explorer API for the mainnet using web3.js and a suitable HTTP library such as axios or fetch. It queries the REST API endpoint for the target contract, returning the ABI JSON. Requires a correct contract address and API endpoint for mainnet.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-javascript-developers.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/* Code for FetchAbiFlare loaded from external file - not shown here */\n```\n\n----------------------------------------\n\nTITLE: Preparing Proof Request Data in Solidity Script (Foundry)\nDESCRIPTION: This snippet outlines the setup within a Foundry script (`RetrieveDataAndProof`) for preparing a proof request. It reads environment variables (URL, API key) and data from files (round ID, request bytes), then prepares HTTP headers (using `prepareHeaders`, not shown) and constructs the JSON request body using the retrieved data. It logs the prepared data before proceeding (indicated by `...`). Uses `vm.envString`, `vm.readLine`, `string.concat` and the `Surl` library.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\n```solidity title=\"scrip/fdcExample/Payment.s.sol\"\ncontract RetrieveDataAndProof is Script {\n using Surl for *;\n\n function run() external {\n string memory daLayerUrl = vm.envString(\"COSTON2_DA_LAYER_URL\");\n string memory apiKey = vm.envString(\"X_API_KEY\");\n string memory fileName = string.concat(attestationTypeName, \".txt\");\n string memory filePath = string.concat(dirPath, fileName);\n\n // We import the roundId and abiEncodedRequest from the first file\n string memory votingRoundId = vm.readLine(filePath);\n string memory requestBytes = vm.readLine(filePath);\n console.log(\"votingRoundId: %s\\n\", votingRoundId);\n console.log(\"requestBytes: %s\\n\", requestBytes);\n\n // Preparing the proof request\n string[] memory headers = prepareHeaders(apiKey);\n string memory body = string.concat(\n '{\"votingRoundId\":',\n votingRoundId,\n ',\"requestBytes\":\"',\n requestBytes,\n '\"}'\n );\n console.log(\"body: %s\\n\", body);\n console.log(\n \"headers: %s\",\n string.concat(\"{\", headers[0], \", \", headers[1]),\n \"}\\n\"\n );\n\n ...\n }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing withdraw Function in Solidity\nDESCRIPTION: Function allowing withdrawal of WNat tokens from RNat account to owner account with wrapping options.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IRNat.md#2025-04-22_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction withdraw(\n    uint128 _amount,\n    bool _wrap\n) external;\n```\n\n----------------------------------------\n\nTITLE: Calculating FDC Request Fee in TypeScript\nDESCRIPTION: This asynchronous TypeScript function `getFdcRequestFee` calculates the required fee for submitting a specific FDC attestation request. It utilizes the `Helpers` contract (via `getHelpers`) to find the address of the `FdcRequestFeeConfigurations` contract, connects to it, and then calls its `getRequestFee` method, passing the ABI-encoded request string. The function returns the calculated fee.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/json-api.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getFdcRequestFee(abiEncodedRequest: string) {\n  const helpers: HelpersInstance = await getHelpers();\n  const fdcRequestFeeConfigurationsAddress: string =\n    await helpers.getFdcRequestFeeConfigurations();\n  const fdcRequestFeeConfigurations: IFdcRequestFeeConfigurationsInstance =\n    await FdcRequestFeeConfigurations.at(fdcRequestFeeConfigurationsAddress);\n  return await fdcRequestFeeConfigurations.getRequestFee(abiEncodedRequest);\n}\n```\n\n----------------------------------------\n\nTITLE: Calling requestAttestation on FdcHub in Solidity\nDESCRIPTION: This line executes the core action of submitting the attestation request. It calls the `requestAttestation` function on the `fdcHub` contract instance, passing the `abiEncodedRequest` (named `response.abiEncodedRequest` in this context) as an argument and specifying the required `requestFee` using the `{value: requestFee}` syntax to send Flare tokens (FLR) with the call.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\n fdcHub.requestAttestation{value: requestFee}(response.abiEncodedRequest);\n```\n\n----------------------------------------\n\nTITLE: Implementing PaymentRegistry Contract in Solidity\nDESCRIPTION: Defines the main contract for verifying and storing payment proofs. It uses Flare's State Connector to validate transactions before storing them.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_28\n\nLANGUAGE: solidity\nCODE:\n```\ncontract PaymentRegistry is IPaymentRegistry {\n    Payment[] public verifiedPayments;\n\n    function isPaymentProofValid(\n        IPayment.Proof calldata transaction\n    ) public view returns (bool) {\n        // Use the library to get the verifier contract and verify that this transaction was proved by state connector\n        IFdcVerification fdc = ContractRegistry.getFdcVerification();\n        console.log(\"transaction: %s\\n\", FdcStrings.toJsonString(transaction));\n        // return true;\n        return fdc.verifyPayment(transaction);\n    }\n\n    function registerPayment(IPayment.Proof calldata _transaction) external {\n        // 1. FDC Logic\n        // Check that this Payment has indeed been confirmed by the FDC\n        require(isPaymentProofValid(_transaction), \"Invalid transaction proof\");\n\n        // 2. Business logic\n        Payment memory provedPayment = Payment(\n            _transaction.data.responseBody.blockNumber,\n            _transaction.data.responseBody.blockTimestamp,\n            _transaction.data.responseBody.sourceAddressHash,\n            _transaction.data.responseBody.receivingAddressHash,\n            _transaction.data.responseBody.spentAmount,\n            _transaction.data.responseBody.standardPaymentReference,\n            _transaction.data.responseBody.status\n        );\n\n        verifiedPayments.push(provedPayment);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting and Updating FAssets Agent with Docker Compose\nDESCRIPTION: This bash script provides a sequence of commands to stop the current Docker containers, pull the latest updates, list agents for a specific FAsset, and restart the service. The FASSET placeholder should be replaced with FXRP, FDOGE, or FBTC.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/_restart_docker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\ngit pull\ndocker compose pull\ndocker compose --profile cli run agent-bot listAgents --fasset FASSET\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Initializing Proof of Reserves Verification Script in TypeScript\nDESCRIPTION: This snippet shows the initial setup for the `verifyProofOfReserves.ts` script. It imports necessary Hardhat modules, typechain types (`ProofOfReservesInstance`, `IRelayInstance`), helper functions from a shared `Base.ts` file (likely related to Flare Data Connector interactions), configuration data (addresses, transaction hashes) from `config.ts`, and the `ProofOfReserves` contract artifact. It also imports environment variables related to verifier URLs, API keys, and the Data Availability Layer URL, which are crucial for interacting with Flare's attestation infrastructure.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript title=\"scripts/proofOfReserves/verifyProofOfReserves.ts\"\nimport hre from \"hardhat\";\nimport { ProofOfReservesInstance, IRelayInstance } from \"../../typechain-types\";\nimport {\n  prepareAttestationRequestBase,\n  getFdcHub,\n  getFdcRequestFee,\n  getRelay,\n  calculateRoundId,\n  postRequestToDALayer,\n  sleep,\n} from \"../fdcExample/Base\";\nimport {\n  tokenAddresses,\n  readerAddresses,\n  proofOfReservesAddress,\n  transactionHashes,\n} from \"./config\";\n\nconst ProofOfReserves = artifacts.require(\"ProofOfReserves\");\n\nconst {\n  VERIFIER_URL_TESTNET,\n  VERIFIER_API_KEY,\n  JQ_VERIFIER_URL_TESTNET,\n  JQ_VERIFIER_API_KEY,\n  COSTON2_DA_LAYER_URL,\n} = process.env;\n\n...\n```\n```\n\n----------------------------------------\n\nTITLE: Emitting Voter Registration Info Event - Solidity\nDESCRIPTION: Declares an event that is emitted whenever a voter's registration info and corresponding weight are calculated. The event carries parameters such as voter and delegation addresses, epoch identifier, delegation fee, weight measures, and arrays for node identifiers and weights. This enables off-chain indexing and on-chain traceability for voter status throughout the ecosystem. No function emits are shown, as this is an interface declaration.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IFlareSystemsCalculator.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nevent VoterRegistrationInfo(\n    address voter,\n    uint24 rewardEpochId,\n    address delegationAddress,\n    uint16 delegationFeeBIPS,\n    uint256 wNatWeight,\n    uint256 wNatCappedWeight,\n    bytes20[] nodeIds,\n    uint256[] nodeWeights\n)\n```\n\n----------------------------------------\n\nTITLE: Deploying FtsoV2FeedConsumer Contract using Forge (Bash)\nDESCRIPTION: Uses the `forge create` command to compile and deploy the `FtsoV2FeedConsumer` contract (located at `src/FtsoV2FeedConsumer.sol`) to the Coston2 testnet. It uses the previously set environment variables for the private key (`$ACCOUNT_PRIVATE_KEY`), RPC URL (`$RPC_URL`), and constructor arguments (`$FTSOV2_COSTON2`, `$FEECALCULATOR_COSTON2`, `$FLRUSD_FEED_ID`).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/build-first-app.mdx#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nforge create src/FtsoV2FeedConsumer.sol:FtsoV2FeedConsumer --private-key $ACCOUNT_PRIVATE_KEY --rpc-url $RPC_URL --constructor-args $FTSOV2_COSTON2 $FEECALCULATOR_COSTON2 $FLRUSD_FEED_ID\n```\n\n----------------------------------------\n\nTITLE: Interacting with PaymentRegistry Contract in Solidity\nDESCRIPTION: Script to interact with the deployed PaymentRegistry contract, reading proof data from a file and calling the registerPayment method.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_31\n\nLANGUAGE: solidity\nCODE:\n```\ncontract InteractWithContract is Script {\n    function run() external {\n        string memory addressString = vm.readLine(\n            string.concat(dirPath, attestationTypeName, \"_address\", \".txt\")\n        );\n        address _address = vm.parseAddress(addressString);\n        string memory proofString = vm.readLine(\n            string.concat(dirPath, attestationTypeName, \"_proof\", \".txt\")\n        );\n        bytes memory proofBytes = vm.parseBytes(proofString);\n        IPayment.Proof memory proof = abi.decode(proofBytes, (IPayment.Proof));\n        uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n        vm.startBroadcast(deployerPrivateKey);\n        IPaymentRegistry registry = IPaymentRegistry(_address);\n        registry.registerPayment(proof);\n        vm.stopBroadcast();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Agent Information with User Bot CLI\nDESCRIPTION: Shows detailed information about a specific FAssets agent. Requires the agent's vault address (`<agentVaultAddress>`) as an argument and the FAsset symbol (via the required `--fasset` flag).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/user-bot.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn user-bot agentInfo <agentVaultAddress>\n```\n\n----------------------------------------\n\nTITLE: Placeholder for FDC Transfer Event Listener Contract in Solidity\nDESCRIPTION: Represents a Solidity smart contract example (`FDCTransferEventListener.sol`) designed to process FDC EVM transaction responses. This contract first verifies the received proof using `isEVMTransactionProofValid` obtained via `ContractRegistry` and then processes the events using a function like `collectTransferEvents` to filter and handle specific events (e.g., USDC Transfers).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/2-getting-started.mdx#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\n<CodeBlock language=\"solidity\" title=\"FDCTransferEventListener.sol\">\n  {FDCTransferEventListener}\n</CodeBlock>\n```\n\n----------------------------------------\n\nTITLE: Defining getCurrentFeed Query Logic in Solidity\nDESCRIPTION: Defines a view function to retrieve the most recent feed associated with a provided feed ID (bytes21). This function is externally accessible, read-only, and returns a Feed structure containing voting round id, id, value, turnoutBIPS, and decimals. Accepts parameter _feedId (bytes21); returns the latest feed record for the given ID.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/solidity-reference/IFtsoFeedPublisher.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getCurrentFeed(\n    bytes21 _feedId\n) external view returns (\n    struct IFtsoFeedPublisher.Feed\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Attestation Request Parameters in TypeScript\nDESCRIPTION: Defines the configuration constants and example values needed to prepare a Payment attestation request. This includes the transaction ID, UTXO indexes, and source identifiers specific to the chosen blockchain (XRP in this example).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Request data\nconst transactionId =\n  \"2A3E7C7F6077B4D12207A9F063515EACE70FBBF3C55514CD8BD659D4AB721447\";\nconst inUtxo = \"0\";\nconst utxo = \"0\";\n\n// Configuration constants\nconst attestationTypeBase = \"Payment\";\nconst sourceIdBase = \"testXRP\";\nconst verifierUrlBase = VERIFIER_URL_TESTNET;\nconst urlTypeBase = \"xrp\";\n```\n\n----------------------------------------\n\nTITLE: Contract Interaction Implementation\nDESCRIPTION: TypeScript function to interact with the deployed contract, process proofs, and add character data.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/json-api.mdx#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nasync function interactWithContract(\n  characterList: StarWarsCharacterListInstance,\n  proof: any,\n) {\n  console.log(\"Proof hex:\", proof.response_hex, \"\\n\");\n\n  const IJsonApiVerification = await artifacts.require(\"IJsonApiVerification\");\n  const responseType =\n    IJsonApiVerification._json.abi[0].inputs[0].components[1];\n  console.log(\"Response type:\", responseType, \"\\n\");\n\n  const decodedResponse = web3.eth.abi.decodeParameter(\n    responseType,\n    proof.response_hex,\n  );\n  console.log(\"Decoded proof:\", decodedResponse, \"\\n\");\n  const transaction = await characterList.addCharacter({\n    merkleProof: proof.proof,\n    data: decodedResponse,\n  });\n  console.log(\"Transaction:\", transaction.tx, \"\\n\");\n  console.log(\n    \"Star Wars Characters:\\n\",\n    await characterList.getAllCharacters(),\n    \"\\n\",\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Verifier Response using Foundry Cheatsheet in Solidity\nDESCRIPTION: Defines an internal pure Solidity function `parseAttestationRequest` designed to run within a Foundry testing/scripting environment. It takes raw bytes `data` (presumably the HTTP response body), converts it to a string, parses it as JSON using the Foundry cheatcode `vm.parseJson`, and then ABI-decodes the JSON data into a custom `AttestationResponse` struct. It logs the status and the extracted `abiEncodedRequest` before returning the struct.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction parseAttestationRequest(\n bytes memory data\n) internal pure returns (AttestationResponse memory) {\n string memory dataString = string(data);\n bytes memory dataJson = vm.parseJson(dataString);\n\n AttestationResponse memory response = abi.decode(\n dataJson,\n (AttestationResponse)\n );\n\n console.log(\"response status: %s\\n\", response.status);\n console.log(\"response abiEncodedRequest: \");\n console.logBytes(response.abiEncodedRequest);\n console.log(\"\\n\");\n\n return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flare Mainnet Node\nDESCRIPTION: Command to run a node on the Flare Mainnet network. It uses curl to fetch bootstrap IPs and IDs dynamically.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./build/avalanchego \\\n  --network-id=flare \\\n  --http-host= \\\n  --bootstrap-ips=\"$(curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' -H 'content-type:application/json;' https://flare-bootstrap.flare.network/ext/info | jq -r \".result.ip\")\" \\\n  --bootstrap-ids=\"$(curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' -H 'content-type:application/json;' https://flare-bootstrap.flare.network/ext/info | jq -r \".result.nodeID\")\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Delegation Account in Solidity\nDESCRIPTION: Creates a delegation account contract to receive airdrop and FTSO rewards when using automatic claiming. Returns the address of the delegation account contract.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction enableDelegationAccount(\n) external returns (\n    contract IDelegationAccount);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Reward Epoch Id - Solidity Interface\nDESCRIPTION: Defines 'getCurrentRewardEpochId', returning the active reward epoch's id. Intended for tracking epoch status within the contract lifecycle.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRewardManager.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getCurrentRewardEpochId(\n) external view returns (\n    uint24\n);\n```\n\n----------------------------------------\n\nTITLE: Defining TokenTransfer Structure in Solidity\nDESCRIPTION: A simple struct definition that represents a token transfer event with sender address, recipient address, and transfer value.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/evm-transaction.mdx#2025-04-22_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nstruct TokenTransfer {\n    address from;\n    address to;\n    uint256 value;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing readReserves Function for EVMTransaction Proof in Solidity\nDESCRIPTION: This function processes EVMTransaction proofs by validating each event, checking if it originates from the correct tokenStateReader contract, and aggregating the total token supply across all valid events.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction readReserves(IEVMTransaction.Proof calldata proof) private returns (uint256) {\n    require(isValidProof(proof), \"Invalid transaction proof\");\n    uint256 totalSupply = 0;\n    for (uint256 i = 0; i < proof.data.responseBody.events.length; i++) {\n        IEVMTransaction.Event memory _event = proof.data.responseBody.events[i];\n        address readerAddress = _event.emitterAddress;\n        (address tokenAddress, uint256 supply) = abi.decode(_event.data, (address, uint256));\n        bool correctTokenAndReaderAddress = tokenStateReaders[readerAddress] == tokenAddress;\n        if (correctTokenAndReaderAddress) {\n            totalSupply += supply;\n            emit GoodPair(readerAddress, tokenAddress, supply);\n        } else {\n            emit BadPair(readerAddress, tokenAddress, supply);\n        }\n    }\n    return totalSupply;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Payment Nonexistence Verification in Solidity\nDESCRIPTION: A Solidity smart contract (`PaymentDeadlineEnforcer`) demonstrating how to interact with Flare's FDC Hub and Verification contracts. It allows creating payment agreements, requesting attestation type 0x04 (ReferencedPaymentNonexistence) to check if a specific payment was missed by its deadline, and verifying the proof returned by the Flare network to potentially trigger liquidation logic. Key functions include `createAgreement`, `checkPaymentMissed` (submitting the request to FDC Hub), and `verifyMissedPayment` (verifying the proof using FdcVerification).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IReferencedPaymentNonexistence.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/IFdcHub.sol\";\nimport \"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/IFdcVerification.sol\";\nimport \"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/fdc/IReferencedPaymentNonexistence.sol\";\n\ncontract PaymentDeadlineEnforcer {\n    IFdcHub private fdcHub;\n    IFdcVerification private fdcVerification;\n\n    bytes32 private constant ATTESTATION_TYPE_PAYMENT_NONEXISTENCE = 0x0400000000000000000000000000000000000000000000000000000000000000;\n    bytes32 private constant SOURCE_ID_BTC = 0x4254430000000000000000000000000000000000000000000000000000000000;\n\n    struct Agreement {\n        bytes32 destinationAddressHash;\n        uint256 amount;\n        bytes32 paymentReference;\n        uint64 startBlockNumber;\n        uint64 deadlineBlockNumber;\n        uint64 deadlineTimestamp;\n        bool checkSourceAddresses;\n        bytes32 sourceAddressesRoot;\n        bool liquidated;\n    }\n\n    mapping(uint256 => Agreement) public agreements;\n    uint256 public nextAgreementId;\n\n    constructor(address _fdcHubAddress, address _fdcVerificationAddress) {\n        fdcHub = IFdcHub(_fdcHubAddress);\n        fdcVerification = IFdcVerification(_fdcVerificationAddress);\n    }\n\n    // Create a new payment agreement\n    function createAgreement(\n        bytes32 destinationAddressHash,\n        uint256 amount,\n        bytes32 paymentReference,\n        uint64 startBlockNumber,\n        uint64 deadlineBlockNumber,\n        uint64 deadlineTimestamp,\n        bool checkSourceAddresses,\n        bytes32 sourceAddressesRoot\n    ) external returns (uint256 agreementId) {\n        require(paymentReference != bytes32(0), \"Payment reference cannot be zero\");\n\n        agreementId = nextAgreementId++;\n\n        agreements[agreementId] = Agreement({\n            destinationAddressHash: destinationAddressHash,\n            amount: amount,\n            paymentReference: paymentReference,\n            startBlockNumber: startBlockNumber,\n            deadlineBlockNumber: deadlineBlockNumber,\n            deadlineTimestamp: deadlineTimestamp,\n            checkSourceAddresses: checkSourceAddresses,\n            sourceAddressesRoot: sourceAddressesRoot,\n            liquidated: false\n        });\n\n        return agreementId;\n    }\n\n    // Request verification of payment nonexistence for an agreement\n    function checkPaymentMissed(uint256 agreementId) external payable {\n        Agreement storage agreement = agreements[agreementId];\n        require(!agreement.liquidated, \"Agreement already liquidated\");\n\n        // Create request body\n        IReferencedPaymentNonexistence.RequestBody memory requestBody = IReferencedPaymentNonexistence.RequestBody({\n            minimalBlockNumber: agreement.startBlockNumber,\n            deadlineBlockNumber: agreement.deadlineBlockNumber,\n            deadlineTimestamp: agreement.deadlineTimestamp,\n            destinationAddressHash: agreement.destinationAddressHash,\n            amount: agreement.amount,\n            standardPaymentReference: agreement.paymentReference,\n            checkSourceAddresses: agreement.checkSourceAddresses,\n            sourceAddressesRoot: agreement.sourceAddressesRoot\n        });\n\n        // Encode the full request\n        bytes memory encodedRequest = abi.encode(\n            ATTESTATION_TYPE_PAYMENT_NONEXISTENCE,\n            SOURCE_ID_BTC,\n            bytes32(0), // messageIntegrityCode (would need to be calculated properly)\n            requestBody\n        );\n\n        // Submit the request with payment\n        fdcHub.requestAttestation{value: msg.value}(encodedRequest);\n    }\n\n    // Verify a provided proof of payment nonexistence and trigger liquidation\n    function verifyMissedPayment(uint256 agreementId, IReferencedPaymentNonexistence.Proof calldata _proof)\n        external\n        returns (bool liquidated)\n    {\n        Agreement storage agreement = agreements[agreementId];\n        require(!agreement.liquidated, \"Agreement already liquidated\");\n\n        // Verify the proof using FdcVerification\n        bool proofVerified = fdcVerification.verifyReferencedPaymentNonexistence(_proof);\n\n        if (proofVerified) {\n            // Extract request details and validate they match our agreement\n            IReferencedPaymentNonexistence.RequestBody memory request = _proof.data.requestBody;\n\n            // Verify this proof is for the correct agreement\n            require(\n                request.minimalBlockNumber == agreement.startBlockNumber &&\n                request.deadlineBlockNumber == agreement.deadlineBlockNumber &&\n                request.deadlineTimestamp == agreement.deadlineTimestamp &&\n                request.destinationAddressHash == agreement.destinationAddressHash &&\n                request.amount == agreement.amount &&\n                request.standardPaymentReference == agreement.paymentReference,\n                \"Proof does not match agreement\"\n            );\n\n            // Mark the agreement as liquidated\n            agreement.liquidated = true;\n\n            // Trigger liquidation logic here\n            // ...\n\n            return true;\n        }\n\n        return false;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Verifying Payment in Solidity\nDESCRIPTION: This function verifies a proof for a payment transaction. It takes an IPayment.Proof structure and returns a boolean indicating if the proof is valid.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IFdcVerification.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction verifyPayment(\n    struct IPayment.Proof _proof\n) external view returns (\n    bool _proved\n);\n```\n\n----------------------------------------\n\nTITLE: Preparing FDC Attestation Request in TypeScript\nDESCRIPTION: TypeScript implementation for preparing an FDC attestation request to verify EVM transaction data. Uses external verifier service to encode transaction data in FDC-compatible format.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/2-getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{PrepareRequest}\n```\n\n----------------------------------------\n\nTITLE: Querying Voter by Submit Signatures Address - Solidity\nDESCRIPTION: Returns the voter entity associated with the specified submit signatures address at a certain block. Accepts submit signatures address and block number as input parameters, returning the appropriate voter address. Helps in tracking multi-signature submit histories.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getVoterForSubmitSignaturesAddress(\n    address _submitSignaturesAddress,\n    uint256 _blockNumber\n) external view returns (\n    address _voter\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing FDC Hub Contract via Registry in Solidity\nDESCRIPTION: This snippet shows how to obtain an instance of the `IFdcHub` contract using the `ContractRegistry` library (presumably from `flare-periphery`). It then logs the address of the retrieved `FdcHub` contract.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\n```solidity\n   IFdcHub fdcHub = ContractRegistry.getFdcHub();\n   console.log(\"fcdHub address:\");\n   console.log(address(fdcHub));\n   console.log(\"\\n\");\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Finalization Status in Solidity\nDESCRIPTION: Declares the `isFinalized` function in the IRelay interface. This view function checks if finalization has occurred for a specific `_protocolId` and `_votingRoundId`, returning true if it has, and false otherwise.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRelay.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isFinalized(\n    uint256 _protocolId,\n    uint256 _votingRoundId\n) external view returns (\n    bool\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data and Proof from DA Layer - TypeScript\nDESCRIPTION: Implements an asynchronous function 'retrieveDataAndProofBase' that polls the Flare DA Layer until a requested voting round is finalized, then posts a proof request to the DA Layer, waiting and retrying for a valid response as needed. Relies on helper functions 'getRelay', 'sleep', and 'postRequestToDALayer'. Inputs are the DA Layer URL, ABI-encoded attestation request, and the round ID. Outputs the proof object. Suitable for handling response delays and retrying failed requests.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nasync function retrieveDataAndProofBase(\n  url: string,\n  abiEncodedRequest: string,\n  roundId: number,\n) {\n  console.log(\"Waiting for the round to finalize...\");\n  // We check every 10 seconds if the round is finalized\n  const relay: IRelayInstance = await getRelay();\n  while (!(await relay.isFinalized(200, roundId))) {\n    await sleep(10000);\n  }\n  console.log(\"Round finalized!\\n\");\n\n  const request = {\n    votingRoundId: roundId,\n    requestBytes: abiEncodedRequest,\n  };\n  console.log(\"Prepared request:\\n\", request, \"\\n\");\n\n  await sleep(10000);\n  var proof = await postRequestToDALayer(url, request, true);\n  console.log(\"Waiting for the DA Layer to generate the proof...\");\n  while (proof.response_hex == undefined) {\n    await sleep(5000);\n    proof = await postRequestToDALayer(url, request, false);\n  }\n  console.log(\"Proof generated!\\n\");\n\n  console.log(\"Proof:\", proof, \"\\n\");\n  return proof;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Signing Policy Non-Punishable Block Duration - Solidity\nDESCRIPTION: Defines an interface function to retrieve the number of non-punishable blocks for a new signing policy. This external view function returns a uint64 and is meant to inform other contracts of current policy constraints related to non-punishable durations. Used without parameters; requires Solidity-supporting infrastructure.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IFlareSystemsCalculator.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction signingPolicySignNonPunishableDurationBlocks(\n) external view returns (\n    uint64\n);\n```\n\n----------------------------------------\n\nTITLE: Proving XRPL Balance Decrease Transaction with Attestation API - TypeScript\nDESCRIPTION: This TypeScript example demonstrates interacting with the XRP Ledger and an attestation verifier API to create a payment transaction, wait for confirmation, and then prove a balance decrease for a given address. It features modular utilities for hex conversion, attestation API calls, and XRPL client usage. Required dependencies include `xrpl`, `web3`, and access to the attestation verifier endpoint with correct credentials set via environment variables. Inputs include a message, amount, and target address; outputs are printed to the console including API responses and processed results such as the payment reference. The approach requires access to a funded XRPL wallet and appropriate API keys, and may involve up to 10 seconds of waiting for XRPL transaction confirmation.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/detect-balance-decrease.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst xrpl = require(\"xrpl\");\n\nconst {\n  XRPL_PRIVATE_KEY,\n  ATTESTATION_URL,\n  ATTESTATION_API_KEY,\n  USE_TESTNET_ATTESTATIONS,\n} = process.env;\nconst receiverAddress = \"r9RLXvWuRro3RX33pk4xsN58tefYZ8Tvbj\";\n\nfunction toHex(data: string): string {\n  var result = \"\";\n  for (var i = 0; i < data.length; i++) {\n    result += data.charCodeAt(i).toString(16);\n  }\n  return \"0x\" + result.padEnd(64, \"0\");\n}\n\nfunction fromHex(data: string): string {\n  data = data.replace(/^(0x\\.)/, \"\");\n  return data\n    .split(/(\\w\\w)/g)\n    .filter((p) => !!p)\n    .map((c) => String.fromCharCode(parseInt(c, 16)))\n    .join(\"\");\n}\n\nasync function prepareAttestationResponse(\n  attestationType: string,\n  network: string,\n  sourceId: string,\n  requestBody: any,\n): Promise<AttestationResponse> {\n  const response = await fetch(\n    `${ATTESTATION_URL}/verifier/${network}/${attestationType}/prepareResponse`,\n    {\n      method: \"POST\",\n      headers: {\n        \"X-API-KEY\": ATTESTATION_API_KEY as string,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        attestationType: toHex(attestationType),\n        sourceId: toHex(sourceId),\n        requestBody: requestBody,\n      }),\n    },\n  );\n  const data = await response.json();\n  return data;\n}\n\nasync function getXRPLclient(): Promise<any> {\n  const client = new xrpl.Client(\"wss://s.altnet.rippletest.net:51233\");\n  await client.connect();\n\n  return client;\n}\n\nasync function sendXRPLTransaction(\n  message: string = \"\",\n  amount: number = 10,\n  target: string = \"r9RLXvWuRro3RX33pk4xsN58tefYZ8Tvbj\",\n): Promise<string> {\n  const client = await getXRPLclient();\n\n  const test_wallet = xrpl.Wallet.fromSeed(XRPL_PRIVATE_KEY);\n\n  let memos = [];\n  if (message) {\n    // Standard payment reference must be 32 bytes - so we right pad with 0\n    const MemoData = xrpl.convertStringToHex(message).padEnd(64, \"0\");\n    const MemoType = xrpl.convertStringToHex(\"Text\");\n    const MemoFormat = xrpl.convertStringToHex(\"text/plain\");\n\n    memos.push({\n      Memo: {\n        MemoType: MemoType,\n        MemoData: MemoData,\n        MemoFormat: MemoFormat,\n      },\n    });\n  }\n\n  const transaction = await client.autofill({\n    TransactionType: \"Payment\",\n    Account: test_wallet.address,\n    Amount: amount.toString(),\n    Destination: target,\n    Memos: memos,\n  });\n\n  const signed = test_wallet.sign(transaction);\n  console.log(\n    `See transaction at https://testnet.xrpl.org/transactions/${signed.hash}`,\n  );\n  await client.submitAndWait(signed.tx_blob);\n\n  await client.disconnect();\n\n  // sleep for 10 seconds to allow the transaction to be processed\n  await new Promise((resolve) => setTimeout(resolve, 10 * 1000));\n\n  const result = await prepareAttestationResponse(\n    \"BalanceDecreasingTransaction\",\n    \"xrp\",\n    \"testXRP\",\n    {\n      transactionId: \"0x\" + signed.hash,\n      sourceAddressIndicator: web3.utils.soliditySha3(test_wallet.address),\n    },\n  );\n\n  console.log(result);\n\n  console.log(fromHex(result.response.responseBody.standardPaymentReference));\n}\n\nasync function main() {\n  await sendXRPLTransaction(\"Hello world!\");\n}\n\nmain().then(() => process.exit(0));\n```\n\n----------------------------------------\n\nTITLE: Listing User's Pool Holdings with User Bot CLI\nDESCRIPTION: Displays detailed information about the collateral pools in which the current user holds Collateral Pool Tokens (CPTs). Requires the FAsset symbol (via the required `--fasset` flag). Lists pool address, token symbol, and the amount of pool tokens held.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/user-bot.mdx#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nyarn user-bot poolHoldings\n```\n\n----------------------------------------\n\nTITLE: Reading Persisted Data from Files - Solidity Foundry\nDESCRIPTION: Demonstrates retrieving previously saved request data and voting round identifiers from files using Foundry's `vm.readLine`. Expected file paths are often dynamically generated or constructed using context variables, supporting multi-type attestation flows. Output variables are used later for API requests or contract submissions.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/address-validity.mdx#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory votingRoundId = vm.readLine(filePath);\nstring memory requestBytes = vm.readLine(filePath);\n\n```\n\n----------------------------------------\n\nTITLE: Querying Latest BlockNumber via RPC - Flare Mainnet - web3.py Python\nDESCRIPTION: This Python snippet employs the web3.py library to connect to Flare Mainnet's RPC endpoint and retrieve the current block number via the \\\"eth_blockNumber\\\" method. Requires installation of web3.py and access to the Flare endpoint. The main parameter is the provider URI; output is the block number as an integer. Designed for integration in Python-based applications.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/0-overview.mdx#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n{BlockNumFlarePy}\n```\n\n----------------------------------------\n\nTITLE: Global Redemption Queue Query in Solidity\nDESCRIPTION: Function to retrieve the global redemption queue with pagination support. Returns an array of RedemptionTicketInfo structs and the next ticket ID for cursor-based pagination.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/IAssetManager.mdx#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction redemptionQueue(\n    uint256 _firstRedemptionTicketId,\n    uint256 _pageSize\n) external view\n    returns (RedemptionTicketInfo.Data[] memory _queue, uint256 _nextRedemptionTicketId);\n```\n\n----------------------------------------\n\nTITLE: Calculating FDC Voting Round ID in TypeScript\nDESCRIPTION: This asynchronous TypeScript function `calculateRoundId` determines the Flare voting round ID associated with a specific transaction. It fetches the transaction's block timestamp, retrieves the `FlareSystemsManager` contract instance using `getFlareSystemsManager`, gets critical timing parameters (`firstVotingRoundStartTs`, `votingEpochDurationSeconds`) from this contract, calculates the round ID based on these values and the block timestamp, and returns the calculated ID. It logs relevant timing information and the calculated round ID.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/json-api.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nasync function calculateRoundId(transaction: any) {\n  const blockNumber = transaction.receipt.blockNumber;\n  const block = await ethers.provider.getBlock(blockNumber);\n  const blockTimestamp = BigInt(block!.timestamp);\n\n  const flareSystemsManager: IFlareSystemsManagerInstance =\n    await getFlareSystemsManager();\n  const firsVotingRoundStartTs = BigInt(\n    await flareSystemsManager.firstVotingRoundStartTs(),\n  );\n  const votingEpochDurationSeconds = BigInt(\n    await flareSystemsManager.votingEpochDurationSeconds(),\n  );\n\n  console.log(\"Block timestamp:\", blockTimestamp, \"\\n\");\n  console.log(\"First voting round start ts:\", firsVotingRoundStartTs, \"\\n\");\n  console.log(\n    \"Voting epoch duration seconds:\",\n    votingEpochDurationSeconds,\n    \"\\n\",\n  );\n\n  const roundId = Number(\n    (blockTimestamp - firsVotingRoundStartTs) / votingEpochDurationSeconds,\n  );\n  console.log(\"Calculated round id:\", roundId, \"\\n\");\n  console.log(\n    \"Received round id:\",\n    Number(await flareSystemsManager.getCurrentVotingEpochId()),\n    \"\\n\",\n  );\n  return roundId;\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying EVM Transaction in Solidity\nDESCRIPTION: This function verifies a proof for an Ethereum Virtual Machine transaction. It takes an IEVMTransaction.Proof structure and returns a boolean indicating if the proof is valid.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IFdcVerification.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction verifyEVMTransaction(\n    struct IEVMTransaction.Proof _proof\n) external view returns (\n    bool _proved\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Asset Manager Settings in Solidity\nDESCRIPTION: Function to fetch complete asset manager settings returned as an AssetManagerSettings struct. Used to access operational parameters of the asset manager.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/IAssetManager.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getSettings()\n    external view\n    returns (AssetManagerSettings.Data memory);\n```\n\n----------------------------------------\n\nTITLE: Implementing Balance Decreasing Transaction Detection Interface in Solidity\nDESCRIPTION: The complete IBalanceDecreasingTransaction interface definition for detecting when an address on an external blockchain has decreased its balance or signed a transaction. This interface is used to provide evidence for potential violations of agreements and supports Bitcoin, Dogecoin, and XRP Ledger chains.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IBalanceDecreasingTransaction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name IBalanceDecreasingTransaction\n * @custom:id 0x02\n * @custom:supported BTC, DOGE, XRP\n * @author Flare\n * @notice A detection of a transaction that either decreases the balance for some address or is\n * signed by the source address.\n * Such an attestation could prove a violation of an agreement and therefore provides grounds to liquidate\n * some funds locked by a smart contract on Flare.\n *\n * A transaction is considered \"balance decreasing\" for the address, if the balance after the\n * transaction is lower than before or the address is among the signers of the transaction\n * (even if its balance is greater than before the transaction).\n * @custom:verification The transaction with `transactionId` is fetched from the API of the\n * source blockchain node or relevant indexer.\n * If the transaction cannot be fetched or the transaction is in a block that does not have a\n * sufficient number of confirmations, the attestation request is rejected.\n *\n * Once the transaction is received, the response fields are extracted if the transaction is balance\n * decreasing for the indicated address.\n * Some of the request and response fields are chain specific as described below.\n * The fields can be computed with the help of a balance decreasing summary.\n *\n * ### UTXO (Bitcoin and Dogecoin)\n *\n * - `sourceAddressIndicator` is the the index of the transaction input in hex padded to a 0x prefixed 32-byte string.\n * If the indicated input does not exist or the indicated input does not have the address,\n * the attestation request is rejected.\n * The `sourceAddress` is the address of the indicated transaction input.\n * - `spentAmount` is the sum of values of all inputs with sourceAddress minus the sum of\n * all outputs with `sourceAddress`.\n * Can be negative.\n * - `blockTimestamp` is the mediantime of a block.\n *\n * ### XRPL\n *\n * - `sourceAddressIndicator` is the standard address hash of the address whose balance has been decreased.\n * If the address indicated by `sourceAddressIndicator` is not among the signers of the transaction and the balance\n * of the address was not lowered in the transaction, the attestation request is rejected.\n *\n * - `spentAmount` is the difference between the balance of the indicated address after and before the transaction.\n * Can be negative.\n * - `blockTimestamp` is the close_time of a ledger converted to unix time.\n *\n * @custom:lut `blockTimestamp`\n * @custom:lutlimit `0x127500`, `0x127500`, `0x127500`\n */\ninterface IBalanceDecreasingTransaction {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\n     * @param requestBody Data defining the request. Type and interpretation is determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered.\n     * This is a security measure to prevent a collision of attestation hashes.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction of the\n     * response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for IBalanceDecreasingTransaction attestation type\n     * @param transactionId ID of the payment transaction.\n     * @param sourceAddressIndicator The indicator of the address whose balance has been decreased.\n     */\n    struct RequestBody {\n        bytes32 transactionId;\n        bytes32 sourceAddressIndicator;\n    }\n\n    /**\n     * @notice Response body for IBalanceDecreasingTransaction attestation type.\n     * @param blockNumber The number of the block in which the transaction is included.\n     * @param blockTimestamp The timestamp of the block in which the transaction is included.\n     * @param sourceAddressHash Standard address hash of the address indicated by the `sourceAddressIndicator`.\n     * @param spentAmount Amount spent by the source address in minimal units.\n     * @param standardPaymentReference Standard payment reference of the transaction.\n     */\n    struct ResponseBody {\n        uint64 blockNumber;\n        uint64 blockTimestamp;\n        bytes32 sourceAddressHash;\n        int256 spentAmount;\n        bytes32 standardPaymentReference;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Execute FAssets Redemption\nDESCRIPTION: Main function that orchestrates the FAssets redemption process including deployment, transfer, and event parsing.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/developer-guides/3-fassets-redeem.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  const fAssetsRedeem: FAssetsRedeemInstance = await deployAndVerifyContract();\n\n  const settings = await fAssetsRedeem.getSettings();\n  const lotSize = settings[0];\n  const decimals = settings[1];\n  console.log(\"Lot size:\", lotSize.toString());\n  console.log(\"Asset decimals:\", decimals.toString());\n\n  const amountToRedeem = Number(lotSize) * Number(LOTS_TO_REDEEM);\n  console.log(\n    `Required FXRP amount ${formatUnits(amountToRedeem, Number(decimals))} FXRP`,\n  );\n  console.log(`Required amount in base units: ${amountToRedeem.toString()}`);\n\n  await transferFXRP(fAssetsRedeem.address, amountToRedeem);\n\n  const tx = await fAssetsRedeem.redeem(LOTS_TO_REDEEM, UNDERLYING_ADDRESS);\n  console.log(\"TX receipt\", tx.receipt);\n\n  await parseRedemptionEvents(tx.receipt, fAssetsRedeem);\n}\n\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Claimable Month Range in Solidity\nDESCRIPTION: View function that returns the range of currently claimable months. This function reverts if no months are claimable, providing the first and last claimable months in the range.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IDistributionToDelegators.md#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getClaimableMonths(\n) external view returns (\n    uint256 _startMonth,\n    uint256 _endMonth);\n```\n\n----------------------------------------\n\nTITLE: Preparing Base Attestation Requests to Flare Verifier with TypeScript\nDESCRIPTION: This asynchronous function constructs a JSON attestation request body, encodes type and source fields using `toUtf8HexString`, and makes a POST request to a verifier server endpoint. It expects a `url`, `apiKey`, `attestationTypeBase`, `sourceIdBase`, and a pre-built `requestBody`. The function logs relevant details and verifies a successful response, finally returning the parsed JSON result. Dependencies include `fetch`, and the two encoding helpers. Response is thrown as an error if HTTP status is not 200. Requires network access and a valid API key.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/json-api.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync function prepareAttestationRequestBase(\n  url: string,\n  apiKey: string,\n  attestationTypeBase: string,\n  sourceIdBase: string,\n  requestBody: any,\n) {\n  console.log(\"Url:\", url, \"\\n\");\n  const attestationType = toUtf8HexString(attestationTypeBase);\n  const sourceId = toUtf8HexString(sourceIdBase);\n\n  const request = {\n    attestationType: attestationType,\n    sourceId: sourceId,\n    requestBody: requestBody,\n  };\n  console.log(\"Prepared request:\\n\", request, \"\\n\");\n\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"X-API-KEY\": apiKey,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(request),\n  });\n  if (response.status != 200) {\n    throw new Error(\n      `Response status is not OK, status ${response.status} ${response.statusText}\\n`,\n    );\n  }\n  console.log(\"Response status is OK\\n\");\n\n  return await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Contract with web3.py on Flare Coston2 Testnet - Python\nDESCRIPTION: This deployment script uses web3.py to deploy the compiled contract to the Coston2 testnet. Requires account credentials, compiled contract ABI, bytecode, and network setup. Returns the deployed contract address. Should only be run after compiling the contract and setting necessary environment variables.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-python-developers.mdx#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n{DeployContractCoston2}\n```\n\n----------------------------------------\n\nTITLE: Getting Last Initialized Reward Epoch Data in Solidity\nDESCRIPTION: Declares the `lastInitializedRewardEpochData` function in the IRelay interface. This view function returns the identifier of the last initialized reward epoch and the starting voting round ID for that epoch.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRelay.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction lastInitializedRewardEpochData(\n) external view returns (\n    uint32 _lastInitializedRewardEpoch,\n    uint32 _startingVotingRoundIdForLastInitializedRewardEpoch\n);\n```\n\n----------------------------------------\n\nTITLE: Defining FeedData Structure - Solidity\nDESCRIPTION: Shows the definition of FeedData, a struct capturing the round, feed ID, value, turnout in basis points, and decimals. This structure is prerequisite context for using functions that return or validate feed data and is used as part of the data payload in FTSOv2 operations. Parameters must be set according to feed metadata standards.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/FtsoV2Interface.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nstruct FeedData {\n  uint32 votingRoundId;\n  bytes21 id;\n  int32 value;\n  uint16 turnoutBIPS;\n  int8 decimals;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RedemptionRequested Event in Solidity\nDESCRIPTION: This event is emitted when a redeemer initiates the redemption process. It includes details such as the agent vault, redeemer address, request ID, payment information, and various parameters related to the redemption.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/IAssetManagerEvents.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nevent RedemptionRequested(\n    address indexed agentVault,\n    address indexed redeemer,\n    uint256 indexed requestId,\n    string paymentAddress,\n    uint256 valueUBA,\n    uint256 feeUBA,\n    uint256 firstUnderlyingBlock,\n    uint256 lastUnderlyingBlock,\n    uint256 lastUnderlyingTimestamp,\n    bytes32 paymentReference,\n    address executor,\n    uint256 executorFeeNatWei);\n```\n\n----------------------------------------\n\nTITLE: Querying FlareContractRegistry for WNat Contract Address - Go\nDESCRIPTION: These Go code snippets connect to a Flare-compatible RPC node and query the FlareContractRegistry contract for the address of the WNat contract. They use Go bindings generated for the ABI and depend on the ethclient, contract registry address, and correct network setup. Inputs are the contract address/ABI and node RPC; output is the queried contract address. The code must be tailored for the testnet (coston2) or mainnet package. Errors are handled if the node or contract is inaccessible.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-go-developers.mdx#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n{MakeQueryCoston2}\n```\n\nLANGUAGE: go\nCODE:\n```\n{MakeQueryFlare}\n```\n\n----------------------------------------\n\nTITLE: Verifying Off-Chain JSONAPI Proofs - Solidity\nDESCRIPTION: Offers a private helper function, isJsonApiProofValid, that delegates JSON API proof validation to an external contract obtained from a registry. Ensures only verifiable proofs, likely originating from the Flare Data Connector or similar sources, are accepted in policy settlement. Dependence on auxiliary contract methods requires proper registry and interface setup before deployment.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/weather-insurance.mdx#2025-04-22_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\n    function isJsonApiProofValid(IJsonApi.Proof calldata _proof) private view returns (bool) {\\n        return ContractRegistry.auxiliaryGetIJsonApiVerification().verifyJsonApi(_proof);\\n    }\n```\n\n----------------------------------------\n\nTITLE: Fetching Anchor Feed Data from Flare DA Layer in Go\nDESCRIPTION: Provides a sample Go implementation to query the Flare DA Layer API for anchor feeds and associated Merkle proofs. Dependencies include Go standard libraries (net/http, encoding/json). The code forms a POST request with user-supplied feed IDs and processes the returned JSON structure. Ideal for backend server or CLI tool integration.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/2-getting-started.mdx#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n{FetchAnchorFeedsGo}\n```\n\n----------------------------------------\n\nTITLE: Registering Node ID - Solidity\nDESCRIPTION: Lets a user register a node id to their account, supplying the node id (bytes20), a raw certificate (bytes), and a signature (bytes). The certificate and signature are likely used to verify ownership or authenticity. Registration links node network identity to the voter entity.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_22\n\nLANGUAGE: solidity\nCODE:\n```\nfunction registerNodeId(\n    bytes20 _nodeId,\n    bytes _certificateRaw,\n    bytes _signature\n) external;\n```\n\n----------------------------------------\n\nTITLE: Fetching and Verifying Flare Anchor Feed Data Onchain in Go\nDESCRIPTION: Outlines a Go-based workflow for offchain fetching of Flare anchor feed data/proofs followed by onchain submission and verification via a smart contract. Utilizes Go HTTP client libraries for the API call and go-ethereum or similar libraries for smart contract interaction. Inputs are the feed IDs; the program manages cryptographic proof handling and contract transaction execution. Designed for backend services operating on Flare-compatible chains.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/2-getting-started.mdx#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n{FetchAndVerifyAnchorOnchainGo}\n```\n\n----------------------------------------\n\nTITLE: Batch Claiming FlareDrops for Multiple Accounts in Solidity\nDESCRIPTION: This Solidity function signature defines the `autoClaim` method from the `DistributionToDelegators` contract. It enables claiming FlareDrop rewards for multiple accounts listed in `_rewardOwners` for a specific `_month` in a single transaction. Rewards are automatically wrapped (WFLR) and sent to the owner's account or their PDA if enabled (also claiming PDA rewards). Registered executors using this method will have their fees automatically deducted if applicable. Requires interaction with `DistributionToDelegators` and `ClaimSetupManager` for executor authorization and fee handling. The call reverts if the caller is not authorized or if rewards are insufficient to cover executor fees.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/manage-flaredrops.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction autoClaim(\n    address[] calldata _rewardOwners,\n    uint256 _month\n) external;\n```\n\n----------------------------------------\n\nTITLE: Getting Aggregate Reward Totals - Solidity Interface\nDESCRIPTION: Outlines 'getTotals', a view-only function summarizing overall reward-related statistics. Returns aggregate values (total rewards/claimed/burned/inflation, in wei) without parameters, assisting in dashboard or accounting logic.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRewardManager.md#2025-04-22_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getTotals(\n) external view returns (\n    uint256 _totalRewardsWei,\n    uint256 _totalInflationRewardsWei,\n    uint256 _totalClaimedWei,\n    uint256 _totalBurnedWei\n);\n```\n\n----------------------------------------\n\nTITLE: Transferring External Tokens in Solidity\nDESCRIPTION: Transfers ERC20 tokens owned by the delegation contract to the owner. Useful for handling airdrops or participating in token distributions.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction transferExternalToken(\n    contract IERC20 _token,\n    uint256 _amount\n) external;\n```\n\n----------------------------------------\n\nTITLE: Checking Node Health Status\nDESCRIPTION: Command to query the node's health endpoint and format the response with jq to verify the node is operational and fully synced.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:9650/ext/health | jq\n```\n\n----------------------------------------\n\nTITLE: Relaying Signing Policies and Messages in Solidity\nDESCRIPTION: Declares the `relay` function in the IRelay interface. This core external function handles the finalization of signing policies and protocol messages. It parses custom-formatted calldata to operate in different modes: relaying a new signing policy or relaying a signed message (which involves signature verification and potential Merkle root publication). It returns bytes (e.g., Merkle root) or reverts on failure.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRelay.md#2025-04-22_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction relay(\n) external returns (\n    bytes\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Attestation Providers for Confirmed Block Heights in TypeScript\nDESCRIPTION: This code snippet demonstrates how to query attestation providers to get block ranges and prepare attestation responses for confirmed block heights across Bitcoin, Dogecoin, and XRP Ledger networks. It includes utility functions for hex conversion and API interaction.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/confirm-block-height.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { ATTESTATION_URL, ATTESTATION_API_KEY } = process.env;\n\nfunction toHex(data: string): string {\n  var result = \"\";\n  for (var i = 0; i < data.length; i++) {\n    result += data.charCodeAt(i).toString(16);\n  }\n  return \"0x\" + result.padEnd(64, \"0\");\n}\n\nfunction fromHex(data: string): string {\n  data = data.replace(/^(0x\\.)/, \"\");\n  return data\n    .split(/(\\w\\w)/g)\n    .filter((p) => !!p)\n    .map((c) => String.fromCharCode(parseInt(c, 16)))\n    .join(\"\");\n}\n\nasync function prepareAttestationResponse(\n  attestationType: string,\n  network: string,\n  sourceId: string,\n  requestBody: any,\n): Promise<AttestationResponse> {\n  const response = await fetch(\n    `${ATTESTATION_URL}/verifier/${network}/${attestationType}/prepareResponse`,\n    {\n      method: \"POST\",\n      headers: {\n        \"X-API-KEY\": ATTESTATION_API_KEY as string,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        attestationType: toHex(attestationType),\n        sourceId: toHex(sourceId),\n        requestBody: requestBody,\n      }),\n    },\n  );\n  const data = await response.json();\n  return data;\n}\n\nasync function getVerifierBlockRange(network: string): Promise<any> {\n  return (\n    await (\n      await fetch(\n        `${ATTESTATION_URL}/verifier/${network}/api/indexer/block-range`,\n        {\n          method: \"GET\",\n          headers: {\n            \"X-API-KEY\": ATTESTATION_API_KEY as string,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n      )\n    ).json()\n  ).data;\n}\n\nasync function main() {\n  const btcRange = await getVerifierBlockRange(\"btc\");\n  const dogeRange = await getVerifierBlockRange(\"doge\");\n  const xrplRange = await getVerifierBlockRange(\"xrp\");\n\n  console.log(\"BTC Range: \", btcRange);\n  console.log(\n    await prepareAttestationResponse(\n      \"ConfirmedBlockHeightExists\",\n      \"btc\",\n      \"testBTC\",\n      {\n        blockNumber: btcRange.last.toString(),\n        queryWindow: \"123\",\n      },\n    ),\n  );\n\n  console.log(\"DOGE Range: \", dogeRange);\n  console.log(\n    await prepareAttestationResponse(\n      \"ConfirmedBlockHeightExists\",\n      \"doge\",\n      \"testDOGE\",\n      {\n        blockNumber: dogeRange.last.toString(),\n        queryWindow: \"123\",\n      },\n    ),\n  );\n\n  console.log(\"XRPL Range: \", xrplRange);\n  console.log(\n    await prepareAttestationResponse(\n      \"ConfirmedBlockHeightExists\",\n      \"xrp\",\n      \"testXRP\",\n      {\n        blockNumber: xrplRange.last.toString(),\n        queryWindow: \"123\",\n      },\n    ),\n  );\n}\n\nmain().then(() => process.exit(0));\n```\n\n----------------------------------------\n\nTITLE: Getting Feed ID by Index - Solidity\nDESCRIPTION: Defines the getFeedId function, which takes a uint256 index parameter and returns the bytes21 identifier of the feed at that index. If a feed is removed, bytes21(0) is returned. The method is read-only (view external) and allows indexed access to specific feed identifiers.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdatesConfiguration.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getFeedId(\n    uint256 _index\n) external view returns (\n    bytes21 _feedId\n);\n```\n\n----------------------------------------\n\nTITLE: Writing ABI Encoded Request to File using Solidity (Foundry)\nDESCRIPTION: This snippet demonstrates writing the `abiEncodedRequest` obtained from the verifier response to a text file using a helper function `Base.writeToFile`. It converts the bytes data to a hex string using `StringsBase.toHexString` before writing. The filename is dynamically constructed using `attestationTypeName`, and the file is placed in the `dirPath` directory. Requires `Base` and `StringsBase` utility contracts/libraries.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nBase.writeToFile(\n    dirPath,\n    string.concat(attestationTypeName, \"_abiEncodedRequest\"),\n    StringsBase.toHexString(response.abiEncodedRequest),\n    true\n);\n```\n\n----------------------------------------\n\nTITLE: IEVMTransaction Response Structure\nDESCRIPTION: Decoded structure of an EVM transaction response containing transaction details, attestation type, source ID, voting round and timestamps. The response includes transaction hash, confirmations, logs and execution status.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/evm-transaction.mdx#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n[\n  attestationType: '0x45564d5472616e73616374696f6e000000000000000000000000000000000000',\n  sourceId: '0x7465737445544800000000000000000000000000000000000000000000000000',\n  votingRound: '945196',\n  lowestUsedTimestamp: '1735543584',\n  requestBody: [\n    '0x4e636c6590b22d8dcdade7ee3b5ae5572f42edb1878f09b3034b2f7c3362ef3c',\n    '1',\n    true,\n    true,\n    [],\n    transactionHash: '0x4e636c6590b22d8dcdade7ee3b5ae5572f42edb1878f09b3034b2f7c3362ef3c',\n    requiredConfirmations: '1',\n    provideInput: true,\n    listEvents: true,\n    logIndices: []\n  ],\n  responseBody: [\n    '7384262',\n    '1735543584',\n    '0x70Ad32B82B4FE2821C798e628d93645218E2A806',\n    false,\n    '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    '61000000000000000',\n    '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006772521a00000000000000000000000000000000000000000000000000000000000000040b000604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000d8b72d434c80000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000d8b72d434c8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bfff9976782d46cc05630d1f6ebab18b2324d6b140001f41c7d4b196cb0c7b01d743fbc6116a902379c723800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000001c7d4b196cb0c7b01d743fbc6116a902379c7238000000000000000000000000e49acc3b16c097ec88dc9352ce4cd57ab7e35b95000000000000000000000000000000000000000000000000000000000000001900000000000000000000000000000000000000000000000000000000000000600000000000000000000000001c7d4b196cb0c7b01d743fbc6116a902379c723800000000000000000000000070ad32b82b4fe2821c798e628d93645218e2a80600000000000000000000000000000000000000000000000000000000ad2090e40c',\n    '1',\n    [ ... ],\n    blockNumber: '7384262',\n    timestamp: '1735543584',\n    sourceAddress: '0x70Ad32B82B4FE2821C798e628d93645218E2A806',\n    isDeployment: false,\n    receivingAddress: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    value: '61000000000000000',\n    input: '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006772521a00000000000000000000000000000000000000000000000000000000000000040b000604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000d8b72d434c80000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000d8b72d434c8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bfff9976782d46cc05630d1f6ebab18b2324d6b140001f41c7d4b196cb0c7b01d743fbc6116a902379c723800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000001c7d4b196cb0c7b01d743fbc6116a902379c7238000000000000000000000000e49acc3b16c097ec88dc9352ce4cd57ab7e35b95000000000000000000000000000000000000000000000000000000000000001900000000000000000000000000000000000000000000000000000000000000600000000000000000000000001c7d4b196cb0c7b01d743fbc6116a902379c723800000000000000000000000070ad32b82b4fe2821c798e628d93645218e2a80600000000000000000000000000000000000000000000000000000000ad2090e40c',\n    status: '1',\n    events: [ ... ]\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Solidity Compiler - Bash\nDESCRIPTION: These Bash snippets demonstrate how to install the Solidity compiler on MacOS and Ubuntu, as well as how to add key Rust dependencies with cargo. The commands rely on system-level package managers (Homebrew, apt) and Rust's package manager. Inputs are CLI commands executed in the terminal; upon completion, the environment will be prepared for subsequent Flare contract development and alloy-rs usage.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-rust-developers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap ethereum/ethereum\\nbrew install solidity\\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo add-apt-repository -y ppa:ethereum/ethereum\\nsudo apt update\\nsudo apt install solc\\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo add alloy eyre tokio --features alloy/full,tokio/rt,tokio/rt-multi-thread,tokio/macros\\n\n```\n\n----------------------------------------\n\nTITLE: Accessing FdcHub Contract via Helpers - TypeScript\nDESCRIPTION: This async function retrieves the deployed FdcHub contract instance by first deploying (or using) the Helpers contract, then invoking its view function to obtain the FdcHub address, and finally instantiating a JavaScript contract wrapper (FdcHub.at). Depends on a valid HelpersInstance and the FdcHub contract artifact. No parameters are required for this function, and the output is a promise resolving to the smart contract instance for calling further FdcHub methods. Ensure contract addresses are correct and on-chain artifact deployment is complete.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getFdcHub() {\\n  const helpers: HelpersInstance = await getHelpers();\\n  const fdcHubAddress: string = await helpers.getFdcHub();\\n  return await FdcHub.at(fdcHubAddress);\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Formatting Proof Data for Verification in Solidity\nDESCRIPTION: This snippet shows how to assemble the Merkle proofs (`proof.proofs`) and the decoded response data (`proofResponse`) into the `IAddressValidity.Proof` struct. This formatted structure is required as input for the `verifyAddressValidity` function of the `FdcVerification` contract.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/address-validity.mdx#2025-04-22_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nIAddressValidity.Proof memory _proof = IAddressValidity.Proof(\n proof.proofs,\n proofResponse\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Chain ID on Flare Mainnet - Python\nDESCRIPTION: This Python snippet shows how to connect to the Flare Mainnet via web3.py and fetch the blockchain's chain id. Requires 'web3' and the mainnet RPC endpoint. Outputs the mainnet's chain id for verification.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-python-developers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{ChainIdFlare}\n```\n\n----------------------------------------\n\nTITLE: Retiring an Unclaimed Weather Insurance Policy\nDESCRIPTION: This script shows how to retire a policy that has expired without a valid claim. It checks the policy state and expiry time before calling retirePolicy on the contract.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/weather-insurance.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as dotenv from \"dotenv\";\nimport hre, { ethers } from \"hardhat\";\n\ndotenv.config();\n\nasync function main() {\n  // Get the address of the weather insurance agency contract\n  const agencyAddress = process.env.WEATHER_INSURANCE_AGENCY_ADDRESS ?? \"\";\n  // Get the policy ID\n  const policyId = parseInt(process.env.POLICY_ID ?? \"0\");\n  if (policyId === 0) {\n    throw new Error(\"POLICY_ID not set\");\n  }\n\n  const [deployer] = await ethers.getSigners();\n  console.log(\"Retiring policy with the account:\", deployer.address);\n\n  const WeatherInsuranceAgency = await hre.ethers.getContractFactory(\"WeatherInsuranceAgency\");\n  const weatherInsuranceAgency = WeatherInsuranceAgency.attach(agencyAddress);\n\n  const policy = await weatherInsuranceAgency.getPolicy(policyId);\n  console.log(\"Retiring policy:\", policyId);\n  console.log(\"Policy state:\", policy.state);\n  console.log(\"Policy expiry time:\", policy.expiryTime);\n  console.log(\"Current time:\", Math.floor(Date.now() / 1000));\n\n  const tx = await weatherInsuranceAgency.retirePolicy(policyId);\n  await tx.wait();\n  console.log(\"Policy retired. Tx hash:\", tx.hash);\n}\n\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n\n```\n\n----------------------------------------\n\nTITLE: Defining IPayment Interface in Solidity\nDESCRIPTION: This code defines the IPayment interface for relaying and verifying native currency transactions. It includes structs for request, response, and proof, as well as detailed specifications for request and response bodies.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IPayment.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name IPayment\n * @custom:id 0x01\n * @custom:supported BTC, DOGE, XRP\n * @author Flare\n * @notice A relay of a transaction on an external chain that is considered a payment in a native currency.\n * Various blockchains support different types of native payments. For each blockchain, it is specified how a payment\n * transaction should be formed to be provable by this attestation type.\n * The provable payments emulate traditional banking payments from entity A to entity B in native currency with an\n * optional payment reference.\n * @custom:verification The transaction with `transactionId` is fetched from the API of the blockchain node or\n * relevant indexer.\n * If the transaction cannot be fetched or the transaction is in a block that does not have a sufficient\n * [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\n *\n * Once the transaction is received, the payment summary is computed according to the rules for the source chain.\n * If the summary is successfully calculated, the response is assembled from the summary.\n * `blockNumber` and `blockTimestamp` are retrieved from the block if they are not included in the transaction data.\n * For Bitcoin and Dogecoin, `blockTimestamp` is mediantime of the block.\n * For XRPL, `blockTimestamp` is close time of the ledger converted to UNIX time.\n *\n * If the summary is not successfully calculated, the attestation request is rejected.\n * @custom:lut `blockTimestamp`\n * @custom:lutlimit `0x127500`, `0x127500`, `0x127500`\n */\ninterface IPayment {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined\n     * by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction\n     * of the response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for Payment attestation type\n     * @param transactionId ID of the payment transaction.\n     * @param inUtxo For UTXO chains, this is the index of the transaction input with source address.\n     * Always 0 for the non-utxo chains.\n     * @param utxo For UTXO chains, this is the index of the transaction output with receiving address.\n     * Always 0 for the non-utxo chains.\n     */\n    struct RequestBody {\n        bytes32 transactionId;\n        uint256 inUtxo;\n        uint256 utxo;\n    }\n\n    /**\n     * @notice Response body for Payment attestation type\n     * @param blockNumber Number of the block in which the transaction is included.\n     * @param blockTimestamp The timestamp of the block in which the transaction is included.\n     * @param sourceAddressHash Standard address hash of the source address.\n     * @param sourceAddressesRoot The root of the Merkle tree of the source addresses.\n     * @param receivingAddressHash Standard address hash of the receiving address.\n     * The zero 32-byte string if there is no receivingAddress (if `status` is not success).\n     * @param intendedReceivingAddressHash Standard address hash of the intended receiving address.\n     * Relevant if the transaction is unsuccessful.\n     * @param spentAmount Amount in minimal units spent by the source address.\n     * @param intendedSpentAmount Amount in minimal units to be spent by the source address.\n     * Relevant if the transaction status is unsuccessful.\n     * @param receivedAmount Amount in minimal units received by the receiving address.\n     * @param intendedReceivedAmount Amount in minimal units intended to be received by the receiving address.\n     * Relevant if the transaction is unsuccessful.\n     * @param standardPaymentReference Standard payment reference of the transaction.\n     * @param oneToOne Indicator whether only one source and one receiver are involved in the transaction.\n     * @param status Success status of the transaction: 0 - success, 1 - failed by sender's fault,\n     * 2 - failed by receiver's fault.\n     */\n    struct ResponseBody {\n        uint64 blockNumber;\n        uint64 blockTimestamp;\n        bytes32 sourceAddressHash;\n        bytes32 sourceAddressesRoot;\n        bytes32 receivingAddressHash;\n        bytes32 intendedReceivingAddressHash;\n        int256 spentAmount;\n        int256 intendedSpentAmount;\n        int256 receivedAmount;\n        int256 intendedReceivedAmount;\n        bytes32 standardPaymentReference;\n        bool oneToOne;\n        uint8 status;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Signature Structure in Solidity\nDESCRIPTION: Defines the `Signature` struct interface. This structure is used to hold cryptographic signature data, typically consisting of the `v`, `r`, and `s` components derived from an ECDSA signature, commonly used for transaction or message signing.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IVoterRegistry.md#2025-04-22_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Signature {\n  uint8 v;\n  bytes32 r;\n  bytes32 s;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Anchor Feeds from Flare DA Layer with Bash (curl)\nDESCRIPTION: Illustrates how to fetch multiple anchor feed values and associated Merkle proofs from the Flare DA Layer API using a curl POST request. This script queries for FLR/USD, BTC/USD, and ETH/USD in the latest voting round, requiring network connectivity and access to the DA Layer endpoints. Input is a list of feed IDs; the output is a JSON response containing values and proofs for each feed. Be aware of DA Layer rate limits when using this method.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/2-getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n  'https://flr-data-availability.flare.network/api/v0/ftso/anchor-feeds-with-proof' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"feed_ids\": [\n    \"0x01464c522f55534400000000000000000000000000\",\n    \"0x014254432f55534400000000000000000000000000\",\n    \"0x014554482f55534400000000000000000000000000\"\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Checking Voter Registration Status in Solidity\nDESCRIPTION: Defines the `isVoterRegistered` function interface. This view function checks if a specific voter address was registered for a given reward epoch and returns a boolean value (`true` if registered, `false` otherwise).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IVoterRegistry.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isVoterRegistered(\n    address _voter,\n    uint256 _rewardEpochId\n) external view returns (\n    bool\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Latest BlockNumber via RPC - Coston2 Testnet - go-ethereum Go\nDESCRIPTION: A Go code sample, designed for go-ethereum usage, showing how to connect to Coston2 Testnet and fetch the current block number through the \\\"eth_blockNumber\\\" JSON-RPC call. Assumes go-ethereum dependencies and a configured endpoint. The expected output is the most recent block number.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/0-overview.mdx#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n{BlockNumCoston2Go}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Flare Mainnet Node\nDESCRIPTION: Docker Compose configuration file for running a Flare Mainnet observer node with appropriate network settings, volume mounts, and port configurations.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.6'\n\nservices:\n  observer:\n    container_name: flare-observer\n    image: flarefoundation/go-flare:v1.9.1\n    restart: on-failure\n    environment:\n      - AUTOCONFIGURE_BOOTSTRAP=1\n      - NETWORK_ID=flare\n      - AUTOCONFIGURE_PUBLIC_IP=1\n      - AUTOCONFIGURE_BOOTSTRAP_ENDPOINT=https://flare-bootstrap.flare.network/ext/info\n    volumes:\n      - /mnt/db:/app/db\n      - /opt/flare/conf:/app/conf/C\n      - /opt/flare/logs:/app/logs\n    ports:\n      - 0.0.0.0:9650:9650\n      - 0.0.0.0:9651:9651\n```\n\n----------------------------------------\n\nTITLE: Getting Claim Executors in Solidity\nDESCRIPTION: Retrieves the list of executors for a given owner that are allowed to perform automatic claiming.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\nfunction claimExecutors(\n    address _owner\n) external view returns (\n    address[]);\n```\n\n----------------------------------------\n\nTITLE: Implementing PrepareAttestationRequest for XRPL Payment Transaction in Solidity\nDESCRIPTION: Implementation of the contract that prepares attestation requests for a specific XRPL payment transaction. Constructs properly formatted request body with transaction ID and UTXO parameters, which are needed even for non-UTXO chains like XRPL.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.25;\n\nimport {console} from \"dependencies/forge-std-1.9.5/src/console.sol\";\nimport {Script} from \"dependencies/forge-std-1.9.5/src/Script.sol\";\nimport {Base} from \"./Base.s.sol\";\n...\n\nstring constant attestationTypeName = \"Payment\";\nstring constant dirPath = \"data/\";\n\ncontract PrepareAttestationRequest is Script {\n using Surl for *;\n\n // Setting request data\n string public transactionId =\n \"2A3E7C7F6077B4D12207A9F063515EACE70FBBF3C55514CD8BD659D4AB721447\";\n string public inUtxo = \"0\";\n string public utxo = \"0\";\n string public baseSourceName = \"xrp\"; // Part of verifier URL\n string public sourceName = \"testXRP\"; // XRLP test chain ID\n\n function prepareRequestBody(\n string memory transactionId,\n string memory inUtxo,\n string memory utxo\n ) private pure returns (string memory) {\n return\n string.concat(\n '{\"transactionId\": \"',\n transactionId,\n '\", \"inUtxo\": \"',\n inUtxo,\n '\", \"utxo\": \"',\n utxo,\n '\"}'\n );\n }\n\n function run() external {\n // Preparing request data\n string memory attestationType = Base.toUtf8HexString(\n attestationTypeName\n );\n string memory sourceId = Base.toUtf8HexString(sourceName);\n string memory requestBody = prepareRequestBody(\n transactionId,\n inUtxo,\n utxo\n );\n\n (string[] memory headers, string memory body) =\n prepareAttestationRequest(attestationType, sourceId, requestBody);\n\n ...\n }\n}\n\n...\n```\n\n----------------------------------------\n\nTITLE: Fetching FDC Request Fee On-Chain in Solidity\nDESCRIPTION: This code snippet retrieves the required fee for submitting a given attestation request (`response.abiEncodedRequest`). It first gets an instance of the `IFdcRequestFeeConfigurations` contract using the `ContractRegistry` and then calls the `getRequestFee` function on it.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\n        IFdcRequestFeeConfigurations fdcRequestFeeConfigurations = ContractRegistry\n            .getFdcRequestFeeConfigurations();\n        uint256 requestFee = fdcRequestFeeConfigurations.getRequestFee(\n            response.abiEncodedRequest\n        );\n\n```\n\n----------------------------------------\n\nTITLE: Installing Solidity via Homebrew - Bash\nDESCRIPTION: This snippet demonstrates how to install the Solidity compiler on MacOS using Homebrew package manager. It first taps the ethereum source, then installs the 'solidity' package. No other dependencies are required. The expected output is a working solc installation; ensure Homebrew is already installed prior to running these commands.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-javascript-developers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap ethereum/ethereum\\nbrew install solidity\n```\n\n----------------------------------------\n\nTITLE: Posting Request to Verifier using Surl in Solidity\nDESCRIPTION: This snippet demonstrates posting data to a verifier URL using the `post` method from the `Surl` library within a Solidity script. It captures the response data returned by the server. Requires the `Surl` library and assumes `url`, `headers`, and `body` variables are pre-defined.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\n```solidity title=\"scrip/fdcExample/Payment.s.sol\"\n(, bytes memory data) = url.post(headers, body);\n```\n```\n\n----------------------------------------\n\nTITLE: Example DA Layer JSON Response for Proof Request\nDESCRIPTION: Provides an example JSON response from the DA Layer for an address validity proof request. It shows the structure containing `response_hex` (the ABI-encoded response data), `attestation_type`, and the Merkle `proof` array. Note that the proof array content depends on the specific request and round.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/address-validity.mdx#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n{\n  response_hex: \"0x\n  0000000000000000000000000000000000000000000000000000000000000020\n  4164647265737356616c69646974790000000000000000000000000000000000\n  7465737442544300000000000000000000000000000000000000000000000000\n  00000000000000000000000000000000000000000000000000000000000e6bda\n  000000000000000000000000000000000000000000000000ffffffffffffffff\n  00000000000000000000000000000000000000000000000000000000000000c0\n  0000000000000000000000000000000000000000000000000000000000000140\n  0000000000000000000000000000000000000000000000000000000000000020\n  0000000000000000000000000000000000000000000000000000000000000022\n  6d6739503966347772397737633173674665695443356f4d4c59584363326337\n  6873000000000000000000000000000000000000000000000000000000000000\n  0000000000000000000000000000000000000000000000000000000000000001\n  0000000000000000000000000000000000000000000000000000000000000060\n  6810e152510fe893f9cc8954c4dfaecd5c2be00e2732d6fe3e25922f30c5a3c5\n  0000000000000000000000000000000000000000000000000000000000000022\n  6d6739503966347772397737633173674665695443356f4d4c59584363326337\n  6873000000000000000000000000000000000000000000000000000000000000\",\n  attestation_type: \"0x4164647265737356616c69646974790000000000000000000000000000000000\",\n  proof: [\n    \"0x275dc338dd4e6a0a8749caa098c6749e0e77e22ba9db264f334b5dfb79aa6321\",\n    \"0x084e002bbe12f4a163d82ddd17861d1d3131c816fe3b998d575d134043a6c8f1\",\n    \"0xc30304c7d430e3d0f83d05017035f13ca19dec2799917745967f4c48685eab49\",\n    \"0x4d622137c9e7c9a1fa3a5d2942a183a8e926ba8659fe606495ea994acbb6ec0f\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Flare Foundry Project - Bash\nDESCRIPTION: This snippet demonstrates how to clone the flare-foundry-starter repository and navigate into the project directory using bash commands. Helpful for initializing the working directory for your FTSOv2 DApp project. No additional dependencies required, but assumes git and bash shell are installed.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/build-first-app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/flare-foundation/flare-foundry-starter.git\\ncd flare-foundry-starter\n```\n\n----------------------------------------\n\nTITLE: Declaring Multiple FTSO Configurations Getter - Solidity\nDESCRIPTION: Specifies the getFtsoConfigurations external view function which returns an array of FtsoConfiguration structs. This function provides clients with all available FTSO configuration settings. There are no input parameters. The implementation must return an array where each element complies with the FtsoConfiguration struct layout.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/solidity-reference/IFtsoInflationConfigurations.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getFtsoConfigurations(\n) external view returns (\n    struct IFtsoInflationConfigurations.FtsoConfiguration[]\n);\n```\n\n----------------------------------------\n\nTITLE: Loading Private Key from Environment in Solidity (Foundry)\nDESCRIPTION: This snippet demonstrates how to load a private key, stored as an environment variable named `PRIVATE_KEY`, into a `uint256` variable using Foundry's `vm.envUint` cheatcode. This key is typically used for broadcasting transactions.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\n```solidity\n       uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving FDC Hub Contract Instance in TypeScript\nDESCRIPTION: This TypeScript function `getFdcHub` asynchronously retrieves an instance of the `FdcHub` contract. It first obtains an instance of the `Helpers` contract using `getHelpers`, then calls the `getFdcHub` view function on the `Helpers` instance to get the deployed `FdcHub` address, and finally returns a usable `FdcHub` contract instance connected to that address using its factory method (`FdcHub.at`).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/json-api.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getFdcHub() {\n  const helpers: HelpersInstance = await getHelpers();\n  const fdcHubAddress: string = await helpers.getFdcHub();\n  return await FdcHub.at(fdcHubAddress);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Interaction Script via Forge CLI\nDESCRIPTION: Bash command to execute the interaction script using Forge, interacting with the deployed PaymentRegistry contract.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nforge script script/fdcExample/Payment.s.sol:InteractWithContract --private-key $PRIVATE_KEY --rpc-url $COSTON2_RPC_URL --etherscan-api-key $FLARE_API_KEY --broadcast --ffi\n```\n\n----------------------------------------\n\nTITLE: Defining Helper Contract for Flare Contract Access in Solidity\nDESCRIPTION: This Solidity contract, `Helpers`, utilizes the `@flarenetwork/flare-periphery-contracts` package to provide convenient access to essential Flare protocol contracts like `FdcHub`, `FdcRequestFeeConfigurations`, `FlareSystemsManager`, and `IRelay`. It achieves this by wrapping calls to the `ContractRegistry` in simple view functions, simplifying contract interaction in other parts of the system. It requires the Flare periphery contracts package and Hardhat console for development.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/json-api.mdx#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.25;\n\nimport {console} from \"hardhat/console.sol\";\nimport {ContractRegistry} from \"@flarenetwork/flare-periphery-contracts/coston2/ContractRegistry.sol\";\nimport {IFdcHub} from \"@flarenetwork/flare-periphery-contracts/coston2/IFdcHub.sol\";\nimport {IFdcRequestFeeConfigurations} from\n    \"@flarenetwork/flare-periphery-contracts/coston2/IFdcRequestFeeConfigurations.sol\";\nimport {IFlareSystemsManager} from \"@flarenetwork/flare-periphery-contracts/coston2/IFlareSystemsManager.sol\";\nimport {IRelay} from \"@flarenetwork/flare-periphery-contracts/coston2/IRelay.sol\";\n\ncontract Helpers {\n    function getFdcHub() public view returns (IFdcHub) {\n        return ContractRegistry.getFdcHub();\n    }\n\n    function getFdcRequestFeeConfigurations() public view returns (IFdcRequestFeeConfigurations) {\n        return ContractRegistry.getFdcRequestFeeConfigurations();\n    }\n\n    function getFlareSystemsManager() public view returns (IFlareSystemsManager) {\n        return ContractRegistry.getFlareSystemsManager();\n    }\n\n    function getRelay() public view returns (IRelay) {\n        return ContractRegistry.getRelay();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Contract Helper Accessors with ContractRegistry - Solidity\nDESCRIPTION: This Solidity contract provides view functions to retrieve deployed Flare contract instances via the ContractRegistry from the Flare periphery package. It exposes accessor methods for critical contracts involved in attestation processing: FdcHub, FdcRequestFeeConfigurations, FlareSystemsManager, and Relay. Usage of this contract requires the @flarenetwork/flare-periphery-contracts package deployed and available in the target network; ensure Hardhat is configured for Solidity 0.8.25 or higher. Input parameters are none; outputs are references to external contracts for use in user scripts or other contracts.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport {console} from \\\"hardhat/console.sol\\\";\\nimport {ContractRegistry} from \\\"@flarenetwork/flare-periphery-contracts/coston2/ContractRegistry.sol\\\";\\nimport {IFdcHub} from \\\"@flarenetwork/flare-periphery-contracts/coston2/IFdcHub.sol\\\";\\nimport {IFdcRequestFeeConfigurations} from\\n    \\\"@flarenetwork/flare-periphery-contracts/coston2/IFdcRequestFeeConfigurations.sol\\\";\\nimport {IFlareSystemsManager} from \\\"@flarenetwork/flare-periphery-contracts/coston2/IFlareSystemsManager.sol\\\";\\nimport {IRelay} from \\\"@flarenetwork/flare-periphery-contracts/coston2/IRelay.sol\\\";\\n\\ncontract Helpers {\\n    function getFdcHub() public view returns (IFdcHub) {\\n        return ContractRegistry.getFdcHub();\\n    }\\n\\n    function getFdcRequestFeeConfigurations() public view returns (IFdcRequestFeeConfigurations) {\\n        return ContractRegistry.getFdcRequestFeeConfigurations();\\n    }\\n\\n    function getFlareSystemsManager() public view returns (IFlareSystemsManager) {\\n        return ContractRegistry.getFlareSystemsManager();\\n    }\\n\\n    function getRelay() public view returns (IRelay) {\\n        return ContractRegistry.getRelay();\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Buying Pool Collateral Separately\nDESCRIPTION: Command to buy pool collateral (CFLR) for an agent, specifying the agent address and the amount of CFLR to purchase.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/3-create-fasset-agent-cli.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose --profile cli run agent-bot buyPoolCollateral AGENT_ADDRESS CFLR_AMOUNT --fasset FASSET\n```\n\n----------------------------------------\n\nTITLE: Generating Feed ID - Rust\nDESCRIPTION: This Rust snippet encodes the standardized feed ID by converting the category and feed name into a padded hexadecimal format, yielding a 20-byte feed identifier. It uses std::fmt, accepts command-line arguments or variable inputs, and outputs a 0x-prefixed string. Inputs are the category and feed name (as &str or String), and output is the constructed ID as a hex string for integration with Rust-based backend or CLI tools.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/_feed_explanation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n// get_feed_id.rs\nuse std::fmt::Write;\n\nfn get_feed_id(category: u8, feed_name: &str) -> String {\n    let mut feed_name_hex = hex::encode(feed_name);\n    feed_name_hex.push_str(&\"0\".repeat(38 - feed_name_hex.len()));\n    let mut result = String::from(\"0x\");\n    write!(&mut result, \"{:02x}{}\", category, feed_name_hex).unwrap();\n    result\n}\n\n// Example:\n// fn main() {\n//     println!(\"{}\", get_feed_id(1, \"FLR/USD\"));\n// }\n\n```\n\n----------------------------------------\n\nTITLE: Offering Volatility Incentives via Payable Solidity Function\nDESCRIPTION: This function, `offerIncentive`, is the primary entry point for third-party participants to submit incentive offers in the IFastUpdateIncentiveManager interface. The function is marked payable and accepts a struct argument `_offer` of type `IFastUpdateIncentiveManager.IncentiveOffer`, which specifies the desired range increase and the upper range cap. When called, the contract determines the adjustment to sample size and applies or caps the change as necessary, refunding excess funds if applicable. As a payable external function, it requires Ether transfer and is core to contract operation.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdateIncentiveManager.md#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction offerIncentive(\n    struct IFastUpdateIncentiveManager.IncentiveOffer _offer\n) external payable;\n```\n\n----------------------------------------\n\nTITLE: Retrieving First Voting Round Start Timestamp in Solidity\nDESCRIPTION: Function to retrieve the timestamp when the first voting epoch started, measured in seconds since UNIX epoch.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/ProtocolsV2Interface.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction firstVotingRoundStartTs(\n) external view returns (\n    uint64\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Flare Account - Rust\nDESCRIPTION: The provided Rust snippet generates and outputs a new private key and account address for Flare via alloy-rs. The code uses cryptographic primitives from alloy-rs and related crates. Inputs are none (entropy is generated internally); the output is a new account keypair printed to standard output, which the user can store as environment variables or import into external wallets. Security warnings emphasize not storing private keys in source control or sharing them.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-rust-developers.mdx#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n{CreateAccount}\n```\n\n----------------------------------------\n\nTITLE: Emitting Critical Protocol Events - Flare Systems Manager Interface - Solidity\nDESCRIPTION: Declares all Solidity event signatures used for protocol changes and participant notifications, such as phase starts, reward and vote signing, and registration successes. Events can include multiple arguments of integer, address, bytes, struct array, and bool types, providing information for off-chain monitoring and protocol coordination. These declarations are essential for transparency and enable efficient tracking of protocol state changes by external systems.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IFlareSystemsManager.md#2025-04-22_snippet_5\n\nLANGUAGE: Solidity\nCODE:\n```\nevent RandomAcquisitionStarted(\n    uint24 rewardEpochId,\n    uint64 timestamp\n)\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nevent RewardEpochStarted(\n    uint24 rewardEpochId,\n    uint32 startVotingRoundId,\n    uint64 timestamp\n)\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nevent RewardsSigned(\n    uint24 rewardEpochId,\n    address signingPolicyAddress,\n    address voter,\n    bytes32 rewardsHash,\n    struct IFlareSystemsManager.NumberOfWeightBasedClaims[] noOfWeightBasedClaims,\n    uint64 timestamp,\n    bool thresholdReached\n)\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nevent SignUptimeVoteEnabled(\n    uint24 rewardEpochId,\n    uint64 timestamp\n)\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nevent SigningPolicySigned(\n    uint24 rewardEpochId,\n    address signingPolicyAddress,\n    address voter,\n    uint64 timestamp,\n    bool thresholdReached\n)\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nevent UptimeVoteSigned(\n    uint24 rewardEpochId,\n    address signingPolicyAddress,\n    address voter,\n    bytes32 uptimeVoteHash,\n    uint64 timestamp,\n    bool thresholdReached\n)\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nevent UptimeVoteSubmitted(\n    uint24 rewardEpochId,\n    address signingPolicyAddress,\n    address voter,\n    bytes20[] nodeIds,\n    uint64 timestamp\n)\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nevent VotePowerBlockSelected(\n    uint24 rewardEpochId,\n    uint64 votePowerBlock,\n    uint64 timestamp\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Contract ABI from Flare Explorer API - Python (Coston2)\nDESCRIPTION: This snippet fetches the ABI of a deployed smart contract from the Flare Blockchain Explorer API for the Coston2 testnet using Python. Uses requests to programmatically retrieve contract interface definitions. Requires access to Coston2's explorer endpoint and the 'requests' library.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-python-developers.mdx#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{FetchAbiCoston2}\n```\n\n----------------------------------------\n\nTITLE: Interacting with Address Registry Contract in Solidity\nDESCRIPTION: This Solidity script demonstrates interaction with the deployed AddressRegistry contract. It reads proof data and contract address from files, then calls the registerAddress method.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/address-validity.mdx#2025-04-22_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\ncontract InteractWithContract is Script {\n    function run() external {\n        string memory addressString = vm.readLine(\n            string.concat(dirPath, attestationTypeName, \"_address\", \".txt\")\n        );\n        address _address = vm.parseAddress(addressString);\n        string memory proofString = vm.readLine(\n            string.concat(dirPath, attestationTypeName, \"_proof\", \".txt\")\n        );\n        bytes memory proofBytes = vm.parseBytes(proofString);\n        IAddressValidity.Proof memory proof = abi.decode(\n            proofBytes,\n            (IAddressValidity.Proof)\n        );\n        uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n        vm.startBroadcast(deployerPrivateKey);\n        IAddressRegistry registry = IAddressRegistry(_address);\n        registry.registerAddress(\"mg9P9f4wr9w7c1sgFeiTC5oMLYXCc2c7hs\", proof);\n        vm.stopBroadcast();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Claiming FlareDrops for a Single Account in Solidity\nDESCRIPTION: This Solidity function signature defines the `claim` method from the `DistributionToDelegators` contract. It allows claiming FlareDrop rewards for a specific `_rewardOwner` for a given `_month`, sending them to `_recipient`. The `_wrap` parameter controls if rewards are sent as native FLR or wrapped WFLR. The function supports self-claiming or claiming by an authorized executor (set via `ClaimSetupManager`), returning the amount claimed. Requires interaction with `DistributionToDelegators` and potentially `ClaimSetupManager` for executor authorization and recipient permissions.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/manage-flaredrops.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction claim(\n    address _rewardOwner,\n    address _recipient,\n    uint256 _month,\n    bool _wrap\n) external returns(\n    uint256 _rewardAmount\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving FTSOv2 Feeds via web3.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to use web3.js and the Flare Periphery Contract Artifacts to connect to a Flare network RPC endpoint, instantiate the FtsoV2 smart contract, and fetch feed data for FLR/USD, BTC/USD, and ETH/USD. Dependencies include web3 and @flarenetwork/flare-periphery-contract-artifacts npm packages. Inputs involve the RPC endpoint, contract address, and feed IDs; the output consists of current feed values for each asset pair. Limitations include the necessity for the correct contract ABI and access to the specified network.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/read-feeds-offchain.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Web3 from \"web3\";\nimport FTSOv2Artifact from \"@flarenetwork/flare-periphery-contract-artifacts/build/contracts/FtsoV2.json\";\n\nconst RPC_ENDPOINT = \"<YOUR_RPC_ENDPOINT>\"; // e.g. https://coston2-api.flare.network/ext/bc/C/rpc\nconst FTSO_CONTRACT_ADDRESS = \"<FTSOV2_CONTRACT_ADDRESS>\"; // e.g. 0x...\nconst FEED_IDS = [\n  \"0x464c522f55534400000000000000000000000000000000000000000000000000\", // FLR/USD\n  \"0x4254432f55534400000000000000000000000000000000000000000000000000\", // BTC/USD\n  \"0x4554482f55534400000000000000000000000000000000000000000000000000\"  // ETH/USD\n];\n\nasync function main() {\n  const web3 = new Web3(RPC_ENDPOINT);\n  const ftso = new web3.eth.Contract(\n    FTSOv2Artifact.abi,\n    FTSO_CONTRACT_ADDRESS\n  );\n\n  for (const feedId of FEED_IDS) {\n    const [_value, _timestamp] = await ftso.methods.getCurrentFeed(feedId).call();\n    console.log(`FeedID: ${feedId}, Value: ${_value}, Timestamp: ${_timestamp}`);\n  }\n}\n\nmain().catch(console.error);\n\n```\n\n----------------------------------------\n\nTITLE: Connecting to Flare Contracts and Fetching Prices with ethers.js (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to use ethers.js and generated contract factories to connect to the Flare Coston testnet, retrieve FAsset Manager settings, and obtain the latest XRP/USD feed price from FtsoV2. It relies on contract ABIs provided via TypeChain factories, and interacts with contracts via RPC endpoint (COSTON_RPC). Key parameters include contract addresses and a feed identifier. The script logs lot size, XRP/USD price, calculated lot value in USD, and timestamp to the console. Prerequisites: TypeScript, ethers.js, TypeChain-generated artifacts, and configured NPM scripts.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/developer-guides/1-fassets-asset-manager-settings-node.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Importing necessary modules and contract factories\nimport { ethers } from \"ethers\";\n\nimport { IAssetManager__factory } from \"../typechain/factories/IAssetManager__factory.js\";\nimport { IFlareContractRegistry__factory } from \"../typechain/factories/IFlareContractRegistry__factory.js\";\nimport { FtsoV2Interface__factory } from \"../typechain/factories/FtsoV2Interface__factory.js\";\n\n// Constants for RPC endpoint and contract addresses\nconst COSTON_RPC = \"https://coston-api.flare.network/ext/C/rpc\"; // RPC URL for the Coston network\nconst ASSET_MANAGER_ADDRESS = \"0xeEd82b8390880af0b6Cb6Dd398a7E361cc30E8e2\"; // Address of the Asset Manager contract\nconst REGISTRY_ADDRESS = \"0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019\"; // Address of the Flare Contract Registry\nconst XRP_USD_FEED_ID = \"0x015852502f55534400000000000000000000000000\"; // Feed ID for XRP/USD price https://dev.flare.network/ftso/scaling/anchor-feeds\n\nasync function getSettings() {\n  // Create a provider for interacting with the blockchain\n  const provider = new ethers.JsonRpcProvider(COSTON_RPC);\n\n  // Connect to the Asset Manager contract\n  const assetManager = IAssetManager__factory.connect(\n    ASSET_MANAGER_ADDRESS,\n    provider,\n  );\n\n  // Fetch settings from the Asset Manager contract\n  const settings = await assetManager.getSettings();\n\n  // Calculate the lot size in FXRP (Flare XRP)\n  const lotSizeFXRP =\n    Number(settings.lotSizeAMG) / Math.pow(10, Number(settings.assetDecimals));\n  console.log(\"Lot Size (FXRP):\", lotSizeFXRP);\n\n  // Connect to the Flare Contract Registry\n  const registry = IFlareContractRegistry__factory.connect(\n    REGISTRY_ADDRESS,\n    provider,\n  );\n\n  // Fetch the address of the FtsoV2 contract from the registry\n  const ftsoAddress = await registry.getContractAddressByName(\"FtsoV2\");\n\n  // Connect to the FtsoV2 contract\n  const ftsoV2 = FtsoV2Interface__factory.connect(ftsoAddress, provider);\n\n  // Fetch the XRP/USD price feed using the feed ID\n  const priceFeed = await ftsoV2.getFeedById.staticCall(XRP_USD_FEED_ID);\n\n  // Calculate the XRP/USD price and the lot value in USD\n  const xrpUsdPrice = Number(priceFeed[0]) / Math.pow(10, Number(priceFeed[1]));\n  const lotValueUSD = lotSizeFXRP * xrpUsdPrice;\n\n  console.log(\"XRP/USD Price:\", xrpUsdPrice);\n  console.log(\"Lot value in USD:\", lotValueUSD);\n  console.log(\"Timestamp:\", priceFeed[2].toString());\n}\n\ngetSettings();\n```\n\n----------------------------------------\n\nTITLE: FeeConfig Struct Definition in Solidity\nDESCRIPTION: Defines the `FeeConfig` struct within the IRelay interface scope. This structure holds configuration for fees associated with a specific protocol, containing the protocol identifier (`protocolId`) and the corresponding fee amount in Wei (`feeInWei`).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRelay.md#2025-04-22_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\nstruct FeeConfig {\n  uint8 protocolId;\n  uint256 feeInWei;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Pool Collateral\nDESCRIPTION: Command to add pool collateral and receive the FAsset agent's pool tokens by specifying the agent vault address and amount.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot buyPoolCollateral <agentVaultAddress> <amount>\n```\n\n----------------------------------------\n\nTITLE: Example Output of FAsset Settings Script (Bash)\nDESCRIPTION: This Bash snippet demonstrates typical console output generated by running the compiled TypeScript script. The output includes the calculated lot size in FXRP, the current XRP/USD price, the lot value denominated in USD, and a timestamp. Inputs and outputs depend on blockchain state at execution time. There are no dependencies, as this is an expected output format.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/developer-guides/1-fassets-asset-manager-settings-node.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nLot Size (FXRP): 20\nXRP/USD Price: 2.1346\nLot value in USD: 42.69199999999999\nTimestamp: 1743513507\n```\n\n----------------------------------------\n\nTITLE: Adding go-ethereum Packages to Go Project - Bash\nDESCRIPTION: This snippet demonstrates how to add Geth's Go bindings (ethclient and keystore) to a Go project using 'go get'. Dependencies include Go and a properly initialized Go module. These packages are essential for RPC interaction with Ethereum-compatible networks in Go. Inputs are executed via terminal, effects are updates to go.mod/go.sum and fetching required client code.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-go-developers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/ethereum/go-ethereum/ethclient\\ngo get github.com/ethereum/go-ethereum/accounts/keystore\\n\n```\n\n----------------------------------------\n\nTITLE: Reading Request Data and Round ID from Files in Solidity (Foundry)\nDESCRIPTION: This snippet reads data previously saved to files using Foundry's `vm.readLine` cheatcode. It constructs file paths dynamically and reads the content of files named `*_abiEncodedRequest.txt` and `*_votingRoundId.txt` into string variables.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\n```solidity title=\"scrip/fdcExample/Payment.s.sol\"\nstring memory requestBytes = vm.readLine(\n    string.concat(\n        dirPath,\n        attestationTypeName,\n        \"_abiEncodedRequest\",\n        \".txt\"\n    )\n);\nstring memory votingRoundId = vm.readLine(\n    string.concat(\n        dirPath,\n        attestationTypeName,\n        \"_votingRoundId\",\n        \".txt\"\n    )\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Response Structure for ConfirmedBlockHeightExists in Solidity\nDESCRIPTION: Outlines the return values of the ConfirmedBlockHeightExists function, including block timestamp, confirmation count, and query window block details.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/attestation-types/confirmed-block-height-exists.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Response {\n    uint64 blockTimestamp;\n    uint64 numberOfConfirmations;\n    uint64 lowestQueryWindowBlockNumber;\n    uint64 lowestQueryWindowBlockTimestamp;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Voter by Node ID - Solidity\nDESCRIPTION: Finds the voter address for a given node ID at a particular block. Parameters include a bytes20 nodeId and the block number; returns the voter address. Useful for tracking historical entity-to-node relationships.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getVoterForNodeId(\n    bytes20 _nodeId,\n    uint256 _blockNumber\n) external view returns (\n    address _voter\n);\n```\n\n----------------------------------------\n\nTITLE: Calling requestAttestation on FDC Hub in Solidity\nDESCRIPTION: This snippet executes the core FDC request submission by calling the `requestAttestation` function on the `IFdcHub` contract instance. It passes the `abiEncodedRequest` as the argument and sends the required `requestFee` as the transaction value (`msg.value`).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\n```solidity\n fdcHub.requestAttestation{value: requestFee}(response.abiEncodedRequest);\n```\n```\n\n----------------------------------------\n\nTITLE: Event Log Object for ERC20 Transfer - JSON\nDESCRIPTION: This snippet represents the decoded log of a single ERC20 Transfer event as recorded on-chain. It includes fields for log index, emitter address (token contract), array of topics (event signature and indexed args), hex-encoded data (non-indexed value), and a removed flag. Such logs are crucial for off-chain indexers and smart contract monitoring tools.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/connect-evm-chains.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"logIndex\": \"38\",\n  \"emitterAddress\": \"0x6023e19d70C304eA16a3728ceDcb042791737EC3\",\n  \"topics\": [\n    \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n    \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373\"\n  ],\n  \"data\": \"0x00000000000000000000000000000000000000000000000000000000000f4240\",\n  \"removed\": false\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"logIndex\": \"32\",\n  \"emitterAddress\": \"0x6023e19d70C304eA16a3728ceDcb042791737EC3\",\n  \"topics\": [\n    \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n    \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373\",\n    \"0x000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d429\"\n  ],\n  \"data\": \"0x00000000000000000000000000000000000000000000000000000000000003e8\",\n  \"removed\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Reward Epoch Totals - Solidity Interface\nDESCRIPTION: Provides 'getRewardEpochTotals', enabling queries about aggregate statistics for a specific epoch, such as total, inflation, initialized, claimed, and burned rewards in wei. Depends on structuring consistent with epoch accounting; takes a uint24 epoch id as parameter.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRewardManager.md#2025-04-22_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getRewardEpochTotals(\n    uint24 _rewardEpochId\n) external view returns (\n    uint256 _totalRewardsWei,\n    uint256 _totalInflationRewardsWei,\n    uint256 _initialisedRewardsWei,\n    uint256 _claimedRewardsWei,\n    uint256 _burnedRewardsWei\n);\n```\n\n----------------------------------------\n\nTITLE: Setting EVM Version London via Solc CLI\nDESCRIPTION: Command-line example showing how to specify the `london` EVM version using the `--evm-version` flag when compiling Solidity code with the `solc` command-line interface.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/secure-random-numbers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolc --evm-version london <args>\n```\n\n----------------------------------------\n\nTITLE: Running FDC Payment Attestation Script with Forge in Bash\nDESCRIPTION: Commands to execute the solidity script for preparing a payment attestation request. Sources environment variables for private key and RPC URL, then uses Forge to compile and run the script.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsource .env\n```\n\nLANGUAGE: bash\nCODE:\n```\nforge script script/fdcExample/Payment.s.sol:PrepareAttestationRequest --private-key $PRIVATE_KEY --rpc-url $COSTON2_RPC_URL --etherscan-api-key $FLARE_API_KEY --broadcast  --ffi\n```\n\n----------------------------------------\n\nTITLE: Utility Functions for Weather Insurance Policy Management in Solidity\nDESCRIPTION: These functions provide utility for querying policy data. getInsurer returns the insurer's address for a given policy ID, while getAllPolicies returns the entire array of registered policies.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/weather-insurance.mdx#2025-04-22_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getInsurer(uint256 id) public view returns (address) {\n    return insurers[id];\n}\n\nfunction getAllPolicies() public view returns (Policy[] memory) {\n    return registeredPolicies;\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Base Attestation Request for FDC Verifier in TypeScript\nDESCRIPTION: A generic function that prepares and submits an attestation request to the FDC verifier server. It formats the request with the attestation type, source ID, and request body, then handles the HTTP communication with proper error checking.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync function prepareAttestationRequestBase(\n  url: string,\n  apiKey: string,\n  attestationTypeBase: string,\n  sourceIdBase: string,\n  requestBody: any,\n) {\n  console.log(\"Url:\", url, \"\\n\");\n  const attestationType = toUtf8HexString(attestationTypeBase);\n  const sourceId = toUtf8HexString(sourceIdBase);\n\n  const request = {\n    attestationType: attestationType,\n    sourceId: sourceId,\n    requestBody: requestBody,\n  };\n  console.log(\"Prepared request:\\n\", request, \"\\n\");\n\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"X-API-KEY\": apiKey,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(request),\n  });\n  if (response.status != 200) {\n    throw new Error(\n      `Response status is not OK, status ${response.status} ${response.statusText}\\n`,\n    );\n  }\n  console.log(\"Response status is OK\\n\");\n\n  return await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Delegation Information in IWNat Solidity Interface\nDESCRIPTION: Returns information about all current delegations made by a specified address, including the list of delegates, delegation percentages, count, and delegation mode.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction delegatesOf(\n    address _who\n) external view returns (\n    address[] _delegateAddresses,\n    uint256[] _bips,\n    uint256 _count,\n    uint256 _delegationMode\n);\n```\n\n----------------------------------------\n\nTITLE: Compiling Foundry Project - Bash\nDESCRIPTION: Runs the forge build command using bash to compile Solidity contracts. Produces compiled artifacts for all contracts in the repository. Prerequisite: proper setup of dependencies, remappings, and foundry.toml. Shows compilation status and success indicators. Input: none; Output: build folders and stdout logs.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/build-first-app.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nforge build\n```\n\n----------------------------------------\n\nTITLE: Posting Request to Verifier Server using Surl in Solidity\nDESCRIPTION: This snippet shows how to make an HTTP POST request to a specified `url` using the `surl` library within a Solidity script (likely Foundry). It sends provided `headers` and `body` data and captures the response `data`. The status code is ignored in this specific example. Requires the `surl` package (`using Surl for *;`).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n(, bytes memory data) = url.post(headers, body);\n```\n\n----------------------------------------\n\nTITLE: Batch Delegation of Voting Power in IWNat Solidity Interface\nDESCRIPTION: Undelegates all previous percentage delegations from the sender and delegates specified percentages of voting power to multiple delegates in a single transaction.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction batchDelegate(\n    address[] _delegatees,\n    uint256[] _bips\n) external;\n```\n\n----------------------------------------\n\nTITLE: Retrieving FTSOv2 Feeds via go-ethereum - Go\nDESCRIPTION: Demonstrates Go code that leverages go-ethereum's ethclient and smart contract bindings generated via abigen to access the FtsoV2 contract and offsourcing feed data. Prerequisites: ethclient package, contract ABI file, and Go bindings generated with abigen. The user must supply an RPC endpoint, contract address, and feed IDs. For each feed, the script queries recent price and timestamp, outputting results via standard output. Limitation: the developer must ensure appropriate contract methods exist in generated bindings.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/read-feeds-offchain.mdx#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n    \"math/big\"\n\n    \"github.com/ethereum/go-ethereum/ethclient\"\n    // Import the generated FtsoV2 Go contract bindings\n)\n\nfunc main() {\n    rpcEndpoint := \"<YOUR_RPC_ENDPOINT>\" // e.g. https://coston2-api.flare.network/ext/bc/C/rpc\n    ftsoAddress := \"<FTSOV2_CONTRACT_ADDRESS>\"\n    feedIds := []string{\n        \"0x464c522f55534400000000000000000000000000000000000000000000000000\", // FLR/USD\n        \"0x4254432f55534400000000000000000000000000000000000000000000000000\", // BTC/USD\n        \"0x4554482f55534400000000000000000000000000000000000000000000000000\", // ETH/USD\n    }\n    client, err := ethclient.Dial(rpcEndpoint)\n    if err != nil {\n        log.Fatalf(\"Failed to connect to RPC: %v\", err)\n    }\n    // Instantiate contract: contract, err := NewFtsoV2(common.HexToAddress(ftsoAddress), client)\n    // for _, feedId := range feedIds {\n    //     value, timestamp, err := contract.GetCurrentFeed(&bind.CallOpts{Context: context.Background()}, common.HexToHash(feedId))\n    //     if err != nil {\n    //         log.Printf(\"Feed %s error: %v\", feedId, err)\n    //         continue\n    //     }\n    //     fmt.Printf(\"FeedID: %s, Value: %s, Timestamp: %s\\n\", feedId, value.String(), timestamp.String())\n    // }\n}\n\n```\n\n----------------------------------------\n\nTITLE: RelayGovernanceConfig Struct Definition in Solidity\nDESCRIPTION: Defines the `RelayGovernanceConfig` struct within the IRelay interface scope. This structure aggregates configuration data used in the `governanceFeeSetup` function, including a description hash, chain ID, and an array of new `FeeConfig` structures.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRelay.md#2025-04-22_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\nstruct RelayGovernanceConfig {\n  bytes32 descriptionHash;\n  uint256 chainId;\n  struct IRelay.FeeConfig[] newFeeConfigs;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flare Hosted Telegram Notifications in JSON for FAssets\nDESCRIPTION: This JSON snippet demonstrates how to configure the apiNotifierConfigs for the Flare-hosted Telegram bot in the config.json file. It includes the specific API URL for the Telegram bot and placeholders for the API key.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/7-agent-bot-notifications.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiUrl\": \"https://fasset-tg-bot-songbird.flare.network\",\n  \"apiKey\": \"API_KEY\",\n  \"level\": \"danger\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Contract Addresses by Name in Solidity\nDESCRIPTION: Function that returns multiple contract addresses for a given array of contract names. Each returned address might be address(0) if the corresponding contract is not found.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IFlareContractRegistry.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getContractAddressesByName(\n    string[] _names\n) external view returns (\n    address[]);\n```\n\n----------------------------------------\n\nTITLE: Getting Current Voter Fee Percentage in Solidity\nDESCRIPTION: This Solidity function definition describes `getVoterCurrentFeePercentage` within the `IWNatDelegationFee` interface. It's an external view function that takes a voter's address (`_voter`) as input and returns their current effective delegation fee percentage in BIPS (`uint16`).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IWNatDelegationFee.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getVoterCurrentFeePercentage(\n    address _voter\n) external view returns (\n    uint16\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Underlying Account\nDESCRIPTION: Command to create an underlying account for the FAssets agent.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot createUnderlyingAccount\n```\n\n----------------------------------------\n\nTITLE: Undelegating Pool Collateral from FTSO\nDESCRIPTION: Command to remove pool collateral delegation by specifying the agent vault address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot undelegatePoolCollateral <agentVaultAddress>\n```\n\n----------------------------------------\n\nTITLE: ERC20 Allowance Transaction Response\nDESCRIPTION: Example JSON response showing the decoded transaction data for an ERC20 allowance increase operation, including transaction details, input data, and emitted events.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/connect-evm-chains.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"VALID\",\n  \"response\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"0\",\n    \"lowestUsedTimestamp\": \"1709147568\",\n    \"requestBody\": {\n      \"transactionHash\": \"0x445ac68dd09198cb3b8202cb9ccba323d4d1c82157a076f97fd6682dfaa826d9\",\n      \"requiredConfirmations\": \"1\",\n      \"provideInput\": true,\n      \"listEvents\": true,\n      \"logIndices\": []\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5382600\",\n      \"timestamp\": \"1709147568\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0xc14FA393fa7248c73B74A303cf35D5e980E11e2C\",\n      \"value\": \"0\",\n      \"input\": \"0x095ea7b3000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d42900000000000000000000000000000000000000000000000000000000000003e8\",\n      \"status\": \"1\",\n      \"events\": [\n        {\n          \"logIndex\": \"54\",\n          \"emitterAddress\": \"0xc14FA393fa7248c73B74A303cf35D5e980E11e2C\",\n          \"topics\": [\n            \"0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\",\n            \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373\",\n            \"0x000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d429\"\n          ],\n          \"data\": \"0x00000000000000000000000000000000000000000000000000000000000003e8\",\n          \"removed\": false\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving FlareSystemsManager Contract Instance via Helpers – Flare, TypeScript\nDESCRIPTION: This TypeScript function locates and returns a FlareSystemsManager contract instance by querying the deployed Helpers contract for the appropriate address. It creates a Truffle contract object (FlareSystemsManager) ready for subsequent method invocations. The function requires the Helpers and FlareSystemsManager artifacts and abstracts address management for future compatibility. No parameters are taken, returning a contract instance linked to the latest system contract as defined by the Flare registry mechanism.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/evm-transaction.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getFlareSystemsManager() {\\n  const helpers: HelpersInstance = await getHelpers();\\n  const flareSystemsManagerAddress: string =\\n    await helpers.getFlareSystemsManager();\\n  return await FlareSystemsManager.at(flareSystemsManagerAddress);\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Base Fee for Attestation Request in Solidity\nDESCRIPTION: This function retrieves the base fee required for a specific attestation request. It takes ABI encoded attestation request data as input and returns the base fee as a uint256. The function reverts if the request is not supported.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IFdcRequestFeeConfigurations.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getRequestFee(\n    bytes _data\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Parsing Verifier Response in JSON\nDESCRIPTION: Demonstrates the structure of a successful validation response from the verifier, including the status and ABI-encoded request data.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/2-getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"VALID\",\n  \"abiEncodedRequest\": \"0x45564d5472616e73616374696f6e00000000000000000000000000000000000074657374455448000000000000000000000000000000000000000000000000009d410778cc0b2b8f1b8eaa79cbd0eed5d3be7514dea070e2041ad00a4c6e88f800000000000000000000000000000000000000000000000000000000000000204e636c6590b22d8dcdade7ee3b5ae5572f42edb1878f09b3034b2f7c3362ef3c00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Feed Update Event - Solidity\nDESCRIPTION: Defines the FeedUpdated event, emitted when an existing feed is updated. Parameters mirror those for feed addition: feedId (bytes21), rewardBandValue (uint32), inflationShare (uint24), and the index (uint256). Used for monitoring feed state mutations.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdatesConfiguration.md#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nevent FeedUpdated(\n    bytes21 feedId,\n    uint32 rewardBandValue,\n    uint24 inflationShare,\n    uint256 index\n)\n```\n\n----------------------------------------\n\nTITLE: Defining BalanceDecreasingTransaction Request Structure in Solidity\nDESCRIPTION: Specifies the input fields required for a BalanceDecreasingTransaction request, including the transaction ID and source address indicator.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/attestation-types/balance-decreasing-transaction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Request {\n    bytes32 transactionId;\n    bytes32 sourceAddressIndicator;\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Contract with web3.py on Flare Mainnet - Python\nDESCRIPTION: This Python code deploys a compiled Solidity contract using web3.py to the Flare mainnet. Requires all setup—including compiled ABI/bytecode and funding the deployment account. Outputs the deployed address for verification on mainnet explorers.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-python-developers.mdx#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n{DeployContractFlare}\n```\n\n----------------------------------------\n\nTITLE: Constructing Transaction Calldata for Protocol Manager Service\nDESCRIPTION: Describes the format for transaction calldata used by the Protocol Manager Service. It combines a function selector with concatenated data containing protocol ID, voting round ID, payload size, and the encoded protocol-specific payload. This structure is used for submissions like submit1, submit2, and submit3.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/4-offchain-services.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntx_data = function_selector + concatenated_data\n```\n\n----------------------------------------\n\nTITLE: Disabling Delegation Account in Solidity\nDESCRIPTION: Disables the delegation account contract, redirecting all rewards to the owner's account when using automatic claiming. Auto-claiming will no longer claim rewards for the delegation account.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction disableDelegationAccount(\n) external;\n```\n\n----------------------------------------\n\nTITLE: Preparing and Initiating Proof Retrieval for Payment Attestation - TypeScript\nDESCRIPTION: Defines 'retrieveDataAndProof' to build the proper DA Layer endpoint URL for the Payment attestation type and pass relevant parameters to the core retrieval logic. The function ensures the URL points to the ‘proof-by-request-round-raw’ path and invokes 'retrieveDataAndProofBase'. Requires global availability of COSTON2_DA_LAYER_URL. Inputs are ABI-encoded requests and round IDs, outputs are the retrieved proof objects.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nasync function retrieveDataAndProof(\n  abiEncodedRequest: string,\n  roundId: number,\n) {\n  const url = `${COSTON2_DA_LAYER_URL}api/v1/fdc/proof-by-request-round-raw`;\n  console.log(\"Url:\", url, \"\\n\");\n  return await retrieveDataAndProofBase(url, abiEncodedRequest, roundId);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Number - Flare Network - Python\nDESCRIPTION: Demonstrates retrieving the current block number from the Flare Mainnet using Python and the web3.py library. Requires 'web3' to be installed, and the Flare Mainnet RPC endpoint must be specified. Outputs the latest block as an integer, facilitating development and network monitoring scripts.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/0-overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3\n\nflare_rpc_url = \"<FLARE_MAINNET_RPC_URL>\"\nw3 = Web3(Web3.HTTPProvider(flare_rpc_url))\n\nblock_number = w3.eth.block_number\nprint(f\"Flare block number: {block_number}\")\n```\n\n----------------------------------------\n\nTITLE: Verifying Referenced Payment Nonexistence in Solidity\nDESCRIPTION: This function verifies a proof that a specific payment with reference did not occur within a given timeframe. It takes an IReferencedPaymentNonexistence.Proof structure and returns a boolean indicating if the proof is valid.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IFdcVerification.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction verifyReferencedPaymentNonexistence(\n    struct IReferencedPaymentNonexistence.Proof _proof\n) external view returns (\n    bool _proved\n);\n```\n\n----------------------------------------\n\nTITLE: Deploying MyStablecoin Contract with Hardhat in TypeScript\nDESCRIPTION: This script deploys the 'MyStablecoin' contract using Hardhat and Truffle artifacts. It imports the contract artifact, defines an asynchronous function `deployAndVerify` that takes owner addresses from a config file as constructor arguments, deploys the contract using `MyStablecoin.new()`, and attempts to verify the deployed contract on the blockchain explorer using the `hardhat-etherscan` plugin's `verify:verify` task. Any verification errors are caught and logged. Finally, it logs the network name and the deployed contract address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript title=\"scripts/proofOfReserves/deployToken.ts\"\nimport hre, { run } from \"hardhat\";\nimport { MyStablecoinInstance } from \"../../typechain-types\";\nimport { owner } from \"./config\";\n\nconst MyStablecoin = artifacts.require(\"MyStablecoin\");\n\nasync function deployAndVerify() {\n  const args: any[] = [owner, owner];\n  const myStablecoin: MyStablecoinInstance = await MyStablecoin.new(...args);\n  try {\n    await run(\"verify:verify\", {\n      address: myStablecoin.address,\n      constructorArguments: args,\n    });\n  } catch (e: any) {\n    console.log(e);\n  }\n  console.log(\n    `(${hre.network.name}) MyStablecoin deployed to`,\n    myStablecoin.address,\n    \"\\n\",\n  );\n}\n\ndeployAndVerify().then((data) => {\n  process.exit(0);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Attestation Request Structure in Solidity\nDESCRIPTION: Defines the data structure for requesting a payment attestation. It includes the transaction identifier and specific indices for UTXO-based chains (Bitcoin, Dogecoin) to pinpoint the relevant input and output associated with the source and receiving addresses. For non-UTXO chains, `inUtxo` and `utxo` should be set to 0.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/attestation-types/payment.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\n// Request structure for Payment Attestation\n// Field           | Solidity Type | Description\n// --------------- | ------------- | -----------------------------------------------------------------------------------------------------------------------------------------\n// `transactionId` | `bytes32`     | Unique ID of the payment transaction.\n// `inUtxo`        | `uint256`     | For UTXO-based chains, the index of the transaction input associated with the source address. Set to `0` for non-UTXO chains.\n// `utxo`          | `uint256`     | For UTXO-based chains, the index of the transaction output associated with the receiving address. Set to `0` for non-UTXO chains.\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Flare Systems Manager Instance in TypeScript\nDESCRIPTION: This asynchronous TypeScript function `getFlareSystemsManager` retrieves an instance of the `FlareSystemsManager` contract. It obtains an instance of the `Helpers` contract using `getHelpers`, calls the `getFlareSystemsManager` function on the helper instance to get the contract address, and then uses this address to return a typed contract instance of `FlareSystemsManager`.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/address-validity.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getFlareSystemsManager() {\n  const helpers: HelpersInstance = await getHelpers();\n  const flareSystemsManagerAddress: string =\n    await helpers.getFlareSystemsManager();\n  return await FlareSystemsManager.at(flareSystemsManagerAddress);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Verifier Service in the FDC Suite\nDESCRIPTION: This command launches a blockchain verifier service (e.g., Bitcoin verifier) in detached mode using Docker Compose.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Verifying Merkle Proof in Solidity\nDESCRIPTION: Declares the `verify` function in the IRelay interface. This payable external function verifies a given `_leaf` (or intermediate node) against the Merkle root for a specific `_protocolId` and `_votingRoundId` using the provided Merkle `_proof`. It may require payment of a protocol-specific fee, and overpayments are not refunded. Returns true on successful verification.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRelay.md#2025-04-22_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction verify(\n    uint256 _protocolId,\n    uint256 _votingRoundId,\n    bytes32 _leaf,\n    bytes32[] _proof\n) external payable returns (\n    bool\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Delegation Information in IWNat Solidity Interface\nDESCRIPTION: Returns information about delegations made by a specified address at a specific block number, including delegates, percentages, count, and delegation mode.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction delegatesOfAt(\n    address _who,\n    uint256 _blockNumber\n) external view returns (\n    address[] _delegateAddresses,\n    uint256[] _bips,\n    uint256 _count,\n    uint256 _delegationMode\n);\n```\n\n----------------------------------------\n\nTITLE: Go Project Folder Structure Example - Plaintext\nDESCRIPTION: This plaintext snippet outlines the expected project directory tree for Go-based development targeting Flare. It shows organization into network-specific subfolders (coston2, flare), plus Go module files at the root. This serves as reference rather than code, ensuring a clear separation for testnet and mainnet code and assets. No dependencies or execution is needed.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-go-developers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ndeveloper-hub-go/\\n├── coston2/\\n│   └── *.go\\n├── flare/\\n│   └── *.go\\n├── main.go\\n├── go.mod\\n└── go.sum\\n\n```\n\n----------------------------------------\n\nTITLE: Querying Price for Range Increase in Solidity Interface\nDESCRIPTION: This Solidity interface snippet defines `rangeIncreasePrice`, a function allowing external callers to fetch the current fee for incrementally increasing the per-block range. It requires no inputs and returns a `Fee` value, prorated for the magnitude of increase. The accessor is helpful for third-party offerors to calculate necessary payments or compare protocol parameters over time.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdateIncentiveManager.md#2025-04-22_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rangeIncreasePrice(\n) external view returns (\n    Fee\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving FdcHub Contract Instance in Solidity\nDESCRIPTION: This snippet demonstrates obtaining an instance of the `IFdcHub` contract, the central hub for FDC interactions, using the `ContractRegistry` helper library. It also logs the retrieved contract address for verification.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\n   IFdcHub fdcHub = ContractRegistry.getFdcHub();\n   console.log(\"fcdHub address:\");\n   console.log(address(fdcHub));\n   console.log(\"\\n\");\n```\n\n----------------------------------------\n\nTITLE: End-to-End Proof Request Preparation Contract - Solidity Foundry\nDESCRIPTION: Defines a full contract for orchestrating retrieval and assembly of proof request bodies and headers for DA layer interaction, integrating environment loading, file reading, string concatenation, and header formatting. Intended as an executable script (`run()`) for Foundry or similar frameworks, requiring directory path, attestation type, and the `Base.prepareHeaders` utility for authentication.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/address-validity.mdx#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\ncontract RetrieveDataAndProof is Script {\n using Surl for *;\n\n function run() external {\n    string memory daLayerUrl = vm.envString(\"COSTON2_DA_LAYER_URL\");\n    string memory apiKey = vm.envString(\"X_API_KEY\");\n\n    string memory requestBytes = vm.readLine(\n        string.concat(\n            dirPath,\n            attestationTypeName,\n            \"_abiEncodedRequest\",\n            \".txt\"\n        )\n    );\n    string memory votingRoundId = vm.readLine(\n        string.concat(\n            dirPath,\n            attestationTypeName,\n            \"_votingRoundId\",\n            \".txt\"\n        )\n    );\n\n    console.log(\"votingRoundId: %s\\n\", votingRoundId);\n    console.log(\"requestBytes: %s\\n\", requestBytes);\n\n    string[] memory headers = Base.prepareHeaders(apiKey);\n    string memory body = string.concat(\n        '{\"votingRoundId\":',\n        votingRoundId,\n        ',\"requestBytes\":\"',\n        requestBytes,\n        '\"}'\n    );\n    console.log(\"body: %s\\n\", body);\n    console.log(\n        \"headers: %s\",\n        string.concat(\"{\", headers[0], \", \", headers[1]),\n        \"}\\n\"\n    );\n\n\n ...\n }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying FDC Request Fee Configurations in Solidity\nDESCRIPTION: Function to retrieve the FDC request fee configurations contract address. Returns an interface for accessing request fee configurations.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IFdcHub.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction fdcRequestFeeConfigurations(\n) external view returns (\n    contract IFdcRequestFeeConfigurations\n);\n```\n\n----------------------------------------\n\nTITLE: Entering Available Agent List\nDESCRIPTION: Command to register the agent vault and collateral pool, making them publicly accessible for minting by other users.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot enter <agentVaultAddress>\n```\n\n----------------------------------------\n\nTITLE: Exiting Available Agent List\nDESCRIPTION: Command to remove the agent vault and collateral pool from public availability, preventing users from selecting the agent for minting.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot exit <agentVaultAddress>\n```\n\n----------------------------------------\n\nTITLE: Defining the ERC20 Transfer Event - Solidity\nDESCRIPTION: This Solidity snippet gives the canonical definition of the ERC20 Transfer event, as found in the ERC20 token standard. It declares indexed fields for 'from' and 'to' addresses, and a non-indexed 'value'. Understanding this signature is key for mapping log topics to event arguments, which is essential for event decoding in Ethereum-based smart contracts.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/connect-evm-chains.mdx#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nevent Transfer(address indexed from, address indexed to, uint256 value);\n```\n\n----------------------------------------\n\nTITLE: Defining ResponseBody Struct for Address Validation Results in Solidity\nDESCRIPTION: Defines the response body containing address validation results. Includes a boolean indicating validity, the standardized form of the address (if valid), and a hash of the standardized address for efficient comparison.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IAddressValidity.mdx#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nstruct ResponseBody {\n    bool isValid;\n    string standardAddress;\n    bytes32 standardAddressHash;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Address Validator Using IFdcVerification in Solidity\nDESCRIPTION: This code snippet demonstrates how to use the IFdcVerification interface to create an AddressValidator contract. It includes a function to verify if an address is valid using a provided proof.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IFdcVerification.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/IFdcVerification.sol\";\nimport \"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/fdc/IAddressValidity.sol\";\n\ncontract AddressValidator {\n    IFdcVerification private fdcVerification;\n\n    constructor(address _fdcVerificationAddress) {\n        fdcVerification = IFdcVerification(_fdcVerificationAddress);\n    }\n\n    // Function to verify if an address is valid using a provided proof\n    function isAddressValid(IAddressValidity.Proof memory proof) external view returns (bool isValid, string memory standardAddress) {\n        bool proofVerified = fdcVerification.verifyAddressValidity(proof);\n\n        if (proofVerified) {\n            // If proof is valid, extract the response data\n            isValid = proof.data.responseBody.isValid;\n            standardAddress = proof.data.responseBody.standardAddress;\n            return (isValid, standardAddress);\n        }\n\n        // If proof verification failed\n        return (false, \"\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring WNat Cap for Policy Weight - Solidity\nDESCRIPTION: Provides an interface method that externally exposes the WNat cap parameter for signing policy weight calculations. The function is parameterless, read-only (external view), and returns a uint24 value. This supports transparency for policy participants and ensures that cap logic is accessible for integration and audit.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IFlareSystemsCalculator.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction wNatCapPPM(\n) external view returns (\n    uint24\n);\n```\n\n----------------------------------------\n\nTITLE: RelayInitialConfig Struct Definition in Solidity\nDESCRIPTION: Defines the `RelayInitialConfig` struct within the IRelay interface scope. This structure encapsulates all the necessary parameters for initializing the relay contract, such as initial reward epoch details, signing policy hash, timing parameters, fee configurations, and the fee collection address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRelay.md#2025-04-22_snippet_19\n\nLANGUAGE: solidity\nCODE:\n```\nstruct RelayInitialConfig {\n  uint32 initialRewardEpochId;\n  uint32 startingVotingRoundIdForInitialRewardEpochId;\n  bytes32 initialSigningPolicyHash;\n  uint8 randomNumberProtocolId;\n  uint32 firstVotingRoundStartTs;\n  uint8 votingEpochDurationSeconds;\n  uint32 firstRewardEpochStartVotingRoundId;\n  uint16 rewardEpochDurationInVotingEpochs;\n  uint16 thresholdIncreaseBIPS;\n  uint32 messageFinalizationWindowInRewardEpochs;\n  address payable feeCollectionAddress;\n  struct IRelay.FeeConfig[] feeConfigs;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonApi Request Parameters\nDESCRIPTION: Definition of request parameters needed for JsonApi attestation, including the API URL, JQ postprocessing command, and ABI signature that defines the Solidity struct for data decoding. Also defines configuration constants for the attestation type and source.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/json-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Request data\nconst apiUrl = \"https://swapi.dev/api/people/3/\";\nconst postprocessJq = `{name: .name, height: .height, mass: .mass, numberOfFilms: .films | length, uid: (.url | split(\"/\") | .[-2] | tonumber)}`;\nconst abiSignature = `{\\\"components\\\": [{\\\"internalType\\\": \\\"string\\\", \\\"name\\\": \\\"name\\\", \\\"type\\\": \\\"string\\\"},{\\\"internalType\\\": \\\"uint256\\\", \\\"name\\\": \\\"height\\\", \\\"type\\\": \\\"uint256\\\"},{\\\"internalType\\\": \\\"uint256\\\", \\\"name\\\": \\\"mass\\\", \\\"type\\\": \\\"uint256\\\"},{\\\"internalType\\\": \\\"uint256\\\", \\\"name\\\": \\\"numberOfFilms\\\", \\\"type\\\": \\\"uint256\\\"},{\\\"internalType\\\": \\\"uint256\\\", \\\"name\\\": \\\"uid\\\", \\\"type\\\": \\\"uint256\\\"}],\\\"name\\\": \\\"task\\\",\\\"type\\\": \\\"tuple\\\"}`;\n\n// Configuration constants\nconst attestationTypeBase = \"IJsonApi\";\nconst sourceIdBase = \"WEB2\";\nconst verifierUrlBase = JQ_VERIFIER_URL_TESTNET;\n```\n\n----------------------------------------\n\nTITLE: Defining FAssets Redemption Constants\nDESCRIPTION: Defines essential constants for FAssets redemption including contract addresses and redemption parameters.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/developer-guides/3-fassets-redeem.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst ASSET_MANAGER_ADDRESS = \"0x56728e46908fB6FcC5BCD2cc0c0F9BB91C3e4D34\";\nconst LOTS_TO_REDEEM = 1;\nconst UNDERLYING_ADDRESS = \"rSHYuiEvsYsKR8uUHhBTuGP5zjRcGt4nm\";\nconst FXRP_TOKEN_ADDRESS = \"0x36be8f2e1CC3339Cf6702CEfA69626271C36E2fd\";\n```\n\n----------------------------------------\n\nTITLE: Calculating FDC Voting Round ID in TypeScript\nDESCRIPTION: This asynchronous TypeScript function `calculateRoundId` determines the voting round ID associated with an FDC request submission transaction. It retrieves the block timestamp from the transaction receipt, gets an instance of the `FlareSystemsManager` contract, fetches the `firstVotingRoundStartTs` and `votingEpochDurationSeconds` from it, and calculates the round ID using the formula: `(blockTimestamp - firstVotingRoundStartTs) / votingEpochDurationSeconds`. It logs intermediate values and compares the calculated ID with the current epoch ID retrieved from the `FlareSystemsManager`.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/address-validity.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nasync function calculateRoundId(transaction: any) {\n  const blockNumber = transaction.receipt.blockNumber;\n  const block = await ethers.provider.getBlock(blockNumber);\n  const blockTimestamp = BigInt(block!.timestamp);\n\n  const flareSystemsManager: IFlareSystemsManagerInstance =\n    await getFlareSystemsManager();\n  const firsVotingRoundStartTs = BigInt(\n    await flareSystemsManager.firstVotingRoundStartTs(),\n  );\n  const votingEpochDurationSeconds = BigInt(\n    await flareSystemsManager.votingEpochDurationSeconds(),\n  );\n\n  console.log(\"Block timestamp:\", blockTimestamp, \"\\n\");\n  console.log(\"First voting round start ts:\", firsVotingRoundStartTs, \"\\n\");\n  console.log(\n    \"Voting epoch duration seconds:\",\n    votingEpochDurationSeconds,\n    \"\\n\",\n  );\n\n  const roundId = Number(\n    (blockTimestamp - firsVotingRoundStartTs) / votingEpochDurationSeconds,\n  );\n  console.log(\"Calculated round id:\", roundId, \"\\n\");\n  console.log(\n    \"Received round id:\",\n    Number(await flareSystemsManager.getCurrentVotingEpochId()),\n    \"\\n\",\n  );\n  return roundId;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving the FDC Hub Instance in TypeScript\nDESCRIPTION: This asynchronous TypeScript function `getFdcHub` retrieves an instance of the `FdcHub` contract. It first gets an instance of the `Helpers` contract using `getHelpers`, then calls the `getFdcHub` function on the helper instance to get the address, and finally uses the address to get a typed contract instance of `FdcHub`.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/address-validity.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getFdcHub() {\n  const helpers: HelpersInstance = await getHelpers();\n  const fdcHubAddress: string = await helpers.getFdcHub();\n  return await FdcHub.at(fdcHubAddress);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Supporting Structures - Flare Systems Manager Interface - Solidity\nDESCRIPTION: Specifies the data structures for storing the number of weight-based claims (with reward manager id linkage) and signature components (v, r, s) for signature verification. These structures are used as parameter and return types for several functions, supporting clear and type-safe contract code. The struct definitions ensure interoperability within the Flare ecosystem and facilitate off-chain client parsing and signature logic.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IFlareSystemsManager.md#2025-04-22_snippet_6\n\nLANGUAGE: Solidity\nCODE:\n```\nstruct NumberOfWeightBasedClaims {\n  uint256 rewardManagerId;\n  uint256 noOfWeightBasedClaims;\n}\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nstruct Signature {\n  uint8 v;\n  bytes32 r;\n  bytes32 s;\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Delegating Voting Power in Solidity\nDESCRIPTION: Undelegates all existing delegations and then delegates voting power to multiple addresses in a single transaction. The total of all _bips values must not exceed 10000 (100%).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction batchDelegate(\n    address[] _delegatees,\n    uint256[] _bips\n) external;\n```\n\n----------------------------------------\n\nTITLE: Defining Rewards Offered Event in Solidity\nDESCRIPTION: Defines the `RewardsOffered` event signature within the `IFtsoRewardOffersManager` interface. It is emitted when a specific reward offer (potentially user-submitted via `offerRewards`) is successfully processed, logging details such as the reward epoch, feed ID, decimals, amount, minimum turnout (BIPS), reward band parameters (PPM), and the address designated for claiming back unused funds.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/solidity-reference/IFtsoRewardOffersManager.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nevent RewardsOffered(\n    uint24 rewardEpochId,\n    bytes21 feedId,\n    int8 decimals,\n    uint256 amount,\n    uint16 minRewardedTurnoutBIPS,\n    uint24 primaryBandRewardSharePPM,\n    uint24 secondaryBandWidthPPM,\n    address claimBackAddress\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving First Reward Epoch Start Timestamp in Solidity\nDESCRIPTION: Function to retrieve the timestamp when the first reward epoch started, measured in seconds since UNIX epoch.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/ProtocolsV2Interface.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction firstRewardEpochStartTs(\n) external view returns (\n    uint64\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Executor in Solidity\nDESCRIPTION: Allows an executor to register and set their fee value. Requires a registration fee payment. Returns the reward epoch when the registration becomes effective.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction registerExecutor(\n    uint256 _feeValue\n) external payable returns (\n    uint256);\n```\n\n----------------------------------------\n\nTITLE: Saving EVM Transaction Proof to File for Later Use\nDESCRIPTION: Writes the encoded proof to a file so it can be loaded into a variable later, useful for deployment scenarios where proof verification happens in a deployed contract.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_20\n\nLANGUAGE: solidity\nCODE:\n```\nBase.writeToFile(\n    dirPath,\n    string.concat(attestationTypeName, \"_proof\"),\n    StringsBase.toHexString(abi.encode(_proof)),\n    true\n);\n```\n\n----------------------------------------\n\nTITLE: Confirming Signing Policy Address Registration - Solidity\nDESCRIPTION: Confirms the registration of a signing policy address for a specified voter. Called by the signing policy address, it finalizes the assignment previously proposed by a voter. Needs the voter's address as input; returns nothing. Intended for use in smart contracts conforming to the IEntityManager interface.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction confirmSigningPolicyAddressRegistration(\n    address _voter\n) external;\n```\n\n----------------------------------------\n\nTITLE: Parsing DA Layer Response and Decoding EVMTransaction Data in Solidity\nDESCRIPTION: Code that parses the returned data from the DA Layer, decodes it into the ParsableProof structure, and then further decodes the responseHex field into the specific IEVMTransaction.Response struct.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nbytes memory dataJson = parseData(data);\nParsableProof memory proof = abi.decode(dataJson, (ParsableProof));\n\nIEVMTransaction.Response memory proofResponse = abi.decode(\n proof.responseHex,\n (IEVMTransaction.Response)\n);\n```\n\n----------------------------------------\n\nTITLE: Freeing Underlying Balance\nDESCRIPTION: Command to release underlying balance assets that are not currently locked to back FAssets.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot freeUnderlyingBalance <agentVaultAddress>\n```\n\n----------------------------------------\n\nTITLE: Contract Interaction Script\nDESCRIPTION: Script to interact with the deployed contract, reading proof data and calling methods.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_27\n\nLANGUAGE: solidity\nCODE:\n```\ncontract InteractWithContract is Script {\n    function run() external {\n        string memory addressString = vm.readLine(\n            string.concat(\n                dirPath,\n                attestationTypeName,\n                \"_listenerAddress\",\n                \".txt\"\n            )\n        );\n        address listenerAddress = vm.parseAddress(addressString);\n        string memory proofString = vm.readLine(\n            string.concat(dirPath, attestationTypeName, \"_proof\", \".txt\")\n        );\n        bytes memory proofBytes = vm.parseBytes(proofString);\n        IEVMTransaction.Proof memory proof = abi.decode(\n            proofBytes,\n            (IEVMTransaction.Proof)\n        );\n        uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n        vm.startBroadcast(deployerPrivateKey);\n        ITransferEventListener listener = ITransferEventListener(\n            listenerAddress\n        );\n        console.logAddress(address(listener));\n        listener.collectTransferEvents(proof);\n        vm.stopBroadcast();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FDC Contract List in JavaScript\nDESCRIPTION: Defines an array of FDC contract names that are referenced throughout the documentation. This array includes the main components of the Flare Data Connector system: FdcHub, FdcVerification, FdcRequestFeeConfigurations, and FdcInflationConfigurations.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/5-reference.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const contracts = [\n  \"FdcHub\",\n  \"FdcVerification\",\n  \"FdcRequestFeeConfigurations\",\n  \"FdcInflationConfigurations\",\n];\n```\n\n----------------------------------------\n\nTITLE: Querying State of Rewards for Owner - Solidity Interface\nDESCRIPTION: Implements 'getStateOfRewards', allowing retrieval of all unclaimed epochs' reward states for a given owner address. Depends on RewardState struct from RewardsV2Interface; useful for frontends that display all pending claims for a user.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRewardManager.md#2025-04-22_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getStateOfRewards(\n    address _rewardOwner\n) external view returns (\n    struct RewardsV2Interface.RewardState[][] _rewardStates\n);\n```\n\n----------------------------------------\n\nTITLE: Querying FDC Inflation Configurations in Solidity\nDESCRIPTION: Function to retrieve the FDC inflation configurations contract address. Returns an interface for accessing inflation configurations.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IFdcHub.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction fdcInflationConfigurations(\n) external view returns (\n    contract IFdcInflationConfigurations\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Weather API Data Transport Struct - Solidity\nDESCRIPTION: Defines the DataTransportObject struct, which specifies the weather data fields to be used by the FDC when encoding and decoding data from the OpenWeather API. This struct includes location, weather description, temperature, and wind metrics. It acts as the schema for data transfer and proof verification, requiring struct field consistency between the contract and the off-chain data provider.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/weather-insurance.mdx#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nstruct DataTransportObject {\\n    int256 latitude;\\n    int256 longitude;\\n    string description;\\n    int256 temperature;\\n    int256 minTemp;\\n    uint256 windSpeed;\\n    uint256 windDeg;\\n}\n```\n\n----------------------------------------\n\nTITLE: Total Vote Power Query Functions\nDESCRIPTION: Functions to query the total vote power, both current and historical at specific block numbers.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_23\n\nLANGUAGE: solidity\nCODE:\n```\nfunction totalVotePower() external view returns (uint256);\n\nfunction totalVotePowerAt(uint256 _blockNumber) external view returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Delegating Voting Power in Solidity\nDESCRIPTION: Delegates a percentage of voting power from the sender's delegation account to another address. The percentage is specified in basis points (1/100 of one percent).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction delegate(\n    address _to,\n    uint256 _bips\n) external;\n```\n\n----------------------------------------\n\nTITLE: Making Volatility Incentive Offer using web3.py (Python)\nDESCRIPTION: This Python snippet leverages web3.py to interact with Flare's volatility incentive contract. It requires web3.py installed, the target RPC endpoint, contract ABI and address, and a funded private key/account. The code initializes a contract instance, builds and signs the transaction, and broadcasts it. Key parameters include the cost and the sample size; output is a transaction hash, and execution takes place in a Python environment with proper dependencies.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/make-volatility-incentive.mdx#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{VolIncentiveWeb3Py}\n```\n\n----------------------------------------\n\nTITLE: Installing Foundry Project Dependencies with forge soldeer - Bash\nDESCRIPTION: Installs project dependencies for the Foundry starter kit using the 'forge soldeer install' command. Requires Foundry to be installed. This pulls in remappings and package dependencies required for compiling and testing contracts. No additional configuration is required at this step.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/hardhat-foundry-starter-kit.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nforge soldeer install\n```\n\n----------------------------------------\n\nTITLE: Defining FastUpdates Structure in Solidity\nDESCRIPTION: Defines the `FastUpdates` structure within the `IFastUpdater` interface. This struct encapsulates all necessary data for a fast update submission, including the target sortition block, the provider's sortition credential, the encoded update deltas (`bytes`), and a signature (`IFastUpdater.Signature`) for authentication.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdater.md#2025-04-22_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nstruct FastUpdates {\n  uint256 sortitionBlock;\n  struct SortitionCredential sortitionCredential;\n  bytes deltas;\n  struct IFastUpdater.Signature signature;\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining FDC Request Fee via Fee Configuration Contract – Flare, TypeScript\nDESCRIPTION: This TypeScript async function fetches the address of the FdcRequestFeeConfigurations contract and calls getRequestFee using an ABI-encoded request string. It leverages the Helpers contract and Truffle artifacts for address lookups. The key input is abiEncodedRequest, which identifies the attestation for which the fee is needed. The output is the minimum fee required, as a BigNumber or string, ready to be paid as part of the attestation request transaction. The workflow ensures dynamic fee calculation based on on-chain logic rather than hardcoded values.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/evm-transaction.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getFdcRequestFee(abiEncodedRequest: string) {\\n  const helpers: HelpersInstance = await getHelpers();\\n  const fdcRequestFeeConfigurationsAddress: string =\\n    await helpers.getFdcRequestFeeConfigurations();\\n  const fdcRequestFeeConfigurations: IFdcRequestFeeConfigurationsInstance =\\n    await FdcRequestFeeConfigurations.at(fdcRequestFeeConfigurationsAddress);\\n  return await fdcRequestFeeConfigurations.getRequestFee(abiEncodedRequest);\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Compiling a Solidity Contract with py-solc-x - Python\nDESCRIPTION: This script installs the appropriate version of the Solidity compiler (via py-solc-x), compiles the specified contract, and outputs the results to a JSON file. It reads source from file, uses the utilities in 'utils.py', and handles any compilation errors. Requires 'py-solc-x', 'json', and associated utility functions. Outputs compiled ABI and bytecode to be used for deployment.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-python-developers.mdx#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n{CompileContract}\n```\n\n----------------------------------------\n\nTITLE: Confirming Submit Signatures Address Registration - Solidity\nDESCRIPTION: Finalizes the registration of a submit signatures address for a voter entity. Called by the submit signatures address, the function expects the voter's address as an input argument. Used in the context of smart contracts that require voter-to-address assignment tracking.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction confirmSubmitSignaturesAddressRegistration(\n    address _voter\n) external;\n```\n\n----------------------------------------\n\nTITLE: Verifying EVM Transactions and Extracting ERC-20 Transfers using Flare Fdc in Solidity\nDESCRIPTION: This Solidity contract provides utility functions to request and verify EVM transaction attestations using Flare's Fdc smart contracts. It demonstrates initializing interface references via constructor injection, encoding request bodies for attestation submission, and parsing returned proofs to extract ERC-20 transfer event details from the blockchain logs. Dependencies include the @flare-foundation contracts (IFdcHub, IFdcVerification, IEVMTransaction) and requires correct deployment and funding when making requests. Inputs include transaction hashes, event log indices, and the expected ERC-20 Transfer signature; outputs are transfer-related addresses and amount. Limitations involve proper calculation of the messageIntegrityCode (here set to 0) and support strictly for ERC-20 transfer events as specified.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IEVMTransaction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/IFdcHub.sol\";\nimport \"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/IFdcVerification.sol\";\nimport \"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/fdc/IEVMTransaction.sol\";\n\ncontract EVMTransactionVerifier {\n    IFdcHub private fdcHub;\n    IFdcVerification private fdcVerification;\n\n    bytes32 private constant ATTESTATION_TYPE_EVM_TX = 0x0600000000000000000000000000000000000000000000000000000000000000;\n    bytes32 private constant SOURCE_ID_ETH = 0x4554480000000000000000000000000000000000000000000000000000000000;\n\n    // Event signatures we're interested in\n    bytes32 private constant EVENT_TRANSFER = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    constructor(address _fdcHubAddress, address _fdcVerificationAddress) {\n        fdcHub = IFdcHub(_fdcHubAddress);\n        fdcVerification = IFdcVerification(_fdcVerificationAddress);\n    }\n\n    // Request verification of an EVM transaction with specific events\n    function requestTransactionVerification(\n        bytes32 transactionHash,\n        uint16 requiredConfirmations,\n        bool includeInput,\n        uint32[] calldata eventIndices\n    ) external payable {\n        // Create request body\n        IEVMTransaction.RequestBody memory requestBody = IEVMTransaction.RequestBody({\n            transactionHash: transactionHash,\n            requiredConfirmations: requiredConfirmations,\n            provideInput: includeInput,\n            listEvents: eventIndices.length > 0,\n            logIndices: eventIndices\n        });\n\n        // Encode the full request\n        bytes memory encodedRequest = abi.encode(\n            ATTESTATION_TYPE_EVM_TX,\n            SOURCE_ID_ETH,\n            bytes32(0), // messageIntegrityCode (would need to be calculated properly)\n            requestBody\n        );\n\n        // Submit the request with payment\n        fdcHub.requestAttestation{value: msg.value}(encodedRequest);\n    }\n\n    // Verify a provided proof and extract ERC-20 transfer information\n    function verifyERC20Transfer(IEVMTransaction.Proof calldata _proof)\n        external view\n        returns (\n            bool success,\n            address tokenContract,\n            address from,\n            address to,\n            uint256 amount\n        )\n    {\n        // Verify the proof using FdcVerification\n        bool proofVerified = fdcVerification.verifyEVMTransaction(_proof);\n\n        if (proofVerified && _proof.data.responseBody.status == 1) {\n            // Look for Transfer events in the transaction\n            IEVMTransaction.Event[] memory events = _proof.data.responseBody.events;\n\n            for (uint i = 0; i < events.length; i++) {\n                IEVMTransaction.Event memory evt = events[i];\n\n                // Check if this is a Transfer event (topic[0] is the event signature)\n                if (evt.topics.length >= 3 && evt.topics[0] == EVENT_TRANSFER) {\n                    tokenContract = evt.emitterAddress;\n\n                    // ERC-20 Transfer(address indexed from, address indexed to, uint256 amount)\n                    // topics[1] is the first indexed parameter (from address)\n                    // topics[2] is the second indexed parameter (to address)\n                    // The addresses are padded to 32 bytes, so we need to extract them\n                    from = address(uint160(uint256(evt.topics[1])));\n                    to = address(uint160(uint256(evt.topics[2])));\n\n                    // The amount is in the data field for non-indexed parameters\n                    // It's a single uint256 value (32 bytes)\n                    amount = abi.decode(evt.data, (uint256));\n\n                    return (true, tokenContract, from, to, amount);\n                }\n            }\n        }\n\n        return (false, address(0), address(0), address(0), 0);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying FlareContractRegistry Contract on Mainnet - JavaScript\nDESCRIPTION: This code queries the FlareContractRegistry contract on Flare Mainnet via web3.js, retrieving other contract addresses like WNat. Similar to the Coston2 version but adjusted for mainnet endpoints. Requires ABI and contract address for mainnet FlareContractRegistry.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-javascript-developers.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/* Code for MakeQueryFlare loaded from external file - not shown here */\n```\n\n----------------------------------------\n\nTITLE: Retrieving Contract Address by Name in Solidity\nDESCRIPTION: Function that returns a contract address for a given contract name. The function accepts a string parameter representing the contract name and returns the corresponding address, which might be address(0) if the contract is not found.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IFlareContractRegistry.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getContractAddressByName(\n    string _name\n) external view returns (\n    address);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Provider Sortition Weight in Solidity\nDESCRIPTION: Defines the `currentSortitionWeight` view function in the `IFastUpdater` interface. It accepts a provider's signing policy address (`_signingPolicyAddress`) and returns their current weight (`_weight`) for sortition purposes. This weight, derived from FTSO delegation but rescaled, determines the provider's likelihood of being selected to submit updates.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdater.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction currentSortitionWeight(\n    address _signingPolicyAddress\n) external view returns (\n    uint256 _weight\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching All Current Feed Data in Solidity\nDESCRIPTION: Defines the `fetchAllCurrentFeeds` view function in the `IFastUpdater` interface. It provides public access to the complete set of current feed data, returning parallel arrays of feed IDs (`_feedIds`), feed values (`_feeds`), decimal places (`_decimals`), and the timestamp (`_timestamp`) of the last update.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdater.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction fetchAllCurrentFeeds(\n) external view returns (\n    bytes21[] _feedIds,\n    uint256[] _feeds,\n    int8[] _decimals,\n    uint64 _timestamp\n);\n```\n\n----------------------------------------\n\nTITLE: Retiring Unclaimed Weather Insurance Policy in Solidity\nDESCRIPTION: This function retires an unclaimed policy if the current timestamp is past the expiration date. It marks the policy as settled, returns the premium to the policyholder, and emits a PolicyRetired event.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/weather-insurance.mdx#2025-04-22_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction retireUnclaimedPolicy(uint256 id) public {\n    Policy memory policy = registeredPolicies[id];\n    require(policy.status == PolicyStatus.Unclaimed, \"Policy not unclaimed\");\n    require(block.timestamp > policy.expirationTimestamp, \"Policy not yet expired\");\n    policy.status = PolicyStatus.Settled;\n    registeredPolicies[id] = policy;\n    payable(policy.holder).transfer(policy.premium);\n\n    emit PolicyRetired(id);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Reward States in Solidity\nDESCRIPTION: View function that returns the state of rewards for all unclaimed reward epochs for a given address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/RewardsV2Interface.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getStateOfRewards(\n    address _rewardOwner\n) external view returns (\n    struct RewardsV2Interface.RewardState[][] _rewardStates\n);\n```\n\n----------------------------------------\n\nTITLE: Verifying Payment Proof Using FdcVerification Contract\nDESCRIPTION: Demonstrates how to verify a payment proof using the FdcVerification contract accessed through the ContractRegistry. The verification checks if the Merkle proof matches the on-chain Merkle root.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_24\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\nvm.startBroadcast(deployerPrivateKey);\n\nbool isValid = ContractRegistry\n .getFdcVerification()\n .verifyPayment(proof);\nconsole.log(\"proof is valid: %s\\n\", StringsBase.toString(isValid));\n\nvm.stopBroadcast();\n```\n\n----------------------------------------\n\nTITLE: Getting Delegation Account Data in Solidity\nDESCRIPTION: Retrieves the delegation account and its status for a given owner. Returns the account address and whether it's enabled.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getDelegationAccountData(\n    address _owner\n) external view returns (\n    contract IDelegationAccount _delegationAccount,\n    bool _enabled);\n```\n\n----------------------------------------\n\nTITLE: Checking Redemption Status with User Bot CLI\nDESCRIPTION: Provides information on the current status of redemption requests. Requires the FAsset symbol (via the required `--fasset` flag). By default, it lists all open redemptions. The optional `--request-id <requestId>` flag filters for a specific redemption request. Status can be PENDING, SUCCESS, DEFAULT, or EXPIRED.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/user-bot.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nyarn user-bot redemptionStatus\n```\n\n----------------------------------------\n\nTITLE: Running the FAssets User Bot CLI (Docker)\nDESCRIPTION: Command structure for executing user bot commands within the pre-configured Docker container environment. This replaces the `yarn user-bot` prefix with `docker compose --profile cli run user-bot`. Requires specifying the command, arguments, and the FAsset symbol via the `--fasset` flag.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/user-bot.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose --profile cli run user-bot [command] <args> --fasset [fAssetSymbol]\n```\n\n----------------------------------------\n\nTITLE: Contract Deployment Script\nDESCRIPTION: Script to deploy the TransferEventListener contract and save its address to a file.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_25\n\nLANGUAGE: solidity\nCODE:\n```\ncontract DeployContract is Script {\n    function run() external {\n        uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n        vm.startBroadcast(deployerPrivateKey);\n        TransferEventListener listener = new TransferEventListener();\n        address listenerAddress = address(listener);\n        vm.stopBroadcast();\n\n        Base.writeToFile(\n            dirPath,\n            string.concat(attestationTypeName, \"_listenerAddress\"),\n            StringsBase.toHexString(abi.encodePacked(listenerAddress)),\n            true\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Verifier Generator Repository\nDESCRIPTION: Commands to clone the VerifierServerGenerator repository and install dependencies using yarn\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/create-attestation-type.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/flare-foundation/VerifierServerGenerator.git\nyarn\n```\n\n----------------------------------------\n\nTITLE: Defining Signature Structure in Solidity\nDESCRIPTION: Defines the `Signature` structure within the `IFastUpdater` interface. This struct holds the components (v, r, s) of an ECDSA signature, used within the `FastUpdates` struct to verify the authenticity and authorization of submitted updates.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdater.md#2025-04-22_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Signature {\n  uint8 v;\n  bytes32 r;\n  bytes32 s;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EVM Version London in Solidity JSON Input\nDESCRIPTION: JSON configuration snippet demonstrating how to set the `evmVersion` to `london` within the `settings` object for the standard Solidity compiler input. This configuration is required for contracts using Flare's secure random number functionality.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/secure-random-numbers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"settings\": {\n    \"optimizer\": {\n      /* ... */\n    },\n    \"evmVersion\": \"london\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Vote Power Block for Reward Epoch in Solidity\nDESCRIPTION: Function to retrieve the vote power block number for a specified reward epoch ID.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/ProtocolsV2Interface.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getVotePowerBlock(\n    uint256 _rewardEpochId\n) external view returns (\n    uint64 _votePowerBlock\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Attestation Requests in TypeScript\nDESCRIPTION: Defines an array of AttestationRequest objects, each representing a source of reserve data. Includes configurations for a JSON API, Coston, and Coston2 networks. This setup allows for easy addition of new data sources.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ntype AttestationRequest = {\n  source: string;\n  sourceIdBase: string;\n  verifierUrlBase: string;\n  verifierApiKey: string;\n  urlTypeBase: string;\n  data: any;\n};\n\nconst requests: AttestationRequest[] = [\n  {\n    source: \"jsonApi\",\n    sourceIdBase: \"WEB2\",\n    verifierUrlBase: JQ_VERIFIER_URL_TESTNET!,\n    verifierApiKey: JQ_VERIFIER_API_KEY!,\n    urlTypeBase: \"\",\n    data: {\n      apiUrl:\n        \"https://api.htdigitalassets.com/alm-stablecoin-db/metrics/current_reserves_amount\",\n      postprocessJq: `{reserves: .value | gsub(\\\",\\\";\\\"\\\") | sub(\\\"\\\\\\\\.\\\\\\\\d*\\\";\\\"\\\")}`,\n      abiSignature: `{\\\"components\\\": [{\\\"internalType\\\": \\\"uint256\\\",\\\"name\\\": \\\"reserves\\\",\\\"type\\\": \\\"uint256\\\"}],\\\"internalType\\\": \\\"struct DataTransportObject\\\",\\\"name\\\": \\\"dto\\\",\\\"type\\\": \\\"tuple\\\"}`,\n    },\n  },\n  {\n    source: \"coston\",\n    sourceIdBase: \"testSGB\",\n    verifierUrlBase: VERIFIER_URL_TESTNET!,\n    verifierApiKey: VERIFIER_API_KEY!,\n    urlTypeBase: \"sgb\",\n    data: {\n      transactionHash: transactionHashes.get(\"coston\")!,\n    },\n  },\n  {\n    source: \"coston2\",\n    sourceIdBase: \"testFLR\",\n    verifierUrlBase: VERIFIER_URL_TESTNET!,\n    verifierApiKey: VERIFIER_API_KEY!,\n    urlTypeBase: \"flr\",\n    data: {\n      transactionHash: transactionHashes.get(\"coston2\")!,\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Proof Struct in Solidity\nDESCRIPTION: Constructs an IPayment.Proof struct from the parsed data, which includes both the Merkle proofs array and the payment response data. This struct will be used for verification.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_23\n\nLANGUAGE: solidity\nCODE:\n```\nIPayment.Proof memory _proof = IPayment.Proof(\n proof.proofs,\n proofResponse\n);\n```\n\n----------------------------------------\n\nTITLE: Cancelling Underlying Withdrawal\nDESCRIPTION: Command to cancel a previously announced underlying withdrawal by specifying the agent vault address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot cancelUnderlyingWithdrawal <agentVaultAddress>\n```\n\n----------------------------------------\n\nTITLE: Querying Latest BlockNumber via RPC - Flare Mainnet - go-ethereum Go\nDESCRIPTION: This Go snippet, designed for the go-ethereum (geth) framework, demonstrates connecting to Flare Mainnet's endpoint and invoking \\\"eth_blockNumber\\\" to fetch the latest block. Dependencies include go-ethereum packages and the Flare RPC URL. The snippet must be incorporated within a suitable Go context and outputs the current block number.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/0-overview.mdx#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n{BlockNumFlareGo}\n```\n\n----------------------------------------\n\nTITLE: Running Forge Tests for Contract - Bash\nDESCRIPTION: Executes all Foundry tests using the forge test command in the project root. Requires that tests have been previously written in the test directory. Outputs test pass/fail status, gas usage, and logs for each test. No additional dependencies beyond project setup.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/build-first-app.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nforge test\n```\n\n----------------------------------------\n\nTITLE: Registering a Voter in Solidity\nDESCRIPTION: Defines the `registerVoter` function interface. This external function attempts to register a voter if their associated weight meets the required threshold. It takes the voter's address and a signature structure as input. This function modifies the contract state.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IVoterRegistry.md#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction registerVoter(\n    address _voter,\n    struct IVoterRegistry.Signature _signature\n) external;\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Coston Testnet Node\nDESCRIPTION: Docker Compose configuration for running a Songbird Testnet Coston observer node with specific network settings, volume mounts, and port configurations.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.6'\n\nservices:\n  observer:\n    container_name: coston-observer\n    image: flarefoundation/go-flare:v1.9.1\n    restart: on-failure\n    environment:\n      - AUTOCONFIGURE_BOOTSTRAP=1\n      - NETWORK_ID=coston\n      - AUTOCONFIGURE_PUBLIC_IP=1\n      - AUTOCONFIGURE_BOOTSTRAP_ENDPOINT=https://coston-bootstrap.flare.network/ext/info\n    volumes:\n      - /mnt/db:/app/db\n      - /opt/flare/conf:/app/conf/C\n      - /opt/flare/logs:/app/logs\n    ports:\n      - 0.0.0.0:9650:9650\n      - 0.0.0.0:9651:9651\n```\n\n----------------------------------------\n\nTITLE: Confirming Delegation Address Registration - Solidity\nDESCRIPTION: Confirms the registration of a delegation address for a given voter when called by the delegation address itself. Requires the voter's address as a parameter and assumes that a delegation address proposal step occurred prior. The function must be incorporated into an implementing smart contract that supports voter entity management.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction confirmDelegationAddressRegistration(\n    address _voter\n) external;\n```\n\n----------------------------------------\n\nTITLE: Getting Current Random Number in Solidity\nDESCRIPTION: Function to retrieve the current random number along with its security status and timestamp. Returns a tuple containing the random number, a boolean indicating if it's secure, and the generation timestamp.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/RandomNumberV2Interface.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getRandomNumber(\n) external view returns (\n    uint256 _randomNumber,\n    bool _isSecureRandom,\n    uint256 _randomTimestamp\n);\n```\n\n----------------------------------------\n\nTITLE: Checking FDC Round Finalization using Relay Contract in Solidity\nDESCRIPTION: Shows the Solidity function signature for `isFinalized` within the `Relay` contract. This view function allows checking if a specific FDC protocol round (`_protocolId` should be 200 for FDC) has been finalized (`_votingRoundId`) before using its proof. This is particularly useful in testing environments as an alternative to listening for `ProtocolMessageRelayed` events.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/2-getting-started.mdx#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nisFinalized(uint256 _protocolId, uint256 _votingRoundId) returns (bool)\n```\n\n----------------------------------------\n\nTITLE: Parsing DA Layer Proof Response in Solidity\nDESCRIPTION: This snippet shows how to decode the raw byte data (`data`) received from the DA Layer. It first uses a helper `Base.parseData` function (implementation not shown), then uses `abi.decode` to decode the result into the `ParsableProof` struct. Finally, it decodes the `responseHex` field from the `ParsableProof` struct into the specific `IAddressValidity.Response` struct.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/address-validity.mdx#2025-04-22_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nbytes memory dataJson = Base.parseData(data);\nParsableProof memory proof = abi.decode(dataJson, (ParsableProof));\n\nIAddressValidity.Response memory proofResponse = abi.decode(\n proof.responseHex,\n (IAddressValidity.Response)\n);\n```\n\n----------------------------------------\n\nTITLE: Verifying Custom Signature in Solidity\nDESCRIPTION: Declares the `verifyCustomSignature` function in the IRelay interface. This external function checks a `_relayMessage` for sufficient weighted signatures corresponding to a specific `_messageHash` (interpreted as part of a protocol message Merkle root). If verification is successful, it returns the reward epoch ID of the signing policy used; otherwise, it reverts.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRelay.md#2025-04-22_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction verifyCustomSignature(\n    bytes _relayMessage,\n    bytes32 _messageHash\n) external returns (\n    uint256 _rewardEpochId\n);\n```\n\n----------------------------------------\n\nTITLE: Submission With Data via submitAndPass Method in Solidity\nDESCRIPTION: The submitAndPass method allows for external submission of data as a bytes array, returning a boolean indicating operation success. Used for future-proofing and to support flexible data-passing to the submitAndPassContract. _data is the parameter carrying arbitrary contract input. Inputs: _data (bytes). Outputs: Boolean result of processing.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/ISubmission.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction submitAndPass(\n    bytes _data\n) external returns (\n    bool\n);\n```\n\n----------------------------------------\n\nTITLE: Running the FAssets User Bot CLI (yarn)\nDESCRIPTION: Basic command structure for executing FAssets user bot commands using yarn. Replace `[command]` with the specific command, `<args>` with required arguments, and `[fAssetSymbol]` with the target FAsset symbol (e.g., FXRP, FBTC). The `--fasset` flag is mandatory for most commands.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/user-bot.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn user-bot [command] <args> --fasset [fAssetSymbol]\n```\n\n----------------------------------------\n\nTITLE: Delegating Governance Voting Power in Solidity\nDESCRIPTION: Delegates all governance voting power from the sender's delegation account to another address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction delegateGovernance(\n    address _to\n) external;\n```\n\n----------------------------------------\n\nTITLE: Executing Hardhat Script to Deploy and Query FAsset Lot Size\nDESCRIPTION: A Bash command for running the TypeScript script using Hardhat, along with expected output showing lot size information retrieved from the deployed contract.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/developer-guides/2-fassets-asset-manager-settings-solidity.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat run scripts/fassets/getLotSize.ts --network coston\n```\n\nLANGUAGE: bash\nCODE:\n```\nCompiled 1 Solidity file successfully (evm target: london).\nDeploying FAssetsSettings...\nFAssetsSettings deployed to: 0x40deEaA76224Ca9439D4e1c86F827Be829b89D9E\nLot size: 20000000n\nDecimals: 6n\nLot size in XRP 20\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Contract Addresses by Hash in Solidity\nDESCRIPTION: Function that returns multiple contract addresses for a given array of contract name hashes. Each hash is computed as keccak256(abi.encode(name)) and the corresponding address might be address(0) if the contract is not found.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IFlareContractRegistry.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getContractAddressesByHash(\n    bytes32[] _nameHashes\n) external view returns (\n    address[]);\n```\n\n----------------------------------------\n\nTITLE: Defining Transfer Event Listener Interface\nDESCRIPTION: Creates an interface for collecting transfer events from transaction proofs.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_23\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ITransferEventListener {\n    function collectTransferEvents(\n        IEVMTransaction.Proof calldata _transaction\n    ) external;\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying and Interacting with FAsset Lot Size Contract using TypeScript\nDESCRIPTION: A TypeScript script that deploys the FAssetsSettings contract to the Songbird Testnet Coston network and calls the getLotSize function to retrieve lot size information for FXRP. It also converts the raw lot size to a human-readable format.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/developer-guides/2-fassets-asset-manager-settings-solidity.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ethers } from \"hardhat\";\nimport { FAssetsSettingsContract } from \"../../typechain-types\";\n\n// 1. AssetManager address on Songbird Testnet Coston network\nconst ASSET_MANAGER_ADDRESS = \"0x56728e46908fB6FcC5BCD2cc0c0F9BB91C3e4D34\";\n\nasync function main() {\n  console.log(\"Deploying FAssetsSettings...\");\n\n  // 2.  Get the contract factory\n  const FAssetsSettings = (await ethers.getContractFactory(\n    \"FAssetsSettings\",\n  )) as FAssetsSettingsContract;\n\n  // 3. Deploy the contract\n  const fAssetsSettings = await FAssetsSettings.deploy(ASSET_MANAGER_ADDRESS);\n  await fAssetsSettings.waitForDeployment();\n  console.log(\n    \"FAssetsSettings deployed to:\",\n    await fAssetsSettings.getAddress(),\n  );\n\n  // 4. Call getSettings function\n  const lotSize = await fAssetsSettings.getLotSize();\n  console.log(\"Lot size:\", lotSize[0]);\n  console.log(\"Decimals:\", lotSize[1]);\n\n  // 5. Convert lot size to XRP\n  const lotSizeFXRP = Number(lotSize[0]) / Math.pow(10, Number(lotSize[1]));\n  console.log(\"Lot size in XRP\", lotSizeFXRP);\n}\n\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Approval Event in Solidity\nDESCRIPTION: Event emitted when token allowance is updated for a spender.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IRNat.md#2025-04-22_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nevent Approval(\n    address owner,\n    address spender,\n    uint256 value\n)\n```\n\n----------------------------------------\n\nTITLE: Explicit Delegation of Voting Power in IWNat Solidity Interface\nDESCRIPTION: Explicitly delegates a specific amount of voting power from the sender to a recipient. Unlike percentage-based delegation, this method delegates an exact voting power amount.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction delegateExplicit(\n    address _to,\n    uint256 _amount\n) external;\n```\n\n----------------------------------------\n\nTITLE: Requesting and Verifying FDC Payment Attestations in Solidity\nDESCRIPTION: This Solidity contract (`PaymentVerifier`) interacts with the Flare FDC system. It initializes with FDC Hub and Verification contract addresses. The `requestPaymentVerification` function formats and sends a payment attestation request (for BTC in this example) to the FDC Hub. The `verifyPayment` function takes a proof, uses the FDC Verification contract to check its validity, and if successful, extracts and returns payment details while marking the transaction as verified internally. It depends on Flare's `IFdcHub`, `IFdcVerification`, and `IPayment` interfaces.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IPayment.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/IFdcHub.sol\";\nimport \"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/IFdcVerification.sol\";\nimport \"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/fdc/IPayment.sol\";\n\ncontract PaymentVerifier {\n    IFdcHub private fdcHub;\n    IFdcVerification private fdcVerification;\n\n    bytes32 private constant ATTESTATION_TYPE_PAYMENT = 0x0100000000000000000000000000000000000000000000000000000000000000;\n    bytes32 private constant SOURCE_ID_BTC = 0x4254430000000000000000000000000000000000000000000000000000000000;\n\n    // Store verified payments\n    mapping(bytes32 => bool) public verifiedPayments; // transactionId => verified\n\n    constructor(address _fdcHubAddress, address _fdcVerificationAddress) {\n        fdcHub = IFdcHub(_fdcHubAddress);\n        fdcVerification = IFdcVerification(_fdcVerificationAddress);\n    }\n\n    // Request verification of a payment transaction\n    function requestPaymentVerification(\n        bytes32 transactionId,\n        uint256 inUtxo,\n        uint256 utxo\n    ) external payable {\n        // Create request body\n        IPayment.RequestBody memory requestBody = IPayment.RequestBody({\n            transactionId: transactionId,\n            inUtxo: inUtxo,\n            utxo: utxo\n        });\n\n        // Encode the full request\n        bytes memory encodedRequest = abi.encode(\n            ATTESTATION_TYPE_PAYMENT,\n            SOURCE_ID_BTC,\n            bytes32(0), // messageIntegrityCode (would need to be calculated properly)\n            requestBody\n        );\n\n        // Submit the request with payment\n        fdcHub.requestAttestation{value: msg.value}(encodedRequest);\n    }\n\n    // Verify a provided payment proof\n    function verifyPayment(IPayment.Proof calldata _proof)\n        external\n        returns (\n            bool success,\n            bytes32 sourceAddressHash,\n            bytes32 receivingAddressHash,\n            int256 amount,\n            bytes32 paymentReference\n        )\n    {\n        // Verify the proof using FdcVerification\n        bool proofVerified = fdcVerification.verifyPayment(_proof);\n\n        if (proofVerified) {\n            // Extract the payment details from the proof\n            bytes32 transactionId = _proof.data.requestBody.transactionId;\n            IPayment.ResponseBody memory response = _proof.data.responseBody;\n\n            // Check if this is a successful payment\n            if (response.status == 0) {\n                // Store that this transaction has been verified\n                verifiedPayments[transactionId] = true;\n\n                return (\n                    true,\n                    response.sourceAddressHash,\n                    response.receivingAddressHash,\n                    response.receivedAmount,\n                    response.standardPaymentReference\n                );\n            }\n        }\n\n        return (false, bytes32(0), bytes32(0), 0, bytes32(0));\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Submit Signatures Address Proposal Event Definition in Solidity\nDESCRIPTION: Event emitted when a new submit signatures address is proposed. Takes voter address and proposed submit signatures address as parameters.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_37\n\nLANGUAGE: solidity\nCODE:\n```\nevent SubmitSignaturesAddressProposed(\n    address voter,\n    address submitSignaturesAddress\n)\n```\n\n----------------------------------------\n\nTITLE: Launching Flare Stake Tool in Interactive Mode\nDESCRIPTION: Command to start the Flare stake tool in interactive mode, which guides users through wallet connection and staking operations via a command-line interface.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/using-flare-stake-tool.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflare-stake-tool interactive\n```\n\n----------------------------------------\n\nTITLE: Calculating Voting Round ID from Transaction - TypeScript\nDESCRIPTION: This utility function extracts the voting round ID from the block timestamp of a submitted transaction by subtracting the epoch start timestamp and dividing by the voting epoch duration. It queries the FlareSystemsManager contract for timing values, both accessed via previously defined utilities. Input is the transaction object; outputs a numeric roundId. Requires network access, contract artifact instances, and assumes blocks and timestamps are synchronized with Flare blockchain epochs.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nasync function calculateRoundId(transaction: any) {\\n  const blockNumber = transaction.receipt.blockNumber;\\n  const block = await ethers.provider.getBlock(blockNumber);\\n  const blockTimestamp = BigInt(block!.timestamp);\\n\\n  const flareSystemsManager: IFlareSystemsManagerInstance =\\n    await getFlareSystemsManager();\\n  const firsVotingRoundStartTs = BigInt(\\n    await flareSystemsManager.firstVotingRoundStartTs(),\\n  );\\n  const votingEpochDurationSeconds = BigInt(\\n    await flareSystemsManager.votingEpochDurationSeconds(),\\n  );\\n\\n  console.log(\\\"Block timestamp:\\\", blockTimestamp, \\\"\\\\n\\\");\\n  console.log(\\\"First voting round start ts:\\\", firsVotingRoundStartTs, \\\"\\\\n\\\");\\n  console.log(\\n    \\\"Voting epoch duration seconds:\\\",\\n    votingEpochDurationSeconds,\\n    \\\"\\\\n\\\",\\n  );\\n\\n  const roundId = Number(\\n    (blockTimestamp - firsVotingRoundStartTs) / votingEpochDurationSeconds,\\n  );\\n  console.log(\\\"Calculated round id:\\\", roundId, \\\"\\\\n\\\");\\n  console.log(\\\"Received round id:\\\", Number(await flareSystemsManager.getCurrentVotingEpochId()), \\\"\\\\n\\\");\\n  return roundId;\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Generating NodeId for Validator Registration\nDESCRIPTION: This command generates the NodeId parameter required for registering a validator node with the EntityManager contract by processing the node's certificate file.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncat $PATH_TO_CRT | tail -n +2 | head -n -1 | base64 -d | openssl dgst -sha256 -binary | openssl rmd160 -provider legacy -binary | xxd -p | sed -e 's/^/0x/;'\n```\n\n----------------------------------------\n\nTITLE: Feed Removal Event - Solidity\nDESCRIPTION: Declares the FeedRemoved event, which is emitted upon removal of a feed. The event logs the feedId (bytes21) and the index (uint256) of the removed feed. This supports event-driven tracking of configuration changes.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdatesConfiguration.md#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nevent FeedRemoved(\n    bytes21 feedId,\n    uint256 index\n)\n```\n\n----------------------------------------\n\nTITLE: Defining FtsoProxy Contract Methods in Solidity\nDESCRIPTION: This snippet outlines various methods within the `FtsoProxy.sol` contract. The contract ensures backward compatibility with the older FTSO contract. It includes functions to check activity status (always true), retrieve current and specific epoch IDs, get random numbers for voting rounds, fetch price epoch data and configuration, and get current prices with varying levels of detail. Some methods (`getEpochPrice`, `getEpochPriceForVoter`, `getCurrentPriceFromTrustedProviders`, `getCurrentPriceWithDecimalsFromTrustedProviders`) are explicitly deprecated and revert upon calling. Note that some functions like `getEpochId` may produce different results compared to the old FTSO contract, adhering to the Flare System Protocol (FSP).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/5-migration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n   /**\n     * Always return true, as the proxy is always active.\n     */\n    function active() external pure returns (bool) {\n        return true;\n    }\n\n    /**\n     * Will return the current epoch id correctly as defined by FSP\n     */\n    function getCurrentEpochId() external view returns (uint256) {\n    }\n\n    /**\n     * Will return the epoch id correctly as defined by FSP.\n     * Beware, the function will produce different results than the old FTSO contract.\n     */\n    function getEpochId(uint256 _timestamp) external view returns (uint256) {\n    }\n\n    /**\n     * Will return the current random correctly\n     */\n    function getRandom(uint256 _votingRoundId) external view returns (uint256 _randomNumber) {\n    }\n\n    /**\n     * @dev Deprecated - reverts\n     */\n    function getEpochPrice(uint256) external pure returns (uint256) {\n        revert(\"not supported\");\n    }\n\n    /**\n     * Will return current price epoch data as defined by FSP\n     */\n    function getPriceEpochData() external view\n        returns (\n            uint256 _epochId,\n            uint256 _epochSubmitEndTime,\n            uint256 _epochRevealEndTime,\n            uint256 _votePowerBlock,\n            bool _fallbackMode\n        )\n    {\n    }\n\n    /**\n     * Will return the price epoch configuration as defined by FSP\n     */\n    function getPriceEpochConfiguration() external view\n        returns (\n            uint256 _firstEpochStartTs,\n            uint256 _submitPeriodSeconds,\n            uint256 _revealPeriodSeconds\n        )\n    {\n    }\n\n    /**\n     * @dev Deprecated - reverts\n     */\n    function getEpochPriceForVoter(uint256, address) external pure returns (uint256) {\n        revert(\"not supported\");\n    }\n\n    /**\n     * Will return the current price correctly\n     */\n    function getCurrentPrice() external view returns (uint256, uint256) {\n    }\n\n    /**\n     * Will return the current price with decimals correctly\n     */\n    function getCurrentPriceWithDecimals()\n        external view\n        returns (\n            uint256 _value,\n            uint256 _timestamp,\n            uint256 _decimals\n        )\n    {\n    }\n\n\n    /**\n     * Will return the current price with details correctly\n     */\n    function getCurrentPriceDetails()\n        external view\n        returns (\n            uint256,\n            uint256,\n            PriceFinalizationType,\n            uint256,\n            PriceFinalizationType\n        )\n    {\n    }\n\n    /**\n     * @dev Deprecated - reverts\n     */\n    function getCurrentPriceFromTrustedProviders() external pure returns (uint256, uint256) {\n        revert(\"not supported\");\n    }\n\n    /**\n     * @dev Deprecated - reverts\n     */\n    function getCurrentPriceWithDecimalsFromTrustedProviders() external pure returns (uint256, uint256, uint256) {\n        revert(\"not supported\");\n    }\n\n    /**\n     * Will return the current random correctly\n     */\n    function getCurrentRandom() external view returns (uint256 _currentRandom) {\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Constructing Verifier URL and Request Body in Solidity\nDESCRIPTION: This snippet shows how to dynamically construct the full URL for the verifier endpoint and the JSON request body using string concatenation in Solidity. It combines a base URL with specific path components (source name, attestation type) and includes an address parameter in the JSON body. Uses `string.concat` and logs the constructed URL.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\n```solidity title=\"scrip/fdcExample/Payment.s.sol\"\nstring memory baseUrl = \"https://fdc-verifiers-testnet.flare.network/\";\nstring memory url = string.concat(\n baseUrl,\n \"verifier/\",\n baseSourceName,\n \"/\",\n attestationTypeName,\n \"/prepareRequest\"\n);\nconsole.log(\"url: %s\", url);\nstring memory requestBody = string.concat(\n '{\"addressStr\": \"',\n addressStr,\n '\"}'\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Delegation Address of Voter - Solidity\nDESCRIPTION: Returns the current delegation address of a specified voter by address. Requires the voter's address as input and returns an address representing the current delegation. The function is view-only and does not modify contract state.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getDelegationAddressOf(\n    address _voter\n) external view returns (\n    address\n);\n```\n\n----------------------------------------\n\nTITLE: Sample Solidity Contract: FtsoV2FeedConsumer - Solidity\nDESCRIPTION: The snippet provides the complete Solidity source code for the FtsoV2FeedConsumer contract, with all interface dependencies fully inlined to avoid external imports. This contract is used to query FTSOv2 feeds on the Flare network. Save this code as .sol file for compilation; it requires Solidity compiler and has no external dependency imports.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-javascript-developers.mdx#2025-04-22_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\n/* Solidity code of FtsoV2FeedConsumerNoImports loaded from external file - not shown here */\n```\n\n----------------------------------------\n\nTITLE: Retrieving Range Increase Limit via Solidity Interface\nDESCRIPTION: The function `rangeIncreaseLimit` in this Solidity interface exposes the maximum allowable increase for the range parameter through an external view function. Returning a `Range` type without arguments, it enables callers to validate or bound their incentive offers when interacting with the protocol. This is a read-only, state-inspection function intended for external actors monitoring governance constraints.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdateIncentiveManager.md#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rangeIncreaseLimit(\n) external view returns (\n    Range\n);\n```\n\n----------------------------------------\n\nTITLE: Delegating Voting Power by Percentage in IWNat Solidity Interface\nDESCRIPTION: Delegates a percentage of voting power from the sender to a specified recipient. The percentage is expressed in basis points (1/100 of one percent).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction delegate(\n    address _to,\n    uint256 _bips\n) external;\n```\n\n----------------------------------------\n\nTITLE: Copying Hardhat Environment Example File - Bash\nDESCRIPTION: Copies the example environment variable file to a new '.env' file using Bash. Prerequisite: Ensure you are in the project root. Use this to quickly set up your own environment variables for private key management and network settings. No special dependencies apart from standard Bash utilities. Outputs a new .env file ready for editing.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/hardhat-foundry-starter-kit.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Decoding State Observation Event Data in Bash\nDESCRIPTION: This bash output demonstrates the result of calling the fallback contract to observe the state of an ERC20 allowance, including the decoded event data and state information.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-connectivity.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nSepolia USDT deployed to: 0xf274cCf1f92F9B34FF5704802a9B690E1d3cbC38\nFallbackWithEventContract deployed to: 0xfCcB55F281df58869593B64B48f8c2Fe66f91C5D\n{\n  \"status\": \"VALID\",\n  \"response\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"0\",\n    \"lowestUsedTimestamp\": \"1709151372\",\n    \"requestBody\": {\n      \"transactionHash\": \"0xff86f77260f7623f24ea888dfd14c56380c5cece1a896bd2566d6b3596343e20\",\n      \"requiredConfirmations\": \"1\",\n      \"provideInput\": true,\n      \"listEvents\": true,\n      \"logIndices\": []\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5382901\",\n      \"timestamp\": \"1709151372\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0xfCcB55F281df58869593B64B48f8c2Fe66f91C5D\",\n      \"value\": \"0\",\n      \"input\": \"0xf29ca36c000000000000000000000000f274ccf1f92f9b34ff5704802a9b690e1d3cbc3800000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000044dd62ed3e0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d42900000000000000000000000000000000000000000000000000000000\",\n      \"status\": \"1\",\n      \"events\": [\n        {\n          \"logIndex\": \"4\",\n          \"emitterAddress\": \"0xfCcB55F281df58869593B64B48f8c2Fe66f91C5D\",\n          \"topics\": [\n            \"0xe1b725358090db1f537294b09c773c14622b44c1bc2832d105fb28cc48f5bd90\"\n          ],\n          \"data\": \"0x000000000000000000000000f274ccf1f92f9b34ff5704802a9b690e1d3cbc380000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000044dd62ed3e0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d4290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000bc614e\",\n          \"removed\": false\n        }\n      ]\n    }\n  }\n}\nEvent data [\n  '0xf274cCf1f92F9B34FF5704802a9B690E1d3cbC38',\n  true,\n  '0xdd62ed3e0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d429',\n  '0x0000000000000000000000000000000000000000000000000000000000bc614e'\n]\nMethod signature 0xdd62ed3e\nDecoded calldata Result(2) [\n  '0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373',\n  '0xFf02F742106B8a25C26e65C1f0d66BEC3C90d429'\n]\nDecoded state data Result(1) [ 12345678n ]\n```\n\n----------------------------------------\n\nTITLE: Defining FDC EVM Transaction Response Structures in Solidity\nDESCRIPTION: Defines the core Solidity structs (`Response`, `ResponseBody`, `Event`) representing the data structure returned by the Flare Data Connector (FDC) for EVM transaction attestations. These structs map closely to the `IEVMTransaction` interface and detail the information available after verification, including original request details, block information, transaction specifics, and emitted event data.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/2-getting-started.mdx#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Response {\n    bytes32 attestationType;\n    bytes32 sourceId;\n    uint64 votingRound;\n    uint64 lowestUsedTimestamp;\n    RequestBody requestBody;\n    ResponseBody responseBody;\n}\n\nstruct ResponseBody {\n    uint64 blockNumber;\n    uint64 timestamp;\n    address sourceAddress;\n    bool isDeployment;\n    address receivingAddress;\n    uint256 value;\n    bytes input;\n    uint8 status;\n    Event[] events;\n}\n\nstruct Event {\n    uint32 logIndex;\n    address emitterAddress;\n    bytes32[] topics;\n    bytes data;\n    bool removed;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available Agents with User Bot CLI\nDESCRIPTION: Lists all available FAssets agents registered in the system for the specified FAsset symbol (via the required `--fasset` flag).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/user-bot.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn user-bot agents\n```\n\n----------------------------------------\n\nTITLE: Initiating Staking Process with Flare Stake Tool\nDESCRIPTION: This command starts the interactive staking process using the flare-stake-tool. It allows users to choose between adding a validator node or delegating to an existing node.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/using-flare-stake-tool.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nflare-stake-tool interactive\n```\n\n----------------------------------------\n\nTITLE: Retrieving Contract Address by Hash in Solidity\nDESCRIPTION: Function that returns a contract address for a given contract name hash. The hash is computed as keccak256(abi.encode(name)) and the function returns the corresponding address, which might be address(0) if the contract is not found.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IFlareContractRegistry.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getContractAddressByHash(\n    bytes32 _nameHash\n) external view returns (\n    address);\n```\n\n----------------------------------------\n\nTITLE: Importing TypeScript Dependencies for FAssets Redemption\nDESCRIPTION: Imports required dependencies and TypeScript types for interacting with FAssets contracts.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/developer-guides/3-fassets-redeem.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ethers, run } from \"hardhat\";\nimport { formatUnits } from \"ethers\";\n\nimport {\n  FAssetsRedeemInstance,\n  IAssetManagerContract,\n  ERC20Instance,\n} from \"../../typechain-types\";\n```\n\n----------------------------------------\n\nTITLE: Maximum Fee Update Event in Solidity\nDESCRIPTION: Event emitted when the maximum fee value is updated in the contract. Takes a single parameter tracking the new maximum fee value in Wei.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_34\n\nLANGUAGE: solidity\nCODE:\n```\nevent MaxFeeSet(\n    uint256 maxFeeValueWei\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Update Count for a Specific Block in Solidity\nDESCRIPTION: Defines the `numberOfUpdatesInBlock` view function in the `IFastUpdater` interface. It retrieves the number of updates (`_noOfUpdates`) submitted in a specific past block (`_blockNumber`), provided the block is within the retrievable history limit (`MAX_BLOCKS_HISTORY`).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdater.md#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction numberOfUpdatesInBlock(\n    uint256 _blockNumber\n) external view returns (\n    uint256 _noOfUpdates\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing RewardsDistributed Event in Solidity\nDESCRIPTION: Event emitted when rewards are distributed to multiple recipients.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IRNat.md#2025-04-22_snippet_19\n\nLANGUAGE: solidity\nCODE:\n```\nevent RewardsDistributed(\n    uint256 projectId,\n    uint256 month,\n    address[] recipients,\n    uint128[] amounts\n)\n```\n\n----------------------------------------\n\nTITLE: Rewards Distribution Method\nDESCRIPTION: Distributes project rewards for a specific month to multiple recipients. Must be called by the project's distributor.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IRNat.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction distributeRewards(\n    uint256 _projectId,\n    uint256 _month,\n    address[] _recipients,\n    uint128[] _amountsWei\n) external;\n```\n\n----------------------------------------\n\nTITLE: Proposing Submit Signatures Address - Solidity\nDESCRIPTION: Allows a voter to propose a specific submit signatures address, acting as the first stage in multi-signature assignment. Only the voter can call this function, supplying the new submit signatures address for later confirmation.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_21\n\nLANGUAGE: solidity\nCODE:\n```\nfunction proposeSubmitSignaturesAddress(\n    address _submitSignaturesAddress\n) external;\n```\n\n----------------------------------------\n\nTITLE: Querying Maximum Transfer Amount to Core Vault in Bash\nDESCRIPTION: Retrieves information about the maximum amount of underlying assets that can be transferred from a specific FAsset agent vault to the core vault using the `agent-bot` script via yarn. Also provides the minimum amount that must remain on the underlying address. Requires the agent vault address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot maximumTransferToCoreVault <agentVaultAddress>\n```\n\n----------------------------------------\n\nTITLE: Preparing URL for OpenWeather API Request in TypeScript\nDESCRIPTION: This helper function prepares the URL for the OpenWeather API request, converting policy coordinates back to their original decimal form. It's used in the policy resolution process.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/weather-insurance.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nasync function prepareUrl(policy: any) {\n  return `https://api.openweathermap.org/data/2.5/weather?lat=${\n    policy.latitude / 10 ** 6\n  }&lon=${policy.longitude / 10 ** 6}&units=${units}&appid=${apiId}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Voter by Public Key - Solidity\nDESCRIPTION: Returns the voter address associated with the provided public key (part1, part2) at a specific block number. Inputs are two bytes32 values representing the public key and a block number; returns an address. Designed to support cryptographic entity lookups.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getVoterForPublicKey(\n    bytes32 _part1,\n    bytes32 _part2,\n    uint256 _blockNumber\n) external view returns (\n    address _voter\n);\n```\n\n----------------------------------------\n\nTITLE: Declaring FtsoFeedPublished Event in Solidity\nDESCRIPTION: Defines an event that is emitted on publishing a new FTSO feed. Captures the voting round id, unique feed id, value, turnout percentage (BIPS), and number of decimals. Useful for off-chain listeners and analytics tools to track feed publishing in real time.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/solidity-reference/IFtsoFeedPublisher.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nevent FtsoFeedPublished(\n    uint32 votingRoundId,\n    bytes21 id,\n    int32 value,\n    uint16 turnoutBIPS,\n    int8 decimals\n)\n```\n\n----------------------------------------\n\nTITLE: Sample Solidity Contract: FtsoV2FeedConsumer - Solidity\nDESCRIPTION: This Solidity contract sample ('FtsoV2FeedConsumer') is used as an example to demonstrate compiling and deploying on Flare. All interface dependencies are inlined for a self-contained setup, avoiding external import issues. Designed as a simple consumer of FTSOv2 feeds and must be copied to a '.sol' file for use with Python scripts.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-python-developers.mdx#2025-04-22_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\n{FtsoV2FeedConsumerNoImports}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Claimable Amount for Any Account in Solidity\nDESCRIPTION: View function that returns the amount of wei claimable by a specified account for a specified month. This allows checking claimable amounts for any address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IDistributionToDelegators.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getClaimableAmountOf(\n    address _account,\n    uint256 _month\n) external view returns (\n    uint256 _amountWei);\n```\n\n----------------------------------------\n\nTITLE: Fetching Contract ABI from Flare Explorer API - Coston2 - JavaScript\nDESCRIPTION: This snippet demonstrates how to programmatically fetch a contract\\'s ABI from the Flare Blockchain Explorer API for the Coston2 testnet using JavaScript and web3.js. It sends a web request to the Explorer\\'s REST API, retrieves, and parses the ABI. Dependencies include axios or fetch for HTTP, and network access to the API endpoint. The output is the contract ABI as a JSON object.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-javascript-developers.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/* Code for FetchAbiCoston2 loaded from external file - not shown here */\n```\n\n----------------------------------------\n\nTITLE: Bitcoin Bech32 Dictionary Implementation\nDESCRIPTION: The character set used for Bitcoin's Bech32 address encoding format.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/attestation-types/_addresses.mdx#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nqpzry9x8gf2tvdw0s3jn54khce6mua7l\n```\n\n----------------------------------------\n\nTITLE: Posting Attestation Request to DA Layer in Solidity\nDESCRIPTION: Code that constructs a URL to the DA Layer API endpoint and sends a POST request with headers and body data to request a proof. The response data is returned for further processing.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory url = string.concat(\n daLayerUrl,\n // \"api/v0/fdc/get-proof-round-id-bytes\"\n \"api/v1/fdc/proof-by-request-round-raw\"\n);\nconsole.log(\"url: %s\\n\", url);\n\n(, bytes memory data) = Base.postAttestationRequest(url, headers, body);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Submission Window Duration in Solidity\nDESCRIPTION: Defines the `submissionWindow` view function in the `IFastUpdater` interface. It returns the duration (`uint8`) of the submission window in blocks. This window represents a grace period after a sortition round begins, during which eligible providers can submit their updates for that round.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdater.md#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction submissionWindow(\n) external view returns (\n    uint8\n);\n```\n\n----------------------------------------\n\nTITLE: Installing web3.js Dependencies via npm\nDESCRIPTION: Installs the web3.js library and Flare Periphery Contract Artifacts using npm, necessary for interacting with the Flare network and FTSO contracts using web3.js.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/query-feed-configuration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3\nnpm install @flarenetwork/flare-periphery-contract-artifacts\n```\n\n----------------------------------------\n\nTITLE: Updating Redemption Requests with User Bot CLI\nDESCRIPTION: Updates the status of one or more open redemption requests, processing them based on their current state (e.g., time expiration). Requires the FAsset symbol (via the required `--fasset` flag). This command aids in automating the redemption lifecycle.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/user-bot.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nyarn user-bot updateRedemptions\n```\n\n----------------------------------------\n\nTITLE: Public Key Registered Event - Solidity\nDESCRIPTION: Announces that a voter has registered a new public key. The event supplies the voter address and two components (bytes32 part1, part2) of the public key. Used for keeping off-chain public key directories in sync.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_31\n\nLANGUAGE: solidity\nCODE:\n```\nevent PublicKeyRegistered(\n    address voter,\n    bytes32 part1,\n    bytes32 part2\n)\n```\n\n----------------------------------------\n\nTITLE: Generating CertificateRaw for Validator Registration\nDESCRIPTION: This command extracts and formats the raw certificate data needed for the _certificateRaw parameter when registering a validator node with the EntityManager contract.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncat $PATH_TO_CRT | tail -n +2 | head -n -1 | base64 -d | xxd -p | tr -d '\\n' | sed -e 's/^/0x/;' && echo\n```\n\n----------------------------------------\n\nTITLE: Querying Node IDs of Voter - Solidity\nDESCRIPTION: Obtains the list of node IDs currently registered under a particular voter. The input parameter is the voter's address, and the function returns an array of bytes20 node IDs. Used in scenarios where network identity management is required.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getNodeIdsOf(\n    address _voter\n) external view returns (\n    bytes20[]\n);\n```\n\n----------------------------------------\n\nTITLE: FAssets Redemption Implementation in Solidity\nDESCRIPTION: Function to redeem FAssets in lots, specifying the redeemer's underlying address and an optional executor. Returns the actual redeemed amount in underlying blockchain assets.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/IAssetManager.mdx#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction redeem(\n    uint256 _lots,\n    string memory _redeemerUnderlyingAddressString,\n    address payable _executor\n) external payable\n    returns (uint256 _redeemedAmountUBA);\n```\n\n----------------------------------------\n\nTITLE: Batch Auto-Claiming FlareDrop Rewards in Solidity\nDESCRIPTION: Function for batch claiming rewards for multiple reward owners up to a specified month. If a delegation account is enabled, the rewards are sent there, otherwise to the owner's account. Claimed amounts are automatically wrapped.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IDistributionToDelegators.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction autoClaim(\n    address[] _rewardOwners,\n    uint256 _month\n) external;\n```\n\n----------------------------------------\n\nTITLE: Rewards Claim Method\nDESCRIPTION: Claims rewards for specified projects up to a given month, returning the total claimed amount in wei.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IRNat.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction claimRewards(\n    uint256[] _projectIds,\n    uint256 _month\n) external returns (\n    uint128 _claimedRewardsWei\n);\n```\n\n----------------------------------------\n\nTITLE: Ethereum Transaction Attestation Response Structure in JSON\nDESCRIPTION: This JSON structure represents an attestation response for an Ethereum transaction. It contains transaction details including addresses, status, timestamp, and value, along with source identification and merkle proof for verification.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-connectivity.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"receivingAddress\": \"0xeBBf567beDe2D8842dF538Cf64E0bE9976183853\",\n  \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n  \"status\": \"1\",\n  \"timestamp\": \"1708907712\",\n  \"value\": \"10\"\n},\n\"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n\"votingRound\": \"809307\"\n},\n\"merkleProof\": [\n  \"0x8e45d2d564bf7d652cf904a72e53f5e7e34d7e5e184906afda92f755e99cd421\",\n  \"0x13ef0de709e7b0485f7623f5a0ad5b56aa23626fbffe5e7f4502bb7be5e0bf7e\",\n  \"0xf72c31824174676516a9c5d9713cb1ae8866cac71462fe2b1a3c1e1b9418a94f\"\n]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Address is Claim Executor in Solidity\nDESCRIPTION: Verifies if a given address is authorized to execute claims for a specific owner.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_20\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isClaimExecutor(\n    address _owner,\n    address _executor\n) external view returns (\n    bool);\n```\n\n----------------------------------------\n\nTITLE: Getting Allowed Claim Recipients in Solidity\nDESCRIPTION: Retrieves the list of addresses allowed to receive claimed rewards for a given reward owner. The owner is always an allowed recipient.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_19\n\nLANGUAGE: solidity\nCODE:\n```\nfunction allowedClaimRecipients(\n    address _rewardOwner\n) external view returns (\n    address[]);\n```\n\n----------------------------------------\n\nTITLE: Base Data and Proof Retrieval Implementation\nDESCRIPTION: Core function that handles the retrieval of data and proofs from the DA Layer. Includes round finalization checking, proof request preparation, and response handling with retry logic.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/json-api.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nasync function retrieveDataAndProofBase(\n  url: string,\n  abiEncodedRequest: string,\n  roundId: number,\n) {\n  console.log(\"Waiting for the round to finalize...\");\n  // We check every 10 seconds if the round is finalized\n  const relay: IRelayInstance = await getRelay();\n  while (!(await relay.isFinalized(200, roundId))) {\n    await sleep(10000);\n  }\n  console.log(\"Round finalized!\\n\");\n\n  const request = {\n    votingRoundId: roundId,\n    requestBytes: abiEncodedRequest,\n  };\n  console.log(\"Prepared request:\\n\", request, \"\\n\");\n\n  await sleep(10000);\n  var proof = await postRequestToDALayer(url, request, true);\n  console.log(\"Waiting for the DA Layer to generate the proof...\");\n  while (proof.response_hex == undefined) {\n    await sleep(5000);\n    proof = await postRequestToDALayer(url, request, false);\n  }\n  console.log(\"Proof generated!\\n\");\n\n  console.log(\"Proof:\", proof, \"\\n\");\n  return proof;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Active Status of Contract - Solidity Interface\nDESCRIPTION: Defines the 'active' function to determine if the IRewardManager contract allows claims. The function is an external view with a boolean return, requiring no parameters and indicating claim enablement status. Used by dApps or clients to verify if reward claiming is currently operational.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRewardManager.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction active(\n) external view returns (\n    bool\n);\n```\n\n----------------------------------------\n\nTITLE: ProtocolMessageRelayed Event Definition in Solidity\nDESCRIPTION: Defines the `ProtocolMessageRelayed` event in the IRelay interface. This event is emitted when a protocol message has been successfully relayed, logging the protocol ID, voting round ID, random number security status, and the relayed Merkle root.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRelay.md#2025-04-22_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nevent ProtocolMessageRelayed(\n    uint8 protocolId,\n    uint32 votingRoundId,\n    bool isSecureRandom,\n    bytes32 merkleRoot\n)\n```\n\n----------------------------------------\n\nTITLE: Token Allowance Query Method\nDESCRIPTION: Returns the remaining number of tokens that a spender is allowed to spend on behalf of an owner through transferFrom.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IRNat.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction allowance(\n    address owner,\n    address spender\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Agent as Available for Minting/Redeeming\nDESCRIPTION: Command to register an agent as available on the network, allowing it to mint and redeem FAssets after sufficient collateral has been deposited.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/3-create-fasset-agent-cli.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose --profile cli run agent-bot enter AGENT_ADDRESS --fasset FASSET\n```\n\n----------------------------------------\n\nTITLE: Example Decoded IAddressValidity.Response Struct\nDESCRIPTION: Illustrates the structure and example content of an `IAddressValidity.Response` struct after being ABI-decoded from the `response_hex` field of the DA Layer response. It shows key fields like `attestationType`, `sourceId`, `votingRound`, `requestBody`, and `responseBody` with their respective values.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/address-validity.mdx#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n[\n  attestationType: \"0x4164647265737356616c69646974790000000000000000000000000000000000\",\n  sourceId: \"0x7465737442544300000000000000000000000000000000000000000000000000\",\n  votingRound: \"945114\",\n  lowestUsedTimestamp: \"18446744073709551615\",\n  requestBody: [\n    \"mg9P9f4wr9w7c1sgFeiTC5oMLYXCc2c7hs\",\n    addressStr: \"mg9P9f4wr9w7c1sgFeiTC5oMLYXCc2c7hs\"\n  ],\n  responseBody: [\n    true,\n    \"mg9P9f4wr9w7c1sgFeiTC5oMLYXCc2c7hs\",\n    \"0x6810e152510fe893f9cc8954c4dfaecd5c2be00e2732d6fe3e25922f30c5a3c5\",\n    isValid: true,\n    standardAddress: \"mg9P9f4wr9w7c1sgFeiTC5oMLYXCc2c7hs\",\n    standardAddressHash: \"0x6810e152510fe893f9cc8954c4dfaecd5c2be00e2732d6fe3e25922f30c5a3c5\"\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Posting Proof Requests to DA Layer - TypeScript\nDESCRIPTION: Posts proof requests to the DA Layer using HTTP POST, with JSON payloads. Handles status checks and optional error raising. Depends on fetch and expects properly formatted request bodies. Returns the parsed JSON response from the server or throws if the status is not OK when watchStatus is true.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/address-validity.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nasync function postRequestToDALayer(\n  url: string,\n  request: any,\n  watchStatus: boolean = false,\n) {\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      //   \"X-API-KEY\": \"\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(request),\n  });\n  if (watchStatus && response.status != 200) {\n    throw new Error(\n      `Response status is not OK, status ${response.status} ${response.statusText}\\n`,\n    );\n  } else if (watchStatus) {\n    console.log(\"Response status is OK\\n\");\n  }\n  return await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Hardhat Project Template using Git - Bash\nDESCRIPTION: This Bash code snippet demonstrates how to clone the Flare Hardhat starter template repository and navigate into its directory. Dependencies: Git must be installed. The commands fetch the template codebase and prepare the shell for further project setup. Inputs: Git URL; Outputs: Project files in a new folder. No further configuration is required until dependency installation.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/hardhat-foundry-starter-kit.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/flare-foundation/flare-hardhat-starter.git\\ncd flare-hardhat-starter\n```\n\n----------------------------------------\n\nTITLE: Checking Delegation Mode in IWNat Solidity Interface\nDESCRIPTION: Returns the delegation mode for a specified account, which determines whether vote power is allocated by percentage or explicit amount. Once set, the mode cannot be changed.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction delegationModeOf(\n    address _who\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Emitting Reward Claimed Event - Solidity Interface\nDESCRIPTION: Defines 'RewardClaimed' event, which provides logs on each successful reward claim. Accepts beneficiary, owner, recipient, epoch id, claim type, and amount. Relies on enum type from RewardsV2Interface and is essential for dApp event tracking.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRewardManager.md#2025-04-22_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\nevent RewardClaimed(\n    address beneficiary,\n    address rewardOwner,\n    address recipient,\n    uint24 rewardEpochId,\n    enum RewardsV2Interface.ClaimType claimType,\n    uint120 amount\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Voter Addresses - Solidity\nDESCRIPTION: Returns the set of addresses associated with a voter at the current block (struct VoterAddresses). Accepts the voter's address as the argument and outputs a structured data type containing all associated addresses. Used for comprehensive voter entity information retrieval.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getVoterAddresses(\n    address _voter\n) external view returns (\n    struct IEntityManager.VoterAddresses _addresses\n);\n```\n\n----------------------------------------\n\nTITLE: Interacting with Address Registry Contract\nDESCRIPTION: Function to interact with the deployed AddressRegistry contract by processing and verifying Merkle proofs. It decodes response data, constructs proof objects, and registers addresses for verification.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/address-validity.mdx#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nasync function interactWithContract(\n  addressRegistry: AddressRegistryInstance,\n  proof: any,\n) {\n  console.log(\"Proof hex:\", proof.response_hex, \"\\n\");\n\n  // A piece of black magic that allows us to read the response type from an artifact\n  const IAddressValidityVerification = await artifacts.require(\n    \"IAddressValidityVerification\",\n  );\n  const responseType =\n    IAddressValidityVerification._json.abi[0].inputs[0].components[1];\n  console.log(\"Response type:\", responseType, \"\\n\");\n\n  const decodedResponse = web3.eth.abi.decodeParameter(\n    responseType,\n    proof.response_hex,\n  );\n  console.log(\"Decoded proof:\", decodedResponse, \"\\n\");\n  const transaction = await addressRegistry.registerAddress({\n    merkleProof: proof.proof,\n    data: decodedResponse,\n  });\n  console.log(\"Transaction:\", transaction.tx, \"\\n\");\n  console.log(\n    \"Verified address:\",\n    await addressRegistry.verifiedAddresses(0),\n    \"\\n\",\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting FAssets Agent Log Directory Permissions\nDESCRIPTION: Command to set the correct ownership for the FAssets agent log directory.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/1-deploy-fassets-agent.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown 1000:1000 log -R\n```\n\n----------------------------------------\n\nTITLE: Signing Policy Address Proposed Event - Solidity\nDESCRIPTION: Signals that a new signing policy address has been proposed for a voter. Informs listeners of updates in authorization policies. Event fields are the voter's address and the new signing policy address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_33\n\nLANGUAGE: solidity\nCODE:\n```\nevent SigningPolicyAddressProposed(\n    address voter,\n    address signingPolicyAddress\n)\n```\n\n----------------------------------------\n\nTITLE: Example Structure of Decoded IEVMTransaction.Response\nDESCRIPTION: Shows the structure of a decoded IEVMTransaction.Response object containing details like transaction hash, block information, addresses, and event data from an EVM transaction.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n[\n  attestationType: '0x45564d5472616e73616374696f6e000000000000000000000000000000000000',\n  sourceId: '0x7465737445544800000000000000000000000000000000000000000000000000',\n  votingRound: '945196',\n  lowestUsedTimestamp: '1735543584',\n  requestBody: [\n    '0x4e636c6590b22d8dcdade7ee3b5ae5572f42edb1878f09b3034b2f7c3362ef3c',\n    '1',\n    true,\n    true,\n    [],\n    transactionHash: '0x4e636c6590b22d8dcdade7ee3b5ae5572f42edb1878f09b3034b2f7c3362ef3c',\n    requiredConfirmations: '1',\n    provideInput: true,\n    listEvents: true,\n    logIndices: []\n  ],\n  responseBody: [\n    '7384262',\n    '1735543584',\n    '0x70Ad32B82B4FE2821C798e628d93645218E2A806',\n    false,\n    '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    '61000000000000000',\n    '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006772521a00000000000000000000000000000000000000000000000000000000000000040b000604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000d8b72d434c80000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000d8b72d434c8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bfff9976782d46cc05630d1f6ebab18b2324d6b140001f41c7d4b196cb0c7b01d743fbc6116a902379c723800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000001c7d4b196cb0c7b01d743fbc6116a902379c7238000000000000000000000000e49acc3b16c097ec88dc9352ce4cd57ab7e35b95000000000000000000000000000000000000000000000000000000000000001900000000000000000000000000000000000000000000000000000000000000600000000000000000000000001c7d4b196cb0c7b01d743fbc6116a902379c723800000000000000000000000070ad32b82b4fe2821c798e628d93645218e2a80600000000000000000000000000000000000000000000000000000000ad2090e40c',\n    '1',\n    [ ... ],\n    blockNumber: '7384262',\n    timestamp: '1735543584',\n    sourceAddress: '0x70Ad32B82B4FE2821C798e628d93645218E2A806',\n    isDeployment: false,\n    receivingAddress: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    value: '61000000000000000',\n    input: '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006772521a00000000000000000000000000000000000000000000000000000000000000040b000604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000d8b72d434c80000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000d8b72d434c8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bfff9976782d46cc05630d1f6ebab18b2324d6b140001f41c7d4b196cb0c7b01d743fbc6116a902379c723800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000001c7d4b196cb0c7b01d743fbc6116a902379c7238000000000000000000000000e49acc3b16c097ec88dc9352ce4cd57ab7e35b95000000000000000000000000000000000000000000000000000000000000001900000000000000000000000000000000000000000000000000000000000000600000000000000000000000001c7d4b196cb0c7b01d743fbc6116a902379c723800000000000000000000000070ad32b82b4fe2821c798e628d93645218e2a80600000000000000000000000000000000000000000000000000000000ad2090e40c',\n    status: '1',\n    events: [ ... ]\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Compiling Hardhat Contracts with npx - Bash\nDESCRIPTION: Use this Bash command to invoke Hardhat's compiler via npx, compiling all Solidity '.sol' files in the contracts directory and generating build artifacts. Dependency: Hardhat must be installed via npm/yarn. Outputs compiled contract artifacts used for testing and deployment; no input parameters required.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/hardhat-foundry-starter-kit.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat compile\n```\n\n----------------------------------------\n\nTITLE: Checking Wallet Balance on Coston2 using Cast (Bash)\nDESCRIPTION: Uses the `cast balance` command to check the C2FLR token balance of the generated wallet address (`$ACCOUNT`) on the Coston2 testnet via the specified RPC URL (`$RPC_URL`). The `-e` flag might indicate formatting or specific output encoding.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/build-first-app.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncast balance $ACCOUNT -r $RPC_URL -e\n```\n\n----------------------------------------\n\nTITLE: Proposing Submit Address - Solidity\nDESCRIPTION: Handles the request from a voter to set a submit address, beginning the registration process. The input is the desired submit address, and further steps are needed for confirmation. Common in voting and permissioned contract designs.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_20\n\nLANGUAGE: solidity\nCODE:\n```\nfunction proposeSubmitAddress(\n    address _submitAddress\n) external;\n```\n\n----------------------------------------\n\nTITLE: Fetching Agent Information in Solidity\nDESCRIPTION: Function to retrieve detailed information about a specific agent using their vault address. Returns data in an AgentInfo struct format.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/IAssetManager.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getAgentInfo(address _agentVault)\n    external view\n    returns (AgentInfo.Info memory);\n```\n\n----------------------------------------\n\nTITLE: Checking Token Balance in IWNat Solidity Interface\nDESCRIPTION: Returns the current token balance owned by a specified account.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction balanceOf(\n    address account\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Submitting and Signing Protocol Actions - Flare Systems Manager Interface - Solidity\nDESCRIPTION: Lists interface functions for submitting on-chain signatures and data related to signing policies, rewards, uptime votes, and node submissions. Each method expects strict parameters, such as reward epoch ids, data hashes, arrays of structures, and signature structures, enabling decentralized signature gathering and secure record-keeping. They serve critical roles in consensus, state finalization, and attestations for the Flare protocol.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IFlareSystemsManager.md#2025-04-22_snippet_4\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction signNewSigningPolicy(\n    uint24 _rewardEpochId,\n    bytes32 _newSigningPolicyHash,\n    struct IFlareSystemsManager.Signature _signature\n) external;\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction signRewards(\n    uint24 _rewardEpochId,\n    struct IFlareSystemsManager.NumberOfWeightBasedClaims[] _noOfWeightBasedClaims,\n    bytes32 _rewardsHash,\n    struct IFlareSystemsManager.Signature _signature\n) external;\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction signUptimeVote(\n    uint24 _rewardEpochId,\n    bytes32 _uptimeVoteHash,\n    struct IFlareSystemsManager.Signature _signature\n) external;\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction submitUptimeVote(\n    uint24 _rewardEpochId,\n    bytes20[] _nodeIds,\n    struct IFlareSystemsManager.Signature _signature\n) external;\n```\n\n----------------------------------------\n\nTITLE: Proposing Delegation Address - Solidity\nDESCRIPTION: Initiates the process for a voter to propose a new delegation address. Only callable by the voter entity, it requires the delegation address to be set. Subsequent confirmation is expected for completion; part of a multi-step registration pattern.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\nfunction proposeDelegationAddress(\n    address _delegationAddress\n) external;\n```\n\n----------------------------------------\n\nTITLE: Querying Registered Voter Count in Solidity\nDESCRIPTION: Defines the `getNumberOfRegisteredVoters` function interface. This view function returns the total number of voters registered for a specific reward epoch. It returns zero if the epoch is unsupported (e.g., before the initial epoch or too far in the future). The count for the *next* epoch can change until the signing policy snapshot is taken.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IVoterRegistry.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getNumberOfRegisteredVoters(\n    uint256 _rewardEpochId\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Attestation Request Event Definition in Solidity\nDESCRIPTION: Event emitted when an attestation request is submitted. Includes the encoded request data and the fee paid.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IFdcHub.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nevent AttestationRequest(\n    bytes data,\n    uint256 fee\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving P-chain Addresses\nDESCRIPTION: This command displays the P-chain addresses associated with the user's account, useful for identifying staking transactions.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/using-flare-stake-tool.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nflare-stake-tool info addresses\n```\n\n----------------------------------------\n\nTITLE: Defining DataTransportObject Struct for JsonApi Decoding in Solidity\nDESCRIPTION: This snippet defines a DataTransportObject struct used to decode data from the JsonApi attestation. It contains a single field to store the reserve amount received from the Web2 API.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nstruct DataTransportObject {\n    uint256 reserves;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Voter Delegation Fee Percentage in Solidity\nDESCRIPTION: This Solidity function definition describes `setVoterFeePercentage` within the `IWNatDelegationFee` interface. It's an external function allowing a voter (the caller) to set or update their delegation fee percentage. It takes the desired fee percentage in BIPS (`_feePercentageBIPS`) as input and returns the reward epoch ID (`uint256`) when this new fee will become effective.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IWNatDelegationFee.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setVoterFeePercentage(\n    uint16 _feePercentageBIPS\n) external returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Solidity Event Declaration for InflationRewardsOffered\nDESCRIPTION: The `InflationRewardsOffered` Solidity event is emitted when inflation-based rewards are distributed via the protocol. It logs the epoch identifier, an array of `FeedConfiguration` structs, and the reward amount. Off-chain consumers rely on this event for reward analytics, and full context requires the definition of the referenced struct type, expected to be declared elsewhere in the contract ecosystem.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdateIncentiveManager.md#2025-04-22_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nevent InflationRewardsOffered(\n    uint24 rewardEpochId,\n    struct IFastUpdatesConfiguration.FeedConfiguration[] feedConfigurations,\n    uint256 amount\n)\n```\n\n----------------------------------------\n\nTITLE: Reading Current Scale via Solidity Interface Function\nDESCRIPTION: This snippet defines the `getScale` Solidity interface function for retrieving the present value of the protocol's scale configuration. Externally callable, read-only, and returning a `Scale` type, it requires no arguments. Used for monitoring or computation, this function aids third parties seeking to align offer submissions with current contract state.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdateIncentiveManager.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getScale(\n) external view returns (\n    Scale\n);\n```\n\n----------------------------------------\n\nTITLE: Running Hardhat Script to Trigger EVM Transactions - Bash\nDESCRIPTION: This bash command runs a Hardhat script (`trySimpleTransaction`) on the Sepolia network using the Hardhat runner via Yarn. It will execute ETH transfer transactions, including one to a contract address that triggers the fallback method, causing an event to be emitted for attestation. Requires Hardhat, configured environment, and access to the Sepolia network; outputs transaction hashes and attestation proof JSON for the sent transactions.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/connect-evm-chains.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn hardhat run scripts/evm/trySimpleTransaction --network sepolia\n```\n\n----------------------------------------\n\nTITLE: Fetching Contract ABI from Flare Explorer API - Python (Mainnet)\nDESCRIPTION: This Python code retrieves a contract's ABI from the Flare Explorer API on mainnet. Facilitates dynamic interaction with deployed contracts by obtaining the required ABI data. Requires 'requests' and access to Flare's mainnet explorer.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-python-developers.mdx#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n{FetchAbiFlare}\n```\n\n----------------------------------------\n\nTITLE: Checking Connected Peers\nDESCRIPTION: Command to query the node's health endpoint and extract the number of connected peers, which should be at least 16 for proper operation.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:9650/ext/health | jq\n```\n\n----------------------------------------\n\nTITLE: Submit Address Proposal Event Definition in Solidity\nDESCRIPTION: Event emitted when a new submit address is proposed by a voter. Takes voter address and proposed submit address as parameters.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_35\n\nLANGUAGE: solidity\nCODE:\n```\nevent SubmitAddressProposed(\n    address voter,\n    address submitAddress\n)\n```\n\n----------------------------------------\n\nTITLE: Defining FDC Payment Attestation Script Structure in Solidity\nDESCRIPTION: Sets up the basic structure for handling different stages of the FDC payment attestation process using separate contract implementations. Includes imports and defines constants for attestation type and file paths.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.25;\n\nimport {Script} from \"dependencies/forge-std-1.9.5/src/Script.sol\";\n...\n\nstring constant attestationTypeName = \"Payment\";\nstring constant dirPath = \"data/\";\n\ncontract PrepareAttestationRequest is Script {\n ...\n}\n\ncontract SubmitAttestationRequest is Script {\n ...\n}\n\ncontract RetrieveDataAndProof is Script {\n ...\n}\n\ncontract Deploy is Script {\n ...\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Querying Maximum Return Amount from Core Vault in Bash\nDESCRIPTION: Retrieves the maximum amount of underlying assets that can be returned from the core vault to a specific FAsset agent vault using the `agent-bot` script via yarn. Requires the agent vault address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot maximumReturnFromCoreVault <agentVaultAddress>\n```\n\n----------------------------------------\n\nTITLE: JQ Filter for Extracting and Formatting Reserves Value\nDESCRIPTION: This JQ filter is designed to process a JSON response from a specific API endpoint (`https://api.htdigitalassets.com/alm-stablecoin-db/metrics/current_reserves_amount`). It selects the `value` field, removes any commas used as thousand separators (`gsub(\\\",\\\";\\\"\\\")`), and then removes the decimal point and any subsequent digits (`sub(\\\"\\\\\\\\.\\\\\\\\d*\\\";\\\"\\\")`), effectively converting the formatted currency string into an integer representation of the reserves amount.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_19\n\nLANGUAGE: jq\nCODE:\n```\n```jq\n{reserves: .value | gsub(\",\";\"\") | sub(\"\\\\.\\\\d*\";\"\")}\n```\n```\n\n----------------------------------------\n\nTITLE: Structuring RewardClaimWithProof - Solidity Interface\nDESCRIPTION: Specifies the 'RewardClaimWithProof' struct, bundling a Merkle proof (bytes32 array) with a RewardClaim struct. Used to validate reward claims securely. Dependent on RewardsV2Interface and cryptographic proof flow.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRewardManager.md#2025-04-22_snippet_21\n\nLANGUAGE: solidity\nCODE:\n```\nstruct RewardClaimWithProof {\n  bytes32[] merkleProof;\n  struct RewardsV2Interface.RewardClaim body;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Forge Script for Contract Deployment in Bash\nDESCRIPTION: This bash command runs the Forge script to deploy the AddressValidity contract using environment variables for private key, RPC URL, and API key.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/address-validity.mdx#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nforge script script/fdcExample/AddressValidity.s.sol:Deploy --private-key $PRIVATE_KEY --rpc-url $COSTON2_RPC_URL --etherscan-api-key $FLARE_API_KEY --broadcast --ffi\n```\n\n----------------------------------------\n\nTITLE: Implementing toHexString Function for Data Encoding in Solidity\nDESCRIPTION: Converts binary data to a hexadecimal string representation with '0x' prefix. Used for encoding transaction data for FDC attestation requests.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction toHexString(\n bytes memory data\n) public pure returns (string memory) {\n bytes memory alphabet = \"0123456789abcdef\";\n\n bytes memory str = new bytes(2 + data.length * 2);\n str[0] = \"0\";\n str[1] = \"x\";\n for (uint i = 0; i < data.length; i++) {\n str[2 + i * 2] = alphabet[uint(uint8(data[i] >> 4))];\n str[3 + i * 2] = alphabet[uint(uint8(data[i] & 0x0f))];\n }\n return string(str);\n}\n```\n\n----------------------------------------\n\nTITLE: FlareDrop Events in Solidity\nDESCRIPTION: Event definitions for the IDistributionToDelegators interface including UseGoodRandomSet, EntitlementStart, AccountClaimed, and AccountOptOut events. These events track important state changes in the FlareDrop distribution process.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IDistributionToDelegators.md#2025-04-22_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nevent UseGoodRandomSet(\n    bool useGoodRandom,\n    uint256 maxWaitForGoodRandomSeconds\n)\n\nevent EntitlementStart(\n    uint256 entitlementStartTs\n)\n\nevent AccountClaimed(\n    address whoClaimed,\n    address sentTo,\n    uint256 month,\n    uint256 amountWei\n)\n\nevent AccountOptOut(\n    address theAccount,\n    bool confirmed\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Random Number with Quality Indicator in Solidity\nDESCRIPTION: This external view function getCurrentRandomWithQuality returns both the current random number and a boolean flag that indicates whether the number was generated securely. It allows callers to decide whether or not to use the random value based on its quality. Inputs: none. Outputs: _randomNumber (uint256), _isSecureRandom (bool). No dependencies aside from implementation.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/ISubmission.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getCurrentRandomWithQuality(\n) external view returns (\n    uint256 _randomNumber,\n    bool _isSecureRandom\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring FTSO Contract for Production Use in Solidity\nDESCRIPTION: This Solidity code snippet demonstrates how to modify the `FtsoV2ChangeQuoteFeed` contract for production environments. It replaces the `TestFtsoV2Interface` with the official `FtsoV2Interface` and uses the `ContractRegistry` to dynamically fetch the correct FTSO contract address on the network, making it suitable for real transactions and state modifications.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/change-quote-feed.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nimport {ContractRegistry} from \"@flarenetwork/flare-periphery-contracts/coston2/ContractRegistry.sol\";\nimport {FtsoV2Interface} from \"@flarenetwork/flare-periphery-contracts/coston2/FtsoV2Interface.sol\";\n\ncontract FtsoV2ChangeQuoteFeed {\n  FtsoV2Interface internal ftsoV2;\n  constructor() {\n    ftsoV2 = ContractRegistry.getFtsoV2();\n  }\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Claim Executors in Solidity\nDESCRIPTION: Sets the addresses of executors that can perform claims. All previous executors will be replaced with the new ones. Requires a fee payment when using registered executors.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setClaimExecutors(\n    address[] _executors\n) external payable;\n```\n\n----------------------------------------\n\nTITLE: Calculating Voting Round ID Based on Block Timestamp – Flare, TypeScript\nDESCRIPTION: This function calculates the voting round ID for a given attestation transaction by inspecting the block timestamp. It fetches relevant on-chain parameters (first voting epoch start and epoch duration seconds) from FlareSystemsManager and computes the round ID by subtracting the epoch start time from the transaction's block timestamp and dividing by the epoch duration. The method logs intermediate values for debugging. Requires a transaction object and connection to FlareSystemsManager. This calculation ensures scripts correctly track the lifecycle of attestation requests across voting epochs.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/evm-transaction.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nasync function calculateRoundId(transaction: any) {\\n  const blockNumber = transaction.receipt.blockNumber;\\n  const block = await ethers.provider.getBlock(blockNumber);\\n  const blockTimestamp = BigInt(block!.timestamp);\\n\\n  const flareSystemsManager: IFlareSystemsManagerInstance =\\n    await getFlareSystemsManager();\\n  const firsVotingRoundStartTs = BigInt(\\n    await flareSystemsManager.firstVotingRoundStartTs(),\\n  );\\n  const votingEpochDurationSeconds = BigInt(\\n    await flareSystemsManager.votingEpochDurationSeconds(),\\n  );\\n\\n  console.log(\\\"Block timestamp:\\\", blockTimestamp, \\\"\\\\n\\\");\\n  console.log(\\\"First voting round start ts:\\\", firsVotingRoundStartTs, \\\"\\\\n\\\");\\n  console.log(\\n    \\\"Voting epoch duration seconds:\\\",\\n    votingEpochDurationSeconds,\\n    \\\"\\\\n\\\",\\n  );\\n\\n  const roundId = Number(\\n    (blockTimestamp - firsVotingRoundStartTs) / votingEpochDurationSeconds,\\n  );\\n  console.log(\\\"Calculated round id:\\\", roundId, \\\"\\\\n\\\");\\n  console.log(\\n    \\\"Received round id:\\\",\\n    Number(await flareSystemsManager.getCurrentVotingEpochId()),\\n    \\\"\\\\n\\\",\\n  );\\n  return roundId;\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Decoding RedemptionTicketUpdated Blockchain Event Using Bash\nDESCRIPTION: This Bash snippet shows an example output of the RedemptionTicketUpdated blockchain event, demonstrating the structure of the event and its arguments as decoded from an EVM-based chain. No external dependencies are needed as this is an illustrative extraction, but in practice, event decoding may require libraries such as web3.js or ethers.js for actual event logs. Arguments output corresponds to: agent vault address (the redeemer), redemption ticket id, and the redemption ticket value in the underlying chain's currency. The output is partially decoded and does not represent real-time event listening; instead, it serves as a technical reference for interpreting event data within the context of asset management.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/developer-guides/3-fassets-redeem.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nEvent: RedemptionTicketUpdated\\nArguments: Result(3) [\\n  '0x3c831Fe4417bEFFAc721d24996985eE2dd627053',\\n  870n,\\n  3440000000n\\n]\n```\n\n----------------------------------------\n\nTITLE: Defining VoterRemoved Event in Solidity\nDESCRIPTION: Defines the `VoterRemoved` event interface. This event is emitted when a voter is removed from the registry for a specific reward epoch. It includes the `voter` address and the corresponding `rewardEpochId`.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IVoterRegistry.md#2025-04-22_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nevent VoterRemoved(\n    address voter,\n    uint256 rewardEpochId\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Star Wars Character Struct in Solidity\nDESCRIPTION: Defines a struct to store essential Star Wars character information including name, movie count, API ID and BMI calculation.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/json-api.mdx#2025-04-22_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\nstruct StarWarsCharacter {\n    string name;\n    uint256 numberOfMovies;\n    uint256 apiUid;\n    uint256 bmi;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum Voter Limit in Solidity\nDESCRIPTION: Defines the `maxVoters` function interface. This view function returns the maximum number of voters allowed to be registered within a single reward epoch.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IVoterRegistry.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction maxVoters(\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Writing ABI Encoded Request to File in Solidity\nDESCRIPTION: This snippet calls a helper function `Base.writeToFile` to save the `abiEncodedRequest` (obtained from the verifier response) to a text file. The request data is first converted to a hex string using `StringsBase.toHexString`. The filename is constructed dynamically using the `attestationTypeName`.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\n```solidity title=\"scrip/fdcExample/Payment.s.sol\"\nBase.writeToFile(\n    dirPath,\n    string.concat(attestationTypeName, \"_abiEncodedRequest\"),\n    StringsBase.toHexString(response.abiEncodedRequest),\n    true\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Preparing FDC Attestation Request Base in TypeScript\nDESCRIPTION: Core function that formats and submits an attestation request to the FDC verifier server, handling API communication and response validation for any attestation type.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/address-validity.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync function prepareAttestationRequestBase(\n  url: string,\n  apiKey: string,\n  attestationTypeBase: string,\n  sourceIdBase: string,\n  requestBody: any,\n) {\n  console.log(\"Url:\", url, \"\\n\");\n  const attestationType = toUtf8HexString(attestationTypeBase);\n  const sourceId = toUtf8HexString(sourceIdBase);\n\n  const request = {\n    attestationType: attestationType,\n    sourceId: sourceId,\n    requestBody: requestBody,\n  };\n  console.log(\"Prepared request:\\n\", request, \"\\n\");\n\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"X-API-KEY\": apiKey,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(request),\n  });\n  if (response.status != 200) {\n    throw new Error(\n      `Response status is not OK, status ${response.status} ${response.statusText}\\n`,\n    );\n  }\n  console.log(\"Response status is OK\\n\");\n\n  return await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining Feed ID from Category and Name in Solidity\nDESCRIPTION: Specifies a view function interface for computing a feed ID (bytes21) from a category (uint8) and name (string). This operation depends on deterministic encoding logic and expects both category and name as inputs, returning the unique feed ID. It is intended for contracts requiring reliable feed identification. This function does not alter contract state, and requires Solidity, with reliance on appropriate string and byte manipulation.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFtsoFeedIdConverter.md#2025-04-22_snippet_1\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction getFeedId(\n    uint8 _category,\n    string _name\n) external view returns (\n    bytes21\n);\n```\n\n----------------------------------------\n\nTITLE: Defining FastUpdateFeedRemoved Event in Solidity\nDESCRIPTION: Defines the `FastUpdateFeedRemoved` event within the `IFastUpdater` interface. This event is emitted when a feed is removed from the fast update system, indicating the index (`index`) of the removed feed.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdater.md#2025-04-22_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nevent FastUpdateFeedRemoved(\n    uint256 index\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Range Value via Solidity Interface\nDESCRIPTION: This code snippet presents the Solidity interface function `getRange`, which enables callers to retrieve the per-block variation range. It is a `view` method with no inputs and returns a `Range` type. This accessor is useful for protocol actors and third-party services monitoring volatility constraints or designing incentive offers based on current parameters.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdateIncentiveManager.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getRange(\n) external view returns (\n    Range\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feed Configurations - Solidity\nDESCRIPTION: Defines the getFeedConfigurations function, which returns an array of FeedConfiguration structs. No parameters are required. The function operates externally and provides a view-only interface to access both active and removed feeds' configurations. Output is a struct array with configuration details for each feed.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdatesConfiguration.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getFeedConfigurations(\n) external view returns (\n    struct IFastUpdatesConfiguration.FeedConfiguration[]\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single FDC Configuration in Solidity\nDESCRIPTION: Function to retrieve a single FDC configuration at a specified index, returning a configuration struct containing attestation type, source, inflation share, and other settings.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IFdcInflationConfigurations.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getFdcConfiguration(\n    uint256 _index\n) external view returns (\n    struct IFdcInflationConfigurations.FdcConfiguration\n);\n```\n\n----------------------------------------\n\nTITLE: Sample ERC20 Transfer and Mint Event Response - JSON\nDESCRIPTION: These JSON snippets represent detailed API or RPC responses for ERC20 transfer/mint transactions, including attestation type, request/response body, block number, addresses, calldata, status, and full event log. These serve as ground truth examples for interpreting smart contract execution, event emissions, and their attributes when building dapps or indexers. Required input is a transaction hash; output is a structured breakdown of on-chain execution.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/connect-evm-chains.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"VALID\",\n  \"response\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"0\",\n    \"lowestUsedTimestamp\": \"1708999068\",\n    \"requestBody\": {\n      \"transactionHash\": \"0xd7eed8cf377a4079718e8d709b3648d62a3a16ea39fbfbe759600c3d574caa15\",\n      \"requiredConfirmations\": \"1\",\n      \"provideInput\": true,\n      \"listEvents\": true,\n      \"logIndices\": []\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5370899\",\n      \"timestamp\": \"1708999068\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0x6023e19d70C304eA16a3728ceDcb042791737EC3\",\n      \"value\": \"0\",\n      \"input\": \"0x40c10f190000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f37300000000000000000000000000000000000000000000000000000000000f4240\",\n      \"status\": \"1\",\n      \"events\": [\n        {\n          \"logIndex\": \"38\",\n          \"emitterAddress\": \"0x6023e19d70C304eA16a3728ceDcb042791737EC3\",\n          \"topics\": [\n            \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n            \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n            \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373\"\n          ],\n          \"data\": \"0x00000000000000000000000000000000000000000000000000000000000f4240\",\n          \"removed\": false\n        }\n      ]\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"VALID\",\n  \"response\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"0\",\n    \"lowestUsedTimestamp\": \"1708999080\",\n    \"requestBody\": {\n      \"transactionHash\": \"0x9dffa80b6daea45ed4bfc93bb72cdb893549fdefb81cb760b7ce08edef9859a6\",\n      \"requiredConfirmations\": \"1\",\n      \"provideInput\": true,\n      \"listEvents\": true,\n      \"logIndices\": []\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5370900\",\n      \"timestamp\": \"1708999080\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8a6ab01Eb142C8655F373\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0x6023e19d70C304eA16a3728ceDcb042791737EC3\",\n      \"value\": \"0\",\n      \"input\": \"0xa9059cbb000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d42900000000000000000000000000000000000000000000000000000000000003e8\",\n      \"status\": \"1\",\n      \"events\": [\n        {\n          \"logIndex\": \"32\",\n          \"emitterAddress\": \"0x6023e19d70C304eA16a3728ceDcb042791737EC3\",\n          \"topics\": [\n            \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n            \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373\",\n            \"0x000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d429\"\n          ],\n          \"data\": \"0x00000000000000000000000000000000000000000000000000000000000003e8\",\n          \"removed\": false\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading WNat Contract for FAsset Agent Vault in Bash\nDESCRIPTION: Executes the `agent-bot` script via yarn to upgrade the Wrapped Native Token (WNat) contract associated with a specific FAsset agent collateral pool. Requires the agent vault address as a parameter.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot upgradeWnat <agentVaultAddress>\n```\n\n----------------------------------------\n\nTITLE: Emitting Reward Claims Enabled Event - Solidity Interface\nDESCRIPTION: Defines 'RewardClaimsEnabled' event, signaled when the system has enabled reward claims. Accepts the epoch id at which claims open. Used in environments or UIs wanting to listen to claim availability changes.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRewardManager.md#2025-04-22_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\nevent RewardClaimsEnabled(\n    uint256 rewardEpochId\n)\n```\n\n----------------------------------------\n\nTITLE: RewardClaimWithProof Structure Definition in Solidity\nDESCRIPTION: Structure definition used for claiming rewards with Merkle proof, containing the proof array and reward claim body.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/RewardsV2Interface.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nstruct RewardClaimWithProof {\n  bytes32[] merkleProof;\n  struct RewardsV2Interface.RewardClaim body;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sleep Utility for Async Delays - TypeScript\nDESCRIPTION: Defines a utility function 'sleep' that returns a Promise resolving after a specified number of milliseconds. This function enables asynchronous waiting within TypeScript scripts, often used for polling or retry logic. No external dependencies are required; the parameter 'ms' indicates the wait duration in milliseconds, with no outputs other than pausing execution.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Reward State Struct - Solidity Interface\nDESCRIPTION: Defines the 'RewardState' struct, which aggregates claimable reward state, including epoch id, beneficiary, claim amount, claim type, and initialization flag. Used to represent the presence and readiness of rewards for a user.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRewardManager.md#2025-04-22_snippet_22\n\nLANGUAGE: solidity\nCODE:\n```\nstruct RewardState {\n  uint24 rewardEpochId;\n  bytes20 beneficiary;\n  uint120 amount;\n  enum RewardsV2Interface.ClaimType claimType;\n  bool initialised;\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Standard Payment Reference from Bitcoin/Dogecoin Transaction\nDESCRIPTION: This snippet demonstrates how to extract the standard payment reference from a Bitcoin or Dogecoin transaction. The reference is obtained by prefixing the extracted data with '0x'.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/attestation-types/_standard_payment_reference.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n0x<reference>\n```\n\n----------------------------------------\n\nTITLE: FAssets Redemption Event Parser\nDESCRIPTION: Parses redemption events emitted by the Asset Manager contract during the redemption process.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/developer-guides/3-fassets-redeem.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync function parseRedemptionEvents(\n  transactionReceipt: any,\n  fAssetsRedeem: FAssetsRedeemInstance,\n) {\n  console.log(\"\\nParsing events...\", transactionReceipt.rawLogs);\n\n  const assetManager = (await ethers.getContractAt(\n    \"IAssetManager\",\n    ASSET_MANAGER_ADDRESS,\n  )) as IAssetManagerContract;\n\n  for (const log of transactionReceipt.rawLogs) {\n    try {\n      const parsedLog = assetManager.interface.parseLog({\n        topics: log.topics,\n        data: log.data,\n      });\n\n      if (parsedLog) {\n        const redemptionEvents = [\n          \"RedemptionRequested\",\n          \"RedemptionTicketUpdated\",\n        ];\n        if (redemptionEvents.includes(parsedLog.name)) {\n          console.log(`\\nEvent: ${parsedLog.name}`);\n          console.log(\"Arguments:\", parsedLog.args);\n        }\n      }\n    } catch (e) {\n      console.log(\"Error parsing event:\", e);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AllowedClaimRecipientsChanged Event in Solidity\nDESCRIPTION: Event emitted when the list of allowed claim recipients for an owner is changed.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_29\n\nLANGUAGE: solidity\nCODE:\n```\nevent AllowedClaimRecipientsChanged(\n    address owner,\n    address[] recipients\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Voting Epoch Duration in Solidity\nDESCRIPTION: Function to get the duration of a voting epoch measured in seconds.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/ProtocolsV2Interface.md#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction votingEpochDurationSeconds(\n) external view returns (\n    uint64\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Merkle Roots in Solidity\nDESCRIPTION: Declares the `merkleRoots` function in the IRelay interface. This view function returns the Merkle root associated with a given `_protocolId` and `_votingRoundId`. The function will revert if a `signingPolicySetter` is configured, indicating its use is restricted in pure relay deployments.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRelay.md#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction merkleRoots(\n    uint256 _protocolId,\n    uint256 _votingRoundId\n) external view returns (\n    bytes32 _merkleRoot\n);\n```\n\n----------------------------------------\n\nTITLE: Extracting Connected Peers Count\nDESCRIPTION: Automated command that extracts only the connected peers count from the health endpoint, useful for scripting and monitoring.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s http://127.0.0.1:9650/ext/health | jq -r \".checks.network.message.connectedPeers\"\n```\n\n----------------------------------------\n\nTITLE: Example Complete DA Layer Response for EVMTransaction in Shell\nDESCRIPTION: An example of a complete response from the DA Layer for an EVMTransaction request. The response includes the attestation type, network, block numbers, and transaction details in a hexadecimal format.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n{\n  response_hex: '0x\n  0000000000000000000000000000000000000000000000000000000000000020\n  45564d5472616e73616374696f6e000000000000000000000000000000000000\n  7465737445544800000000000000000000000000000000000000000000000000\n  00000000000000000000000000000000000000000000000000000000000e6c2c\n  0000000000000000000000000000000000000000000000000000000067724b20\n  00000000000000000000000000000000000000000000000000000000000000c0\n  0000000000000000000000000000000000000000000000000000000000000180\n  4e636c6590b22d8dcdade7ee3b5ae5572f42edb1878f09b3034b2f7c3362ef3c\n  0000000000000000000000000000000000000000000000000000000000000001\n  0000000000000000000000000000000000000000000000000000000000000001\n  0000000000000000000000000000000000000000000000000000000000000001\n  00000000000000000000000000000000000000000000000000000000000000a0\n  0000000000000000000000000000000000000000000000000000000000000000\n  000000000000000000000000000000000000000000000000000000000070acc6\n  0000000000000000000000000000000000000000000000000000000067724b20\n  00000000000000000000000070ad32b82b4fe2821c798e628d93645218e2a806\n  0000000000000000000000000000000000000000000000000000000000000000\n  0000000000000000000000003fc91a3afd70395cd496c647d5a6cc9d4b2b7fad\n  00000000000000000000000000000000000000000000000000d8b72d434c8000\n  0000000000000000000000000000000000000000000000000000000000000120\n  0000000000000000000000000000000000000000000000000000000000000001\n  0000000000000000000000000000000000000000000000000000000000000520\n  00000000000000000000000000000000000000000000000000000000000003c5\n  3593564c00000000000000000000000000000000000000000000000000000000\n  0000006000000000000000000000000000000000000000000000000000000000\n  000000a000000000000000000000000000000000000000000000000000000000\n  6772521a00000000000000000000000000000000000000000000000000000000\n  000000040b000604000000000000000000000000000000000000000000000000\n  0000000000000000000000000000000000000000000000000000000000000000\n  0000000400000000000000000000000000000000000000000000000000000000\n  0000008000000000000000000000000000000000000000000000000000000000\n  000000e000000000000000000000000000000000000000000000000000000000\n  0000020000000000000000000000000000000000000000000000000000000000\n  0000028000000000000000000000000000000000000000000000000000000000\n  0000004000000000000000000000000000000000000000000000000000000000\n  0000000200000000000000000000000000000000000000000000000000d8b72d\n  434c800000000000000000000000000000000000000000000000000000000000\n  0000010000000000000000000000000000000000000000000000000000000000\n  0000000200000000000000000000000000000000000000000000000000d8b72d\n  434c800000000000000000000000000000000000000000000000000000000000\n  0000000000000000000000000000000000000000000000000000000000000000\n  000000a000000000000000000000000000000000000000000000000000000000\n  0000000000000000000000000000000000000000000000000000000000000000\n  0000002bfff9976782d46cc05630d1f6ebab18b2324d6b140001f41c7d4b196c\n  b0c7b01d743fbc6116a902379c72380000000000000000000000000000000000\n  0000000000000000000000000000000000000000000000000000000000000000\n  000000600000000000000000000000001c7d4b196cb0c7b01d743fbc6116a902\n  379c7238000000000000000000000000e49acc3b16c097ec88dc9352ce4cd57a\n  b7e35b9500000000000000000000000000000000000000000000000000000000\n  0000001900000000000000000000000000000000000000000000000000000000\n  000000600000000000000000000000001c7d4b196cb0c7b01d743fbc6116a902\n  379c723800000000000000000000000070ad32b82b4fe2821c798e628d936452\n  18e2a80600000000000000000000000000000000000000000000000000000000\n  ad2090e40c000000000000000000000000000000000000000000000000000000\n  0000000000000000000000000000000000000000000000000000000000000006\n  00000000000000000000000000000000000000000000000000000000000000c0\n  0000000000000000000000000000000000000000000000000000000000000200\n  0000000000000000000000000000000000000000000000000000000000000360\n  00000000000000000000000000000000000000000000000000000000000004c0\n  00000000000000000000000000000000000000000000000000000000000006a0\n  0000000000000000000000000000000000000000000000000000000000000800\n  000000000000000000000000000000000000000000000000000000000000003f\n  000000000000000000000000fff9976782d46cc05630d1f6ebab18b2324d6b14\n  00000000000000000000000000000000000000000000000000000000000000a0\n  0000000000000000000000000000000000000000000000000000000000000100\n  0000000000000000000000000000000000000000000000000000000000000000\n  0000000000000000000000000000000000000000000000000000000000000002\n  e1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c\n  0000000000000000000000003fc91a3afd70395cd496c647d5a6cc9d4b2b7fad\n  0000000000000000000000000000000000000000000000000000000000000020\n  00000000000000000000000000000000000000000000000000d8b72d434c8000\n  0000000000000000000000000000000000000000000000000000000000000040\n  0000000000000000000000001c7d4b196cb0c7b01d743fbc6116a902379c7238\n  00000000000000000000000000000000000000000000000000000000000000a0\n  0000000000000000000000000000000000000000000000000000000000000120\n  0000000000000000000000000000000000000000000000000000000000000000\n  0000000000000000000000000000000000000000000000000000000000000003\n  ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n  0000000000000000000000003289680dd4d6c10bb19b899729cda5eef58aeff1\n  0000000000000000000000003fc91a3afd70395cd496c647d5a6cc9d4b2b7fad\n  0000000000000000000000000000000000000000000000000000000000000020\n  00000000000000000000000000000000000000000000000000000000ae6dcda8\n  0000000000000000000000000000000000000000000000000000000000000041\n  000000000000000000000000fff9976782d46cc05630d1f6ebab18b2324d6b14\n  00000000000000000000000000000000000000000000000000000000000000a0\n  0000000000000000000000000000000000000000000000000000000000000120\n  0000000000000000000000000000000000000000000000000000000000000000\n  0000000000000000000000000000000000000000000000000000000000000003\n  ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n  0000000000000000000000003fc91a3afd70395cd496c647d5a6cc9d4b2b7fad\n  0000000000000000000000003289680dd4d6c10bb19b899729cda5eef58aeff1\n  0000000000000000000000000000000000000000000000000000000000000020\n  00000000000000000000000000000000000000000000000000d8b72d434c8000\n  0000000000000000000000000000000000000000000000000000000000000042\n  0000000000000000000000003289680dd4d6c10bb19b899729cda5eef58aeff1\n  00000000000000000000000000000000000000000000000000000000000000a0\n  0000000000000000000000000000000000000000000000000000000000000120\n  0000000000000000000000000000000000000000000000000000000000000000\n  0000000000000000000000000000000000000000000000000000000000000003\n  c42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67\n  0000000000000000000000003fc91a3afd70395cd496c647d5a6cc9d4b2b7fad\n  0000000000000000000000003fc91a3afd70395cd496c647d5a6cc9d4b2b7fad\n  00000000000000000000000000000000000000000000000000000000000000a0\n  ffffffffffffffffffffffffffffffffffffffffffffffffffffffff51923258\n  00000000000000000000000000000000000000000000000000d8b72d434c8000\n  00000000000000000000000000000000000011d79ac448fce087b0605d7423c8\n  000000000000000000000000000000000000000000000000002231596d817570\n  000000000000000000000000000000000000000000000000000000000002925f\n  0000000000000000000000000000000000000000000000000000000000000043\n  0000000000000000000000001c7d4b196cb0c7b01d743fbc6116a902379c7238\n  00000000000000000000000000000000000000000000000000000000000000a0\n  0000000000000000000000000000000000000000000000000000000000000120\n  0000000000000000000000000000000000000000000000000000000000000000\n  0000000000000000000000000000000000000000000000000000000000000003\n  ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n  0000000000000000000000003fc91a3afd70395cd496c647d5a6cc9d4b2b7fad\n  000000000000000000000000e49acc3b16c097ec88dc9352ce4cd57ab7e35b95\n  0000000000000000000000000000000000000000000000000000000000000020\n  00000000000000000000000000000000000000000000000000000000006fa26f\n  0000000000000000000000000000000000000000000000000000000000000044\n  0000000000000000000000001c7d4b196cb0c7b01d743fbc6116a902379c7238\n  00000000000000000000000000000000000000000000000000000000000000a0\n```\n\n----------------------------------------\n\nTITLE: Querying FTSO Config with go-ethereum (Placeholder)\nDESCRIPTION: Go code example using the go-ethereum library to retrieve FTSOv2 feed configurations on the Flare Testnet Coston2. Requires a Go environment, installed go-ethereum client, and generated contract bindings.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/query-feed-configuration.mdx#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n{FtsoConfigGo}\n```\n\n----------------------------------------\n\nTITLE: Loading Verifier URL and API Key from Environment in Solidity (Foundry)\nDESCRIPTION: This snippet shows how to read the Data Access Layer URL (`COSTON2_DA_LAYER_URL`) and an API key (`X_API_KEY`) from environment variables into string variables within a Solidity script using Foundry's `vm.envString` cheatcode. This is typically used for configuring external service interactions.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory daLayerUrl = vm.envString(\"COSTON2_DA_LAYER_URL\");\nstring memory apiKey = vm.envString(\"X_API_KEY\");\n```\n\n----------------------------------------\n\nTITLE: Defining ftsoProtocolId View Function in Solidity\nDESCRIPTION: Specifies an external view function that returns the protocol identifier for FTSO, as an unsigned 8-bit integer. The function is read-only and requires no arguments. It provides critical information to distinguish between various protocol implementations or versions.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/solidity-reference/IFtsoFeedPublisher.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction ftsoProtocolId(\n) external view returns (\n    uint8\n);\n```\n\n----------------------------------------\n\nTITLE: Declaring External View Function for Base Scale Retrieval in Solidity Interface\nDESCRIPTION: This snippet defines the `getBaseScale` view function in the IFastUpdateIncentiveManager Solidity interface. It allows external callers to retrieve the fundamental scale parameter, returning a value of the custom type `Scale`. No input parameters are required, but the caller must have access to the deployed interface. The function is read-only, imposing no side effects, and is often used for diagnostic or configuration queries.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdateIncentiveManager.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getBaseScale(\n) external view returns (\n    Scale\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Claimable Amount for Current User in Solidity\nDESCRIPTION: View function that returns the amount of wei claimable by the calling account for a specified month. This allows users to check how much they can claim before initiating a transaction.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IDistributionToDelegators.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getClaimableAmount(\n    uint256 _month\n) external view returns (\n    uint256 _amountWei);\n```\n\n----------------------------------------\n\nTITLE: Setting EVM Version for Foundry Compilation - TOML\nDESCRIPTION: Configures the Foundry compiler (forge) to use the London EVM version for contract builds. Placed inside foundry.toml under the default profile. Essential for compatibility with deployed Flare EVM and for proper opcode support. No external dependencies, but should match the targeted blockchain's EVM version.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/build-first-app.mdx#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[profile.default]\\n...\\nevm_version = \\\"london\\\"\n```\n\n----------------------------------------\n\nTITLE: Executing Coston Proof Submission & Contract Interaction\nDESCRIPTION: Console output showing the execution of the Coston part of the `trySimpleTransaction.ts` script. This involves waiting for the State Connector to finalize the attestation round, retrieving the proofs, deploying the `EthereumPaymentCollector` contract on Coston, verifying it on the block explorer, and finally printing the retrieved proofs (in JSON format) containing the transaction data and Merkle proofs.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-connectivity.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nRounds:  [ '809307', '809307' ]\nWaiting for the round to be confirmed 809303n 809307\nWaiting for the round to be confirmed 809303n 809307\nWaiting for the round to be confirmed 809303n 809307\nWaiting for the round to be confirmed 809304n 809307\nWaiting for the round to be confirmed 809304n 809307\nWaiting for the round to be confirmed 809304n 809307\nWaiting for the round to be confirmed 809304n 809307\nWaiting for the round to be confirmed 809304n 809307\nWaiting for the round to be confirmed 809305n 809307\nWaiting for the round to be confirmed 809305n 809307\nWaiting for the round to be confirmed 809305n 809307\nWaiting for the round to be confirmed 809305n 809307\nWaiting for the round to be confirmed 809306n 809307\nWaiting for the round to be confirmed 809306n 809307\nWaiting for the round to be confirmed 809306n 809307\nWaiting for the round to be confirmed 809306n 809307\nWaiting for the round to be confirmed 809306n 809307\nRound confirmed, getting proof\nSuccessfully submitted source code for contract\ncontracts/EthereumPaymentCollector.sol:EthereumPaymentCollector at 0x7cf6E7aeFD0207a5bE9a7DbcDA560fc7a6dBD7B4\nfor verification on the block explorer. Waiting for verification result...\n\nSuccessfully verified contract EthereumPaymentCollector on the block explorer.\nhttps://coston-explorer.flare.network/address/0x7cf6E7aeFD0207a5bE9a7DbcDA560fc7a6dBD7B4#code\n\n{\n  \"data\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"lowestUsedTimestamp\": \"1708907688\",\n    \"requestBody\": {\n      \"listEvents\": true,\n      \"logIndices\": [],\n      \"provideInput\": true,\n      \"requiredConfirmations\": \"1\",\n      \"transactionHash\": \"0xac640ab047aa1097ddd473e5940921eb500a9912b33072b8532617692428830e\"\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5363670\",\n      \"events\": [],\n      \"input\": \"0x0123456789\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0xFf02F742106B8a25C26e65C1f0d66BEC3C90d429\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"status\": \"1\",\n      \"timestamp\": \"1708907688\",\n      \"value\": \"10\"\n    },\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"809307\"\n  },\n  \"merkleProof\": [\n    \"0x56faf895bbcb0b2a6f3bc283ea5e1793b224dca8b4b99240a34cee6d9bf1b8f3\",\n    \"0x13ef0de709e7b0485f7623f5a0ad5b56aa23626fbffe5e7f4502bb7be5e0bf7e\",\n    \"0xf72c31824174676516a9c5d9713cb1ae8866cac71462fe2b1a3c1e1b9418a94f\"\n  ]\n}\n{\n  \"data\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"lowestUsedTimestamp\": \"1708907712\",\n    \"requestBody\": {\n      \"listEvents\": true,\n      \"logIndices\": [],\n      \"provideInput\": true,\n      \"requiredConfirmations\": \"1\",\n      \"transactionHash\": \"0x7eb54cde238fc700be31c98af7e4df8c4fc96fd5c634c490183ca612a481efcc\"\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5363672\",\n      \"events\": [\n        {\n          \"data\": \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000059876543210000000000000000000000000000000000000000000000000000000\",\n          \"emitterAddress\": \"0xeBBf567beDe2D8842dF538Cf64E0bE9976183853\",\n          \"logIndex\": \"160\",\n          \"removed\": false,\n          \"topics\": [\n            \"0xaca09dd456ca888dccf8cc966e382e6e3042bb7e4d2d7815015f844edeafce42\"\n          ]\n        }\n      ],\n      \"input\": \"0x9876543210\",\n      \"isDeployment\": false,\n```\n\n----------------------------------------\n\nTITLE: Manually Executing Exit from Available Agent List\nDESCRIPTION: Command to manually execute the exit from the available agent list that was previously announced, usually handled automatically by the bot.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot executeExit <agentVaultAddress>\n```\n\n----------------------------------------\n\nTITLE: SigningPolicyRelayed Event Definition in Solidity\nDESCRIPTION: Defines the `SigningPolicyRelayed` event in the IRelay interface. This event is emitted when a signing policy has been successfully relayed, logging the reward epoch ID of the relayed policy.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRelay.md#2025-04-22_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nevent SigningPolicyRelayed(\n    uint256 rewardEpochId\n)\n```\n\n----------------------------------------\n\nTITLE: Solidity Struct Definition for IncentiveOffer\nDESCRIPTION: The struct `IncentiveOffer` in this Solidity snippet encapsulates user-submitted parameters for an incentive offer transaction. It contains fields for the desired range increase (`rangeIncrease`) and an upper limit for that increase (`rangeLimit`), both of type `Range`. This struct must be ABI-compatible and is critical for marshaling input data to the `offerIncentive` function, with limits imposed by the protocol's governance.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdateIncentiveManager.md#2025-04-22_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nstruct IncentiveOffer {\n  Range rangeIncrease;\n  Range rangeLimit;\n}\n```\n\n----------------------------------------\n\nTITLE: ClaimType Enum Definition in Solidity\nDESCRIPTION: Enumeration defining different types of claims in the rewards system.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/RewardsV2Interface.md#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nenum ClaimType {\n  DIRECT,\n  FEE,\n  WNAT,\n  MIRROR,\n  CCHAIN\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Pool Fees Balance\nDESCRIPTION: Command to retrieve the pool fees balance of a specific FAssets agent by specifying the agent vault address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot poolFeesBalance <agentVaultAddress>\n```\n\n----------------------------------------\n\nTITLE: ABI Signature Hack for DataTransportObject in Solidity\nDESCRIPTION: This function serves as a hack to extract the ABI signature of the DataTransportObject from Hardhat-generated artifacts. It's used for integration with FDC when submitting JsonApi attestation requests.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/weather-insurance.mdx#2025-04-22_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction abiSignatureHack(DataTransportObject memory dto) public pure {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Score Cutoff in Solidity\nDESCRIPTION: Defines the `currentScoreCutoff` view function in the `IFastUpdater` interface. It returns the current score cutoff (`_cutoff`) for sortition eligibility. A score below this cutoff makes a provider eligible to submit updates in the present sortition round.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdater.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction currentScoreCutoff(\n) external view returns (\n    uint256 _cutoff\n);\n```\n\n----------------------------------------\n\nTITLE: Parsing ERC20 Deployment and Transaction Outputs - Bash\nDESCRIPTION: This Bash snippet demonstrates the console output when deploying an ERC20 contract to Sepolia, providing the deployed contract address and resulting transaction hashes. It is intended for developers to verify successful deployment and track transaction references. No dependencies are required beyond the deployment or interaction script (not shown).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/connect-evm-chains.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSepolia USDT deployed to: 0x6023e19d70C304eA16a3728ceDcb042791737EC3\n0xd7eed8cf377a4079718e8d709b3648d62a3a16ea39fbfbe759600c3d574caa15\n```\n\n----------------------------------------\n\nTITLE: Basic Submission via submit2 Method in Solidity\nDESCRIPTION: Defines submit2 as an external protocol submission method, returning a boolean. Commonly employed for revealing data as in FTSO reveal functions across supported protocols. Inputs: none. Outputs: Boolean for operation success. Underlying implementation required.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/ISubmission.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction submit2(\n) external returns (\n    bool\n);\n```\n\n----------------------------------------\n\nTITLE: FXRP Token Transfer Implementation\nDESCRIPTION: Transfers FXRP tokens to the redemption contract to enable FAssets redemption functionality.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/developer-guides/3-fassets-redeem.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function transferFXRP(\n  fAssetsRedeemAddress: string,\n  amountToRedeem: number,\n) {\n  const fxrp = (await ethers.getContractAt(\n    \"IERC20\",\n    FXRP_TOKEN_ADDRESS,\n  )) as ERC20Instance;\n\n  console.log(\"Transferring FXRP to contract...\");\n  const transferTx = await fxrp.transfer(fAssetsRedeemAddress, amountToRedeem);\n  await transferTx.wait();\n  console.log(\"FXRP transfer completed\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RedemptionTicketUpdated Event in Solidity\nDESCRIPTION: This event is emitted when a redemption ticket's value is changed, typically due to partial redemption. It includes the agent vault address, redemption ticket ID, and the updated ticket value in underlying blockchain assets (UBA).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/IAssetManagerEvents.mdx#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nevent RedemptionTicketUpdated(\n    address indexed agentVault,\n    uint256 indexed redemptionTicketId,\n    uint256 ticketValueUBA);\n```\n\n----------------------------------------\n\nTITLE: Defining FtsoRewardManagerProxy Contract Methods in Solidity\nDESCRIPTION: This snippet details methods within the `FtsoRewardManagerProxy.sol` contract, which provides backward compatibility for the old `FTSORewardManager`. It focuses on basic reward claiming for delegation fees, requiring proofs to be provided beforehand via other means. Key functions allow claiming rewards (`claimReward`, `claim`), retrieving data provider fee percentages (`getDataProviderCurrentFeePercentage`, `getDataProviderFeePercentage`, `getDataProviderScheduledFeePercentageChanges`), querying epoch rewards and states (`getEpochReward`, `getStateOfRewards`), finding claimable epochs (`getEpochsWithClaimableRewards`, `nextClaimableRewardEpoch`), and checking claimed status (`getClaimedReward`). It also provides information on reward epoch timing and dependencies (`getRewardEpochToExpireNext`, `getRewardEpochVotePowerBlock`, `getCurrentRewardEpoch`, `getInitialRewardEpoch`). Several methods are deprecated, either reverting (`autoClaim`, `setDataProviderFeePercentage`) or returning default/empty values (`claimRewardFromDataProviders`, `claimFromDataProviders`, `getStateOfRewardsFromDataProviders`, `getDataProviderPerformanceInfo`), indicating users should interact with newer contracts like `RewardManager` or `WNatDelegationFee` for these functionalities.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/5-migration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Claims rewards correctly for delegation fees, assuming the proofs were already provided.\n     */\n    function claimReward(\n        address payable _recipient,\n        uint256[] calldata _rewardEpochs\n    )\n        external\n        returns (uint256 _rewardAmount)\n    {\n    }\n\n    /**\n     * @dev Claims rewards correctly for delegation fees, assuming the proofs were already provided.\n     */\n    function claim(\n        address _rewardOwner,\n        address payable _recipient,\n        uint256 _rewardEpoch,\n        bool _wrap\n    )\n        external\n        returns (uint256 _rewardAmount)\n    {\n    }\n\n\n    /**\n     * @dev Returns the current fee percentage for the data provider.\n     */\n    function getDataProviderCurrentFeePercentage(address _dataProvider)\n        external view\n        returns (uint256 _feePercentageBIPS)\n    {\n    }\n\n    /**\n     * @dev Returns the fee percentage for the data provider for the given reward epoch.\n     */\n    function getDataProviderFeePercentage(\n        address _dataProvider,\n        uint256 _rewardEpoch\n    )\n        external view\n        returns (uint256 _feePercentageBIPS)\n    {\n    }\n\n    /**\n     * @dev Returns the fee percentage changes for the data provider.\n     */\n    function getDataProviderScheduledFeePercentageChanges(address _dataProvider) external view\n        returns (\n            uint256[] memory _feePercentageBIPS,\n            uint256[] memory _validFromEpoch,\n            bool[] memory _fixed\n        )\n    {\n    }\n\n    /**\n     * @dev Returns the epoch reward correctly\n     */\n    function getEpochReward(uint256 _rewardEpoch) external view\n        returns (uint256 _totalReward, uint256 _claimedReward)\n    {\n    }\n\n    /**\n     * @dev Returns the reward state correctly\n     */\n    function getStateOfRewards(\n        address _beneficiary,\n        uint256 _rewardEpoch\n    )\n        external view\n        returns (\n            address[] memory _dataProviders,\n            uint256[] memory _rewardAmounts,\n            bool[] memory _claimed,\n            bool _claimable\n        )\n    {\n    }\n\n    /**\n     * @dev Returns the epochs with claimable rewards correctly\n     */\n    function getEpochsWithClaimableRewards() external view\n        returns (uint256 _startEpochId, uint256 _endEpochId)\n    {\n    }\n\n    /**\n     * @dev Returns the next claimable reward epoch correctly\n     */\n    function nextClaimableRewardEpoch(address _rewardOwner) external view returns (uint256) {\n    }\n\n    /**\n     * @dev Returns the epochs with unclaimed rewards correctly\n     */\n    function getEpochsWithUnclaimedRewards(address _beneficiary) external view\n        returns (uint256[] memory _epochIds)\n    {\n    }\n\n    /**\n     * @dev Returns the claimed rewardr correctly\n     */\n    function getClaimedReward(\n        uint256 _rewardEpoch,\n        address _dataProvider,\n        address _claimer\n    )\n        external view\n        returns (\n            bool _claimed,\n            uint256 _amount\n        )\n    {\n    }\n\n    /**\n     * @dev Returns the reward epoch to expire next correctly\n     */\n    function getRewardEpochToExpireNext() external view returns (uint256) {\n    }\n\n    /**\n     * @dev Returns the reward epoch vote power block correctly\n     */\n    function getRewardEpochVotePowerBlock(uint256 _rewardEpoch) external view returns (uint256) {\n    }\n\n    /**\n     * @inheritdoc IFtsoRewardManager\n     */\n    function getCurrentRewardEpoch() external view returns (uint256) {\n        return rewardManager.getCurrentRewardEpochId();\n    }\n\n    /**\n     * @inheritdoc IFtsoRewardManager\n     */\n    function getInitialRewardEpoch() external view returns (uint256 _initialRewardEpoch) {\n        return rewardManager.getInitialRewardEpochId();\n    }\n\n    /**\n     * @inheritdoc IFtsoRewardManager\n     * @dev Deprecated\n     */\n    function claimRewardFromDataProviders(\n        address payable,\n        uint256[] calldata,\n        address[] calldata\n    )\n        external pure returns (uint256)\n    {\n        // return 0\n    }\n\n    /**\n     * @inheritdoc IFtsoRewardManager\n     * @dev Deprecated\n     */\n    function claimFromDataProviders(\n        address,\n        address payable,\n        uint256[] calldata,\n        address[] calldata,\n        bool\n    )\n        external pure returns (uint256)\n    {\n        // return 0\n    }\n\n    /**\n     * @inheritdoc IFtsoRewardManager\n     * @dev Deprecated - reverts\n     */\n    function autoClaim(address[] calldata, uint256) external pure {\n        revert(\"not supported, use RewardManager\");\n    }\n\n    /**\n     * @inheritdoc IFtsoRewardManager\n     * @dev Deprecated - reverts\n     */\n    function setDataProviderFeePercentage(uint256)\n        external pure\n        returns (uint256)\n    {\n        revert(\"not supported, use WNatDelegationFee\");\n    }\n\n    /**\n     * @dev Deprecated - returns empty array, empty array, false\n     */\n    function getStateOfRewardsFromDataProviders(\n        address,\n        uint256,\n        address[] calldata\n    )\n        external pure\n        returns (\n            uint256[] memory,\n            bool[] memory,\n            bool\n        )\n    {\n    }\n\n    /**\n     * Deprecated - returns 0, 0\n     */\n    function getDataProviderPerformanceInfo(\n        uint256,\n        address\n    )\n        external pure\n        returns (\n            uint256,\n            uint256\n        )\n    {\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Getting Token Symbol in IWNat Solidity Interface\nDESCRIPTION: Returns the symbol of the token, usually a shorter version of the name. Compatible with the ERC20 standard.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_20\n\nLANGUAGE: solidity\nCODE:\n```\nfunction symbol(\n) external view returns (\n    string\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Feed ID - Javascript\nDESCRIPTION: This snippet implements the structured encoding and ID generation logic in Javascript: it takes a numeric feed category and a feed name string, encodes the feed name to hexadecimal, concatenates and left-pads the result to form a 20-byte feed ID with a 0x prefix. No external dependencies are needed but Buffer support is required (Node.js or browser with polyfill). Inputs are category and name; output is a hex string ID for identifying feeds in Javascript applications.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/_feed_explanation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// get_feed_id.js\nfunction getFeedId(category, feedName) {\n    const feedNameHex = Buffer.from(feedName, 'utf8').toString('hex');\n    const raw = category.toString(16).padStart(2, '0') + feedNameHex.padEnd(38, '0');\n    return '0x' + raw;\n}\n// Example:\n// console.log(getFeedId(1, 'FLR/USD'));\n\n```\n\n----------------------------------------\n\nTITLE: Node startup script for Terraform deployment\nDESCRIPTION: Bash script embedded in Terraform that runs on node startup to configure the node settings (like enabling Slack alerts) and start node services.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/4-GCP-marketplace-nodes.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n#### Configure node ####\n# Example\nyq eval '.health_checks.slack_alerts.webhook_secret_name = \"example_slack_webhook_secret_name\"' -i /etc/flare/config.yaml\nyq eval '.health_checks.slack_alerts.enabled = true' -i /etc/flare/config.yaml\n\n#### Start node ####\nnodectl apply --target all\n```\n\n----------------------------------------\n\nTITLE: Running Python Scripts with uv or python - Bash\nDESCRIPTION: Shell commands to execute the contract compilation or deployment scripts using 'uv run' or the standard 'python' command, depending on your environment. Assumes the scripts are in your working directory and all dependencies are installed.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-python-developers.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nuv run compile_contract.py\\n\n```\n\nLANGUAGE: bash\nCODE:\n```\npython compile_contract.py\\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nuv run deploy_contract.py\\n\n```\n\nLANGUAGE: bash\nCODE:\n```\npython deploy_contract.py\\n\n```\n\n----------------------------------------\n\nTITLE: Voter Registration and Epoch Duration Queries - Flare Systems Manager Interface - Solidity\nDESCRIPTION: Presents view-only interface methods to check if voter registration is currently enabled and retrieve the configured durations for reward and voting epochs, in seconds. These functions facilitate precise scheduling and state checks for auxiliary services and contracts. All methods are parameterless and return bool or uint64 accordingly.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IFlareSystemsManager.md#2025-04-22_snippet_3\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction isVoterRegistrationEnabled(\n) external view returns (\n    bool\n);\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction rewardEpochDurationSeconds(\n) external view returns (\n    uint64\n);\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction votingEpochDurationSeconds(\n) external view returns (\n    uint64\n);\n```\n\n----------------------------------------\n\nTITLE: Delegation Management Functions\nDESCRIPTION: Functions to handle vote power delegation, including complete undelegation for both percentage and explicit delegation modes.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_25\n\nLANGUAGE: solidity\nCODE:\n```\nfunction undelegateAll() external;\n\nfunction undelegateAllExplicit(address[] _delegateAddresses) external returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Undelegating Governance Voting Power in Solidity\nDESCRIPTION: Removes governance voting power delegation from the sender's delegation account.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction undelegateGovernance(\n) external;\n```\n\n----------------------------------------\n\nTITLE: Calculating FDC Request Fee in TypeScript\nDESCRIPTION: This asynchronous TypeScript function `getFdcRequestFee` calculates the fee required for a specific FDC attestation request. It takes the ABI-encoded request as input, obtains an instance of the `Helpers` contract, retrieves the address of the `FdcRequestFeeConfigurations` contract using the helper, gets a typed instance of `FdcRequestFeeConfigurations`, and calls its `getRequestFee` method with the encoded request to determine the fee.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/address-validity.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getFdcRequestFee(abiEncodedRequest: string) {\n  const helpers: HelpersInstance = await getHelpers();\n  const fdcRequestFeeConfigurationsAddress: string =\n    await helpers.getFdcRequestFeeConfigurations();\n  const fdcRequestFeeConfigurations: IFdcRequestFeeConfigurationsInstance =\n    await FdcRequestFeeConfigurations.at(fdcRequestFeeConfigurationsAddress);\n  return await fdcRequestFeeConfigurations.getRequestFee(abiEncodedRequest);\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Feed Data Fee by IDs in Solidity\nDESCRIPTION: This Solidity function signature, `calculateFeeByIds`, is part of the `IFeeCalculator` interface. It is designed to calculate the fee required to fetch data for a specified list of feed identifiers (`_feedIds`). It takes an array of `bytes21` feed IDs as input and is expected to return the calculated fee as a `uint256`. This function is declared as `external view`, meaning it can be called from outside the contract and does not modify the contract's state.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFeeCalculator.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction calculateFeeByIds(\n    bytes21[] _feedIds\n) external view returns (\n    uint256 _fee\n);\n```\n\n----------------------------------------\n\nTITLE: Defining feedsHistorySize View Function in Solidity\nDESCRIPTION: Declares a view-only external function returning the total size of the feeds history as an unsigned integer. It requires no input parameters and can be called without gas consumption. The output is a single uint256 indicating the number of historical feeds stored; this function is designed for informational queries.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/solidity-reference/IFtsoFeedPublisher.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction feedsHistorySize(\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Voting Round ID by Timestamp in Solidity\nDESCRIPTION: Declares the `getVotingRoundId` function in the IRelay interface. This view function takes a timestamp as input and returns the corresponding voting round ID.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRelay.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getVotingRoundId(\n    uint256 _timestamp\n) external view returns (\n    uint256 _votingRoundId\n);\n```\n\n----------------------------------------\n\nTITLE: Preparing Data and Proofs for Verification in TypeScript\nDESCRIPTION: Implements a function to decode and prepare the retrieved data and proofs for use in the Proof of Reserves contract. It uses web3.eth.abi.decodeParameter to decode the data into appropriate Solidity structs.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nasync function prepareDataAndProofs(data: Map<string, any>) {\n  const IJsonApiVerification = await artifacts.require(\"IJsonApiVerification\");\n  const IEVMTransactionVerification = await artifacts.require(\n    \"IEVMTransactionVerification\"\n  );\n\n  const jsonProof = {\n    merkleProof: data.get(\"jsonApi\").proof,\n    data: web3.eth.abi.decodeParameter(\n      IJsonApiVerification._json.abi[0].inputs[0].components[1],\n      data.get(\"jsonApi\").response_hex\n    ),\n  };\n  var transactionProofs: any[] = [];\n  for (const [source, proof] of data.entries()) {\n    if (source !== \"jsonApi\") {\n      const decodedProof = web3.eth.abi.decodeParameter(\n        IEVMTransactionVerification._json.abi[0].inputs[0].components[1],\n        proof.response_hex\n      );\n      transactionProofs.push({\n        merkleProof: proof.proof,\n        data: decodedProof,\n      });\n    }\n  }\n\n  return [jsonProof, transactionProofs];\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Update Counts per Block in Solidity\nDESCRIPTION: Defines the `numberOfUpdates` view function in the `IFastUpdater` interface. It takes a history size (`_historySize`) and returns an array (`_noOfUpdates`) containing the count of updates submitted in each of the last `_historySize` blocks (up to `MAX_BLOCKS_HISTORY`). The array is ordered from the current block backwards.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdater.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction numberOfUpdates(\n    uint256 _historySize\n) external view returns (\n    uint256[] _noOfUpdates\n);\n```\n\n----------------------------------------\n\nTITLE: Withdrawing WNat Tokens in Solidity\nDESCRIPTION: Transfers WNat tokens from the delegation account to the owner's account.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction withdraw(\n    uint256 _amount\n) external;\n```\n\n----------------------------------------\n\nTITLE: Updating Configuration with Transaction Hashes in TypeScript\nDESCRIPTION: This TypeScript snippet shows an updated version of the `config.ts` file. In addition to the previously defined owner and contract addresses, it now includes a `transactionHashes` Map. This map stores the transaction hashes generated by the `activateTokenStateReader.ts` script for each network ('coston', 'coston2'), linking network names to the specific transaction where the `TokenStateReader` emitted the token supply event. All defined constants and maps are exported.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript title=\"scripts/proofOfReserves/config.ts\"\nconst owner = \"0xF5488132432118596fa13800B68df4C0fF25131d\";\n\nconst tokenAddresses = new Map([\n  [\"coston\", \"0xb979de129aFA8bBEC5d46314588B573aD9C72db6\"],\n  [\"coston2\", \"0xfc896CD7115dD2E901a573d11A598d9c8222f58A\"],\n]);\n\nconst readerAddresses = new Map([\n  [\"coston\", \"0x16A446c2Bf18421c5d79a21f7Cc3636dFfDB0612\"],\n  [\"coston2\", \"0xD069D5c27211229afdCc173F2a46cc4aFb320911\"],\n]);\n\nconst proofOfReservesAddress = \"0xCe109FE40e1860b7B659DA6C680E931b25d4E445\";\n\nconst transactionHashes = new Map([\n  [\n    \"coston\",\n    \"0x192ff7eb839157d037f023d006aec47afaad6dc8ed98618a5e8803992518caeb\",\n  ],\n  [\n    \"coston2\",\n    \"0x7149c77b4ecb68ca9faea3991cf24864dc4fbf09c6c52f0c203c748456b80658\",\n  ],\n]);\n\nexport {\n  owner,\n  tokenAddresses,\n  readerAddresses,\n  proofOfReservesAddress,\n  transactionHashes,\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Redeeming Collateral Pool Tokens\nDESCRIPTION: Command to start the redemption process for pool tokens, which will be automatically executed by the running bot later.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot redeemCollateralPoolTokens <agentVaultAddress> <amount>\n```\n\n----------------------------------------\n\nTITLE: Getting Executor Current Fee Value in Solidity\nDESCRIPTION: Retrieves the current fee value set by a specific executor.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_23\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getExecutorCurrentFeeValue(\n    address _executor\n) external view returns (\n    uint256);\n```\n\n----------------------------------------\n\nTITLE: Running Verifier Server Container\nDESCRIPTION: Command to run the Docker container for the verifier server on a specified port\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/create-attestation-type.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --publish <PORT>:8000  library/verifier-indexer-api-CustomType\n```\n\n----------------------------------------\n\nTITLE: Submitting Feed Updates in Solidity\nDESCRIPTION: Defines the `submitUpdates` external function in the `IFastUpdater` interface. This is the main entry point for data providers to submit feed updates. It accepts a `FastUpdates` struct (`_updates`) containing the update data, sortition proof, and a signature.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdater.md#2025-04-22_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction submitUpdates(\n    struct IFastUpdater.FastUpdates _updates\n) external;\n```\n\n----------------------------------------\n\nTITLE: Listing Collateral Pools with User Bot CLI\nDESCRIPTION: Lists all available collateral pools for the specified FAsset symbol (via the required `--fasset` flag), showing details like pool address, token symbol, price, collateral amount, fees, and collateral ratio.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/user-bot.mdx#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nyarn user-bot pools\n```\n\n----------------------------------------\n\nTITLE: Defining Request Structure for ConfirmedBlockHeightExists in Solidity\nDESCRIPTION: Specifies the input parameters for the ConfirmedBlockHeightExists function, including the block number to confirm and the query window for block production rate calculation.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/attestation-types/confirmed-block-height-exists.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Request {\n    uint64 blockNumber;\n    uint64 queryWindow;\n}\n```\n\n----------------------------------------\n\nTITLE: Token Transfer Functions\nDESCRIPTION: Standard ERC20-style transfer functions for moving tokens between accounts with event emission.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_24\n\nLANGUAGE: solidity\nCODE:\n```\nfunction transfer(address to, uint256 value) external returns (bool);\n\nfunction transferFrom(address from, address to, uint256 value) external returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Expected Sample Size from Solidity Interface\nDESCRIPTION: The `getExpectedSampleSize` function within this Solidity interface enables retrieval of the protocol's current expected sample size, returned as the custom type `SampleSize`. This view accessor takes no arguments and can be utilized by external services or UI components to track protocol state. Inputs are not required, and the output serves as telemetry for system monitoring or incentive calculations.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdateIncentiveManager.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getExpectedSampleSize(\n) external view returns (\n    SampleSize\n);\n```\n\n----------------------------------------\n\nTITLE: Balance Query Method\nDESCRIPTION: Returns the token balance owned by a specific account.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IRNat.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction balanceOf(\n    address account\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Token Balances with User Bot CLI\nDESCRIPTION: Shows the user's current balances for relevant tokens, including FAssets, the underlying asset, native currency (e.g., FLR), wrapped native currency (e.g., WFLR), and vault collateral tokens. Requires the FAsset symbol (via the required `--fasset` flag).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/user-bot.mdx#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nyarn user-bot balance\n```\n\n----------------------------------------\n\nTITLE: Decoding ERC20 Allowance Transaction Data in JSON\nDESCRIPTION: This JSON snippet shows the response structure for an ERC20 allowance increase transaction, including the transaction input and emitted events.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-connectivity.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"VALID\",\n  \"response\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"0\",\n    \"lowestUsedTimestamp\": \"1709147568\",\n    \"requestBody\": {\n      \"transactionHash\": \"0x445ac68dd09198cb3b8202cb9ccba323d4d1c82157a076f97fd6682dfaa826d9\",\n      \"requiredConfirmations\": \"1\",\n      \"provideInput\": true,\n      \"listEvents\": true,\n      \"logIndices\": []\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5382600\",\n      \"timestamp\": \"1709147568\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0xc14FA393fa7248c73B74A303cf35D5e980E11e2C\",\n      \"value\": \"0\",\n      \"input\": \"0x095ea7b3000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d42900000000000000000000000000000000000000000000000000000000000003e8\",\n      \"status\": \"1\",\n      \"events\": [\n        {\n          \"logIndex\": \"54\",\n          \"emitterAddress\": \"0xc14FA393fa7248c73B74A303cf35D5e980E11e2C\",\n          \"topics\": [\n            \"0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\",\n            \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373\",\n            \"0x000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d429\"\n          ],\n          \"data\": \"0x00000000000000000000000000000000000000000000000000000000000003e8\",\n          \"removed\": false\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables into Bash Shell - Bash\nDESCRIPTION: Sources environment variables from the .env file into the current Bash session. This is necessary for Foundry scripts that need access to sensitive credentials such as PRIVATE_KEY. Run this in each terminal session prior to running compile, test, or deploy commands.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/hardhat-foundry-starter-kit.mdx#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Getting Current Random Number in Solidity\nDESCRIPTION: Declares the `getRandomNumber` function in the IRelay interface. This view function returns the current random number, a boolean flag indicating if it's secure, and the timestamp associated with the random number.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRelay.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getRandomNumber(\n) external view returns (\n    uint256 _randomNumber,\n    bool _isSecureRandom,\n    uint256 _randomTimestamp\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Cleanup Block Number in IWNat Solidity Interface\nDESCRIPTION: Sets the cleanup block number before which historic data can be erased. History before this block may become inconsistent and should not be used.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_19\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setCleanupBlockNumber(\n    uint256 _blockNumber\n) external;\n```\n\n----------------------------------------\n\nTITLE: Querying Allowance in IWNat Solidity Interface\nDESCRIPTION: Returns the remaining number of tokens that a spender is allowed to spend on behalf of an owner through transferFrom. This amount is zero by default and changes when approve or transferFrom are called.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction allowance(\n    address owner,\n    address spender\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Defining ITransferEventListener Interface in Solidity\nDESCRIPTION: Creates an interface for the payment registration function, allowing external interaction with the contract.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_27\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ITransferEventListener {\n    function registerPayment(\n        IPayment.Proof calldata _transaction\n    ) external;\n}\n```\n\n----------------------------------------\n\nTITLE: Withdrawal Functions\nDESCRIPTION: Functions for withdrawing Native tokens and burning WNat tokens, including withdrawal from another account with allowance.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_27\n\nLANGUAGE: solidity\nCODE:\n```\nfunction withdraw(uint256 amount) external;\n\nfunction withdrawFrom(address owner, uint256 amount) external;\n```\n\n----------------------------------------\n\nTITLE: Inflation Rewards Event Definition in Solidity\nDESCRIPTION: Event emitted when inflation rewards are offered. Includes reward epoch ID, FDC configurations, and total reward amount.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IFdcHub.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nevent InflationRewardsOffered(\n    uint24 rewardEpochId,\n    struct IFdcInflationConfigurations.FdcConfiguration[] fdcConfigurations,\n    uint256 amount\n)\n```\n\n----------------------------------------\n\nTITLE: Validating Owner Setup for FAsset\nDESCRIPTION: Command to validate the setup of an agent owner by checking address whitelisting, registrations, and balances across management, work, and test asset addresses.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot validateOwner\n```\n\n----------------------------------------\n\nTITLE: Fetching Reward Data via Reward Aggregator API Endpoint\nDESCRIPTION: Defines the GET API endpoint used by the Reward Aggregator Service to fetch aggregated reward data for a specific reward epoch. Requires the `rewardEpochId` parameter.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/4-offchain-services.mdx#2025-04-22_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /rewards/:rewardEpochId\n```\n\n----------------------------------------\n\nTITLE: Running the Agent Bot CLI with Basic Command Structure\nDESCRIPTION: Basic command structure for running the agent-bot CLI with specific commands and arguments. The FAsset symbol must be specified using the --fasset flag.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot [command] <args> --fasset [fAssetSymbol]\n```\n\n----------------------------------------\n\nTITLE: Approving Token Spending in IWNat Solidity Interface\nDESCRIPTION: Sets an amount of tokens as the allowance of a spender over the caller's tokens. Returns a boolean indicating success. Includes a warning about potential race conditions when changing allowances.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction approve(\n    address spender,\n    uint256 value\n) external returns (\n    bool\n);\n```\n\n----------------------------------------\n\nTITLE: Verifying Address Validity in Solidity\nDESCRIPTION: This function verifies a proof for an address validity attestation. It takes an IAddressValidity.Proof structure and returns a boolean indicating whether the proof is valid.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IFdcVerification.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction verifyAddressValidity(\n    struct IAddressValidity.Proof _proof\n) external view returns (\n    bool _proved\n);\n```\n\n----------------------------------------\n\nTITLE: Cancelling Collateral Pool Token Redemption\nDESCRIPTION: Command to cancel a previously initiated collateral pool token redemption by specifying the agent vault address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot cancelCollateralPoolTokenRedemption <agentVaultAddress>\n```\n\n----------------------------------------\n\nTITLE: Setting Allowed Claim Recipients in Solidity\nDESCRIPTION: Defines addresses allowed to receive claimed rewards. The owner is always an allowed recipient by default. All previous recipients will be replaced.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setAllowedClaimRecipients(\n    address[] _recipients\n) external;\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Attestation Responses for Different Blockchain Networks\nDESCRIPTION: This JSON snippet shows the expected output format when querying attestation providers for confirmed block heights on Bitcoin, Dogecoin, and XRP Ledger networks. It includes block ranges and detailed attestation responses for each network.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/confirm-block-height.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nBTC Range:  { first: 2578997, last: 2579392 }\n{\n  status: 'VALID',\n  response: {\n    attestationType: '0x436f6e6669726d6564426c6f636b486569676874457869737473000000000000',\n    sourceId: '0x7465737442544300000000000000000000000000000000000000000000000000',\n    votingRound: '0',\n    lowestUsedTimestamp: '1708812188',\n    requestBody: { blockNumber: '2579392', queryWindow: '123' },\n    responseBody: {\n      blockTimestamp: '1708812188',\n      numberOfConfirmations: '6',\n      lowestQueryWindowBlockNumber: '2579391',\n      lowestQueryWindowBlockTimestamp: '1708812020'\n    }\n  }\n}\nDOGE Range:  { first: 5706001, last: 5974548 }\n{\n  status: 'VALID',\n  response: {\n    attestationType: '0x436f6e6669726d6564426c6f636b486569676874457869737473000000000000',\n    sourceId: '0x74657374444f4745000000000000000000000000000000000000000000000000',\n    votingRound: '0',\n    lowestUsedTimestamp: '1708819752',\n    requestBody: { blockNumber: '5974548', queryWindow: '123' },\n    responseBody: {\n      blockTimestamp: '1708819752',\n      numberOfConfirmations: '60',\n      lowestQueryWindowBlockNumber: '5974543',\n      lowestQueryWindowBlockTimestamp: '1708819511'\n    }\n  }\n}\nXRPL Range:  { first: 45585486, last: 45678173 }\n{\n  status: 'VALID',\n  response: {\n    attestationType: '0x436f6e6669726d6564426c6f636b486569676874457869737473000000000000',\n    sourceId: '0x7465737458525000000000000000000000000000000000000000000000000000',\n    votingRound: '0',\n    lowestUsedTimestamp: '1708822152',\n    requestBody: { blockNumber: '45678173', queryWindow: '123' },\n    responseBody: {\n      blockTimestamp: '1708822152',\n      numberOfConfirmations: '1',\n      lowestQueryWindowBlockNumber: '45678132',\n      lowestQueryWindowBlockTimestamp: '1708822022'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RewardsUnassigned Event in Solidity\nDESCRIPTION: Event emitted when rewards are unassigned from a project.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IRNat.md#2025-04-22_snippet_20\n\nLANGUAGE: solidity\nCODE:\n```\nevent RewardsUnassigned(\n    uint256 projectId,\n    uint256 month,\n    uint128 amount\n)\n```\n\n----------------------------------------\n\nTITLE: Defining BeneficiaryChilled Event in Solidity\nDESCRIPTION: Defines the `BeneficiaryChilled` event interface. This event is emitted when a beneficiary (identified by their c-chain address or node ID) is chilled, indicating the `beneficiary` and the `untilRewardEpochId` until which the chilling period lasts.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IVoterRegistry.md#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nevent BeneficiaryChilled(\n    bytes20 beneficiary,\n    uint256 untilRewardEpochId\n)\n```\n\n----------------------------------------\n\nTITLE: Agent-Specific Redemption Queue Query in Solidity\nDESCRIPTION: Function to fetch the redemption queue for a specific agent with pagination support. Returns an array of RedemptionTicketInfo structs and the next ticket ID for cursor-based pagination.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/IAssetManager.mdx#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction agentRedemptionQueue(\n    address _agentVault,\n    uint256 _firstRedemptionTicketId,\n    uint256 _pageSize\n) external view\n    returns (RedemptionTicketInfo.Data[] memory _queue, uint256 _nextRedemptionTicketId);\n```\n\n----------------------------------------\n\nTITLE: Obtaining Flare Chain ID via alloy-rs - Rust\nDESCRIPTION: These Rust code snippets illustrate how to connect to Flare's testnet (Coston2) and mainnet to retrieve the network chain ID using alloy-rs, an async Rust library for Ethereum-compatible networks. The code depends on alloy-rs, tokio, and related libraries. Inputs include the desired RPC URI; outputs are printed chain ID details, aiding developers in network selection for subsequent contract operations.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-rust-developers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n{ChainIdCoston2}\n```\n\nLANGUAGE: rust\nCODE:\n```\n{ChainIdFlare}\n```\n\n----------------------------------------\n\nTITLE: Installing Go Dependencies\nDESCRIPTION: Downloads and updates all Go module dependencies for the project.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/examples/developer-hub-go/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u\n```\n\n----------------------------------------\n\nTITLE: Defining FastUpdateFeedReset Event in Solidity\nDESCRIPTION: Defines the `FastUpdateFeedReset` event within the `IFastUpdater` interface. This event signals that a feed has been added or its value reset, providing details such as the voting round ID, feed index, feed ID, initial value, and decimal places.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdater.md#2025-04-22_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nevent FastUpdateFeedReset(\n    uint256 votingRoundId,\n    uint256 index,\n    bytes21 id,\n    uint256 value,\n    int8 decimals\n)\n```\n\n----------------------------------------\n\nTITLE: Emitting Reward Claims Expired Event - Solidity Interface\nDESCRIPTION: Specifies the event 'RewardClaimsExpired', broadcast when a specific epoch's claims expire. Triggers on reward epoch closure, supplying the expired epoch id. Enables dApps and indexers to react to claim period endings.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRewardManager.md#2025-04-22_snippet_19\n\nLANGUAGE: solidity\nCODE:\n```\nevent RewardClaimsExpired(\n    uint256 rewardEpochId\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Claimable Reward Epoch Range in Solidity\nDESCRIPTION: View function that returns the range of reward epochs (start and end) for which rewards are claimable.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/RewardsV2Interface.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getRewardEpochIdsWithClaimableRewards(\n) external view returns (\n    uint24 _startEpochId,\n    uint24 _endEpochId\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Protocol Fee in Wei in Solidity\nDESCRIPTION: Declares the `protocolFeeInWei` function in the IRelay interface. This view function takes a `_protocolId` and returns the fee in wei required for one verification operation related to that protocol.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRelay.md#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction protocolFeeInWei(\n    uint256 _protocolId\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Latest BlockNumber via RPC - Songbird Canary-Network - web3.py Python\nDESCRIPTION: This Python code sample, using web3.py, connects to the Songbird RPC endpoint and retrieves the latest block number via \\\"eth_blockNumber\\\". web3.py is needed, with endpoint as parameter; result is an integer block number. Fits Python-based querying tools.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/0-overview.mdx#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n{BlockNumSongbirdPy}\n```\n\n----------------------------------------\n\nTITLE: Instantiating the Helpers Contract in TypeScript\nDESCRIPTION: This TypeScript function `getHelpers` asynchronously deploys or retrieves an instance of the `Helpers` Solidity contract. It returns a `HelpersInstance` which can be used to call the helper functions defined in the Solidity contract.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/address-validity.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getHelpers() {\n  const helpers: HelpersInstance = await Helpers.new();\n  return helpers;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Vote Power Contract in IWNat Solidity Interface\nDESCRIPTION: Returns the vote power contract interface used for read-only operations. This contract handles delegation events and revocation functionality.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nfunction readVotePowerContract(\n) external view returns (\n    contract IVPContractEvents\n);\n```\n\n----------------------------------------\n\nTITLE: SigningPolicyInitialized Event Definition in Solidity\nDESCRIPTION: Defines the `SigningPolicyInitialized` event in the IRelay interface. This event signals the initialization of a new signing policy, logging details such as the reward epoch ID, start voting round ID, threshold, seed, voters, weights, the policy bytes, and the timestamp.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRelay.md#2025-04-22_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nevent SigningPolicyInitialized(\n    uint24 rewardEpochId,\n    uint32 startVotingRoundId,\n    uint16 threshold,\n    uint256 seed,\n    address[] voters,\n    uint16[] weights,\n    bytes signingPolicyBytes,\n    uint64 timestamp\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring Signing Policy Non-Punishable Time (Seconds) - Solidity\nDESCRIPTION: Specifies an interface function for reading the non-punishable signing time (in seconds). This Solidity view function takes no arguments and returns a uint64. It enables external contracts to acquire real-time configuration for policy enforcement over temporal windows.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IFlareSystemsCalculator.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction signingPolicySignNonPunishableDurationSeconds(\n) external view returns (\n    uint64\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Signing Policy Hash in Solidity\nDESCRIPTION: Declares the `toSigningPolicyHash` function in the IRelay interface. This view function returns the hash of the signing policy for a given `_rewardEpochId`. Similar to `merkleRoots`, this function reverts if a `signingPolicySetter` is configured.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRelay.md#2025-04-22_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction toSigningPolicyHash(\n    uint256 _rewardEpochId\n) external view returns (\n    bytes32 _signingPolicyHash\n);\n```\n\n----------------------------------------\n\nTITLE: Exiting a Collateral Pool with User Bot CLI\nDESCRIPTION: Allows a participant to withdraw their share of collateral from a pool by burning their Collateral Pool Tokens (CPTs). Requires the pool ID (`<poolId>`) and the amount of CPTs to burn (`<amount|all>`) as arguments, along with the FAsset symbol (via the required `--fasset` flag). Use 'all' to withdraw the entire share.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/user-bot.mdx#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nyarn user-bot exitPool <poolId> <amount|all>\n```\n\n----------------------------------------\n\nTITLE: Getting Registered Executors in Solidity\nDESCRIPTION: Retrieves a paginated list of registered executors between specified indices. Returns both the executor addresses and the total count.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_21\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getRegisteredExecutors(\n    uint256 _start,\n    uint256 _end\n) external view returns (\n    address[] _registeredExecutors,\n    uint256 _totalLength);\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for Coston2\nDESCRIPTION: Environment variables configuration for Flare Testnet Coston2. Includes path to entities.json file, RPC endpoint, and chain configuration.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/_automated_registration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nENTITIES_FILE_PATH=\"<path to entities.json>\"\nCOSTON2_RPC=<non-public Coston2 RPC>\nCHAIN_CONFIG=\"coston2\"\n```\n\n----------------------------------------\n\nTITLE: Depositing Native Tokens to Recipient in IWNat Solidity Interface\nDESCRIPTION: Accepts native tokens from the sender and mints equivalent WNat ERC20 tokens to a specified recipient address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction depositTo(\n    address recipient\n) external payable;\n```\n\n----------------------------------------\n\nTITLE: Checking Voter Chilling Status in Solidity\nDESCRIPTION: Defines the `chilledUntilRewardEpochId` function interface. This view function returns the reward epoch ID until which a specified beneficiary (c-chain address or node ID) is 'chilled', meaning their vote power is zero due to potential bad behavior like FTSO collusion. It requires the beneficiary identifier as input.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IVoterRegistry.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction chilledUntilRewardEpochId(\n    bytes20 _beneficiary\n) external view returns (\n    uint256 _rewardEpochId\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Active FAsset Agents\nDESCRIPTION: Command to list all active FAsset agents from the persistent state.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot listAgents\n```\n\n----------------------------------------\n\nTITLE: Handling Reward Aggregator API Responses in JSON\nDESCRIPTION: Specifies the JSON format for responses from the Reward Aggregator Service API endpoint. Includes a status field ('OK') and the reward data payload ('data') represented as a hexadecimal string.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/4-offchain-services.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"OK\",\n  \"data\": \"0xabc123...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Total Supply in IWNat Solidity Interface\nDESCRIPTION: Returns the total value of tokens in existence. Compatible with the ERC20 standard.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_21\n\nLANGUAGE: solidity\nCODE:\n```\nfunction totalSupply(\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Active Status in Solidity\nDESCRIPTION: View function that returns whether the contract is active and claims are enabled.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/RewardsV2Interface.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction active() external view returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Checking Public Key Requirement for Registration in Solidity\nDESCRIPTION: Defines the `publicKeyRequired` function interface. This view function returns a boolean value indicating whether voters are required to provide their public key when registering.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IVoterRegistry.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction publicKeyRequired(\n) external view returns (\n    bool\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Delegation Fee Percentage in Solidity\nDESCRIPTION: This Solidity function definition describes `defaultFeePercentageBIPS`, an external view function in the `IWNatDelegationFee` interface. It returns the default fee percentage value (in BIPS) used for WFLR delegations when a specific voter fee is not set. It takes no parameters and returns a `uint16`.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IWNatDelegationFee.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction defaultFeePercentageBIPS(\n) external view returns (\n    uint16\n);\n```\n\n----------------------------------------\n\nTITLE: Executor Fee Refund Event in Solidity\nDESCRIPTION: Event emitted when excess amounts are refunded to executor owners. Takes two parameters: the address of the owner receiving the refund and the excess amount being refunded in Wei.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_36\n\nLANGUAGE: solidity\nCODE:\n```\nevent SetExecutorsExcessAmountRefunded(\n    address owner,\n    uint256 excessAmount\n)\n```\n\n----------------------------------------\n\nTITLE: Unregistering Public Key - Solidity\nDESCRIPTION: Deletes the current public key linked to the voter. No parameters are required, indicating it unassigns whatever key is registered for the caller. Essential for key rotation and entity privacy.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_25\n\nLANGUAGE: solidity\nCODE:\n```\nfunction unregisterPublicKey(\n) external;\n```\n\n----------------------------------------\n\nTITLE: Getting Current Reward Epoch ID in Solidity\nDESCRIPTION: Function to retrieve the ID of the current reward epoch.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/ProtocolsV2Interface.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getCurrentRewardEpochId(\n) external view returns (\n    uint24\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Executor Fee Value at Specific Epoch in Solidity\nDESCRIPTION: Retrieves the fee value of an executor for a specific reward epoch.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_24\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getExecutorFeeValue(\n    address _executor,\n    uint256 _rewardEpoch\n) external view returns (\n    uint256);\n```\n\n----------------------------------------\n\nTITLE: Implementing Payment Attestation Script Structure in TypeScript\nDESCRIPTION: The main script structure for working with the Payment attestation type. It imports necessary dependencies and defines the main function that orchestrates the attestation process from request preparation to contract interaction.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { run, web3 } from \"hardhat\";\nimport { PaymentRegistryInstance } from \"../../typechain-types\";\nimport {\n  prepareAttestationRequestBase,\n  submitAttestationRequest,\n  retrieveDataAndProofBase,\n} from \"./Base\";\n\nconst Payment = artifacts.require(\"PaymentRegistry\");\n\nconst { VERIFIER_URL_TESTNET, VERIFIER_API_KEY_TESTNET, COSTON2_DA_LAYER_URL } =\n  process.env;\n\n...\n\nasync function main() {\n  const data = await prepareAttestationRequest(transactionId, inUtxo, utxo);\n  console.log(\"Data:\", data, \"\\n\");\n\n  const abiEncodedRequest = data.abiEncodedRequest;\n  const roundId = await submitAttestationRequest(abiEncodedRequest);\n\n  const proof = await retrieveDataAndProof(abiEncodedRequest, roundId);\n\n  const paymentRegistry: PaymentRegistryInstance =\n    await deployAndVerifyContract();\n\n  await interactWithContract(paymentRegistry, proof);\n}\n\nmain().then((data) => {\n  process.exit(0);\n});\n```\n\n----------------------------------------\n\nTITLE: FtsoV2FeedConsumer Contract Sample - Solidity\nDESCRIPTION: This Solidity contract, 'FtsoV2FeedConsumer', is provided inlined with all dependencies for convenience. The contract enables users to interact with FTSOv2 feeds on the Flare network. No external imports are used, as all interfaces are inlined, simplifying compilation and deployment. Inputs are chain data and configured oracle addresses; output is return data from feed queries. Key limitation: tailored to Flare's FTSOv2 protocol; modification may be needed for different network or contract versions.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-rust-developers.mdx#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n{FtsoV2FeedConsumerNoImports}\n```\n\n----------------------------------------\n\nTITLE: Submit Signatures Address Registration Confirmation Event Definition in Solidity\nDESCRIPTION: Event emitted when a submit signatures address registration is confirmed. Takes voter address and confirmed submit signatures address as parameters.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_38\n\nLANGUAGE: solidity\nCODE:\n```\nevent SubmitSignaturesAddressRegistrationConfirmed(\n    address voter,\n    address submitSignaturesAddress\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying System Information with User Bot CLI\nDESCRIPTION: Retrieves and displays general information about the FAssets system for the specified FAsset symbol (via the required `--fasset` flag).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/user-bot.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn user-bot info\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for Songbird\nDESCRIPTION: Environment variables configuration for Songbird Canary-Network. Includes path to entities.json file, RPC endpoint, and chain configuration.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/_automated_registration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nENTITIES_FILE_PATH=\"<path to entities.json>\"\nSONGBIRD_RPC=<non-public Songbird RPC>\nCHAIN_CONFIG=\"songbird\"\n```\n\n----------------------------------------\n\nTITLE: Attestation Proof Output for EVM Transaction - JSON\nDESCRIPTION: These JSON responses are sample outputs from the transaction attestation process, containing cryptographically validated details of specific transactions on Sepolia. Each JSON shows the transaction hash, the request and response body, including block number, addresses involved, value transferred, input data, status, and any emitted events. These JSON proofs are meant to be submitted to a smart contract (like EthereumPaymentCollector) on Flare for further payment collection and accounting. Dependencies: submission to an EVM-compatible chain with an attestation framework.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/connect-evm-chains.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"VALID\",\n  \"response\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"0\",\n    \"lowestUsedTimestamp\": \"1708907688\",\n    \"requestBody\": {\n      \"transactionHash\": \"0xac640ab047aa1097ddd473e5940921eb500a9912b33072b8532617692428830e\",\n      \"requiredConfirmations\": \"1\",\n      \"provideInput\": true,\n      \"listEvents\": true,\n      \"logIndices\": []\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5363670\",\n      \"timestamp\": \"1708907688\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0xFf02F742106B8a25C26e65C1f0d66BEC3C90d429\",\n      \"value\": \"10\",\n      \"input\": \"0x0123456789\",\n      \"status\": \"1\",\n      \"events\": []\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"VALID\",\n  \"response\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"0\",\n    \"lowestUsedTimestamp\": \"1708907712\",\n    \"requestBody\": {\n      \"transactionHash\": \"0x7eb54cde238fc700be31c98af7e4df8c4fc96fd5c634c490183ca612a481efcc\",\n      \"requiredConfirmations\": \"1\",\n      \"provideInput\": true,\n      \"listEvents\": true,\n      \"logIndices\": []\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5363672\",\n      \"timestamp\": \"1708907712\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8a6ab01Eb142C8655F373\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0xeBBf567beDe2D8842dF538Cf64E0bE9976183853\",\n      \"value\": \"10\",\n      \"input\": \"0x9876543210\",\n      \"status\": \"1\",\n      \"events\": [\n        {\n          \"logIndex\": \"160\",\n          \"emitterAddress\": \"0xeBBf567beDe2D8842dF538Cf64E0bE9976183853\",\n          \"topics\": [\n            \"0xaca09dd456ca888dccf8cc966e382e6e3042bb7e4d2d7815015f844edeafce42\"\n          ],\n          \"data\": \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000059876543210000000000000000000000000000000000000000000000000000000\",\n          \"removed\": false\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Reward Offers in Solidity\nDESCRIPTION: Defines the `offerRewards` function signature within the `IFtsoRewardOffersManager` interface. This external payable function allows users to submit one or more reward offers (`_offers`) for the specified upcoming reward epoch (`_nextRewardEpochId`). The `payable` keyword indicates it can receive Ether along with the transaction. It depends on the `Offer` struct.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/solidity-reference/IFtsoRewardOffersManager.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction offerRewards(\n    uint24 _nextRewardEpochId,\n    struct IFtsoRewardOffersManager.Offer[] _offers\n) external payable;\n```\n\n----------------------------------------\n\nTITLE: Basic Submission via submit1 Method in Solidity\nDESCRIPTION: Specifies the submit1 external function, returning a boolean indicating success. Designed for use by multiple protocols, such as acting as a commit method for the FTSO protocol. Inputs: none. Outputs: Boolean signaling submission success. No explicit dependencies by interface.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/ISubmission.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction submit1(\n) external returns (\n    bool\n);\n```\n\n----------------------------------------\n\nTITLE: Delegating Pool Collateral to FTSO\nDESCRIPTION: Command to delegate native pool collateral to the Flare Time Series Oracle, specifying the recipient and share percentage (0-1).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot delegatePoolCollateral <agentVaultAddress> <recipient> <share>\n```\n\n----------------------------------------\n\nTITLE: Token Approval Method\nDESCRIPTION: Sets the allowance amount for a spender to access the caller's tokens. Includes important warning about potential race conditions.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IRNat.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction approve(\n    address spender,\n    uint256 value\n) external returns (\n    bool\n);\n```\n\n----------------------------------------\n\nTITLE: Defining JQ Filter for Weather Data Processing in TypeScript\nDESCRIPTION: This snippet defines a JQ filter used to process the JSON response from the OpenWeather API. It extracts and formats specific weather data fields for use in the smart contract.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/weather-insurance.mdx#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst postprocessJq = `{\n   latitude: (.coord.lat | if . != null then .*pow(10;6) else null end),\n   longitude: (.coord.lon | if . != null then .*pow(10;6) else null end),\n   description: .weather[0].description,\n   temperature: (.main.temp | if . != null then .*pow(10;6) else null end),\n   minTemp: (.main.temp_min | if . != null then .*pow(10;6) else null end),\n   windSpeed: (.wind.speed | if . != null then . *pow(10;6) end),\n   windDeg: .wind.deg\n   }`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Transfer Event in Solidity\nDESCRIPTION: Event emitted when tokens are transferred between accounts.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IRNat.md#2025-04-22_snippet_21\n\nLANGUAGE: solidity\nCODE:\n```\nevent Transfer(\n    address from,\n    address to,\n    uint256 value\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Number - Flare Network - Go\nDESCRIPTION: Offers a Go example of connecting to Flare Mainnet and retrieving the latest block number using the go-ethereum client package ('github.com/ethereum/go-ethereum/rpc'). Requires Go modules, a specified Flare RPC endpoint, and outputs the block number as a uint64.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/0-overview.mdx#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"github.com/ethereum/go-ethereum/ethclient\"\n)\n\nfunc main() {\n    rpcURL := \"<FLARE_MAINNET_RPC_URL>\"\n    client, err := ethclient.Dial(rpcURL)\n    if err != nil {\n        log.Fatal(err)\n    }\n    blockNumber, err := client.BlockNumber(context.Background())\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Printf(\"Flare block number: %d\\n\", blockNumber)\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Address Validity Proof On-Chain in Solidity\nDESCRIPTION: Demonstrates verifying the address validity proof using the FDC system. It retrieves the `FdcVerification` contract instance via `ContractRegistry`, starts a transaction broadcast using a private key from environment variables, calls `verifyAddressValidity` with the formatted `proof` struct, logs the boolean result, and stops the broadcast. Requires `vm` (Foundry), `ContractRegistry`, the formatted `proof` struct, and `PRIVATE_KEY` environment variable.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/address-validity.mdx#2025-04-22_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\nvm.startBroadcast(deployerPrivateKey);\n\nbool isValid = ContractRegistry\n .getFdcVerification()\n .verifyAddressValidity(proof); // Note: uses 'proof' variable, likely meant '_proof' from prior snippet\nconsole.log(\"proof is valid: %s\\n\", StringsBase.toString(isValid));\n\nvm.stopBroadcast();\n```\n\n----------------------------------------\n\nTITLE: Implementing TokenStateReader Contract in Solidity\nDESCRIPTION: This contract reads the total token supply of a given ERC20 token and emits an event with the token's address and total supply. It has a single method that takes an ERC20 token instance and calls its totalSupply function.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.25;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TokenStateReader {\n    event TotalTokenSupply(address tokenAddress, uint256 totalSupply);\n\n    function broadcastTokenSupply(ERC20 token) external returns (uint256) {\n        emit TotalTokenSupply(address(token), token.totalSupply());\n        return token.totalSupply();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Declaration for Fee Setting in Solidity\nDESCRIPTION: This event is emitted when a fee configuration for a specific attestation type and source is set. It includes parameters for the attestation type, source identifier, and the fee amount set.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IFdcRequestFeeConfigurations.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nevent TypeAndSourceFeeSet(\n    bytes32 attestationType,\n    bytes32 source,\n    uint256 fee\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Directory Permissions for Key Export\nDESCRIPTION: Command to set the appropriate ownership permissions on the export directory to user ID 1000, which is required for Docker container access.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/6-export-private-keys.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown 1000:1000 export -R\n```\n\n----------------------------------------\n\nTITLE: Querying Protocol Data via Protocol Manager API Endpoints\nDESCRIPTION: Lists the GET API endpoints used by the Protocol Manager Service to fetch protocol-specific data for different submission steps (`submit1`, `submit2`, `submit3`, `submitSignatures`). Requires `votingRoundId` and `submitAddress` (or `submitSignaturesAddress`) parameters.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/4-offchain-services.mdx#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /submit1/:votingRoundId/:submitAddress\nGET /submit2/:votingRoundId/:submitAddress\nGET /submitSignatures/:votingRoundId/:submitSignaturesAddress\nGET /submit3/:votingRoundId/:submitAddress\n```\n\n----------------------------------------\n\nTITLE: Defining RedemptionTicketCreated Event in Solidity\nDESCRIPTION: This event is emitted when a redemption ticket is created during the execution of a minting transaction. It includes the agent vault address, redemption ticket ID, and the ticket value in underlying blockchain assets (UBA).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/IAssetManagerEvents.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nevent RedemptionTicketCreated(\n    address indexed agentVault,\n    uint256 indexed redemptionTicketId,\n    uint256 ticketValueUBA);\n```\n\n----------------------------------------\n\nTITLE: Building Songbird Node from Specific Version\nDESCRIPTION: Clone the Flare repository at version v1.9.1 (used for Songbird network) and build the node software from source using the build script. This generates the node executable with a specific version compatibility.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --branch v1.9.1 https://github.com/flare-foundation/go-flare.git\ncd go-flare/avalanchego\nchmod +x scripts/build.sh\n./scripts/build.sh\n```\n\n----------------------------------------\n\nTITLE: Implementing FlareContractRegistry Interface\nDESCRIPTION: The FlareContractRegistry provides centralized access to all essential contract addresses in the Flare ecosystem. It is deployed at a fixed address across all networks and is governed through updates. Recommended to use with ContractLibrary from flare-periphery-contracts package.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/5-migration.mdx#2025-04-22_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Retrieving Unclaimed Reward State - Solidity Interface\nDESCRIPTION: Specifies 'getUnclaimedRewardState', which fetches the unclaimed state data for a beneficiary, specific epoch, and claim type. Depends on enum and struct types from RewardsV2Interface and IRewardManager. Outputs an UnclaimedRewardState struct reflecting initialization, amount, and weight.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRewardManager.md#2025-04-22_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getUnclaimedRewardState(\n    address _beneficiary,\n    uint24 _rewardEpochId,\n    enum RewardsV2Interface.ClaimType _claimType\n) external view returns (\n    struct IRewardManager.UnclaimedRewardState _state\n);\n```\n\n----------------------------------------\n\nTITLE: Inflation Monitor Contract Implementation in Solidity\nDESCRIPTION: Example implementation of a contract that monitors inflation shares for specific attestation types and sources using the IFdcInflationConfigurations interface.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IFdcInflationConfigurations.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/IFdcHub.sol\";\nimport \"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/IFdcInflationConfigurations.sol\";\n\ncontract InflationMonitor {\n    IFdcHub private fdcHub;\n\n    constructor(address _fdcHubAddress) {\n        fdcHub = IFdcHub(_fdcHubAddress);\n    }\n\n    // Get inflation share for a specific attestation type and source\n    function getInflationShare(bytes32 attestationType, bytes32 source) external view returns (uint24) {\n        IFdcInflationConfigurations inflationConfigs = fdcHub.fdcInflationConfigurations();\n        IFdcInflationConfigurations.FdcConfiguration[] memory configs = inflationConfigs.getFdcConfigurations();\n\n        for (uint i = 0; i < configs.length; i++) {\n            if (configs[i].attestationType == attestationType && configs[i].source == source) {\n                return configs[i].inflationShare;\n            }\n        }\n\n        return 0; // Not found or no inflation share allocated\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Next Expiring Month in Solidity\nDESCRIPTION: View function that returns the month that will expire next in the FlareDrop distribution. Returns 36 when the last month has expired.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IDistributionToDelegators.md#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getMonthToExpireNext(\n) external view returns (\n    uint256 _monthToExpireNext);\n```\n\n----------------------------------------\n\nTITLE: Fetching Anchor Feed Data from Flare DA Layer in Python\nDESCRIPTION: Demonstrates how to access the Flare DA Layer API using Python to fetch anchor feed values and proofs. This script typically leverages the requests library. Feed IDs are specified in the request body; the script returns a parsed JSON response with feed values, decimals, and Merkle proof arrays. Requires Python 3.x and internet access.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/2-getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{FetchAnchorFeedsPy}\n```\n\n----------------------------------------\n\nTITLE: ClaimExecutorsChanged Event in Solidity\nDESCRIPTION: Event emitted when the list of claim executors for an owner is changed.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_28\n\nLANGUAGE: solidity\nCODE:\n```\nevent ClaimExecutorsChanged(\n    address owner,\n    address[] executors\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Flare Developer Hub Repository\nDESCRIPTION: Commands to clone the repository and install dependencies for local development.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/flare-foundation/developer-hub.git\ncd developer-hub\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Reading Request Data and Round ID from Files in Solidity (Foundry)\nDESCRIPTION: This code demonstrates reading data, specifically the previously saved ABI-encoded request bytes and the voting round ID, from text files using Foundry's `vm.readLine` cheatcode. File paths are constructed dynamically using `dirPath`, `attestationTypeName`, and specific filenames (`_abiEncodedRequest.txt`, `_votingRoundId.txt`).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory requestBytes = vm.readLine(\n    string.concat(\n        dirPath,\n        attestationTypeName,\n        \"_abiEncodedRequest\",\n        \".txt\"\n    )\n);\nstring memory votingRoundId = vm.readLine(\n    string.concat(\n        dirPath,\n        attestationTypeName,\n        \"_votingRoundId\",\n        \".txt\"\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Directories for RPC Node in Bash\nDESCRIPTION: Commands to create local directories for configuration and logs, and set appropriate ownership.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir -p /opt/flare/conf\nsudo mkdir /opt/flare/logs\nsudo chown -R <user>:<user> /opt/flare\n```\n\n----------------------------------------\n\nTITLE: Submission of Signatures via submitSignatures Method in Solidity\nDESCRIPTION: Defines submitSignatures as an external Solidity function for signature submissions, returning a boolean success indicator. Used across different protocols, such as for submitting FTSO-related signatures. Inputs: none. Outputs: Boolean indicating if submission was accepted. Implementation is protocol dependent.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/ISubmission.md#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction submitSignatures(\n) external returns (\n    bool\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components and Assets - React/JavaScript\nDESCRIPTION: This snippet imports various React components and static resources required to render a documentation page for smart contract deployment. Dependencies include React, theme-specific CodeBlock, images with instructional relevance, and a raw Solidity smart contract file. The imports set up context for subsequent guides and illustrations but don't execute logic themselves. Inputs/outputs involve only referenced modules and assets, and the only constraints are that referenced files must exist and paths be correct.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/1-getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Remix from \"@site/src/components/remix\";\nimport YoutubeEmbed from \"@site/src/components/youtube\";\nimport CodeBlock from \"@theme/CodeBlock\";\nimport HelloWorld from \"!!raw-loader!/examples/developer-hub-solidity/HelloWorld.sol\";\nimport OpenMetamask from \"/static/img/deploy-first-contract/0-open-metamask.png\";\nimport AddCoston2 from \"/static/img/deploy-first-contract/1-add-coston2.png\";\nimport ApproveCoston2 from \"/static/img/deploy-first-contract/2-approve-coston2.png\";\nimport SwitchNetwork from \"/static/img/deploy-first-contract/3-switch-networks.png\";\nimport CopyAddress from \"/static/img/deploy-first-contract/4-copy-address.png\";\nimport PasteAddress from \"/static/img/deploy-first-contract/5-paste-address.png\";\nimport AfterFaucetConfirmation from \"/static/img/deploy-first-contract/6-after-faucet-confirmation.png\";\nimport OpenSolidityCompiler from \"/static/img/deploy-first-contract/7-open-solidity-compiler.png\";\nimport SetEvmVersion from \"/static/img/deploy-first-contract/8-set-evm-version.png\";\nimport CompileContract from \"/static/img/deploy-first-contract/9-compile-contract.png\";\nimport DeployAndRunTxs from \"/static/img/deploy-first-contract/10-deploy-and-run-transactions.png\";\nimport SetInjectedProvider from \"/static/img/deploy-first-contract/11-set-injected-provider.png\";\nimport ConnectToMetamask from \"/static/img/deploy-first-contract/12-connect-to-metamask.png\";\nimport ConfirmPermissions from \"/static/img/deploy-first-contract/13-confirm-permissions.png\";\nimport MessageWhenDeploying from \"/static/img/deploy-first-contract/14-message-when-deploying.png\";\nimport ConfirmDeployInMetamask from \"/static/img/deploy-first-contract/15-confirm-deploy-in-metamask.png\";\nimport ClickOnMessage from \"/static/img/deploy-first-contract/16-click-on-message.png\";\nimport UpdateMessage from \"/static/img/deploy-first-contract/17-update-message.png\";\nimport ConfirmMetamaskUpdateMessage from \"/static/img/deploy-first-contract/18-confirm-metamask-update-message.png\";\nimport QueryUpdatedMessage from \"/static/img/deploy-first-contract/19-query-updated-message.png\";\n```\n\n----------------------------------------\n\nTITLE: Checking Account Balances for Owner\nDESCRIPTION: Command to display token balances for the owner's accounts with options to filter for work or management accounts.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot balances [options]\n```\n\n----------------------------------------\n\nTITLE: Example of Complete DA Layer Response for Payment Attestation\nDESCRIPTION: Shows an example of the raw response returned by the DA Layer for a payment attestation request, including the hex-encoded data and Merkle proofs.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n{\n  response_hex: '0x\n  5061796d656e7400000000000000000000000000000000000000000000000000\n  7465737458525000000000000000000000000000000000000000000000000000\n  00000000000000000000000000000000000000000000000000000000000e6c2d\n  00000000000000000000000000000000000000000000000000000000a019d806\n  2a3e7c7f6077b4d12207a9f063515eace70fbbf3c55514cd8bd659d4ab721447\n  0000000000000000000000000000000000000000000000000000000000000000\n  0000000000000000000000000000000000000000000000000000000000000000\n  000000000000000000000000000000000000000000000000000000000048f822\n  0000000000000000000000000000000000000000000000000000000067ac9486\n  7f5b4967a9fbe9b447fed6d4e3699051516b6afe5f94db2e77ccf86470bfd74d\n  a1475e9840d916c22f494c0dc25428d2affb5ae1f496efc82bbb59d46a336779\n  cd582d251987f15ecb29b69c2e02051479e84c176e39cbbdf04a4d0ef89bcf82\n  cd582d251987f15ecb29b69c2e02051479e84c176e39cbbdf04a4d0ef89bcf82\n  0000000000000000000000000000000000000000000000000000000005f5e10c\n  0000000000000000000000000000000000000000000000000000000005f5e10c\n  0000000000000000000000000000000000000000000000000000000005f5e100\n  0000000000000000000000000000000000000000000000000000000005f5e100\n  0000000000000000000000000000000000000000000000000000000000000000\n  0000000000000000000000000000000000000000000000000000000000000001\n  0000000000000000000000000000000000000000000000000000000000000000',\n  attestation_type: '0x5061796d656e7400000000000000000000000000000000000000000000000000',\n  proof: [\n    '0xe1f98d39167eab17b2157c06efb80530b161d5eb15c439fc476e3242e30b3ac1',\n    '0x23a8ffdb2cbaf0e2f3653923a159150f8d4c3ad5160f9e127cc9797ba233e6c2',\n    '0xd756b90367b336e127f0759a1457825b4c2bf9011b71b56e15d9fcb7ff735ec8',\n    '0xc881d1566868a986aef2bda47e9ab6dafeb8241bde5f5d53235837595829a5ea'\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UnassignedRewardsWithdrawn Event in Solidity\nDESCRIPTION: Event emitted when unassigned rewards are withdrawn.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IRNat.md#2025-04-22_snippet_22\n\nLANGUAGE: solidity\nCODE:\n```\nevent UnassignedRewardsWithdrawn(\n    address recipient,\n    uint128 amount\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Go Bindings for FtsoV2FeedConsumer Contract - Bash\nDESCRIPTION: These bash commands generate Go bindings for the compiled FtsoV2FeedConsumer contract for both network environments. abigen utilizes the generated ABI and binary to create Go code for contract deployment and interaction. Dependencies are abigen, build artifacts, and correct package paths for output. Inputs are the binary and ABI files, and package/type names; outputs are Go contract binding files. Output function DeployFtsoV2FeedConsumer will be present in generated source.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-go-developers.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nabigen --bin=build/FtsoV2FeedConsumer.bin --abi=build/FtsoV2FeedConsumer.abi --pkg coston2 --type FtsoV2FeedConsumer --out coston2/FtsoV2FeedConsumer.go\\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nabigen --bin=build/FtsoV2FeedConsumer.bin --abi=build/FtsoV2FeedConsumer.abi --pkg flare --type FtsoV2FeedConsumer --out flare/FtsoV2FeedConsumer.go\\n\n```\n\n----------------------------------------\n\nTITLE: Example Decoded IAddressValidity.Response Struct - Shell\nDESCRIPTION: Provides a formatted example of the ABI-decoded IAddressValidity.Response struct as returned in proof responses. Demonstrates field mapping of attestationType, sourceId, votingRound, lowestUsedTimestamp, and nested request and response body fields for developers to understand structure and field expectations.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/address-validity.mdx#2025-04-22_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n[\n  attestationType: \"0x4164647265737356616c69646974790000000000000000000000000000000000\",\n  sourceId: \"0x7465737442544300000000000000000000000000000000000000000000000000\",\n  votingRound: \"945114\",\n  lowestUsedTimestamp: \"18446744073709551615\",\n  requestBody: [\n    \"mg9P9f4wr9w7c1sgFeiTC5oMLYXCc2c7hs\",\n    addressStr: \"mg9P9f4wr9w7c1sgFeiTC5oMLYXCc2c7hs\"\n  ],\n  responseBody: [\n    true,\n    \"mg9P9f4wr9w7c1sgFeiTC5oMLYXCc2c7hs\",\n    \"0x6810e152510fe893f9cc8954c4dfaecd5c2be00e2732d6fe3e25922f30c5a3c5\",\n    isValid: true,\n    standardAddress: \"mg9P9f4wr9w7c1sgFeiTC5oMLYXCc2c7hs\",\n    standardAddressHash: \"0x6810e152510fe893f9cc8954c4dfaecd5c2be00e2732d6fe3e25922f30c5a3c5\"\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public Key and Addresses using Flare Stake Tool\nDESCRIPTION: This command retrieves the public key and addresses associated with the Flare network using the Flare Stake Tool.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/using-flare-stake-tool.mdx#2025-04-22_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\nUsing network: flare\nAddresses on the network \"flare\"\nP-chain address: P-flare●●●●●●●●\nC-chain address hex: 0x●●●●●●●●\nsecp256k1 public key: 0x●●●●●●●●●●●●●●●●\n```\n\n----------------------------------------\n\nTITLE: Flare Stake Tool ASCII Banner Output\nDESCRIPTION: Output displayed when the Flare stake tool is successfully installed and executed, showing the ASCII art banner and version information.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/using-flare-stake-tool.mdx#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n_____ _                  ____  _        _           ____ _     ___\n|  ___| | __ _ _ __ ___  / ___|| |_ __ _| | _____   / ___| |   |_ _|\n| |_  | |/ _` | '__/ _ \\ \\___ \\| __/ _` | |/ / _ \\ | |   | |    | |\n|  _| | | (_| | | |  __/  ___) | || (_| |   <  __/ | |___| |___ | |\n|_|   |_|\\__,_|_|  \\___|  |____/ \\__\\__,_|_|\\_\\___|  \\____|_____|___|\n\nVersion: 3.0.2\n```\n\n----------------------------------------\n\nTITLE: Defining Inflation Rewards Offered Event in Solidity\nDESCRIPTION: Defines the `InflationRewardsOffered` event signature within the `IFtsoRewardOffersManager` interface. This event is emitted to signal that rewards funded by inflation have been offered, capturing details like the reward epoch, feed IDs, decimals, amount, minimum turnout (BIPS), primary band reward share (PPM), secondary band widths (PPMs), and mode.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/solidity-reference/IFtsoRewardOffersManager.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nevent InflationRewardsOffered(\n    uint24 rewardEpochId,\n    bytes feedIds,\n    bytes decimals,\n    uint256 amount,\n    uint16 minRewardedTurnoutBIPS,\n    uint24 primaryBandRewardSharePPM,\n    bytes secondaryBandWidthPPMs,\n    uint16 mode\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Validator Node Registration\nDESCRIPTION: This snippet defines environment variables for the validator node's certificate, private key, and identity address, which are required for generating values needed in the node registration process.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPATH_TO_CRT=~/.avalanchego/staking/staker.crt\nZERO_PREFIX=0000000000000000000000000000000000000000000000000000000000000000\nPATH_TO_KEY=~/.avalanchego/staking/staker.key\nIDENTITY_ADDRESS=<YourIdentityAddressWithout0xPrefix>\n```\n\n----------------------------------------\n\nTITLE: Handling Offchain Data API Responses in JSON\nDESCRIPTION: Specifies the JSON format for responses from the data availability endpoint (`/data/:votingRoundID`). Includes a status field ('OK') and a data array containing objects with ABI names and corresponding data structures, intended for Merkle tree construction.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/4-offchain-services.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status\": \"OK\",\n    \"data\": [{\"abiName\": \"StructName\", \"data\": {...}}]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Month in Solidity\nDESCRIPTION: View function that returns the current month in the FlareDrop distribution timeline. Returns 0 before the entitlement start timestamp.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IDistributionToDelegators.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getCurrentMonth(\n) external view returns (\n    uint256 _currentMonth);\n```\n\n----------------------------------------\n\nTITLE: Interacting with Deployed Contract using Cast (Bash)\nDESCRIPTION: Uses the `cast send` command to call the `getFlrUsdPrice()` function on the deployed contract (`$DEPLOYMENT_ADDRESS`). The transaction is signed using the specified private key (`$ACCOUNT_PRIVATE_KEY`) and sent via the Coston2 RPC URL (`$RPC_URL`). The `-j` flag requests the output in JSON format, and `--value 0` indicates no Ether is being sent with the transaction.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/build-first-app.mdx#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncast send --private-key $ACCOUNT_PRIVATE_KEY --rpc-url $RPC_URL -j --value 0 $DEPLOYMENT_ADDRESS \"getFlrUsdPrice()\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cleanup Block Number in IWNat Solidity Interface\nDESCRIPTION: Gets the current cleanup block number that was set with setCleanupBlockNumber(). This block number determines which historical data can be safely cleaned up.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction cleanupBlockNumber(\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Counting Number of Feeds - Solidity\nDESCRIPTION: Defines getNumberOfFeeds, a view function returning the total number of feeds, including those that have been removed. Accepts no parameters, and returns a uint256 representing the count, which may include unused indices.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdatesConfiguration.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getNumberOfFeeds(\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Example ABI Encoded Request Data Structure\nDESCRIPTION: Provides an example hexadecimal representation of the `abiEncodedRequest` data returned by the verifier. This data includes the attestation type ('EVMTransaction'), source ID ('testETH'), a message integrity code (MIC), and the ABI-encoded `EVMTransaction.RequestBody` struct. It serves as an illustration of the expected data format.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n0x\n45564d5472616e73616374696f6e000000000000000000000000000000000000\n7465737445544800000000000000000000000000000000000000000000000000\n9d410778cc0b2b8f1b8eaa79cbd0eed5d3be7514dea070e2041ad00a4c6e88f8\n0000000000000000000000000000000000000000000000000000000000000020\n4e636c6590b22d8dcdade7ee3b5ae5572f42edb1878f09b3034b2f7c3362ef3c\n0000000000000000000000000000000000000000000000000000000000000001\n0000000000000000000000000000000000000000000000000000000000000001\n0000000000000000000000000000000000000000000000000000000000000001\n00000000000000000000000000000000000000000000000000000000000000a0\n0000000000000000000000000000000000000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Container Status and Logs\nDESCRIPTION: Commands to verify the Docker container is running and to inspect the logs for proper startup and operation.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\ndocker compose logs -f\n```\n\n----------------------------------------\n\nTITLE: Closing Vaults Process Code Block\nDESCRIPTION: Markdown code block showing the step-by-step process for closing FAssets vaults through the UI interface\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/2-create-fasset-agent-ui.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n    1. On the dashboard, locate the vault you want to close, and click the three dots icon in the **Actions** column.\n        The **Vault options** menu is displayed.\n    2. In the **Agent Vault Operations** section, click **Close Vault (Exit)**.\n        The **Deactivate Vault** window is displayed.\n    3. Ensure you want to close the vault, and click **Confirm** to close it.\n        A confirmation message is displayed.\n```\n\n----------------------------------------\n\nTITLE: Querying Public Key at Specific Block - Solidity\nDESCRIPTION: Collects the public key of a voter entity at a given block number, useful for time-based cryptographic validation. Requires voter's address and block number. Returns two bytes32 values representing the public key's components.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getPublicKeyOfAt(\n    address _voter,\n    uint256 _blockNumber\n) external view returns (\n    bytes32,\n    bytes32\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Bit Indices for Snowball Tree Structure\nDESCRIPTION: This snippet shows the bit indexing convention (most significant bit first, 0-indexed within each byte, continuing across 32 bytes) used in the `go-flare` implementation of the Snowball consensus protocol's `Tree` structure. This indexing is crucial for branching decisions when comparing concurrent blocks based on their first differing bit.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/4-consensus.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[7 6 5 4 3 2 1 0] [15 14 13 12 11 10 9 8] ... [255 254 253 252 251 250 249 248]\n```\n\n----------------------------------------\n\nTITLE: Creating a New Agent Vault\nDESCRIPTION: Command to create a new agent vault with the option to generate a settings template or use a provided settings file.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot create [agentSettingsPath]\n```\n\n----------------------------------------\n\nTITLE: Querying Voter by Signing Policy Address - Solidity\nDESCRIPTION: Obtains the voter's address for a given signing policy address at a particular block. Takes the signing policy address and the block number as inputs, and returns the relevant voter address. Intended for compliance and audit scenarios.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getVoterForSigningPolicyAddress(\n    address _signingPolicyAddress,\n    uint256 _blockNumber\n) external view returns (\n    address _voter\n);\n```\n\n----------------------------------------\n\nTITLE: Setting the PRIVATE_KEY Environment Variable - Text\nDESCRIPTION: Example .env file content for storing sensitive credentials such as your Ethereum private key. Place this line in your '.env' to allow scripts and CLI tools (Hardhat, Foundry) to read your private key securely. Never commit this file to version control. The key is used for signing transactions during deployment.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/hardhat-foundry-starter-kit.mdx#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nPRIVATE_KEY=your_private_key_here\n```\n\n----------------------------------------\n\nTITLE: Submit Address Registration Confirmation Event Definition in Solidity\nDESCRIPTION: Event emitted when a submit address registration is confirmed. Takes voter address and confirmed submit address as parameters.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_36\n\nLANGUAGE: solidity\nCODE:\n```\nevent SubmitAddressRegistrationConfirmed(\n    address voter,\n    address submitAddress\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Remappings for Solidity Dependencies - Plaintext\nDESCRIPTION: This remappings.txt configuration allows Foundry to resolve library imports when compiling Solidity contracts, including OpenZeppelin, Flare Periphery, forge-std, and surl. Each line maps an import prefix to a directory location in the project. Required for correct contract compilation if imports are customized. Place in the project root as remappings.txt.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/build-first-app.mdx#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n@openzeppelin-contracts/=dependencies/@openzeppelin-contracts-5.2.0-rc.1/\\nflare-periphery/=dependencies/flare-periphery-0.0.1/\\nforge-std/=dependencies/forge-std-1.9.5/src/\\nforge-std/=dependencies/forge-std-1.9.5/\\nsurl/=dependencies/surl-0.0.0/src/\\nsurl/=dependencies/surl-0.0.0/\n```\n\n----------------------------------------\n\nTITLE: Fetching Anchor Feed Data from Flare DA Layer in Rust\nDESCRIPTION: Presents a Rust example for fetching flare anchor feed data and Merkle proofs using HTTP requests. This typically depends on crates such as reqwest and serde_json. The code sends a POST request with desired feed IDs and parses the JSON result, enabling robust error handling and type safety. Designed for CLI or backend applications written in Rust.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/2-getting-started.mdx#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n{FetchAnchorFeedsRs}\n```\n\n----------------------------------------\n\nTITLE: Getting Delegation Account Address in Solidity\nDESCRIPTION: Retrieves the delegation account address for a given owner. Returns address(0) if the account hasn't been created yet.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nfunction accountToDelegationAccount(\n    address _owner\n) external view returns (\n    address);\n```\n\n----------------------------------------\n\nTITLE: Installing web3.js for Random Number Generation\nDESCRIPTION: NPM installation command for web3.js library to interact with Flare network\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/secure-random-numbers.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3\n```\n\n----------------------------------------\n\nTITLE: FDC Configuration Structure Definition in Solidity\nDESCRIPTION: Structure definition for FDC inflation settings containing fields for attestation type, source, inflation share, minimum requests threshold, and configuration mode.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IFdcInflationConfigurations.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nstruct FdcConfiguration {\n  bytes32 attestationType;\n  bytes32 source;\n  uint24 inflationShare;\n  uint8 minRequestsThreshold;\n  uint224 mode;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Next Claimable Reward Epoch for Owner - Solidity Interface\nDESCRIPTION: Defines 'getNextClaimableRewardEpochId', accepting a reward owner address and returning the subsequent claimable epoch id (uint256). Useful for tracking user claim progression across epochs.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRewardManager.md#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getNextClaimableRewardEpochId(\n    address _rewardOwner\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: React Component Implementation with DocCard\nDESCRIPTION: Implementation of documentation cards using React components with ThemedImage and DocCard for displaying various sections of the developer documentation.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/1-intro.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport ThemedImage from \"@theme/ThemedImage\";\nimport useBaseUrl from \"@docusaurus/useBaseUrl\";\nimport DocCard from \"@theme/DocCard\";\n```\n\n----------------------------------------\n\nTITLE: Implementing FeeCalculator Interface\nDESCRIPTION: The FeeCalculator contract handles fee calculations for on-chain price access. While initial fees are set to 0, the contract is designed to be flexible for future fee implementations using calculateFeeByIds and calculateFeeByIndices methods.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/5-migration.mdx#2025-04-22_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Retrieving Registered Voters List in Solidity\nDESCRIPTION: Defines the `getRegisteredVoters` function interface. This view function returns an array of addresses representing all registered voters for a specified reward epoch. The list can be empty for unsupported epochs. Similar to the count, the list for the *next* reward epoch may change until the signing policy snapshot.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IVoterRegistry.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getRegisteredVoters(\n    uint256 _rewardEpochId\n) external view returns (\n    address[]\n);\n```\n\n----------------------------------------\n\nTITLE: Determine Network Chain ID with web3.js - Flare Testnet Coston2 - JavaScript\nDESCRIPTION: This snippet connects to the Flare Testnet Coston2 RPC endpoint using web3.js to determine the chain ID. It establishes a Web3 provider and fetches network details such as the chain ID. Requires web3.js and node.js; endpoint URL should correspond to Coston2. Sample output is the numeric chain ID for Coston2.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-javascript-developers.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/* Code for ChainIdCoston2 loaded from external file - not shown here */\n```\n\n----------------------------------------\n\nTITLE: Implementing UnclaimedRewardsUnassigned Event in Solidity\nDESCRIPTION: Event emitted when unclaimed rewards are unassigned.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IRNat.md#2025-04-22_snippet_23\n\nLANGUAGE: solidity\nCODE:\n```\nevent UnclaimedRewardsUnassigned(\n    uint256 projectId,\n    uint256 month,\n    uint128 amount\n)\n```\n\n----------------------------------------\n\nTITLE: Building Flare Node from Source with Go\nDESCRIPTION: Clone the Flare repository and build the node software from source using the build script. This process compiles the go-flare codebase and generates an executable in the build directory.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/flare-foundation/go-flare.git\ncd go-flare/avalanchego\nchmod +x scripts/build.sh\n./scripts/build.sh\n```\n\n----------------------------------------\n\nTITLE: Getting Token Decimals in IWNat Solidity Interface\nDESCRIPTION: Returns the number of decimals used for displaying token values. This typically returns 18, imitating the relationship between Ether and wei, and is used only for display purposes.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction decimals(\n) external view returns (\n    uint8\n);\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Configuration for RPC Nodes\nDESCRIPTION: JSON configuration file for setting up RPC nodes with specific parameters.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"snowman-api-enabled\": false,\n  \"coreth-admin-api-enabled\": false,\n  \"eth-apis\": [\n    \"eth\",\n    \"eth-filter\",\n    \"net\",\n    \"web3\",\n    \"internal-eth\",\n    \"internal-blockchain\",\n    \"internal-transaction\"\n  ],\n  \"rpc-gas-cap\": 50000000,\n  \"rpc-tx-fee-cap\": 100,\n  \"pruning-enabled\": true,\n  \"local-txs-enabled\": false,\n  \"api-max-duration\": 0,\n  \"api-max-blocks-per-request\": 0,\n  \"allow-unfinalized-queries\": false,\n  \"allow-unprotected-txs\": false,\n  \"remote-tx-gossip-only-enabled\": false,\n  \"log-level\": \"info\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing FAssets Agent Bot Commands\nDESCRIPTION: Example command to list running agents in the FAssets system using the agent-bot Docker container.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/1-deploy-fassets-agent.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose --profile cli run agent-bot listAgents --fasset FASSET\n```\n\n----------------------------------------\n\nTITLE: Querying Node IDs of Voter at Specific Block - Solidity\nDESCRIPTION: Supplies the list of node IDs as associated with a voter entity at a particular block number in the blockchain. Requires voter's address and block number. Returns an array of bytes20 IDs; applied for historical network auditing and validation.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getNodeIdsOfAt(\n    address _voter,\n    uint256 _blockNumber\n) external view returns (\n    bytes20[]\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Start Voting Round ID in Solidity\nDESCRIPTION: Function to retrieve the start voting round ID for a specified reward epoch ID.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/ProtocolsV2Interface.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getStartVotingRoundId(\n    uint256 _rewardEpochId\n) external view returns (\n    uint32\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information for Agent Bot CLI\nDESCRIPTION: Command to list all available commands for the agent-bot CLI.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot help\n```\n\n----------------------------------------\n\nTITLE: Entity Configuration JSON Template\nDESCRIPTION: JSON template for configuring entity addresses and private keys. This file defines the identity, submit, submitSignatures, signingPolicy, delegation addresses and the sortition private key.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/_automated_registration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"identity\": {\n      \"address\": \"<address>\",\n      \"privateKey\": \"<private key hex>\"\n    },\n    \"submit\": {\n      \"address\": \"<address>\",\n      \"privateKey\": \"<private key hex>\"\n    },\n    \"submitSignatures\": {\n      \"address\": \"<address>\",\n      \"privateKey\": \"<private key hex>\"\n    },\n    \"signingPolicy\": {\n      \"address\": \"<address>\",\n      \"privateKey\": \"<private key hex>\"\n    },\n    \"delegation\": {\n      \"address\": \"<address>\",\n      \"privateKey\": \"<private key hex>\"\n    },\n    \"sortitionPrivateKey\": \"<private key hex>\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Running TokenStateReader Activation Script using Yarn and Hardhat\nDESCRIPTION: This shell command executes the `activateTokenStateReader.ts` Hardhat script using Yarn. It runs the script for both the 'coston' and 'coston2' networks, triggering the `broadcastTokenSupply` function on the respective `TokenStateReader` contracts deployed on each chain.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nyarn hardhat run scripts/proofOfReserves/activateTokenStateReader.ts --network coston \\\n&& yarn hardhat run scripts/proofOfReserves/activateTokenStateReader.ts --network coston2\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fee Collection Address in Solidity\nDESCRIPTION: Declares the `feeCollectionAddress` function within the IRelay interface. This function is intended to return the payable address designated for collecting fees. It's a view function, meaning it doesn't modify the contract state.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRelay.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction feeCollectionAddress(\n) external view returns (\n    address payable\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Reward Epoch ID in Solidity\nDESCRIPTION: Defines the `currentRewardEpochId` view function in the `IFastUpdater` interface. It returns the ID (`uint24`) of the currently active reward epoch.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdater.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction currentRewardEpochId(\n) external view returns (\n    uint24\n);\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in Markdown\nDESCRIPTION: Import statement for the DocCardList component used to display attestation type cards in the documentation.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/3-attestation-types.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from \"@theme/DocCardList\";\n```\n\n----------------------------------------\n\nTITLE: Defining RequestBody Struct for Address Validation in Solidity\nDESCRIPTION: Defines the request body specific to address validity verification. Contains a single field for the address string to be verified.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IAddressValidity.mdx#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nstruct RequestBody {\n    string addressStr;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ABI Signature Hack Function in Solidity\nDESCRIPTION: This function is added to allow reading the ABI signature of the DataTransportObject struct from the ProofOfReserves contract's artifact, which will be useful in future steps.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction abiSignatureHack(DataTransportObject calldata dto) external pure {}\n```\n\n----------------------------------------\n\nTITLE: Example DA Layer Proof Response - Shell\nDESCRIPTION: Demonstrates the typical structure of a DA Layer server response for an address validity proof request. Shows expected fields (attestation_type, response_hex, proof array), with values in hex or encoded formats. Intended as a sample output for user reference, not executable code.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/address-validity.mdx#2025-04-22_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n{\n  response_hex: \"0x\n  0000000000000000000000000000000000000000000000000000000000000020\n  4164647265737356616c69646974790000000000000000000000000000000000\n  7465737442544300000000000000000000000000000000000000000000000000\n  00000000000000000000000000000000000000000000000000000000000e6bda\n  000000000000000000000000000000000000000000000000ffffffffffffffff\n  00000000000000000000000000000000000000000000000000000000000000c0\n  0000000000000000000000000000000000000000000000000000000000000140\n  0000000000000000000000000000000000000000000000000000000000000020\n  0000000000000000000000000000000000000000000000000000000000000022\n  6d6739503966347772397737633173674665695443356f4d4c59584363326337\n  6873000000000000000000000000000000000000000000000000000000000000\n  0000000000000000000000000000000000000000000000000000000000000001\n  0000000000000000000000000000000000000000000000000000000000000060\n  6810e152510fe893f9cc8954c4dfaecd5c2be00e2732d6fe3e25922f30c5a3c5\n  0000000000000000000000000000000000000000000000000000000000000022\n  6d6739503966347772397737633173674665695443356f4d4c59584363326337\n  6873000000000000000000000000000000000000000000000000000000000000\",\n  attestation_type: \"0x4164647265737356616c69646974790000000000000000000000000000000000\",\n  proof: [\n    \"0x275dc338dd4e6a0a8749caa098c6749e0e77e22ba9db264f334b5dfb79aa6321\",\n    \"0x084e002bbe12f4a163d82ddd17861d1d3131c816fe3b998d575d134043a6c8f1\",\n    \"0xc30304c7d430e3d0f83d05017035f13ca19dec2799917745967f4c48685eab49\",\n    \"0x4d622137c9e7c9a1fa3a5d2942a183a8e926ba8659fe606495ea994acbb6ec0f\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: RewardClaim Structure Definition in Solidity\nDESCRIPTION: Structure definition used in Merkle tree for storing reward claims, containing epoch ID, beneficiary, amount, and claim type.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/RewardsV2Interface.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nstruct RewardClaim {\n  uint24 rewardEpochId;\n  bytes20 beneficiary;\n  uint120 amount;\n  enum RewardsV2Interface.ClaimType claimType;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Voter by Delegation Address - Solidity\nDESCRIPTION: Identifies the voter for a delegation address as it existed at a specified block number. Inputs are the delegation address and block number, and output is the corresponding voter address. Supports reverse-mapping use cases for entity traceability.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getVoterForDelegationAddress(\n    address _delegationAddress,\n    uint256 _blockNumber\n) external view returns (\n    address _voter\n);\n```\n\n----------------------------------------\n\nTITLE: Deploying and Verifying Contract with TypeScript\nDESCRIPTION: A TypeScript function that deploys the TransferEventListener contract to the blockchain and verifies its source code using Hardhat's verification plugin.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/evm-transaction.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nasync function deployAndVerifyContract() {\n  const args: any[] = [];\n  const eventListener: TransferEventListenerInstance = await EVMTransaction.new(\n    ...args,\n  );\n  try {\n    await run(\"verify:verify\", {\n      address: eventListener.address,\n      constructorArguments: args,\n    });\n  } catch (e: any) {\n    console.log(e);\n  }\n  console.log(\"EVMTransaction deployed to\", eventListener.address, \"\\n\");\n  return eventListener;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VoterRegistered Event in Solidity\nDESCRIPTION: Defines the `VoterRegistered` event interface. This event is emitted when a voter successfully registers for a reward epoch. It includes the `voter` address, `rewardEpochId`, associated `signingPolicyAddress`, `submitAddress`, `submitSignaturesAddress`, parts of the public key (`publicKeyPart1`, `publicKeyPart2`), and the `registrationWeight` used for the registration.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IVoterRegistry.md#2025-04-22_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nevent VoterRegistered(\n    address voter,\n    uint24 rewardEpochId,\n    address signingPolicyAddress,\n    address submitAddress,\n    address submitSignaturesAddress,\n    bytes32 publicKeyPart1,\n    bytes32 publicKeyPart2,\n    uint256 registrationWeight\n)\n```\n\n----------------------------------------\n\nTITLE: Starting FAssets Agent with Docker Compose\nDESCRIPTION: Command to launch the FAssets agent using Docker Compose in detached mode.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/1-deploy-fassets-agent.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Generating Verifier Server Template\nDESCRIPTION: Command to generate the verifier server template for a custom type\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/create-attestation-type.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn generate server -t ICustomType\n```\n\n----------------------------------------\n\nTITLE: Public Key Unregistered Event - Solidity\nDESCRIPTION: Indicates that a voter's registered public key has been unregistered. The event's fields include the voter's address and the two parts (bytes32) of the key. Supports security auditing and gradual removal notifications.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_32\n\nLANGUAGE: solidity\nCODE:\n```\nevent PublicKeyUnregistered(\n    address voter,\n    bytes32 part1,\n    bytes32 part2\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring Signing Policy Rewards Burn Block Duration - Solidity\nDESCRIPTION: Declares an interface function for retrieving the number of blocks after which all rewards are burned in the signing policy. This method takes no parameters and returns an unsigned 64-bit integer indicating the burn block duration. No dependencies beyond Solidity and contract-inheriting usage; intended to support external view calls for policy logic.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IFlareSystemsCalculator.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction signingPolicySignNoRewardsDurationBlocks(\n) external view returns (\n    uint64\n);\n```\n\n----------------------------------------\n\nTITLE: Depositing Collaterals for Minting\nDESCRIPTION: Command to deposit both vault and pool collateral required for minting by specifying the agent vault address and the number of lots.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot depositCollaterals <agentVaultAddress> <lots>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Next Claimable Month in Solidity\nDESCRIPTION: View function that returns the next month for which a reward owner can claim rewards. This helps users determine when their next claim period begins.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IDistributionToDelegators.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction nextClaimableMonth(\n    address _rewardOwner\n) external view returns (\n    uint256);\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for Coston\nDESCRIPTION: Environment variables configuration for Songbird Testnet Coston. Includes path to entities.json file, RPC endpoint, and chain configuration.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/_automated_registration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nENTITIES_FILE_PATH=\"<path to entities.json>\"\nCOSTON_RPC=<non-public Coston RPC>\nCHAIN_CONFIG=\"coston\"\n```\n\n----------------------------------------\n\nTITLE: Defining ParsableProof Structure for DA Layer Responses in Solidity\nDESCRIPTION: Definition of an auxiliary struct called ParsableProof that is used to parse the data returned from the DA Layer. It contains fields for the attestation type, proofs array, and response data.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nstruct ParsableProof {\n bytes32 attestationType;\n bytes32[] proofs;\n bytes responseHex;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Authentication Password for Bitcoin Node\nDESCRIPTION: This script generates a secure password and RPC authentication string needed for configuring a Bitcoin node in the FDC suite.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd nodes-mainnet/btc\n./generate-password.sh\n```\n\n----------------------------------------\n\nTITLE: Compiling Solidity Contract with solc - Bash/JSON\nDESCRIPTION: This sequence demonstrates preparing and compiling the Solidity contract 'FtsoV2FeedConsumer' using the solc compiler via JSON config. The sample relies on drafting a configuration JSON (config.json) and includes an example output structure required by alloy-rs macros. solc must be installed as per previous steps. Input parameters are the config file and Solidity source; output is a JSON file containing the contract's ABI and bytecode, later adjusted for alloy-rs compatibility. Limitations: the Solidity compiler output must be post-processed, removing extraneous fields to match alloy-rs requirements.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-rust-developers.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{Config}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"abi\\\": [\\n    ...\\n  ],\\n  \\\"evm\\\": {\\n    ...\\n  }\\n  \\\"metadata\\\": \\\"...\\\"\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Card Grid for Whitepapers in React\nDESCRIPTION: This snippet demonstrates how to create a grid layout of CustomCard components for displaying Flare Network whitepapers. It uses inline CSS for grid styling and passes props to each CustomCard.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/support/whitepapers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<div\n  style={{\n    display: \"grid\",\n    gap: \"1rem\",\n    gridTemplateColumns: \"repeat(3, 1fr)\",\n  }}\n>\n  <CustomCard\n    title=\"The Flare Data Connector\"\n    href=\"/pdf/whitepapers/20240224-FlareDataConnector.pdf\"\n    date=\"Jan 14, 2025\"\n  />\n  <CustomCard\n    title=\"FTSOv2: more data feeds and faster updates to the FTSO\"\n    href=\"/pdf/whitepapers/20240223-FlareTimeSeriesOracleV2.pdf\"\n    date=\"Sep 9, 2024\"\n  />\n  <CustomCard\n    title=\"The Flare network and FLR token\"\n    href=\"/pdf/whitepapers/20221231-TheFlareNetworkAndFLRToken.pdf\"\n    date=\"Dec 30, 2022\"\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing WNat Getter Function in Solidity\nDESCRIPTION: View function that returns the WNat contract instance.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IRNat.md#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction wNat(\n) external view returns (\n    contract IWNat\n);\n```\n\n----------------------------------------\n\nTITLE: Feed Addition Event - Solidity\nDESCRIPTION: Specifies the FeedAdded event, which is emitted when a new feed is added. The event carries parameters for the feedId (bytes21), rewardBandValue (uint32), inflationShare (uint24), and the feed index (uint256). Consumers can subscribe to track metadata and creation of new feeds.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdatesConfiguration.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nevent FeedAdded(\n    bytes21 feedId,\n    uint32 rewardBandValue,\n    uint24 inflationShare,\n    uint256 index\n)\n```\n\n----------------------------------------\n\nTITLE: Querying FlareContractRegistry Contract on Coston2 - JavaScript\nDESCRIPTION: This snippet queries the FlareContractRegistry contract on the Coston2 testnet using web3.js. It loads the contract ABI, connects to the provided address, and invokes a method (e.g., getting the WNat contract address). Requires ABI, valid contract address, and proper web3.js setup. Output is typically the address of a Flare ecosystem contract.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-javascript-developers.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/* Code for MakeQueryCoston2 loaded from external file - not shown here */\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment File for FAssets Agent\nDESCRIPTION: Command to create the environment file from a template for configuring the FAssets agent.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/1-deploy-fassets-agent.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.template .env\n```\n\n----------------------------------------\n\nTITLE: Attestation API Balance Decrease Response Example - JSON\nDESCRIPTION: This JSON snippet is a sample response from the attestation API, confirming a transaction has decreased a specified XRPL address's balance. Key fields include transaction IDs, block numbers, and the computed spent amount, as well as the encoded payment reference. Inputs must match a real XRPL transaction; the output structure is fixed by the attestation API. This output provides useful debugging and auditing details for downstream verification logic.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/detect-balance-decrease.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status\": \"VALID\",\n    \"response\": {\n        \"attestationType\": \"0x42616c616e636544656372656173696e675472616e73616374696f6e00000000\",\n        \"sourceId\": \"0x7465737458525000000000000000000000000000000000000000000000000000\",\n        \"votingRound\": \"0\",\n        \"lowestUsedTimestamp\": \"1708671652\",\n        \"requestBody\": {\n            \"transactionId\": \"0xB40C7540D8393D389AAF6006C0429608ADD871C0CA3174B72EA55776D885B77B\",\n            \"sourceAddressIndicator\": \"0xa1ca3089c3e9f4c6e9ccf2bfb65bcf3e9d7544a092c79d642d5d34a54e0267e1\"\n        }, \"responseBody\": {\n            \"blockNumber\": \"45629840\",\n            \"blockTimestamp\": \"1708671652\",\n            \"sourceAddressHash\": \"0xa1ca3089c3e9f4c6e9ccf2bfb65bcf3e9d7544a092c79d642d5d34a54e0267e1\",\n            \"spentAmount\": \"22\",\n            \"standardPaymentReference\": \"0x48656C6C6F20776F726C64210000000000000000000000000000000000000000\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PostAlert Interface in TypeScript for FAssets Bot Notifications\nDESCRIPTION: This TypeScript interface defines the structure of the POST request body sent by the agent bot to the notification endpoint. It includes fields for bot type, address, level, title, and description.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/7-agent-bot-notifications.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nPostAlert = {\n  bot_type: string,\n  address: string,\n  level: string,\n  title: string,\n  description: string,\n};\n```\n\n----------------------------------------\n\nTITLE: Entering a Collateral Pool with User Bot CLI\nDESCRIPTION: Allows a user to deposit collateral into a specific collateral pool to become a participant (liquidity provider). Requires the pool ID (`<poolId>`) and the amount of collateral (`<collateralAmount>`) to deposit as arguments, along with the FAsset symbol (via the required `--fasset` flag).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/user-bot.mdx#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nyarn user-bot enterPool <poolId> <collateralAmount>\n```\n\n----------------------------------------\n\nTITLE: Updating Executor Fee in Solidity\nDESCRIPTION: Allows a registered executor to update their fee value. Returns the reward epoch when the new fee becomes effective.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction updateExecutorFeeValue(\n    uint256 _feeValue\n) external returns (\n    uint256);\n```\n\n----------------------------------------\n\nTITLE: Declaring the Random Data Structure in Solidity\nDESCRIPTION: Establishes a struct representing random values associated with voting rounds, including round id (uint32), randomness value (uint256), and a boolean flag indicating randomness security (isSecure). This can be used for randomness-based logic elsewhere in the protocol.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/solidity-reference/IFtsoFeedPublisher.md#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Random {\n  uint32 votingRoundId;\n  uint256 value;\n  bool isSecure;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Latest BlockNumber via RPC - Songbird Canary-Network - web3.js JavaScript\nDESCRIPTION: Demonstrates querying the Songbird Canary-Network's current Ethereum block number using web3.js in JavaScript. Requires web3.js and the Songbird endpoint. Input: provider URI; Output: block number.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/0-overview.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{BlockNumSongbirdJS}\n```\n\n----------------------------------------\n\nTITLE: Node ID Registered Event - Solidity\nDESCRIPTION: Logs successful registration of a new node id for a voter. Contains voter's address and the registered bytes20 node id. Monitored for establishing real-time views of entity-to-network relationships.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_29\n\nLANGUAGE: solidity\nCODE:\n```\nevent NodeIdRegistered(\n    address voter,\n    bytes20 nodeId\n)\n```\n\n----------------------------------------\n\nTITLE: Write ABI Encoded Request to File - Solidity Foundry\nDESCRIPTION: Shows the process of persisting the ABI-encoded attestation request to the filesystem using a helper function. The data is hex-encoded and saved under a precision-named file for future retrieval during proof generation or other processes. Relies on `Base.writeToFile` and `StringsBase.toHexString`, and assumes the directory path and attestation type variables are already set.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/address-validity.mdx#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nBase.writeToFile(\n    dirPath,\n    string.concat(attestationTypeName, \"_abiEncodedRequest\"),\n    StringsBase.toHexString(response.abiEncodedRequest),\n    true\n);\n\n```\n\n----------------------------------------\n\nTITLE: Getting FAsset Agent Information\nDESCRIPTION: Command to output information about a specific FAsset agent by specifying the agent vault address, with an option for raw output.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot info <agentVaultAddress>\n```\n\n----------------------------------------\n\nTITLE: Setting EVM Version in Solidity JSON Configuration\nDESCRIPTION: This JSON snippet shows how to configure the Solidity compiler settings to use the 'london' EVM version within a standard JSON input file. This setting is often required when deploying contracts on Flare Network or its testnets.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/change-quote-feed.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"settings\": {\n    \"optimizer\": {\n      /* ... */\n    },\n    \"evmVersion\": \"london\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Solidity Contract Helper Utilities - Python\nDESCRIPTION: This set of Python functions in 'utils.py' provides helpers to read Solidity source files, write compiler outputs to JSON, and handle file I/O for contract compilation steps. Required by the compiler script and assumes 'json' and file/path modules available. Used throughout the workflow for compiling contracts with py-solc-x.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-python-developers.mdx#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n{Utils}\n```\n\n----------------------------------------\n\nTITLE: Querying Feed Values without Voting Round\nDESCRIPTION: cURL command to query feed values from the Feed Value Provider API without specifying a voting round. This endpoint is used by the FTSOv2 Fast Updates client.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' 'http://localhost:3101/feed-values/' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"feeds\": [{ \"category\": 1, \"name\" : \"BTC/USD\" }]}'\n```\n\n----------------------------------------\n\nTITLE: Unregistering Executor in Solidity\nDESCRIPTION: Allows an executor to unregister from the system. Returns the reward epoch number when the unregistration becomes effective.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction unregisterExecutor(\n) external returns (\n    uint256);\n```\n\n----------------------------------------\n\nTITLE: Updating Minting Requests with User Bot CLI\nDESCRIPTION: Updates the status of all open minting requests based on their current state, time expiration, or payment verification. Requires the FAsset symbol (via the required `--fasset` flag). This command helps keep the system state consistent.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/user-bot.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn user-bot updateMintings\n```\n\n----------------------------------------\n\nTITLE: Setting Cleaner Contract in IWNat Solidity Interface\nDESCRIPTION: Sets the contract that is allowed to call history cleaning methods, typically an instance of CleanupBlockNumberManager.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setCleanerContract(\n    address _cleanerContract\n) external;\n```\n\n----------------------------------------\n\nTITLE: Proposing Signing Policy Address - Solidity\nDESCRIPTION: Starts the workflow for a voter to propose a new signing policy address. The function is invoked by the voter and requires the signing policy address as input. Proposal must subsequently be confirmed to take effect.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_19\n\nLANGUAGE: solidity\nCODE:\n```\nfunction proposeSigningPolicyAddress(\n    address _signingPolicyAddress\n) external;\n```\n\n----------------------------------------\n\nTITLE: Generating Feed ID - Go\nDESCRIPTION: The Go snippet demonstrates how to generate a feed ID by encoding the feed category and feed name, ensuring zero-padding on the resulting byte slice to produce a 20-byte hexadecimal string with 0x prefix. It uses core libraries only. Parameters are the category (byte/uint8) and name (string); function returns the hex ID string, suitable for use in server-side Go applications or tooling.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/_feed_explanation.mdx#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// get_feed_id.go\npackage main\nimport (\n    \"encoding/hex\"\n    \"fmt\"\n)\n\nfunc GetFeedId(category byte, feedName string) string {\n    feedNameHex := hex.EncodeToString([]byte(feedName))\n    padded := fmt.Sprintf(\"%02x%s\", category, feedNameHex)\n    padded = padded + string(make([]byte, 40-len(padded)))\n    return \"0x\" + padded[:40]\n}\n\n// Example usage:\n// func main() {\n//     fmt.Println(GetFeedId(1, \"FLR/USD\"))\n// }\n\n```\n\n----------------------------------------\n\nTITLE: Topping Up Underlying Assets\nDESCRIPTION: Command to send additional underlying assets to the FAssets agent, increasing the assets backing their minted FAssets.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot topUpUnderlying <agentVaultAddress> <amount>\n```\n\n----------------------------------------\n\nTITLE: Querying Latest BlockNumber via RPC - Songbird Canary-Network - go-ethereum Go\nDESCRIPTION: Shows how to fetch the current block number from Songbird using Go and the go-ethereum library by calling \\\"eth_blockNumber\\\". Needs go-ethereum, Songbird RPC endpoint. Output: latest block number.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/0-overview.mdx#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n{BlockNumSongbirdGo}\n```\n\n----------------------------------------\n\nTITLE: Getting Token Name in IWNat Solidity Interface\nDESCRIPTION: Returns the name of the token. Compatible with the ERC20 standard.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction name(\n) external view returns (\n    string\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Historical Random Number in Solidity\nDESCRIPTION: Function to retrieve a historical random number for a specific voting round ID. Returns the random number, security status, and timestamp. The function reverts if no finalization exists for the specified voting round.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/RandomNumberV2Interface.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getRandomNumberHistorical(\n    uint256 _votingRoundId\n) external view returns (\n    uint256 _randomNumber,\n    bool _isSecureRandom,\n    uint256 _randomTimestamp\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Flare Generated Types\nDESCRIPTION: TypeScript configuration file (tsconfig.json) setup to include Flare generated types and set compiler options.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/developer-guides/1-fassets-asset-manager-settings-node.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"node\",\n    \"esModuleInterop\": true,\n    \"strict\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"outDir\": \"./dist\"\n  },\n  \"include\": [\"scripts/**/*.ts\", \"typechain/**/*.ts\", \"typechain/**/*.d.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Private Key Storage Format\nDESCRIPTION: Format for securely storing a private key in a text file, showing options for both CB58 and hexadecimal formats. Only one format should be used based on the key type.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/using-flare-stake-tool.mdx#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nPRIVATE_KEY_CB58=\"\"\nPRIVATE_KEY_HEX=\"\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Initial Reward Epoch Id - Solidity Interface\nDESCRIPTION: Outlines 'getInitialRewardEpochId' to retrieve the very first epoch id recognized by the reward system. No parameters are required; essential for context about epoch numbering.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRewardManager.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getInitialRewardEpochId(\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Using nodectl CLI to view available commands\nDESCRIPTION: Command to display help information for the nodectl CLI tool, which is used to manage node operations on the deployed blockchain node.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/4-GCP-marketplace-nodes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo nodectl help\n```\n\n----------------------------------------\n\nTITLE: Cancelling Vault Collateral Withdrawal\nDESCRIPTION: Command to cancel a previously initiated vault collateral withdrawal by specifying the agent vault address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot cancelVaultCollateralWithdrawal <agentVaultAddress>\n```\n\n----------------------------------------\n\nTITLE: Undelegating All Voting Power in Solidity\nDESCRIPTION: Removes all voting power delegations from the sender's delegation account to any delegates.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction undelegateAll(\n) external;\n```\n\n----------------------------------------\n\nTITLE: Configuring EVM Version in Standard Solidity JSON\nDESCRIPTION: JSON configuration for setting the EVM version to 'london' in Solidity compiler settings. This resolves the 'invalid opcode: opcode 0x5f not defined' error by ensuring compatibility with Flare's supported EVM version.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/support/faqs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"settings\": {\n    \"optimizer\": {\n      /* ... */\n    },\n    \"evmVersion\": \"london\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Address Registry Contract with Verification\nDESCRIPTION: Function to deploy an AddressRegistry contract and verify it on the blockchain. It handles contract deployment with empty constructor arguments and performs contract verification through the hardhat verification plugin.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/address-validity.mdx#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nasync function deployAndVerifyContract() {\n  const args: any[] = [];\n  const addressRegistry: AddressRegistryInstance = await AddressRegistry.new(\n    ...args,\n  );\n  try {\n    await run(\"verify:verify\", {\n      address: addressRegistry.address,\n      constructorArguments: args,\n    });\n  } catch (e: any) {\n    console.log(e);\n  }\n  console.log(\"AddressRegistry deployed to\", addressRegistry.address, \"\\n\");\n  return addressRegistry;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Songbird Node Whitelisting Status\nDESCRIPTION: Command to verify if your IP address has been whitelisted for connecting to the Songbird network. This is required only for the Songbird Canary-Network during testing phase.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' -H 'content-type:application/json;' https://songbird-bootstrap.flare.network/ext/info\n```\n\n----------------------------------------\n\nTITLE: Executor Registration Fee Update Event in Solidity\nDESCRIPTION: Event emitted when the executor registration fee is modified. Takes a single parameter recording the new registration fee value in Wei.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_35\n\nLANGUAGE: solidity\nCODE:\n```\nevent RegisterExecutorFeeSet(\n    uint256 registerExecutorFeeValueWei\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Proof Struct for Verification in Solidity\nDESCRIPTION: Defines the proof structure used to verify attestation responses. Contains a Merkle proof array for verification and the attestation response data.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IAddressValidity.mdx#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Proof {\n    bytes32[] merkleProof;\n    Response data;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All FDC Configurations in Solidity\nDESCRIPTION: Function to retrieve the complete array of all FDC configurations, returning an array of FdcConfiguration structs.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IFdcInflationConfigurations.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getFdcConfigurations(\n) external view returns (\n    struct IFdcInflationConfigurations.FdcConfiguration[]\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Historical Total Supply in IWNat Solidity Interface\nDESCRIPTION: Returns the total amount of tokens held by all accounts at a specific block number in the past.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_22\n\nLANGUAGE: solidity\nCODE:\n```\nfunction totalSupplyAt(\n    uint256 _blockNumber\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Governance Fees in Solidity\nDESCRIPTION: Declares the `governanceFeeSetup` function in the IRelay interface. This external function processes a `_relayMessage` containing signatures to verify the authenticity of the provided `_config` data. If validation succeeds, it updates the relay contract's configuration, including fee structures. It reverts on failure.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRelay.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction governanceFeeSetup(\n    bytes _relayMessage,\n    struct IRelay.RelayGovernanceConfig _config\n) external;\n```\n\n----------------------------------------\n\nTITLE: Deploying and Accessing Helpers Contract - TypeScript\nDESCRIPTION: This TypeScript async function deploys the Helpers Solidity contract and returns its instance for further interaction in test or script environments. Dependencies include helpers contract artifacts and the Truffle or Hardhat test framework with Web3 support. There are no input parameters, and the returned object allows calling helpers contract view functions on-chain. This function acts as a foundational step before accessing individual Flare contract instances.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getHelpers() {\\n  const helpers: HelpersInstance = await Helpers.new();\\n  return helpers;\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Transferring Assets from Agent to Core Vault in Bash\nDESCRIPTION: Initiates a request to transfer a specified amount of underlying assets from an FAsset agent vault to the core vault using the `agent-bot` script via yarn. Requires the agent vault address and the amount to transfer as parameters.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot transferToCoreVault <agentVaultAddress> <amount>\n```\n\n----------------------------------------\n\nTITLE: Loading Verifier URL and API Key from Environment in Solidity (Foundry)\nDESCRIPTION: This snippet loads configuration values, specifically a data availability layer URL (`COSTON2_DA_LAYER_URL`) and an API key (`X_API_KEY`), from environment variables using Foundry's `vm.envString` cheatcode.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\n```solidity title=\"scrip/fdcExample/Payment.s.sol\"\nstring memory daLayerUrl = vm.envString(\"COSTON2_DA_LAYER_URL\");\nstring memory apiKey = vm.envString(\"X_API_KEY\");\n```\n```\n\n----------------------------------------\n\nTITLE: Executing FAsset Minting with User Bot CLI\nDESCRIPTION: Completes the minting process after payment proof is available by executing a specific minting request. Requires the request ID (`<requestId>`) as an argument and the FAsset symbol (via the required `--fasset` flag). This distributes minted FAssets and fees, and unlocks collateral.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/user-bot.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn user-bot mintExecute <requestId>\n```\n\n----------------------------------------\n\nTITLE: Compiling Hardhat Contracts with yarn - Bash\nDESCRIPTION: This Bash command runs Hardhat's compile function using yarn. It processes all contract files in the contracts directory, outputting necessary artifacts. Yarn must be installed as the project dependency manager. No additional input parameters are needed.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/hardhat-foundry-starter-kit.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn hardhat compile\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Coston2 Testnet Node\nDESCRIPTION: Docker Compose configuration for running a Flare Testnet Coston2 observer node with network-specific settings, volume mounts, and port configurations.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.6'\n\nservices:\n  observer:\n    container_name: coston2-observer\n    image: flarefoundation/go-flare:v1.9.1\n    restart: on-failure\n    environment:\n      - AUTOCONFIGURE_BOOTSTRAP=1\n      - NETWORK_ID=costwo\n      - AUTOCONFIGURE_PUBLIC_IP=1\n      - AUTOCONFIGURE_BOOTSTRAP_ENDPOINT=https://coston2-bootstrap.flare.network/ext/info\n    volumes:\n      - /mnt/db:/app/db\n      - /opt/flare/conf:/app/conf/C\n      - /opt/flare/logs:/app/logs\n    ports:\n      - 0.0.0.0:9650:9650\n      - 0.0.0.0:9651:9651\n```\n\n----------------------------------------\n\nTITLE: Retrieving Proof and Data from DA Layer API in TypeScript\nDESCRIPTION: Demonstrates how to retrieve the proof and data for an attestation request using the Data Availability Layer API with TypeScript and axios.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/2-getting-started.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport axios from 'axios';\n\nconst DA_LAYER_API = 'https://da-layer-api.example.com';\n\nasync function getProofAndData(roundId: number, requestBytes: string) {\n  try {\n    const response = await axios.post(`${DA_LAYER_API}/proof`, {\n      roundId,\n      requestBytes\n    });\n\n    console.log('Proof and data retrieved:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error retrieving proof and data:', error);\n  }\n}\n\n// Usage\nconst roundId = 859315;\nconst requestBytes = '0x...';\ngetProofAndData(roundId, requestBytes);\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Number of Initialized Weight Based Claims - Solidity Interface\nDESCRIPTION: Defines 'noOfInitialisedWeightBasedClaims', a view function taking a reward epoch id and returning the numeric count of initialized weight-based claims for that epoch. No dependencies beyond standard uint256 typing.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRewardManager.md#2025-04-22_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nfunction noOfInitialisedWeightBasedClaims(\n    uint256 _rewardEpochId\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing ProjectUpdated Event in Solidity\nDESCRIPTION: Event emitted when project details are updated.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IRNat.md#2025-04-22_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nevent ProjectUpdated(\n    uint256 id,\n    string name,\n    address distributor,\n    bool currentMonthDistributionEnabled\n)\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Underlying Assets\nDESCRIPTION: Command to withdraw underlying assets that no longer back any FAssets, specifying the amount and destination address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot withdrawUnderlying <agentVaultAddress> <amount> <destinationAddress>\n```\n\n----------------------------------------\n\nTITLE: Setting EVM Version with Solidity Compiler CLI\nDESCRIPTION: Command line instruction for the Solidity compiler (solc) that specifies the EVM version as 'london'. This ensures compatibility with Flare Network which only supports EVM versions up to London.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/support/faqs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolc --evm-version london <args>\n```\n\n----------------------------------------\n\nTITLE: Running Hardhat Tests with npx - Bash\nDESCRIPTION: Executes the suite of unit and integration tests for smart contracts using Hardhat, invoked via npx. Prerequisite: Tests should be present in the test directory. This command runs all available tests and outputs success/failure results to the console. Suitable for validation before deployment.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/hardhat-foundry-starter-kit.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat test\n```\n\n----------------------------------------\n\nTITLE: Running Songbird Canary-Network Node\nDESCRIPTION: Command to run a node on the Songbird Canary-Network. It uses curl to fetch bootstrap IPs and IDs dynamically.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./build/avalanchego \\\n  --network-id=songbird \\\n  --http-host= \\\n  --bootstrap-ips=\"$(curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' -H 'content-type:application/json;' https://songbird-bootstrap.flare.network/ext/info | jq -r \".result.ip\")\" \\\n  --bootstrap-ids=\"$(curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' -H 'content-type:application/json;' https://songbird-bootstrap.flare.network/ext/info | jq -r \".result.nodeID\")\"\n```\n\n----------------------------------------\n\nTITLE: Minimum Fee Update Event in Solidity\nDESCRIPTION: Event emitted when the minimum fee value is updated in the contract. Takes a single parameter tracking the new minimum fee value in Wei.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_33\n\nLANGUAGE: solidity\nCODE:\n```\nevent MinFeeSet(\n    uint256 minFeeValueWei\n)\n```\n\n----------------------------------------\n\nTITLE: Generating a Sortition Key with Docker for Fast Updates\nDESCRIPTION: This command uses the fast-updates/go-client Docker image to generate a sortition key needed for Fast Updates in the Flare network.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm ghcr.io/flare-foundation/fast-updates/go-client:latest keygen\n```\n\n----------------------------------------\n\nTITLE: Testing Foundry Contracts with forge - Bash\nDESCRIPTION: Executes all configured tests within the Foundry framework to validate the Solidity smart contracts. Requires tests to be defined in the test directory. Outputs pass/fail results for each test case. No parameters needed beyond project setup.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/hardhat-foundry-starter-kit.mdx#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nforge test\n```\n\n----------------------------------------\n\nTITLE: Getting List of All Validators\nDESCRIPTION: Command to retrieve a JSON list of all active validators on the Flare network, which includes details like node IDs, staking amounts, and active periods.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/using-flare-stake-tool.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflare-stake-tool info validators\n```\n\n----------------------------------------\n\nTITLE: Pausing Execution with a Sleep Function - TypeScript\nDESCRIPTION: Provides a utility function to pause script execution for a specified number of milliseconds. This is essential for polling/waiting scenarios, where the script must delay between checks (e.g., for finalization of a voting round). Requires no external dependencies; accepts an integer (ms), returns a Promise that resolves after the specified delay.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/address-validity.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n```\n\n----------------------------------------\n\nTITLE: Updating FAssets Agent Settings using Bash Command\nDESCRIPTION: This command allows you to update various settings for your FAssets agent, such as fees. It requires the agent vault address, the setting name, and the new value as parameters.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/5-faq.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nupdateAgentSetting <agentVaultAddress> <agentSettingName> <agentSettingValue>\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts with Hardhat via npx - Bash\nDESCRIPTION: This command runs a deployment script (tryDeployment.ts) for smart contracts using Hardhat and npx. Assumes script is present at 'scripts/tryDeployment.ts' and network configurations are set in hardhat.config.ts. You may need to set API keys for block explorers in .env for verification. The command deploys contracts to the network and outputs transaction information.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/hardhat-foundry-starter-kit.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat run scripts/tryDeployment.ts\n```\n\n----------------------------------------\n\nTITLE: Relay Contract Access Helper\nDESCRIPTION: Helper function to access Flare's official Relay contract using the Helpers contract interface.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/json-api.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getRelay() {\n  const helpers: HelpersInstance = await getHelpers();\n  const relayAddress: string = await helpers.getRelay();\n  return await IRelay.at(relayAddress);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Feed Index by ID - Solidity\nDESCRIPTION: Declares getFeedIndex, which maps a given bytes21 feedId to its corresponding uint256 index. This view function assists in reverse lookups from feed identifiers to their position in the configuration arrays.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdatesConfiguration.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getFeedIndex(\n    bytes21 _feedId\n) external view returns (\n    uint256 _index\n);\n```\n\n----------------------------------------\n\nTITLE: Reading Environment Variables for DA Layer URL and API Key - Solidity Foundry\nDESCRIPTION: Retrieves offchain configuration values (`COSTON2_DA_LAYER_URL` and `X_API_KEY`) from the Foundry VM environment. These are needed for subsequent HTTP requests or authentication with external APIs. Typically placed at the start of the proof preparation script, ensuring secrets are not hard-coded.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/address-validity.mdx#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory daLayerUrl = vm.envString(\"COSTON2_DA_LAYER_URL\");\nstring memory apiKey = vm.envString(\"X_API_KEY\");\n\n```\n\n----------------------------------------\n\nTITLE: Fetching First Claimable Reward Epoch - Solidity Interface\nDESCRIPTION: Implements 'firstClaimableRewardEpochId', a view returning the earliest epoch id for which rewards can be claimed. Used for epoch-based logic, with no dependencies or arguments.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRewardManager.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction firstClaimableRewardEpochId(\n) external view returns (\n    uint24\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Definition File Directory and Copying Template\nDESCRIPTION: Commands to create the interfaces directory and copy the template definition file\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/create-attestation-type.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir contracts/interfaces/types\ncp ICustomType.sol contracts/interfaces/types\n```\n\n----------------------------------------\n\nTITLE: Getting Agent Settings\nDESCRIPTION: Command to retrieve the configuration parameters for a specific agent vault by specifying its address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot getAgentSettings <agentVaultAddress>\n```\n\n----------------------------------------\n\nTITLE: Posting Attestation Request to DA Layer in Solidity\nDESCRIPTION: Creates a URL for the DA Layer API endpoint and posts an attestation request using the Base.postAttestationRequest method. The request returns data that will be parsed in subsequent steps.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_19\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory url = string.concat(\n daLayerUrl,\n // \"api/v0/fdc/get-proof-round-id-bytes\"\n \"api/v1/fdc/proof-by-request-round-raw\"\n);\nconsole.log(\"url: %s\\n\", url);\n\n(, bytes memory data) = Base.postAttestationRequest(url, headers, body);\n```\n\n----------------------------------------\n\nTITLE: Updating Flare Systems Deployment Image\nDESCRIPTION: Command to pull the latest flare-systems-deployment Docker image for updates.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose pull\n```\n\n----------------------------------------\n\nTITLE: Running the Proof of Reserves Verification Script\nDESCRIPTION: Provides the command to execute the Proof of Reserves verification script using Hardhat on the Coston2 network.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nyarn hardhat run scripts/proofOfReserves/verifyProofOfReserves.ts --network coston2\n```\n\n----------------------------------------\n\nTITLE: Checking Node Health\nDESCRIPTION: Command to check if the node is fully booted and accepting transactions.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:9650/ext/health\n```\n\n----------------------------------------\n\nTITLE: Implementing RewardsClaimed Event in Solidity\nDESCRIPTION: Event emitted when rewards are claimed by an owner.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IRNat.md#2025-04-22_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\nevent RewardsClaimed(\n    uint256 projectId,\n    uint256 month,\n    address owner,\n    uint128 amount\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Response Struct for Address Validity Verification in Solidity\nDESCRIPTION: Defines the top-level response structure returned after address validation. Contains attestation details, voting round information, timestamps, the original request body, and a response body indicating validity and standardized address information.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IAddressValidity.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Response {\n    bytes32 attestationType;\n    bytes32 sourceId;\n    uint64 votingRound;\n    uint64 lowestUsedTimestamp;\n    RequestBody requestBody;\n    ResponseBody responseBody;\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Proof Data to File for Later Use\nDESCRIPTION: Writes the encoded proof data to a file so it can be loaded later into a variable. This is an alternative to immediate verification, allowing the proof to be used in deployed contracts.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_25\n\nLANGUAGE: solidity\nCODE:\n```\nBase.writeToFile(\n    dirPath,\n    string.concat(attestationTypeName, \"_proof\"),\n    StringsBase.toHexString(abi.encode(_proof)),\n    true\n);\n```\n\n----------------------------------------\n\nTITLE: Compiling Foundry Contracts with forge - Bash\nDESCRIPTION: Runs the Foundry build process to compile all Solidity contracts in the src directory and generate artifacts for deployment/testing. Requires Foundry to be installed. This is typically run after configuring remappings and environment variables.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/hardhat-foundry-starter-kit.mdx#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nforge build\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scheduled Voter Fee Percentage Changes in Solidity\nDESCRIPTION: This Solidity function definition outlines `getVoterScheduledFeePercentageChanges` in the `IWNatDelegationFee` interface. It's an external view function that takes a `_voter` address and returns three arrays detailing their scheduled fee changes: the fee percentages (`_feePercentageBIPS`), the epoch IDs they become valid from (`_validFromEpochId`), and whether each setting is fixed (`_fixed`).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IWNatDelegationFee.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getVoterScheduledFeePercentageChanges(\n    address _voter\n) external view returns (\n    uint256[] _feePercentageBIPS,\n    uint256[] _validFromEpochId,\n    bool[] _fixed\n);\n```\n\n----------------------------------------\n\nTITLE: Defining FeePercentageChanged Event in Solidity\nDESCRIPTION: This Solidity event definition describes `FeePercentageChanged` within the `IWNatDelegationFee` interface. This event is emitted whenever a voter successfully changes their delegation fee percentage. It logs the voter's address (`voter`), the new fee value in BIPS (`value`), and the reward epoch ID from which the change is valid (`validFromEpochId`).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IWNatDelegationFee.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nevent FeePercentageChanged(\n    address voter,\n    uint16 value,\n    uint24 validFromEpochId\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing UTF8 Hex String Conversion in TypeScript\nDESCRIPTION: Utility function that converts a string to a UTF8 hex representation, padding it to 32 bytes to match Ethereum's storage format requirements.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/address-validity.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toHex(data: string) {\n  var result = \"\";\n  for (var i = 0; i < data.length; i++) {\n    result += data.charCodeAt(i).toString(16);\n  }\n  return result.padEnd(64, \"0\");\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying TokenStateReader Contract with Hardhat in TypeScript\nDESCRIPTION: This script deploys the 'TokenStateReader' contract using Hardhat and Truffle artifacts. Similar to the previous deployment script, it defines an `deployAndVerify` function. This function deploys the contract without constructor arguments, attempts verification using the `verify:verify` Hardhat task, handles potential verification errors, and logs the deployed contract address along with the network name.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript title=\"scripts/proofOfReserves/deployTokenStateReader.ts\"\nimport hre, { run } from \"hardhat\";\nimport { TokenStateReaderInstance } from \"../../typechain-types\";\n\nconst TokenStateReader = artifacts.require(\"TokenStateReader\");\n\nasync function deployAndVerify() {\n  const args: any[] = [];\n  const tokenStateReader: TokenStateReaderInstance = await TokenStateReader.new(\n    ...args,\n  );\n  try {\n    await run(\"verify:verify\", {\n      address: tokenStateReader.address,\n      constructorArguments: args,\n    });\n  } catch (e: any) {\n    console.log(e);\n  }\n  console.log(\n    `(${hre.network.name}) TokenStateReader deployed to`,\n    tokenStateReader.address,\n    \"\\n\",\n  );\n}\n\ndeployAndVerify().then((data) => {\n  process.exit(0);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Solidity via Ubuntu PPAs - Bash\nDESCRIPTION: This snippet provides commands to add the Ethereum PPA repository and install the Solidity compiler on Ubuntu systems. It ensures the system is updated and installs the 'solc' executable. Requires superuser privileges and internet access. Intended for Ubuntu or Debian-based Linux distributions.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-javascript-developers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo add-apt-repository -y ppa:ethereum/ethereum\\nsudo apt update\\nsudo apt install solc\n```\n\n----------------------------------------\n\nTITLE: Signing Policy Address Registration Confirmed Event - Solidity\nDESCRIPTION: Emitted when a signing policy address registration has been confirmed for a voter. Provides the voter and signing policy addresses as arguments. Enables traceability for changes in cryptographic policies.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_34\n\nLANGUAGE: solidity\nCODE:\n```\nevent SigningPolicyAddressRegistrationConfirmed(\n    address voter,\n    address signingPolicyAddress\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Requests Offset in Solidity\nDESCRIPTION: Function to get the offset in seconds for processing requests during the current voting round. Returns an 8-bit unsigned integer representing the offset.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IFdcHub.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction requestsOffsetSeconds(\n) external view returns (\n    uint8\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Current Cleanup Block Number - Solidity Interface\nDESCRIPTION: Declares a view function 'cleanupBlockNumber' that returns the current block number used for cleanup logic. No dependencies, parameters, or side effects; used in reward expiration or state validation scenarios.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRewardManager.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction cleanupBlockNumber(\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Setting FAssets Agent Secrets File Permissions\nDESCRIPTION: Commands to set appropriate file permissions and ownership for the FAssets agent secrets file.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/1-deploy-fassets-agent.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nchmod 600 secrets.json\nsudo chown 1000:1000 secrets.json\n```\n\n----------------------------------------\n\nTITLE: Generating Required Configurations\nDESCRIPTION: Command to generate the required configurations based on the .env file. This step needs to be repeated if the .env file is modified.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n./populate_config.sh\n```\n\n----------------------------------------\n\nTITLE: Installing ethers.js for Random Number Generation\nDESCRIPTION: NPM installation command for ethers.js library to interact with Flare network\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/secure-random-numbers.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ethers\n```\n\n----------------------------------------\n\nTITLE: Importing Solidity Example for Display in Markdown (JSX/JavaScript)\nDESCRIPTION: This JavaScript/JSX import statement uses Webpack's `raw-loader` syntax (`!!raw-loader!`) to import the raw text content of the `FtsoV2MigrationExample.sol` Solidity file. This technique is common in documentation sites built with frameworks like Docusaurus (suggested by the `@theme/CodeBlock` import) to embed and display code examples directly within the documentation page.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/5-migration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FtsoV2MigrationExample from \"!!raw-loader!/examples/developer-hub-solidity/FtsoV2MigrationExample.sol\";\n```\n\n----------------------------------------\n\nTITLE: Implementing RewardsAssigned Event in Solidity\nDESCRIPTION: Event emitted when rewards are assigned to a project.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IRNat.md#2025-04-22_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\nevent RewardsAssigned(\n    uint256 projectId,\n    uint256 month,\n    uint128 amount\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration for FDC Suite\nDESCRIPTION: This command copies the example environment configuration file to create a customizable .env file for the FDC suite deployment.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Setting Up Foundry Remappings - Text\nDESCRIPTION: Example lines for remappings.txt, required by Foundry to resolve imports for dependencies. Place each mapping in the remappings.txt file at the project root. Adjust if your dependency versions differ. These lines help Foundry's compiler locate imported Solidity libraries.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/hardhat-foundry-starter-kit.mdx#2025-04-22_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n@openzeppelin-contracts/=dependencies/@openzeppelin-contracts-5.2.0-rc.1/\\nflare-periphery/=dependencies/flare-periphery-0.0.1/\\nforge-std/=dependencies/forge-std-1.9.5/src/\\nforge-std/=dependencies/forge-std-1.9.5/\\nsurl/=dependencies/surl-0.0.0/src/\\nsurl/=dependencies/surl-0.0.0/\n```\n\n----------------------------------------\n\nTITLE: Handling ABI Definitions API Responses in JSON\nDESCRIPTION: Specifies the JSON format for responses from the ABI definitions endpoint (`/data-abis`). Includes a status field ('OK') and a data array containing standard JSON ABI definitions.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/4-offchain-services.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status\": \"OK\",\n    \"data\": JSONAbiDefinition[]\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to UTF8 Hex Format in TypeScript\nDESCRIPTION: Helper function that adds the '0x' prefix to a hex string after converting it from UTF8, creating a properly formatted hex string for Ethereum operations.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/address-validity.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toUtf8HexString(data: string) {\n  return \"0x\" + toHex(data);\n}\n```\n\n----------------------------------------\n\nTITLE: Feed Values Response JSON Structure\nDESCRIPTION: Example JSON response structure for the feed values API, showing the data format for a BTC/USD feed.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"feed\": { \"category\": 1, \"name\": \"BTC/USD\" },\n      \"value\": 71285.74004472858\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Redeeming FAssets with User Bot CLI\nDESCRIPTION: Initiates the process to redeem FAssets, burning them in exchange for the underlying asset. Requires the number of lots (`<numberOfLots>`) to redeem as an argument and the FAsset symbol (via the required `--fasset` flag). Optional flags allow specifying an executor address (`--executor`) and executor fee (`--executorFee`).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/user-bot.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn user-bot redeem <numberOfLots>\n```\n\n----------------------------------------\n\nTITLE: Configuring Agency Address for Weather Insurance Contract in TypeScript\nDESCRIPTION: This snippet defines the address of the deployed MinTempAgency contract, which is used in subsequent scripts for interacting with the weather insurance system.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/weather-insurance.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport const agencyAddress = \"0x04Ca06E78EFaF061173Ca3591f96fE148923707d\";\n```\n\n----------------------------------------\n\nTITLE: Getting Voter Fee Percentage for a Specific Epoch in Solidity\nDESCRIPTION: This Solidity function definition details `getVoterFeePercentage` from the `IWNatDelegationFee` interface. It's an external view function that retrieves the delegation fee percentage (in BIPS) for a specific `_voter` address applicable to a given `_rewardEpochId`. Note that the fee for the `current + feePercentageUpdateOffset` epoch might still change. It returns a `uint16`.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IWNatDelegationFee.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getVoterFeePercentage(\n    address _voter,\n    uint256 _rewardEpochId\n) external view returns (\n    uint16\n);\n```\n\n----------------------------------------\n\nTITLE: Structuring RewardClaim Merkle Node - Solidity Interface\nDESCRIPTION: Defines the 'RewardClaim' struct, encapsulating epoch id, beneficiary address, claim amount (as uint120), and claim type for use in Merkle proof trees. Integral to reward validation and claim processing; depends on RewardsV2Interface.ClaimType.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRewardManager.md#2025-04-22_snippet_20\n\nLANGUAGE: solidity\nCODE:\n```\nstruct RewardClaim {\n  uint24 rewardEpochId;\n  bytes20 beneficiary;\n  uint120 amount;\n  enum RewardsV2Interface.ClaimType claimType;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating FAssets Agent Secret Keys\nDESCRIPTION: Command to generate necessary secret keys for the FAssets agent, replacing MANAGEMENT_WALLET_ADDRESS with the actual address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/1-deploy-fassets-agent.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./generate_secrets.sh MANAGEMENT_WALLET_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Handling Protocol Manager API Responses in JSON\nDESCRIPTION: Specifies the JSON format for responses from the Protocol Manager Service API endpoints. Includes a status field ('OK'), the primary data payload ('data'), and optional additional data ('additionalData'), both represented as hexadecimal strings.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/4-offchain-services.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"OK\",\n  \"data\": \"0x1234...\",\n  \"additionalData\": \"0x5678...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Signature for Validator Registration\nDESCRIPTION: This command creates a signature using the node's private key, which is required for the _signature parameter when registering a validator node with the EntityManager contract.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\necho -n $ZERO_PREFIX$IDENTITY_ADDRESS | xxd -r -p | openssl dgst -sha256 -sign $PATH_TO_KEY | xxd -p | tr -d '\\n' | sed -e 's/^/0x/;' && echo\n```\n\n----------------------------------------\n\nTITLE: Configuring a Validator Node with JSON\nDESCRIPTION: Sample JSON configuration file for securing a Flare validator node. This configuration disables unnecessary APIs, enables pruning, sets appropriate gas and transaction fee caps, and configures various security and performance parameters.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/2-validator-node.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"snowman-api-enabled\": false,\n  \"coreth-admin-api-enabled\": false,\n  \"coreth-admin-api-dir\": \"\",\n  \"eth-apis\": [\"web3\"],\n  \"continuous-profiler-dir\": \"\",\n  \"continuous-profiler-frequency\": 900000000000,\n  \"continuous-profiler-max-files\": 5,\n  \"rpc-gas-cap\": 50000000,\n  \"rpc-tx-fee-cap\": 100,\n  \"preimages-enabled\": false,\n  \"pruning-enabled\": true,\n  \"snapshot-async\": true,\n  \"snapshot-verification-enabled\": false,\n  \"metrics-enabled\": true,\n  \"metrics-expensive-enabled\": false,\n  \"local-txs-enabled\": false,\n  \"api-max-duration\": 30000000000,\n  \"ws-cpu-refill-rate\": 0,\n  \"ws-cpu-max-stored\": 0,\n  \"api-max-blocks-per-request\": 30,\n  \"allow-unfinalized-queries\": false,\n  \"allow-unprotected-txs\": false,\n  \"keystore-directory\": \"\",\n  \"keystore-external-signer\": \"\",\n  \"keystore-insecure-unlock-allowed\": false,\n  \"remote-tx-gossip-only-enabled\": false,\n  \"tx-regossip-frequency\": 60000000000,\n  \"tx-regossip-max-size\": 15,\n  \"log-level\": \"info\",\n  \"offline-pruning-enabled\": false,\n  \"offline-pruning-bloom-filter-size\": 512,\n  \"offline-pruning-data-directory\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Blockchain Transaction Status Codes in Markdown\nDESCRIPTION: This markdown table defines primary transaction status codes and their numeric representations used to report transaction outcomes on blockchains. There are three possible statuses: SUCCESS (0), SENDER_FAILURE (1), and RECEIVER_FAILURE (2). It serves as a lookup for systems or documentation needing explicit status mapping, and can be adapted or extended for more granular codes if necessary.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/attestation-types/_transaction_success_status.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Status             | Code |\n| ------------------ | ---- |\n| `SUCCESS`          | 0    |\n| `SENDER_FAILURE`   | 1    |\n| `RECEIVER_FAILURE` | 2    |\n```\n\n----------------------------------------\n\nTITLE: Preparing Payment-Specific Attestation Request in TypeScript\nDESCRIPTION: A function specific to the Payment attestation type that formats the request body with the transaction ID and UTXO indices. It then calls the base preparation function with the appropriate URL and parameters.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync function prepareAttestationRequest(\n  transactionId: string,\n  inUtxo: string,\n  utxo: string,\n) {\n  const requestBody = {\n    transactionId: transactionId,\n    inUtxo: inUtxo,\n    utxo: utxo,\n  };\n\n  const url = `${verifierUrlBase}verifier/${urlTypeBase}/Payment/prepareRequest`;\n  const apiKey = VERIFIER_API_KEY_TESTNET ?? \"\";\n\n  return await prepareAttestationRequestBase(\n    url,\n    apiKey,\n    attestationTypeBase,\n    sourceIdBase,\n    requestBody,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring the FeedWithProof Data Structure in Solidity\nDESCRIPTION: Specifies a struct to combine a Feed (as body) with a merkleProof array (bytes32[]) for validation and verification. Used during feed publishing to ensure data integrity via proof mechanisms. Must supply both a valid proof and feed struct upon submission.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/solidity-reference/IFtsoFeedPublisher.md#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nstruct FeedWithProof {\n  bytes32[] merkleProof;\n  struct IFtsoFeedPublisher.Feed body;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FeedDataWithProof Structure - Solidity\nDESCRIPTION: Displays the FeedDataWithProof struct combining a bytes32 Merkle proof array and FeedData body. This structure is fundamental when verifying feed values against the oracle's Merkle root using FTSOv2 interfaces. All supplied proof and feed data fields must correspond to valid Merkle inclusion computations.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/FtsoV2Interface.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nstruct FeedDataWithProof {\n    bytes32[] proof;\n    struct FtsoV2Interface.FeedData body;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Block Number using curl for Songbird Testnet Coston\nDESCRIPTION: This curl command sends a POST request to the Coston RPC endpoint to retrieve the current block number using the eth_blockNumber method.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/0-overview.mdx#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://coston-api.flare.network/ext/C/rpc -X POST -H \"Content-Type: application/json\" --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}'\n```\n\n----------------------------------------\n\nTITLE: Querying Precision of Unit Delta in Solidity Interface\nDESCRIPTION: This interface function, `getPrecision`, allows external querying of the protocol's current precision value, pertaining to the scale's fractional component. It returns a type `Precision` and is declared as a `view` function so it incurs no state changes. Essential for clients performing calculations, the function takes no arguments and purely serves informational and configuration purposes.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdateIncentiveManager.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getPrecision(\n) external view returns (\n    Precision\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Public Key - Solidity\nDESCRIPTION: Enables the registration of a public key (split into two bytes32 parts) with associated verification data (bytes). Used for cryptographic operations on behalf of a voter. Ensures only authorized keys are registered and linked to voter identity.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_23\n\nLANGUAGE: solidity\nCODE:\n```\nfunction registerPublicKey(\n    bytes32 _part1,\n    bytes32 _part2,\n    bytes _verificationData\n) external;\n```\n\n----------------------------------------\n\nTITLE: Accessing ABI Definitions via API\nDESCRIPTION: Defines the GET API endpoint used to access ABI definitions required for interpreting offchain data fetched from the data availability endpoint.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/4-offchain-services.mdx#2025-04-22_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nGET /data-abis\n```\n\n----------------------------------------\n\nTITLE: Importing the DeveloperTools React Component in JavaScript/JSX\nDESCRIPTION: This line imports the `DeveloperTools` React component from a specific path within the project (`@site/src/components/developerTools`). This import makes the component available for use within this file, typically within a React or MDX environment like Docusaurus. It assumes the component is correctly exported from the specified file.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/2-developer-tools.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DeveloperTools from \"@site/src/components/developerTools\";\n```\n\n----------------------------------------\n\nTITLE: Feed Values with Voting Round Response JSON\nDESCRIPTION: Example JSON response structure for the feed values API with a specific voting round, showing the data format for a BTC/USD feed.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"votingRoundId\": 0,\n  \"data\": [\n    {\n      \"feed\": { \"category\": 1, \"name\": \"BTC/USD\" },\n      \"value\": 71287.34508311428\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying PaymentRegistry Contract in Solidity\nDESCRIPTION: Script to deploy the PaymentRegistry contract and save its address to a file for future reference.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_29\n\nLANGUAGE: solidity\nCODE:\n```\ncontract DeployContract is Script {\n    function run() external {\n        uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n        vm.startBroadcast(deployerPrivateKey);\n\n        PaymentRegistry paymentRegistry = new PaymentRegistry();\n        address _address = address(paymentRegistry);\n\n        vm.stopBroadcast();\n\n        Base.writeToFile(\n            dirPath,\n            string.concat(attestationTypeName, \"_address\"),\n            StringsBase.toHexString(abi.encodePacked(_address)),\n            true\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Flare Chain ID Using Geth Client - Go\nDESCRIPTION: These Go snippets connect to the Flare (mainnet or Coston2) RPC endpoint using Geth's ethclient package and output the current chain ID. Dependencies are the go-ethereum/ethclient library and network connectivity to a Flare-compatible JSON-RPC node. The endpoint URL must be set according to the desired network (testnet/mainnet). The output is the printed chain ID, confirming proper client connection; inputs are network RPC URLs. Limitations include the need for an active node endpoint.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-go-developers.mdx#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n{ChainIdCoston2}\n```\n\nLANGUAGE: go\nCODE:\n```\n{ChainIdFlare}\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory and Initializing npm Project\nDESCRIPTION: Commands to create a new directory for the project and initialize a new npm project.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/developer-guides/1-fassets-asset-manager-settings-node.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir fassets-settings-ftso\ncd fassets-settings-ftso\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Defining FastUpdateFeeds Event in Solidity\nDESCRIPTION: Defines the `FastUpdateFeeds` event within the `IFastUpdater` interface. Emitted at the start of each new voting epoch, this event provides the epoch ID (`votingEpochId`) along with the current values (`feeds`) and decimals (`decimals`) for all tracked feeds.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdater.md#2025-04-22_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nevent FastUpdateFeeds(\n    uint256 votingEpochId,\n    uint256[] feeds,\n    int8[] decimals\n)\n```\n\n----------------------------------------\n\nTITLE: Community Allocation Table in Markdown\nDESCRIPTION: Breakdown of token allocation for community entities including delegation and voting rights.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/support/flr.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Entity                         | Total FLR Allocation              | Can Delegate | Can Claim the FlareDrop | Can Vote |\n| ------------------------------ | --------------------------------- | ------------ | ----------------------- | -------- |\n| **Flare Foundation (FF)**      | 9,787,578,628<br/>(9.8 billion)   | NO           | NO                      | NO       |\n| **Initial Token Distribution** | 4,278,738,206<br/>(4.3 billion)   | YES          | YES                     | YES      |\n| **FlareDrop**                  | 24,246,183,166<br/>(24.2 billion) | YES          | YES                     | YES      |\n| **Incentive Pool**             | 20,000,000,000<br/>(20 billion)   | YES          | YES                     | YES      |\n| **Subtotal**                   | 58.3 billion FLR                  |              |                         |          |\n```\n\n----------------------------------------\n\nTITLE: Configuring FAssets Agent\nDESCRIPTION: Command to run a script that populates the configuration file for the FAssets agent.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/1-deploy-fassets-agent.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./populate_config.sh\n```\n\n----------------------------------------\n\nTITLE: Terraform firewall configuration for node peering\nDESCRIPTION: Terraform resource that configures a firewall rule to allow external traffic from other peers in the network to access the node on port 9651.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/4-GCP-marketplace-nodes.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"google_compute_firewall\" \"peering\" {\n  project = var.gcp_project_name\n  name    = \"flare-example-peering-tcp\"\n  network = \"default\"\n\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"9651\"]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags   = [\"flare-example-peering\"]\n  priority      = \"600\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose for Flare Node\nDESCRIPTION: Command to run the Docker Compose configuration in detached mode, starting the Flare observer node as a background service.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f /opt/observer/docker-compose.yaml up -d\n```\n\n----------------------------------------\n\nTITLE: Handling Redemption Defaults with User Bot CLI\nDESCRIPTION: Handles situations where an agent fails to deliver the underlying asset during redemption. Requires the request ID (`<requestId>`) of the failed redemption as an argument and the FAsset symbol (via the required `--fasset` flag). The optional `--noWait` flag exits immediately if non-payment proof isn't available, otherwise waits.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/user-bot.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nyarn user-bot redemptionDefault <requestId>\n```\n\n----------------------------------------\n\nTITLE: Configuring Contract Addresses in TypeScript\nDESCRIPTION: This TypeScript snippet defines and exports configuration variables for the Proof-of-Reserves example. It includes a hardcoded owner address, Maps (`tokenAddresses`, `readerAddresses`) storing deployed contract addresses keyed by network name ('coston', 'coston2'), and the address of the `ProofOfReserves` contract (deployed only on one network). These exported values are intended for use in other Hardhat scripts.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript title=\"scripts/proofOfReserves/config.ts\"\nconst owner = \"0xF5488132432118596fa13800B68df4C0fF25131d\";\n\nconst tokenAddresses = new Map([\n  [\"coston\", \"0xb979de129aFA8bBEC5d46314588B573aD9C72db6\"],\n  [\"coston2\", \"0xfc896CD7115dD2E901a573d11A598d9c8222f58A\"],\n]);\n\nconst readerAddresses = new Map([\n  [\"coston\", \"0x16A446c2Bf18421c5d79a21f7Cc3636dFfDB0612\"],\n  [\"coston2\", \"0xD069D5c27211229afdCc173F2a46cc4aFb320911\"],\n]);\n\nconst proofOfReservesAddress = \"0xCe109FE40e1860b7B659DA6C680E931b25d4E445\";\n\n...\n\nexport {\n  owner,\n  tokenAddresses,\n  readerAddresses,\n  proofOfReservesAddress,\n  ...\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining ConfirmedBlockHeightExists Interface in Solidity\nDESCRIPTION: This Solidity code defines the interface for the ConfirmedBlockHeightExists attestation type. It includes structures for requests, responses, and proofs, as well as detailed comments explaining each component.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/confirm-block-height.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name ConfirmedBlockHeightExists\n * @custom:id 0x03\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\n * @author Flare\n * @notice An assertion that a block with `blockNumber` is confirmed.\n * It also provides data to compute the block production rate in the given time range.\n * @custom:verification It is checked that the block with `blockNumber` is confirmed by at least `numberOfConfirmations`.\n * If it is not, the request is rejected. We note a block on the tip of the chain is confirmed by 1 block.\n * Then `lowestQueryWindowBlock` is determined and its number and timestamp are extracted.\n *\n *\n *  Current confirmation heights consensus:\n *\n *\n * | `Chain` | `chainId` | `numberOfConfirmations` | `timestamp ` |\n * | ------- | --------- | ----------------------- | ------------ |\n * | `BTC`   | 0         | 6                       | mediantime   |\n * | `DOGE`  | 2         | 60                      | mediantime   |\n * | `XRP`   | 3         | 3                       | close_time   |\n *\n *\n *\n *\n * @custom:lut `lowestQueryWindowBlockTimestamp`\n */\ninterface ConfirmedBlockHeightExists {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response as defined.\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the Data Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for ConfirmedBlockHeightExistsType attestation type\n     * @param blockNumber The number of the block the request wants a confirmation of.\n     * @param queryWindow The length of the period in which the block production rate is to be computed.\n     */\n    struct RequestBody {\n        uint64 blockNumber;\n        uint64 queryWindow;\n    }\n\n    /**\n     * @notice Response body for ConfirmedBlockHeightExistsType attestation type\n     * @custom:below `blockNumber`, `lowestQueryWindowBlockNumber`, `blockTimestamp` and `lowestQueryWindowBlockTimestamp` can be used to compute the average block production time in the specified block range.\n     * @param blockTimestamp The timestamp of the block with `blockNumber`.\n     * @param numberOfConfirmations The depth at which a block is considered confirmed depending on the chain. All attestation providers must agree on this number.\n     * @param lowestQueryWindowBlockNumber The block number of the latest block that has a timestamp strictly smaller than `blockTimestamp` - `queryWindow`.\n     * @param lowestQueryWindowBlockTimestamp The timestamp of the block at height `lowestQueryWindowBlockNumber`.\n     */\n    struct ResponseBody {\n        uint64 blockTimestamp;\n        uint64 numberOfConfirmations;\n        uint64 lowestQueryWindowBlockNumber;\n        uint64 lowestQueryWindowBlockTimestamp;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing go-ethereum Dependency via go get\nDESCRIPTION: Installs the Go Ethereum client library (ethclient) using the 'go get' command, necessary for interacting with the Flare network in Go.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/query-feed-configuration.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/ethereum/go-ethereum/ethclient\n```\n\n----------------------------------------\n\nTITLE: Accessing FlareSystemsManager via Helpers - TypeScript\nDESCRIPTION: This async function retrieves the FlareSystemsManager contract by first deploying or connecting to the Helpers contract, calling its getFlareSystemsManager() method to acquire the target contract address, and returning an at-instance. No input parameters are required, and callers must provide correct artifacts and ensure proper network/contract deployment. Used as a dependency for time calculations and epoch operations in Flare networks.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getFlareSystemsManager() {\\n  const helpers: HelpersInstance = await getHelpers();\\n  const flareSystemsManagerAddress: string =\\n    await helpers.getFlareSystemsManager();\\n  return await FlareSystemsManager.at(flareSystemsManagerAddress);\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Installing web3.js via yarn - Bash\nDESCRIPTION: This command installs web3.js using yarn, an alternative JavaScript package manager to npm. Requires yarn to be installed. Installs 'web3' as a project dependency for JavaScript or Node.js projects.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-javascript-developers.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Authentication for Ethereum Node\nDESCRIPTION: This command creates a JWT hex token required for secure authentication between the Ethereum execution and consensus clients.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -hex 32 > nodes-mainnet/eth/jwt.hex\n```\n\n----------------------------------------\n\nTITLE: Implementing RNatAccountCreated Event in Solidity\nDESCRIPTION: Event emitted when a new RNat account is created.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IRNat.md#2025-04-22_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nevent RNatAccountCreated(\n    address owner,\n    contract IRNatAccount rNatAccount\n)\n```\n\n----------------------------------------\n\nTITLE: Composing FDC Data and Proof Retrieval Request - TypeScript\nDESCRIPTION: Orchestrates the call to retrieveDataAndProofBase with the correct DA Layer endpoint for proof-by-request-round-raw. Sets up the URL and passes ABI-encoded request and round ID. Serves as an entry point for address validity proof requests. Assumes presence of COSTON2_DA_LAYER_URL and retrieveDataAndProofBase.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/address-validity.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nasync function retrieveDataAndProof(\n  abiEncodedRequest: string,\n  roundId: number,\n) {\n  const url = `${COSTON2_DA_LAYER_URL}api/v1/fdc/proof-by-request-round-raw`;\n  console.log(\"Url:\", url, \"\\n\");\n  return await retrieveDataAndProofBase(url, abiEncodedRequest, roundId);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Flare Relay Contract - TypeScript\nDESCRIPTION: Provides a helper function 'getRelay' to obtain a reference to the Flare 'Relay' smart contract instance. Utilizes 'getHelpers' to retrieve the relay address and returns the contract instance via 'IRelay.at'. Dependency on contract abstractions and relevant web3 libraries is assumed. Output is an initialized contract instance for querying round finalization or other methods.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getRelay() {\n  const helpers: HelpersInstance = await getHelpers();\n  const relayAddress: string = await helpers.getRelay();\n  return await IRelay.at(relayAddress);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring FTSO Configuration Getter Function - Solidity\nDESCRIPTION: Defines the external view function getFtsoConfiguration, which retrieves a single FTSO configuration struct given an index value. The function requires a uint256 parameter _index and returns a FtsoConfiguration struct. Implementations should ensure index bounds are handled. No dependencies beyond the definition of IFtsoInflationConfigurations.FtsoConfiguration are required.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/solidity-reference/IFtsoInflationConfigurations.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getFtsoConfiguration(\n    uint256 _index\n) external view returns (\n    struct IFtsoInflationConfigurations.FtsoConfiguration\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Blockchain Confirmation Data in Markdown Table\nDESCRIPTION: This markdown table presents a comparison of confirmation depths and times for Bitcoin, Dogecoin, and XRPL blockchains. It includes chain IDs, required confirmations, and approximate confirmation times for each network.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/attestation-types/_finality.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Chain    | `chainId` | Confirmations required | Confirmation time |\n| -------- | --------- | ---------------------- | ----------------- |\n| Bitcoin  | 0         | 6                      | ≈60 mins          |\n| Dogecoin | 2         | 60                     | ≈60 mins          |\n| XRPL     | 3         | 3                      | ≈12 seconds       |\n```\n\n----------------------------------------\n\nTITLE: Logging into GitHub Container Registry\nDESCRIPTION: Command to authenticate with the GitHub Container Registry for pulling Docker images.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/1-deploy-fassets-agent.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker login ghcr.io\n```\n\n----------------------------------------\n\nTITLE: Defining DataTransportObject ABI Signature in TypeScript\nDESCRIPTION: Defines the ABI signature for the DataTransportObject type used to encode reserve data. This structure is copied from the Hardhat-generated artifact of the abiSignatureHack function in the ProofOfReserves contract.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n`{\n\\\"components\\\": \n  [{\n    \\\"internalType\\\": \\\"uint256\\\",\n    \\\"name\\\": \\\"reserves\\\",\n    \\\"type\\\": \\\"uint256\\\"\n  }],\n\\\"internalType\\\": \\\"struct DataTransportObject\\\",\n\\\"name\\\": \\\"dto\\\",\n\\\"type\\\": \\\"tuple\\\"\n}`;\n```\n\n----------------------------------------\n\nTITLE: Starting node services with nodectl\nDESCRIPTION: Command to apply and start all services configured in the node's configuration file. This is used after deployment to initialize the blockchain node.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/4-GCP-marketplace-nodes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Applies all services configured in `/etc/<node_name>/config.yaml`\nsudo nodectl apply --target all\n```\n\n----------------------------------------\n\nTITLE: Generating FDC Configuration Files from Templates\nDESCRIPTION: This script generates the necessary configuration files for all verifiers in the FDC suite based on the values specified in the .env file.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n./generate-config.sh\n```\n\n----------------------------------------\n\nTITLE: Exporting FAsset Agent Private Keys in Bash\nDESCRIPTION: Uses the `agent-bot` script via yarn to export the private keys associated with the FAssets agent's underlying address. Requires the desired export file path as a parameter.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot exportPrivateKeys <exportFile>\n```\n\n----------------------------------------\n\nTITLE: Running TokenStateReader Deployment Script using Yarn and Hardhat\nDESCRIPTION: This shell command executes the `deployTokenStateReader.ts` Hardhat script using Yarn. It runs the script sequentially for the 'coston' and 'coston2' networks, deploying the `TokenStateReader` contract to both.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nyarn hardhat run scripts/proofOfReserves/deployTokenStateReader.ts --network coston \\\n&& yarn hardhat run scripts/proofOfReserves/deployTokenStateReader.ts --network coston2\n```\n```\n\n----------------------------------------\n\nTITLE: Defining getFeed with Voting Round Query in Solidity\nDESCRIPTION: Implements a view function to return a feed for a specific feed ID and a given voting round ID. This aids clients in fetching historical or round-specific feed data. Accepts _feedId (bytes21) and _votingRoundId (uint256), and returns the associated Feed structure.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/solidity-reference/IFtsoFeedPublisher.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getFeed(\n    bytes21 _feedId,\n    uint256 _votingRoundId\n) external view returns (\n    struct IFtsoFeedPublisher.Feed\n);\n```\n\n----------------------------------------\n\nTITLE: Returning Assets from Core Vault to Agent in Bash\nDESCRIPTION: Requests a transfer of underlying assets, specified in lots, from the core vault back to a specific FAsset agent vault using the `agent-bot` script via yarn. Requires the agent vault address and the number of lots.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot returnFromCoreVault <agentVaultAddress> <lots>\n```\n\n----------------------------------------\n\nTITLE: Installing alloy-rs Dependencies via Cargo\nDESCRIPTION: Installs the necessary Rust crates (alloy, eyre, tokio) using Cargo, enabling interaction with the Flare network and FTSO contracts using the alloy-rs library. Specific features are enabled for full functionality.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/query-feed-configuration.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncargo add alloy eyre tokio --features alloy/full,tokio/rt,tokio/rt-multi-thread,tokio/macros\n```\n\n----------------------------------------\n\nTITLE: Setting up Disk for RPC Node in Bash\nDESCRIPTION: Commands to prepare a disk for use with the RPC node, including creating a mount point, formatting the disk, and mounting it.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir /mnt/db\nsudo chown -R <user>:<user> /mnt/db\nsudo mkfs.ext4 -m 0 -E lazy_itable_init=0,lazy_journal_init=0,discard /dev/sdb\nsudo mount /dev/sdb /mnt/db\n```\n\n----------------------------------------\n\nTITLE: Declaring the Feed Data Structure in Solidity\nDESCRIPTION: Defines the Feed structure to encapsulate all relevant FTSO feed information: voting round id, feed id, value, participation rate (turnoutBIPS), and decimals. Used as the primary return and storage type for feed data across functions. Requires no dependencies outside this interface.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/solidity-reference/IFtsoFeedPublisher.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Feed {\n  uint32 votingRoundId;\n  bytes21 id;\n  int32 value;\n  uint16 turnoutBIPS;\n  int8 decimals;\n}\n```\n\n----------------------------------------\n\nTITLE: Confirming Submit Address Registration - Solidity\nDESCRIPTION: Confirms the registration of a submit address for a voter. The function is called by the submit address to finalize the assignment. Accepts the voter's address and does not return a value. Relies on prior proposal of submit address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction confirmSubmitAddressRegistration(\n    address _voter\n) external;\n```\n\n----------------------------------------\n\nTITLE: Querying FTSO Config with web3.py (Placeholder)\nDESCRIPTION: Python code example using web3.py to retrieve FTSOv2 feed configurations on the Flare Testnet Coston2. Requires a Python environment and the installed web3.py library.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/query-feed-configuration.mdx#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n{FtsoConfigWeb3Py}\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Container Status in Bash\nDESCRIPTION: Commands to check if the Docker container is running and to view its logs.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\ndocker logs flare-observer -f\n```\n\n----------------------------------------\n\nTITLE: Token Decimals Query\nDESCRIPTION: Returns the number of decimal places used by the token.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IRNat.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction decimals(\n) external view returns (\n    uint8\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Funds from P-chain to C-chain using Flare Stake Tool\nDESCRIPTION: This command imports funds from the P-chain to the C-chain using the Flare Stake Tool. It requires a Ledger device and uses blind signing.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/using-flare-stake-tool.mdx#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nflare-stake-tool transaction importPC --ledger --blind\n```\n\n----------------------------------------\n\nTITLE: Reward Epoch Property and Registration Getters - Flare Systems Manager Interface - Solidity\nDESCRIPTION: Defines interface methods for fetching current reward epoch data, threshold, block numbers, and voter registration states based on epoch identifiers. Methods accept a uint256 reward epoch id parameter and return various types (uint256, uint32, uint16, uint64, (uint256, bool)), supporting data-driven contract automation. Used by cross-contract logic and off-chain services to retrieve up-to-date protocol state efficiently.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IFlareSystemsManager.md#2025-04-22_snippet_2\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction getSeed(\n    uint256 _rewardEpochId\n) external view returns (\n    uint256\n);\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction getStartVotingRoundId(\n    uint256 _rewardEpochId\n) external view returns (\n    uint32\n);\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction getThreshold(\n    uint256 _rewardEpochId\n) external view returns (\n    uint16\n);\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction getVotePowerBlock(\n    uint256 _rewardEpochId\n) external view returns (\n    uint64 _votePowerBlock\n);\n```\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction getVoterRegistrationData(\n    uint256 _rewardEpochId\n) external view returns (\n    uint256 _votePowerBlock,\n    bool _enabled\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Feed IDs - Solidity\nDESCRIPTION: Provides the getFeedIds view function, which returns an array of bytes21 representing all feed IDs. For feeds that have been removed, bytes21(0) is included at their positions. This method enables enumeration over all possible feeds by index.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdatesConfiguration.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getFeedIds(\n) external view returns (\n    bytes21[]\n);\n```\n\n----------------------------------------\n\nTITLE: Exporting Private Keys via Docker Container\nDESCRIPTION: Docker Compose command to run the agent-bot container with mounted export volume, executing the exportPrivateKeys command for FXRP FAsset.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/6-export-private-keys.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose --profile cli run -v $(pwd)/export:/export agent-bot exportPrivateKeys /export/keys.tmp --fasset FXRP\n```\n\n----------------------------------------\n\nTITLE: Updating fstab for Persistent Mount in Bash\nDESCRIPTION: Commands to backup the original fstab file and add a new entry to ensure the device is mounted on system reboot.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo -i\ncp /etc/fstab /etc/fstab.backup\nfstab_entry=\"UUID=$(blkid -o value -s UUID /dev/sdb) /mnt/db ext4 discard,defaults 0 2\"\necho $fstab_entry >> /etc/fstab\nexit\n```\n\n----------------------------------------\n\nTITLE: Terraform compute instance configuration\nDESCRIPTION: Terraform resource that defines the compute instances for deploying blockchain nodes, including machine type, disk configuration, network settings, and service account permissions.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/4-GCP-marketplace-nodes.mdx#2025-04-22_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"google_compute_instance\" \"this\" {\n  for_each = local.replicas\n\n  project = var.gcp_project_name\n  name    = \"flare-node-example-replica-${each.key}\"\n  zone    = each.value.zone\n\n  machine_type = \"n2d-standard-4\"\n\n  metadata = {\n    startup-script = templatefile(\"${path.module}/templates/startup.sh\", {})\n    shutdown-script = templatefile(\"${path.module}/templates/shutdown.sh\", {})\n  }\n\n\n  boot_disk {\n    initialize_params {\n      image = each.value.image\n      type  = \"pd-balanced\"\n    }\n  }\n\n  network_interface {\n    network = \"default\"\n    access_config {\n      // Ephemeral public IP\n    }\n  }\n\n  tags = google_compute_firewall.peering.target_tags\n\n  service_account {\n    email  = google_service_account.this.email\n    scopes = [\"cloud-platform\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest FAssets Agent Docker Containers\nDESCRIPTION: Command to fetch the most recent versions of the FAssets agent Docker containers from the registry.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/1-deploy-fassets-agent.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose pull\n```\n\n----------------------------------------\n\nTITLE: Self-Closing FAsset Position\nDESCRIPTION: Command to reduce the FAsset agent's obligations by burning FAssets and releasing the equivalent amount of underlying assets and/or collateral.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot selfClose <agentVaultAddress> <amount>\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install required dependencies including TypeScript, TypeChain, Ethers.js, and Flare Periphery Contract Artifacts.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/developer-guides/1-fassets-asset-manager-settings-node.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev \\\n  typescript \\\n  typechain \\\n  ethers \\\n  @typechain/ethers-v6 \\\n  @flarenetwork/flare-periphery-contract-artifacts\n```\n\n----------------------------------------\n\nTITLE: Example Output of Successful Forge Tests - Plaintext\nDESCRIPTION: Shows sample console output from a successful test run with Foundry. Includes test results for each test case, showing passed tests, gas usage, logs, and a summary. Used to confirm correctness and successful execution of the contract and tests.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/build-first-app.mdx#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n[\\u259A] Compiling...\\n[\\u2598] Compiling 27 files with Solc 0.8.27\\n[\\u2803] Solc 0.8.27 finished in 797.51ms\\nCompiler run successful!\\n\\nRan 2 tests for test/FtsoV2FeedConsumer.t.sol:FtsoV2FeedConsumerTest\\n[PASS] testCheckFees() (gas: 21085)\\n[PASS] testGetFlrUsdPrice() (gas: 25610)\\nLogs:\\n  msg.value matches fee\\n  feedValue 150000\\n  decimals 7\\n  timestamp 1\\n\\nSuite result: ok. 2 passed; 0 failed; 0 skipped; finished in 7.72ms (2.91ms CPU time)\\n\\nRan 1 test suite in 122.65ms (7.72ms CPU time): 2 tests passed, 0 failed, 0 skipped (2 total tests)\n```\n\n----------------------------------------\n\nTITLE: UTF8 Hex Encoding Functions\nDESCRIPTION: Utility functions for converting strings to UTF8 hex format and padding them to 32 bytes, used in request preparation.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/evm-transaction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toHex(data: string) {\n  var result = \"\";\n  for (var i = 0; i < data.length; i++) {\n    result += data.charCodeAt(i).toString(16);\n  }\n  return result.padEnd(64, \"0\");\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toUtf8HexString(data: string) {\n  return \"0x\" + toHex(data);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OP_RETURN Script for Bitcoin and Dogecoin Standard Payment Reference\nDESCRIPTION: This snippet shows the structure of an OP_RETURN script used in Bitcoin and Dogecoin transactions to include a standard payment reference. The reference must be exactly 32 bytes long.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/attestation-types/_standard_payment_reference.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nOP_RETURN <reference>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n6a<lengthOfReferenceInHex><reference>\n```\n\n----------------------------------------\n\nTITLE: Installing web3.py Dependency via pip\nDESCRIPTION: Installs the web3.py library using the 'pip' package manager, enabling interaction with the Flare network and FTSO contracts in Python.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/query-feed-configuration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install web3\n```\n\n----------------------------------------\n\nTITLE: Querying Latest BlockNumber via RPC - Coston2 Testnet - alloy-rs Rust\nDESCRIPTION: Rust snippet for alloy-rs to connect and query Coston2 Testnet's latest block number via the \\\"eth_blockNumber\\\" method. Prerequisites are alloy-rs libraries and the correct RPC endpoint string. The output is the parsed block number.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/0-overview.mdx#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n{BlockNumCoston2Rs}\n```\n\n----------------------------------------\n\nTITLE: First Month Start Timestamp Query\nDESCRIPTION: Returns the timestamp marking the start of the first month.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IRNat.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction firstMonthStartTs(\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Network-Specific Contract Tables Using SolidityReference - React/MDX\nDESCRIPTION: Dynamically renders SolidityReference React components in different tabs to display contract addresses for Flare mainnet, testnets, and the Songbird network. Each TabItem passes a unique network identifier along with the shared contracts array to retrieve relevant addresses. Assumes components from @theme and @site are available, and that contracts is previously defined and correctly populated.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/6-solidity-reference.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Tabs block>\n    <TabItem value=\"flare\" label=\"Flare Mainnet\" default>\n\n        <SolidityReference\n            network=\"FlareMainnet\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n    <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\">\n\n        <SolidityReference\n            network=\"FlareTestnetCoston2\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n    <TabItem value=\"songbird\" label=\"Songbird Canary-Network\">\n\n        <SolidityReference\n            network=\"SongbirdCanaryNetwork\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n    <TabItem value=\"coston\" label=\"Songbird Testnet Coston\">\n\n\n        <SolidityReference\n            network=\"SongbirdTestnetCoston\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Offchain Data for Merkle Trees via API\nDESCRIPTION: Defines the GET API endpoint used to retrieve offchain data required for constructing Merkle trees for a specific voting round. This data is used by sub-protocols. Requires the `votingRoundID` parameter.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/4-offchain-services.mdx#2025-04-22_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET /data/:votingRoundID\n```\n\n----------------------------------------\n\nTITLE: Activating TokenStateReader Contract with Hardhat in TypeScript\nDESCRIPTION: This Hardhat script interacts with previously deployed contracts. It imports addresses from the `config.ts` file, retrieves the appropriate `MyStablecoin` and `TokenStateReader` addresses based on the target network specified during execution, gets contract instances using Truffle artifacts, and calls the `broadcastTokenSupply` method on the `TokenStateReader` instance, passing the token's address. The transaction hash of this call is logged.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript title=\"scripts/proofOfReserves/activateTokenStateReader.ts\"\nimport hre from \"hardhat\";\nimport { MyStablecoinInstance } from \"../../typechain-types\";\nimport { TokenStateReaderInstance } from \"../../typechain-types\";\n\nimport { tokenAddresses, readerAddresses } from \"./config\";\n\nconst MyStablecoin = artifacts.require(\"MyStablecoin\");\nconst TokenStateReader = artifacts.require(\"TokenStateReader\");\n\n\nasync function main() {\n  const network = hre.network.name;\n  const tokenAddress = tokenAddresses.get(network);\n  const readerAddress = readerAddresses.get(network);\n  );\n\n  const transaction = await reader.broadcastTokenSupply(tokenAddress);\n  console.log(`(${network}) Transaction id:`, transaction.tx, \"\\n\");\n}\n\nmain().then((data) => {\n  process.exit(0);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Request Struct for Address Validity Verification in Solidity\nDESCRIPTION: Defines the top-level request structure used to verify address validity on external blockchains. Contains attestationType (0x05 for AddressValidity), sourceId (blockchain identifier), messageIntegrityCode, and the requestBody containing the address to verify.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IAddressValidity.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Request {\n    bytes32 attestationType;\n    bytes32 sourceId;\n    bytes32 messageIntegrityCode;\n    RequestBody requestBody;\n}\n```\n\n----------------------------------------\n\nTITLE: Copying FAssets Agent Secrets File\nDESCRIPTION: Command to create the final secrets file from the newly generated one for the FAssets agent.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/1-deploy-fassets-agent.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncp secrets.new.json secrets.json\n```\n\n----------------------------------------\n\nTITLE: XRPL Base58 Dictionary Implementation\nDESCRIPTION: The custom Base58 dictionary used by the XRP Ledger for address encoding.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/attestation-types/_addresses.mdx#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nrpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz\n```\n\n----------------------------------------\n\nTITLE: Querying Latest BlockNumber via RPC - Songbird Canary-Network - alloy-rs Rust\nDESCRIPTION: This Rust code (alloy-rs) demonstrates querying Songbird Canary-Network's latest block using the \\\"eth_blockNumber\\\" JSON-RPC method. Requires alloy-rs and the network RPC endpoint; output is the block number.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/0-overview.mdx#2025-04-22_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\n{BlockNumSongbirdRs}\n```\n\n----------------------------------------\n\nTITLE: Checking RPC Node Health in Bash\nDESCRIPTION: Command to check the health status of the RPC node via its HTTP endpoint.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:9650/ext/health | jq\n```\n\n----------------------------------------\n\nTITLE: Executing FAssets User Bot Commands\nDESCRIPTION: Example command to retrieve FAsset system information using the user-bot Docker container.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/1-deploy-fassets-agent.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose --profile cli run user-bot info --fasset FASSET\n```\n\n----------------------------------------\n\nTITLE: Configuring API Notifier in JSON for FAssets Agent Bot\nDESCRIPTION: This JSON snippet shows how to configure the apiNotifierConfigs in the config.json file for the FAssets agent bot. It specifies the API URL, API key, and notification level.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/7-agent-bot-notifications.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiUrl\": \"NOTIFICATIONS_API_URL\",\n  \"apiKey\": \"API_KEY\",\n  \"level\": \"danger\"\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Foundry Environment Example File - Bash\nDESCRIPTION: Use this command to duplicate the .env.example file to .env for configuring secret credentials required in Foundry projects. It is mandatory to update this file with your own private key and other environment-specific settings. No parameters are required; outputs a new .env file.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/hardhat-foundry-starter-kit.mdx#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Defining Minimal Reward Offer Value Set Event in Solidity\nDESCRIPTION: Defines the `MinimalRewardsOfferValueSet` event signature within the `IFtsoRewardOffersManager` interface. This event signals that the administrative parameter defining the minimum acceptable value for reward offers (`valueWei`) has been updated.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/solidity-reference/IFtsoRewardOffersManager.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nevent MinimalRewardsOfferValueSet(\n    uint256 valueWei\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Next Claimable Epoch ID in Solidity\nDESCRIPTION: View function that returns the next claimable reward epoch for a specific reward owner.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/RewardsV2Interface.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getNextClaimableRewardEpochId(\n    address _rewardOwner\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Terraform configuration for image replicas\nDESCRIPTION: Terraform locals block that defines multiple replicas of Flare nodes in different regions, specifying the image source and zone for each replica.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/4-GCP-marketplace-nodes.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  replicas = {\n    1 = {\n      # update here\n      image = \"projects/mpi-flare-public/global/images/flare---v1-...\"\n      zone  = \"europe-west1-c\"\n    },\n    2 = {\n      # update here\n      image = \"projects/mpi-flare-public/global/images/flare---v1-...\"\n      zone  = \"us-west1-a\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Wallet Generation Output (Plaintext)\nDESCRIPTION: Shows the typical output format after running `cast wallet new`, displaying the newly generated wallet address and its corresponding private key. This information is needed for subsequent steps.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/build-first-app.mdx#2025-04-22_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nSuccessfully created new keypair.\nAddress:     0x3f6BdD26f2AE4e77AcDfA1FA24B2774ed93984B4\nPrivate key: 0x84cf77b009a92777f75b49864e4166ddcaf8f3f5f119a19b226ab362a0cf7bf5\n```\n\n----------------------------------------\n\nTITLE: Generating Go ABI Bindings for FlareContractRegistry - Bash\nDESCRIPTION: This snippet uses the abigen command to generate Go bindings from a Solidity ABI file for the FlareContractRegistry contract, targeting either the testnet or mainnet package paths. Required dependencies are abigen (part of go-ethereum), a valid ABI file, and a Go project folder. The command generates Go files for contract interaction. Inputs are the ABI file and intended package structure; outputs are Go source files.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-go-developers.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nabigen --abi FlareContractRegistry.abi --pkg coston2 --type FlareContractRegistry --out coston2/FlareContractRegistry.go\\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nabigen --abi FlareContractRegistry.abi --pkg flare --type FlareContractRegistry --out flare/FlareContractRegistry.go\\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Score Cutoff in Solidity\nDESCRIPTION: Defines the `blockScoreCutoff` view function in the `IFastUpdater` interface. It takes a block number (`_blockNum`) and returns the score cutoff (`_cutoff`) for sortition eligibility in that specific block. A score below this cutoff indicates a provider's eligibility to submit updates for that block's sortition round.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdater.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction blockScoreCutoff(\n    uint256 _blockNum\n) external view returns (\n    uint256 _cutoff\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with uv or pip - Bash\nDESCRIPTION: These bash commands install the necessary Python dependencies (web3 and py-solc-x) using either the 'uv' or 'pip' package manager. 'uv' is an alternative fast Python package manager, while 'pip' is Python's standard. Run in shell before running Python scripts for blockchain interaction.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-python-developers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv add web3 py-solc-x\\n\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install web3 py-solc-x\\n\n```\n\n----------------------------------------\n\nTITLE: Querying Latest BlockNumber via RPC - Coston2 Testnet - web3.py Python\nDESCRIPTION: A web3.py Python snippet to connect to Coston2 Testnet's RPC endpoint for obtaining the latest Ethereum block number using the \\\"eth_blockNumber\\\" method. Requires web3.py installed. Input is the HTTP/S endpoint; output is the block number as integer. Intended for automation or data retrieval scripts.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/0-overview.mdx#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n{BlockNumCoston2Py}\n```\n\n----------------------------------------\n\nTITLE: Installing Flare Stake Tool CLI with npm\nDESCRIPTION: Command to install the Flare stake tool globally using npm package manager.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/using-flare-stake-tool.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @flarenetwork/flare-stake-tool -g\n```\n\n----------------------------------------\n\nTITLE: Querying Latest BlockNumber via RPC - Flare Mainnet - alloy-rs Rust\nDESCRIPTION: This Rust snippet targets the alloy-rs Ethereum library to connect with the Flare Mainnet RPC endpoint and call \\\"eth_blockNumber\\\". Requires alloy-rs setup and the endpoint URL. Key parameter is the RPC endpoint string, and the response is parsed to get the current block number. Used for Rust-based Ethereum/Flare tooling.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/0-overview.mdx#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n{BlockNumFlareRs}\n```\n\n----------------------------------------\n\nTITLE: UnclaimedRewardState Struct for Reward Management - Solidity Interface\nDESCRIPTION: Declares the 'UnclaimedRewardState' struct, storing details about unclaimed rewards, such as initialization flag, amount, and weight integral to weighted claim processing. Used when querying or aggregating unclaimed states in the contract logic.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRewardManager.md#2025-04-22_snippet_23\n\nLANGUAGE: solidity\nCODE:\n```\nstruct UnclaimedRewardState {\n  bool initialised;\n  uint120 amount;\n  uint128 weight;\n}\n```\n\n----------------------------------------\n\nTITLE: RewardState Structure Definition in Solidity\nDESCRIPTION: Structure definition used for returning state of rewards, including epoch ID, beneficiary, amount, claim type, and initialization status.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/RewardsV2Interface.md#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nstruct RewardState {\n  uint24 rewardEpochId;\n  bytes20 beneficiary;\n  uint120 amount;\n  enum RewardsV2Interface.ClaimType claimType;\n  bool initialised;\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Flare Stake Tool Installation\nDESCRIPTION: Command to verify the successful installation of the Flare stake tool by displaying the tool's banner and version information.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/using-flare-stake-tool.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflare-stake-tool\n```\n\n----------------------------------------\n\nTITLE: Dogecoin Base58 Address Structure\nDESCRIPTION: The format structure for decoded Dogecoin Base58 addresses showing the components.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/attestation-types/_addresses.mdx#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n<leadingByte><hash><checksum>\n```\n\n----------------------------------------\n\nTITLE: Installing Node Dependencies\nDESCRIPTION: Command to install all required Node.js project dependencies using npm package manager.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/examples/developer-hub-javascript/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Checking Validator List on Flare Network\nDESCRIPTION: This command retrieves the current list of validators on the Flare network and saves it to a file named validators.txt for review.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/using-flare-stake-tool.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nflare-stake-tool info validators > validators.txt\n```\n\n----------------------------------------\n\nTITLE: Updating Package Configuration for TypeScript Build and Type Generation\nDESCRIPTION: Package.json configuration to add scripts for TypeScript build and type generation using TypeChain.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/developer-guides/1-fassets-asset-manager-settings-node.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"build\": \"tsc\",\n  \"generate-types\": \"typechain --target ethers-v6 --out-dir typechain './node_modules/@flarenetwork/flare-periphery-contract-artifacts/coston/artifacts/contracts/**/*.json'\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Address Validity Attestation Script in TypeScript\nDESCRIPTION: Main script structure for validating blockchain addresses using FDC, outlining the complete process from request preparation to contract interaction.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/address-validity.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { run, web3 } from \"hardhat\";\nimport { AddressRegistryInstance } from \"../../typechain-types\";\nimport {\n  prepareAttestationRequestBase,\n  submitAttestationRequest,\n  retrieveDataAndProofBase,\n} from \"./Base\";\n\nconst AddressRegistry = artifacts.require(\"AddressRegistry\");\n\nconst { VERIFIER_URL_TESTNET, VERIFIER_API_KEY, COSTON2_DA_LAYER_URL } =\n  process.env;\n\n...\n\nasync function main() {\n  const data = await prepareAttestationRequest(addressStr);\n  console.log(\"Data:\", data, \"\\n\");\n\n  const abiEncodedRequest = data.abiEncodedRequest;\n  const roundId = await submitAttestationRequest(abiEncodedRequest);\n\n  const proof = await retrieveDataAndProof(abiEncodedRequest, roundId);\n\n  const addressRegistry: AddressRegistryInstance =\n    await deployAndVerifyContract();\n\n  await interactWithContract(addressRegistry, proof);\n}\n\nmain().then((data) => {\n  process.exit(0);\n});\n\n```\n\n----------------------------------------\n\nTITLE: Installing go-ethereum Client\nDESCRIPTION: Go command to install ethereum client package for Flare network interaction\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/secure-random-numbers.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/ethereum/go-ethereum/ethclient\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Go Implementation\nDESCRIPTION: Directory structure for Go implementation showing required files and folders\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/secure-random-numbers.mdx#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\ndeveloper-hub-go/\n├── coston2/\n│   └── *.go\n├── flare/\n│   └── *.go\n├── main.go\n├── go.mod\n└── go.sum\n```\n\n----------------------------------------\n\nTITLE: Switching Vault Collateral\nDESCRIPTION: Command to switch the vault collateral to a new token, with an option to automatically deposit equivalent tokens.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot switchVaultCollateral <agentVaultAddress> <token>\n```\n\n----------------------------------------\n\nTITLE: Running Address Validity Script\nDESCRIPTION: Command to execute the address validity verification script using Hardhat.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/address-validity.mdx#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nyarn hardhat run scripts/fdcExample/AddressValidity.ts\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node ID from Local Validator\nDESCRIPTION: cURL command to retrieve the node ID from a locally running validator by querying the node's info endpoint.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/using-flare-stake-tool.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:9650/ext/info' --header 'Content-Type: application/json' --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }'\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys for Custom Infrastructure in secrets.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates the structure of the `secrets.json` file used by the FAsset bot. Users must replace placeholder API keys (\"Your API key\", \"Flare API key\", \"your Songbird API key\") with their actual keys corresponding to the custom indexer/verifier, data access layer, and native RPC URLs specified in `config.json`. The order of keys in the arrays must match the order of URLs in `config.json`. Currently, only one RPC URL and key is supported.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/8-infrastructure.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"indexer\": [\"Your API key\", \"Flare API key\"],\n  \"data_access_layer\": [\"Your API key\", \"Flare API key\"],\n  \"native_rpc\": \"your Songbird API key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Authentication Password for Dogecoin Node\nDESCRIPTION: Similar to the Bitcoin setup, this generates authentication credentials for a Dogecoin node in the FDC suite.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd nodes-mainnet/doge\n./generate-password.sh\n```\n\n----------------------------------------\n\nTITLE: Feed Configuration Struct Definition - Solidity\nDESCRIPTION: Defines the FeedConfiguration structure, grouping together feedId (bytes21), rewardBandValue (uint32), and inflationShare (uint24). Used as the data type in configuration arrays and feed mapping, enabling structured access to feed properties.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdatesConfiguration.md#2025-04-22_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nstruct FeedConfiguration {\n  bytes21 feedId;\n  uint32 rewardBandValue;\n  uint24 inflationShare;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Contracts in Solidity\nDESCRIPTION: Function that returns all registered contract names and their corresponding addresses. This provides a complete view of all contracts in the registry with their respective addresses.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IFlareContractRegistry.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getAllContracts(\n) external view returns (\n    string[] _names,\n    address[] _addresses);\n```\n\n----------------------------------------\n\nTITLE: Depositing Vault Collateral Separately\nDESCRIPTION: Command to deposit vault collateral (stablecoin or wrapped ETH) to an agent's vault, specifying the agent address and amount.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/3-create-fasset-agent-cli.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose --profile cli run agent-bot depositVaultCollateral AGENT_ADDRESS AMOUNT --fasset FASSET\n```\n\n----------------------------------------\n\nTITLE: Bitcoin Base58 Dictionary Implementation\nDESCRIPTION: The character set used for Bitcoin's Base58 address encoding format.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/attestation-types/_addresses.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\n```\n\n----------------------------------------\n\nTITLE: Rendering OpenAPI Documentation with Tabs in React\nDESCRIPTION: This code snippet uses React components to render a tabbed interface for displaying OpenAPI documentation. It includes tabs for Flare Mainnet, Songbird Canary-Network, Songbird Testnet Coston, and Flare Testnet Coston2.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/data-availability-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs block>\n  <TabItem\n    value=\"base\"\n    label=\"Flare Mainnet, Songbird Canary-Network & Songbird Testnet Coston\"\n  >\n    <OpenApiDoc url=\"openapi/data-availability-api.yaml\" />\n  </TabItem>\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\">\n    <OpenApiDoc url=\"openapi/ctn2-data-availability-api.yaml\" />\n  </TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Executes tests for the coston2 and flare packages with verbose output.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/examples/developer-hub-go/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./coston2 -v\ngo test ./flare -v\n```\n\n----------------------------------------\n\nTITLE: Freeing Pool Collateral\nDESCRIPTION: Command to free pool collateral by specifying the agent vault address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot freePoolCollateral <agentVaultAddress>\n```\n\n----------------------------------------\n\nTITLE: Run FAssets Redemption Script\nDESCRIPTION: Command to execute the FAssets redemption script using Hardhat on the Coston network.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/developer-guides/3-fassets-redeem.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat run scripts/fassets/getLotSize.ts --network coston\n```\n\n----------------------------------------\n\nTITLE: Viewing EVM Transaction Attestation Result (With Event)\nDESCRIPTION: Example JSON response from the Flare State Connector for an EVM transaction attestation request where the transaction triggered an event. This response corresponds to transaction hash `0x7eb5...` sent to the `FallbackContract` on Sepolia. The `responseBody.events` array contains the details of the emitted event, including its topics and data, which can be decoded and used on the Flare network.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-connectivity.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"VALID\",\n  \"response\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"0\",\n    \"lowestUsedTimestamp\": \"1708907712\",\n    \"requestBody\": {\n      \"transactionHash\": \"0x7eb54cde238fc700be31c98af7e4df8c4fc96fd5c634c490183ca612a481efcc\",\n      \"requiredConfirmations\": \"1\",\n      \"provideInput\": true,\n      \"listEvents\": true,\n      \"logIndices\": []\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5363672\",\n      \"timestamp\": \"1708907712\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0xeBBf567beDe2D8842dF538Cf64E0bE9976183853\",\n      \"value\": \"10\",\n      \"input\": \"0x9876543210\",\n      \"status\": \"1\",\n      \"events\": [\n        {\n          \"logIndex\": \"160\",\n          \"emitterAddress\": \"0xeBBf567beDe2D8842dF538Cf64E0bE9976183853\",\n          \"topics\": [\n            \"0xaca09dd456ca888dccf8cc966e382e6e3042bb7e4d2d7815015f844edeafce42\"\n          ],\n          \"data\": \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000059876543210000000000000000000000000000000000000000000000000000000\",\n          \"removed\": false\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Minimal Reward Offer Value in Solidity\nDESCRIPTION: Defines the `minimalRewardsOfferValueWei` function signature within the `IFtsoRewardOffersManager` interface. This external view function is intended to return the minimum acceptable value for a reward offer, specified in wei (uint256), without modifying the contract state.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/solidity-reference/IFtsoRewardOffersManager.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction minimalRewardsOfferValueWei(\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Deploying FTSO Instance with Docker Compose\nDESCRIPTION: Command to deploy the FTSO instance using the provided docker-compose.yaml file.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Running MyStablecoin Deployment Script using Yarn and Hardhat\nDESCRIPTION: This shell command executes the `deployToken.ts` Hardhat script using Yarn. It runs the script twice, first targeting the 'coston' network and then the 'coston2' network, ensuring the `MyStablecoin` contract is deployed and potentially verified on both specified networks.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/proof-of-reserves.mdx#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nyarn hardhat run scripts/proofOfReserves/deployToken.ts --network coston \\\n&& yarn hardhat run scripts/proofOfReserves/deployToken.ts --network coston2\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Reward Epoch to Expire Next - Solidity Interface\nDESCRIPTION: Implements 'getRewardEpochIdToExpireNext', a view function returning the id of the reward epoch set to expire upon next epoch transition. Used for lifecycle and cleanup routines; no parameters required.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRewardManager.md#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getRewardEpochIdToExpireNext(\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Defining FastUpdateFeedsSubmitted Event in Solidity\nDESCRIPTION: Defines the `FastUpdateFeedsSubmitted` event within the `IFastUpdater` interface. This event is emitted whenever a provider successfully submits a batch of updates via the `submitUpdates` function. It includes the relevant voting round ID (`votingRoundId`) and the submitter's signing policy address (`signingPolicyAddress`).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdater.md#2025-04-22_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nevent FastUpdateFeedsSubmitted(\n    uint32 votingRoundId,\n    address signingPolicyAddress\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Geth and Solidity Compiler on macOS/Linux - Bash\nDESCRIPTION: This snippet provides shell commands to install the Geth Ethereum client and the Solidity compiler on macOS via Homebrew and Ubuntu using PPAs. Prerequisites include a suitable system environment (macOS or Ubuntu), Homebrew (for macOS), or apt (for Ubuntu). Inputs are standard terminal commands and there are no programmatic outputs—success yields installed command-line executables. Both Geth (Go Ethereum) and solc (Solidity compiler) are required for contract interaction and development.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-go-developers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap ethereum/ethereum\\nbrew install ethereum solidity\\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo add-apt-repository -y ppa:ethereum/ethereum\\nsudo apt update\\nsudo apt install ethereum solc\\n\n```\n\n----------------------------------------\n\nTITLE: Deploying PaymentRegistry Contract via Forge CLI\nDESCRIPTION: Bash command to deploy the PaymentRegistry contract using Forge, with environment variables for private key and RPC URL.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nforge script script/fdcExample/Payment.s.sol:DeployContract --private-key $PRIVATE_KEY --rpc-url $COSTON2_RPC_URL --etherscan-api-key $FLARE_API_KEY --broadcast --verify --ffi\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version\nDESCRIPTION: This command displays the current version of Node.js installed on the system.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/using-flare-stake-tool.mdx#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\n```\n\n----------------------------------------\n\nTITLE: Setting EVM Version using solc CLI\nDESCRIPTION: This Bash command demonstrates how to specify the 'london' EVM version when compiling Solidity contracts using the `solc` command-line interface. The `--evm-version` flag is used followed by the desired version name.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/change-quote-feed.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolc --evm-version london <args>\n```\n\n----------------------------------------\n\nTITLE: Monitoring node logs\nDESCRIPTION: Commands for monitoring the blockchain node's logs in real-time using nodectl and reference to journalctl for advanced log options.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/4-GCP-marketplace-nodes.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo nodectl logs -f\n```\n\nLANGUAGE: bash\nCODE:\n```\nman journalctl\n```\n\n----------------------------------------\n\nTITLE: Querying Delegation Address at Specific Block - Solidity\nDESCRIPTION: Fetches the delegation address of a voter at a specified block number, supporting historical queries. Parameters include the voter's address and the block number. Returns the delegation address relevant at that block; suitable for applications tracking historical relationships.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getDelegationAddressOfAt(\n    address _voter,\n    uint256 _blockNumber\n) external view returns (\n    address\n);\n```\n\n----------------------------------------\n\nTITLE: XRPL Base58 Address Structure\nDESCRIPTION: The hexadecimal format structure for decoded XRPL addresses showing the components.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/attestation-types/_addresses.mdx#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n<leadingByte><publicKeyHash><checksum>\n```\n\n----------------------------------------\n\nTITLE: Installing web3.js via npm - Bash\nDESCRIPTION: This snippet installs web3.js, a JavaScript library for interacting with Ethereum-compatible blockchains, using npm as the package manager. Requires Node.js and npm to be installed. Installs 'web3' as a project dependency.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-javascript-developers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3\n```\n\n----------------------------------------\n\nTITLE: Querying Voter by Submit Address - Solidity\nDESCRIPTION: Yields the voter address linked to a particular submit address at a given block number. Input parameters are the submit address and the block number; output is an address. Enables tracking and validation of submit operations over time.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getVoterForSubmitAddress(\n    address _submitAddress,\n    uint256 _blockNumber\n) external view returns (\n    address _voter\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Available Commands with User Bot CLI (yarn)\nDESCRIPTION: Displays a list of all available commands and their descriptions for the FAssets user bot CLI using the `help` command with yarn. This helps users discover the available functionalities.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/user-bot.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn user-bot help\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Vault Collateral\nDESCRIPTION: Command to initiate the withdrawal of vault collateral, which will be automatically executed by the running bot later.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot withdrawVaultCollateral <agentVaultAddress> <amount>\n```\n\n----------------------------------------\n\nTITLE: Cloning Foundry Project Template using Git - Bash\nDESCRIPTION: Clones the Flare Foundry starter project repository for Solidity smart contracts and navigates into the folder. Requires Git to be installed. Prepares environment for dependency installation, compilation, and deployment using Foundry.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/hardhat-foundry-starter-kit.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/flare-foundation/flare-foundry-starter.git\\ncd flare-foundry-starter\n```\n\n----------------------------------------\n\nTITLE: Viewing EVM Transaction Attestation Result (No Event)\nDESCRIPTION: Example JSON response from the Flare State Connector for an EVM transaction attestation request. This specific response corresponds to a transaction (hash `0xac64...`) that involved a simple value transfer to an EOA on Sepolia and did not emit any relevant events. It shows the transaction details like sender, receiver, value, and confirms its validity (`\"status\": \"VALID\"`).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-connectivity.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"VALID\",\n  \"response\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"0\",\n    \"lowestUsedTimestamp\": \"1708907688\",\n    \"requestBody\": {\n      \"transactionHash\": \"0xac640ab047aa1097ddd473e5940921eb500a9912b33072b8532617692428830e\",\n      \"requiredConfirmations\": \"1\",\n      \"provideInput\": true,\n      \"listEvents\": true,\n      \"logIndices\": []\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5363670\",\n      \"timestamp\": \"1708907688\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0xFf02F742106B8a25C26e65C1f0d66BEC3C90d429\",\n      \"value\": \"10\",\n      \"input\": \"0x0123456789\",\n      \"status\": \"1\",\n      \"events\": []\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Executor Info in Solidity\nDESCRIPTION: Retrieves information about an executor, including registration status and current fee value.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_22\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getExecutorInfo(\n    address _executor\n) external view returns (\n    bool _registered,\n    uint256 _currentFeeValue);\n```\n\n----------------------------------------\n\nTITLE: Cloning Flare Systems Deployment Repository\nDESCRIPTION: Git command to clone the flare-systems-deployment repository, which contains the necessary configuration files for deploying the FTSO system.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/flare-foundation/flare-systems-deployment.git\ncd flare-systems-deployment\n```\n\n----------------------------------------\n\nTITLE: Delegation Address Registration Confirmed Event - Solidity\nDESCRIPTION: Notifies external observers that a delegation address registration process for a voter has been completed. The voter and delegation address are included as parameters. Useful for monitoring workflow finalization steps.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_27\n\nLANGUAGE: solidity\nCODE:\n```\nevent DelegationAddressRegistrationConfirmed(\n    address voter,\n    address delegationAddress\n)\n```\n\n----------------------------------------\n\nTITLE: Error Message for Unsupported Digital Routines\nDESCRIPTION: This error message indicates an issue with digital envelope routines, often related to an incompatible Node.js version.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/using-flare-stake-tool.mdx#2025-04-22_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\nE: Error: error:0308010C:digital envelope routines::unsupported\n```\n\n----------------------------------------\n\nTITLE: Example Proof and Decoded Response Output - Shell\nDESCRIPTION: Shows sample output from the DA Layer as formatted JSON and decoded ABI struct arrays for reference. The first shell code block presents a typical proof server response, including fields for the ABI hex, attestation type, and Merkle proof array. The second shell block demonstrates how the ABI-encoded 'IPayment.Response' struct maps to named values. These code blocks are illustrative only and not executable scripts.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n{\n  response_hex: '0x\n  5061796d656e7400000000000000000000000000000000000000000000000000\n  7465737458525000000000000000000000000000000000000000000000000000\n  00000000000000000000000000000000000000000000000000000000000e6c2d\n  00000000000000000000000000000000000000000000000000000000a019d806\n  2a3e7c7f6077b4d12207a9f063515eace70fbbf3c55514cd8bd659d4ab721447\n  0000000000000000000000000000000000000000000000000000000000000000\n  0000000000000000000000000000000000000000000000000000000000000000\n  000000000000000000000000000000000000000000000000000000000048f822\n  0000000000000000000000000000000000000000000000000000000067ac9486\n  7f5b4967a9fbe9b447fed6d4e3699051516b6afe5f94db2e77ccf86470bfd74d\n  a1475e9840d916c22f494c0dc25428d2affb5ae1f496efc82bbb59d46a336779\n  cd582d251987f15ecb29b69c2e02051479e84c176e39cbbdf04a4d0ef89bcf82\n  cd582d251987f15ecb29b69c2e02051479e84c176e39cbbdf04a4d0ef89bcf82\n  0000000000000000000000000000000000000000000000000000000005f5e10c\n  0000000000000000000000000000000000000000000000000000000005f5e10c\n  0000000000000000000000000000000000000000000000000000000005f5e100\n  0000000000000000000000000000000000000000000000000000000005f5e100\n  0000000000000000000000000000000000000000000000000000000000000000\n  0000000000000000000000000000000000000000000000000000000000000001\n  0000000000000000000000000000000000000000000000000000000000000000',\n  attestation_type: '0x5061796d656e7400000000000000000000000000000000000000000000000000',\n  proof: [\n    '0xe1f98d39167eab17b2157c06efb80530b161d5eb15c439fc476e3242e30b3ac1',\n    '0x23a8ffdb2cbaf0e2f3653923a159150f8d4c3ad5160f9e127cc9797ba233e6c2',\n    '0xd756b90367b336e127f0759a1457825b4c2bf9011b71b56e15d9fcb7ff735ec8',\n    '0xc881d1566868a986aef2bda47e9ab6dafeb8241bde5f5d53235837595829a5ea'\n  ]\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n[\n  attestationType: '0x5061796d656e7400000000000000000000000000000000000000000000000000',\n  sourceId: '0x7465737458525000000000000000000000000000000000000000000000000000',\n  votingRound: '945197',\n  lowestUsedTimestamp: '2686048262',\n  requestBody: [\n    '0x2a3e7c7f6077b4d12207a9f063515eace70fbbf3c55514cd8bd659d4ab721447',\n    '0',\n    '0',\n    transactionId: '0x2a3e7c7f6077b4d12207a9f063515eace70fbbf3c55514cd8bd659d4ab721447',\n    inUtxo: '0',\n    utxo: '0'\n  ],\n  responseBody: [\n    '4782114',\n    '1739363462',\n    '0x7f5b4967a9fbe9b447fed6d4e3699051516b6afe5f94db2e77ccf86470bfd74d',\n    '0xa1475e9840d916c22f494c0dc25428d2affb5ae1f496efc82bbb59d46a336779',\n    '0xcd582d251987f15ecb29b69c2e02051479e84c176e39cbbdf04a4d0ef89bcf82',\n    '0xcd582d251987f15ecb29b69c2e02051479e84c176e39cbbdf04a4d0ef89bcf82',\n    '100000012',\n    '100000012',\n    '100000000',\n    '100000000',\n    '0x0000000000000000000000000000000000000000000000000000000000000000',\n    true,\n    '0',\n    blockNumber: '4782114',\n    blockTimestamp: '1739363462',\n    sourceAddressHash: '0x7f5b4967a9fbe9b447fed6d4e3699051516b6afe5f94db2e77ccf86470bfd74d',\n    sourceAddressesRoot: '0xa1475e9840d916c22f494c0dc25428d2affb5ae1f496efc82bbb59d46a336779',\n    receivingAddressHash: '0xcd582d251987f15ecb29b69c2e02051479e84c176e39cbbdf04a4d0ef89bcf82',\n    intendedReceivingAddressHash: '0xcd582d251987f15ecb29b69c2e02051479e84c176e39cbbdf04a4d0ef89bcf82',\n    spentAmount: '100000012',\n    intendedSpentAmount: '100000012',\n    receivedAmount: '100000000',\n    intendedReceivedAmount: '100000000',\n    standardPaymentReference: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    oneToOne: true,\n    status: '0'\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Supported FTSOv2 Contracts List in TypeScript\nDESCRIPTION: This code snippet defines an exported constant array, 'contracts', in TypeScript, listing all supported FTSOv2-related contract names. The array is used as a prop for downstream components to generate references and documentation tables for these contracts. There are no external dependencies except the TypeScript language and compatibility with the consuming React/JSX code.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/4-solidity-reference.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const contracts = [\n  \"FtsoV2\",\n  \"FeeCalculator\",\n  \"FtsoFeedIdConverter\",\n  \"FastUpdater\",\n  \"FastUpdatesConfiguration\",\n  \"FastUpdateIncentiveManager\",\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Songbird Canary-Network Node\nDESCRIPTION: Docker Compose configuration for running a Songbird Canary-Network observer node with specific bootstrap settings, volume mounts, and port configurations.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.6'\n\nservices:\n  observer:\n    container_name: songbird-observer\n    image: flarefoundation/go-flare:v1.9.1\n    restart: on-failure\n    environment:\n      - AUTOCONFIGURE_BOOTSTRAP=1\n      - NETWORK_ID=songbird\n      - AUTOCONFIGURE_PUBLIC_IP=1\n      - AUTOCONFIGURE_BOOTSTRAP_ENDPOINT=https://songbird-bootstrap.flare.network/ext/info\n    volumes:\n      - /mnt/db:/app/db\n      - /opt/flare/conf:/app/conf/C\n      - /opt/flare/logs:/app/logs\n    ports:\n      - 0.0.0.0:9650:9650\n      - 0.0.0.0:9651:9651\n```\n\n----------------------------------------\n\nTITLE: Calculating Delegator Reward by Weight Share - LaTeX\nDESCRIPTION: This formula calculates the amount of rewards a delegator receives for a given reward epoch, based on their weight share relative to the data provider's total delegation for a weight type. It divides the delegator's delegated weight by the total unclaimed delegation weight, and multiplies the result by the total unclaimed reward amount for the provider and epoch. Inputs include each delegator's delegated weight, the total unclaimed weight, and unclaimed reward amount. Output is the amount of tokens claimable by the delegator, for a specific weight type (stake or WFLR). This mathematical expression appears in Markdown documentation.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/2-rewarding.mdx#2025-04-22_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n$$\n\\text{reward} = \\frac{w(T, x)}{U_{T}^{weight}}\\times U_{T}^{amount}~,\n$$\n```\n\n----------------------------------------\n\nTITLE: Tabular Example of CPT State Evolution - Markdown\nDESCRIPTION: This snippet details a step-by-step example of CPT issuance, fee accrual, withdrawals, transfers, and exits using a Markdown table. All values are updated per each step to illustrate the evolution of CPT supply, pool fees, debts, and virtual fees. The snippet does not require programming dependencies, but will require Markdown rendering capability (e.g., GitHub or Docusaurus).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/2-collateral.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n|                                                                    | Issued CPTs | Fees in pool | Total fee debt | Total virtual fees |\n| ------------------------------------------------------------------ | ----------: | -----------: | -------------: | -----------------: |\n| An agent creates a new vault.                                      |           0 |            0 |              0 |                  0 |\n| Alice deposits 100 FLR and receives 100 CPTs.                      |     **100** |            0 |              0 |                  0 |\n| 10 FAssets of fees are added to the pool due to a mint.            |         100 |       **10** |              0 |             **10** |\n| Alice withdraws 5 FAssets of fees.                                 |         100 |        **5** |          **5** |                 10 |\n| 10 more FAssets of fees are added to the pool due to another mint. |         100 |       **15** |              5 |             **20** |\n| Alice transfers 75 CPTs to Bob.                                    |         100 |           15 |              5 |                 20 |\n| Alice exits the pool by returning her remaining 25 CPTs.           |      **75** |           15 |          **0** |             **15** |\n```\n\n----------------------------------------\n\nTITLE: Generating User Secrets File with User Bot CLI\nDESCRIPTION: Generates a JSON file containing the user's addresses and private keys required for interacting with the FAsset system. The `--user` flag specifies that user secrets should be generated. Requires the FAsset symbol (via the required `--fasset` flag). The optional `-o <filename>` flag saves the output to a file; otherwise, it prints to the console.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/user-bot.mdx#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nyarn user-bot generateSecrets --user\n```\n\n----------------------------------------\n\nTITLE: Deploying Compiled Contract on Flare via alloy-rs - Rust\nDESCRIPTION: These examples show the process of deploying a compiled Solidity contract (such as 'FtsoV2FeedConsumer') to Flare's testnet or mainnet using alloy-rs. Prerequisites include a compiled contract JSON (with ABI and bytecode) and a funded Flare account with private key accessible via environment variables. Inputs include the account data, contract ABI/bytecode, and RPC URIs; the output is the deployed contract's address. The script will print the contract address upon successful deployment. Requires handling account secrets securely per provided warnings.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-rust-developers.mdx#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n{DeployContractCoston2}\n```\n\nLANGUAGE: rust\nCODE:\n```\n{DeployContractFlare}\n```\n\n----------------------------------------\n\nTITLE: State Observation Event Response\nDESCRIPTION: Example response showing the deployment and execution of the state observation contract, including decoded event data and state information.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/connect-evm-chains.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nSepolia USDT deployed to: 0xf274cCf1f92F9B34FF5704802a9B690E1d3cbC38\nFallbackWithEventContract deployed to: 0xfCcB55F281df58869593B64B48f8c2Fe66f91C5D\n{\n  \"status\": \"VALID\",\n  \"response\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"0\",\n    \"lowestUsedTimestamp\": \"1709151372\",\n    \"requestBody\": {\n      \"transactionHash\": \"0xff86f77260f7623f24ea888dfd14c56380c5cece1a896bd2566d6b3596343e20\",\n      \"requiredConfirmations\": \"1\",\n      \"provideInput\": true,\n      \"listEvents\": true,\n      \"logIndices\": []\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5382901\",\n      \"timestamp\": \"1709151372\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0xfCcB55F281df58869593B64B48f8c2Fe66f91C5D\",\n      \"value\": \"0\",\n      \"input\": \"0xf29ca36c000000000000000000000000f274ccf1f92f9b34ff5704802a9b690e1d3cbc3800000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000044dd62ed3e0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d42900000000000000000000000000000000000000000000000000000000\",\n      \"status\": \"1\",\n      \"events\": [\n        {\n          \"logIndex\": \"4\",\n          \"emitterAddress\": \"0xfCcB55F281df58869593B64B48f8c2Fe66f91C5D\",\n          \"topics\": [\n            \"0xe1b725358090db1f537294b09c773c14622b44c1bc2832d105fb28cc48f5bd90\"\n          ],\n          \"data\": \"0x000000000000000000000000f274ccf1f92f9b34ff5704802a9b690e1d3cbc380000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000044dd62ed3e0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d4290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000bc614e\",\n          \"removed\": false\n        }\n      ]\n    }\n  }\n}\nEvent data [\n  '0xf274cCf1f92F9B34FF5704802a9B690E1d3cbC38',\n  true,\n  '0xdd62ed3e0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d429',\n  '0x0000000000000000000000000000000000000000000000000000000000bc614e'\n]\nMethod signature 0xdd62ed3e\nDecoded calldata Result(2) [\n  '0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373',\n  '0xFf02F742106B8a25C26e65C1f0d66BEC3C90d429'\n]\nDecoded state data Result(1) [ 12345678n ]\n```\n\n----------------------------------------\n\nTITLE: Pushing Feature Branch to Remote Repository\nDESCRIPTION: Command to push the local feature branch to a fork of the Flare Developer Hub repository after making changes.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Executing Sepolia Setup Script via Hardhat\nDESCRIPTION: This command executes the `trySimpleTransaction.ts` script using Hardhat, specifically targeting the Sepolia network configuration. This script deploys a `FallbackContract` on Sepolia, sends two transactions (one simple value transfer, one triggering the fallback function), and outputs the transaction hashes along with their initial attestation request results.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-connectivity.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn hardhat run scripts/evm/trySimpleTransaction --network sepolia\n```\n\n----------------------------------------\n\nTITLE: Querying Historical Token Balance in IWNat Solidity Interface\nDESCRIPTION: Retrieves the token balance of an owner at a specific block number in the past.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction balanceOfAt(\n    address _owner,\n    uint256 _blockNumber\n) external view returns (\n    uint256\n);\n```\n\n----------------------------------------\n\nTITLE: Defining publish Function for Feed Submission in Solidity\nDESCRIPTION: Specifies an external function for submitting an array of FeedWithProof structs for publication. The function takes one parameter (_proofs), which is an array containing feed entries plus associated proof data. It has no return value and is intended for authorized parties to publish new or updated feeds.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/solidity-reference/IFtsoFeedPublisher.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction publish(\n    struct IFtsoFeedPublisher.FeedWithProof[] _proofs\n) external;\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with uv in Python Project\nDESCRIPTION: Command to install all dependencies including extras and development dependencies using the uv package manager. The --all-extras flag includes optional dependencies and --dev adds development dependencies.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/examples/developer-hub-python/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --all-extras --dev\n```\n\n----------------------------------------\n\nTITLE: Canceling Pending Asset Return from Core Vault in Bash\nDESCRIPTION: Cancels a previously initiated, pending return of underlying assets from the core vault to a specific FAsset agent vault using the `agent-bot` script via yarn. Requires the agent vault address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot cancelReturnFromCoreVault <agentVaultAddress>\n```\n\n----------------------------------------\n\nTITLE: Example ABI Encoded Request Structure for Payment Attestation\nDESCRIPTION: An example of what the ABI encoded request looks like after successful preparation. This hex string contains the attestation type, source ID, message integrity code (MIC), and the ABI encoded Payment.RequestBody struct.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n0x\n4164647265737356616c69646974790000000000000000000000000000000000\n7465737442544300000000000000000000000000000000000000000000000000\n7d2ef938d4ffd2392f588bf46563e07ab885b15fead91c1bb99b16f465b71a68\n0000000000000000000000000000000000000000000000000000000000000020\n0000000000000000000000000000000000000000000000000000000000000020\n0000000000000000000000000000000000000000000000000000000000000022\n6d6739503966347772397737633173674665695443356f4d4c59584363326337\n6873000000000000000000000000000000000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Delegation Address Proposed Event - Solidity\nDESCRIPTION: Event emitted when a delegation address is proposed by a voter. Contains the voter's address and the newly proposed delegation address. Used for off-chain processes or indexing to observe entity updates.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_26\n\nLANGUAGE: solidity\nCODE:\n```\nevent DelegationAddressProposed(\n    address voter,\n    address delegationAddress\n)\n```\n\n----------------------------------------\n\nTITLE: Linting Python Code with Ruff\nDESCRIPTION: Command to lint Python code using Ruff linter, executed through the uv package manager. This checks the code for potential errors and style violations.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/examples/developer-hub-python/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run ruff check\n```\n\n----------------------------------------\n\nTITLE: Contract Deployment Command\nDESCRIPTION: Bash command to deploy the contract using Forge.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nforge script script/fdcExample/EVMTransaction.s.sol:DeployContract --private-key $PRIVATE_KEY --rpc-url $COSTON2_RPC_URL --etherscan-api-key $FLARE_API_KEY --broadcast --verify --ffi\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building flare-smart-contracts-v2 in Bash\nDESCRIPTION: Commands to clone the flare-smart-contracts-v2 repository from GitHub and build it using Yarn. This is the first step in the entity registration process.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/_automated_registration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/flare-foundation/flare-smart-contracts-v2/\ncd flare-smart-contracts-v2\nyarn\nyarn c\n```\n\n----------------------------------------\n\nTITLE: Configuring Address Validity Request Parameters in TypeScript\nDESCRIPTION: Sets up the necessary parameters for validating a Bitcoin testnet address with the FDC protocol, including address string, attestation type, and sourceId.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/address-validity.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Request data\nconst addressStr = \"mg9P9f4wr9w7c1sgFeiTC5oMLYXCc2c7hs\";\n\n// Configuration constants\nconst attestationTypeBase = \"AddressValidity\";\nconst sourceIdBase = \"testBTC\";\nconst verifierUrlBase = VERIFIER_URL_TESTNET;\nconst urlTypeBase = \"btc\";\n```\n\n----------------------------------------\n\nTITLE: Token Details Table in Markdown\nDESCRIPTION: Basic token attributes including network, denomination, and key dates.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/support/flr.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute                          | Description     |\n| ---------------------------------- | --------------- |\n| **Network**                        | Flare Mainnet   |\n| **Token**                          | FLR             |\n| **Decimals**                       | 18              |\n| **Genesis creation date**          | July 14, 2022   |\n| **Token Distribution Event (TDE)** | January 9, 2023 |\n```\n\n----------------------------------------\n\nTITLE: Registration Tasks for Coston\nDESCRIPTION: Commands to run the entity and public key registration tasks on Songbird Testnet Coston using Hardhat.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/_automated_registration.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn hardhat --network coston register-entities\nyarn hardhat --network coston register-public-keys\n```\n\n----------------------------------------\n\nTITLE: Executing Batch Reward Claims (autoClaim) - Solidity Interface\nDESCRIPTION: Provides the 'autoClaim' function for batch reward claims. Accepts arrays of reward owner addresses and merkle proof structs, enabling automatic claim execution by owners or authorized executors. Integrates with RewardsV2Interface dependencies and is used when multiple parties need to efficiently claim rewards for an epoch.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRewardManager.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction autoClaim(\n    address[] _rewardOwners,\n    uint24 _rewardEpochId,\n    struct RewardsV2Interface.RewardClaimWithProof[] _proofs\n) external;\n```\n\n----------------------------------------\n\nTITLE: Configuring FAsset Bot Infrastructure URLs in config.json (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to update the `config.json` file for the FAsset bot. Users need to replace placeholder URLs (like \"Data Availability Layer URL\", \"Songbird RPC URL\", \"Verifier URL\") with their own endpoints for the Data Access Layer, Songbird RPC, and FAsset verifiers (FXRP, FDOGE) to use custom infrastructure instead of the default Flare network endpoints. The `dataAccessLayerUrls` and `indexerUrls` arrays allow for fallback URLs (Flare's default).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/8-infrastructure.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dataAccessLayerUrls\": [\n    \"Data Availability Layer URL\",\n    \"https://sgb-data-availability.flare.network\"\n  ],\n  \"rpcUrl\": \"Songbird RPC URL\",\n  \"fAssets\": {\n    \"FXRP\": {\n      \"indexerUrls\": [\n        \"Verifier URL\",\n        \"https://fdc-verifiers-mainnet.flare.network/verifier/xrp\"\n      ]\n    },\n    \"FDOGE\": {\n      \"indexerUrls\": [\n        \"Verifier URL\",\n        \"https://fdc-verifiers-mainnet.flare.network/verifier/doge\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unregistering Node ID - Solidity\nDESCRIPTION: Removes a node id association from a voter account. The node id (bytes20) to be removed must be provided. Often used for cleanup or in cases where network topologies change or permissions are revoked.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_24\n\nLANGUAGE: solidity\nCODE:\n```\nfunction unregisterNodeId(\n    bytes20 _nodeId\n) external;\n```\n\n----------------------------------------\n\nTITLE: Successful Foundry Compilation Output - Plaintext\nDESCRIPTION: Sample stdout output from a successful forge build process, indicating that all contracts were compiled successfully with Solc 0.8.27. Output is for user confirmation and status checking; no inputs are required.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/build-first-app.mdx#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n[\\u259A] Compiling...\\n[\\u2803] Compiling 27 files with Solc 0.8.27\\n[\\u259A] Solc 0.8.27 finished in 853.78ms\\nCompiler run successful!\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Username and Password for Bitcoin Node\nDESCRIPTION: This command allows specifying a custom username and password for Bitcoin node RPC authentication rather than using the auto-generated credentials.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./rpcauth.py <USERNAME> <PASSWORD>\n```\n\n----------------------------------------\n\nTITLE: Generating Go Bindings\nDESCRIPTION: Runs code generation for Go bindings using the go generate command.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/examples/developer-hub-go/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo generate\n```\n\n----------------------------------------\n\nTITLE: Importing ThemedImage and useBaseUrl in React (JavaScript)\nDESCRIPTION: This snippet shows how to import the \"ThemedImage\" component and the \"useBaseUrl\" hook from Docusaurus libraries for usage within a React documentation page. These imports are prerequisites for rendering theme-aware images and resolving base URLs dynamically within the documentation. Inputs: none; Outputs: imported modules ready for use in later React code. Both are required dependencies for any included \"ThemedImage\" or path resolution logic.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/3-governance.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ThemedImage from \"@theme/ThemedImage\";\nimport useBaseUrl from \"@docusaurus/useBaseUrl\";\n```\n\n----------------------------------------\n\nTITLE: Cloning the FDC Suite Deployment Repository\nDESCRIPTION: This command clones the FDC suite deployment repository, which contains configuration templates and scripts for setting up the Flare Data Contract verification components.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/flare-foundation/fdc-suite-deployment.git\ncd fdc-suite-deployment\n```\n\n----------------------------------------\n\nTITLE: Data Transport Object Struct Definition\nDESCRIPTION: Defines a struct for decoding incoming API data with character attributes including height and mass for BMI calculation.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/json-api.mdx#2025-04-22_snippet_19\n\nLANGUAGE: solidity\nCODE:\n```\nstruct DataTransportObject {\n    string name;\n    uint256 height;\n    uint256 mass;\n    uint256 numberOfMovies;\n    uint256 apiUid;\n}\n```\n\n----------------------------------------\n\nTITLE: ExecutorRegistered Event in Solidity\nDESCRIPTION: Event emitted when an executor is registered in the system.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_31\n\nLANGUAGE: solidity\nCODE:\n```\nevent ExecutorRegistered(\n    address executor\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring KYC Settings in secrets.json\nDESCRIPTION: JSON configuration block for setting up the KYC verification service. Requires specifying the service URL and API key which will be used for address verification requests. The API key is sent as a 'Token' header in requests.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/4-custom-handshake.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"kyc\": {\n    \"url\": \"\",\n    \"api_key\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Vote Power Contract Interface Function\nDESCRIPTION: Function to return the VPContract event interface used for state-changing operations, particularly during contract upgrades.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_28\n\nLANGUAGE: solidity\nCODE:\n```\nfunction writeVotePowerContract() external view returns (contract IVPContractEvents);\n```\n\n----------------------------------------\n\nTITLE: FeeChecker Contract Implementation in Solidity\nDESCRIPTION: This contract demonstrates the usage of the IFdcRequestFeeConfigurations interface. It includes functions to check the required fee for an attestation request and submit a request with the appropriate fee. The contract interacts with the FDC Hub and fee configuration contracts.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IFdcRequestFeeConfigurations.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/IFdcHub.sol\";\nimport \"@flare-foundation/flare-smart-contracts-v2/contracts/userInterfaces/IFdcRequestFeeConfigurations.sol\";\n\ncontract FeeChecker {\n    IFdcHub private fdcHub;\n    IFdcRequestFeeConfigurations private feeConfigs;\n\n    constructor(address _fdcHubAddress) {\n        fdcHub = IFdcHub(_fdcHubAddress);\n        feeConfigs = fdcHub.fdcRequestFeeConfigurations();\n    }\n\n    function checkRequestFee(bytes memory attestationData) external view returns (uint256) {\n        // Get the fee required for this attestation request\n        return feeConfigs.getRequestFee(attestationData);\n    }\n\n    function submitRequestWithFee(bytes memory attestationData) external payable {\n        // Check if enough fee is provided\n        uint256 requiredFee = feeConfigs.getRequestFee(attestationData);\n        require(msg.value >= requiredFee, \"Insufficient fee\");\n\n        // Submit the attestation request\n        fdcHub.requestAttestation{value: msg.value}(attestationData);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Dependencies for Random Number Generation\nDESCRIPTION: Cargo command to add required Rust dependencies including alloy and tokio\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/secure-random-numbers.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncargo add alloy eyre tokio --features alloy/full,tokio/rt,tokio/rt-multi-thread,tokio/macros\n```\n\n----------------------------------------\n\nTITLE: Copying Sample Configuration File\nDESCRIPTION: Command to copy the sample configuration file for customization before deployment.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Revoking Delegation At Specific Block in Solidity\nDESCRIPTION: Revokes delegation to a specific address at a historical block. Used to prevent unauthorized voting. The block must be in the past.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction revokeDelegationAt(\n    address _who,\n    uint256 _blockNumber\n) external;\n```\n\n----------------------------------------\n\nTITLE: Optional Submission via submit3 Method in Solidity\nDESCRIPTION: Declares submit3 as an external function primarily reserved for possible future protocol expansion. It returns a boolean status and does not require any input parameters. Implementation determines specific semantics, but supports extensible submission schemes.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/ISubmission.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction submit3(\n) external returns (\n    bool\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering a Theme-Adaptive Governance Proposal Diagram (React JSX)\nDESCRIPTION: This snippet renders a \"ThemedImage\" React component, allowing the documentation to display a different governance proposal diagram image depending on the user's selected theme (light or dark). It uses the \"useBaseUrl\" function to ensure that asset paths are correctly resolved. Key parameters include an alt description and a mapping of light/dark sources. Inputs: none directly; Outputs: a visual diagram. This component depends on previous imports of \"ThemedImage\" and \"useBaseUrl\".\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/3-governance.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ThemedImage\n  alt=\"Governance Proposal Diagram\"\n  sources={{\n    light: useBaseUrl(\"img/governance/governance_light.svg\"),\n    dark: useBaseUrl(\"img/governance/governance_dark.svg\"),\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Fetching Current Sample Size Increase Price via Solidity Interface\nDESCRIPTION: This Solidity interface snippet declares the `getCurrentSampleSizeIncreasePrice` function. External callers can query the interface to obtain the current fee associated with increasing the sample size, specifically returning a `Fee` typed value. As a `view` function, it does not alter contract state and has no input parameters. This function is helpful for determining the cost dynamics of protocol parameter tuning operations.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdateIncentiveManager.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getCurrentSampleSizeIncreasePrice(\n) external view returns (\n    Fee\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Reward Epoch Duration in Solidity\nDESCRIPTION: Function to get the duration of a reward epoch measured in seconds.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/ProtocolsV2Interface.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rewardEpochDurationSeconds(\n) external view returns (\n    uint64\n);\n```\n\n----------------------------------------\n\nTITLE: Installing web3.py for Random Number Generation\nDESCRIPTION: Python package installation commands for web3.py using different package managers\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/secure-random-numbers.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nuv add web3\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install web3\n```\n\n----------------------------------------\n\nTITLE: Node shutdown script for Terraform deployment\nDESCRIPTION: Bash script embedded in Terraform that ensures the node shuts down gracefully when the instance is stopped.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/4-GCP-marketplace-nodes.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nnodectl stop\n```\n\n----------------------------------------\n\nTITLE: Displaying CPT Transferability Formulae - Markdown\nDESCRIPTION: This snippet displays LaTeX-formatted formulae for calculating the transferable and locked amounts of CPTs for a given provider $p$ in the FAssets protocol. Required dependencies include Markdown support for LaTeX math blocks (usually rendered by specialized renderers like GitHub, MkDocs, or VuePress). Inputs are variable definitions provided in the surrounding text, and outputs are the rendered math formulae. No computational or programming language logic is presented; this is for documentation clarity.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/2-collateral.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n$$\ntransferable\\_CPT_p = { free\\_fees_p \\over virtual\\_fees_p } \\times CPT_p\n$$\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n$$\nlocked\\_CPT_p = { fee\\_debt_p \\over virtual\\_fees_p } \\times CPT_p\n$$\n```\n\n----------------------------------------\n\nTITLE: ExecutorUnregistered Event in Solidity\nDESCRIPTION: Event emitted when an executor is unregistered from the system, including the reward epoch when it becomes effective.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_32\n\nLANGUAGE: solidity\nCODE:\n```\nevent ExecutorUnregistered(\n    address executor,\n    uint256 validFromRewardEpoch\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Forge Script for Contract Interaction in Bash\nDESCRIPTION: This bash command runs the Forge script to interact with the deployed AddressValidity contract, using environment variables for private key, RPC URL, and API key.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/address-validity.mdx#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nforge script script/fdcExample/\nAddressValidity.s.sol:InteractWithContract --private-key $PRIVATE_KEY --rpc-url $COSTON2_RPC_URL --etherscan-api-key $FLARE_API_KEY --broadcast --ffi\n```\n\n----------------------------------------\n\nTITLE: Opting Out of FlareDrop in Solidity\nDESCRIPTION: Function to opt out of receiving airdrop rewards from the Delegation Incentive Pool. This allows users to exclude themselves from the FlareDrop distribution.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IDistributionToDelegators.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction optOutOfAirdrop(\n) external;\n```\n\n----------------------------------------\n\nTITLE: Querying Public Key of Voter - Solidity\nDESCRIPTION: Retrieves the current public key for a given voter, returned as two bytes32 values for key splitting (part1, part2). Takes the voter's address as input and returns both parts. Used for cryptographic identity verification in smart contracts.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getPublicKeyOf(\n    address _voter\n) external view returns (\n    bytes32,\n    bytes32\n);\n```\n\n----------------------------------------\n\nTITLE: Revoking Delegation at Specific Block in IWNat Solidity Interface\nDESCRIPTION: Revokes all delegation from sender to a specified address at a given block in the past. Used to prevent unauthorized voting in the current voting block.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\nfunction revokeDelegationAt(\n    address _who,\n    uint256 _blockNumber\n) external;\n```\n\n----------------------------------------\n\nTITLE: Querying Voter Addresses at Specific Block - Solidity\nDESCRIPTION: Fetches the addresses linked to a voter at a particular block, facilitating history-aware client applications. The voter address and desired block number are required as inputs; return value is a struct containing the relevant voter addresses.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getVoterAddressesAt(\n    address _voter,\n    uint256 _blockNumber\n) external view returns (\n    struct IEntityManager.VoterAddresses _addresses\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Message for Exceeded Quota in Google Cloud\nDESCRIPTION: This snippet shows an example error message that appears when a deployment fails due to exceeded quotas in Google Cloud. It indicates that the SSD total storage limit has been reached in a specific region.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/4-GCP-marketplace-nodes.mdx#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nError: Error waiting for instance to create: Quota 'SSD_TOTAL_GB' exceeded.  Limit: 500.0 in region us-west1.\nmetric name = compute.googleapis.com/ssd_total_storage\nlimit name = SSD-TOTAL-GB-per-project-region\nlimit = 500\ndimensions = map[region:us-west1]\n```\n\n----------------------------------------\n\nTITLE: Querying Current Voting Epoch ID in Solidity\nDESCRIPTION: This snippet retrieves the current voting epoch ID from the Flare network. It gets an instance of the `IFlareSystemsManager` contract via `ContractRegistry` and calls `getCurrentVotingEpochId()` to determine the round in which the submitted attestation request will be processed. The result (`roundId`) is logged.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\n       // Calculating roundId\n       IFlareSystemsManager flareSystemsManager = ContractRegistry\n           .getFlareSystemsManager();\n\n       uint32 roundId = flareSystemsManager.getCurrentVotingEpochId();\n       console.log(\"roundId: %s\\n\", Strings.toString(roundId));\n\n```\n\n----------------------------------------\n\nTITLE: Fetching and Verifying Flare Anchor Feed Data Onchain in Python\nDESCRIPTION: Shows how to combine fetching anchor feed and proof data from the DA Layer API with submitting it for verification to an onchain Flare smart contract in Python. Dependencies typically include requests and Web3.py. Main parameters are the feed IDs, API URL, contract address, and ABI. The script posts to the API, processes the result, and invokes verifyFeedData, returning the smart contract verification status.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/scaling/2-getting-started.mdx#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n{FetchAndVerifyAnchorOnchainPy}\n```\n\n----------------------------------------\n\nTITLE: Repository Structure Overview\nDESCRIPTION: Directory structure showing the organization of the Flare Developer Hub codebase.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nflare-foundation/developer-hub/\n├── .github/         # GitHub Actions workflows, issue templates, etc.\n├── automations/     # Scripts & data for automating content updates (feeds, tables).\n├── docgen/         # Tools for auto-generating Solidity documentation.\n├── docs/            # The core documentation content in Markdown (.mdx).\n├── examples/        # Code examples in various languages (Python, JS, Rust, Go, Solidity).\n├── src/             # Docusaurus site source: custom components, pages, CSS, theme overrides.\n├── static/          # Static assets (images, PDFs, OpenAPI specs) served directly.\n├── CONTRIBUTING.md  # Guidelines for contributors.\n├── docusaurus.config.ts # Main Docusaurus site configuration.\n└── sidebars.ts      # Defines the structure of the documentation sidebar.\n```\n\n----------------------------------------\n\nTITLE: Implementing DistributionPermissionUpdated Event in Solidity\nDESCRIPTION: Event emitted when distribution permissions are updated for projects.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IRNat.md#2025-04-22_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nevent DistributionPermissionUpdated(\n    uint256[] projectIds,\n    bool disabled\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Latest BlockNumber via RPC - Flare Mainnet cURL - Bash\nDESCRIPTION: This Bash snippet uses curl to send a JSON-RPC POST request to the Flare Mainnet RPC endpoint to retrieve the most recent Ethereum block number. No dependencies are required other than curl. The request sets the content type to application/json and specifies method \\\"eth_blockNumber\\\" to the network endpoint; expects a JSON response containing the block number in hexadecimal. The input is the network RPC URL and standardized JSON payload.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/0-overview.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://flare-api.flare.network/ext/C/rpc -X POST -H \"Content-Type: application/json\" --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}'\n```\n\n----------------------------------------\n\nTITLE: Getting Starting Voting Round ID for Reward Epoch in Solidity\nDESCRIPTION: Declares the `startingVotingRoundIds` function in the IRelay interface. This view function takes a `_rewardEpochId` and returns the corresponding starting voting round ID for that epoch.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRelay.md#2025-04-22_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction startingVotingRoundIds(\n    uint256 _rewardEpochId\n) external view returns (\n    uint256 _startingVotingRoundId\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Latest BlockNumber via RPC - Coston2 Testnet cURL - Bash\nDESCRIPTION: A Bash snippet using curl to request the latest block number from Coston2 Testnet's RPC endpoint using the JSON-RPC \\\"eth_blockNumber\\\" method. No dependencies beyond curl itself. It accepts the endpoint URL and JSON-RPC data; returns the block number in a JSON payload, suitable for script-based monitoring.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/0-overview.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://coston2-api.flare.network/ext/C/rpc -X POST -H \"Content-Type: application/json\" --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}'\n```\n\n----------------------------------------\n\nTITLE: DelegationAccountCreated Event in Solidity\nDESCRIPTION: Event emitted when a new delegation account is created for an owner.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_26\n\nLANGUAGE: solidity\nCODE:\n```\nevent DelegationAccountCreated(\n    address owner,\n    contract IDelegationAccount delegationAccount\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unused Indices - Solidity\nDESCRIPTION: Defines getUnusedIndices, a view function returning an array of uint256 indices representing removed feeds. This method helps clients track which array positions correspond to deleted or deactivated feeds.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdatesConfiguration.md#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getUnusedIndices(\n) external view returns (\n    uint256[]\n);\n```\n\n----------------------------------------\n\nTITLE: Exporting Deployed Contract Names Array - JavaScript\nDESCRIPTION: Exports an array named contracts containing the names of key smart contracts deployed on Flare networks. This array is used as a prop in SolidityReference React components for displaying or referencing contract addresses. Key dependencies include React, the environment's ES module support, and the presence of the specified contracts on the target networks.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/6-solidity-reference.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const contracts = [\n  \"FlareContractRegistry\",\n  \"ProtocolsV2\",\n  \"RandomNumberV2\",\n  \"RewardsV2\",\n  \"ClaimSetupManager\",\n  \"DistributionToDelegators\",\n  \"WNat\",\n  \"RNat\",\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing ProjectAdded Event in Solidity\nDESCRIPTION: Event emitted when a new project is added to the system.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IRNat.md#2025-04-22_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nevent ProjectAdded(\n    uint256 id,\n    string name,\n    address distributor,\n    bool currentMonthDistributionEnabled\n)\n```\n\n----------------------------------------\n\nTITLE: Node ID Unregistered Event - Solidity\nDESCRIPTION: Informs interested parties when a previously registered node id is unregistered by a voter. Includes voter's address and the node id as bytes20. Key in managing removal or rotation of identities.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_30\n\nLANGUAGE: solidity\nCODE:\n```\nevent NodeIdUnregistered(\n    address voter,\n    bytes20 nodeId\n)\n```\n\n----------------------------------------\n\nTITLE: Querying FTSO Config with web3.js (Placeholder)\nDESCRIPTION: JavaScript code example using web3.js and Flare Periphery Contract Artifacts to retrieve FTSOv2 feed configurations on the Flare Testnet Coston2. Requires Node.js environment and installed dependencies.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/query-feed-configuration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{FtsoConfigWeb3Js}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Verifier Server\nDESCRIPTION: Commands to build the server and create a Docker image for the custom type verifier\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/create-attestation-type.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\ndocker build -t library/verifier-indexer-api-CustomType -f server/ICustomType/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Defining ABI Signature for Weather Data in TypeScript\nDESCRIPTION: This code defines the ABI signature for the weather data structure used in the smart contract. It specifies the data types and names of the fields to be stored on-chain.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/weather-insurance.mdx#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst abiSignature = `{\n         \\\"components\\\": [\n           {\n             \\\"internalType\\\": \\\"int256\\\",\n             \\\"name\\\": \\\"latitude\\\",\n             \\\"type\\\": \\\"int256\\\"\n           },\n           {\n             \\\"internalType\\\": \\\"int256\\\",\n             \\\"name\\\": \\\"longitude\\\",\n             \\\"type\\\": \\\"int256\\\"\n           },\n           {\n             \\\"internalType\\\": \\\"string\\\",\n             \\\"name\\\": \\\"description\\\",\n             \\\"type\\\": \\\"string\\\"\n           },\n           {\n             \\\"internalType\\\": \\\"int256\\\",\n             \\\"name\\\": \\\"temperature\\\",\n             \\\"type\\\": \\\"int256\\\"\n           },\n           {\n             \\\"internalType\\\": \\\"int256\\\",\n             \\\"name\\\": \\\"minTemp\\\",\n             \\\"type\\\": \\\"int256\\\"\n           },\n           {\n             \\\"internalType\\\": \\\"uint256\\\",\n             \\\"name\\\": \\\"windSpeed\\\",\n             \\\"type\\\": \\\"uint256\\\"\n           },\n           {\n             \\\"internalType\\\": \\\"uint256\\\",\n             \\\"name\\\": \\\"windDeg\\\",\n             \\\"type\\\": \\\"uint256\\\"\n           }\n         ],\n         \\\"internalType\\\": \\\"struct DataTransportObject\\\",\n         \\\"name\\\": \\\"dto\\\",\n         \\\"type\\\": \\\"tuple\\\"\n       }`;\n```\n\n----------------------------------------\n\nTITLE: Defining and Reusing Deployed Contract List in JavaScript\nDESCRIPTION: Declares an array containing the names of all major deployed contract entities relevant to the Flare Network ecosystem. This list is exported and then reused across multiple network tab views, streamlining component usage and ensuring consistency. This snippet requires a JavaScript/MDX-compatible environment and is not intended to be executed directly in a browser without preprocessing.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/4-solidity-reference.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const contracts = [\n  \"EntityManager\",\n  \"Submission\",\n  \"FlareSystemsManager\",\n  \"Relay\",\n  \"RewardManager\",\n  \"VoterRegistry\",\n  \"FlareSystemsCalculator\",\n  \"WNatDelegationFee\",\n];\n```\n\n----------------------------------------\n\nTITLE: Depositing Vault Collateral\nDESCRIPTION: Command to deposit vault collateral specifically for minting by specifying the agent vault address and amount.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot depositVaultCollateral <agentVaultAddress> <amount>\n```\n\n----------------------------------------\n\nTITLE: Getting Current Voting Epoch ID in Solidity\nDESCRIPTION: Function to retrieve the ID of the current voting epoch.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/ProtocolsV2Interface.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getCurrentVotingEpochId(\n) external view returns (\n    uint32\n);\n```\n\n----------------------------------------\n\nTITLE: Vote Power Query Functions\nDESCRIPTION: Functions to query various aspects of vote power including undelegated, delegated, and total vote power for specific accounts.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_26\n\nLANGUAGE: solidity\nCODE:\n```\nfunction undelegatedVotePowerOf(address _owner) external view returns (uint256);\n\nfunction undelegatedVotePowerOfAt(address _owner, uint256 _blockNumber) external view returns (uint256);\n\nfunction votePowerFromTo(address _from, address _to) external view returns (uint256);\n\nfunction votePowerFromToAt(address _from, address _to, uint256 _blockNumber) external view returns (uint256);\n\nfunction votePowerOf(address _owner) external view returns (uint256);\n\nfunction votePowerOfAt(address _owner, uint256 _blockNumber) external view returns (uint256);\n\nfunction votePowerOfAtIgnoringRevocation(address _owner, uint256 _blockNumber) external view returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Determine Network Chain ID with web3.js - Flare Mainnet - JavaScript\nDESCRIPTION: This JavaScript snippet uses web3.js to connect to the Flare Mainnet RPC endpoint and retrieve its chain ID. It functions similarly to the Coston2 variant but targets mainnet settings. Requires correct RPC URL for Flare Mainnet and web3.js installed.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-javascript-developers.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/* Code for ChainIdFlare loaded from external file - not shown here */\n```\n\n----------------------------------------\n\nTITLE: Solidity Event Declaration for IncentiveOffered\nDESCRIPTION: This event declaration in Solidity signals when a new volatility incentive is offered through the protocol. Emitting the `IncentiveOffered` event records the reward epoch, the ranges, sample size increase, and the fee provided. It is used for transparency, off-chain indexing, and as a trigger for associated automation or analytics, and requires listeners to decode the event with the specified argument types.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdateIncentiveManager.md#2025-04-22_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nevent IncentiveOffered(\n    uint24 rewardEpochId,\n    Range rangeIncrease,\n    SampleSize sampleSizeIncrease,\n    Fee offerAmount\n)\n```\n\n----------------------------------------\n\nTITLE: Posting Proof Request to DA Layer in Solidity\nDESCRIPTION: This snippet demonstrates constructing the URL for the DA Layer endpoint (`api/v1/fdc/proof-by-request-round-raw`) and making a POST request using a helper function `postAttestationRequest`. It requires the base `daLayerUrl`, request `headers`, and `body` as inputs. The raw byte data received from the DA layer is returned.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/address-validity.mdx#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory url = string.concat(\n daLayerUrl,\n // \"api/v0/fdc/get-proof-round-id-bytes\"\n \"api/v1/fdc/proof-by-request-round-raw\"\n);\nconsole.log(\"url: %s\\n\", url);\n\n(, bytes memory data) = postAttestationRequest(url, headers, body);\n```\n\n----------------------------------------\n\nTITLE: Freeing Vault Collateral\nDESCRIPTION: Command to free vault collateral that is not currently locked to back FAssets by specifying the agent vault address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot freeVaultCollateral <agentVaultAddress>\n```\n\n----------------------------------------\n\nTITLE: ClaimExecutorFeeValueChanged Event in Solidity\nDESCRIPTION: Event emitted when an executor's fee value is changed, including the reward epoch when it becomes effective.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_30\n\nLANGUAGE: solidity\nCODE:\n```\nevent ClaimExecutorFeeValueChanged(\n    address executor,\n    uint256 validFromRewardEpoch,\n    uint256 feeValueWei\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Governance Vote Power Contract in IWNat Solidity Interface\nDESCRIPTION: Returns the governance vote power contract that enables token owners to participate in governance voting and delegation of governance vote power.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IWNat.md#2025-04-22_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction governanceVotePower(\n) external view returns (\n    contract IGovernanceVotePower\n);\n```\n\n----------------------------------------\n\nTITLE: Max Node IDs Per Entity Set Event - Solidity\nDESCRIPTION: Event triggered when the maximum allowed number of node IDs per entity is set or updated. Includes a uint256 maxNodeIdsPerEntity value for downstream enforcement or compliance. Facilitates flexible network scaling rules.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IEntityManager.md#2025-04-22_snippet_28\n\nLANGUAGE: solidity\nCODE:\n```\nevent MaxNodeIdsPerEntitySet(\n    uint256 maxNodeIdsPerEntity\n)\n```\n\n----------------------------------------\n\nTITLE: Self-Minting FAssets\nDESCRIPTION: Command to mint FAssets using the agent vault without requiring the agent to be publicly available.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot selfMintFAsset <agentVaultAddress> <amount>\n```\n\n----------------------------------------\n\nTITLE: Chain Balance Check Output Example\nDESCRIPTION: Example output when checking balances on C-chain and P-chain, showing available FLR tokens on both chains. This does not include staked funds which are locked.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/using-flare-stake-tool.mdx#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n? How do you want to connect your wallet? Ledger\nYou already have an existing Ctx file with the following parameters -\nPublic Key: ●●●●●●●●●●●●●●●●\nNetwork: flare\nEth Address: 0x●●●●●●●●\n? Do you wish to continue with this? yes\n? What do you want to do? Check on-chain balance\nUsing network: flare\nBalances on the network \"flare\"\n// highlight-next-line\nC-chain 0x●●●●●●●●: 100000.0 FLR\n// highlight-next-line\nP-chain P-flare●●●●●●●●: 50000.0 FLR\n```\n\n----------------------------------------\n\nTITLE: Event Emission for New Voting Round in Solidity\nDESCRIPTION: Declares the NewVotingRoundInitiated event in Solidity, emitted when a protocol starts a new voting round. This event contains no parameters and serves as a signaling mechanism for listeners observing voting lifecycle changes. Triggers off-chain handling or state monitoring as needed.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/ISubmission.md#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nevent NewVotingRoundInitiated(\n)\n```\n\n----------------------------------------\n\nTITLE: EntityManager Contract Registration Methods\nDESCRIPTION: Smart contract methods for registering different addresses required for a Flare Entity. The registration process requires proposal and confirmation steps from the Identity address.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nproposeSubmitAddress(address _address)\nconfirmSubmitAddressRegistration(address _address)\n\nproposeSubmitSignaturesAddress(address _address)\nconfirmSubmitSignaturesAddressRegistration(address _address)\n\nproposeSigningPolicyAddress(address _address)\nconfirmSigningPolicyAddressRegistration(address _address)\n\nproposeDelegationAddress(address _address)\nconfirmDelegationAddressRegistration(address _address)\n```\n\n----------------------------------------\n\nTITLE: Cloning FAssets Agent Repository in Bash\nDESCRIPTION: Commands to clone the FAssets agent repository and navigate to the project directory.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/1-deploy-fassets-agent.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/flare-labs-ltd/fasset-bots-deploy\ncd fasset-bots-deploy\n```\n\n----------------------------------------\n\nTITLE: Updating Agent Setting\nDESCRIPTION: Command to modify specific operational parameters for the agent vault by specifying the parameter name and new value.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot updateAgentSetting <agentVaultAddress> <name> <value>\n```\n\n----------------------------------------\n\nTITLE: Implementing transferFrom Function in Solidity\nDESCRIPTION: Function that moves tokens between accounts using the allowance mechanism. Returns success status and emits a Transfer event.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IRNat.md#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction transferFrom(\n    address from,\n    address to,\n    uint256 value\n) external returns (\n    bool\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Feed Values with Voting Round\nDESCRIPTION: cURL command to query feed values for a specific voting round from the Feed Value Provider API. This endpoint is used by the FTSOv2 Scaling client.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' 'http://localhost:3101/feed-values/0' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"feeds\": [{ \"category\": 1, \"name\" : \"BTC/USD\" }]}'\n```\n\n----------------------------------------\n\nTITLE: Running Agent Bot Commands Using Docker Container\nDESCRIPTION: Command structure for executing agent-bot commands through the Docker container, which is the recommended method after deployment.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose --profile cli run agent-bot [command] <args> --fasset [fAssetSymbol]\n```\n\n----------------------------------------\n\nTITLE: Sample Validator Stake Information in JSON\nDESCRIPTION: This JSON snippet shows the structure of validator stake information, including transaction ID, staking period, amount, node ID, and reward owner details.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/using-flare-stake-tool.mdx#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"txID\": \"28Yf5yQ3xt9yaMvfZ1RP5jkCkT4y2pfD86UheZUHFVng2tFcWd\",\n  \"startTime\": \"1688569201\",\n  \"endTime\": \"1696345201\",\n  \"stakeAmount\": \"16750000000000000\",\n  \"nodeID\": \"NodeID-C6i8mruq11VdxGQ7tiUBgrRqoLBot86df\",\n  \"rewardOwner\": {\n    \"locktime\": \"0\",\n    \"threshold\": \"1\",\n    \"addresses\": [\n      \"P-flare19c8zfml39x6efnw5j90nl85dmwdqhluwhrxz9g\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Minting Status with User Bot CLI\nDESCRIPTION: Retrieves and displays the current status of open minting requests for the specified FAsset symbol (via the required `--fasset` flag). Useful for tracking the progress of minting operations.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/user-bot.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn user-bot mintStatus\n```\n\n----------------------------------------\n\nTITLE: Querying Latest BlockNumber via RPC - Coston2 Testnet - web3.js JavaScript\nDESCRIPTION: This JavaScript (web3.js) snippet connects to the Coston2 Testnet RPC endpoint and uses the \\\"eth_blockNumber\\\" JSON-RPC method to retrieve the current block. It requires the web3.js library and the correct endpoint. The key input is the network URL; result is the current block number.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/0-overview.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{BlockNumCoston2JS}\n```\n\n----------------------------------------\n\nTITLE: EVM Transaction Attestation Request Preparation\nDESCRIPTION: Specific implementation for preparing EVM transaction attestation requests with configuration for transaction hash, confirmations, and event logging options.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/evm-transaction.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst transactionHash =\n  \"0x4e636c6590b22d8dcdade7ee3b5ae5572f42edb1878f09b3034b2f7c3362ef3c\";\n\nconst attestationTypeBase = \"EVMTransaction\";\nconst sourceIdBase = \"testETH\";\nconst verifierUrlBase = VERIFIER_URL_TESTNET;\nconst urlTypeBase = \"eth\";\n```\n\nLANGUAGE: typescript\nCODE:\n```\nasync function prepareAttestationRequest(transactionHash: string) {\n  const requiredConfirmations = \"1\";\n  const provideInput = true;\n  const listEvents = true;\n  const logIndices: string[] = [];\n\n  const requestBody = {\n    transactionHash: transactionHash,\n    requiredConfirmations: requiredConfirmations,\n    provideInput: provideInput,\n    listEvents: listEvents,\n    logIndices: logIndices,\n  };\n\n  const url = `${verifierUrlBase}verifier/${urlTypeBase}/EVMTransaction/prepareRequest`;\n  const apiKey = VERIFIER_API_KEY_TESTNET!;\n\n  return await prepareAttestationRequestBase(\n    url,\n    apiKey,\n    attestationTypeBase,\n    sourceIdBase,\n    requestBody,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Agent Settings with FAssets CLI\nDESCRIPTION: Command to prepare agent settings by generating a configuration file for a specific FAsset type (FXRP, FBTC, or FDOGE).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/3-create-fasset-agent-cli.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose --profile cli run agent-bot --fasset FASSET create --prepare\n```\n\n----------------------------------------\n\nTITLE: Cross-Chain Transfer Confirmation Example\nDESCRIPTION: Example output showing the two-step process (export and import transactions) when moving assets from C-chain to P-chain, requiring confirmation for each transaction.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/using-flare-stake-tool.mdx#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n// highlight-next-line\nPlease approve export transaction\nUsing network: flare\nFetching account from ledger...\nCreating export transaction...\nUsing fee of 0.00028075 FLR\nPlease review and sign the transaction on your ledger device...\nSending transaction to the node...\nTransaction with id ●●●●●●●● sent to the node\n// highlight-next-line\nPlease approve import transaction\nUsing network: flare\nFetching account from ledger...\nCreating export transaction...\nPlease review and sign the transaction on your ledger device...\nSending transaction to the node...\nTransaction with id ●●●●●●●● sent to the node\nFinished execution\n```\n\n----------------------------------------\n\nTITLE: Implementing Sleep Function in TypeScript\nDESCRIPTION: Helper function that pauses script execution for a specified duration in milliseconds using Promise-based setTimeout.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/json-api.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Latest BlockNumber via RPC - Flare Mainnet - web3.js JavaScript\nDESCRIPTION: This JavaScript snippet (using web3.js) connects to Flare Mainnet RPC endpoint and retrieves the current block number by invoking the \\\"eth_blockNumber\\\" method. It requires the web3.js library and the Flare Mainnet RPC URL. The main parameter is the provider endpoint; the output is the block number in decimal. Useful for integrations or monitoring tools.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/0-overview.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{BlockNumFlareJS}\n```\n\n----------------------------------------\n\nTITLE: Event Declaration for Fee Removal in Solidity\nDESCRIPTION: This event is emitted when a fee configuration for a specific attestation type and source is removed. It includes parameters for the attestation type and source identifier.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IFdcRequestFeeConfigurations.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nevent TypeAndSourceFeeRemoved(\n    bytes32 attestationType,\n    bytes32 source\n)\n```\n\n----------------------------------------\n\nTITLE: Enumerating XRPL Transaction Result Codes in Markdown\nDESCRIPTION: This Markdown snippet lists the XRPL transaction result classifications and specific failures. It documents how `tesSUCCESS` denotes successful execution, while `tec`-prefixed codes correspond to different failure conditions, such as missing destination tags or lacking permissions. It is useful for technical audiences needing concise reference to XRPL's transaction status conventions, though its format is descriptive rather than executable.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/attestation-types/_transaction_success_status.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- **`tesSUCCESS`**: Transaction successful.\n- **`tec`-class codes**: Indicate reasons for failure, such as:\n  - `tecDST_TAG_NEEDED`: Missing required destination tag.\n  - `tecNO_DST`: Nonexistent or unfunded destination address.\n  - `tecNO_PERMISSION`: Source address lacks permission to send funds.\n```\n\n----------------------------------------\n\nTITLE: Running Flare Mainnet RPC Node with Docker CLI\nDESCRIPTION: Docker commands to pull the Flare image and run a container for the Flare Mainnet RPC node with appropriate configurations.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull flarefoundation/go-flare:v1.9.1\ndocker run -d --name flare-observer -e AUTOCONFIGURE_BOOTSTRAP=\"1\" -e NETWORK_ID=\"flare\" -e AUTOCONFIGURE_PUBLIC_IP=\"1\" -e AUTOCONFIGURE_BOOTSTRAP_ENDPOINT=\"https://flare-bootstrap.flare.network/ext/info\" -v /mnt/db:/app/db -v /opt/flare/conf:/app/conf/C -v /opt/flare/logs:/app/logs -p 0.0.0.0:9650:9650 -p 0.0.0.0:9651:9651 flarefoundation/go-flare:v1.9.1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fee Percentage Update Offset in Solidity\nDESCRIPTION: This Solidity function definition outlines `feePercentageUpdateOffset`, an external view function in the `IWNatDelegationFee` interface. It returns the offset in reward epochs required before a newly set fee percentage becomes effective. It takes no parameters and returns a `uint24`.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IWNatDelegationFee.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction feePercentageUpdateOffset(\n) external view returns (\n    uint24\n);\n```\n\n----------------------------------------\n\nTITLE: Creating RPC Node Configuration in JSON\nDESCRIPTION: JSON configuration file for the RPC node, specifying various settings including API enablement, gas cap, and logging level.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"snowman-api-enabled\": false,\n  \"coreth-admin-api-enabled\": false,\n  \"eth-apis\": [\n    \"eth\",\n    \"eth-filter\",\n    \"net\",\n    \"web3\",\n    \"internal-eth\",\n    \"internal-blockchain\",\n    \"internal-transaction\"\n  ],\n  \"rpc-gas-cap\": 50000000,\n  \"rpc-tx-fee-cap\": 100,\n  \"pruning-enabled\": true,\n  \"local-txs-enabled\": false,\n  \"api-max-duration\": 0,\n  \"api-max-blocks-per-request\": 0,\n  \"allow-unfinalized-queries\": false,\n  \"allow-unprotected-txs\": false,\n  \"remote-tx-gossip-only-enabled\": false,\n  \"log-level\": \"info\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating FTSOv2 Block-Latency Feed Updates in LaTeX\nDESCRIPTION: This LaTeX equation demonstrates how FTSOv2 calculates block-latency feed updates. It shows the relationship between the current price, the precision parameter, and the update delta provided by data providers.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/0-overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\nP(t + 1) = (1 + p)^{\\delta(t)}P(t)\n```\n\n----------------------------------------\n\nTITLE: Initializing Weight Based Claims - Solidity Interface\nDESCRIPTION: Declares 'initialiseWeightBasedClaims', a function for onboarding new Merkle-based weighted claims. Requires an array of RewardClaimWithProof structs and modifies contract state accordingly; only authorized parties should invoke.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRewardManager.md#2025-04-22_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initialiseWeightBasedClaims(\n    struct RewardsV2Interface.RewardClaimWithProof[] _proofs\n) external;\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to UTF8 Hex Representation in TypeScript\nDESCRIPTION: Utility function that converts a string to a UTF8 hex representation, which is needed for formatting attestation type and source ID fields in the request.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toHex(data: string) {\n  var result = \"\";\n  for (var i = 0; i < data.length; i++) {\n    result += data.charCodeAt(i).toString(16);\n  }\n  return result.padEnd(64, \"0\");\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flare Testnet Coston2 Node\nDESCRIPTION: Command to run a node on the Flare Testnet Coston2 network. It uses curl to fetch bootstrap IPs and IDs dynamically.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./build/avalanchego \\\n  --network-id=costwo \\\n  --http-host= \\\n  --bootstrap-ips=\"$(curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' -H 'content-type:application/json;' https://coston2-bootstrap.flare.network/ext/info | jq -r \".result.ip\")\" \\\n  --bootstrap-ids=\"$(curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' -H 'content-type:application/json;' https://coston2-bootstrap.flare.network/ext/info | jq -r \".result.nodeID\")\"\n```\n\n----------------------------------------\n\nTITLE: Running Songbird Testnet Coston Node\nDESCRIPTION: Command to run a node on the Songbird Testnet Coston network. It uses curl to fetch bootstrap IPs and IDs dynamically.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./build/avalanchego \\\n  --network-id=coston \\\n  --http-host= \\\n  --bootstrap-ips=\"$(curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' -H 'content-type:application/json;' https://coston-bootstrap.flare.network/ext/info | jq -r \".result.ip\")\" \\\n  --bootstrap-ids=\"$(curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' -H 'content-type:application/json;' https://coston-bootstrap.flare.network/ext/info | jq -r \".result.nodeID\")\"\n```\n\n----------------------------------------\n\nTITLE: Compiling FtsoV2FeedConsumer Contract with solc - Bash\nDESCRIPTION: This bash command compiles a Solidity contract (FtsoV2FeedConsumer.sol) using solc with 'london' EVM version. It outputs both ABI and bytecode into a 'build' directory, creating two files: 'build/FtsoV2FeedConsumer.abi' and 'build/FtsoV2FeedConsumer.bin'. Requires solc installed and the .sol file in the working directory. Expected input: contract source file; expected output: ABI and binary files for deployment.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/flare-for-javascript-developers.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsolc --evm-version london FtsoV2FeedConsumer.sol --abi --bin -o build\n```\n\n----------------------------------------\n\nTITLE: Retrieving Reward Epoch Range with Claimable Rewards - Solidity Interface\nDESCRIPTION: Defines 'getRewardEpochIdsWithClaimableRewards', a view that returns the starting and ending epoch ids representing the inclusive range where users can claim rewards. Both values are uint24 and there are no dependencies or parameters.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRewardManager.md#2025-04-22_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getRewardEpochIdsWithClaimableRewards(\n) external view returns (\n    uint24 _startEpochId,\n    uint24 _endEpochId\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Go Bindings for FastUpdatesConfiguration Contract\nDESCRIPTION: Uses the 'abigen' tool from Geth to generate Go language bindings from the FastUpdatesConfiguration contract's ABI. Requires the ABI saved in a file named 'FastUpdatesConfiguration.abi'.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/query-feed-configuration.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nabigen --abi FastUpdatesConfiguration.abi --pkg main --type FastUpdatesConfiguration --out FastUpdatesConfiguration.go\n```\n\n----------------------------------------\n\nTITLE: Verifying Disk Mount in Bash\nDESCRIPTION: Command to check if the new disk is properly mounted by displaying filesystem information.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndf -h\n```\n\n----------------------------------------\n\nTITLE: Example Contract Interaction Output (JSON)\nDESCRIPTION: Shows the expected JSON output from the `cast send` command when calling the `getFlrUsdPrice()` function. It contains details about the transaction execution, including status, gas used, logs emitted by the contract and precompiles, block information, and transaction hash.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/build-first-app.mdx#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"0x1\",\n  \"cumulativeGasUsed\": \"0x1cbab\",\n  \"logs\": [\n    {\n      \"address\": \"0x1000000000000000000000000000000000000002\",\n      \"topics\": [\n        \"0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4\"\n      ],\n      \"data\": \"0x00000000000000000000000098b8e9b5830f04fe3b8d56a2f8455e337037ba280000000000000000000000000000000000000000000000000000000000004231\",\n      \"blockHash\": \"0x94f50404f8205caff551ef2b08d20afc4c080bd7b8231cd3941f1a7a6b1b80dd\",\n      \"blockNumber\": \"0xb2b972\",\n      \"transactionHash\": \"0x3fdc9cf00456a7878476877b6f8ae5c994dd3c224ca792f965f718340fd98402\",\n      \"transactionIndex\": \"0x0\",\n      \"logIndex\": \"0x0\",\n      \"removed\": false\n    },\n    {\n      \"address\": \"0x1000000000000000000000000000000000000002\",\n      \"topics\": [\n        \"0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4\"\n      ],\n      \"data\": \"0x0000000000000000000000004f52e61907b0ed9f26b88f16b2510a4ca524d6d00000000000000000000000000000000000000000000000000000000000003099\",\n      \"blockHash\": \"0x94f50404f8205caff551ef2b08d20afc4c080bd7b8231cd3941f1a7a6b1b80dd\",\n      \"blockNumber\": \"0xb2b972\",\n      \"transactionHash\": \"0x3fdc9cf00456a7878476877b6f8ae5c994dd3c224ca792f965f718340fd98402\",\n      \"transactionIndex\": \"0x0\",\n      \"logIndex\": \"0x1\",\n      \"removed\": false\n    },\n    {\n      \"address\": \"0x1000000000000000000000000000000000000002\",\n      \"topics\": [\n        \"0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4\"\n      ],\n      \"data\": \"0x000000000000000000000000d2a1bb23eb350814a30dd6f9de78bb2c8fdd9f1d0000000000000000000000000000000000000000000000000000000000003b68\",\n      \"blockHash\": \"0x94f50404f8205caff551ef2b08d20afc4c080bd7b8231cd3941f1a7a6b1b80dd\",\n      \"blockNumber\": \"0xb2b972\",\n      \"transactionHash\": \"0x3fdc9cf00456a7878476877b6f8ae5c994dd3c224ca792f965f718340fd98402\",\n      \"transactionIndex\": \"0x0\",\n      \"logIndex\": \"0x2\",\n      \"removed\": false\n    },\n    {\n      \"address\": \"0x1000000000000000000000000000000000000002\",\n      \"topics\": [\n        \"0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4\"\n      ],\n      \"data\": \"0x0000000000000000000000006892bdbbb14e1c9bd46bf31e7bac94d038fc82a6000000000000000000000000000000000000000000000000000000000000422d\",\n      \"blockHash\": \"0x94f50404f8205caff551ef2b08d20afc4c080bd7b8231cd3941f1a7a6b1b80dd\",\n      \"blockNumber\": \"0xb2b972\",\n      \"transactionHash\": \"0x3fdc9cf00456a7878476877b6f8ae5c994dd3c224ca792f965f718340fd98402\",\n      \"transactionIndex\": \"0x0\",\n      \"logIndex\": \"0x3\",\n      \"removed\": false\n    },\n    {\n      \"address\": \"0x1000000000000000000000000000000000000002\",\n      \"topics\": [\n        \"0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4\"\n      ],\n      \"data\": \"0x000000000000000000000000bd33bdff04c357f7fc019e72d0504c24cf4aa0100000000000000000000000000000000000000000000000000000000000008f11\",\n      \"blockHash\": \"0x94f50404f8205caff551ef2b08d20afc4c080bd7b8231cd3941f1a7a6b1b80dd\",\n      \"blockNumber\": \"0xb2b972\",\n      \"transactionHash\": \"0x3fdc9cf00456a7878476877b6f8ae5c994dd3c224ca792f965f718340fd98402\",\n      \"transactionIndex\": \"0x0\",\n      \"logIndex\": \"0x4\",\n      \"removed\": false\n    },\n    {\n      \"address\": \"0x1000000000000000000000000000000000000002\",\n      \"topics\": [\n        \"0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4\"\n      ],\n      \"data\": \"0x000000000000000000000000a90db6d10f856799b10ef2a77ebcbf460ac71e520000000000000000000000000000000000000000000000000000000000004e9c\",\n      \"blockHash\": \"0x94f50404f8205caff551ef2b08d20afc4c080bd7b8231cd3941f1a7a6b1b80dd\",\n      \"blockNumber\": \"0xb2b972\",\n      \"transactionHash\": \"0x3fdc9cf00456a7878476877b6f8ae5c994dd3c224ca792f965f718340fd98402\",\n      \"transactionIndex\": \"0x0\",\n      \"logIndex\": \"0x5\",\n      \"removed\": false\n    },\n    {\n      \"address\": \"0x1000000000000000000000000000000000000002\",\n      \"topics\": [\n        \"0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4\"\n      ],\n      \"data\": \"0x0000000000000000000000000b162ca3acf3482d3357972e12d794434085d839000000000000000000000000000000000000000000000000000000000000e5a6\",\n      \"blockHash\": \"0x94f50404f8205caff551ef2b08d20afc4c080bd7b8231cd3941f1a7a6b1b80dd\",\n      \"blockNumber\": \"0xb2b972\",\n      \"transactionHash\": \"0x3fdc9cf00456a7878476877b6f8ae5c994dd3c224ca792f965f718340fd98402\",\n      \"transactionIndex\": \"0x0\",\n      \"logIndex\": \"0x6\",\n      \"removed\": false\n    }\n  ],\n  \"logsBloom\": \"0xn  \"type\": \"0x2\",\n  \"transactionHash\": \"0x3fdc9cf00456a7878476877b6f8ae5c994dd3c224ca792f965f718340fd98402\",\n  \"transactionIndex\": \"0x0\",\n  \"blockHash\": \"0x94f50404f8205caff551ef2b08d20afc4c080bd7b8231cd3941f1a7a6b1b80dd\",\n  \"blockNumber\": \"0xb2b972\",\n  \"gasUsed\": \"0x1cbab\",\n  \"effectiveGasPrice\": \"0x6fc23ac00\",\n  \"from\": \"0x3f6bdd26f2ae4e77acdfa1fa24b2774ed93984b4\",\n  \"to\": \"0x80ee4091348d9fa4b4a84eb525c25049ebda6152\",\n  \"contractAddress\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Registration Tasks for Songbird\nDESCRIPTION: Commands to run the entity and public key registration tasks on Songbird Canary-Network using Hardhat.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/_automated_registration.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn hardhat --network songbird register-entities\nyarn hardhat --network songbird register-public-keys\n```\n\n----------------------------------------\n\nTITLE: Defining Event Structure for EVM Transaction Logs in Solidity\nDESCRIPTION: This snippet outlines the structure of an Event, representing a log entry similar to EVM event logs, including log index, emitter address, topics, data, and removal status.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/attestation-types/evm-transaction.mdx#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Event {\n    uint32 logIndex;\n    address emitterAddress;\n    bytes32[] topics;\n    bytes data;\n    bool removed;\n}\n```\n\n----------------------------------------\n\nTITLE: Flare Network Configuration Parameters\nDESCRIPTION: Network configuration details including RPC endpoints, chain IDs, block explorers and faucet information for both Flare Mainnet and Coston2 Testnet environments.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/1-intro.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://flare-api.flare.network/ext/C/rpc      # Mainnet RPC\nhttps://coston2-api.flare.network/ext/C/rpc    # Testnet RPC\n14                                           # Mainnet Chain ID\n114                                          # Testnet Chain ID\n```\n\n----------------------------------------\n\nTITLE: Defining BalanceDecreasingTransaction Response Structure in Solidity\nDESCRIPTION: Outlines the response fields returned by the BalanceDecreasingTransaction oracle, including block details, source address hash, spent amount, and payment reference.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/attestation-types/balance-decreasing-transaction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Response {\n    uint64 blockNumber;\n    uint64 blockTimestamp;\n    bytes32 sourceAddressHash;\n    int256 spentAmount;\n    bytes32 standardPaymentReference;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a ParsableProof Struct for Attestation Data\nDESCRIPTION: Creates a struct to parse the proof data returned from the DA Layer. It contains the attestation type, an array of Merkle proofs, and the response data in hex format.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_20\n\nLANGUAGE: solidity\nCODE:\n```\nstruct ParsableProof {\n bytes32 attestationType;\n bytes32[] proofs;\n bytes responseHex;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Conventional Commit Messages for Different Types of Changes\nDESCRIPTION: Examples of properly formatted commit messages following the Conventional Commits standard, showing different types of changes for the Flare Developer Hub.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"fix(ftso): correct feed ID example in getting started guide\"\ngit commit -m \"feat(src): add copy button to code blocks\"\ngit commit -m \"docs(fassets): clarify liquidation process diagram\"\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure for Observer Node\nDESCRIPTION: Bash commands to create the working directory for the Flare observer node and set appropriate ownership permissions.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir /opt/observer\nsudo chown -R <user>:<user> /opt/observer\n```\n\n----------------------------------------\n\nTITLE: Example Contract Deployment Output (Plaintext)\nDESCRIPTION: Shows the typical output after successfully deploying the contract using `forge create`. It includes compilation status, the deployer's address, the newly deployed contract's address, and the transaction hash.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/build-first-app.mdx#2025-04-22_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\n[⠊] Compiling...\n[⠘] Compiling 24 files with Solc 0.8.27\n[⠃] Solc 0.8.27 finished in 733.41ms\nCompiler run successful!\nDeployer: 0x3f6BdD26f2AE4e77AcDfA1FA24B2774ed93984B4\nDeployed to: 0x80Ee4091348d9fA4B4A84Eb525c25049EbDa6152\nTransaction hash: 0x38604a643695959dd9fa5547d95610fb0b7393c7e8358079f47ed4bdb53c9a8f\n```\n\n----------------------------------------\n\nTITLE: Installing Foundry Project Dependencies - Bash\nDESCRIPTION: Runs the Foundry dependency install process for the project using forge. Prerequisites include having Foundry installed and running the command from the project root directory. Installs all package dependencies defined in foundry.toml.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/build-first-app.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nforge soldeer install\n```\n\n----------------------------------------\n\nTITLE: Implementing toUtf8HexString Function for String Encoding in Solidity\nDESCRIPTION: Converts a string to UTF8 hex string representation and zero-pads it to 32 bytes. This is required for properly formatting attestation type and source ID parameters for FDC requests.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction toUtf8HexString(\n string memory _string\n) internal pure returns (string memory) {\n string memory encodedString = toHexString(\n abi.encodePacked(_string)\n );\n uint256 stringLength = bytes(encodedString).length;\n require(stringLength <= 64, \"String too long\");\n uint256 paddingLength = 64 - stringLength + 2;\n for (uint256 i = 0; i < paddingLength; i++) {\n encodedString = string.concat(encodedString, \"0\");\n }\n return encodedString;\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring Funds from P-chain to C-chain\nDESCRIPTION: This command initiates the process of moving funds from the P-chain back to the C-chain. It's used for transferring unlocked funds that are not currently staked.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/using-flare-stake-tool.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nflare-stake-tool interactive\n```\n\n----------------------------------------\n\nTITLE: Getting Executor Scheduled Fee Changes in Solidity\nDESCRIPTION: Retrieves all scheduled fee value changes for an executor, including values, effective epochs, and whether they're fixed.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_25\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getExecutorScheduledFeeValueChanges(\n    address _executor\n) external view returns (\n    uint256[] _feeValue,\n    uint256[] _validFromEpoch,\n    bool[] _fixed);\n```\n\n----------------------------------------\n\nTITLE: Running Fixed Value Provider for Testing\nDESCRIPTION: Docker command to run a fixed value provider that returns a constant value for all feeds, useful for initial testing.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it --env VALUE_PROVIDER_IMPL=fixed --publish \"0.0.0.0:3101:3101\" ghcr.io/flare-foundation/ftso-v2-example-value-provider\n```\n\n----------------------------------------\n\nTITLE: Setting Contract Constructor Arguments Environment Variables (Bash)\nDESCRIPTION: Exports the addresses of the `FtsoV2` and `FeeCalculator` contracts on Coston2, along with the feed ID for FLR/USD, as environment variables. These are required as constructor arguments when deploying the `FtsoV2FeedConsumer` contract.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/build-first-app.mdx#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nexport FTSOV2_COSTON2=0x3d893C53D9e8056135C26C8c638B76C8b60Df726\nexport FEECALCULATOR_COSTON2=0x88A9315f96c9b5518BBeC58dC6a914e13fAb13e2\nexport FLRUSD_FEED_ID=0x01464c522f55534400000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Flare Node\nDESCRIPTION: Verify the installation by running unit tests for both the avalanchego and coreth components. This ensures the node software is properly built and functioning correctly.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo test $(go list ./... | grep -v /tests/) # avalanchego unit tests\ncd ../coreth\ngo test ./... # coreth unit tests\ncd ../avalanchego\n```\n\n----------------------------------------\n\nTITLE: Creating FAssets Agent with Configuration File\nDESCRIPTION: Command to create a new FAssets agent using the prepared settings file. This operation verifies underlying assets and can take up to 10 minutes to complete.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/guides/3-create-fasset-agent-cli.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose --profile cli run agent-bot --fasset FASSET create tmp.agent-settings.json\n```\n\n----------------------------------------\n\nTITLE: Closing Agent Vault\nDESCRIPTION: Command to shut down the FAsset agent vault, ending all operations related to minting and backing FAssets.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/agent-bot.mdx#2025-04-22_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nyarn agent-bot close <agentVaultAddress>\n```\n\n----------------------------------------\n\nTITLE: Registration Tasks for Coston2\nDESCRIPTION: Commands to run the entity and public key registration tasks on Flare Testnet Coston2 using Hardhat.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/_automated_registration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn hardhat --network coston2 register-entities\nyarn hardhat --network coston2 register-public-keys\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Cargo for Developer Hub in Bash\nDESCRIPTION: Command to build the project and install dependencies using Cargo, the Rust package manager and build system.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/examples/developer-hub-rust/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Rendering Solidity Reference Tabs with Network-Specific Components in React JSX\nDESCRIPTION: This React JSX snippet renders a set of selectable tabs using the Tabs and TabItem components from the Docusaurus theme. Each tab corresponds to a network (Flare Mainnet, Testnets, Canary Network) and embeds a SolidityReference component that receives the relevant network identifier and the contracts array as props. The snippet ensures modular and interactive documentation for multiple deployment environments and assumes the presence of Docusaurus, proper theme configuration, and the listed custom components as dependencies. No input parameters are required; output is the structured UI for contract reference per network.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/4-solidity-reference.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs block>\n    <TabItem value=\"flare\" label=\"Flare Mainnet\" default>\n\n        <SolidityReference\n            network=\"FlareMainnet\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n    <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\">\n\n        <SolidityReference\n            network=\"FlareTestnetCoston2\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n    <TabItem value=\"songbird\" label=\"Songbird Canary-Network\">\n\n        <SolidityReference\n            network=\"SongbirdCanaryNetwork\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n\n    <TabItem value=\"coston\" label=\"Songbird Testnet Coston\">\n\n        <SolidityReference\n            network=\"SongbirdTestnetCoston\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Checking Disk Setup\nDESCRIPTION: Command to list block devices and their mount points for setting up disk storage for the blockchain data.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/1-rpc-node.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nlsblk\n```\n\n----------------------------------------\n\nTITLE: Minting FAssets with User Bot CLI\nDESCRIPTION: Initiates the minting process for FAssets. Requires the number of lots (`<numberOfLots>`) to mint as an argument and the FAsset symbol (via the required `--fasset` flag). Optional flags allow specifying an agent (`-a`), executor address (`--executor`), executor fee (`--executorFee`), or skipping the wait for proof (`--noWait`).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/reference/user-bot.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn user-bot mint <numberOfLots>\n```\n\n----------------------------------------\n\nTITLE: Generating Solidity Documentation Commands\nDESCRIPTION: Step-by-step commands for generating Solidity documentation using Node.js version management.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnvm use 18\ncd docgen\nchmod +x generate-solidity-docs.sh\n./generate-solidity-docs.sh\nnvm use 20\n```\n\n----------------------------------------\n\nTITLE: Creating a New Feature Branch in Git\nDESCRIPTION: Command to create and checkout a new feature branch in Git for development work on the Flare Developer Hub.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Implementing withdrawAll Function in Solidity\nDESCRIPTION: Function for withdrawing all WNat tokens with penalty for locked tokens and wrapping options.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IRNat.md#2025-04-22_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction withdrawAll(\n    bool _wrap\n) external;\n```\n\n----------------------------------------\n\nTITLE: Running Automation and Build Commands\nDESCRIPTION: Commands for running various automation scripts and building the project for production.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run automations\nnpm run update-deps\nnpm run build\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Importing Funds from C-chain to P-chain using Flare Stake Tool\nDESCRIPTION: This command imports funds from the C-chain to the P-chain using the Flare Stake Tool. It requires a Ledger device and uses blind signing.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/using-flare-stake-tool.mdx#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nflare-stake-tool transaction importCP --ledger --blind\n```\n\n----------------------------------------\n\nTITLE: Running Feed Value Provider Docker Container\nDESCRIPTION: Command to run the reference feed value provider Docker container for testing purposes. It exposes the API on port 3101 and connects to the FTSO v2 deployment network.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it --publish \"0.0.0.0:3101:3101\" --network \"ftso-v2-deployment_default\" ghcr.io/flare-foundation/ftso-v2-example-value-provider\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Card Grid for Analytics Reports in React\nDESCRIPTION: This snippet illustrates how to create a grid layout of CustomCard components for displaying Flare Network analytics reports. It uses a two-column layout instead of three columns used in previous sections.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/support/whitepapers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<div\n  style={{\n    display: \"grid\",\n    gap: \"1rem\",\n    gridTemplateColumns: \"repeat(2, 1fr)\",\n  }}\n>\n  <CustomCard\n    title=\"Kraken exchange - FTSO price comparison\"\n    href=\"/pdf/whitepapers/20230406-KrakenExchange-FTSOPriceComparison.pdf\"\n    date=\"Apr 6, 2023\"\n  />\n  <CustomCard\n    title=\"STP.02 - Impact of secondary FTSO reward band\"\n    href=\"/pdf/whitepapers/20230529-SongbirdBandUpdate-ImpactOfSTP02.pdf\"\n    date=\"May 29, 2023\"\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering the DeveloperTools React Component in JSX\nDESCRIPTION: This JSX tag renders the `DeveloperTools` component that was previously imported. When processed by a React framework, this will execute the component's rendering logic, likely displaying a list or collection of developer tools on the web page. Its appearance and functionality are defined within the `DeveloperTools` component itself.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/2-developer-tools.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DeveloperTools />\n```\n\n----------------------------------------\n\nTITLE: Requests Offset Event Definition in Solidity\nDESCRIPTION: Event emitted when the requests offset is updated. Includes the new offset value in seconds.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/reference/IFdcHub.md#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nevent RequestsOffsetSet(\n    uint8 requestsOffsetSeconds\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing ClaimingPermissionUpdated Event in Solidity\nDESCRIPTION: Event emitted when claiming permissions are updated for projects.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IRNat.md#2025-04-22_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nevent ClaimingPermissionUpdated(\n    uint256[] projectIds,\n    bool disabled\n)\n```\n\n----------------------------------------\n\nTITLE: Running Code Formatter\nDESCRIPTION: Command to execute the configured code formatting tool using npm script.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/examples/developer-hub-javascript/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Running Code Linter\nDESCRIPTION: Executes golangci-lint to perform static code analysis and identify potential issues.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/examples/developer-hub-go/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngolangci-lint run\n```\n\n----------------------------------------\n\nTITLE: Preparing OpenWeather API Request URL in TypeScript\nDESCRIPTION: This code snippet constructs the URL for querying the OpenWeather API, including latitude, longitude, API key, and units. It's used to fetch weather data for policy creation and resolution.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/weather-insurance.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst latitude = 46.419402127862405;\nconst longitude = 15.587079308221126;\nconst apiId = process.env.OPEN_WEATHER_API_KEY ?? \"\";\n\nconst units = \"metric\";\n\nconst apiUrl = `https://api.openweathermap.org/data/2.5/weather\n                \\?lat\\=${latitude}\n                \\&lon\\=${longitude}\n                \\&appid\\=${apiId}\n                \\&units\\=${units}`;\n```\n\n----------------------------------------\n\nTITLE: Starting a Blockchain Node in the FDC Suite\nDESCRIPTION: This command starts a specific blockchain node (e.g., Bitcoin) in detached mode using Docker Compose.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/run-node/3-flare-entity.mdx#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: DelegationAccountUpdated Event in Solidity\nDESCRIPTION: Event emitted when a delegation account's status is updated (enabled or disabled).\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/solidity-reference/IClaimSetupManager.md#2025-04-22_snippet_27\n\nLANGUAGE: solidity\nCODE:\n```\nevent DelegationAccountUpdated(\n    address owner,\n    contract IDelegationAccount delegationAccount,\n    bool enabled\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Card Grid for Research Papers in React\nDESCRIPTION: This snippet shows how to create a grid layout of CustomCard components for displaying Flare Network research papers. It uses the same styling as the whitepapers section but with different content.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/support/whitepapers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<div\n  style={{\n    display: \"grid\",\n    gap: \"1rem\",\n    gridTemplateColumns: \"repeat(3, 1fr)\",\n  }}\n>\n  <CustomCard\n    title=\"Consensus learning: A novel decentralised ensemble learning paradigm\"\n    href=\"/pdf/whitepapers/20240225-ConsensusLearning.pdf\"\n    date=\"Feb 25, 2024\"\n  />\n  <CustomCard\n    title=\"A hybrid post-quantum digital signature scheme for the EVM\"\n    href=\"/pdf/whitepapers/20220722-HybridPostQuantumDigitalSignatureSchemeForTheEthereumVirtualMachine.pdf\"\n    date=\"Jul 5, 2022\"\n  />\n  <CustomCard\n    title=\"Flare Consensus Protocol\"\n    href=\"/pdf/whitepapers/20191105-FlareConsensusProtocol.pdf\"\n    date=\"Nov 5, 2019\"\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving State of Rewards at Specific Epoch - Solidity Interface\nDESCRIPTION: Defines 'getStateOfRewardsAt', accepting a reward owner address and epoch id, and returning array of RewardState structs for that context. Allows in-depth inspection of historical or epoch-specific reward status.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/solidity-reference/IRewardManager.md#2025-04-22_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getStateOfRewardsAt(\n    address _rewardOwner,\n    uint24 _rewardEpochId\n) external view returns (\n    struct RewardsV2Interface.RewardState[] _rewardStates\n);\n```\n\n----------------------------------------\n\nTITLE: Running Main Application\nDESCRIPTION: Executes the main.go file in the current directory.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/examples/developer-hub-go/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Struct in Solidity\nDESCRIPTION: Defines a struct to represent payment information, including block details, address hashes, amount, and status.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/payment.mdx#2025-04-22_snippet_26\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Payment {\n    uint64 blockNumber;\n    uint64 blockTimestamp;\n    bytes32 sourceAddressHash;\n    bytes32 receivingAddressHash;\n    int256 spentAmount;\n    bytes32 standardPaymentReference;\n    uint8 status;\n}\n```\n\n----------------------------------------\n\nTITLE: Contract Deployment and Verification Script\nDESCRIPTION: TypeScript function to deploy and verify the StarWarsCharacterList contract on the blockchain.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/json-api.mdx#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nasync function deployAndVerifyContract() {\n  const args: any[] = [];\n  const characterList: StarWarsCharacterListInstance =\n    await StarWarsCharacterList.new(...args);\n  try {\n    await run(\"verify:verify\", {\n      address: characterList.address,\n      constructorArguments: args,\n    });\n  } catch (e: any) {\n    console.log(e);\n  }\n  console.log(\"StarWarsCharacterList deployed to\", characterList.address, \"\\n\");\n  return characterList;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus UI Components - JavaScript\nDESCRIPTION: This snippet imports reusable UI components (Tabs, TabItem, CodeBlock, ThemedImage, useBaseUrl) from the Docusaurus theme for rendering tabbed content, code blocks, themed images, and handling base URLs in the documentation site. It has no dependencies outside a Docusaurus project and is used for markdown-enhanced documentation rendering. The imports enable advanced documentation features but do not implement application logic themselves.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/fsp/2-rewarding.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport CodeBlock from \"@theme/CodeBlock\";\nimport ThemedImage from \"@theme/ThemedImage\";\nimport useBaseUrl from \"@docusaurus/useBaseUrl\";\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts with Hardhat via yarn - Bash\nDESCRIPTION: Runs the deployment script for smart contracts using Hardhat managed by yarn. Like the npx alternative, this assumes the script exists and networks are configured. Outputs deployment transaction hashes and addresses. Ensure relevant environment variables are set.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/hardhat-foundry-starter-kit.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn hardhat run scripts/tryDeployment.ts\n```\n\n----------------------------------------\n\nTITLE: Dogecoin Base58 Dictionary Implementation\nDESCRIPTION: The character set used for Dogecoin's Base58 address encoding format, identical to Bitcoin's implementation.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/attestation-types/_addresses.mdx#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\n```\n\n----------------------------------------\n\nTITLE: Instantiating the Helpers Contract in TypeScript\nDESCRIPTION: This TypeScript function `getHelpers` asynchronously creates and returns a new instance of the previously defined `Helpers` Solidity contract. It depends on the compiled contract artifacts (`Helpers`) and associated type definitions (`HelpersInstance`). This instance will be used to access the helper functions defined in the Solidity contract.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/json-api.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getHelpers() {\n  const helpers: HelpersInstance = await Helpers.new();\n  return helpers;\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Python Code with Ruff\nDESCRIPTION: Command to format Python code using Ruff formatter, executed through the uv package manager. This ensures consistent code style across the project.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/examples/developer-hub-python/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv run ruff format\n```\n\n----------------------------------------\n\nTITLE: Defining TokenTransfer Structure in Solidity\nDESCRIPTION: Defines a struct to store token transfer details including sender, receiver, and transfer amount.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_22\n\nLANGUAGE: solidity\nCODE:\n```\nstruct TokenTransfer {\n    address from;\n    address to;\n    uint256 value;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to UTF8 Hex String for FDC Requests\nDESCRIPTION: Utility function that prefixes the hex representation with '0x' to create a properly formatted UTF8 hex string required by the Flare Data Connector.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/payment.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toUtf8HexString(data: string) {\n  return \"0x\" + toHex(data);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Python Tests with pytest\nDESCRIPTION: Command to run Python tests using pytest with verbose output, executed through the uv package manager. The -v flag provides detailed test results.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/examples/developer-hub-python/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuv run pytest -v\n```\n\n----------------------------------------\n\nTITLE: Themed Image Component Import and Usage in React\nDESCRIPTION: React component implementation for displaying themed images for Core Vault architecture diagrams, supporting both light and dark modes\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/6-core-vault.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ThemedImage\n  alt=\"FAssets Core Vault Architecture\"\n  sources={{\n    light: useBaseUrl(\n      \"img/fassets/flare_fassets_core_vault_architecture_light.svg\",\n    ),\n    dark: useBaseUrl(\n      \"img/fassets/flare_fassets_core_vault_architecture_dark.svg\",\n    ),\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Contract Interaction Command\nDESCRIPTION: Bash command to execute the interaction script using Forge.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/evm-transaction.mdx#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nforge script script/fdcExample/EVMTransaction.s.sol:InteractWithContract --private-key $PRIVATE_KEY --rpc-url $COSTON2_RPC_URL --etherscan-api-key $FLARE_API_KEY --broadcast --ffi\n```\n\n----------------------------------------\n\nTITLE: Running the Script with Hardhat\nDESCRIPTION: A bash command that executes the TypeScript script to deploy the contract, verify it, and interact with it using Hardhat.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/evm-transaction.mdx#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nyarn hardhat run scripts/fdcExample/EVMTransaction.ts\n```\n\n----------------------------------------\n\nTITLE: Linting Rust Code with Clippy in Bash\nDESCRIPTION: Command to run the Clippy linter with auto-fix capability to catch common mistakes and improve Rust code quality.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/examples/developer-hub-rust/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo clippy --fix\n```\n\n----------------------------------------\n\nTITLE: Exposing Sample Size Increase Limit in Solidity Interface\nDESCRIPTION: The `sampleIncreaseLimit` view function within this interface reveals the governance-controlled maximum increment for expected sample size due to incentive offers. It returns a `SampleSize` type and requires no inputs, assisting participants in crafting valid offers and preventing protocol abuse. The function is purely informational, with no side effects.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/solidity-reference/IFastUpdateIncentiveManager.md#2025-04-22_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction sampleIncreaseLimit(\n) external view returns (\n    SampleSize\n);\n```\n\n----------------------------------------\n\nTITLE: Acquiring FdcHub Contract Instance via Helpers – Flare, TypeScript\nDESCRIPTION: This TypeScript async function queries the deployed Helpers contract to discover the latest FdcHub contract address, then returns a Truffle-based FdcHub contract instance at that address. It depends on the Helpers contract deployed and the FdcHub artifact. The returned contract instance is ready for method calls, ensuring all FdcHub interactions use up-to-date addresses via the registry abstraction. There are no input parameters, and the function serves as a robust abstraction against contract redeployments and network changes.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/hardhat/evm-transaction.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getFdcHub() {\\n  const helpers: HelpersInstance = await getHelpers();\\n  const fdcHubAddress: string = await helpers.getFdcHub();\\n  return await FdcHub.at(fdcHubAddress);\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Rust Project in Bash\nDESCRIPTION: Command to execute the test suite for the project using Cargo's built-in test runner.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/examples/developer-hub-rust/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo test\n```\n\n----------------------------------------\n\nTITLE: INDETERMINATE Response for Unconfirmed Block in JSON\nDESCRIPTION: This JSON snippet demonstrates the response format when querying an attestation provider for a block that has not yet been confirmed. It shows the 'INDETERMINATE' status, indicating that the attestation cannot be confirmed due to insufficient confirmations.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fdc/guides/foundry/confirm-block-height.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"INDETERMINATE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying FTSO Config with alloy-rs (Placeholder)\nDESCRIPTION: Rust code example using alloy-rs to retrieve FTSOv2 feed configurations on the Flare Testnet Coston2. Requires a Rust environment with Tokio runtime and installed dependencies.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/query-feed-configuration.mdx#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n{FtsoConfigRust}\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat Project Dependencies with yarn - Bash\nDESCRIPTION: This snippet uses yarn to install all required node dependencies for the Hardhat starter kit. Prerequisites: Node.js and yarn must be installed. Run this in the project root after cloning. Installs dependencies from package.json, similar to npm, enabling use of project scripts.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/network/guides/hardhat-foundry-starter-kit.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Formatting Go Code\nDESCRIPTION: Applies standard Go formatting to all Go files in the project and subdirectories.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/examples/developer-hub-go/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo fmt ./...\n```\n\n----------------------------------------\n\nTITLE: Compiling and Executing the FAsset Settings Script (Bash)\nDESCRIPTION: This Bash snippet shows commands to build the TypeScript project and to run the output script from the dist directory. Dependencies include an NPM script called 'build' (typically mapped to tsc or similar TypeScript compiler) and the resulting compiled JavaScript file. The user must execute these commands in the root of the project with a compatible Node.js setup. Inputs: none. Outputs: console logs as produced by the executed JS script. Limitations: assumes correct directory structure and build setup.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/fassets/developer-guides/1-fassets-asset-manager-settings-node.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnode dist/scripts/fassets-settings.js\n```\n\n----------------------------------------\n\nTITLE: Installing web3.py Dependency via uv\nDESCRIPTION: Installs the web3.py library using the 'uv' package manager, enabling interaction with the Flare network and FTSO contracts in Python.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/docs/ftso/guides/query-feed-configuration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nuv add web3\n```\n\n----------------------------------------\n\nTITLE: Running Code Linter\nDESCRIPTION: Command to execute the configured code linting tool using npm script.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/examples/developer-hub-javascript/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Formatting Rust Code with Cargo in Bash\nDESCRIPTION: Command to automatically format Rust code according to style guidelines using Cargo's formatting tool.\nSOURCE: https://github.com/flare-foundation/developer-hub.git/blob/main/examples/developer-hub-rust/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo fmt\n```"
  }
]